; ModuleID = '../../third_party/libwebp/src/dsp/yuv.c'
source_filename = "../../third_party/libwebp/src/dsp/yuv.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@WebPInitSamplers.WebPInitSamplers_body_last_cpuinfo_used = internal global i32 (i32)* bitcast (i32 (i32)** @WebPInitSamplers.WebPInitSamplers_body_last_cpuinfo_used to i32 (i32)*), align 8
@VP8GetCPUInfo = external local_unnamed_addr global i32 (i32)*, align 8
@WebPInitConvertARGBToYUV.WebPInitConvertARGBToYUV_body_last_cpuinfo_used = internal global i32 (i32)* bitcast (i32 (i32)** @WebPInitConvertARGBToYUV.WebPInitConvertARGBToYUV_body_last_cpuinfo_used to i32 (i32)*), align 8
@WebPSamplers = common hidden local_unnamed_addr global [13 x void (i8*, i8*, i8*, i8*, i32)*] zeroinitializer, align 16
@WebPConvertRGB24ToY = common hidden local_unnamed_addr global void (i8*, i8*, i32)* null, align 8
@WebPConvertBGR24ToY = common hidden local_unnamed_addr global void (i8*, i8*, i32)* null, align 8
@WebPConvertRGBA32ToUV = common hidden local_unnamed_addr global void (i16*, i8*, i8*, i32)* null, align 8
@WebPConvertARGBToY = common hidden local_unnamed_addr global void (i32*, i8*, i32)* null, align 8
@WebPConvertARGBToUV = common hidden local_unnamed_addr global void (i32*, i8*, i8*, i32, i32)* null, align 8
@WebPSharpYUVUpdateY = common hidden local_unnamed_addr global i64 (i16*, i16*, i16*, i32)* null, align 8
@WebPSharpYUVUpdateRGB = common hidden local_unnamed_addr global void (i16*, i16*, i16*, i32)* null, align 8
@WebPSharpYUVFilterRow = common hidden local_unnamed_addr global void (i16*, i16*, i32, i16*, i16*)* null, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @WebPSamplerProcessPlane(i8*, i32, i8*, i8*, i32, i8*, i32, i32, i32, void (i8*, i8*, i8*, i8*, i32)* nocapture) local_unnamed_addr #0 {
  %11 = icmp sgt i32 %8, 0
  br i1 %11, label %12, label %32

12:                                               ; preds = %10
  %13 = sext i32 %1 to i64
  %14 = sext i32 %4 to i64
  %15 = sext i32 %6 to i64
  br label %16

16:                                               ; preds = %16, %12
  %17 = phi i32 [ 0, %12 ], [ %30, %16 ]
  %18 = phi i8* [ %0, %12 ], [ %22, %16 ]
  %19 = phi i8* [ %2, %12 ], [ %28, %16 ]
  %20 = phi i8* [ %3, %12 ], [ %27, %16 ]
  %21 = phi i8* [ %5, %12 ], [ %29, %16 ]
  tail call void %9(i8* %18, i8* %19, i8* %20, i8* %21, i32 %7) #3
  %22 = getelementptr inbounds i8, i8* %18, i64 %13
  %23 = and i32 %17, 1
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds i8, i8* %19, i64 %14
  %26 = getelementptr inbounds i8, i8* %20, i64 %14
  %27 = select i1 %24, i8* %20, i8* %26
  %28 = select i1 %24, i8* %19, i8* %25
  %29 = getelementptr inbounds i8, i8* %21, i64 %15
  %30 = add nuw nsw i32 %17, 1
  %31 = icmp eq i32 %30, %8
  br i1 %31, label %32, label %16

32:                                               ; preds = %16, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebPInitSamplers() local_unnamed_addr #0 {
  %1 = load volatile i32 (i32)*, i32 (i32)** @WebPInitSamplers.WebPInitSamplers_body_last_cpuinfo_used, align 8
  %2 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %3 = icmp eq i32 (i32)* %1, %2
  br i1 %3, label %17, label %4

4:                                                ; preds = %0
  store <2 x void (i8*, i8*, i8*, i8*, i32)*> <void (i8*, i8*, i8*, i8*, i32)* @YuvToRgbRow, void (i8*, i8*, i8*, i8*, i32)* @YuvToRgbaRow>, <2 x void (i8*, i8*, i8*, i8*, i32)*>* bitcast ([13 x void (i8*, i8*, i8*, i8*, i32)*]* @WebPSamplers to <2 x void (i8*, i8*, i8*, i8*, i32)*>*), align 16
  store <2 x void (i8*, i8*, i8*, i8*, i32)*> <void (i8*, i8*, i8*, i8*, i32)* @YuvToBgrRow, void (i8*, i8*, i8*, i8*, i32)* @YuvToBgraRow>, <2 x void (i8*, i8*, i8*, i8*, i32)*>* bitcast (void (i8*, i8*, i8*, i8*, i32)** getelementptr inbounds ([13 x void (i8*, i8*, i8*, i8*, i32)*], [13 x void (i8*, i8*, i8*, i8*, i32)*]* @WebPSamplers, i64 0, i64 2) to <2 x void (i8*, i8*, i8*, i8*, i32)*>*), align 16
  store <2 x void (i8*, i8*, i8*, i8*, i32)*> <void (i8*, i8*, i8*, i8*, i32)* @YuvToArgbRow, void (i8*, i8*, i8*, i8*, i32)* @YuvToRgba4444Row>, <2 x void (i8*, i8*, i8*, i8*, i32)*>* bitcast (void (i8*, i8*, i8*, i8*, i32)** getelementptr inbounds ([13 x void (i8*, i8*, i8*, i8*, i32)*], [13 x void (i8*, i8*, i8*, i8*, i32)*]* @WebPSamplers, i64 0, i64 4) to <2 x void (i8*, i8*, i8*, i8*, i32)*>*), align 16
  store <2 x void (i8*, i8*, i8*, i8*, i32)*> <void (i8*, i8*, i8*, i8*, i32)* @YuvToRgb565Row, void (i8*, i8*, i8*, i8*, i32)* @YuvToRgbaRow>, <2 x void (i8*, i8*, i8*, i8*, i32)*>* bitcast (void (i8*, i8*, i8*, i8*, i32)** getelementptr inbounds ([13 x void (i8*, i8*, i8*, i8*, i32)*], [13 x void (i8*, i8*, i8*, i8*, i32)*]* @WebPSamplers, i64 0, i64 6) to <2 x void (i8*, i8*, i8*, i8*, i32)*>*), align 16
  store <2 x void (i8*, i8*, i8*, i8*, i32)*> <void (i8*, i8*, i8*, i8*, i32)* @YuvToBgraRow, void (i8*, i8*, i8*, i8*, i32)* @YuvToArgbRow>, <2 x void (i8*, i8*, i8*, i8*, i32)*>* bitcast (void (i8*, i8*, i8*, i8*, i32)** getelementptr inbounds ([13 x void (i8*, i8*, i8*, i8*, i32)*], [13 x void (i8*, i8*, i8*, i8*, i32)*]* @WebPSamplers, i64 0, i64 8) to <2 x void (i8*, i8*, i8*, i8*, i32)*>*), align 16
  store void (i8*, i8*, i8*, i8*, i32)* @YuvToRgba4444Row, void (i8*, i8*, i8*, i8*, i32)** getelementptr inbounds ([13 x void (i8*, i8*, i8*, i8*, i32)*], [13 x void (i8*, i8*, i8*, i8*, i32)*]* @WebPSamplers, i64 0, i64 10), align 16
  %5 = icmp eq i32 (i32)* %2, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %4
  %7 = tail call i32 %2(i32 0) #3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  tail call void @WebPInitSamplersSSE2() #3
  br label %10

10:                                               ; preds = %9, %6
  %11 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %12 = tail call i32 %11(i32 3) #3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @WebPInitSamplersSSE41() #3
  br label %15

15:                                               ; preds = %4, %10, %14
  %16 = load i64, i64* bitcast (i32 (i32)** @VP8GetCPUInfo to i64*), align 8
  store volatile i64 %16, i64* bitcast (i32 (i32)** @WebPInitSamplers.WebPInitSamplers_body_last_cpuinfo_used to i64*), align 8
  br label %17

17:                                               ; preds = %0, %15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebPConvertARGBToUV_C(i32* nocapture readonly, i8* nocapture, i8* nocapture, i32, i32) #1 {
  %6 = icmp sgt i32 %3, 1
  br i1 %6, label %7, label %81

7:                                                ; preds = %5
  %8 = lshr i32 %3, 1
  %9 = icmp eq i32 %4, 0
  %10 = zext i32 %8 to i64
  br label %11

11:                                               ; preds = %7, %76
  %12 = phi i64 [ 0, %7 ], [ %77, %76 ]
  %13 = shl nuw nsw i64 %12, 1
  %14 = getelementptr inbounds i32, i32* %0, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = or i64 %13, 1
  %17 = getelementptr inbounds i32, i32* %0, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = lshr i32 %15, 15
  %20 = and i32 %19, 510
  %21 = lshr i32 %18, 15
  %22 = and i32 %21, 510
  %23 = add nuw nsw i32 %22, %20
  %24 = lshr i32 %15, 7
  %25 = and i32 %24, 510
  %26 = lshr i32 %18, 7
  %27 = and i32 %26, 510
  %28 = add nuw nsw i32 %27, %25
  %29 = shl i32 %15, 1
  %30 = and i32 %29, 510
  %31 = shl i32 %18, 1
  %32 = and i32 %31, 510
  %33 = add nuw nsw i32 %32, %30
  %34 = mul nsw i32 %23, -9719
  %35 = mul nsw i32 %28, -19081
  %36 = mul nuw nsw i32 %33, 28800
  %37 = add nsw i32 %34, 33685504
  %38 = add nsw i32 %37, %35
  %39 = add nuw nsw i32 %38, %36
  %40 = ashr i32 %39, 18
  %41 = icmp ult i32 %40, 256
  %42 = icmp slt i32 %39, 0
  %43 = select i1 %42, i32 0, i32 255
  %44 = select i1 %41, i32 %40, i32 %43
  %45 = mul nuw nsw i32 %23, 28800
  %46 = mul nsw i32 %28, -24116
  %47 = mul nsw i32 %33, -4684
  %48 = add nuw nsw i32 %45, 33685504
  %49 = add nsw i32 %48, %46
  %50 = add nsw i32 %49, %47
  %51 = ashr i32 %50, 18
  %52 = icmp ult i32 %51, 256
  %53 = icmp slt i32 %50, 0
  %54 = select i1 %53, i32 0, i32 255
  %55 = select i1 %52, i32 %51, i32 %54
  br i1 %9, label %61, label %56

56:                                               ; preds = %11
  %57 = trunc i32 %44 to i8
  %58 = getelementptr inbounds i8, i8* %1, i64 %12
  store i8 %57, i8* %58, align 1
  %59 = trunc i32 %55 to i8
  %60 = getelementptr inbounds i8, i8* %2, i64 %12
  store i8 %59, i8* %60, align 1
  br label %76

61:                                               ; preds = %11
  %62 = getelementptr inbounds i8, i8* %1, i64 %12
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add nuw nsw i32 %44, 1
  %66 = add nuw nsw i32 %65, %64
  %67 = lshr i32 %66, 1
  %68 = trunc i32 %67 to i8
  store i8 %68, i8* %62, align 1
  %69 = getelementptr inbounds i8, i8* %2, i64 %12
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = add nuw nsw i32 %55, 1
  %73 = add nuw nsw i32 %72, %71
  %74 = lshr i32 %73, 1
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %69, align 1
  br label %76

76:                                               ; preds = %61, %56
  %77 = add nuw nsw i64 %12, 1
  %78 = icmp ult i64 %77, %10
  br i1 %78, label %11, label %79

79:                                               ; preds = %76
  %80 = trunc i64 %77 to i32
  br label %81

81:                                               ; preds = %79, %5
  %82 = phi i32 [ 0, %5 ], [ %80, %79 ]
  %83 = and i32 %3, 1
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %141, label %85

85:                                               ; preds = %81
  %86 = shl nuw nsw i32 %82, 1
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i32, i32* %0, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = lshr i32 %89, 14
  %91 = and i32 %90, 1020
  %92 = lshr i32 %89, 6
  %93 = and i32 %92, 1020
  %94 = shl i32 %89, 2
  %95 = and i32 %94, 1020
  %96 = mul nsw i32 %91, -9719
  %97 = mul nsw i32 %93, -19081
  %98 = mul nuw nsw i32 %95, 28800
  %99 = add nsw i32 %96, 33685504
  %100 = add nsw i32 %99, %97
  %101 = add nuw nsw i32 %100, %98
  %102 = ashr i32 %101, 18
  %103 = icmp ult i32 %102, 256
  %104 = icmp slt i32 %101, 0
  %105 = select i1 %104, i32 0, i32 255
  %106 = select i1 %103, i32 %102, i32 %105
  %107 = mul nuw nsw i32 %91, 28800
  %108 = mul nsw i32 %93, -24116
  %109 = mul nsw i32 %95, -4684
  %110 = add nuw nsw i32 %107, 33685504
  %111 = add nsw i32 %110, %108
  %112 = add nsw i32 %111, %109
  %113 = ashr i32 %112, 18
  %114 = icmp ult i32 %113, 256
  %115 = icmp slt i32 %112, 0
  %116 = select i1 %115, i32 0, i32 255
  %117 = select i1 %114, i32 %113, i32 %116
  %118 = icmp eq i32 %4, 0
  br i1 %118, label %125, label %119

119:                                              ; preds = %85
  %120 = trunc i32 %106 to i8
  %121 = zext i32 %82 to i64
  %122 = getelementptr inbounds i8, i8* %1, i64 %121
  store i8 %120, i8* %122, align 1
  %123 = trunc i32 %117 to i8
  %124 = getelementptr inbounds i8, i8* %2, i64 %121
  store i8 %123, i8* %124, align 1
  br label %141

125:                                              ; preds = %85
  %126 = zext i32 %82 to i64
  %127 = getelementptr inbounds i8, i8* %1, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = add nuw nsw i32 %106, 1
  %131 = add nuw nsw i32 %130, %129
  %132 = lshr i32 %131, 1
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %127, align 1
  %134 = getelementptr inbounds i8, i8* %2, i64 %126
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = add nuw nsw i32 %117, 1
  %138 = add nuw nsw i32 %137, %136
  %139 = lshr i32 %138, 1
  %140 = trunc i32 %139 to i8
  store i8 %140, i8* %134, align 1
  br label %141

141:                                              ; preds = %119, %125, %81
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebPConvertRGBA32ToUV_C(i16* nocapture readonly, i8* nocapture, i8* nocapture, i32) #1 {
  %5 = bitcast i16* %0 to i8*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %120

7:                                                ; preds = %4
  %8 = zext i32 %3 to i64
  %9 = icmp ult i32 %3, 9
  br i1 %9, label %77, label %10

10:                                               ; preds = %7
  %11 = getelementptr i8, i8* %1, i64 %8
  %12 = getelementptr i8, i8* %2, i64 %8
  %13 = shl nuw nsw i64 %8, 2
  %14 = add nsw i64 %13, -1
  %15 = getelementptr i16, i16* %0, i64 %14
  %16 = bitcast i16* %15 to i8*
  %17 = icmp ugt i8* %12, %1
  %18 = icmp ugt i8* %11, %2
  %19 = and i1 %17, %18
  %20 = icmp ugt i8* %16, %1
  %21 = icmp ugt i8* %11, %5
  %22 = and i1 %20, %21
  %23 = or i1 %19, %22
  %24 = icmp ugt i8* %16, %2
  %25 = icmp ugt i8* %12, %5
  %26 = and i1 %24, %25
  %27 = or i1 %23, %26
  br i1 %27, label %77, label %28

28:                                               ; preds = %10
  %29 = and i64 %8, 7
  %30 = icmp eq i64 %29, 0
  %31 = select i1 %30, i64 8, i64 %29
  %32 = sub nsw i64 %8, %31
  %33 = shl nsw i64 %32, 2
  %34 = getelementptr i16, i16* %0, i64 %33
  br label %35

35:                                               ; preds = %35, %28
  %36 = phi i64 [ 0, %28 ], [ %75, %35 ]
  %37 = shl i64 %36, 2
  %38 = getelementptr i16, i16* %0, i64 %37
  %39 = bitcast i16* %38 to <32 x i16>*
  %40 = load <32 x i16>, <32 x i16>* %39, align 2
  %41 = shufflevector <32 x i16> %40, <32 x i16> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %42 = shufflevector <32 x i16> %40, <32 x i16> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %43 = shufflevector <32 x i16> %40, <32 x i16> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %44 = zext <8 x i16> %41 to <8 x i32>
  %45 = zext <8 x i16> %42 to <8 x i32>
  %46 = zext <8 x i16> %43 to <8 x i32>
  %47 = mul nsw <8 x i32> %44, <i32 -9719, i32 -9719, i32 -9719, i32 -9719, i32 -9719, i32 -9719, i32 -9719, i32 -9719>
  %48 = mul nsw <8 x i32> %45, <i32 -19081, i32 -19081, i32 -19081, i32 -19081, i32 -19081, i32 -19081, i32 -19081, i32 -19081>
  %49 = mul nuw nsw <8 x i32> %46, <i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800>
  %50 = add nsw <8 x i32> %47, <i32 33685504, i32 33685504, i32 33685504, i32 33685504, i32 33685504, i32 33685504, i32 33685504, i32 33685504>
  %51 = add nsw <8 x i32> %50, %48
  %52 = add nsw <8 x i32> %51, %49
  %53 = ashr <8 x i32> %52, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %54 = icmp ult <8 x i32> %53, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %55 = icmp slt <8 x i32> %52, zeroinitializer
  %56 = select <8 x i1> %55, <8 x i32> zeroinitializer, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %57 = select <8 x i1> %54, <8 x i32> %53, <8 x i32> %56
  %58 = trunc <8 x i32> %57 to <8 x i8>
  %59 = getelementptr inbounds i8, i8* %1, i64 %36
  %60 = bitcast i8* %59 to <8 x i8>*
  store <8 x i8> %58, <8 x i8>* %60, align 1, !alias.scope !2, !noalias !5
  %61 = mul nuw nsw <8 x i32> %44, <i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800>
  %62 = mul nsw <8 x i32> %45, <i32 -24116, i32 -24116, i32 -24116, i32 -24116, i32 -24116, i32 -24116, i32 -24116, i32 -24116>
  %63 = mul nsw <8 x i32> %46, <i32 -4684, i32 -4684, i32 -4684, i32 -4684, i32 -4684, i32 -4684, i32 -4684, i32 -4684>
  %64 = add nuw nsw <8 x i32> %61, <i32 33685504, i32 33685504, i32 33685504, i32 33685504, i32 33685504, i32 33685504, i32 33685504, i32 33685504>
  %65 = add nsw <8 x i32> %64, %62
  %66 = add nsw <8 x i32> %65, %63
  %67 = ashr <8 x i32> %66, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %68 = icmp ult <8 x i32> %67, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %69 = icmp slt <8 x i32> %66, zeroinitializer
  %70 = select <8 x i1> %69, <8 x i32> zeroinitializer, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %71 = select <8 x i1> %68, <8 x i32> %67, <8 x i32> %70
  %72 = trunc <8 x i32> %71 to <8 x i8>
  %73 = getelementptr inbounds i8, i8* %2, i64 %36
  %74 = bitcast i8* %73 to <8 x i8>*
  store <8 x i8> %72, <8 x i8>* %74, align 1, !alias.scope !8, !noalias !9
  %75 = add i64 %36, 8
  %76 = icmp eq i64 %75, %32
  br i1 %76, label %77, label %35, !llvm.loop !10

77:                                               ; preds = %35, %10, %7
  %78 = phi i64 [ 0, %10 ], [ 0, %7 ], [ %32, %35 ]
  %79 = phi i16* [ %0, %10 ], [ %0, %7 ], [ %34, %35 ]
  br label %80

80:                                               ; preds = %77, %80
  %81 = phi i64 [ %117, %80 ], [ %78, %77 ]
  %82 = phi i16* [ %118, %80 ], [ %79, %77 ]
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = getelementptr inbounds i16, i16* %82, i64 1
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = getelementptr inbounds i16, i16* %82, i64 2
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = mul nsw i32 %84, -9719
  %92 = mul nsw i32 %87, -19081
  %93 = mul nuw nsw i32 %90, 28800
  %94 = add nsw i32 %91, 33685504
  %95 = add nsw i32 %94, %92
  %96 = add nsw i32 %95, %93
  %97 = ashr i32 %96, 18
  %98 = icmp ult i32 %97, 256
  %99 = icmp slt i32 %96, 0
  %100 = select i1 %99, i32 0, i32 255
  %101 = select i1 %98, i32 %97, i32 %100
  %102 = trunc i32 %101 to i8
  %103 = getelementptr inbounds i8, i8* %1, i64 %81
  store i8 %102, i8* %103, align 1
  %104 = mul nuw nsw i32 %84, 28800
  %105 = mul nsw i32 %87, -24116
  %106 = mul nsw i32 %90, -4684
  %107 = add nuw nsw i32 %104, 33685504
  %108 = add nsw i32 %107, %105
  %109 = add nsw i32 %108, %106
  %110 = ashr i32 %109, 18
  %111 = icmp ult i32 %110, 256
  %112 = icmp slt i32 %109, 0
  %113 = select i1 %112, i32 0, i32 255
  %114 = select i1 %111, i32 %110, i32 %113
  %115 = trunc i32 %114 to i8
  %116 = getelementptr inbounds i8, i8* %2, i64 %81
  store i8 %115, i8* %116, align 1
  %117 = add nuw nsw i64 %81, 1
  %118 = getelementptr inbounds i16, i16* %82, i64 4
  %119 = icmp eq i64 %117, %8
  br i1 %119, label %120, label %80, !llvm.loop !12

120:                                              ; preds = %80, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebPInitConvertARGBToYUV() local_unnamed_addr #0 {
  %1 = load volatile i32 (i32)*, i32 (i32)** @WebPInitConvertARGBToYUV.WebPInitConvertARGBToYUV_body_last_cpuinfo_used, align 8
  %2 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %3 = icmp eq i32 (i32)* %1, %2
  br i1 %3, label %17, label %4

4:                                                ; preds = %0
  store void (i32*, i8*, i32)* @ConvertARGBToY_C, void (i32*, i8*, i32)** @WebPConvertARGBToY, align 8
  store void (i32*, i8*, i8*, i32, i32)* @WebPConvertARGBToUV_C, void (i32*, i8*, i8*, i32, i32)** @WebPConvertARGBToUV, align 8
  store void (i8*, i8*, i32)* @ConvertRGB24ToY_C, void (i8*, i8*, i32)** @WebPConvertRGB24ToY, align 8
  store void (i8*, i8*, i32)* @ConvertBGR24ToY_C, void (i8*, i8*, i32)** @WebPConvertBGR24ToY, align 8
  store void (i16*, i8*, i8*, i32)* @WebPConvertRGBA32ToUV_C, void (i16*, i8*, i8*, i32)** @WebPConvertRGBA32ToUV, align 8
  store i64 (i16*, i16*, i16*, i32)* @SharpYUVUpdateY_C, i64 (i16*, i16*, i16*, i32)** @WebPSharpYUVUpdateY, align 8
  store void (i16*, i16*, i16*, i32)* @SharpYUVUpdateRGB_C, void (i16*, i16*, i16*, i32)** @WebPSharpYUVUpdateRGB, align 8
  store void (i16*, i16*, i32, i16*, i16*)* @SharpYUVFilterRow_C, void (i16*, i16*, i32, i16*, i16*)** @WebPSharpYUVFilterRow, align 8
  %5 = icmp eq i32 (i32)* %2, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %4
  %7 = tail call i32 %2(i32 0) #3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  tail call void @WebPInitConvertARGBToYUVSSE2() #3
  tail call void @WebPInitSharpYUVSSE2() #3
  br label %10

10:                                               ; preds = %9, %6
  %11 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %12 = tail call i32 %11(i32 3) #3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @WebPInitConvertARGBToYUVSSE41() #3
  br label %15

15:                                               ; preds = %4, %10, %14
  %16 = load i64, i64* bitcast (i32 (i32)** @VP8GetCPUInfo to i64*), align 8
  store volatile i64 %16, i64* bitcast (i32 (i32)** @WebPInitConvertARGBToYUV.WebPInitConvertARGBToYUV_body_last_cpuinfo_used to i64*), align 8
  br label %17

17:                                               ; preds = %0, %15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @YuvToRgbRow(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8*, i32) #1 {
  %6 = and i32 %4, -2
  %7 = mul nsw i32 %6, 3
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %3, i64 %8
  %10 = icmp eq i32 %6, 0
  br i1 %10, label %256, label %11

11:                                               ; preds = %5
  %12 = add nsw i64 %8, -6
  %13 = udiv i64 %12, 6
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 16
  br i1 %15, label %153, label %16

16:                                               ; preds = %11
  %17 = add nsw i64 %8, -6
  %18 = udiv i64 %17, 6
  %19 = mul nuw i64 %18, 6
  %20 = add i64 %19, 6
  %21 = getelementptr i8, i8* %3, i64 %20
  %22 = shl nuw nsw i64 %18, 1
  %23 = add nuw nsw i64 %22, 2
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = add nuw nsw i64 %18, 1
  %26 = getelementptr i8, i8* %1, i64 %25
  %27 = getelementptr i8, i8* %2, i64 %25
  %28 = icmp ugt i8* %24, %3
  %29 = icmp ugt i8* %21, %0
  %30 = and i1 %28, %29
  %31 = icmp ugt i8* %26, %3
  %32 = icmp ugt i8* %21, %1
  %33 = and i1 %31, %32
  %34 = or i1 %30, %33
  %35 = icmp ugt i8* %27, %3
  %36 = icmp ugt i8* %21, %2
  %37 = and i1 %35, %36
  %38 = or i1 %34, %37
  br i1 %38, label %153, label %39

39:                                               ; preds = %16
  %40 = and i64 %14, 9223372036854775792
  %41 = shl nuw i64 %40, 1
  %42 = getelementptr i8, i8* %0, i64 %41
  %43 = mul i64 %40, 6
  %44 = getelementptr i8, i8* %3, i64 %43
  %45 = getelementptr i8, i8* %2, i64 %40
  %46 = getelementptr i8, i8* %1, i64 %40
  br label %47

47:                                               ; preds = %47, %39
  %48 = phi i64 [ 0, %39 ], [ %149, %47 ]
  %49 = shl i64 %48, 1
  %50 = getelementptr i8, i8* %0, i64 %49
  %51 = mul i64 %48, 6
  %52 = getelementptr i8, i8* %2, i64 %48
  %53 = getelementptr i8, i8* %1, i64 %48
  %54 = bitcast i8* %50 to <32 x i8>*
  %55 = load <32 x i8>, <32 x i8>* %54, align 1
  %56 = shufflevector <32 x i8> %55, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %57 = shufflevector <32 x i8> %55, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %58 = zext <16 x i8> %56 to <16 x i32>
  %59 = bitcast i8* %53 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !13
  %61 = zext <16 x i8> %60 to <16 x i32>
  %62 = bitcast i8* %52 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !16
  %64 = zext <16 x i8> %63 to <16 x i32>
  %65 = mul nuw nsw <16 x i32> %58, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %66 = lshr <16 x i32> %65, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %67 = mul nuw nsw <16 x i32> %64, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %68 = lshr <16 x i32> %67, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %69 = add nsw <16 x i32> %66, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %70 = add nsw <16 x i32> %69, %68
  %71 = icmp ult <16 x i32> %70, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %72 = lshr <16 x i32> %70, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %73 = icmp slt <16 x i32> %70, zeroinitializer
  %74 = select <16 x i1> %73, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %75 = select <16 x i1> %71, <16 x i32> %72, <16 x i32> %74
  %76 = trunc <16 x i32> %75 to <16 x i8>
  %77 = mul nuw nsw <16 x i32> %61, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %78 = lshr <16 x i32> %77, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %79 = mul nuw nsw <16 x i32> %64, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %80 = lshr <16 x i32> %79, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %81 = add nuw nsw <16 x i32> %66, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %82 = sub nuw nsw <16 x i32> %81, %78
  %83 = sub nsw <16 x i32> %82, %80
  %84 = icmp ult <16 x i32> %83, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %85 = lshr <16 x i32> %83, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %86 = icmp slt <16 x i32> %83, zeroinitializer
  %87 = select <16 x i1> %86, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %88 = select <16 x i1> %84, <16 x i32> %85, <16 x i32> %87
  %89 = trunc <16 x i32> %88 to <16 x i8>
  %90 = mul nuw nsw <16 x i32> %61, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %91 = lshr <16 x i32> %90, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %92 = add nsw <16 x i32> %66, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %93 = add nsw <16 x i32> %92, %91
  %94 = icmp ult <16 x i32> %93, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %95 = lshr <16 x i32> %93, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %96 = icmp slt <16 x i32> %93, zeroinitializer
  %97 = select <16 x i1> %96, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %98 = select <16 x i1> %94, <16 x i32> %95, <16 x i32> %97
  %99 = trunc <16 x i32> %98 to <16 x i8>
  %100 = zext <16 x i8> %57 to <16 x i32>
  %101 = bitcast i8* %53 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1, !alias.scope !13
  %103 = zext <16 x i8> %102 to <16 x i32>
  %104 = bitcast i8* %52 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1, !alias.scope !16
  %106 = zext <16 x i8> %105 to <16 x i32>
  %107 = mul nuw nsw <16 x i32> %100, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %108 = lshr <16 x i32> %107, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %109 = mul nuw nsw <16 x i32> %106, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %110 = lshr <16 x i32> %109, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %111 = add nsw <16 x i32> %108, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %112 = add nsw <16 x i32> %111, %110
  %113 = icmp ult <16 x i32> %112, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %114 = lshr <16 x i32> %112, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %115 = icmp slt <16 x i32> %112, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %117 = select <16 x i1> %113, <16 x i32> %114, <16 x i32> %116
  %118 = trunc <16 x i32> %117 to <16 x i8>
  %119 = mul nuw nsw <16 x i32> %103, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %120 = lshr <16 x i32> %119, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %121 = mul nuw nsw <16 x i32> %106, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %122 = lshr <16 x i32> %121, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %123 = add nuw nsw <16 x i32> %108, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %124 = sub nuw nsw <16 x i32> %123, %120
  %125 = sub nsw <16 x i32> %124, %122
  %126 = icmp ult <16 x i32> %125, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %127 = lshr <16 x i32> %125, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %128 = icmp slt <16 x i32> %125, zeroinitializer
  %129 = select <16 x i1> %128, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %130 = select <16 x i1> %126, <16 x i32> %127, <16 x i32> %129
  %131 = trunc <16 x i32> %130 to <16 x i8>
  %132 = mul nuw nsw <16 x i32> %103, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %133 = lshr <16 x i32> %132, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %134 = add nsw <16 x i32> %108, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %135 = add nsw <16 x i32> %134, %133
  %136 = icmp ult <16 x i32> %135, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %137 = lshr <16 x i32> %135, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %138 = icmp slt <16 x i32> %135, zeroinitializer
  %139 = select <16 x i1> %138, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %140 = select <16 x i1> %136, <16 x i32> %137, <16 x i32> %139
  %141 = trunc <16 x i32> %140 to <16 x i8>
  %142 = getelementptr inbounds i8, i8* %3, i64 %51
  %143 = bitcast i8* %142 to <96 x i8>*
  %144 = shufflevector <16 x i8> %76, <16 x i8> %89, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %145 = shufflevector <16 x i8> %99, <16 x i8> %118, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %146 = shufflevector <32 x i8> %144, <32 x i8> %145, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %147 = shufflevector <16 x i8> %131, <16 x i8> %141, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = shufflevector <64 x i8> %146, <64 x i8> %147, <96 x i32> <i32 0, i32 16, i32 32, i32 48, i32 64, i32 80, i32 1, i32 17, i32 33, i32 49, i32 65, i32 81, i32 2, i32 18, i32 34, i32 50, i32 66, i32 82, i32 3, i32 19, i32 35, i32 51, i32 67, i32 83, i32 4, i32 20, i32 36, i32 52, i32 68, i32 84, i32 5, i32 21, i32 37, i32 53, i32 69, i32 85, i32 6, i32 22, i32 38, i32 54, i32 70, i32 86, i32 7, i32 23, i32 39, i32 55, i32 71, i32 87, i32 8, i32 24, i32 40, i32 56, i32 72, i32 88, i32 9, i32 25, i32 41, i32 57, i32 73, i32 89, i32 10, i32 26, i32 42, i32 58, i32 74, i32 90, i32 11, i32 27, i32 43, i32 59, i32 75, i32 91, i32 12, i32 28, i32 44, i32 60, i32 76, i32 92, i32 13, i32 29, i32 45, i32 61, i32 77, i32 93, i32 14, i32 30, i32 46, i32 62, i32 78, i32 94, i32 15, i32 31, i32 47, i32 63, i32 79, i32 95>
  store <96 x i8> %148, <96 x i8>* %143, align 1
  %149 = add i64 %48, 16
  %150 = icmp eq i64 %149, %40
  br i1 %150, label %151, label %47, !llvm.loop !18

151:                                              ; preds = %47
  %152 = icmp eq i64 %14, %40
  br i1 %152, label %256, label %153

153:                                              ; preds = %151, %16, %11
  %154 = phi i8* [ %0, %16 ], [ %0, %11 ], [ %42, %151 ]
  %155 = phi i8* [ %3, %16 ], [ %3, %11 ], [ %44, %151 ]
  %156 = phi i8* [ %2, %16 ], [ %2, %11 ], [ %45, %151 ]
  %157 = phi i8* [ %1, %16 ], [ %1, %11 ], [ %46, %151 ]
  br label %158

158:                                              ; preds = %153, %158
  %159 = phi i8* [ %251, %158 ], [ %154, %153 ]
  %160 = phi i8* [ %254, %158 ], [ %155, %153 ]
  %161 = phi i8* [ %253, %158 ], [ %156, %153 ]
  %162 = phi i8* [ %252, %158 ], [ %157, %153 ]
  %163 = load i8, i8* %159, align 1
  %164 = zext i8 %163 to i32
  %165 = load i8, i8* %162, align 1
  %166 = zext i8 %165 to i32
  %167 = load i8, i8* %161, align 1
  %168 = zext i8 %167 to i32
  %169 = mul nuw nsw i32 %164, 19077
  %170 = lshr i32 %169, 8
  %171 = mul nuw nsw i32 %168, 26149
  %172 = lshr i32 %171, 8
  %173 = add nsw i32 %170, -14234
  %174 = add nsw i32 %173, %172
  %175 = icmp ult i32 %174, 16384
  %176 = lshr i32 %174, 6
  %177 = icmp slt i32 %174, 0
  %178 = select i1 %177, i32 0, i32 255
  %179 = select i1 %175, i32 %176, i32 %178
  %180 = trunc i32 %179 to i8
  store i8 %180, i8* %160, align 1
  %181 = mul nuw nsw i32 %166, 6419
  %182 = lshr i32 %181, 8
  %183 = mul nuw nsw i32 %168, 13320
  %184 = lshr i32 %183, 8
  %185 = add nuw nsw i32 %170, 8708
  %186 = sub nuw nsw i32 %185, %182
  %187 = sub nsw i32 %186, %184
  %188 = icmp ult i32 %187, 16384
  %189 = lshr i32 %187, 6
  %190 = icmp slt i32 %187, 0
  %191 = select i1 %190, i32 0, i32 255
  %192 = select i1 %188, i32 %189, i32 %191
  %193 = trunc i32 %192 to i8
  %194 = getelementptr inbounds i8, i8* %160, i64 1
  store i8 %193, i8* %194, align 1
  %195 = mul nuw nsw i32 %166, 33050
  %196 = lshr i32 %195, 8
  %197 = add nsw i32 %170, -17685
  %198 = add nsw i32 %197, %196
  %199 = icmp ult i32 %198, 16384
  %200 = lshr i32 %198, 6
  %201 = icmp slt i32 %198, 0
  %202 = select i1 %201, i32 0, i32 255
  %203 = select i1 %199, i32 %200, i32 %202
  %204 = trunc i32 %203 to i8
  %205 = getelementptr inbounds i8, i8* %160, i64 2
  store i8 %204, i8* %205, align 1
  %206 = getelementptr inbounds i8, i8* %159, i64 1
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = load i8, i8* %162, align 1
  %210 = zext i8 %209 to i32
  %211 = load i8, i8* %161, align 1
  %212 = zext i8 %211 to i32
  %213 = getelementptr inbounds i8, i8* %160, i64 3
  %214 = mul nuw nsw i32 %208, 19077
  %215 = lshr i32 %214, 8
  %216 = mul nuw nsw i32 %212, 26149
  %217 = lshr i32 %216, 8
  %218 = add nsw i32 %215, -14234
  %219 = add nsw i32 %218, %217
  %220 = icmp ult i32 %219, 16384
  %221 = lshr i32 %219, 6
  %222 = icmp slt i32 %219, 0
  %223 = select i1 %222, i32 0, i32 255
  %224 = select i1 %220, i32 %221, i32 %223
  %225 = trunc i32 %224 to i8
  store i8 %225, i8* %213, align 1
  %226 = mul nuw nsw i32 %210, 6419
  %227 = lshr i32 %226, 8
  %228 = mul nuw nsw i32 %212, 13320
  %229 = lshr i32 %228, 8
  %230 = add nuw nsw i32 %215, 8708
  %231 = sub nuw nsw i32 %230, %227
  %232 = sub nsw i32 %231, %229
  %233 = icmp ult i32 %232, 16384
  %234 = lshr i32 %232, 6
  %235 = icmp slt i32 %232, 0
  %236 = select i1 %235, i32 0, i32 255
  %237 = select i1 %233, i32 %234, i32 %236
  %238 = trunc i32 %237 to i8
  %239 = getelementptr inbounds i8, i8* %160, i64 4
  store i8 %238, i8* %239, align 1
  %240 = mul nuw nsw i32 %210, 33050
  %241 = lshr i32 %240, 8
  %242 = add nsw i32 %215, -17685
  %243 = add nsw i32 %242, %241
  %244 = icmp ult i32 %243, 16384
  %245 = lshr i32 %243, 6
  %246 = icmp slt i32 %243, 0
  %247 = select i1 %246, i32 0, i32 255
  %248 = select i1 %244, i32 %245, i32 %247
  %249 = trunc i32 %248 to i8
  %250 = getelementptr inbounds i8, i8* %160, i64 5
  store i8 %249, i8* %250, align 1
  %251 = getelementptr inbounds i8, i8* %159, i64 2
  %252 = getelementptr inbounds i8, i8* %162, i64 1
  %253 = getelementptr inbounds i8, i8* %161, i64 1
  %254 = getelementptr inbounds i8, i8* %160, i64 6
  %255 = icmp eq i8* %254, %9
  br i1 %255, label %256, label %158, !llvm.loop !19

256:                                              ; preds = %158, %151, %5
  %257 = phi i8* [ %1, %5 ], [ %46, %151 ], [ %252, %158 ]
  %258 = phi i8* [ %2, %5 ], [ %45, %151 ], [ %253, %158 ]
  %259 = phi i8* [ %3, %5 ], [ %9, %151 ], [ %9, %158 ]
  %260 = phi i8* [ %0, %5 ], [ %42, %151 ], [ %251, %158 ]
  %261 = and i32 %4, 1
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %307, label %263

263:                                              ; preds = %256
  %264 = load i8, i8* %260, align 1
  %265 = zext i8 %264 to i32
  %266 = load i8, i8* %257, align 1
  %267 = zext i8 %266 to i32
  %268 = load i8, i8* %258, align 1
  %269 = zext i8 %268 to i32
  %270 = mul nuw nsw i32 %265, 19077
  %271 = lshr i32 %270, 8
  %272 = mul nuw nsw i32 %269, 26149
  %273 = lshr i32 %272, 8
  %274 = add nsw i32 %271, -14234
  %275 = add nsw i32 %274, %273
  %276 = icmp ult i32 %275, 16384
  %277 = lshr i32 %275, 6
  %278 = icmp slt i32 %275, 0
  %279 = select i1 %278, i32 0, i32 255
  %280 = select i1 %276, i32 %277, i32 %279
  %281 = trunc i32 %280 to i8
  store i8 %281, i8* %259, align 1
  %282 = mul nuw nsw i32 %267, 6419
  %283 = lshr i32 %282, 8
  %284 = mul nuw nsw i32 %269, 13320
  %285 = lshr i32 %284, 8
  %286 = add nuw nsw i32 %271, 8708
  %287 = sub nuw nsw i32 %286, %283
  %288 = sub nsw i32 %287, %285
  %289 = icmp ult i32 %288, 16384
  %290 = lshr i32 %288, 6
  %291 = icmp slt i32 %288, 0
  %292 = select i1 %291, i32 0, i32 255
  %293 = select i1 %289, i32 %290, i32 %292
  %294 = trunc i32 %293 to i8
  %295 = getelementptr inbounds i8, i8* %259, i64 1
  store i8 %294, i8* %295, align 1
  %296 = mul nuw nsw i32 %267, 33050
  %297 = lshr i32 %296, 8
  %298 = add nsw i32 %271, -17685
  %299 = add nsw i32 %298, %297
  %300 = icmp ult i32 %299, 16384
  %301 = lshr i32 %299, 6
  %302 = icmp slt i32 %299, 0
  %303 = select i1 %302, i32 0, i32 255
  %304 = select i1 %300, i32 %301, i32 %303
  %305 = trunc i32 %304 to i8
  %306 = getelementptr inbounds i8, i8* %259, i64 2
  store i8 %305, i8* %306, align 1
  br label %307

307:                                              ; preds = %256, %263
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @YuvToRgbaRow(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8*, i32) #1 {
  %6 = shl i32 %4, 2
  %7 = and i32 %6, -8
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %3, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %258, label %11

11:                                               ; preds = %5
  %12 = add nsw i64 %8, -8
  %13 = lshr exact i64 %12, 3
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 16
  br i1 %15, label %153, label %16

16:                                               ; preds = %11
  %17 = add nsw i64 %8, -8
  %18 = lshr exact i64 %17, 3
  %19 = getelementptr i8, i8* %3, i64 %8
  %20 = lshr exact i64 %17, 2
  %21 = add nuw nsw i64 %20, 2
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = add nuw nsw i64 %18, 1
  %24 = getelementptr i8, i8* %1, i64 %23
  %25 = getelementptr i8, i8* %2, i64 %23
  %26 = icmp ugt i8* %22, %3
  %27 = icmp ugt i8* %19, %0
  %28 = and i1 %26, %27
  %29 = icmp ugt i8* %24, %3
  %30 = icmp ugt i8* %19, %1
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  %33 = icmp ugt i8* %25, %3
  %34 = icmp ugt i8* %19, %2
  %35 = and i1 %33, %34
  %36 = or i1 %32, %35
  br i1 %36, label %153, label %37

37:                                               ; preds = %16
  %38 = and i64 %14, 4611686018427387888
  %39 = shl nuw nsw i64 %38, 1
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = shl i64 %38, 3
  %42 = getelementptr i8, i8* %3, i64 %41
  %43 = getelementptr i8, i8* %2, i64 %38
  %44 = getelementptr i8, i8* %1, i64 %38
  br label %45

45:                                               ; preds = %45, %37
  %46 = phi i64 [ 0, %37 ], [ %149, %45 ]
  %47 = shl i64 %46, 1
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = shl i64 %46, 3
  %50 = getelementptr i8, i8* %2, i64 %46
  %51 = getelementptr i8, i8* %1, i64 %46
  %52 = bitcast i8* %48 to <32 x i8>*
  %53 = load <32 x i8>, <32 x i8>* %52, align 1
  %54 = shufflevector <32 x i8> %53, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %55 = shufflevector <32 x i8> %53, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %56 = bitcast i8* %51 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !20
  %58 = bitcast i8* %50 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !23
  %60 = zext <16 x i8> %54 to <16 x i32>
  %61 = zext <16 x i8> %57 to <16 x i32>
  %62 = zext <16 x i8> %59 to <16 x i32>
  %63 = mul nuw nsw <16 x i32> %60, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %64 = lshr <16 x i32> %63, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %65 = mul nuw nsw <16 x i32> %62, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %66 = lshr <16 x i32> %65, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %67 = add nsw <16 x i32> %64, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %68 = add nsw <16 x i32> %67, %66
  %69 = icmp ult <16 x i32> %68, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %70 = lshr <16 x i32> %68, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %71 = icmp slt <16 x i32> %68, zeroinitializer
  %72 = select <16 x i1> %71, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %73 = select <16 x i1> %69, <16 x i32> %70, <16 x i32> %72
  %74 = trunc <16 x i32> %73 to <16 x i8>
  %75 = mul nuw nsw <16 x i32> %61, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %76 = lshr <16 x i32> %75, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %77 = mul nuw nsw <16 x i32> %62, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %78 = lshr <16 x i32> %77, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %79 = add nuw nsw <16 x i32> %64, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %80 = sub nuw nsw <16 x i32> %79, %76
  %81 = sub nsw <16 x i32> %80, %78
  %82 = icmp ult <16 x i32> %81, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %83 = lshr <16 x i32> %81, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %84 = icmp slt <16 x i32> %81, zeroinitializer
  %85 = select <16 x i1> %84, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %86 = select <16 x i1> %82, <16 x i32> %83, <16 x i32> %85
  %87 = trunc <16 x i32> %86 to <16 x i8>
  %88 = mul nuw nsw <16 x i32> %61, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %89 = lshr <16 x i32> %88, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %90 = add nsw <16 x i32> %64, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %91 = add nsw <16 x i32> %90, %89
  %92 = icmp ult <16 x i32> %91, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %93 = lshr <16 x i32> %91, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %94 = icmp slt <16 x i32> %91, zeroinitializer
  %95 = select <16 x i1> %94, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %96 = select <16 x i1> %92, <16 x i32> %93, <16 x i32> %95
  %97 = trunc <16 x i32> %96 to <16 x i8>
  %98 = bitcast i8* %51 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1, !alias.scope !20
  %100 = bitcast i8* %50 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !23
  %102 = zext <16 x i8> %55 to <16 x i32>
  %103 = zext <16 x i8> %99 to <16 x i32>
  %104 = zext <16 x i8> %101 to <16 x i32>
  %105 = mul nuw nsw <16 x i32> %102, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %106 = lshr <16 x i32> %105, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %107 = mul nuw nsw <16 x i32> %104, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %108 = lshr <16 x i32> %107, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %109 = add nsw <16 x i32> %106, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %110 = add nsw <16 x i32> %109, %108
  %111 = icmp ult <16 x i32> %110, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %112 = lshr <16 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %113 = icmp slt <16 x i32> %110, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %115 = select <16 x i1> %111, <16 x i32> %112, <16 x i32> %114
  %116 = trunc <16 x i32> %115 to <16 x i8>
  %117 = mul nuw nsw <16 x i32> %103, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %118 = lshr <16 x i32> %117, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %119 = mul nuw nsw <16 x i32> %104, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %120 = lshr <16 x i32> %119, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %121 = add nuw nsw <16 x i32> %106, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %122 = sub nuw nsw <16 x i32> %121, %118
  %123 = sub nsw <16 x i32> %122, %120
  %124 = icmp ult <16 x i32> %123, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %125 = lshr <16 x i32> %123, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %126 = icmp slt <16 x i32> %123, zeroinitializer
  %127 = select <16 x i1> %126, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %128 = select <16 x i1> %124, <16 x i32> %125, <16 x i32> %127
  %129 = trunc <16 x i32> %128 to <16 x i8>
  %130 = mul nuw nsw <16 x i32> %103, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %131 = lshr <16 x i32> %130, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %132 = add nsw <16 x i32> %106, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %133 = add nsw <16 x i32> %132, %131
  %134 = icmp ult <16 x i32> %133, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %135 = lshr <16 x i32> %133, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %136 = icmp slt <16 x i32> %133, zeroinitializer
  %137 = select <16 x i1> %136, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %138 = select <16 x i1> %134, <16 x i32> %135, <16 x i32> %137
  %139 = trunc <16 x i32> %138 to <16 x i8>
  %140 = getelementptr inbounds i8, i8* %3, i64 %49
  %141 = bitcast i8* %140 to <128 x i8>*
  %142 = shufflevector <16 x i8> %74, <16 x i8> %87, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %143 = shufflevector <16 x i8> %97, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %144 = shufflevector <16 x i8> %116, <16 x i8> %129, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %145 = shufflevector <16 x i8> %139, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %146 = shufflevector <32 x i8> %142, <32 x i8> %143, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %147 = shufflevector <32 x i8> %144, <32 x i8> %145, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %148 = shufflevector <64 x i8> %146, <64 x i8> %147, <128 x i32> <i32 0, i32 16, i32 32, i32 48, i32 64, i32 80, i32 96, i32 112, i32 1, i32 17, i32 33, i32 49, i32 65, i32 81, i32 97, i32 113, i32 2, i32 18, i32 34, i32 50, i32 66, i32 82, i32 98, i32 114, i32 3, i32 19, i32 35, i32 51, i32 67, i32 83, i32 99, i32 115, i32 4, i32 20, i32 36, i32 52, i32 68, i32 84, i32 100, i32 116, i32 5, i32 21, i32 37, i32 53, i32 69, i32 85, i32 101, i32 117, i32 6, i32 22, i32 38, i32 54, i32 70, i32 86, i32 102, i32 118, i32 7, i32 23, i32 39, i32 55, i32 71, i32 87, i32 103, i32 119, i32 8, i32 24, i32 40, i32 56, i32 72, i32 88, i32 104, i32 120, i32 9, i32 25, i32 41, i32 57, i32 73, i32 89, i32 105, i32 121, i32 10, i32 26, i32 42, i32 58, i32 74, i32 90, i32 106, i32 122, i32 11, i32 27, i32 43, i32 59, i32 75, i32 91, i32 107, i32 123, i32 12, i32 28, i32 44, i32 60, i32 76, i32 92, i32 108, i32 124, i32 13, i32 29, i32 45, i32 61, i32 77, i32 93, i32 109, i32 125, i32 14, i32 30, i32 46, i32 62, i32 78, i32 94, i32 110, i32 126, i32 15, i32 31, i32 47, i32 63, i32 79, i32 95, i32 111, i32 127>
  store <128 x i8> %148, <128 x i8>* %141, align 1
  %149 = add i64 %46, 16
  %150 = icmp eq i64 %149, %38
  br i1 %150, label %151, label %45, !llvm.loop !25

151:                                              ; preds = %45
  %152 = icmp eq i64 %14, %38
  br i1 %152, label %258, label %153

153:                                              ; preds = %151, %16, %11
  %154 = phi i8* [ %0, %16 ], [ %0, %11 ], [ %40, %151 ]
  %155 = phi i8* [ %3, %16 ], [ %3, %11 ], [ %42, %151 ]
  %156 = phi i8* [ %2, %16 ], [ %2, %11 ], [ %43, %151 ]
  %157 = phi i8* [ %1, %16 ], [ %1, %11 ], [ %44, %151 ]
  br label %158

158:                                              ; preds = %153, %158
  %159 = phi i8* [ %253, %158 ], [ %154, %153 ]
  %160 = phi i8* [ %256, %158 ], [ %155, %153 ]
  %161 = phi i8* [ %255, %158 ], [ %156, %153 ]
  %162 = phi i8* [ %254, %158 ], [ %157, %153 ]
  %163 = load i8, i8* %159, align 1
  %164 = load i8, i8* %162, align 1
  %165 = load i8, i8* %161, align 1
  %166 = zext i8 %163 to i32
  %167 = zext i8 %164 to i32
  %168 = zext i8 %165 to i32
  %169 = mul nuw nsw i32 %166, 19077
  %170 = lshr i32 %169, 8
  %171 = mul nuw nsw i32 %168, 26149
  %172 = lshr i32 %171, 8
  %173 = add nsw i32 %170, -14234
  %174 = add nsw i32 %173, %172
  %175 = icmp ult i32 %174, 16384
  %176 = lshr i32 %174, 6
  %177 = icmp slt i32 %174, 0
  %178 = select i1 %177, i32 0, i32 255
  %179 = select i1 %175, i32 %176, i32 %178
  %180 = trunc i32 %179 to i8
  store i8 %180, i8* %160, align 1
  %181 = mul nuw nsw i32 %167, 6419
  %182 = lshr i32 %181, 8
  %183 = mul nuw nsw i32 %168, 13320
  %184 = lshr i32 %183, 8
  %185 = add nuw nsw i32 %170, 8708
  %186 = sub nuw nsw i32 %185, %182
  %187 = sub nsw i32 %186, %184
  %188 = icmp ult i32 %187, 16384
  %189 = lshr i32 %187, 6
  %190 = icmp slt i32 %187, 0
  %191 = select i1 %190, i32 0, i32 255
  %192 = select i1 %188, i32 %189, i32 %191
  %193 = trunc i32 %192 to i8
  %194 = getelementptr inbounds i8, i8* %160, i64 1
  store i8 %193, i8* %194, align 1
  %195 = mul nuw nsw i32 %167, 33050
  %196 = lshr i32 %195, 8
  %197 = add nsw i32 %170, -17685
  %198 = add nsw i32 %197, %196
  %199 = icmp ult i32 %198, 16384
  %200 = lshr i32 %198, 6
  %201 = icmp slt i32 %198, 0
  %202 = select i1 %201, i32 0, i32 255
  %203 = select i1 %199, i32 %200, i32 %202
  %204 = trunc i32 %203 to i8
  %205 = getelementptr inbounds i8, i8* %160, i64 2
  store i8 %204, i8* %205, align 1
  %206 = getelementptr inbounds i8, i8* %160, i64 3
  store i8 -1, i8* %206, align 1
  %207 = getelementptr inbounds i8, i8* %159, i64 1
  %208 = load i8, i8* %207, align 1
  %209 = load i8, i8* %162, align 1
  %210 = load i8, i8* %161, align 1
  %211 = getelementptr inbounds i8, i8* %160, i64 4
  %212 = zext i8 %208 to i32
  %213 = zext i8 %209 to i32
  %214 = zext i8 %210 to i32
  %215 = mul nuw nsw i32 %212, 19077
  %216 = lshr i32 %215, 8
  %217 = mul nuw nsw i32 %214, 26149
  %218 = lshr i32 %217, 8
  %219 = add nsw i32 %216, -14234
  %220 = add nsw i32 %219, %218
  %221 = icmp ult i32 %220, 16384
  %222 = lshr i32 %220, 6
  %223 = icmp slt i32 %220, 0
  %224 = select i1 %223, i32 0, i32 255
  %225 = select i1 %221, i32 %222, i32 %224
  %226 = trunc i32 %225 to i8
  store i8 %226, i8* %211, align 1
  %227 = mul nuw nsw i32 %213, 6419
  %228 = lshr i32 %227, 8
  %229 = mul nuw nsw i32 %214, 13320
  %230 = lshr i32 %229, 8
  %231 = add nuw nsw i32 %216, 8708
  %232 = sub nuw nsw i32 %231, %228
  %233 = sub nsw i32 %232, %230
  %234 = icmp ult i32 %233, 16384
  %235 = lshr i32 %233, 6
  %236 = icmp slt i32 %233, 0
  %237 = select i1 %236, i32 0, i32 255
  %238 = select i1 %234, i32 %235, i32 %237
  %239 = trunc i32 %238 to i8
  %240 = getelementptr inbounds i8, i8* %160, i64 5
  store i8 %239, i8* %240, align 1
  %241 = mul nuw nsw i32 %213, 33050
  %242 = lshr i32 %241, 8
  %243 = add nsw i32 %216, -17685
  %244 = add nsw i32 %243, %242
  %245 = icmp ult i32 %244, 16384
  %246 = lshr i32 %244, 6
  %247 = icmp slt i32 %244, 0
  %248 = select i1 %247, i32 0, i32 255
  %249 = select i1 %245, i32 %246, i32 %248
  %250 = trunc i32 %249 to i8
  %251 = getelementptr inbounds i8, i8* %160, i64 6
  store i8 %250, i8* %251, align 1
  %252 = getelementptr inbounds i8, i8* %160, i64 7
  store i8 -1, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %159, i64 2
  %254 = getelementptr inbounds i8, i8* %162, i64 1
  %255 = getelementptr inbounds i8, i8* %161, i64 1
  %256 = getelementptr inbounds i8, i8* %160, i64 8
  %257 = icmp eq i8* %256, %9
  br i1 %257, label %258, label %158, !llvm.loop !26

258:                                              ; preds = %158, %151, %5
  %259 = phi i8* [ %1, %5 ], [ %44, %151 ], [ %254, %158 ]
  %260 = phi i8* [ %2, %5 ], [ %43, %151 ], [ %255, %158 ]
  %261 = phi i8* [ %3, %5 ], [ %9, %151 ], [ %9, %158 ]
  %262 = phi i8* [ %0, %5 ], [ %40, %151 ], [ %253, %158 ]
  %263 = and i32 %4, 1
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %310, label %265

265:                                              ; preds = %258
  %266 = load i8, i8* %262, align 1
  %267 = load i8, i8* %259, align 1
  %268 = load i8, i8* %260, align 1
  %269 = zext i8 %266 to i32
  %270 = zext i8 %267 to i32
  %271 = zext i8 %268 to i32
  %272 = mul nuw nsw i32 %269, 19077
  %273 = lshr i32 %272, 8
  %274 = mul nuw nsw i32 %271, 26149
  %275 = lshr i32 %274, 8
  %276 = add nsw i32 %273, -14234
  %277 = add nsw i32 %276, %275
  %278 = icmp ult i32 %277, 16384
  %279 = lshr i32 %277, 6
  %280 = icmp slt i32 %277, 0
  %281 = select i1 %280, i32 0, i32 255
  %282 = select i1 %278, i32 %279, i32 %281
  %283 = trunc i32 %282 to i8
  store i8 %283, i8* %261, align 1
  %284 = mul nuw nsw i32 %270, 6419
  %285 = lshr i32 %284, 8
  %286 = mul nuw nsw i32 %271, 13320
  %287 = lshr i32 %286, 8
  %288 = add nuw nsw i32 %273, 8708
  %289 = sub nuw nsw i32 %288, %285
  %290 = sub nsw i32 %289, %287
  %291 = icmp ult i32 %290, 16384
  %292 = lshr i32 %290, 6
  %293 = icmp slt i32 %290, 0
  %294 = select i1 %293, i32 0, i32 255
  %295 = select i1 %291, i32 %292, i32 %294
  %296 = trunc i32 %295 to i8
  %297 = getelementptr inbounds i8, i8* %261, i64 1
  store i8 %296, i8* %297, align 1
  %298 = mul nuw nsw i32 %270, 33050
  %299 = lshr i32 %298, 8
  %300 = add nsw i32 %273, -17685
  %301 = add nsw i32 %300, %299
  %302 = icmp ult i32 %301, 16384
  %303 = lshr i32 %301, 6
  %304 = icmp slt i32 %301, 0
  %305 = select i1 %304, i32 0, i32 255
  %306 = select i1 %302, i32 %303, i32 %305
  %307 = trunc i32 %306 to i8
  %308 = getelementptr inbounds i8, i8* %261, i64 2
  store i8 %307, i8* %308, align 1
  %309 = getelementptr inbounds i8, i8* %261, i64 3
  store i8 -1, i8* %309, align 1
  br label %310

310:                                              ; preds = %258, %265
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @YuvToBgrRow(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8*, i32) #1 {
  %6 = and i32 %4, -2
  %7 = mul nsw i32 %6, 3
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %3, i64 %8
  %10 = icmp eq i32 %6, 0
  br i1 %10, label %256, label %11

11:                                               ; preds = %5
  %12 = add nsw i64 %8, -6
  %13 = udiv i64 %12, 6
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 16
  br i1 %15, label %153, label %16

16:                                               ; preds = %11
  %17 = add nsw i64 %8, -6
  %18 = udiv i64 %17, 6
  %19 = mul nuw i64 %18, 6
  %20 = add i64 %19, 6
  %21 = getelementptr i8, i8* %3, i64 %20
  %22 = shl nuw nsw i64 %18, 1
  %23 = add nuw nsw i64 %22, 2
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = add nuw nsw i64 %18, 1
  %26 = getelementptr i8, i8* %1, i64 %25
  %27 = getelementptr i8, i8* %2, i64 %25
  %28 = icmp ugt i8* %24, %3
  %29 = icmp ugt i8* %21, %0
  %30 = and i1 %28, %29
  %31 = icmp ugt i8* %26, %3
  %32 = icmp ugt i8* %21, %1
  %33 = and i1 %31, %32
  %34 = or i1 %30, %33
  %35 = icmp ugt i8* %27, %3
  %36 = icmp ugt i8* %21, %2
  %37 = and i1 %35, %36
  %38 = or i1 %34, %37
  br i1 %38, label %153, label %39

39:                                               ; preds = %16
  %40 = and i64 %14, 9223372036854775792
  %41 = shl nuw i64 %40, 1
  %42 = getelementptr i8, i8* %0, i64 %41
  %43 = mul i64 %40, 6
  %44 = getelementptr i8, i8* %3, i64 %43
  %45 = getelementptr i8, i8* %2, i64 %40
  %46 = getelementptr i8, i8* %1, i64 %40
  br label %47

47:                                               ; preds = %47, %39
  %48 = phi i64 [ 0, %39 ], [ %149, %47 ]
  %49 = shl i64 %48, 1
  %50 = getelementptr i8, i8* %0, i64 %49
  %51 = mul i64 %48, 6
  %52 = getelementptr i8, i8* %2, i64 %48
  %53 = getelementptr i8, i8* %1, i64 %48
  %54 = bitcast i8* %50 to <32 x i8>*
  %55 = load <32 x i8>, <32 x i8>* %54, align 1
  %56 = shufflevector <32 x i8> %55, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %57 = shufflevector <32 x i8> %55, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %58 = zext <16 x i8> %56 to <16 x i32>
  %59 = bitcast i8* %53 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !27
  %61 = zext <16 x i8> %60 to <16 x i32>
  %62 = bitcast i8* %52 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !30
  %64 = zext <16 x i8> %63 to <16 x i32>
  %65 = mul nuw nsw <16 x i32> %58, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %66 = lshr <16 x i32> %65, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %67 = mul nuw nsw <16 x i32> %61, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %68 = lshr <16 x i32> %67, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %69 = add nsw <16 x i32> %66, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %70 = add nsw <16 x i32> %69, %68
  %71 = icmp ult <16 x i32> %70, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %72 = lshr <16 x i32> %70, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %73 = icmp slt <16 x i32> %70, zeroinitializer
  %74 = select <16 x i1> %73, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %75 = select <16 x i1> %71, <16 x i32> %72, <16 x i32> %74
  %76 = trunc <16 x i32> %75 to <16 x i8>
  %77 = mul nuw nsw <16 x i32> %61, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %78 = lshr <16 x i32> %77, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %79 = mul nuw nsw <16 x i32> %64, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %80 = lshr <16 x i32> %79, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %81 = add nuw nsw <16 x i32> %66, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %82 = sub nuw nsw <16 x i32> %81, %78
  %83 = sub nsw <16 x i32> %82, %80
  %84 = icmp ult <16 x i32> %83, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %85 = lshr <16 x i32> %83, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %86 = icmp slt <16 x i32> %83, zeroinitializer
  %87 = select <16 x i1> %86, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %88 = select <16 x i1> %84, <16 x i32> %85, <16 x i32> %87
  %89 = trunc <16 x i32> %88 to <16 x i8>
  %90 = mul nuw nsw <16 x i32> %64, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %91 = lshr <16 x i32> %90, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %92 = add nsw <16 x i32> %66, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %93 = add nsw <16 x i32> %92, %91
  %94 = icmp ult <16 x i32> %93, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %95 = lshr <16 x i32> %93, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %96 = icmp slt <16 x i32> %93, zeroinitializer
  %97 = select <16 x i1> %96, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %98 = select <16 x i1> %94, <16 x i32> %95, <16 x i32> %97
  %99 = trunc <16 x i32> %98 to <16 x i8>
  %100 = zext <16 x i8> %57 to <16 x i32>
  %101 = bitcast i8* %53 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1, !alias.scope !27
  %103 = zext <16 x i8> %102 to <16 x i32>
  %104 = bitcast i8* %52 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1, !alias.scope !30
  %106 = zext <16 x i8> %105 to <16 x i32>
  %107 = mul nuw nsw <16 x i32> %100, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %108 = lshr <16 x i32> %107, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %109 = mul nuw nsw <16 x i32> %103, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %110 = lshr <16 x i32> %109, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %111 = add nsw <16 x i32> %108, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %112 = add nsw <16 x i32> %111, %110
  %113 = icmp ult <16 x i32> %112, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %114 = lshr <16 x i32> %112, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %115 = icmp slt <16 x i32> %112, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %117 = select <16 x i1> %113, <16 x i32> %114, <16 x i32> %116
  %118 = trunc <16 x i32> %117 to <16 x i8>
  %119 = mul nuw nsw <16 x i32> %103, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %120 = lshr <16 x i32> %119, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %121 = mul nuw nsw <16 x i32> %106, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %122 = lshr <16 x i32> %121, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %123 = add nuw nsw <16 x i32> %108, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %124 = sub nuw nsw <16 x i32> %123, %120
  %125 = sub nsw <16 x i32> %124, %122
  %126 = icmp ult <16 x i32> %125, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %127 = lshr <16 x i32> %125, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %128 = icmp slt <16 x i32> %125, zeroinitializer
  %129 = select <16 x i1> %128, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %130 = select <16 x i1> %126, <16 x i32> %127, <16 x i32> %129
  %131 = trunc <16 x i32> %130 to <16 x i8>
  %132 = mul nuw nsw <16 x i32> %106, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %133 = lshr <16 x i32> %132, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %134 = add nsw <16 x i32> %108, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %135 = add nsw <16 x i32> %134, %133
  %136 = icmp ult <16 x i32> %135, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %137 = lshr <16 x i32> %135, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %138 = icmp slt <16 x i32> %135, zeroinitializer
  %139 = select <16 x i1> %138, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %140 = select <16 x i1> %136, <16 x i32> %137, <16 x i32> %139
  %141 = trunc <16 x i32> %140 to <16 x i8>
  %142 = getelementptr inbounds i8, i8* %3, i64 %51
  %143 = bitcast i8* %142 to <96 x i8>*
  %144 = shufflevector <16 x i8> %76, <16 x i8> %89, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %145 = shufflevector <16 x i8> %99, <16 x i8> %118, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %146 = shufflevector <32 x i8> %144, <32 x i8> %145, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %147 = shufflevector <16 x i8> %131, <16 x i8> %141, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = shufflevector <64 x i8> %146, <64 x i8> %147, <96 x i32> <i32 0, i32 16, i32 32, i32 48, i32 64, i32 80, i32 1, i32 17, i32 33, i32 49, i32 65, i32 81, i32 2, i32 18, i32 34, i32 50, i32 66, i32 82, i32 3, i32 19, i32 35, i32 51, i32 67, i32 83, i32 4, i32 20, i32 36, i32 52, i32 68, i32 84, i32 5, i32 21, i32 37, i32 53, i32 69, i32 85, i32 6, i32 22, i32 38, i32 54, i32 70, i32 86, i32 7, i32 23, i32 39, i32 55, i32 71, i32 87, i32 8, i32 24, i32 40, i32 56, i32 72, i32 88, i32 9, i32 25, i32 41, i32 57, i32 73, i32 89, i32 10, i32 26, i32 42, i32 58, i32 74, i32 90, i32 11, i32 27, i32 43, i32 59, i32 75, i32 91, i32 12, i32 28, i32 44, i32 60, i32 76, i32 92, i32 13, i32 29, i32 45, i32 61, i32 77, i32 93, i32 14, i32 30, i32 46, i32 62, i32 78, i32 94, i32 15, i32 31, i32 47, i32 63, i32 79, i32 95>
  store <96 x i8> %148, <96 x i8>* %143, align 1
  %149 = add i64 %48, 16
  %150 = icmp eq i64 %149, %40
  br i1 %150, label %151, label %47, !llvm.loop !32

151:                                              ; preds = %47
  %152 = icmp eq i64 %14, %40
  br i1 %152, label %256, label %153

153:                                              ; preds = %151, %16, %11
  %154 = phi i8* [ %0, %16 ], [ %0, %11 ], [ %42, %151 ]
  %155 = phi i8* [ %3, %16 ], [ %3, %11 ], [ %44, %151 ]
  %156 = phi i8* [ %2, %16 ], [ %2, %11 ], [ %45, %151 ]
  %157 = phi i8* [ %1, %16 ], [ %1, %11 ], [ %46, %151 ]
  br label %158

158:                                              ; preds = %153, %158
  %159 = phi i8* [ %251, %158 ], [ %154, %153 ]
  %160 = phi i8* [ %254, %158 ], [ %155, %153 ]
  %161 = phi i8* [ %253, %158 ], [ %156, %153 ]
  %162 = phi i8* [ %252, %158 ], [ %157, %153 ]
  %163 = load i8, i8* %159, align 1
  %164 = zext i8 %163 to i32
  %165 = load i8, i8* %162, align 1
  %166 = zext i8 %165 to i32
  %167 = load i8, i8* %161, align 1
  %168 = zext i8 %167 to i32
  %169 = mul nuw nsw i32 %164, 19077
  %170 = lshr i32 %169, 8
  %171 = mul nuw nsw i32 %166, 33050
  %172 = lshr i32 %171, 8
  %173 = add nsw i32 %170, -17685
  %174 = add nsw i32 %173, %172
  %175 = icmp ult i32 %174, 16384
  %176 = lshr i32 %174, 6
  %177 = icmp slt i32 %174, 0
  %178 = select i1 %177, i32 0, i32 255
  %179 = select i1 %175, i32 %176, i32 %178
  %180 = trunc i32 %179 to i8
  store i8 %180, i8* %160, align 1
  %181 = mul nuw nsw i32 %166, 6419
  %182 = lshr i32 %181, 8
  %183 = mul nuw nsw i32 %168, 13320
  %184 = lshr i32 %183, 8
  %185 = add nuw nsw i32 %170, 8708
  %186 = sub nuw nsw i32 %185, %182
  %187 = sub nsw i32 %186, %184
  %188 = icmp ult i32 %187, 16384
  %189 = lshr i32 %187, 6
  %190 = icmp slt i32 %187, 0
  %191 = select i1 %190, i32 0, i32 255
  %192 = select i1 %188, i32 %189, i32 %191
  %193 = trunc i32 %192 to i8
  %194 = getelementptr inbounds i8, i8* %160, i64 1
  store i8 %193, i8* %194, align 1
  %195 = mul nuw nsw i32 %168, 26149
  %196 = lshr i32 %195, 8
  %197 = add nsw i32 %170, -14234
  %198 = add nsw i32 %197, %196
  %199 = icmp ult i32 %198, 16384
  %200 = lshr i32 %198, 6
  %201 = icmp slt i32 %198, 0
  %202 = select i1 %201, i32 0, i32 255
  %203 = select i1 %199, i32 %200, i32 %202
  %204 = trunc i32 %203 to i8
  %205 = getelementptr inbounds i8, i8* %160, i64 2
  store i8 %204, i8* %205, align 1
  %206 = getelementptr inbounds i8, i8* %159, i64 1
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = load i8, i8* %162, align 1
  %210 = zext i8 %209 to i32
  %211 = load i8, i8* %161, align 1
  %212 = zext i8 %211 to i32
  %213 = getelementptr inbounds i8, i8* %160, i64 3
  %214 = mul nuw nsw i32 %208, 19077
  %215 = lshr i32 %214, 8
  %216 = mul nuw nsw i32 %210, 33050
  %217 = lshr i32 %216, 8
  %218 = add nsw i32 %215, -17685
  %219 = add nsw i32 %218, %217
  %220 = icmp ult i32 %219, 16384
  %221 = lshr i32 %219, 6
  %222 = icmp slt i32 %219, 0
  %223 = select i1 %222, i32 0, i32 255
  %224 = select i1 %220, i32 %221, i32 %223
  %225 = trunc i32 %224 to i8
  store i8 %225, i8* %213, align 1
  %226 = mul nuw nsw i32 %210, 6419
  %227 = lshr i32 %226, 8
  %228 = mul nuw nsw i32 %212, 13320
  %229 = lshr i32 %228, 8
  %230 = add nuw nsw i32 %215, 8708
  %231 = sub nuw nsw i32 %230, %227
  %232 = sub nsw i32 %231, %229
  %233 = icmp ult i32 %232, 16384
  %234 = lshr i32 %232, 6
  %235 = icmp slt i32 %232, 0
  %236 = select i1 %235, i32 0, i32 255
  %237 = select i1 %233, i32 %234, i32 %236
  %238 = trunc i32 %237 to i8
  %239 = getelementptr inbounds i8, i8* %160, i64 4
  store i8 %238, i8* %239, align 1
  %240 = mul nuw nsw i32 %212, 26149
  %241 = lshr i32 %240, 8
  %242 = add nsw i32 %215, -14234
  %243 = add nsw i32 %242, %241
  %244 = icmp ult i32 %243, 16384
  %245 = lshr i32 %243, 6
  %246 = icmp slt i32 %243, 0
  %247 = select i1 %246, i32 0, i32 255
  %248 = select i1 %244, i32 %245, i32 %247
  %249 = trunc i32 %248 to i8
  %250 = getelementptr inbounds i8, i8* %160, i64 5
  store i8 %249, i8* %250, align 1
  %251 = getelementptr inbounds i8, i8* %159, i64 2
  %252 = getelementptr inbounds i8, i8* %162, i64 1
  %253 = getelementptr inbounds i8, i8* %161, i64 1
  %254 = getelementptr inbounds i8, i8* %160, i64 6
  %255 = icmp eq i8* %254, %9
  br i1 %255, label %256, label %158, !llvm.loop !33

256:                                              ; preds = %158, %151, %5
  %257 = phi i8* [ %1, %5 ], [ %46, %151 ], [ %252, %158 ]
  %258 = phi i8* [ %2, %5 ], [ %45, %151 ], [ %253, %158 ]
  %259 = phi i8* [ %3, %5 ], [ %9, %151 ], [ %9, %158 ]
  %260 = phi i8* [ %0, %5 ], [ %42, %151 ], [ %251, %158 ]
  %261 = and i32 %4, 1
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %307, label %263

263:                                              ; preds = %256
  %264 = load i8, i8* %260, align 1
  %265 = zext i8 %264 to i32
  %266 = load i8, i8* %257, align 1
  %267 = zext i8 %266 to i32
  %268 = load i8, i8* %258, align 1
  %269 = zext i8 %268 to i32
  %270 = mul nuw nsw i32 %265, 19077
  %271 = lshr i32 %270, 8
  %272 = mul nuw nsw i32 %267, 33050
  %273 = lshr i32 %272, 8
  %274 = add nsw i32 %271, -17685
  %275 = add nsw i32 %274, %273
  %276 = icmp ult i32 %275, 16384
  %277 = lshr i32 %275, 6
  %278 = icmp slt i32 %275, 0
  %279 = select i1 %278, i32 0, i32 255
  %280 = select i1 %276, i32 %277, i32 %279
  %281 = trunc i32 %280 to i8
  store i8 %281, i8* %259, align 1
  %282 = mul nuw nsw i32 %267, 6419
  %283 = lshr i32 %282, 8
  %284 = mul nuw nsw i32 %269, 13320
  %285 = lshr i32 %284, 8
  %286 = add nuw nsw i32 %271, 8708
  %287 = sub nuw nsw i32 %286, %283
  %288 = sub nsw i32 %287, %285
  %289 = icmp ult i32 %288, 16384
  %290 = lshr i32 %288, 6
  %291 = icmp slt i32 %288, 0
  %292 = select i1 %291, i32 0, i32 255
  %293 = select i1 %289, i32 %290, i32 %292
  %294 = trunc i32 %293 to i8
  %295 = getelementptr inbounds i8, i8* %259, i64 1
  store i8 %294, i8* %295, align 1
  %296 = mul nuw nsw i32 %269, 26149
  %297 = lshr i32 %296, 8
  %298 = add nsw i32 %271, -14234
  %299 = add nsw i32 %298, %297
  %300 = icmp ult i32 %299, 16384
  %301 = lshr i32 %299, 6
  %302 = icmp slt i32 %299, 0
  %303 = select i1 %302, i32 0, i32 255
  %304 = select i1 %300, i32 %301, i32 %303
  %305 = trunc i32 %304 to i8
  %306 = getelementptr inbounds i8, i8* %259, i64 2
  store i8 %305, i8* %306, align 1
  br label %307

307:                                              ; preds = %256, %263
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @YuvToBgraRow(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8*, i32) #1 {
  %6 = shl i32 %4, 2
  %7 = and i32 %6, -8
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %3, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %258, label %11

11:                                               ; preds = %5
  %12 = add nsw i64 %8, -8
  %13 = lshr exact i64 %12, 3
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 16
  br i1 %15, label %153, label %16

16:                                               ; preds = %11
  %17 = add nsw i64 %8, -8
  %18 = lshr exact i64 %17, 3
  %19 = getelementptr i8, i8* %3, i64 %8
  %20 = lshr exact i64 %17, 2
  %21 = add nuw nsw i64 %20, 2
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = add nuw nsw i64 %18, 1
  %24 = getelementptr i8, i8* %1, i64 %23
  %25 = getelementptr i8, i8* %2, i64 %23
  %26 = icmp ugt i8* %22, %3
  %27 = icmp ugt i8* %19, %0
  %28 = and i1 %26, %27
  %29 = icmp ugt i8* %24, %3
  %30 = icmp ugt i8* %19, %1
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  %33 = icmp ugt i8* %25, %3
  %34 = icmp ugt i8* %19, %2
  %35 = and i1 %33, %34
  %36 = or i1 %32, %35
  br i1 %36, label %153, label %37

37:                                               ; preds = %16
  %38 = and i64 %14, 4611686018427387888
  %39 = shl nuw nsw i64 %38, 1
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = shl i64 %38, 3
  %42 = getelementptr i8, i8* %3, i64 %41
  %43 = getelementptr i8, i8* %2, i64 %38
  %44 = getelementptr i8, i8* %1, i64 %38
  br label %45

45:                                               ; preds = %45, %37
  %46 = phi i64 [ 0, %37 ], [ %149, %45 ]
  %47 = shl i64 %46, 1
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = shl i64 %46, 3
  %50 = getelementptr i8, i8* %2, i64 %46
  %51 = getelementptr i8, i8* %1, i64 %46
  %52 = bitcast i8* %48 to <32 x i8>*
  %53 = load <32 x i8>, <32 x i8>* %52, align 1
  %54 = shufflevector <32 x i8> %53, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %55 = shufflevector <32 x i8> %53, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %56 = bitcast i8* %51 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !34
  %58 = bitcast i8* %50 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !37
  %60 = zext <16 x i8> %54 to <16 x i32>
  %61 = zext <16 x i8> %57 to <16 x i32>
  %62 = zext <16 x i8> %59 to <16 x i32>
  %63 = mul nuw nsw <16 x i32> %60, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %64 = lshr <16 x i32> %63, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %65 = mul nuw nsw <16 x i32> %61, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %66 = lshr <16 x i32> %65, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %67 = add nsw <16 x i32> %64, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %68 = add nsw <16 x i32> %67, %66
  %69 = icmp ult <16 x i32> %68, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %70 = lshr <16 x i32> %68, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %71 = icmp slt <16 x i32> %68, zeroinitializer
  %72 = select <16 x i1> %71, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %73 = select <16 x i1> %69, <16 x i32> %70, <16 x i32> %72
  %74 = trunc <16 x i32> %73 to <16 x i8>
  %75 = mul nuw nsw <16 x i32> %61, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %76 = lshr <16 x i32> %75, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %77 = mul nuw nsw <16 x i32> %62, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %78 = lshr <16 x i32> %77, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %79 = add nuw nsw <16 x i32> %64, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %80 = sub nuw nsw <16 x i32> %79, %76
  %81 = sub nsw <16 x i32> %80, %78
  %82 = icmp ult <16 x i32> %81, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %83 = lshr <16 x i32> %81, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %84 = icmp slt <16 x i32> %81, zeroinitializer
  %85 = select <16 x i1> %84, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %86 = select <16 x i1> %82, <16 x i32> %83, <16 x i32> %85
  %87 = trunc <16 x i32> %86 to <16 x i8>
  %88 = mul nuw nsw <16 x i32> %62, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %89 = lshr <16 x i32> %88, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %90 = add nsw <16 x i32> %64, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %91 = add nsw <16 x i32> %90, %89
  %92 = icmp ult <16 x i32> %91, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %93 = lshr <16 x i32> %91, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %94 = icmp slt <16 x i32> %91, zeroinitializer
  %95 = select <16 x i1> %94, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %96 = select <16 x i1> %92, <16 x i32> %93, <16 x i32> %95
  %97 = trunc <16 x i32> %96 to <16 x i8>
  %98 = bitcast i8* %51 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1, !alias.scope !34
  %100 = bitcast i8* %50 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !37
  %102 = zext <16 x i8> %55 to <16 x i32>
  %103 = zext <16 x i8> %99 to <16 x i32>
  %104 = zext <16 x i8> %101 to <16 x i32>
  %105 = mul nuw nsw <16 x i32> %102, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %106 = lshr <16 x i32> %105, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %107 = mul nuw nsw <16 x i32> %103, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %108 = lshr <16 x i32> %107, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %109 = add nsw <16 x i32> %106, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %110 = add nsw <16 x i32> %109, %108
  %111 = icmp ult <16 x i32> %110, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %112 = lshr <16 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %113 = icmp slt <16 x i32> %110, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %115 = select <16 x i1> %111, <16 x i32> %112, <16 x i32> %114
  %116 = trunc <16 x i32> %115 to <16 x i8>
  %117 = mul nuw nsw <16 x i32> %103, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %118 = lshr <16 x i32> %117, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %119 = mul nuw nsw <16 x i32> %104, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %120 = lshr <16 x i32> %119, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %121 = add nuw nsw <16 x i32> %106, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %122 = sub nuw nsw <16 x i32> %121, %118
  %123 = sub nsw <16 x i32> %122, %120
  %124 = icmp ult <16 x i32> %123, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %125 = lshr <16 x i32> %123, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %126 = icmp slt <16 x i32> %123, zeroinitializer
  %127 = select <16 x i1> %126, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %128 = select <16 x i1> %124, <16 x i32> %125, <16 x i32> %127
  %129 = trunc <16 x i32> %128 to <16 x i8>
  %130 = mul nuw nsw <16 x i32> %104, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %131 = lshr <16 x i32> %130, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %132 = add nsw <16 x i32> %106, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %133 = add nsw <16 x i32> %132, %131
  %134 = icmp ult <16 x i32> %133, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %135 = lshr <16 x i32> %133, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %136 = icmp slt <16 x i32> %133, zeroinitializer
  %137 = select <16 x i1> %136, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %138 = select <16 x i1> %134, <16 x i32> %135, <16 x i32> %137
  %139 = trunc <16 x i32> %138 to <16 x i8>
  %140 = getelementptr inbounds i8, i8* %3, i64 %49
  %141 = bitcast i8* %140 to <128 x i8>*
  %142 = shufflevector <16 x i8> %74, <16 x i8> %87, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %143 = shufflevector <16 x i8> %97, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %144 = shufflevector <16 x i8> %116, <16 x i8> %129, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %145 = shufflevector <16 x i8> %139, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %146 = shufflevector <32 x i8> %142, <32 x i8> %143, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %147 = shufflevector <32 x i8> %144, <32 x i8> %145, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %148 = shufflevector <64 x i8> %146, <64 x i8> %147, <128 x i32> <i32 0, i32 16, i32 32, i32 48, i32 64, i32 80, i32 96, i32 112, i32 1, i32 17, i32 33, i32 49, i32 65, i32 81, i32 97, i32 113, i32 2, i32 18, i32 34, i32 50, i32 66, i32 82, i32 98, i32 114, i32 3, i32 19, i32 35, i32 51, i32 67, i32 83, i32 99, i32 115, i32 4, i32 20, i32 36, i32 52, i32 68, i32 84, i32 100, i32 116, i32 5, i32 21, i32 37, i32 53, i32 69, i32 85, i32 101, i32 117, i32 6, i32 22, i32 38, i32 54, i32 70, i32 86, i32 102, i32 118, i32 7, i32 23, i32 39, i32 55, i32 71, i32 87, i32 103, i32 119, i32 8, i32 24, i32 40, i32 56, i32 72, i32 88, i32 104, i32 120, i32 9, i32 25, i32 41, i32 57, i32 73, i32 89, i32 105, i32 121, i32 10, i32 26, i32 42, i32 58, i32 74, i32 90, i32 106, i32 122, i32 11, i32 27, i32 43, i32 59, i32 75, i32 91, i32 107, i32 123, i32 12, i32 28, i32 44, i32 60, i32 76, i32 92, i32 108, i32 124, i32 13, i32 29, i32 45, i32 61, i32 77, i32 93, i32 109, i32 125, i32 14, i32 30, i32 46, i32 62, i32 78, i32 94, i32 110, i32 126, i32 15, i32 31, i32 47, i32 63, i32 79, i32 95, i32 111, i32 127>
  store <128 x i8> %148, <128 x i8>* %141, align 1
  %149 = add i64 %46, 16
  %150 = icmp eq i64 %149, %38
  br i1 %150, label %151, label %45, !llvm.loop !39

151:                                              ; preds = %45
  %152 = icmp eq i64 %14, %38
  br i1 %152, label %258, label %153

153:                                              ; preds = %151, %16, %11
  %154 = phi i8* [ %0, %16 ], [ %0, %11 ], [ %40, %151 ]
  %155 = phi i8* [ %3, %16 ], [ %3, %11 ], [ %42, %151 ]
  %156 = phi i8* [ %2, %16 ], [ %2, %11 ], [ %43, %151 ]
  %157 = phi i8* [ %1, %16 ], [ %1, %11 ], [ %44, %151 ]
  br label %158

158:                                              ; preds = %153, %158
  %159 = phi i8* [ %253, %158 ], [ %154, %153 ]
  %160 = phi i8* [ %256, %158 ], [ %155, %153 ]
  %161 = phi i8* [ %255, %158 ], [ %156, %153 ]
  %162 = phi i8* [ %254, %158 ], [ %157, %153 ]
  %163 = load i8, i8* %159, align 1
  %164 = load i8, i8* %162, align 1
  %165 = load i8, i8* %161, align 1
  %166 = zext i8 %163 to i32
  %167 = zext i8 %164 to i32
  %168 = zext i8 %165 to i32
  %169 = mul nuw nsw i32 %166, 19077
  %170 = lshr i32 %169, 8
  %171 = mul nuw nsw i32 %167, 33050
  %172 = lshr i32 %171, 8
  %173 = add nsw i32 %170, -17685
  %174 = add nsw i32 %173, %172
  %175 = icmp ult i32 %174, 16384
  %176 = lshr i32 %174, 6
  %177 = icmp slt i32 %174, 0
  %178 = select i1 %177, i32 0, i32 255
  %179 = select i1 %175, i32 %176, i32 %178
  %180 = trunc i32 %179 to i8
  store i8 %180, i8* %160, align 1
  %181 = mul nuw nsw i32 %167, 6419
  %182 = lshr i32 %181, 8
  %183 = mul nuw nsw i32 %168, 13320
  %184 = lshr i32 %183, 8
  %185 = add nuw nsw i32 %170, 8708
  %186 = sub nuw nsw i32 %185, %182
  %187 = sub nsw i32 %186, %184
  %188 = icmp ult i32 %187, 16384
  %189 = lshr i32 %187, 6
  %190 = icmp slt i32 %187, 0
  %191 = select i1 %190, i32 0, i32 255
  %192 = select i1 %188, i32 %189, i32 %191
  %193 = trunc i32 %192 to i8
  %194 = getelementptr inbounds i8, i8* %160, i64 1
  store i8 %193, i8* %194, align 1
  %195 = mul nuw nsw i32 %168, 26149
  %196 = lshr i32 %195, 8
  %197 = add nsw i32 %170, -14234
  %198 = add nsw i32 %197, %196
  %199 = icmp ult i32 %198, 16384
  %200 = lshr i32 %198, 6
  %201 = icmp slt i32 %198, 0
  %202 = select i1 %201, i32 0, i32 255
  %203 = select i1 %199, i32 %200, i32 %202
  %204 = trunc i32 %203 to i8
  %205 = getelementptr inbounds i8, i8* %160, i64 2
  store i8 %204, i8* %205, align 1
  %206 = getelementptr inbounds i8, i8* %160, i64 3
  store i8 -1, i8* %206, align 1
  %207 = getelementptr inbounds i8, i8* %159, i64 1
  %208 = load i8, i8* %207, align 1
  %209 = load i8, i8* %162, align 1
  %210 = load i8, i8* %161, align 1
  %211 = getelementptr inbounds i8, i8* %160, i64 4
  %212 = zext i8 %208 to i32
  %213 = zext i8 %209 to i32
  %214 = zext i8 %210 to i32
  %215 = mul nuw nsw i32 %212, 19077
  %216 = lshr i32 %215, 8
  %217 = mul nuw nsw i32 %213, 33050
  %218 = lshr i32 %217, 8
  %219 = add nsw i32 %216, -17685
  %220 = add nsw i32 %219, %218
  %221 = icmp ult i32 %220, 16384
  %222 = lshr i32 %220, 6
  %223 = icmp slt i32 %220, 0
  %224 = select i1 %223, i32 0, i32 255
  %225 = select i1 %221, i32 %222, i32 %224
  %226 = trunc i32 %225 to i8
  store i8 %226, i8* %211, align 1
  %227 = mul nuw nsw i32 %213, 6419
  %228 = lshr i32 %227, 8
  %229 = mul nuw nsw i32 %214, 13320
  %230 = lshr i32 %229, 8
  %231 = add nuw nsw i32 %216, 8708
  %232 = sub nuw nsw i32 %231, %228
  %233 = sub nsw i32 %232, %230
  %234 = icmp ult i32 %233, 16384
  %235 = lshr i32 %233, 6
  %236 = icmp slt i32 %233, 0
  %237 = select i1 %236, i32 0, i32 255
  %238 = select i1 %234, i32 %235, i32 %237
  %239 = trunc i32 %238 to i8
  %240 = getelementptr inbounds i8, i8* %160, i64 5
  store i8 %239, i8* %240, align 1
  %241 = mul nuw nsw i32 %214, 26149
  %242 = lshr i32 %241, 8
  %243 = add nsw i32 %216, -14234
  %244 = add nsw i32 %243, %242
  %245 = icmp ult i32 %244, 16384
  %246 = lshr i32 %244, 6
  %247 = icmp slt i32 %244, 0
  %248 = select i1 %247, i32 0, i32 255
  %249 = select i1 %245, i32 %246, i32 %248
  %250 = trunc i32 %249 to i8
  %251 = getelementptr inbounds i8, i8* %160, i64 6
  store i8 %250, i8* %251, align 1
  %252 = getelementptr inbounds i8, i8* %160, i64 7
  store i8 -1, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %159, i64 2
  %254 = getelementptr inbounds i8, i8* %162, i64 1
  %255 = getelementptr inbounds i8, i8* %161, i64 1
  %256 = getelementptr inbounds i8, i8* %160, i64 8
  %257 = icmp eq i8* %256, %9
  br i1 %257, label %258, label %158, !llvm.loop !40

258:                                              ; preds = %158, %151, %5
  %259 = phi i8* [ %1, %5 ], [ %44, %151 ], [ %254, %158 ]
  %260 = phi i8* [ %2, %5 ], [ %43, %151 ], [ %255, %158 ]
  %261 = phi i8* [ %3, %5 ], [ %9, %151 ], [ %9, %158 ]
  %262 = phi i8* [ %0, %5 ], [ %40, %151 ], [ %253, %158 ]
  %263 = and i32 %4, 1
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %310, label %265

265:                                              ; preds = %258
  %266 = load i8, i8* %262, align 1
  %267 = load i8, i8* %259, align 1
  %268 = load i8, i8* %260, align 1
  %269 = zext i8 %266 to i32
  %270 = zext i8 %267 to i32
  %271 = zext i8 %268 to i32
  %272 = mul nuw nsw i32 %269, 19077
  %273 = lshr i32 %272, 8
  %274 = mul nuw nsw i32 %270, 33050
  %275 = lshr i32 %274, 8
  %276 = add nsw i32 %273, -17685
  %277 = add nsw i32 %276, %275
  %278 = icmp ult i32 %277, 16384
  %279 = lshr i32 %277, 6
  %280 = icmp slt i32 %277, 0
  %281 = select i1 %280, i32 0, i32 255
  %282 = select i1 %278, i32 %279, i32 %281
  %283 = trunc i32 %282 to i8
  store i8 %283, i8* %261, align 1
  %284 = mul nuw nsw i32 %270, 6419
  %285 = lshr i32 %284, 8
  %286 = mul nuw nsw i32 %271, 13320
  %287 = lshr i32 %286, 8
  %288 = add nuw nsw i32 %273, 8708
  %289 = sub nuw nsw i32 %288, %285
  %290 = sub nsw i32 %289, %287
  %291 = icmp ult i32 %290, 16384
  %292 = lshr i32 %290, 6
  %293 = icmp slt i32 %290, 0
  %294 = select i1 %293, i32 0, i32 255
  %295 = select i1 %291, i32 %292, i32 %294
  %296 = trunc i32 %295 to i8
  %297 = getelementptr inbounds i8, i8* %261, i64 1
  store i8 %296, i8* %297, align 1
  %298 = mul nuw nsw i32 %271, 26149
  %299 = lshr i32 %298, 8
  %300 = add nsw i32 %273, -14234
  %301 = add nsw i32 %300, %299
  %302 = icmp ult i32 %301, 16384
  %303 = lshr i32 %301, 6
  %304 = icmp slt i32 %301, 0
  %305 = select i1 %304, i32 0, i32 255
  %306 = select i1 %302, i32 %303, i32 %305
  %307 = trunc i32 %306 to i8
  %308 = getelementptr inbounds i8, i8* %261, i64 2
  store i8 %307, i8* %308, align 1
  %309 = getelementptr inbounds i8, i8* %261, i64 3
  store i8 -1, i8* %309, align 1
  br label %310

310:                                              ; preds = %258, %265
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @YuvToArgbRow(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8*, i32) #1 {
  %6 = shl i32 %4, 2
  %7 = and i32 %6, -8
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %3, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %258, label %11

11:                                               ; preds = %5
  %12 = add nsw i64 %8, -8
  %13 = lshr exact i64 %12, 3
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 16
  br i1 %15, label %153, label %16

16:                                               ; preds = %11
  %17 = add nsw i64 %8, -8
  %18 = lshr exact i64 %17, 3
  %19 = getelementptr i8, i8* %3, i64 %8
  %20 = lshr exact i64 %17, 2
  %21 = add nuw nsw i64 %20, 2
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = add nuw nsw i64 %18, 1
  %24 = getelementptr i8, i8* %1, i64 %23
  %25 = getelementptr i8, i8* %2, i64 %23
  %26 = icmp ugt i8* %22, %3
  %27 = icmp ugt i8* %19, %0
  %28 = and i1 %26, %27
  %29 = icmp ugt i8* %24, %3
  %30 = icmp ugt i8* %19, %1
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  %33 = icmp ugt i8* %25, %3
  %34 = icmp ugt i8* %19, %2
  %35 = and i1 %33, %34
  %36 = or i1 %32, %35
  br i1 %36, label %153, label %37

37:                                               ; preds = %16
  %38 = and i64 %14, 4611686018427387888
  %39 = shl nuw nsw i64 %38, 1
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = shl i64 %38, 3
  %42 = getelementptr i8, i8* %3, i64 %41
  %43 = getelementptr i8, i8* %2, i64 %38
  %44 = getelementptr i8, i8* %1, i64 %38
  br label %45

45:                                               ; preds = %45, %37
  %46 = phi i64 [ 0, %37 ], [ %149, %45 ]
  %47 = shl i64 %46, 1
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = shl i64 %46, 3
  %50 = getelementptr i8, i8* %2, i64 %46
  %51 = getelementptr i8, i8* %1, i64 %46
  %52 = bitcast i8* %48 to <32 x i8>*
  %53 = load <32 x i8>, <32 x i8>* %52, align 1
  %54 = shufflevector <32 x i8> %53, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %55 = shufflevector <32 x i8> %53, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %56 = bitcast i8* %51 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !41
  %58 = bitcast i8* %50 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !44
  %60 = zext <16 x i8> %54 to <16 x i32>
  %61 = zext <16 x i8> %57 to <16 x i32>
  %62 = zext <16 x i8> %59 to <16 x i32>
  %63 = mul nuw nsw <16 x i32> %60, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %64 = lshr <16 x i32> %63, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %65 = mul nuw nsw <16 x i32> %62, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %66 = lshr <16 x i32> %65, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %67 = add nsw <16 x i32> %64, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %68 = add nsw <16 x i32> %67, %66
  %69 = icmp ult <16 x i32> %68, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %70 = lshr <16 x i32> %68, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %71 = icmp slt <16 x i32> %68, zeroinitializer
  %72 = select <16 x i1> %71, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %73 = select <16 x i1> %69, <16 x i32> %70, <16 x i32> %72
  %74 = trunc <16 x i32> %73 to <16 x i8>
  %75 = mul nuw nsw <16 x i32> %61, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %76 = lshr <16 x i32> %75, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %77 = mul nuw nsw <16 x i32> %62, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %78 = lshr <16 x i32> %77, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %79 = add nuw nsw <16 x i32> %64, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %80 = sub nuw nsw <16 x i32> %79, %76
  %81 = sub nsw <16 x i32> %80, %78
  %82 = icmp ult <16 x i32> %81, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %83 = lshr <16 x i32> %81, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %84 = icmp slt <16 x i32> %81, zeroinitializer
  %85 = select <16 x i1> %84, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %86 = select <16 x i1> %82, <16 x i32> %83, <16 x i32> %85
  %87 = trunc <16 x i32> %86 to <16 x i8>
  %88 = mul nuw nsw <16 x i32> %61, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %89 = lshr <16 x i32> %88, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %90 = add nsw <16 x i32> %64, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %91 = add nsw <16 x i32> %90, %89
  %92 = icmp ult <16 x i32> %91, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %93 = lshr <16 x i32> %91, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %94 = icmp slt <16 x i32> %91, zeroinitializer
  %95 = select <16 x i1> %94, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %96 = select <16 x i1> %92, <16 x i32> %93, <16 x i32> %95
  %97 = trunc <16 x i32> %96 to <16 x i8>
  %98 = bitcast i8* %51 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1, !alias.scope !41
  %100 = bitcast i8* %50 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !44
  %102 = zext <16 x i8> %55 to <16 x i32>
  %103 = zext <16 x i8> %99 to <16 x i32>
  %104 = zext <16 x i8> %101 to <16 x i32>
  %105 = mul nuw nsw <16 x i32> %102, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %106 = lshr <16 x i32> %105, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %107 = mul nuw nsw <16 x i32> %104, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %108 = lshr <16 x i32> %107, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %109 = add nsw <16 x i32> %106, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %110 = add nsw <16 x i32> %109, %108
  %111 = icmp ult <16 x i32> %110, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %112 = lshr <16 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %113 = icmp slt <16 x i32> %110, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %115 = select <16 x i1> %111, <16 x i32> %112, <16 x i32> %114
  %116 = trunc <16 x i32> %115 to <16 x i8>
  %117 = mul nuw nsw <16 x i32> %103, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %118 = lshr <16 x i32> %117, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %119 = mul nuw nsw <16 x i32> %104, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %120 = lshr <16 x i32> %119, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %121 = add nuw nsw <16 x i32> %106, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %122 = sub nuw nsw <16 x i32> %121, %118
  %123 = sub nsw <16 x i32> %122, %120
  %124 = icmp ult <16 x i32> %123, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %125 = lshr <16 x i32> %123, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %126 = icmp slt <16 x i32> %123, zeroinitializer
  %127 = select <16 x i1> %126, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %128 = select <16 x i1> %124, <16 x i32> %125, <16 x i32> %127
  %129 = trunc <16 x i32> %128 to <16 x i8>
  %130 = mul nuw nsw <16 x i32> %103, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %131 = lshr <16 x i32> %130, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %132 = add nsw <16 x i32> %106, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %133 = add nsw <16 x i32> %132, %131
  %134 = icmp ult <16 x i32> %133, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %135 = lshr <16 x i32> %133, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %136 = icmp slt <16 x i32> %133, zeroinitializer
  %137 = select <16 x i1> %136, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %138 = select <16 x i1> %134, <16 x i32> %135, <16 x i32> %137
  %139 = trunc <16 x i32> %138 to <16 x i8>
  %140 = getelementptr inbounds i8, i8* %3, i64 %49
  %141 = bitcast i8* %140 to <128 x i8>*
  %142 = shufflevector <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i8> %74, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %143 = shufflevector <16 x i8> %87, <16 x i8> %97, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %144 = shufflevector <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i8> %116, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %145 = shufflevector <16 x i8> %129, <16 x i8> %139, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %146 = shufflevector <32 x i8> %142, <32 x i8> %143, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %147 = shufflevector <32 x i8> %144, <32 x i8> %145, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %148 = shufflevector <64 x i8> %146, <64 x i8> %147, <128 x i32> <i32 0, i32 16, i32 32, i32 48, i32 64, i32 80, i32 96, i32 112, i32 1, i32 17, i32 33, i32 49, i32 65, i32 81, i32 97, i32 113, i32 2, i32 18, i32 34, i32 50, i32 66, i32 82, i32 98, i32 114, i32 3, i32 19, i32 35, i32 51, i32 67, i32 83, i32 99, i32 115, i32 4, i32 20, i32 36, i32 52, i32 68, i32 84, i32 100, i32 116, i32 5, i32 21, i32 37, i32 53, i32 69, i32 85, i32 101, i32 117, i32 6, i32 22, i32 38, i32 54, i32 70, i32 86, i32 102, i32 118, i32 7, i32 23, i32 39, i32 55, i32 71, i32 87, i32 103, i32 119, i32 8, i32 24, i32 40, i32 56, i32 72, i32 88, i32 104, i32 120, i32 9, i32 25, i32 41, i32 57, i32 73, i32 89, i32 105, i32 121, i32 10, i32 26, i32 42, i32 58, i32 74, i32 90, i32 106, i32 122, i32 11, i32 27, i32 43, i32 59, i32 75, i32 91, i32 107, i32 123, i32 12, i32 28, i32 44, i32 60, i32 76, i32 92, i32 108, i32 124, i32 13, i32 29, i32 45, i32 61, i32 77, i32 93, i32 109, i32 125, i32 14, i32 30, i32 46, i32 62, i32 78, i32 94, i32 110, i32 126, i32 15, i32 31, i32 47, i32 63, i32 79, i32 95, i32 111, i32 127>
  store <128 x i8> %148, <128 x i8>* %141, align 1
  %149 = add i64 %46, 16
  %150 = icmp eq i64 %149, %38
  br i1 %150, label %151, label %45, !llvm.loop !46

151:                                              ; preds = %45
  %152 = icmp eq i64 %14, %38
  br i1 %152, label %258, label %153

153:                                              ; preds = %151, %16, %11
  %154 = phi i8* [ %0, %16 ], [ %0, %11 ], [ %40, %151 ]
  %155 = phi i8* [ %3, %16 ], [ %3, %11 ], [ %42, %151 ]
  %156 = phi i8* [ %2, %16 ], [ %2, %11 ], [ %43, %151 ]
  %157 = phi i8* [ %1, %16 ], [ %1, %11 ], [ %44, %151 ]
  br label %158

158:                                              ; preds = %153, %158
  %159 = phi i8* [ %253, %158 ], [ %154, %153 ]
  %160 = phi i8* [ %256, %158 ], [ %155, %153 ]
  %161 = phi i8* [ %255, %158 ], [ %156, %153 ]
  %162 = phi i8* [ %254, %158 ], [ %157, %153 ]
  %163 = load i8, i8* %159, align 1
  %164 = load i8, i8* %162, align 1
  %165 = load i8, i8* %161, align 1
  store i8 -1, i8* %160, align 1
  %166 = zext i8 %163 to i32
  %167 = zext i8 %164 to i32
  %168 = zext i8 %165 to i32
  %169 = getelementptr inbounds i8, i8* %160, i64 1
  %170 = mul nuw nsw i32 %166, 19077
  %171 = lshr i32 %170, 8
  %172 = mul nuw nsw i32 %168, 26149
  %173 = lshr i32 %172, 8
  %174 = add nsw i32 %171, -14234
  %175 = add nsw i32 %174, %173
  %176 = icmp ult i32 %175, 16384
  %177 = lshr i32 %175, 6
  %178 = icmp slt i32 %175, 0
  %179 = select i1 %178, i32 0, i32 255
  %180 = select i1 %176, i32 %177, i32 %179
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %169, align 1
  %182 = mul nuw nsw i32 %167, 6419
  %183 = lshr i32 %182, 8
  %184 = mul nuw nsw i32 %168, 13320
  %185 = lshr i32 %184, 8
  %186 = add nuw nsw i32 %171, 8708
  %187 = sub nuw nsw i32 %186, %183
  %188 = sub nsw i32 %187, %185
  %189 = icmp ult i32 %188, 16384
  %190 = lshr i32 %188, 6
  %191 = icmp slt i32 %188, 0
  %192 = select i1 %191, i32 0, i32 255
  %193 = select i1 %189, i32 %190, i32 %192
  %194 = trunc i32 %193 to i8
  %195 = getelementptr inbounds i8, i8* %160, i64 2
  store i8 %194, i8* %195, align 1
  %196 = mul nuw nsw i32 %167, 33050
  %197 = lshr i32 %196, 8
  %198 = add nsw i32 %171, -17685
  %199 = add nsw i32 %198, %197
  %200 = icmp ult i32 %199, 16384
  %201 = lshr i32 %199, 6
  %202 = icmp slt i32 %199, 0
  %203 = select i1 %202, i32 0, i32 255
  %204 = select i1 %200, i32 %201, i32 %203
  %205 = trunc i32 %204 to i8
  %206 = getelementptr inbounds i8, i8* %160, i64 3
  store i8 %205, i8* %206, align 1
  %207 = getelementptr inbounds i8, i8* %159, i64 1
  %208 = load i8, i8* %207, align 1
  %209 = load i8, i8* %162, align 1
  %210 = load i8, i8* %161, align 1
  %211 = getelementptr inbounds i8, i8* %160, i64 4
  store i8 -1, i8* %211, align 1
  %212 = zext i8 %208 to i32
  %213 = zext i8 %209 to i32
  %214 = zext i8 %210 to i32
  %215 = getelementptr inbounds i8, i8* %160, i64 5
  %216 = mul nuw nsw i32 %212, 19077
  %217 = lshr i32 %216, 8
  %218 = mul nuw nsw i32 %214, 26149
  %219 = lshr i32 %218, 8
  %220 = add nsw i32 %217, -14234
  %221 = add nsw i32 %220, %219
  %222 = icmp ult i32 %221, 16384
  %223 = lshr i32 %221, 6
  %224 = icmp slt i32 %221, 0
  %225 = select i1 %224, i32 0, i32 255
  %226 = select i1 %222, i32 %223, i32 %225
  %227 = trunc i32 %226 to i8
  store i8 %227, i8* %215, align 1
  %228 = mul nuw nsw i32 %213, 6419
  %229 = lshr i32 %228, 8
  %230 = mul nuw nsw i32 %214, 13320
  %231 = lshr i32 %230, 8
  %232 = add nuw nsw i32 %217, 8708
  %233 = sub nuw nsw i32 %232, %229
  %234 = sub nsw i32 %233, %231
  %235 = icmp ult i32 %234, 16384
  %236 = lshr i32 %234, 6
  %237 = icmp slt i32 %234, 0
  %238 = select i1 %237, i32 0, i32 255
  %239 = select i1 %235, i32 %236, i32 %238
  %240 = trunc i32 %239 to i8
  %241 = getelementptr inbounds i8, i8* %160, i64 6
  store i8 %240, i8* %241, align 1
  %242 = mul nuw nsw i32 %213, 33050
  %243 = lshr i32 %242, 8
  %244 = add nsw i32 %217, -17685
  %245 = add nsw i32 %244, %243
  %246 = icmp ult i32 %245, 16384
  %247 = lshr i32 %245, 6
  %248 = icmp slt i32 %245, 0
  %249 = select i1 %248, i32 0, i32 255
  %250 = select i1 %246, i32 %247, i32 %249
  %251 = trunc i32 %250 to i8
  %252 = getelementptr inbounds i8, i8* %160, i64 7
  store i8 %251, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %159, i64 2
  %254 = getelementptr inbounds i8, i8* %162, i64 1
  %255 = getelementptr inbounds i8, i8* %161, i64 1
  %256 = getelementptr inbounds i8, i8* %160, i64 8
  %257 = icmp eq i8* %256, %9
  br i1 %257, label %258, label %158, !llvm.loop !47

258:                                              ; preds = %158, %151, %5
  %259 = phi i8* [ %1, %5 ], [ %44, %151 ], [ %254, %158 ]
  %260 = phi i8* [ %2, %5 ], [ %43, %151 ], [ %255, %158 ]
  %261 = phi i8* [ %3, %5 ], [ %9, %151 ], [ %9, %158 ]
  %262 = phi i8* [ %0, %5 ], [ %40, %151 ], [ %253, %158 ]
  %263 = and i32 %4, 1
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %310, label %265

265:                                              ; preds = %258
  %266 = load i8, i8* %262, align 1
  %267 = load i8, i8* %259, align 1
  %268 = load i8, i8* %260, align 1
  store i8 -1, i8* %261, align 1
  %269 = zext i8 %266 to i32
  %270 = zext i8 %267 to i32
  %271 = zext i8 %268 to i32
  %272 = getelementptr inbounds i8, i8* %261, i64 1
  %273 = mul nuw nsw i32 %269, 19077
  %274 = lshr i32 %273, 8
  %275 = mul nuw nsw i32 %271, 26149
  %276 = lshr i32 %275, 8
  %277 = add nsw i32 %274, -14234
  %278 = add nsw i32 %277, %276
  %279 = icmp ult i32 %278, 16384
  %280 = lshr i32 %278, 6
  %281 = icmp slt i32 %278, 0
  %282 = select i1 %281, i32 0, i32 255
  %283 = select i1 %279, i32 %280, i32 %282
  %284 = trunc i32 %283 to i8
  store i8 %284, i8* %272, align 1
  %285 = mul nuw nsw i32 %270, 6419
  %286 = lshr i32 %285, 8
  %287 = mul nuw nsw i32 %271, 13320
  %288 = lshr i32 %287, 8
  %289 = add nuw nsw i32 %274, 8708
  %290 = sub nuw nsw i32 %289, %286
  %291 = sub nsw i32 %290, %288
  %292 = icmp ult i32 %291, 16384
  %293 = lshr i32 %291, 6
  %294 = icmp slt i32 %291, 0
  %295 = select i1 %294, i32 0, i32 255
  %296 = select i1 %292, i32 %293, i32 %295
  %297 = trunc i32 %296 to i8
  %298 = getelementptr inbounds i8, i8* %261, i64 2
  store i8 %297, i8* %298, align 1
  %299 = mul nuw nsw i32 %270, 33050
  %300 = lshr i32 %299, 8
  %301 = add nsw i32 %274, -17685
  %302 = add nsw i32 %301, %300
  %303 = icmp ult i32 %302, 16384
  %304 = lshr i32 %302, 6
  %305 = icmp slt i32 %302, 0
  %306 = select i1 %305, i32 0, i32 255
  %307 = select i1 %303, i32 %304, i32 %306
  %308 = trunc i32 %307 to i8
  %309 = getelementptr inbounds i8, i8* %261, i64 3
  store i8 %308, i8* %309, align 1
  br label %310

310:                                              ; preds = %258, %265
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @YuvToRgba4444Row(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8*, i32) #1 {
  %6 = shl i32 %4, 1
  %7 = and i32 %6, -4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %3, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %258, label %11

11:                                               ; preds = %5
  %12 = add nsw i64 %8, -4
  %13 = lshr exact i64 %12, 2
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 16
  br i1 %15, label %153, label %16

16:                                               ; preds = %11
  %17 = add nsw i64 %8, -4
  %18 = lshr exact i64 %17, 2
  %19 = getelementptr i8, i8* %3, i64 %8
  %20 = lshr exact i64 %17, 1
  %21 = add nuw i64 %20, 2
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = add nuw nsw i64 %18, 1
  %24 = getelementptr i8, i8* %1, i64 %23
  %25 = getelementptr i8, i8* %2, i64 %23
  %26 = icmp ugt i8* %22, %3
  %27 = icmp ugt i8* %19, %0
  %28 = and i1 %26, %27
  %29 = icmp ugt i8* %24, %3
  %30 = icmp ugt i8* %19, %1
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  %33 = icmp ugt i8* %25, %3
  %34 = icmp ugt i8* %19, %2
  %35 = and i1 %33, %34
  %36 = or i1 %32, %35
  br i1 %36, label %153, label %37

37:                                               ; preds = %16
  %38 = and i64 %14, 9223372036854775792
  %39 = shl nuw i64 %38, 1
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = shl i64 %38, 2
  %42 = getelementptr i8, i8* %3, i64 %41
  %43 = getelementptr i8, i8* %2, i64 %38
  %44 = getelementptr i8, i8* %1, i64 %38
  br label %45

45:                                               ; preds = %45, %37
  %46 = phi i64 [ 0, %37 ], [ %149, %45 ]
  %47 = shl i64 %46, 1
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = shl i64 %46, 2
  %50 = getelementptr i8, i8* %2, i64 %46
  %51 = getelementptr i8, i8* %1, i64 %46
  %52 = bitcast i8* %48 to <32 x i8>*
  %53 = load <32 x i8>, <32 x i8>* %52, align 1
  %54 = shufflevector <32 x i8> %53, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %55 = shufflevector <32 x i8> %53, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %56 = zext <16 x i8> %54 to <16 x i32>
  %57 = bitcast i8* %51 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1, !alias.scope !48
  %59 = zext <16 x i8> %58 to <16 x i32>
  %60 = bitcast i8* %50 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1, !alias.scope !51
  %62 = zext <16 x i8> %61 to <16 x i32>
  %63 = mul nuw nsw <16 x i32> %56, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %64 = lshr <16 x i32> %63, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %65 = mul nuw nsw <16 x i32> %62, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %66 = lshr <16 x i32> %65, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %67 = add nsw <16 x i32> %64, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %68 = add nsw <16 x i32> %67, %66
  %69 = icmp ult <16 x i32> %68, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %70 = lshr <16 x i32> %68, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %71 = icmp slt <16 x i32> %68, zeroinitializer
  %72 = select <16 x i1> %71, <16 x i32> zeroinitializer, <16 x i32> <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %73 = select <16 x i1> %69, <16 x i32> %70, <16 x i32> %72
  %74 = mul nuw nsw <16 x i32> %59, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %75 = lshr <16 x i32> %74, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %76 = mul nuw nsw <16 x i32> %62, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %77 = lshr <16 x i32> %76, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %78 = add nuw nsw <16 x i32> %64, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %79 = sub nuw nsw <16 x i32> %78, %75
  %80 = sub nsw <16 x i32> %79, %77
  %81 = icmp ult <16 x i32> %80, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %82 = lshr <16 x i32> %80, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %83 = icmp slt <16 x i32> %80, zeroinitializer
  %84 = select <16 x i1> %83, <16 x i32> zeroinitializer, <16 x i32> <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %85 = select <16 x i1> %81, <16 x i32> %82, <16 x i32> %84
  %86 = mul nuw nsw <16 x i32> %59, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %87 = lshr <16 x i32> %86, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %88 = add nsw <16 x i32> %64, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %89 = add nsw <16 x i32> %88, %87
  %90 = icmp ult <16 x i32> %89, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %91 = lshr <16 x i32> %89, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %92 = icmp slt <16 x i32> %89, zeroinitializer
  %93 = select <16 x i1> %92, <16 x i32> zeroinitializer, <16 x i32> <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %94 = select <16 x i1> %90, <16 x i32> %91, <16 x i32> %93
  %95 = and <16 x i32> %73, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %96 = or <16 x i32> %95, %85
  %97 = trunc <16 x i32> %96 to <16 x i8>
  %98 = trunc <16 x i32> %94 to <16 x i8>
  %99 = or <16 x i8> %98, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %100 = zext <16 x i8> %55 to <16 x i32>
  %101 = bitcast i8* %51 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1, !alias.scope !48
  %103 = zext <16 x i8> %102 to <16 x i32>
  %104 = bitcast i8* %50 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1, !alias.scope !51
  %106 = zext <16 x i8> %105 to <16 x i32>
  %107 = mul nuw nsw <16 x i32> %100, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %108 = lshr <16 x i32> %107, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %109 = mul nuw nsw <16 x i32> %106, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %110 = lshr <16 x i32> %109, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %111 = add nsw <16 x i32> %108, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %112 = add nsw <16 x i32> %111, %110
  %113 = icmp ult <16 x i32> %112, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %114 = lshr <16 x i32> %112, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %115 = icmp slt <16 x i32> %112, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i32> zeroinitializer, <16 x i32> <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %117 = select <16 x i1> %113, <16 x i32> %114, <16 x i32> %116
  %118 = mul nuw nsw <16 x i32> %103, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %119 = lshr <16 x i32> %118, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %120 = mul nuw nsw <16 x i32> %106, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %121 = lshr <16 x i32> %120, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %122 = add nuw nsw <16 x i32> %108, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %123 = sub nuw nsw <16 x i32> %122, %119
  %124 = sub nsw <16 x i32> %123, %121
  %125 = icmp ult <16 x i32> %124, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %126 = lshr <16 x i32> %124, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %127 = icmp slt <16 x i32> %124, zeroinitializer
  %128 = select <16 x i1> %127, <16 x i32> zeroinitializer, <16 x i32> <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %129 = select <16 x i1> %125, <16 x i32> %126, <16 x i32> %128
  %130 = mul nuw nsw <16 x i32> %103, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %131 = lshr <16 x i32> %130, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %132 = add nsw <16 x i32> %108, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %133 = add nsw <16 x i32> %132, %131
  %134 = icmp ult <16 x i32> %133, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %135 = lshr <16 x i32> %133, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %136 = icmp slt <16 x i32> %133, zeroinitializer
  %137 = select <16 x i1> %136, <16 x i32> zeroinitializer, <16 x i32> <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %138 = select <16 x i1> %134, <16 x i32> %135, <16 x i32> %137
  %139 = and <16 x i32> %117, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %140 = or <16 x i32> %139, %129
  %141 = trunc <16 x i32> %140 to <16 x i8>
  %142 = trunc <16 x i32> %138 to <16 x i8>
  %143 = or <16 x i8> %142, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %144 = getelementptr inbounds i8, i8* %3, i64 %49
  %145 = bitcast i8* %144 to <64 x i8>*
  %146 = shufflevector <16 x i8> %97, <16 x i8> %99, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %147 = shufflevector <16 x i8> %141, <16 x i8> %143, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %148 = shufflevector <32 x i8> %146, <32 x i8> %147, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %148, <64 x i8>* %145, align 1
  %149 = add i64 %46, 16
  %150 = icmp eq i64 %149, %38
  br i1 %150, label %151, label %45, !llvm.loop !53

151:                                              ; preds = %45
  %152 = icmp eq i64 %14, %38
  br i1 %152, label %258, label %153

153:                                              ; preds = %151, %16, %11
  %154 = phi i8* [ %0, %16 ], [ %0, %11 ], [ %40, %151 ]
  %155 = phi i8* [ %3, %16 ], [ %3, %11 ], [ %42, %151 ]
  %156 = phi i8* [ %2, %16 ], [ %2, %11 ], [ %43, %151 ]
  %157 = phi i8* [ %1, %16 ], [ %1, %11 ], [ %44, %151 ]
  br label %158

158:                                              ; preds = %153, %158
  %159 = phi i8* [ %253, %158 ], [ %154, %153 ]
  %160 = phi i8* [ %256, %158 ], [ %155, %153 ]
  %161 = phi i8* [ %255, %158 ], [ %156, %153 ]
  %162 = phi i8* [ %254, %158 ], [ %157, %153 ]
  %163 = load i8, i8* %159, align 1
  %164 = zext i8 %163 to i32
  %165 = load i8, i8* %162, align 1
  %166 = zext i8 %165 to i32
  %167 = load i8, i8* %161, align 1
  %168 = zext i8 %167 to i32
  %169 = mul nuw nsw i32 %164, 19077
  %170 = lshr i32 %169, 8
  %171 = mul nuw nsw i32 %168, 26149
  %172 = lshr i32 %171, 8
  %173 = add nsw i32 %170, -14234
  %174 = add nsw i32 %173, %172
  %175 = icmp ult i32 %174, 16384
  %176 = lshr i32 %174, 6
  %177 = icmp slt i32 %174, 0
  %178 = select i1 %177, i32 0, i32 240
  %179 = select i1 %175, i32 %176, i32 %178
  %180 = mul nuw nsw i32 %166, 6419
  %181 = lshr i32 %180, 8
  %182 = mul nuw nsw i32 %168, 13320
  %183 = lshr i32 %182, 8
  %184 = add nuw nsw i32 %170, 8708
  %185 = sub nuw nsw i32 %184, %181
  %186 = sub nsw i32 %185, %183
  %187 = icmp ult i32 %186, 16384
  %188 = lshr i32 %186, 10
  %189 = icmp slt i32 %186, 0
  %190 = select i1 %189, i32 0, i32 15
  %191 = select i1 %187, i32 %188, i32 %190
  %192 = mul nuw nsw i32 %166, 33050
  %193 = lshr i32 %192, 8
  %194 = add nsw i32 %170, -17685
  %195 = add nsw i32 %194, %193
  %196 = icmp ult i32 %195, 16384
  %197 = lshr i32 %195, 6
  %198 = icmp slt i32 %195, 0
  %199 = select i1 %198, i32 0, i32 240
  %200 = select i1 %196, i32 %197, i32 %199
  %201 = and i32 %179, 240
  %202 = or i32 %201, %191
  %203 = trunc i32 %202 to i8
  store i8 %203, i8* %160, align 1
  %204 = trunc i32 %200 to i8
  %205 = or i8 %204, 15
  %206 = getelementptr inbounds i8, i8* %160, i64 1
  store i8 %205, i8* %206, align 1
  %207 = getelementptr inbounds i8, i8* %159, i64 1
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  %210 = load i8, i8* %162, align 1
  %211 = zext i8 %210 to i32
  %212 = load i8, i8* %161, align 1
  %213 = zext i8 %212 to i32
  %214 = getelementptr inbounds i8, i8* %160, i64 2
  %215 = mul nuw nsw i32 %209, 19077
  %216 = lshr i32 %215, 8
  %217 = mul nuw nsw i32 %213, 26149
  %218 = lshr i32 %217, 8
  %219 = add nsw i32 %216, -14234
  %220 = add nsw i32 %219, %218
  %221 = icmp ult i32 %220, 16384
  %222 = lshr i32 %220, 6
  %223 = icmp slt i32 %220, 0
  %224 = select i1 %223, i32 0, i32 240
  %225 = select i1 %221, i32 %222, i32 %224
  %226 = mul nuw nsw i32 %211, 6419
  %227 = lshr i32 %226, 8
  %228 = mul nuw nsw i32 %213, 13320
  %229 = lshr i32 %228, 8
  %230 = add nuw nsw i32 %216, 8708
  %231 = sub nuw nsw i32 %230, %227
  %232 = sub nsw i32 %231, %229
  %233 = icmp ult i32 %232, 16384
  %234 = lshr i32 %232, 10
  %235 = icmp slt i32 %232, 0
  %236 = select i1 %235, i32 0, i32 15
  %237 = select i1 %233, i32 %234, i32 %236
  %238 = mul nuw nsw i32 %211, 33050
  %239 = lshr i32 %238, 8
  %240 = add nsw i32 %216, -17685
  %241 = add nsw i32 %240, %239
  %242 = icmp ult i32 %241, 16384
  %243 = lshr i32 %241, 6
  %244 = icmp slt i32 %241, 0
  %245 = select i1 %244, i32 0, i32 240
  %246 = select i1 %242, i32 %243, i32 %245
  %247 = and i32 %225, 240
  %248 = or i32 %247, %237
  %249 = trunc i32 %248 to i8
  store i8 %249, i8* %214, align 1
  %250 = trunc i32 %246 to i8
  %251 = or i8 %250, 15
  %252 = getelementptr inbounds i8, i8* %160, i64 3
  store i8 %251, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %159, i64 2
  %254 = getelementptr inbounds i8, i8* %162, i64 1
  %255 = getelementptr inbounds i8, i8* %161, i64 1
  %256 = getelementptr inbounds i8, i8* %160, i64 4
  %257 = icmp eq i8* %256, %9
  br i1 %257, label %258, label %158, !llvm.loop !54

258:                                              ; preds = %158, %151, %5
  %259 = phi i8* [ %1, %5 ], [ %44, %151 ], [ %254, %158 ]
  %260 = phi i8* [ %2, %5 ], [ %43, %151 ], [ %255, %158 ]
  %261 = phi i8* [ %3, %5 ], [ %9, %151 ], [ %9, %158 ]
  %262 = phi i8* [ %0, %5 ], [ %40, %151 ], [ %253, %158 ]
  %263 = and i32 %4, 1
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %310, label %265

265:                                              ; preds = %258
  %266 = load i8, i8* %262, align 1
  %267 = zext i8 %266 to i32
  %268 = load i8, i8* %259, align 1
  %269 = zext i8 %268 to i32
  %270 = load i8, i8* %260, align 1
  %271 = zext i8 %270 to i32
  %272 = mul nuw nsw i32 %267, 19077
  %273 = lshr i32 %272, 8
  %274 = mul nuw nsw i32 %271, 26149
  %275 = lshr i32 %274, 8
  %276 = add nsw i32 %273, -14234
  %277 = add nsw i32 %276, %275
  %278 = icmp ult i32 %277, 16384
  %279 = lshr i32 %277, 6
  %280 = icmp slt i32 %277, 0
  %281 = select i1 %280, i32 0, i32 240
  %282 = select i1 %278, i32 %279, i32 %281
  %283 = mul nuw nsw i32 %269, 6419
  %284 = lshr i32 %283, 8
  %285 = mul nuw nsw i32 %271, 13320
  %286 = lshr i32 %285, 8
  %287 = add nuw nsw i32 %273, 8708
  %288 = sub nuw nsw i32 %287, %284
  %289 = sub nsw i32 %288, %286
  %290 = icmp ult i32 %289, 16384
  %291 = lshr i32 %289, 10
  %292 = icmp slt i32 %289, 0
  %293 = select i1 %292, i32 0, i32 15
  %294 = select i1 %290, i32 %291, i32 %293
  %295 = mul nuw nsw i32 %269, 33050
  %296 = lshr i32 %295, 8
  %297 = add nsw i32 %273, -17685
  %298 = add nsw i32 %297, %296
  %299 = icmp ult i32 %298, 16384
  %300 = lshr i32 %298, 6
  %301 = icmp slt i32 %298, 0
  %302 = select i1 %301, i32 0, i32 240
  %303 = select i1 %299, i32 %300, i32 %302
  %304 = and i32 %282, 240
  %305 = or i32 %304, %294
  %306 = trunc i32 %305 to i8
  store i8 %306, i8* %261, align 1
  %307 = trunc i32 %303 to i8
  %308 = or i8 %307, 15
  %309 = getelementptr inbounds i8, i8* %261, i64 1
  store i8 %308, i8* %309, align 1
  br label %310

310:                                              ; preds = %258, %265
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @YuvToRgb565Row(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8*, i32) #1 {
  %6 = shl i32 %4, 1
  %7 = and i32 %6, -4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %3, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %270, label %11

11:                                               ; preds = %5
  %12 = add nsw i64 %8, -4
  %13 = lshr exact i64 %12, 2
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 16
  br i1 %15, label %159, label %16

16:                                               ; preds = %11
  %17 = add nsw i64 %8, -4
  %18 = lshr exact i64 %17, 2
  %19 = getelementptr i8, i8* %3, i64 %8
  %20 = lshr exact i64 %17, 1
  %21 = add nuw i64 %20, 2
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = add nuw nsw i64 %18, 1
  %24 = getelementptr i8, i8* %1, i64 %23
  %25 = getelementptr i8, i8* %2, i64 %23
  %26 = icmp ugt i8* %22, %3
  %27 = icmp ugt i8* %19, %0
  %28 = and i1 %26, %27
  %29 = icmp ugt i8* %24, %3
  %30 = icmp ugt i8* %19, %1
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  %33 = icmp ugt i8* %25, %3
  %34 = icmp ugt i8* %19, %2
  %35 = and i1 %33, %34
  %36 = or i1 %32, %35
  br i1 %36, label %159, label %37

37:                                               ; preds = %16
  %38 = and i64 %14, 9223372036854775792
  %39 = shl nuw i64 %38, 1
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = shl i64 %38, 2
  %42 = getelementptr i8, i8* %3, i64 %41
  %43 = getelementptr i8, i8* %2, i64 %38
  %44 = getelementptr i8, i8* %1, i64 %38
  br label %45

45:                                               ; preds = %45, %37
  %46 = phi i64 [ 0, %37 ], [ %155, %45 ]
  %47 = shl i64 %46, 1
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = shl i64 %46, 2
  %50 = getelementptr i8, i8* %2, i64 %46
  %51 = getelementptr i8, i8* %1, i64 %46
  %52 = bitcast i8* %48 to <32 x i8>*
  %53 = load <32 x i8>, <32 x i8>* %52, align 1
  %54 = shufflevector <32 x i8> %53, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %55 = shufflevector <32 x i8> %53, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %56 = zext <16 x i8> %54 to <16 x i32>
  %57 = bitcast i8* %51 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1, !alias.scope !55
  %59 = zext <16 x i8> %58 to <16 x i32>
  %60 = bitcast i8* %50 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1, !alias.scope !58
  %62 = zext <16 x i8> %61 to <16 x i32>
  %63 = mul nuw nsw <16 x i32> %56, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %64 = lshr <16 x i32> %63, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %65 = mul nuw nsw <16 x i32> %62, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %66 = lshr <16 x i32> %65, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %67 = add nsw <16 x i32> %64, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %68 = add nsw <16 x i32> %67, %66
  %69 = icmp ult <16 x i32> %68, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %70 = lshr <16 x i32> %68, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %71 = icmp slt <16 x i32> %68, zeroinitializer
  %72 = select <16 x i1> %71, <16 x i32> zeroinitializer, <16 x i32> <i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248>
  %73 = select <16 x i1> %69, <16 x i32> %70, <16 x i32> %72
  %74 = mul nuw nsw <16 x i32> %59, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %75 = lshr <16 x i32> %74, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %76 = mul nuw nsw <16 x i32> %62, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %77 = lshr <16 x i32> %76, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %78 = add nuw nsw <16 x i32> %64, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %79 = sub nuw nsw <16 x i32> %78, %75
  %80 = sub nsw <16 x i32> %79, %77
  %81 = icmp ult <16 x i32> %80, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %82 = ashr <16 x i32> %80, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %83 = icmp slt <16 x i32> %80, zeroinitializer
  %84 = select <16 x i1> %83, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %85 = select <16 x i1> %81, <16 x i32> %82, <16 x i32> %84
  %86 = mul nuw nsw <16 x i32> %59, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %87 = lshr <16 x i32> %86, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %88 = add nsw <16 x i32> %64, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %89 = add nsw <16 x i32> %88, %87
  %90 = icmp ult <16 x i32> %89, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %91 = lshr <16 x i32> %89, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %92 = icmp slt <16 x i32> %89, zeroinitializer
  %93 = select <16 x i1> %92, <16 x i32> zeroinitializer, <16 x i32> <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %94 = select <16 x i1> %90, <16 x i32> %91, <16 x i32> %93
  %95 = and <16 x i32> %73, <i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248>
  %96 = lshr <16 x i32> %85, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %97 = or <16 x i32> %95, %96
  %98 = shl nsw <16 x i32> %85, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %99 = and <16 x i32> %98, <i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224>
  %100 = or <16 x i32> %99, %94
  %101 = trunc <16 x i32> %97 to <16 x i8>
  %102 = trunc <16 x i32> %100 to <16 x i8>
  %103 = zext <16 x i8> %55 to <16 x i32>
  %104 = bitcast i8* %51 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1, !alias.scope !55
  %106 = zext <16 x i8> %105 to <16 x i32>
  %107 = bitcast i8* %50 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1, !alias.scope !58
  %109 = zext <16 x i8> %108 to <16 x i32>
  %110 = mul nuw nsw <16 x i32> %103, <i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077, i32 19077>
  %111 = lshr <16 x i32> %110, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %112 = mul nuw nsw <16 x i32> %109, <i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149, i32 26149>
  %113 = lshr <16 x i32> %112, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %114 = add nsw <16 x i32> %111, <i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234, i32 -14234>
  %115 = add nsw <16 x i32> %114, %113
  %116 = icmp ult <16 x i32> %115, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %117 = lshr <16 x i32> %115, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %118 = icmp slt <16 x i32> %115, zeroinitializer
  %119 = select <16 x i1> %118, <16 x i32> zeroinitializer, <16 x i32> <i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248>
  %120 = select <16 x i1> %116, <16 x i32> %117, <16 x i32> %119
  %121 = mul nuw nsw <16 x i32> %106, <i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419, i32 6419>
  %122 = lshr <16 x i32> %121, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %123 = mul nuw nsw <16 x i32> %109, <i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320, i32 13320>
  %124 = lshr <16 x i32> %123, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %125 = add nuw nsw <16 x i32> %111, <i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708, i32 8708>
  %126 = sub nuw nsw <16 x i32> %125, %122
  %127 = sub nsw <16 x i32> %126, %124
  %128 = icmp ult <16 x i32> %127, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %129 = ashr <16 x i32> %127, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %130 = icmp slt <16 x i32> %127, zeroinitializer
  %131 = select <16 x i1> %130, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %132 = select <16 x i1> %128, <16 x i32> %129, <16 x i32> %131
  %133 = mul nuw nsw <16 x i32> %106, <i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050, i32 33050>
  %134 = lshr <16 x i32> %133, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %135 = add nsw <16 x i32> %111, <i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685, i32 -17685>
  %136 = add nsw <16 x i32> %135, %134
  %137 = icmp ult <16 x i32> %136, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %138 = lshr <16 x i32> %136, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %139 = icmp slt <16 x i32> %136, zeroinitializer
  %140 = select <16 x i1> %139, <16 x i32> zeroinitializer, <16 x i32> <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %141 = select <16 x i1> %137, <16 x i32> %138, <16 x i32> %140
  %142 = and <16 x i32> %120, <i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248>
  %143 = lshr <16 x i32> %132, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %144 = or <16 x i32> %142, %143
  %145 = shl nsw <16 x i32> %132, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %146 = and <16 x i32> %145, <i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224, i32 224>
  %147 = or <16 x i32> %146, %141
  %148 = trunc <16 x i32> %144 to <16 x i8>
  %149 = trunc <16 x i32> %147 to <16 x i8>
  %150 = getelementptr inbounds i8, i8* %3, i64 %49
  %151 = bitcast i8* %150 to <64 x i8>*
  %152 = shufflevector <16 x i8> %101, <16 x i8> %102, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %153 = shufflevector <16 x i8> %148, <16 x i8> %149, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %154 = shufflevector <32 x i8> %152, <32 x i8> %153, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %154, <64 x i8>* %151, align 1
  %155 = add i64 %46, 16
  %156 = icmp eq i64 %155, %38
  br i1 %156, label %157, label %45, !llvm.loop !60

157:                                              ; preds = %45
  %158 = icmp eq i64 %14, %38
  br i1 %158, label %270, label %159

159:                                              ; preds = %157, %16, %11
  %160 = phi i8* [ %0, %16 ], [ %0, %11 ], [ %40, %157 ]
  %161 = phi i8* [ %3, %16 ], [ %3, %11 ], [ %42, %157 ]
  %162 = phi i8* [ %2, %16 ], [ %2, %11 ], [ %43, %157 ]
  %163 = phi i8* [ %1, %16 ], [ %1, %11 ], [ %44, %157 ]
  br label %164

164:                                              ; preds = %159, %164
  %165 = phi i8* [ %265, %164 ], [ %160, %159 ]
  %166 = phi i8* [ %268, %164 ], [ %161, %159 ]
  %167 = phi i8* [ %267, %164 ], [ %162, %159 ]
  %168 = phi i8* [ %266, %164 ], [ %163, %159 ]
  %169 = load i8, i8* %165, align 1
  %170 = zext i8 %169 to i32
  %171 = load i8, i8* %168, align 1
  %172 = zext i8 %171 to i32
  %173 = load i8, i8* %167, align 1
  %174 = zext i8 %173 to i32
  %175 = mul nuw nsw i32 %170, 19077
  %176 = lshr i32 %175, 8
  %177 = mul nuw nsw i32 %174, 26149
  %178 = lshr i32 %177, 8
  %179 = add nsw i32 %176, -14234
  %180 = add nsw i32 %179, %178
  %181 = icmp ult i32 %180, 16384
  %182 = lshr i32 %180, 6
  %183 = icmp slt i32 %180, 0
  %184 = select i1 %183, i32 0, i32 248
  %185 = select i1 %181, i32 %182, i32 %184
  %186 = mul nuw nsw i32 %172, 6419
  %187 = lshr i32 %186, 8
  %188 = mul nuw nsw i32 %174, 13320
  %189 = lshr i32 %188, 8
  %190 = add nuw nsw i32 %176, 8708
  %191 = sub nuw nsw i32 %190, %187
  %192 = sub nsw i32 %191, %189
  %193 = icmp ult i32 %192, 16384
  %194 = ashr i32 %192, 6
  %195 = icmp slt i32 %192, 0
  %196 = select i1 %195, i32 0, i32 255
  %197 = select i1 %193, i32 %194, i32 %196
  %198 = mul nuw nsw i32 %172, 33050
  %199 = lshr i32 %198, 8
  %200 = add nsw i32 %176, -17685
  %201 = add nsw i32 %200, %199
  %202 = icmp ult i32 %201, 16384
  %203 = lshr i32 %201, 9
  %204 = icmp slt i32 %201, 0
  %205 = select i1 %204, i32 0, i32 31
  %206 = select i1 %202, i32 %203, i32 %205
  %207 = and i32 %185, 248
  %208 = lshr i32 %197, 5
  %209 = or i32 %207, %208
  %210 = shl nsw i32 %197, 3
  %211 = and i32 %210, 224
  %212 = or i32 %211, %206
  %213 = trunc i32 %209 to i8
  store i8 %213, i8* %166, align 1
  %214 = trunc i32 %212 to i8
  %215 = getelementptr inbounds i8, i8* %166, i64 1
  store i8 %214, i8* %215, align 1
  %216 = getelementptr inbounds i8, i8* %165, i64 1
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = load i8, i8* %168, align 1
  %220 = zext i8 %219 to i32
  %221 = load i8, i8* %167, align 1
  %222 = zext i8 %221 to i32
  %223 = getelementptr inbounds i8, i8* %166, i64 2
  %224 = mul nuw nsw i32 %218, 19077
  %225 = lshr i32 %224, 8
  %226 = mul nuw nsw i32 %222, 26149
  %227 = lshr i32 %226, 8
  %228 = add nsw i32 %225, -14234
  %229 = add nsw i32 %228, %227
  %230 = icmp ult i32 %229, 16384
  %231 = lshr i32 %229, 6
  %232 = icmp slt i32 %229, 0
  %233 = select i1 %232, i32 0, i32 248
  %234 = select i1 %230, i32 %231, i32 %233
  %235 = mul nuw nsw i32 %220, 6419
  %236 = lshr i32 %235, 8
  %237 = mul nuw nsw i32 %222, 13320
  %238 = lshr i32 %237, 8
  %239 = add nuw nsw i32 %225, 8708
  %240 = sub nuw nsw i32 %239, %236
  %241 = sub nsw i32 %240, %238
  %242 = icmp ult i32 %241, 16384
  %243 = ashr i32 %241, 6
  %244 = icmp slt i32 %241, 0
  %245 = select i1 %244, i32 0, i32 255
  %246 = select i1 %242, i32 %243, i32 %245
  %247 = mul nuw nsw i32 %220, 33050
  %248 = lshr i32 %247, 8
  %249 = add nsw i32 %225, -17685
  %250 = add nsw i32 %249, %248
  %251 = icmp ult i32 %250, 16384
  %252 = lshr i32 %250, 9
  %253 = icmp slt i32 %250, 0
  %254 = select i1 %253, i32 0, i32 31
  %255 = select i1 %251, i32 %252, i32 %254
  %256 = and i32 %234, 248
  %257 = lshr i32 %246, 5
  %258 = or i32 %256, %257
  %259 = shl nsw i32 %246, 3
  %260 = and i32 %259, 224
  %261 = or i32 %260, %255
  %262 = trunc i32 %258 to i8
  store i8 %262, i8* %223, align 1
  %263 = trunc i32 %261 to i8
  %264 = getelementptr inbounds i8, i8* %166, i64 3
  store i8 %263, i8* %264, align 1
  %265 = getelementptr inbounds i8, i8* %165, i64 2
  %266 = getelementptr inbounds i8, i8* %168, i64 1
  %267 = getelementptr inbounds i8, i8* %167, i64 1
  %268 = getelementptr inbounds i8, i8* %166, i64 4
  %269 = icmp eq i8* %268, %9
  br i1 %269, label %270, label %164, !llvm.loop !61

270:                                              ; preds = %164, %157, %5
  %271 = phi i8* [ %1, %5 ], [ %44, %157 ], [ %266, %164 ]
  %272 = phi i8* [ %2, %5 ], [ %43, %157 ], [ %267, %164 ]
  %273 = phi i8* [ %3, %5 ], [ %9, %157 ], [ %9, %164 ]
  %274 = phi i8* [ %0, %5 ], [ %40, %157 ], [ %265, %164 ]
  %275 = and i32 %4, 1
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %325, label %277

277:                                              ; preds = %270
  %278 = load i8, i8* %274, align 1
  %279 = zext i8 %278 to i32
  %280 = load i8, i8* %271, align 1
  %281 = zext i8 %280 to i32
  %282 = load i8, i8* %272, align 1
  %283 = zext i8 %282 to i32
  %284 = mul nuw nsw i32 %279, 19077
  %285 = lshr i32 %284, 8
  %286 = mul nuw nsw i32 %283, 26149
  %287 = lshr i32 %286, 8
  %288 = add nsw i32 %285, -14234
  %289 = add nsw i32 %288, %287
  %290 = icmp ult i32 %289, 16384
  %291 = lshr i32 %289, 6
  %292 = icmp slt i32 %289, 0
  %293 = select i1 %292, i32 0, i32 248
  %294 = select i1 %290, i32 %291, i32 %293
  %295 = mul nuw nsw i32 %281, 6419
  %296 = lshr i32 %295, 8
  %297 = mul nuw nsw i32 %283, 13320
  %298 = lshr i32 %297, 8
  %299 = add nuw nsw i32 %285, 8708
  %300 = sub nuw nsw i32 %299, %296
  %301 = sub nsw i32 %300, %298
  %302 = icmp ult i32 %301, 16384
  %303 = ashr i32 %301, 6
  %304 = icmp slt i32 %301, 0
  %305 = select i1 %304, i32 0, i32 255
  %306 = select i1 %302, i32 %303, i32 %305
  %307 = mul nuw nsw i32 %281, 33050
  %308 = lshr i32 %307, 8
  %309 = add nsw i32 %285, -17685
  %310 = add nsw i32 %309, %308
  %311 = icmp ult i32 %310, 16384
  %312 = lshr i32 %310, 9
  %313 = icmp slt i32 %310, 0
  %314 = select i1 %313, i32 0, i32 31
  %315 = select i1 %311, i32 %312, i32 %314
  %316 = and i32 %294, 248
  %317 = lshr i32 %306, 5
  %318 = or i32 %316, %317
  %319 = shl nsw i32 %306, 3
  %320 = and i32 %319, 224
  %321 = or i32 %320, %315
  %322 = trunc i32 %318 to i8
  store i8 %322, i8* %273, align 1
  %323 = trunc i32 %321 to i8
  %324 = getelementptr inbounds i8, i8* %273, i64 1
  store i8 %323, i8* %324, align 1
  br label %325

325:                                              ; preds = %270, %277
  ret void
}

declare void @WebPInitSamplersSSE2() local_unnamed_addr #2

declare void @WebPInitSamplersSSE41() local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ConvertARGBToY_C(i32* nocapture readonly, i8* nocapture, i32) #1 {
  %4 = bitcast i32* %0 to i8*
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %64

6:                                                ; preds = %3
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 4
  br i1 %8, label %42, label %9

9:                                                ; preds = %6
  %10 = getelementptr i8, i8* %1, i64 %7
  %11 = getelementptr i32, i32* %0, i64 %7
  %12 = bitcast i32* %11 to i8*
  %13 = icmp ugt i8* %12, %1
  %14 = icmp ugt i8* %10, %4
  %15 = and i1 %13, %14
  br i1 %15, label %42, label %16

16:                                               ; preds = %9
  %17 = and i64 %7, 4294967292
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %38, %18 ]
  %20 = getelementptr inbounds i32, i32* %0, i64 %19
  %21 = bitcast i32* %20 to <4 x i32>*
  %22 = load <4 x i32>, <4 x i32>* %21, align 4, !alias.scope !62
  %23 = lshr <4 x i32> %22, <i32 16, i32 16, i32 16, i32 16>
  %24 = and <4 x i32> %23, <i32 255, i32 255, i32 255, i32 255>
  %25 = lshr <4 x i32> %22, <i32 8, i32 8, i32 8, i32 8>
  %26 = and <4 x i32> %25, <i32 255, i32 255, i32 255, i32 255>
  %27 = and <4 x i32> %22, <i32 255, i32 255, i32 255, i32 255>
  %28 = mul nuw nsw <4 x i32> %24, <i32 16839, i32 16839, i32 16839, i32 16839>
  %29 = mul nuw nsw <4 x i32> %26, <i32 33059, i32 33059, i32 33059, i32 33059>
  %30 = mul nuw nsw <4 x i32> %27, <i32 6420, i32 6420, i32 6420, i32 6420>
  %31 = add nuw nsw <4 x i32> %30, <i32 1081344, i32 1081344, i32 1081344, i32 1081344>
  %32 = add nuw nsw <4 x i32> %31, %28
  %33 = add nuw nsw <4 x i32> %32, %29
  %34 = lshr <4 x i32> %33, <i32 16, i32 16, i32 16, i32 16>
  %35 = trunc <4 x i32> %34 to <4 x i8>
  %36 = getelementptr inbounds i8, i8* %1, i64 %19
  %37 = bitcast i8* %36 to <4 x i8>*
  store <4 x i8> %35, <4 x i8>* %37, align 1, !alias.scope !65, !noalias !62
  %38 = add i64 %19, 4
  %39 = icmp eq i64 %38, %17
  br i1 %39, label %40, label %18, !llvm.loop !67

40:                                               ; preds = %18
  %41 = icmp eq i64 %17, %7
  br i1 %41, label %64, label %42

42:                                               ; preds = %40, %9, %6
  %43 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %17, %40 ]
  br label %44

44:                                               ; preds = %42, %44
  %45 = phi i64 [ %62, %44 ], [ %43, %42 ]
  %46 = getelementptr inbounds i32, i32* %0, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = lshr i32 %47, 16
  %49 = and i32 %48, 255
  %50 = lshr i32 %47, 8
  %51 = and i32 %50, 255
  %52 = and i32 %47, 255
  %53 = mul nuw nsw i32 %49, 16839
  %54 = mul nuw nsw i32 %51, 33059
  %55 = mul nuw nsw i32 %52, 6420
  %56 = add nuw nsw i32 %55, 1081344
  %57 = add nuw nsw i32 %56, %53
  %58 = add nuw nsw i32 %57, %54
  %59 = lshr i32 %58, 16
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds i8, i8* %1, i64 %45
  store i8 %60, i8* %61, align 1
  %62 = add nuw nsw i64 %45, 1
  %63 = icmp eq i64 %62, %7
  br i1 %63, label %64, label %44, !llvm.loop !68

64:                                               ; preds = %44, %40, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ConvertRGB24ToY_C(i8* nocapture readonly, i8* nocapture, i32) #1 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %77

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = and i64 %6, 1
  %8 = icmp eq i32 %2, 1
  br i1 %8, label %55, label %9

9:                                                ; preds = %5
  %10 = sub nsw i64 %6, %7
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ 0, %9 ], [ %51, %11 ]
  %13 = phi i8* [ %0, %9 ], [ %52, %11 ]
  %14 = phi i64 [ %10, %9 ], [ %53, %11 ]
  %15 = load i8, i8* %13, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %13, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds i8, i8* %13, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = mul nuw nsw i32 %16, 16839
  %24 = mul nuw nsw i32 %19, 33059
  %25 = mul nuw nsw i32 %22, 6420
  %26 = add nuw nsw i32 %23, 1081344
  %27 = add nuw nsw i32 %26, %24
  %28 = add nuw nsw i32 %27, %25
  %29 = lshr i32 %28, 16
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds i8, i8* %1, i64 %12
  store i8 %30, i8* %31, align 1
  %32 = or i64 %12, 1
  %33 = getelementptr inbounds i8, i8* %13, i64 3
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds i8, i8* %13, i64 4
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = getelementptr inbounds i8, i8* %13, i64 5
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = mul nuw nsw i32 %35, 16839
  %43 = mul nuw nsw i32 %38, 33059
  %44 = mul nuw nsw i32 %41, 6420
  %45 = add nuw nsw i32 %42, 1081344
  %46 = add nuw nsw i32 %45, %43
  %47 = add nuw nsw i32 %46, %44
  %48 = lshr i32 %47, 16
  %49 = trunc i32 %48 to i8
  %50 = getelementptr inbounds i8, i8* %1, i64 %32
  store i8 %49, i8* %50, align 1
  %51 = add nuw nsw i64 %12, 2
  %52 = getelementptr inbounds i8, i8* %13, i64 6
  %53 = add i64 %14, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %11

55:                                               ; preds = %11, %5
  %56 = phi i64 [ 0, %5 ], [ %51, %11 ]
  %57 = phi i8* [ %0, %5 ], [ %52, %11 ]
  %58 = icmp eq i64 %7, 0
  br i1 %58, label %77, label %59

59:                                               ; preds = %55
  %60 = load i8, i8* %57, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds i8, i8* %57, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = getelementptr inbounds i8, i8* %57, i64 2
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nuw nsw i32 %61, 16839
  %69 = mul nuw nsw i32 %64, 33059
  %70 = mul nuw nsw i32 %67, 6420
  %71 = add nuw nsw i32 %68, 1081344
  %72 = add nuw nsw i32 %71, %69
  %73 = add nuw nsw i32 %72, %70
  %74 = lshr i32 %73, 16
  %75 = trunc i32 %74 to i8
  %76 = getelementptr inbounds i8, i8* %1, i64 %56
  store i8 %75, i8* %76, align 1
  br label %77

77:                                               ; preds = %59, %55, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ConvertBGR24ToY_C(i8* nocapture readonly, i8* nocapture, i32) #1 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %77

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = and i64 %6, 1
  %8 = icmp eq i32 %2, 1
  br i1 %8, label %55, label %9

9:                                                ; preds = %5
  %10 = sub nsw i64 %6, %7
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ 0, %9 ], [ %51, %11 ]
  %13 = phi i8* [ %0, %9 ], [ %52, %11 ]
  %14 = phi i64 [ %10, %9 ], [ %53, %11 ]
  %15 = getelementptr inbounds i8, i8* %13, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds i8, i8* %13, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = load i8, i8* %13, align 1
  %22 = zext i8 %21 to i32
  %23 = mul nuw nsw i32 %17, 16839
  %24 = mul nuw nsw i32 %20, 33059
  %25 = mul nuw nsw i32 %22, 6420
  %26 = add nuw nsw i32 %23, 1081344
  %27 = add nuw nsw i32 %26, %24
  %28 = add nuw nsw i32 %27, %25
  %29 = lshr i32 %28, 16
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds i8, i8* %1, i64 %12
  store i8 %30, i8* %31, align 1
  %32 = or i64 %12, 1
  %33 = getelementptr inbounds i8, i8* %13, i64 3
  %34 = getelementptr inbounds i8, i8* %13, i64 5
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = getelementptr inbounds i8, i8* %13, i64 4
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = load i8, i8* %33, align 1
  %41 = zext i8 %40 to i32
  %42 = mul nuw nsw i32 %36, 16839
  %43 = mul nuw nsw i32 %39, 33059
  %44 = mul nuw nsw i32 %41, 6420
  %45 = add nuw nsw i32 %42, 1081344
  %46 = add nuw nsw i32 %45, %43
  %47 = add nuw nsw i32 %46, %44
  %48 = lshr i32 %47, 16
  %49 = trunc i32 %48 to i8
  %50 = getelementptr inbounds i8, i8* %1, i64 %32
  store i8 %49, i8* %50, align 1
  %51 = add nuw nsw i64 %12, 2
  %52 = getelementptr inbounds i8, i8* %13, i64 6
  %53 = add i64 %14, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %11

55:                                               ; preds = %11, %5
  %56 = phi i64 [ 0, %5 ], [ %51, %11 ]
  %57 = phi i8* [ %0, %5 ], [ %52, %11 ]
  %58 = icmp eq i64 %7, 0
  br i1 %58, label %77, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds i8, i8* %57, i64 2
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = getelementptr inbounds i8, i8* %57, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = load i8, i8* %57, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nuw nsw i32 %62, 16839
  %69 = mul nuw nsw i32 %65, 33059
  %70 = mul nuw nsw i32 %67, 6420
  %71 = add nuw nsw i32 %68, 1081344
  %72 = add nuw nsw i32 %71, %69
  %73 = add nuw nsw i32 %72, %70
  %74 = lshr i32 %73, 16
  %75 = trunc i32 %74 to i8
  %76 = getelementptr inbounds i8, i8* %1, i64 %56
  store i8 %75, i8* %76, align 1
  br label %77

77:                                               ; preds = %59, %55, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i64 @SharpYUVUpdateY_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture, i32) #1 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %34

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %6
  %9 = phi i64 [ 0, %6 ], [ %32, %8 ]
  %10 = phi i64 [ 0, %6 ], [ %31, %8 ]
  %11 = getelementptr inbounds i16, i16* %0, i64 %9
  %12 = load i16, i16* %11, align 2
  %13 = zext i16 %12 to i32
  %14 = getelementptr inbounds i16, i16* %1, i64 %9
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = sub nsw i32 %13, %16
  %18 = getelementptr inbounds i16, i16* %2, i64 %9
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = add nsw i32 %17, %20
  %22 = icmp slt i32 %21, 1023
  %23 = select i1 %22, i32 %21, i32 1023
  %24 = icmp sgt i32 %23, 0
  %25 = select i1 %24, i32 %23, i32 0
  %26 = trunc i32 %25 to i16
  store i16 %26, i16* %18, align 2
  %27 = icmp slt i32 %17, 0
  %28 = sub nsw i32 0, %17
  %29 = select i1 %27, i32 %28, i32 %17
  %30 = zext i32 %29 to i64
  %31 = add i64 %10, %30
  %32 = add nuw nsw i64 %9, 1
  %33 = icmp eq i64 %32, %7
  br i1 %33, label %34, label %8

34:                                               ; preds = %8, %4
  %35 = phi i64 [ 0, %4 ], [ %31, %8 ]
  ret i64 %35
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @SharpYUVUpdateRGB_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture, i32) #1 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %154

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = icmp ult i32 %3, 16
  br i1 %8, label %114, label %9

9:                                                ; preds = %6
  %10 = getelementptr i16, i16* %2, i64 %7
  %11 = getelementptr i16, i16* %0, i64 %7
  %12 = getelementptr i16, i16* %1, i64 %7
  %13 = icmp ugt i16* %11, %2
  %14 = icmp ugt i16* %10, %0
  %15 = and i1 %13, %14
  %16 = icmp ugt i16* %12, %2
  %17 = icmp ugt i16* %10, %1
  %18 = and i1 %16, %17
  %19 = or i1 %15, %18
  br i1 %19, label %114, label %20

20:                                               ; preds = %9
  %21 = and i64 %7, 4294967280
  %22 = add nsw i64 %21, -16
  %23 = lshr exact i64 %22, 4
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %84, label %27

27:                                               ; preds = %20
  %28 = sub nuw nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %81, %29 ]
  %31 = phi i64 [ %28, %27 ], [ %82, %29 ]
  %32 = getelementptr inbounds i16, i16* %0, i64 %30
  %33 = bitcast i16* %32 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 2, !alias.scope !69
  %35 = getelementptr inbounds i16, i16* %32, i64 8
  %36 = bitcast i16* %35 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 2, !alias.scope !69
  %38 = getelementptr inbounds i16, i16* %1, i64 %30
  %39 = bitcast i16* %38 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 2, !alias.scope !72
  %41 = getelementptr inbounds i16, i16* %38, i64 8
  %42 = bitcast i16* %41 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 2, !alias.scope !72
  %44 = sub <8 x i16> %34, %40
  %45 = sub <8 x i16> %37, %43
  %46 = getelementptr inbounds i16, i16* %2, i64 %30
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !74, !noalias !76
  %49 = getelementptr inbounds i16, i16* %46, i64 8
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 2, !alias.scope !74, !noalias !76
  %52 = add <8 x i16> %44, %48
  %53 = add <8 x i16> %45, %51
  %54 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %54, align 2, !alias.scope !74, !noalias !76
  %55 = bitcast i16* %49 to <8 x i16>*
  store <8 x i16> %53, <8 x i16>* %55, align 2, !alias.scope !74, !noalias !76
  %56 = or i64 %30, 16
  %57 = getelementptr inbounds i16, i16* %0, i64 %56
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !69
  %60 = getelementptr inbounds i16, i16* %57, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2, !alias.scope !69
  %63 = getelementptr inbounds i16, i16* %1, i64 %56
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !72
  %66 = getelementptr inbounds i16, i16* %63, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !72
  %69 = sub <8 x i16> %59, %65
  %70 = sub <8 x i16> %62, %68
  %71 = getelementptr inbounds i16, i16* %2, i64 %56
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2, !alias.scope !74, !noalias !76
  %74 = getelementptr inbounds i16, i16* %71, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !74, !noalias !76
  %77 = add <8 x i16> %69, %73
  %78 = add <8 x i16> %70, %76
  %79 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %79, align 2, !alias.scope !74, !noalias !76
  %80 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %80, align 2, !alias.scope !74, !noalias !76
  %81 = add i64 %30, 32
  %82 = add i64 %31, -2
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %29, !llvm.loop !77

84:                                               ; preds = %29, %20
  %85 = phi i64 [ 0, %20 ], [ %81, %29 ]
  %86 = icmp eq i64 %25, 0
  br i1 %86, label %112, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds i16, i16* %0, i64 %85
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !69
  %91 = getelementptr inbounds i16, i16* %88, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !69
  %94 = getelementptr inbounds i16, i16* %1, i64 %85
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !72
  %97 = getelementptr inbounds i16, i16* %94, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2, !alias.scope !72
  %100 = sub <8 x i16> %90, %96
  %101 = sub <8 x i16> %93, %99
  %102 = getelementptr inbounds i16, i16* %2, i64 %85
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !74, !noalias !76
  %105 = getelementptr inbounds i16, i16* %102, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !74, !noalias !76
  %108 = add <8 x i16> %100, %104
  %109 = add <8 x i16> %101, %107
  %110 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %110, align 2, !alias.scope !74, !noalias !76
  %111 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %111, align 2, !alias.scope !74, !noalias !76
  br label %112

112:                                              ; preds = %84, %87
  %113 = icmp eq i64 %21, %7
  br i1 %113, label %154, label %114

114:                                              ; preds = %112, %9, %6
  %115 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %21, %112 ]
  %116 = xor i64 %115, -1
  %117 = and i64 %7, 1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %129, label %119

119:                                              ; preds = %114
  %120 = getelementptr inbounds i16, i16* %0, i64 %115
  %121 = load i16, i16* %120, align 2
  %122 = getelementptr inbounds i16, i16* %1, i64 %115
  %123 = load i16, i16* %122, align 2
  %124 = sub i16 %121, %123
  %125 = getelementptr inbounds i16, i16* %2, i64 %115
  %126 = load i16, i16* %125, align 2
  %127 = add i16 %124, %126
  store i16 %127, i16* %125, align 2
  %128 = or i64 %115, 1
  br label %129

129:                                              ; preds = %114, %119
  %130 = phi i64 [ %115, %114 ], [ %128, %119 ]
  %131 = sub nsw i64 0, %7
  %132 = icmp eq i64 %116, %131
  br i1 %132, label %154, label %133

133:                                              ; preds = %129, %133
  %134 = phi i64 [ %152, %133 ], [ %130, %129 ]
  %135 = getelementptr inbounds i16, i16* %0, i64 %134
  %136 = load i16, i16* %135, align 2
  %137 = getelementptr inbounds i16, i16* %1, i64 %134
  %138 = load i16, i16* %137, align 2
  %139 = sub i16 %136, %138
  %140 = getelementptr inbounds i16, i16* %2, i64 %134
  %141 = load i16, i16* %140, align 2
  %142 = add i16 %139, %141
  store i16 %142, i16* %140, align 2
  %143 = add nuw nsw i64 %134, 1
  %144 = getelementptr inbounds i16, i16* %0, i64 %143
  %145 = load i16, i16* %144, align 2
  %146 = getelementptr inbounds i16, i16* %1, i64 %143
  %147 = load i16, i16* %146, align 2
  %148 = sub i16 %145, %147
  %149 = getelementptr inbounds i16, i16* %2, i64 %143
  %150 = load i16, i16* %149, align 2
  %151 = add i16 %148, %150
  store i16 %151, i16* %149, align 2
  %152 = add nuw nsw i64 %134, 2
  %153 = icmp eq i64 %152, %7
  br i1 %153, label %154, label %133, !llvm.loop !78

154:                                              ; preds = %129, %133, %112, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @SharpYUVFilterRow_C(i16* nocapture readonly, i16* nocapture readonly, i32, i16* nocapture readonly, i16* nocapture) #1 {
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %149

7:                                                ; preds = %5
  %8 = zext i32 %2 to i64
  %9 = icmp ult i32 %2, 8
  br i1 %9, label %93, label %10

10:                                               ; preds = %7
  %11 = shl nuw nsw i64 %8, 1
  %12 = getelementptr i16, i16* %4, i64 %11
  %13 = add nuw nsw i64 %8, 1
  %14 = getelementptr i16, i16* %0, i64 %13
  %15 = getelementptr i16, i16* %1, i64 %13
  %16 = getelementptr i16, i16* %3, i64 %11
  %17 = icmp ugt i16* %14, %4
  %18 = icmp ugt i16* %12, %0
  %19 = and i1 %17, %18
  %20 = icmp ugt i16* %15, %4
  %21 = icmp ugt i16* %12, %1
  %22 = and i1 %20, %21
  %23 = or i1 %19, %22
  %24 = icmp ugt i16* %16, %4
  %25 = icmp ugt i16* %12, %3
  %26 = and i1 %24, %25
  %27 = or i1 %23, %26
  br i1 %27, label %93, label %28

28:                                               ; preds = %10
  %29 = and i64 %8, 4294967288
  %30 = getelementptr i16, i16* %0, i64 %29
  %31 = getelementptr i16, i16* %1, i64 %29
  %32 = getelementptr inbounds i16, i16* %4, i64 -1
  br label %33

33:                                               ; preds = %33, %28
  %34 = phi i64 [ 0, %28 ], [ %89, %33 ]
  %35 = getelementptr i16, i16* %0, i64 %34
  %36 = getelementptr i16, i16* %1, i64 %34
  %37 = bitcast i16* %35 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 2, !alias.scope !79
  %39 = sext <8 x i16> %38 to <8 x i32>
  %40 = mul nsw <8 x i32> %39, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %41 = getelementptr inbounds i16, i16* %35, i64 1
  %42 = bitcast i16* %41 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 2, !alias.scope !79
  %44 = sext <8 x i16> %43 to <8 x i32>
  %45 = bitcast i16* %36 to <8 x i16>*
  %46 = load <8 x i16>, <8 x i16>* %45, align 2, !alias.scope !82
  %47 = sext <8 x i16> %46 to <8 x i32>
  %48 = getelementptr inbounds i16, i16* %36, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !82
  %51 = sext <8 x i16> %50 to <8 x i32>
  %52 = add nsw <8 x i32> %47, %44
  %53 = mul nsw <8 x i32> %52, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %54 = add nsw <8 x i32> %40, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %55 = add nsw <8 x i32> %54, %51
  %56 = add nsw <8 x i32> %55, %53
  %57 = ashr <8 x i32> %56, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %58 = mul nsw <8 x i32> %44, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %59 = add nsw <8 x i32> %51, %39
  %60 = mul nsw <8 x i32> %59, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %61 = add nsw <8 x i32> %58, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %62 = add nsw <8 x i32> %61, %47
  %63 = add nsw <8 x i32> %62, %60
  %64 = ashr <8 x i32> %63, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %65 = shl nuw nsw i64 %34, 1
  %66 = getelementptr inbounds i16, i16* %3, i64 %65
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 2
  %69 = shufflevector <16 x i16> %68, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %70 = shufflevector <16 x i16> %68, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %71 = zext <8 x i16> %69 to <8 x i32>
  %72 = add nsw <8 x i32> %57, %71
  %73 = icmp slt <8 x i32> %72, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %74 = select <8 x i1> %73, <8 x i32> %72, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %75 = icmp sgt <8 x i32> %74, zeroinitializer
  %76 = select <8 x i1> %75, <8 x i32> %74, <8 x i32> zeroinitializer
  %77 = trunc <8 x i32> %76 to <8 x i16>
  %78 = or i64 %65, 1
  %79 = zext <8 x i16> %70 to <8 x i32>
  %80 = add nsw <8 x i32> %64, %79
  %81 = icmp slt <8 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = select <8 x i1> %81, <8 x i32> %80, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %83 = icmp sgt <8 x i32> %82, zeroinitializer
  %84 = select <8 x i1> %83, <8 x i32> %82, <8 x i32> zeroinitializer
  %85 = trunc <8 x i32> %84 to <8 x i16>
  %86 = getelementptr inbounds i16, i16* %32, i64 %78
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = shufflevector <8 x i16> %77, <8 x i16> %85, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i16> %88, <16 x i16>* %87, align 2
  %89 = add i64 %34, 8
  %90 = icmp eq i64 %89, %29
  br i1 %90, label %91, label %33, !llvm.loop !84

91:                                               ; preds = %33
  %92 = icmp eq i64 %29, %8
  br i1 %92, label %149, label %93

93:                                               ; preds = %91, %10, %7
  %94 = phi i64 [ 0, %10 ], [ 0, %7 ], [ %29, %91 ]
  %95 = phi i16* [ %0, %10 ], [ %0, %7 ], [ %30, %91 ]
  %96 = phi i16* [ %1, %10 ], [ %1, %7 ], [ %31, %91 ]
  br label %97

97:                                               ; preds = %93, %97
  %98 = phi i64 [ %147, %97 ], [ %94, %93 ]
  %99 = phi i16* [ %104, %97 ], [ %95, %93 ]
  %100 = phi i16* [ %109, %97 ], [ %96, %93 ]
  %101 = load i16, i16* %99, align 2
  %102 = sext i16 %101 to i32
  %103 = mul nsw i32 %102, 9
  %104 = getelementptr inbounds i16, i16* %99, i64 1
  %105 = load i16, i16* %104, align 2
  %106 = sext i16 %105 to i32
  %107 = load i16, i16* %100, align 2
  %108 = sext i16 %107 to i32
  %109 = getelementptr inbounds i16, i16* %100, i64 1
  %110 = load i16, i16* %109, align 2
  %111 = sext i16 %110 to i32
  %112 = add nsw i32 %108, %106
  %113 = mul nsw i32 %112, 3
  %114 = add nsw i32 %103, 8
  %115 = add nsw i32 %114, %111
  %116 = add nsw i32 %115, %113
  %117 = ashr i32 %116, 4
  %118 = mul nsw i32 %106, 9
  %119 = add nsw i32 %111, %102
  %120 = mul nsw i32 %119, 3
  %121 = add nsw i32 %118, 8
  %122 = add nsw i32 %121, %108
  %123 = add nsw i32 %122, %120
  %124 = ashr i32 %123, 4
  %125 = shl nuw nsw i64 %98, 1
  %126 = getelementptr inbounds i16, i16* %3, i64 %125
  %127 = load i16, i16* %126, align 2
  %128 = zext i16 %127 to i32
  %129 = add nsw i32 %117, %128
  %130 = icmp slt i32 %129, 1023
  %131 = select i1 %130, i32 %129, i32 1023
  %132 = icmp sgt i32 %131, 0
  %133 = select i1 %132, i32 %131, i32 0
  %134 = trunc i32 %133 to i16
  %135 = getelementptr inbounds i16, i16* %4, i64 %125
  store i16 %134, i16* %135, align 2
  %136 = or i64 %125, 1
  %137 = getelementptr inbounds i16, i16* %3, i64 %136
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i32
  %140 = add nsw i32 %124, %139
  %141 = icmp slt i32 %140, 1023
  %142 = select i1 %141, i32 %140, i32 1023
  %143 = icmp sgt i32 %142, 0
  %144 = select i1 %143, i32 %142, i32 0
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds i16, i16* %4, i64 %136
  store i16 %145, i16* %146, align 2
  %147 = add nuw nsw i64 %98, 1
  %148 = icmp eq i64 %147, %8
  br i1 %148, label %149, label %97, !llvm.loop !85

149:                                              ; preds = %97, %91, %5
  ret void
}

declare void @WebPInitConvertARGBToYUVSSE2() local_unnamed_addr #2

declare void @WebPInitSharpYUVSSE2() local_unnamed_addr #2

declare void @WebPInitConvertARGBToYUVSSE41() local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6, !7}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = !{!6}
!9 = !{!7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !11}
!19 = distinct !{!19, !11}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !11}
!26 = distinct !{!26, !11}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = distinct !{!32, !11}
!33 = distinct !{!33, !11}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !11}
!40 = distinct !{!40, !11}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !11}
!47 = distinct !{!47, !11}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !{!52}
!52 = distinct !{!52, !50}
!53 = distinct !{!53, !11}
!54 = distinct !{!54, !11}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !11}
!61 = distinct !{!61, !11}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !11}
!68 = distinct !{!68, !11}
!69 = !{!70}
!70 = distinct !{!70, !71}
!71 = distinct !{!71, !"LVerDomain"}
!72 = !{!73}
!73 = distinct !{!73, !71}
!74 = !{!75}
!75 = distinct !{!75, !71}
!76 = !{!70, !73}
!77 = distinct !{!77, !11}
!78 = distinct !{!78, !11}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = distinct !{!84, !11}
!85 = distinct !{!85, !11}
