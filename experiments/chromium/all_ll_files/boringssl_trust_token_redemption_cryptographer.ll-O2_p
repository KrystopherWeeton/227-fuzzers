; ModuleID = '../../services/network/trust_tokens/boringssl_trust_token_redemption_cryptographer.cc'
source_filename = "../../services/network/trust_tokens/boringssl_trust_token_redemption_cryptographer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.network::BoringsslTrustTokenRedemptionCryptographer" = type { %"class.network::TrustTokenRequestRedemptionHelper::Cryptographer", %"class.std::__1::unique_ptr" }
%"class.network::TrustTokenRequestRedemptionHelper::Cryptographer" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.trust_token_client_st* }
%struct.trust_token_client_st = type opaque
%struct.trust_token_method_st = type opaque
%"class.absl::optional.5" = type { %"class.absl::optional_internal::optional_data.6" }
%"class.absl::optional_internal::optional_data.6" = type { %"class.absl::optional_internal::optional_data_base.7" }
%"class.absl::optional_internal::optional_data_base.7" = type { %"class.absl::optional_internal::optional_data_dtor_base.8" }
%"class.absl::optional_internal::optional_data_dtor_base.8" = type { i8, %union.anon.9 }
%union.anon.9 = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.network::TrustToken" = type { %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", %"struct.google::protobuf::internal::ArenaStringPtr", %"struct.google::protobuf::internal::ArenaStringPtr" }
%"class.google::protobuf::MessageLite" = type { i32 (...)**, %"class.google::protobuf::internal::InternalMetadata" }
%"class.google::protobuf::internal::InternalMetadata" = type { i8* }
%"class.google::protobuf::internal::HasBits" = type { [1 x i32] }
%"class.google::protobuf::internal::CachedSize" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.google::protobuf::internal::ArenaStringPtr" = type { %"class.std::__1::basic_string"* }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.4 }
%union.anon.4 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.absl::optional.11" = type { %"class.absl::optional_internal::optional_data.12" }
%"class.absl::optional_internal::optional_data.12" = type { %"class.absl::optional_internal::optional_data_base.13" }
%"class.absl::optional_internal::optional_data_base.13" = type { %"class.absl::optional_internal::optional_data_dtor_base.14" }
%"class.absl::optional_internal::optional_data_dtor_base.14" = type { i8, %union.anon.15 }
%union.anon.15 = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { i8* }
%"class.network::ScopedBoringsslBytes" = type { i64, i8* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%struct.trust_token_st = type { i8*, i64 }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }

@_ZTVN7network42BoringsslTrustTokenRedemptionCryptographerE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.network::BoringsslTrustTokenRedemptionCryptographer"*)* @_ZN7network42BoringsslTrustTokenRedemptionCryptographerD2Ev to i8*), i8* bitcast (void (%"class.network::BoringsslTrustTokenRedemptionCryptographer"*)* @_ZN7network42BoringsslTrustTokenRedemptionCryptographerD0Ev to i8*), i8* bitcast (i1 (%"class.network::BoringsslTrustTokenRedemptionCryptographer"*, i32, i32)* @_ZN7network42BoringsslTrustTokenRedemptionCryptographer10InitializeENS_5mojom25TrustTokenProtocolVersionEi to i8*), i8* bitcast (void (%"class.absl::optional.5"*, %"class.network::BoringsslTrustTokenRedemptionCryptographer"*, %"class.network::TrustToken"*, i8*, i64, %"class.url::Origin"*)* @_ZN7network42BoringsslTrustTokenRedemptionCryptographer15BeginRedemptionENS_10TrustTokenEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEERKN3url6OriginE to i8*), i8* bitcast (void (%"class.absl::optional.5"*, %"class.network::BoringsslTrustTokenRedemptionCryptographer"*, i8*, i64)* @_ZN7network42BoringsslTrustTokenRedemptionCryptographer17ConfirmRedemptionEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE to i8*)] }, align 8
@.str = private unnamed_addr constant [61 x i8] c"../../services/network/trust_tokens/scoped_boringssl_bytes.h\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"ptr_\00", align 1

@_ZN7network42BoringsslTrustTokenRedemptionCryptographerC1Ev = hidden unnamed_addr alias void (%"class.network::BoringsslTrustTokenRedemptionCryptographer"*), void (%"class.network::BoringsslTrustTokenRedemptionCryptographer"*)* @_ZN7network42BoringsslTrustTokenRedemptionCryptographerC2Ev
@_ZN7network42BoringsslTrustTokenRedemptionCryptographerD1Ev = hidden unnamed_addr alias void (%"class.network::BoringsslTrustTokenRedemptionCryptographer"*), void (%"class.network::BoringsslTrustTokenRedemptionCryptographer"*)* @_ZN7network42BoringsslTrustTokenRedemptionCryptographerD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7network42BoringsslTrustTokenRedemptionCryptographerC2Ev(%"class.network::BoringsslTrustTokenRedemptionCryptographer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::BoringsslTrustTokenRedemptionCryptographer", %"class.network::BoringsslTrustTokenRedemptionCryptographer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7network42BoringsslTrustTokenRedemptionCryptographerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.network::BoringsslTrustTokenRedemptionCryptographer", %"class.network::BoringsslTrustTokenRedemptionCryptographer"* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network42BoringsslTrustTokenRedemptionCryptographerD2Ev(%"class.network::BoringsslTrustTokenRedemptionCryptographer"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.network::BoringsslTrustTokenRedemptionCryptographer", %"class.network::BoringsslTrustTokenRedemptionCryptographer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7network42BoringsslTrustTokenRedemptionCryptographerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.network::BoringsslTrustTokenRedemptionCryptographer", %"class.network::BoringsslTrustTokenRedemptionCryptographer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %struct.trust_token_client_st*, %struct.trust_token_client_st** %3, align 8
  store %struct.trust_token_client_st* null, %struct.trust_token_client_st** %3, align 8
  %5 = icmp eq %struct.trust_token_client_st* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @TRUST_TOKEN_CLIENT_free(%struct.trust_token_client_st* nonnull %4) #9
  br label %7

7:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network42BoringsslTrustTokenRedemptionCryptographerD0Ev(%"class.network::BoringsslTrustTokenRedemptionCryptographer"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.network::BoringsslTrustTokenRedemptionCryptographer", %"class.network::BoringsslTrustTokenRedemptionCryptographer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7network42BoringsslTrustTokenRedemptionCryptographerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.network::BoringsslTrustTokenRedemptionCryptographer", %"class.network::BoringsslTrustTokenRedemptionCryptographer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %struct.trust_token_client_st*, %struct.trust_token_client_st** %3, align 8
  store %struct.trust_token_client_st* null, %struct.trust_token_client_st** %3, align 8
  %5 = icmp eq %struct.trust_token_client_st* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @TRUST_TOKEN_CLIENT_free(%struct.trust_token_client_st* nonnull %4) #9
  br label %7

7:                                                ; preds = %1, %6
  %8 = bitcast %"class.network::BoringsslTrustTokenRedemptionCryptographer"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7network42BoringsslTrustTokenRedemptionCryptographer10InitializeENS_5mojom25TrustTokenProtocolVersionEi(%"class.network::BoringsslTrustTokenRedemptionCryptographer"* nocapture, i32, i32) unnamed_addr #1 align 2 {
  %4 = icmp sgt i32 %2, -1
  br i1 %4, label %5, label %25

5:                                                ; preds = %3
  switch i32 %1, label %10 [
    i32 0, label %6
    i32 1, label %8
  ]

6:                                                ; preds = %5
  %7 = tail call %struct.trust_token_method_st* @TRUST_TOKEN_experiment_v2_pmb() #9
  br label %10

8:                                                ; preds = %5
  %9 = tail call %struct.trust_token_method_st* @TRUST_TOKEN_experiment_v2_voprf() #9
  br label %10

10:                                               ; preds = %5, %8, %6
  %11 = phi %struct.trust_token_method_st* [ null, %5 ], [ %9, %8 ], [ %7, %6 ]
  %12 = sext i32 %2 to i64
  %13 = tail call %struct.trust_token_client_st* @TRUST_TOKEN_CLIENT_new(%struct.trust_token_method_st* %11, i64 %12) #9
  %14 = ptrtoint %struct.trust_token_client_st* %13 to i64
  %15 = getelementptr inbounds %"class.network::BoringsslTrustTokenRedemptionCryptographer", %"class.network::BoringsslTrustTokenRedemptionCryptographer"* %0, i64 0, i32 1
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %15, i64 0, i32 0, i32 0, i32 0
  %17 = load %struct.trust_token_client_st*, %struct.trust_token_client_st** %16, align 8
  %18 = bitcast %"class.std::__1::unique_ptr"* %15 to i64*
  store i64 %14, i64* %18, align 8
  %19 = icmp eq %struct.trust_token_client_st* %17, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %10
  tail call void @TRUST_TOKEN_CLIENT_free(%struct.trust_token_client_st* nonnull %17) #9
  %21 = load %struct.trust_token_client_st*, %struct.trust_token_client_st** %16, align 8
  br label %22

22:                                               ; preds = %20, %10
  %23 = phi %struct.trust_token_client_st* [ %21, %20 ], [ %13, %10 ]
  %24 = icmp ne %struct.trust_token_client_st* %23, null
  br label %25

25:                                               ; preds = %3, %22
  %26 = phi i1 [ %24, %22 ], [ false, %3 ]
  ret i1 %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare %struct.trust_token_method_st* @TRUST_TOKEN_experiment_v2_pmb() local_unnamed_addr #4

declare %struct.trust_token_method_st* @TRUST_TOKEN_experiment_v2_voprf() local_unnamed_addr #4

declare %struct.trust_token_client_st* @TRUST_TOKEN_CLIENT_new(%struct.trust_token_method_st*, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network42BoringsslTrustTokenRedemptionCryptographer15BeginRedemptionENS_10TrustTokenEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEERKN3url6OriginE(%"class.absl::optional.5"* noalias nocapture sret, %"class.network::BoringsslTrustTokenRedemptionCryptographer"* nocapture readonly, %"class.network::TrustToken"* nocapture readonly, i8*, i64, %"class.url::Origin"* dereferenceable(80)) unnamed_addr #1 align 2 {
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = alloca %"class.absl::optional.11", align 8
  %9 = alloca %"class.network::ScopedBoringsslBytes", align 8
  %10 = alloca %"class.std::__1::basic_string", align 8
  %11 = getelementptr inbounds %"class.network::BoringsslTrustTokenRedemptionCryptographer", %"class.network::BoringsslTrustTokenRedemptionCryptographer"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %12 = load %struct.trust_token_client_st*, %struct.trust_token_client_st** %11, align 8
  %13 = icmp eq %struct.trust_token_client_st* %12, null
  br i1 %13, label %14, label %18

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %15, align 8
  %16 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast %union.anon.9* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #9
  br label %106

18:                                               ; preds = %6
  %19 = tail call i64 @_ZN4base4Time3NowEv() #9
  %20 = getelementptr inbounds %"class.absl::optional.11", %"class.absl::optional.11"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 32, i1 false)
  call void @_ZN7network45CanonicalizeTrustTokenClientDataForRedemptionEN4base4TimeERKN3url6OriginENS0_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.absl::optional.11"* nonnull sret %8, i64 %19, %"class.url::Origin"* dereferenceable(80) %5, i8* %3, i64 %4) #9
  %21 = load i8, i8* %20, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %24, align 8
  %25 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %26 = bitcast %union.anon.9* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #9
  br label %105

27:                                               ; preds = %18
  %28 = bitcast %"class.network::ScopedBoringsslBytes"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #9
  %29 = getelementptr inbounds %"class.network::ScopedBoringsslBytes", %"class.network::ScopedBoringsslBytes"* %9, i64 0, i32 0
  %30 = getelementptr inbounds %"class.network::ScopedBoringsslBytes", %"class.network::ScopedBoringsslBytes"* %9, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 16, i1 false) #9
  %31 = getelementptr inbounds %"class.network::TrustToken", %"class.network::TrustToken"* %2, i64 0, i32 3, i32 0
  %32 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %31, align 8
  %33 = bitcast %"class.std::__1::basic_string"* %32 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %33, i64 0, i32 1, i32 0
  %35 = load i8, i8* %34, align 1
  %36 = icmp slt i8 %35, 0
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = bitcast %"class.std::__1::basic_string"* %32 to i8*
  %40 = select i1 %36, i8* %38, i8* %39
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = zext i8 %35 to i64
  %44 = select i1 %36, i64 %42, i64 %43
  %45 = call %struct.trust_token_st* @TRUST_TOKEN_new(i8* %40, i64 %44) #9
  %46 = icmp eq %struct.trust_token_st* %45, null
  br i1 %46, label %86, label %47

47:                                               ; preds = %27
  %48 = load i8, i8* %20, align 8, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %51, !prof !3

50:                                               ; preds = %47
  call void @llvm.trap() #9
  unreachable

51:                                               ; preds = %47
  %52 = load %struct.trust_token_client_st*, %struct.trust_token_client_st** %11, align 8
  %53 = getelementptr inbounds %"class.absl::optional.11", %"class.absl::optional.11"* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %"class.absl::optional.11", %"class.absl::optional.11"* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %56 = bitcast i8** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = ptrtoint i8* %54 to i64
  %59 = sub i64 %57, %58
  %60 = call i64 @_ZN4base4Time9UnixEpochEv() #9
  %61 = sub nsw i64 %19, %60
  %62 = add i64 %61, -9223372036854775807
  %63 = icmp ult i64 %62, 2
  %64 = sdiv i64 %61, 1000000
  %65 = select i1 %63, i64 %61, i64 %64
  %66 = call i32 @TRUST_TOKEN_CLIENT_begin_redemption(%struct.trust_token_client_st* %52, i8** %30, i64* nonnull %29, %struct.trust_token_st* nonnull %45, i8* %54, i64 %59, i64 %65) #9
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %72

68:                                               ; preds = %51
  %69 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %69, align 8
  %70 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %71 = bitcast %union.anon.9* %70 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 24, i1 false) #9
  br label %90

72:                                               ; preds = %51
  %73 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %73) #9
  %74 = load i8*, i8** %30, align 8
  %75 = icmp eq i8* %74, null
  br i1 %75, label %76, label %80

76:                                               ; preds = %72
  %77 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #9
  %78 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77) #9
  %79 = load i8*, i8** %30, align 8
  br label %80

80:                                               ; preds = %76, %72
  %81 = phi i8* [ %74, %72 ], [ %79, %76 ]
  %82 = load i64, i64* %29, align 8
  call void @_ZN4base12Base64EncodeENS_4spanIKhLm18446744073709551615EEE(%"class.std::__1::basic_string"* nonnull sret %10, i64 %82, i8* %81) #9
  %83 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %83, align 8
  %84 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %85 = bitcast %"class.std::__1::basic_string"* %84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* nonnull align 8 %73, i64 24, i1 false) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %73) #9
  br label %90

86:                                               ; preds = %27
  %87 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %87, align 8
  %88 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %89 = bitcast %union.anon.9* %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 24, i1 false) #9
  br label %92

90:                                               ; preds = %80, %68
  call void @TRUST_TOKEN_free(%struct.trust_token_st* nonnull %45) #9
  %91 = load i8*, i8** %30, align 8
  br label %92

92:                                               ; preds = %90, %86
  %93 = phi i8* [ null, %86 ], [ %91, %90 ]
  call void @OPENSSL_free(i8* %93) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #9
  %94 = load i8, i8* %20, align 8, !range !2
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %105, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"class.absl::optional.11", %"class.absl::optional.11"* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = icmp eq i8* %98, null
  br i1 %99, label %104, label %100

100:                                              ; preds = %96
  %101 = ptrtoint i8* %98 to i64
  %102 = getelementptr inbounds %"class.absl::optional.11", %"class.absl::optional.11"* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %103 = bitcast i8** %102 to i64*
  store i64 %101, i64* %103, align 8
  call void @_ZdlPv(i8* nonnull %98) #10
  br label %104

104:                                              ; preds = %100, %96
  store i8 0, i8* %20, align 8
  br label %105

105:                                              ; preds = %23, %92, %104
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #9
  br label %106

106:                                              ; preds = %105, %14
  ret void
}

declare i64 @_ZN4base4Time3NowEv() local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN7network45CanonicalizeTrustTokenClientDataForRedemptionEN4base4TimeERKN3url6OriginENS0_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.absl::optional.11"* sret, i64, %"class.url::Origin"* dereferenceable(80), i8*, i64) local_unnamed_addr #4

declare %struct.trust_token_st* @TRUST_TOKEN_new(i8*, i64) local_unnamed_addr #4

declare i32 @TRUST_TOKEN_CLIENT_begin_redemption(%struct.trust_token_client_st*, i8**, i64*, %struct.trust_token_st*, i8*, i64, i64) local_unnamed_addr #4

declare i64 @_ZN4base4Time9UnixEpochEv() local_unnamed_addr #4

declare void @_ZN4base12Base64EncodeENS_4spanIKhLm18446744073709551615EEE(%"class.std::__1::basic_string"* sret, i64, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network42BoringsslTrustTokenRedemptionCryptographer17ConfirmRedemptionEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.absl::optional.5"* noalias nocapture sret, %"class.network::BoringsslTrustTokenRedemptionCryptographer"* nocapture readonly, i8*, i64) unnamed_addr #1 align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.base::BasicStringPiece", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.network::ScopedBoringsslBytes", align 8
  %10 = alloca %"class.network::ScopedBoringsslBytes", align 8
  %11 = alloca %"class.std::__1::basic_string", align 8
  %12 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %7, i64 0, i32 0
  store i8* %2, i8** %12, align 8
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %7, i64 0, i32 1
  store i64 %3, i64* %13, align 8
  %14 = getelementptr inbounds %"class.network::BoringsslTrustTokenRedemptionCryptographer", %"class.network::BoringsslTrustTokenRedemptionCryptographer"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %15 = load %struct.trust_token_client_st*, %struct.trust_token_client_st** %14, align 8
  %16 = icmp eq %struct.trust_token_client_st* %15, null
  br i1 %16, label %17, label %21

17:                                               ; preds = %4
  %18 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %18, align 8
  %19 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast %union.anon.9* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false) #9
  br label %109

21:                                               ; preds = %4
  %22 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #9
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 24, i1 false) #9
  %24 = call zeroext i1 @_ZN4base12Base64DecodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* nonnull dereferenceable(16) %7, %"class.std::__1::basic_string"* nonnull %8) #9
  br i1 %24, label %30, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %26, align 8
  %27 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %28 = bitcast %union.anon.9* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 24, i1 false) #9
  %29 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %101

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %32 = bitcast %"class.network::ScopedBoringsslBytes"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #9
  %33 = getelementptr inbounds %"class.network::ScopedBoringsslBytes", %"class.network::ScopedBoringsslBytes"* %9, i64 0, i32 0
  %34 = getelementptr inbounds %"class.network::ScopedBoringsslBytes", %"class.network::ScopedBoringsslBytes"* %9, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 0, i64 16, i1 false) #9
  %35 = bitcast %"class.network::ScopedBoringsslBytes"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #9
  %36 = getelementptr inbounds %"class.network::ScopedBoringsslBytes", %"class.network::ScopedBoringsslBytes"* %10, i64 0, i32 0
  %37 = getelementptr inbounds %"class.network::ScopedBoringsslBytes", %"class.network::ScopedBoringsslBytes"* %10, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 16, i1 false) #9
  %38 = load %struct.trust_token_client_st*, %struct.trust_token_client_st** %14, align 8
  %39 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  %43 = load i8*, i8** %23, align 8
  %44 = select i1 %42, i8* %43, i8* %22
  %45 = load i64, i64* %31, align 8
  %46 = zext i8 %41 to i64
  %47 = select i1 %42, i64 %45, i64 %46
  %48 = call i32 @TRUST_TOKEN_CLIENT_finish_redemption(%struct.trust_token_client_st* %38, i8** %34, i64* nonnull %33, i8** %37, i64* nonnull %36, i8* %44, i64 %47) #9
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %30
  %51 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %51, align 8
  %52 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %53 = bitcast %union.anon.9* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #9
  br label %98

54:                                               ; preds = %30
  %55 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %55) #9
  %56 = load i8*, i8** %34, align 8
  %57 = icmp eq i8* %56, null
  br i1 %57, label %58, label %67

58:                                               ; preds = %54
  %59 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #9
  %60 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #9
  %61 = load i8*, i8** %34, align 8
  %62 = load i64, i64* %33, align 8
  %63 = icmp eq i8* %61, null
  br i1 %63, label %64, label %69

64:                                               ; preds = %58
  %65 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %65) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #9
  %66 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65) #9
  br label %67

67:                                               ; preds = %54, %64
  %68 = load i64, i64* %33, align 8
  br label %69

69:                                               ; preds = %67, %58
  %70 = phi i64 [ %68, %67 ], [ %62, %58 ]
  %71 = phi i8* [ %56, %67 ], [ %61, %58 ]
  %72 = icmp ugt i64 %70, -17
  br i1 %72, label %73, label %75

73:                                               ; preds = %69
  %74 = bitcast %"class.std::__1::basic_string"* %11 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %74) #11
  unreachable

75:                                               ; preds = %69
  %76 = icmp ult i64 %70, 23
  br i1 %76, label %85, label %77

77:                                               ; preds = %75
  %78 = add nuw i64 %70, 16
  %79 = and i64 %78, -16
  %80 = call i8* @_Znwm(i64 %79) #10
  %81 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %80, i8** %81, align 8
  %82 = or i64 %79, -9223372036854775808
  %83 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %82, i64* %83, align 8
  %84 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %70, i64* %84, align 8
  br label %90

85:                                               ; preds = %75
  %86 = trunc i64 %70 to i8
  %87 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %88 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %87, i64 0, i32 1, i32 0
  store i8 %86, i8* %88, align 1
  %89 = icmp eq i64 %70, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %85, %77
  %91 = phi i8* [ %80, %77 ], [ %55, %85 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %91, i8* align 1 %71, i64 %70, i1 false) #9
  br label %92

92:                                               ; preds = %90, %85
  %93 = phi i8* [ %55, %85 ], [ %91, %90 ]
  %94 = getelementptr inbounds i8, i8* %93, i64 %70
  store i8 0, i8* %94, align 1
  %95 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %95, align 8
  %96 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %97 = bitcast %"class.std::__1::basic_string"* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* nonnull align 8 %55, i64 24, i1 false) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %55) #9
  br label %98

98:                                               ; preds = %92, %50
  %99 = load i8*, i8** %37, align 8
  call void @OPENSSL_free(i8* %99) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #9
  %100 = load i8*, i8** %34, align 8
  call void @OPENSSL_free(i8* %100) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #9
  br label %101

101:                                              ; preds = %98, %25
  %102 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %39, %98 ], [ %29, %25 ]
  %103 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %102, i64 0, i32 1, i32 0
  %104 = load i8, i8* %103, align 1
  %105 = icmp slt i8 %104, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %101
  %107 = load i8*, i8** %23, align 8
  call void @_ZdlPv(i8* %107) #10
  br label %108

108:                                              ; preds = %101, %106
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #9
  br label %109

109:                                              ; preds = %108, %17
  ret void
}

declare zeroext i1 @_ZN4base12Base64DecodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16), %"class.std::__1::basic_string"*) local_unnamed_addr #4

declare i32 @TRUST_TOKEN_CLIENT_finish_redemption(%struct.trust_token_client_st*, i8**, i64*, i8**, i64*, i8*, i64) local_unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare void @OPENSSL_free(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @TRUST_TOKEN_CLIENT_free(%struct.trust_token_client_st*) local_unnamed_addr #4

declare void @TRUST_TOKEN_free(%struct.trust_token_st*) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
