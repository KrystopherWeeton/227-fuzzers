; ModuleID = '../../net/third_party/quiche/src/quic/core/crypto/aes_256_gcm_decrypter.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/crypto/aes_256_gcm_decrypter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.quic::Aes256GcmDecrypter" = type { %"class.quic::AesBaseDecrypter.base", [4 x i8] }
%"class.quic::AesBaseDecrypter.base" = type <{ %"class.quic::AeadBaseDecrypter", %struct.aes_key_st }>
%"class.quic::AeadBaseDecrypter" = type { %"class.quic::QuicDecrypter", %struct.evp_aead_st*, i64, i64, i64, i8, i8, [32 x i8], [12 x i8], %"class.bssl::internal::StackAllocated" }
%"class.quic::QuicDecrypter" = type { %"class.quic::QuicCrypter" }
%"class.quic::QuicCrypter" = type { i32 (...)** }
%struct.evp_aead_st = type opaque
%"class.bssl::internal::StackAllocated" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%struct.aes_key_st = type { [60 x i32], i32 }
%"struct.quic::ParsedQuicVersion" = type { i32, i32 }
%"class.quic::AesBaseDecrypter" = type <{ %"class.quic::AeadBaseDecrypter", %struct.aes_key_st, [4 x i8] }>
%"struct.std::__1::array" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.quic::QuicDataReader" = type { %"class.quiche::QuicheDataReader.base", [4 x i8] }
%"class.quiche::QuicheDataReader.base" = type <{ i8*, i64, i64, i32 }>

@_ZTVN4quic18Aes256GcmDecrypterE = hidden unnamed_addr constant { [20 x i8*] } { [20 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.quic::Aes256GcmDecrypter"*)* @_ZN4quic18Aes256GcmDecrypterD2Ev to i8*), i8* bitcast (void (%"class.quic::Aes256GcmDecrypter"*)* @_ZN4quic18Aes256GcmDecrypterD0Ev to i8*), i8* bitcast (i1 (%"class.quic::AeadBaseDecrypter"*, i8*, i64)* @_ZN4quic17AeadBaseDecrypter6SetKeyEN4absl11string_viewE to i8*), i8* bitcast (i1 (%"class.quic::AeadBaseDecrypter"*, i8*, i64)* @_ZN4quic17AeadBaseDecrypter14SetNoncePrefixEN4absl11string_viewE to i8*), i8* bitcast (i1 (%"class.quic::AeadBaseDecrypter"*, i8*, i64)* @_ZN4quic17AeadBaseDecrypter5SetIVEN4absl11string_viewE to i8*), i8* bitcast (i1 (%"class.quic::QuicCrypter"*, %"struct.quic::ParsedQuicVersion"*, i8*, i64)* @_ZN4quic11QuicCrypter18SetNoncePrefixOrIVERKNS_17ParsedQuicVersionEN4absl11string_viewE to i8*), i8* bitcast (i1 (%"class.quic::AesBaseDecrypter"*, i8*, i64)* @_ZN4quic16AesBaseDecrypter22SetHeaderProtectionKeyEN4absl11string_viewE to i8*), i8* bitcast (i64 (%"class.quic::AeadBaseDecrypter"*)* @_ZNK4quic17AeadBaseDecrypter10GetKeySizeEv to i8*), i8* bitcast (i64 (%"class.quic::AeadBaseDecrypter"*)* @_ZNK4quic17AeadBaseDecrypter9GetIVSizeEv to i8*), i8* bitcast (i64 (%"class.quic::AeadBaseDecrypter"*)* @_ZNK4quic17AeadBaseDecrypter18GetNoncePrefixSizeEv to i8*), i8* bitcast (i1 (%"class.quic::AeadBaseDecrypter"*, i8*, i64)* @_ZN4quic17AeadBaseDecrypter17SetPreliminaryKeyEN4absl11string_viewE to i8*), i8* bitcast (i1 (%"class.quic::AeadBaseDecrypter"*, %"struct.std::__1::array"*)* @_ZN4quic17AeadBaseDecrypter23SetDiversificationNonceERKNSt3__15arrayIcLm32EEE to i8*), i8* bitcast (i1 (%"class.quic::AeadBaseDecrypter"*, i64, i8*, i64, i8*, i64, i8*, i64*, i64)* @_ZN4quic17AeadBaseDecrypter13DecryptPacketEmN4absl11string_viewES2_PcPmm to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.quic::AesBaseDecrypter"*, %"class.quic::QuicDataReader"*)* @_ZN4quic16AesBaseDecrypter28GenerateHeaderProtectionMaskEPNS_14QuicDataReaderE to i8*), i8* bitcast (i32 (%"class.quic::Aes256GcmDecrypter"*)* @_ZNK4quic18Aes256GcmDecrypter9cipher_idEv to i8*), i8* bitcast (i64 (%"class.quic::AesBaseDecrypter"*)* @_ZNK4quic16AesBaseDecrypter17GetIntegrityLimitEv to i8*), i8* bitcast ({ i8*, i64 } (%"class.quic::AeadBaseDecrypter"*)* @_ZNK4quic17AeadBaseDecrypter6GetKeyEv to i8*), i8* bitcast ({ i8*, i64 } (%"class.quic::AeadBaseDecrypter"*)* @_ZNK4quic17AeadBaseDecrypter14GetNoncePrefixEv to i8*)] }, align 8

@_ZN4quic18Aes256GcmDecrypterC1Ev = hidden unnamed_addr alias void (%"class.quic::Aes256GcmDecrypter"*), void (%"class.quic::Aes256GcmDecrypter"*)* @_ZN4quic18Aes256GcmDecrypterC2Ev
@_ZN4quic18Aes256GcmDecrypterD1Ev = hidden unnamed_addr alias void (%"class.quic::Aes256GcmDecrypter"*), void (%"class.quic::Aes256GcmDecrypter"*)* @_ZN4quic18Aes256GcmDecrypterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic18Aes256GcmDecrypterC2Ev(%"class.quic::Aes256GcmDecrypter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::Aes256GcmDecrypter", %"class.quic::Aes256GcmDecrypter"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4quic17AeadBaseDecrypterC2EPFPK11evp_aead_stvEmmmb(%"class.quic::AeadBaseDecrypter"* %2, %struct.evp_aead_st* ()* nonnull @EVP_aead_aes_256_gcm, i64 32, i64 16, i64 12, i1 zeroext true) #5
  %3 = getelementptr inbounds %"class.quic::Aes256GcmDecrypter", %"class.quic::Aes256GcmDecrypter"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTVN4quic18Aes256GcmDecrypterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare %struct.evp_aead_st* @EVP_aead_aes_256_gcm() #1

; Function Attrs: nounwind
declare void @_ZN4quic17AeadBaseDecrypterD2Ev(%"class.quic::AeadBaseDecrypter"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic18Aes256GcmDecrypterD2Ev(%"class.quic::Aes256GcmDecrypter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::Aes256GcmDecrypter", %"class.quic::Aes256GcmDecrypter"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4quic17AeadBaseDecrypterD2Ev(%"class.quic::AeadBaseDecrypter"* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic18Aes256GcmDecrypterD0Ev(%"class.quic::Aes256GcmDecrypter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::Aes256GcmDecrypter", %"class.quic::Aes256GcmDecrypter"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4quic17AeadBaseDecrypterD2Ev(%"class.quic::AeadBaseDecrypter"* %2) #5
  %3 = bitcast %"class.quic::Aes256GcmDecrypter"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK4quic18Aes256GcmDecrypter9cipher_idEv(%"class.quic::Aes256GcmDecrypter"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i32 50336514
}

declare zeroext i1 @_ZN4quic17AeadBaseDecrypter6SetKeyEN4absl11string_viewE(%"class.quic::AeadBaseDecrypter"*, i8*, i64) unnamed_addr #1

declare zeroext i1 @_ZN4quic17AeadBaseDecrypter14SetNoncePrefixEN4absl11string_viewE(%"class.quic::AeadBaseDecrypter"*, i8*, i64) unnamed_addr #1

declare zeroext i1 @_ZN4quic17AeadBaseDecrypter5SetIVEN4absl11string_viewE(%"class.quic::AeadBaseDecrypter"*, i8*, i64) unnamed_addr #1

declare zeroext i1 @_ZN4quic11QuicCrypter18SetNoncePrefixOrIVERKNS_17ParsedQuicVersionEN4absl11string_viewE(%"class.quic::QuicCrypter"*, %"struct.quic::ParsedQuicVersion"* dereferenceable(8), i8*, i64) unnamed_addr #1

declare zeroext i1 @_ZN4quic16AesBaseDecrypter22SetHeaderProtectionKeyEN4absl11string_viewE(%"class.quic::AesBaseDecrypter"*, i8*, i64) unnamed_addr #1

declare i64 @_ZNK4quic17AeadBaseDecrypter10GetKeySizeEv(%"class.quic::AeadBaseDecrypter"*) unnamed_addr #1

declare i64 @_ZNK4quic17AeadBaseDecrypter9GetIVSizeEv(%"class.quic::AeadBaseDecrypter"*) unnamed_addr #1

declare i64 @_ZNK4quic17AeadBaseDecrypter18GetNoncePrefixSizeEv(%"class.quic::AeadBaseDecrypter"*) unnamed_addr #1

declare zeroext i1 @_ZN4quic17AeadBaseDecrypter17SetPreliminaryKeyEN4absl11string_viewE(%"class.quic::AeadBaseDecrypter"*, i8*, i64) unnamed_addr #1

declare zeroext i1 @_ZN4quic17AeadBaseDecrypter23SetDiversificationNonceERKNSt3__15arrayIcLm32EEE(%"class.quic::AeadBaseDecrypter"*, %"struct.std::__1::array"*) unnamed_addr #1

declare zeroext i1 @_ZN4quic17AeadBaseDecrypter13DecryptPacketEmN4absl11string_viewES2_PcPmm(%"class.quic::AeadBaseDecrypter"*, i64, i8*, i64, i8*, i64, i8*, i64*, i64) unnamed_addr #1

declare void @_ZN4quic16AesBaseDecrypter28GenerateHeaderProtectionMaskEPNS_14QuicDataReaderE(%"class.std::__1::basic_string"* sret, %"class.quic::AesBaseDecrypter"*, %"class.quic::QuicDataReader"*) unnamed_addr #1

declare i64 @_ZNK4quic16AesBaseDecrypter17GetIntegrityLimitEv(%"class.quic::AesBaseDecrypter"*) unnamed_addr #1

declare { i8*, i64 } @_ZNK4quic17AeadBaseDecrypter6GetKeyEv(%"class.quic::AeadBaseDecrypter"*) unnamed_addr #1

declare { i8*, i64 } @_ZNK4quic17AeadBaseDecrypter14GetNoncePrefixEv(%"class.quic::AeadBaseDecrypter"*) unnamed_addr #1

declare void @_ZN4quic17AeadBaseDecrypterC2EPFPK11evp_aead_stvEmmmb(%"class.quic::AeadBaseDecrypter"*, %struct.evp_aead_st* ()*, i64, i64, i64, i1 zeroext) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
