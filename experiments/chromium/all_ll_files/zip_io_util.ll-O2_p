; ModuleID = '../../third_party/libzip/src/lib/zip_io_util.c'
source_filename = "../../third_party/libzip/src/lib/zip_io_util.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_buffer = type { i8, i8, i8*, i64, i64 }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_zip_read(%struct.zip_source*, i8*, i64, %struct.zip_error*) local_unnamed_addr #0 {
  %5 = icmp slt i64 %2, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %4
  tail call void @zip_error_set(%struct.zip_error* %3, i32 20, i32 0) #5
  br label %14

7:                                                ; preds = %4
  %8 = tail call i64 @zip_source_read(%struct.zip_source* %0, i8* %1, i64 %2) #5
  %9 = icmp slt i64 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_zip_error_set_from_source(%struct.zip_error* %3, %struct.zip_source* %0) #5
  br label %14

11:                                               ; preds = %7
  %12 = icmp slt i64 %8, %2
  br i1 %12, label %13, label %14

13:                                               ; preds = %11
  tail call void @zip_error_set(%struct.zip_error* %3, i32 17, i32 0) #5
  br label %14

14:                                               ; preds = %11, %13, %10, %6
  %15 = phi i32 [ -1, %6 ], [ -1, %10 ], [ -1, %13 ], [ 0, %11 ]
  ret i32 %15
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare i64 @zip_source_read(%struct.zip_source*, i8*, i64) local_unnamed_addr #1

declare void @_zip_error_set_from_source(%struct.zip_error*, %struct.zip_source*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_zip_read_data(%struct.zip_buffer*, %struct.zip_source*, i64, i1 zeroext, %struct.zip_error*) local_unnamed_addr #0 {
  %6 = icmp ne i64 %2, 0
  %7 = or i1 %6, %3
  br i1 %7, label %8, label %145

8:                                                ; preds = %5
  %9 = zext i1 %3 to i64
  %10 = add i64 %9, %2
  %11 = tail call noalias i8* @malloc(i64 %10) #5
  %12 = ptrtoint i8* %11 to i64
  %13 = icmp eq i8* %11, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  tail call void @zip_error_set(%struct.zip_error* %4, i32 14, i32 0) #5
  br label %145

15:                                               ; preds = %8
  %16 = icmp eq %struct.zip_buffer* %0, null
  br i1 %16, label %22, label %17

17:                                               ; preds = %15
  %18 = tail call i8* @_zip_buffer_get(%struct.zip_buffer* nonnull %0, i64 %2) #5
  %19 = icmp eq i8* %18, null
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  tail call void @zip_error_set(%struct.zip_error* %4, i32 14, i32 0) #5
  tail call void @free(i8* nonnull %11) #5
  br label %145

21:                                               ; preds = %17
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %11, i8* nonnull align 1 %18, i64 %2, i1 false)
  br label %33

22:                                               ; preds = %15
  %23 = icmp slt i64 %2, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %22
  tail call void @zip_error_set(%struct.zip_error* %4, i32 20, i32 0) #5
  br label %32

25:                                               ; preds = %22
  %26 = tail call i64 @zip_source_read(%struct.zip_source* %1, i8* nonnull %11, i64 %2) #5
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  tail call void @_zip_error_set_from_source(%struct.zip_error* %4, %struct.zip_source* %1) #5
  br label %32

29:                                               ; preds = %25
  %30 = icmp slt i64 %26, %2
  br i1 %30, label %31, label %33

31:                                               ; preds = %29
  tail call void @zip_error_set(%struct.zip_error* %4, i32 17, i32 0) #5
  br label %32

32:                                               ; preds = %24, %28, %31
  tail call void @free(i8* nonnull %11) #5
  br label %145

33:                                               ; preds = %29, %21
  br i1 %3, label %34, label %145

34:                                               ; preds = %33
  %35 = getelementptr inbounds i8, i8* %11, i64 %2
  store i8 0, i8* %35, align 1
  %36 = icmp sgt i64 %2, 0
  br i1 %36, label %37, label %145

37:                                               ; preds = %34
  %38 = getelementptr i8, i8* %11, i64 1
  %39 = icmp ugt i8* %35, %38
  %40 = select i1 %39, i8* %35, i8* %38
  %41 = ptrtoint i8* %40 to i64
  %42 = sub i64 %41, %12
  %43 = icmp ult i64 %42, 16
  br i1 %43, label %135, label %44

44:                                               ; preds = %37
  %45 = and i64 %42, -16
  %46 = getelementptr i8, i8* %11, i64 %45
  br label %47

47:                                               ; preds = %130, %44
  %48 = phi i64 [ 0, %44 ], [ %131, %130 ]
  %49 = getelementptr i8, i8* %11, i64 %48
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = icmp eq <16 x i8> %51, zeroinitializer
  %53 = extractelement <16 x i1> %52, i32 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %47
  store i8 32, i8* %49, align 1
  br label %55

55:                                               ; preds = %54, %47
  %56 = extractelement <16 x i1> %52, i32 1
  br i1 %56, label %57, label %60

57:                                               ; preds = %55
  %58 = or i64 %48, 1
  %59 = getelementptr i8, i8* %11, i64 %58
  store i8 32, i8* %59, align 1
  br label %60

60:                                               ; preds = %57, %55
  %61 = extractelement <16 x i1> %52, i32 2
  br i1 %61, label %62, label %65

62:                                               ; preds = %60
  %63 = or i64 %48, 2
  %64 = getelementptr i8, i8* %11, i64 %63
  store i8 32, i8* %64, align 1
  br label %65

65:                                               ; preds = %62, %60
  %66 = extractelement <16 x i1> %52, i32 3
  br i1 %66, label %67, label %70

67:                                               ; preds = %65
  %68 = or i64 %48, 3
  %69 = getelementptr i8, i8* %11, i64 %68
  store i8 32, i8* %69, align 1
  br label %70

70:                                               ; preds = %67, %65
  %71 = extractelement <16 x i1> %52, i32 4
  br i1 %71, label %72, label %75

72:                                               ; preds = %70
  %73 = or i64 %48, 4
  %74 = getelementptr i8, i8* %11, i64 %73
  store i8 32, i8* %74, align 1
  br label %75

75:                                               ; preds = %72, %70
  %76 = extractelement <16 x i1> %52, i32 5
  br i1 %76, label %77, label %80

77:                                               ; preds = %75
  %78 = or i64 %48, 5
  %79 = getelementptr i8, i8* %11, i64 %78
  store i8 32, i8* %79, align 1
  br label %80

80:                                               ; preds = %77, %75
  %81 = extractelement <16 x i1> %52, i32 6
  br i1 %81, label %82, label %85

82:                                               ; preds = %80
  %83 = or i64 %48, 6
  %84 = getelementptr i8, i8* %11, i64 %83
  store i8 32, i8* %84, align 1
  br label %85

85:                                               ; preds = %82, %80
  %86 = extractelement <16 x i1> %52, i32 7
  br i1 %86, label %87, label %90

87:                                               ; preds = %85
  %88 = or i64 %48, 7
  %89 = getelementptr i8, i8* %11, i64 %88
  store i8 32, i8* %89, align 1
  br label %90

90:                                               ; preds = %87, %85
  %91 = extractelement <16 x i1> %52, i32 8
  br i1 %91, label %92, label %95

92:                                               ; preds = %90
  %93 = or i64 %48, 8
  %94 = getelementptr i8, i8* %11, i64 %93
  store i8 32, i8* %94, align 1
  br label %95

95:                                               ; preds = %92, %90
  %96 = extractelement <16 x i1> %52, i32 9
  br i1 %96, label %97, label %100

97:                                               ; preds = %95
  %98 = or i64 %48, 9
  %99 = getelementptr i8, i8* %11, i64 %98
  store i8 32, i8* %99, align 1
  br label %100

100:                                              ; preds = %97, %95
  %101 = extractelement <16 x i1> %52, i32 10
  br i1 %101, label %102, label %105

102:                                              ; preds = %100
  %103 = or i64 %48, 10
  %104 = getelementptr i8, i8* %11, i64 %103
  store i8 32, i8* %104, align 1
  br label %105

105:                                              ; preds = %102, %100
  %106 = extractelement <16 x i1> %52, i32 11
  br i1 %106, label %107, label %110

107:                                              ; preds = %105
  %108 = or i64 %48, 11
  %109 = getelementptr i8, i8* %11, i64 %108
  store i8 32, i8* %109, align 1
  br label %110

110:                                              ; preds = %107, %105
  %111 = extractelement <16 x i1> %52, i32 12
  br i1 %111, label %112, label %115

112:                                              ; preds = %110
  %113 = or i64 %48, 12
  %114 = getelementptr i8, i8* %11, i64 %113
  store i8 32, i8* %114, align 1
  br label %115

115:                                              ; preds = %112, %110
  %116 = extractelement <16 x i1> %52, i32 13
  br i1 %116, label %117, label %120

117:                                              ; preds = %115
  %118 = or i64 %48, 13
  %119 = getelementptr i8, i8* %11, i64 %118
  store i8 32, i8* %119, align 1
  br label %120

120:                                              ; preds = %117, %115
  %121 = extractelement <16 x i1> %52, i32 14
  br i1 %121, label %122, label %125

122:                                              ; preds = %120
  %123 = or i64 %48, 14
  %124 = getelementptr i8, i8* %11, i64 %123
  store i8 32, i8* %124, align 1
  br label %125

125:                                              ; preds = %122, %120
  %126 = extractelement <16 x i1> %52, i32 15
  br i1 %126, label %127, label %130

127:                                              ; preds = %125
  %128 = or i64 %48, 15
  %129 = getelementptr i8, i8* %11, i64 %128
  store i8 32, i8* %129, align 1
  br label %130

130:                                              ; preds = %127, %125
  %131 = add i64 %48, 16
  %132 = icmp eq i64 %131, %45
  br i1 %132, label %133, label %47, !llvm.loop !2

133:                                              ; preds = %130
  %134 = icmp eq i64 %42, %45
  br i1 %134, label %145, label %135

135:                                              ; preds = %133, %37
  %136 = phi i8* [ %11, %37 ], [ %46, %133 ]
  br label %137

137:                                              ; preds = %135, %142
  %138 = phi i8* [ %143, %142 ], [ %136, %135 ]
  %139 = load i8, i8* %138, align 1
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %137
  store i8 32, i8* %138, align 1
  br label %142

142:                                              ; preds = %137, %141
  %143 = getelementptr inbounds i8, i8* %138, i64 1
  %144 = icmp ult i8* %143, %35
  br i1 %144, label %137, label %145, !llvm.loop !4

145:                                              ; preds = %142, %133, %34, %33, %20, %5, %32, %14
  %146 = phi i8* [ null, %32 ], [ null, %14 ], [ null, %5 ], [ null, %20 ], [ %11, %33 ], [ %11, %34 ], [ %11, %133 ], [ %11, %142 ]
  ret i8* %146
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

declare i8* @_zip_buffer_get(%struct.zip_buffer*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_string* @_zip_read_string(%struct.zip_buffer*, %struct.zip_source*, i16 zeroext, i1 zeroext, %struct.zip_error*) local_unnamed_addr #0 {
  %6 = zext i16 %2 to i64
  %7 = tail call i8* @_zip_read_data(%struct.zip_buffer* %0, %struct.zip_source* %1, i64 %6, i1 zeroext %3, %struct.zip_error* %4)
  %8 = icmp eq i8* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = tail call %struct.zip_string* @_zip_string_new(i8* nonnull %7, i16 zeroext %2, i32 0, %struct.zip_error* %4) #5
  tail call void @free(i8* nonnull %7) #5
  br label %11

11:                                               ; preds = %5, %9
  %12 = phi %struct.zip_string* [ %10, %9 ], [ null, %5 ]
  ret %struct.zip_string* %12
}

declare %struct.zip_string* @_zip_string_new(i8*, i16 zeroext, i32, %struct.zip_error*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_zip_write(%struct.zip*, i8*, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 0
  %5 = load %struct.zip_source*, %struct.zip_source** %4, align 8
  %6 = tail call i64 @zip_source_write(%struct.zip_source* %5, i8* %1, i64 %2) #5
  %7 = icmp slt i64 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %10 = load %struct.zip_source*, %struct.zip_source** %4, align 8
  tail call void @_zip_error_set_from_source(%struct.zip_error* %9, %struct.zip_source* %10) #5
  br label %15

11:                                               ; preds = %3
  %12 = icmp eq i64 %6, %2
  br i1 %12, label %15, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %14, i32 6, i32 4) #5
  br label %15

15:                                               ; preds = %11, %13, %8
  %16 = phi i32 [ -1, %8 ], [ -1, %13 ], [ 0, %11 ]
  ret i32 %16
}

declare i64 @zip_source_write(%struct.zip_source*, i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
