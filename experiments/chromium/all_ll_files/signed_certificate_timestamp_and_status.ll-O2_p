; ModuleID = '../../net/cert/signed_certificate_timestamp_and_status.cc'
source_filename = "../../net/cert/signed_certificate_timestamp_and_status.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.net::SignedCertificateTimestampAndStatus" = type <{ %class.scoped_refptr, i32, [4 x i8] }>
%class.scoped_refptr = type { %"struct.net::ct::SignedCertificateTimestamp"* }
%"struct.net::ct::SignedCertificateTimestamp" = type { %"class.base::RefCountedThreadSafe", i32, %"class.std::__1::basic_string", %"class.base::Time", %"class.std::__1::basic_string", %"struct.net::ct::DigitallySigned", i32, %"class.std::__1::basic_string" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.net::ct::DigitallySigned" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }

@_ZN3net35SignedCertificateTimestampAndStatusC1Ev = hidden unnamed_addr alias void (%"struct.net::SignedCertificateTimestampAndStatus"*), void (%"struct.net::SignedCertificateTimestampAndStatus"*)* @_ZN3net35SignedCertificateTimestampAndStatusC2Ev
@_ZN3net35SignedCertificateTimestampAndStatusC1ERK13scoped_refptrINS_2ct26SignedCertificateTimestampEENS2_15SCTVerifyStatusE = hidden unnamed_addr alias void (%"struct.net::SignedCertificateTimestampAndStatus"*, %class.scoped_refptr*, i32), void (%"struct.net::SignedCertificateTimestampAndStatus"*, %class.scoped_refptr*, i32)* @_ZN3net35SignedCertificateTimestampAndStatusC2ERK13scoped_refptrINS_2ct26SignedCertificateTimestampEENS2_15SCTVerifyStatusE
@_ZN3net35SignedCertificateTimestampAndStatusC1ERKS0_ = hidden unnamed_addr alias void (%"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"*), void (%"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"*)* @_ZN3net35SignedCertificateTimestampAndStatusC2ERKS0_
@_ZN3net35SignedCertificateTimestampAndStatusD1Ev = hidden unnamed_addr alias void (%"struct.net::SignedCertificateTimestampAndStatus"*), void (%"struct.net::SignedCertificateTimestampAndStatus"*)* @_ZN3net35SignedCertificateTimestampAndStatusD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net35SignedCertificateTimestampAndStatusC2Ev(%"struct.net::SignedCertificateTimestampAndStatus"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %0, i64 0, i32 0, i32 0
  store %"struct.net::ct::SignedCertificateTimestamp"* null, %"struct.net::ct::SignedCertificateTimestamp"** %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net35SignedCertificateTimestampAndStatusC2ERK13scoped_refptrINS_2ct26SignedCertificateTimestampEENS2_15SCTVerifyStatusE(%"struct.net::SignedCertificateTimestampAndStatus"* nocapture, %class.scoped_refptr* nocapture readonly dereferenceable(8), i32) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %1, i64 0, i32 0
  %5 = load %"struct.net::ct::SignedCertificateTimestamp"*, %"struct.net::ct::SignedCertificateTimestamp"** %4, align 8
  %6 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %0, i64 0, i32 0, i32 0
  store %"struct.net::ct::SignedCertificateTimestamp"* %5, %"struct.net::ct::SignedCertificateTimestamp"** %6, align 8
  %7 = icmp eq %"struct.net::ct::SignedCertificateTimestamp"* %5, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw add i32* %9, i32 1 monotonic
  br label %11

11:                                               ; preds = %3, %8
  %12 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %0, i64 0, i32 1
  store i32 %2, i32* %12, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net35SignedCertificateTimestampAndStatusC2ERKS0_(%"struct.net::SignedCertificateTimestampAndStatus"* nocapture, %"struct.net::SignedCertificateTimestampAndStatus"* nocapture readonly dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %1, i64 0, i32 0, i32 0
  %4 = load %"struct.net::ct::SignedCertificateTimestamp"*, %"struct.net::ct::SignedCertificateTimestamp"** %3, align 8
  %5 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %0, i64 0, i32 0, i32 0
  store %"struct.net::ct::SignedCertificateTimestamp"* %4, %"struct.net::ct::SignedCertificateTimestamp"** %5, align 8
  %6 = icmp eq %"struct.net::ct::SignedCertificateTimestamp"* %4, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  %11 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  store i32 %13, i32* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net35SignedCertificateTimestampAndStatusD2Ev(%"struct.net::SignedCertificateTimestampAndStatus"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %0, i64 0, i32 0, i32 0
  %3 = load %"struct.net::ct::SignedCertificateTimestamp"*, %"struct.net::ct::SignedCertificateTimestamp"** %2, align 8
  %4 = icmp eq %"struct.net::ct::SignedCertificateTimestamp"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i32* %6, i32 1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  tail call void @_ZN3net2ct26SignedCertificateTimestampD1Ev(%"struct.net::ct::SignedCertificateTimestamp"* nonnull %3) #5
  %10 = bitcast %"struct.net::ct::SignedCertificateTimestamp"* %3 to i8*
  tail call void @_ZdlPv(i8* %10) #6
  br label %11

11:                                               ; preds = %1, %5, %9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net2ct26SignedCertificateTimestampD1Ev(%"struct.net::ct::SignedCertificateTimestamp"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
