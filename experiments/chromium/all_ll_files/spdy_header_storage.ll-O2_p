; ModuleID = '../../net/third_party/quiche/src/spdy/core/spdy_header_storage.cc'
source_filename = "../../net/third_party/quiche/src/spdy/core/spdy_header_storage.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.spdy::SpdyHeaderStorage" = type { %"class.spdy::SpdySimpleArena" }
%"class.spdy::SpdySimpleArena" = type { i64, %"class.std::__1::vector", %"class.spdy::SpdySimpleArena::Status" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.spdy::SpdySimpleArena::Block"*, %"struct.spdy::SpdySimpleArena::Block"*, %"class.std::__1::__compressed_pair.1" }
%"struct.spdy::SpdySimpleArena::Block" = type { %"class.std::__1::unique_ptr", i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.spdy::SpdySimpleArena::Block"* }
%"class.spdy::SpdySimpleArena::Status" = type { i64 }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"class.absl::string_view"*, %"class.absl::string_view"*, %"class.std::__1::__compressed_pair.6" }
%"class.absl::string_view" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.absl::string_view"* }

@_ZN4spdy17SpdyHeaderStorageC1Ev = hidden unnamed_addr alias void (%"class.spdy::SpdyHeaderStorage"*), void (%"class.spdy::SpdyHeaderStorage"*)* @_ZN4spdy17SpdyHeaderStorageC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy17SpdyHeaderStorageC2Ev(%"class.spdy::SpdyHeaderStorage"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.spdy::SpdyHeaderStorage", %"class.spdy::SpdyHeaderStorage"* %0, i64 0, i32 0
  tail call void @_ZN4spdy15SpdySimpleArenaC1Em(%"class.spdy::SpdySimpleArena"* %2, i64 2048) #4
  ret void
}

declare void @_ZN4spdy15SpdySimpleArenaC1Em(%"class.spdy::SpdySimpleArena"*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZN4spdy17SpdyHeaderStorage5WriteEN4absl11string_viewE(%"class.spdy::SpdyHeaderStorage"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.spdy::SpdyHeaderStorage", %"class.spdy::SpdyHeaderStorage"* %0, i64 0, i32 0
  %5 = tail call i8* @_ZN4spdy15SpdySimpleArena6MemdupEPKcm(%"class.spdy::SpdySimpleArena"* %4, i8* %1, i64 %2) #4
  %6 = icmp sgt i64 %2, -1
  br i1 %6, label %8, label %7, !prof !2

7:                                                ; preds = %3
  tail call void @llvm.trap() #4
  unreachable

8:                                                ; preds = %3
  %9 = insertvalue { i8*, i64 } undef, i8* %5, 0
  %10 = insertvalue { i8*, i64 } %9, i64 %2, 1
  ret { i8*, i64 } %10
}

declare i8* @_ZN4spdy15SpdySimpleArena6MemdupEPKcm(%"class.spdy::SpdySimpleArena"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy17SpdyHeaderStorage6RewindEN4absl11string_viewE(%"class.spdy::SpdyHeaderStorage"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.spdy::SpdyHeaderStorage", %"class.spdy::SpdyHeaderStorage"* %0, i64 0, i32 0
  tail call void @_ZN4spdy15SpdySimpleArena4FreeEPcm(%"class.spdy::SpdySimpleArena"* %4, i8* %1, i64 %2) #4
  ret void
}

declare void @_ZN4spdy15SpdySimpleArena4FreeEPcm(%"class.spdy::SpdySimpleArena"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZN4spdy17SpdyHeaderStorage14WriteFragmentsERKNSt3__16vectorIN4absl11string_viewENS1_9allocatorIS4_EEEES4_(%"class.spdy::SpdyHeaderStorage"*, %"class.std::__1::vector.4"* nocapture readonly dereferenceable(24), i8*, i64) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.absl::string_view"*, %"class.absl::string_view"** %5, align 8
  %7 = ptrtoint %"class.absl::string_view"* %6 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %1, i64 0, i32 0, i32 1
  %9 = load %"class.absl::string_view"*, %"class.absl::string_view"** %8, align 8
  %10 = icmp eq %"class.absl::string_view"* %6, %9
  br i1 %10, label %103, label %11

11:                                               ; preds = %4
  %12 = ptrtoint %"class.absl::string_view"* %9 to i64
  %13 = sub i64 %12, %7
  %14 = ashr exact i64 %13, 4
  %15 = add nsw i64 %14, -1
  %16 = mul i64 %15, %3
  %17 = getelementptr %"class.absl::string_view", %"class.absl::string_view"* %9, i64 -1, i32 0
  %18 = ptrtoint i8** %17 to i64
  %19 = sub i64 %18, %7
  %20 = lshr i64 %19, 4
  %21 = add nuw nsw i64 %20, 1
  %22 = and i64 %21, 7
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %34, label %24

24:                                               ; preds = %11, %24
  %25 = phi i64 [ %30, %24 ], [ %16, %11 ]
  %26 = phi %"class.absl::string_view"* [ %31, %24 ], [ %6, %11 ]
  %27 = phi i64 [ %32, %24 ], [ %22, %11 ]
  %28 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %26, i64 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %25
  %31 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %26, i64 1
  %32 = add i64 %27, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %24, !llvm.loop !3

34:                                               ; preds = %24, %11
  %35 = phi i64 [ undef, %11 ], [ %30, %24 ]
  %36 = phi i64 [ %16, %11 ], [ %30, %24 ]
  %37 = phi %"class.absl::string_view"* [ %6, %11 ], [ %31, %24 ]
  %38 = icmp ult i64 %19, 112
  br i1 %38, label %39, label %74

39:                                               ; preds = %74, %34
  %40 = phi i64 [ %35, %34 ], [ %100, %74 ]
  %41 = getelementptr inbounds %"class.spdy::SpdyHeaderStorage", %"class.spdy::SpdyHeaderStorage"* %0, i64 0, i32 0
  %42 = tail call i8* @_ZN4spdy15SpdySimpleArena5AllocEm(%"class.spdy::SpdySimpleArena"* %41, i64 %40) #4
  %43 = load %"class.absl::string_view"*, %"class.absl::string_view"** %5, align 8
  %44 = load %"class.absl::string_view"*, %"class.absl::string_view"** %8, align 8
  %45 = icmp eq %"class.absl::string_view"* %43, %44
  br i1 %45, label %71, label %46

46:                                               ; preds = %39
  %47 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %43, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %43, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %48, i64 %50, i1 false) #4
  %51 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %43, i64 1
  %52 = load %"class.absl::string_view"*, %"class.absl::string_view"** %8, align 8
  %53 = icmp eq %"class.absl::string_view"* %51, %52
  br i1 %53, label %71, label %54

54:                                               ; preds = %46
  %55 = load i64, i64* %49, align 8
  %56 = getelementptr inbounds i8, i8* %42, i64 %55
  br label %57

57:                                               ; preds = %54, %57
  %58 = phi %"class.absl::string_view"* [ %68, %57 ], [ %51, %54 ]
  %59 = phi i8* [ %67, %57 ], [ %56, %54 ]
  %60 = phi %"class.absl::string_view"* [ %58, %57 ], [ %43, %54 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %2, i64 %3, i1 false) #4
  %61 = getelementptr inbounds i8, i8* %59, i64 %3
  %62 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %58, i64 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %60, i64 1, i32 1
  %65 = load i64, i64* %64, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %63, i64 %65, i1 false) #4
  %66 = load i64, i64* %64, align 8
  %67 = getelementptr inbounds i8, i8* %61, i64 %66
  %68 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %58, i64 1
  %69 = load %"class.absl::string_view"*, %"class.absl::string_view"** %8, align 8
  %70 = icmp eq %"class.absl::string_view"* %68, %69
  br i1 %70, label %71, label %57

71:                                               ; preds = %57, %46, %39
  %72 = icmp sgt i64 %40, -1
  br i1 %72, label %103, label %73, !prof !2

73:                                               ; preds = %71
  tail call void @llvm.trap() #4
  unreachable

74:                                               ; preds = %34, %74
  %75 = phi i64 [ %100, %74 ], [ %36, %34 ]
  %76 = phi %"class.absl::string_view"* [ %101, %74 ], [ %37, %34 ]
  %77 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %76, i64 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, %75
  %80 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %76, i64 1, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %81, %79
  %83 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %76, i64 2, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %84, %82
  %86 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %76, i64 3, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, %85
  %89 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %76, i64 4, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, %88
  %92 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %76, i64 5, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, %91
  %95 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %76, i64 6, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, %94
  %98 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %76, i64 7, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = add i64 %99, %97
  %101 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %76, i64 8
  %102 = icmp eq %"class.absl::string_view"* %101, %9
  br i1 %102, label %39, label %74

103:                                              ; preds = %71, %4
  %104 = phi i64 [ 0, %4 ], [ %40, %71 ]
  %105 = phi i8* [ null, %4 ], [ %42, %71 ]
  %106 = insertvalue { i8*, i64 } undef, i8* %105, 0
  %107 = insertvalue { i8*, i64 } %106, i64 %104, 1
  ret { i8*, i64 } %107
}

declare i8* @_ZN4spdy15SpdySimpleArena5AllocEm(%"class.spdy::SpdySimpleArena"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4spdy4JoinEPcRKNSt3__16vectorIN4absl11string_viewENS1_9allocatorIS4_EEEES4_(i8*, %"class.std::__1::vector.4"* nocapture readonly dereferenceable(24), i8*, i64) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.absl::string_view"*, %"class.absl::string_view"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %1, i64 0, i32 0, i32 1
  %8 = load %"class.absl::string_view"*, %"class.absl::string_view"** %7, align 8
  %9 = icmp eq %"class.absl::string_view"* %6, %8
  br i1 %9, label %39, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %6, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %6, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %12, i64 %14, i1 false)
  %15 = load i64, i64* %13, align 8
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %6, i64 1
  %18 = load %"class.absl::string_view"*, %"class.absl::string_view"** %7, align 8
  %19 = icmp eq %"class.absl::string_view"* %17, %18
  br i1 %19, label %34, label %20

20:                                               ; preds = %10, %20
  %21 = phi %"class.absl::string_view"* [ %31, %20 ], [ %17, %10 ]
  %22 = phi i8* [ %30, %20 ], [ %16, %10 ]
  %23 = phi %"class.absl::string_view"* [ %21, %20 ], [ %6, %10 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 1 %2, i64 %3, i1 false)
  %24 = getelementptr inbounds i8, i8* %22, i64 %3
  %25 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %21, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %23, i64 1, i32 1
  %28 = load i64, i64* %27, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %26, i64 %28, i1 false)
  %29 = load i64, i64* %27, align 8
  %30 = getelementptr inbounds i8, i8* %24, i64 %29
  %31 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %21, i64 1
  %32 = load %"class.absl::string_view"*, %"class.absl::string_view"** %7, align 8
  %33 = icmp eq %"class.absl::string_view"* %31, %32
  br i1 %33, label %34, label %20

34:                                               ; preds = %20, %10
  %35 = phi i8* [ %16, %10 ], [ %30, %20 ]
  %36 = ptrtoint i8* %35 to i64
  %37 = ptrtoint i8* %0 to i64
  %38 = sub i64 %36, %37
  br label %39

39:                                               ; preds = %4, %34
  %40 = phi i64 [ %38, %34 ], [ 0, %4 ]
  ret i64 %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
