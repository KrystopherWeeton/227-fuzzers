; ModuleID = '../../third_party/ffmpeg/libavcodec/x86/mpegaudiodsp.c'
source_filename = "../../third_party/ffmpeg/libavcodec/x86/mpegaudiodsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MPADSPContext = type { void (float*, float*, i32*, float*, i64)*, void (i32*, i32*, i32*, i16*, i64)*, void (float*, float*)*, void (i32*, i32*)*, void (float*, float*, float*, i32, i32, i32)*, void (i32*, i32*, i32*, i32, i32, i32)* }

@ff_mdct_win_float = external global [8 x [40 x float]], align 16
@mdct_win_sse = internal global [2 x [4 x [160 x float]]] zeroinitializer, align 16

; Function Attrs: cold nofree norecurse nounwind optsize ssp uwtable
define hidden void @ff_mpadsp_init_x86_tabs() local_unnamed_addr #0 {
  br label %1

1:                                                ; preds = %40, %0
  %2 = phi i64 [ 0, %0 ], [ %41, %40 ]
  %3 = add nuw nsw i64 %2, 4
  br label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ 0, %1 ], [ %38, %4 ]
  %6 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %2, i64 %5
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = shl nsw i64 %5, 2
  %10 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 0, i64 %2, i64 %9
  %11 = bitcast float* %10 to i32*
  store i32 %8, i32* %11, align 16
  %12 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %3, i64 %5
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = or i64 %9, 1
  %16 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 0, i64 %2, i64 %15
  %17 = bitcast float* %16 to i32*
  store i32 %14, i32* %17, align 4
  %18 = or i64 %9, 2
  %19 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 0, i64 %2, i64 %18
  %20 = bitcast float* %19 to i32*
  store i32 %8, i32* %20, align 8
  %21 = or i64 %9, 3
  %22 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 0, i64 %2, i64 %21
  %23 = bitcast float* %22 to i32*
  store i32 %14, i32* %23, align 4
  %24 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 0, i64 %5
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 1, i64 %2, i64 %9
  %28 = bitcast float* %27 to i32*
  store i32 %26, i32* %28, align 16
  %29 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 4, i64 %5
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 1, i64 %2, i64 %15
  %33 = bitcast float* %32 to i32*
  store i32 %31, i32* %33, align 4
  %34 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 1, i64 %2, i64 %18
  %35 = bitcast float* %34 to i32*
  store i32 %8, i32* %35, align 8
  %36 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 1, i64 %2, i64 %21
  %37 = bitcast float* %36 to i32*
  store i32 %14, i32* %37, align 4
  %38 = add nuw nsw i64 %5, 1
  %39 = icmp eq i64 %38, 40
  br i1 %39, label %40, label %4

40:                                               ; preds = %4
  %41 = add nuw nsw i64 %2, 1
  %42 = icmp eq i64 %41, 4
  br i1 %42, label %43, label %1

43:                                               ; preds = %40
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_mpadsp_init_x86(%struct.MPADSPContext* nocapture) local_unnamed_addr #2 {
  %2 = tail call i32 @av_get_cpu_flags() #5
  %3 = and i32 %2, 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 0
  store void (float*, float*, i32*, float*, i64)* @apply_window_mp3, void (float*, float*, i32*, float*, i64)** %6, align 8
  br label %7

7:                                                ; preds = %1, %5
  %8 = and i32 %2, 16
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 4
  store void (float*, float*, float*, i32, i32, i32)* @imdct36_blocks_sse2, void (float*, float*, float*, i32, i32, i32)** %11, align 8
  br label %12

12:                                               ; preds = %7, %10
  %13 = and i32 %2, 64
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 4
  store void (float*, float*, float*, i32, i32, i32)* @imdct36_blocks_sse3, void (float*, float*, float*, i32, i32, i32)** %16, align 8
  br label %17

17:                                               ; preds = %12, %15
  %18 = trunc i32 %2 to i8
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 4
  store void (float*, float*, float*, i32, i32, i32)* @imdct36_blocks_ssse3, void (float*, float*, float*, i32, i32, i32)** %21, align 8
  br label %22

22:                                               ; preds = %20, %17
  %23 = and i32 %2, 16384
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 4
  store void (float*, float*, float*, i32, i32, i32)* @imdct36_blocks_avx, void (float*, float*, float*, i32, i32, i32)** %26, align 8
  br label %27

27:                                               ; preds = %22, %25
  ret void
}

declare i32 @av_get_cpu_flags() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @apply_window_mp3(float*, float*, i32* nocapture readnone, float*, i64) #4 {
  %6 = alloca [17 x float], align 16
  %7 = alloca [17 x float], align 16
  %8 = alloca [17 x float], align 16
  %9 = alloca [17 x float], align 16
  %10 = bitcast [17 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %10) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 68, i1 false)
  %11 = getelementptr inbounds [17 x float], [17 x float]* %6, i64 0, i64 0
  %12 = bitcast [17 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 68, i1 false)
  %13 = bitcast [17 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -1, i64 68, i1 false)
  %14 = getelementptr inbounds [17 x float], [17 x float]* %8, i64 0, i64 0
  %15 = bitcast [17 x float]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %15) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -1, i64 68, i1 false)
  %16 = getelementptr inbounds float, float* %0, i64 512
  tail call void asm sideeffect "movaps    0($0), %xmm0   \0A\09movaps   16($0), %xmm1   \0A\09movaps   32($0), %xmm2   \0A\09movaps   48($0), %xmm3   \0A\09movaps   %xmm0,   0($1) \0A\09movaps   %xmm1,  16($1) \0A\09movaps   %xmm2,  32($1) \0A\09movaps   %xmm3,  48($1) \0A\09movaps   64($0), %xmm0   \0A\09movaps   80($0), %xmm1   \0A\09movaps   96($0), %xmm2   \0A\09movaps  112($0), %xmm3   \0A\09movaps   %xmm0,  64($1) \0A\09movaps   %xmm1,  80($1) \0A\09movaps   %xmm2,  96($1) \0A\09movaps   %xmm3, 112($1) \0A\09", "r,r,~{memory},~{dirflag},~{fpsr},~{flags}"(float* %0, float* %16) #5, !srcloc !2
  %17 = getelementptr inbounds float, float* %1, i64 16
  %18 = getelementptr inbounds float, float* %1, i64 528
  %19 = getelementptr inbounds float, float* %0, i64 32
  %20 = getelementptr inbounds [17 x float], [17 x float]* %6, i64 0, i64 16
  %21 = getelementptr inbounds [17 x float], [17 x float]* %8, i64 0, i64 16
  %22 = call i64 asm sideeffect "1:                                   \0A\09xorps       %xmm0, %xmm0           \0A\09xorps       %xmm4, %xmm4           \0A\09movaps 0($1,$0), %xmm1           \0A\09movaps 0($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  0($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 256($1,$0), %xmm1           \0A\09movaps 256($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  64($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 512($1,$0), %xmm1           \0A\09movaps 512($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  128($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 768($1,$0), %xmm1           \0A\09movaps 768($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  192($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 1024($1,$0), %xmm1           \0A\09movaps 1024($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  256($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 1280($1,$0), %xmm1           \0A\09movaps 1280($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  320($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 1536($1,$0), %xmm1           \0A\09movaps 1536($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  384($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 1792($1,$0), %xmm1           \0A\09movaps 1792($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  448($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps      %xmm0, ($4,$0)          \0A\09movaps      %xmm4, ($5,$0)          \0A\09add            $$16,  $0              \0A\09jl              1b                   \0A\09", "=&r,r,r,r,r,r,0,~{dirflag},~{fpsr},~{flags}"(float* %17, float* %18, float* %19, float* %20, float* %21, i64 -64) #5, !srcloc !3
  %23 = getelementptr inbounds float, float* %1, i64 48
  %24 = getelementptr inbounds float, float* %1, i64 64
  %25 = getelementptr inbounds float, float* %1, i64 656
  %26 = getelementptr inbounds float, float* %0, i64 48
  %27 = getelementptr inbounds [17 x float], [17 x float]* %7, i64 0, i64 16
  %28 = getelementptr inbounds [17 x float], [17 x float]* %9, i64 0, i64 16
  %29 = call i64 asm sideeffect "1:                                   \0A\09xorps       %xmm0, %xmm0           \0A\09xorps       %xmm4, %xmm4           \0A\09movaps 0($1,$0), %xmm1           \0A\09movaps 0($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  0($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 256($1,$0), %xmm1           \0A\09movaps 256($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  64($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 512($1,$0), %xmm1           \0A\09movaps 512($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  128($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 768($1,$0), %xmm1           \0A\09movaps 768($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  192($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 1024($1,$0), %xmm1           \0A\09movaps 1024($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  256($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 1280($1,$0), %xmm1           \0A\09movaps 1280($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  320($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 1536($1,$0), %xmm1           \0A\09movaps 1536($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  384($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps 1792($1,$0), %xmm1           \0A\09movaps 1792($3,$0), %xmm2           \0A\09mulps         %xmm2, %xmm1           \0A\09subps         %xmm1, %xmm0           \0A\09mulps  448($2,$0), %xmm2           \0A\09subps         %xmm2, %xmm4           \0A\09movaps      %xmm0, ($4,$0)          \0A\09movaps      %xmm4, ($5,$0)          \0A\09add            $$16,  $0              \0A\09jl              1b                   \0A\09", "=&r,r,r,r,r,r,0,~{dirflag},~{fpsr},~{flags}"(float* %24, float* %25, float* %26, float* %27, float* %28, i64 -64) #5, !srcloc !3
  %30 = getelementptr inbounds float, float* %1, i64 32
  %31 = load float, float* %30, align 4
  %32 = load float, float* %26, align 4
  %33 = fmul nsz float %31, %32
  %34 = load float, float* %11, align 16
  %35 = fadd nsz float %34, %33
  %36 = getelementptr inbounds float, float* %1, i64 96
  %37 = load float, float* %36, align 4
  %38 = getelementptr inbounds float, float* %0, i64 112
  %39 = load float, float* %38, align 4
  %40 = fmul nsz float %37, %39
  %41 = fadd nsz float %35, %40
  %42 = getelementptr inbounds float, float* %1, i64 160
  %43 = load float, float* %42, align 4
  %44 = getelementptr inbounds float, float* %0, i64 176
  %45 = load float, float* %44, align 4
  %46 = fmul nsz float %43, %45
  %47 = fadd nsz float %41, %46
  %48 = getelementptr inbounds float, float* %1, i64 224
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds float, float* %0, i64 240
  %51 = load float, float* %50, align 4
  %52 = fmul nsz float %49, %51
  %53 = fadd nsz float %47, %52
  %54 = getelementptr inbounds float, float* %1, i64 288
  %55 = load float, float* %54, align 4
  %56 = getelementptr inbounds float, float* %0, i64 304
  %57 = load float, float* %56, align 4
  %58 = fmul nsz float %55, %57
  %59 = fadd nsz float %53, %58
  %60 = getelementptr inbounds float, float* %1, i64 352
  %61 = load float, float* %60, align 4
  %62 = getelementptr inbounds float, float* %0, i64 368
  %63 = load float, float* %62, align 4
  %64 = fmul nsz float %61, %63
  %65 = fadd nsz float %59, %64
  %66 = getelementptr inbounds float, float* %1, i64 416
  %67 = load float, float* %66, align 4
  %68 = getelementptr inbounds float, float* %0, i64 432
  %69 = load float, float* %68, align 4
  %70 = fmul nsz float %67, %69
  %71 = fadd nsz float %65, %70
  %72 = getelementptr inbounds float, float* %1, i64 480
  %73 = load float, float* %72, align 4
  %74 = getelementptr inbounds float, float* %0, i64 496
  %75 = load float, float* %74, align 4
  %76 = fmul nsz float %73, %75
  %77 = fadd nsz float %71, %76
  store float %77, float* %11, align 16
  store float 0.000000e+00, float* %14, align 16
  store float 0.000000e+00, float* %27, align 16
  store float 0.000000e+00, float* %28, align 16
  %78 = icmp eq i64 %4, 1
  br i1 %78, label %79, label %84

79:                                               ; preds = %5
  %80 = getelementptr inbounds [17 x float], [17 x float]* %9, i64 0, i64 0
  %81 = getelementptr inbounds [17 x float], [17 x float]* %7, i64 0, i64 0
  %82 = call float* asm sideeffect "movups 52($4),       %xmm0          \0A\09shufps         $$0x1b,       %xmm0, %xmm0  \0A\09subps  0($1),       %xmm0          \0A\09movaps        %xmm0,0($0)          \0A\09movups 4($3),       %xmm0          \0A\09shufps         $$0x1b,       %xmm0, %xmm0  \0A\09addps  48($2),       %xmm0          \0A\09movaps        %xmm0,112($0)          \0A\09movups 36($4),       %xmm0          \0A\09shufps         $$0x1b,       %xmm0, %xmm0  \0A\09subps  16($1),       %xmm0          \0A\09movaps        %xmm0,16($0)          \0A\09movups 20($3),       %xmm0          \0A\09shufps         $$0x1b,       %xmm0, %xmm0  \0A\09addps  32($2),       %xmm0          \0A\09movaps        %xmm0,96($0)          \0A\09movups 20($4),       %xmm0          \0A\09shufps         $$0x1b,       %xmm0, %xmm0  \0A\09subps  32($1),       %xmm0          \0A\09movaps        %xmm0,32($0)          \0A\09movups 36($3),       %xmm0          \0A\09shufps         $$0x1b,       %xmm0, %xmm0  \0A\09addps  16($2),       %xmm0          \0A\09movaps        %xmm0,80($0)          \0A\09movups 4($4),       %xmm0          \0A\09shufps         $$0x1b,       %xmm0, %xmm0  \0A\09subps  48($1),       %xmm0          \0A\09movaps        %xmm0,48($0)          \0A\09movups 52($3),       %xmm0          \0A\09shufps         $$0x1b,       %xmm0, %xmm0  \0A\09addps  0($2),       %xmm0          \0A\09movaps        %xmm0,64($0)          \0A\09", "=&r,r,r,r,r,0,~{memory},~{dirflag},~{fpsr},~{flags}"(float* nonnull %11, float* nonnull %81, float* nonnull %14, float* nonnull %80, float* %3) #5, !srcloc !4
  %83 = getelementptr inbounds float, float* %82, i64 16
  br label %109

84:                                               ; preds = %5
  %85 = shl nsw i64 %4, 5
  %86 = getelementptr inbounds float, float* %3, i64 %85
  %87 = fsub nsz float -0.000000e+00, %77
  store float %87, float* %3, align 4
  %88 = sub i64 0, %4
  br label %89

89:                                               ; preds = %157, %84
  %90 = phi i64 [ 1, %84 ], [ %170, %157 ]
  %91 = phi float* [ %3, %84 ], [ %107, %157 ]
  %92 = phi float* [ %86, %84 ], [ %158, %157 ]
  %93 = getelementptr inbounds float, float* %91, i64 %4
  %94 = getelementptr inbounds float, float* %92, i64 %88
  %95 = getelementptr inbounds [17 x float], [17 x float]* %6, i64 0, i64 %90
  %96 = load float, float* %95, align 4
  %97 = sub nuw nsw i64 16, %90
  %98 = getelementptr inbounds [17 x float], [17 x float]* %9, i64 0, i64 %97
  %99 = load float, float* %98, align 4
  %100 = fsub nsz float %99, %96
  store float %100, float* %93, align 4
  %101 = getelementptr inbounds [17 x float], [17 x float]* %7, i64 0, i64 %97
  %102 = load float, float* %101, align 4
  %103 = getelementptr inbounds [17 x float], [17 x float]* %8, i64 0, i64 %90
  %104 = load float, float* %103, align 4
  %105 = fadd nsz float %102, %104
  store float %105, float* %94, align 4
  %106 = add nuw nsw i64 %90, 1
  %107 = getelementptr inbounds float, float* %93, i64 %4
  %108 = icmp eq i64 %106, 16
  br i1 %108, label %109, label %157

109:                                              ; preds = %89, %79
  %110 = phi float* [ %83, %79 ], [ %107, %89 ]
  %111 = load float, float* %23, align 4
  %112 = load float, float* %19, align 4
  %113 = fmul nsz float %111, %112
  %114 = fsub nsz float -0.000000e+00, %113
  %115 = getelementptr inbounds float, float* %1, i64 112
  %116 = load float, float* %115, align 4
  %117 = getelementptr inbounds float, float* %0, i64 96
  %118 = load float, float* %117, align 4
  %119 = fmul nsz float %116, %118
  %120 = fsub nsz float %114, %119
  %121 = getelementptr inbounds float, float* %1, i64 176
  %122 = load float, float* %121, align 4
  %123 = getelementptr inbounds float, float* %0, i64 160
  %124 = load float, float* %123, align 4
  %125 = fmul nsz float %122, %124
  %126 = fsub nsz float %120, %125
  %127 = getelementptr inbounds float, float* %1, i64 240
  %128 = load float, float* %127, align 4
  %129 = getelementptr inbounds float, float* %0, i64 224
  %130 = load float, float* %129, align 4
  %131 = fmul nsz float %128, %130
  %132 = fsub nsz float %126, %131
  %133 = getelementptr inbounds float, float* %1, i64 304
  %134 = load float, float* %133, align 4
  %135 = getelementptr inbounds float, float* %0, i64 288
  %136 = load float, float* %135, align 4
  %137 = fmul nsz float %134, %136
  %138 = fsub nsz float %132, %137
  %139 = getelementptr inbounds float, float* %1, i64 368
  %140 = load float, float* %139, align 4
  %141 = getelementptr inbounds float, float* %0, i64 352
  %142 = load float, float* %141, align 4
  %143 = fmul nsz float %140, %142
  %144 = fsub nsz float %138, %143
  %145 = getelementptr inbounds float, float* %1, i64 432
  %146 = load float, float* %145, align 4
  %147 = getelementptr inbounds float, float* %0, i64 416
  %148 = load float, float* %147, align 4
  %149 = fmul nsz float %146, %148
  %150 = fsub nsz float %144, %149
  %151 = getelementptr inbounds float, float* %1, i64 496
  %152 = load float, float* %151, align 4
  %153 = getelementptr inbounds float, float* %0, i64 480
  %154 = load float, float* %153, align 4
  %155 = fmul nsz float %152, %154
  %156 = fsub nsz float %150, %155
  store float %156, float* %110, align 4
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %10) #5
  ret void

157:                                              ; preds = %89
  %158 = getelementptr inbounds float, float* %94, i64 %88
  %159 = getelementptr inbounds [17 x float], [17 x float]* %6, i64 0, i64 %106
  %160 = load float, float* %159, align 4
  %161 = sub nsw i64 15, %90
  %162 = getelementptr inbounds [17 x float], [17 x float]* %9, i64 0, i64 %161
  %163 = load float, float* %162, align 4
  %164 = fsub nsz float %163, %160
  store float %164, float* %107, align 4
  %165 = getelementptr inbounds [17 x float], [17 x float]* %7, i64 0, i64 %161
  %166 = load float, float* %165, align 4
  %167 = getelementptr inbounds [17 x float], [17 x float]* %8, i64 0, i64 %106
  %168 = load float, float* %167, align 4
  %169 = fadd nsz float %166, %168
  store float %169, float* %158, align 4
  %170 = add nuw nsw i64 %90, 2
  br label %89
}

; Function Attrs: nounwind ssp uwtable
define internal void @imdct36_blocks_sse2(float*, float*, float*, i32, i32, i32) #4 {
  %7 = alloca [1024 x float], align 16
  %8 = and i32 %3, -4
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %6
  %11 = bitcast [1024 x float]* %7 to i8*
  %12 = getelementptr inbounds [1024 x float], [1024 x float]* %7, i64 0, i64 0
  %13 = icmp ne i32 %4, 0
  %14 = sext i32 %5 to i64
  br label %23

15:                                               ; preds = %23, %6
  %16 = phi i32 [ 0, %6 ], [ %35, %23 ]
  %17 = phi float* [ %2, %6 ], [ %32, %23 ]
  %18 = phi float* [ %1, %6 ], [ %33, %23 ]
  %19 = phi float* [ %0, %6 ], [ %34, %23 ]
  %20 = icmp slt i32 %16, %3
  br i1 %20, label %21, label %56

21:                                               ; preds = %15
  %22 = icmp ne i32 %4, 0
  br label %37

23:                                               ; preds = %10, %23
  %24 = phi float* [ %0, %10 ], [ %34, %23 ]
  %25 = phi float* [ %1, %10 ], [ %33, %23 ]
  %26 = phi float* [ %2, %10 ], [ %32, %23 ]
  %27 = phi i32 [ 0, %10 ], [ %35, %23 ]
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 4096, i1 false)
  %28 = icmp eq i32 %27, 0
  %29 = and i1 %13, %28
  %30 = zext i1 %29 to i64
  %31 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 %30, i64 %14, i64 0
  call void @ff_four_imdct36_float_sse(float* %24, float* %25, float* %26, float* %31, float* nonnull %12) #5
  %32 = getelementptr inbounds float, float* %26, i64 72
  %33 = getelementptr inbounds float, float* %25, i64 72
  %34 = getelementptr inbounds float, float* %24, i64 4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #5
  %35 = add nuw nsw i32 %27, 4
  %36 = icmp slt i32 %35, %8
  br i1 %36, label %23, label %15

37:                                               ; preds = %37, %21
  %38 = phi float* [ %19, %21 ], [ %53, %37 ]
  %39 = phi float* [ %18, %21 ], [ %52, %37 ]
  %40 = phi float* [ %17, %21 ], [ %51, %37 ]
  %41 = phi i32 [ %16, %21 ], [ %54, %37 ]
  %42 = icmp ult i32 %41, 2
  %43 = and i1 %22, %42
  %44 = select i1 %43, i32 0, i32 %5
  %45 = and i32 %41, 1
  %46 = sub nsw i32 0, %45
  %47 = and i32 %46, 4
  %48 = add nsw i32 %44, %47
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %49, i64 0
  call void @ff_imdct36_float_sse2(float* %38, float* %39, float* %40, float* %50) #5
  %51 = getelementptr inbounds float, float* %40, i64 18
  %52 = getelementptr inbounds float, float* %39, i64 1
  %53 = getelementptr inbounds float, float* %38, i64 1
  %54 = add nuw i32 %41, 1
  %55 = icmp eq i32 %54, %3
  br i1 %55, label %56, label %37

56:                                               ; preds = %37, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @imdct36_blocks_sse3(float*, float*, float*, i32, i32, i32) #4 {
  %7 = alloca [1024 x float], align 16
  %8 = and i32 %3, -4
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %6
  %11 = bitcast [1024 x float]* %7 to i8*
  %12 = getelementptr inbounds [1024 x float], [1024 x float]* %7, i64 0, i64 0
  %13 = icmp ne i32 %4, 0
  %14 = sext i32 %5 to i64
  br label %23

15:                                               ; preds = %23, %6
  %16 = phi i32 [ 0, %6 ], [ %35, %23 ]
  %17 = phi float* [ %2, %6 ], [ %32, %23 ]
  %18 = phi float* [ %1, %6 ], [ %33, %23 ]
  %19 = phi float* [ %0, %6 ], [ %34, %23 ]
  %20 = icmp slt i32 %16, %3
  br i1 %20, label %21, label %56

21:                                               ; preds = %15
  %22 = icmp ne i32 %4, 0
  br label %37

23:                                               ; preds = %10, %23
  %24 = phi float* [ %0, %10 ], [ %34, %23 ]
  %25 = phi float* [ %1, %10 ], [ %33, %23 ]
  %26 = phi float* [ %2, %10 ], [ %32, %23 ]
  %27 = phi i32 [ 0, %10 ], [ %35, %23 ]
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 4096, i1 false)
  %28 = icmp eq i32 %27, 0
  %29 = and i1 %13, %28
  %30 = zext i1 %29 to i64
  %31 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 %30, i64 %14, i64 0
  call void @ff_four_imdct36_float_sse(float* %24, float* %25, float* %26, float* %31, float* nonnull %12) #5
  %32 = getelementptr inbounds float, float* %26, i64 72
  %33 = getelementptr inbounds float, float* %25, i64 72
  %34 = getelementptr inbounds float, float* %24, i64 4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #5
  %35 = add nuw nsw i32 %27, 4
  %36 = icmp slt i32 %35, %8
  br i1 %36, label %23, label %15

37:                                               ; preds = %37, %21
  %38 = phi float* [ %19, %21 ], [ %53, %37 ]
  %39 = phi float* [ %18, %21 ], [ %52, %37 ]
  %40 = phi float* [ %17, %21 ], [ %51, %37 ]
  %41 = phi i32 [ %16, %21 ], [ %54, %37 ]
  %42 = icmp ult i32 %41, 2
  %43 = and i1 %22, %42
  %44 = select i1 %43, i32 0, i32 %5
  %45 = and i32 %41, 1
  %46 = sub nsw i32 0, %45
  %47 = and i32 %46, 4
  %48 = add nsw i32 %44, %47
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %49, i64 0
  call void @ff_imdct36_float_sse3(float* %38, float* %39, float* %40, float* %50) #5
  %51 = getelementptr inbounds float, float* %40, i64 18
  %52 = getelementptr inbounds float, float* %39, i64 1
  %53 = getelementptr inbounds float, float* %38, i64 1
  %54 = add nuw i32 %41, 1
  %55 = icmp eq i32 %54, %3
  br i1 %55, label %56, label %37

56:                                               ; preds = %37, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @imdct36_blocks_ssse3(float*, float*, float*, i32, i32, i32) #4 {
  %7 = alloca [1024 x float], align 16
  %8 = and i32 %3, -4
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %6
  %11 = bitcast [1024 x float]* %7 to i8*
  %12 = getelementptr inbounds [1024 x float], [1024 x float]* %7, i64 0, i64 0
  %13 = icmp ne i32 %4, 0
  %14 = sext i32 %5 to i64
  br label %23

15:                                               ; preds = %23, %6
  %16 = phi i32 [ 0, %6 ], [ %35, %23 ]
  %17 = phi float* [ %2, %6 ], [ %32, %23 ]
  %18 = phi float* [ %1, %6 ], [ %33, %23 ]
  %19 = phi float* [ %0, %6 ], [ %34, %23 ]
  %20 = icmp slt i32 %16, %3
  br i1 %20, label %21, label %56

21:                                               ; preds = %15
  %22 = icmp ne i32 %4, 0
  br label %37

23:                                               ; preds = %10, %23
  %24 = phi float* [ %0, %10 ], [ %34, %23 ]
  %25 = phi float* [ %1, %10 ], [ %33, %23 ]
  %26 = phi float* [ %2, %10 ], [ %32, %23 ]
  %27 = phi i32 [ 0, %10 ], [ %35, %23 ]
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 4096, i1 false)
  %28 = icmp eq i32 %27, 0
  %29 = and i1 %13, %28
  %30 = zext i1 %29 to i64
  %31 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 %30, i64 %14, i64 0
  call void @ff_four_imdct36_float_sse(float* %24, float* %25, float* %26, float* %31, float* nonnull %12) #5
  %32 = getelementptr inbounds float, float* %26, i64 72
  %33 = getelementptr inbounds float, float* %25, i64 72
  %34 = getelementptr inbounds float, float* %24, i64 4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #5
  %35 = add nuw nsw i32 %27, 4
  %36 = icmp slt i32 %35, %8
  br i1 %36, label %23, label %15

37:                                               ; preds = %37, %21
  %38 = phi float* [ %19, %21 ], [ %53, %37 ]
  %39 = phi float* [ %18, %21 ], [ %52, %37 ]
  %40 = phi float* [ %17, %21 ], [ %51, %37 ]
  %41 = phi i32 [ %16, %21 ], [ %54, %37 ]
  %42 = icmp ult i32 %41, 2
  %43 = and i1 %22, %42
  %44 = select i1 %43, i32 0, i32 %5
  %45 = and i32 %41, 1
  %46 = sub nsw i32 0, %45
  %47 = and i32 %46, 4
  %48 = add nsw i32 %44, %47
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %49, i64 0
  call void @ff_imdct36_float_ssse3(float* %38, float* %39, float* %40, float* %50) #5
  %51 = getelementptr inbounds float, float* %40, i64 18
  %52 = getelementptr inbounds float, float* %39, i64 1
  %53 = getelementptr inbounds float, float* %38, i64 1
  %54 = add nuw i32 %41, 1
  %55 = icmp eq i32 %54, %3
  br i1 %55, label %56, label %37

56:                                               ; preds = %37, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @imdct36_blocks_avx(float*, float*, float*, i32, i32, i32) #4 {
  %7 = alloca [1024 x float], align 16
  %8 = and i32 %3, -4
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %6
  %11 = bitcast [1024 x float]* %7 to i8*
  %12 = getelementptr inbounds [1024 x float], [1024 x float]* %7, i64 0, i64 0
  %13 = icmp ne i32 %4, 0
  %14 = sext i32 %5 to i64
  br label %23

15:                                               ; preds = %23, %6
  %16 = phi i32 [ 0, %6 ], [ %35, %23 ]
  %17 = phi float* [ %2, %6 ], [ %32, %23 ]
  %18 = phi float* [ %1, %6 ], [ %33, %23 ]
  %19 = phi float* [ %0, %6 ], [ %34, %23 ]
  %20 = icmp slt i32 %16, %3
  br i1 %20, label %21, label %56

21:                                               ; preds = %15
  %22 = icmp ne i32 %4, 0
  br label %37

23:                                               ; preds = %10, %23
  %24 = phi float* [ %0, %10 ], [ %34, %23 ]
  %25 = phi float* [ %1, %10 ], [ %33, %23 ]
  %26 = phi float* [ %2, %10 ], [ %32, %23 ]
  %27 = phi i32 [ 0, %10 ], [ %35, %23 ]
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 4096, i1 false)
  %28 = icmp eq i32 %27, 0
  %29 = and i1 %13, %28
  %30 = zext i1 %29 to i64
  %31 = getelementptr inbounds [2 x [4 x [160 x float]]], [2 x [4 x [160 x float]]]* @mdct_win_sse, i64 0, i64 %30, i64 %14, i64 0
  call void @ff_four_imdct36_float_avx(float* %24, float* %25, float* %26, float* %31, float* nonnull %12) #5
  %32 = getelementptr inbounds float, float* %26, i64 72
  %33 = getelementptr inbounds float, float* %25, i64 72
  %34 = getelementptr inbounds float, float* %24, i64 4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #5
  %35 = add nuw nsw i32 %27, 4
  %36 = icmp slt i32 %35, %8
  br i1 %36, label %23, label %15

37:                                               ; preds = %37, %21
  %38 = phi float* [ %19, %21 ], [ %53, %37 ]
  %39 = phi float* [ %18, %21 ], [ %52, %37 ]
  %40 = phi float* [ %17, %21 ], [ %51, %37 ]
  %41 = phi i32 [ %16, %21 ], [ %54, %37 ]
  %42 = icmp ult i32 %41, 2
  %43 = and i1 %22, %42
  %44 = select i1 %43, i32 0, i32 %5
  %45 = and i32 %41, 1
  %46 = sub nsw i32 0, %45
  %47 = and i32 %46, 4
  %48 = add nsw i32 %44, %47
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %49, i64 0
  call void @ff_imdct36_float_avx(float* %38, float* %39, float* %40, float* %50) #5
  %51 = getelementptr inbounds float, float* %40, i64 18
  %52 = getelementptr inbounds float, float* %39, i64 1
  %53 = getelementptr inbounds float, float* %38, i64 1
  %54 = add nuw i32 %41, 1
  %55 = icmp eq i32 %54, %3
  br i1 %55, label %56, label %37

56:                                               ; preds = %37, %15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @ff_four_imdct36_float_sse(float*, float*, float*, float*, float*) local_unnamed_addr #3

declare void @ff_imdct36_float_sse2(float*, float*, float*, float*) local_unnamed_addr #3

declare void @ff_imdct36_float_sse3(float*, float*, float*, float*) local_unnamed_addr #3

declare void @ff_imdct36_float_ssse3(float*, float*, float*, float*) local_unnamed_addr #3

declare void @ff_four_imdct36_float_avx(float*, float*, float*, float*, float*) local_unnamed_addr #3

declare void @ff_imdct36_float_avx(float*, float*, float*, float*) local_unnamed_addr #3

attributes #0 = { cold nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 4122, i32 4151, i32 4198, i32 4245, i32 4292, i32 4338, i32 4384, i32 4430, i32 4476, i32 4523, i32 4570, i32 4617, i32 4664, i32 4710, i32 4756, i32 4802, i32 4848}
!3 = !{i32 3020, i32 3060, i32 3116, i32 3172, i32 -2146046297, i32 -2146046244, i32 -2146046191, i32 -2146046138, i32 -2146046085, i32 -2146046032, i32 -2146045978, i32 -2146045925, i32 -2146045872, i32 -2146045819, i32 -2146045766, i32 -2146045713, i32 -2146045656, i32 -2146045603, i32 -2146045550, i32 -2146045497, i32 -2146045444, i32 -2146045391, i32 -2146045333, i32 -2146045280, i32 -2146045227, i32 -2146045174, i32 -2146045121, i32 -2146045068, i32 -2146045010, i32 -2146044957, i32 -2146044904, i32 -2146044851, i32 -2146044798, i32 -2146044745, i32 -2146044686, i32 -2146044633, i32 -2146044580, i32 -2146044527, i32 -2146044474, i32 -2146044421, i32 -2146044362, i32 -2146044309, i32 -2146044256, i32 -2146044203, i32 -2146044150, i32 -2146044097, i32 -2146044038, i32 -2146043985, i32 -2146043932, i32 -2146043879, i32 -2146043826, i32 -2146043773, i32 3454, i32 3510, i32 3566, i32 3622}
!4 = !{i32 -2146041320, i32 -2146041273, i32 -2146041208, i32 -2146041143, i32 -2146041078, i32 -2146041011, i32 -2146040946, i32 -2146040881, i32 -2146040816, i32 -2146040737, i32 -2146040672, i32 -2146040607, i32 -2146040542, i32 -2146040475, i32 -2146040410, i32 -2146040345, i32 -2146040280, i32 -2146040199, i32 -2146040134, i32 -2146040069, i32 -2146040004, i32 -2146039937, i32 -2146039872, i32 -2146039807, i32 -2146039742, i32 -2146039661, i32 -2146039596, i32 -2146039531, i32 -2146039466, i32 -2146039399, i32 -2146039334, i32 -2146039269, i32 -2146039204}
