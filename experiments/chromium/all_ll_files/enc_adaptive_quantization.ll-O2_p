; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_adaptive_quantization.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_adaptive_quantization.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane.1"] }
%"class.jxl::Plane.1" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.244" }
%"class.std::__1::vector.244" = type { %"class.std::__1::__vector_base.245" }
%"class.std::__1::__vector_base.245" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.246" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.247" }
%"struct.std::__1::__compressed_pair_elem.247" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.82" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"struct.jxl::ExtraChannelInfo"* }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.15", %"class.std::__1::vector", %"class.std::__1::vector.22", %"class.std::__1::vector.29", %"class.std::__1::vector.38", %"class.std::__1::vector.52", %"class.std::__1::vector.6", %"class.std::__1::vector", %"class.std::__1::vector.6", i32, i8, %"class.std::__1::vector.6" }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { i32*, i32*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i32* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.24" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.33" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.31", %"struct.std::__1::array.32", i32, i8, [3 x i8] }>
%"struct.std::__1::array.31" = type { [17 x i32] }
%"struct.std::__1::array.32" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.47" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.40" }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { i16*, i16*, %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { i16* }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.69" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.54", i32, %"class.std::__1::vector.55", %"class.std::__1::vector.62" }
%"struct.std::__1::array.54" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { i32*, i32*, %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { i32* }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.64" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.6"*, %"class.std::__1::vector.6"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::vector.6"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { i8*, i8*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.80", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"class.std::__1::vector.87" = type { %"class.std::__1::__vector_base.88" }
%"class.std::__1::__vector_base.88" = type { %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"*, %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.jxl::Plane.1"* }
%"class.std::__1::vector.251" = type { %"class.std::__1::__vector_base.252" }
%"class.std::__1::__vector_base.252" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.253" }
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.3", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.87", i64 }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.254" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"class.jxl::ImageBundle"* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.jxl::WeightsSymmetric5" = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float] }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane", i8*, i64 }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.jxl::PassesEncoderState" = type { %"struct.jxl::PassesSharedState", %"class.jxl::Plane.1", %"class.jxl::Plane.1", %"class.std::__1::vector.178", %"class.std::__1::vector.191", %"class.jxl::ProgressiveSplitter", %"struct.jxl::CompressParams", %"class.std::__1::vector.200", %"class.std::__1::vector.6", %"class.std::__1::vector.55", float, float, %"class.std::__1::unique_ptr.230" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.132", %"class.jxl::Plane", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector.55", %"class.jxl::Plane", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.176], i64 }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.55", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.94", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.94" = type { %"class.std::__1::__vector_base.95" }
%"class.std::__1::__vector_base.95" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.101", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.105" }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103", %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.103" = type { float* }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.105" = type { %"class.std::__1::__vector_base.106" }
%"class.std::__1::__vector_base.106" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.127" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.109, %"struct.jxl::DctQuantWeightParams", %union.anon.126 }>
%union.anon.109 = type { %"struct.std::__1::array.116", [4 x i8] }
%"struct.std::__1::array.116" = type { [3 x %"struct.std::__1::array.117"] }
%"struct.std::__1::array.117" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array.107", [4 x i8] }>
%"struct.std::__1::array.107" = type { [3 x %"struct.std::__1::array.108"] }
%"struct.std::__1::array.108" = type { [17 x float] }
%union.anon.126 = type { i8 }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.132" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.133", %"class.jxl::Plane.133", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.133" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.134", %"class.std::__1::vector.148", %"class.std::__1::vector.148" }
%"class.std::__1::vector.134" = type { %"class.std::__1::__vector_base.135" }
%"class.std::__1::__vector_base.135" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.143" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.136", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.136" = type { %"class.std::__1::__vector_base.137" }
%"class.std::__1::__vector_base.137" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.138" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.148" = type { %"class.std::__1::__vector_base.149" }
%"class.std::__1::__vector_base.149" = type { i64*, i64*, %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { i64* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.155", %"class.std::__1::vector.169" }
%"class.std::__1::vector.155" = type { %"class.std::__1::__vector_base.156" }
%"class.std::__1::__vector_base.156" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.164" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.157", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.157" = type { %"class.std::__1::__vector_base.158" }
%"class.std::__1::__vector_base.158" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.159" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.171" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"struct.jxl::Spline::Point"* }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.119"], %"class.std::__1::vector.55", %"class.std::__1::vector.6", i64, i64 }
%"class.std::__1::vector.119" = type { %"class.std::__1::__vector_base.120" }
%"class.std::__1::__vector_base.120" = type { i32*, i32*, %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { i32* }
%struct.anon.176 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.std::__1::vector.178" = type { %"class.std::__1::__vector_base.179" }
%"class.std::__1::__vector_base.179" = type { %"class.std::__1::unique_ptr.180"*, %"class.std::__1::unique_ptr.180"*, %"class.std::__1::__compressed_pair.186" }
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"class.std::__1::unique_ptr.180"* }
%"class.std::__1::vector.191" = type { %"class.std::__1::__vector_base.192" }
%"class.std::__1::__vector_base.192" = type { %"class.std::__1::unique_ptr.193"*, %"class.std::__1::unique_ptr.193"*, %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.410" }
%"struct.std::__1::__compressed_pair_elem.410" = type { %"struct.jxl::BitWriter"* }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.std::__1::unique_ptr.193"* }
%"class.jxl::ProgressiveSplitter" = type <{ %"struct.jxl::ProgressiveMode", %"class.jxl::Plane.1"*, float, [4 x i8] }>
%"struct.jxl::ProgressiveMode" = type { i64, [11 x %"struct.jxl::PassDefinition"] }
%"struct.jxl::PassDefinition" = type { i64, i64, i8, i64 }
%"struct.jxl::CompressParams" = type { float, i64, float, float, float, i8, [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i64, float, %"class.jxl::Plane.1"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair.199", i32, float, float, i32, i32, i8, i8, i64, i64 }
%"struct.jxl::ButteraugliParams" = type <{ float, float, float, i8, [3 x i8] }>
%"struct.jxl::ModularOptions" = type <{ i64, float, i32, %"class.std::__1::vector.55", float, [4 x i8], i64, i32, i32, float, i32, i8, [3 x i8], i32, i8, [7 x i8] }>
%"struct.std::__1::pair.199" = type { float, float }
%"class.std::__1::vector.200" = type { %"class.std::__1::__vector_base.201" }
%"class.std::__1::__vector_base.201" = type { %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"*, %"class.std::__1::__compressed_pair.225" }
%"struct.jxl::PassesEncoderState::PassData" = type { %"class.std::__1::vector.202", %"class.std::__1::vector.6", %"struct.jxl::EntropyEncodingData" }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"class.std::__1::vector.204"*, %"class.std::__1::vector.204"*, %"class.std::__1::__compressed_pair.205" }
%"class.std::__1::vector.204" = type { %"class.std::__1::__vector_base.414" }
%"class.std::__1::__vector_base.414" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.415" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.415" = type { %"struct.std::__1::__compressed_pair_elem.416" }
%"struct.std::__1::__compressed_pair_elem.416" = type { %"struct.jxl::Token"* }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"class.std::__1::vector.204"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.210", i8, %"class.std::__1::vector.218", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.210" = type { %"class.std::__1::__vector_base.211" }
%"class.std::__1::__vector_base.211" = type { %"class.std::__1::vector.212"*, %"class.std::__1::vector.212"*, %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::vector.212" = type { %"class.std::__1::__vector_base.420" }
%"class.std::__1::__vector_base.420" = type { %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"*, %"class.std::__1::__compressed_pair.428" }
%"struct.jxl::ANSEncSymbolInfo" = type <{ i16, [6 x i8], %"class.std::__1::vector.421", i64, i8, i8, i16, [4 x i8] }>
%"class.std::__1::vector.421" = type { %"class.std::__1::__vector_base.422" }
%"class.std::__1::__vector_base.422" = type { i16*, i16*, %"class.std::__1::__compressed_pair.423" }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.424" }
%"struct.std::__1::__compressed_pair_elem.424" = type { i16* }
%"class.std::__1::__compressed_pair.428" = type { %"struct.std::__1::__compressed_pair_elem.429" }
%"struct.std::__1::__compressed_pair_elem.429" = type { %"struct.jxl::ANSEncSymbolInfo"* }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.std::__1::vector.212"* }
%"class.std::__1::vector.218" = type { %"class.std::__1::__vector_base.219" }
%"class.std::__1::__vector_base.219" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.220" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.226" }
%"struct.std::__1::__compressed_pair_elem.226" = type { %"struct.jxl::PassesEncoderState::PassData"* }
%"class.std::__1::unique_ptr.230" = type { %"class.std::__1::__compressed_pair.231" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.232" }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"class.jxl::EncoderHeuristics"* }
%"class.jxl::EncoderHeuristics" = type { i32 (...)** }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array.236", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.237", %"struct.std::__1::array.237", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.238" }
%"struct.std::__1::array.236" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.237" = type { [8 x i32] }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.std::__1::function.238" = type { %"class.std::__1::__function::__policy_func.242" }
%"class.std::__1::__function::__policy_func.242" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.243", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.243" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.251", i8, i64 }
%"class.jxl::JxlButteraugliComparator" = type { %"class.jxl::Comparator", %"struct.jxl::ButteraugliParams", %"class.std::__1::unique_ptr.517", i64, i64 }
%"class.jxl::Comparator" = type { i32 (...)** }
%"class.std::__1::unique_ptr.517" = type { %"class.std::__1::__compressed_pair.518" }
%"class.std::__1::__compressed_pair.518" = type { %"struct.std::__1::__compressed_pair_elem.519" }
%"struct.std::__1::__compressed_pair_elem.519" = type { %"class.jxl::ButteraugliComparator"* }
%"class.jxl::ButteraugliComparator" = type { i32 (...)**, i64, i64, %"struct.jxl::ButteraugliParams", %"struct.jxl::PsychoImage", %"class.jxl::Image3", %"struct.std::__1::atomic_flag", %"struct.jxl::BlurTemp", %"class.std::__1::unique_ptr.517" }
%"struct.jxl::PsychoImage" = type { [2 x %"class.jxl::Plane.1"], [2 x %"class.jxl::Plane.1"], %"class.jxl::Image3", %"class.jxl::Image3" }
%"struct.std::__1::atomic_flag" = type { %"struct.std::__1::__cxx_atomic_impl.523" }
%"struct.std::__1::__cxx_atomic_impl.523" = type { %"struct.std::__1::__cxx_atomic_base_impl.524" }
%"struct.std::__1::__cxx_atomic_base_impl.524" = type { i8 }
%"struct.jxl::BlurTemp" = type { %"class.jxl::Plane.1", %"class.jxl::Plane.1" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.jxl::ThreadPool::RunCallState.546" = type { %class.anon*, %class.anon.404* }
%class.anon = type { %"class.std::__1::unique_ptr.258"*, %"class.std::__1::unique_ptr.395"* }
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.jxl::PassesDecoderState"* }
%"struct.jxl::PassesDecoderState" = type { %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"*, [3 x %"struct.jxl::Upsampler"], %"class.jxl::Image3", %"class.jxl::Image3", %"class.std::__1::vector.87", %"class.std::__1::vector.261", %"class.std::__1::vector", float, float, %"class.jxl::Image3", %"class.std::__1::vector.87", %"class.jxl::Image3", %"class.jxl::Image3", i8*, i64, i8, i8, %"class.std::__1::function.282", %"class.std::__1::vector.287", %"class.std::__1::vector.293", i64, %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.180", %"class.std::__1::vector.300", %"struct.jxl::FilterWeights", %"class.jxl::GroupBorderAssigner", %"class.std::__1::vector.314", %"class.std::__1::vector.314", %"class.std::__1::vector.314", [4 x %"class.std::__1::vector.314"], %"class.std::__1::vector.87", %"class.std::__1::vector.314", %"struct.jxl::OutputEncodingInfo" }
%"struct.jxl::Upsampler" = type { i64, [4 x [4 x [5 x [5 x float]]]] }
%"class.std::__1::vector.261" = type { %"class.std::__1::__vector_base.262" }
%"class.std::__1::__vector_base.262" = type { %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"*, %"class.std::__1::__compressed_pair.277" }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.263", %"class.std::__1::vector.218", %"class.std::__1::vector.119", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.263" = type { %"class.std::__1::__vector_base.264" }
%"class.std::__1::__vector_base.264" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.272" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.265" }
%"class.std::__1::vector.265" = type { %"class.std::__1::__vector_base.266" }
%"class.std::__1::__vector_base.266" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.267" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.267" = type { %"struct.std::__1::__compressed_pair_elem.268" }
%"struct.std::__1::__compressed_pair_elem.268" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"struct.std::__1::__compressed_pair_elem.273" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.278" }
%"struct.std::__1::__compressed_pair_elem.278" = type { %"struct.jxl::ANSCode"* }
%"class.std::__1::function.282" = type { %"class.std::__1::__function::__policy_func.285" }
%"class.std::__1::__function::__policy_func.285" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.286", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.286" = type { void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { float*, float*, %"class.std::__1::__compressed_pair.289" }
%"class.std::__1::__compressed_pair.289" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"class.std::__1::vector.293" = type { %"class.std::__1::__vector_base.294" }
%"class.std::__1::__vector_base.294" = type { %"class.std::__1::vector.287"*, %"class.std::__1::vector.287"*, %"class.std::__1::__compressed_pair.295" }
%"class.std::__1::__compressed_pair.295" = type { %"struct.std::__1::__compressed_pair_elem.296" }
%"struct.std::__1::__compressed_pair_elem.296" = type { %"class.std::__1::vector.287"* }
%"class.std::__1::vector.300" = type { %"class.std::__1::__vector_base.301" }
%"class.std::__1::__vector_base.301" = type { %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.std::__1::__compressed_pair.302" }
%"class.jxl::FilterPipeline" = type { %"class.jxl::Image3", i64, [4 x %"struct.jxl::FilterPipeline::FilterStep"], i64, i8, i64 }
%"struct.jxl::FilterPipeline::FilterStep" = type { %"class.jxl::Image3"*, i64, %"class.jxl::Image3"*, i64, %"class.jxl::Rect", %"class.jxl::Rect", %"class.jxl::Rect", i64, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, %"struct.jxl::FilterDefinition", i64 }
%"struct.jxl::FilterRows" = type <{ [3 x float*], [7 x i64], [3 x float*], float*, i32, [4 x i8] }>
%"struct.jxl::FilterDefinition" = type { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)*, i64 }
%"class.std::__1::__compressed_pair.302" = type { %"struct.std::__1::__compressed_pair_elem.303" }
%"struct.std::__1::__compressed_pair_elem.303" = type { %"class.jxl::FilterPipeline"* }
%"struct.jxl::FilterWeights" = type { [9 x float], %"class.jxl::Plane.1" }
%"class.jxl::GroupBorderAssigner" = type { %"struct.jxl::FrameDimensions", %"class.std::__1::unique_ptr.307" }
%"class.std::__1::unique_ptr.307" = type { %"class.std::__1::__compressed_pair.308" }
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.309" }
%"struct.std::__1::__compressed_pair_elem.309" = type { %"struct.std::__1::atomic.310"* }
%"struct.std::__1::atomic.310" = type { %"struct.std::__1::__atomic_base.405" }
%"struct.std::__1::__atomic_base.405" = type { %"struct.std::__1::__atomic_base.406" }
%"struct.std::__1::__atomic_base.406" = type { %"struct.std::__1::__cxx_atomic_impl.407" }
%"struct.std::__1::__cxx_atomic_impl.407" = type { %"struct.std::__1::__cxx_atomic_base_impl.408" }
%"struct.std::__1::__cxx_atomic_base_impl.408" = type { i8 }
%"class.std::__1::vector.314" = type { %"class.std::__1::__vector_base.315" }
%"class.std::__1::__vector_base.315" = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.std::__1::__compressed_pair.316" }
%"class.std::__1::__compressed_pair.316" = type { %"struct.std::__1::__compressed_pair_elem.317" }
%"struct.std::__1::__compressed_pair_elem.317" = type { %"class.jxl::Image3"* }
%"struct.jxl::OutputEncodingInfo" = type <{ %"struct.jxl::ColorEncoding", float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }>
%"struct.jxl::OpsinParams" = type { [36 x float], [4 x float], [4 x float], [4 x float] }
%"class.std::__1::unique_ptr.395" = type { %"class.std::__1::__compressed_pair.396" }
%"class.std::__1::__compressed_pair.396" = type { %"struct.std::__1::__compressed_pair_elem.397", %"struct.std::__1::__compressed_pair_elem.403" }
%"struct.std::__1::__compressed_pair_elem.397" = type { %"struct.jxl::GroupDecCache"* }
%"struct.jxl::GroupDecCache" = type { float*, i32*, i16*, float*, [11 x %"class.jxl::Image3.398"], %"class.std::__1::unique_ptr.101", %"class.std::__1::unique_ptr.399", %"class.std::__1::unique_ptr.401", i64 }
%"class.jxl::Image3.398" = type { [3 x %"class.jxl::Plane.132"] }
%"class.std::__1::unique_ptr.399" = type { %"class.std::__1::__compressed_pair.400" }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.122", %"struct.std::__1::__compressed_pair_elem.104" }
%"class.std::__1::unique_ptr.401" = type { %"class.std::__1::__compressed_pair.402" }
%"class.std::__1::__compressed_pair.402" = type { %"struct.std::__1::__compressed_pair_elem.43", %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.403" = type { %"class.hwy::AlignedDeleter" }
%"class.hwy::AlignedDeleter" = type { void (i8*, i8*)*, i8* }
%class.anon.404 = type { %"class.std::__1::unique_ptr.258"*, %"struct.jxl::PassesEncoderState"**, %"class.std::__1::unique_ptr.395"*, %"class.jxl::ImageBundle"* }
%"class.jxl::ACImageT" = type { %"class.jxl::ACImage", %"class.jxl::Image3.398" }
%"class.jxl::ModularFrameEncoder" = type { %"class.std::__1::vector.148", %"class.std::__1::vector.6", %"class.std::__1::vector.327", %"class.std::__1::vector.355", %"class.std::__1::vector.362", %"class.std::__1::vector.202", %"class.std::__1::vector.369", %"class.std::__1::vector.202", %"struct.jxl::EntropyEncodingData", %"class.std::__1::vector.6", %"struct.jxl::FrameDimensions", %"struct.jxl::CompressParams", float, float, %"class.std::__1::vector.148", %"class.std::__1::vector.376", %"class.std::__1::vector.385", %"class.std::__1::vector.148" }
%"class.std::__1::vector.327" = type { %"class.std::__1::__vector_base.328" }
%"class.std::__1::__vector_base.328" = type { %"class.jxl::Image"*, %"class.jxl::Image"*, %"class.std::__1::__compressed_pair.350" }
%"class.jxl::Image" = type <{ %"class.std::__1::vector.329", %"class.std::__1::vector.336", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.329" = type { %"class.std::__1::__vector_base.330" }
%"class.std::__1::__vector_base.330" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.331" }
%"class.jxl::Channel" = type { %"class.jxl::Plane.132", i64, i64, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.331" = type { %"struct.std::__1::__compressed_pair_elem.332" }
%"struct.std::__1::__compressed_pair_elem.332" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.336" = type { %"class.std::__1::__vector_base.337" }
%"class.std::__1::__vector_base.337" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.345" }
%"class.jxl::Transform" = type <{ %"class.jxl::Fields", i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.338", i32, i32, i8, i8, [6 x i8] }>
%"class.std::__1::vector.338" = type { %"class.std::__1::__vector_base.339" }
%"class.std::__1::__vector_base.339" = type { %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*, %"class.std::__1::__compressed_pair.340" }
%"struct.jxl::SqueezeParams" = type <{ %"class.jxl::Fields", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.340" = type { %"struct.std::__1::__compressed_pair_elem.341" }
%"struct.std::__1::__compressed_pair_elem.341" = type { %"struct.jxl::SqueezeParams"* }
%"class.std::__1::__compressed_pair.345" = type { %"struct.std::__1::__compressed_pair_elem.346" }
%"struct.std::__1::__compressed_pair_elem.346" = type { %"class.jxl::Transform"* }
%"class.std::__1::__compressed_pair.350" = type { %"struct.std::__1::__compressed_pair_elem.351" }
%"struct.std::__1::__compressed_pair_elem.351" = type { %"class.jxl::Image"* }
%"class.std::__1::vector.355" = type { %"class.std::__1::__vector_base.356" }
%"class.std::__1::__vector_base.356" = type { %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"*, %"class.std::__1::__compressed_pair.357" }
%"class.std::__1::__compressed_pair.357" = type { %"struct.std::__1::__compressed_pair_elem.358" }
%"struct.std::__1::__compressed_pair_elem.358" = type { %"struct.jxl::ModularOptions"* }
%"class.std::__1::vector.362" = type { %"class.std::__1::__vector_base.363" }
%"class.std::__1::__vector_base.363" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair.364" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.364" = type { %"struct.std::__1::__compressed_pair_elem.365" }
%"struct.std::__1::__compressed_pair_elem.365" = type { %"struct.jxl::PropertyDecisionNode"* }
%"class.std::__1::vector.369" = type { %"class.std::__1::__vector_base.370" }
%"class.std::__1::__vector_base.370" = type { %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"*, %"class.std::__1::__compressed_pair.371" }
%"struct.jxl::GroupHeader" = type { %"class.jxl::Fields", i8, %"struct.jxl::weighted::Header", %"class.std::__1::vector.336" }
%"struct.jxl::weighted::Header" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%"class.std::__1::__compressed_pair.371" = type { %"struct.std::__1::__compressed_pair_elem.372" }
%"struct.std::__1::__compressed_pair_elem.372" = type { %"struct.jxl::GroupHeader"* }
%"class.std::__1::vector.376" = type { %"class.std::__1::__vector_base.377" }
%"class.std::__1::__vector_base.377" = type { %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"*, %"class.std::__1::__compressed_pair.380" }
%"struct.jxl::ModularMultiplierInfo" = type { %"struct.std::__1::array.378", i32 }
%"struct.std::__1::array.378" = type { [2 x %"struct.std::__1::array.379"] }
%"struct.std::__1::array.379" = type { [2 x i32] }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.381" }
%"struct.std::__1::__compressed_pair_elem.381" = type { %"struct.jxl::ModularMultiplierInfo"* }
%"class.std::__1::vector.385" = type { %"class.std::__1::__vector_base.386" }
%"class.std::__1::__vector_base.386" = type { %"class.std::__1::vector.55"*, %"class.std::__1::vector.55"*, %"class.std::__1::__compressed_pair.387" }
%"class.std::__1::__compressed_pair.387" = type { %"struct.std::__1::__compressed_pair_elem.388" }
%"struct.std::__1::__compressed_pair_elem.388" = type { %"class.std::__1::vector.55"* }
%class.anon.526 = type { i64*, %"struct.jxl::PassesDecoderState"* }
%"struct.jxl::ThreadPool::SkipInit" = type { i8 }
%"class.jxl::ThreadPool::RunCallState" = type { %class.anon.433*, %class.anon.434* }
%class.anon.433 = type { %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* }
%"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl" = type { %"class.std::__1::vector.87", %"class.jxl::Plane.1", %"class.jxl::Plane.1" }
%class.anon.434 = type { %"struct.jxl::FrameDimensions"*, %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"*, float*, float*, %"class.jxl::Image3"*, %"class.jxl::Plane.1"** }
%"class.jxl::ThreadPool::RunCallState.464" = type { %class.anon.462*, %class.anon.463* }
%class.anon.462 = type { %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* }
%"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl" = type { %"class.std::__1::vector.87", %"class.jxl::Plane.1", %"class.jxl::Plane.1" }
%class.anon.463 = type { %"struct.jxl::FrameDimensions"*, %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"*, float*, float*, %"class.jxl::Image3"*, %"class.jxl::Plane.1"** }
%"class.jxl::ThreadPool::RunCallState.485" = type { %class.anon.483*, %class.anon.484* }
%class.anon.483 = type { %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* }
%"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl" = type { %"class.std::__1::vector.87", %"class.jxl::Plane.1", %"class.jxl::Plane.1" }
%class.anon.484 = type { %"struct.jxl::FrameDimensions"*, %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"*, float*, float*, %"class.jxl::Image3"*, %"class.jxl::Plane.1"** }
%"class.jxl::ThreadPool::RunCallState.506" = type { %class.anon.504*, %class.anon.505* }
%class.anon.504 = type { %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* }
%"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl" = type { %"class.std::__1::vector.87", %"class.jxl::Plane.1", %"class.jxl::Plane.1" }
%class.anon.505 = type { %"struct.jxl::FrameDimensions"*, %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"*, float*, float*, %"class.jxl::Image3"*, %"class.jxl::Plane.1"** }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.jxl::Visitor" = type { i32 (...)** }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.jxl::ThreadPool::RunCallState.530" = type { i32 (i64)*, %class.anon.526* }
%"class.std::__1::allocator.280" = type { i8 }
%"struct.std::__1::__split_buffer.547" = type { %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.std::__1::__compressed_pair.548" }
%"class.std::__1::__compressed_pair.548" = type { %"struct.std::__1::__compressed_pair_elem.303", %"struct.std::__1::__compressed_pair_elem.549" }
%"struct.std::__1::__compressed_pair_elem.549" = type { %"class.std::__1::allocator.305"* }
%"class.std::__1::allocator.305" = type { i8 }
%"struct.std::__1::__split_buffer.550" = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.std::__1::__compressed_pair.551" }
%"class.std::__1::__compressed_pair.551" = type { %"struct.std::__1::__compressed_pair_elem.317", %"struct.std::__1::__compressed_pair_elem.552" }
%"struct.std::__1::__compressed_pair_elem.552" = type { %"class.std::__1::allocator.319"* }
%"class.std::__1::allocator.319" = type { i8 }

$_ZN3jxl18PassesDecoderState4InitEv = comdat any

$_ZN3jxl18PassesDecoderState9InitForACEPNS_10ThreadPoolE = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZNK3jxl6AuxOut12DumpXybImageIfEEvPKcRKNS_6Image3IT_EE = comdat any

$_ZN3jxl10CodecInOutC2Ev = comdat any

$_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE = comdat any

$_ZN3jxl10CodecInOutD2Ev = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZN3jxl11ImageBundleC2EOS0_ = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_ = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_ = comdat any

$_ZNK3jxl6AuxOut9DumpImageIfEEvPKcRKNS_6Image3IT_EE = comdat any

$_ZN3jxl14ConvertToFloatIfEENS_6Image3IfEERKNS1_IT_EE = comdat any

$_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_ = comdat any

$_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm = comdat any

$_ZNSt3__125__throw_bad_function_callEv = comdat any

$_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_18PassesDecoderState9InitForACEPS1_EUliiE_EEbS4_jjRKT_RKT0_PKc = comdat any

$_ZN3jxl18PassesDecoderState20EnsureBordersStorageEv = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallInitFuncEPvm = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallDataFuncEPvjm = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_ = comdat any

$_ZN3jxl17PassesSharedStateC2Ev = comdat any

$_ZN3jxl15DequantMatricesC2Ev = comdat any

$_ZN3jxl13QuantEncodingaSERKS0_ = comdat any

$_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

$_ZN3jxl8ACImageTIiEC2Emm = comdat any

$_ZN3jxl8ACImageTIiED2Ev = comdat any

$_ZN3jxl8ACImageTIiED0Ev = comdat any

$_ZNK3jxl8ACImageTIiE4TypeEv = comdat any

$_ZN3jxl8ACImageTIiE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIiE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIiE12PixelsPerRowEv = comdat any

$_ZN3jxl8ACImageTIiE8ZeroFillEv = comdat any

$_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm = comdat any

$_ZNK3jxl8ACImageTIiE7IsEmptyEv = comdat any

$_ZN3jxl18PassesDecoderStateD2Ev = comdat any

$_ZN3jxl17PassesSharedStateD2Ev = comdat any

$_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_ = comdat any

$_ZN3jxl19ModularFrameEncoderD2Ev = comdat any

$_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl13GroupDecCacheEEEvPvm = comdat any

$_ZN3jxl13GroupDecCacheD2Ev = comdat any

$_ZN3jxl18PassesDecoderState13EnsureStorageEm = comdat any

$_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE = comdat any

$_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEmRKf = comdat any

$_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN3jxl9BitWriterENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE8__appendEm = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

$_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = comdat any

$_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter = comdat any

$_ZTVN3jxl8ACImageTIiEE = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [66 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_adaptive_quantization.cc\00", align 1
@.str.2 = private unnamed_addr constant [51 x i8] c"x + acs.covered_blocks_x() <= quant_field->xsize()\00", align 1
@.str.3 = private unnamed_addr constant [51 x i8] c"y + acs.covered_blocks_y() <= quant_field->ysize()\00", align 1
@_ZN3jxlL43AdaptiveQuantizationMapHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)*] [void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* @_ZN3hwy13FunctionCacheIN3jxl5PlaneIfEEJfRKNS1_6Image3IfEERKNS1_15FrameDimensionsEfPNS1_10ThreadPoolEPS3_EE13ChooseAndCallIXadL_ZNS1_L43AdaptiveQuantizationMapHighwayDispatchTableEEEEES3_fS7_SA_fSC_SD_, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* null, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* null, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* null, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* @_ZN3jxl6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEE, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* @_ZN3jxl6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEE, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* null, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* @_ZN3jxl6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEE, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* null, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* null, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* null, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)* @_ZN3jxl8N_SCALAR12_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEE], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@.str.4 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [67 x i8] c"dec_state->output_encoding_info.Set(enc_state->shared.metadata->m)\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"opsin.ysize() % kBlockDim == 0\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"AQ loop\00", align 1
@.str.8 = private unnamed_addr constant [68 x i8] c"FinalizeFrameDecoding(&decoded, dec_state.get(), pool, false, true)\00", align 1
@_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\01\02\01\04\02\04\01\01\01\01\01\01\08\04\08\10\08\10 \10 ", comdat, align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\02\01\04\01\04\02\01\01\01\01\01\01\08\08\04\10\10\08  \10", comdat, align 16
@.str.9 = private unnamed_addr constant [18 x i8] c"AQ DiffPrecompute\00", align 1
@.str.10 = private unnamed_addr constant [58 x i8] c"../../third_party/libjxl/src/lib/jxl/base/data_parallel.h\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"begin <= end\00", align 1
@.str.12 = private unnamed_addr constant [45 x i8] c"../../third_party/libjxl/src/lib/jxl/image.h\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"xsize <= orig_xsize_\00", align 1
@.str.14 = private unnamed_addr constant [21 x i8] c"ysize <= orig_ysize_\00", align 1
@.str.17 = private unnamed_addr constant [23 x i8] c"SameSize(xyb_x, xyb_y)\00", align 1
@.str.18 = private unnamed_addr constant [50 x i8] c"DivCeil(xyb_x.xsize(), kBlockDim) == out->xsize()\00", align 1
@.str.19 = private unnamed_addr constant [50 x i8] c"DivCeil(xyb_x.ysize(), kBlockDim) == out->ysize()\00", align 1
@.str.20 = private unnamed_addr constant [71 x i8] c"enc_state->shared.frame_header.color_transform == ColorTransform::kXYB\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"ops\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"dec\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c".png\00", align 1
@_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [5 x i8*], [5 x i8*] }, align 8
@_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant [4 x i8*], align 8
@_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [16 x i8*] }, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.25 = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl22CustomTransferFunctionE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl8CustomxyE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.26 = private unnamed_addr constant [52 x i8] c"../../third_party/libjxl/src/lib/jxl/codec_in_out.h\00", align 1
@.str.27 = private unnamed_addr constant [32 x i8] c"metadata.size.Set(xsize, ysize)\00", align 1
@_ZTVN3jxl13ImageMetadataE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.28 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.str.29 = private unnamed_addr constant [37 x i8] c"comparator.SetReferenceImage(linear)\00", align 1
@.str.30 = private unnamed_addr constant [27 x i8] c"qf_higher / qf_lower < 253\00", align 1
@.str.34 = private unnamed_addr constant [49 x i8] c"comparator.CompareWith(linear, &diffmap, &score)\00", align 1
@.str.38 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/image_metadata.h\00", align 1
@.str.39 = private unnamed_addr constant [35 x i8] c"tone_mapping.intensity_target != 0\00", align 1
@.str.40 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.41 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1
@__const._ZNK3jxl6AuxOut9DumpImageIfEEvPKcRKNS_6Image3IT_EE.io = private unnamed_addr constant { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.80", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::CustomTransformData" }, { %"class.std::__1::unique_ptr.3", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.87", i64 }, %"class.std::__1::vector.251", i8, [7 x i8], i64 } { %"struct.jxl::SizeConstraints" { i32 -1431655766, i32 -1431655766, i64 -6148914691236517206 }, %"class.jxl::DecoderHints" { %"class.std::__1::vector.244" { %"class.std::__1::__vector_base.245" { %"struct.jxl::DecoderHints::KeyValue"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::DecoderHints::KeyValue"*), %"struct.jxl::DecoderHints::KeyValue"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::DecoderHints::KeyValue"*), %"class.std::__1::__compressed_pair.246" { %"struct.std::__1::__compressed_pair_elem.247" { %"struct.jxl::DecoderHints::KeyValue"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::DecoderHints::KeyValue"*) } } } } }, i32 -1431655766, float 0xFFFFFFFFE0000000, i64 -6148914691236517206, %"struct.jxl::Blobs" { %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.80", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::CustomTransformData" } { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.80", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }> <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"struct.jxl::BitDepth" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, i32 -1431655766, i8 -86, i8 -86, i8 -86, i8 -86, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::ToneMapping" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::vector.80" { %"class.std::__1::__vector_base.81" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"class.std::__1::__compressed_pair.82" { %"struct.std::__1::__compressed_pair_elem.83" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*) } } } }, %"struct.jxl::CustomTransformData" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"struct.jxl::OpsinInverseMatrix" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [15 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [55 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [210 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::AnimationHeader" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }>, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::CustomTransformData" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"struct.jxl::OpsinInverseMatrix" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [15 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [55 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [210 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }> }, { %"class.std::__1::unique_ptr.3", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.87", i64 } { %"class.std::__1::unique_ptr.3" { %"class.std::__1::__compressed_pair.4" { %"struct.std::__1::__compressed_pair_elem.5" { %"struct.jxl::jpeg::JPEGData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::jpeg::JPEGData"*) } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.75" { %"struct.std::__1::__compressed_pair_elem.76" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::ImageMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ImageMetadata"*), %"class.jxl::Image3" { [3 x %"class.jxl::Plane.1"] [%"class.jxl::Plane.1" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane.1" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane.1" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, %"class.std::__1::vector.87" { %"class.std::__1::__vector_base.88" { %"class.jxl::Plane.1"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane.1"*), %"class.jxl::Plane.1"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane.1"*), %"class.std::__1::__compressed_pair.89" { %"struct.std::__1::__compressed_pair_elem.90" { %"class.jxl::Plane.1"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane.1"*) } } } }, i64 -6148914691236517206 }, %"class.std::__1::vector.251" { %"class.std::__1::__vector_base.252" { %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.std::__1::__compressed_pair.253" { %"struct.std::__1::__compressed_pair_elem.254" { %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*) } } } }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, align 8
@.str.42 = private unnamed_addr constant [25 x i8] c"SameSize(plane0, plane1)\00", align 1
@.str.43 = private unnamed_addr constant [25 x i8] c"SameSize(plane0, plane2)\00", align 1
@.str.44 = private unnamed_addr constant [14 x i8] c"quant_heatmap\00", align 1
@.str.45 = private unnamed_addr constant [13 x i8] c"tile_heatmap\00", align 1
@.str.46 = private unnamed_addr constant [11 x i8] c"bt_diffmap\00", align 1
@.str.47 = private unnamed_addr constant [7 x i8] c"%s%05d\00", align 1
@_ZTVN3jxl24JxlButteraugliComparatorE = external unnamed_addr constant { [8 x i8*] }, align 8
@_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" { i8* (i8*)* null, void (i8*)* null, i8 1, %"class.std::type_info"* null }, comdat, align 8
@_ZN3jxlL14kStrategyOrderE = internal unnamed_addr constant [27 x i8] c"\00\01\01\01\02\03\04\04\05\05\06\06\01\01\01\01\01\01\07\08\08\09\0A\0A\0B\0C\0C", align 16
@_ZN3jxlL17kCoeffOrderOffsetE = internal unnamed_addr constant [40 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 10, i64 14, i64 18, i64 34, i64 50, i64 66, i64 68, i64 70, i64 72, i64 76, i64 80, i64 84, i64 92, i64 100, i64 108, i64 172, i64 236, i64 300, i64 332, i64 364, i64 396, i64 652, i64 908, i64 1164, i64 1292, i64 1420, i64 1548, i64 2572, i64 3596, i64 4620, i64 5132, i64 5644, i64 6156], align 16
@.str.48 = private unnamed_addr constant [15 x i8] c"Generate noise\00", align 1
@__const._ZN3jxl18PassesDecoderState9InitForACEPNS_10ThreadPoolE.weights = private unnamed_addr constant %"struct.jxl::WeightsSymmetric5" { [4 x float] [float 0xC00EB851E0000000, float 0xC00EB851E0000000, float 0xC00EB851E0000000, float 0xC00EB851E0000000], [4 x float] [float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000], [4 x float] [float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000], [4 x float] [float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000], [4 x float] [float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000], [4 x float] [float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000] }, align 4
@_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter = linkonce_odr hidden local_unnamed_addr constant [4 x i64] [i64 0, i64 2, i64 3, i64 6], comdat, align 16
@_ZN3jxl15DequantMatrices14required_size_E.const = private unnamed_addr constant [17 x i64] [i64 1, i64 1, i64 1, i64 1, i64 4, i64 16, i64 2, i64 4, i64 8, i64 1, i64 1, i64 64, i64 32, i64 256, i64 128, i64 1024, i64 512], align 16
@_ZN3jxl15DequantMatrices11kQuantTableE.const = private unnamed_addr constant [27 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14, i64 15, i64 16, i64 16], align 16
@.str.49 = private unnamed_addr constant [53 x i8] c"../../third_party/libjxl/src/lib/jxl/quant_weights.h\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"Compute()\00", align 1
@_ZN3jxl11BlockCtxMap14kDefaultCtxMapE = external local_unnamed_addr constant [39 x i8], align 16
@_ZTVN3jxl8ACImageTIiEE = linkonce_odr hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiED2Ev to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiED0Ev to i8*), i8* bitcast (i32 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE4TypeEv to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT"*, i64, i64, i64)* @_ZN3jxl8ACImageTIiE8PlaneRowEmmm to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT"*, i64, i64, i64)* @_ZNK3jxl8ACImageTIiE8PlaneRowEmmm to i8*), i8* bitcast (i64 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE12PixelsPerRowEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiE8ZeroFillEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*, i64)* @_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm to i8*), i8* bitcast (i1 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE7IsEmptyEv to i8*)] }, comdat, align 8
@_ZTVN3jxl11FrameHeaderE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.52 = private unnamed_addr constant [128 x i8] c"DecodeGroupForRoundtrip( enc_state->coeffs, group_index, dec_state.get(), &group_dec_caches[thread], thread, &decoded, nullptr)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl16AdjustQuantFieldERKNS_15AcStrategyImageERKNS_4RectEPNS_5PlaneIfEE(%"class.jxl::AcStrategyImage"* nocapture readonly dereferenceable(48), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Plane.1"* nocapture readonly) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %2, i64 0, i32 0, i32 4
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 2
  %7 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %20, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %0, i64 0, i32 0, i32 0, i32 4
  %15 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %2, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %17 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %2, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %2, i64 0, i32 0, i32 1
  %19 = load i64, i64* %16, align 8
  br label %21

20:                                               ; preds = %46, %3
  ret void

21:                                               ; preds = %52, %10
  %22 = phi i64 [ %19, %10 ], [ %47, %52 ]
  %23 = phi i64 [ %19, %10 ], [ %48, %52 ]
  %24 = phi i64 [ %5, %10 ], [ %53, %52 ]
  %25 = phi i64 [ 0, %10 ], [ %49, %52 ]
  %26 = load i64, i64* %11, align 8
  %27 = add i64 %26, %25
  %28 = load i64, i64* %12, align 8
  %29 = load i8*, i8** %13, align 8
  %30 = load i64, i64* %14, align 8
  %31 = mul i64 %30, %27
  %32 = getelementptr inbounds i8, i8* %29, i64 %31
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #5
  %36 = getelementptr inbounds i8, i8* %32, i64 %28
  %37 = load i8*, i8** %15, align 8
  %38 = mul i64 %24, %27
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #5
  %43 = bitcast i8* %39 to float*
  %44 = getelementptr inbounds float, float* %43, i64 %28
  %45 = icmp eq i64 %23, 0
  br i1 %45, label %46, label %54

46:                                               ; preds = %185, %21
  %47 = phi i64 [ %22, %21 ], [ %186, %185 ]
  %48 = phi i64 [ 0, %21 ], [ %186, %185 ]
  %49 = add nuw i64 %25, 1
  %50 = load i64, i64* %7, align 8
  %51 = icmp ult i64 %49, %50
  br i1 %51, label %52, label %20

52:                                               ; preds = %46
  %53 = load i64, i64* %4, align 8
  br label %21

54:                                               ; preds = %21, %185
  %55 = phi i64 [ %186, %185 ], [ %22, %21 ]
  %56 = phi i64 [ %187, %185 ], [ 0, %21 ]
  %57 = getelementptr inbounds i8, i8* %36, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = and i8 %58, 1
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %185, label %61

61:                                               ; preds = %54
  %62 = lshr i8 %58, 1
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i64
  %67 = add i64 %56, %66
  %68 = load i32, i32* %17, align 8
  %69 = zext i32 %68 to i64
  %70 = icmp ugt i64 %67, %69
  br i1 %70, label %71, label %74

71:                                               ; preds = %61
  %72 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 917, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i64 0, i64 0)) #5
  %73 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

74:                                               ; preds = %61
  %75 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %63
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i64
  %78 = add i64 %25, %77
  %79 = load i32, i32* %18, align 4
  %80 = zext i32 %79 to i64
  %81 = icmp ugt i64 %78, %80
  br i1 %81, label %82, label %85

82:                                               ; preds = %74
  %83 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.3, i64 0, i64 0)) #5
  %84 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

85:                                               ; preds = %74
  %86 = getelementptr inbounds float, float* %44, i64 %56
  %87 = load float, float* %86, align 4
  br label %106

88:                                               ; preds = %111
  %89 = icmp ugt i64 %66, 1
  %90 = select i1 %89, i64 %66, i64 1
  %91 = and i64 %90, 248
  %92 = add nsw i64 %91, -8
  %93 = lshr exact i64 %92, 3
  %94 = add nuw nsw i64 %93, 1
  %95 = icmp ult i64 %90, 8
  %96 = and i64 %90, 248
  %97 = insertelement <4 x float> undef, float %121, i32 0
  %98 = shufflevector <4 x float> %97, <4 x float> undef, <4 x i32> zeroinitializer
  %99 = insertelement <4 x float> undef, float %121, i32 0
  %100 = shufflevector <4 x float> %99, <4 x float> undef, <4 x i32> zeroinitializer
  %101 = and i64 %94, 3
  %102 = icmp ult i64 %92, 24
  %103 = sub nsw i64 %94, %101
  %104 = icmp eq i64 %101, 0
  %105 = icmp eq i64 %90, %96
  br label %124

106:                                              ; preds = %111, %85
  %107 = phi float [ %87, %85 ], [ %121, %111 ]
  %108 = phi i64 [ 0, %85 ], [ %112, %111 ]
  %109 = mul i64 %108, %6
  %110 = add i64 %109, %56
  br label %114

111:                                              ; preds = %114
  %112 = add nuw nsw i64 %108, 1
  %113 = icmp ult i64 %112, %77
  br i1 %113, label %106, label %88

114:                                              ; preds = %106, %114
  %115 = phi float [ %107, %106 ], [ %121, %114 ]
  %116 = phi i64 [ 0, %106 ], [ %122, %114 ]
  %117 = add i64 %110, %116
  %118 = getelementptr inbounds float, float* %44, i64 %117
  %119 = load float, float* %118, align 4
  %120 = fcmp olt float %119, %115
  %121 = select i1 %120, float %115, float %119
  %122 = add nuw nsw i64 %116, 1
  %123 = icmp ult i64 %122, %66
  br i1 %123, label %114, label %111

124:                                              ; preds = %176, %88
  %125 = phi i64 [ 0, %88 ], [ %177, %176 ]
  %126 = mul i64 %125, %6
  %127 = add i64 %126, %56
  br i1 %95, label %128, label %130

128:                                              ; preds = %173, %124
  %129 = phi i64 [ 0, %124 ], [ %96, %173 ]
  br label %179

130:                                              ; preds = %124
  br i1 %102, label %160, label %131

131:                                              ; preds = %130, %131
  %132 = phi i64 [ %157, %131 ], [ 0, %130 ]
  %133 = phi i64 [ %158, %131 ], [ %103, %130 ]
  %134 = add i64 %127, %132
  %135 = getelementptr inbounds float, float* %44, i64 %134
  %136 = bitcast float* %135 to <4 x float>*
  store <4 x float> %98, <4 x float>* %136, align 4
  %137 = getelementptr inbounds float, float* %135, i64 4
  %138 = bitcast float* %137 to <4 x float>*
  store <4 x float> %100, <4 x float>* %138, align 4
  %139 = or i64 %132, 8
  %140 = add i64 %127, %139
  %141 = getelementptr inbounds float, float* %44, i64 %140
  %142 = bitcast float* %141 to <4 x float>*
  store <4 x float> %98, <4 x float>* %142, align 4
  %143 = getelementptr inbounds float, float* %141, i64 4
  %144 = bitcast float* %143 to <4 x float>*
  store <4 x float> %100, <4 x float>* %144, align 4
  %145 = or i64 %132, 16
  %146 = add i64 %127, %145
  %147 = getelementptr inbounds float, float* %44, i64 %146
  %148 = bitcast float* %147 to <4 x float>*
  store <4 x float> %98, <4 x float>* %148, align 4
  %149 = getelementptr inbounds float, float* %147, i64 4
  %150 = bitcast float* %149 to <4 x float>*
  store <4 x float> %100, <4 x float>* %150, align 4
  %151 = or i64 %132, 24
  %152 = add i64 %127, %151
  %153 = getelementptr inbounds float, float* %44, i64 %152
  %154 = bitcast float* %153 to <4 x float>*
  store <4 x float> %98, <4 x float>* %154, align 4
  %155 = getelementptr inbounds float, float* %153, i64 4
  %156 = bitcast float* %155 to <4 x float>*
  store <4 x float> %100, <4 x float>* %156, align 4
  %157 = add i64 %132, 32
  %158 = add i64 %133, -4
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %131, !llvm.loop !2

160:                                              ; preds = %131, %130
  %161 = phi i64 [ 0, %130 ], [ %157, %131 ]
  br i1 %104, label %173, label %162

162:                                              ; preds = %160, %162
  %163 = phi i64 [ %170, %162 ], [ %161, %160 ]
  %164 = phi i64 [ %171, %162 ], [ %101, %160 ]
  %165 = add i64 %127, %163
  %166 = getelementptr inbounds float, float* %44, i64 %165
  %167 = bitcast float* %166 to <4 x float>*
  store <4 x float> %98, <4 x float>* %167, align 4
  %168 = getelementptr inbounds float, float* %166, i64 4
  %169 = bitcast float* %168 to <4 x float>*
  store <4 x float> %100, <4 x float>* %169, align 4
  %170 = add i64 %163, 8
  %171 = add i64 %164, -1
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %162, !llvm.loop !4

173:                                              ; preds = %162, %160
  br i1 %105, label %176, label %128

174:                                              ; preds = %176
  %175 = load i64, i64* %16, align 8
  br label %185

176:                                              ; preds = %179, %173
  %177 = add nuw nsw i64 %125, 1
  %178 = icmp ult i64 %177, %77
  br i1 %178, label %124, label %174

179:                                              ; preds = %128, %179
  %180 = phi i64 [ %183, %179 ], [ %129, %128 ]
  %181 = add i64 %127, %180
  %182 = getelementptr inbounds float, float* %44, i64 %181
  store float %121, float* %182, align 4
  %183 = add nuw nsw i64 %180, 1
  %184 = icmp ult i64 %183, %66
  br i1 %184, label %179, label %176, !llvm.loop !6

185:                                              ; preds = %54, %174
  %186 = phi i64 [ %55, %54 ], [ %175, %174 ]
  %187 = add nuw i64 %56, 1
  %188 = icmp ult i64 %187, %186
  br i1 %188, label %54, label %46
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3jxl14InitialQuantDCEf(float) local_unnamed_addr #0 {
  %2 = fmul float %0, 5.000000e-01
  %3 = fmul float %0, 0x3FD611A7A0000000
  %4 = tail call float @powf(float %3, float 0x3FE23D70A0000000) #5
  %5 = fmul float %4, 0x4007333340000000
  %6 = fcmp olt float %5, %0
  %7 = select i1 %6, float %5, float %0
  %8 = fcmp olt float %2, %7
  %9 = select i1 %8, float %7, float %2
  %10 = fdiv float 0x3FF1EB8520000000, %9
  %11 = fcmp ogt float %10, 5.000000e+01
  %12 = select i1 %11, float 5.000000e+01, float %10
  ret float %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl17InitialQuantFieldEfRKNS_6Image3IfEERKNS_15FrameDimensionsEPNS_10ThreadPoolEfPNS_5PlaneIfEE(%"class.jxl::Plane.1"* noalias sret, float, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::FrameDimensions"* dereferenceable(144), %"class.jxl::ThreadPool"*, float, %"class.jxl::Plane.1"*) local_unnamed_addr #0 {
  %8 = fdiv float 0x3FE947AE20000000, %1
  %9 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %10 = and i32 %9, 2225
  %11 = tail call i32 @llvm.cttz.i32(i32 %10, i1 true) #5, !range !8
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [12 x void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)*], [12 x void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)*]* @_ZN3jxlL43AdaptiveQuantizationMapHighwayDispatchTableE, i64 0, i64 %12
  %14 = load void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)*, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)** %13, align 8
  %15 = fmul float %8, %5
  tail call void %14(%"class.jxl::Plane.1"* sret %0, float %1, %"class.jxl::Image3"* dereferenceable(96) %2, %"struct.jxl::FrameDimensions"* dereferenceable(144) %3, float %15, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.1"* %6) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl17FindBestQuantizerEPKNS_11ImageBundleERKNS_6Image3IfEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEd(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::PassesEncoderState"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*, double) local_unnamed_addr #0 {
  %7 = alloca %"class.jxl::Image3", align 8
  %8 = alloca %"class.jxl::Image3", align 8
  %9 = alloca %"class.jxl::Image3", align 8
  %10 = alloca [200 x i8], align 16
  %11 = alloca %"class.jxl::Plane.1", align 8
  %12 = alloca %"class.std::__1::basic_string", align 8
  %13 = alloca %"class.std::__1::basic_string", align 8
  %14 = alloca %"class.std::__1::basic_string", align 8
  %15 = alloca %"struct.jxl::ButteraugliParams", align 4
  %16 = alloca %"class.jxl::JxlButteraugliComparator", align 8
  %17 = alloca %"class.jxl::Rect", align 8
  %18 = alloca %"class.jxl::Plane.1", align 8
  %19 = alloca %"class.jxl::Plane.1", align 8
  %20 = alloca %"class.jxl::ImageBundle", align 8
  %21 = alloca float, align 4
  %22 = alloca %"class.jxl::Plane.1", align 8
  %23 = alloca %"class.jxl::Plane.1", align 8
  %24 = alloca %"class.jxl::Plane.1", align 8
  %25 = alloca %"class.std::__1::basic_string", align 8
  %26 = alloca %"class.std::__1::basic_string", align 8
  %27 = alloca [8 x double], align 16
  %28 = alloca [8 x double], align 16
  %29 = alloca [32 x i8], align 16
  %30 = alloca %"class.jxl::Rect", align 8
  %31 = alloca [3 x float], align 4
  %32 = alloca %"class.std::__1::basic_string", align 8
  %33 = alloca %"class.std::__1::basic_string", align 8
  %34 = alloca %"class.jxl::ImageBundle", align 8
  %35 = alloca %"class.std::__1::basic_string", align 8
  %36 = alloca %"class.std::__1::basic_string", align 8
  %37 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 6, i32 5
  %38 = load i8, i8* %37, align 4, !range !9
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %450, label %40

40:                                               ; preds = %6
  %41 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 1, i32 5
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %40
  %45 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 836, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.20, i64 0, i64 0)) #5
  %46 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 6
  %50 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 1
  %51 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 6, i32 0
  %52 = load float, float* %51, align 8
  %53 = fdiv float 0x3FB99999A0000000, %52
  %54 = tail call float @sqrtf(float %53) #5
  %55 = fmul float %54, 1.600000e+01
  %56 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 3
  %57 = bitcast %"class.jxl::Rect"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %57) #5
  %58 = bitcast %"class.jxl::Plane.1"* %50 to <2 x i32>*
  %59 = load <2 x i32>, <2 x i32>* %58, align 8
  %60 = zext <2 x i32> %59 to <2 x i64>
  %61 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %30, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 0, i64 16, i1 false) #5
  %62 = bitcast i64* %61 to <2 x i64>*
  store <2 x i64> %60, <2 x i64>* %62, align 8
  call void @_ZN3jxl16AdjustQuantFieldERKNS_15AcStrategyImageERKNS_4RectEPNS_5PlaneIfEE(%"class.jxl::AcStrategyImage"* dereferenceable(48) %56, %"class.jxl::Rect"* nonnull dereferenceable(32) %30, %"class.jxl::Plane.1"* %50) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %57) #5
  %63 = bitcast [3 x float]* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %63) #5
  %64 = getelementptr inbounds [3 x float], [3 x float]* %31, i64 0, i64 0
  %65 = getelementptr inbounds [3 x float], [3 x float]* %31, i64 0, i64 1
  %66 = getelementptr inbounds [3 x float], [3 x float]* %31, i64 0, i64 2
  %67 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 6, i32 6, i64 0
  %68 = load float, float* %67, align 8
  %69 = fdiv float 1.000000e+00, %68
  store float %69, float* %64, align 4
  %70 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 6, i32 6, i64 1
  %71 = load float, float* %70, align 4
  %72 = fdiv float 1.000000e+00, %71
  store float %72, float* %65, align 4
  %73 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 6, i32 6, i64 2
  %74 = load float, float* %73, align 8
  %75 = fdiv float 1.000000e+00, %74
  store float %75, float* %66, align 4
  %76 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 6, i32 9
  %77 = load i32, i32* %76, align 8
  %78 = icmp slt i32 %77, 0
  tail call void @_ZN3jxl9Quantizer13SetQuantFieldEfRKNS_5PlaneIfEEPNS1_IiEE(%"class.jxl::Quantizer"* %48, float %55, %"class.jxl::Plane.1"* dereferenceable(32) %50, %"class.jxl::Plane.132"* %49) #5
  br i1 %78, label %449, label %79

79:                                               ; preds = %47
  %80 = icmp eq %"struct.jxl::AuxOut"* %4, null
  %81 = bitcast %"class.std::__1::basic_string"* %32 to i8*
  %82 = bitcast %"class.std::__1::basic_string"* %33 to i8*
  %83 = getelementptr inbounds [32 x i8], [32 x i8]* %29, i64 0, i64 0
  %84 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %86 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %87 = bitcast %"class.std::__1::basic_string"* %33 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %88 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %87, i64 0, i32 1, i32 0
  %89 = bitcast %"class.std::__1::basic_string"* %32 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %89, i64 0, i32 1, i32 0
  %91 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = bitcast %"class.jxl::ImageBundle"* %34 to i8*
  %93 = bitcast %"class.std::__1::basic_string"* %35 to i8*
  %94 = bitcast %"class.std::__1::basic_string"* %36 to i8*
  %95 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %97 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %98 = bitcast %"class.std::__1::basic_string"* %36 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %99 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %98, i64 0, i32 1, i32 0
  %100 = bitcast %"class.std::__1::basic_string"* %35 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %101 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %100, i64 0, i32 1, i32 0
  %102 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 0, i32 10
  %104 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 2, i32 9
  %105 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %106 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 3, i32 0, i32 0, i32 4
  %107 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 2, i32 8
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 0, i32 0, i32 0, i32 0, i32 0
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %110 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 0, i32 12, i32 0, i32 0
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 0, i32 12, i32 0, i32 1
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %113 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 0, i32 10, i32 0, i64 0, i32 0, i32 4
  %114 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %115 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 1, i32 0, i32 4
  %117 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %118 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = getelementptr inbounds [3 x float], [3 x float]* %31, i64 0, i64 0
  %120 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %122 = getelementptr inbounds [3 x float], [3 x float]* %31, i64 0, i64 1
  %123 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %124 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %125 = getelementptr inbounds [3 x float], [3 x float]* %31, i64 0, i64 2
  br label %126

126:                                              ; preds = %210, %79
  %127 = phi i64 [ %211, %210 ], [ 0, %79 ]
  br i1 %80, label %201, label %128

128:                                              ; preds = %126
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %81) #5
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %82) #5
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %83) #5, !noalias !10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %83, i8 0, i64 32, i1 false) #5, !noalias !10
  %129 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %83, i64 32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0), i64 %127) #5, !noalias !10
  %130 = call i64 @strlen(i8* nonnull %83) #5, !noalias !10
  %131 = icmp ugt i64 %130, -17
  br i1 %131, label %132, label %134

132:                                              ; preds = %128
  %133 = bitcast %"class.std::__1::basic_string"* %33 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %133) #24
  unreachable

134:                                              ; preds = %128
  %135 = icmp ult i64 %130, 23
  br i1 %135, label %141, label %136

136:                                              ; preds = %134
  %137 = add nuw i64 %130, 16
  %138 = and i64 %137, -16
  %139 = call i8* @_Znwm(i64 %138) #25
  store i8* %139, i8** %84, align 8, !alias.scope !10
  %140 = or i64 %138, -9223372036854775808
  store i64 %140, i64* %85, align 8, !alias.scope !10
  store i64 %130, i64* %86, align 8, !alias.scope !10
  br label %144

141:                                              ; preds = %134
  %142 = trunc i64 %130 to i8
  store i8 %142, i8* %88, align 1, !alias.scope !10
  %143 = icmp eq i64 %130, 0
  br i1 %143, label %146, label %144

144:                                              ; preds = %141, %136
  %145 = phi i8* [ %139, %136 ], [ %82, %141 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %145, i8* nonnull align 16 %83, i64 %130, i1 false) #5
  br label %146

146:                                              ; preds = %144, %141
  %147 = phi i8* [ %82, %141 ], [ %145, %144 ]
  %148 = getelementptr inbounds i8, i8* %147, i64 %130
  store i8 0, i8* %148, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %83) #5, !noalias !10
  %149 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"* nonnull %33, i64 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i64 0, i64 0)) #5, !noalias !13
  %150 = bitcast %"class.std::__1::basic_string"* %149 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %81, i8* align 8 %150, i64 24, i1 false) #5
  call void @llvm.memset.p0i8.i64(i8* align 8 %150, i8 0, i64 24, i1 false) #5, !noalias !13
  %151 = load i8, i8* %90, align 1
  %152 = icmp slt i8 %151, 0
  %153 = load i8*, i8** %91, align 8
  %154 = select i1 %152, i8* %153, i8* %81
  call void @_ZNK3jxl6AuxOut12DumpXybImageIfEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"* nonnull %4, i8* %154, %"class.jxl::Image3"* dereferenceable(96) %1) #5
  %155 = load i8, i8* %90, align 1
  %156 = icmp slt i8 %155, 0
  br i1 %156, label %157, label %159

157:                                              ; preds = %146
  %158 = load i8*, i8** %91, align 8
  call void @_ZdlPv(i8* %158) #25
  br label %159

159:                                              ; preds = %157, %146
  %160 = load i8, i8* %88, align 1
  %161 = icmp slt i8 %160, 0
  br i1 %161, label %162, label %164

162:                                              ; preds = %159
  %163 = load i8*, i8** %84, align 8
  call void @_ZdlPv(i8* %163) #25
  br label %164

164:                                              ; preds = %159, %162
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %82) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %81) #5
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %92) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 -86, i64 368, i1 false) #5
  call void @_ZN3jxl14RoundtripImageERKNS_6Image3IfEEPNS_18PassesEncoderStateEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* nonnull sret %34, %"class.jxl::Image3"* dereferenceable(96) %1, %"struct.jxl::PassesEncoderState"* %2, %"class.jxl::ThreadPool"* %3) #5
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %93) #5
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %94) #5
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %83) #5, !noalias !16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %83, i8 0, i64 32, i1 false) #5, !noalias !16
  %165 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %83, i64 32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0), i64 %127) #5, !noalias !16
  %166 = call i64 @strlen(i8* nonnull %83) #5, !noalias !16
  %167 = icmp ugt i64 %166, -17
  br i1 %167, label %168, label %170

168:                                              ; preds = %164
  %169 = bitcast %"class.std::__1::basic_string"* %36 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %169) #24
  unreachable

170:                                              ; preds = %164
  %171 = icmp ult i64 %166, 23
  br i1 %171, label %177, label %172

172:                                              ; preds = %170
  %173 = add nuw i64 %166, 16
  %174 = and i64 %173, -16
  %175 = call i8* @_Znwm(i64 %174) #25
  store i8* %175, i8** %95, align 8, !alias.scope !16
  %176 = or i64 %174, -9223372036854775808
  store i64 %176, i64* %96, align 8, !alias.scope !16
  store i64 %166, i64* %97, align 8, !alias.scope !16
  br label %180

177:                                              ; preds = %170
  %178 = trunc i64 %166 to i8
  store i8 %178, i8* %99, align 1, !alias.scope !16
  %179 = icmp eq i64 %166, 0
  br i1 %179, label %182, label %180

180:                                              ; preds = %177, %172
  %181 = phi i8* [ %175, %172 ], [ %94, %177 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %181, i8* nonnull align 16 %83, i64 %166, i1 false) #5
  br label %182

182:                                              ; preds = %180, %177
  %183 = phi i8* [ %94, %177 ], [ %181, %180 ]
  %184 = getelementptr inbounds i8, i8* %183, i64 %166
  store i8 0, i8* %184, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %83) #5, !noalias !16
  %185 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"* nonnull %36, i64 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i64 0, i64 0)) #5, !noalias !19
  %186 = bitcast %"class.std::__1::basic_string"* %185 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %93, i8* align 8 %186, i64 24, i1 false) #5
  call void @llvm.memset.p0i8.i64(i8* align 8 %186, i8 0, i64 24, i1 false) #5, !noalias !19
  %187 = load i8, i8* %101, align 1
  %188 = icmp slt i8 %187, 0
  %189 = load i8*, i8** %102, align 8
  %190 = select i1 %188, i8* %189, i8* %93
  call void @_ZNK3jxl6AuxOut12DumpXybImageIfEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"* nonnull %4, i8* %190, %"class.jxl::Image3"* dereferenceable(96) %103) #5
  %191 = load i8, i8* %101, align 1
  %192 = icmp slt i8 %191, 0
  br i1 %192, label %193, label %195

193:                                              ; preds = %182
  %194 = load i8*, i8** %102, align 8
  call void @_ZdlPv(i8* %194) #25
  br label %195

195:                                              ; preds = %193, %182
  %196 = load i8, i8* %99, align 1
  %197 = icmp slt i8 %196, 0
  br i1 %197, label %198, label %200

198:                                              ; preds = %195
  %199 = load i8*, i8** %95, align 8
  call void @_ZdlPv(i8* %199) #25
  br label %200

200:                                              ; preds = %198, %195
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %94) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %93) #5
  br label %202

201:                                              ; preds = %126
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %92) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 -86, i64 368, i1 false) #5
  call void @_ZN3jxl14RoundtripImageERKNS_6Image3IfEEPNS_18PassesEncoderStateEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* nonnull sret %34, %"class.jxl::Image3"* dereferenceable(96) %1, %"struct.jxl::PassesEncoderState"* %2, %"class.jxl::ThreadPool"* %3) #5
  br label %202

202:                                              ; preds = %201, %200
  %203 = load i64, i64* %104, align 8
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %210, label %205

205:                                              ; preds = %202
  %206 = load i64, i64* %107, align 8
  %207 = load float, float* %119, align 4
  %208 = load float, float* %122, align 4
  %209 = load float, float* %125, align 4
  br label %215

210:                                              ; preds = %233, %202
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %34) #5
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %92) #5
  %211 = add nuw nsw i64 %127, 1
  %212 = load i32, i32* %76, align 8
  %213 = sext i32 %212 to i64
  %214 = icmp slt i64 %127, %213
  call void @_ZN3jxl9Quantizer13SetQuantFieldEfRKNS_5PlaneIfEEPNS1_IiEE(%"class.jxl::Quantizer"* %48, float %55, %"class.jxl::Plane.1"* dereferenceable(32) %50, %"class.jxl::Plane.132"* %49) #5
  br i1 %214, label %126, label %449

215:                                              ; preds = %233, %205
  %216 = phi i64 [ %234, %233 ], [ %203, %205 ]
  %217 = phi i64 [ %235, %233 ], [ %206, %205 ]
  %218 = phi i64 [ %236, %233 ], [ %206, %205 ]
  %219 = phi i64 [ %237, %233 ], [ %206, %205 ]
  %220 = phi i64 [ %238, %233 ], [ 0, %205 ]
  %221 = load i8*, i8** %105, align 8
  %222 = load i64, i64* %106, align 8
  %223 = mul i64 %222, %220
  %224 = getelementptr inbounds i8, i8* %221, i64 %223
  %225 = ptrtoint i8* %224 to i64
  %226 = and i64 %225, 63
  %227 = icmp eq i64 %226, 0
  call void @llvm.assume(i1 %227) #5
  %228 = icmp eq i64 %219, 0
  br i1 %228, label %233, label %229

229:                                              ; preds = %215
  %230 = shl i64 %220, 3
  br label %240

231:                                              ; preds = %444
  %232 = load i64, i64* %104, align 8
  br label %233

233:                                              ; preds = %231, %215
  %234 = phi i64 [ %216, %215 ], [ %232, %231 ]
  %235 = phi i64 [ %217, %215 ], [ %445, %231 ]
  %236 = phi i64 [ %218, %215 ], [ %446, %231 ]
  %237 = phi i64 [ 0, %215 ], [ %446, %231 ]
  %238 = add nuw i64 %220, 1
  %239 = icmp ult i64 %238, %234
  br i1 %239, label %215, label %210

240:                                              ; preds = %444, %229
  %241 = phi i64 [ %217, %229 ], [ %445, %444 ]
  %242 = phi i64 [ %218, %229 ], [ %446, %444 ]
  %243 = phi i64 [ 0, %229 ], [ %447, %444 ]
  %244 = getelementptr inbounds i8, i8* %224, i64 %243
  %245 = load i8, i8* %244, align 1
  %246 = and i8 %245, 1
  %247 = icmp eq i8 %246, 0
  br i1 %247, label %444, label %248

248:                                              ; preds = %240
  %249 = lshr i8 %245, 1
  %250 = zext i8 %249 to i64
  %251 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %250
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i64
  %254 = add i64 %220, %253
  %255 = shl i64 %254, 3
  %256 = icmp ult i64 %230, %255
  %257 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %108, align 8
  %258 = icmp eq %"struct.jxl::jpeg::JPEGData"* %257, null
  %259 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %257, i64 0, i32 2
  %260 = load i32, i32* %109, align 4
  %261 = zext i32 %260 to i64
  %262 = icmp ne i32 %260, 0
  %263 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %110, align 8
  %264 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %111, align 8
  %265 = icmp eq %"class.jxl::Plane.1"* %263, %264
  %266 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %263, i64 0, i32 0, i32 1
  %267 = load i64, i64* %112, align 8
  %268 = load i64, i64* %113, align 8
  %269 = shl i64 %243, 3
  %270 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %250
  %271 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %257, i64 0, i32 1
  %272 = load i32, i32* %114, align 8
  %273 = zext i32 %272 to i64
  %274 = icmp ne i32 %272, 0
  %275 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %263, i64 0, i32 0, i32 0
  %276 = or i1 %262, %265
  %277 = or i1 %265, %274
  br i1 %256, label %301, label %310

278:                                              ; preds = %1632
  %279 = load i8, i8* %270, align 1
  %280 = zext i8 %279 to i64
  %281 = add i64 %243, %280
  %282 = icmp ult i64 %243, %281
  %283 = and i64 %280, 248
  %284 = add nsw i64 %283, -8
  %285 = lshr exact i64 %284, 3
  %286 = add nuw nsw i64 %285, 1
  %287 = lshr i64 786431, %250
  %288 = and i64 %287, 1
  %289 = icmp eq i64 %288, 0
  %290 = and i64 %280, 248
  %291 = add i64 %243, %290
  %292 = insertelement <4 x float> undef, float %1638, i32 0
  %293 = shufflevector <4 x float> %292, <4 x float> undef, <4 x i32> zeroinitializer
  %294 = insertelement <4 x float> undef, float %1638, i32 0
  %295 = shufflevector <4 x float> %294, <4 x float> undef, <4 x i32> zeroinitializer
  %296 = and i64 %286, 1
  %297 = icmp eq i64 %284, 0
  %298 = sub nuw nsw i64 %286, %296
  %299 = icmp eq i64 %296, 0
  %300 = icmp eq i64 %290, %280
  br label %376

301:                                              ; preds = %248
  %302 = load i8*, i8** %117, align 8
  %303 = ptrtoint i8* %302 to i64
  %304 = and i64 %303, 63
  %305 = icmp eq i64 %304, 0
  %306 = load i8*, i8** %118, align 8
  %307 = ptrtoint i8* %306 to i64
  %308 = and i64 %307, 63
  %309 = icmp eq i64 %308, 0
  br label %312

310:                                              ; preds = %370, %248
  %311 = phi float [ 0.000000e+00, %248 ], [ %371, %370 ]
  br i1 %256, label %1488, label %1559

312:                                              ; preds = %370, %301
  %313 = phi float [ 0.000000e+00, %301 ], [ %371, %370 ]
  %314 = phi i64 [ %230, %301 ], [ %372, %370 ]
  br i1 %258, label %318, label %315

315:                                              ; preds = %312
  %316 = load i32, i32* %259, align 4
  %317 = sext i32 %316 to i64
  br label %322

318:                                              ; preds = %312
  br i1 %276, label %322, label %319

319:                                              ; preds = %318
  %320 = load i32, i32* %266, align 4
  %321 = zext i32 %320 to i64
  br label %322

322:                                              ; preds = %319, %318, %315
  %323 = phi i64 [ %317, %315 ], [ %321, %319 ], [ %261, %318 ]
  %324 = icmp ult i64 %314, %323
  br i1 %324, label %325, label %370

325:                                              ; preds = %322
  %326 = mul i64 %314, %267
  call void @llvm.assume(i1 %305) #5
  %327 = getelementptr inbounds i8, i8* %302, i64 %326
  %328 = ptrtoint i8* %327 to i64
  %329 = and i64 %328, 63
  %330 = icmp eq i64 %329, 0
  call void @llvm.assume(i1 %330) #5
  %331 = bitcast i8* %327 to float*
  %332 = mul i64 %314, %268
  call void @llvm.assume(i1 %309) #5
  %333 = getelementptr inbounds i8, i8* %306, i64 %332
  %334 = ptrtoint i8* %333 to i64
  %335 = and i64 %334, 63
  %336 = icmp eq i64 %335, 0
  call void @llvm.assume(i1 %336) #5
  %337 = bitcast i8* %333 to float*
  %338 = load i8, i8* %270, align 1
  %339 = zext i8 %338 to i64
  %340 = add i64 %243, %339
  %341 = shl i64 %340, 3
  %342 = icmp ult i64 %269, %341
  br i1 %342, label %343, label %370

343:                                              ; preds = %325, %366
  %344 = phi float [ %367, %366 ], [ %313, %325 ]
  %345 = phi i64 [ %368, %366 ], [ %269, %325 ]
  br i1 %258, label %349, label %346

346:                                              ; preds = %343
  %347 = load i32, i32* %271, align 8
  %348 = sext i32 %347 to i64
  br label %353

349:                                              ; preds = %343
  br i1 %277, label %353, label %350

350:                                              ; preds = %349
  %351 = load i32, i32* %275, align 8
  %352 = zext i32 %351 to i64
  br label %353

353:                                              ; preds = %350, %349, %346
  %354 = phi i64 [ %348, %346 ], [ %352, %350 ], [ %273, %349 ]
  %355 = icmp ult i64 %345, %354
  br i1 %355, label %356, label %366

356:                                              ; preds = %353
  %357 = getelementptr inbounds float, float* %331, i64 %345
  %358 = load float, float* %357, align 4
  %359 = getelementptr inbounds float, float* %337, i64 %345
  %360 = load float, float* %359, align 4
  %361 = fsub float %358, %360
  %362 = call float @llvm.fabs.f32(float %361) #5
  %363 = fmul float %207, %362
  %364 = fcmp olt float %363, %344
  %365 = select i1 %364, float %344, float %363
  br label %366

366:                                              ; preds = %356, %353
  %367 = phi float [ %344, %353 ], [ %365, %356 ]
  %368 = add nuw i64 %345, 1
  %369 = icmp eq i64 %368, %341
  br i1 %369, label %370, label %343

370:                                              ; preds = %366, %325, %322
  %371 = phi float [ %313, %322 ], [ %313, %325 ], [ %367, %366 ]
  %372 = add nuw i64 %314, 1
  %373 = icmp eq i64 %372, %255
  br i1 %373, label %310, label %312

374:                                              ; preds = %434
  %375 = load i64, i64* %107, align 8
  br label %444

376:                                              ; preds = %434, %278
  %377 = phi i64 [ %220, %278 ], [ %435, %434 ]
  %378 = load i8*, i8** %115, align 8
  %379 = load i64, i64* %116, align 8
  %380 = mul i64 %379, %377
  %381 = getelementptr inbounds i8, i8* %378, i64 %380
  %382 = ptrtoint i8* %381 to i64
  %383 = and i64 %382, 63
  %384 = icmp eq i64 %383, 0
  call void @llvm.assume(i1 %384) #5
  %385 = bitcast i8* %381 to float*
  br i1 %282, label %386, label %434

386:                                              ; preds = %376
  br i1 %289, label %387, label %432

387:                                              ; preds = %386
  br i1 %297, label %417, label %388

388:                                              ; preds = %387, %388
  %389 = phi i64 [ %414, %388 ], [ 0, %387 ]
  %390 = phi i64 [ %415, %388 ], [ %298, %387 ]
  %391 = add i64 %243, %389
  %392 = getelementptr inbounds float, float* %385, i64 %391
  %393 = bitcast float* %392 to <4 x float>*
  %394 = load <4 x float>, <4 x float>* %393, align 4
  %395 = getelementptr inbounds float, float* %392, i64 4
  %396 = bitcast float* %395 to <4 x float>*
  %397 = load <4 x float>, <4 x float>* %396, align 4
  %398 = fmul <4 x float> %293, %394
  %399 = fmul <4 x float> %295, %397
  %400 = bitcast float* %392 to <4 x float>*
  store <4 x float> %398, <4 x float>* %400, align 4
  %401 = bitcast float* %395 to <4 x float>*
  store <4 x float> %399, <4 x float>* %401, align 4
  %402 = or i64 %389, 8
  %403 = add i64 %243, %402
  %404 = getelementptr inbounds float, float* %385, i64 %403
  %405 = bitcast float* %404 to <4 x float>*
  %406 = load <4 x float>, <4 x float>* %405, align 4
  %407 = getelementptr inbounds float, float* %404, i64 4
  %408 = bitcast float* %407 to <4 x float>*
  %409 = load <4 x float>, <4 x float>* %408, align 4
  %410 = fmul <4 x float> %293, %406
  %411 = fmul <4 x float> %295, %409
  %412 = bitcast float* %404 to <4 x float>*
  store <4 x float> %410, <4 x float>* %412, align 4
  %413 = bitcast float* %407 to <4 x float>*
  store <4 x float> %411, <4 x float>* %413, align 4
  %414 = add i64 %389, 16
  %415 = add i64 %390, -2
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %417, label %388, !llvm.loop !22

417:                                              ; preds = %388, %387
  %418 = phi i64 [ 0, %387 ], [ %414, %388 ]
  br i1 %299, label %431, label %419

419:                                              ; preds = %417
  %420 = add i64 %243, %418
  %421 = getelementptr inbounds float, float* %385, i64 %420
  %422 = bitcast float* %421 to <4 x float>*
  %423 = load <4 x float>, <4 x float>* %422, align 4
  %424 = getelementptr inbounds float, float* %421, i64 4
  %425 = bitcast float* %424 to <4 x float>*
  %426 = load <4 x float>, <4 x float>* %425, align 4
  %427 = fmul <4 x float> %293, %423
  %428 = fmul <4 x float> %295, %426
  %429 = bitcast float* %421 to <4 x float>*
  store <4 x float> %427, <4 x float>* %429, align 4
  %430 = bitcast float* %424 to <4 x float>*
  store <4 x float> %428, <4 x float>* %430, align 4
  br label %431

431:                                              ; preds = %417, %419
  br i1 %300, label %434, label %432

432:                                              ; preds = %386, %431
  %433 = phi i64 [ %243, %386 ], [ %291, %431 ]
  br label %437

434:                                              ; preds = %437, %431, %376
  %435 = add nuw i64 %377, 1
  %436 = icmp eq i64 %435, %254
  br i1 %436, label %374, label %376

437:                                              ; preds = %432, %437
  %438 = phi i64 [ %442, %437 ], [ %433, %432 ]
  %439 = getelementptr inbounds float, float* %385, i64 %438
  %440 = load float, float* %439, align 4
  %441 = fmul float %1638, %440
  store float %441, float* %439, align 4
  %442 = add nuw i64 %438, 1
  %443 = icmp eq i64 %442, %281
  br i1 %443, label %434, label %437, !llvm.loop !23

444:                                              ; preds = %374, %1632, %240
  %445 = phi i64 [ %241, %240 ], [ %375, %374 ], [ %241, %1632 ]
  %446 = phi i64 [ %242, %240 ], [ %375, %374 ], [ %241, %1632 ]
  %447 = add nuw i64 %243, 1
  %448 = icmp ult i64 %447, %446
  br i1 %448, label %240, label %231

449:                                              ; preds = %210, %47
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %63) #5
  br label %1487

450:                                              ; preds = %6
  %451 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 6, i32 7
  %452 = load i32, i32* %451, align 4
  %453 = icmp slt i32 %452, 3
  br i1 %453, label %454, label %1487

454:                                              ; preds = %450
  %455 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 5
  %456 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 6
  %457 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 1
  %458 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 6, i32 0
  %459 = load float, float* %458, align 8
  %460 = bitcast %"struct.jxl::ButteraugliParams"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %460) #5
  %461 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 6, i32 36
  %462 = bitcast %"struct.jxl::ButteraugliParams"* %461 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %460, i8* align 4 %462, i64 16, i1 false) #5
  %463 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %464 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %463, align 8
  %465 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %464, i64 0, i32 14, i32 3
  %466 = load float, float* %465, align 4
  %467 = fcmp une float %466, 0.000000e+00
  br i1 %467, label %471, label %468

468:                                              ; preds = %454
  %469 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.38, i64 0, i64 0), i32 250, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.39, i64 0, i64 0)) #5
  %470 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

471:                                              ; preds = %454
  %472 = getelementptr inbounds %"struct.jxl::ButteraugliParams", %"struct.jxl::ButteraugliParams"* %15, i64 0, i32 2
  %473 = fadd float %466, -2.550000e+02
  %474 = tail call float @llvm.fabs.f32(float %473) #5
  %475 = fpext float %474 to double
  %476 = fcmp olt double %475, 1.000000e-03
  %477 = select i1 %476, float 8.000000e+01, float %466
  store float %477, float* %472, align 4
  %478 = bitcast %"class.jxl::JxlButteraugliComparator"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %478) #5
  %479 = getelementptr inbounds %"class.jxl::JxlButteraugliComparator", %"class.jxl::JxlButteraugliComparator"* %16, i64 0, i32 0, i32 0
  store i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**), i32 (...)*** %479, align 8
  %480 = getelementptr inbounds %"class.jxl::JxlButteraugliComparator", %"class.jxl::JxlButteraugliComparator"* %16, i64 0, i32 1, i32 0
  store float 0xFFFFFFFFE0000000, float* %480, align 8
  %481 = getelementptr inbounds %"class.jxl::JxlButteraugliComparator", %"class.jxl::JxlButteraugliComparator"* %16, i64 0, i32 1, i32 1
  store float 0xFFFFFFFFE0000000, float* %481, align 4
  %482 = getelementptr inbounds %"class.jxl::JxlButteraugliComparator", %"class.jxl::JxlButteraugliComparator"* %16, i64 0, i32 1, i32 2
  store float 0xFFFFFFFFE0000000, float* %482, align 8
  %483 = getelementptr inbounds %"class.jxl::JxlButteraugliComparator", %"class.jxl::JxlButteraugliComparator"* %16, i64 0, i32 1, i32 3
  %484 = getelementptr inbounds %"class.jxl::JxlButteraugliComparator", %"class.jxl::JxlButteraugliComparator"* %16, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %483, i8 -86, i64 28, i1 false) #5
  call void @_ZN3jxl24JxlButteraugliComparatorC1ERKNS_17ButteraugliParamsE(%"class.jxl::JxlButteraugliComparator"* nonnull %16, %"struct.jxl::ButteraugliParams"* nonnull dereferenceable(16) %15) #5
  %485 = call i32 @_ZN3jxl24JxlButteraugliComparator17SetReferenceImageERKNS_11ImageBundleE(%"class.jxl::JxlButteraugliComparator"* nonnull %16, %"class.jxl::ImageBundle"* dereferenceable(368) %0) #5
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %490, label %487

487:                                              ; preds = %471
  %488 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.29, i64 0, i64 0)) #5
  %489 = call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

490:                                              ; preds = %471
  %491 = call float @_ZNK3jxl24JxlButteraugliComparator16GoodQualityScoreEv(%"class.jxl::JxlButteraugliComparator"* nonnull %16) #5
  %492 = call float @_ZNK3jxl24JxlButteraugliComparator15BadQualityScoreEv(%"class.jxl::JxlButteraugliComparator"* nonnull %16) #5
  %493 = fcmp olt float %491, %492
  %494 = fmul float %459, 5.000000e-01
  %495 = fmul float %459, 0x3FD611A7A0000000
  %496 = call float @powf(float %495, float 0x3FE23D70A0000000) #5
  %497 = fmul float %496, 0x4007333340000000
  %498 = fcmp olt float %497, %459
  %499 = select i1 %498, float %497, float %459
  %500 = fcmp olt float %494, %499
  %501 = select i1 %500, float %499, float %494
  %502 = fdiv float 0x3FF1EB8520000000, %501
  %503 = fcmp ogt float %502, 5.000000e+01
  %504 = select i1 %503, float 5.000000e+01, float %502
  %505 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 3
  %506 = bitcast %"class.jxl::Rect"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %506) #5
  %507 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %457, i64 0, i32 0, i32 0
  %508 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 1, i32 0, i32 1
  %509 = bitcast %"class.jxl::Plane.1"* %457 to <2 x i32>*
  %510 = load <2 x i32>, <2 x i32>* %509, align 8
  %511 = zext <2 x i32> %510 to <2 x i64>
  %512 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %17, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %506, i8 0, i64 16, i1 false) #5
  %513 = bitcast i64* %512 to <2 x i64>*
  store <2 x i64> %511, <2 x i64>* %513, align 8
  call void @_ZN3jxl16AdjustQuantFieldERKNS_15AcStrategyImageERKNS_4RectEPNS_5PlaneIfEE(%"class.jxl::AcStrategyImage"* dereferenceable(48) %505, %"class.jxl::Rect"* nonnull dereferenceable(32) %17, %"class.jxl::Plane.1"* %457) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %506) #5
  %514 = bitcast %"class.jxl::Plane.1"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %514) #5
  %515 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %18, i64 0, i32 0, i32 4
  %516 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %18, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %514, i8 0, i64 32, i1 false) #5
  %517 = bitcast %"class.jxl::Plane.1"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %517) #5
  %518 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %19, i64 0, i32 0, i32 1
  %519 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %19, i64 0, i32 0, i32 4
  %520 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %19, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %517, i8 -86, i64 32, i1 false) #5
  call void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane.1"* nonnull sret %19, %"class.jxl::Plane.1"* dereferenceable(32) %457) #5
  %521 = load i32, i32* %518, align 4, !noalias !24
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %611, label %523

523:                                              ; preds = %490
  %524 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %19, i64 0, i32 0, i32 0
  %525 = load i8*, i8** %520, align 8, !noalias !24
  %526 = load i64, i64* %519, align 8, !noalias !24
  %527 = load i32, i32* %524, align 8, !noalias !24
  %528 = icmp eq i32 %527, 0
  %529 = zext i32 %527 to i64
  %530 = zext i32 %521 to i64
  %531 = add nsw i64 %529, -1
  %532 = and i64 %529, 3
  %533 = icmp ult i64 %531, 3
  %534 = sub nsw i64 %529, %532
  %535 = icmp eq i64 %532, 0
  br label %536

536:                                              ; preds = %569, %523
  %537 = phi float [ 0xC7EFFFFFE0000000, %523 ], [ %570, %569 ]
  %538 = phi float [ 0x47EFFFFFE0000000, %523 ], [ %571, %569 ]
  %539 = phi float [ 0xC7EFFFFFE0000000, %523 ], [ %572, %569 ]
  %540 = phi float [ 0x47EFFFFFE0000000, %523 ], [ %573, %569 ]
  %541 = phi i64 [ 0, %523 ], [ %574, %569 ]
  %542 = mul i64 %541, %526
  %543 = getelementptr inbounds i8, i8* %525, i64 %542
  %544 = ptrtoint i8* %543 to i64
  %545 = and i64 %544, 63
  %546 = icmp eq i64 %545, 0
  call void @llvm.assume(i1 %546) #5, !noalias !24
  %547 = bitcast i8* %543 to float*
  br i1 %528, label %569, label %548

548:                                              ; preds = %536
  br i1 %533, label %549, label %576

549:                                              ; preds = %576, %548
  %550 = phi float [ undef, %548 ], [ %605, %576 ]
  %551 = phi float [ undef, %548 ], [ %607, %576 ]
  %552 = phi float [ %539, %548 ], [ %607, %576 ]
  %553 = phi float [ %540, %548 ], [ %605, %576 ]
  %554 = phi i64 [ 0, %548 ], [ %608, %576 ]
  br i1 %535, label %569, label %555

555:                                              ; preds = %549, %555
  %556 = phi float [ %565, %555 ], [ %552, %549 ]
  %557 = phi float [ %563, %555 ], [ %553, %549 ]
  %558 = phi i64 [ %566, %555 ], [ %554, %549 ]
  %559 = phi i64 [ %567, %555 ], [ %532, %549 ]
  %560 = getelementptr inbounds float, float* %547, i64 %558
  %561 = load float, float* %560, align 4, !noalias !24
  %562 = fcmp olt float %561, %557
  %563 = select i1 %562, float %561, float %557
  %564 = fcmp olt float %556, %561
  %565 = select i1 %564, float %561, float %556
  %566 = add nuw nsw i64 %558, 1
  %567 = add i64 %559, -1
  %568 = icmp eq i64 %567, 0
  br i1 %568, label %569, label %555, !llvm.loop !28

569:                                              ; preds = %549, %555, %536
  %570 = phi float [ %537, %536 ], [ %551, %549 ], [ %565, %555 ]
  %571 = phi float [ %538, %536 ], [ %550, %549 ], [ %563, %555 ]
  %572 = phi float [ %539, %536 ], [ %551, %549 ], [ %565, %555 ]
  %573 = phi float [ %540, %536 ], [ %550, %549 ], [ %563, %555 ]
  %574 = add nuw nsw i64 %541, 1
  %575 = icmp eq i64 %574, %530
  br i1 %575, label %611, label %536

576:                                              ; preds = %548, %576
  %577 = phi float [ %607, %576 ], [ %539, %548 ]
  %578 = phi float [ %605, %576 ], [ %540, %548 ]
  %579 = phi i64 [ %608, %576 ], [ 0, %548 ]
  %580 = phi i64 [ %609, %576 ], [ %534, %548 ]
  %581 = getelementptr inbounds float, float* %547, i64 %579
  %582 = load float, float* %581, align 16, !noalias !24
  %583 = fcmp olt float %582, %578
  %584 = select i1 %583, float %582, float %578
  %585 = fcmp olt float %577, %582
  %586 = select i1 %585, float %582, float %577
  %587 = or i64 %579, 1
  %588 = getelementptr inbounds float, float* %547, i64 %587
  %589 = load float, float* %588, align 4, !noalias !24
  %590 = fcmp olt float %589, %584
  %591 = select i1 %590, float %589, float %584
  %592 = fcmp olt float %586, %589
  %593 = select i1 %592, float %589, float %586
  %594 = or i64 %579, 2
  %595 = getelementptr inbounds float, float* %547, i64 %594
  %596 = load float, float* %595, align 8, !noalias !24
  %597 = fcmp olt float %596, %591
  %598 = select i1 %597, float %596, float %591
  %599 = fcmp olt float %593, %596
  %600 = select i1 %599, float %596, float %593
  %601 = or i64 %579, 3
  %602 = getelementptr inbounds float, float* %547, i64 %601
  %603 = load float, float* %602, align 4, !noalias !24
  %604 = fcmp olt float %603, %598
  %605 = select i1 %604, float %603, float %598
  %606 = fcmp olt float %600, %603
  %607 = select i1 %606, float %603, float %600
  %608 = add nuw nsw i64 %579, 4
  %609 = add i64 %580, -4
  %610 = icmp eq i64 %609, 0
  br i1 %610, label %549, label %576

611:                                              ; preds = %569, %490
  %612 = phi float [ 0xC7EFFFFFE0000000, %490 ], [ %570, %569 ]
  %613 = phi float [ 0x47EFFFFFE0000000, %490 ], [ %571, %569 ]
  %614 = fdiv float %612, %613
  %615 = fdiv float 2.500000e+02, %614
  %616 = call float @sqrtf(float %615) #5
  %617 = fcmp olt float %616, 2.000000e+00
  %618 = select i1 %617, float %616, float 2.000000e+00
  %619 = fmul float %616, %618
  %620 = fdiv float %613, %619
  %621 = fdiv float %616, %618
  %622 = fmul float %612, %621
  %623 = fdiv float %622, %620
  %624 = fcmp olt float %623, 2.530000e+02
  br i1 %624, label %628, label %625

625:                                              ; preds = %611
  %626 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 701, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.30, i64 0, i64 0)) #5
  %627 = call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

628:                                              ; preds = %611
  %629 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 6, i32 9
  %630 = load i32, i32* %629, align 8
  %631 = icmp slt i32 %630, 7
  %632 = select i1 %631, i32 %630, i32 7
  %633 = load i32, i32* %451, align 4
  %634 = icmp eq i32 %633, 1
  %635 = select i1 %634, i32 %632, i32 2
  %636 = icmp slt i32 %635, 0
  br i1 %636, label %1470, label %637

637:                                              ; preds = %628
  %638 = bitcast %"class.jxl::ImageBundle"* %20 to i8*
  %639 = bitcast float* %21 to i8*
  %640 = bitcast %"class.jxl::Plane.1"* %22 to i8*
  %641 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %22, i64 0, i32 0, i32 0
  %642 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %22, i64 0, i32 0, i32 1
  %643 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %22, i64 0, i32 0, i32 4
  %644 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %22, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %645 = bitcast %"class.jxl::Plane.1"* %23 to i8*
  %646 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %23, i64 0, i32 0, i32 4
  %647 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %23, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %648 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %23, i64 0, i32 0
  %649 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %22, i64 0, i32 0, i32 5
  %650 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %23, i64 0, i32 0, i32 5
  %651 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %650, i64 0, i32 0, i32 0, i32 0
  %652 = bitcast %"class.std::__1::unique_ptr"* %650 to i64*
  %653 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %649, i64 0, i32 0, i32 0, i32 0
  %654 = bitcast %"class.std::__1::unique_ptr"* %649 to i64*
  %655 = bitcast %"class.jxl::Plane.1"* %24 to i8*
  %656 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %24, i64 0, i32 0, i32 4
  %657 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %24, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %658 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %24, i64 0, i32 0
  %659 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %660 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 3, i32 0, i32 0, i32 4
  %661 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %18, i64 0, i32 0, i32 5
  %662 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %24, i64 0, i32 0, i32 5
  %663 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %662, i64 0, i32 0, i32 0, i32 0
  %664 = bitcast %"class.std::__1::unique_ptr"* %662 to i64*
  %665 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %661, i64 0, i32 0, i32 0, i32 0
  %666 = bitcast %"class.std::__1::unique_ptr"* %661 to i64*
  %667 = icmp eq %"struct.jxl::AuxOut"* %4, null
  %668 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 15
  %669 = bitcast %"class.std::__1::basic_string"* %668 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %670 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %669, i64 0, i32 1, i32 0
  %671 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %672 = bitcast %"class.std::__1::basic_string"* %25 to i8*
  %673 = bitcast %"class.std::__1::basic_string"* %26 to i8*
  %674 = getelementptr inbounds [32 x i8], [32 x i8]* %29, i64 0, i64 0
  %675 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %676 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %677 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %678 = bitcast %"class.std::__1::basic_string"* %26 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %679 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %678, i64 0, i32 1, i32 0
  %680 = bitcast %"class.std::__1::basic_string"* %25 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %681 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %680, i64 0, i32 1, i32 0
  %682 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %683 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %20, i64 0, i32 10
  %684 = bitcast %"class.jxl::Plane.1"* %11 to i8*
  %685 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %11, i64 0, i32 0, i32 4
  %686 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %11, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %687 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %11, i64 0, i32 0
  %688 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %689 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 1, i32 0, i32 4
  %690 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  %691 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %692 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %691, i64 0, i32 1, i32 0
  %693 = getelementptr inbounds i8, i8* %690, i64 13
  %694 = fmul float %459, 4.000000e+00
  %695 = fmul float %459, 6.000000e+00
  %696 = bitcast %"class.jxl::Image3"* %8 to i8*
  %697 = fpext float %694 to double
  %698 = fpext float %695 to double
  %699 = getelementptr inbounds [200 x i8], [200 x i8]* %10, i64 0, i64 0
  %700 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %701 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 14
  %702 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %8, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %703 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %8, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %704 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %8, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %705 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  %706 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %707 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %706, i64 0, i32 1, i32 0
  %708 = getelementptr inbounds i8, i8* %705, i64 12
  %709 = fmul float %459, 1.500000e+00
  %710 = bitcast %"class.jxl::Image3"* %7 to i8*
  %711 = fpext float %459 to double
  %712 = fpext float %709 to double
  %713 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %714 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %715 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %716 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %717 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  %718 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %719 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %718, i64 0, i32 1, i32 0
  %720 = getelementptr inbounds i8, i8* %717, i64 10
  %721 = bitcast %"class.jxl::Image3"* %9 to i8*
  %722 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %723 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %724 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %725 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %726 = bitcast [8 x double]* %27 to i8*
  %727 = bitcast [8 x double]* %28 to i8*
  %728 = fadd double %711, -1.000000e+00
  %729 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 5, i32 4
  %730 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 5, i32 5
  %731 = zext i32 %635 to i64
  %732 = add nuw i32 %635, 1
  %733 = zext i32 %732 to i64
  %734 = getelementptr inbounds [8 x double], [8 x double]* %27, i64 0, i64 2
  %735 = bitcast double* %734 to i8*
  %736 = bitcast [8 x double]* %27 to <2 x double>*
  br label %737

737:                                              ; preds = %1462, %637
  %738 = phi i64 [ %1463, %1462 ], [ 0, %637 ]
  call void @_ZN3jxl9Quantizer13SetQuantFieldEfRKNS_5PlaneIfEEPNS1_IiEE(%"class.jxl::Quantizer"* %455, float %504, %"class.jxl::Plane.1"* dereferenceable(32) %457, %"class.jxl::Plane.132"* %456) #5
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %638) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %638, i8 -86, i64 368, i1 false) #5
  call void @_ZN3jxl14RoundtripImageERKNS_6Image3IfEEPNS_18PassesEncoderStateEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* nonnull sret %20, %"class.jxl::Image3"* dereferenceable(96) %1, %"struct.jxl::PassesEncoderState"* %2, %"class.jxl::ThreadPool"* %3) #5
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %639) #5
  store float 0xFFFFFFFFE0000000, float* %21, align 4
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %640) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %640, i8 0, i64 32, i1 false) #5
  %739 = call i32 @_ZN3jxl24JxlButteraugliComparator11CompareWithERKNS_11ImageBundleEPNS_5PlaneIfEEPf(%"class.jxl::JxlButteraugliComparator"* nonnull %16, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %20, %"class.jxl::Plane.1"* nonnull %22, float* nonnull %21) #5
  %740 = icmp eq i32 %739, 0
  br i1 %740, label %744, label %741

741:                                              ; preds = %737
  %742 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 726, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.34, i64 0, i64 0)) #5
  %743 = call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

744:                                              ; preds = %737
  br i1 %493, label %805, label %745

745:                                              ; preds = %744
  %746 = load float, float* %21, align 4
  %747 = fsub float -0.000000e+00, %746
  store float %747, float* %21, align 4
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %645) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %645, i8 -86, i64 32, i1 false) #5, !alias.scope !29
  %748 = load i32, i32* %641, align 8, !noalias !29
  %749 = zext i32 %748 to i64
  %750 = load i32, i32* %642, align 4, !noalias !29
  %751 = zext i32 %750 to i64
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %648, i64 %749, i64 %751, i64 4) #5
  %752 = load i32, i32* %642, align 4, !noalias !29
  %753 = icmp eq i32 %752, 0
  br i1 %753, label %795, label %754

754:                                              ; preds = %745
  %755 = load i32, i32* %641, align 8, !noalias !29
  br label %756

756:                                              ; preds = %779, %754
  %757 = phi i32 [ %752, %754 ], [ %780, %779 ]
  %758 = phi i32 [ %755, %754 ], [ %781, %779 ]
  %759 = phi i64 [ 0, %754 ], [ %782, %779 ]
  %760 = load i8*, i8** %644, align 8, !noalias !29
  %761 = load i64, i64* %643, align 8, !noalias !29
  %762 = mul i64 %761, %759
  %763 = getelementptr inbounds i8, i8* %760, i64 %762
  %764 = ptrtoint i8* %763 to i64
  %765 = and i64 %764, 63
  %766 = icmp eq i64 %765, 0
  call void @llvm.assume(i1 %766) #5
  %767 = bitcast i8* %763 to float*
  %768 = load i8*, i8** %647, align 8, !alias.scope !29
  %769 = load i64, i64* %646, align 8, !alias.scope !29
  %770 = mul i64 %769, %759
  %771 = getelementptr inbounds i8, i8* %768, i64 %770
  %772 = ptrtoint i8* %771 to i64
  %773 = and i64 %772, 63
  %774 = icmp eq i64 %773, 0
  call void @llvm.assume(i1 %774) #5
  %775 = bitcast i8* %771 to float*
  %776 = icmp eq i32 %758, 0
  br i1 %776, label %779, label %785

777:                                              ; preds = %785
  %778 = load i32, i32* %642, align 4, !noalias !29
  br label %779

779:                                              ; preds = %777, %756
  %780 = phi i32 [ %778, %777 ], [ %757, %756 ]
  %781 = phi i32 [ %792, %777 ], [ 0, %756 ]
  %782 = add nuw nsw i64 %759, 1
  %783 = zext i32 %780 to i64
  %784 = icmp ult i64 %782, %783
  br i1 %784, label %756, label %795

785:                                              ; preds = %756, %785
  %786 = phi i64 [ %791, %785 ], [ 0, %756 ]
  %787 = getelementptr inbounds float, float* %767, i64 %786
  %788 = load float, float* %787, align 4
  %789 = fsub float -0.000000e+00, %788
  %790 = getelementptr inbounds float, float* %775, i64 %786
  store float %789, float* %790, align 4
  %791 = add nuw nsw i64 %786, 1
  %792 = load i32, i32* %641, align 8, !noalias !29
  %793 = zext i32 %792 to i64
  %794 = icmp ult i64 %791, %793
  br i1 %794, label %785, label %777

795:                                              ; preds = %779, %745
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %640, i8* nonnull align 8 %645, i64 24, i1 false) #5
  %796 = load i64, i64* %652, align 8
  store i8* null, i8** %651, align 8
  %797 = load i8*, i8** %653, align 8
  store i64 %796, i64* %654, align 8
  %798 = icmp eq i8* %797, null
  br i1 %798, label %799, label %800

799:                                              ; preds = %795
  store i8* null, i8** %647, align 8
  br label %804

800:                                              ; preds = %795
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %797) #5
  %801 = load i8*, i8** %647, align 8
  store i8* null, i8** %647, align 8
  %802 = icmp eq i8* %801, null
  br i1 %802, label %804, label %803

803:                                              ; preds = %800
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %801) #5
  br label %804

804:                                              ; preds = %803, %800, %799
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %645) #5
  br label %805

805:                                              ; preds = %804, %744
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %655) #5
  %806 = load i32, i32* %641, align 8, !noalias !32
  %807 = zext i32 %806 to i64
  %808 = add nuw nsw i64 %807, 7
  %809 = lshr i64 %808, 3
  %810 = load i32, i32* %642, align 4, !noalias !32
  %811 = zext i32 %810 to i64
  %812 = add nuw nsw i64 %811, 7
  %813 = lshr i64 %812, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %655, i8 -86, i64 32, i1 false) #5, !alias.scope !32
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %658, i64 %809, i64 %813, i64 4) #5
  %814 = load i64, i64* %656, align 8, !alias.scope !32
  %815 = lshr i64 %814, 2
  %816 = icmp eq i64 %813, 0
  br i1 %816, label %1050, label %817

817:                                              ; preds = %805
  %818 = icmp eq i64 %809, 0
  br label %819

819:                                              ; preds = %848, %817
  %820 = phi i64 [ %814, %817 ], [ %850, %848 ]
  %821 = phi i64 [ 0, %817 ], [ %846, %848 ]
  %822 = phi i32 [ 0, %817 ], [ %849, %848 ]
  %823 = icmp sgt i32 %822, 0
  %824 = select i1 %823, i32 %822, i32 0
  %825 = zext i32 %824 to i64
  %826 = load i8*, i8** %659, align 8, !noalias !32
  %827 = load i64, i64* %660, align 8, !noalias !32
  %828 = mul i64 %827, %821
  %829 = getelementptr inbounds i8, i8* %826, i64 %828
  %830 = ptrtoint i8* %829 to i64
  %831 = and i64 %830, 63
  %832 = icmp eq i64 %831, 0
  call void @llvm.assume(i1 %832) #5
  %833 = load i8*, i8** %657, align 8, !alias.scope !32
  %834 = mul i64 %821, %820
  %835 = getelementptr inbounds i8, i8* %833, i64 %834
  %836 = ptrtoint i8* %835 to i64
  %837 = and i64 %836, 63
  %838 = icmp eq i64 %837, 0
  call void @llvm.assume(i1 %838) #5
  %839 = bitcast i8* %835 to float*
  br i1 %818, label %845, label %840

840:                                              ; preds = %819
  %841 = trunc i64 %821 to i32
  %842 = shl i32 %841, 3
  %843 = icmp sgt i32 %842, 0
  %844 = select i1 %843, i32 %842, i32 0
  br label %851

845:                                              ; preds = %1046, %819
  %846 = add nuw nsw i64 %821, 1
  %847 = icmp eq i64 %846, %813
  br i1 %847, label %1050, label %848

848:                                              ; preds = %845
  %849 = add i32 %822, 8
  %850 = load i64, i64* %656, align 8, !alias.scope !32
  br label %819

851:                                              ; preds = %1046, %840
  %852 = phi i64 [ 0, %840 ], [ %1047, %1046 ]
  %853 = phi i32 [ 0, %840 ], [ %1048, %1046 ]
  %854 = trunc i64 %852 to i32
  %855 = shl i32 %854, 3
  %856 = icmp sgt i32 %855, 0
  %857 = select i1 %856, i32 %855, i32 0
  %858 = zext i32 %857 to i64
  %859 = icmp sgt i32 %853, 0
  %860 = select i1 %859, i32 %853, i32 0
  %861 = zext i32 %860 to i64
  %862 = getelementptr inbounds i8, i8* %829, i64 %852
  %863 = load i8, i8* %862, align 1
  %864 = and i8 %863, 1
  %865 = icmp eq i8 %864, 0
  br i1 %865, label %1046, label %866

866:                                              ; preds = %851
  %867 = lshr i8 %863, 1
  %868 = zext i8 %867 to i64
  %869 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %868
  %870 = load i8, i8* %869, align 1
  %871 = zext i8 %870 to i64
  %872 = zext i8 %870 to i32
  %873 = shl nuw nsw i32 %872, 3
  %874 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %868
  %875 = load i8, i8* %874, align 1
  %876 = zext i8 %875 to i64
  %877 = zext i8 %875 to i32
  %878 = shl nuw nsw i32 %877, 3
  %879 = load i32, i32* %642, align 4, !noalias !32
  %880 = add nuw nsw i32 %878, %842
  %881 = icmp slt i32 %880, %879
  %882 = select i1 %881, i32 %880, i32 %879
  %883 = trunc i64 %852 to i32
  %884 = shl i32 %883, 3
  %885 = load i32, i32* %641, align 8, !noalias !32
  %886 = add nuw nsw i32 %873, %884
  %887 = icmp slt i32 %886, %885
  %888 = select i1 %887, i32 %886, i32 %885
  %889 = icmp slt i32 %844, %882
  br i1 %889, label %890, label %904

890:                                              ; preds = %866
  %891 = icmp sgt i32 %884, 0
  %892 = select i1 %891, i32 %884, i32 0
  %893 = load i8*, i8** %644, align 8, !noalias !32
  %894 = load i64, i64* %643, align 8, !noalias !32
  %895 = icmp slt i32 %892, %888
  %896 = sext i32 %888 to i64
  %897 = sext i32 %882 to i64
  %898 = xor i64 %858, -1
  %899 = and i64 %896, 1
  %900 = icmp eq i64 %899, 0
  %901 = or i64 %861, 1
  %902 = sub nsw i64 0, %896
  %903 = icmp eq i64 %898, %902
  br label %933

904:                                              ; preds = %959, %866
  %905 = phi float [ 0.000000e+00, %866 ], [ %960, %959 ]
  %906 = phi double [ 0.000000e+00, %866 ], [ %961, %959 ]
  %907 = fcmp oeq double %906, 0.000000e+00
  %908 = select i1 %907, double 1.000000e+00, double %906
  %909 = fpext float %905 to double
  %910 = fdiv double %909, %908
  %911 = call double @pow(double %910, double 6.250000e-02) #5
  %912 = fmul double %911, 0x3FF3333340000000
  %913 = fptrunc double %912 to float
  %914 = getelementptr inbounds float, float* %839, i64 %852
  store float %913, float* %914, align 4
  %915 = zext i8 %870 to i64
  %916 = icmp ugt i64 %915, 1
  %917 = select i1 %916, i64 %915, i64 1
  %918 = and i64 %917, 248
  %919 = add nsw i64 %918, -8
  %920 = lshr exact i64 %919, 3
  %921 = add nuw nsw i64 %920, 1
  %922 = icmp ult i64 %917, 8
  %923 = and i64 %917, 248
  %924 = insertelement <4 x float> undef, float %913, i32 0
  %925 = shufflevector <4 x float> %924, <4 x float> undef, <4 x i32> zeroinitializer
  %926 = insertelement <4 x float> undef, float %913, i32 0
  %927 = shufflevector <4 x float> %926, <4 x float> undef, <4 x i32> zeroinitializer
  %928 = and i64 %921, 3
  %929 = icmp ult i64 %919, 24
  %930 = sub nsw i64 %921, %928
  %931 = icmp eq i64 %928, 0
  %932 = icmp eq i64 %917, %923
  br label %987

933:                                              ; preds = %959, %890
  %934 = phi i64 [ %825, %890 ], [ %962, %959 ]
  %935 = phi double [ 0.000000e+00, %890 ], [ %961, %959 ]
  %936 = phi float [ 0.000000e+00, %890 ], [ %960, %959 ]
  %937 = mul i64 %934, %894
  %938 = getelementptr inbounds i8, i8* %893, i64 %937
  %939 = ptrtoint i8* %938 to i64
  %940 = and i64 %939, 63
  %941 = icmp eq i64 %940, 0
  call void @llvm.assume(i1 %941) #5
  %942 = bitcast i8* %938 to float*
  br i1 %895, label %943, label %959

943:                                              ; preds = %933
  br i1 %900, label %953, label %944

944:                                              ; preds = %943
  %945 = getelementptr inbounds float, float* %942, i64 %861
  %946 = load float, float* %945, align 32
  %947 = fmul float %946, %946
  %948 = fmul float %947, %947
  %949 = fmul float %948, %948
  %950 = fmul float %949, %949
  %951 = fadd float %936, %950
  %952 = fadd double %935, 1.000000e+00
  br label %953

953:                                              ; preds = %944, %943
  %954 = phi i64 [ %901, %944 ], [ %861, %943 ]
  %955 = phi double [ %952, %944 ], [ %935, %943 ]
  %956 = phi float [ %951, %944 ], [ %936, %943 ]
  %957 = phi float [ %951, %944 ], [ undef, %943 ]
  %958 = phi double [ %952, %944 ], [ undef, %943 ]
  br i1 %903, label %959, label %964

959:                                              ; preds = %953, %964, %933
  %960 = phi float [ %936, %933 ], [ %957, %953 ], [ %983, %964 ]
  %961 = phi double [ %935, %933 ], [ %958, %953 ], [ %984, %964 ]
  %962 = add nuw nsw i64 %934, 1
  %963 = icmp slt i64 %962, %897
  br i1 %963, label %933, label %904

964:                                              ; preds = %953, %964
  %965 = phi i64 [ %985, %964 ], [ %954, %953 ]
  %966 = phi double [ %984, %964 ], [ %955, %953 ]
  %967 = phi float [ %983, %964 ], [ %956, %953 ]
  %968 = getelementptr inbounds float, float* %942, i64 %965
  %969 = load float, float* %968, align 4
  %970 = fmul float %969, %969
  %971 = fmul float %970, %970
  %972 = fmul float %971, %971
  %973 = fmul float %972, %972
  %974 = fadd float %967, %973
  %975 = fadd double %966, 1.000000e+00
  %976 = add nuw nsw i64 %965, 1
  %977 = getelementptr inbounds float, float* %942, i64 %976
  %978 = load float, float* %977, align 4
  %979 = fmul float %978, %978
  %980 = fmul float %979, %979
  %981 = fmul float %980, %980
  %982 = fmul float %981, %981
  %983 = fadd float %974, %982
  %984 = fadd double %975, 1.000000e+00
  %985 = add nuw nsw i64 %965, 2
  %986 = icmp slt i64 %985, %896
  br i1 %986, label %964, label %959

987:                                              ; preds = %1037, %904
  %988 = phi i64 [ 0, %904 ], [ %1038, %1037 ]
  %989 = mul i64 %988, %815
  %990 = add i64 %989, %852
  br i1 %922, label %991, label %993

991:                                              ; preds = %1036, %987
  %992 = phi i64 [ 0, %987 ], [ %923, %1036 ]
  br label %1040

993:                                              ; preds = %987
  br i1 %929, label %1023, label %994

994:                                              ; preds = %993, %994
  %995 = phi i64 [ %1020, %994 ], [ 0, %993 ]
  %996 = phi i64 [ %1021, %994 ], [ %930, %993 ]
  %997 = add i64 %990, %995
  %998 = getelementptr inbounds float, float* %839, i64 %997
  %999 = bitcast float* %998 to <4 x float>*
  store <4 x float> %925, <4 x float>* %999, align 4
  %1000 = getelementptr inbounds float, float* %998, i64 4
  %1001 = bitcast float* %1000 to <4 x float>*
  store <4 x float> %927, <4 x float>* %1001, align 4
  %1002 = or i64 %995, 8
  %1003 = add i64 %990, %1002
  %1004 = getelementptr inbounds float, float* %839, i64 %1003
  %1005 = bitcast float* %1004 to <4 x float>*
  store <4 x float> %925, <4 x float>* %1005, align 4
  %1006 = getelementptr inbounds float, float* %1004, i64 4
  %1007 = bitcast float* %1006 to <4 x float>*
  store <4 x float> %927, <4 x float>* %1007, align 4
  %1008 = or i64 %995, 16
  %1009 = add i64 %990, %1008
  %1010 = getelementptr inbounds float, float* %839, i64 %1009
  %1011 = bitcast float* %1010 to <4 x float>*
  store <4 x float> %925, <4 x float>* %1011, align 4
  %1012 = getelementptr inbounds float, float* %1010, i64 4
  %1013 = bitcast float* %1012 to <4 x float>*
  store <4 x float> %927, <4 x float>* %1013, align 4
  %1014 = or i64 %995, 24
  %1015 = add i64 %990, %1014
  %1016 = getelementptr inbounds float, float* %839, i64 %1015
  %1017 = bitcast float* %1016 to <4 x float>*
  store <4 x float> %925, <4 x float>* %1017, align 4
  %1018 = getelementptr inbounds float, float* %1016, i64 4
  %1019 = bitcast float* %1018 to <4 x float>*
  store <4 x float> %927, <4 x float>* %1019, align 4
  %1020 = add i64 %995, 32
  %1021 = add i64 %996, -4
  %1022 = icmp eq i64 %1021, 0
  br i1 %1022, label %1023, label %994, !llvm.loop !35

1023:                                             ; preds = %994, %993
  %1024 = phi i64 [ 0, %993 ], [ %1020, %994 ]
  br i1 %931, label %1036, label %1025

1025:                                             ; preds = %1023, %1025
  %1026 = phi i64 [ %1033, %1025 ], [ %1024, %1023 ]
  %1027 = phi i64 [ %1034, %1025 ], [ %928, %1023 ]
  %1028 = add i64 %990, %1026
  %1029 = getelementptr inbounds float, float* %839, i64 %1028
  %1030 = bitcast float* %1029 to <4 x float>*
  store <4 x float> %925, <4 x float>* %1030, align 4
  %1031 = getelementptr inbounds float, float* %1029, i64 4
  %1032 = bitcast float* %1031 to <4 x float>*
  store <4 x float> %927, <4 x float>* %1032, align 4
  %1033 = add i64 %1026, 8
  %1034 = add i64 %1027, -1
  %1035 = icmp eq i64 %1034, 0
  br i1 %1035, label %1036, label %1025, !llvm.loop !36

1036:                                             ; preds = %1025, %1023
  br i1 %932, label %1037, label %991

1037:                                             ; preds = %1040, %1036
  %1038 = add nuw nsw i64 %988, 1
  %1039 = icmp ult i64 %1038, %876
  br i1 %1039, label %987, label %1046

1040:                                             ; preds = %991, %1040
  %1041 = phi i64 [ %1044, %1040 ], [ %992, %991 ]
  %1042 = add i64 %990, %1041
  %1043 = getelementptr inbounds float, float* %839, i64 %1042
  store float %913, float* %1043, align 4
  %1044 = add nuw nsw i64 %1041, 1
  %1045 = icmp ult i64 %1044, %871
  br i1 %1045, label %1040, label %1037, !llvm.loop !37

1046:                                             ; preds = %1037, %851
  %1047 = add nuw nsw i64 %852, 1
  %1048 = add i32 %853, 8
  %1049 = icmp eq i64 %1047, %809
  br i1 %1049, label %845, label %851

1050:                                             ; preds = %845, %805
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %514, i8* nonnull align 8 %655, i64 24, i1 false) #5
  %1051 = load i64, i64* %664, align 8
  store i8* null, i8** %663, align 8
  %1052 = load i8*, i8** %665, align 8
  store i64 %1051, i64* %666, align 8
  %1053 = icmp eq i8* %1052, null
  br i1 %1053, label %1054, label %1055

1054:                                             ; preds = %1050
  store i8* null, i8** %657, align 8
  br label %1059

1055:                                             ; preds = %1050
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1052) #5
  %1056 = load i8*, i8** %657, align 8
  store i8* null, i8** %657, align 8
  %1057 = icmp eq i8* %1056, null
  br i1 %1057, label %1059, label %1058

1058:                                             ; preds = %1055
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1056) #5
  br label %1059

1059:                                             ; preds = %1058, %1055, %1054
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %655) #5
  br i1 %667, label %1235, label %1060

1060:                                             ; preds = %1059
  %1061 = load i8, i8* %670, align 1
  %1062 = icmp slt i8 %1061, 0
  br i1 %1062, label %1063, label %1065

1063:                                             ; preds = %1060
  %1064 = load i64, i64* %671, align 8
  br label %1067

1065:                                             ; preds = %1060
  %1066 = zext i8 %1061 to i64
  br label %1067

1067:                                             ; preds = %1065, %1063
  %1068 = phi i64 [ %1064, %1063 ], [ %1066, %1065 ]
  %1069 = icmp eq i64 %1068, 0
  br i1 %1069, label %1232, label %1070

1070:                                             ; preds = %1067
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %672) #5
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %673) #5
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %674) #5, !noalias !38
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %674, i8 0, i64 32, i1 false) #5, !noalias !38
  %1071 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %674, i64 32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0), i64 %738) #5, !noalias !38
  %1072 = call i64 @strlen(i8* nonnull %674) #5, !noalias !38
  %1073 = icmp ugt i64 %1072, -17
  br i1 %1073, label %1074, label %1076

1074:                                             ; preds = %1070
  %1075 = bitcast %"class.std::__1::basic_string"* %26 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %1075) #24
  unreachable

1076:                                             ; preds = %1070
  %1077 = icmp ult i64 %1072, 23
  br i1 %1077, label %1083, label %1078

1078:                                             ; preds = %1076
  %1079 = add nuw i64 %1072, 16
  %1080 = and i64 %1079, -16
  %1081 = call i8* @_Znwm(i64 %1080) #25
  store i8* %1081, i8** %675, align 8, !alias.scope !38
  %1082 = or i64 %1080, -9223372036854775808
  store i64 %1082, i64* %676, align 8, !alias.scope !38
  store i64 %1072, i64* %677, align 8, !alias.scope !38
  br label %1086

1083:                                             ; preds = %1076
  %1084 = trunc i64 %1072 to i8
  store i8 %1084, i8* %679, align 1, !alias.scope !38
  %1085 = icmp eq i64 %1072, 0
  br i1 %1085, label %1088, label %1086

1086:                                             ; preds = %1083, %1078
  %1087 = phi i8* [ %1081, %1078 ], [ %673, %1083 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %1087, i8* nonnull align 16 %674, i64 %1072, i1 false) #5
  br label %1088

1088:                                             ; preds = %1086, %1083
  %1089 = phi i8* [ %673, %1083 ], [ %1087, %1086 ]
  %1090 = getelementptr inbounds i8, i8* %1089, i64 %1072
  store i8 0, i8* %1090, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %674) #5, !noalias !38
  %1091 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"* nonnull %26, i64 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i64 0, i64 0)) #5, !noalias !41
  %1092 = bitcast %"class.std::__1::basic_string"* %1091 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %672, i8* align 8 %1092, i64 24, i1 false) #5
  call void @llvm.memset.p0i8.i64(i8* align 8 %1092, i8 0, i64 24, i1 false) #5, !noalias !41
  %1093 = load i8, i8* %681, align 1
  %1094 = icmp slt i8 %1093, 0
  %1095 = load i8*, i8** %682, align 8
  %1096 = select i1 %1094, i8* %1095, i8* %672
  call void @_ZNK3jxl6AuxOut9DumpImageIfEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"* nonnull %4, i8* %1096, %"class.jxl::Image3"* dereferenceable(96) %683) #5
  %1097 = load i8, i8* %681, align 1
  %1098 = icmp slt i8 %1097, 0
  br i1 %1098, label %1099, label %1101

1099:                                             ; preds = %1088
  %1100 = load i8*, i8** %682, align 8
  call void @_ZdlPv(i8* %1100) #25
  br label %1101

1101:                                             ; preds = %1099, %1088
  %1102 = load i8, i8* %679, align 1
  %1103 = icmp slt i8 %1102, 0
  br i1 %1103, label %1104, label %1106

1104:                                             ; preds = %1101
  %1105 = load i8*, i8** %675, align 8
  call void @_ZdlPv(i8* %1105) #25
  br label %1106

1106:                                             ; preds = %1104, %1101
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %673) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %672) #5
  %1107 = load i8, i8* %670, align 1
  %1108 = icmp slt i8 %1107, 0
  br i1 %1108, label %1109, label %1111

1109:                                             ; preds = %1106
  %1110 = load i64, i64* %671, align 8
  br label %1113

1111:                                             ; preds = %1106
  %1112 = zext i8 %1107 to i64
  br label %1113

1113:                                             ; preds = %1111, %1109
  %1114 = phi i64 [ %1110, %1109 ], [ %1112, %1111 ]
  %1115 = icmp eq i64 %1114, 0
  br i1 %1115, label %1232, label %1116

1116:                                             ; preds = %1113
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %684) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %684, i8 -86, i64 32, i1 false) #5
  %1117 = load i32, i32* %507, align 8
  %1118 = zext i32 %1117 to i64
  %1119 = load i32, i32* %508, align 4
  %1120 = zext i32 %1119 to i64
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %687, i64 %1118, i64 %1120, i64 4) #5
  %1121 = load i32, i32* %508, align 4
  %1122 = icmp eq i32 %1121, 0
  br i1 %1122, label %1125, label %1123

1123:                                             ; preds = %1116
  %1124 = load i32, i32* %507, align 8
  br label %1192

1125:                                             ; preds = %1215, %1116
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %690) #5
  store i8 13, i8* %692, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %690, i8* align 1 getelementptr inbounds ([14 x i8], [14 x i8]* @.str.44, i64 0, i64 0), i64 13, i1 false) #5
  store i8 0, i8* %693, align 1
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %696) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %696, i8 -86, i64 96, i1 false) #5
  call void @_ZN3jxl18CreateHeatMapImageERKNS_5PlaneIfEEdd(%"class.jxl::Image3"* nonnull sret %8, %"class.jxl::Plane.1"* nonnull dereferenceable(32) %11, double %697, double %698) #5
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %699) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %699, i8 -86, i64 200, i1 false) #5
  %1126 = load i32, i32* %701, align 8
  %1127 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %699, i64 200, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull %12, i32 %1126) #5
  call void @_ZNK3jxl6AuxOut9DumpImageIfEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"* nonnull %4, i8* nonnull %699, %"class.jxl::Image3"* nonnull dereferenceable(96) %8) #5
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %699) #5
  %1128 = load i8*, i8** %702, align 8
  store i8* null, i8** %702, align 8
  %1129 = icmp eq i8* %1128, null
  br i1 %1129, label %1131, label %1130

1130:                                             ; preds = %1125
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1128) #5
  br label %1131

1131:                                             ; preds = %1130, %1125
  %1132 = load i8*, i8** %703, align 8
  store i8* null, i8** %703, align 8
  %1133 = icmp eq i8* %1132, null
  br i1 %1133, label %1135, label %1134

1134:                                             ; preds = %1131
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1132) #5
  br label %1135

1135:                                             ; preds = %1134, %1131
  %1136 = load i8*, i8** %704, align 8
  store i8* null, i8** %704, align 8
  %1137 = icmp eq i8* %1136, null
  br i1 %1137, label %1139, label %1138

1138:                                             ; preds = %1135
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1136) #5
  br label %1139

1139:                                             ; preds = %1138, %1135
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %696) #5
  %1140 = load i8, i8* %692, align 1
  %1141 = icmp slt i8 %1140, 0
  br i1 %1141, label %1142, label %1144

1142:                                             ; preds = %1139
  %1143 = load i8*, i8** %700, align 8
  call void @_ZdlPv(i8* %1143) #25
  br label %1144

1144:                                             ; preds = %1142, %1139
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %690) #5
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %705) #5
  store i8 12, i8* %707, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %705, i8* align 1 getelementptr inbounds ([13 x i8], [13 x i8]* @.str.45, i64 0, i64 0), i64 12, i1 false) #5
  store i8 0, i8* %708, align 4
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %710) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %710, i8 -86, i64 96, i1 false) #5
  call void @_ZN3jxl18CreateHeatMapImageERKNS_5PlaneIfEEdd(%"class.jxl::Image3"* nonnull sret %7, %"class.jxl::Plane.1"* nonnull dereferenceable(32) %18, double %711, double %712) #5
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %699) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %699, i8 -86, i64 200, i1 false) #5
  %1145 = load i32, i32* %701, align 8
  %1146 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %699, i64 200, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull %13, i32 %1145) #5
  call void @_ZNK3jxl6AuxOut9DumpImageIfEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"* nonnull %4, i8* nonnull %699, %"class.jxl::Image3"* nonnull dereferenceable(96) %7) #5
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %699) #5
  %1147 = load i8*, i8** %714, align 8
  store i8* null, i8** %714, align 8
  %1148 = icmp eq i8* %1147, null
  br i1 %1148, label %1150, label %1149

1149:                                             ; preds = %1144
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1147) #5
  br label %1150

1150:                                             ; preds = %1149, %1144
  %1151 = load i8*, i8** %715, align 8
  store i8* null, i8** %715, align 8
  %1152 = icmp eq i8* %1151, null
  br i1 %1152, label %1154, label %1153

1153:                                             ; preds = %1150
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1151) #5
  br label %1154

1154:                                             ; preds = %1153, %1150
  %1155 = load i8*, i8** %716, align 8
  store i8* null, i8** %716, align 8
  %1156 = icmp eq i8* %1155, null
  br i1 %1156, label %1158, label %1157

1157:                                             ; preds = %1154
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1155) #5
  br label %1158

1158:                                             ; preds = %1157, %1154
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %710) #5
  %1159 = load i8, i8* %707, align 1
  %1160 = icmp slt i8 %1159, 0
  br i1 %1160, label %1161, label %1163

1161:                                             ; preds = %1158
  %1162 = load i8*, i8** %713, align 8
  call void @_ZdlPv(i8* %1162) #25
  br label %1163

1163:                                             ; preds = %1161, %1158
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %705) #5
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %717) #5
  store i8 10, i8* %719, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %717, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i64 0, i64 0), i64 10, i1 false) #5
  store i8 0, i8* %720, align 2
  %1164 = call double @_ZN3jxl23ButteraugliFuzzyInverseEd(double 1.500000e+00) #5
  %1165 = fptrunc double %1164 to float
  %1166 = call double @_ZN3jxl23ButteraugliFuzzyInverseEd(double 5.000000e-01) #5
  %1167 = fptrunc double %1166 to float
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %721) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %721, i8 -86, i64 96, i1 false) #5
  %1168 = fpext float %1165 to double
  %1169 = fpext float %1167 to double
  call void @_ZN3jxl18CreateHeatMapImageERKNS_5PlaneIfEEdd(%"class.jxl::Image3"* nonnull sret %9, %"class.jxl::Plane.1"* nonnull dereferenceable(32) %22, double %1168, double %1169) #5
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %699) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %699, i8 -86, i64 200, i1 false) #5
  %1170 = load i32, i32* %701, align 8
  %1171 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %699, i64 200, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull %14, i32 %1170) #5
  call void @_ZNK3jxl6AuxOut9DumpImageIfEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"* nonnull %4, i8* nonnull %699, %"class.jxl::Image3"* nonnull dereferenceable(96) %9) #5
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %699) #5
  %1172 = load i8*, i8** %723, align 8
  store i8* null, i8** %723, align 8
  %1173 = icmp eq i8* %1172, null
  br i1 %1173, label %1175, label %1174

1174:                                             ; preds = %1163
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1172) #5
  br label %1175

1175:                                             ; preds = %1174, %1163
  %1176 = load i8*, i8** %724, align 8
  store i8* null, i8** %724, align 8
  %1177 = icmp eq i8* %1176, null
  br i1 %1177, label %1179, label %1178

1178:                                             ; preds = %1175
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1176) #5
  br label %1179

1179:                                             ; preds = %1178, %1175
  %1180 = load i8*, i8** %725, align 8
  store i8* null, i8** %725, align 8
  %1181 = icmp eq i8* %1180, null
  br i1 %1181, label %1183, label %1182

1182:                                             ; preds = %1179
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1180) #5
  br label %1183

1183:                                             ; preds = %1182, %1179
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %721) #5
  %1184 = load i8, i8* %719, align 1
  %1185 = icmp slt i8 %1184, 0
  br i1 %1185, label %1186, label %1188

1186:                                             ; preds = %1183
  %1187 = load i8*, i8** %722, align 8
  call void @_ZdlPv(i8* %1187) #25
  br label %1188

1188:                                             ; preds = %1186, %1183
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %717) #5
  %1189 = load i8*, i8** %686, align 8
  store i8* null, i8** %686, align 8
  %1190 = icmp eq i8* %1189, null
  br i1 %1190, label %1231, label %1191

1191:                                             ; preds = %1188
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1189) #5
  br label %1231

1192:                                             ; preds = %1215, %1123
  %1193 = phi i32 [ %1121, %1123 ], [ %1216, %1215 ]
  %1194 = phi i32 [ %1124, %1123 ], [ %1217, %1215 ]
  %1195 = phi i64 [ 0, %1123 ], [ %1218, %1215 ]
  %1196 = load i8*, i8** %688, align 8
  %1197 = load i64, i64* %689, align 8
  %1198 = mul i64 %1197, %1195
  %1199 = getelementptr inbounds i8, i8* %1196, i64 %1198
  %1200 = ptrtoint i8* %1199 to i64
  %1201 = and i64 %1200, 63
  %1202 = icmp eq i64 %1201, 0
  call void @llvm.assume(i1 %1202) #5
  %1203 = bitcast i8* %1199 to float*
  %1204 = load i8*, i8** %686, align 8
  %1205 = load i64, i64* %685, align 8
  %1206 = mul i64 %1205, %1195
  %1207 = getelementptr inbounds i8, i8* %1204, i64 %1206
  %1208 = ptrtoint i8* %1207 to i64
  %1209 = and i64 %1208, 63
  %1210 = icmp eq i64 %1209, 0
  call void @llvm.assume(i1 %1210) #5
  %1211 = bitcast i8* %1207 to float*
  %1212 = icmp eq i32 %1194, 0
  br i1 %1212, label %1215, label %1221

1213:                                             ; preds = %1221
  %1214 = load i32, i32* %508, align 4
  br label %1215

1215:                                             ; preds = %1213, %1192
  %1216 = phi i32 [ %1214, %1213 ], [ %1193, %1192 ]
  %1217 = phi i32 [ %1228, %1213 ], [ 0, %1192 ]
  %1218 = add nuw nsw i64 %1195, 1
  %1219 = zext i32 %1216 to i64
  %1220 = icmp ult i64 %1218, %1219
  br i1 %1220, label %1192, label %1125

1221:                                             ; preds = %1192, %1221
  %1222 = phi i64 [ %1227, %1221 ], [ 0, %1192 ]
  %1223 = getelementptr inbounds float, float* %1203, i64 %1222
  %1224 = load float, float* %1223, align 4
  %1225 = fdiv float 1.000000e+00, %1224
  %1226 = getelementptr inbounds float, float* %1211, i64 %1222
  store float %1225, float* %1226, align 4
  %1227 = add nuw nsw i64 %1222, 1
  %1228 = load i32, i32* %507, align 8
  %1229 = zext i32 %1228 to i64
  %1230 = icmp ult i64 %1227, %1229
  br i1 %1230, label %1221, label %1213

1231:                                             ; preds = %1191, %1188
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %684) #5
  br label %1232

1232:                                             ; preds = %1231, %1113, %1067
  %1233 = load i32, i32* %701, align 8
  %1234 = add nsw i32 %1233, 1
  store i32 %1234, i32* %701, align 8
  br label %1235

1235:                                             ; preds = %1232, %1059
  %1236 = icmp eq i64 %738, %731
  br i1 %1236, label %1465, label %1237

1237:                                             ; preds = %1235
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %726) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %735, i8 0, i64 48, i1 false) #5
  store <2 x double> <double 2.000000e-01, double 2.000000e-01>, <2 x double>* %736, align 16
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %727) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %727, i8 0, i64 64, i1 false) #5
  %1238 = icmp eq i64 %738, 1
  br i1 %1238, label %1239, label %1299

1239:                                             ; preds = %1237
  %1240 = load i32, i32* %508, align 4
  %1241 = icmp eq i32 %1240, 0
  br i1 %1241, label %1301, label %1242

1242:                                             ; preds = %1239
  %1243 = load i32, i32* %507, align 8
  br label %1244

1244:                                             ; preds = %1267, %1242
  %1245 = phi i32 [ %1268, %1267 ], [ %1240, %1242 ]
  %1246 = phi i32 [ %1269, %1267 ], [ %1243, %1242 ]
  %1247 = phi i64 [ %1270, %1267 ], [ 0, %1242 ]
  %1248 = load i8*, i8** %688, align 8
  %1249 = load i64, i64* %689, align 8
  %1250 = mul i64 %1249, %1247
  %1251 = getelementptr inbounds i8, i8* %1248, i64 %1250
  %1252 = ptrtoint i8* %1251 to i64
  %1253 = and i64 %1252, 63
  %1254 = icmp eq i64 %1253, 0
  call void @llvm.assume(i1 %1254) #5
  %1255 = bitcast i8* %1251 to float*
  %1256 = load i8*, i8** %520, align 8
  %1257 = load i64, i64* %519, align 8
  %1258 = mul i64 %1257, %1247
  %1259 = getelementptr inbounds i8, i8* %1256, i64 %1258
  %1260 = ptrtoint i8* %1259 to i64
  %1261 = and i64 %1260, 63
  %1262 = icmp eq i64 %1261, 0
  call void @llvm.assume(i1 %1262) #5
  %1263 = bitcast i8* %1259 to float*
  %1264 = icmp eq i32 %1246, 0
  br i1 %1264, label %1267, label %1273

1265:                                             ; preds = %1294
  %1266 = load i32, i32* %508, align 4
  br label %1267

1267:                                             ; preds = %1265, %1244
  %1268 = phi i32 [ %1266, %1265 ], [ %1245, %1244 ]
  %1269 = phi i32 [ %1296, %1265 ], [ 0, %1244 ]
  %1270 = add nuw nsw i64 %1247, 1
  %1271 = zext i32 %1268 to i64
  %1272 = icmp ult i64 %1270, %1271
  br i1 %1272, label %1244, label %1299

1273:                                             ; preds = %1244, %1294
  %1274 = phi i64 [ %1295, %1294 ], [ 0, %1244 ]
  %1275 = getelementptr inbounds float, float* %1255, i64 %1274
  %1276 = load float, float* %1275, align 4
  %1277 = getelementptr inbounds float, float* %1263, i64 %1274
  %1278 = load float, float* %1277, align 4
  %1279 = insertelement <2 x float> undef, float %1276, i32 0
  %1280 = insertelement <2 x float> %1279, float %1278, i32 1
  %1281 = fpext <2 x float> %1280 to <2 x double>
  %1282 = fmul <2 x double> %1281, <double 4.000000e-01, double 6.000000e-01>
  %1283 = extractelement <2 x double> %1282, i32 0
  %1284 = extractelement <2 x double> %1282, i32 1
  %1285 = fadd double %1283, %1284
  %1286 = extractelement <2 x double> %1281, i32 0
  %1287 = fcmp ogt double %1285, %1286
  br i1 %1287, label %1288, label %1294

1288:                                             ; preds = %1273
  %1289 = fptrunc double %1285 to float
  %1290 = fcmp olt float %622, %1289
  %1291 = select i1 %1290, float %622, float %1289
  store float %1291, float* %1275, align 4
  %1292 = fcmp olt float %1291, %620
  br i1 %1292, label %1293, label %1294

1293:                                             ; preds = %1288
  store float %620, float* %1275, align 4
  br label %1294

1294:                                             ; preds = %1293, %1288, %1273
  %1295 = add nuw nsw i64 %1274, 1
  %1296 = load i32, i32* %507, align 8
  %1297 = zext i32 %1296 to i64
  %1298 = icmp ult i64 %1295, %1297
  br i1 %1298, label %1273, label %1265

1299:                                             ; preds = %1267, %1237
  %1300 = icmp ult i64 %738, 7
  br i1 %1300, label %1301, label %1314

1301:                                             ; preds = %1299, %1239
  %1302 = getelementptr inbounds [8 x double], [8 x double]* %27, i64 0, i64 %738
  %1303 = load double, double* %1302, align 8
  %1304 = getelementptr inbounds [8 x double], [8 x double]* %28, i64 0, i64 %738
  %1305 = load double, double* %1304, align 8
  %1306 = fmul double %728, %1305
  %1307 = fadd double %1303, %1306
  %1308 = fcmp ugt double %1307, 0.000000e+00
  br i1 %1308, label %1309, label %1314

1309:                                             ; preds = %1301
  %1310 = load i32, i32* %508, align 4
  %1311 = icmp eq i32 %1310, 0
  br i1 %1311, label %1458, label %1312

1312:                                             ; preds = %1309
  %1313 = load i32, i32* %507, align 8
  br label %1384

1314:                                             ; preds = %1301, %1299
  %1315 = load i32, i32* %508, align 4
  %1316 = icmp eq i32 %1315, 0
  br i1 %1316, label %1458, label %1317

1317:                                             ; preds = %1314
  %1318 = load i32, i32* %507, align 8
  br label %1319

1319:                                             ; preds = %1342, %1317
  %1320 = phi i32 [ %1343, %1342 ], [ %1315, %1317 ]
  %1321 = phi i32 [ %1344, %1342 ], [ %1318, %1317 ]
  %1322 = phi i64 [ %1345, %1342 ], [ 0, %1317 ]
  %1323 = load i8*, i8** %516, align 8
  %1324 = load i64, i64* %515, align 8
  %1325 = mul i64 %1324, %1322
  %1326 = getelementptr inbounds i8, i8* %1323, i64 %1325
  %1327 = ptrtoint i8* %1326 to i64
  %1328 = and i64 %1327, 63
  %1329 = icmp eq i64 %1328, 0
  call void @llvm.assume(i1 %1329) #5
  %1330 = bitcast i8* %1326 to float*
  %1331 = load i8*, i8** %688, align 8
  %1332 = load i64, i64* %689, align 8
  %1333 = mul i64 %1332, %1322
  %1334 = getelementptr inbounds i8, i8* %1331, i64 %1333
  %1335 = ptrtoint i8* %1334 to i64
  %1336 = and i64 %1335, 63
  %1337 = icmp eq i64 %1336, 0
  call void @llvm.assume(i1 %1337) #5
  %1338 = bitcast i8* %1334 to float*
  %1339 = icmp eq i32 %1321, 0
  br i1 %1339, label %1342, label %1348

1340:                                             ; preds = %1379
  %1341 = load i32, i32* %508, align 4
  br label %1342

1342:                                             ; preds = %1340, %1319
  %1343 = phi i32 [ %1341, %1340 ], [ %1320, %1319 ]
  %1344 = phi i32 [ %1381, %1340 ], [ 0, %1319 ]
  %1345 = add nuw nsw i64 %1322, 1
  %1346 = zext i32 %1343 to i64
  %1347 = icmp ult i64 %1345, %1346
  br i1 %1347, label %1319, label %1458

1348:                                             ; preds = %1319, %1379
  %1349 = phi i64 [ %1380, %1379 ], [ 0, %1319 ]
  %1350 = getelementptr inbounds float, float* %1330, i64 %1349
  %1351 = load float, float* %1350, align 4
  %1352 = fdiv float %1351, %459
  %1353 = fcmp ogt float %1352, 1.000000e+00
  %1354 = getelementptr inbounds float, float* %1338, i64 %1349
  %1355 = load float, float* %1354, align 4
  br i1 %1353, label %1356, label %1371

1356:                                             ; preds = %1348
  %1357 = fmul float %1352, %1355
  store float %1357, float* %1354, align 4
  %1358 = load float, float* %729, align 8
  %1359 = fmul float %1355, %1358
  %1360 = fpext float %1359 to double
  %1361 = fadd double %1360, 5.000000e-01
  %1362 = fptosi double %1361 to i32
  %1363 = fmul float %1357, %1358
  %1364 = fpext float %1363 to double
  %1365 = fadd double %1364, 5.000000e-01
  %1366 = fptosi double %1365 to i32
  %1367 = icmp eq i32 %1362, %1366
  br i1 %1367, label %1368, label %1371

1368:                                             ; preds = %1356
  %1369 = load float, float* %730, align 4
  %1370 = fadd float %1355, %1369
  store float %1370, float* %1354, align 4
  br label %1371

1371:                                             ; preds = %1368, %1356, %1348
  %1372 = phi float [ %1357, %1356 ], [ %1370, %1368 ], [ %1355, %1348 ]
  %1373 = fcmp ogt float %1372, %622
  %1374 = select i1 %1373, float %622, float %1372
  %1375 = fcmp olt float %1374, %620
  %1376 = or i1 %1373, %1375
  br i1 %1376, label %1377, label %1379

1377:                                             ; preds = %1371
  %1378 = select i1 %1375, float %620, float %1374
  store float %1378, float* %1354, align 4
  br label %1379

1379:                                             ; preds = %1377, %1371
  %1380 = add nuw nsw i64 %1349, 1
  %1381 = load i32, i32* %507, align 8
  %1382 = zext i32 %1381 to i64
  %1383 = icmp ult i64 %1380, %1382
  br i1 %1383, label %1348, label %1340

1384:                                             ; preds = %1407, %1312
  %1385 = phi i32 [ %1408, %1407 ], [ %1310, %1312 ]
  %1386 = phi i32 [ %1409, %1407 ], [ %1313, %1312 ]
  %1387 = phi i64 [ %1410, %1407 ], [ 0, %1312 ]
  %1388 = load i8*, i8** %516, align 8
  %1389 = load i64, i64* %515, align 8
  %1390 = mul i64 %1389, %1387
  %1391 = getelementptr inbounds i8, i8* %1388, i64 %1390
  %1392 = ptrtoint i8* %1391 to i64
  %1393 = and i64 %1392, 63
  %1394 = icmp eq i64 %1393, 0
  call void @llvm.assume(i1 %1394) #5
  %1395 = bitcast i8* %1391 to float*
  %1396 = load i8*, i8** %688, align 8
  %1397 = load i64, i64* %689, align 8
  %1398 = mul i64 %1397, %1387
  %1399 = getelementptr inbounds i8, i8* %1396, i64 %1398
  %1400 = ptrtoint i8* %1399 to i64
  %1401 = and i64 %1400, 63
  %1402 = icmp eq i64 %1401, 0
  call void @llvm.assume(i1 %1402) #5
  %1403 = bitcast i8* %1399 to float*
  %1404 = icmp eq i32 %1386, 0
  br i1 %1404, label %1407, label %1413

1405:                                             ; preds = %1453
  %1406 = load i32, i32* %508, align 4
  br label %1407

1407:                                             ; preds = %1405, %1384
  %1408 = phi i32 [ %1406, %1405 ], [ %1385, %1384 ]
  %1409 = phi i32 [ %1455, %1405 ], [ 0, %1384 ]
  %1410 = add nuw nsw i64 %1387, 1
  %1411 = zext i32 %1408 to i64
  %1412 = icmp ult i64 %1410, %1411
  br i1 %1412, label %1384, label %1458

1413:                                             ; preds = %1384, %1453
  %1414 = phi i64 [ %1454, %1453 ], [ 0, %1384 ]
  %1415 = getelementptr inbounds float, float* %1395, i64 %1414
  %1416 = load float, float* %1415, align 4
  %1417 = fdiv float %1416, %459
  %1418 = fcmp ugt float %1417, 1.000000e+00
  br i1 %1418, label %1427, label %1419

1419:                                             ; preds = %1413
  %1420 = fpext float %1417 to double
  %1421 = call double @pow(double %1420, double %1307) #5
  %1422 = getelementptr inbounds float, float* %1403, i64 %1414
  %1423 = load float, float* %1422, align 4
  %1424 = fpext float %1423 to double
  %1425 = fmul double %1421, %1424
  %1426 = fptrunc double %1425 to float
  store float %1426, float* %1422, align 4
  br label %1444

1427:                                             ; preds = %1413
  %1428 = getelementptr inbounds float, float* %1403, i64 %1414
  %1429 = load float, float* %1428, align 4
  %1430 = fmul float %1417, %1429
  store float %1430, float* %1428, align 4
  %1431 = load float, float* %729, align 8
  %1432 = fmul float %1429, %1431
  %1433 = fpext float %1432 to double
  %1434 = fadd double %1433, 5.000000e-01
  %1435 = fptosi double %1434 to i32
  %1436 = fmul float %1430, %1431
  %1437 = fpext float %1436 to double
  %1438 = fadd double %1437, 5.000000e-01
  %1439 = fptosi double %1438 to i32
  %1440 = icmp eq i32 %1435, %1439
  br i1 %1440, label %1441, label %1444

1441:                                             ; preds = %1427
  %1442 = load float, float* %730, align 4
  %1443 = fadd float %1429, %1442
  store float %1443, float* %1428, align 4
  br label %1444

1444:                                             ; preds = %1441, %1427, %1419
  %1445 = phi float [ %1430, %1427 ], [ %1443, %1441 ], [ %1426, %1419 ]
  %1446 = fcmp ogt float %1445, %622
  %1447 = select i1 %1446, float %622, float %1445
  %1448 = fcmp olt float %1447, %620
  %1449 = or i1 %1446, %1448
  br i1 %1449, label %1450, label %1453

1450:                                             ; preds = %1444
  %1451 = select i1 %1448, float %620, float %1447
  %1452 = getelementptr inbounds float, float* %1403, i64 %1414
  store float %1451, float* %1452, align 4
  br label %1453

1453:                                             ; preds = %1450, %1444
  %1454 = add nuw nsw i64 %1414, 1
  %1455 = load i32, i32* %507, align 8
  %1456 = zext i32 %1455 to i64
  %1457 = icmp ult i64 %1454, %1456
  br i1 %1457, label %1413, label %1405

1458:                                             ; preds = %1342, %1407, %1314, %1309
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %727) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %726) #5
  %1459 = load i8*, i8** %644, align 8
  store i8* null, i8** %644, align 8
  %1460 = icmp eq i8* %1459, null
  br i1 %1460, label %1462, label %1461

1461:                                             ; preds = %1458
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1459) #5
  br label %1462

1462:                                             ; preds = %1461, %1458
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %640) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %639) #5
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %20) #5
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %638) #5
  %1463 = add nuw nsw i64 %738, 1
  %1464 = icmp eq i64 %1463, %733
  br i1 %1464, label %1470, label %737

1465:                                             ; preds = %1235
  %1466 = load i8*, i8** %644, align 8
  store i8* null, i8** %644, align 8
  %1467 = icmp eq i8* %1466, null
  br i1 %1467, label %1469, label %1468

1468:                                             ; preds = %1465
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1466) #5
  br label %1469

1469:                                             ; preds = %1468, %1465
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %640) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %639) #5
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %20) #5
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %638) #5
  br label %1470

1470:                                             ; preds = %1462, %1469, %628
  call void @_ZN3jxl9Quantizer13SetQuantFieldEfRKNS_5PlaneIfEEPNS1_IiEE(%"class.jxl::Quantizer"* %455, float %504, %"class.jxl::Plane.1"* dereferenceable(32) %457, %"class.jxl::Plane.132"* %456) #5
  %1471 = load i8*, i8** %520, align 8
  store i8* null, i8** %520, align 8
  %1472 = icmp eq i8* %1471, null
  br i1 %1472, label %1474, label %1473

1473:                                             ; preds = %1470
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1471) #5
  br label %1474

1474:                                             ; preds = %1473, %1470
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %517) #5
  %1475 = load i8*, i8** %516, align 8
  store i8* null, i8** %516, align 8
  %1476 = icmp eq i8* %1475, null
  br i1 %1476, label %1478, label %1477

1477:                                             ; preds = %1474
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1475) #5
  br label %1478

1478:                                             ; preds = %1477, %1474
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %514) #5
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN3jxl24JxlButteraugliComparatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %479, align 8
  %1479 = load %"class.jxl::ButteraugliComparator"*, %"class.jxl::ButteraugliComparator"** %484, align 8
  store %"class.jxl::ButteraugliComparator"* null, %"class.jxl::ButteraugliComparator"** %484, align 8
  %1480 = icmp eq %"class.jxl::ButteraugliComparator"* %1479, null
  br i1 %1480, label %1486, label %1481

1481:                                             ; preds = %1478
  %1482 = bitcast %"class.jxl::ButteraugliComparator"* %1479 to void (%"class.jxl::ButteraugliComparator"*)***
  %1483 = load void (%"class.jxl::ButteraugliComparator"*)**, void (%"class.jxl::ButteraugliComparator"*)*** %1482, align 8
  %1484 = getelementptr inbounds void (%"class.jxl::ButteraugliComparator"*)*, void (%"class.jxl::ButteraugliComparator"*)** %1483, i64 1
  %1485 = load void (%"class.jxl::ButteraugliComparator"*)*, void (%"class.jxl::ButteraugliComparator"*)** %1484, align 8
  call void %1485(%"class.jxl::ButteraugliComparator"* nonnull %1479) #5
  br label %1486

1486:                                             ; preds = %1478, %1481
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %478) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %460) #5
  br label %1487

1487:                                             ; preds = %450, %1486, %449
  ret void

1488:                                             ; preds = %310
  %1489 = load i8*, i8** %120, align 8
  %1490 = ptrtoint i8* %1489 to i64
  %1491 = and i64 %1490, 63
  %1492 = icmp eq i64 %1491, 0
  %1493 = load i8*, i8** %121, align 8
  %1494 = ptrtoint i8* %1493 to i64
  %1495 = and i64 %1494, 63
  %1496 = icmp eq i64 %1495, 0
  br label %1497

1497:                                             ; preds = %1555, %1488
  %1498 = phi float [ %311, %1488 ], [ %1556, %1555 ]
  %1499 = phi i64 [ %230, %1488 ], [ %1557, %1555 ]
  br i1 %258, label %1503, label %1500

1500:                                             ; preds = %1497
  %1501 = load i32, i32* %259, align 4
  %1502 = sext i32 %1501 to i64
  br label %1507

1503:                                             ; preds = %1497
  br i1 %276, label %1507, label %1504

1504:                                             ; preds = %1503
  %1505 = load i32, i32* %266, align 4
  %1506 = zext i32 %1505 to i64
  br label %1507

1507:                                             ; preds = %1504, %1503, %1500
  %1508 = phi i64 [ %1502, %1500 ], [ %1506, %1504 ], [ %261, %1503 ]
  %1509 = icmp ult i64 %1499, %1508
  br i1 %1509, label %1510, label %1555

1510:                                             ; preds = %1507
  %1511 = mul i64 %1499, %267
  call void @llvm.assume(i1 %1492) #5
  %1512 = getelementptr inbounds i8, i8* %1489, i64 %1511
  %1513 = ptrtoint i8* %1512 to i64
  %1514 = and i64 %1513, 63
  %1515 = icmp eq i64 %1514, 0
  call void @llvm.assume(i1 %1515) #5
  %1516 = bitcast i8* %1512 to float*
  %1517 = mul i64 %1499, %268
  call void @llvm.assume(i1 %1496) #5
  %1518 = getelementptr inbounds i8, i8* %1493, i64 %1517
  %1519 = ptrtoint i8* %1518 to i64
  %1520 = and i64 %1519, 63
  %1521 = icmp eq i64 %1520, 0
  call void @llvm.assume(i1 %1521) #5
  %1522 = bitcast i8* %1518 to float*
  %1523 = load i8, i8* %270, align 1
  %1524 = zext i8 %1523 to i64
  %1525 = add i64 %243, %1524
  %1526 = shl i64 %1525, 3
  %1527 = icmp ult i64 %269, %1526
  br i1 %1527, label %1528, label %1555

1528:                                             ; preds = %1510, %1551
  %1529 = phi float [ %1552, %1551 ], [ %1498, %1510 ]
  %1530 = phi i64 [ %1553, %1551 ], [ %269, %1510 ]
  br i1 %258, label %1534, label %1531

1531:                                             ; preds = %1528
  %1532 = load i32, i32* %271, align 8
  %1533 = sext i32 %1532 to i64
  br label %1538

1534:                                             ; preds = %1528
  br i1 %277, label %1538, label %1535

1535:                                             ; preds = %1534
  %1536 = load i32, i32* %275, align 8
  %1537 = zext i32 %1536 to i64
  br label %1538

1538:                                             ; preds = %1535, %1534, %1531
  %1539 = phi i64 [ %1533, %1531 ], [ %1537, %1535 ], [ %273, %1534 ]
  %1540 = icmp ult i64 %1530, %1539
  br i1 %1540, label %1541, label %1551

1541:                                             ; preds = %1538
  %1542 = getelementptr inbounds float, float* %1516, i64 %1530
  %1543 = load float, float* %1542, align 4
  %1544 = getelementptr inbounds float, float* %1522, i64 %1530
  %1545 = load float, float* %1544, align 4
  %1546 = fsub float %1543, %1545
  %1547 = call float @llvm.fabs.f32(float %1546) #5
  %1548 = fmul float %208, %1547
  %1549 = fcmp olt float %1548, %1529
  %1550 = select i1 %1549, float %1529, float %1548
  br label %1551

1551:                                             ; preds = %1541, %1538
  %1552 = phi float [ %1529, %1538 ], [ %1550, %1541 ]
  %1553 = add nuw i64 %1530, 1
  %1554 = icmp eq i64 %1553, %1526
  br i1 %1554, label %1555, label %1528

1555:                                             ; preds = %1551, %1510, %1507
  %1556 = phi float [ %1498, %1507 ], [ %1498, %1510 ], [ %1552, %1551 ]
  %1557 = add nuw i64 %1499, 1
  %1558 = icmp eq i64 %1557, %255
  br i1 %1558, label %1559, label %1497

1559:                                             ; preds = %1555, %310
  %1560 = phi float [ %311, %310 ], [ %1556, %1555 ]
  br i1 %256, label %1561, label %1632

1561:                                             ; preds = %1559
  %1562 = load i8*, i8** %123, align 8
  %1563 = ptrtoint i8* %1562 to i64
  %1564 = and i64 %1563, 63
  %1565 = icmp eq i64 %1564, 0
  %1566 = load i8*, i8** %124, align 8
  %1567 = ptrtoint i8* %1566 to i64
  %1568 = and i64 %1567, 63
  %1569 = icmp eq i64 %1568, 0
  br label %1570

1570:                                             ; preds = %1628, %1561
  %1571 = phi float [ %1560, %1561 ], [ %1629, %1628 ]
  %1572 = phi i64 [ %230, %1561 ], [ %1630, %1628 ]
  br i1 %258, label %1576, label %1573

1573:                                             ; preds = %1570
  %1574 = load i32, i32* %259, align 4
  %1575 = sext i32 %1574 to i64
  br label %1580

1576:                                             ; preds = %1570
  br i1 %276, label %1580, label %1577

1577:                                             ; preds = %1576
  %1578 = load i32, i32* %266, align 4
  %1579 = zext i32 %1578 to i64
  br label %1580

1580:                                             ; preds = %1577, %1576, %1573
  %1581 = phi i64 [ %1575, %1573 ], [ %1579, %1577 ], [ %261, %1576 ]
  %1582 = icmp ult i64 %1572, %1581
  br i1 %1582, label %1583, label %1628

1583:                                             ; preds = %1580
  %1584 = mul i64 %1572, %267
  call void @llvm.assume(i1 %1565) #5
  %1585 = getelementptr inbounds i8, i8* %1562, i64 %1584
  %1586 = ptrtoint i8* %1585 to i64
  %1587 = and i64 %1586, 63
  %1588 = icmp eq i64 %1587, 0
  call void @llvm.assume(i1 %1588) #5
  %1589 = bitcast i8* %1585 to float*
  %1590 = mul i64 %1572, %268
  call void @llvm.assume(i1 %1569) #5
  %1591 = getelementptr inbounds i8, i8* %1566, i64 %1590
  %1592 = ptrtoint i8* %1591 to i64
  %1593 = and i64 %1592, 63
  %1594 = icmp eq i64 %1593, 0
  call void @llvm.assume(i1 %1594) #5
  %1595 = bitcast i8* %1591 to float*
  %1596 = load i8, i8* %270, align 1
  %1597 = zext i8 %1596 to i64
  %1598 = add i64 %243, %1597
  %1599 = shl i64 %1598, 3
  %1600 = icmp ult i64 %269, %1599
  br i1 %1600, label %1601, label %1628

1601:                                             ; preds = %1583, %1624
  %1602 = phi float [ %1625, %1624 ], [ %1571, %1583 ]
  %1603 = phi i64 [ %1626, %1624 ], [ %269, %1583 ]
  br i1 %258, label %1607, label %1604

1604:                                             ; preds = %1601
  %1605 = load i32, i32* %271, align 8
  %1606 = sext i32 %1605 to i64
  br label %1611

1607:                                             ; preds = %1601
  br i1 %277, label %1611, label %1608

1608:                                             ; preds = %1607
  %1609 = load i32, i32* %275, align 8
  %1610 = zext i32 %1609 to i64
  br label %1611

1611:                                             ; preds = %1608, %1607, %1604
  %1612 = phi i64 [ %1606, %1604 ], [ %1610, %1608 ], [ %273, %1607 ]
  %1613 = icmp ult i64 %1603, %1612
  br i1 %1613, label %1614, label %1624

1614:                                             ; preds = %1611
  %1615 = getelementptr inbounds float, float* %1589, i64 %1603
  %1616 = load float, float* %1615, align 4
  %1617 = getelementptr inbounds float, float* %1595, i64 %1603
  %1618 = load float, float* %1617, align 4
  %1619 = fsub float %1616, %1618
  %1620 = call float @llvm.fabs.f32(float %1619) #5
  %1621 = fmul float %209, %1620
  %1622 = fcmp olt float %1621, %1602
  %1623 = select i1 %1622, float %1602, float %1621
  br label %1624

1624:                                             ; preds = %1614, %1611
  %1625 = phi float [ %1602, %1611 ], [ %1623, %1614 ]
  %1626 = add nuw i64 %1603, 1
  %1627 = icmp eq i64 %1626, %1599
  br i1 %1627, label %1628, label %1601

1628:                                             ; preds = %1624, %1583, %1580
  %1629 = phi float [ %1571, %1580 ], [ %1571, %1583 ], [ %1625, %1624 ]
  %1630 = add nuw i64 %1572, 1
  %1631 = icmp eq i64 %1630, %255
  br i1 %1631, label %1632, label %1570

1632:                                             ; preds = %1628, %1559
  %1633 = phi float [ %1560, %1559 ], [ %1629, %1628 ]
  %1634 = fcmp olt float %1633, 5.000000e-01
  %1635 = fmul float %1633, 2.000000e+00
  %1636 = fcmp ogt float %1633, 1.000000e+00
  %1637 = select i1 %1636, float %1633, float 1.000000e+00
  %1638 = select i1 %1634, float %1635, float %1637
  %1639 = icmp ult i64 %220, %254
  br i1 %1639, label %278, label %444
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl14RoundtripImageERKNS_6Image3IfEEPNS_18PassesEncoderStateEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* noalias sret, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::PassesEncoderState"*, %"class.jxl::ThreadPool"*) local_unnamed_addr #0 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.546", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.546", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca %"struct.jxl::PassesEncoderState"*, align 8
  %10 = alloca %"class.std::__1::unique_ptr.258", align 8
  %11 = alloca %"class.jxl::Image3", align 8
  %12 = alloca %"class.std::__1::vector.87", align 16
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca %"class.std::__1::unique_ptr.395", align 8
  %16 = alloca %class.anon, align 8
  %17 = alloca %class.anon.404, align 8
  store %"struct.jxl::PassesEncoderState"* %2, %"struct.jxl::PassesEncoderState"** %9, align 8
  %18 = bitcast %"class.std::__1::unique_ptr.258"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #5
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr.258", %"class.std::__1::unique_ptr.258"* %10, i64 0, i32 0, i32 0, i32 0
  %20 = tail call i8* @_Znwm(i64 10512) #25
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 0, i64 10512, i1 false) #5
  %21 = bitcast i8* %20 to %"struct.jxl::PassesSharedState"*
  tail call void @_ZN3jxl17PassesSharedStateC2Ev(%"struct.jxl::PassesSharedState"* nonnull %21) #5
  %22 = getelementptr inbounds i8, i8* %20, i64 4152
  %23 = bitcast i8* %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds i8, i8* %20, i64 4160
  %25 = bitcast i8* %24 to i64*
  store i64 1, i64* %25, align 8
  %26 = getelementptr inbounds i8, i8* %20, i64 5768
  %27 = bitcast i8* %26 to i64*
  store i64 1, i64* %27, align 8
  %28 = getelementptr inbounds i8, i8* %20, i64 7376
  %29 = bitcast i8* %28 to i64*
  store i64 1, i64* %29, align 8
  %30 = getelementptr inbounds i8, i8* %20, i64 8984
  %31 = getelementptr inbounds i8, i8* %20, i64 9256
  %32 = getelementptr inbounds i8, i8* %20, i64 9576
  %33 = bitcast i8* %32 to i64*
  store i64 0, i64* %33, align 8
  %34 = getelementptr inbounds i8, i8* %20, i64 9608
  %35 = bitcast i8* %34 to void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 264, i1 false) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 312, i1 false) #5
  store void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* @_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm, void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)** %35, align 8
  %36 = getelementptr inbounds i8, i8* %20, i64 9616
  %37 = bitcast i8* %36 to %"struct.std::__1::__function::__policy"**
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %37, align 8
  %38 = getelementptr inbounds i8, i8* %20, i64 9624
  %39 = getelementptr inbounds i8, i8* %20, i64 9688
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 60, i1 false) #5
  %40 = tail call i8* @_Znwm(i64 104) #25
  %41 = bitcast i8* %40 to %"class.jxl::ACImageT"*
  tail call void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT"* nonnull %41, i64 0, i64 0) #5
  %42 = ptrtoint i8* %40 to i64
  %43 = bitcast i8* %39 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds i8, i8* %20, i64 9696
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %20, i64 9760
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 32, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %20, i64 9936
  %47 = getelementptr inbounds i8, i8* %20, i64 10160
  %48 = bitcast i8* %47 to %"struct.jxl::ColorEncoding"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 224, i1 false) #5
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %48) #5
  %49 = getelementptr inbounds i8, i8* %20, i64 10508
  store i8 1, i8* %49, align 4
  %50 = getelementptr inbounds i8, i8* %20, i64 10509
  store i8 0, i8* %50, align 1
  %51 = bitcast %"class.std::__1::unique_ptr.258"* %10 to i8**
  store i8* %20, i8** %51, align 8
  %52 = bitcast i8* %47 to %"struct.jxl::OutputEncodingInfo"*
  %53 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 0
  %54 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %53, align 8
  %55 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %54, i64 0, i32 0
  %56 = tail call i32 @_ZN3jxl18OutputEncodingInfo3SetERKNS_13ImageMetadataE(%"struct.jxl::OutputEncodingInfo"* %52, %"struct.jxl::ImageMetadata"* dereferenceable(1600) %55) #5
  %57 = icmp eq i32 %56, 0
  %58 = bitcast i8* %20 to %"struct.jxl::PassesDecoderState"*
  br i1 %57, label %62, label %59

59:                                               ; preds = %4
  %60 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 976, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.5, i64 0, i64 0)) #5
  %61 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

62:                                               ; preds = %4
  %63 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0
  %64 = getelementptr inbounds i8, i8* %20, i64 4152
  %65 = bitcast i8* %64 to %"struct.jxl::PassesSharedState"**
  store %"struct.jxl::PassesSharedState"* %63, %"struct.jxl::PassesSharedState"** %65, align 8
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  %69 = and i64 %68, 7
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %62
  %72 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 978, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0)) #5
  %73 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

74:                                               ; preds = %62
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  %76 = load i32, i32* %75, align 8
  %77 = zext i32 %76 to i64
  %78 = add nuw nsw i64 %77, 255
  %79 = lshr i64 %78, 8
  %80 = add nuw nsw i64 %68, 255
  %81 = lshr i64 %80, 8
  %82 = mul nuw nsw i64 %79, %81
  %83 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 4
  %84 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 4, i32 0, i32 1
  %85 = bitcast %"class.std::__1::unique_ptr.193"** %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"class.std::__1::vector.191"* %83 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = sub i64 %86, %88
  %90 = ashr exact i64 %89, 3
  %91 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 1
  %92 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 6
  %93 = tail call i8* @_Znwm(i64 928) #25
  %94 = bitcast i8* %93 to %"class.jxl::ModularFrameEncoder"*
  tail call void @_ZN3jxl19ModularFrameEncoderC1ERKNS_11FrameHeaderERKNS_14CompressParamsE(%"class.jxl::ModularFrameEncoder"* nonnull %94, %"struct.jxl::FrameHeader"* dereferenceable(576) %91, %"struct.jxl::CompressParams"* dereferenceable(360) %92) #5
  tail call void @_ZN3jxl23InitializePassesEncoderERKNS_6Image3IfEEPNS_10ThreadPoolEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutE(%"class.jxl::Image3"* dereferenceable(96) %1, %"class.jxl::ThreadPool"* %3, %"struct.jxl::PassesEncoderState"* %2, %"class.jxl::ModularFrameEncoder"* nonnull %94, %"struct.jxl::AuxOut"* null) #5
  tail call void @_ZN3jxl18PassesDecoderState4InitEv(%"struct.jxl::PassesDecoderState"* nonnull %58)
  tail call void @_ZN3jxl18PassesDecoderState9InitForACEPNS_10ThreadPoolE(%"struct.jxl::PassesDecoderState"* nonnull %58, %"class.jxl::ThreadPool"* %3)
  %95 = bitcast %"class.jxl::ImageBundle"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 -86, i64 368, i1 false)
  %96 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %53, align 8
  %97 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %96, i64 0, i32 0
  %98 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 0, i64* %98, align 8
  %99 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  store i32 1, i32* %99, align 8
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %100) #5
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4, i32 0
  %102 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %103 = bitcast %"class.std::__1::basic_string"* %102 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %103, i8 0, i64 24, i1 false) #5
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %105 = bitcast i32* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %105, i8 0, i64 14, i1 false) #5
  store %"struct.jxl::ImageMetadata"* %97, %"struct.jxl::ImageMetadata"** %104, align 8
  %106 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %107 = bitcast %"class.jxl::Image3"* %106 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 0, i64 96, i1 false) #5
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %108) #5
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %110 = bitcast %"class.std::__1::vector.87"* %109 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %110, i8 0, i64 32, i1 false) #5
  %111 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 1, i32 17
  %112 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4
  %113 = bitcast %"struct.jxl::FrameOrigin"* %111 to i64*
  %114 = bitcast %"struct.jxl::FrameOrigin"* %112 to i64*
  %115 = load i64, i64* %113, align 4
  store i64 %115, i64* %114, align 8
  %116 = bitcast %"class.jxl::Image3"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %116) #5
  %117 = load i32, i32* %75, align 8
  %118 = zext i32 %117 to i64
  %119 = load i32, i32* %66, align 4
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %121, i64 %118, i64 %120, i64 4) #5
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %122, i64 %118, i64 %120, i64 4) #5
  %123 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %123, i64 %118, i64 %120, i64 4) #5
  %124 = getelementptr inbounds i8, i8* %20, i64 10160
  %125 = bitcast i8* %124 to %"struct.jxl::ColorEncoding"*
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* %0, %"class.jxl::Image3"* nonnull dereferenceable(96) %11, %"struct.jxl::ColorEncoding"* dereferenceable(152) %125) #5
  %126 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %127 = load i8*, i8** %126, align 8
  store i8* null, i8** %126, align 8
  %128 = icmp eq i8* %127, null
  br i1 %128, label %130, label %129

129:                                              ; preds = %74
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %127) #5
  br label %130

130:                                              ; preds = %129, %74
  %131 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  store i8* null, i8** %131, align 8
  %133 = icmp eq i8* %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %132) #5
  br label %135

135:                                              ; preds = %134, %130
  %136 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %137 = load i8*, i8** %136, align 8
  store i8* null, i8** %136, align 8
  %138 = icmp eq i8* %137, null
  br i1 %138, label %140, label %139

139:                                              ; preds = %135
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %137) #5
  br label %140

140:                                              ; preds = %135, %139
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %116) #5
  %141 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %104, align 8
  %142 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %141, i64 0, i32 17
  %143 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %142, i64 0, i32 0, i32 0
  %144 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %143, align 8
  %145 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %141, i64 0, i32 17, i32 0, i32 1
  %146 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %145, align 8
  %147 = icmp eq %"struct.jxl::ExtraChannelInfo"* %144, %146
  br i1 %147, label %294, label %148

148:                                              ; preds = %140
  %149 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %144 to i64
  %150 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %146 to i64
  %151 = bitcast %"class.std::__1::vector.87"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %151) #5
  %152 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %12, i64 0, i32 0, i32 1
  %153 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %12, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %151, i8 0, i64 24, i1 false) #5
  %154 = bitcast %"struct.jxl::ExtraChannelInfo"** %145 to i64*
  %155 = bitcast %"class.std::__1::vector.80"* %142 to i64*
  %156 = sub i64 %150, %149
  %157 = sdiv exact i64 %156, 96
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.87"* nonnull %12, i64 %157)
  %158 = load i64, i64* %154, align 8
  %159 = load i64, i64* %155, align 8
  %160 = icmp eq i64 %158, %159
  br i1 %160, label %170, label %161

161:                                              ; preds = %148
  %162 = bitcast i64* %13 to i8*
  %163 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %164 = bitcast i64* %14 to i8*
  %165 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %166 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %167 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %168 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %169 = bitcast %"class.jxl::Plane.1"** %152 to i64*
  br label %204

170:                                              ; preds = %287, %148
  %171 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %19, align 8
  %172 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %171, i64 0, i32 11
  %173 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %172, i64 0, i32 0, i32 0
  %174 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %173, align 8
  %175 = icmp eq %"class.jxl::Plane.1"* %174, null
  br i1 %175, label %196, label %176

176:                                              ; preds = %170
  %177 = bitcast %"class.jxl::Plane.1"* %174 to i8*
  %178 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %171, i64 0, i32 11, i32 0, i32 1
  %179 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %178, align 8
  %180 = icmp eq %"class.jxl::Plane.1"* %179, %174
  br i1 %180, label %193, label %181

181:                                              ; preds = %176, %188
  %182 = phi %"class.jxl::Plane.1"* [ %183, %188 ], [ %179, %176 ]
  %183 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %182, i64 -1
  %184 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %182, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %185 = load i8*, i8** %184, align 8
  store i8* null, i8** %184, align 8
  %186 = icmp eq i8* %185, null
  br i1 %186, label %188, label %187

187:                                              ; preds = %181
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %185) #5
  br label %188

188:                                              ; preds = %187, %181
  %189 = icmp eq %"class.jxl::Plane.1"* %183, %174
  br i1 %189, label %190, label %181

190:                                              ; preds = %188
  %191 = bitcast %"class.std::__1::vector.87"* %172 to i8**
  %192 = load i8*, i8** %191, align 8
  br label %193

193:                                              ; preds = %190, %176
  %194 = phi i8* [ %192, %190 ], [ %177, %176 ]
  store %"class.jxl::Plane.1"* %174, %"class.jxl::Plane.1"** %178, align 8
  call void @_ZdlPv(i8* %194) #25
  %195 = bitcast %"class.std::__1::vector.87"* %172 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %195, i8 0, i64 24, i1 false) #5
  br label %196

196:                                              ; preds = %193, %170
  %197 = bitcast %"class.std::__1::vector.87"* %12 to <2 x i64>*
  %198 = load <2 x i64>, <2 x i64>* %197, align 16
  %199 = bitcast %"class.std::__1::vector.87"* %172 to <2 x i64>*
  store <2 x i64> %198, <2 x i64>* %199, align 8
  %200 = bitcast %"class.jxl::Plane.1"** %153 to i64*
  %201 = load i64, i64* %200, align 16
  %202 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %171, i64 0, i32 11, i32 0, i32 2, i32 0, i32 0
  %203 = bitcast %"class.jxl::Plane.1"** %202 to i64*
  store i64 %201, i64* %203, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %151) #5
  br label %294

204:                                              ; preds = %161, %287
  %205 = phi i64 [ 0, %161 ], [ %288, %287 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %162) #5
  %206 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %163, align 8
  %207 = icmp eq %"struct.jxl::jpeg::JPEGData"* %206, null
  br i1 %207, label %208, label %218

208:                                              ; preds = %204
  %209 = load i32, i32* %165, align 8
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %225

211:                                              ; preds = %208
  %212 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %166, align 8
  %213 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %167, align 8
  %214 = icmp eq %"class.jxl::Plane.1"* %212, %213
  br i1 %214, label %225, label %215

215:                                              ; preds = %211
  %216 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %212, i64 0, i32 0, i32 0
  %217 = load i32, i32* %216, align 8
  br label %225

218:                                              ; preds = %204
  %219 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %206, i64 0, i32 1
  %220 = load i32, i32* %219, align 8
  %221 = sext i32 %220 to i64
  store i64 %221, i64* %13, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %164) #5
  %222 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %206, i64 0, i32 2
  %223 = load i32, i32* %222, align 4
  %224 = sext i32 %223 to i64
  br label %239

225:                                              ; preds = %208, %211, %215
  %226 = phi i32 [ %209, %208 ], [ 0, %211 ], [ %217, %215 ]
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %13, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %164) #5
  %228 = load i32, i32* %168, align 4
  %229 = zext i32 %228 to i64
  %230 = icmp eq i32 %228, 0
  br i1 %230, label %231, label %239

231:                                              ; preds = %225
  %232 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %166, align 8
  %233 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %167, align 8
  %234 = icmp eq %"class.jxl::Plane.1"* %232, %233
  br i1 %234, label %239, label %235

235:                                              ; preds = %231
  %236 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %232, i64 0, i32 0, i32 1
  %237 = load i32, i32* %236, align 4
  %238 = zext i32 %237 to i64
  br label %239

239:                                              ; preds = %218, %225, %231, %235
  %240 = phi i64 [ %221, %218 ], [ %227, %235 ], [ %227, %231 ], [ %227, %225 ]
  %241 = phi i64 [ %224, %218 ], [ %238, %235 ], [ 0, %231 ], [ %229, %225 ]
  store i64 %241, i64* %14, align 8
  %242 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %152, align 8
  %243 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %153, align 16
  %244 = icmp ult %"class.jxl::Plane.1"* %242, %243
  br i1 %244, label %245, label %249

245:                                              ; preds = %239
  %246 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %242, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %246, i64 %240, i64 %241, i64 4) #5
  %247 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %242, i64 1
  %248 = ptrtoint %"class.jxl::Plane.1"* %247 to i64
  store i64 %248, i64* %169, align 8
  br label %251

249:                                              ; preds = %239
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.87"* nonnull %12, i64* nonnull dereferenceable(8) %13, i64* nonnull dereferenceable(8) %14) #5
  %250 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %152, align 8
  br label %251

251:                                              ; preds = %245, %249
  %252 = phi %"class.jxl::Plane.1"* [ %247, %245 ], [ %250, %249 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %164) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %162) #5
  %253 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %252, i64 -1, i32 0, i32 0
  %254 = load i32, i32* %253, align 8
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %287, label %256

256:                                              ; preds = %251
  %257 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %252, i64 -1, i32 0, i32 1
  %258 = load i32, i32* %257, align 4
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %287, label %260

260:                                              ; preds = %256
  %261 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %252, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %262 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %252, i64 -1, i32 0, i32 4
  %263 = load i8*, i8** %261, align 8
  %264 = ptrtoint i8* %263 to i64
  %265 = and i64 %264, 63
  %266 = icmp eq i64 %265, 0
  call void @llvm.assume(i1 %266) #5
  %267 = zext i32 %254 to i64
  %268 = shl nuw nsw i64 %267, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %263, i8 0, i64 %268, i1 false) #5
  %269 = load i32, i32* %257, align 4
  %270 = icmp ugt i32 %269, 1
  br i1 %270, label %271, label %287

271:                                              ; preds = %260, %271
  %272 = phi i64 [ %283, %271 ], [ 1, %260 ]
  %273 = load i32, i32* %253, align 8
  %274 = load i8*, i8** %261, align 8
  %275 = load i64, i64* %262, align 8
  %276 = mul i64 %275, %272
  %277 = getelementptr inbounds i8, i8* %274, i64 %276
  %278 = ptrtoint i8* %277 to i64
  %279 = and i64 %278, 63
  %280 = icmp eq i64 %279, 0
  call void @llvm.assume(i1 %280) #5
  %281 = zext i32 %273 to i64
  %282 = shl nuw nsw i64 %281, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %277, i8 0, i64 %282, i1 false) #5
  %283 = add nuw nsw i64 %272, 1
  %284 = load i32, i32* %257, align 4
  %285 = zext i32 %284 to i64
  %286 = icmp ult i64 %283, %285
  br i1 %286, label %271, label %287

287:                                              ; preds = %271, %260, %251, %256
  %288 = add nuw i64 %205, 1
  %289 = load i64, i64* %154, align 8
  %290 = load i64, i64* %155, align 8
  %291 = sub i64 %289, %290
  %292 = sdiv exact i64 %291, 96
  %293 = icmp ult i64 %288, %292
  br i1 %293, label %204, label %170

294:                                              ; preds = %196, %140
  %295 = bitcast %"class.std::__1::unique_ptr.395"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %295) #5
  %296 = getelementptr inbounds %"class.std::__1::unique_ptr.395", %"class.std::__1::unique_ptr.395"* %15, i64 0, i32 0, i32 0, i32 0
  %297 = getelementptr inbounds %"class.std::__1::unique_ptr.395", %"class.std::__1::unique_ptr.395"* %15, i64 0, i32 0, i32 1, i32 0, i32 0
  %298 = getelementptr inbounds %"class.std::__1::unique_ptr.395", %"class.std::__1::unique_ptr.395"* %15, i64 0, i32 0, i32 1, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %295, i8 0, i64 24, i1 false) #5
  %299 = bitcast %class.anon* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %299) #5
  %300 = getelementptr inbounds %class.anon, %class.anon* %16, i64 0, i32 0
  %301 = getelementptr inbounds %class.anon, %class.anon* %16, i64 0, i32 1
  store %"class.std::__1::unique_ptr.258"* %10, %"class.std::__1::unique_ptr.258"** %300, align 8
  store %"class.std::__1::unique_ptr.395"* %15, %"class.std::__1::unique_ptr.395"** %301, align 8
  %302 = bitcast %class.anon.404* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %302) #5
  %303 = getelementptr inbounds %class.anon.404, %class.anon.404* %17, i64 0, i32 0
  %304 = getelementptr inbounds %class.anon.404, %class.anon.404* %17, i64 0, i32 1
  %305 = getelementptr inbounds %class.anon.404, %class.anon.404* %17, i64 0, i32 2
  %306 = getelementptr inbounds %class.anon.404, %class.anon.404* %17, i64 0, i32 3
  store %"class.std::__1::unique_ptr.258"* %10, %"class.std::__1::unique_ptr.258"** %303, align 8
  store %"struct.jxl::PassesEncoderState"** %9, %"struct.jxl::PassesEncoderState"*** %304, align 8
  store %"class.std::__1::unique_ptr.395"* %15, %"class.std::__1::unique_ptr.395"** %305, align 8
  store %"class.jxl::ImageBundle"* %0, %"class.jxl::ImageBundle"** %306, align 8
  %307 = trunc i64 %82 to i32
  %308 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %308) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), double* nonnull %7) #5
  %309 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %309, label %310, label %321

310:                                              ; preds = %294
  %311 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %311) #5
  %312 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %313 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %312, align 8
  %314 = bitcast i8** %313 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %314, align 8
  %315 = icmp eq i32 %307, 0
  br i1 %315, label %332, label %316

316:                                              ; preds = %310
  %317 = bitcast %"class.jxl::ThreadPool::RunCallState.546"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %317) #5
  %318 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.546", %"class.jxl::ThreadPool::RunCallState.546"* %5, i64 0, i32 0
  %319 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.546", %"class.jxl::ThreadPool::RunCallState.546"* %5, i64 0, i32 1
  store %class.anon* %16, %class.anon** %318, align 8
  store %class.anon.404* %17, %class.anon.404** %319, align 8
  %320 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %311, i8* nonnull %317, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_14RoundtripImageERKNS_6Image3IfEEPNS_18PassesEncoderStateEPS0_E3$_0ZNS_14RoundtripImageES5_S7_S8_E3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_14RoundtripImageERKNS_6Image3IfEEPNS_18PassesEncoderStateEPS0_E3$_0ZNS_14RoundtripImageES5_S7_S8_E3$_1E12CallDataFuncEPvjm", i32 0, i32 %307) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %317) #5
  br label %332

321:                                              ; preds = %294
  %322 = icmp eq i32 %307, 0
  br i1 %322, label %334, label %323

323:                                              ; preds = %321
  %324 = bitcast %"class.jxl::ThreadPool::RunCallState.546"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %324) #5
  %325 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.546", %"class.jxl::ThreadPool::RunCallState.546"* %6, i64 0, i32 0
  %326 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.546", %"class.jxl::ThreadPool::RunCallState.546"* %6, i64 0, i32 1
  store %class.anon* %16, %class.anon** %325, align 8
  store %class.anon.404* %17, %class.anon.404** %326, align 8
  %327 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %328 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %327, align 8
  %329 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %330 = load i8*, i8** %329, align 8
  %331 = call i32 %328(i8* %330, i8* nonnull %324, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_14RoundtripImageERKNS_6Image3IfEEPNS_18PassesEncoderStateEPS0_E3$_0ZNS_14RoundtripImageES5_S7_S8_E3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_14RoundtripImageERKNS_6Image3IfEEPNS_18PassesEncoderStateEPS0_E3$_0ZNS_14RoundtripImageES5_S7_S8_E3$_1E12CallDataFuncEPvjm", i32 0, i32 %307) #5
  br label %332

332:                                              ; preds = %310, %316, %323
  %333 = phi i8* [ %324, %323 ], [ %311, %316 ], [ %311, %310 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %333) #5
  br label %334

334:                                              ; preds = %332, %321
  %335 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), double %335) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %308) #5
  %336 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %19, align 8
  %337 = call i32 @_ZN3jxl21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPNS_10ThreadPoolEbb(%"class.jxl::ImageBundle"* %0, %"struct.jxl::PassesDecoderState"* %336, %"class.jxl::ThreadPool"* %3, i1 zeroext false, i1 zeroext true) #5
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %342, label %339

339:                                              ; preds = %334
  %340 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 1038, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.8, i64 0, i64 0)) #5
  %341 = call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

342:                                              ; preds = %334
  %343 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %9, align 8
  %344 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %343, i64 0, i32 4
  %345 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %343, i64 0, i32 4, i32 0, i32 1
  %346 = bitcast %"class.std::__1::unique_ptr.193"** %345 to i64*
  %347 = load i64, i64* %346, align 8
  %348 = bitcast %"class.std::__1::vector.191"* %344 to i64*
  %349 = load i64, i64* %348, align 8
  %350 = sub i64 %347, %349
  %351 = ashr exact i64 %350, 3
  %352 = icmp ugt i64 %90, %351
  %353 = inttoptr i64 %349 to %"class.std::__1::unique_ptr.193"*
  %354 = inttoptr i64 %347 to %"class.std::__1::unique_ptr.193"*
  br i1 %352, label %355, label %357

355:                                              ; preds = %342
  %356 = sub nsw i64 %90, %351
  call void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl9BitWriterENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE8__appendEm(%"class.std::__1::vector.191"* %344, i64 %356) #5
  br label %378

357:                                              ; preds = %342
  %358 = icmp ult i64 %90, %351
  br i1 %358, label %359, label %378

359:                                              ; preds = %357
  %360 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %353, i64 %90
  %361 = icmp eq %"class.std::__1::unique_ptr.193"* %360, %354
  br i1 %361, label %377, label %362

362:                                              ; preds = %359, %375
  %363 = phi %"class.std::__1::unique_ptr.193"* [ %364, %375 ], [ %354, %359 ]
  %364 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %363, i64 -1
  %365 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %364, i64 0, i32 0, i32 0, i32 0
  %366 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %365, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %365, align 8
  %367 = icmp eq %"struct.jxl::BitWriter"* %366, null
  br i1 %367, label %375, label %368

368:                                              ; preds = %362
  %369 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %366, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %370 = load i8*, i8** %369, align 8
  store i8* null, i8** %369, align 8
  %371 = icmp eq i8* %370, null
  br i1 %371, label %373, label %372

372:                                              ; preds = %368
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %370) #5
  br label %373

373:                                              ; preds = %372, %368
  %374 = bitcast %"struct.jxl::BitWriter"* %366 to i8*
  call void @_ZdlPv(i8* %374) #25
  br label %375

375:                                              ; preds = %373, %362
  %376 = icmp eq %"class.std::__1::unique_ptr.193"* %364, %360
  br i1 %376, label %377, label %362

377:                                              ; preds = %375, %359
  store %"class.std::__1::unique_ptr.193"* %360, %"class.std::__1::unique_ptr.193"** %345, align 8
  br label %378

378:                                              ; preds = %355, %357, %377
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %302) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %299) #5
  %379 = load %"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"** %296, align 8
  store %"struct.jxl::GroupDecCache"* null, %"struct.jxl::GroupDecCache"** %296, align 8
  %380 = icmp eq %"struct.jxl::GroupDecCache"* %379, null
  br i1 %380, label %385, label %381

381:                                              ; preds = %378
  %382 = bitcast %"struct.jxl::GroupDecCache"* %379 to i8*
  %383 = load void (i8*, i8*)*, void (i8*, i8*)** %297, align 8
  %384 = load i8*, i8** %298, align 8
  call void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8* nonnull %382, void (i8*, i8*)* %383, i8* %384, void (i8*, i64)* nonnull @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl13GroupDecCacheEEEvPvm) #5
  br label %385

385:                                              ; preds = %378, %381
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %295) #5
  call void @_ZN3jxl19ModularFrameEncoderD2Ev(%"class.jxl::ModularFrameEncoder"* nonnull %94) #5
  call void @_ZdlPv(i8* nonnull %93) #25
  %386 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %19, align 8
  store %"struct.jxl::PassesDecoderState"* null, %"struct.jxl::PassesDecoderState"** %19, align 8
  %387 = icmp eq %"struct.jxl::PassesDecoderState"* %386, null
  br i1 %387, label %390, label %388

388:                                              ; preds = %385
  call void @_ZN3jxl18PassesDecoderStateD2Ev(%"struct.jxl::PassesDecoderState"* nonnull %386) #5
  %389 = bitcast %"struct.jxl::PassesDecoderState"* %386 to i8*
  call void @_ZdlPv(i8* %389) #25
  br label %390

390:                                              ; preds = %385, %388
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #5
  ret void
}

declare i32 @_ZN3jxl18OutputEncodingInfo3SetERKNS_13ImageMetadataE(%"struct.jxl::OutputEncodingInfo"*, %"struct.jxl::ImageMetadata"* dereferenceable(1600)) local_unnamed_addr #2

declare void @_ZN3jxl23InitializePassesEncoderERKNS_6Image3IfEEPNS_10ThreadPoolEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::ThreadPool"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderState4InitEv(%"struct.jxl::PassesDecoderState"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %3 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %4 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %3, i64 0, i32 1, i32 9
  %5 = load i32, i32* %4, align 4
  %6 = uitofp i32 %5 to float
  %7 = fadd float %6, -2.000000e+00
  %8 = tail call float @powf(float 0x3FE99999A0000000, float %7) #5
  %9 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 8
  store float %8, float* %9, align 8
  %10 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %10, i64 0, i32 1, i32 10
  %12 = load i32, i32* %11, align 8
  %13 = uitofp i32 %12 to float
  %14 = fadd float %13, -2.000000e+00
  %15 = tail call float @powf(float 0x3FE99999A0000000, float %14) #5
  %16 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 9
  store float %15, float* %16, align 4
  %17 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 14
  store i8* null, i8** %17, align 8
  %18 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 2
  %19 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %18, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %18, align 8
  %20 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 1
  %21 = bitcast %"struct.std::__1::__function::__policy_invoker.286"* %20 to i64*
  store i64 ptrtoint (void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* @_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm to i64), i64* %21, align 8
  %22 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %19, i64 0, i32 1
  %23 = load void (i8*)*, void (i8*)** %22, align 8
  %24 = icmp eq void (i8*)* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %1
  %26 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  tail call void %23(i8* %27) #5
  br label %28

28:                                               ; preds = %1, %25
  %29 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 17
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 16
  store i8 0, i8* %30, align 8
  %31 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 22, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 0, i32* %31 seq_cst, align 4
  %32 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 26
  %33 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %34 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %33, i64 0, i32 2
  tail call void @_ZN3jxl19GroupBorderAssigner4InitERKNS_15FrameDimensionsE(%"class.jxl::GroupBorderAssigner"* %32, %"struct.jxl::FrameDimensions"* dereferenceable(144) %34) #5
  %35 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %36 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 26
  %37 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 25
  %38 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2
  tail call void @_ZN3jxl13FilterWeights4InitERKNS_10LoopFilterERKNS_15FrameDimensionsE(%"struct.jxl::FilterWeights"* %37, %"struct.jxl::LoopFilter"* dereferenceable(144) %36, %"struct.jxl::FrameDimensions"* dereferenceable(144) %38) #5
  %39 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 0
  %40 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %39, align 8
  %41 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 1
  %42 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %41, align 8
  %43 = icmp eq %"class.jxl::FilterPipeline"* %40, %42
  br i1 %43, label %44, label %60

44:                                               ; preds = %60, %28
  %45 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 2, i64 0
  %46 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %47 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %46, i64 0, i32 0
  %48 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %47, align 8
  %49 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %48, i64 0, i32 2
  tail call void @_ZN3jxl9Upsampler4InitEmRKNS_19CustomTransformDataE(%"struct.jxl::Upsampler"* %45, i64 2, %"struct.jxl::CustomTransformData"* dereferenceable(1224) %49) #5
  %50 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 2, i64 1
  %51 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %52 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %51, i64 0, i32 0
  %53 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %52, align 8
  %54 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %53, i64 0, i32 2
  tail call void @_ZN3jxl9Upsampler4InitEmRKNS_19CustomTransformDataE(%"struct.jxl::Upsampler"* %50, i64 4, %"struct.jxl::CustomTransformData"* dereferenceable(1224) %54) #5
  %55 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 2, i64 2
  %56 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %57 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %56, i64 0, i32 0
  %58 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %57, align 8
  %59 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %58, i64 0, i32 2
  tail call void @_ZN3jxl9Upsampler4InitEmRKNS_19CustomTransformDataE(%"struct.jxl::Upsampler"* %55, i64 8, %"struct.jxl::CustomTransformData"* dereferenceable(1224) %59) #5
  ret void

60:                                               ; preds = %28, %60
  %61 = phi %"class.jxl::FilterPipeline"* [ %63, %60 ], [ %40, %28 ]
  %62 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %61, i64 0, i32 3
  store i64 0, i64* %62, align 8
  %63 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %61, i64 1
  %64 = icmp eq %"class.jxl::FilterPipeline"* %63, %42
  br i1 %64, label %44, label %60
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderState9InitForACEPNS_10ThreadPoolE(%"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.jxl::Image3", align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.anon.526, align 8
  %6 = alloca %"struct.jxl::ThreadPool::SkipInit", align 1
  %7 = alloca %"struct.jxl::WeightsSymmetric5", align 4
  %8 = alloca %"class.jxl::Plane.1", align 16
  %9 = alloca %"class.jxl::Rect", align 8
  %10 = alloca %"class.jxl::Image3", align 8
  %11 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 0, i32 10
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 22, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %28

13:                                               ; preds = %47
  %14 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 0, i32 1, i32 12, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = load i64, i64* %11, align 8
  %18 = mul i64 %17, %16
  %19 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 0, i32 11
  %20 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 0, i32 11, i32 0, i32 1
  %21 = bitcast i32** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.std::__1::vector.55"* %19 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = ashr exact i64 %25, 2
  %27 = icmp ugt i64 %18, %26
  br i1 %27, label %50, label %52

28:                                               ; preds = %47, %2
  %29 = phi i64 [ 0, %2 ], [ %48, %47 ]
  %30 = trunc i64 %29 to i32
  %31 = shl i32 1, %30
  %32 = load atomic i32, i32* %12 seq_cst, align 4
  %33 = and i32 %32, %31
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %47, label %35

35:                                               ; preds = %28
  %36 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %29
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = mul nuw nsw i64 %38, 3
  %40 = add nuw nsw i64 %39, 3
  %41 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %40
  %42 = load i64, i64* %41, align 8
  %43 = shl i64 %42, 6
  %44 = load i64, i64* %11, align 8
  %45 = icmp ult i64 %43, %44
  %46 = select i1 %45, i64 %44, i64 %43
  store i64 %46, i64* %11, align 8
  br label %47

47:                                               ; preds = %28, %35
  %48 = add nuw nsw i64 %29, 1
  %49 = icmp eq i64 %48, 27
  br i1 %49, label %13, label %28

50:                                               ; preds = %13
  %51 = sub i64 %18, %26
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.55"* %19, i64 %51) #5
  br label %52

52:                                               ; preds = %50, %13
  %53 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %54 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %53, align 8
  %55 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %54, i64 0, i32 1, i32 4
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, 1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %130, label %59

59:                                               ; preds = %52
  %60 = bitcast %"class.jxl::Image3"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %60) #5
  %61 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %54, i64 0, i32 2, i32 4
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %54, i64 0, i32 2, i32 5
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %65, i64 %62, i64 %64, i64 4) #5
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %66, i64 %62, i64 %64, i64 4) #5
  %67 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %67, i64 %62, i64 %64, i64 4) #5
  %68 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3
  %69 = bitcast %"class.jxl::Image3"* %68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* nonnull align 8 %60, i64 24, i1 false) #5
  %70 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 0, i32 0, i32 5
  %71 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5
  %72 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %71, i64 0, i32 0, i32 0, i32 0
  %73 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i8* null, i8** %72, align 8
  %75 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %70, i64 0, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.std::__1::unique_ptr"* %70 to i64*
  store i64 %74, i64* %77, align 8
  %78 = icmp eq i8* %76, null
  br i1 %78, label %80, label %79

79:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %76) #5
  br label %80

80:                                               ; preds = %79, %59
  %81 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1
  %82 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 1
  %83 = bitcast %"class.jxl::Plane.1"* %82 to i8*
  %84 = bitcast %"class.jxl::Plane.1"* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* align 8 %84, i64 24, i1 false) #5
  %85 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store i8* null, i8** %87, align 8
  %90 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  store i64 %89, i64* %92, align 8
  %93 = icmp eq i8* %91, null
  br i1 %93, label %95, label %94

94:                                               ; preds = %80
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %91) #5
  br label %95

95:                                               ; preds = %94, %80
  %96 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2
  %97 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 2
  %98 = bitcast %"class.jxl::Plane.1"* %97 to i8*
  %99 = bitcast %"class.jxl::Plane.1"* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 24, i1 false) #5
  %100 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 2, i32 0, i32 5
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5
  %102 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %101, i64 0, i32 0, i32 0, i32 0
  %103 = bitcast %"class.std::__1::unique_ptr"* %101 to i64*
  %104 = load i64, i64* %103, align 8
  store i8* null, i8** %102, align 8
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %100, i64 0, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = bitcast %"class.std::__1::unique_ptr"* %100 to i64*
  store i64 %104, i64* %107, align 8
  %108 = icmp eq i8* %106, null
  br i1 %108, label %109, label %111

109:                                              ; preds = %95
  %110 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %110, align 8
  br label %117

111:                                              ; preds = %95
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %106) #5
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %114, align 8
  %115 = icmp eq i8* %113, null
  br i1 %115, label %117, label %116

116:                                              ; preds = %111
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %113) #5
  br label %117

117:                                              ; preds = %109, %116, %111
  %118 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = load i8*, i8** %118, align 8
  store i8* null, i8** %118, align 8
  %120 = icmp eq i8* %119, null
  br i1 %120, label %122, label %121

121:                                              ; preds = %117
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %119) #5
  br label %122

122:                                              ; preds = %121, %117
  %123 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %124 = load i8*, i8** %123, align 8
  store i8* null, i8** %123, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %223, label %126

126:                                              ; preds = %122
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %124) #5
  br label %223

127:                                              ; preds = %223
  %128 = inttoptr i64 %290 to i8*
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %128) #5
  br label %129

129:                                              ; preds = %223, %127
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %243) #5
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %242) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %235) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #5
  br label %130

130:                                              ; preds = %52, %129
  call void @_ZN3jxl18PassesDecoderState20EnsureBordersStorageEv(%"struct.jxl::PassesDecoderState"* %0)
  %131 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %53, align 8
  %132 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 1, i32 7, i32 1, i64 1
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 1, i32 7, i32 1, i64 0
  %135 = load i32, i32* %134, align 4
  %136 = icmp eq i32 %135, %133
  br i1 %136, label %137, label %153

137:                                              ; preds = %130
  %138 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 1, i32 7, i32 1, i64 2
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, %133
  br i1 %140, label %141, label %153

141:                                              ; preds = %137
  %142 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 1, i32 2
  %143 = load i32, i32* %142, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %153

145:                                              ; preds = %141
  %146 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 1, i32 25
  %147 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %146, align 8
  %148 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %147, i64 0, i32 0, i32 17, i32 0, i32 0
  %149 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %148, align 8
  %150 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %147, i64 0, i32 0, i32 17, i32 0, i32 1
  %151 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %150, align 8
  %152 = icmp eq %"struct.jxl::ExtraChannelInfo"* %149, %151
  br i1 %152, label %222, label %153

153:                                              ; preds = %130, %137, %141, %145
  %154 = bitcast %"class.jxl::Image3"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %154) #5
  %155 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 2, i32 6
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 2, i32 7
  %158 = load i64, i64* %157, align 8
  %159 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %159, i64 %156, i64 %158, i64 4) #5
  %160 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %160, i64 %156, i64 %158, i64 4) #5
  %161 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %161, i64 %156, i64 %158, i64 4) #5
  %162 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10
  %163 = bitcast %"class.jxl::Image3"* %162 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %163, i8* nonnull align 8 %154, i64 24, i1 false) #5
  %164 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %165 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 0, i32 0, i32 5
  %166 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %165, i64 0, i32 0, i32 0, i32 0
  %167 = bitcast %"class.std::__1::unique_ptr"* %165 to i64*
  %168 = load i64, i64* %167, align 8
  store i8* null, i8** %166, align 8
  %169 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %164, i64 0, i32 0, i32 0, i32 0
  %170 = load i8*, i8** %169, align 8
  %171 = bitcast %"class.std::__1::unique_ptr"* %164 to i64*
  store i64 %168, i64* %171, align 8
  %172 = icmp eq i8* %170, null
  br i1 %172, label %174, label %173

173:                                              ; preds = %153
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %170) #5
  br label %174

174:                                              ; preds = %173, %153
  %175 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1
  %176 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 1
  %177 = bitcast %"class.jxl::Plane.1"* %176 to i8*
  %178 = bitcast %"class.jxl::Plane.1"* %175 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 24, i1 false) #5
  %179 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %180 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1, i32 0, i32 5
  %181 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %180, i64 0, i32 0, i32 0, i32 0
  %182 = bitcast %"class.std::__1::unique_ptr"* %180 to i64*
  %183 = load i64, i64* %182, align 8
  store i8* null, i8** %181, align 8
  %184 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %179, i64 0, i32 0, i32 0, i32 0
  %185 = load i8*, i8** %184, align 8
  %186 = bitcast %"class.std::__1::unique_ptr"* %179 to i64*
  store i64 %183, i64* %186, align 8
  %187 = icmp eq i8* %185, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %174
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %185) #5
  br label %189

189:                                              ; preds = %188, %174
  %190 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2
  %191 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 2
  %192 = bitcast %"class.jxl::Plane.1"* %191 to i8*
  %193 = bitcast %"class.jxl::Plane.1"* %190 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %192, i8* align 8 %193, i64 24, i1 false) #5
  %194 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %195 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5
  %196 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %195, i64 0, i32 0, i32 0, i32 0
  %197 = bitcast %"class.std::__1::unique_ptr"* %195 to i64*
  %198 = load i64, i64* %197, align 8
  store i8* null, i8** %196, align 8
  %199 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %194, i64 0, i32 0, i32 0, i32 0
  %200 = load i8*, i8** %199, align 8
  %201 = bitcast %"class.std::__1::unique_ptr"* %194 to i64*
  store i64 %198, i64* %201, align 8
  %202 = icmp eq i8* %200, null
  br i1 %202, label %203, label %205

203:                                              ; preds = %189
  %204 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %204, align 8
  br label %211

205:                                              ; preds = %189
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %200) #5
  %206 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %207 = load i8*, i8** %206, align 8
  %208 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %208, align 8
  %209 = icmp eq i8* %207, null
  br i1 %209, label %211, label %210

210:                                              ; preds = %205
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %207) #5
  br label %211

211:                                              ; preds = %203, %210, %205
  %212 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %213 = load i8*, i8** %212, align 8
  store i8* null, i8** %212, align 8
  %214 = icmp eq i8* %213, null
  br i1 %214, label %216, label %215

215:                                              ; preds = %211
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %213) #5
  br label %216

216:                                              ; preds = %215, %211
  %217 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %218 = load i8*, i8** %217, align 8
  store i8* null, i8** %217, align 8
  %219 = icmp eq i8* %218, null
  br i1 %219, label %221, label %220

220:                                              ; preds = %216
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %218) #5
  br label %221

221:                                              ; preds = %216, %220
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %154) #5
  br label %222

222:                                              ; preds = %221, %145
  ret void

223:                                              ; preds = %122, %126
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %60) #5
  %224 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #5
  %225 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %68, i64 0, i32 0, i64 0, i32 0, i32 0
  %226 = load i32, i32* %225, align 8
  %227 = zext i32 %226 to i64
  %228 = add nuw nsw i64 %227, 255
  %229 = lshr i64 %228, 8
  store i64 %229, i64* %4, align 8
  %230 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 0, i32 0, i32 1
  %231 = load i32, i32* %230, align 4
  %232 = zext i32 %231 to i64
  %233 = add nuw nsw i64 %232, 255
  %234 = lshr i64 %233, 8
  %235 = bitcast %class.anon.526* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %235) #5
  %236 = getelementptr inbounds %class.anon.526, %class.anon.526* %5, i64 0, i32 0
  %237 = getelementptr inbounds %class.anon.526, %class.anon.526* %5, i64 0, i32 1
  store i64* %4, i64** %236, align 8
  store %"struct.jxl::PassesDecoderState"* %0, %"struct.jxl::PassesDecoderState"** %237, align 8
  %238 = mul nuw nsw i64 %234, %229
  %239 = trunc i64 %238 to i32
  %240 = getelementptr inbounds %"struct.jxl::ThreadPool::SkipInit", %"struct.jxl::ThreadPool::SkipInit"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %240) #5
  %241 = call zeroext i1 @_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_18PassesDecoderState9InitForACEPS1_EUliiE_EEbS4_jjRKT_RKT0_PKc(%"class.jxl::ThreadPool"* %1, i32 0, i32 %239, %"struct.jxl::ThreadPool::SkipInit"* nonnull dereferenceable(1) %6, %class.anon.526* nonnull dereferenceable(16) %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.48, i64 0, i64 0))
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %240) #5
  %242 = bitcast %"struct.jxl::WeightsSymmetric5"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %242) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %242, i8* align 4 bitcast (%"struct.jxl::WeightsSymmetric5"* @__const._ZN3jxl18PassesDecoderState9InitForACEPNS_10ThreadPoolE.weights to i8*), i64 96, i1 false)
  %243 = bitcast %"class.jxl::Plane.1"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %243) #5
  %244 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0, i32 4
  %245 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %246 = bitcast %"class.jxl::Plane.1"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %246, i8 -86, i64 32, i1 false)
  %247 = load i32, i32* %225, align 8
  %248 = zext i32 %247 to i64
  %249 = load i32, i32* %230, align 4
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %251, i64 %248, i64 %250, i64 4) #5
  %252 = bitcast %"class.jxl::Rect"* %9 to i8*
  %253 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %9, i64 0, i32 2
  %254 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0, i32 5
  %255 = bitcast %"class.std::__1::unique_ptr"* %254 to i64*
  %256 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %252) #5
  %257 = bitcast %"class.jxl::Image3"* %68 to <2 x i32>*
  %258 = load <2 x i32>, <2 x i32>* %257, align 8
  %259 = zext <2 x i32> %258 to <2 x i64>
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %252, i8 0, i64 16, i1 false) #5
  %260 = bitcast i64* %253 to <2 x i64>*
  store <2 x i64> %259, <2 x i64>* %260, align 8
  call void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane.1"* dereferenceable(32) %256, %"class.jxl::Rect"* nonnull dereferenceable(32) %9, %"struct.jxl::WeightsSymmetric5"* nonnull dereferenceable(96) %7, %"class.jxl::ThreadPool"* %1, %"class.jxl::Plane.1"* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %252) #5
  %261 = bitcast %"class.jxl::Plane.1"* %256 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 8
  %263 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 0, i32 0, i32 4
  %264 = bitcast i64* %263 to <2 x i64>*
  %265 = load <2 x i64>, <2 x i64>* %264, align 8
  %266 = bitcast %"class.jxl::Plane.1"* %256 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %266, i8* nonnull align 16 %243, i64 24, i1 false) #5
  %267 = load i64, i64* %255, align 8
  store i64 %267, i64* %77, align 8
  %268 = bitcast %"class.jxl::Plane.1"* %8 to <4 x i32>*
  store <4 x i32> %262, <4 x i32>* %268, align 16
  %269 = bitcast i64* %244 to <2 x i64>*
  store <2 x i64> %265, <2 x i64>* %269, align 16
  %270 = bitcast %"class.jxl::Image3"* %68 to <2 x i32>*
  %271 = load <2 x i32>, <2 x i32>* %270, align 8
  %272 = zext <2 x i32> %271 to <2 x i64>
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %252) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %252, i8 0, i64 16, i1 false) #5
  %273 = bitcast i64* %253 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %273, align 8
  call void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane.1"* dereferenceable(32) %82, %"class.jxl::Rect"* nonnull dereferenceable(32) %9, %"struct.jxl::WeightsSymmetric5"* nonnull dereferenceable(96) %7, %"class.jxl::ThreadPool"* %1, %"class.jxl::Plane.1"* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %252) #5
  %274 = bitcast %"class.jxl::Plane.1"* %82 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 8
  %276 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 1, i32 0, i32 4
  %277 = bitcast i64* %276 to <2 x i64>*
  %278 = load <2 x i64>, <2 x i64>* %277, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* nonnull align 16 %243, i64 24, i1 false) #5
  %279 = load i64, i64* %255, align 8
  store i64 %279, i64* %92, align 8
  %280 = bitcast %"class.jxl::Plane.1"* %8 to <4 x i32>*
  store <4 x i32> %275, <4 x i32>* %280, align 16
  %281 = bitcast i64* %244 to <2 x i64>*
  store <2 x i64> %278, <2 x i64>* %281, align 16
  %282 = bitcast %"class.jxl::Image3"* %68 to <2 x i32>*
  %283 = load <2 x i32>, <2 x i32>* %282, align 8
  %284 = zext <2 x i32> %283 to <2 x i64>
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %252) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %252, i8 0, i64 16, i1 false) #5
  %285 = bitcast i64* %253 to <2 x i64>*
  store <2 x i64> %284, <2 x i64>* %285, align 8
  call void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane.1"* dereferenceable(32) %97, %"class.jxl::Rect"* nonnull dereferenceable(32) %9, %"struct.jxl::WeightsSymmetric5"* nonnull dereferenceable(96) %7, %"class.jxl::ThreadPool"* %1, %"class.jxl::Plane.1"* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %252) #5
  %286 = bitcast %"class.jxl::Plane.1"* %97 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 8
  %288 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 2, i32 0, i32 4
  %289 = load i64, i64* %288, align 8
  %290 = load i64, i64* %107, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* nonnull align 16 %243, i64 24, i1 false) #5
  %291 = load i64, i64* %255, align 8
  store i64 %291, i64* %107, align 8
  %292 = bitcast %"class.jxl::Plane.1"* %8 to <4 x i32>*
  store <4 x i32> %287, <4 x i32>* %292, align 16
  store i64 %289, i64* %244, align 16
  %293 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %53, align 8
  %294 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %293, i64 0, i32 2, i32 14
  %295 = load i64, i64* %294, align 8
  %296 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 21
  %297 = load i64, i64* %296, align 8
  %298 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 21
  %299 = add i64 %297, %295
  store i64 %299, i64* %298, align 8
  store i8* null, i8** %245, align 8
  %300 = icmp eq i64 %290, 0
  br i1 %300, label %129, label %127
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.87"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Plane.1"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.87"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.jxl::Plane.1"*
  br i1 %10, label %12, label %103

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.jxl::Plane.1"** %13 to i64*
  %15 = icmp ugt i64 %1, 576460752303423487
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #24
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = ashr exact i64 %19, 5
  %21 = shl i64 %1, 5
  %22 = tail call i8* @_Znwm(i64 %21) #25
  %23 = bitcast i8* %22 to %"class.jxl::Plane.1"*
  %24 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %23, i64 %20
  %25 = ptrtoint %"class.jxl::Plane.1"* %24 to i64
  %26 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %23, i64 %1
  %27 = ptrtoint %"class.jxl::Plane.1"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.jxl::Plane.1"*
  %29 = icmp eq %"class.jxl::Plane.1"* %28, %11
  br i1 %29, label %84, label %30

30:                                               ; preds = %17
  %31 = getelementptr %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %28, i64 -1, i32 0, i32 0
  %32 = bitcast i32* %31 to i8*
  %33 = sub i64 0, %7
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 32
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %49

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %24, i64 -1
  %40 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %28, i64 -1
  %41 = bitcast %"class.jxl::Plane.1"* %39 to i8*
  %42 = bitcast %"class.jxl::Plane.1"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false) #5
  %43 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %24, i64 -1, i32 0, i32 5
  %44 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %28, i64 -1, i32 0, i32 5
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = bitcast %"class.std::__1::unique_ptr"* %44 to i64*
  %47 = load i64, i64* %46, align 8
  store i8* null, i8** %45, align 8
  %48 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %47, i64* %48, align 8
  br label %49

49:                                               ; preds = %38, %30
  %50 = phi %"class.jxl::Plane.1"* [ undef, %30 ], [ %39, %38 ]
  %51 = phi %"class.jxl::Plane.1"* [ %24, %30 ], [ %39, %38 ]
  %52 = phi %"class.jxl::Plane.1"* [ %28, %30 ], [ %40, %38 ]
  %53 = icmp ult i8* %34, inttoptr (i64 32 to i8*)
  br i1 %53, label %78, label %54

54:                                               ; preds = %49, %54
  %55 = phi %"class.jxl::Plane.1"* [ %67, %54 ], [ %51, %49 ]
  %56 = phi %"class.jxl::Plane.1"* [ %68, %54 ], [ %52, %49 ]
  %57 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %55, i64 -1
  %58 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %56, i64 -1
  %59 = bitcast %"class.jxl::Plane.1"* %57 to i8*
  %60 = bitcast %"class.jxl::Plane.1"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false) #5
  %61 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %55, i64 -1, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %56, i64 -1, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = bitcast %"class.std::__1::unique_ptr"* %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %55, i64 -2
  %68 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %56, i64 -2
  %69 = bitcast %"class.jxl::Plane.1"* %67 to i8*
  %70 = bitcast %"class.jxl::Plane.1"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 24, i1 false) #5
  %71 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %55, i64 -2, i32 0, i32 5
  %72 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %56, i64 -2, i32 0, i32 5
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %72, i64 0, i32 0, i32 0, i32 0
  %74 = bitcast %"class.std::__1::unique_ptr"* %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i8* null, i8** %73, align 8
  %76 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = icmp eq %"class.jxl::Plane.1"* %68, %11
  br i1 %77, label %78, label %54

78:                                               ; preds = %54, %49
  %79 = phi %"class.jxl::Plane.1"* [ %50, %49 ], [ %67, %54 ]
  %80 = ptrtoint %"class.jxl::Plane.1"* %79 to i64
  %81 = load i64, i64* %6, align 8
  %82 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %13, align 8
  %83 = inttoptr i64 %81 to %"class.jxl::Plane.1"*
  br label %84

84:                                               ; preds = %17, %78
  %85 = phi %"class.jxl::Plane.1"* [ %83, %78 ], [ %28, %17 ]
  %86 = phi %"class.jxl::Plane.1"* [ %82, %78 ], [ %11, %17 ]
  %87 = phi i64 [ %80, %78 ], [ %25, %17 ]
  %88 = phi i64 [ %81, %78 ], [ %18, %17 ]
  store i64 %87, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %89 = icmp eq %"class.jxl::Plane.1"* %86, %85
  br i1 %89, label %99, label %90

90:                                               ; preds = %84, %97
  %91 = phi %"class.jxl::Plane.1"* [ %92, %97 ], [ %86, %84 ]
  %92 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %91, i64 -1
  %93 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %91, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  store i8* null, i8** %93, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %97, label %96

96:                                               ; preds = %90
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %94) #5
  br label %97

97:                                               ; preds = %96, %90
  %98 = icmp eq %"class.jxl::Plane.1"* %92, %85
  br i1 %98, label %99, label %90

99:                                               ; preds = %97, %84
  %100 = icmp eq i64 %88, 0
  br i1 %100, label %103, label %101

101:                                              ; preds = %99
  %102 = inttoptr i64 %88 to i8*
  tail call void @_ZdlPv(i8* %102) #25
  br label %103

103:                                              ; preds = %101, %99, %2
  ret void
}

declare i32 @_ZN3jxl21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPNS_10ThreadPoolEbb(%"class.jxl::ImageBundle"*, %"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*, i1 zeroext, i1 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane.1"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane.1"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane.1"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane.1"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #5
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane.1"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.87"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane.1"* %4, %"class.jxl::Plane.1"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #25
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #5
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #5
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #5
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #5
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #25
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #5
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #5

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIN3jxl5PlaneIfEEJfRKNS1_6Image3IfEERKNS1_15FrameDimensionsEfPNS1_10ThreadPoolEPS3_EE13ChooseAndCallIXadL_ZNS1_L43AdaptiveQuantizationMapHighwayDispatchTableEEEEES3_fS7_SA_fSC_SD_(%"class.jxl::Plane.1"* noalias sret, float, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::FrameDimensions"* dereferenceable(144), float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*) #0 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #5
  %8 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %9 = and i32 %8, 2225
  %10 = tail call i32 @llvm.cttz.i32(i32 %9, i1 true) #5, !range !8
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [12 x void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)*], [12 x void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)*]* @_ZN3jxlL43AdaptiveQuantizationMapHighwayDispatchTableE, i64 0, i64 %11
  %13 = load void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)*, void (%"class.jxl::Plane.1"*, float, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"*, float, %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*)** %12, align 8
  tail call void %13(%"class.jxl::Plane.1"* sret %0, float %1, %"class.jxl::Image3"* dereferenceable(96) %2, %"struct.jxl::FrameDimensions"* dereferenceable(144) %3, float %4, %"class.jxl::ThreadPool"* %5, %"class.jxl::Plane.1"* %6) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEE(%"class.jxl::Plane.1"* noalias nocapture sret, float, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::FrameDimensions"* dereferenceable(144), float, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Plane.1"*) #7 {
  %8 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %10 = alloca double, align 8
  %11 = alloca %"class.jxl::ThreadPool", align 8
  %12 = alloca %"class.jxl::Plane.1", align 8
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca %"class.jxl::Plane.1"*, align 8
  %16 = alloca %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", align 8
  %17 = alloca %"class.jxl::Plane.1", align 8
  %18 = alloca %class.anon.433, align 8
  %19 = alloca %class.anon.434, align 8
  store float %1, float* %13, align 4
  store float %4, float* %14, align 4
  store %"class.jxl::Plane.1"* %6, %"class.jxl::Plane.1"** %15, align 8
  %20 = bitcast %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %20) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 88, i1 false) #5
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = bitcast %"class.jxl::Plane.1"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #5
  %26 = lshr i32 %22, 3
  %27 = zext i32 %26 to i64
  %28 = lshr i32 %24, 3
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %12, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %30, i64 %27, i64 %29, i64 4) #5
  %31 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1
  %32 = bitcast %"class.jxl::Plane.1"* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* nonnull align 8 %25, i64 24, i1 false) #5
  %33 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5
  %34 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %12, i64 0, i32 0, i32 5
  %35 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %33, i64 0, i32 0, i32 0, i32 0
  %38 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  store i64 %36, i64* %38, align 8
  %39 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 8
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 9
  %42 = load i64, i64* %41, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #5
  %43 = bitcast %"class.jxl::Plane.1"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #5
  %44 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 8
  %45 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 9
  %46 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %46, i64 %40, i64 %42, i64 4) #5
  %47 = bitcast %"class.jxl::Plane.1"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* nonnull align 8 %43, i64 24, i1 false) #5
  %48 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %6, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %57, label %59

57:                                               ; preds = %7
  %58 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %58, align 8
  br label %65

59:                                               ; preds = %7
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #5
  %60 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %62, align 8
  %63 = icmp eq i8* %61, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #5
  br label %65

65:                                               ; preds = %57, %59, %64
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #5
  %66 = load i64, i64* %44, align 8
  %67 = add i64 %66, 7
  %68 = lshr i64 %67, 3
  %69 = load i64, i64* %45, align 8
  %70 = add i64 %69, 7
  %71 = lshr i64 %70, 3
  %72 = mul i64 %71, %68
  %73 = trunc i64 %72 to i32
  %74 = bitcast %class.anon.433* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #5
  %75 = getelementptr inbounds %class.anon.433, %class.anon.433* %18, i64 0, i32 0
  store %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"** %75, align 8
  %76 = bitcast %class.anon.434* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %76) #5
  %77 = getelementptr inbounds %class.anon.434, %class.anon.434* %19, i64 0, i32 0
  store %"struct.jxl::FrameDimensions"* %3, %"struct.jxl::FrameDimensions"** %77, align 8
  %78 = getelementptr inbounds %class.anon.434, %class.anon.434* %19, i64 0, i32 1
  store %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"** %78, align 8
  %79 = getelementptr inbounds %class.anon.434, %class.anon.434* %19, i64 0, i32 2
  store float* %13, float** %79, align 8
  %80 = getelementptr inbounds %class.anon.434, %class.anon.434* %19, i64 0, i32 3
  store float* %14, float** %80, align 8
  %81 = getelementptr inbounds %class.anon.434, %class.anon.434* %19, i64 0, i32 4
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %81, align 8
  %82 = getelementptr inbounds %class.anon.434, %class.anon.434* %19, i64 0, i32 5
  store %"class.jxl::Plane.1"** %15, %"class.jxl::Plane.1"*** %82, align 8
  %83 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), double* nonnull %10) #5
  %84 = icmp eq %"class.jxl::ThreadPool"* %5, null
  br i1 %84, label %85, label %96

85:                                               ; preds = %65
  %86 = bitcast %"class.jxl::ThreadPool"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %86) #5
  %87 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %87, align 8
  %89 = bitcast i8** %88 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %11, %"class.jxl::ThreadPool"** %89, align 8
  %90 = icmp eq i32 %73, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %85
  %92 = bitcast %"class.jxl::ThreadPool::RunCallState"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %92) #5
  %93 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %8, i64 0, i32 0
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %8, i64 0, i32 1
  store %class.anon.433* %18, %class.anon.433** %93, align 8
  store %class.anon.434* %19, %class.anon.434** %94, align 8
  %95 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %86, i8* nonnull %92, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_6ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_7E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_6ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_7E12CallDataFuncEPvjm", i32 0, i32 %73) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #5
  br label %107

96:                                               ; preds = %65
  %97 = icmp eq i32 %73, 0
  br i1 %97, label %109, label %98

98:                                               ; preds = %96
  %99 = bitcast %"class.jxl::ThreadPool::RunCallState"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99) #5
  %100 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %9, i64 0, i32 0
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %9, i64 0, i32 1
  store %class.anon.433* %18, %class.anon.433** %100, align 8
  store %class.anon.434* %19, %class.anon.434** %101, align 8
  %102 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 0
  %103 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 1
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 %103(i8* %105, i8* nonnull %99, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_6ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_7E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_6ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_7E12CallDataFuncEPvjm", i32 0, i32 %73) #5
  br label %107

107:                                              ; preds = %85, %91, %98
  %108 = phi i8* [ %99, %98 ], [ %86, %91 ], [ %86, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #5
  br label %109

109:                                              ; preds = %107, %96
  %110 = load double, double* %10, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), double %110) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #5
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %76) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #5
  %111 = bitcast %"class.jxl::Plane.1"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %32, i64 24, i1 false) #5
  %112 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %0, i64 0, i32 0, i32 5
  %113 = load i64, i64* %38, align 8
  store i8* null, i8** %37, align 8
  %114 = bitcast %"class.std::__1::unique_ptr"* %112 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %118, label %120

118:                                              ; preds = %109
  %119 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %119, align 8
  br label %126

120:                                              ; preds = %109
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #5
  %121 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %122 = load i8*, i8** %121, align 8
  %123 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %123, align 8
  %124 = icmp eq i8* %122, null
  br i1 %124, label %126, label %125

125:                                              ; preds = %120
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %122) #5
  br label %126

126:                                              ; preds = %118, %125, %120
  %127 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 0, i32 0, i32 0
  %128 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %127, align 8
  %129 = icmp eq %"class.jxl::Plane.1"* %128, null
  br i1 %129, label %149, label %130

130:                                              ; preds = %126
  %131 = bitcast %"class.jxl::Plane.1"* %128 to i8*
  %132 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 0, i32 0, i32 1
  %133 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %132, align 8
  %134 = icmp eq %"class.jxl::Plane.1"* %133, %128
  br i1 %134, label %147, label %135

135:                                              ; preds = %130, %142
  %136 = phi %"class.jxl::Plane.1"* [ %137, %142 ], [ %133, %130 ]
  %137 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -1
  %138 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  store i8* null, i8** %138, align 8
  %140 = icmp eq i8* %139, null
  br i1 %140, label %142, label %141

141:                                              ; preds = %135
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %139) #5
  br label %142

142:                                              ; preds = %141, %135
  %143 = icmp eq %"class.jxl::Plane.1"* %137, %128
  br i1 %143, label %144, label %135

144:                                              ; preds = %142
  %145 = bitcast %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %16 to i8**
  %146 = load i8*, i8** %145, align 8
  br label %147

147:                                              ; preds = %144, %130
  %148 = phi i8* [ %146, %144 ], [ %131, %130 ]
  store %"class.jxl::Plane.1"* %128, %"class.jxl::Plane.1"** %132, align 8
  call void @_ZdlPv(i8* %148) #25
  br label %149

149:                                              ; preds = %126, %147
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %20) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEE(%"class.jxl::Plane.1"* noalias nocapture sret, float, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::FrameDimensions"* dereferenceable(144), float, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Plane.1"*) #8 {
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.464", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.464", align 8
  %10 = alloca double, align 8
  %11 = alloca %"class.jxl::ThreadPool", align 8
  %12 = alloca %"class.jxl::Plane.1", align 8
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca %"class.jxl::Plane.1"*, align 8
  %16 = alloca %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", align 8
  %17 = alloca %"class.jxl::Plane.1", align 8
  %18 = alloca %class.anon.462, align 8
  %19 = alloca %class.anon.463, align 8
  store float %1, float* %13, align 4
  store float %4, float* %14, align 4
  store %"class.jxl::Plane.1"* %6, %"class.jxl::Plane.1"** %15, align 8
  %20 = bitcast %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %20) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 88, i1 false) #5
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = bitcast %"class.jxl::Plane.1"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #5
  %26 = lshr i32 %22, 3
  %27 = zext i32 %26 to i64
  %28 = lshr i32 %24, 3
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %12, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %30, i64 %27, i64 %29, i64 4) #5
  %31 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1
  %32 = bitcast %"class.jxl::Plane.1"* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* nonnull align 8 %25, i64 24, i1 false) #5
  %33 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5
  %34 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %12, i64 0, i32 0, i32 5
  %35 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %33, i64 0, i32 0, i32 0, i32 0
  %38 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  store i64 %36, i64* %38, align 8
  %39 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 8
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 9
  %42 = load i64, i64* %41, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #5
  %43 = bitcast %"class.jxl::Plane.1"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #5
  %44 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 8
  %45 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 9
  %46 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %46, i64 %40, i64 %42, i64 4) #5
  %47 = bitcast %"class.jxl::Plane.1"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* nonnull align 8 %43, i64 24, i1 false) #5
  %48 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %6, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %57, label %59

57:                                               ; preds = %7
  %58 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %58, align 8
  br label %65

59:                                               ; preds = %7
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #5
  %60 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %62, align 8
  %63 = icmp eq i8* %61, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #5
  br label %65

65:                                               ; preds = %57, %59, %64
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #5
  %66 = load i64, i64* %44, align 8
  %67 = add i64 %66, 7
  %68 = lshr i64 %67, 3
  %69 = load i64, i64* %45, align 8
  %70 = add i64 %69, 7
  %71 = lshr i64 %70, 3
  %72 = mul i64 %71, %68
  %73 = trunc i64 %72 to i32
  %74 = bitcast %class.anon.462* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #5
  %75 = getelementptr inbounds %class.anon.462, %class.anon.462* %18, i64 0, i32 0
  store %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"** %75, align 8
  %76 = bitcast %class.anon.463* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %76) #5
  %77 = getelementptr inbounds %class.anon.463, %class.anon.463* %19, i64 0, i32 0
  store %"struct.jxl::FrameDimensions"* %3, %"struct.jxl::FrameDimensions"** %77, align 8
  %78 = getelementptr inbounds %class.anon.463, %class.anon.463* %19, i64 0, i32 1
  store %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"** %78, align 8
  %79 = getelementptr inbounds %class.anon.463, %class.anon.463* %19, i64 0, i32 2
  store float* %13, float** %79, align 8
  %80 = getelementptr inbounds %class.anon.463, %class.anon.463* %19, i64 0, i32 3
  store float* %14, float** %80, align 8
  %81 = getelementptr inbounds %class.anon.463, %class.anon.463* %19, i64 0, i32 4
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %81, align 8
  %82 = getelementptr inbounds %class.anon.463, %class.anon.463* %19, i64 0, i32 5
  store %"class.jxl::Plane.1"** %15, %"class.jxl::Plane.1"*** %82, align 8
  %83 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), double* nonnull %10) #5
  %84 = icmp eq %"class.jxl::ThreadPool"* %5, null
  br i1 %84, label %85, label %96

85:                                               ; preds = %65
  %86 = bitcast %"class.jxl::ThreadPool"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %86) #5
  %87 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %87, align 8
  %89 = bitcast i8** %88 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %11, %"class.jxl::ThreadPool"** %89, align 8
  %90 = icmp eq i32 %73, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %85
  %92 = bitcast %"class.jxl::ThreadPool::RunCallState.464"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %92) #5
  %93 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.464", %"class.jxl::ThreadPool::RunCallState.464"* %8, i64 0, i32 0
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.464", %"class.jxl::ThreadPool::RunCallState.464"* %8, i64 0, i32 1
  store %class.anon.462* %18, %class.anon.462** %93, align 8
  store %class.anon.463* %19, %class.anon.463** %94, align 8
  %95 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %86, i8* nonnull %92, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_4ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_5E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_4ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_5E12CallDataFuncEPvjm", i32 0, i32 %73) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #5
  br label %107

96:                                               ; preds = %65
  %97 = icmp eq i32 %73, 0
  br i1 %97, label %109, label %98

98:                                               ; preds = %96
  %99 = bitcast %"class.jxl::ThreadPool::RunCallState.464"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99) #5
  %100 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.464", %"class.jxl::ThreadPool::RunCallState.464"* %9, i64 0, i32 0
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.464", %"class.jxl::ThreadPool::RunCallState.464"* %9, i64 0, i32 1
  store %class.anon.462* %18, %class.anon.462** %100, align 8
  store %class.anon.463* %19, %class.anon.463** %101, align 8
  %102 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 0
  %103 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 1
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 %103(i8* %105, i8* nonnull %99, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_4ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_5E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_4ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_5E12CallDataFuncEPvjm", i32 0, i32 %73) #5
  br label %107

107:                                              ; preds = %85, %91, %98
  %108 = phi i8* [ %99, %98 ], [ %86, %91 ], [ %86, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #5
  br label %109

109:                                              ; preds = %107, %96
  %110 = load double, double* %10, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), double %110) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #5
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %76) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #5
  %111 = bitcast %"class.jxl::Plane.1"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %32, i64 24, i1 false) #5
  %112 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %0, i64 0, i32 0, i32 5
  %113 = load i64, i64* %38, align 8
  store i8* null, i8** %37, align 8
  %114 = bitcast %"class.std::__1::unique_ptr"* %112 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %118, label %120

118:                                              ; preds = %109
  %119 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %119, align 8
  br label %126

120:                                              ; preds = %109
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #5
  %121 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %122 = load i8*, i8** %121, align 8
  %123 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %123, align 8
  %124 = icmp eq i8* %122, null
  br i1 %124, label %126, label %125

125:                                              ; preds = %120
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %122) #5
  br label %126

126:                                              ; preds = %118, %125, %120
  %127 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 0, i32 0, i32 0
  %128 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %127, align 8
  %129 = icmp eq %"class.jxl::Plane.1"* %128, null
  br i1 %129, label %149, label %130

130:                                              ; preds = %126
  %131 = bitcast %"class.jxl::Plane.1"* %128 to i8*
  %132 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 0, i32 0, i32 1
  %133 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %132, align 8
  %134 = icmp eq %"class.jxl::Plane.1"* %133, %128
  br i1 %134, label %147, label %135

135:                                              ; preds = %130, %142
  %136 = phi %"class.jxl::Plane.1"* [ %137, %142 ], [ %133, %130 ]
  %137 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -1
  %138 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  store i8* null, i8** %138, align 8
  %140 = icmp eq i8* %139, null
  br i1 %140, label %142, label %141

141:                                              ; preds = %135
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %139) #5
  br label %142

142:                                              ; preds = %141, %135
  %143 = icmp eq %"class.jxl::Plane.1"* %137, %128
  br i1 %143, label %144, label %135

144:                                              ; preds = %142
  %145 = bitcast %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %16 to i8**
  %146 = load i8*, i8** %145, align 8
  br label %147

147:                                              ; preds = %144, %130
  %148 = phi i8* [ %146, %144 ], [ %131, %130 ]
  store %"class.jxl::Plane.1"* %128, %"class.jxl::Plane.1"** %132, align 8
  call void @_ZdlPv(i8* %148) #25
  br label %149

149:                                              ; preds = %126, %147
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %20) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEE(%"class.jxl::Plane.1"* noalias nocapture sret, float, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::FrameDimensions"* dereferenceable(144), float, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Plane.1"*) #9 {
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.485", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.485", align 8
  %10 = alloca double, align 8
  %11 = alloca %"class.jxl::ThreadPool", align 8
  %12 = alloca %"class.jxl::Plane.1", align 8
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca %"class.jxl::Plane.1"*, align 8
  %16 = alloca %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", align 8
  %17 = alloca %"class.jxl::Plane.1", align 8
  %18 = alloca %class.anon.483, align 8
  %19 = alloca %class.anon.484, align 8
  store float %1, float* %13, align 4
  store float %4, float* %14, align 4
  store %"class.jxl::Plane.1"* %6, %"class.jxl::Plane.1"** %15, align 8
  %20 = bitcast %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %20) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 88, i1 false) #5
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = bitcast %"class.jxl::Plane.1"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #5
  %26 = lshr i32 %22, 3
  %27 = zext i32 %26 to i64
  %28 = lshr i32 %24, 3
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %12, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %30, i64 %27, i64 %29, i64 4) #5
  %31 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1
  %32 = bitcast %"class.jxl::Plane.1"* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* nonnull align 8 %25, i64 24, i1 false) #5
  %33 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5
  %34 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %12, i64 0, i32 0, i32 5
  %35 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %33, i64 0, i32 0, i32 0, i32 0
  %38 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  store i64 %36, i64* %38, align 8
  %39 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 8
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 9
  %42 = load i64, i64* %41, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #5
  %43 = bitcast %"class.jxl::Plane.1"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #5
  %44 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 8
  %45 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 9
  %46 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %46, i64 %40, i64 %42, i64 4) #5
  %47 = bitcast %"class.jxl::Plane.1"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* nonnull align 8 %43, i64 24, i1 false) #5
  %48 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %6, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %57, label %59

57:                                               ; preds = %7
  %58 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %58, align 8
  br label %65

59:                                               ; preds = %7
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #5
  %60 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %62, align 8
  %63 = icmp eq i8* %61, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #5
  br label %65

65:                                               ; preds = %57, %59, %64
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #5
  %66 = load i64, i64* %44, align 8
  %67 = add i64 %66, 7
  %68 = lshr i64 %67, 3
  %69 = load i64, i64* %45, align 8
  %70 = add i64 %69, 7
  %71 = lshr i64 %70, 3
  %72 = mul i64 %71, %68
  %73 = trunc i64 %72 to i32
  %74 = bitcast %class.anon.483* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #5
  %75 = getelementptr inbounds %class.anon.483, %class.anon.483* %18, i64 0, i32 0
  store %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"** %75, align 8
  %76 = bitcast %class.anon.484* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %76) #5
  %77 = getelementptr inbounds %class.anon.484, %class.anon.484* %19, i64 0, i32 0
  store %"struct.jxl::FrameDimensions"* %3, %"struct.jxl::FrameDimensions"** %77, align 8
  %78 = getelementptr inbounds %class.anon.484, %class.anon.484* %19, i64 0, i32 1
  store %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"** %78, align 8
  %79 = getelementptr inbounds %class.anon.484, %class.anon.484* %19, i64 0, i32 2
  store float* %13, float** %79, align 8
  %80 = getelementptr inbounds %class.anon.484, %class.anon.484* %19, i64 0, i32 3
  store float* %14, float** %80, align 8
  %81 = getelementptr inbounds %class.anon.484, %class.anon.484* %19, i64 0, i32 4
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %81, align 8
  %82 = getelementptr inbounds %class.anon.484, %class.anon.484* %19, i64 0, i32 5
  store %"class.jxl::Plane.1"** %15, %"class.jxl::Plane.1"*** %82, align 8
  %83 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), double* nonnull %10) #5
  %84 = icmp eq %"class.jxl::ThreadPool"* %5, null
  br i1 %84, label %85, label %96

85:                                               ; preds = %65
  %86 = bitcast %"class.jxl::ThreadPool"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %86) #5
  %87 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %87, align 8
  %89 = bitcast i8** %88 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %11, %"class.jxl::ThreadPool"** %89, align 8
  %90 = icmp eq i32 %73, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %85
  %92 = bitcast %"class.jxl::ThreadPool::RunCallState.485"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %92) #5
  %93 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.485", %"class.jxl::ThreadPool::RunCallState.485"* %8, i64 0, i32 0
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.485", %"class.jxl::ThreadPool::RunCallState.485"* %8, i64 0, i32 1
  store %class.anon.483* %18, %class.anon.483** %93, align 8
  store %class.anon.484* %19, %class.anon.484** %94, align 8
  %95 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %86, i8* nonnull %92, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_2ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_2ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_3E12CallDataFuncEPvjm", i32 0, i32 %73) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #5
  br label %107

96:                                               ; preds = %65
  %97 = icmp eq i32 %73, 0
  br i1 %97, label %109, label %98

98:                                               ; preds = %96
  %99 = bitcast %"class.jxl::ThreadPool::RunCallState.485"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99) #5
  %100 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.485", %"class.jxl::ThreadPool::RunCallState.485"* %9, i64 0, i32 0
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.485", %"class.jxl::ThreadPool::RunCallState.485"* %9, i64 0, i32 1
  store %class.anon.483* %18, %class.anon.483** %100, align 8
  store %class.anon.484* %19, %class.anon.484** %101, align 8
  %102 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 0
  %103 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 1
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 %103(i8* %105, i8* nonnull %99, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_2ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_2ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_3E12CallDataFuncEPvjm", i32 0, i32 %73) #5
  br label %107

107:                                              ; preds = %85, %91, %98
  %108 = phi i8* [ %99, %98 ], [ %86, %91 ], [ %86, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #5
  br label %109

109:                                              ; preds = %107, %96
  %110 = load double, double* %10, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), double %110) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #5
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %76) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #5
  %111 = bitcast %"class.jxl::Plane.1"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %32, i64 24, i1 false) #5
  %112 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %0, i64 0, i32 0, i32 5
  %113 = load i64, i64* %38, align 8
  store i8* null, i8** %37, align 8
  %114 = bitcast %"class.std::__1::unique_ptr"* %112 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %118, label %120

118:                                              ; preds = %109
  %119 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %119, align 8
  br label %126

120:                                              ; preds = %109
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #5
  %121 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %122 = load i8*, i8** %121, align 8
  %123 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %123, align 8
  %124 = icmp eq i8* %122, null
  br i1 %124, label %126, label %125

125:                                              ; preds = %120
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %122) #5
  br label %126

126:                                              ; preds = %118, %125, %120
  %127 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 0, i32 0, i32 0
  %128 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %127, align 8
  %129 = icmp eq %"class.jxl::Plane.1"* %128, null
  br i1 %129, label %149, label %130

130:                                              ; preds = %126
  %131 = bitcast %"class.jxl::Plane.1"* %128 to i8*
  %132 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 0, i32 0, i32 1
  %133 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %132, align 8
  %134 = icmp eq %"class.jxl::Plane.1"* %133, %128
  br i1 %134, label %147, label %135

135:                                              ; preds = %130, %142
  %136 = phi %"class.jxl::Plane.1"* [ %137, %142 ], [ %133, %130 ]
  %137 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -1
  %138 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  store i8* null, i8** %138, align 8
  %140 = icmp eq i8* %139, null
  br i1 %140, label %142, label %141

141:                                              ; preds = %135
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %139) #5
  br label %142

142:                                              ; preds = %141, %135
  %143 = icmp eq %"class.jxl::Plane.1"* %137, %128
  br i1 %143, label %144, label %135

144:                                              ; preds = %142
  %145 = bitcast %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %16 to i8**
  %146 = load i8*, i8** %145, align 8
  br label %147

147:                                              ; preds = %144, %130
  %148 = phi i8* [ %146, %144 ], [ %131, %130 ]
  store %"class.jxl::Plane.1"* %128, %"class.jxl::Plane.1"** %132, align 8
  call void @_ZdlPv(i8* %148) #25
  br label %149

149:                                              ; preds = %126, %147
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %20) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl8N_SCALAR12_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEE(%"class.jxl::Plane.1"* noalias nocapture sret, float, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::FrameDimensions"* dereferenceable(144), float, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Plane.1"*) #0 {
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.506", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.506", align 8
  %10 = alloca double, align 8
  %11 = alloca %"class.jxl::ThreadPool", align 8
  %12 = alloca %"class.jxl::Plane.1", align 8
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca %"class.jxl::Plane.1"*, align 8
  %16 = alloca %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", align 8
  %17 = alloca %"class.jxl::Plane.1", align 8
  %18 = alloca %class.anon.504, align 8
  %19 = alloca %class.anon.505, align 8
  store float %1, float* %13, align 4
  store float %4, float* %14, align 4
  store %"class.jxl::Plane.1"* %6, %"class.jxl::Plane.1"** %15, align 8
  %20 = bitcast %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %20) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 88, i1 false) #5
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = bitcast %"class.jxl::Plane.1"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #5
  %26 = lshr i32 %22, 3
  %27 = zext i32 %26 to i64
  %28 = lshr i32 %24, 3
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %12, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %30, i64 %27, i64 %29, i64 4) #5
  %31 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1
  %32 = bitcast %"class.jxl::Plane.1"* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* nonnull align 8 %25, i64 24, i1 false) #5
  %33 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5
  %34 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %12, i64 0, i32 0, i32 5
  %35 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %33, i64 0, i32 0, i32 0, i32 0
  %38 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  store i64 %36, i64* %38, align 8
  %39 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 8
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 9
  %42 = load i64, i64* %41, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #5
  %43 = bitcast %"class.jxl::Plane.1"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #5
  %44 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 8
  %45 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 9
  %46 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %46, i64 %40, i64 %42, i64 4) #5
  %47 = bitcast %"class.jxl::Plane.1"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* nonnull align 8 %43, i64 24, i1 false) #5
  %48 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %6, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %57, label %59

57:                                               ; preds = %7
  %58 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %58, align 8
  br label %65

59:                                               ; preds = %7
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #5
  %60 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %62, align 8
  %63 = icmp eq i8* %61, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #5
  br label %65

65:                                               ; preds = %57, %59, %64
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #5
  %66 = load i64, i64* %44, align 8
  %67 = add i64 %66, 7
  %68 = lshr i64 %67, 3
  %69 = load i64, i64* %45, align 8
  %70 = add i64 %69, 7
  %71 = lshr i64 %70, 3
  %72 = mul i64 %71, %68
  %73 = trunc i64 %72 to i32
  %74 = bitcast %class.anon.504* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #5
  %75 = getelementptr inbounds %class.anon.504, %class.anon.504* %18, i64 0, i32 0
  store %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"** %75, align 8
  %76 = bitcast %class.anon.505* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %76) #5
  %77 = getelementptr inbounds %class.anon.505, %class.anon.505* %19, i64 0, i32 0
  store %"struct.jxl::FrameDimensions"* %3, %"struct.jxl::FrameDimensions"** %77, align 8
  %78 = getelementptr inbounds %class.anon.505, %class.anon.505* %19, i64 0, i32 1
  store %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"** %78, align 8
  %79 = getelementptr inbounds %class.anon.505, %class.anon.505* %19, i64 0, i32 2
  store float* %13, float** %79, align 8
  %80 = getelementptr inbounds %class.anon.505, %class.anon.505* %19, i64 0, i32 3
  store float* %14, float** %80, align 8
  %81 = getelementptr inbounds %class.anon.505, %class.anon.505* %19, i64 0, i32 4
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %81, align 8
  %82 = getelementptr inbounds %class.anon.505, %class.anon.505* %19, i64 0, i32 5
  store %"class.jxl::Plane.1"** %15, %"class.jxl::Plane.1"*** %82, align 8
  %83 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), double* nonnull %10) #5
  %84 = icmp eq %"class.jxl::ThreadPool"* %5, null
  br i1 %84, label %85, label %96

85:                                               ; preds = %65
  %86 = bitcast %"class.jxl::ThreadPool"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %86) #5
  %87 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %87, align 8
  %89 = bitcast i8** %88 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %11, %"class.jxl::ThreadPool"** %89, align 8
  %90 = icmp eq i32 %73, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %85
  %92 = bitcast %"class.jxl::ThreadPool::RunCallState.506"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %92) #5
  %93 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.506", %"class.jxl::ThreadPool::RunCallState.506"* %8, i64 0, i32 0
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.506", %"class.jxl::ThreadPool::RunCallState.506"* %8, i64 0, i32 1
  store %class.anon.504* %18, %class.anon.504** %93, align 8
  store %class.anon.505* %19, %class.anon.505** %94, align 8
  %95 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %86, i8* nonnull %92, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_8N_SCALAR12_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_8ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_9E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_8N_SCALAR12_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_8ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_9E12CallDataFuncEPvjm", i32 0, i32 %73) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #5
  br label %107

96:                                               ; preds = %65
  %97 = icmp eq i32 %73, 0
  br i1 %97, label %109, label %98

98:                                               ; preds = %96
  %99 = bitcast %"class.jxl::ThreadPool::RunCallState.506"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99) #5
  %100 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.506", %"class.jxl::ThreadPool::RunCallState.506"* %9, i64 0, i32 0
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.506", %"class.jxl::ThreadPool::RunCallState.506"* %9, i64 0, i32 1
  store %class.anon.504* %18, %class.anon.504** %100, align 8
  store %class.anon.505* %19, %class.anon.505** %101, align 8
  %102 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 0
  %103 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 1
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 %103(i8* %105, i8* nonnull %99, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_8N_SCALAR12_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_8ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_9E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_8N_SCALAR12_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_8ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_9E12CallDataFuncEPvjm", i32 0, i32 %73) #5
  br label %107

107:                                              ; preds = %85, %91, %98
  %108 = phi i8* [ %99, %98 ], [ %86, %91 ], [ %86, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #5
  br label %109

109:                                              ; preds = %107, %96
  %110 = load double, double* %10, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), double %110) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #5
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %76) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #5
  %111 = bitcast %"class.jxl::Plane.1"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %32, i64 24, i1 false) #5
  %112 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %0, i64 0, i32 0, i32 5
  %113 = load i64, i64* %38, align 8
  store i8* null, i8** %37, align 8
  %114 = bitcast %"class.std::__1::unique_ptr"* %112 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %118, label %120

118:                                              ; preds = %109
  %119 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %119, align 8
  br label %126

120:                                              ; preds = %109
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #5
  %121 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %122 = load i8*, i8** %121, align 8
  %123 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %123, align 8
  %124 = icmp eq i8* %122, null
  br i1 %124, label %126, label %125

125:                                              ; preds = %120
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %122) #5
  br label %126

126:                                              ; preds = %118, %125, %120
  %127 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 0, i32 0, i32 0
  %128 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %127, align 8
  %129 = icmp eq %"class.jxl::Plane.1"* %128, null
  br i1 %129, label %149, label %130

130:                                              ; preds = %126
  %131 = bitcast %"class.jxl::Plane.1"* %128 to i8*
  %132 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16, i64 0, i32 0, i32 0, i32 1
  %133 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %132, align 8
  %134 = icmp eq %"class.jxl::Plane.1"* %133, %128
  br i1 %134, label %147, label %135

135:                                              ; preds = %130, %142
  %136 = phi %"class.jxl::Plane.1"* [ %137, %142 ], [ %133, %130 ]
  %137 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -1
  %138 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  store i8* null, i8** %138, align 8
  %140 = icmp eq i8* %139, null
  br i1 %140, label %142, label %141

141:                                              ; preds = %135
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %139) #5
  br label %142

142:                                              ; preds = %141, %135
  %143 = icmp eq %"class.jxl::Plane.1"* %137, %128
  br i1 %143, label %144, label %135

144:                                              ; preds = %142
  %145 = bitcast %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %16 to i8**
  %146 = load i8*, i8** %145, align 8
  br label %147

147:                                              ; preds = %144, %130
  %148 = phi i8* [ %146, %144 ], [ %131, %130 ]
  store %"class.jxl::Plane.1"* %128, %"class.jxl::Plane.1"** %132, align 8
  call void @_ZdlPv(i8* %148) #25
  br label %149

149:                                              ; preds = %126, %147
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %20) #5
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #2

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #2

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #2

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_6ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_7E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to %class.anon.433**
  %4 = load %class.anon.433*, %class.anon.433** %3, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_6clEm"(%class.anon.433* %4, i64 %1)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_6ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_7E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.434**
  %6 = load %class.anon.434*, %class.anon.434** %5, align 8
  %7 = trunc i64 %2 to i32
  tail call fastcc void @"_ZZN3jxl6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_7clEii"(%class.anon.434* %6, i32 %1, i32 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_6clEm"(%class.anon.433* nocapture readonly, i64) unnamed_addr #10 align 2 {
  %3 = alloca %"class.jxl::Plane.1", align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = getelementptr inbounds %class.anon.433, %class.anon.433* %0, i64 0, i32 0
  %7 = load %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"*, %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"** %6, align 8
  %8 = bitcast %"class.jxl::Plane.1"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #5
  %9 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %9, i64 72, i64 %1, i64 4) #5
  %10 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 2
  %11 = bitcast %"class.jxl::Plane.1"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* nonnull align 8 %8, i64 24, i1 false) #5
  %12 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 2, i32 0, i32 5
  %13 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %22, align 8
  br label %28

23:                                               ; preds = %2
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %18) #5
  %24 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  store i8* null, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %23
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %25) #5
  br label %28

28:                                               ; preds = %27, %23, %21
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #5
  %29 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 0
  %30 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 0, i32 0, i32 1
  %31 = bitcast %"class.jxl::Plane.1"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %7 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %32, %34
  %36 = ashr exact i64 %35, 5
  %37 = icmp ult i64 %36, %1
  br i1 %37, label %38, label %58

38:                                               ; preds = %28
  %39 = inttoptr i64 %32 to %"class.jxl::Plane.1"*
  %40 = bitcast i64* %4 to i8*
  %41 = bitcast i64* %5 to i8*
  %42 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  br label %43

43:                                               ; preds = %56, %38
  %44 = phi %"class.jxl::Plane.1"* [ %39, %38 ], [ %57, %56 ]
  %45 = phi i64 [ %36, %38 ], [ %54, %56 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #5
  store i64 18, i64* %4, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #5
  store i64 18, i64* %5, align 8
  %46 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %42, align 8
  %47 = icmp ult %"class.jxl::Plane.1"* %44, %46
  br i1 %47, label %48, label %52

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %44, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %49, i64 18, i64 18, i64 4) #5
  %50 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %44, i64 1
  %51 = ptrtoint %"class.jxl::Plane.1"* %50 to i64
  store i64 %51, i64* %31, align 8
  br label %53

52:                                               ; preds = %43
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.87"* %29, i64* nonnull dereferenceable(8) %4, i64* nonnull dereferenceable(8) %5) #5
  br label %53

53:                                               ; preds = %52, %48
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #5
  %54 = add i64 %45, 1
  %55 = icmp eq i64 %54, %1
  br i1 %55, label %58, label %56

56:                                               ; preds = %53
  %57 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %30, align 8
  br label %43

58:                                               ; preds = %53, %28
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX312_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_7clEii"(%class.anon.434* nocapture readonly, i32, i32) unnamed_addr #11 align 2 {
  %4 = getelementptr inbounds %class.anon.434, %class.anon.434* %0, i64 0, i32 0
  %5 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %5, i64 0, i32 8
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 7
  %9 = lshr i64 %8, 3
  %10 = sext i32 %1 to i64
  %11 = urem i64 %10, %9
  %12 = udiv i64 %10, %9
  %13 = shl i64 %12, 3
  %14 = add i64 %13, 8
  %15 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %5, i64 0, i32 9
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, %14
  %18 = select i1 %17, i64 %16, i64 %14
  %19 = shl nuw i64 %11, 3
  %20 = add nuw i64 %19, 8
  %21 = icmp ult i64 %7, %20
  %22 = select i1 %21, i64 %7, i64 %20
  %23 = sub i64 %22, %19
  %24 = sub i64 %18, %13
  %25 = getelementptr inbounds %class.anon.434, %class.anon.434* %0, i64 0, i32 1
  %26 = load %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"*, %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"** %25, align 8
  %27 = getelementptr inbounds %class.anon.434, %class.anon.434* %0, i64 0, i32 2
  %28 = load float*, float** %27, align 8
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds %class.anon.434, %class.anon.434* %0, i64 0, i32 3
  %31 = load float*, float** %30, align 8
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %class.anon.434, %class.anon.434* %0, i64 0, i32 4
  %34 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %33, align 8
  %35 = getelementptr inbounds %class.anon.434, %class.anon.434* %0, i64 0, i32 5
  %36 = load %"class.jxl::Plane.1"**, %"class.jxl::Plane.1"*** %35, align 8
  %37 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %36, align 8
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = shl i64 %12, 6
  %45 = shl i64 %24, 3
  %46 = add i64 %45, %44
  %47 = shl i64 %11, 6
  %48 = shl i64 %23, 3
  %49 = add i64 %48, %47
  %50 = icmp eq i64 %47, 0
  %51 = add i64 %47, -4
  %52 = select i1 %50, i64 0, i64 %51
  %53 = icmp eq i64 %49, %40
  %54 = or i64 %49, 4
  %55 = select i1 %53, i64 %49, i64 %54
  %56 = icmp eq i64 %44, 0
  %57 = add i64 %44, -4
  %58 = select i1 %56, i64 0, i64 %57
  %59 = icmp eq i64 %46, %43
  %60 = or i64 %46, 4
  %61 = select i1 %59, i64 %46, i64 %60
  %62 = sext i32 %2 to i64
  %63 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %63, align 8
  %65 = sub i64 %55, %52
  %66 = lshr exact i64 %65, 2
  %67 = sub i64 %61, %58
  %68 = lshr exact i64 %67, 2
  %69 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 2
  %70 = load i32, i32* %69, align 8
  %71 = zext i32 %70 to i64
  %72 = icmp ugt i64 %66, %71
  br i1 %72, label %73, label %76

73:                                               ; preds = %3
  %74 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)) #5
  %75 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

76:                                               ; preds = %3
  %77 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 3
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = icmp ugt i64 %68, %79
  br i1 %80, label %81, label %84

81:                                               ; preds = %76
  %82 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0)) #5
  %83 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

84:                                               ; preds = %76
  %85 = trunc i64 %66 to i32
  %86 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 0
  store i32 %85, i32* %86, align 8
  %87 = trunc i64 %68 to i32
  %88 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 1
  store i32 %87, i32* %88, align 4
  %89 = icmp ugt i64 %61, %58
  br i1 %89, label %90, label %118

90:                                               ; preds = %84
  %91 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 4
  %92 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %93 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %95 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 2, i32 0, i32 4
  %96 = icmp ugt i32 %39, 1
  %97 = zext i1 %96 to i64
  %98 = sub i64 0, %52
  %99 = icmp eq i64 %65, 0
  %100 = lshr exact i64 %65, 2
  %101 = icmp ugt i64 %100, 1
  %102 = select i1 %101, i64 %100, i64 1
  %103 = icmp ugt i64 %100, 1
  %104 = select i1 %103, i64 %100, i64 1
  %105 = shl nuw i64 %104, 2
  %106 = shl i64 %104, 4
  %107 = and i64 %102, 4611686018427387888
  %108 = add nsw i64 %107, -16
  %109 = lshr exact i64 %108, 4
  %110 = add nuw nsw i64 %109, 1
  %111 = icmp ult i64 %102, 16
  %112 = and i64 %102, 4611686018427387888
  %113 = and i64 %110, 1
  %114 = icmp eq i64 %108, 0
  %115 = sub nuw nsw i64 %110, %113
  %116 = icmp eq i64 %113, 0
  %117 = icmp eq i64 %102, %112
  br label %370

118:                                              ; preds = %746, %84
  %119 = lshr exact i64 %52, 2
  %120 = and i64 %119, 1
  %121 = lshr exact i64 %58, 2
  %122 = and i64 %121, 1
  %123 = shl i64 %23, 1
  %124 = shl i64 %24, 1
  %125 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %63, align 8
  %126 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 0
  %127 = load i32, i32* %126, align 8
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 1
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  %132 = icmp eq i64 %124, 0
  br i1 %132, label %349, label %133

133:                                              ; preds = %118
  %134 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 5, i32 0, i32 0, i32 0
  %135 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 4
  %136 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %137 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 4
  br label %138

138:                                              ; preds = %180, %133
  %139 = phi i64 [ %123, %133 ], [ %181, %180 ]
  %140 = phi i64 [ 0, %133 ], [ %182, %180 ]
  %141 = add nuw i64 %140, %122
  %142 = icmp eq i64 %141, 0
  %143 = add i64 %141, -1
  %144 = select i1 %142, i64 0, i64 %143
  %145 = add nuw i64 %141, 1
  %146 = icmp ult i64 %145, %131
  %147 = select i1 %146, i64 %145, i64 %141
  %148 = load i8*, i8** %134, align 8
  %149 = load i64, i64* %135, align 8
  %150 = mul i64 %144, %149
  %151 = getelementptr inbounds i8, i8* %148, i64 %150
  %152 = ptrtoint i8* %151 to i64
  %153 = and i64 %152, 63
  %154 = icmp eq i64 %153, 0
  tail call void @llvm.assume(i1 %154) #5
  %155 = bitcast i8* %151 to float*
  %156 = mul i64 %149, %141
  %157 = getelementptr inbounds i8, i8* %148, i64 %156
  %158 = ptrtoint i8* %157 to i64
  %159 = and i64 %158, 63
  %160 = icmp eq i64 %159, 0
  tail call void @llvm.assume(i1 %160) #5
  %161 = bitcast i8* %157 to float*
  %162 = mul i64 %147, %149
  %163 = getelementptr inbounds i8, i8* %148, i64 %162
  %164 = ptrtoint i8* %163 to i64
  %165 = and i64 %164, 63
  %166 = icmp eq i64 %165, 0
  tail call void @llvm.assume(i1 %166) #5
  %167 = bitcast i8* %163 to float*
  %168 = lshr i64 %140, 1
  %169 = add i64 %168, %13
  %170 = load i8*, i8** %136, align 8
  %171 = load i64, i64* %137, align 8
  %172 = mul i64 %171, %169
  %173 = getelementptr inbounds i8, i8* %170, i64 %172
  %174 = ptrtoint i8* %173 to i64
  %175 = and i64 %174, 63
  %176 = icmp eq i64 %175, 0
  tail call void @llvm.assume(i1 %176) #5
  %177 = bitcast i8* %173 to float*
  %178 = getelementptr inbounds float, float* %177, i64 %19
  %179 = icmp eq i64 %139, 0
  br i1 %179, label %180, label %184

180:                                              ; preds = %345, %138
  %181 = phi i64 [ 0, %138 ], [ %123, %345 ]
  %182 = add nuw i64 %140, 1
  %183 = icmp eq i64 %182, %124
  br i1 %183, label %349, label %138

184:                                              ; preds = %138, %345
  %185 = phi i64 [ %347, %345 ], [ 0, %138 ]
  %186 = add nuw i64 %185, %120
  %187 = icmp eq i64 %186, 0
  %188 = add i64 %186, -1
  %189 = select i1 %187, i64 0, i64 %188
  %190 = add nuw i64 %186, 1
  %191 = icmp ult i64 %190, %128
  %192 = select i1 %191, i64 %190, i64 %186
  %193 = getelementptr inbounds float, float* %161, i64 %186
  %194 = bitcast float* %193 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds float, float* %161, i64 %189
  %197 = load float, float* %196, align 4
  %198 = bitcast i32 %195 to float
  %199 = fcmp olt float %197, %198
  %200 = bitcast float %197 to i32
  %201 = select i1 %199, i32 %200, i32 %195
  %202 = getelementptr inbounds float, float* %161, i64 %192
  %203 = load float, float* %202, align 4
  %204 = fcmp olt float %203, %198
  br i1 %204, label %205, label %211

205:                                              ; preds = %184
  %206 = bitcast i32 %201 to float
  %207 = fcmp olt float %203, %206
  %208 = bitcast float %203 to i32
  %209 = select i1 %207, i32 %208, i32 %201
  %210 = select i1 %207, i32 %201, i32 %208
  br label %211

211:                                              ; preds = %205, %184
  %212 = phi i32 [ %201, %184 ], [ %209, %205 ]
  %213 = phi i32 [ %195, %184 ], [ %210, %205 ]
  %214 = getelementptr inbounds float, float* %155, i64 %189
  %215 = load float, float* %214, align 4
  %216 = fcmp olt float %215, %198
  br i1 %216, label %217, label %228

217:                                              ; preds = %211
  %218 = bitcast i32 %212 to float
  %219 = fcmp olt float %215, %218
  br i1 %219, label %220, label %222

220:                                              ; preds = %217
  %221 = bitcast float %215 to i32
  br label %228

222:                                              ; preds = %217
  %223 = bitcast i32 %213 to float
  %224 = fcmp olt float %215, %223
  %225 = bitcast float %215 to i32
  %226 = select i1 %224, i32 %225, i32 %213
  %227 = select i1 %224, i32 %213, i32 %225
  br label %228

228:                                              ; preds = %222, %220, %211
  %229 = phi i32 [ %221, %220 ], [ %212, %211 ], [ %212, %222 ]
  %230 = phi i32 [ %212, %220 ], [ %213, %211 ], [ %226, %222 ]
  %231 = phi i32 [ %213, %220 ], [ %195, %211 ], [ %227, %222 ]
  %232 = getelementptr inbounds float, float* %155, i64 %186
  %233 = load float, float* %232, align 4
  %234 = bitcast i32 %231 to float
  %235 = fcmp olt float %233, %234
  br i1 %235, label %236, label %247

236:                                              ; preds = %228
  %237 = bitcast i32 %229 to float
  %238 = fcmp olt float %233, %237
  br i1 %238, label %239, label %241

239:                                              ; preds = %236
  %240 = bitcast float %233 to i32
  br label %247

241:                                              ; preds = %236
  %242 = bitcast i32 %230 to float
  %243 = fcmp olt float %233, %242
  %244 = bitcast float %233 to i32
  %245 = select i1 %243, i32 %244, i32 %230
  %246 = select i1 %243, i32 %230, i32 %244
  br label %247

247:                                              ; preds = %241, %239, %228
  %248 = phi i32 [ %240, %239 ], [ %229, %228 ], [ %229, %241 ]
  %249 = phi i32 [ %229, %239 ], [ %230, %228 ], [ %245, %241 ]
  %250 = phi i32 [ %230, %239 ], [ %231, %228 ], [ %246, %241 ]
  %251 = getelementptr inbounds float, float* %155, i64 %192
  %252 = load float, float* %251, align 4
  %253 = bitcast i32 %250 to float
  %254 = fcmp olt float %252, %253
  br i1 %254, label %255, label %266

255:                                              ; preds = %247
  %256 = bitcast i32 %248 to float
  %257 = fcmp olt float %252, %256
  br i1 %257, label %258, label %260

258:                                              ; preds = %255
  %259 = bitcast float %252 to i32
  br label %266

260:                                              ; preds = %255
  %261 = bitcast i32 %249 to float
  %262 = fcmp olt float %252, %261
  %263 = bitcast float %252 to i32
  %264 = select i1 %262, i32 %263, i32 %249
  %265 = select i1 %262, i32 %249, i32 %263
  br label %266

266:                                              ; preds = %260, %258, %247
  %267 = phi i32 [ %259, %258 ], [ %248, %247 ], [ %248, %260 ]
  %268 = phi i32 [ %248, %258 ], [ %249, %247 ], [ %264, %260 ]
  %269 = phi i32 [ %249, %258 ], [ %250, %247 ], [ %265, %260 ]
  %270 = getelementptr inbounds float, float* %167, i64 %189
  %271 = load float, float* %270, align 4
  %272 = bitcast i32 %269 to float
  %273 = fcmp olt float %271, %272
  br i1 %273, label %274, label %285

274:                                              ; preds = %266
  %275 = bitcast i32 %267 to float
  %276 = fcmp olt float %271, %275
  br i1 %276, label %277, label %279

277:                                              ; preds = %274
  %278 = bitcast float %271 to i32
  br label %285

279:                                              ; preds = %274
  %280 = bitcast i32 %268 to float
  %281 = fcmp olt float %271, %280
  %282 = bitcast float %271 to i32
  %283 = select i1 %281, i32 %282, i32 %268
  %284 = select i1 %281, i32 %268, i32 %282
  br label %285

285:                                              ; preds = %279, %277, %266
  %286 = phi i32 [ %278, %277 ], [ %267, %266 ], [ %267, %279 ]
  %287 = phi i32 [ %267, %277 ], [ %268, %266 ], [ %283, %279 ]
  %288 = phi i32 [ %268, %277 ], [ %269, %266 ], [ %284, %279 ]
  %289 = getelementptr inbounds float, float* %167, i64 %186
  %290 = load float, float* %289, align 4
  %291 = bitcast i32 %288 to float
  %292 = fcmp olt float %290, %291
  br i1 %292, label %293, label %304

293:                                              ; preds = %285
  %294 = bitcast i32 %286 to float
  %295 = fcmp olt float %290, %294
  br i1 %295, label %296, label %298

296:                                              ; preds = %293
  %297 = bitcast float %290 to i32
  br label %304

298:                                              ; preds = %293
  %299 = bitcast i32 %287 to float
  %300 = fcmp olt float %290, %299
  %301 = bitcast float %290 to i32
  %302 = select i1 %300, i32 %301, i32 %287
  %303 = select i1 %300, i32 %287, i32 %301
  br label %304

304:                                              ; preds = %298, %296, %285
  %305 = phi i32 [ %297, %296 ], [ %286, %285 ], [ %286, %298 ]
  %306 = phi i32 [ %286, %296 ], [ %287, %285 ], [ %302, %298 ]
  %307 = phi i32 [ %287, %296 ], [ %288, %285 ], [ %303, %298 ]
  %308 = getelementptr inbounds float, float* %167, i64 %192
  %309 = load float, float* %308, align 4
  %310 = bitcast i32 %307 to float
  %311 = fcmp olt float %309, %310
  br i1 %311, label %312, label %323

312:                                              ; preds = %304
  %313 = bitcast i32 %305 to float
  %314 = fcmp olt float %309, %313
  br i1 %314, label %315, label %317

315:                                              ; preds = %312
  %316 = bitcast float %309 to i32
  br label %323

317:                                              ; preds = %312
  %318 = bitcast i32 %306 to float
  %319 = fcmp olt float %309, %318
  %320 = bitcast float %309 to i32
  %321 = select i1 %319, i32 %320, i32 %306
  %322 = select i1 %319, i32 %306, i32 %320
  br label %323

323:                                              ; preds = %317, %315, %304
  %324 = phi i32 [ %316, %315 ], [ %305, %304 ], [ %305, %317 ]
  %325 = phi i32 [ %305, %315 ], [ %306, %304 ], [ %321, %317 ]
  %326 = phi i32 [ %306, %315 ], [ %307, %304 ], [ %322, %317 ]
  %327 = fmul float %198, 0x3F7E4F2620000000
  %328 = bitcast i32 %324 to float
  %329 = fmul float %328, 0x3FC1F66CA0000000
  %330 = fadd float %327, %329
  %331 = bitcast i32 %325 to float
  %332 = fmul float %331, 0x3FA5204D60000000
  %333 = fadd float %332, %330
  %334 = bitcast i32 %326 to float
  %335 = fmul float %334, 0x3FAF3C1B80000000
  %336 = fadd float %335, %333
  %337 = or i64 %185, %140
  %338 = and i64 %337, 1
  %339 = icmp eq i64 %338, 0
  %340 = lshr i64 %185, 1
  %341 = getelementptr inbounds float, float* %178, i64 %340
  br i1 %339, label %345, label %342

342:                                              ; preds = %323
  %343 = load float, float* %341, align 4
  %344 = fadd float %336, %343
  br label %345

345:                                              ; preds = %342, %323
  %346 = phi float [ %344, %342 ], [ %336, %323 ]
  store float %346, float* %341, align 4
  %347 = add nuw i64 %185, 1
  %348 = icmp ult i64 %347, %123
  br i1 %348, label %184, label %180

349:                                              ; preds = %180, %118
  %350 = icmp eq i64 %24, 0
  br i1 %350, label %748, label %351

351:                                              ; preds = %349
  %352 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %353 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 4
  %354 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %37, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %355 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %37, i64 0, i32 0, i32 4
  %356 = shl nsw i64 %10, 5
  %357 = mul i64 %9, %12
  %358 = shl i64 %357, 5
  %359 = sub i64 %356, %358
  %360 = icmp ugt i64 %23, 1
  %361 = select i1 %360, i64 %23, i64 1
  %362 = icmp ult i64 %361, 64
  %363 = icmp ugt i64 %23, 1
  %364 = select i1 %363, i64 %23, i64 1
  %365 = shl i64 %364, 2
  %366 = add i64 %356, %365
  %367 = sub i64 %366, %358
  %368 = and i64 %361, -64
  %369 = icmp eq i64 %361, %368
  br label %1129

370:                                              ; preds = %746, %90
  %371 = phi i64 [ %58, %90 ], [ %372, %746 ]
  %372 = add nuw i64 %371, 1
  %373 = icmp ult i64 %372, %43
  %374 = select i1 %373, i64 %372, i64 %371
  %375 = icmp eq i64 %371, 0
  %376 = add i64 %371, -1
  %377 = select i1 %375, i64 0, i64 %376
  %378 = load i64, i64* %91, align 8
  %379 = mul i64 %378, %371
  %380 = load i8*, i8** %92, align 8
  %381 = ptrtoint i8* %380 to i64
  %382 = and i64 %381, 63
  %383 = icmp eq i64 %382, 0
  tail call void @llvm.assume(i1 %383) #5
  %384 = getelementptr inbounds i8, i8* %380, i64 %379
  %385 = ptrtoint i8* %384 to i64
  %386 = and i64 %385, 63
  %387 = icmp eq i64 %386, 0
  tail call void @llvm.assume(i1 %387) #5
  %388 = bitcast i8* %384 to float*
  %389 = mul i64 %377, %378
  %390 = getelementptr inbounds i8, i8* %380, i64 %389
  %391 = ptrtoint i8* %390 to i64
  %392 = and i64 %391, 63
  %393 = icmp eq i64 %392, 0
  tail call void @llvm.assume(i1 %393) #5
  %394 = mul i64 %374, %378
  %395 = getelementptr inbounds i8, i8* %380, i64 %394
  %396 = ptrtoint i8* %395 to i64
  %397 = and i64 %396, 63
  %398 = icmp eq i64 %397, 0
  tail call void @llvm.assume(i1 %398) #5
  %399 = load i8*, i8** %93, align 8
  %400 = ptrtoint i8* %399 to i64
  %401 = and i64 %400, 63
  %402 = icmp eq i64 %401, 0
  tail call void @llvm.assume(i1 %402) #5
  %403 = getelementptr inbounds i8, i8* %399, i64 %379
  %404 = ptrtoint i8* %403 to i64
  %405 = and i64 %404, 63
  %406 = icmp eq i64 %405, 0
  tail call void @llvm.assume(i1 %406) #5
  %407 = bitcast i8* %403 to float*
  %408 = getelementptr inbounds i8, i8* %399, i64 %389
  %409 = ptrtoint i8* %408 to i64
  %410 = and i64 %409, 63
  %411 = icmp eq i64 %410, 0
  tail call void @llvm.assume(i1 %411) #5
  %412 = getelementptr inbounds i8, i8* %399, i64 %394
  %413 = ptrtoint i8* %412 to i64
  %414 = and i64 %413, 63
  %415 = icmp eq i64 %414, 0
  tail call void @llvm.assume(i1 %415) #5
  %416 = load i8*, i8** %94, align 8
  %417 = load i64, i64* %95, align 8
  %418 = mul i64 %417, %62
  %419 = getelementptr inbounds i8, i8* %416, i64 %418
  %420 = ptrtoint i8* %419 to i64
  %421 = and i64 %420, 63
  %422 = icmp eq i64 %421, 0
  tail call void @llvm.assume(i1 %422) #5
  %423 = bitcast i8* %395 to float*
  %424 = bitcast i8* %390 to float*
  %425 = bitcast i8* %412 to float*
  %426 = bitcast i8* %408 to float*
  %427 = bitcast i8* %419 to float*
  br i1 %50, label %428, label %479

428:                                              ; preds = %370
  %429 = load float, float* %423, align 64
  %430 = load float, float* %424, align 64
  %431 = fadd float %429, %430
  %432 = load float, float* %388, align 64
  %433 = fadd float %431, %432
  %434 = getelementptr inbounds float, float* %388, i64 %97
  %435 = load float, float* %434, align 4
  %436 = fadd float %433, %435
  %437 = fmul float %436, 2.500000e-01
  %438 = fadd float %432, 0x3F9374BC60000000
  %439 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %438, i32 0
  %440 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %439, <4 x float> zeroinitializer, <4 x float> %439) #5
  %441 = extractelement <4 x float> %440, i32 0
  %442 = fmul float %441, %441
  %443 = insertelement <4 x float> %440, float %442, i32 0
  %444 = fmul float %442, 0x405DE18460000000
  %445 = fmul float %441, 0x406395E800000000
  %446 = insertelement <4 x float> <float undef, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>, float %445, i32 0
  %447 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %446, <4 x float> %443, <4 x float> <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>) #5
  %448 = extractelement <4 x float> %447, i32 0
  %449 = fdiv float %448, %444
  %450 = fsub float %432, %437
  %451 = fmul float %450, %449
  %452 = fmul float %451, %451
  %453 = load float, float* %425, align 64
  %454 = load float, float* %426, align 64
  %455 = fadd float %453, %454
  %456 = load float, float* %407, align 64
  %457 = fadd float %455, %456
  %458 = getelementptr inbounds float, float* %407, i64 %97
  %459 = load float, float* %458, align 4
  %460 = fadd float %457, %459
  %461 = fmul float %460, 2.500000e-01
  %462 = fsub float %456, %461
  %463 = fmul float %449, %462
  %464 = fmul float %463, %463
  %465 = fmul float %464, 0x403E7E36A0000000
  %466 = fadd float %452, %465
  %467 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %466, i32 0
  %468 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %467, <4 x float> <float 1.454330e+05, float 0x4213B2BBE0000000, float 0x4213B2BBE0000000, float 0x4213B2BBE0000000>, <4 x float> <float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000>) #5
  %469 = extractelement <4 x float> %468, i64 0
  %470 = tail call float @llvm.sqrt.f32(float %469) #5
  %471 = fmul float %470, 2.500000e-01
  %472 = and i64 %371, 3
  %473 = icmp eq i64 %472, 0
  br i1 %473, label %477, label %474

474:                                              ; preds = %428
  %475 = load float, float* %427, align 64
  %476 = fadd float %471, %475
  br label %477

477:                                              ; preds = %474, %428
  %478 = phi float [ %476, %474 ], [ %471, %428 ]
  store float %478, float* %427, align 64
  br label %479

479:                                              ; preds = %477, %370
  %480 = phi i64 [ 1, %477 ], [ %51, %370 ]
  %481 = add i64 %480, 17
  %482 = icmp ult i64 %481, %55
  br i1 %482, label %485, label %483

483:                                              ; preds = %479
  %484 = and i64 %371, 3
  br label %497

485:                                              ; preds = %479
  %486 = getelementptr inbounds i8, i8* %384, i64 4
  %487 = bitcast i8* %486 to float*
  %488 = getelementptr inbounds i8, i8* %384, i64 -4
  %489 = bitcast i8* %488 to float*
  %490 = getelementptr inbounds i8, i8* %403, i64 4
  %491 = bitcast i8* %490 to float*
  %492 = getelementptr inbounds i8, i8* %403, i64 -4
  %493 = bitcast i8* %492 to float*
  %494 = and i64 %371, 3
  %495 = icmp eq i64 %494, 0
  %496 = getelementptr inbounds float, float* %427, i64 %98
  br label %503

497:                                              ; preds = %568, %483
  %498 = phi i64 [ %484, %483 ], [ %494, %568 ]
  %499 = phi i64 [ %480, %483 ], [ %572, %568 ]
  %500 = icmp ult i64 %499, %55
  br i1 %500, label %501, label %644

501:                                              ; preds = %497
  %502 = icmp eq i64 %498, 0
  br label %575

503:                                              ; preds = %568, %485
  %504 = phi i64 [ %480, %485 ], [ %572, %568 ]
  %505 = getelementptr inbounds float, float* %388, i64 %504
  %506 = bitcast float* %505 to <16 x float>*
  %507 = load <16 x float>, <16 x float>* %506, align 4, !alias.scope !44, !noalias !47
  %508 = getelementptr inbounds float, float* %487, i64 %504
  %509 = bitcast float* %508 to <16 x float>*
  %510 = load <16 x float>, <16 x float>* %509, align 4, !alias.scope !49, !noalias !52
  %511 = getelementptr inbounds float, float* %489, i64 %504
  %512 = bitcast float* %511 to <16 x float>*
  %513 = load <16 x float>, <16 x float>* %512, align 4, !alias.scope !54, !noalias !57
  %514 = getelementptr inbounds float, float* %423, i64 %504
  %515 = bitcast float* %514 to <16 x float>*
  %516 = load <16 x float>, <16 x float>* %515, align 4, !alias.scope !59, !noalias !62
  %517 = getelementptr inbounds float, float* %424, i64 %504
  %518 = bitcast float* %517 to <16 x float>*
  %519 = load <16 x float>, <16 x float>* %518, align 4, !alias.scope !64, !noalias !67
  %520 = fadd <16 x float> %510, %513
  %521 = fadd <16 x float> %520, %516
  %522 = fadd <16 x float> %521, %519
  %523 = fmul <16 x float> %522, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %524 = fadd <16 x float> %507, <float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000>
  %525 = bitcast <16 x float> %524 to <16 x i32>
  %526 = icmp slt <16 x i32> %525, zeroinitializer
  %527 = select <16 x i1> %526, <16 x float> zeroinitializer, <16 x float> %524
  %528 = fmul <16 x float> %527, %527
  %529 = fmul <16 x float> %528, <float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000>
  %530 = fmul <16 x float> %527, <float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>
  %531 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %530, <16 x float> %528, <16 x float> <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>) #5
  %532 = fdiv <16 x float> %531, %529
  %533 = fsub <16 x float> %507, %523
  %534 = fmul <16 x float> %532, %533
  %535 = fmul <16 x float> %534, %534
  %536 = getelementptr inbounds float, float* %407, i64 %504
  %537 = bitcast float* %536 to <16 x float>*
  %538 = load <16 x float>, <16 x float>* %537, align 4, !alias.scope !69, !noalias !72
  %539 = getelementptr inbounds float, float* %491, i64 %504
  %540 = bitcast float* %539 to <16 x float>*
  %541 = load <16 x float>, <16 x float>* %540, align 4, !alias.scope !74, !noalias !77
  %542 = getelementptr inbounds float, float* %493, i64 %504
  %543 = bitcast float* %542 to <16 x float>*
  %544 = load <16 x float>, <16 x float>* %543, align 4, !alias.scope !79, !noalias !82
  %545 = getelementptr inbounds float, float* %425, i64 %504
  %546 = bitcast float* %545 to <16 x float>*
  %547 = load <16 x float>, <16 x float>* %546, align 4, !alias.scope !84, !noalias !87
  %548 = getelementptr inbounds float, float* %426, i64 %504
  %549 = bitcast float* %548 to <16 x float>*
  %550 = load <16 x float>, <16 x float>* %549, align 4, !alias.scope !89, !noalias !92
  %551 = fadd <16 x float> %541, %544
  %552 = fadd <16 x float> %551, %547
  %553 = fadd <16 x float> %552, %550
  %554 = fmul <16 x float> %553, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %555 = fsub <16 x float> %538, %554
  %556 = fmul <16 x float> %532, %555
  %557 = fmul <16 x float> %556, %556
  %558 = fmul <16 x float> %557, <float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000>
  %559 = fadd <16 x float> %535, %558
  %560 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %559, <16 x float> <float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05>, <16 x float> <float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000>) #5
  %561 = tail call <16 x float> @llvm.sqrt.v16f32(<16 x float> %560) #5
  %562 = fmul <16 x float> %561, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  br i1 %495, label %568, label %563

563:                                              ; preds = %503
  %564 = getelementptr inbounds float, float* %496, i64 %504
  %565 = bitcast float* %564 to <16 x float>*
  %566 = load <16 x float>, <16 x float>* %565, align 4, !alias.scope !94, !noalias !97
  %567 = fadd <16 x float> %562, %566
  br label %568

568:                                              ; preds = %503, %563
  %569 = phi <16 x float> [ %567, %563 ], [ %562, %503 ]
  %570 = getelementptr inbounds float, float* %496, i64 %504
  %571 = bitcast float* %570 to <16 x float>*
  store <16 x float> %569, <16 x float>* %571, align 4, !alias.scope !99
  %572 = add i64 %504, 16
  %573 = add i64 %504, 33
  %574 = icmp ult i64 %573, %55
  br i1 %574, label %503, label %497

575:                                              ; preds = %641, %501
  %576 = phi i64 [ %499, %501 ], [ %577, %641 ]
  %577 = add nuw i64 %576, 1
  %578 = icmp ult i64 %577, %40
  %579 = select i1 %578, i64 %577, i64 %576
  %580 = icmp eq i64 %576, 0
  %581 = add i64 %576, -1
  %582 = select i1 %580, i64 0, i64 %581
  %583 = getelementptr inbounds float, float* %423, i64 %576
  %584 = load float, float* %583, align 4
  %585 = getelementptr inbounds float, float* %424, i64 %576
  %586 = load float, float* %585, align 4
  %587 = fadd float %584, %586
  %588 = getelementptr inbounds float, float* %388, i64 %582
  %589 = load float, float* %588, align 4
  %590 = fadd float %587, %589
  %591 = getelementptr inbounds float, float* %388, i64 %579
  %592 = load float, float* %591, align 4
  %593 = fadd float %590, %592
  %594 = fmul float %593, 2.500000e-01
  %595 = getelementptr inbounds float, float* %388, i64 %576
  %596 = load float, float* %595, align 4
  %597 = fadd float %596, 0x3F9374BC60000000
  %598 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %597, i32 0
  %599 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %598, <4 x float> zeroinitializer, <4 x float> %598) #5
  %600 = extractelement <4 x float> %599, i32 0
  %601 = fmul float %600, %600
  %602 = insertelement <4 x float> %599, float %601, i32 0
  %603 = fmul float %601, 0x405DE18460000000
  %604 = fmul float %600, 0x406395E800000000
  %605 = insertelement <4 x float> <float undef, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>, float %604, i32 0
  %606 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %605, <4 x float> %602, <4 x float> <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>) #5
  %607 = extractelement <4 x float> %606, i32 0
  %608 = fdiv float %607, %603
  %609 = fsub float %596, %594
  %610 = fmul float %609, %608
  %611 = fmul float %610, %610
  %612 = getelementptr inbounds float, float* %425, i64 %576
  %613 = load float, float* %612, align 4
  %614 = getelementptr inbounds float, float* %426, i64 %576
  %615 = load float, float* %614, align 4
  %616 = fadd float %613, %615
  %617 = getelementptr inbounds float, float* %407, i64 %582
  %618 = load float, float* %617, align 4
  %619 = fadd float %616, %618
  %620 = getelementptr inbounds float, float* %407, i64 %579
  %621 = load float, float* %620, align 4
  %622 = fadd float %619, %621
  %623 = fmul float %622, 2.500000e-01
  %624 = getelementptr inbounds float, float* %407, i64 %576
  %625 = load float, float* %624, align 4
  %626 = fsub float %625, %623
  %627 = fmul float %608, %626
  %628 = fmul float %627, %627
  %629 = fmul float %628, 0x403E7E36A0000000
  %630 = fadd float %611, %629
  %631 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %630, i32 0
  %632 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %631, <4 x float> <float 1.454330e+05, float 0x4213B2BBE0000000, float 0x4213B2BBE0000000, float 0x4213B2BBE0000000>, <4 x float> <float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000>) #5
  %633 = extractelement <4 x float> %632, i64 0
  %634 = tail call float @llvm.sqrt.f32(float %633) #5
  %635 = fmul float %634, 2.500000e-01
  %636 = sub i64 %576, %52
  %637 = getelementptr inbounds float, float* %427, i64 %636
  br i1 %502, label %641, label %638

638:                                              ; preds = %575
  %639 = load float, float* %637, align 4
  %640 = fadd float %635, %639
  br label %641

641:                                              ; preds = %638, %575
  %642 = phi float [ %640, %638 ], [ %635, %575 ]
  store float %642, float* %637, align 4
  %643 = icmp eq i64 %577, %55
  br i1 %643, label %644, label %575

644:                                              ; preds = %641, %497
  %645 = icmp eq i64 %498, 3
  br i1 %645, label %646, label %746

646:                                              ; preds = %644
  %647 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %63, align 8
  %648 = sub nuw i64 %371, %58
  %649 = lshr i64 %648, 2
  %650 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %647, i64 %62, i32 0, i32 5, i32 0, i32 0, i32 0
  %651 = load i8*, i8** %650, align 8
  %652 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %647, i64 %62, i32 0, i32 4
  %653 = load i64, i64* %652, align 8
  %654 = mul i64 %653, %649
  %655 = getelementptr inbounds i8, i8* %651, i64 %654
  %656 = ptrtoint i8* %655 to i64
  %657 = and i64 %656, 63
  %658 = icmp eq i64 %657, 0
  tail call void @llvm.assume(i1 %658) #5
  %659 = bitcast i8* %655 to float*
  br i1 %99, label %746, label %660

660:                                              ; preds = %646
  br i1 %111, label %723, label %661

661:                                              ; preds = %660
  %662 = getelementptr i8, i8* %651, i64 %105
  %663 = getelementptr i8, i8* %662, i64 %654
  %664 = getelementptr i8, i8* %416, i64 %106
  %665 = getelementptr i8, i8* %664, i64 %418
  %666 = icmp ult i8* %655, %665
  %667 = icmp ult i8* %419, %663
  %668 = and i1 %666, %667
  br i1 %668, label %723, label %669

669:                                              ; preds = %661
  br i1 %114, label %705, label %670

670:                                              ; preds = %669, %670
  %671 = phi i64 [ %702, %670 ], [ 0, %669 ]
  %672 = phi i64 [ %703, %670 ], [ %115, %669 ]
  %673 = shl i64 %671, 2
  %674 = getelementptr inbounds float, float* %427, i64 %673
  %675 = bitcast float* %674 to <64 x float>*
  %676 = load <64 x float>, <64 x float>* %675, align 64
  %677 = shufflevector <64 x float> %676, <64 x float> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %678 = shufflevector <64 x float> %676, <64 x float> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %679 = shufflevector <64 x float> %676, <64 x float> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %680 = shufflevector <64 x float> %676, <64 x float> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %681 = fadd <16 x float> %677, %678
  %682 = fadd <16 x float> %681, %679
  %683 = fadd <16 x float> %682, %680
  %684 = fmul <16 x float> %683, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %685 = getelementptr inbounds float, float* %659, i64 %671
  %686 = bitcast float* %685 to <16 x float>*
  store <16 x float> %684, <16 x float>* %686, align 64, !alias.scope !102, !noalias !105
  %687 = or i64 %671, 16
  %688 = shl i64 %687, 2
  %689 = getelementptr inbounds float, float* %427, i64 %688
  %690 = bitcast float* %689 to <64 x float>*
  %691 = load <64 x float>, <64 x float>* %690, align 64
  %692 = shufflevector <64 x float> %691, <64 x float> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %693 = shufflevector <64 x float> %691, <64 x float> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %694 = shufflevector <64 x float> %691, <64 x float> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %695 = shufflevector <64 x float> %691, <64 x float> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %696 = fadd <16 x float> %692, %693
  %697 = fadd <16 x float> %696, %694
  %698 = fadd <16 x float> %697, %695
  %699 = fmul <16 x float> %698, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %700 = getelementptr inbounds float, float* %659, i64 %687
  %701 = bitcast float* %700 to <16 x float>*
  store <16 x float> %699, <16 x float>* %701, align 64, !alias.scope !102, !noalias !105
  %702 = add i64 %671, 32
  %703 = add i64 %672, -2
  %704 = icmp eq i64 %703, 0
  br i1 %704, label %705, label %670, !llvm.loop !107

705:                                              ; preds = %670, %669
  %706 = phi i64 [ 0, %669 ], [ %702, %670 ]
  br i1 %116, label %722, label %707

707:                                              ; preds = %705
  %708 = shl i64 %706, 2
  %709 = getelementptr inbounds float, float* %427, i64 %708
  %710 = bitcast float* %709 to <64 x float>*
  %711 = load <64 x float>, <64 x float>* %710, align 64
  %712 = shufflevector <64 x float> %711, <64 x float> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %713 = shufflevector <64 x float> %711, <64 x float> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %714 = shufflevector <64 x float> %711, <64 x float> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %715 = shufflevector <64 x float> %711, <64 x float> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %716 = fadd <16 x float> %712, %713
  %717 = fadd <16 x float> %716, %714
  %718 = fadd <16 x float> %717, %715
  %719 = fmul <16 x float> %718, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %720 = getelementptr inbounds float, float* %659, i64 %706
  %721 = bitcast float* %720 to <16 x float>*
  store <16 x float> %719, <16 x float>* %721, align 64, !alias.scope !102, !noalias !105
  br label %722

722:                                              ; preds = %705, %707
  br i1 %117, label %746, label %723

723:                                              ; preds = %722, %661, %660
  %724 = phi i64 [ 0, %661 ], [ 0, %660 ], [ %112, %722 ]
  br label %725

725:                                              ; preds = %723, %725
  %726 = phi i64 [ %744, %725 ], [ %724, %723 ]
  %727 = shl i64 %726, 2
  %728 = getelementptr inbounds float, float* %427, i64 %727
  %729 = load float, float* %728, align 16
  %730 = or i64 %727, 1
  %731 = getelementptr inbounds float, float* %427, i64 %730
  %732 = load float, float* %731, align 4
  %733 = fadd float %729, %732
  %734 = or i64 %727, 2
  %735 = getelementptr inbounds float, float* %427, i64 %734
  %736 = load float, float* %735, align 8
  %737 = fadd float %733, %736
  %738 = or i64 %727, 3
  %739 = getelementptr inbounds float, float* %427, i64 %738
  %740 = load float, float* %739, align 4
  %741 = fadd float %737, %740
  %742 = fmul float %741, 2.500000e-01
  %743 = getelementptr inbounds float, float* %659, i64 %726
  store float %742, float* %743, align 4
  %744 = add nuw nsw i64 %726, 1
  %745 = icmp ult i64 %744, %66
  br i1 %745, label %725, label %746, !llvm.loop !108

746:                                              ; preds = %725, %722, %646, %644
  %747 = icmp eq i64 %372, %61
  br i1 %747, label %118, label %370

748:                                              ; preds = %1201, %349
  %749 = load i32, i32* %38, align 8
  %750 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 0
  %751 = load i32, i32* %750, align 8
  %752 = icmp eq i32 %749, %751
  br i1 %752, label %753, label %758

753:                                              ; preds = %748
  %754 = load i32, i32* %41, align 4
  %755 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 1
  %756 = load i32, i32* %755, align 4
  %757 = icmp eq i32 %754, %756
  br i1 %757, label %761, label %758

758:                                              ; preds = %753, %748
  %759 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 252, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0)) #5
  %760 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

761:                                              ; preds = %753
  %762 = zext i32 %749 to i64
  %763 = add nuw nsw i64 %762, 7
  %764 = lshr i64 %763, 3
  %765 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 0
  %766 = load i32, i32* %765, align 8
  %767 = zext i32 %766 to i64
  %768 = icmp eq i64 %764, %767
  br i1 %768, label %772, label %769

769:                                              ; preds = %761
  %770 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 253, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.18, i64 0, i64 0)) #5
  %771 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

772:                                              ; preds = %761
  %773 = zext i32 %754 to i64
  %774 = add nuw nsw i64 %773, 7
  %775 = lshr i64 %774, 3
  %776 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 1
  %777 = load i32, i32* %776, align 4
  %778 = zext i32 %777 to i64
  %779 = icmp eq i64 %775, %778
  br i1 %779, label %783, label %780

780:                                              ; preds = %772
  %781 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 254, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.19, i64 0, i64 0)) #5
  %782 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

783:                                              ; preds = %772
  %784 = fmul float %32, 5.000000e-01
  %785 = fcmp ult float %29, 7.000000e+00
  br i1 %785, label %792, label %786

786:                                              ; preds = %783
  %787 = fadd float %29, -7.000000e+00
  %788 = fdiv float %787, 7.000000e+00
  %789 = fsub float 1.000000e+00, %788
  %790 = fcmp olt float %789, 0.000000e+00
  br i1 %790, label %791, label %792

791:                                              ; preds = %786
  br label %792

792:                                              ; preds = %791, %786, %783
  %793 = phi float [ 0.000000e+00, %791 ], [ %789, %786 ], [ 1.000000e+00, %783 ]
  %794 = fmul float %32, %793
  %795 = fsub float 1.000000e+00, %793
  %796 = fmul float %784, %795
  %797 = icmp ugt i64 %18, %13
  br i1 %797, label %798, label %1214

798:                                              ; preds = %792
  %799 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %800 = getelementptr inbounds %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX3::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 4
  %801 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %802 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 4
  %803 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %804 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 4
  %805 = icmp ugt i64 %22, %19
  br label %806

806:                                              ; preds = %825, %798
  %807 = phi i64 [ %13, %798 ], [ %826, %825 ]
  %808 = shl i64 %807, 3
  %809 = load i8*, i8** %799, align 8
  %810 = load i64, i64* %800, align 8
  %811 = mul i64 %810, %807
  %812 = getelementptr inbounds i8, i8* %809, i64 %811
  %813 = ptrtoint i8* %812 to i64
  %814 = and i64 %813, 63
  %815 = icmp eq i64 %814, 0
  tail call void @llvm.assume(i1 %815) #5
  %816 = bitcast i8* %812 to float*
  br i1 %805, label %817, label %825

817:                                              ; preds = %806
  %818 = or i64 %808, 1
  %819 = or i64 %808, 2
  %820 = or i64 %808, 3
  %821 = or i64 %808, 4
  %822 = or i64 %808, 5
  %823 = or i64 %808, 6
  %824 = or i64 %808, 7
  br label %828

825:                                              ; preds = %1067, %806
  %826 = add nuw i64 %807, 1
  %827 = icmp ult i64 %826, %18
  br i1 %827, label %806, label %1214

828:                                              ; preds = %1067, %817
  %829 = phi i64 [ %19, %817 ], [ %1127, %1067 ]
  %830 = shl i64 %829, 3
  %831 = getelementptr inbounds float, float* %816, i64 %829
  %832 = load float, float* %831, align 4
  %833 = insertelement <8 x float> undef, float %832, i32 0
  %834 = fmul <8 x float> %833, <float 0x3FE7EC5FC0000000, float undef, float undef, float undef, float undef, float undef, float undef, float undef>
  %835 = shufflevector <8 x float> %834, <8 x float> undef, <8 x i32> zeroinitializer
  %836 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %835, <8 x float> <float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000>) #5
  %837 = fadd <8 x float> %836, <float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000>
  %838 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %836, <8 x float> %836, <8 x float> <float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000>) #5
  %839 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %838
  %840 = fmul <8 x float> %839, <float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000>
  %841 = load i8*, i8** %801, align 8, !noalias !109
  %842 = load i64, i64* %802, align 8, !noalias !109
  %843 = mul i64 %842, %808
  %844 = getelementptr inbounds i8, i8* %841, i64 %843
  %845 = ptrtoint i8* %844 to i64
  %846 = and i64 %845, 63
  %847 = icmp eq i64 %846, 0
  tail call void @llvm.assume(i1 %847) #5, !noalias !109
  %848 = bitcast i8* %844 to float*
  %849 = getelementptr inbounds float, float* %848, i64 %830
  %850 = mul i64 %842, %818
  %851 = getelementptr inbounds i8, i8* %841, i64 %850
  %852 = ptrtoint i8* %851 to i64
  %853 = and i64 %852, 63
  %854 = icmp eq i64 %853, 0
  tail call void @llvm.assume(i1 %854) #5, !noalias !109
  %855 = bitcast i8* %851 to float*
  %856 = getelementptr inbounds float, float* %855, i64 %830
  %857 = bitcast float* %849 to <8 x float>*
  %858 = load <8 x float>, <8 x float>* %857, align 32, !alias.scope !112, !noalias !115
  %859 = getelementptr inbounds float, float* %849, i64 1
  %860 = bitcast float* %859 to <8 x float>*
  %861 = load <8 x float>, <8 x float>* %860, align 4, !alias.scope !117, !noalias !120
  %862 = fsub <8 x float> %858, %861
  %863 = bitcast <8 x float> %862 to <8 x i32>
  %864 = and <8 x i32> %863, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %865 = bitcast <8 x i32> %864 to <8 x float>
  %866 = fadd <8 x float> %865, zeroinitializer
  %867 = bitcast float* %856 to <8 x float>*
  %868 = load <8 x float>, <8 x float>* %867, align 32, !alias.scope !122, !noalias !125
  %869 = fsub <8 x float> %858, %868
  %870 = bitcast <8 x float> %869 to <8 x i32>
  %871 = and <8 x i32> %870, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %872 = bitcast <8 x i32> %871 to <8 x float>
  %873 = fadd <8 x float> %866, %872
  %874 = mul i64 %842, %819
  %875 = getelementptr inbounds i8, i8* %841, i64 %874
  %876 = ptrtoint i8* %875 to i64
  %877 = and i64 %876, 63
  %878 = icmp eq i64 %877, 0
  tail call void @llvm.assume(i1 %878) #5, !noalias !109
  %879 = bitcast i8* %875 to float*
  %880 = getelementptr inbounds float, float* %879, i64 %830
  %881 = getelementptr inbounds float, float* %856, i64 1
  %882 = bitcast float* %881 to <8 x float>*
  %883 = load <8 x float>, <8 x float>* %882, align 4, !alias.scope !117, !noalias !120
  %884 = fsub <8 x float> %868, %883
  %885 = bitcast <8 x float> %884 to <8 x i32>
  %886 = and <8 x i32> %885, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %887 = bitcast <8 x i32> %886 to <8 x float>
  %888 = fadd <8 x float> %873, %887
  %889 = bitcast float* %880 to <8 x float>*
  %890 = load <8 x float>, <8 x float>* %889, align 32, !alias.scope !122, !noalias !125
  %891 = fsub <8 x float> %868, %890
  %892 = bitcast <8 x float> %891 to <8 x i32>
  %893 = and <8 x i32> %892, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %894 = bitcast <8 x i32> %893 to <8 x float>
  %895 = fadd <8 x float> %888, %894
  %896 = mul i64 %842, %820
  %897 = getelementptr inbounds i8, i8* %841, i64 %896
  %898 = ptrtoint i8* %897 to i64
  %899 = and i64 %898, 63
  %900 = icmp eq i64 %899, 0
  tail call void @llvm.assume(i1 %900) #5, !noalias !109
  %901 = bitcast i8* %897 to float*
  %902 = getelementptr inbounds float, float* %901, i64 %830
  %903 = getelementptr inbounds float, float* %880, i64 1
  %904 = bitcast float* %903 to <8 x float>*
  %905 = load <8 x float>, <8 x float>* %904, align 4, !alias.scope !117, !noalias !120
  %906 = fsub <8 x float> %890, %905
  %907 = bitcast <8 x float> %906 to <8 x i32>
  %908 = and <8 x i32> %907, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %909 = bitcast <8 x i32> %908 to <8 x float>
  %910 = fadd <8 x float> %895, %909
  %911 = bitcast float* %902 to <8 x float>*
  %912 = load <8 x float>, <8 x float>* %911, align 32, !alias.scope !122, !noalias !125
  %913 = fsub <8 x float> %890, %912
  %914 = bitcast <8 x float> %913 to <8 x i32>
  %915 = and <8 x i32> %914, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %916 = bitcast <8 x i32> %915 to <8 x float>
  %917 = fadd <8 x float> %910, %916
  %918 = mul i64 %842, %821
  %919 = getelementptr inbounds i8, i8* %841, i64 %918
  %920 = ptrtoint i8* %919 to i64
  %921 = and i64 %920, 63
  %922 = icmp eq i64 %921, 0
  tail call void @llvm.assume(i1 %922) #5, !noalias !109
  %923 = bitcast i8* %919 to float*
  %924 = getelementptr inbounds float, float* %923, i64 %830
  %925 = getelementptr inbounds float, float* %902, i64 1
  %926 = bitcast float* %925 to <8 x float>*
  %927 = load <8 x float>, <8 x float>* %926, align 4, !alias.scope !117, !noalias !120
  %928 = fsub <8 x float> %912, %927
  %929 = bitcast <8 x float> %928 to <8 x i32>
  %930 = and <8 x i32> %929, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %931 = bitcast <8 x i32> %930 to <8 x float>
  %932 = fadd <8 x float> %917, %931
  %933 = bitcast float* %924 to <8 x float>*
  %934 = load <8 x float>, <8 x float>* %933, align 32, !alias.scope !122, !noalias !125
  %935 = fsub <8 x float> %912, %934
  %936 = bitcast <8 x float> %935 to <8 x i32>
  %937 = and <8 x i32> %936, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %938 = bitcast <8 x i32> %937 to <8 x float>
  %939 = fadd <8 x float> %932, %938
  %940 = mul i64 %842, %822
  %941 = getelementptr inbounds i8, i8* %841, i64 %940
  %942 = ptrtoint i8* %941 to i64
  %943 = and i64 %942, 63
  %944 = icmp eq i64 %943, 0
  tail call void @llvm.assume(i1 %944) #5, !noalias !109
  %945 = bitcast i8* %941 to float*
  %946 = getelementptr inbounds float, float* %945, i64 %830
  %947 = getelementptr inbounds float, float* %924, i64 1
  %948 = bitcast float* %947 to <8 x float>*
  %949 = load <8 x float>, <8 x float>* %948, align 4, !alias.scope !117, !noalias !120
  %950 = fsub <8 x float> %934, %949
  %951 = bitcast <8 x float> %950 to <8 x i32>
  %952 = and <8 x i32> %951, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %953 = bitcast <8 x i32> %952 to <8 x float>
  %954 = fadd <8 x float> %939, %953
  %955 = bitcast float* %946 to <8 x float>*
  %956 = load <8 x float>, <8 x float>* %955, align 32, !alias.scope !122, !noalias !125
  %957 = fsub <8 x float> %934, %956
  %958 = bitcast <8 x float> %957 to <8 x i32>
  %959 = and <8 x i32> %958, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %960 = bitcast <8 x i32> %959 to <8 x float>
  %961 = fadd <8 x float> %954, %960
  %962 = mul i64 %842, %823
  %963 = getelementptr inbounds i8, i8* %841, i64 %962
  %964 = ptrtoint i8* %963 to i64
  %965 = and i64 %964, 63
  %966 = icmp eq i64 %965, 0
  tail call void @llvm.assume(i1 %966) #5, !noalias !109
  %967 = bitcast i8* %963 to float*
  %968 = getelementptr inbounds float, float* %967, i64 %830
  %969 = getelementptr inbounds float, float* %946, i64 1
  %970 = bitcast float* %969 to <8 x float>*
  %971 = load <8 x float>, <8 x float>* %970, align 4, !alias.scope !117, !noalias !120
  %972 = fsub <8 x float> %956, %971
  %973 = bitcast <8 x float> %972 to <8 x i32>
  %974 = and <8 x i32> %973, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %975 = bitcast <8 x i32> %974 to <8 x float>
  %976 = fadd <8 x float> %961, %975
  %977 = bitcast float* %968 to <8 x float>*
  %978 = load <8 x float>, <8 x float>* %977, align 32, !alias.scope !122, !noalias !125
  %979 = fsub <8 x float> %956, %978
  %980 = bitcast <8 x float> %979 to <8 x i32>
  %981 = and <8 x i32> %980, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %982 = bitcast <8 x i32> %981 to <8 x float>
  %983 = fadd <8 x float> %976, %982
  %984 = mul i64 %842, %824
  %985 = getelementptr inbounds i8, i8* %841, i64 %984
  %986 = ptrtoint i8* %985 to i64
  %987 = and i64 %986, 63
  %988 = icmp eq i64 %987, 0
  tail call void @llvm.assume(i1 %988) #5, !noalias !109
  %989 = bitcast i8* %985 to float*
  %990 = getelementptr inbounds float, float* %989, i64 %830
  %991 = getelementptr inbounds float, float* %968, i64 1
  %992 = bitcast float* %991 to <8 x float>*
  %993 = load <8 x float>, <8 x float>* %992, align 4, !alias.scope !117, !noalias !120
  %994 = fsub <8 x float> %978, %993
  %995 = bitcast <8 x float> %994 to <8 x i32>
  %996 = and <8 x i32> %995, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %997 = bitcast <8 x i32> %996 to <8 x float>
  %998 = fadd <8 x float> %983, %997
  %999 = bitcast float* %990 to <8 x float>*
  %1000 = load <8 x float>, <8 x float>* %999, align 32, !alias.scope !122, !noalias !125
  %1001 = fsub <8 x float> %978, %1000
  %1002 = bitcast <8 x float> %1001 to <8 x i32>
  %1003 = and <8 x i32> %1002, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1004 = bitcast <8 x i32> %1003 to <8 x float>
  %1005 = fadd <8 x float> %998, %1004
  %1006 = getelementptr inbounds float, float* %990, i64 1
  %1007 = bitcast float* %1006 to <8 x float>*
  %1008 = load <8 x float>, <8 x float>* %1007, align 4, !alias.scope !117, !noalias !120
  %1009 = fsub <8 x float> %1000, %1008
  %1010 = bitcast <8 x float> %1009 to <8 x i32>
  %1011 = and <8 x i32> %1010, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %1012 = bitcast <8 x i32> %1011 to <8 x float>
  %1013 = fadd <8 x float> %1005, %1012
  %1014 = fsub <8 x float> %1000, %1000
  %1015 = bitcast <8 x float> %1014 to <8 x i32>
  %1016 = and <8 x i32> %1015, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1017 = bitcast <8 x i32> %1016 to <8 x float>
  %1018 = fadd <8 x float> %1013, %1017
  %1019 = shufflevector <8 x float> %1018, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %1020 = fadd <8 x float> %1018, %1019
  %1021 = shufflevector <8 x float> %1020, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %1022 = fadd <8 x float> %1020, %1021
  %1023 = load i8*, i8** %803, align 8, !noalias !127
  %1024 = load i64, i64* %804, align 8, !noalias !127
  br label %1025

1025:                                             ; preds = %1025, %828
  %1026 = phi i64 [ 0, %828 ], [ %1065, %1025 ]
  %1027 = phi <8 x float> [ zeroinitializer, %828 ], [ %1064, %1025 ]
  %1028 = add i64 %1026, %808
  %1029 = mul i64 %1028, %1024
  %1030 = getelementptr inbounds i8, i8* %1023, i64 %1029
  %1031 = ptrtoint i8* %1030 to i64
  %1032 = and i64 %1031, 63
  %1033 = icmp eq i64 %1032, 0
  tail call void @llvm.assume(i1 %1033) #5, !noalias !127
  %1034 = bitcast i8* %1030 to float*
  %1035 = mul i64 %1028, %842
  %1036 = getelementptr inbounds i8, i8* %841, i64 %1035
  %1037 = ptrtoint i8* %1036 to i64
  %1038 = and i64 %1037, 63
  %1039 = icmp eq i64 %1038, 0
  tail call void @llvm.assume(i1 %1039) #5, !noalias !127
  %1040 = bitcast i8* %1036 to float*
  %1041 = getelementptr inbounds float, float* %1040, i64 %830
  %1042 = getelementptr inbounds float, float* %1034, i64 %830
  %1043 = bitcast float* %1041 to <8 x float>*
  %1044 = load <8 x float>, <8 x float>* %1043, align 32, !alias.scope !130, !noalias !133
  %1045 = fadd <8 x float> %1044, <float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000>
  %1046 = bitcast float* %1042 to <8 x float>*
  %1047 = load <8 x float>, <8 x float>* %1046, align 32, !alias.scope !135, !noalias !138
  %1048 = fsub <8 x float> %1045, %1047
  %1049 = fadd <8 x float> %1045, %1047
  %1050 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1048, <8 x float> zeroinitializer, <8 x float> %1048) #5
  %1051 = fmul <8 x float> %1050, %1050
  %1052 = fmul <8 x float> %1051, <float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000>
  %1053 = fmul <8 x float> %1050, <float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>
  %1054 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1053, <8 x float> %1051, <8 x float> <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>) #5
  %1055 = fdiv <8 x float> %1052, %1054
  %1056 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1049, <8 x float> zeroinitializer, <8 x float> %1049) #5
  %1057 = fmul <8 x float> %1056, %1056
  %1058 = fmul <8 x float> %1057, <float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000>
  %1059 = fmul <8 x float> %1056, <float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>
  %1060 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1059, <8 x float> %1057, <8 x float> <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>) #5
  %1061 = fdiv <8 x float> %1058, %1060
  %1062 = fadd <8 x float> %1055, %1061
  %1063 = fmul <8 x float> %1062, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1064 = fadd <8 x float> %1027, %1063
  %1065 = add nuw nsw i64 %1026, 1
  %1066 = icmp eq i64 %1065, 8
  br i1 %1066, label %1067, label %1025

1067:                                             ; preds = %1025
  %1068 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %837
  %1069 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %836, <8 x float> %836, <8 x float> <float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000>) #5
  %1070 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1068, <8 x float> <float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000>, <8 x float> %840) #5
  %1071 = shufflevector <8 x float> %1022, <8 x float> undef, <8 x i32> <i32 1, i32 2, i32 3, i32 0, i32 5, i32 6, i32 7, i32 4>
  %1072 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1069
  %1073 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1072, <8 x float> <float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000>, <8 x float> %1070) #5
  %1074 = fadd <8 x float> %1022, %1071
  %1075 = fadd <8 x float> %1073, <float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000>
  %1076 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1074, <8 x float> <float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000>, <8 x float> %1075) #5
  %1077 = shufflevector <8 x float> %1064, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %1078 = fadd <8 x float> %1064, %1077
  %1079 = shufflevector <8 x float> %1078, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %1080 = fadd <8 x float> %1078, %1079
  %1081 = shufflevector <8 x float> %1080, <8 x float> undef, <8 x i32> <i32 1, i32 2, i32 3, i32 0, i32 5, i32 6, i32 7, i32 4>
  %1082 = fadd <8 x float> %1080, %1081
  %1083 = fmul <8 x float> %1082, <float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02>
  %1084 = bitcast <8 x float> %1083 to <8 x i32>
  %1085 = add <8 x i32> %1084, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %1086 = ashr <8 x i32> %1085, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %1087 = and <8 x i32> %1085, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %1088 = sub <8 x i32> %1084, %1087
  %1089 = bitcast <8 x i32> %1088 to <8 x float>
  %1090 = sitofp <8 x i32> %1086 to <8 x float>
  %1091 = fadd <8 x float> %1089, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %1092 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1091, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #5
  %1093 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1091, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #5
  fence acq_rel
  %1094 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1092, <8 x float> %1091, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #5
  %1095 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1093, <8 x float> %1091, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #5
  fence acq_rel
  %1096 = fdiv <8 x float> %1094, %1095
  %1097 = fadd <8 x float> %1096, %1090
  %1098 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1097, <8 x float> <float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000>, <8 x float> %1076) #5
  %1099 = extractelement <8 x float> %1098, i32 0
  %1100 = fmul float %1099, 0x3FF7154760000000
  %1101 = insertelement <4 x float> undef, float %1100, i32 0
  %1102 = shufflevector <4 x float> %1101, <4 x float> undef, <4 x i32> zeroinitializer
  %1103 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %1102, i32 9) #5
  %1104 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1103) #5
  %1105 = bitcast <4 x float> %1103 to <4 x i32>
  %1106 = xor <4 x i32> %1105, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1107 = and <4 x i32> %1106, %1104
  %1108 = ashr <4 x i32> %1107, <i32 31, i32 31, i32 31, i32 31>
  %1109 = xor <4 x i32> %1108, %1104
  %1110 = shl <4 x i32> %1109, <i32 23, i32 23, i32 23, i32 23>
  %1111 = add <4 x i32> %1110, <i32 1065353216, i32 undef, i32 undef, i32 undef>
  %1112 = bitcast <4 x i32> %1111 to <4 x float>
  %1113 = fsub <4 x float> %1102, %1103
  %1114 = fadd <4 x float> %1113, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %1115 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %1114, <4 x float> %1113, <4 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #5
  %1116 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %1115, <4 x float> %1113, <4 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #5
  %1117 = extractelement <4 x float> %1112, i32 0
  %1118 = extractelement <4 x float> %1116, i32 0
  %1119 = fmul float %1118, %1117
  %1120 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %1113, <4 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <4 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #5
  %1121 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %1120, <4 x float> %1113, <4 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #5
  %1122 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %1121, <4 x float> %1113, <4 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #5
  %1123 = extractelement <4 x float> %1122, i32 0
  %1124 = fdiv float %1119, %1123
  %1125 = fmul float %794, %1124
  %1126 = fadd float %796, %1125
  store float %1126, float* %831, align 4
  %1127 = add nuw i64 %829, 1
  %1128 = icmp ult i64 %1127, %22
  br i1 %1128, label %828, label %825

1129:                                             ; preds = %1201, %351
  %1130 = phi i64 [ %23, %351 ], [ %1202, %1201 ]
  %1131 = phi i64 [ 0, %351 ], [ %1203, %1201 ]
  %1132 = add i64 %1131, %13
  %1133 = load i8*, i8** %352, align 8
  %1134 = load i64, i64* %353, align 8
  %1135 = mul i64 %1134, %1132
  %1136 = getelementptr inbounds i8, i8* %1133, i64 %1135
  %1137 = ptrtoint i8* %1136 to i64
  %1138 = and i64 %1137, 63
  %1139 = icmp eq i64 %1138, 0
  tail call void @llvm.assume(i1 %1139) #5
  %1140 = bitcast i8* %1136 to float*
  %1141 = getelementptr inbounds float, float* %1140, i64 %19
  %1142 = load i8*, i8** %354, align 8
  %1143 = load i64, i64* %355, align 8
  %1144 = mul i64 %1143, %1132
  %1145 = getelementptr inbounds i8, i8* %1142, i64 %1144
  %1146 = ptrtoint i8* %1145 to i64
  %1147 = and i64 %1146, 63
  %1148 = icmp eq i64 %1147, 0
  tail call void @llvm.assume(i1 %1148) #5
  %1149 = bitcast i8* %1145 to float*
  %1150 = getelementptr inbounds float, float* %1149, i64 %19
  %1151 = icmp eq i64 %1130, 0
  br i1 %1151, label %1201, label %1152

1152:                                             ; preds = %1129
  br i1 %362, label %1153, label %1155

1153:                                             ; preds = %1200, %1155, %1152
  %1154 = phi i64 [ 0, %1155 ], [ 0, %1152 ], [ %368, %1200 ]
  br label %1205

1155:                                             ; preds = %1152
  %1156 = getelementptr i8, i8* %1142, i64 %359
  %1157 = getelementptr i8, i8* %1156, i64 %1144
  %1158 = getelementptr i8, i8* %1142, i64 %367
  %1159 = getelementptr i8, i8* %1158, i64 %1144
  %1160 = getelementptr i8, i8* %1133, i64 %359
  %1161 = mul i64 %1134, %1132
  %1162 = getelementptr i8, i8* %1160, i64 %1161
  %1163 = getelementptr i8, i8* %1133, i64 %367
  %1164 = getelementptr i8, i8* %1163, i64 %1161
  %1165 = icmp ult i8* %1157, %1164
  %1166 = icmp ult i8* %1162, %1159
  %1167 = and i1 %1165, %1166
  br i1 %1167, label %1153, label %1168

1168:                                             ; preds = %1155, %1168
  %1169 = phi i64 [ %1198, %1168 ], [ 0, %1155 ]
  %1170 = getelementptr inbounds float, float* %1141, i64 %1169
  %1171 = bitcast float* %1170 to <16 x float>*
  %1172 = load <16 x float>, <16 x float>* %1171, align 32, !alias.scope !140
  %1173 = getelementptr inbounds float, float* %1170, i64 16
  %1174 = bitcast float* %1173 to <16 x float>*
  %1175 = load <16 x float>, <16 x float>* %1174, align 32, !alias.scope !140
  %1176 = getelementptr inbounds float, float* %1170, i64 32
  %1177 = bitcast float* %1176 to <16 x float>*
  %1178 = load <16 x float>, <16 x float>* %1177, align 32, !alias.scope !140
  %1179 = getelementptr inbounds float, float* %1170, i64 48
  %1180 = bitcast float* %1179 to <16 x float>*
  %1181 = load <16 x float>, <16 x float>* %1180, align 32, !alias.scope !140
  %1182 = fadd <16 x float> %1172, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1183 = fadd <16 x float> %1175, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1184 = fadd <16 x float> %1178, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1185 = fadd <16 x float> %1181, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1186 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1182
  %1187 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1183
  %1188 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1184
  %1189 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1185
  %1190 = getelementptr inbounds float, float* %1150, i64 %1169
  %1191 = bitcast float* %1190 to <16 x float>*
  store <16 x float> %1186, <16 x float>* %1191, align 32, !alias.scope !143, !noalias !140
  %1192 = getelementptr inbounds float, float* %1190, i64 16
  %1193 = bitcast float* %1192 to <16 x float>*
  store <16 x float> %1187, <16 x float>* %1193, align 32, !alias.scope !143, !noalias !140
  %1194 = getelementptr inbounds float, float* %1190, i64 32
  %1195 = bitcast float* %1194 to <16 x float>*
  store <16 x float> %1188, <16 x float>* %1195, align 32, !alias.scope !143, !noalias !140
  %1196 = getelementptr inbounds float, float* %1190, i64 48
  %1197 = bitcast float* %1196 to <16 x float>*
  store <16 x float> %1189, <16 x float>* %1197, align 32, !alias.scope !143, !noalias !140
  %1198 = add i64 %1169, 64
  %1199 = icmp eq i64 %1198, %368
  br i1 %1199, label %1200, label %1168, !llvm.loop !145

1200:                                             ; preds = %1168
  br i1 %369, label %1201, label %1153

1201:                                             ; preds = %1205, %1200, %1129
  %1202 = phi i64 [ 0, %1129 ], [ %23, %1200 ], [ %23, %1205 ]
  %1203 = add nuw i64 %1131, 1
  %1204 = icmp ult i64 %1203, %24
  br i1 %1204, label %1129, label %748

1205:                                             ; preds = %1153, %1205
  %1206 = phi i64 [ %1212, %1205 ], [ %1154, %1153 ]
  %1207 = getelementptr inbounds float, float* %1141, i64 %1206
  %1208 = load float, float* %1207, align 4
  %1209 = fadd float %1208, 0x3FD99999A0000000
  %1210 = fdiv float 1.000000e+00, %1209
  %1211 = getelementptr inbounds float, float* %1150, i64 %1206
  store float %1210, float* %1211, align 4
  %1212 = add nuw i64 %1206, 1
  %1213 = icmp ult i64 %1212, %23
  br i1 %1213, label %1205, label %1201, !llvm.loop !146

1214:                                             ; preds = %825, %792
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse41.blendvps(<4 x float>, <4 x float>, <4 x float>) #12

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.fma.v4f32(<4 x float>, <4 x float>, <4 x float>) #13

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sqrt.f32(float) #13

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fma.v16f32(<16 x float>, <16 x float>, <16 x float>) #13

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.sqrt.v16f32(<16 x float>) #13

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.max.ps.256(<8 x float>, <8 x float>) #12

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #13

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float>, <8 x float>, <8 x float>) #12

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse41.round.ps(<4 x float>, i32 immarg) #12

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #12

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_4ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_5E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to %class.anon.462**
  %4 = load %class.anon.462*, %class.anon.462** %3, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_4clEm"(%class.anon.462* %4, i64 %1)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_4ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_5E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.463**
  %6 = load %class.anon.463*, %class.anon.463** %5, align 8
  %7 = trunc i64 %2 to i32
  tail call fastcc void @"_ZZN3jxl6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_5clEii"(%class.anon.463* %6, i32 %1, i32 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_4clEm"(%class.anon.462* nocapture readonly, i64) unnamed_addr #14 align 2 {
  %3 = alloca %"class.jxl::Plane.1", align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = getelementptr inbounds %class.anon.462, %class.anon.462* %0, i64 0, i32 0
  %7 = load %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"*, %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"** %6, align 8
  %8 = bitcast %"class.jxl::Plane.1"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #5
  %9 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %9, i64 72, i64 %1, i64 4) #5
  %10 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 2
  %11 = bitcast %"class.jxl::Plane.1"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* nonnull align 8 %8, i64 24, i1 false) #5
  %12 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 2, i32 0, i32 5
  %13 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %22, align 8
  br label %28

23:                                               ; preds = %2
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %18) #5
  %24 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  store i8* null, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %23
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %25) #5
  br label %28

28:                                               ; preds = %27, %23, %21
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #5
  %29 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 0
  %30 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 0, i32 0, i32 1
  %31 = bitcast %"class.jxl::Plane.1"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %7 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %32, %34
  %36 = ashr exact i64 %35, 5
  %37 = icmp ult i64 %36, %1
  br i1 %37, label %38, label %58

38:                                               ; preds = %28
  %39 = inttoptr i64 %32 to %"class.jxl::Plane.1"*
  %40 = bitcast i64* %4 to i8*
  %41 = bitcast i64* %5 to i8*
  %42 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  br label %43

43:                                               ; preds = %56, %38
  %44 = phi %"class.jxl::Plane.1"* [ %39, %38 ], [ %57, %56 ]
  %45 = phi i64 [ %36, %38 ], [ %54, %56 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #5
  store i64 18, i64* %4, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #5
  store i64 18, i64* %5, align 8
  %46 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %42, align 8
  %47 = icmp ult %"class.jxl::Plane.1"* %44, %46
  br i1 %47, label %48, label %52

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %44, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %49, i64 18, i64 18, i64 4) #5
  %50 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %44, i64 1
  %51 = ptrtoint %"class.jxl::Plane.1"* %50 to i64
  store i64 %51, i64* %31, align 8
  br label %53

52:                                               ; preds = %43
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.87"* %29, i64* nonnull dereferenceable(8) %4, i64* nonnull dereferenceable(8) %5) #5
  br label %53

53:                                               ; preds = %52, %48
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #5
  %54 = add i64 %45, 1
  %55 = icmp eq i64 %54, %1
  br i1 %55, label %58, label %56

56:                                               ; preds = %53
  %57 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %30, align 8
  br label %43

58:                                               ; preds = %53, %28
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX212_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_5clEii"(%class.anon.463* nocapture readonly, i32, i32) unnamed_addr #15 align 2 {
  %4 = getelementptr inbounds %class.anon.463, %class.anon.463* %0, i64 0, i32 0
  %5 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %5, i64 0, i32 8
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 7
  %9 = lshr i64 %8, 3
  %10 = sext i32 %1 to i64
  %11 = urem i64 %10, %9
  %12 = udiv i64 %10, %9
  %13 = shl i64 %12, 3
  %14 = add i64 %13, 8
  %15 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %5, i64 0, i32 9
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, %14
  %18 = select i1 %17, i64 %16, i64 %14
  %19 = shl nuw i64 %11, 3
  %20 = add nuw i64 %19, 8
  %21 = icmp ult i64 %7, %20
  %22 = select i1 %21, i64 %7, i64 %20
  %23 = sub i64 %22, %19
  %24 = sub i64 %18, %13
  %25 = getelementptr inbounds %class.anon.463, %class.anon.463* %0, i64 0, i32 1
  %26 = load %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"*, %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"** %25, align 8
  %27 = getelementptr inbounds %class.anon.463, %class.anon.463* %0, i64 0, i32 2
  %28 = load float*, float** %27, align 8
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds %class.anon.463, %class.anon.463* %0, i64 0, i32 3
  %31 = load float*, float** %30, align 8
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %class.anon.463, %class.anon.463* %0, i64 0, i32 4
  %34 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %33, align 8
  %35 = getelementptr inbounds %class.anon.463, %class.anon.463* %0, i64 0, i32 5
  %36 = load %"class.jxl::Plane.1"**, %"class.jxl::Plane.1"*** %35, align 8
  %37 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %36, align 8
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = shl i64 %12, 6
  %45 = shl i64 %24, 3
  %46 = add i64 %45, %44
  %47 = shl i64 %11, 6
  %48 = shl i64 %23, 3
  %49 = add i64 %48, %47
  %50 = icmp eq i64 %47, 0
  %51 = add i64 %47, -4
  %52 = select i1 %50, i64 0, i64 %51
  %53 = icmp eq i64 %49, %40
  %54 = or i64 %49, 4
  %55 = select i1 %53, i64 %49, i64 %54
  %56 = icmp eq i64 %44, 0
  %57 = add i64 %44, -4
  %58 = select i1 %56, i64 0, i64 %57
  %59 = icmp eq i64 %46, %43
  %60 = or i64 %46, 4
  %61 = select i1 %59, i64 %46, i64 %60
  %62 = sext i32 %2 to i64
  %63 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %63, align 8
  %65 = sub i64 %55, %52
  %66 = lshr exact i64 %65, 2
  %67 = sub i64 %61, %58
  %68 = lshr exact i64 %67, 2
  %69 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 2
  %70 = load i32, i32* %69, align 8
  %71 = zext i32 %70 to i64
  %72 = icmp ugt i64 %66, %71
  br i1 %72, label %73, label %76

73:                                               ; preds = %3
  %74 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)) #5
  %75 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

76:                                               ; preds = %3
  %77 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 3
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = icmp ugt i64 %68, %79
  br i1 %80, label %81, label %84

81:                                               ; preds = %76
  %82 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0)) #5
  %83 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

84:                                               ; preds = %76
  %85 = trunc i64 %66 to i32
  %86 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 0
  store i32 %85, i32* %86, align 8
  %87 = trunc i64 %68 to i32
  %88 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 1
  store i32 %87, i32* %88, align 4
  %89 = icmp ugt i64 %61, %58
  br i1 %89, label %90, label %118

90:                                               ; preds = %84
  %91 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 4
  %92 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %93 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %95 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 2, i32 0, i32 4
  %96 = icmp ugt i32 %39, 1
  %97 = zext i1 %96 to i64
  %98 = sub i64 0, %52
  %99 = icmp eq i64 %65, 0
  %100 = lshr exact i64 %65, 2
  %101 = icmp ugt i64 %100, 1
  %102 = select i1 %101, i64 %100, i64 1
  %103 = icmp ugt i64 %100, 1
  %104 = select i1 %103, i64 %100, i64 1
  %105 = shl nuw i64 %104, 2
  %106 = shl i64 %104, 4
  %107 = and i64 %102, 4611686018427387896
  %108 = add nsw i64 %107, -8
  %109 = lshr exact i64 %108, 3
  %110 = add nuw nsw i64 %109, 1
  %111 = icmp ult i64 %102, 8
  %112 = and i64 %102, 4611686018427387896
  %113 = and i64 %110, 1
  %114 = icmp eq i64 %108, 0
  %115 = sub nuw nsw i64 %110, %113
  %116 = icmp eq i64 %113, 0
  %117 = icmp eq i64 %102, %112
  br label %370

118:                                              ; preds = %744, %84
  %119 = lshr exact i64 %52, 2
  %120 = and i64 %119, 1
  %121 = lshr exact i64 %58, 2
  %122 = and i64 %121, 1
  %123 = shl i64 %23, 1
  %124 = shl i64 %24, 1
  %125 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %63, align 8
  %126 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 0
  %127 = load i32, i32* %126, align 8
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 1
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  %132 = icmp eq i64 %124, 0
  br i1 %132, label %349, label %133

133:                                              ; preds = %118
  %134 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 5, i32 0, i32 0, i32 0
  %135 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 4
  %136 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %137 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 4
  br label %138

138:                                              ; preds = %180, %133
  %139 = phi i64 [ %123, %133 ], [ %181, %180 ]
  %140 = phi i64 [ 0, %133 ], [ %182, %180 ]
  %141 = add nuw i64 %140, %122
  %142 = icmp eq i64 %141, 0
  %143 = add i64 %141, -1
  %144 = select i1 %142, i64 0, i64 %143
  %145 = add nuw i64 %141, 1
  %146 = icmp ult i64 %145, %131
  %147 = select i1 %146, i64 %145, i64 %141
  %148 = load i8*, i8** %134, align 8
  %149 = load i64, i64* %135, align 8
  %150 = mul i64 %144, %149
  %151 = getelementptr inbounds i8, i8* %148, i64 %150
  %152 = ptrtoint i8* %151 to i64
  %153 = and i64 %152, 63
  %154 = icmp eq i64 %153, 0
  tail call void @llvm.assume(i1 %154) #5
  %155 = bitcast i8* %151 to float*
  %156 = mul i64 %149, %141
  %157 = getelementptr inbounds i8, i8* %148, i64 %156
  %158 = ptrtoint i8* %157 to i64
  %159 = and i64 %158, 63
  %160 = icmp eq i64 %159, 0
  tail call void @llvm.assume(i1 %160) #5
  %161 = bitcast i8* %157 to float*
  %162 = mul i64 %147, %149
  %163 = getelementptr inbounds i8, i8* %148, i64 %162
  %164 = ptrtoint i8* %163 to i64
  %165 = and i64 %164, 63
  %166 = icmp eq i64 %165, 0
  tail call void @llvm.assume(i1 %166) #5
  %167 = bitcast i8* %163 to float*
  %168 = lshr i64 %140, 1
  %169 = add i64 %168, %13
  %170 = load i8*, i8** %136, align 8
  %171 = load i64, i64* %137, align 8
  %172 = mul i64 %171, %169
  %173 = getelementptr inbounds i8, i8* %170, i64 %172
  %174 = ptrtoint i8* %173 to i64
  %175 = and i64 %174, 63
  %176 = icmp eq i64 %175, 0
  tail call void @llvm.assume(i1 %176) #5
  %177 = bitcast i8* %173 to float*
  %178 = getelementptr inbounds float, float* %177, i64 %19
  %179 = icmp eq i64 %139, 0
  br i1 %179, label %180, label %184

180:                                              ; preds = %345, %138
  %181 = phi i64 [ 0, %138 ], [ %123, %345 ]
  %182 = add nuw i64 %140, 1
  %183 = icmp eq i64 %182, %124
  br i1 %183, label %349, label %138

184:                                              ; preds = %138, %345
  %185 = phi i64 [ %347, %345 ], [ 0, %138 ]
  %186 = add nuw i64 %185, %120
  %187 = icmp eq i64 %186, 0
  %188 = add i64 %186, -1
  %189 = select i1 %187, i64 0, i64 %188
  %190 = add nuw i64 %186, 1
  %191 = icmp ult i64 %190, %128
  %192 = select i1 %191, i64 %190, i64 %186
  %193 = getelementptr inbounds float, float* %161, i64 %186
  %194 = bitcast float* %193 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds float, float* %161, i64 %189
  %197 = load float, float* %196, align 4
  %198 = bitcast i32 %195 to float
  %199 = fcmp olt float %197, %198
  %200 = bitcast float %197 to i32
  %201 = select i1 %199, i32 %200, i32 %195
  %202 = getelementptr inbounds float, float* %161, i64 %192
  %203 = load float, float* %202, align 4
  %204 = fcmp olt float %203, %198
  br i1 %204, label %205, label %211

205:                                              ; preds = %184
  %206 = bitcast i32 %201 to float
  %207 = fcmp olt float %203, %206
  %208 = bitcast float %203 to i32
  %209 = select i1 %207, i32 %208, i32 %201
  %210 = select i1 %207, i32 %201, i32 %208
  br label %211

211:                                              ; preds = %205, %184
  %212 = phi i32 [ %201, %184 ], [ %209, %205 ]
  %213 = phi i32 [ %195, %184 ], [ %210, %205 ]
  %214 = getelementptr inbounds float, float* %155, i64 %189
  %215 = load float, float* %214, align 4
  %216 = fcmp olt float %215, %198
  br i1 %216, label %217, label %228

217:                                              ; preds = %211
  %218 = bitcast i32 %212 to float
  %219 = fcmp olt float %215, %218
  br i1 %219, label %220, label %222

220:                                              ; preds = %217
  %221 = bitcast float %215 to i32
  br label %228

222:                                              ; preds = %217
  %223 = bitcast i32 %213 to float
  %224 = fcmp olt float %215, %223
  %225 = bitcast float %215 to i32
  %226 = select i1 %224, i32 %225, i32 %213
  %227 = select i1 %224, i32 %213, i32 %225
  br label %228

228:                                              ; preds = %222, %220, %211
  %229 = phi i32 [ %221, %220 ], [ %212, %211 ], [ %212, %222 ]
  %230 = phi i32 [ %212, %220 ], [ %213, %211 ], [ %226, %222 ]
  %231 = phi i32 [ %213, %220 ], [ %195, %211 ], [ %227, %222 ]
  %232 = getelementptr inbounds float, float* %155, i64 %186
  %233 = load float, float* %232, align 4
  %234 = bitcast i32 %231 to float
  %235 = fcmp olt float %233, %234
  br i1 %235, label %236, label %247

236:                                              ; preds = %228
  %237 = bitcast i32 %229 to float
  %238 = fcmp olt float %233, %237
  br i1 %238, label %239, label %241

239:                                              ; preds = %236
  %240 = bitcast float %233 to i32
  br label %247

241:                                              ; preds = %236
  %242 = bitcast i32 %230 to float
  %243 = fcmp olt float %233, %242
  %244 = bitcast float %233 to i32
  %245 = select i1 %243, i32 %244, i32 %230
  %246 = select i1 %243, i32 %230, i32 %244
  br label %247

247:                                              ; preds = %241, %239, %228
  %248 = phi i32 [ %240, %239 ], [ %229, %228 ], [ %229, %241 ]
  %249 = phi i32 [ %229, %239 ], [ %230, %228 ], [ %245, %241 ]
  %250 = phi i32 [ %230, %239 ], [ %231, %228 ], [ %246, %241 ]
  %251 = getelementptr inbounds float, float* %155, i64 %192
  %252 = load float, float* %251, align 4
  %253 = bitcast i32 %250 to float
  %254 = fcmp olt float %252, %253
  br i1 %254, label %255, label %266

255:                                              ; preds = %247
  %256 = bitcast i32 %248 to float
  %257 = fcmp olt float %252, %256
  br i1 %257, label %258, label %260

258:                                              ; preds = %255
  %259 = bitcast float %252 to i32
  br label %266

260:                                              ; preds = %255
  %261 = bitcast i32 %249 to float
  %262 = fcmp olt float %252, %261
  %263 = bitcast float %252 to i32
  %264 = select i1 %262, i32 %263, i32 %249
  %265 = select i1 %262, i32 %249, i32 %263
  br label %266

266:                                              ; preds = %260, %258, %247
  %267 = phi i32 [ %259, %258 ], [ %248, %247 ], [ %248, %260 ]
  %268 = phi i32 [ %248, %258 ], [ %249, %247 ], [ %264, %260 ]
  %269 = phi i32 [ %249, %258 ], [ %250, %247 ], [ %265, %260 ]
  %270 = getelementptr inbounds float, float* %167, i64 %189
  %271 = load float, float* %270, align 4
  %272 = bitcast i32 %269 to float
  %273 = fcmp olt float %271, %272
  br i1 %273, label %274, label %285

274:                                              ; preds = %266
  %275 = bitcast i32 %267 to float
  %276 = fcmp olt float %271, %275
  br i1 %276, label %277, label %279

277:                                              ; preds = %274
  %278 = bitcast float %271 to i32
  br label %285

279:                                              ; preds = %274
  %280 = bitcast i32 %268 to float
  %281 = fcmp olt float %271, %280
  %282 = bitcast float %271 to i32
  %283 = select i1 %281, i32 %282, i32 %268
  %284 = select i1 %281, i32 %268, i32 %282
  br label %285

285:                                              ; preds = %279, %277, %266
  %286 = phi i32 [ %278, %277 ], [ %267, %266 ], [ %267, %279 ]
  %287 = phi i32 [ %267, %277 ], [ %268, %266 ], [ %283, %279 ]
  %288 = phi i32 [ %268, %277 ], [ %269, %266 ], [ %284, %279 ]
  %289 = getelementptr inbounds float, float* %167, i64 %186
  %290 = load float, float* %289, align 4
  %291 = bitcast i32 %288 to float
  %292 = fcmp olt float %290, %291
  br i1 %292, label %293, label %304

293:                                              ; preds = %285
  %294 = bitcast i32 %286 to float
  %295 = fcmp olt float %290, %294
  br i1 %295, label %296, label %298

296:                                              ; preds = %293
  %297 = bitcast float %290 to i32
  br label %304

298:                                              ; preds = %293
  %299 = bitcast i32 %287 to float
  %300 = fcmp olt float %290, %299
  %301 = bitcast float %290 to i32
  %302 = select i1 %300, i32 %301, i32 %287
  %303 = select i1 %300, i32 %287, i32 %301
  br label %304

304:                                              ; preds = %298, %296, %285
  %305 = phi i32 [ %297, %296 ], [ %286, %285 ], [ %286, %298 ]
  %306 = phi i32 [ %286, %296 ], [ %287, %285 ], [ %302, %298 ]
  %307 = phi i32 [ %287, %296 ], [ %288, %285 ], [ %303, %298 ]
  %308 = getelementptr inbounds float, float* %167, i64 %192
  %309 = load float, float* %308, align 4
  %310 = bitcast i32 %307 to float
  %311 = fcmp olt float %309, %310
  br i1 %311, label %312, label %323

312:                                              ; preds = %304
  %313 = bitcast i32 %305 to float
  %314 = fcmp olt float %309, %313
  br i1 %314, label %315, label %317

315:                                              ; preds = %312
  %316 = bitcast float %309 to i32
  br label %323

317:                                              ; preds = %312
  %318 = bitcast i32 %306 to float
  %319 = fcmp olt float %309, %318
  %320 = bitcast float %309 to i32
  %321 = select i1 %319, i32 %320, i32 %306
  %322 = select i1 %319, i32 %306, i32 %320
  br label %323

323:                                              ; preds = %317, %315, %304
  %324 = phi i32 [ %316, %315 ], [ %305, %304 ], [ %305, %317 ]
  %325 = phi i32 [ %305, %315 ], [ %306, %304 ], [ %321, %317 ]
  %326 = phi i32 [ %306, %315 ], [ %307, %304 ], [ %322, %317 ]
  %327 = fmul float %198, 0x3F7E4F2620000000
  %328 = bitcast i32 %324 to float
  %329 = fmul float %328, 0x3FC1F66CA0000000
  %330 = fadd float %327, %329
  %331 = bitcast i32 %325 to float
  %332 = fmul float %331, 0x3FA5204D60000000
  %333 = fadd float %332, %330
  %334 = bitcast i32 %326 to float
  %335 = fmul float %334, 0x3FAF3C1B80000000
  %336 = fadd float %335, %333
  %337 = or i64 %185, %140
  %338 = and i64 %337, 1
  %339 = icmp eq i64 %338, 0
  %340 = lshr i64 %185, 1
  %341 = getelementptr inbounds float, float* %178, i64 %340
  br i1 %339, label %345, label %342

342:                                              ; preds = %323
  %343 = load float, float* %341, align 4
  %344 = fadd float %336, %343
  br label %345

345:                                              ; preds = %342, %323
  %346 = phi float [ %344, %342 ], [ %336, %323 ]
  store float %346, float* %341, align 4
  %347 = add nuw i64 %185, 1
  %348 = icmp ult i64 %347, %123
  br i1 %348, label %184, label %180

349:                                              ; preds = %180, %118
  %350 = icmp eq i64 %24, 0
  br i1 %350, label %746, label %351

351:                                              ; preds = %349
  %352 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %353 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 4
  %354 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %37, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %355 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %37, i64 0, i32 0, i32 4
  %356 = shl nsw i64 %10, 5
  %357 = mul i64 %9, %12
  %358 = shl i64 %357, 5
  %359 = sub i64 %356, %358
  %360 = icmp ugt i64 %23, 1
  %361 = select i1 %360, i64 %23, i64 1
  %362 = icmp ult i64 %361, 32
  %363 = icmp ugt i64 %23, 1
  %364 = select i1 %363, i64 %23, i64 1
  %365 = shl i64 %364, 2
  %366 = add i64 %356, %365
  %367 = sub i64 %366, %358
  %368 = and i64 %361, -32
  %369 = icmp eq i64 %361, %368
  br label %1127

370:                                              ; preds = %744, %90
  %371 = phi i64 [ %58, %90 ], [ %372, %744 ]
  %372 = add nuw i64 %371, 1
  %373 = icmp ult i64 %372, %43
  %374 = select i1 %373, i64 %372, i64 %371
  %375 = icmp eq i64 %371, 0
  %376 = add i64 %371, -1
  %377 = select i1 %375, i64 0, i64 %376
  %378 = load i64, i64* %91, align 8
  %379 = mul i64 %378, %371
  %380 = load i8*, i8** %92, align 8
  %381 = ptrtoint i8* %380 to i64
  %382 = and i64 %381, 63
  %383 = icmp eq i64 %382, 0
  tail call void @llvm.assume(i1 %383) #5
  %384 = getelementptr inbounds i8, i8* %380, i64 %379
  %385 = ptrtoint i8* %384 to i64
  %386 = and i64 %385, 63
  %387 = icmp eq i64 %386, 0
  tail call void @llvm.assume(i1 %387) #5
  %388 = bitcast i8* %384 to float*
  %389 = mul i64 %377, %378
  %390 = getelementptr inbounds i8, i8* %380, i64 %389
  %391 = ptrtoint i8* %390 to i64
  %392 = and i64 %391, 63
  %393 = icmp eq i64 %392, 0
  tail call void @llvm.assume(i1 %393) #5
  %394 = mul i64 %374, %378
  %395 = getelementptr inbounds i8, i8* %380, i64 %394
  %396 = ptrtoint i8* %395 to i64
  %397 = and i64 %396, 63
  %398 = icmp eq i64 %397, 0
  tail call void @llvm.assume(i1 %398) #5
  %399 = load i8*, i8** %93, align 8
  %400 = ptrtoint i8* %399 to i64
  %401 = and i64 %400, 63
  %402 = icmp eq i64 %401, 0
  tail call void @llvm.assume(i1 %402) #5
  %403 = getelementptr inbounds i8, i8* %399, i64 %379
  %404 = ptrtoint i8* %403 to i64
  %405 = and i64 %404, 63
  %406 = icmp eq i64 %405, 0
  tail call void @llvm.assume(i1 %406) #5
  %407 = bitcast i8* %403 to float*
  %408 = getelementptr inbounds i8, i8* %399, i64 %389
  %409 = ptrtoint i8* %408 to i64
  %410 = and i64 %409, 63
  %411 = icmp eq i64 %410, 0
  tail call void @llvm.assume(i1 %411) #5
  %412 = getelementptr inbounds i8, i8* %399, i64 %394
  %413 = ptrtoint i8* %412 to i64
  %414 = and i64 %413, 63
  %415 = icmp eq i64 %414, 0
  tail call void @llvm.assume(i1 %415) #5
  %416 = load i8*, i8** %94, align 8
  %417 = load i64, i64* %95, align 8
  %418 = mul i64 %417, %62
  %419 = getelementptr inbounds i8, i8* %416, i64 %418
  %420 = ptrtoint i8* %419 to i64
  %421 = and i64 %420, 63
  %422 = icmp eq i64 %421, 0
  tail call void @llvm.assume(i1 %422) #5
  %423 = bitcast i8* %395 to float*
  %424 = bitcast i8* %390 to float*
  %425 = bitcast i8* %412 to float*
  %426 = bitcast i8* %408 to float*
  %427 = bitcast i8* %419 to float*
  br i1 %50, label %428, label %479

428:                                              ; preds = %370
  %429 = load float, float* %423, align 64
  %430 = load float, float* %424, align 64
  %431 = fadd float %429, %430
  %432 = load float, float* %388, align 64
  %433 = fadd float %431, %432
  %434 = getelementptr inbounds float, float* %388, i64 %97
  %435 = load float, float* %434, align 4
  %436 = fadd float %433, %435
  %437 = fmul float %436, 2.500000e-01
  %438 = fadd float %432, 0x3F9374BC60000000
  %439 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %438, i32 0
  %440 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %439, <4 x float> zeroinitializer, <4 x float> %439) #5
  %441 = extractelement <4 x float> %440, i32 0
  %442 = fmul float %441, %441
  %443 = insertelement <4 x float> %440, float %442, i32 0
  %444 = fmul float %442, 0x405DE18460000000
  %445 = fmul float %441, 0x406395E800000000
  %446 = insertelement <4 x float> <float undef, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>, float %445, i32 0
  %447 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %446, <4 x float> %443, <4 x float> <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>) #5
  %448 = extractelement <4 x float> %447, i32 0
  %449 = fdiv float %448, %444
  %450 = fsub float %432, %437
  %451 = fmul float %450, %449
  %452 = fmul float %451, %451
  %453 = load float, float* %425, align 64
  %454 = load float, float* %426, align 64
  %455 = fadd float %453, %454
  %456 = load float, float* %407, align 64
  %457 = fadd float %455, %456
  %458 = getelementptr inbounds float, float* %407, i64 %97
  %459 = load float, float* %458, align 4
  %460 = fadd float %457, %459
  %461 = fmul float %460, 2.500000e-01
  %462 = fsub float %456, %461
  %463 = fmul float %449, %462
  %464 = fmul float %463, %463
  %465 = fmul float %464, 0x403E7E36A0000000
  %466 = fadd float %452, %465
  %467 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %466, i32 0
  %468 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %467, <4 x float> <float 1.454330e+05, float 0x4213B2BBE0000000, float 0x4213B2BBE0000000, float 0x4213B2BBE0000000>, <4 x float> <float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000>) #5
  %469 = extractelement <4 x float> %468, i64 0
  %470 = tail call float @llvm.sqrt.f32(float %469) #5
  %471 = fmul float %470, 2.500000e-01
  %472 = and i64 %371, 3
  %473 = icmp eq i64 %472, 0
  br i1 %473, label %477, label %474

474:                                              ; preds = %428
  %475 = load float, float* %427, align 64
  %476 = fadd float %471, %475
  br label %477

477:                                              ; preds = %474, %428
  %478 = phi float [ %476, %474 ], [ %471, %428 ]
  store float %478, float* %427, align 64
  br label %479

479:                                              ; preds = %477, %370
  %480 = phi i64 [ 1, %477 ], [ %51, %370 ]
  %481 = add i64 %480, 9
  %482 = icmp ult i64 %481, %55
  br i1 %482, label %485, label %483

483:                                              ; preds = %479
  %484 = and i64 %371, 3
  br label %497

485:                                              ; preds = %479
  %486 = getelementptr inbounds i8, i8* %384, i64 4
  %487 = bitcast i8* %486 to float*
  %488 = getelementptr inbounds i8, i8* %384, i64 -4
  %489 = bitcast i8* %488 to float*
  %490 = getelementptr inbounds i8, i8* %403, i64 4
  %491 = bitcast i8* %490 to float*
  %492 = getelementptr inbounds i8, i8* %403, i64 -4
  %493 = bitcast i8* %492 to float*
  %494 = and i64 %371, 3
  %495 = icmp eq i64 %494, 0
  %496 = getelementptr inbounds float, float* %427, i64 %98
  br label %503

497:                                              ; preds = %566, %483
  %498 = phi i64 [ %484, %483 ], [ %494, %566 ]
  %499 = phi i64 [ %480, %483 ], [ %570, %566 ]
  %500 = icmp ult i64 %499, %55
  br i1 %500, label %501, label %642

501:                                              ; preds = %497
  %502 = icmp eq i64 %498, 0
  br label %573

503:                                              ; preds = %566, %485
  %504 = phi i64 [ %480, %485 ], [ %570, %566 ]
  %505 = getelementptr inbounds float, float* %388, i64 %504
  %506 = bitcast float* %505 to <8 x float>*
  %507 = load <8 x float>, <8 x float>* %506, align 4, !alias.scope !147, !noalias !150
  %508 = getelementptr inbounds float, float* %487, i64 %504
  %509 = bitcast float* %508 to <8 x float>*
  %510 = load <8 x float>, <8 x float>* %509, align 4, !alias.scope !152, !noalias !155
  %511 = getelementptr inbounds float, float* %489, i64 %504
  %512 = bitcast float* %511 to <8 x float>*
  %513 = load <8 x float>, <8 x float>* %512, align 4, !alias.scope !157, !noalias !160
  %514 = getelementptr inbounds float, float* %423, i64 %504
  %515 = bitcast float* %514 to <8 x float>*
  %516 = load <8 x float>, <8 x float>* %515, align 4, !alias.scope !162, !noalias !165
  %517 = getelementptr inbounds float, float* %424, i64 %504
  %518 = bitcast float* %517 to <8 x float>*
  %519 = load <8 x float>, <8 x float>* %518, align 4, !alias.scope !167, !noalias !170
  %520 = fadd <8 x float> %510, %513
  %521 = fadd <8 x float> %520, %516
  %522 = fadd <8 x float> %521, %519
  %523 = fmul <8 x float> %522, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %524 = fadd <8 x float> %507, <float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000>
  %525 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %524, <8 x float> zeroinitializer, <8 x float> %524) #5
  %526 = fmul <8 x float> %525, %525
  %527 = fmul <8 x float> %526, <float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000>
  %528 = fmul <8 x float> %525, <float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>
  %529 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %528, <8 x float> %526, <8 x float> <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>) #5
  %530 = fdiv <8 x float> %529, %527
  %531 = fsub <8 x float> %507, %523
  %532 = fmul <8 x float> %531, %530
  %533 = fmul <8 x float> %532, %532
  %534 = getelementptr inbounds float, float* %407, i64 %504
  %535 = bitcast float* %534 to <8 x float>*
  %536 = load <8 x float>, <8 x float>* %535, align 4, !alias.scope !172, !noalias !175
  %537 = getelementptr inbounds float, float* %491, i64 %504
  %538 = bitcast float* %537 to <8 x float>*
  %539 = load <8 x float>, <8 x float>* %538, align 4, !alias.scope !177, !noalias !180
  %540 = getelementptr inbounds float, float* %493, i64 %504
  %541 = bitcast float* %540 to <8 x float>*
  %542 = load <8 x float>, <8 x float>* %541, align 4, !alias.scope !182, !noalias !185
  %543 = getelementptr inbounds float, float* %425, i64 %504
  %544 = bitcast float* %543 to <8 x float>*
  %545 = load <8 x float>, <8 x float>* %544, align 4, !alias.scope !187, !noalias !190
  %546 = getelementptr inbounds float, float* %426, i64 %504
  %547 = bitcast float* %546 to <8 x float>*
  %548 = load <8 x float>, <8 x float>* %547, align 4, !alias.scope !192, !noalias !195
  %549 = fadd <8 x float> %539, %542
  %550 = fadd <8 x float> %549, %545
  %551 = fadd <8 x float> %550, %548
  %552 = fmul <8 x float> %551, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %553 = fsub <8 x float> %536, %552
  %554 = fmul <8 x float> %530, %553
  %555 = fmul <8 x float> %554, %554
  %556 = fmul <8 x float> %555, <float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000>
  %557 = fadd <8 x float> %533, %556
  %558 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %557, <8 x float> <float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05>, <8 x float> <float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000>) #5
  %559 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %558) #5
  %560 = fmul <8 x float> %559, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  br i1 %495, label %566, label %561

561:                                              ; preds = %503
  %562 = getelementptr inbounds float, float* %496, i64 %504
  %563 = bitcast float* %562 to <8 x float>*
  %564 = load <8 x float>, <8 x float>* %563, align 4, !alias.scope !197, !noalias !200
  %565 = fadd <8 x float> %560, %564
  br label %566

566:                                              ; preds = %503, %561
  %567 = phi <8 x float> [ %565, %561 ], [ %560, %503 ]
  %568 = getelementptr inbounds float, float* %496, i64 %504
  %569 = bitcast float* %568 to <8 x float>*
  store <8 x float> %567, <8 x float>* %569, align 4, !alias.scope !202
  %570 = add i64 %504, 8
  %571 = add i64 %504, 17
  %572 = icmp ult i64 %571, %55
  br i1 %572, label %503, label %497

573:                                              ; preds = %639, %501
  %574 = phi i64 [ %499, %501 ], [ %575, %639 ]
  %575 = add nuw i64 %574, 1
  %576 = icmp ult i64 %575, %40
  %577 = select i1 %576, i64 %575, i64 %574
  %578 = icmp eq i64 %574, 0
  %579 = add i64 %574, -1
  %580 = select i1 %578, i64 0, i64 %579
  %581 = getelementptr inbounds float, float* %423, i64 %574
  %582 = load float, float* %581, align 4
  %583 = getelementptr inbounds float, float* %424, i64 %574
  %584 = load float, float* %583, align 4
  %585 = fadd float %582, %584
  %586 = getelementptr inbounds float, float* %388, i64 %580
  %587 = load float, float* %586, align 4
  %588 = fadd float %585, %587
  %589 = getelementptr inbounds float, float* %388, i64 %577
  %590 = load float, float* %589, align 4
  %591 = fadd float %588, %590
  %592 = fmul float %591, 2.500000e-01
  %593 = getelementptr inbounds float, float* %388, i64 %574
  %594 = load float, float* %593, align 4
  %595 = fadd float %594, 0x3F9374BC60000000
  %596 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %595, i32 0
  %597 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %596, <4 x float> zeroinitializer, <4 x float> %596) #5
  %598 = extractelement <4 x float> %597, i32 0
  %599 = fmul float %598, %598
  %600 = insertelement <4 x float> %597, float %599, i32 0
  %601 = fmul float %599, 0x405DE18460000000
  %602 = fmul float %598, 0x406395E800000000
  %603 = insertelement <4 x float> <float undef, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>, float %602, i32 0
  %604 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %603, <4 x float> %600, <4 x float> <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>) #5
  %605 = extractelement <4 x float> %604, i32 0
  %606 = fdiv float %605, %601
  %607 = fsub float %594, %592
  %608 = fmul float %607, %606
  %609 = fmul float %608, %608
  %610 = getelementptr inbounds float, float* %425, i64 %574
  %611 = load float, float* %610, align 4
  %612 = getelementptr inbounds float, float* %426, i64 %574
  %613 = load float, float* %612, align 4
  %614 = fadd float %611, %613
  %615 = getelementptr inbounds float, float* %407, i64 %580
  %616 = load float, float* %615, align 4
  %617 = fadd float %614, %616
  %618 = getelementptr inbounds float, float* %407, i64 %577
  %619 = load float, float* %618, align 4
  %620 = fadd float %617, %619
  %621 = fmul float %620, 2.500000e-01
  %622 = getelementptr inbounds float, float* %407, i64 %574
  %623 = load float, float* %622, align 4
  %624 = fsub float %623, %621
  %625 = fmul float %606, %624
  %626 = fmul float %625, %625
  %627 = fmul float %626, 0x403E7E36A0000000
  %628 = fadd float %609, %627
  %629 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %628, i32 0
  %630 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %629, <4 x float> <float 1.454330e+05, float 0x4213B2BBE0000000, float 0x4213B2BBE0000000, float 0x4213B2BBE0000000>, <4 x float> <float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000>) #5
  %631 = extractelement <4 x float> %630, i64 0
  %632 = tail call float @llvm.sqrt.f32(float %631) #5
  %633 = fmul float %632, 2.500000e-01
  %634 = sub i64 %574, %52
  %635 = getelementptr inbounds float, float* %427, i64 %634
  br i1 %502, label %639, label %636

636:                                              ; preds = %573
  %637 = load float, float* %635, align 4
  %638 = fadd float %633, %637
  br label %639

639:                                              ; preds = %636, %573
  %640 = phi float [ %638, %636 ], [ %633, %573 ]
  store float %640, float* %635, align 4
  %641 = icmp eq i64 %575, %55
  br i1 %641, label %642, label %573

642:                                              ; preds = %639, %497
  %643 = icmp eq i64 %498, 3
  br i1 %643, label %644, label %744

644:                                              ; preds = %642
  %645 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %63, align 8
  %646 = sub nuw i64 %371, %58
  %647 = lshr i64 %646, 2
  %648 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %645, i64 %62, i32 0, i32 5, i32 0, i32 0, i32 0
  %649 = load i8*, i8** %648, align 8
  %650 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %645, i64 %62, i32 0, i32 4
  %651 = load i64, i64* %650, align 8
  %652 = mul i64 %651, %647
  %653 = getelementptr inbounds i8, i8* %649, i64 %652
  %654 = ptrtoint i8* %653 to i64
  %655 = and i64 %654, 63
  %656 = icmp eq i64 %655, 0
  tail call void @llvm.assume(i1 %656) #5
  %657 = bitcast i8* %653 to float*
  br i1 %99, label %744, label %658

658:                                              ; preds = %644
  br i1 %111, label %721, label %659

659:                                              ; preds = %658
  %660 = getelementptr i8, i8* %649, i64 %105
  %661 = getelementptr i8, i8* %660, i64 %652
  %662 = getelementptr i8, i8* %416, i64 %106
  %663 = getelementptr i8, i8* %662, i64 %418
  %664 = icmp ult i8* %653, %663
  %665 = icmp ult i8* %419, %661
  %666 = and i1 %664, %665
  br i1 %666, label %721, label %667

667:                                              ; preds = %659
  br i1 %114, label %703, label %668

668:                                              ; preds = %667, %668
  %669 = phi i64 [ %700, %668 ], [ 0, %667 ]
  %670 = phi i64 [ %701, %668 ], [ %115, %667 ]
  %671 = shl i64 %669, 2
  %672 = getelementptr inbounds float, float* %427, i64 %671
  %673 = bitcast float* %672 to <32 x float>*
  %674 = load <32 x float>, <32 x float>* %673, align 64
  %675 = shufflevector <32 x float> %674, <32 x float> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %676 = shufflevector <32 x float> %674, <32 x float> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %677 = shufflevector <32 x float> %674, <32 x float> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %678 = shufflevector <32 x float> %674, <32 x float> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %679 = fadd <8 x float> %675, %676
  %680 = fadd <8 x float> %679, %677
  %681 = fadd <8 x float> %680, %678
  %682 = fmul <8 x float> %681, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %683 = getelementptr inbounds float, float* %657, i64 %669
  %684 = bitcast float* %683 to <8 x float>*
  store <8 x float> %682, <8 x float>* %684, align 64, !alias.scope !205, !noalias !208
  %685 = or i64 %669, 8
  %686 = shl i64 %685, 2
  %687 = getelementptr inbounds float, float* %427, i64 %686
  %688 = bitcast float* %687 to <32 x float>*
  %689 = load <32 x float>, <32 x float>* %688, align 64
  %690 = shufflevector <32 x float> %689, <32 x float> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %691 = shufflevector <32 x float> %689, <32 x float> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %692 = shufflevector <32 x float> %689, <32 x float> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %693 = shufflevector <32 x float> %689, <32 x float> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %694 = fadd <8 x float> %690, %691
  %695 = fadd <8 x float> %694, %692
  %696 = fadd <8 x float> %695, %693
  %697 = fmul <8 x float> %696, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %698 = getelementptr inbounds float, float* %657, i64 %685
  %699 = bitcast float* %698 to <8 x float>*
  store <8 x float> %697, <8 x float>* %699, align 32, !alias.scope !205, !noalias !208
  %700 = add i64 %669, 16
  %701 = add i64 %670, -2
  %702 = icmp eq i64 %701, 0
  br i1 %702, label %703, label %668, !llvm.loop !210

703:                                              ; preds = %668, %667
  %704 = phi i64 [ 0, %667 ], [ %700, %668 ]
  br i1 %116, label %720, label %705

705:                                              ; preds = %703
  %706 = shl i64 %704, 2
  %707 = getelementptr inbounds float, float* %427, i64 %706
  %708 = bitcast float* %707 to <32 x float>*
  %709 = load <32 x float>, <32 x float>* %708, align 64
  %710 = shufflevector <32 x float> %709, <32 x float> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %711 = shufflevector <32 x float> %709, <32 x float> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %712 = shufflevector <32 x float> %709, <32 x float> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %713 = shufflevector <32 x float> %709, <32 x float> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %714 = fadd <8 x float> %710, %711
  %715 = fadd <8 x float> %714, %712
  %716 = fadd <8 x float> %715, %713
  %717 = fmul <8 x float> %716, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %718 = getelementptr inbounds float, float* %657, i64 %704
  %719 = bitcast float* %718 to <8 x float>*
  store <8 x float> %717, <8 x float>* %719, align 32, !alias.scope !205, !noalias !208
  br label %720

720:                                              ; preds = %703, %705
  br i1 %117, label %744, label %721

721:                                              ; preds = %720, %659, %658
  %722 = phi i64 [ 0, %659 ], [ 0, %658 ], [ %112, %720 ]
  br label %723

723:                                              ; preds = %721, %723
  %724 = phi i64 [ %742, %723 ], [ %722, %721 ]
  %725 = shl i64 %724, 2
  %726 = getelementptr inbounds float, float* %427, i64 %725
  %727 = load float, float* %726, align 16
  %728 = or i64 %725, 1
  %729 = getelementptr inbounds float, float* %427, i64 %728
  %730 = load float, float* %729, align 4
  %731 = fadd float %727, %730
  %732 = or i64 %725, 2
  %733 = getelementptr inbounds float, float* %427, i64 %732
  %734 = load float, float* %733, align 8
  %735 = fadd float %731, %734
  %736 = or i64 %725, 3
  %737 = getelementptr inbounds float, float* %427, i64 %736
  %738 = load float, float* %737, align 4
  %739 = fadd float %735, %738
  %740 = fmul float %739, 2.500000e-01
  %741 = getelementptr inbounds float, float* %657, i64 %724
  store float %740, float* %741, align 4
  %742 = add nuw nsw i64 %724, 1
  %743 = icmp ult i64 %742, %66
  br i1 %743, label %723, label %744, !llvm.loop !211

744:                                              ; preds = %723, %720, %644, %642
  %745 = icmp eq i64 %372, %61
  br i1 %745, label %118, label %370

746:                                              ; preds = %1199, %349
  %747 = load i32, i32* %38, align 8
  %748 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 0
  %749 = load i32, i32* %748, align 8
  %750 = icmp eq i32 %747, %749
  br i1 %750, label %751, label %756

751:                                              ; preds = %746
  %752 = load i32, i32* %41, align 4
  %753 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 1
  %754 = load i32, i32* %753, align 4
  %755 = icmp eq i32 %752, %754
  br i1 %755, label %759, label %756

756:                                              ; preds = %751, %746
  %757 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 252, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0)) #5
  %758 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

759:                                              ; preds = %751
  %760 = zext i32 %747 to i64
  %761 = add nuw nsw i64 %760, 7
  %762 = lshr i64 %761, 3
  %763 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 0
  %764 = load i32, i32* %763, align 8
  %765 = zext i32 %764 to i64
  %766 = icmp eq i64 %762, %765
  br i1 %766, label %770, label %767

767:                                              ; preds = %759
  %768 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 253, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.18, i64 0, i64 0)) #5
  %769 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

770:                                              ; preds = %759
  %771 = zext i32 %752 to i64
  %772 = add nuw nsw i64 %771, 7
  %773 = lshr i64 %772, 3
  %774 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 1
  %775 = load i32, i32* %774, align 4
  %776 = zext i32 %775 to i64
  %777 = icmp eq i64 %773, %776
  br i1 %777, label %781, label %778

778:                                              ; preds = %770
  %779 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 254, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.19, i64 0, i64 0)) #5
  %780 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

781:                                              ; preds = %770
  %782 = fmul float %32, 5.000000e-01
  %783 = fcmp ult float %29, 7.000000e+00
  br i1 %783, label %790, label %784

784:                                              ; preds = %781
  %785 = fadd float %29, -7.000000e+00
  %786 = fdiv float %785, 7.000000e+00
  %787 = fsub float 1.000000e+00, %786
  %788 = fcmp olt float %787, 0.000000e+00
  br i1 %788, label %789, label %790

789:                                              ; preds = %784
  br label %790

790:                                              ; preds = %789, %784, %781
  %791 = phi float [ 0.000000e+00, %789 ], [ %787, %784 ], [ 1.000000e+00, %781 ]
  %792 = fmul float %32, %791
  %793 = fsub float 1.000000e+00, %791
  %794 = fmul float %782, %793
  %795 = icmp ugt i64 %18, %13
  br i1 %795, label %796, label %1212

796:                                              ; preds = %790
  %797 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %798 = getelementptr inbounds %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_AVX2::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 4
  %799 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %800 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 4
  %801 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %802 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 4
  %803 = icmp ugt i64 %22, %19
  br label %804

804:                                              ; preds = %823, %796
  %805 = phi i64 [ %13, %796 ], [ %824, %823 ]
  %806 = shl i64 %805, 3
  %807 = load i8*, i8** %797, align 8
  %808 = load i64, i64* %798, align 8
  %809 = mul i64 %808, %805
  %810 = getelementptr inbounds i8, i8* %807, i64 %809
  %811 = ptrtoint i8* %810 to i64
  %812 = and i64 %811, 63
  %813 = icmp eq i64 %812, 0
  tail call void @llvm.assume(i1 %813) #5
  %814 = bitcast i8* %810 to float*
  br i1 %803, label %815, label %823

815:                                              ; preds = %804
  %816 = or i64 %806, 1
  %817 = or i64 %806, 2
  %818 = or i64 %806, 3
  %819 = or i64 %806, 4
  %820 = or i64 %806, 5
  %821 = or i64 %806, 6
  %822 = or i64 %806, 7
  br label %826

823:                                              ; preds = %1065, %804
  %824 = add nuw i64 %805, 1
  %825 = icmp ult i64 %824, %18
  br i1 %825, label %804, label %1212

826:                                              ; preds = %1065, %815
  %827 = phi i64 [ %19, %815 ], [ %1125, %1065 ]
  %828 = shl i64 %827, 3
  %829 = getelementptr inbounds float, float* %814, i64 %827
  %830 = load float, float* %829, align 4
  %831 = insertelement <8 x float> undef, float %830, i32 0
  %832 = fmul <8 x float> %831, <float 0x3FE7EC5FC0000000, float undef, float undef, float undef, float undef, float undef, float undef, float undef>
  %833 = shufflevector <8 x float> %832, <8 x float> undef, <8 x i32> zeroinitializer
  %834 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %833, <8 x float> <float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000>) #5
  %835 = fadd <8 x float> %834, <float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000, float 0x407310A540000000>
  %836 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %834, <8 x float> %834, <8 x float> <float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000, float 0x40018A6440000000>) #5
  %837 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %836
  %838 = fmul <8 x float> %837, <float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000, float 0x4014168F60000000>
  %839 = load i8*, i8** %799, align 8, !noalias !212
  %840 = load i64, i64* %800, align 8, !noalias !212
  %841 = mul i64 %840, %806
  %842 = getelementptr inbounds i8, i8* %839, i64 %841
  %843 = ptrtoint i8* %842 to i64
  %844 = and i64 %843, 63
  %845 = icmp eq i64 %844, 0
  tail call void @llvm.assume(i1 %845) #5, !noalias !212
  %846 = bitcast i8* %842 to float*
  %847 = getelementptr inbounds float, float* %846, i64 %828
  %848 = mul i64 %840, %816
  %849 = getelementptr inbounds i8, i8* %839, i64 %848
  %850 = ptrtoint i8* %849 to i64
  %851 = and i64 %850, 63
  %852 = icmp eq i64 %851, 0
  tail call void @llvm.assume(i1 %852) #5, !noalias !212
  %853 = bitcast i8* %849 to float*
  %854 = getelementptr inbounds float, float* %853, i64 %828
  %855 = bitcast float* %847 to <8 x float>*
  %856 = load <8 x float>, <8 x float>* %855, align 32, !alias.scope !215, !noalias !218
  %857 = getelementptr inbounds float, float* %847, i64 1
  %858 = bitcast float* %857 to <8 x float>*
  %859 = load <8 x float>, <8 x float>* %858, align 4, !alias.scope !220, !noalias !223
  %860 = fsub <8 x float> %856, %859
  %861 = bitcast <8 x float> %860 to <8 x i32>
  %862 = and <8 x i32> %861, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %863 = bitcast <8 x i32> %862 to <8 x float>
  %864 = fadd <8 x float> %863, zeroinitializer
  %865 = bitcast float* %854 to <8 x float>*
  %866 = load <8 x float>, <8 x float>* %865, align 32, !alias.scope !225, !noalias !228
  %867 = fsub <8 x float> %856, %866
  %868 = bitcast <8 x float> %867 to <8 x i32>
  %869 = and <8 x i32> %868, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %870 = bitcast <8 x i32> %869 to <8 x float>
  %871 = fadd <8 x float> %864, %870
  %872 = mul i64 %840, %817
  %873 = getelementptr inbounds i8, i8* %839, i64 %872
  %874 = ptrtoint i8* %873 to i64
  %875 = and i64 %874, 63
  %876 = icmp eq i64 %875, 0
  tail call void @llvm.assume(i1 %876) #5, !noalias !212
  %877 = bitcast i8* %873 to float*
  %878 = getelementptr inbounds float, float* %877, i64 %828
  %879 = getelementptr inbounds float, float* %854, i64 1
  %880 = bitcast float* %879 to <8 x float>*
  %881 = load <8 x float>, <8 x float>* %880, align 4, !alias.scope !220, !noalias !223
  %882 = fsub <8 x float> %866, %881
  %883 = bitcast <8 x float> %882 to <8 x i32>
  %884 = and <8 x i32> %883, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %885 = bitcast <8 x i32> %884 to <8 x float>
  %886 = fadd <8 x float> %871, %885
  %887 = bitcast float* %878 to <8 x float>*
  %888 = load <8 x float>, <8 x float>* %887, align 32, !alias.scope !225, !noalias !228
  %889 = fsub <8 x float> %866, %888
  %890 = bitcast <8 x float> %889 to <8 x i32>
  %891 = and <8 x i32> %890, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %892 = bitcast <8 x i32> %891 to <8 x float>
  %893 = fadd <8 x float> %886, %892
  %894 = mul i64 %840, %818
  %895 = getelementptr inbounds i8, i8* %839, i64 %894
  %896 = ptrtoint i8* %895 to i64
  %897 = and i64 %896, 63
  %898 = icmp eq i64 %897, 0
  tail call void @llvm.assume(i1 %898) #5, !noalias !212
  %899 = bitcast i8* %895 to float*
  %900 = getelementptr inbounds float, float* %899, i64 %828
  %901 = getelementptr inbounds float, float* %878, i64 1
  %902 = bitcast float* %901 to <8 x float>*
  %903 = load <8 x float>, <8 x float>* %902, align 4, !alias.scope !220, !noalias !223
  %904 = fsub <8 x float> %888, %903
  %905 = bitcast <8 x float> %904 to <8 x i32>
  %906 = and <8 x i32> %905, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %907 = bitcast <8 x i32> %906 to <8 x float>
  %908 = fadd <8 x float> %893, %907
  %909 = bitcast float* %900 to <8 x float>*
  %910 = load <8 x float>, <8 x float>* %909, align 32, !alias.scope !225, !noalias !228
  %911 = fsub <8 x float> %888, %910
  %912 = bitcast <8 x float> %911 to <8 x i32>
  %913 = and <8 x i32> %912, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %914 = bitcast <8 x i32> %913 to <8 x float>
  %915 = fadd <8 x float> %908, %914
  %916 = mul i64 %840, %819
  %917 = getelementptr inbounds i8, i8* %839, i64 %916
  %918 = ptrtoint i8* %917 to i64
  %919 = and i64 %918, 63
  %920 = icmp eq i64 %919, 0
  tail call void @llvm.assume(i1 %920) #5, !noalias !212
  %921 = bitcast i8* %917 to float*
  %922 = getelementptr inbounds float, float* %921, i64 %828
  %923 = getelementptr inbounds float, float* %900, i64 1
  %924 = bitcast float* %923 to <8 x float>*
  %925 = load <8 x float>, <8 x float>* %924, align 4, !alias.scope !220, !noalias !223
  %926 = fsub <8 x float> %910, %925
  %927 = bitcast <8 x float> %926 to <8 x i32>
  %928 = and <8 x i32> %927, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %929 = bitcast <8 x i32> %928 to <8 x float>
  %930 = fadd <8 x float> %915, %929
  %931 = bitcast float* %922 to <8 x float>*
  %932 = load <8 x float>, <8 x float>* %931, align 32, !alias.scope !225, !noalias !228
  %933 = fsub <8 x float> %910, %932
  %934 = bitcast <8 x float> %933 to <8 x i32>
  %935 = and <8 x i32> %934, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %936 = bitcast <8 x i32> %935 to <8 x float>
  %937 = fadd <8 x float> %930, %936
  %938 = mul i64 %840, %820
  %939 = getelementptr inbounds i8, i8* %839, i64 %938
  %940 = ptrtoint i8* %939 to i64
  %941 = and i64 %940, 63
  %942 = icmp eq i64 %941, 0
  tail call void @llvm.assume(i1 %942) #5, !noalias !212
  %943 = bitcast i8* %939 to float*
  %944 = getelementptr inbounds float, float* %943, i64 %828
  %945 = getelementptr inbounds float, float* %922, i64 1
  %946 = bitcast float* %945 to <8 x float>*
  %947 = load <8 x float>, <8 x float>* %946, align 4, !alias.scope !220, !noalias !223
  %948 = fsub <8 x float> %932, %947
  %949 = bitcast <8 x float> %948 to <8 x i32>
  %950 = and <8 x i32> %949, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %951 = bitcast <8 x i32> %950 to <8 x float>
  %952 = fadd <8 x float> %937, %951
  %953 = bitcast float* %944 to <8 x float>*
  %954 = load <8 x float>, <8 x float>* %953, align 32, !alias.scope !225, !noalias !228
  %955 = fsub <8 x float> %932, %954
  %956 = bitcast <8 x float> %955 to <8 x i32>
  %957 = and <8 x i32> %956, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %958 = bitcast <8 x i32> %957 to <8 x float>
  %959 = fadd <8 x float> %952, %958
  %960 = mul i64 %840, %821
  %961 = getelementptr inbounds i8, i8* %839, i64 %960
  %962 = ptrtoint i8* %961 to i64
  %963 = and i64 %962, 63
  %964 = icmp eq i64 %963, 0
  tail call void @llvm.assume(i1 %964) #5, !noalias !212
  %965 = bitcast i8* %961 to float*
  %966 = getelementptr inbounds float, float* %965, i64 %828
  %967 = getelementptr inbounds float, float* %944, i64 1
  %968 = bitcast float* %967 to <8 x float>*
  %969 = load <8 x float>, <8 x float>* %968, align 4, !alias.scope !220, !noalias !223
  %970 = fsub <8 x float> %954, %969
  %971 = bitcast <8 x float> %970 to <8 x i32>
  %972 = and <8 x i32> %971, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %973 = bitcast <8 x i32> %972 to <8 x float>
  %974 = fadd <8 x float> %959, %973
  %975 = bitcast float* %966 to <8 x float>*
  %976 = load <8 x float>, <8 x float>* %975, align 32, !alias.scope !225, !noalias !228
  %977 = fsub <8 x float> %954, %976
  %978 = bitcast <8 x float> %977 to <8 x i32>
  %979 = and <8 x i32> %978, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %980 = bitcast <8 x i32> %979 to <8 x float>
  %981 = fadd <8 x float> %974, %980
  %982 = mul i64 %840, %822
  %983 = getelementptr inbounds i8, i8* %839, i64 %982
  %984 = ptrtoint i8* %983 to i64
  %985 = and i64 %984, 63
  %986 = icmp eq i64 %985, 0
  tail call void @llvm.assume(i1 %986) #5, !noalias !212
  %987 = bitcast i8* %983 to float*
  %988 = getelementptr inbounds float, float* %987, i64 %828
  %989 = getelementptr inbounds float, float* %966, i64 1
  %990 = bitcast float* %989 to <8 x float>*
  %991 = load <8 x float>, <8 x float>* %990, align 4, !alias.scope !220, !noalias !223
  %992 = fsub <8 x float> %976, %991
  %993 = bitcast <8 x float> %992 to <8 x i32>
  %994 = and <8 x i32> %993, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %995 = bitcast <8 x i32> %994 to <8 x float>
  %996 = fadd <8 x float> %981, %995
  %997 = bitcast float* %988 to <8 x float>*
  %998 = load <8 x float>, <8 x float>* %997, align 32, !alias.scope !225, !noalias !228
  %999 = fsub <8 x float> %976, %998
  %1000 = bitcast <8 x float> %999 to <8 x i32>
  %1001 = and <8 x i32> %1000, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1002 = bitcast <8 x i32> %1001 to <8 x float>
  %1003 = fadd <8 x float> %996, %1002
  %1004 = getelementptr inbounds float, float* %988, i64 1
  %1005 = bitcast float* %1004 to <8 x float>*
  %1006 = load <8 x float>, <8 x float>* %1005, align 4, !alias.scope !220, !noalias !223
  %1007 = fsub <8 x float> %998, %1006
  %1008 = bitcast <8 x float> %1007 to <8 x i32>
  %1009 = and <8 x i32> %1008, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %1010 = bitcast <8 x i32> %1009 to <8 x float>
  %1011 = fadd <8 x float> %1003, %1010
  %1012 = fsub <8 x float> %998, %998
  %1013 = bitcast <8 x float> %1012 to <8 x i32>
  %1014 = and <8 x i32> %1013, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1015 = bitcast <8 x i32> %1014 to <8 x float>
  %1016 = fadd <8 x float> %1011, %1015
  %1017 = shufflevector <8 x float> %1016, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %1018 = fadd <8 x float> %1016, %1017
  %1019 = shufflevector <8 x float> %1018, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %1020 = fadd <8 x float> %1018, %1019
  %1021 = load i8*, i8** %801, align 8, !noalias !230
  %1022 = load i64, i64* %802, align 8, !noalias !230
  br label %1023

1023:                                             ; preds = %1023, %826
  %1024 = phi i64 [ 0, %826 ], [ %1063, %1023 ]
  %1025 = phi <8 x float> [ zeroinitializer, %826 ], [ %1062, %1023 ]
  %1026 = add i64 %1024, %806
  %1027 = mul i64 %1026, %1022
  %1028 = getelementptr inbounds i8, i8* %1021, i64 %1027
  %1029 = ptrtoint i8* %1028 to i64
  %1030 = and i64 %1029, 63
  %1031 = icmp eq i64 %1030, 0
  tail call void @llvm.assume(i1 %1031) #5, !noalias !230
  %1032 = bitcast i8* %1028 to float*
  %1033 = mul i64 %1026, %840
  %1034 = getelementptr inbounds i8, i8* %839, i64 %1033
  %1035 = ptrtoint i8* %1034 to i64
  %1036 = and i64 %1035, 63
  %1037 = icmp eq i64 %1036, 0
  tail call void @llvm.assume(i1 %1037) #5, !noalias !230
  %1038 = bitcast i8* %1034 to float*
  %1039 = getelementptr inbounds float, float* %1038, i64 %828
  %1040 = getelementptr inbounds float, float* %1032, i64 %828
  %1041 = bitcast float* %1039 to <8 x float>*
  %1042 = load <8 x float>, <8 x float>* %1041, align 32, !alias.scope !233, !noalias !236
  %1043 = fadd <8 x float> %1042, <float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000>
  %1044 = bitcast float* %1040 to <8 x float>*
  %1045 = load <8 x float>, <8 x float>* %1044, align 32, !alias.scope !238, !noalias !241
  %1046 = fsub <8 x float> %1043, %1045
  %1047 = fadd <8 x float> %1043, %1045
  %1048 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1046, <8 x float> zeroinitializer, <8 x float> %1046) #5
  %1049 = fmul <8 x float> %1048, %1048
  %1050 = fmul <8 x float> %1049, <float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000>
  %1051 = fmul <8 x float> %1048, <float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>
  %1052 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1051, <8 x float> %1049, <8 x float> <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>) #5
  %1053 = fdiv <8 x float> %1050, %1052
  %1054 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1047, <8 x float> zeroinitializer, <8 x float> %1047) #5
  %1055 = fmul <8 x float> %1054, %1054
  %1056 = fmul <8 x float> %1055, <float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000>
  %1057 = fmul <8 x float> %1054, <float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>
  %1058 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1057, <8 x float> %1055, <8 x float> <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>) #5
  %1059 = fdiv <8 x float> %1056, %1058
  %1060 = fadd <8 x float> %1053, %1059
  %1061 = fmul <8 x float> %1060, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1062 = fadd <8 x float> %1025, %1061
  %1063 = add nuw nsw i64 %1024, 1
  %1064 = icmp eq i64 %1063, 8
  br i1 %1064, label %1065, label %1023

1065:                                             ; preds = %1023
  %1066 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %835
  %1067 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %834, <8 x float> %834, <8 x float> <float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000, float 0x3FE18A6440000000>) #5
  %1068 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1066, <8 x float> <float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000, float 0x4029CFE300000000>, <8 x float> %838) #5
  %1069 = shufflevector <8 x float> %1020, <8 x float> undef, <8 x i32> <i32 1, i32 2, i32 3, i32 0, i32 5, i32 6, i32 7, i32 4>
  %1070 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1067
  %1071 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1070, <8 x float> <float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000, float 0x4009E1F280000000>, <8 x float> %1068) #5
  %1072 = fadd <8 x float> %1020, %1069
  %1073 = fadd <8 x float> %1071, <float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000, float 0xBFE7BC6A60000000>
  %1074 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1072, <8 x float> <float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000, float 0xBF92555BE0000000>, <8 x float> %1073) #5
  %1075 = shufflevector <8 x float> %1062, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %1076 = fadd <8 x float> %1062, %1075
  %1077 = shufflevector <8 x float> %1076, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %1078 = fadd <8 x float> %1076, %1077
  %1079 = shufflevector <8 x float> %1078, <8 x float> undef, <8 x i32> <i32 1, i32 2, i32 3, i32 0, i32 5, i32 6, i32 7, i32 4>
  %1080 = fadd <8 x float> %1078, %1079
  %1081 = fmul <8 x float> %1080, <float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02>
  %1082 = bitcast <8 x float> %1081 to <8 x i32>
  %1083 = add <8 x i32> %1082, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %1084 = ashr <8 x i32> %1083, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %1085 = and <8 x i32> %1083, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %1086 = sub <8 x i32> %1082, %1085
  %1087 = bitcast <8 x i32> %1086 to <8 x float>
  %1088 = sitofp <8 x i32> %1084 to <8 x float>
  %1089 = fadd <8 x float> %1087, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %1090 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1089, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #5
  %1091 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1089, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #5
  fence acq_rel
  %1092 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1090, <8 x float> %1089, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #5
  %1093 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1091, <8 x float> %1089, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #5
  fence acq_rel
  %1094 = fdiv <8 x float> %1092, %1093
  %1095 = fadd <8 x float> %1094, %1088
  %1096 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1095, <8 x float> <float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000, float 0xBFBB8D4100000000>, <8 x float> %1074) #5
  %1097 = extractelement <8 x float> %1096, i32 0
  %1098 = fmul float %1097, 0x3FF7154760000000
  %1099 = insertelement <4 x float> undef, float %1098, i32 0
  %1100 = shufflevector <4 x float> %1099, <4 x float> undef, <4 x i32> zeroinitializer
  %1101 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %1100, i32 9) #5
  %1102 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1101) #5
  %1103 = bitcast <4 x float> %1101 to <4 x i32>
  %1104 = xor <4 x i32> %1103, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1105 = and <4 x i32> %1104, %1102
  %1106 = ashr <4 x i32> %1105, <i32 31, i32 31, i32 31, i32 31>
  %1107 = xor <4 x i32> %1106, %1102
  %1108 = shl <4 x i32> %1107, <i32 23, i32 23, i32 23, i32 23>
  %1109 = add <4 x i32> %1108, <i32 1065353216, i32 undef, i32 undef, i32 undef>
  %1110 = bitcast <4 x i32> %1109 to <4 x float>
  %1111 = fsub <4 x float> %1100, %1101
  %1112 = fadd <4 x float> %1111, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %1113 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %1112, <4 x float> %1111, <4 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #5
  %1114 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %1113, <4 x float> %1111, <4 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #5
  %1115 = extractelement <4 x float> %1110, i32 0
  %1116 = extractelement <4 x float> %1114, i32 0
  %1117 = fmul float %1116, %1115
  %1118 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %1111, <4 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <4 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #5
  %1119 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %1118, <4 x float> %1111, <4 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #5
  %1120 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %1119, <4 x float> %1111, <4 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #5
  %1121 = extractelement <4 x float> %1120, i32 0
  %1122 = fdiv float %1117, %1121
  %1123 = fmul float %792, %1122
  %1124 = fadd float %794, %1123
  store float %1124, float* %829, align 4
  %1125 = add nuw i64 %827, 1
  %1126 = icmp ult i64 %1125, %22
  br i1 %1126, label %826, label %823

1127:                                             ; preds = %1199, %351
  %1128 = phi i64 [ %23, %351 ], [ %1200, %1199 ]
  %1129 = phi i64 [ 0, %351 ], [ %1201, %1199 ]
  %1130 = add i64 %1129, %13
  %1131 = load i8*, i8** %352, align 8
  %1132 = load i64, i64* %353, align 8
  %1133 = mul i64 %1132, %1130
  %1134 = getelementptr inbounds i8, i8* %1131, i64 %1133
  %1135 = ptrtoint i8* %1134 to i64
  %1136 = and i64 %1135, 63
  %1137 = icmp eq i64 %1136, 0
  tail call void @llvm.assume(i1 %1137) #5
  %1138 = bitcast i8* %1134 to float*
  %1139 = getelementptr inbounds float, float* %1138, i64 %19
  %1140 = load i8*, i8** %354, align 8
  %1141 = load i64, i64* %355, align 8
  %1142 = mul i64 %1141, %1130
  %1143 = getelementptr inbounds i8, i8* %1140, i64 %1142
  %1144 = ptrtoint i8* %1143 to i64
  %1145 = and i64 %1144, 63
  %1146 = icmp eq i64 %1145, 0
  tail call void @llvm.assume(i1 %1146) #5
  %1147 = bitcast i8* %1143 to float*
  %1148 = getelementptr inbounds float, float* %1147, i64 %19
  %1149 = icmp eq i64 %1128, 0
  br i1 %1149, label %1199, label %1150

1150:                                             ; preds = %1127
  br i1 %362, label %1151, label %1153

1151:                                             ; preds = %1198, %1153, %1150
  %1152 = phi i64 [ 0, %1153 ], [ 0, %1150 ], [ %368, %1198 ]
  br label %1203

1153:                                             ; preds = %1150
  %1154 = getelementptr i8, i8* %1140, i64 %359
  %1155 = getelementptr i8, i8* %1154, i64 %1142
  %1156 = getelementptr i8, i8* %1140, i64 %367
  %1157 = getelementptr i8, i8* %1156, i64 %1142
  %1158 = getelementptr i8, i8* %1131, i64 %359
  %1159 = mul i64 %1132, %1130
  %1160 = getelementptr i8, i8* %1158, i64 %1159
  %1161 = getelementptr i8, i8* %1131, i64 %367
  %1162 = getelementptr i8, i8* %1161, i64 %1159
  %1163 = icmp ult i8* %1155, %1162
  %1164 = icmp ult i8* %1160, %1157
  %1165 = and i1 %1163, %1164
  br i1 %1165, label %1151, label %1166

1166:                                             ; preds = %1153, %1166
  %1167 = phi i64 [ %1196, %1166 ], [ 0, %1153 ]
  %1168 = getelementptr inbounds float, float* %1139, i64 %1167
  %1169 = bitcast float* %1168 to <8 x float>*
  %1170 = load <8 x float>, <8 x float>* %1169, align 32, !alias.scope !243
  %1171 = getelementptr inbounds float, float* %1168, i64 8
  %1172 = bitcast float* %1171 to <8 x float>*
  %1173 = load <8 x float>, <8 x float>* %1172, align 32, !alias.scope !243
  %1174 = getelementptr inbounds float, float* %1168, i64 16
  %1175 = bitcast float* %1174 to <8 x float>*
  %1176 = load <8 x float>, <8 x float>* %1175, align 32, !alias.scope !243
  %1177 = getelementptr inbounds float, float* %1168, i64 24
  %1178 = bitcast float* %1177 to <8 x float>*
  %1179 = load <8 x float>, <8 x float>* %1178, align 32, !alias.scope !243
  %1180 = fadd <8 x float> %1170, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1181 = fadd <8 x float> %1173, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1182 = fadd <8 x float> %1176, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1183 = fadd <8 x float> %1179, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1184 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1180
  %1185 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1181
  %1186 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1182
  %1187 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1183
  %1188 = getelementptr inbounds float, float* %1148, i64 %1167
  %1189 = bitcast float* %1188 to <8 x float>*
  store <8 x float> %1184, <8 x float>* %1189, align 32, !alias.scope !246, !noalias !243
  %1190 = getelementptr inbounds float, float* %1188, i64 8
  %1191 = bitcast float* %1190 to <8 x float>*
  store <8 x float> %1185, <8 x float>* %1191, align 32, !alias.scope !246, !noalias !243
  %1192 = getelementptr inbounds float, float* %1188, i64 16
  %1193 = bitcast float* %1192 to <8 x float>*
  store <8 x float> %1186, <8 x float>* %1193, align 32, !alias.scope !246, !noalias !243
  %1194 = getelementptr inbounds float, float* %1188, i64 24
  %1195 = bitcast float* %1194 to <8 x float>*
  store <8 x float> %1187, <8 x float>* %1195, align 32, !alias.scope !246, !noalias !243
  %1196 = add i64 %1167, 32
  %1197 = icmp eq i64 %1196, %368
  br i1 %1197, label %1198, label %1166, !llvm.loop !248

1198:                                             ; preds = %1166
  br i1 %369, label %1199, label %1151

1199:                                             ; preds = %1203, %1198, %1127
  %1200 = phi i64 [ 0, %1127 ], [ %23, %1198 ], [ %23, %1203 ]
  %1201 = add nuw i64 %1129, 1
  %1202 = icmp ult i64 %1201, %24
  br i1 %1202, label %1127, label %746

1203:                                             ; preds = %1151, %1203
  %1204 = phi i64 [ %1210, %1203 ], [ %1152, %1151 ]
  %1205 = getelementptr inbounds float, float* %1139, i64 %1204
  %1206 = load float, float* %1205, align 4
  %1207 = fadd float %1206, 0x3FD99999A0000000
  %1208 = fdiv float 1.000000e+00, %1207
  %1209 = getelementptr inbounds float, float* %1148, i64 %1204
  store float %1208, float* %1209, align 4
  %1210 = add nuw i64 %1204, 1
  %1211 = icmp ult i64 %1210, %23
  br i1 %1211, label %1203, label %1199, !llvm.loop !249

1212:                                             ; preds = %823, %790
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.sqrt.v8f32(<8 x float>) #13

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_2ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_3E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to %class.anon.483**
  %4 = load %class.anon.483*, %class.anon.483** %3, align 8
  tail call fastcc void @"_ZZN3jxl6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_2clEm"(%class.anon.483* %4, i64 %1)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_2ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_3E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.484**
  %6 = load %class.anon.484*, %class.anon.484** %5, align 8
  %7 = trunc i64 %2 to i32
  tail call fastcc void @"_ZZN3jxl6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_3clEii"(%class.anon.484* %6, i32 %1, i32 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_2clEm"(%class.anon.483* nocapture readonly, i64) unnamed_addr #16 align 2 {
  %3 = alloca %"class.jxl::Plane.1", align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = getelementptr inbounds %class.anon.483, %class.anon.483* %0, i64 0, i32 0
  %7 = load %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"*, %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"** %6, align 8
  %8 = bitcast %"class.jxl::Plane.1"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #5
  %9 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %9, i64 72, i64 %1, i64 4) #5
  %10 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 2
  %11 = bitcast %"class.jxl::Plane.1"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* nonnull align 8 %8, i64 24, i1 false) #5
  %12 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 2, i32 0, i32 5
  %13 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %22, align 8
  br label %28

23:                                               ; preds = %2
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %18) #5
  %24 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  store i8* null, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %23
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %25) #5
  br label %28

28:                                               ; preds = %27, %23, %21
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #5
  %29 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 0
  %30 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 0, i32 0, i32 1
  %31 = bitcast %"class.jxl::Plane.1"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %7 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %32, %34
  %36 = ashr exact i64 %35, 5
  %37 = icmp ult i64 %36, %1
  br i1 %37, label %38, label %58

38:                                               ; preds = %28
  %39 = inttoptr i64 %32 to %"class.jxl::Plane.1"*
  %40 = bitcast i64* %4 to i8*
  %41 = bitcast i64* %5 to i8*
  %42 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  br label %43

43:                                               ; preds = %56, %38
  %44 = phi %"class.jxl::Plane.1"* [ %39, %38 ], [ %57, %56 ]
  %45 = phi i64 [ %36, %38 ], [ %54, %56 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #5
  store i64 18, i64* %4, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #5
  store i64 18, i64* %5, align 8
  %46 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %42, align 8
  %47 = icmp ult %"class.jxl::Plane.1"* %44, %46
  br i1 %47, label %48, label %52

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %44, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %49, i64 18, i64 18, i64 4) #5
  %50 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %44, i64 1
  %51 = ptrtoint %"class.jxl::Plane.1"* %50 to i64
  store i64 %51, i64* %31, align 8
  br label %53

52:                                               ; preds = %43
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.87"* %29, i64* nonnull dereferenceable(8) %4, i64* nonnull dereferenceable(8) %5) #5
  br label %53

53:                                               ; preds = %52, %48
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #5
  %54 = add i64 %45, 1
  %55 = icmp eq i64 %54, %1
  br i1 %55, label %58, label %56

56:                                               ; preds = %53
  %57 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %30, align 8
  br label %43

58:                                               ; preds = %53, %28
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE412_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPNS_10ThreadPoolEPNS_5PlaneIfEEENK3$_3clEii"(%class.anon.484* nocapture readonly, i32, i32) unnamed_addr #17 align 2 {
  %4 = getelementptr inbounds %class.anon.484, %class.anon.484* %0, i64 0, i32 0
  %5 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %5, i64 0, i32 8
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 7
  %9 = lshr i64 %8, 3
  %10 = sext i32 %1 to i64
  %11 = urem i64 %10, %9
  %12 = udiv i64 %10, %9
  %13 = shl i64 %12, 3
  %14 = add i64 %13, 8
  %15 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %5, i64 0, i32 9
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, %14
  %18 = select i1 %17, i64 %16, i64 %14
  %19 = shl nuw i64 %11, 3
  %20 = add nuw i64 %19, 8
  %21 = icmp ult i64 %7, %20
  %22 = select i1 %21, i64 %7, i64 %20
  %23 = sub i64 %22, %19
  %24 = sub i64 %18, %13
  %25 = getelementptr inbounds %class.anon.484, %class.anon.484* %0, i64 0, i32 1
  %26 = load %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"*, %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"** %25, align 8
  %27 = getelementptr inbounds %class.anon.484, %class.anon.484* %0, i64 0, i32 2
  %28 = load float*, float** %27, align 8
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds %class.anon.484, %class.anon.484* %0, i64 0, i32 3
  %31 = load float*, float** %30, align 8
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %class.anon.484, %class.anon.484* %0, i64 0, i32 4
  %34 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %33, align 8
  %35 = getelementptr inbounds %class.anon.484, %class.anon.484* %0, i64 0, i32 5
  %36 = load %"class.jxl::Plane.1"**, %"class.jxl::Plane.1"*** %35, align 8
  %37 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %36, align 8
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = shl i64 %12, 6
  %45 = shl i64 %24, 3
  %46 = add i64 %45, %44
  %47 = shl i64 %11, 6
  %48 = shl i64 %23, 3
  %49 = add i64 %48, %47
  %50 = icmp eq i64 %47, 0
  %51 = add i64 %47, -4
  %52 = select i1 %50, i64 0, i64 %51
  %53 = icmp eq i64 %49, %40
  %54 = or i64 %49, 4
  %55 = select i1 %53, i64 %49, i64 %54
  %56 = icmp eq i64 %44, 0
  %57 = add i64 %44, -4
  %58 = select i1 %56, i64 0, i64 %57
  %59 = icmp eq i64 %46, %43
  %60 = or i64 %46, 4
  %61 = select i1 %59, i64 %46, i64 %60
  %62 = sext i32 %2 to i64
  %63 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %63, align 8
  %65 = sub i64 %55, %52
  %66 = lshr exact i64 %65, 2
  %67 = sub i64 %61, %58
  %68 = lshr exact i64 %67, 2
  %69 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 2
  %70 = load i32, i32* %69, align 8
  %71 = zext i32 %70 to i64
  %72 = icmp ugt i64 %66, %71
  br i1 %72, label %73, label %76

73:                                               ; preds = %3
  %74 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)) #5
  %75 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

76:                                               ; preds = %3
  %77 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 3
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = icmp ugt i64 %68, %79
  br i1 %80, label %81, label %84

81:                                               ; preds = %76
  %82 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0)) #5
  %83 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

84:                                               ; preds = %76
  %85 = trunc i64 %66 to i32
  %86 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 0
  store i32 %85, i32* %86, align 8
  %87 = trunc i64 %68 to i32
  %88 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %64, i64 %62, i32 0, i32 1
  store i32 %87, i32* %88, align 4
  %89 = icmp ugt i64 %61, %58
  br i1 %89, label %90, label %118

90:                                               ; preds = %84
  %91 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 4
  %92 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %93 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %95 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 2, i32 0, i32 4
  %96 = icmp ugt i32 %39, 1
  %97 = zext i1 %96 to i64
  %98 = sub i64 0, %52
  %99 = icmp eq i64 %65, 0
  %100 = lshr exact i64 %65, 2
  %101 = icmp ugt i64 %100, 1
  %102 = select i1 %101, i64 %100, i64 1
  %103 = icmp ugt i64 %100, 1
  %104 = select i1 %103, i64 %100, i64 1
  %105 = shl nuw i64 %104, 2
  %106 = shl i64 %104, 4
  %107 = and i64 %102, 4611686018427387900
  %108 = add nsw i64 %107, -4
  %109 = lshr exact i64 %108, 2
  %110 = add nuw nsw i64 %109, 1
  %111 = icmp ult i64 %102, 4
  %112 = and i64 %102, 4611686018427387900
  %113 = and i64 %110, 1
  %114 = icmp eq i64 %108, 0
  %115 = sub nuw nsw i64 %110, %113
  %116 = icmp eq i64 %113, 0
  %117 = icmp eq i64 %102, %112
  br label %377

118:                                              ; preds = %747, %84
  %119 = lshr exact i64 %52, 2
  %120 = and i64 %119, 1
  %121 = lshr exact i64 %58, 2
  %122 = and i64 %121, 1
  %123 = shl i64 %23, 1
  %124 = shl i64 %24, 1
  %125 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %63, align 8
  %126 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 0
  %127 = load i32, i32* %126, align 8
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 1
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  %132 = icmp eq i64 %124, 0
  br i1 %132, label %349, label %133

133:                                              ; preds = %118
  %134 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 5, i32 0, i32 0, i32 0
  %135 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %125, i64 %62, i32 0, i32 4
  %136 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %137 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 4
  br label %138

138:                                              ; preds = %180, %133
  %139 = phi i64 [ %123, %133 ], [ %181, %180 ]
  %140 = phi i64 [ 0, %133 ], [ %182, %180 ]
  %141 = add nuw i64 %140, %122
  %142 = icmp eq i64 %141, 0
  %143 = add i64 %141, -1
  %144 = select i1 %142, i64 0, i64 %143
  %145 = add nuw i64 %141, 1
  %146 = icmp ult i64 %145, %131
  %147 = select i1 %146, i64 %145, i64 %141
  %148 = load i8*, i8** %134, align 8
  %149 = load i64, i64* %135, align 8
  %150 = mul i64 %144, %149
  %151 = getelementptr inbounds i8, i8* %148, i64 %150
  %152 = ptrtoint i8* %151 to i64
  %153 = and i64 %152, 63
  %154 = icmp eq i64 %153, 0
  tail call void @llvm.assume(i1 %154) #5
  %155 = bitcast i8* %151 to float*
  %156 = mul i64 %149, %141
  %157 = getelementptr inbounds i8, i8* %148, i64 %156
  %158 = ptrtoint i8* %157 to i64
  %159 = and i64 %158, 63
  %160 = icmp eq i64 %159, 0
  tail call void @llvm.assume(i1 %160) #5
  %161 = bitcast i8* %157 to float*
  %162 = mul i64 %147, %149
  %163 = getelementptr inbounds i8, i8* %148, i64 %162
  %164 = ptrtoint i8* %163 to i64
  %165 = and i64 %164, 63
  %166 = icmp eq i64 %165, 0
  tail call void @llvm.assume(i1 %166) #5
  %167 = bitcast i8* %163 to float*
  %168 = lshr i64 %140, 1
  %169 = add i64 %168, %13
  %170 = load i8*, i8** %136, align 8
  %171 = load i64, i64* %137, align 8
  %172 = mul i64 %171, %169
  %173 = getelementptr inbounds i8, i8* %170, i64 %172
  %174 = ptrtoint i8* %173 to i64
  %175 = and i64 %174, 63
  %176 = icmp eq i64 %175, 0
  tail call void @llvm.assume(i1 %176) #5
  %177 = bitcast i8* %173 to float*
  %178 = getelementptr inbounds float, float* %177, i64 %19
  %179 = icmp eq i64 %139, 0
  br i1 %179, label %180, label %184

180:                                              ; preds = %345, %138
  %181 = phi i64 [ 0, %138 ], [ %123, %345 ]
  %182 = add nuw i64 %140, 1
  %183 = icmp eq i64 %182, %124
  br i1 %183, label %349, label %138

184:                                              ; preds = %138, %345
  %185 = phi i64 [ %347, %345 ], [ 0, %138 ]
  %186 = add nuw i64 %185, %120
  %187 = icmp eq i64 %186, 0
  %188 = add i64 %186, -1
  %189 = select i1 %187, i64 0, i64 %188
  %190 = add nuw i64 %186, 1
  %191 = icmp ult i64 %190, %128
  %192 = select i1 %191, i64 %190, i64 %186
  %193 = getelementptr inbounds float, float* %161, i64 %186
  %194 = bitcast float* %193 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds float, float* %161, i64 %189
  %197 = load float, float* %196, align 4
  %198 = bitcast i32 %195 to float
  %199 = fcmp olt float %197, %198
  %200 = bitcast float %197 to i32
  %201 = select i1 %199, i32 %200, i32 %195
  %202 = getelementptr inbounds float, float* %161, i64 %192
  %203 = load float, float* %202, align 4
  %204 = fcmp olt float %203, %198
  br i1 %204, label %205, label %211

205:                                              ; preds = %184
  %206 = bitcast i32 %201 to float
  %207 = fcmp olt float %203, %206
  %208 = bitcast float %203 to i32
  %209 = select i1 %207, i32 %208, i32 %201
  %210 = select i1 %207, i32 %201, i32 %208
  br label %211

211:                                              ; preds = %205, %184
  %212 = phi i32 [ %201, %184 ], [ %209, %205 ]
  %213 = phi i32 [ %195, %184 ], [ %210, %205 ]
  %214 = getelementptr inbounds float, float* %155, i64 %189
  %215 = load float, float* %214, align 4
  %216 = fcmp olt float %215, %198
  br i1 %216, label %217, label %228

217:                                              ; preds = %211
  %218 = bitcast i32 %212 to float
  %219 = fcmp olt float %215, %218
  br i1 %219, label %220, label %222

220:                                              ; preds = %217
  %221 = bitcast float %215 to i32
  br label %228

222:                                              ; preds = %217
  %223 = bitcast i32 %213 to float
  %224 = fcmp olt float %215, %223
  %225 = bitcast float %215 to i32
  %226 = select i1 %224, i32 %225, i32 %213
  %227 = select i1 %224, i32 %213, i32 %225
  br label %228

228:                                              ; preds = %222, %220, %211
  %229 = phi i32 [ %221, %220 ], [ %212, %211 ], [ %212, %222 ]
  %230 = phi i32 [ %212, %220 ], [ %213, %211 ], [ %226, %222 ]
  %231 = phi i32 [ %213, %220 ], [ %195, %211 ], [ %227, %222 ]
  %232 = getelementptr inbounds float, float* %155, i64 %186
  %233 = load float, float* %232, align 4
  %234 = bitcast i32 %231 to float
  %235 = fcmp olt float %233, %234
  br i1 %235, label %236, label %247

236:                                              ; preds = %228
  %237 = bitcast i32 %229 to float
  %238 = fcmp olt float %233, %237
  br i1 %238, label %239, label %241

239:                                              ; preds = %236
  %240 = bitcast float %233 to i32
  br label %247

241:                                              ; preds = %236
  %242 = bitcast i32 %230 to float
  %243 = fcmp olt float %233, %242
  %244 = bitcast float %233 to i32
  %245 = select i1 %243, i32 %244, i32 %230
  %246 = select i1 %243, i32 %230, i32 %244
  br label %247

247:                                              ; preds = %241, %239, %228
  %248 = phi i32 [ %240, %239 ], [ %229, %228 ], [ %229, %241 ]
  %249 = phi i32 [ %229, %239 ], [ %230, %228 ], [ %245, %241 ]
  %250 = phi i32 [ %230, %239 ], [ %231, %228 ], [ %246, %241 ]
  %251 = getelementptr inbounds float, float* %155, i64 %192
  %252 = load float, float* %251, align 4
  %253 = bitcast i32 %250 to float
  %254 = fcmp olt float %252, %253
  br i1 %254, label %255, label %266

255:                                              ; preds = %247
  %256 = bitcast i32 %248 to float
  %257 = fcmp olt float %252, %256
  br i1 %257, label %258, label %260

258:                                              ; preds = %255
  %259 = bitcast float %252 to i32
  br label %266

260:                                              ; preds = %255
  %261 = bitcast i32 %249 to float
  %262 = fcmp olt float %252, %261
  %263 = bitcast float %252 to i32
  %264 = select i1 %262, i32 %263, i32 %249
  %265 = select i1 %262, i32 %249, i32 %263
  br label %266

266:                                              ; preds = %260, %258, %247
  %267 = phi i32 [ %259, %258 ], [ %248, %247 ], [ %248, %260 ]
  %268 = phi i32 [ %248, %258 ], [ %249, %247 ], [ %264, %260 ]
  %269 = phi i32 [ %249, %258 ], [ %250, %247 ], [ %265, %260 ]
  %270 = getelementptr inbounds float, float* %167, i64 %189
  %271 = load float, float* %270, align 4
  %272 = bitcast i32 %269 to float
  %273 = fcmp olt float %271, %272
  br i1 %273, label %274, label %285

274:                                              ; preds = %266
  %275 = bitcast i32 %267 to float
  %276 = fcmp olt float %271, %275
  br i1 %276, label %277, label %279

277:                                              ; preds = %274
  %278 = bitcast float %271 to i32
  br label %285

279:                                              ; preds = %274
  %280 = bitcast i32 %268 to float
  %281 = fcmp olt float %271, %280
  %282 = bitcast float %271 to i32
  %283 = select i1 %281, i32 %282, i32 %268
  %284 = select i1 %281, i32 %268, i32 %282
  br label %285

285:                                              ; preds = %279, %277, %266
  %286 = phi i32 [ %278, %277 ], [ %267, %266 ], [ %267, %279 ]
  %287 = phi i32 [ %267, %277 ], [ %268, %266 ], [ %283, %279 ]
  %288 = phi i32 [ %268, %277 ], [ %269, %266 ], [ %284, %279 ]
  %289 = getelementptr inbounds float, float* %167, i64 %186
  %290 = load float, float* %289, align 4
  %291 = bitcast i32 %288 to float
  %292 = fcmp olt float %290, %291
  br i1 %292, label %293, label %304

293:                                              ; preds = %285
  %294 = bitcast i32 %286 to float
  %295 = fcmp olt float %290, %294
  br i1 %295, label %296, label %298

296:                                              ; preds = %293
  %297 = bitcast float %290 to i32
  br label %304

298:                                              ; preds = %293
  %299 = bitcast i32 %287 to float
  %300 = fcmp olt float %290, %299
  %301 = bitcast float %290 to i32
  %302 = select i1 %300, i32 %301, i32 %287
  %303 = select i1 %300, i32 %287, i32 %301
  br label %304

304:                                              ; preds = %298, %296, %285
  %305 = phi i32 [ %297, %296 ], [ %286, %285 ], [ %286, %298 ]
  %306 = phi i32 [ %286, %296 ], [ %287, %285 ], [ %302, %298 ]
  %307 = phi i32 [ %287, %296 ], [ %288, %285 ], [ %303, %298 ]
  %308 = getelementptr inbounds float, float* %167, i64 %192
  %309 = load float, float* %308, align 4
  %310 = bitcast i32 %307 to float
  %311 = fcmp olt float %309, %310
  br i1 %311, label %312, label %323

312:                                              ; preds = %304
  %313 = bitcast i32 %305 to float
  %314 = fcmp olt float %309, %313
  br i1 %314, label %315, label %317

315:                                              ; preds = %312
  %316 = bitcast float %309 to i32
  br label %323

317:                                              ; preds = %312
  %318 = bitcast i32 %306 to float
  %319 = fcmp olt float %309, %318
  %320 = bitcast float %309 to i32
  %321 = select i1 %319, i32 %320, i32 %306
  %322 = select i1 %319, i32 %306, i32 %320
  br label %323

323:                                              ; preds = %317, %315, %304
  %324 = phi i32 [ %316, %315 ], [ %305, %304 ], [ %305, %317 ]
  %325 = phi i32 [ %305, %315 ], [ %306, %304 ], [ %321, %317 ]
  %326 = phi i32 [ %306, %315 ], [ %307, %304 ], [ %322, %317 ]
  %327 = fmul float %198, 0x3F7E4F2620000000
  %328 = bitcast i32 %324 to float
  %329 = fmul float %328, 0x3FC1F66CA0000000
  %330 = fadd float %327, %329
  %331 = bitcast i32 %325 to float
  %332 = fmul float %331, 0x3FA5204D60000000
  %333 = fadd float %332, %330
  %334 = bitcast i32 %326 to float
  %335 = fmul float %334, 0x3FAF3C1B80000000
  %336 = fadd float %335, %333
  %337 = or i64 %185, %140
  %338 = and i64 %337, 1
  %339 = icmp eq i64 %338, 0
  %340 = lshr i64 %185, 1
  %341 = getelementptr inbounds float, float* %178, i64 %340
  br i1 %339, label %345, label %342

342:                                              ; preds = %323
  %343 = load float, float* %341, align 4
  %344 = fadd float %336, %343
  br label %345

345:                                              ; preds = %342, %323
  %346 = phi float [ %344, %342 ], [ %336, %323 ]
  store float %346, float* %341, align 4
  %347 = add nuw i64 %185, 1
  %348 = icmp ult i64 %347, %123
  br i1 %348, label %184, label %180

349:                                              ; preds = %180, %118
  %350 = icmp eq i64 %24, 0
  br i1 %350, label %749, label %351

351:                                              ; preds = %349
  %352 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %353 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 4
  %354 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %37, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %355 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %37, i64 0, i32 0, i32 4
  %356 = shl nsw i64 %10, 5
  %357 = mul i64 %9, %12
  %358 = shl i64 %357, 5
  %359 = sub i64 %356, %358
  %360 = icmp ugt i64 %23, 1
  %361 = select i1 %360, i64 %23, i64 1
  %362 = icmp ult i64 %361, 4
  %363 = icmp ugt i64 %23, 1
  %364 = select i1 %363, i64 %23, i64 1
  %365 = shl i64 %364, 2
  %366 = add i64 %356, %365
  %367 = sub i64 %366, %358
  %368 = and i64 %361, -4
  %369 = add i64 %368, -4
  %370 = lshr exact i64 %369, 2
  %371 = add nuw nsw i64 %370, 1
  %372 = and i64 %371, 1
  %373 = icmp eq i64 %369, 0
  %374 = sub nuw nsw i64 %371, %372
  %375 = icmp eq i64 %372, 0
  %376 = icmp eq i64 %361, %368
  br label %1049

377:                                              ; preds = %747, %90
  %378 = phi i64 [ %58, %90 ], [ %379, %747 ]
  %379 = add nuw i64 %378, 1
  %380 = icmp ult i64 %379, %43
  %381 = select i1 %380, i64 %379, i64 %378
  %382 = icmp eq i64 %378, 0
  %383 = add i64 %378, -1
  %384 = select i1 %382, i64 0, i64 %383
  %385 = load i64, i64* %91, align 8
  %386 = mul i64 %385, %378
  %387 = load i8*, i8** %92, align 8
  %388 = ptrtoint i8* %387 to i64
  %389 = and i64 %388, 63
  %390 = icmp eq i64 %389, 0
  tail call void @llvm.assume(i1 %390) #5
  %391 = getelementptr inbounds i8, i8* %387, i64 %386
  %392 = ptrtoint i8* %391 to i64
  %393 = and i64 %392, 63
  %394 = icmp eq i64 %393, 0
  tail call void @llvm.assume(i1 %394) #5
  %395 = bitcast i8* %391 to float*
  %396 = mul i64 %384, %385
  %397 = getelementptr inbounds i8, i8* %387, i64 %396
  %398 = ptrtoint i8* %397 to i64
  %399 = and i64 %398, 63
  %400 = icmp eq i64 %399, 0
  tail call void @llvm.assume(i1 %400) #5
  %401 = mul i64 %381, %385
  %402 = getelementptr inbounds i8, i8* %387, i64 %401
  %403 = ptrtoint i8* %402 to i64
  %404 = and i64 %403, 63
  %405 = icmp eq i64 %404, 0
  tail call void @llvm.assume(i1 %405) #5
  %406 = load i8*, i8** %93, align 8
  %407 = ptrtoint i8* %406 to i64
  %408 = and i64 %407, 63
  %409 = icmp eq i64 %408, 0
  tail call void @llvm.assume(i1 %409) #5
  %410 = getelementptr inbounds i8, i8* %406, i64 %386
  %411 = ptrtoint i8* %410 to i64
  %412 = and i64 %411, 63
  %413 = icmp eq i64 %412, 0
  tail call void @llvm.assume(i1 %413) #5
  %414 = bitcast i8* %410 to float*
  %415 = getelementptr inbounds i8, i8* %406, i64 %396
  %416 = ptrtoint i8* %415 to i64
  %417 = and i64 %416, 63
  %418 = icmp eq i64 %417, 0
  tail call void @llvm.assume(i1 %418) #5
  %419 = getelementptr inbounds i8, i8* %406, i64 %401
  %420 = ptrtoint i8* %419 to i64
  %421 = and i64 %420, 63
  %422 = icmp eq i64 %421, 0
  tail call void @llvm.assume(i1 %422) #5
  %423 = load i8*, i8** %94, align 8
  %424 = load i64, i64* %95, align 8
  %425 = mul i64 %424, %62
  %426 = getelementptr inbounds i8, i8* %423, i64 %425
  %427 = ptrtoint i8* %426 to i64
  %428 = and i64 %427, 63
  %429 = icmp eq i64 %428, 0
  tail call void @llvm.assume(i1 %429) #5
  %430 = bitcast i8* %402 to float*
  %431 = bitcast i8* %397 to float*
  %432 = bitcast i8* %419 to float*
  %433 = bitcast i8* %415 to float*
  %434 = bitcast i8* %426 to float*
  br i1 %50, label %435, label %483

435:                                              ; preds = %377
  %436 = load float, float* %430, align 64
  %437 = load float, float* %431, align 64
  %438 = fadd float %436, %437
  %439 = load float, float* %395, align 64
  %440 = fadd float %438, %439
  %441 = getelementptr inbounds float, float* %395, i64 %97
  %442 = load float, float* %441, align 4
  %443 = fadd float %440, %442
  %444 = fmul float %443, 2.500000e-01
  %445 = fadd float %439, 0x3F9374BC60000000
  %446 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %445, i32 0
  %447 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %446, <4 x float> zeroinitializer, <4 x float> %446) #5
  %448 = extractelement <4 x float> %447, i32 0
  %449 = fmul float %448, %448
  %450 = fmul float %449, 0x405DE18460000000
  %451 = fmul float %448, 0x406395E800000000
  %452 = fmul float %451, %449
  %453 = fadd float %452, 0x4013D09F20000000
  %454 = fdiv float %453, %450
  %455 = fsub float %439, %444
  %456 = fmul float %455, %454
  %457 = fmul float %456, %456
  %458 = load float, float* %432, align 64
  %459 = load float, float* %433, align 64
  %460 = fadd float %458, %459
  %461 = load float, float* %414, align 64
  %462 = fadd float %460, %461
  %463 = getelementptr inbounds float, float* %414, i64 %97
  %464 = load float, float* %463, align 4
  %465 = fadd float %462, %464
  %466 = fmul float %465, 2.500000e-01
  %467 = fsub float %461, %466
  %468 = fmul float %454, %467
  %469 = fmul float %468, %468
  %470 = fmul float %469, 0x403E7E36A0000000
  %471 = fadd float %457, %470
  %472 = fmul float %471, 1.454330e+05
  %473 = fadd float %472, 0x403A7B41A0000000
  %474 = tail call float @llvm.sqrt.f32(float %473) #5
  %475 = fmul float %474, 2.500000e-01
  %476 = and i64 %378, 3
  %477 = icmp eq i64 %476, 0
  br i1 %477, label %481, label %478

478:                                              ; preds = %435
  %479 = load float, float* %434, align 64
  %480 = fadd float %475, %479
  br label %481

481:                                              ; preds = %478, %435
  %482 = phi float [ %480, %478 ], [ %475, %435 ]
  store float %482, float* %434, align 64
  br label %483

483:                                              ; preds = %481, %377
  %484 = phi i64 [ 1, %481 ], [ %51, %377 ]
  %485 = add i64 %484, 5
  %486 = icmp ult i64 %485, %55
  br i1 %486, label %489, label %487

487:                                              ; preds = %483
  %488 = and i64 %378, 3
  br label %501

489:                                              ; preds = %483
  %490 = getelementptr inbounds i8, i8* %391, i64 4
  %491 = bitcast i8* %490 to float*
  %492 = getelementptr inbounds i8, i8* %391, i64 -4
  %493 = bitcast i8* %492 to float*
  %494 = getelementptr inbounds i8, i8* %410, i64 4
  %495 = bitcast i8* %494 to float*
  %496 = getelementptr inbounds i8, i8* %410, i64 -4
  %497 = bitcast i8* %496 to float*
  %498 = and i64 %378, 3
  %499 = icmp eq i64 %498, 0
  %500 = getelementptr inbounds float, float* %434, i64 %98
  br label %507

501:                                              ; preds = %572, %487
  %502 = phi i64 [ %488, %487 ], [ %498, %572 ]
  %503 = phi i64 [ %484, %487 ], [ %576, %572 ]
  %504 = icmp ult i64 %503, %55
  br i1 %504, label %505, label %645

505:                                              ; preds = %501
  %506 = icmp eq i64 %502, 0
  br label %579

507:                                              ; preds = %572, %489
  %508 = phi i64 [ %484, %489 ], [ %576, %572 ]
  %509 = getelementptr inbounds float, float* %395, i64 %508
  %510 = bitcast float* %509 to <4 x float>*
  %511 = load <4 x float>, <4 x float>* %510, align 4, !alias.scope !250
  %512 = getelementptr inbounds float, float* %491, i64 %508
  %513 = bitcast float* %512 to <4 x float>*
  %514 = load <4 x float>, <4 x float>* %513, align 4, !alias.scope !253
  %515 = getelementptr inbounds float, float* %493, i64 %508
  %516 = bitcast float* %515 to <4 x float>*
  %517 = load <4 x float>, <4 x float>* %516, align 4, !alias.scope !256
  %518 = getelementptr inbounds float, float* %430, i64 %508
  %519 = bitcast float* %518 to <4 x float>*
  %520 = load <4 x float>, <4 x float>* %519, align 4, !alias.scope !259
  %521 = getelementptr inbounds float, float* %431, i64 %508
  %522 = bitcast float* %521 to <4 x float>*
  %523 = load <4 x float>, <4 x float>* %522, align 4, !alias.scope !262
  %524 = fadd <4 x float> %514, %517
  %525 = fadd <4 x float> %524, %520
  %526 = fadd <4 x float> %525, %523
  %527 = fmul <4 x float> %526, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %528 = fadd <4 x float> %511, <float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000, float 0x3F9374BC60000000>
  %529 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %528, <4 x float> zeroinitializer, <4 x float> %528) #5
  %530 = fmul <4 x float> %529, %529
  %531 = fmul <4 x float> %530, <float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000>
  %532 = fmul <4 x float> %529, <float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>
  %533 = fmul <4 x float> %532, %530
  %534 = fadd <4 x float> %533, <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>
  %535 = fdiv <4 x float> %534, %531
  %536 = fsub <4 x float> %511, %527
  %537 = fmul <4 x float> %536, %535
  %538 = fmul <4 x float> %537, %537
  %539 = getelementptr inbounds float, float* %414, i64 %508
  %540 = bitcast float* %539 to <4 x float>*
  %541 = load <4 x float>, <4 x float>* %540, align 4, !alias.scope !265
  %542 = getelementptr inbounds float, float* %495, i64 %508
  %543 = bitcast float* %542 to <4 x float>*
  %544 = load <4 x float>, <4 x float>* %543, align 4, !alias.scope !268
  %545 = getelementptr inbounds float, float* %497, i64 %508
  %546 = bitcast float* %545 to <4 x float>*
  %547 = load <4 x float>, <4 x float>* %546, align 4, !alias.scope !271
  %548 = getelementptr inbounds float, float* %432, i64 %508
  %549 = bitcast float* %548 to <4 x float>*
  %550 = load <4 x float>, <4 x float>* %549, align 4, !alias.scope !274
  %551 = getelementptr inbounds float, float* %433, i64 %508
  %552 = bitcast float* %551 to <4 x float>*
  %553 = load <4 x float>, <4 x float>* %552, align 4, !alias.scope !277
  %554 = fadd <4 x float> %544, %547
  %555 = fadd <4 x float> %554, %550
  %556 = fadd <4 x float> %555, %553
  %557 = fmul <4 x float> %556, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %558 = fsub <4 x float> %541, %557
  %559 = fmul <4 x float> %535, %558
  %560 = fmul <4 x float> %559, %559
  %561 = fmul <4 x float> %560, <float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000, float 0x403E7E36A0000000>
  %562 = fadd <4 x float> %538, %561
  %563 = fmul <4 x float> %562, <float 1.454330e+05, float 1.454330e+05, float 1.454330e+05, float 1.454330e+05>
  %564 = fadd <4 x float> %563, <float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000, float 0x403A7B41A0000000>
  %565 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %564) #5
  %566 = fmul <4 x float> %565, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  br i1 %499, label %572, label %567

567:                                              ; preds = %507
  %568 = getelementptr inbounds float, float* %500, i64 %508
  %569 = bitcast float* %568 to <4 x float>*
  %570 = load <4 x float>, <4 x float>* %569, align 4, !alias.scope !280
  %571 = fadd <4 x float> %566, %570
  br label %572

572:                                              ; preds = %507, %567
  %573 = phi <4 x float> [ %571, %567 ], [ %566, %507 ]
  %574 = getelementptr inbounds float, float* %500, i64 %508
  %575 = bitcast float* %574 to <4 x float>*
  store <4 x float> %573, <4 x float>* %575, align 4, !alias.scope !283
  %576 = add i64 %508, 4
  %577 = add i64 %508, 9
  %578 = icmp ult i64 %577, %55
  br i1 %578, label %507, label %501

579:                                              ; preds = %642, %505
  %580 = phi i64 [ %503, %505 ], [ %581, %642 ]
  %581 = add nuw i64 %580, 1
  %582 = icmp ult i64 %581, %40
  %583 = select i1 %582, i64 %581, i64 %580
  %584 = icmp eq i64 %580, 0
  %585 = add i64 %580, -1
  %586 = select i1 %584, i64 0, i64 %585
  %587 = getelementptr inbounds float, float* %430, i64 %580
  %588 = load float, float* %587, align 4
  %589 = getelementptr inbounds float, float* %431, i64 %580
  %590 = load float, float* %589, align 4
  %591 = fadd float %588, %590
  %592 = getelementptr inbounds float, float* %395, i64 %586
  %593 = load float, float* %592, align 4
  %594 = fadd float %591, %593
  %595 = getelementptr inbounds float, float* %395, i64 %583
  %596 = load float, float* %595, align 4
  %597 = fadd float %594, %596
  %598 = fmul float %597, 2.500000e-01
  %599 = getelementptr inbounds float, float* %395, i64 %580
  %600 = load float, float* %599, align 4
  %601 = fadd float %600, 0x3F9374BC60000000
  %602 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %601, i32 0
  %603 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %602, <4 x float> zeroinitializer, <4 x float> %602) #5
  %604 = extractelement <4 x float> %603, i32 0
  %605 = fmul float %604, %604
  %606 = fmul float %605, 0x405DE18460000000
  %607 = fmul float %604, 0x406395E800000000
  %608 = fmul float %607, %605
  %609 = fadd float %608, 0x4013D09F20000000
  %610 = fdiv float %609, %606
  %611 = fsub float %600, %598
  %612 = fmul float %611, %610
  %613 = fmul float %612, %612
  %614 = getelementptr inbounds float, float* %432, i64 %580
  %615 = load float, float* %614, align 4
  %616 = getelementptr inbounds float, float* %433, i64 %580
  %617 = load float, float* %616, align 4
  %618 = fadd float %615, %617
  %619 = getelementptr inbounds float, float* %414, i64 %586
  %620 = load float, float* %619, align 4
  %621 = fadd float %618, %620
  %622 = getelementptr inbounds float, float* %414, i64 %583
  %623 = load float, float* %622, align 4
  %624 = fadd float %621, %623
  %625 = fmul float %624, 2.500000e-01
  %626 = getelementptr inbounds float, float* %414, i64 %580
  %627 = load float, float* %626, align 4
  %628 = fsub float %627, %625
  %629 = fmul float %610, %628
  %630 = fmul float %629, %629
  %631 = fmul float %630, 0x403E7E36A0000000
  %632 = fadd float %613, %631
  %633 = fmul float %632, 1.454330e+05
  %634 = fadd float %633, 0x403A7B41A0000000
  %635 = tail call float @llvm.sqrt.f32(float %634) #5
  %636 = fmul float %635, 2.500000e-01
  %637 = sub i64 %580, %52
  %638 = getelementptr inbounds float, float* %434, i64 %637
  br i1 %506, label %642, label %639

639:                                              ; preds = %579
  %640 = load float, float* %638, align 4
  %641 = fadd float %636, %640
  br label %642

642:                                              ; preds = %639, %579
  %643 = phi float [ %641, %639 ], [ %636, %579 ]
  store float %643, float* %638, align 4
  %644 = icmp eq i64 %581, %55
  br i1 %644, label %645, label %579

645:                                              ; preds = %642, %501
  %646 = icmp eq i64 %502, 3
  br i1 %646, label %647, label %747

647:                                              ; preds = %645
  %648 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %63, align 8
  %649 = sub nuw i64 %378, %58
  %650 = lshr i64 %649, 2
  %651 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %648, i64 %62, i32 0, i32 5, i32 0, i32 0, i32 0
  %652 = load i8*, i8** %651, align 8
  %653 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %648, i64 %62, i32 0, i32 4
  %654 = load i64, i64* %653, align 8
  %655 = mul i64 %654, %650
  %656 = getelementptr inbounds i8, i8* %652, i64 %655
  %657 = ptrtoint i8* %656 to i64
  %658 = and i64 %657, 63
  %659 = icmp eq i64 %658, 0
  tail call void @llvm.assume(i1 %659) #5
  %660 = bitcast i8* %656 to float*
  br i1 %99, label %747, label %661

661:                                              ; preds = %647
  br i1 %111, label %724, label %662

662:                                              ; preds = %661
  %663 = getelementptr i8, i8* %652, i64 %105
  %664 = getelementptr i8, i8* %663, i64 %655
  %665 = getelementptr i8, i8* %423, i64 %106
  %666 = getelementptr i8, i8* %665, i64 %425
  %667 = icmp ult i8* %656, %666
  %668 = icmp ult i8* %426, %664
  %669 = and i1 %667, %668
  br i1 %669, label %724, label %670

670:                                              ; preds = %662
  br i1 %114, label %706, label %671

671:                                              ; preds = %670, %671
  %672 = phi i64 [ %703, %671 ], [ 0, %670 ]
  %673 = phi i64 [ %704, %671 ], [ %115, %670 ]
  %674 = shl i64 %672, 2
  %675 = getelementptr inbounds float, float* %434, i64 %674
  %676 = bitcast float* %675 to <16 x float>*
  %677 = load <16 x float>, <16 x float>* %676, align 64
  %678 = shufflevector <16 x float> %677, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %679 = shufflevector <16 x float> %677, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %680 = shufflevector <16 x float> %677, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %681 = shufflevector <16 x float> %677, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %682 = fadd <4 x float> %678, %679
  %683 = fadd <4 x float> %682, %680
  %684 = fadd <4 x float> %683, %681
  %685 = fmul <4 x float> %684, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %686 = getelementptr inbounds float, float* %660, i64 %672
  %687 = bitcast float* %686 to <4 x float>*
  store <4 x float> %685, <4 x float>* %687, align 32, !alias.scope !286, !noalias !289
  %688 = or i64 %672, 4
  %689 = shl i64 %688, 2
  %690 = getelementptr inbounds float, float* %434, i64 %689
  %691 = bitcast float* %690 to <16 x float>*
  %692 = load <16 x float>, <16 x float>* %691, align 64
  %693 = shufflevector <16 x float> %692, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %694 = shufflevector <16 x float> %692, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %695 = shufflevector <16 x float> %692, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %696 = shufflevector <16 x float> %692, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %697 = fadd <4 x float> %693, %694
  %698 = fadd <4 x float> %697, %695
  %699 = fadd <4 x float> %698, %696
  %700 = fmul <4 x float> %699, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %701 = getelementptr inbounds float, float* %660, i64 %688
  %702 = bitcast float* %701 to <4 x float>*
  store <4 x float> %700, <4 x float>* %702, align 16, !alias.scope !286, !noalias !289
  %703 = add i64 %672, 8
  %704 = add i64 %673, -2
  %705 = icmp eq i64 %704, 0
  br i1 %705, label %706, label %671, !llvm.loop !291

706:                                              ; preds = %671, %670
  %707 = phi i64 [ 0, %670 ], [ %703, %671 ]
  br i1 %116, label %723, label %708

708:                                              ; preds = %706
  %709 = shl i64 %707, 2
  %710 = getelementptr inbounds float, float* %434, i64 %709
  %711 = bitcast float* %710 to <16 x float>*
  %712 = load <16 x float>, <16 x float>* %711, align 64
  %713 = shufflevector <16 x float> %712, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %714 = shufflevector <16 x float> %712, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %715 = shufflevector <16 x float> %712, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %716 = shufflevector <16 x float> %712, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %717 = fadd <4 x float> %713, %714
  %718 = fadd <4 x float> %717, %715
  %719 = fadd <4 x float> %718, %716
  %720 = fmul <4 x float> %719, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %721 = getelementptr inbounds float, float* %660, i64 %707
  %722 = bitcast float* %721 to <4 x float>*
  store <4 x float> %720, <4 x float>* %722, align 16, !alias.scope !286, !noalias !289
  br label %723

723:                                              ; preds = %706, %708
  br i1 %117, label %747, label %724

724:                                              ; preds = %723, %662, %661
  %725 = phi i64 [ 0, %662 ], [ 0, %661 ], [ %112, %723 ]
  br label %726

726:                                              ; preds = %724, %726
  %727 = phi i64 [ %745, %726 ], [ %725, %724 ]
  %728 = shl i64 %727, 2
  %729 = getelementptr inbounds float, float* %434, i64 %728
  %730 = load float, float* %729, align 16
  %731 = or i64 %728, 1
  %732 = getelementptr inbounds float, float* %434, i64 %731
  %733 = load float, float* %732, align 4
  %734 = fadd float %730, %733
  %735 = or i64 %728, 2
  %736 = getelementptr inbounds float, float* %434, i64 %735
  %737 = load float, float* %736, align 8
  %738 = fadd float %734, %737
  %739 = or i64 %728, 3
  %740 = getelementptr inbounds float, float* %434, i64 %739
  %741 = load float, float* %740, align 4
  %742 = fadd float %738, %741
  %743 = fmul float %742, 2.500000e-01
  %744 = getelementptr inbounds float, float* %660, i64 %727
  store float %743, float* %744, align 4
  %745 = add nuw nsw i64 %727, 1
  %746 = icmp ult i64 %745, %66
  br i1 %746, label %726, label %747, !llvm.loop !292

747:                                              ; preds = %726, %723, %647, %645
  %748 = icmp eq i64 %379, %61
  br i1 %748, label %118, label %377

749:                                              ; preds = %1121, %349
  %750 = load i32, i32* %38, align 8
  %751 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 0
  %752 = load i32, i32* %751, align 8
  %753 = icmp eq i32 %750, %752
  br i1 %753, label %754, label %759

754:                                              ; preds = %749
  %755 = load i32, i32* %41, align 4
  %756 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 1
  %757 = load i32, i32* %756, align 4
  %758 = icmp eq i32 %755, %757
  br i1 %758, label %762, label %759

759:                                              ; preds = %754, %749
  %760 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 252, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0)) #5
  %761 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

762:                                              ; preds = %754
  %763 = zext i32 %750 to i64
  %764 = add nuw nsw i64 %763, 7
  %765 = lshr i64 %764, 3
  %766 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 0
  %767 = load i32, i32* %766, align 8
  %768 = zext i32 %767 to i64
  %769 = icmp eq i64 %765, %768
  br i1 %769, label %773, label %770

770:                                              ; preds = %762
  %771 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 253, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.18, i64 0, i64 0)) #5
  %772 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

773:                                              ; preds = %762
  %774 = zext i32 %755 to i64
  %775 = add nuw nsw i64 %774, 7
  %776 = lshr i64 %775, 3
  %777 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 1
  %778 = load i32, i32* %777, align 4
  %779 = zext i32 %778 to i64
  %780 = icmp eq i64 %776, %779
  br i1 %780, label %784, label %781

781:                                              ; preds = %773
  %782 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 254, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.19, i64 0, i64 0)) #5
  %783 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

784:                                              ; preds = %773
  %785 = fmul float %32, 5.000000e-01
  %786 = fcmp ult float %29, 7.000000e+00
  br i1 %786, label %793, label %787

787:                                              ; preds = %784
  %788 = fadd float %29, -7.000000e+00
  %789 = fdiv float %788, 7.000000e+00
  %790 = fsub float 1.000000e+00, %789
  %791 = fcmp olt float %790, 0.000000e+00
  br i1 %791, label %792, label %793

792:                                              ; preds = %787
  br label %793

793:                                              ; preds = %792, %787, %784
  %794 = phi float [ 0.000000e+00, %792 ], [ %790, %787 ], [ 1.000000e+00, %784 ]
  %795 = fmul float %32, %794
  %796 = fsub float 1.000000e+00, %794
  %797 = fmul float %785, %796
  %798 = icmp ugt i64 %18, %13
  br i1 %798, label %799, label %1134

799:                                              ; preds = %793
  %800 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %801 = getelementptr inbounds %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SSE4::(anonymous namespace)::AdaptiveQuantizationImpl"* %26, i64 0, i32 1, i32 0, i32 4
  %802 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %803 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 4
  %804 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %805 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 4
  %806 = icmp ugt i64 %22, %19
  br label %807

807:                                              ; preds = %818, %799
  %808 = phi i64 [ %13, %799 ], [ %819, %818 ]
  %809 = shl i64 %808, 3
  %810 = load i8*, i8** %800, align 8
  %811 = load i64, i64* %801, align 8
  %812 = mul i64 %811, %808
  %813 = getelementptr inbounds i8, i8* %810, i64 %812
  %814 = ptrtoint i8* %813 to i64
  %815 = and i64 %814, 63
  %816 = icmp eq i64 %815, 0
  tail call void @llvm.assume(i1 %816) #5
  %817 = bitcast i8* %813 to float*
  br i1 %806, label %821, label %818

818:                                              ; preds = %965, %807
  %819 = add nuw i64 %808, 1
  %820 = icmp ult i64 %819, %18
  br i1 %820, label %807, label %1134

821:                                              ; preds = %807, %965
  %822 = phi i64 [ %1047, %965 ], [ %19, %807 ]
  %823 = shl i64 %822, 3
  %824 = getelementptr inbounds float, float* %817, i64 %822
  %825 = load float, float* %824, align 4
  %826 = insertelement <4 x float> undef, float %825, i32 0
  %827 = fmul <4 x float> %826, <float 0x3FE7EC5FC0000000, float undef, float undef, float undef>
  %828 = load i8*, i8** %802, align 8
  %829 = load i64, i64* %803, align 8
  br label %830

830:                                              ; preds = %850, %821
  %831 = phi i64 [ 0, %821 ], [ %889, %850 ]
  %832 = phi <4 x float> [ zeroinitializer, %821 ], [ %888, %850 ]
  %833 = add i64 %831, %809
  %834 = mul i64 %833, %829
  %835 = getelementptr inbounds i8, i8* %828, i64 %834
  %836 = ptrtoint i8* %835 to i64
  %837 = and i64 %836, 63
  %838 = icmp eq i64 %837, 0
  tail call void @llvm.assume(i1 %838) #5
  %839 = bitcast i8* %835 to float*
  %840 = getelementptr inbounds float, float* %839, i64 %823
  %841 = icmp eq i64 %831, 7
  br i1 %841, label %850, label %842

842:                                              ; preds = %830
  %843 = add i64 %833, 1
  %844 = mul i64 %843, %829
  %845 = getelementptr inbounds i8, i8* %828, i64 %844
  %846 = ptrtoint i8* %845 to i64
  %847 = and i64 %846, 63
  %848 = icmp eq i64 %847, 0
  tail call void @llvm.assume(i1 %848) #5
  %849 = bitcast i8* %845 to float*
  br label %850

850:                                              ; preds = %842, %830
  %851 = phi float* [ %849, %842 ], [ %839, %830 ]
  %852 = getelementptr inbounds float, float* %851, i64 %823
  %853 = bitcast float* %840 to <4 x float>*
  %854 = load <4 x float>, <4 x float>* %853, align 32, !alias.scope !293
  %855 = getelementptr inbounds float, float* %840, i64 1
  %856 = bitcast float* %855 to <4 x float>*
  %857 = load <4 x float>, <4 x float>* %856, align 4, !alias.scope !296
  %858 = fsub <4 x float> %854, %857
  %859 = bitcast <4 x float> %858 to <4 x i32>
  %860 = and <4 x i32> %859, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %861 = bitcast <4 x i32> %860 to <4 x float>
  %862 = fadd <4 x float> %832, %861
  %863 = bitcast float* %852 to <4 x float>*
  %864 = load <4 x float>, <4 x float>* %863, align 16, !alias.scope !299
  %865 = fsub <4 x float> %854, %864
  %866 = bitcast <4 x float> %865 to <4 x i32>
  %867 = and <4 x i32> %866, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %868 = bitcast <4 x i32> %867 to <4 x float>
  %869 = fadd <4 x float> %862, %868
  %870 = getelementptr inbounds float, float* %840, i64 4
  %871 = bitcast float* %870 to <4 x float>*
  %872 = load <4 x float>, <4 x float>* %871, align 16, !alias.scope !293
  %873 = getelementptr inbounds float, float* %870, i64 1
  %874 = bitcast float* %873 to <4 x float>*
  %875 = load <4 x float>, <4 x float>* %874, align 4, !alias.scope !296
  %876 = fsub <4 x float> %872, %875
  %877 = bitcast <4 x float> %876 to <4 x i32>
  %878 = and <4 x i32> %877, <i32 2147483647, i32 2147483647, i32 2147483647, i32 0>
  %879 = bitcast <4 x i32> %878 to <4 x float>
  %880 = fadd <4 x float> %869, %879
  %881 = getelementptr inbounds float, float* %852, i64 4
  %882 = bitcast float* %881 to <4 x float>*
  %883 = load <4 x float>, <4 x float>* %882, align 16, !alias.scope !299
  %884 = fsub <4 x float> %872, %883
  %885 = bitcast <4 x float> %884 to <4 x i32>
  %886 = and <4 x i32> %885, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %887 = bitcast <4 x i32> %886 to <4 x float>
  %888 = fadd <4 x float> %880, %887
  %889 = add nuw nsw i64 %831, 1
  %890 = icmp eq i64 %889, 8
  br i1 %890, label %891, label %830

891:                                              ; preds = %850
  %892 = shufflevector <4 x float> %888, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %893 = load i8*, i8** %804, align 8
  %894 = load i64, i64* %805, align 8
  br label %895

895:                                              ; preds = %895, %891
  %896 = phi i64 [ 0, %891 ], [ %963, %895 ]
  %897 = phi <4 x float> [ zeroinitializer, %891 ], [ %962, %895 ]
  %898 = add i64 %896, %809
  %899 = mul i64 %898, %894
  %900 = getelementptr inbounds i8, i8* %893, i64 %899
  %901 = ptrtoint i8* %900 to i64
  %902 = and i64 %901, 63
  %903 = icmp eq i64 %902, 0
  tail call void @llvm.assume(i1 %903) #5
  %904 = bitcast i8* %900 to float*
  %905 = mul i64 %898, %829
  %906 = getelementptr inbounds i8, i8* %828, i64 %905
  %907 = ptrtoint i8* %906 to i64
  %908 = and i64 %907, 63
  %909 = icmp eq i64 %908, 0
  tail call void @llvm.assume(i1 %909) #5
  %910 = bitcast i8* %906 to float*
  %911 = getelementptr inbounds float, float* %910, i64 %823
  %912 = getelementptr inbounds float, float* %904, i64 %823
  %913 = bitcast float* %911 to <4 x float>*
  %914 = load <4 x float>, <4 x float>* %913, align 32, !alias.scope !302
  %915 = fadd <4 x float> %914, <float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000>
  %916 = bitcast float* %912 to <4 x float>*
  %917 = load <4 x float>, <4 x float>* %916, align 32, !alias.scope !305
  %918 = fsub <4 x float> %915, %917
  %919 = fadd <4 x float> %915, %917
  %920 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %918, <4 x float> zeroinitializer, <4 x float> %918) #5
  %921 = fmul <4 x float> %920, %920
  %922 = fmul <4 x float> %921, <float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000>
  %923 = fmul <4 x float> %920, <float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>
  %924 = fmul <4 x float> %923, %921
  %925 = fadd <4 x float> %924, <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>
  %926 = fdiv <4 x float> %922, %925
  %927 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %919, <4 x float> zeroinitializer, <4 x float> %919) #5
  %928 = fmul <4 x float> %927, %927
  %929 = fmul <4 x float> %928, <float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000>
  %930 = fmul <4 x float> %927, <float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>
  %931 = fmul <4 x float> %930, %928
  %932 = fadd <4 x float> %931, <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>
  %933 = fdiv <4 x float> %929, %932
  %934 = fadd <4 x float> %926, %933
  %935 = fmul <4 x float> %934, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %936 = fadd <4 x float> %897, %935
  %937 = getelementptr inbounds float, float* %911, i64 4
  %938 = bitcast float* %937 to <4 x float>*
  %939 = load <4 x float>, <4 x float>* %938, align 16, !alias.scope !302
  %940 = fadd <4 x float> %939, <float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000>
  %941 = getelementptr inbounds float, float* %912, i64 4
  %942 = bitcast float* %941 to <4 x float>*
  %943 = load <4 x float>, <4 x float>* %942, align 16, !alias.scope !305
  %944 = fsub <4 x float> %940, %943
  %945 = fadd <4 x float> %940, %943
  %946 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %944, <4 x float> zeroinitializer, <4 x float> %944) #5
  %947 = fmul <4 x float> %946, %946
  %948 = fmul <4 x float> %947, <float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000>
  %949 = fmul <4 x float> %946, <float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>
  %950 = fmul <4 x float> %949, %947
  %951 = fadd <4 x float> %950, <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>
  %952 = fdiv <4 x float> %948, %951
  %953 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %945, <4 x float> zeroinitializer, <4 x float> %945) #5
  %954 = fmul <4 x float> %953, %953
  %955 = fmul <4 x float> %954, <float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000, float 0x405DE18460000000>
  %956 = fmul <4 x float> %953, <float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000, float 0x406395E800000000>
  %957 = fmul <4 x float> %956, %954
  %958 = fadd <4 x float> %957, <float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000, float 0x4013D09F20000000>
  %959 = fdiv <4 x float> %955, %958
  %960 = fadd <4 x float> %952, %959
  %961 = fmul <4 x float> %960, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %962 = fadd <4 x float> %936, %961
  %963 = add nuw nsw i64 %896, 1
  %964 = icmp eq i64 %963, 8
  br i1 %964, label %965, label %895

965:                                              ; preds = %895
  %966 = shufflevector <4 x float> %827, <4 x float> undef, <4 x i32> zeroinitializer
  %967 = fadd <4 x float> %888, %892
  %968 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %966, <4 x float> <float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000>) #5
  %969 = shufflevector <4 x float> %967, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %970 = fmul <4 x float> %968, %968
  %971 = fadd <4 x float> %967, %969
  %972 = shufflevector <4 x float> %962, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %973 = fadd <4 x float> %962, %972
  %974 = shufflevector <4 x float> %973, <4 x float> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %975 = fadd <4 x float> %973, %974
  %976 = fmul <4 x float> %975, <float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02>
  %977 = bitcast <4 x float> %976 to <4 x i32>
  %978 = add <4 x i32> %977, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %979 = and <4 x i32> %978, <i32 -8388608, i32 undef, i32 undef, i32 undef>
  %980 = sub <4 x i32> %977, %979
  %981 = bitcast <4 x i32> %980 to <4 x float>
  fence acq_rel
  %982 = extractelement <4 x float> %981, i32 0
  %983 = fadd float %982, -1.000000e+00
  %984 = fmul float %983, 0x3FE7C238E0000000
  %985 = fadd float %984, 0x3FF6DC0560000000
  %986 = fmul float %983, %985
  %987 = fadd float %986, 0xBEBF0B5600000000
  %988 = fmul float %983, 0x3FC648B180000000
  %989 = fadd float %988, 0x3FF0279DA0000000
  %990 = fmul float %983, %989
  %991 = fadd float %990, 0x3FEFB0C4A0000000
  %992 = fdiv float %987, %991
  %993 = extractelement <4 x i32> %978, i32 0
  %994 = ashr i32 %993, 23
  %995 = sitofp i32 %994 to float
  %996 = fadd float %992, %995
  %997 = fmul float %996, 0x3FBB8D4100000000
  %998 = extractelement <4 x float> %971, i32 0
  %999 = fmul float %998, 0x3F92555BE0000000
  %1000 = extractelement <4 x float> %970, i32 0
  %1001 = fadd float %1000, 0x3FE18A6440000000
  %1002 = fdiv float 1.000000e+00, %1001
  %1003 = fmul float %1002, 0x4009E1F280000000
  %1004 = extractelement <4 x float> %968, i32 0
  %1005 = fadd float %1004, 0x407310A540000000
  %1006 = fdiv float 1.000000e+00, %1005
  %1007 = fmul float %1006, 0x4029CFE300000000
  %1008 = fadd float %1000, 0x40018A6440000000
  %1009 = fdiv float 1.000000e+00, %1008
  %1010 = fmul float %1009, 0x4014168F60000000
  %1011 = fadd float %1007, %1010
  %1012 = fadd float %1003, %1011
  %1013 = fadd float %1012, 0xBFE7BC6A60000000
  %1014 = fsub float %1013, %999
  %1015 = fsub float %1014, %997
  %1016 = fmul float %1015, 0x3FF7154760000000
  %1017 = insertelement <4 x float> undef, float %1016, i32 0
  %1018 = shufflevector <4 x float> %1017, <4 x float> undef, <4 x i32> zeroinitializer
  %1019 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %1018, i32 9) #5
  %1020 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1019) #5
  %1021 = bitcast <4 x float> %1019 to <4 x i32>
  %1022 = xor <4 x i32> %1021, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1023 = and <4 x i32> %1022, %1020
  %1024 = ashr <4 x i32> %1023, <i32 31, i32 31, i32 31, i32 31>
  %1025 = xor <4 x i32> %1024, %1020
  %1026 = shl <4 x i32> %1025, <i32 23, i32 23, i32 23, i32 23>
  %1027 = add <4 x i32> %1026, <i32 1065353216, i32 undef, i32 undef, i32 undef>
  %1028 = bitcast <4 x i32> %1027 to <4 x float>
  %1029 = fsub <4 x float> %1018, %1019
  %1030 = extractelement <4 x float> %1029, i32 0
  %1031 = fadd float %1030, 0x4024598D60000000
  %1032 = fmul float %1030, %1031
  %1033 = fadd float %1032, 0x40486F3420000000
  %1034 = fmul float %1030, %1033
  %1035 = extractelement <4 x float> %1028, i32 0
  %1036 = fadd float %1034, 0x4058A33E00000000
  %1037 = fmul float %1035, %1036
  %1038 = fmul float %1030, 0x3FCAE93DC0000000
  %1039 = fadd float %1038, 0xBF96C437C0000000
  %1040 = fmul float %1030, %1039
  %1041 = fadd float %1040, 0xC033710620000000
  %1042 = fmul float %1030, %1041
  %1043 = fadd float %1042, 0x4058A33E20000000
  %1044 = fdiv float %1037, %1043
  %1045 = fmul float %795, %1044
  %1046 = fadd float %797, %1045
  store float %1046, float* %824, align 4
  %1047 = add nuw i64 %822, 1
  %1048 = icmp ult i64 %1047, %22
  br i1 %1048, label %821, label %818

1049:                                             ; preds = %1121, %351
  %1050 = phi i64 [ %23, %351 ], [ %1122, %1121 ]
  %1051 = phi i64 [ 0, %351 ], [ %1123, %1121 ]
  %1052 = add i64 %1051, %13
  %1053 = load i8*, i8** %352, align 8
  %1054 = load i64, i64* %353, align 8
  %1055 = mul i64 %1054, %1052
  %1056 = getelementptr inbounds i8, i8* %1053, i64 %1055
  %1057 = ptrtoint i8* %1056 to i64
  %1058 = and i64 %1057, 63
  %1059 = icmp eq i64 %1058, 0
  tail call void @llvm.assume(i1 %1059) #5
  %1060 = bitcast i8* %1056 to float*
  %1061 = getelementptr inbounds float, float* %1060, i64 %19
  %1062 = load i8*, i8** %354, align 8
  %1063 = load i64, i64* %355, align 8
  %1064 = mul i64 %1063, %1052
  %1065 = getelementptr inbounds i8, i8* %1062, i64 %1064
  %1066 = ptrtoint i8* %1065 to i64
  %1067 = and i64 %1066, 63
  %1068 = icmp eq i64 %1067, 0
  tail call void @llvm.assume(i1 %1068) #5
  %1069 = bitcast i8* %1065 to float*
  %1070 = getelementptr inbounds float, float* %1069, i64 %19
  %1071 = icmp eq i64 %1050, 0
  br i1 %1071, label %1121, label %1072

1072:                                             ; preds = %1049
  br i1 %362, label %1073, label %1075

1073:                                             ; preds = %1120, %1075, %1072
  %1074 = phi i64 [ 0, %1075 ], [ 0, %1072 ], [ %368, %1120 ]
  br label %1125

1075:                                             ; preds = %1072
  %1076 = getelementptr i8, i8* %1062, i64 %359
  %1077 = getelementptr i8, i8* %1076, i64 %1064
  %1078 = getelementptr i8, i8* %1062, i64 %367
  %1079 = getelementptr i8, i8* %1078, i64 %1064
  %1080 = getelementptr i8, i8* %1053, i64 %359
  %1081 = mul i64 %1054, %1052
  %1082 = getelementptr i8, i8* %1080, i64 %1081
  %1083 = getelementptr i8, i8* %1053, i64 %367
  %1084 = getelementptr i8, i8* %1083, i64 %1081
  %1085 = icmp ult i8* %1077, %1084
  %1086 = icmp ult i8* %1082, %1079
  %1087 = and i1 %1085, %1086
  br i1 %1087, label %1073, label %1088

1088:                                             ; preds = %1075
  br i1 %373, label %1110, label %1089

1089:                                             ; preds = %1088, %1089
  %1090 = phi i64 [ %1107, %1089 ], [ 0, %1088 ]
  %1091 = phi i64 [ %1108, %1089 ], [ %374, %1088 ]
  %1092 = getelementptr inbounds float, float* %1061, i64 %1090
  %1093 = bitcast float* %1092 to <4 x float>*
  %1094 = load <4 x float>, <4 x float>* %1093, align 32, !alias.scope !308
  %1095 = fadd <4 x float> %1094, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1096 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1095
  %1097 = getelementptr inbounds float, float* %1070, i64 %1090
  %1098 = bitcast float* %1097 to <4 x float>*
  store <4 x float> %1096, <4 x float>* %1098, align 32, !alias.scope !311, !noalias !308
  %1099 = or i64 %1090, 4
  %1100 = getelementptr inbounds float, float* %1061, i64 %1099
  %1101 = bitcast float* %1100 to <4 x float>*
  %1102 = load <4 x float>, <4 x float>* %1101, align 16, !alias.scope !308
  %1103 = fadd <4 x float> %1102, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1104 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1103
  %1105 = getelementptr inbounds float, float* %1070, i64 %1099
  %1106 = bitcast float* %1105 to <4 x float>*
  store <4 x float> %1104, <4 x float>* %1106, align 16, !alias.scope !311, !noalias !308
  %1107 = add i64 %1090, 8
  %1108 = add i64 %1091, -2
  %1109 = icmp eq i64 %1108, 0
  br i1 %1109, label %1110, label %1089, !llvm.loop !313

1110:                                             ; preds = %1089, %1088
  %1111 = phi i64 [ 0, %1088 ], [ %1107, %1089 ]
  br i1 %375, label %1120, label %1112

1112:                                             ; preds = %1110
  %1113 = getelementptr inbounds float, float* %1061, i64 %1111
  %1114 = bitcast float* %1113 to <4 x float>*
  %1115 = load <4 x float>, <4 x float>* %1114, align 16, !alias.scope !308
  %1116 = fadd <4 x float> %1115, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1117 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1116
  %1118 = getelementptr inbounds float, float* %1070, i64 %1111
  %1119 = bitcast float* %1118 to <4 x float>*
  store <4 x float> %1117, <4 x float>* %1119, align 16, !alias.scope !311, !noalias !308
  br label %1120

1120:                                             ; preds = %1110, %1112
  br i1 %376, label %1121, label %1073

1121:                                             ; preds = %1125, %1120, %1049
  %1122 = phi i64 [ 0, %1049 ], [ %23, %1120 ], [ %23, %1125 ]
  %1123 = add nuw i64 %1051, 1
  %1124 = icmp ult i64 %1123, %24
  br i1 %1124, label %1049, label %749

1125:                                             ; preds = %1073, %1125
  %1126 = phi i64 [ %1132, %1125 ], [ %1074, %1073 ]
  %1127 = getelementptr inbounds float, float* %1061, i64 %1126
  %1128 = load float, float* %1127, align 4
  %1129 = fadd float %1128, 0x3FD99999A0000000
  %1130 = fdiv float 1.000000e+00, %1129
  %1131 = getelementptr inbounds float, float* %1070, i64 %1126
  store float %1130, float* %1131, align 4
  %1132 = add nuw i64 %1126, 1
  %1133 = icmp ult i64 %1132, %23
  br i1 %1133, label %1125, label %1121, !llvm.loop !314

1134:                                             ; preds = %818, %793
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>) #13

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #12

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_8N_SCALAR12_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_8ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_9E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = alloca %"class.jxl::Plane.1", align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = bitcast i8* %0 to %class.anon.504**
  %7 = load %class.anon.504*, %class.anon.504** %6, align 8
  %8 = getelementptr inbounds %class.anon.504, %class.anon.504* %7, i64 0, i32 0
  %9 = load %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"*, %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"** %8, align 8
  %10 = bitcast %"class.jxl::Plane.1"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #5
  %11 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %11, i64 72, i64 %1, i64 4) #5
  %12 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %9, i64 0, i32 2
  %13 = bitcast %"class.jxl::Plane.1"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* nonnull align 8 %10, i64 24, i1 false) #5
  %14 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %9, i64 0, i32 2, i32 0, i32 5
  %15 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %15, i64 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.std::__1::unique_ptr"* %15 to i64*
  %18 = load i64, i64* %17, align 8
  store i8* null, i8** %16, align 8
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast %"class.std::__1::unique_ptr"* %14 to i64*
  store i64 %18, i64* %21, align 8
  %22 = icmp eq i8* %20, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %24, align 8
  br label %30

25:                                               ; preds = %2
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %20) #5
  %26 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  store i8* null, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %25
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %27) #5
  br label %30

30:                                               ; preds = %29, %25, %23
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #5
  %31 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %9, i64 0, i32 0
  %32 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %9, i64 0, i32 0, i32 0, i32 1
  %33 = bitcast %"class.jxl::Plane.1"** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %9 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %34, %36
  %38 = ashr exact i64 %37, 5
  %39 = icmp ult i64 %38, %1
  br i1 %39, label %40, label %60

40:                                               ; preds = %30
  %41 = inttoptr i64 %34 to %"class.jxl::Plane.1"*
  %42 = bitcast i64* %4 to i8*
  %43 = bitcast i64* %5 to i8*
  %44 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %9, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  br label %45

45:                                               ; preds = %58, %40
  %46 = phi %"class.jxl::Plane.1"* [ %41, %40 ], [ %59, %58 ]
  %47 = phi i64 [ %38, %40 ], [ %56, %58 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #5
  store i64 18, i64* %4, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #5
  store i64 18, i64* %5, align 8
  %48 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %44, align 8
  %49 = icmp ult %"class.jxl::Plane.1"* %46, %48
  br i1 %49, label %50, label %54

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %46, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %51, i64 18, i64 18, i64 4) #5
  %52 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %46, i64 1
  %53 = ptrtoint %"class.jxl::Plane.1"* %52 to i64
  store i64 %53, i64* %33, align 8
  br label %55

54:                                               ; preds = %45
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.87"* %31, i64* nonnull dereferenceable(8) %4, i64* nonnull dereferenceable(8) %5) #5
  br label %55

55:                                               ; preds = %54, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #5
  %56 = add i64 %47, 1
  %57 = icmp eq i64 %56, %1
  br i1 %57, label %60, label %58

58:                                               ; preds = %55
  %59 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %32, align 8
  br label %45

60:                                               ; preds = %55, %30
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_8N_SCALAR12_GLOBAL__N_123AdaptiveQuantizationMapEfRKNS_6Image3IfEERKNS_15FrameDimensionsEfPS0_PNS_5PlaneIfEEE3$_8ZNS3_23AdaptiveQuantizationMapEfS7_SA_fSB_SE_E3$_9E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.505**
  %6 = load %class.anon.505*, %class.anon.505** %5, align 8
  %7 = getelementptr inbounds %class.anon.505, %class.anon.505* %6, i64 0, i32 0
  %8 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %7, align 8
  %9 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %8, i64 0, i32 8
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, 7
  %12 = lshr i64 %11, 3
  %13 = sext i32 %1 to i64
  %14 = urem i64 %13, %12
  %15 = udiv i64 %13, %12
  %16 = shl i64 %15, 3
  %17 = add i64 %16, 8
  %18 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %8, i64 0, i32 9
  %19 = load i64, i64* %18, align 8
  %20 = icmp ult i64 %19, %17
  %21 = select i1 %20, i64 %19, i64 %17
  %22 = shl nuw i64 %14, 3
  %23 = add nuw i64 %22, 8
  %24 = icmp ult i64 %10, %23
  %25 = select i1 %24, i64 %10, i64 %23
  %26 = sub i64 %25, %22
  %27 = sub i64 %21, %16
  %28 = getelementptr inbounds %class.anon.505, %class.anon.505* %6, i64 0, i32 1
  %29 = load %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"*, %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"** %28, align 8
  %30 = getelementptr inbounds %class.anon.505, %class.anon.505* %6, i64 0, i32 2
  %31 = load float*, float** %30, align 8
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %class.anon.505, %class.anon.505* %6, i64 0, i32 3
  %34 = load float*, float** %33, align 8
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds %class.anon.505, %class.anon.505* %6, i64 0, i32 4
  %37 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %36, align 8
  %38 = getelementptr inbounds %class.anon.505, %class.anon.505* %6, i64 0, i32 5
  %39 = load %"class.jxl::Plane.1"**, %"class.jxl::Plane.1"*** %38, align 8
  %40 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %39, align 8
  %41 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 %15, 6
  %48 = shl i64 %27, 3
  %49 = add i64 %48, %47
  %50 = shl i64 %14, 6
  %51 = shl i64 %26, 3
  %52 = add i64 %51, %50
  %53 = icmp eq i64 %50, 0
  %54 = add i64 %50, -4
  %55 = select i1 %53, i64 0, i64 %54
  %56 = icmp eq i64 %52, %43
  %57 = or i64 %52, 4
  %58 = select i1 %56, i64 %52, i64 %57
  %59 = icmp eq i64 %47, 0
  %60 = add i64 %47, -4
  %61 = select i1 %59, i64 0, i64 %60
  %62 = icmp eq i64 %49, %46
  %63 = or i64 %49, 4
  %64 = select i1 %62, i64 %49, i64 %63
  %65 = shl i64 %2, 32
  %66 = ashr exact i64 %65, 32
  %67 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %29, i64 0, i32 0, i32 0, i32 0
  %68 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %67, align 8
  %69 = sub i64 %58, %55
  %70 = lshr exact i64 %69, 2
  %71 = sub i64 %64, %61
  %72 = lshr exact i64 %71, 2
  %73 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %68, i64 %66, i32 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = zext i32 %74 to i64
  %76 = icmp ugt i64 %70, %75
  br i1 %76, label %77, label %80

77:                                               ; preds = %3
  %78 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)) #5
  %79 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

80:                                               ; preds = %3
  %81 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %68, i64 %66, i32 0, i32 3
  %82 = load i32, i32* %81, align 4
  %83 = zext i32 %82 to i64
  %84 = icmp ugt i64 %72, %83
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0)) #5
  %87 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

88:                                               ; preds = %80
  %89 = trunc i64 %70 to i32
  %90 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %68, i64 %66, i32 0, i32 0
  store i32 %89, i32* %90, align 8
  %91 = trunc i64 %72 to i32
  %92 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %68, i64 %66, i32 0, i32 1
  store i32 %91, i32* %92, align 4
  %93 = icmp ugt i64 %64, %61
  br i1 %93, label %94, label %122

94:                                               ; preds = %88
  %95 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 4
  %96 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %97 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %98 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %29, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %99 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %29, i64 0, i32 2, i32 0, i32 4
  %100 = icmp ugt i32 %42, 1
  %101 = zext i1 %100 to i64
  %102 = sub i64 0, %55
  %103 = icmp eq i64 %69, 0
  %104 = lshr exact i64 %69, 2
  %105 = icmp ugt i64 %104, 1
  %106 = select i1 %105, i64 %104, i64 1
  %107 = icmp ugt i64 %104, 1
  %108 = select i1 %107, i64 %104, i64 1
  %109 = shl nuw i64 %108, 2
  %110 = shl i64 %108, 4
  %111 = and i64 %106, 4611686018427387900
  %112 = add nsw i64 %111, -4
  %113 = lshr exact i64 %112, 2
  %114 = add nuw nsw i64 %113, 1
  %115 = icmp ult i64 %106, 4
  %116 = and i64 %106, 4611686018427387900
  %117 = and i64 %114, 1
  %118 = icmp eq i64 %112, 0
  %119 = sub nuw nsw i64 %114, %117
  %120 = icmp eq i64 %117, 0
  %121 = icmp eq i64 %106, %116
  br label %381

122:                                              ; preds = %739, %88
  %123 = lshr exact i64 %55, 2
  %124 = and i64 %123, 1
  %125 = lshr exact i64 %61, 2
  %126 = and i64 %125, 1
  %127 = shl i64 %26, 1
  %128 = shl i64 %27, 1
  %129 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %67, align 8
  %130 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %129, i64 %66, i32 0, i32 0
  %131 = load i32, i32* %130, align 8
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %129, i64 %66, i32 0, i32 1
  %134 = load i32, i32* %133, align 4
  %135 = zext i32 %134 to i64
  %136 = icmp eq i64 %128, 0
  br i1 %136, label %353, label %137

137:                                              ; preds = %122
  %138 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %129, i64 %66, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %129, i64 %66, i32 0, i32 4
  %140 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %29, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %141 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %29, i64 0, i32 1, i32 0, i32 4
  br label %142

142:                                              ; preds = %184, %137
  %143 = phi i64 [ %127, %137 ], [ %185, %184 ]
  %144 = phi i64 [ 0, %137 ], [ %186, %184 ]
  %145 = add nuw i64 %144, %126
  %146 = icmp eq i64 %145, 0
  %147 = add i64 %145, -1
  %148 = select i1 %146, i64 0, i64 %147
  %149 = add nuw i64 %145, 1
  %150 = icmp ult i64 %149, %135
  %151 = select i1 %150, i64 %149, i64 %145
  %152 = load i8*, i8** %138, align 8
  %153 = load i64, i64* %139, align 8
  %154 = mul i64 %148, %153
  %155 = getelementptr inbounds i8, i8* %152, i64 %154
  %156 = ptrtoint i8* %155 to i64
  %157 = and i64 %156, 63
  %158 = icmp eq i64 %157, 0
  tail call void @llvm.assume(i1 %158) #5
  %159 = bitcast i8* %155 to float*
  %160 = mul i64 %153, %145
  %161 = getelementptr inbounds i8, i8* %152, i64 %160
  %162 = ptrtoint i8* %161 to i64
  %163 = and i64 %162, 63
  %164 = icmp eq i64 %163, 0
  tail call void @llvm.assume(i1 %164) #5
  %165 = bitcast i8* %161 to float*
  %166 = mul i64 %151, %153
  %167 = getelementptr inbounds i8, i8* %152, i64 %166
  %168 = ptrtoint i8* %167 to i64
  %169 = and i64 %168, 63
  %170 = icmp eq i64 %169, 0
  tail call void @llvm.assume(i1 %170) #5
  %171 = bitcast i8* %167 to float*
  %172 = lshr i64 %144, 1
  %173 = add i64 %172, %16
  %174 = load i8*, i8** %140, align 8
  %175 = load i64, i64* %141, align 8
  %176 = mul i64 %175, %173
  %177 = getelementptr inbounds i8, i8* %174, i64 %176
  %178 = ptrtoint i8* %177 to i64
  %179 = and i64 %178, 63
  %180 = icmp eq i64 %179, 0
  tail call void @llvm.assume(i1 %180) #5
  %181 = bitcast i8* %177 to float*
  %182 = getelementptr inbounds float, float* %181, i64 %22
  %183 = icmp eq i64 %143, 0
  br i1 %183, label %184, label %188

184:                                              ; preds = %349, %142
  %185 = phi i64 [ 0, %142 ], [ %127, %349 ]
  %186 = add nuw i64 %144, 1
  %187 = icmp eq i64 %186, %128
  br i1 %187, label %353, label %142

188:                                              ; preds = %142, %349
  %189 = phi i64 [ %351, %349 ], [ 0, %142 ]
  %190 = add nuw i64 %189, %124
  %191 = icmp eq i64 %190, 0
  %192 = add i64 %190, -1
  %193 = select i1 %191, i64 0, i64 %192
  %194 = add nuw i64 %190, 1
  %195 = icmp ult i64 %194, %132
  %196 = select i1 %195, i64 %194, i64 %190
  %197 = getelementptr inbounds float, float* %165, i64 %190
  %198 = bitcast float* %197 to i32*
  %199 = load i32, i32* %198, align 4
  %200 = getelementptr inbounds float, float* %165, i64 %193
  %201 = load float, float* %200, align 4
  %202 = bitcast i32 %199 to float
  %203 = fcmp olt float %201, %202
  %204 = bitcast float %201 to i32
  %205 = select i1 %203, i32 %204, i32 %199
  %206 = getelementptr inbounds float, float* %165, i64 %196
  %207 = load float, float* %206, align 4
  %208 = fcmp olt float %207, %202
  br i1 %208, label %209, label %215

209:                                              ; preds = %188
  %210 = bitcast i32 %205 to float
  %211 = fcmp olt float %207, %210
  %212 = bitcast float %207 to i32
  %213 = select i1 %211, i32 %212, i32 %205
  %214 = select i1 %211, i32 %205, i32 %212
  br label %215

215:                                              ; preds = %209, %188
  %216 = phi i32 [ %205, %188 ], [ %213, %209 ]
  %217 = phi i32 [ %199, %188 ], [ %214, %209 ]
  %218 = getelementptr inbounds float, float* %159, i64 %193
  %219 = load float, float* %218, align 4
  %220 = fcmp olt float %219, %202
  br i1 %220, label %221, label %232

221:                                              ; preds = %215
  %222 = bitcast i32 %216 to float
  %223 = fcmp olt float %219, %222
  br i1 %223, label %224, label %226

224:                                              ; preds = %221
  %225 = bitcast float %219 to i32
  br label %232

226:                                              ; preds = %221
  %227 = bitcast i32 %217 to float
  %228 = fcmp olt float %219, %227
  %229 = bitcast float %219 to i32
  %230 = select i1 %228, i32 %229, i32 %217
  %231 = select i1 %228, i32 %217, i32 %229
  br label %232

232:                                              ; preds = %226, %224, %215
  %233 = phi i32 [ %225, %224 ], [ %216, %215 ], [ %216, %226 ]
  %234 = phi i32 [ %216, %224 ], [ %217, %215 ], [ %230, %226 ]
  %235 = phi i32 [ %217, %224 ], [ %199, %215 ], [ %231, %226 ]
  %236 = getelementptr inbounds float, float* %159, i64 %190
  %237 = load float, float* %236, align 4
  %238 = bitcast i32 %235 to float
  %239 = fcmp olt float %237, %238
  br i1 %239, label %240, label %251

240:                                              ; preds = %232
  %241 = bitcast i32 %233 to float
  %242 = fcmp olt float %237, %241
  br i1 %242, label %243, label %245

243:                                              ; preds = %240
  %244 = bitcast float %237 to i32
  br label %251

245:                                              ; preds = %240
  %246 = bitcast i32 %234 to float
  %247 = fcmp olt float %237, %246
  %248 = bitcast float %237 to i32
  %249 = select i1 %247, i32 %248, i32 %234
  %250 = select i1 %247, i32 %234, i32 %248
  br label %251

251:                                              ; preds = %245, %243, %232
  %252 = phi i32 [ %244, %243 ], [ %233, %232 ], [ %233, %245 ]
  %253 = phi i32 [ %233, %243 ], [ %234, %232 ], [ %249, %245 ]
  %254 = phi i32 [ %234, %243 ], [ %235, %232 ], [ %250, %245 ]
  %255 = getelementptr inbounds float, float* %159, i64 %196
  %256 = load float, float* %255, align 4
  %257 = bitcast i32 %254 to float
  %258 = fcmp olt float %256, %257
  br i1 %258, label %259, label %270

259:                                              ; preds = %251
  %260 = bitcast i32 %252 to float
  %261 = fcmp olt float %256, %260
  br i1 %261, label %262, label %264

262:                                              ; preds = %259
  %263 = bitcast float %256 to i32
  br label %270

264:                                              ; preds = %259
  %265 = bitcast i32 %253 to float
  %266 = fcmp olt float %256, %265
  %267 = bitcast float %256 to i32
  %268 = select i1 %266, i32 %267, i32 %253
  %269 = select i1 %266, i32 %253, i32 %267
  br label %270

270:                                              ; preds = %264, %262, %251
  %271 = phi i32 [ %263, %262 ], [ %252, %251 ], [ %252, %264 ]
  %272 = phi i32 [ %252, %262 ], [ %253, %251 ], [ %268, %264 ]
  %273 = phi i32 [ %253, %262 ], [ %254, %251 ], [ %269, %264 ]
  %274 = getelementptr inbounds float, float* %171, i64 %193
  %275 = load float, float* %274, align 4
  %276 = bitcast i32 %273 to float
  %277 = fcmp olt float %275, %276
  br i1 %277, label %278, label %289

278:                                              ; preds = %270
  %279 = bitcast i32 %271 to float
  %280 = fcmp olt float %275, %279
  br i1 %280, label %281, label %283

281:                                              ; preds = %278
  %282 = bitcast float %275 to i32
  br label %289

283:                                              ; preds = %278
  %284 = bitcast i32 %272 to float
  %285 = fcmp olt float %275, %284
  %286 = bitcast float %275 to i32
  %287 = select i1 %285, i32 %286, i32 %272
  %288 = select i1 %285, i32 %272, i32 %286
  br label %289

289:                                              ; preds = %283, %281, %270
  %290 = phi i32 [ %282, %281 ], [ %271, %270 ], [ %271, %283 ]
  %291 = phi i32 [ %271, %281 ], [ %272, %270 ], [ %287, %283 ]
  %292 = phi i32 [ %272, %281 ], [ %273, %270 ], [ %288, %283 ]
  %293 = getelementptr inbounds float, float* %171, i64 %190
  %294 = load float, float* %293, align 4
  %295 = bitcast i32 %292 to float
  %296 = fcmp olt float %294, %295
  br i1 %296, label %297, label %308

297:                                              ; preds = %289
  %298 = bitcast i32 %290 to float
  %299 = fcmp olt float %294, %298
  br i1 %299, label %300, label %302

300:                                              ; preds = %297
  %301 = bitcast float %294 to i32
  br label %308

302:                                              ; preds = %297
  %303 = bitcast i32 %291 to float
  %304 = fcmp olt float %294, %303
  %305 = bitcast float %294 to i32
  %306 = select i1 %304, i32 %305, i32 %291
  %307 = select i1 %304, i32 %291, i32 %305
  br label %308

308:                                              ; preds = %302, %300, %289
  %309 = phi i32 [ %301, %300 ], [ %290, %289 ], [ %290, %302 ]
  %310 = phi i32 [ %290, %300 ], [ %291, %289 ], [ %306, %302 ]
  %311 = phi i32 [ %291, %300 ], [ %292, %289 ], [ %307, %302 ]
  %312 = getelementptr inbounds float, float* %171, i64 %196
  %313 = load float, float* %312, align 4
  %314 = bitcast i32 %311 to float
  %315 = fcmp olt float %313, %314
  br i1 %315, label %316, label %327

316:                                              ; preds = %308
  %317 = bitcast i32 %309 to float
  %318 = fcmp olt float %313, %317
  br i1 %318, label %319, label %321

319:                                              ; preds = %316
  %320 = bitcast float %313 to i32
  br label %327

321:                                              ; preds = %316
  %322 = bitcast i32 %310 to float
  %323 = fcmp olt float %313, %322
  %324 = bitcast float %313 to i32
  %325 = select i1 %323, i32 %324, i32 %310
  %326 = select i1 %323, i32 %310, i32 %324
  br label %327

327:                                              ; preds = %321, %319, %308
  %328 = phi i32 [ %320, %319 ], [ %309, %308 ], [ %309, %321 ]
  %329 = phi i32 [ %309, %319 ], [ %310, %308 ], [ %325, %321 ]
  %330 = phi i32 [ %310, %319 ], [ %311, %308 ], [ %326, %321 ]
  %331 = fmul float %202, 0x3F7E4F2620000000
  %332 = bitcast i32 %328 to float
  %333 = fmul float %332, 0x3FC1F66CA0000000
  %334 = fadd float %331, %333
  %335 = bitcast i32 %329 to float
  %336 = fmul float %335, 0x3FA5204D60000000
  %337 = fadd float %336, %334
  %338 = bitcast i32 %330 to float
  %339 = fmul float %338, 0x3FAF3C1B80000000
  %340 = fadd float %339, %337
  %341 = or i64 %189, %144
  %342 = and i64 %341, 1
  %343 = icmp eq i64 %342, 0
  %344 = lshr i64 %189, 1
  %345 = getelementptr inbounds float, float* %182, i64 %344
  br i1 %343, label %349, label %346

346:                                              ; preds = %327
  %347 = load float, float* %345, align 4
  %348 = fadd float %340, %347
  br label %349

349:                                              ; preds = %346, %327
  %350 = phi float [ %348, %346 ], [ %340, %327 ]
  store float %350, float* %345, align 4
  %351 = add nuw i64 %189, 1
  %352 = icmp ult i64 %351, %127
  br i1 %352, label %188, label %184

353:                                              ; preds = %184, %122
  %354 = icmp eq i64 %27, 0
  br i1 %354, label %741, label %355

355:                                              ; preds = %353
  %356 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %29, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %357 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %29, i64 0, i32 1, i32 0, i32 4
  %358 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %40, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %359 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %40, i64 0, i32 0, i32 4
  %360 = shl nsw i64 %13, 5
  %361 = mul i64 %12, %15
  %362 = shl i64 %361, 5
  %363 = sub i64 %360, %362
  %364 = icmp ugt i64 %26, 1
  %365 = select i1 %364, i64 %26, i64 1
  %366 = icmp ult i64 %365, 4
  %367 = icmp ugt i64 %26, 1
  %368 = select i1 %367, i64 %26, i64 1
  %369 = shl i64 %368, 2
  %370 = add i64 %360, %369
  %371 = sub i64 %370, %362
  %372 = and i64 %365, -4
  %373 = add i64 %372, -4
  %374 = lshr exact i64 %373, 2
  %375 = add nuw nsw i64 %374, 1
  %376 = and i64 %375, 1
  %377 = icmp eq i64 %373, 0
  %378 = sub nuw nsw i64 %375, %376
  %379 = icmp eq i64 %376, 0
  %380 = icmp eq i64 %365, %372
  br label %1074

381:                                              ; preds = %739, %94
  %382 = phi i64 [ %61, %94 ], [ %383, %739 ]
  %383 = add i64 %382, 1
  %384 = icmp ult i64 %383, %46
  %385 = select i1 %384, i64 %383, i64 %382
  %386 = icmp eq i64 %382, 0
  %387 = add i64 %382, -1
  %388 = select i1 %386, i64 0, i64 %387
  %389 = load i64, i64* %95, align 8
  %390 = mul i64 %389, %382
  %391 = load i8*, i8** %96, align 8
  %392 = ptrtoint i8* %391 to i64
  %393 = and i64 %392, 63
  %394 = icmp eq i64 %393, 0
  tail call void @llvm.assume(i1 %394) #5
  %395 = getelementptr inbounds i8, i8* %391, i64 %390
  %396 = ptrtoint i8* %395 to i64
  %397 = and i64 %396, 63
  %398 = icmp eq i64 %397, 0
  tail call void @llvm.assume(i1 %398) #5
  %399 = bitcast i8* %395 to float*
  %400 = mul i64 %388, %389
  %401 = getelementptr inbounds i8, i8* %391, i64 %400
  %402 = ptrtoint i8* %401 to i64
  %403 = and i64 %402, 63
  %404 = icmp eq i64 %403, 0
  tail call void @llvm.assume(i1 %404) #5
  %405 = mul i64 %385, %389
  %406 = getelementptr inbounds i8, i8* %391, i64 %405
  %407 = ptrtoint i8* %406 to i64
  %408 = and i64 %407, 63
  %409 = icmp eq i64 %408, 0
  tail call void @llvm.assume(i1 %409) #5
  %410 = load i8*, i8** %97, align 8
  %411 = ptrtoint i8* %410 to i64
  %412 = and i64 %411, 63
  %413 = icmp eq i64 %412, 0
  tail call void @llvm.assume(i1 %413) #5
  %414 = getelementptr inbounds i8, i8* %410, i64 %390
  %415 = ptrtoint i8* %414 to i64
  %416 = and i64 %415, 63
  %417 = icmp eq i64 %416, 0
  tail call void @llvm.assume(i1 %417) #5
  %418 = bitcast i8* %414 to float*
  %419 = getelementptr inbounds i8, i8* %410, i64 %400
  %420 = ptrtoint i8* %419 to i64
  %421 = and i64 %420, 63
  %422 = icmp eq i64 %421, 0
  tail call void @llvm.assume(i1 %422) #5
  %423 = getelementptr inbounds i8, i8* %410, i64 %405
  %424 = ptrtoint i8* %423 to i64
  %425 = and i64 %424, 63
  %426 = icmp eq i64 %425, 0
  tail call void @llvm.assume(i1 %426) #5
  %427 = load i8*, i8** %98, align 8
  %428 = load i64, i64* %99, align 8
  %429 = mul i64 %428, %66
  %430 = getelementptr inbounds i8, i8* %427, i64 %429
  %431 = ptrtoint i8* %430 to i64
  %432 = and i64 %431, 63
  %433 = icmp eq i64 %432, 0
  tail call void @llvm.assume(i1 %433) #5
  %434 = bitcast i8* %430 to float*
  %435 = bitcast i8* %406 to float*
  %436 = bitcast i8* %401 to float*
  %437 = bitcast i8* %423 to float*
  %438 = bitcast i8* %419 to float*
  br i1 %53, label %439, label %487

439:                                              ; preds = %381
  %440 = load float, float* %435, align 64
  %441 = load float, float* %436, align 64
  %442 = fadd float %440, %441
  %443 = load float, float* %399, align 64
  %444 = fadd float %442, %443
  %445 = getelementptr inbounds float, float* %399, i64 %101
  %446 = load float, float* %445, align 4
  %447 = fadd float %444, %446
  %448 = fmul float %447, 2.500000e-01
  %449 = fadd float %443, 0x3F9374BC60000000
  %450 = fcmp olt float %449, 0.000000e+00
  %451 = select i1 %450, float 0.000000e+00, float %449
  %452 = fmul float %451, %451
  %453 = fmul float %452, 0x405DE18460000000
  %454 = fmul float %451, 0x406395E800000000
  %455 = fmul float %454, %452
  %456 = fadd float %455, 0x4013D09F20000000
  %457 = fdiv float %456, %453
  %458 = fsub float %443, %448
  %459 = fmul float %458, %457
  %460 = fmul float %459, %459
  %461 = load float, float* %437, align 64
  %462 = load float, float* %438, align 64
  %463 = fadd float %461, %462
  %464 = load float, float* %418, align 64
  %465 = fadd float %463, %464
  %466 = getelementptr inbounds float, float* %418, i64 %101
  %467 = load float, float* %466, align 4
  %468 = fadd float %465, %467
  %469 = fmul float %468, 2.500000e-01
  %470 = fsub float %464, %469
  %471 = fmul float %457, %470
  %472 = fmul float %471, %471
  %473 = fmul float %472, 0x403E7E36A0000000
  %474 = fadd float %460, %473
  %475 = fmul float %474, 1.454330e+05
  %476 = fadd float %475, 0x403A7B41A0000000
  %477 = tail call float @sqrtf(float %476) #5
  %478 = fmul float %477, 2.500000e-01
  %479 = and i64 %382, 3
  %480 = icmp eq i64 %479, 0
  %481 = getelementptr inbounds float, float* %434, i64 %102
  br i1 %480, label %485, label %482

482:                                              ; preds = %439
  %483 = load float, float* %481, align 16
  %484 = fadd float %478, %483
  br label %485

485:                                              ; preds = %482, %439
  %486 = phi float [ %484, %482 ], [ %478, %439 ]
  store float %486, float* %481, align 16
  br label %487

487:                                              ; preds = %485, %381
  %488 = phi i64 [ 1, %485 ], [ %54, %381 ]
  %489 = add i64 %488, 2
  %490 = icmp ult i64 %489, %58
  br i1 %490, label %493, label %491

491:                                              ; preds = %487
  %492 = and i64 %382, 3
  br label %505

493:                                              ; preds = %487
  %494 = getelementptr inbounds i8, i8* %395, i64 4
  %495 = bitcast i8* %494 to float*
  %496 = getelementptr inbounds i8, i8* %395, i64 -4
  %497 = bitcast i8* %496 to float*
  %498 = getelementptr inbounds i8, i8* %414, i64 4
  %499 = bitcast i8* %498 to float*
  %500 = getelementptr inbounds i8, i8* %414, i64 -4
  %501 = bitcast i8* %500 to float*
  %502 = and i64 %382, 3
  %503 = icmp eq i64 %502, 0
  %504 = getelementptr inbounds float, float* %434, i64 %102
  br label %511

505:                                              ; preds = %567, %491
  %506 = phi i64 [ %492, %491 ], [ %502, %567 ]
  %507 = phi i64 [ %488, %491 ], [ %513, %567 ]
  %508 = icmp ult i64 %507, %58
  br i1 %508, label %509, label %637

509:                                              ; preds = %505
  %510 = icmp eq i64 %506, 0
  br label %572

511:                                              ; preds = %567, %493
  %512 = phi i64 [ %488, %493 ], [ %513, %567 ]
  %513 = add i64 %512, 1
  %514 = getelementptr inbounds float, float* %399, i64 %512
  %515 = load float, float* %514, align 4, !alias.scope !315
  %516 = getelementptr inbounds float, float* %495, i64 %512
  %517 = load float, float* %516, align 4, !alias.scope !320
  %518 = getelementptr inbounds float, float* %497, i64 %512
  %519 = load float, float* %518, align 4, !alias.scope !325
  %520 = getelementptr inbounds float, float* %435, i64 %512
  %521 = load float, float* %520, align 4, !alias.scope !330
  %522 = getelementptr inbounds float, float* %436, i64 %512
  %523 = load float, float* %522, align 4, !alias.scope !335
  %524 = fadd float %517, %519
  %525 = fadd float %524, %521
  %526 = fadd float %525, %523
  %527 = fmul float %526, 2.500000e-01
  %528 = fadd float %515, 0x3F9374BC60000000
  %529 = fcmp olt float %528, 0.000000e+00
  %530 = select i1 %529, float 0.000000e+00, float %528
  %531 = fmul float %530, %530
  %532 = fmul float %531, 0x405DE18460000000
  %533 = fmul float %530, 0x406395E800000000
  %534 = fmul float %533, %531
  %535 = fadd float %534, 0x4013D09F20000000
  %536 = fdiv float %535, %532
  %537 = fsub float %515, %527
  %538 = fmul float %536, %537
  %539 = fmul float %538, %538
  %540 = getelementptr inbounds float, float* %418, i64 %512
  %541 = load float, float* %540, align 4, !alias.scope !340
  %542 = getelementptr inbounds float, float* %499, i64 %512
  %543 = load float, float* %542, align 4, !alias.scope !345
  %544 = getelementptr inbounds float, float* %501, i64 %512
  %545 = load float, float* %544, align 4, !alias.scope !350
  %546 = getelementptr inbounds float, float* %437, i64 %512
  %547 = load float, float* %546, align 4, !alias.scope !355
  %548 = getelementptr inbounds float, float* %438, i64 %512
  %549 = load float, float* %548, align 4, !alias.scope !360
  %550 = fadd float %543, %545
  %551 = fadd float %550, %547
  %552 = fadd float %551, %549
  %553 = fmul float %552, 2.500000e-01
  %554 = fsub float %541, %553
  %555 = fmul float %536, %554
  %556 = fmul float %555, %555
  %557 = fmul float %556, 0x403E7E36A0000000
  %558 = fadd float %539, %557
  %559 = fmul float %558, 1.454330e+05
  %560 = fadd float %559, 0x403A7B41A0000000
  %561 = tail call float @sqrtf(float %560) #5
  %562 = fmul float %561, 2.500000e-01
  br i1 %503, label %567, label %563

563:                                              ; preds = %511
  %564 = getelementptr inbounds float, float* %504, i64 %512
  %565 = load float, float* %564, align 4, !alias.scope !365
  %566 = fadd float %562, %565
  br label %567

567:                                              ; preds = %563, %511
  %568 = phi float [ %562, %511 ], [ %566, %563 ]
  %569 = getelementptr inbounds float, float* %504, i64 %512
  store float %568, float* %569, align 4, !alias.scope !370
  %570 = add i64 %512, 3
  %571 = icmp ult i64 %570, %58
  br i1 %571, label %511, label %505

572:                                              ; preds = %634, %509
  %573 = phi i64 [ %507, %509 ], [ %574, %634 ]
  %574 = add i64 %573, 1
  %575 = icmp ult i64 %574, %43
  %576 = select i1 %575, i64 %574, i64 %573
  %577 = icmp eq i64 %573, 0
  %578 = add i64 %573, -1
  %579 = select i1 %577, i64 0, i64 %578
  %580 = getelementptr inbounds float, float* %435, i64 %573
  %581 = load float, float* %580, align 4
  %582 = getelementptr inbounds float, float* %436, i64 %573
  %583 = load float, float* %582, align 4
  %584 = fadd float %581, %583
  %585 = getelementptr inbounds float, float* %399, i64 %579
  %586 = load float, float* %585, align 4
  %587 = fadd float %584, %586
  %588 = getelementptr inbounds float, float* %399, i64 %576
  %589 = load float, float* %588, align 4
  %590 = fadd float %587, %589
  %591 = fmul float %590, 2.500000e-01
  %592 = getelementptr inbounds float, float* %399, i64 %573
  %593 = load float, float* %592, align 4
  %594 = fadd float %593, 0x3F9374BC60000000
  %595 = fcmp olt float %594, 0.000000e+00
  %596 = select i1 %595, float 0.000000e+00, float %594
  %597 = fmul float %596, %596
  %598 = fmul float %597, 0x405DE18460000000
  %599 = fmul float %596, 0x406395E800000000
  %600 = fmul float %599, %597
  %601 = fadd float %600, 0x4013D09F20000000
  %602 = fdiv float %601, %598
  %603 = fsub float %593, %591
  %604 = fmul float %603, %602
  %605 = fmul float %604, %604
  %606 = getelementptr inbounds float, float* %437, i64 %573
  %607 = load float, float* %606, align 4
  %608 = getelementptr inbounds float, float* %438, i64 %573
  %609 = load float, float* %608, align 4
  %610 = fadd float %607, %609
  %611 = getelementptr inbounds float, float* %418, i64 %579
  %612 = load float, float* %611, align 4
  %613 = fadd float %610, %612
  %614 = getelementptr inbounds float, float* %418, i64 %576
  %615 = load float, float* %614, align 4
  %616 = fadd float %613, %615
  %617 = fmul float %616, 2.500000e-01
  %618 = getelementptr inbounds float, float* %418, i64 %573
  %619 = load float, float* %618, align 4
  %620 = fsub float %619, %617
  %621 = fmul float %602, %620
  %622 = fmul float %621, %621
  %623 = fmul float %622, 0x403E7E36A0000000
  %624 = fadd float %605, %623
  %625 = fmul float %624, 1.454330e+05
  %626 = fadd float %625, 0x403A7B41A0000000
  %627 = tail call float @sqrtf(float %626) #5
  %628 = fmul float %627, 2.500000e-01
  %629 = sub i64 %573, %55
  %630 = getelementptr inbounds float, float* %434, i64 %629
  br i1 %510, label %634, label %631

631:                                              ; preds = %572
  %632 = load float, float* %630, align 4
  %633 = fadd float %628, %632
  br label %634

634:                                              ; preds = %631, %572
  %635 = phi float [ %633, %631 ], [ %628, %572 ]
  store float %635, float* %630, align 4
  %636 = icmp eq i64 %574, %58
  br i1 %636, label %637, label %572

637:                                              ; preds = %634, %505
  %638 = icmp eq i64 %506, 3
  br i1 %638, label %639, label %739

639:                                              ; preds = %637
  %640 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %67, align 8
  %641 = sub nuw i64 %382, %61
  %642 = lshr i64 %641, 2
  %643 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %640, i64 %66, i32 0, i32 5, i32 0, i32 0, i32 0
  %644 = load i8*, i8** %643, align 8
  %645 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %640, i64 %66, i32 0, i32 4
  %646 = load i64, i64* %645, align 8
  %647 = mul i64 %646, %642
  %648 = getelementptr inbounds i8, i8* %644, i64 %647
  %649 = ptrtoint i8* %648 to i64
  %650 = and i64 %649, 63
  %651 = icmp eq i64 %650, 0
  tail call void @llvm.assume(i1 %651) #5
  %652 = bitcast i8* %648 to float*
  br i1 %103, label %739, label %653

653:                                              ; preds = %639
  br i1 %115, label %716, label %654

654:                                              ; preds = %653
  %655 = getelementptr i8, i8* %644, i64 %109
  %656 = getelementptr i8, i8* %655, i64 %647
  %657 = getelementptr i8, i8* %427, i64 %110
  %658 = getelementptr i8, i8* %657, i64 %429
  %659 = icmp ult i8* %648, %658
  %660 = icmp ult i8* %430, %656
  %661 = and i1 %659, %660
  br i1 %661, label %716, label %662

662:                                              ; preds = %654
  br i1 %118, label %698, label %663

663:                                              ; preds = %662, %663
  %664 = phi i64 [ %695, %663 ], [ 0, %662 ]
  %665 = phi i64 [ %696, %663 ], [ %119, %662 ]
  %666 = shl i64 %664, 2
  %667 = getelementptr inbounds float, float* %434, i64 %666
  %668 = bitcast float* %667 to <16 x float>*
  %669 = load <16 x float>, <16 x float>* %668, align 64
  %670 = shufflevector <16 x float> %669, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %671 = shufflevector <16 x float> %669, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %672 = shufflevector <16 x float> %669, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %673 = shufflevector <16 x float> %669, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %674 = fadd <4 x float> %670, %671
  %675 = fadd <4 x float> %674, %672
  %676 = fadd <4 x float> %675, %673
  %677 = fmul <4 x float> %676, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %678 = getelementptr inbounds float, float* %652, i64 %664
  %679 = bitcast float* %678 to <4 x float>*
  store <4 x float> %677, <4 x float>* %679, align 32, !alias.scope !375, !noalias !378
  %680 = or i64 %664, 4
  %681 = shl i64 %680, 2
  %682 = getelementptr inbounds float, float* %434, i64 %681
  %683 = bitcast float* %682 to <16 x float>*
  %684 = load <16 x float>, <16 x float>* %683, align 64
  %685 = shufflevector <16 x float> %684, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %686 = shufflevector <16 x float> %684, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %687 = shufflevector <16 x float> %684, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %688 = shufflevector <16 x float> %684, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %689 = fadd <4 x float> %685, %686
  %690 = fadd <4 x float> %689, %687
  %691 = fadd <4 x float> %690, %688
  %692 = fmul <4 x float> %691, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %693 = getelementptr inbounds float, float* %652, i64 %680
  %694 = bitcast float* %693 to <4 x float>*
  store <4 x float> %692, <4 x float>* %694, align 16, !alias.scope !375, !noalias !378
  %695 = add i64 %664, 8
  %696 = add i64 %665, -2
  %697 = icmp eq i64 %696, 0
  br i1 %697, label %698, label %663, !llvm.loop !380

698:                                              ; preds = %663, %662
  %699 = phi i64 [ 0, %662 ], [ %695, %663 ]
  br i1 %120, label %715, label %700

700:                                              ; preds = %698
  %701 = shl i64 %699, 2
  %702 = getelementptr inbounds float, float* %434, i64 %701
  %703 = bitcast float* %702 to <16 x float>*
  %704 = load <16 x float>, <16 x float>* %703, align 64
  %705 = shufflevector <16 x float> %704, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %706 = shufflevector <16 x float> %704, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %707 = shufflevector <16 x float> %704, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %708 = shufflevector <16 x float> %704, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %709 = fadd <4 x float> %705, %706
  %710 = fadd <4 x float> %709, %707
  %711 = fadd <4 x float> %710, %708
  %712 = fmul <4 x float> %711, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %713 = getelementptr inbounds float, float* %652, i64 %699
  %714 = bitcast float* %713 to <4 x float>*
  store <4 x float> %712, <4 x float>* %714, align 16, !alias.scope !375, !noalias !378
  br label %715

715:                                              ; preds = %698, %700
  br i1 %121, label %739, label %716

716:                                              ; preds = %715, %654, %653
  %717 = phi i64 [ 0, %654 ], [ 0, %653 ], [ %116, %715 ]
  br label %718

718:                                              ; preds = %716, %718
  %719 = phi i64 [ %737, %718 ], [ %717, %716 ]
  %720 = shl i64 %719, 2
  %721 = getelementptr inbounds float, float* %434, i64 %720
  %722 = load float, float* %721, align 16
  %723 = or i64 %720, 1
  %724 = getelementptr inbounds float, float* %434, i64 %723
  %725 = load float, float* %724, align 4
  %726 = fadd float %722, %725
  %727 = or i64 %720, 2
  %728 = getelementptr inbounds float, float* %434, i64 %727
  %729 = load float, float* %728, align 8
  %730 = fadd float %726, %729
  %731 = or i64 %720, 3
  %732 = getelementptr inbounds float, float* %434, i64 %731
  %733 = load float, float* %732, align 4
  %734 = fadd float %730, %733
  %735 = fmul float %734, 2.500000e-01
  %736 = getelementptr inbounds float, float* %652, i64 %719
  store float %735, float* %736, align 4
  %737 = add nuw nsw i64 %719, 1
  %738 = icmp ult i64 %737, %70
  br i1 %738, label %718, label %739, !llvm.loop !381

739:                                              ; preds = %718, %715, %639, %637
  %740 = icmp eq i64 %383, %64
  br i1 %740, label %122, label %381

741:                                              ; preds = %1146, %353
  %742 = load i32, i32* %41, align 8
  %743 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 0
  %744 = load i32, i32* %743, align 8
  %745 = icmp eq i32 %742, %744
  br i1 %745, label %746, label %751

746:                                              ; preds = %741
  %747 = load i32, i32* %44, align 4
  %748 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 1
  %749 = load i32, i32* %748, align 4
  %750 = icmp eq i32 %747, %749
  br i1 %750, label %754, label %751

751:                                              ; preds = %746, %741
  %752 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 252, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0)) #5
  %753 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

754:                                              ; preds = %746
  %755 = zext i32 %742 to i64
  %756 = add nuw nsw i64 %755, 7
  %757 = lshr i64 %756, 3
  %758 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %29, i64 0, i32 1, i32 0, i32 0
  %759 = load i32, i32* %758, align 8
  %760 = zext i32 %759 to i64
  %761 = icmp eq i64 %757, %760
  br i1 %761, label %765, label %762

762:                                              ; preds = %754
  %763 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 253, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.18, i64 0, i64 0)) #5
  %764 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

765:                                              ; preds = %754
  %766 = zext i32 %747 to i64
  %767 = add nuw nsw i64 %766, 7
  %768 = lshr i64 %767, 3
  %769 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %29, i64 0, i32 1, i32 0, i32 1
  %770 = load i32, i32* %769, align 4
  %771 = zext i32 %770 to i64
  %772 = icmp eq i64 %768, %771
  br i1 %772, label %776, label %773

773:                                              ; preds = %765
  %774 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 254, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.19, i64 0, i64 0)) #5
  %775 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

776:                                              ; preds = %765
  %777 = fmul float %35, 5.000000e-01
  %778 = fcmp ult float %32, 7.000000e+00
  br i1 %778, label %785, label %779

779:                                              ; preds = %776
  %780 = fadd float %32, -7.000000e+00
  %781 = fdiv float %780, 7.000000e+00
  %782 = fsub float 1.000000e+00, %781
  %783 = fcmp olt float %782, 0.000000e+00
  br i1 %783, label %784, label %785

784:                                              ; preds = %779
  br label %785

785:                                              ; preds = %784, %779, %776
  %786 = phi float [ 0.000000e+00, %784 ], [ %782, %779 ], [ 1.000000e+00, %776 ]
  %787 = fmul float %35, %786
  %788 = fsub float 1.000000e+00, %786
  %789 = fmul float %777, %788
  %790 = icmp ugt i64 %21, %16
  br i1 %790, label %791, label %1159

791:                                              ; preds = %785
  %792 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %29, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %793 = getelementptr inbounds %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl", %"struct.jxl::N_SCALAR::(anonymous namespace)::AdaptiveQuantizationImpl"* %29, i64 0, i32 1, i32 0, i32 4
  %794 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %795 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 4
  %796 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %797 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 4
  %798 = icmp ugt i64 %25, %22
  br label %799

799:                                              ; preds = %810, %791
  %800 = phi i64 [ %16, %791 ], [ %811, %810 ]
  %801 = shl i64 %800, 3
  %802 = load i8*, i8** %792, align 8
  %803 = load i64, i64* %793, align 8
  %804 = mul i64 %803, %800
  %805 = getelementptr inbounds i8, i8* %802, i64 %804
  %806 = ptrtoint i8* %805 to i64
  %807 = and i64 %806, 63
  %808 = icmp eq i64 %807, 0
  tail call void @llvm.assume(i1 %808) #5
  %809 = bitcast i8* %805 to float*
  br i1 %798, label %813, label %810

810:                                              ; preds = %1041, %799
  %811 = add nuw i64 %800, 1
  %812 = icmp ult i64 %811, %21
  br i1 %812, label %799, label %1159

813:                                              ; preds = %799, %1041
  %814 = phi i64 [ %1072, %1041 ], [ %22, %799 ]
  %815 = shl i64 %814, 3
  %816 = getelementptr inbounds float, float* %809, i64 %814
  %817 = load float, float* %816, align 4
  %818 = fmul float %817, 0x3FE7EC5FC0000000
  %819 = fcmp uno float %818, 0.000000e+00
  %820 = fcmp ogt float %818, 0x3F50624DE0000000
  %821 = select i1 %820, float %818, float 0x3F50624DE0000000
  %822 = select i1 %819, float 0x3F50624DE0000000, float %821
  %823 = fadd float %822, 0x407310A540000000
  %824 = fmul float %822, %822
  %825 = fadd float %824, 0x3FE18A6440000000
  %826 = load i8*, i8** %794, align 8
  %827 = load i64, i64* %795, align 8
  br label %828

828:                                              ; preds = %848, %813
  %829 = phi i64 [ 0, %813 ], [ %926, %848 ]
  %830 = phi float [ 0.000000e+00, %813 ], [ %925, %848 ]
  %831 = add i64 %829, %801
  %832 = mul i64 %831, %827
  %833 = getelementptr inbounds i8, i8* %826, i64 %832
  %834 = ptrtoint i8* %833 to i64
  %835 = and i64 %834, 63
  %836 = icmp eq i64 %835, 0
  tail call void @llvm.assume(i1 %836) #5
  %837 = bitcast i8* %833 to float*
  %838 = getelementptr inbounds float, float* %837, i64 %815
  %839 = icmp eq i64 %829, 7
  br i1 %839, label %848, label %840

840:                                              ; preds = %828
  %841 = add i64 %831, 1
  %842 = mul i64 %841, %827
  %843 = getelementptr inbounds i8, i8* %826, i64 %842
  %844 = ptrtoint i8* %843 to i64
  %845 = and i64 %844, 63
  %846 = icmp eq i64 %845, 0
  tail call void @llvm.assume(i1 %846) #5
  %847 = bitcast i8* %843 to float*
  br label %848

848:                                              ; preds = %840, %828
  %849 = phi float* [ %847, %840 ], [ %837, %828 ]
  %850 = getelementptr inbounds float, float* %849, i64 %815
  %851 = load float, float* %838, align 32, !alias.scope !382
  %852 = getelementptr inbounds float, float* %838, i64 1
  %853 = load float, float* %852, align 4, !alias.scope !385
  %854 = fsub float %851, %853
  %855 = tail call float @llvm.fabs.f32(float %854) #5
  %856 = fadd float %830, %855
  %857 = load float, float* %850, align 4, !alias.scope !390
  %858 = fsub float %851, %857
  %859 = tail call float @llvm.fabs.f32(float %858) #5
  %860 = fadd float %859, %856
  %861 = getelementptr inbounds float, float* %852, i64 1
  %862 = load float, float* %861, align 4, !alias.scope !385
  %863 = fsub float %853, %862
  %864 = tail call float @llvm.fabs.f32(float %863) #5
  %865 = fadd float %860, %864
  %866 = getelementptr inbounds float, float* %850, i64 1
  %867 = load float, float* %866, align 4, !alias.scope !390
  %868 = fsub float %853, %867
  %869 = tail call float @llvm.fabs.f32(float %868) #5
  %870 = fadd float %869, %865
  %871 = getelementptr inbounds float, float* %838, i64 2
  %872 = getelementptr inbounds float, float* %871, i64 1
  %873 = load float, float* %872, align 4, !alias.scope !385
  %874 = fsub float %862, %873
  %875 = tail call float @llvm.fabs.f32(float %874) #5
  %876 = fadd float %870, %875
  %877 = getelementptr inbounds float, float* %850, i64 2
  %878 = load float, float* %877, align 4, !alias.scope !390
  %879 = fsub float %862, %878
  %880 = tail call float @llvm.fabs.f32(float %879) #5
  %881 = fadd float %880, %876
  %882 = getelementptr inbounds float, float* %838, i64 3
  %883 = getelementptr inbounds float, float* %882, i64 1
  %884 = load float, float* %883, align 4, !alias.scope !385
  %885 = fsub float %873, %884
  %886 = tail call float @llvm.fabs.f32(float %885) #5
  %887 = fadd float %881, %886
  %888 = getelementptr inbounds float, float* %850, i64 3
  %889 = load float, float* %888, align 4, !alias.scope !390
  %890 = fsub float %873, %889
  %891 = tail call float @llvm.fabs.f32(float %890) #5
  %892 = fadd float %891, %887
  %893 = getelementptr inbounds float, float* %838, i64 4
  %894 = getelementptr inbounds float, float* %893, i64 1
  %895 = load float, float* %894, align 4, !alias.scope !385
  %896 = fsub float %884, %895
  %897 = tail call float @llvm.fabs.f32(float %896) #5
  %898 = fadd float %892, %897
  %899 = getelementptr inbounds float, float* %850, i64 4
  %900 = load float, float* %899, align 4, !alias.scope !390
  %901 = fsub float %884, %900
  %902 = tail call float @llvm.fabs.f32(float %901) #5
  %903 = fadd float %902, %898
  %904 = getelementptr inbounds float, float* %838, i64 5
  %905 = getelementptr inbounds float, float* %904, i64 1
  %906 = load float, float* %905, align 4, !alias.scope !385
  %907 = fsub float %895, %906
  %908 = tail call float @llvm.fabs.f32(float %907) #5
  %909 = fadd float %903, %908
  %910 = getelementptr inbounds float, float* %850, i64 5
  %911 = load float, float* %910, align 4, !alias.scope !390
  %912 = fsub float %895, %911
  %913 = tail call float @llvm.fabs.f32(float %912) #5
  %914 = fadd float %913, %909
  %915 = getelementptr inbounds float, float* %838, i64 6
  %916 = getelementptr inbounds float, float* %915, i64 1
  %917 = load float, float* %916, align 4, !alias.scope !393
  %918 = fsub float %906, %917
  %919 = tail call float @llvm.fabs.f32(float %918) #5
  %920 = fadd float %914, %919
  %921 = getelementptr inbounds float, float* %850, i64 6
  %922 = load float, float* %921, align 4, !alias.scope !390
  %923 = fsub float %906, %922
  %924 = tail call float @llvm.fabs.f32(float %923) #5
  %925 = fadd float %924, %920
  %926 = add nuw nsw i64 %829, 1
  %927 = icmp eq i64 %926, 8
  br i1 %927, label %928, label %828

928:                                              ; preds = %848
  %929 = fdiv float 1.000000e+00, %823
  %930 = fadd float %824, 0x40018A6440000000
  %931 = fdiv float 1.000000e+00, %930
  %932 = fmul float %931, 0x4014168F60000000
  %933 = load i8*, i8** %796, align 8
  %934 = load i64, i64* %797, align 8
  br label %935

935:                                              ; preds = %953, %928
  %936 = phi i64 [ 0, %928 ], [ %954, %953 ]
  %937 = phi float [ 0.000000e+00, %928 ], [ %983, %953 ]
  %938 = add i64 %936, %801
  %939 = mul i64 %938, %934
  %940 = getelementptr inbounds i8, i8* %933, i64 %939
  %941 = ptrtoint i8* %940 to i64
  %942 = and i64 %941, 63
  %943 = icmp eq i64 %942, 0
  tail call void @llvm.assume(i1 %943) #5
  %944 = bitcast i8* %940 to float*
  %945 = mul i64 %938, %827
  %946 = getelementptr inbounds i8, i8* %826, i64 %945
  %947 = ptrtoint i8* %946 to i64
  %948 = and i64 %947, 63
  %949 = icmp eq i64 %948, 0
  tail call void @llvm.assume(i1 %949) #5
  %950 = bitcast i8* %946 to float*
  %951 = getelementptr inbounds float, float* %950, i64 %815
  %952 = getelementptr inbounds float, float* %944, i64 %815
  br label %956

953:                                              ; preds = %956
  %954 = add nuw nsw i64 %936, 1
  %955 = icmp eq i64 %954, 8
  br i1 %955, label %986, label %935

956:                                              ; preds = %956, %935
  %957 = phi i64 [ 0, %935 ], [ %984, %956 ]
  %958 = phi float [ %937, %935 ], [ %983, %956 ]
  %959 = getelementptr inbounds float, float* %951, i64 %957
  %960 = load float, float* %959, align 4, !alias.scope !394
  %961 = fadd float %960, 0x3FC47AE140000000
  %962 = getelementptr inbounds float, float* %952, i64 %957
  %963 = load float, float* %962, align 4, !alias.scope !397
  %964 = insertelement <2 x float> undef, float %961, i32 0
  %965 = shufflevector <2 x float> %964, <2 x float> undef, <2 x i32> zeroinitializer
  %966 = insertelement <2 x float> undef, float %963, i32 0
  %967 = shufflevector <2 x float> %966, <2 x float> undef, <2 x i32> zeroinitializer
  %968 = fsub <2 x float> %965, %967
  %969 = fadd <2 x float> %965, %967
  %970 = shufflevector <2 x float> %968, <2 x float> %969, <2 x i32> <i32 0, i32 3>
  %971 = fcmp olt <2 x float> %970, zeroinitializer
  %972 = select <2 x i1> %971, <2 x float> zeroinitializer, <2 x float> %970
  %973 = fmul <2 x float> %972, %972
  %974 = fmul <2 x float> %973, <float 0x405DE18460000000, float 0x405DE18460000000>
  %975 = fmul <2 x float> %972, <float 0x406395E800000000, float 0x406395E800000000>
  %976 = fmul <2 x float> %975, %973
  %977 = fadd <2 x float> %976, <float 0x4013D09F20000000, float 0x4013D09F20000000>
  %978 = fdiv <2 x float> %974, %977
  %979 = extractelement <2 x float> %978, i32 0
  %980 = extractelement <2 x float> %978, i32 1
  %981 = fadd float %979, %980
  %982 = fmul float %981, 5.000000e-01
  %983 = fadd float %958, %982
  %984 = add nuw nsw i64 %957, 1
  %985 = icmp eq i64 %984, 8
  br i1 %985, label %953, label %956

986:                                              ; preds = %953
  %987 = fmul float %929, 0x4029CFE300000000
  %988 = fdiv float 1.000000e+00, %825
  %989 = fadd float %987, %932
  %990 = fmul float %988, 0x4009E1F280000000
  %991 = fadd float %990, %989
  %992 = fmul float %925, 0x3F92555BE0000000
  %993 = fadd float %991, 0xBFE7BC6A60000000
  %994 = fsub float %993, %992
  %995 = fmul float %983, 1.562500e-02
  %996 = bitcast float %995 to i32
  %997 = add i32 %996, -1059760811
  %998 = lshr i32 %997, 23
  %999 = ashr i32 %997, 31
  %1000 = shl nsw i32 %999, 8
  %1001 = or i32 %1000, %998
  %1002 = shl i32 %1001, 23
  %1003 = sub i32 %996, %1002
  %1004 = bitcast i32 %1003 to float
  %1005 = sitofp i32 %1001 to float
  %1006 = fadd float %1004, -1.000000e+00
  fence acq_rel
  %1007 = insertelement <2 x float> undef, float %1006, i32 0
  %1008 = shufflevector <2 x float> %1007, <2 x float> undef, <2 x i32> zeroinitializer
  %1009 = fmul <2 x float> %1008, <float 0x3FE7C238E0000000, float 0x3FC648B180000000>
  %1010 = fadd <2 x float> %1009, <float 0x3FF6DC0560000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %1011 = fmul <2 x float> %1008, %1010
  %1012 = fadd <2 x float> %1011, <float 0xBEBF0B5600000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %1013 = extractelement <2 x float> %1012, i32 0
  %1014 = extractelement <2 x float> %1012, i32 1
  %1015 = fdiv float %1013, %1014
  %1016 = fadd float %1015, %1005
  %1017 = fmul float %1016, 0x3FBB8D4100000000
  %1018 = fsub float %994, %1017
  %1019 = fmul float %1018, 0x3FF7154760000000
  %1020 = bitcast float %1019 to i32
  %1021 = fcmp olt float %1019, 0.000000e+00
  %1022 = lshr i32 %1020, 23
  %1023 = and i32 %1022, 255
  %1024 = add nsw i32 %1023, -127
  %1025 = icmp sgt i32 %1024, 22
  br i1 %1025, label %1041, label %1026

1026:                                             ; preds = %986
  %1027 = icmp slt i32 %1024, 0
  br i1 %1027, label %1028, label %1031

1028:                                             ; preds = %1026
  %1029 = select i1 %1021, float -1.000000e+00, float 0.000000e+00
  %1030 = bitcast float %1029 to i32
  br label %1041

1031:                                             ; preds = %1026
  %1032 = lshr i32 8388607, %1024
  %1033 = and i32 %1032, %1020
  %1034 = icmp eq i32 %1033, 0
  br i1 %1034, label %1041, label %1035

1035:                                             ; preds = %1031
  %1036 = lshr i32 8388608, %1024
  %1037 = select i1 %1021, i32 %1036, i32 0
  %1038 = add i32 %1037, %1020
  %1039 = ashr i32 -8388608, %1024
  %1040 = and i32 %1038, %1039
  br label %1041

1041:                                             ; preds = %1035, %1031, %1028, %986
  %1042 = phi i32 [ %1030, %1028 ], [ %1040, %1035 ], [ %1020, %986 ], [ %1020, %1031 ]
  %1043 = bitcast i32 %1042 to float
  %1044 = tail call float @llvm.fabs.f32(float %1043) #12
  %1045 = fcmp oeq float %1044, 0x7FF0000000000000
  %1046 = fpext float %1044 to double
  %1047 = fcmp ogt double %1046, 0x41DFFFFFFFC00000
  %1048 = or i1 %1045, %1047
  %1049 = icmp slt i32 %1042, 0
  %1050 = select i1 %1049, i32 0, i32 511
  %1051 = fptosi float %1043 to i32
  %1052 = select i1 %1048, i32 %1050, i32 %1051
  %1053 = shl i32 %1052, 23
  %1054 = add i32 %1053, 1065353216
  %1055 = bitcast i32 %1054 to float
  %1056 = fsub float %1019, %1043
  %1057 = fadd float %1056, 0x4024598D60000000
  %1058 = fmul float %1056, %1057
  %1059 = fadd float %1058, 0x40486F3420000000
  %1060 = fmul float %1056, %1059
  %1061 = fadd float %1060, 0x4058A33E00000000
  %1062 = fmul float %1061, %1055
  %1063 = fmul float %1056, 0x3FCAE93DC0000000
  %1064 = fadd float %1063, 0xBF96C437C0000000
  %1065 = fmul float %1056, %1064
  %1066 = fadd float %1065, 0xC033710620000000
  %1067 = fmul float %1056, %1066
  %1068 = fadd float %1067, 0x4058A33E20000000
  %1069 = fdiv float %1062, %1068
  %1070 = fmul float %787, %1069
  %1071 = fadd float %789, %1070
  store float %1071, float* %816, align 4
  %1072 = add nuw i64 %814, 1
  %1073 = icmp ult i64 %1072, %25
  br i1 %1073, label %813, label %810

1074:                                             ; preds = %1146, %355
  %1075 = phi i64 [ %26, %355 ], [ %1147, %1146 ]
  %1076 = phi i64 [ 0, %355 ], [ %1148, %1146 ]
  %1077 = add i64 %1076, %16
  %1078 = load i8*, i8** %356, align 8
  %1079 = load i64, i64* %357, align 8
  %1080 = mul i64 %1079, %1077
  %1081 = getelementptr inbounds i8, i8* %1078, i64 %1080
  %1082 = ptrtoint i8* %1081 to i64
  %1083 = and i64 %1082, 63
  %1084 = icmp eq i64 %1083, 0
  tail call void @llvm.assume(i1 %1084) #5
  %1085 = bitcast i8* %1081 to float*
  %1086 = getelementptr inbounds float, float* %1085, i64 %22
  %1087 = load i8*, i8** %358, align 8
  %1088 = load i64, i64* %359, align 8
  %1089 = mul i64 %1088, %1077
  %1090 = getelementptr inbounds i8, i8* %1087, i64 %1089
  %1091 = ptrtoint i8* %1090 to i64
  %1092 = and i64 %1091, 63
  %1093 = icmp eq i64 %1092, 0
  tail call void @llvm.assume(i1 %1093) #5
  %1094 = bitcast i8* %1090 to float*
  %1095 = getelementptr inbounds float, float* %1094, i64 %22
  %1096 = icmp eq i64 %1075, 0
  br i1 %1096, label %1146, label %1097

1097:                                             ; preds = %1074
  br i1 %366, label %1098, label %1100

1098:                                             ; preds = %1145, %1100, %1097
  %1099 = phi i64 [ 0, %1100 ], [ 0, %1097 ], [ %372, %1145 ]
  br label %1150

1100:                                             ; preds = %1097
  %1101 = getelementptr i8, i8* %1087, i64 %363
  %1102 = getelementptr i8, i8* %1101, i64 %1089
  %1103 = getelementptr i8, i8* %1087, i64 %371
  %1104 = getelementptr i8, i8* %1103, i64 %1089
  %1105 = getelementptr i8, i8* %1078, i64 %363
  %1106 = mul i64 %1079, %1077
  %1107 = getelementptr i8, i8* %1105, i64 %1106
  %1108 = getelementptr i8, i8* %1078, i64 %371
  %1109 = getelementptr i8, i8* %1108, i64 %1106
  %1110 = icmp ult i8* %1102, %1109
  %1111 = icmp ult i8* %1107, %1104
  %1112 = and i1 %1110, %1111
  br i1 %1112, label %1098, label %1113

1113:                                             ; preds = %1100
  br i1 %377, label %1135, label %1114

1114:                                             ; preds = %1113, %1114
  %1115 = phi i64 [ %1132, %1114 ], [ 0, %1113 ]
  %1116 = phi i64 [ %1133, %1114 ], [ %378, %1113 ]
  %1117 = getelementptr inbounds float, float* %1086, i64 %1115
  %1118 = bitcast float* %1117 to <4 x float>*
  %1119 = load <4 x float>, <4 x float>* %1118, align 32, !alias.scope !400
  %1120 = fadd <4 x float> %1119, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1121 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1120
  %1122 = getelementptr inbounds float, float* %1095, i64 %1115
  %1123 = bitcast float* %1122 to <4 x float>*
  store <4 x float> %1121, <4 x float>* %1123, align 32, !alias.scope !403, !noalias !400
  %1124 = or i64 %1115, 4
  %1125 = getelementptr inbounds float, float* %1086, i64 %1124
  %1126 = bitcast float* %1125 to <4 x float>*
  %1127 = load <4 x float>, <4 x float>* %1126, align 16, !alias.scope !400
  %1128 = fadd <4 x float> %1127, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1129 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1128
  %1130 = getelementptr inbounds float, float* %1095, i64 %1124
  %1131 = bitcast float* %1130 to <4 x float>*
  store <4 x float> %1129, <4 x float>* %1131, align 16, !alias.scope !403, !noalias !400
  %1132 = add i64 %1115, 8
  %1133 = add i64 %1116, -2
  %1134 = icmp eq i64 %1133, 0
  br i1 %1134, label %1135, label %1114, !llvm.loop !405

1135:                                             ; preds = %1114, %1113
  %1136 = phi i64 [ 0, %1113 ], [ %1132, %1114 ]
  br i1 %379, label %1145, label %1137

1137:                                             ; preds = %1135
  %1138 = getelementptr inbounds float, float* %1086, i64 %1136
  %1139 = bitcast float* %1138 to <4 x float>*
  %1140 = load <4 x float>, <4 x float>* %1139, align 16, !alias.scope !400
  %1141 = fadd <4 x float> %1140, <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>
  %1142 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1141
  %1143 = getelementptr inbounds float, float* %1095, i64 %1136
  %1144 = bitcast float* %1143 to <4 x float>*
  store <4 x float> %1142, <4 x float>* %1144, align 16, !alias.scope !403, !noalias !400
  br label %1145

1145:                                             ; preds = %1135, %1137
  br i1 %380, label %1146, label %1098

1146:                                             ; preds = %1150, %1145, %1074
  %1147 = phi i64 [ 0, %1074 ], [ %26, %1145 ], [ %26, %1150 ]
  %1148 = add nuw i64 %1076, 1
  %1149 = icmp ult i64 %1148, %27
  br i1 %1149, label %1074, label %741

1150:                                             ; preds = %1098, %1150
  %1151 = phi i64 [ %1157, %1150 ], [ %1099, %1098 ]
  %1152 = getelementptr inbounds float, float* %1086, i64 %1151
  %1153 = load float, float* %1152, align 4
  %1154 = fadd float %1153, 0x3FD99999A0000000
  %1155 = fdiv float 1.000000e+00, %1154
  %1156 = getelementptr inbounds float, float* %1095, i64 %1151
  store float %1155, float* %1156, align 4
  %1157 = add nuw i64 %1151, 1
  %1158 = icmp ult i64 %1157, %26
  br i1 %1158, label %1150, label %1146, !llvm.loop !406

1159:                                             ; preds = %810, %785
  ret void
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #13

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #13

declare void @_ZN3jxl9Quantizer13SetQuantFieldEfRKNS_5PlaneIfEEPNS1_IiEE(%"class.jxl::Quantizer"*, float, %"class.jxl::Plane.1"* dereferenceable(32), %"class.jxl::Plane.132"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl6AuxOut12DumpXybImageIfEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"*, i8*, %"class.jxl::Image3"* dereferenceable(96)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::basic_ostringstream", align 8
  %5 = alloca %"class.jxl::Image3", align 8
  %6 = alloca %"struct.jxl::OpsinParams", align 4
  %7 = alloca %"class.jxl::Rect", align 8
  %8 = alloca %"class.jxl::CodecInOut", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 2
  %11 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %11, i64 0, i32 2
  %13 = load i8, i8* %12, align 8, !range !9
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %196

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15
  %17 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  br label %26

24:                                               ; preds = %15
  %25 = zext i8 %19 to i64
  br label %26

26:                                               ; preds = %21, %24
  %27 = phi i64 [ %23, %21 ], [ %25, %24 ]
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %196, label %29

29:                                               ; preds = %26
  %30 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %30) #5
  %31 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1
  %32 = bitcast %"class.std::__1::basic_stringbuf"* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 256, i1 false)
  %33 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 2, i32 0, i32 0
  %34 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %33, align 8
  %35 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1
  %36 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %35, i64 0, i32 0
  %37 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8
  %38 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i64*
  store i64 %37, i64* %38, align 8
  %39 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8
  %40 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i8**
  %41 = inttoptr i64 %37 to i8*
  %42 = getelementptr i8, i8* %41, i64 -24
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds i8, i8* %30, i64 %44
  %46 = bitcast i8* %45 to i64*
  store i64 %39, i64* %46, align 8
  %47 = load i8*, i8** %40, align 8
  %48 = getelementptr i8, i8* %47, i64 -24
  %49 = bitcast i8* %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds i8, i8* %30, i64 %50
  %52 = bitcast i8* %51 to %"class.std::__1::ios_base"*
  %53 = bitcast %"class.std::__1::basic_stringbuf"* %35 to i8*
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %52, i8* %53) #5
  %54 = getelementptr inbounds i8, i8* %51, i64 136
  %55 = bitcast i8* %54 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %55, align 8
  %56 = getelementptr inbounds i8, i8* %51, i64 144
  %57 = bitcast i8* %56 to i32*
  store i32 -1, i32* %57, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %34, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %33, align 8
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %36) #5
  %58 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %35, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %58, align 8
  %59 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1, i32 1
  %60 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1, i32 3
  %61 = bitcast %"class.std::__1::basic_string"* %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 32, i1 false) #5
  store i32 16, i32* %60, align 8
  %62 = bitcast %"class.std::__1::basic_ostringstream"* %4 to %"class.std::__1::basic_ostream"*
  %63 = load i8, i8* %18, align 1
  %64 = icmp slt i8 %63, 0
  %65 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  %70 = zext i8 %63 to i64
  %71 = select i1 %64, i8* %66, i8* %69
  %72 = select i1 %64, i64 %68, i64 %70
  %73 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %62, i8* %71, i64 %72) #5
  %74 = call i64 @strlen(i8* %1) #5
  %75 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %73, i8* %1, i64 %74) #5
  %76 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %75, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0), i64 4) #5
  %77 = bitcast %"class.jxl::Image3"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %77) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %77, i8 -86, i64 96, i1 false)
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %84, i64 %80, i64 %83, i64 4) #5
  %85 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %85, i64 %80, i64 %83, i64 4) #5
  %86 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %86, i64 %80, i64 %83, i64 4) #5
  %87 = bitcast %"struct.jxl::OpsinParams"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %87) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %87, i8 -1, i64 192, i1 false)
  call void @_ZN3jxl11OpsinParams4InitEf(%"struct.jxl::OpsinParams"* nonnull %6, float 2.550000e+02) #5
  %88 = bitcast %"class.jxl::Rect"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %88) #5
  %89 = bitcast %"class.jxl::Image3"* %5 to <2 x i32>*
  %90 = load <2 x i32>, <2 x i32>* %89, align 8
  %91 = zext <2 x i32> %90 to <2 x i64>
  %92 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %7, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %88, i8 0, i64 16, i1 false) #5
  %93 = bitcast i64* %92 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %93, align 8
  call void @_ZN3jxl13OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS1_RKNS_11OpsinParamsE(%"class.jxl::Image3"* dereferenceable(96) %2, %"class.jxl::Rect"* nonnull dereferenceable(32) %7, %"class.jxl::ThreadPool"* null, %"class.jxl::Image3"* nonnull %5, %"struct.jxl::OpsinParams"* nonnull dereferenceable(192) %6) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %88) #5
  %94 = bitcast %"class.jxl::CodecInOut"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3416, i8* nonnull %94) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %94, i8* align 8 bitcast ({ %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.80", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::CustomTransformData" }, { %"class.std::__1::unique_ptr.3", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.87", i64 }, %"class.std::__1::vector.251", i8, [7 x i8], i64 }* @__const._ZNK3jxl6AuxOut9DumpImageIfEEvPKcRKNS_6Image3IT_EE.io to i8*), i64 3416, i1 false)
  call void @_ZN3jxl10CodecInOutC2Ev(%"class.jxl::CodecInOut"* nonnull %8)
  %95 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 3, i32 3
  store i32 16, i32* %95, align 4
  %96 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 3, i32 4
  store i32 0, i32* %96, align 8
  %97 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 3, i32 1
  store i8 0, i8* %97, align 8
  %98 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext false) #5
  %99 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7
  %100 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7, i32 1
  %101 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %98, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 12, i1 false) #5
  %102 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7, i32 4, i32 1
  %103 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %98, i64 0, i32 4, i32 1
  %104 = bitcast i32* %102 to i8*
  %105 = bitcast i32* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 16, i1 false) #5
  %106 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7, i32 5
  %107 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %98, i64 0, i32 5
  %108 = bitcast i32* %106 to i8*
  %109 = bitcast i32* %107 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %108, i8* align 8 %109, i64 6, i1 false) #5
  %110 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7, i32 8
  %111 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %98, i64 0, i32 8, i32 0
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7, i32 8, i32 1
  %114 = load i64, i64* %113, align 8
  %115 = icmp ult i64 %114, %112
  br i1 %115, label %116, label %117

116:                                              ; preds = %29
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %110, i64 %112) #5
  br label %117

117:                                              ; preds = %116, %29
  %118 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %119 = load i8*, i8** %118, align 8
  %120 = icmp eq i8* %119, null
  %121 = select i1 %120, i64 0, i64 %112
  %122 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %110, i64 0, i32 0
  store i64 %121, i64* %122, align 8
  br i1 %120, label %126, label %123

123:                                              ; preds = %117
  %124 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %98, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %119, i8* align 1 %125, i64 %121, i1 false) #5
  br label %126

126:                                              ; preds = %117, %123
  %127 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %98, i64 0, i32 9
  %128 = load i32, i32* %127, align 8
  %129 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7, i32 9
  store i32 %128, i32* %129, align 8
  %130 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7, i32 10, i32 1
  %131 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %98, i64 0, i32 10, i32 1
  %132 = bitcast i32* %131 to i64*
  %133 = bitcast i32* %130 to i64*
  %134 = load i64, i64* %132, align 8
  store i64 %134, i64* %133, align 8
  %135 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7, i32 11, i32 1
  %136 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %98, i64 0, i32 11, i32 1
  %137 = bitcast i32* %136 to i64*
  %138 = bitcast i32* %135 to i64*
  %139 = load i64, i64* %137, align 8
  store i64 %139, i64* %138, align 8
  %140 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7, i32 12, i32 1
  %141 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %98, i64 0, i32 12, i32 1
  %142 = bitcast i32* %141 to i64*
  %143 = bitcast i32* %140 to i64*
  %144 = load i64, i64* %142, align 8
  store i64 %144, i64* %143, align 8
  %145 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %8, i64 0, i32 6, i32 0, i32 7, i32 13, i32 1
  %146 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %98, i64 0, i32 13, i32 1
  %147 = bitcast i32* %146 to i64*
  %148 = bitcast i32* %145 to i64*
  %149 = load i64, i64* %147, align 8
  store i64 %149, i64* %148, align 8
  call void @_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::CodecInOut"* nonnull %8, %"class.jxl::Image3"* nonnull dereferenceable(96) %5, %"struct.jxl::ColorEncoding"* dereferenceable(152) %99)
  %150 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %150) #5
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* nonnull sret %9, %"class.std::__1::basic_stringbuf"* %35) #5
  %151 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 1, i32 0
  %152 = load i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)*, i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)** %151, align 8
  %153 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 0
  %154 = call i32 %152(%"union.std::__1::__function::__policy_storage"* %153, %"class.jxl::CodecInOut"* nonnull dereferenceable(3416) %8, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %9) #5
  %155 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %156 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %155, i64 0, i32 1, i32 0
  %157 = load i8, i8* %156, align 1
  %158 = icmp slt i8 %157, 0
  br i1 %158, label %159, label %162

159:                                              ; preds = %126
  %160 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %161 = load i8*, i8** %160, align 8
  call void @_ZdlPv(i8* %161) #25
  br label %162

162:                                              ; preds = %126, %159
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %150) #5
  call void @_ZN3jxl10CodecInOutD2Ev(%"class.jxl::CodecInOut"* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 3416, i8* nonnull %94) #5
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %87) #5
  %163 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %164 = load i8*, i8** %163, align 8
  store i8* null, i8** %163, align 8
  %165 = icmp eq i8* %164, null
  br i1 %165, label %167, label %166

166:                                              ; preds = %162
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %164) #5
  br label %167

167:                                              ; preds = %166, %162
  %168 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %169 = load i8*, i8** %168, align 8
  store i8* null, i8** %168, align 8
  %170 = icmp eq i8* %169, null
  br i1 %170, label %172, label %171

171:                                              ; preds = %167
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %169) #5
  br label %172

172:                                              ; preds = %171, %167
  %173 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %174 = load i8*, i8** %173, align 8
  store i8* null, i8** %173, align 8
  %175 = icmp eq i8* %174, null
  br i1 %175, label %177, label %176

176:                                              ; preds = %172
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %174) #5
  br label %177

177:                                              ; preds = %172, %176
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %77) #5
  %178 = load i64, i64* bitcast ([4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  store i64 %178, i64* %38, align 8
  %179 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %180 = inttoptr i64 %178 to i8*
  %181 = getelementptr i8, i8* %180, i64 -24
  %182 = bitcast i8* %181 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = getelementptr inbounds i8, i8* %30, i64 %183
  %185 = bitcast i8* %184 to i64*
  store i64 %179, i64* %185, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %58, align 8
  %186 = bitcast %"class.std::__1::basic_string"* %59 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %187 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %186, i64 0, i32 1, i32 0
  %188 = load i8, i8* %187, align 1
  %189 = icmp slt i8 %188, 0
  br i1 %189, label %190, label %193

190:                                              ; preds = %177
  %191 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %59, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %192 = load i8*, i8** %191, align 8
  call void @_ZdlPv(i8* %192) #25
  br label %193

193:                                              ; preds = %177, %190
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %36) #5
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* nonnull %62, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #5
  %194 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 2
  %195 = bitcast %"class.std::__1::basic_ios.base"* %194 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %195) #5
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %30) #5
  br label %196

196:                                              ; preds = %26, %3, %193
  ret void
}

declare void @_ZN3jxl11OpsinParams4InitEf(%"struct.jxl::OpsinParams"*, float) local_unnamed_addr #2

declare void @_ZN3jxl13OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS1_RKNS_11OpsinParamsE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"* dereferenceable(192)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10CodecInOutC2Ev(%"class.jxl::CodecInOut"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"struct.jxl::ImageMetadata"*, align 8
  %3 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 0, i32 0
  store i32 -1, i32* %3, align 8
  %4 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 0, i32 1
  store i32 -1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 0, i32 2
  store i64 4294967295, i64* %5, align 8
  %6 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0
  %8 = bitcast %"class.jxl::DecoderHints"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 136, i1 false)
  tail call void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"* %7) #5
  %9 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 1
  tail call void @_ZN3jxl10SizeHeaderC1Ev(%"class.jxl::SizeHeader"* %9) #5
  %10 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 2
  tail call void @_ZN3jxl19CustomTransformDataC1Ev(%"struct.jxl::CustomTransformData"* %10) #5
  %11 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7
  %12 = bitcast %"class.jxl::ImageBundle"* %11 to i64*
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 1
  store i32 1, i32* %13, align 8
  %14 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %14) #5
  %15 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 4, i32 0
  %16 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 8
  %17 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #5
  %18 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 9
  %19 = bitcast i32* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 14, i1 false) #5
  store %"struct.jxl::ImageMetadata"* %7, %"struct.jxl::ImageMetadata"** %18, align 8
  %20 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 10
  %21 = bitcast %"class.jxl::Image3"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 96, i1 false) #5
  %22 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %22) #5
  %23 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 12
  %24 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8
  %25 = bitcast %"class.std::__1::vector.87"* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 57, i1 false)
  tail call void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.251"* %24, i64 1)
  %26 = bitcast %"struct.jxl::ImageMetadata"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #5
  store %"struct.jxl::ImageMetadata"* %7, %"struct.jxl::ImageMetadata"** %2, align 8
  %27 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %28 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %27, align 8
  %29 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %30 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %29, align 8
  %31 = icmp ult %"class.jxl::ImageBundle"* %28, %30
  br i1 %31, label %32, label %51

32:                                               ; preds = %1
  %33 = ptrtoint %"struct.jxl::ImageMetadata"* %7 to i64
  %34 = bitcast %"class.jxl::ImageBundle"* %28 to i64*
  store i64 0, i64* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 1
  store i32 1, i32* %35, align 8
  %36 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %36) #5
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 4, i32 0
  %38 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 8
  %39 = bitcast %"class.std::__1::basic_string"* %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 24, i1 false) #5
  %40 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 9
  %41 = bitcast i32* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 14, i1 false) #5
  %42 = bitcast %"struct.jxl::ImageMetadata"** %40 to i64*
  store i64 %33, i64* %42, align 8
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 10
  %44 = bitcast %"class.jxl::Image3"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 96, i1 false) #5
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %45) #5
  %46 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 12
  %47 = bitcast %"class.std::__1::vector.87"* %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 32, i1 false) #5
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 1
  %49 = ptrtoint %"class.jxl::ImageBundle"* %48 to i64
  %50 = bitcast %"class.jxl::ImageBundle"** %27 to i64*
  store i64 %49, i64* %50, align 8
  br label %52

51:                                               ; preds = %1
  call void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_(%"class.std::__1::vector.251"* %24, %"struct.jxl::ImageMetadata"** nonnull dereferenceable(8) %2) #5
  br label %52

52:                                               ; preds = %32, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #5
  ret void
}

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::CodecInOut"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8
  %5 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %6 = bitcast %"class.jxl::ImageBundle"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.251"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %7, %9
  %11 = inttoptr i64 %9 to %"class.jxl::ImageBundle"*
  br i1 %10, label %23, label %12

12:                                               ; preds = %3
  %13 = sub i64 %7, %9
  %14 = sdiv exact i64 %13, 368
  br label %15

15:                                               ; preds = %20, %12
  %16 = phi i64 [ 0, %12 ], [ %21, %20 ]
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 %16, i32 5
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %15
  %21 = add nuw i64 %16, 1
  %22 = icmp ult i64 %21, %14
  br i1 %22, label %15, label %23

23:                                               ; preds = %15, %20, %3
  %24 = phi i64 [ 0, %3 ], [ %16, %20 ], [ %16, %15 ]
  %25 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 %24
  tail call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* %25, %"class.jxl::Image3"* dereferenceable(96) %1, %"struct.jxl::ColorEncoding"* dereferenceable(152) %2) #5
  tail call void @_ZN3jxl18SetIntensityTargetEPNS_10CodecInOutE(%"class.jxl::CodecInOut"* %0) #5
  %26 = load i64, i64* %6, align 8
  %27 = load i64, i64* %8, align 8
  %28 = icmp eq i64 %26, %27
  %29 = inttoptr i64 %27 to %"class.jxl::ImageBundle"*
  br i1 %28, label %41, label %30

30:                                               ; preds = %23
  %31 = sub i64 %26, %27
  %32 = sdiv exact i64 %31, 368
  br label %33

33:                                               ; preds = %38, %30
  %34 = phi i64 [ 0, %30 ], [ %39, %38 ]
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %34, i32 5
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = add nuw i64 %34, 1
  %40 = icmp ult i64 %39, %32
  br i1 %40, label %33, label %41

41:                                               ; preds = %33, %38, %23
  %42 = phi i64 [ 0, %23 ], [ %34, %38 ], [ %34, %33 ]
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 0, i32 0, i32 0, i32 0
  %44 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %43, align 8
  %45 = icmp eq %"struct.jxl::jpeg::JPEGData"* %44, null
  br i1 %45, label %50, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %44, i64 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = sext i32 %48 to i64
  br label %65

50:                                               ; preds = %41
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 10, i32 0, i64 0, i32 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = zext i32 %52 to i64
  %54 = icmp eq i32 %52, 0
  br i1 %54, label %55, label %65

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 12, i32 0, i32 0
  %57 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %56, align 8
  %58 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 12, i32 0, i32 1
  %59 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %58, align 8
  %60 = icmp eq %"class.jxl::Plane.1"* %57, %59
  br i1 %60, label %65, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %57, i64 0, i32 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = zext i32 %63 to i64
  br label %65

65:                                               ; preds = %46, %50, %55, %61
  %66 = phi i64 [ %49, %46 ], [ %64, %61 ], [ 0, %55 ], [ %53, %50 ]
  br i1 %28, label %78, label %67

67:                                               ; preds = %65
  %68 = sub i64 %26, %27
  %69 = sdiv exact i64 %68, 368
  br label %70

70:                                               ; preds = %75, %67
  %71 = phi i64 [ 0, %67 ], [ %76, %75 ]
  %72 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %71, i32 5
  %73 = load i32, i32* %72, align 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %70
  %76 = add nuw i64 %71, 1
  %77 = icmp ult i64 %76, %69
  br i1 %77, label %70, label %78

78:                                               ; preds = %70, %75, %65
  %79 = phi i64 [ 0, %65 ], [ %71, %75 ], [ %71, %70 ]
  %80 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 0, i32 0, i32 0, i32 0
  %81 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %80, align 8
  %82 = icmp eq %"struct.jxl::jpeg::JPEGData"* %81, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %81, i64 0, i32 2
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %85 to i64
  br label %102

87:                                               ; preds = %78
  %88 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 10, i32 0, i64 0, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = icmp eq i32 %89, 0
  br i1 %91, label %92, label %102

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 12, i32 0, i32 0
  %94 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %93, align 8
  %95 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 12, i32 0, i32 1
  %96 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %95, align 8
  %97 = icmp eq %"class.jxl::Plane.1"* %94, %96
  br i1 %97, label %102, label %98

98:                                               ; preds = %92
  %99 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %94, i64 0, i32 0, i32 1
  %100 = load i32, i32* %99, align 4
  %101 = zext i32 %100 to i64
  br label %102

102:                                              ; preds = %83, %87, %92, %98
  %103 = phi i64 [ %86, %83 ], [ %101, %98 ], [ 0, %92 ], [ %90, %87 ]
  %104 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 1
  %105 = tail call i32 @_ZN3jxl10SizeHeader3SetEmm(%"class.jxl::SizeHeader"* %104, i64 %66, i64 %103) #5
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %110, label %107

107:                                              ; preds = %102
  %108 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.26, i64 0, i64 0), i32 158, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.27, i64 0, i64 0)) #5
  %109 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

110:                                              ; preds = %102
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10CodecInOutD2Ev(%"class.jxl::CodecInOut"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8
  %3 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  %5 = icmp eq %"class.jxl::ImageBundle"* %4, null
  br i1 %5, label %20, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::ImageBundle"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %9 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %8, align 8
  %10 = icmp eq %"class.jxl::ImageBundle"* %9, %4
  br i1 %10, label %18, label %11

11:                                               ; preds = %6, %11
  %12 = phi %"class.jxl::ImageBundle"* [ %13, %11 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %12, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %13) #5
  %14 = icmp eq %"class.jxl::ImageBundle"* %13, %4
  br i1 %14, label %15, label %11

15:                                               ; preds = %11
  %16 = bitcast %"class.std::__1::vector.251"* %2 to i8**
  %17 = load i8*, i8** %16, align 8
  br label %18

18:                                               ; preds = %15, %6
  %19 = phi i8* [ %17, %15 ], [ %7, %6 ]
  store %"class.jxl::ImageBundle"* %4, %"class.jxl::ImageBundle"** %8, align 8
  tail call void @_ZdlPv(i8* %19) #25
  br label %20

20:                                               ; preds = %1, %18
  %21 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %21) #5
  %22 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 17
  %24 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %23, i64 0, i32 0, i32 0
  %25 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %24, align 8
  %26 = icmp eq %"struct.jxl::ExtraChannelInfo"* %25, null
  br i1 %26, label %44, label %27

27:                                               ; preds = %20
  %28 = bitcast %"struct.jxl::ExtraChannelInfo"* %25 to i8*
  %29 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 17, i32 0, i32 1
  %30 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %29, align 8
  %31 = icmp eq %"struct.jxl::ExtraChannelInfo"* %30, %25
  br i1 %31, label %42, label %32

32:                                               ; preds = %27, %32
  %33 = phi %"struct.jxl::ExtraChannelInfo"* [ %34, %32 ], [ %30, %27 ]
  %34 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %33, i64 -1
  %35 = bitcast %"struct.jxl::ExtraChannelInfo"* %34 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %36 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %35, align 8
  %37 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %36, align 8
  tail call void %37(%"struct.jxl::ExtraChannelInfo"* %34) #5
  %38 = icmp eq %"struct.jxl::ExtraChannelInfo"* %34, %25
  br i1 %38, label %39, label %32

39:                                               ; preds = %32
  %40 = bitcast %"class.std::__1::vector.80"* %23 to i8**
  %41 = load i8*, i8** %40, align 8
  br label %42

42:                                               ; preds = %39, %27
  %43 = phi i8* [ %41, %39 ], [ %28, %27 ]
  store %"struct.jxl::ExtraChannelInfo"* %25, %"struct.jxl::ExtraChannelInfo"** %29, align 8
  tail call void @_ZdlPv(i8* %43) #25
  br label %44

44:                                               ; preds = %42, %20
  %45 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %45, align 8
  %46 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  store i8* null, i8** %46, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %50, label %49

49:                                               ; preds = %44
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %47) #5
  br label %50

50:                                               ; preds = %44, %49
  %51 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 3, i32 2, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  store i8* null, i8** %51, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %55, label %54

54:                                               ; preds = %50
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %52) #5
  br label %55

55:                                               ; preds = %54, %50
  %56 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 2, i32 2, i32 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  store i8* null, i8** %56, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %55
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %57) #5
  br label %60

60:                                               ; preds = %59, %55
  %61 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 1, i32 2, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  store i8* null, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %60
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %62) #5
  br label %65

65:                                               ; preds = %64, %60
  %66 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  store i8* null, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %70, label %69

69:                                               ; preds = %65
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #5
  br label %70

70:                                               ; preds = %65, %69
  %71 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 1
  %72 = getelementptr inbounds %"class.jxl::DecoderHints", %"class.jxl::DecoderHints"* %71, i64 0, i32 0, i32 0, i32 0
  %73 = load %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"** %72, align 8
  %74 = icmp eq %"struct.jxl::DecoderHints::KeyValue"* %73, null
  br i1 %74, label %106, label %75

75:                                               ; preds = %70
  %76 = bitcast %"struct.jxl::DecoderHints::KeyValue"* %73 to i8*
  %77 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %78 = load %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"** %77, align 8
  %79 = icmp eq %"struct.jxl::DecoderHints::KeyValue"* %78, %73
  br i1 %79, label %104, label %80

80:                                               ; preds = %75, %99
  %81 = phi %"struct.jxl::DecoderHints::KeyValue"* [ %82, %99 ], [ %78, %75 ]
  %82 = getelementptr inbounds %"struct.jxl::DecoderHints::KeyValue", %"struct.jxl::DecoderHints::KeyValue"* %81, i64 -1
  %83 = getelementptr inbounds %"struct.jxl::DecoderHints::KeyValue", %"struct.jxl::DecoderHints::KeyValue"* %81, i64 -1, i32 1
  %84 = bitcast %"class.std::__1::basic_string"* %83 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %85 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %84, i64 0, i32 1, i32 0
  %86 = load i8, i8* %85, align 1
  %87 = icmp slt i8 %86, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %80
  %89 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  tail call void @_ZdlPv(i8* %90) #25
  br label %91

91:                                               ; preds = %88, %80
  %92 = bitcast %"struct.jxl::DecoderHints::KeyValue"* %82 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %93 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %92, i64 0, i32 1, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp slt i8 %94, 0
  br i1 %95, label %96, label %99

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"struct.jxl::DecoderHints::KeyValue", %"struct.jxl::DecoderHints::KeyValue"* %82, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  tail call void @_ZdlPv(i8* %98) #25
  br label %99

99:                                               ; preds = %96, %91
  %100 = icmp eq %"struct.jxl::DecoderHints::KeyValue"* %82, %73
  br i1 %100, label %101, label %80

101:                                              ; preds = %99
  %102 = bitcast %"class.jxl::DecoderHints"* %71 to i8**
  %103 = load i8*, i8** %102, align 8
  br label %104

104:                                              ; preds = %101, %75
  %105 = phi i8* [ %103, %101 ], [ %76, %75 ]
  store %"struct.jxl::DecoderHints::KeyValue"* %73, %"struct.jxl::DecoderHints::KeyValue"** %77, align 8
  tail call void @_ZdlPv(i8* %105) #25
  br label %106

106:                                              ; preds = %70, %104
  ret void
}

declare void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"*, i8*) local_unnamed_addr #2

declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #5
  %7 = load i8, i8* %6, align 8, !range !9
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #5
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #5
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #5
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #5
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #5
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #5
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #5
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #5
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #25
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #5
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #25
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #5
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #5
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #18

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #19

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #20

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #18

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #21

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.251"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.251"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 368
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.jxl::ImageBundle"*
  br i1 %10, label %12, label %55

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.jxl::ImageBundle"** %13 to i64*
  %15 = icmp ugt i64 %1, 50127021939428129
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #24
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 368
  %21 = mul i64 %1, 368
  %22 = tail call i8* @_Znwm(i64 %21) #25
  %23 = bitcast i8* %22 to %"class.jxl::ImageBundle"*
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %23, i64 %20
  %25 = ptrtoint %"class.jxl::ImageBundle"* %24 to i64
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %23, i64 %1
  %27 = ptrtoint %"class.jxl::ImageBundle"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.jxl::ImageBundle"*
  %29 = icmp eq %"class.jxl::ImageBundle"* %28, %11
  br i1 %29, label %41, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"class.jxl::ImageBundle"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"class.jxl::ImageBundle"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %31, i64 -1
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %32, i64 -1
  tail call void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"* %33, %"class.jxl::ImageBundle"* dereferenceable(368) %34) #5
  %35 = icmp eq %"class.jxl::ImageBundle"* %34, %11
  br i1 %35, label %36, label %30

36:                                               ; preds = %30
  %37 = ptrtoint %"class.jxl::ImageBundle"* %33 to i64
  %38 = load i64, i64* %6, align 8
  %39 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %13, align 8
  %40 = inttoptr i64 %38 to %"class.jxl::ImageBundle"*
  br label %41

41:                                               ; preds = %17, %36
  %42 = phi %"class.jxl::ImageBundle"* [ %40, %36 ], [ %28, %17 ]
  %43 = phi %"class.jxl::ImageBundle"* [ %39, %36 ], [ %11, %17 ]
  %44 = phi i64 [ %37, %36 ], [ %25, %17 ]
  %45 = phi i64 [ %38, %36 ], [ %18, %17 ]
  store i64 %44, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %46 = icmp eq %"class.jxl::ImageBundle"* %43, %42
  br i1 %46, label %51, label %47

47:                                               ; preds = %41, %47
  %48 = phi %"class.jxl::ImageBundle"* [ %49, %47 ], [ %43, %41 ]
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %48, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %49) #5
  %50 = icmp eq %"class.jxl::ImageBundle"* %49, %42
  br i1 %50, label %51, label %47

51:                                               ; preds = %47, %41
  %52 = icmp eq i64 %45, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %45 to i8*
  tail call void @_ZdlPv(i8* %54) #25
  br label %55

55:                                               ; preds = %53, %51, %2
  ret void
}

declare void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"*) unnamed_addr #2

declare void @_ZN3jxl10SizeHeaderC1Ev(%"class.jxl::SizeHeader"*) unnamed_addr #2

declare void @_ZN3jxl19CustomTransformDataC1Ev(%"struct.jxl::CustomTransformData"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"* dereferenceable(368)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %3, align 8
  %6 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %13 = bitcast [3 x i32]* %11 to i8*
  %14 = bitcast [3 x i32]* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 14, i1 false) #5
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 4
  %17 = bitcast %"struct.jxl::FrameOrigin"* %15 to i8*
  %18 = bitcast %"struct.jxl::FrameOrigin"* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 14, i1 false)
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 8
  %21 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  %22 = bitcast %"class.std::__1::basic_string"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #5
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %25 = bitcast %"struct.jxl::ImageMetadata"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"struct.jxl::ImageMetadata"** %23 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %29 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %30 = bitcast %"class.jxl::Image3"* %28 to i8*
  %31 = bitcast %"class.jxl::Image3"* %29 to i8*
  %32 = getelementptr %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %33 = bitcast %"class.std::__1::unique_ptr"* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 72, i1 false) #5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false) #5
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i8* null, i8** %35, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %32, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr"* %32 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq i8* %39, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %2
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #5
  br label %43

43:                                               ; preds = %42, %2
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %46 = bitcast %"class.jxl::Plane.1"* %45 to i8*
  %47 = bitcast %"class.jxl::Plane.1"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 24, i1 false) #5
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %43
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #5
  br label %58

58:                                               ; preds = %57, %43
  %59 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %61 = bitcast %"class.jxl::Plane.1"* %60 to i8*
  %62 = bitcast %"class.jxl::Plane.1"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false) #5
  %63 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i8* null, i8** %65, align 8
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %70, align 8
  %71 = icmp eq i8* %69, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %58
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %69) #5
  br label %73

73:                                               ; preds = %58, %72
  %74 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %75 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %76 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 12, i1 false) #5
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22CustomTransferFunctionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %78 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %80 = bitcast i32* %78 to i8*
  %81 = bitcast i32* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false) #5
  %82 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %83 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %84 = bitcast i32* %82 to i8*
  %85 = bitcast i32* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 6, i1 false) #5
  %86 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8
  %87 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 0
  %88 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %86, i64 0, i32 0
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %87, align 8
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %91 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 1
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %90, align 8
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2
  %94 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2
  %95 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %94, i64 0, i32 0, i32 0, i32 0
  %96 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i8* null, i8** %95, align 8
  %98 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  store i64 %97, i64* %98, align 8
  %99 = bitcast %"class.jxl::PaddedBytes"* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 16, i1 false) #5
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %100, align 8
  %103 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %106 = bitcast i32* %105 to i64*
  %107 = bitcast i32* %104 to i64*
  %108 = load i64, i64* %106, align 8
  store i64 %108, i64* %107, align 8
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %109, align 8
  %110 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %112 = bitcast i32* %111 to i64*
  %113 = bitcast i32* %110 to i64*
  %114 = load i64, i64* %112, align 8
  store i64 %114, i64* %113, align 8
  %115 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %115, align 8
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %118 = bitcast i32* %117 to i64*
  %119 = bitcast i32* %116 to i64*
  %120 = load i64, i64* %118, align 8
  store i64 %120, i64* %119, align 8
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %121, align 8
  %122 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %124 = bitcast i32* %123 to i64*
  %125 = bitcast i32* %122 to i64*
  %126 = load i64, i64* %124, align 8
  store i64 %126, i64* %125, align 8
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %128 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %129 = bitcast %"class.std::__1::vector.87"* %127 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %129, i8 0, i64 24, i1 false) #5
  %130 = bitcast %"class.std::__1::vector.87"* %128 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %"class.std::__1::vector.87"* %127 to i64*
  store i64 %131, i64* %132, align 8
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %134 = bitcast %"class.jxl::Plane.1"** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %137 = bitcast %"class.jxl::Plane.1"** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %139 = bitcast %"class.jxl::Plane.1"** %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %142 = bitcast %"class.jxl::Plane.1"** %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = bitcast %"class.std::__1::vector.87"* %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 24, i1 false) #5
  %144 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 13
  %145 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 13
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %144, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #5
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #5
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #22

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_(%"class.std::__1::vector.251"*, %"struct.jxl::ImageMetadata"** dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::ImageBundle"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.251"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 368
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 50127021939428129
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.251"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #24
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::ImageBundle"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 368
  %20 = icmp ult i64 %19, 25063510969714064
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 50127021939428129, %14 ]
  %28 = mul i64 %27, 368
  %29 = tail call i8* @_Znwm(i64 %28) #25
  %30 = bitcast i8* %29 to %"class.jxl::ImageBundle"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.jxl::ImageBundle"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %32
  %36 = ptrtoint %"class.jxl::ImageBundle"* %35 to i64
  %37 = bitcast %"struct.jxl::ImageMetadata"** %1 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.jxl::ImageBundle"* %34 to i64*
  store i64 0, i64* %39, align 8
  %40 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 1
  store i32 1, i32* %40, align 8
  %41 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %41) #5
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 4, i32 0
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 8
  %44 = bitcast %"class.std::__1::basic_string"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #5
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 9
  %46 = bitcast i32* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 14, i1 false) #5
  %47 = bitcast %"struct.jxl::ImageMetadata"** %45 to i64*
  store i64 %38, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 10
  %49 = bitcast %"class.jxl::Image3"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 96, i1 false) #5
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %50) #5
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 12
  %52 = bitcast %"class.std::__1::vector.87"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 32, i1 false) #5
  %53 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 1
  %54 = ptrtoint %"class.jxl::ImageBundle"* %53 to i64
  %55 = getelementptr inbounds %"class.std::__1::vector.251", %"class.std::__1::vector.251"* %0, i64 0, i32 0, i32 0
  %56 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %55, align 8
  %57 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  %58 = icmp eq %"class.jxl::ImageBundle"* %57, %56
  br i1 %58, label %59, label %61

59:                                               ; preds = %31
  %60 = ptrtoint %"class.jxl::ImageBundle"* %56 to i64
  br label %70

61:                                               ; preds = %31, %61
  %62 = phi %"class.jxl::ImageBundle"* [ %64, %61 ], [ %34, %31 ]
  %63 = phi %"class.jxl::ImageBundle"* [ %65, %61 ], [ %57, %31 ]
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %62, i64 -1
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %63, i64 -1
  tail call void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"* %64, %"class.jxl::ImageBundle"* dereferenceable(368) %65) #5
  %66 = icmp eq %"class.jxl::ImageBundle"* %65, %56
  br i1 %66, label %67, label %61

67:                                               ; preds = %61
  %68 = load i64, i64* %6, align 8
  %69 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  br label %70

70:                                               ; preds = %59, %67
  %71 = phi %"class.jxl::ImageBundle"* [ %56, %59 ], [ %69, %67 ]
  %72 = phi %"class.jxl::ImageBundle"* [ %34, %59 ], [ %64, %67 ]
  %73 = phi i64 [ %60, %59 ], [ %68, %67 ]
  %74 = ptrtoint %"class.jxl::ImageBundle"* %72 to i64
  store i64 %74, i64* %6, align 8
  store i64 %54, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %75 = inttoptr i64 %73 to %"class.jxl::ImageBundle"*
  %76 = icmp eq %"class.jxl::ImageBundle"* %71, %75
  br i1 %76, label %81, label %77

77:                                               ; preds = %70, %77
  %78 = phi %"class.jxl::ImageBundle"* [ %79, %77 ], [ %71, %70 ]
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %78, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %79) #5
  %80 = icmp eq %"class.jxl::ImageBundle"* %79, %75
  br i1 %80, label %81, label %77

81:                                               ; preds = %77, %70
  %82 = icmp eq i64 %73, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %81
  %84 = inttoptr i64 %73 to i8*
  tail call void @_ZdlPv(i8* %84) #25
  br label %85

85:                                               ; preds = %81, %83
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #2

declare void @_ZN3jxl18SetIntensityTargetEPNS_10CodecInOutE(%"class.jxl::CodecInOut"*) local_unnamed_addr #2

declare i32 @_ZN3jxl10SizeHeader3SetEmm(%"class.jxl::SizeHeader"*, i64, i64) local_unnamed_addr #2

declare void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_stringbuf"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #18

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"*, i8**) unnamed_addr #18

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #18

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"*, i64, i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #6

declare void @_ZN3jxl24JxlButteraugliComparatorC1ERKNS_17ButteraugliParamsE(%"class.jxl::JxlButteraugliComparator"*, %"struct.jxl::ButteraugliParams"* dereferenceable(16)) unnamed_addr #2

declare i32 @_ZN3jxl24JxlButteraugliComparator17SetReferenceImageERKNS_11ImageBundleE(%"class.jxl::JxlButteraugliComparator"*, %"class.jxl::ImageBundle"* dereferenceable(368)) unnamed_addr #2

declare float @_ZNK3jxl24JxlButteraugliComparator16GoodQualityScoreEv(%"class.jxl::JxlButteraugliComparator"*) unnamed_addr #2

declare float @_ZNK3jxl24JxlButteraugliComparator15BadQualityScoreEv(%"class.jxl::JxlButteraugliComparator"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane.1"* noalias sret, %"class.jxl::Plane.1"* dereferenceable(32)) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %0, i64 0, i32 0, i32 4
  %5 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.jxl::Plane.1"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 32, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %13, i64 %9, i64 %12, i64 4) #5
  %14 = load i32, i32* %6, align 8, !noalias !407
  %15 = load i32, i32* %3, align 8, !alias.scope !407
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %10, align 4, !noalias !407
  %20 = load i32, i32* %18, align 4, !alias.scope !407
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17, %2
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.40, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.41, i64 0, i64 0)) #5, !noalias !407
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24, !noalias !407
  unreachable

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  %27 = icmp eq i32 %14, 0
  %28 = or i1 %27, %26
  br i1 %28, label %66, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %1, i64 0, i32 0, i32 4
  %32 = load i8*, i8** %5, align 8, !alias.scope !407
  %33 = load i64, i64* %4, align 8, !alias.scope !407
  %34 = load i8*, i8** %30, align 8, !noalias !407
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #5, !noalias !407
  %38 = ptrtoint i8* %32 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #5, !noalias !407
  %41 = zext i32 %14 to i64
  %42 = shl nuw nsw i64 %41, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %32, i8* align 64 %34, i64 %42, i1 false) #5, !noalias !407
  %43 = load i32, i32* %10, align 4, !noalias !407
  %44 = icmp ugt i32 %43, 1
  br i1 %44, label %45, label %66

45:                                               ; preds = %29, %45
  %46 = phi i64 [ %62, %45 ], [ 1, %29 ]
  %47 = load i32, i32* %6, align 8, !noalias !407
  %48 = load i8*, i8** %30, align 8, !noalias !407
  %49 = load i64, i64* %31, align 8, !noalias !407
  %50 = mul i64 %49, %46
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #5, !noalias !407
  %55 = mul i64 %46, %33
  %56 = getelementptr inbounds i8, i8* %32, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #5, !noalias !407
  %60 = zext i32 %47 to i64
  %61 = shl nuw nsw i64 %60, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %56, i8* align 64 %51, i64 %61, i1 false) #5, !noalias !407
  %62 = add nuw nsw i64 %46, 1
  %63 = load i32, i32* %10, align 4, !noalias !407
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %45, label %66

66:                                               ; preds = %45, %29, %25
  ret void
}

declare i32 @_ZN3jxl24JxlButteraugliComparator11CompareWithERKNS_11ImageBundleEPNS_5PlaneIfEEPf(%"class.jxl::JxlButteraugliComparator"*, %"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::Plane.1"*, float*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl6AuxOut9DumpImageIfEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"*, i8*, %"class.jxl::Image3"* dereferenceable(96)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::basic_ostringstream", align 8
  %5 = alloca %"class.jxl::CodecInOut", align 8
  %6 = alloca %"class.jxl::Image3", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 2
  %9 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %8, align 8
  %10 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %9, i64 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !9
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %178

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15
  %15 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  br label %24

22:                                               ; preds = %13
  %23 = zext i8 %17 to i64
  br label %24

24:                                               ; preds = %19, %22
  %25 = phi i64 [ %21, %19 ], [ %23, %22 ]
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %178, label %27

27:                                               ; preds = %24
  %28 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %28) #5
  %29 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1
  %30 = bitcast %"class.std::__1::basic_stringbuf"* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 256, i1 false)
  %31 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 2, i32 0, i32 0
  %32 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %31, align 8
  %33 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1
  %34 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %33, i64 0, i32 0
  %35 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8
  %36 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i64*
  store i64 %35, i64* %36, align 8
  %37 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8
  %38 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i8**
  %39 = inttoptr i64 %35 to i8*
  %40 = getelementptr i8, i8* %39, i64 -24
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds i8, i8* %28, i64 %42
  %44 = bitcast i8* %43 to i64*
  store i64 %37, i64* %44, align 8
  %45 = load i8*, i8** %38, align 8
  %46 = getelementptr i8, i8* %45, i64 -24
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds i8, i8* %28, i64 %48
  %50 = bitcast i8* %49 to %"class.std::__1::ios_base"*
  %51 = bitcast %"class.std::__1::basic_stringbuf"* %33 to i8*
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %50, i8* %51) #5
  %52 = getelementptr inbounds i8, i8* %49, i64 136
  %53 = bitcast i8* %52 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %53, align 8
  %54 = getelementptr inbounds i8, i8* %49, i64 144
  %55 = bitcast i8* %54 to i32*
  store i32 -1, i32* %55, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %32, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %31, align 8
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %34) #5
  %56 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %33, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %57 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1, i32 1
  %58 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1, i32 3
  %59 = bitcast %"class.std::__1::basic_string"* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 32, i1 false) #5
  store i32 16, i32* %58, align 8
  %60 = bitcast %"class.std::__1::basic_ostringstream"* %4 to %"class.std::__1::basic_ostream"*
  %61 = load i8, i8* %16, align 1
  %62 = icmp slt i8 %61, 0
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  %68 = zext i8 %61 to i64
  %69 = select i1 %62, i8* %64, i8* %67
  %70 = select i1 %62, i64 %66, i64 %68
  %71 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %60, i8* %69, i64 %70) #5
  %72 = call i64 @strlen(i8* %1) #5
  %73 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %71, i8* %1, i64 %72) #5
  %74 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %73, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0), i64 4) #5
  %75 = bitcast %"class.jxl::CodecInOut"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3416, i8* nonnull %75) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %75, i8* align 8 bitcast ({ %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.80", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::CustomTransformData" }, { %"class.std::__1::unique_ptr.3", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.87", i64 }, %"class.std::__1::vector.251", i8, [7 x i8], i64 }* @__const._ZNK3jxl6AuxOut9DumpImageIfEEvPKcRKNS_6Image3IT_EE.io to i8*), i64 3416, i1 false)
  call void @_ZN3jxl10CodecInOutC2Ev(%"class.jxl::CodecInOut"* nonnull %5)
  %76 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 3, i32 3
  store i32 16, i32* %76, align 4
  %77 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 3, i32 4
  store i32 0, i32* %77, align 8
  %78 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 3, i32 1
  store i8 0, i8* %78, align 8
  %79 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext false) #5
  %80 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7
  %81 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 1
  %82 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 12, i1 false) #5
  %83 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 4, i32 1
  %84 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 4, i32 1
  %85 = bitcast i32* %83 to i8*
  %86 = bitcast i32* %84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 16, i1 false) #5
  %87 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 5
  %88 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 5
  %89 = bitcast i32* %87 to i8*
  %90 = bitcast i32* %88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 6, i1 false) #5
  %91 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 8
  %92 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 8, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 8, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = icmp ult i64 %95, %93
  br i1 %96, label %97, label %98

97:                                               ; preds = %27
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %91, i64 %93) #5
  br label %98

98:                                               ; preds = %97, %27
  %99 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %100 = load i8*, i8** %99, align 8
  %101 = icmp eq i8* %100, null
  %102 = select i1 %101, i64 0, i64 %93
  %103 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %91, i64 0, i32 0
  store i64 %102, i64* %103, align 8
  br i1 %101, label %107, label %104

104:                                              ; preds = %98
  %105 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %100, i8* align 1 %106, i64 %102, i1 false) #5
  br label %107

107:                                              ; preds = %98, %104
  %108 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 9
  %109 = load i32, i32* %108, align 8
  %110 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 9
  store i32 %109, i32* %110, align 8
  %111 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 10, i32 1
  %112 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 10, i32 1
  %113 = bitcast i32* %112 to i64*
  %114 = bitcast i32* %111 to i64*
  %115 = load i64, i64* %113, align 8
  store i64 %115, i64* %114, align 8
  %116 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 11, i32 1
  %117 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 11, i32 1
  %118 = bitcast i32* %117 to i64*
  %119 = bitcast i32* %116 to i64*
  %120 = load i64, i64* %118, align 8
  store i64 %120, i64* %119, align 8
  %121 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 12, i32 1
  %122 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 12, i32 1
  %123 = bitcast i32* %122 to i64*
  %124 = bitcast i32* %121 to i64*
  %125 = load i64, i64* %123, align 8
  store i64 %125, i64* %124, align 8
  %126 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 13, i32 1
  %127 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 13, i32 1
  %128 = bitcast i32* %127 to i64*
  %129 = bitcast i32* %126 to i64*
  %130 = load i64, i64* %128, align 8
  store i64 %130, i64* %129, align 8
  %131 = bitcast %"class.jxl::Image3"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %131) #5
  call void @_ZN3jxl14ConvertToFloatIfEENS_6Image3IfEERKNS1_IT_EE(%"class.jxl::Image3"* nonnull sret %6, %"class.jxl::Image3"* dereferenceable(96) %2)
  call void @_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::CodecInOut"* nonnull %5, %"class.jxl::Image3"* nonnull dereferenceable(96) %6, %"struct.jxl::ColorEncoding"* dereferenceable(152) %80)
  %132 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %133 = load i8*, i8** %132, align 8
  store i8* null, i8** %132, align 8
  %134 = icmp eq i8* %133, null
  br i1 %134, label %136, label %135

135:                                              ; preds = %107
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %133) #5
  br label %136

136:                                              ; preds = %135, %107
  %137 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %138 = load i8*, i8** %137, align 8
  store i8* null, i8** %137, align 8
  %139 = icmp eq i8* %138, null
  br i1 %139, label %141, label %140

140:                                              ; preds = %136
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %138) #5
  br label %141

141:                                              ; preds = %140, %136
  %142 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  store i8* null, i8** %142, align 8
  %144 = icmp eq i8* %143, null
  br i1 %144, label %146, label %145

145:                                              ; preds = %141
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %143) #5
  br label %146

146:                                              ; preds = %141, %145
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %131) #5
  %147 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %147) #5
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* nonnull sret %7, %"class.std::__1::basic_stringbuf"* %33) #5
  %148 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 1, i32 0
  %149 = load i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)*, i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)** %148, align 8
  %150 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 0
  %151 = call i32 %149(%"union.std::__1::__function::__policy_storage"* %150, %"class.jxl::CodecInOut"* nonnull dereferenceable(3416) %5, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7) #5
  %152 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %153 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %152, i64 0, i32 1, i32 0
  %154 = load i8, i8* %153, align 1
  %155 = icmp slt i8 %154, 0
  br i1 %155, label %156, label %159

156:                                              ; preds = %146
  %157 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load i8*, i8** %157, align 8
  call void @_ZdlPv(i8* %158) #25
  br label %159

159:                                              ; preds = %146, %156
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %147) #5
  call void @_ZN3jxl10CodecInOutD2Ev(%"class.jxl::CodecInOut"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 3416, i8* nonnull %75) #5
  %160 = load i64, i64* bitcast ([4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  store i64 %160, i64* %36, align 8
  %161 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %162 = inttoptr i64 %160 to i8*
  %163 = getelementptr i8, i8* %162, i64 -24
  %164 = bitcast i8* %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds i8, i8* %28, i64 %165
  %167 = bitcast i8* %166 to i64*
  store i64 %161, i64* %167, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %168 = bitcast %"class.std::__1::basic_string"* %57 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %169 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %168, i64 0, i32 1, i32 0
  %170 = load i8, i8* %169, align 1
  %171 = icmp slt i8 %170, 0
  br i1 %171, label %172, label %175

172:                                              ; preds = %159
  %173 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %57, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load i8*, i8** %173, align 8
  call void @_ZdlPv(i8* %174) #25
  br label %175

175:                                              ; preds = %159, %172
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %34) #5
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* nonnull %60, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #5
  %176 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 2
  %177 = bitcast %"class.std::__1::basic_ios.base"* %176 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %177) #5
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %28) #5
  br label %178

178:                                              ; preds = %24, %3, %175
  ret void
}

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #6

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl14ConvertToFloatIfEENS_6Image3IfEERKNS1_IT_EE(%"class.jxl::Image3"* noalias sret, %"class.jxl::Image3"* dereferenceable(96)) local_unnamed_addr #0 comdat {
  %3 = alloca %"class.jxl::Plane.1", align 8
  %4 = alloca %"class.jxl::Plane.1", align 8
  %5 = alloca %"class.jxl::Plane.1", align 8
  %6 = bitcast %"class.jxl::Plane.1"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #5
  %7 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 4
  %8 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false) #5, !alias.scope !410
  %10 = load i32, i32* %9, align 8, !noalias !410
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4, !noalias !410
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %15, i64 %11, i64 %14, i64 4) #5
  %16 = load i32, i32* %12, align 4, !noalias !410
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %62, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %21 = load i32, i32* %9, align 8, !noalias !410
  br label %22

22:                                               ; preds = %45, %18
  %23 = phi i32 [ %16, %18 ], [ %46, %45 ]
  %24 = phi i32 [ %21, %18 ], [ %47, %45 ]
  %25 = phi i64 [ 0, %18 ], [ %48, %45 ]
  %26 = load i8*, i8** %19, align 8, !noalias !410
  %27 = load i64, i64* %20, align 8, !noalias !410
  %28 = mul i64 %27, %25
  %29 = getelementptr inbounds i8, i8* %26, i64 %28
  %30 = ptrtoint i8* %29 to i64
  %31 = and i64 %30, 63
  %32 = icmp eq i64 %31, 0
  call void @llvm.assume(i1 %32) #5
  %33 = bitcast i8* %29 to float*
  %34 = load i8*, i8** %8, align 8, !alias.scope !410
  %35 = load i64, i64* %7, align 8, !alias.scope !410
  %36 = mul i64 %35, %25
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  %38 = ptrtoint i8* %37 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  call void @llvm.assume(i1 %40) #5
  %41 = bitcast i8* %37 to float*
  %42 = icmp eq i32 %24, 0
  br i1 %42, label %45, label %51

43:                                               ; preds = %51
  %44 = load i32, i32* %12, align 4, !noalias !410
  br label %45

45:                                               ; preds = %43, %22
  %46 = phi i32 [ %44, %43 ], [ %23, %22 ]
  %47 = phi i32 [ %59, %43 ], [ 0, %22 ]
  %48 = add nuw nsw i64 %25, 1
  %49 = zext i32 %46 to i64
  %50 = icmp ult i64 %48, %49
  br i1 %50, label %22, label %62

51:                                               ; preds = %22, %51
  %52 = phi i64 [ %58, %51 ], [ 0, %22 ]
  %53 = getelementptr inbounds float, float* %33, i64 %52
  %54 = bitcast float* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds float, float* %41, i64 %52
  %57 = bitcast float* %56 to i32*
  store i32 %55, i32* %57, align 4
  %58 = add nuw nsw i64 %52, 1
  %59 = load i32, i32* %9, align 8, !noalias !410
  %60 = zext i32 %59 to i64
  %61 = icmp ult i64 %58, %60
  br i1 %61, label %51, label %43

62:                                               ; preds = %45, %2
  %63 = bitcast %"class.jxl::Plane.1"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %63) #5
  %64 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %4, i64 0, i32 0, i32 4
  %65 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %4, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -86, i64 32, i1 false) #5, !alias.scope !413
  %67 = load i32, i32* %66, align 8, !noalias !413
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 1
  %70 = load i32, i32* %69, align 4, !noalias !413
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %4, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %72, i64 %68, i64 %71, i64 4) #5
  %73 = load i32, i32* %69, align 4, !noalias !413
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %119, label %75

75:                                               ; preds = %62
  %76 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %78 = load i32, i32* %66, align 8, !noalias !413
  br label %79

79:                                               ; preds = %102, %75
  %80 = phi i32 [ %73, %75 ], [ %103, %102 ]
  %81 = phi i32 [ %78, %75 ], [ %104, %102 ]
  %82 = phi i64 [ 0, %75 ], [ %105, %102 ]
  %83 = load i8*, i8** %76, align 8, !noalias !413
  %84 = load i64, i64* %77, align 8, !noalias !413
  %85 = mul i64 %84, %82
  %86 = getelementptr inbounds i8, i8* %83, i64 %85
  %87 = ptrtoint i8* %86 to i64
  %88 = and i64 %87, 63
  %89 = icmp eq i64 %88, 0
  call void @llvm.assume(i1 %89) #5
  %90 = bitcast i8* %86 to float*
  %91 = load i8*, i8** %65, align 8, !alias.scope !413
  %92 = load i64, i64* %64, align 8, !alias.scope !413
  %93 = mul i64 %92, %82
  %94 = getelementptr inbounds i8, i8* %91, i64 %93
  %95 = ptrtoint i8* %94 to i64
  %96 = and i64 %95, 63
  %97 = icmp eq i64 %96, 0
  call void @llvm.assume(i1 %97) #5
  %98 = bitcast i8* %94 to float*
  %99 = icmp eq i32 %81, 0
  br i1 %99, label %102, label %108

100:                                              ; preds = %108
  %101 = load i32, i32* %69, align 4, !noalias !413
  br label %102

102:                                              ; preds = %100, %79
  %103 = phi i32 [ %101, %100 ], [ %80, %79 ]
  %104 = phi i32 [ %116, %100 ], [ 0, %79 ]
  %105 = add nuw nsw i64 %82, 1
  %106 = zext i32 %103 to i64
  %107 = icmp ult i64 %105, %106
  br i1 %107, label %79, label %119

108:                                              ; preds = %79, %108
  %109 = phi i64 [ %115, %108 ], [ 0, %79 ]
  %110 = getelementptr inbounds float, float* %90, i64 %109
  %111 = bitcast float* %110 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds float, float* %98, i64 %109
  %114 = bitcast float* %113 to i32*
  store i32 %112, i32* %114, align 4
  %115 = add nuw nsw i64 %109, 1
  %116 = load i32, i32* %66, align 8, !noalias !413
  %117 = zext i32 %116 to i64
  %118 = icmp ult i64 %115, %117
  br i1 %118, label %108, label %100

119:                                              ; preds = %102, %62
  %120 = bitcast %"class.jxl::Plane.1"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %120) #5
  %121 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %5, i64 0, i32 0, i32 4
  %122 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %5, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %123 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %120, i8 -86, i64 32, i1 false) #5, !alias.scope !416
  %124 = load i32, i32* %123, align 8, !noalias !416
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 1
  %127 = load i32, i32* %126, align 4, !noalias !416
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %5, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %129, i64 %125, i64 %128, i64 4) #5
  %130 = load i32, i32* %126, align 4, !noalias !416
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %176, label %132

132:                                              ; preds = %119
  %133 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %134 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %135 = load i32, i32* %123, align 8, !noalias !416
  br label %136

136:                                              ; preds = %159, %132
  %137 = phi i32 [ %130, %132 ], [ %160, %159 ]
  %138 = phi i32 [ %135, %132 ], [ %161, %159 ]
  %139 = phi i64 [ 0, %132 ], [ %162, %159 ]
  %140 = load i8*, i8** %133, align 8, !noalias !416
  %141 = load i64, i64* %134, align 8, !noalias !416
  %142 = mul i64 %141, %139
  %143 = getelementptr inbounds i8, i8* %140, i64 %142
  %144 = ptrtoint i8* %143 to i64
  %145 = and i64 %144, 63
  %146 = icmp eq i64 %145, 0
  call void @llvm.assume(i1 %146) #5
  %147 = bitcast i8* %143 to float*
  %148 = load i8*, i8** %122, align 8, !alias.scope !416
  %149 = load i64, i64* %121, align 8, !alias.scope !416
  %150 = mul i64 %149, %139
  %151 = getelementptr inbounds i8, i8* %148, i64 %150
  %152 = ptrtoint i8* %151 to i64
  %153 = and i64 %152, 63
  %154 = icmp eq i64 %153, 0
  call void @llvm.assume(i1 %154) #5
  %155 = bitcast i8* %151 to float*
  %156 = icmp eq i32 %138, 0
  br i1 %156, label %159, label %165

157:                                              ; preds = %165
  %158 = load i32, i32* %126, align 4, !noalias !416
  br label %159

159:                                              ; preds = %157, %136
  %160 = phi i32 [ %158, %157 ], [ %137, %136 ]
  %161 = phi i32 [ %173, %157 ], [ 0, %136 ]
  %162 = add nuw nsw i64 %139, 1
  %163 = zext i32 %160 to i64
  %164 = icmp ult i64 %162, %163
  br i1 %164, label %136, label %176

165:                                              ; preds = %136, %165
  %166 = phi i64 [ %172, %165 ], [ 0, %136 ]
  %167 = getelementptr inbounds float, float* %147, i64 %166
  %168 = bitcast float* %167 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = getelementptr inbounds float, float* %155, i64 %166
  %171 = bitcast float* %170 to i32*
  store i32 %169, i32* %171, align 4
  %172 = add nuw nsw i64 %166, 1
  %173 = load i32, i32* %123, align 8, !noalias !416
  %174 = zext i32 %173 to i64
  %175 = icmp ult i64 %172, %174
  br i1 %175, label %165, label %157

176:                                              ; preds = %159, %119
  call void @_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_(%"class.jxl::Image3"* %0, %"class.jxl::Plane.1"* nonnull dereferenceable(32) %3, %"class.jxl::Plane.1"* nonnull dereferenceable(32) %4, %"class.jxl::Plane.1"* nonnull dereferenceable(32) %5)
  %177 = load i8*, i8** %122, align 8
  store i8* null, i8** %122, align 8
  %178 = icmp eq i8* %177, null
  br i1 %178, label %180, label %179

179:                                              ; preds = %176
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %177) #5
  br label %180

180:                                              ; preds = %176, %179
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %120) #5
  %181 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %182 = icmp eq i8* %181, null
  br i1 %182, label %184, label %183

183:                                              ; preds = %180
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %181) #5
  br label %184

184:                                              ; preds = %180, %183
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %63) #5
  %185 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %186 = icmp eq i8* %185, null
  br i1 %186, label %188, label %187

187:                                              ; preds = %184
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %185) #5
  br label %188

188:                                              ; preds = %184, %187
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_(%"class.jxl::Image3"*, %"class.jxl::Plane.1"* dereferenceable(32), %"class.jxl::Plane.1"* dereferenceable(32), %"class.jxl::Plane.1"* dereferenceable(32)) unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.jxl::Image3"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 96, i1 false)
  %6 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %1, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %2, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %7, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %1, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %2, i64 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %20, label %17

17:                                               ; preds = %4, %11
  %18 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 343, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.42, i64 0, i64 0)) #5
  %19 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %7, %22
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %13, %26
  br i1 %27, label %31, label %28

28:                                               ; preds = %20, %24
  %29 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 344, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i64 0, i64 0)) #5
  %30 = tail call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

31:                                               ; preds = %24
  %32 = bitcast %"class.jxl::Plane.1"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %32, i64 24, i1 false) #5
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5
  %34 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %1, i64 0, i32 0, i32 5
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i8* null, i8** %35, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %33, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq i8* %39, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #5
  br label %43

43:                                               ; preds = %31, %42
  %44 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1
  %45 = bitcast %"class.jxl::Plane.1"* %44 to i8*
  %46 = bitcast %"class.jxl::Plane.1"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 24, i1 false) #5
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5
  %48 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %2, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %50 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  %51 = load i64, i64* %50, align 8
  store i8* null, i8** %49, align 8
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %47, i64 0, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = bitcast %"class.std::__1::unique_ptr"* %47 to i64*
  store i64 %51, i64* %54, align 8
  %55 = icmp eq i8* %53, null
  br i1 %55, label %57, label %56

56:                                               ; preds = %43
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %53) #5
  br label %57

57:                                               ; preds = %43, %56
  %58 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2
  %59 = bitcast %"class.jxl::Plane.1"* %58 to i8*
  %60 = bitcast %"class.jxl::Plane.1"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false) #5
  %61 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %3, i64 0, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = bitcast %"class.std::__1::unique_ptr"* %61 to i64*
  store i64 %65, i64* %68, align 8
  %69 = icmp eq i8* %67, null
  br i1 %69, label %71, label %70

70:                                               ; preds = %57
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #5
  br label %71

71:                                               ; preds = %57, %70
  ret void
}

declare double @_ZN3jxl23ButteraugliFuzzyInverseEd(double) local_unnamed_addr #2

declare void @_ZN3jxl18CreateHeatMapImageERKNS_5PlaneIfEEdd(%"class.jxl::Image3"* sret, %"class.jxl::Plane.1"* dereferenceable(32), double, double) local_unnamed_addr #2

declare void @_ZN3jxl19GroupBorderAssigner4InitERKNS_15FrameDimensionsE(%"class.jxl::GroupBorderAssigner"*, %"struct.jxl::FrameDimensions"* dereferenceable(144)) local_unnamed_addr #2

declare void @_ZN3jxl13FilterWeights4InitERKNS_10LoopFilterERKNS_15FrameDimensionsE(%"struct.jxl::FilterWeights"*, %"struct.jxl::LoopFilter"* dereferenceable(144), %"struct.jxl::FrameDimensions"* dereferenceable(144)) local_unnamed_addr #2

declare void @_ZN3jxl9Upsampler4InitEmRKNS_19CustomTransformDataE(%"struct.jxl::Upsampler"*, i64, %"struct.jxl::CustomTransformData"* dereferenceable(1224)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm(%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #26
  unreachable
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__125__throw_bad_function_callEv() local_unnamed_addr #23 comdat {
  tail call void @abort() #24
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_18PassesDecoderState9InitForACEPS1_EUliiE_EEbS4_jjRKT_RKT0_PKc(%"class.jxl::ThreadPool"*, i32, i32, %"struct.jxl::ThreadPool::SkipInit"* dereferenceable(1), %class.anon.526* dereferenceable(16), i8*) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.530", align 8
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.530", align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.jxl::ThreadPool", align 8
  %11 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* %5, double* nonnull %9) #5
  %12 = icmp eq %"class.jxl::ThreadPool"* %0, null
  br i1 %12, label %13, label %33

13:                                               ; preds = %6
  %14 = bitcast %"class.jxl::ThreadPool"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #5
  %15 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %15, align 8
  %17 = bitcast i8** %16 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %10, %"class.jxl::ThreadPool"** %17, align 8
  %18 = icmp ugt i32 %1, %2
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.10, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0)) #5
  %21 = call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

22:                                               ; preds = %13
  %23 = icmp eq i32 %1, %2
  br i1 %23, label %31, label %24

24:                                               ; preds = %22
  %25 = bitcast %"class.jxl::ThreadPool::RunCallState.530"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #5
  %26 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.530", %"class.jxl::ThreadPool::RunCallState.530"* %7, i64 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.530", %"class.jxl::ThreadPool::RunCallState.530"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %26, align 8
  store %class.anon.526* %4, %class.anon.526** %27, align 8
  %28 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %14, i8* nonnull %25, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallDataFuncEPvjm, i32 %1, i32 %2) #5
  %29 = icmp ne i32 %28, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #5
  %30 = zext i1 %29 to i32
  br label %31

31:                                               ; preds = %22, %24
  %32 = phi i32 [ %30, %24 ], [ 0, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #5
  br label %51

33:                                               ; preds = %6
  %34 = icmp ugt i32 %1, %2
  br i1 %34, label %35, label %38

35:                                               ; preds = %33
  %36 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.10, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0)) #5
  %37 = call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

38:                                               ; preds = %33
  %39 = icmp eq i32 %1, %2
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState.530"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #5
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.530", %"class.jxl::ThreadPool::RunCallState.530"* %8, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.530", %"class.jxl::ThreadPool::RunCallState.530"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon.526* %4, %class.anon.526** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallDataFuncEPvjm, i32 %1, i32 %2) #5
  %49 = icmp ne i32 %48, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #5
  %50 = zext i1 %49 to i32
  br label %51

51:                                               ; preds = %40, %38, %31
  %52 = phi i32 [ %32, %31 ], [ %50, %40 ], [ 0, %38 ]
  %53 = load double, double* %9, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* %5, double %53) #5
  %54 = icmp eq i32 %52, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #5
  ret i1 %54
}

declare void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane.1"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::WeightsSymmetric5"* dereferenceable(96), %"class.jxl::ThreadPool"*, %"class.jxl::Plane.1"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderState20EnsureBordersStorageEv(%"struct.jxl::PassesDecoderState"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.jxl::Image3", align 8
  %3 = alloca %"class.jxl::Image3", align 8
  %4 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %5 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 7, i32 1, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 7, i32 1, i64 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, %7
  br i1 %10, label %11, label %269

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 7, i32 1, i64 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, %7
  br i1 %14, label %15, label %269

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %269

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 25
  %21 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %20, align 8
  %22 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %21, i64 0, i32 0, i32 17, i32 0, i32 0
  %23 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %22, align 8
  %24 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %21, i64 0, i32 0, i32 17, i32 0, i32 1
  %25 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %24, align 8
  %26 = icmp eq %"struct.jxl::ExtraChannelInfo"* %23, %25
  br i1 %26, label %27, label %269

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 26, i32 11
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %30
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 26, i32 2
  %34 = load i8, i8* %33, align 1, !range !9
  %35 = zext i8 %34 to i64
  %36 = add i64 %32, %35
  %37 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 15
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 1
  %40 = select i1 %39, i64 0, i64 2
  %41 = add i64 %36, %40
  %42 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 16, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8
  %44 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 16, i32 0, i32 1
  %45 = load i32*, i32** %44, align 8
  %46 = icmp eq i32* %43, %45
  br i1 %46, label %101, label %47

47:                                               ; preds = %27
  %48 = ptrtoint i32* %43 to i64
  %49 = getelementptr i32, i32* %45, i64 -1
  %50 = ptrtoint i32* %49 to i64
  %51 = sub i64 %50, %48
  %52 = lshr i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 3
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %68, label %56

56:                                               ; preds = %47, %56
  %57 = phi i64 [ %64, %56 ], [ %41, %47 ]
  %58 = phi i32* [ %65, %56 ], [ %43, %47 ]
  %59 = phi i64 [ %66, %56 ], [ %54, %47 ]
  %60 = load i32, i32* %58, align 4
  %61 = icmp ugt i32 %60, 1
  %62 = icmp ugt i64 %57, 2
  %63 = select i1 %62, i64 %57, i64 2
  %64 = select i1 %61, i64 %63, i64 %57
  %65 = getelementptr inbounds i32, i32* %58, i64 1
  %66 = add i64 %59, -1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %56, !llvm.loop !419

68:                                               ; preds = %56, %47
  %69 = phi i64 [ undef, %47 ], [ %64, %56 ]
  %70 = phi i64 [ %41, %47 ], [ %64, %56 ]
  %71 = phi i32* [ %43, %47 ], [ %65, %56 ]
  %72 = icmp ult i64 %51, 12
  br i1 %72, label %101, label %73

73:                                               ; preds = %68, %73
  %74 = phi i64 [ %98, %73 ], [ %70, %68 ]
  %75 = phi i32* [ %99, %73 ], [ %71, %68 ]
  %76 = load i32, i32* %75, align 4
  %77 = icmp ugt i32 %76, 1
  %78 = icmp ugt i64 %74, 2
  %79 = select i1 %78, i64 %74, i64 2
  %80 = select i1 %77, i64 %79, i64 %74
  %81 = getelementptr inbounds i32, i32* %75, i64 1
  %82 = load i32, i32* %81, align 4
  %83 = icmp ugt i32 %82, 1
  %84 = icmp ugt i64 %80, 2
  %85 = select i1 %84, i64 %80, i64 2
  %86 = select i1 %83, i64 %85, i64 %80
  %87 = getelementptr inbounds i32, i32* %75, i64 2
  %88 = load i32, i32* %87, align 4
  %89 = icmp ugt i32 %88, 1
  %90 = icmp ugt i64 %86, 2
  %91 = select i1 %90, i64 %86, i64 2
  %92 = select i1 %89, i64 %91, i64 %86
  %93 = getelementptr inbounds i32, i32* %75, i64 3
  %94 = load i32, i32* %93, align 4
  %95 = icmp ugt i32 %94, 1
  %96 = icmp ugt i64 %92, 2
  %97 = select i1 %96, i64 %92, i64 2
  %98 = select i1 %95, i64 %97, i64 %92
  %99 = getelementptr inbounds i32, i32* %75, i64 4
  %100 = icmp eq i32* %99, %45
  br i1 %100, label %101, label %73

101:                                              ; preds = %68, %73, %27
  %102 = phi i64 [ %41, %27 ], [ %69, %68 ], [ %98, %73 ]
  %103 = add i64 %102, 7
  %104 = and i64 %103, 9223372036854775800
  %105 = add i64 %104, %102
  %106 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 2, i32 6
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 2, i32 11
  %109 = load i64, i64* %108, align 8
  %110 = shl i64 %102, 2
  %111 = mul i64 %110, %109
  %112 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12
  %113 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %112, i64 0, i32 0, i64 0, i32 0, i32 0
  %114 = load i32, i32* %113, align 8
  %115 = zext i32 %114 to i64
  %116 = icmp eq i64 %107, %115
  br i1 %116, label %117, label %122

117:                                              ; preds = %101
  %118 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 0, i32 0, i32 1
  %119 = load i32, i32* %118, align 4
  %120 = zext i32 %119 to i64
  %121 = icmp eq i64 %111, %120
  br i1 %121, label %187, label %122

122:                                              ; preds = %101, %117
  %123 = bitcast %"class.jxl::Image3"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %123) #5
  %124 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %124, i64 %107, i64 %111, i64 4) #5
  %125 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %125, i64 %107, i64 %111, i64 4) #5
  %126 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %126, i64 %107, i64 %111, i64 4) #5
  %127 = bitcast %"class.jxl::Image3"* %112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* nonnull align 8 %123, i64 24, i1 false) #5
  %128 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 0, i32 0, i32 5
  %129 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5
  %130 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %129, i64 0, i32 0, i32 0, i32 0
  %131 = bitcast %"class.std::__1::unique_ptr"* %129 to i64*
  %132 = load i64, i64* %131, align 8
  store i8* null, i8** %130, align 8
  %133 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %128, i64 0, i32 0, i32 0, i32 0
  %134 = load i8*, i8** %133, align 8
  %135 = bitcast %"class.std::__1::unique_ptr"* %128 to i64*
  store i64 %132, i64* %135, align 8
  %136 = icmp eq i8* %134, null
  br i1 %136, label %138, label %137

137:                                              ; preds = %122
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %134) #5
  br label %138

138:                                              ; preds = %137, %122
  %139 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1
  %140 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 1
  %141 = bitcast %"class.jxl::Plane.1"* %140 to i8*
  %142 = bitcast %"class.jxl::Plane.1"* %139 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 %142, i64 24, i1 false) #5
  %143 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 1, i32 0, i32 5
  %144 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5
  %145 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %144, i64 0, i32 0, i32 0, i32 0
  %146 = bitcast %"class.std::__1::unique_ptr"* %144 to i64*
  %147 = load i64, i64* %146, align 8
  store i8* null, i8** %145, align 8
  %148 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %143, i64 0, i32 0, i32 0, i32 0
  %149 = load i8*, i8** %148, align 8
  %150 = bitcast %"class.std::__1::unique_ptr"* %143 to i64*
  store i64 %147, i64* %150, align 8
  %151 = icmp eq i8* %149, null
  br i1 %151, label %153, label %152

152:                                              ; preds = %138
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %149) #5
  br label %153

153:                                              ; preds = %152, %138
  %154 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2
  %155 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 2
  %156 = bitcast %"class.jxl::Plane.1"* %155 to i8*
  %157 = bitcast %"class.jxl::Plane.1"* %154 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %157, i64 24, i1 false) #5
  %158 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 2, i32 0, i32 5
  %159 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5
  %160 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %159, i64 0, i32 0, i32 0, i32 0
  %161 = bitcast %"class.std::__1::unique_ptr"* %159 to i64*
  %162 = load i64, i64* %161, align 8
  store i8* null, i8** %160, align 8
  %163 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %158, i64 0, i32 0, i32 0, i32 0
  %164 = load i8*, i8** %163, align 8
  %165 = bitcast %"class.std::__1::unique_ptr"* %158 to i64*
  store i64 %162, i64* %165, align 8
  %166 = icmp eq i8* %164, null
  br i1 %166, label %167, label %169

167:                                              ; preds = %153
  %168 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %168, align 8
  br label %175

169:                                              ; preds = %153
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %164) #5
  %170 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %171 = load i8*, i8** %170, align 8
  %172 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %172, align 8
  %173 = icmp eq i8* %171, null
  br i1 %173, label %175, label %174

174:                                              ; preds = %169
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %171) #5
  br label %175

175:                                              ; preds = %167, %174, %169
  %176 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %177 = load i8*, i8** %176, align 8
  store i8* null, i8** %176, align 8
  %178 = icmp eq i8* %177, null
  br i1 %178, label %180, label %179

179:                                              ; preds = %175
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %177) #5
  br label %180

180:                                              ; preds = %179, %175
  %181 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %182 = load i8*, i8** %181, align 8
  store i8* null, i8** %181, align 8
  %183 = icmp eq i8* %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %180
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %182) #5
  br label %185

185:                                              ; preds = %180, %184
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %123) #5
  %186 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %4, align 8
  br label %187

187:                                              ; preds = %185, %117
  %188 = phi %"struct.jxl::PassesSharedState"* [ %186, %185 ], [ %5, %117 ]
  %189 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %188, i64 0, i32 2, i32 10
  %190 = load i64, i64* %189, align 8
  %191 = shl i64 %105, 1
  %192 = mul i64 %191, %190
  %193 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %188, i64 0, i32 2, i32 7
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13
  %196 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %195, i64 0, i32 0, i64 0, i32 0, i32 0
  %197 = load i32, i32* %196, align 8
  %198 = zext i32 %197 to i64
  %199 = icmp eq i64 %192, %198
  br i1 %199, label %200, label %205

200:                                              ; preds = %187
  %201 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 0, i32 0, i32 1
  %202 = load i32, i32* %201, align 4
  %203 = zext i32 %202 to i64
  %204 = icmp eq i64 %194, %203
  br i1 %204, label %269, label %205

205:                                              ; preds = %187, %200
  %206 = bitcast %"class.jxl::Image3"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %206) #5
  %207 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %207, i64 %192, i64 %194, i64 4) #5
  %208 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %208, i64 %192, i64 %194, i64 4) #5
  %209 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %209, i64 %192, i64 %194, i64 4) #5
  %210 = bitcast %"class.jxl::Image3"* %195 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %210, i8* nonnull align 8 %206, i64 24, i1 false) #5
  %211 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 0, i32 0, i32 5
  %212 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5
  %213 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %212, i64 0, i32 0, i32 0, i32 0
  %214 = bitcast %"class.std::__1::unique_ptr"* %212 to i64*
  %215 = load i64, i64* %214, align 8
  store i8* null, i8** %213, align 8
  %216 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %211, i64 0, i32 0, i32 0, i32 0
  %217 = load i8*, i8** %216, align 8
  %218 = bitcast %"class.std::__1::unique_ptr"* %211 to i64*
  store i64 %215, i64* %218, align 8
  %219 = icmp eq i8* %217, null
  br i1 %219, label %221, label %220

220:                                              ; preds = %205
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %217) #5
  br label %221

221:                                              ; preds = %220, %205
  %222 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1
  %223 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 1
  %224 = bitcast %"class.jxl::Plane.1"* %223 to i8*
  %225 = bitcast %"class.jxl::Plane.1"* %222 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %224, i8* align 8 %225, i64 24, i1 false) #5
  %226 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 1, i32 0, i32 5
  %227 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5
  %228 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %227, i64 0, i32 0, i32 0, i32 0
  %229 = bitcast %"class.std::__1::unique_ptr"* %227 to i64*
  %230 = load i64, i64* %229, align 8
  store i8* null, i8** %228, align 8
  %231 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %226, i64 0, i32 0, i32 0, i32 0
  %232 = load i8*, i8** %231, align 8
  %233 = bitcast %"class.std::__1::unique_ptr"* %226 to i64*
  store i64 %230, i64* %233, align 8
  %234 = icmp eq i8* %232, null
  br i1 %234, label %236, label %235

235:                                              ; preds = %221
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %232) #5
  br label %236

236:                                              ; preds = %235, %221
  %237 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2
  %238 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 2
  %239 = bitcast %"class.jxl::Plane.1"* %238 to i8*
  %240 = bitcast %"class.jxl::Plane.1"* %237 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %239, i8* align 8 %240, i64 24, i1 false) #5
  %241 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 2, i32 0, i32 5
  %242 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5
  %243 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %242, i64 0, i32 0, i32 0, i32 0
  %244 = bitcast %"class.std::__1::unique_ptr"* %242 to i64*
  %245 = load i64, i64* %244, align 8
  store i8* null, i8** %243, align 8
  %246 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %241, i64 0, i32 0, i32 0, i32 0
  %247 = load i8*, i8** %246, align 8
  %248 = bitcast %"class.std::__1::unique_ptr"* %241 to i64*
  store i64 %245, i64* %248, align 8
  %249 = icmp eq i8* %247, null
  br i1 %249, label %250, label %252

250:                                              ; preds = %236
  %251 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %251, align 8
  br label %258

252:                                              ; preds = %236
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %247) #5
  %253 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %254 = load i8*, i8** %253, align 8
  %255 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %255, align 8
  %256 = icmp eq i8* %254, null
  br i1 %256, label %258, label %257

257:                                              ; preds = %252
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %254) #5
  br label %258

258:                                              ; preds = %250, %257, %252
  %259 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %260 = load i8*, i8** %259, align 8
  store i8* null, i8** %259, align 8
  %261 = icmp eq i8* %260, null
  br i1 %261, label %263, label %262

262:                                              ; preds = %258
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %260) #5
  br label %263

263:                                              ; preds = %262, %258
  %264 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %265 = load i8*, i8** %264, align 8
  store i8* null, i8** %264, align 8
  %266 = icmp eq i8* %265, null
  br i1 %266, label %268, label %267

267:                                              ; preds = %263
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %265) #5
  br label %268

268:                                              ; preds = %263, %267
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %206) #5
  br label %269

269:                                              ; preds = %1, %11, %15, %200, %268, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.55"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #5
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.55"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.55"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #24
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #24
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #25
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #5
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #5
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #25
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallInitFuncEPvm(i8*, i64) #0 comdat align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #5
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallDataFuncEPvjm(i8*, i32, i64) #0 comdat align 2 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon.526**
  %7 = load %class.anon.526*, %class.anon.526** %6, align 8
  %8 = getelementptr inbounds %class.anon.526, %class.anon.526* %7, i64 0, i32 1
  %9 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %8, align 8
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds %class.anon.526, %class.anon.526* %7, i64 0, i32 0
  %12 = load i64*, i64** %11, align 8
  %13 = load i64, i64* %12, align 8
  %14 = urem i64 %10, %13
  %15 = udiv i64 %10, %13
  %16 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #5
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  %21 = shl i64 %14, 8
  %22 = shl i64 %15, 8
  %23 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %9, i64 0, i32 3
  %24 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %23, i64 0, i32 0, i64 0, i32 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %9, i64 0, i32 3, i32 0, i64 0, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i64
  store i64 %21, i64* %17, align 8
  store i64 %22, i64* %18, align 8
  %30 = add i64 %21, 256
  %31 = icmp ugt i64 %30, %26
  %32 = tail call i64 @llvm.usub.sat.i64(i64 %26, i64 %21) #5
  %33 = select i1 %31, i64 %32, i64 256
  store i64 %33, i64* %19, align 8
  %34 = add i64 %22, 256
  %35 = icmp ugt i64 %34, %29
  %36 = tail call i64 @llvm.usub.sat.i64(i64 %29, i64 %22) #5
  %37 = select i1 %35, i64 %36, i64 256
  store i64 %37, i64* %20, align 8
  %38 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %9, i64 0, i32 21
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, %10
  call void @_ZN3jxl12RandomImage3EmRKNS_4RectEPNS_6Image3IfEE(i64 %40, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Image3"* %23) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #5
  ret void
}

declare void @_ZN3jxl12RandomImage3EmRKNS_4RectEPNS_6Image3IfEE(i64, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"*) local_unnamed_addr #2

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #2

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.87"*, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"class.jxl::Plane.1"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.87"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 5
  %11 = add nsw i64 %10, 1
  %12 = icmp ugt i64 %11, 576460752303423487
  br i1 %12, label %13, label %15

13:                                               ; preds = %3
  %14 = bitcast %"class.std::__1::vector.87"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %14) #24
  unreachable

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.jxl::Plane.1"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %8
  %20 = ashr exact i64 %19, 5
  %21 = icmp ult i64 %20, 288230376151711743
  br i1 %21, label %22, label %30

22:                                               ; preds = %15
  %23 = ashr exact i64 %19, 4
  %24 = icmp ult i64 %23, %11
  %25 = select i1 %24, i64 %11, i64 %23
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %22
  %28 = icmp ugt i64 %25, 576460752303423487
  br i1 %28, label %29, label %30

29:                                               ; preds = %27
  tail call void @abort() #24
  unreachable

30:                                               ; preds = %15, %27
  %31 = phi i64 [ %25, %27 ], [ 576460752303423487, %15 ]
  %32 = shl i64 %31, 5
  %33 = tail call i8* @_Znwm(i64 %32) #25
  %34 = bitcast i8* %33 to %"class.jxl::Plane.1"*
  br label %35

35:                                               ; preds = %22, %30
  %36 = phi i64 [ %31, %30 ], [ 0, %22 ]
  %37 = phi %"class.jxl::Plane.1"* [ %34, %30 ], [ null, %22 ]
  %38 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %37, i64 %10
  %39 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %37, i64 %36
  %40 = ptrtoint %"class.jxl::Plane.1"* %39 to i64
  %41 = load i64, i64* %1, align 8
  %42 = load i64, i64* %2, align 8
  %43 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %38, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %43, i64 %41, i64 %42, i64 4) #5
  %44 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %38, i64 1
  %45 = ptrtoint %"class.jxl::Plane.1"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %46, align 8
  %48 = ptrtoint %"class.jxl::Plane.1"* %47 to i64
  %49 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %4, align 8
  %50 = icmp eq %"class.jxl::Plane.1"* %49, %47
  br i1 %50, label %101, label %51

51:                                               ; preds = %35
  %52 = getelementptr %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %49, i64 -1, i32 0, i32 0
  %53 = ptrtoint i32* %52 to i64
  %54 = sub i64 %53, %48
  %55 = and i64 %54, 32
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %68

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %38, i64 -1
  %59 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %49, i64 -1
  %60 = bitcast %"class.jxl::Plane.1"* %58 to i8*
  %61 = bitcast %"class.jxl::Plane.1"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 24, i1 false) #5
  %62 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %38, i64 -1, i32 0, i32 5
  %63 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %49, i64 -1, i32 0, i32 5
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  %66 = load i64, i64* %65, align 8
  store i8* null, i8** %64, align 8
  %67 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  store i64 %66, i64* %67, align 8
  br label %68

68:                                               ; preds = %57, %51
  %69 = phi %"class.jxl::Plane.1"* [ undef, %51 ], [ %58, %57 ]
  %70 = phi %"class.jxl::Plane.1"* [ %38, %51 ], [ %58, %57 ]
  %71 = phi %"class.jxl::Plane.1"* [ %49, %51 ], [ %59, %57 ]
  %72 = icmp ult i64 %54, 32
  br i1 %72, label %97, label %73

73:                                               ; preds = %68, %73
  %74 = phi %"class.jxl::Plane.1"* [ %86, %73 ], [ %70, %68 ]
  %75 = phi %"class.jxl::Plane.1"* [ %87, %73 ], [ %71, %68 ]
  %76 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %74, i64 -1
  %77 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %75, i64 -1
  %78 = bitcast %"class.jxl::Plane.1"* %76 to i8*
  %79 = bitcast %"class.jxl::Plane.1"* %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 24, i1 false) #5
  %80 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %74, i64 -1, i32 0, i32 5
  %81 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %75, i64 -1, i32 0, i32 5
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %81, i64 0, i32 0, i32 0, i32 0
  %83 = bitcast %"class.std::__1::unique_ptr"* %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i8* null, i8** %82, align 8
  %85 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %74, i64 -2
  %87 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %75, i64 -2
  %88 = bitcast %"class.jxl::Plane.1"* %86 to i8*
  %89 = bitcast %"class.jxl::Plane.1"* %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 24, i1 false) #5
  %90 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %74, i64 -2, i32 0, i32 5
  %91 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %75, i64 -2, i32 0, i32 5
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %91, i64 0, i32 0, i32 0, i32 0
  %93 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  %94 = load i64, i64* %93, align 8
  store i8* null, i8** %92, align 8
  %95 = bitcast %"class.std::__1::unique_ptr"* %90 to i64*
  store i64 %94, i64* %95, align 8
  %96 = icmp eq %"class.jxl::Plane.1"* %87, %47
  br i1 %96, label %97, label %73

97:                                               ; preds = %73, %68
  %98 = phi %"class.jxl::Plane.1"* [ %69, %68 ], [ %86, %73 ]
  %99 = load i64, i64* %7, align 8
  %100 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %4, align 8
  br label %101

101:                                              ; preds = %35, %97
  %102 = phi %"class.jxl::Plane.1"* [ %100, %97 ], [ %47, %35 ]
  %103 = phi %"class.jxl::Plane.1"* [ %98, %97 ], [ %38, %35 ]
  %104 = phi i64 [ %99, %97 ], [ %48, %35 ]
  %105 = ptrtoint %"class.jxl::Plane.1"* %103 to i64
  store i64 %105, i64* %7, align 8
  store i64 %45, i64* %5, align 8
  store i64 %40, i64* %17, align 8
  %106 = inttoptr i64 %104 to %"class.jxl::Plane.1"*
  %107 = icmp eq %"class.jxl::Plane.1"* %102, %106
  br i1 %107, label %117, label %108

108:                                              ; preds = %101, %115
  %109 = phi %"class.jxl::Plane.1"* [ %110, %115 ], [ %102, %101 ]
  %110 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %109, i64 -1
  %111 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %109, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %112 = load i8*, i8** %111, align 8
  store i8* null, i8** %111, align 8
  %113 = icmp eq i8* %112, null
  br i1 %113, label %115, label %114

114:                                              ; preds = %108
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %112) #5
  br label %115

115:                                              ; preds = %114, %108
  %116 = icmp eq %"class.jxl::Plane.1"* %110, %106
  br i1 %116, label %117, label %108

117:                                              ; preds = %115, %101
  %118 = icmp eq i64 %104, 0
  br i1 %118, label %121, label %119

119:                                              ; preds = %117
  %120 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %120) #25
  br label %121

121:                                              ; preds = %117, %119
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17PassesSharedStateC2Ev(%"struct.jxl::PassesSharedState"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1
  tail call void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"* %2, %"struct.jxl::CodecMetadata"* null) #5
  %3 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 3
  %4 = bitcast %"class.jxl::AcStrategyImage"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false) #5
  %5 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4
  tail call void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"* %5)
  %6 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 5
  tail call void @_ZN3jxl9QuantizerC1EPKNS_15DequantMatricesE(%"class.jxl::Quantizer"* %6, %"class.jxl::DequantMatrices"* %5) #5
  %7 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 6
  %8 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 3
  %9 = bitcast %"class.jxl::Plane.132"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 144, i1 false)
  store i32 84, i32* %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 4
  store float 0x3F88618620000000, float* %10, align 4
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 5
  store float 0.000000e+00, float* %11, align 8
  %12 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 6
  store float 1.000000e+00, float* %12, align 4
  %13 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 7
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 8
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1
  %17 = bitcast %"class.std::__1::vector.134"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 76, i1 false) #5
  %18 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13
  %19 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 14
  %20 = bitcast %"class.std::__1::vector.155"* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 208, i1 false)
  store %"class.jxl::Image3"* %18, %"class.jxl::Image3"** %19, align 8
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15
  %22 = bitcast %"struct.jxl::BlockCtxMap"* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 96, i1 false) #5
  %23 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 2, i32 0, i32 0
  %24 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 0
  %25 = tail call i8* @_Znwm(i64 39) #25
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 1
  store i8* %25, i8** %24, align 8
  %27 = getelementptr inbounds i8, i8* %25, i64 39
  store i8* %27, i8** %23, align 8
  %28 = bitcast i8** %26 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %25, i8* align 16 getelementptr inbounds ([39 x i8], [39 x i8]* @_ZN3jxl11BlockCtxMap14kDefaultCtxMapE, i64 0, i64 0), i64 39, i1 false) #5
  %29 = ptrtoint i8* %27 to i64
  store i64 %29, i64* %28, align 8
  %30 = ptrtoint i8* %25 to i64
  br label %31

31:                                               ; preds = %31, %1
  %32 = phi i64 [ 1, %1 ], [ %49, %31 ]
  %33 = phi i64 [ %30, %1 ], [ %48, %31 ]
  %34 = getelementptr inbounds i8, i8* %25, i64 %32
  %35 = ptrtoint i8* %34 to i64
  %36 = inttoptr i64 %33 to i8*
  %37 = load i8, i8* %36, align 1
  %38 = load i8, i8* %34, align 1
  %39 = icmp ult i8 %37, %38
  %40 = select i1 %39, i64 %35, i64 %33
  %41 = add nuw nsw i64 %32, 1
  %42 = getelementptr inbounds i8, i8* %25, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = inttoptr i64 %40 to i8*
  %45 = load i8, i8* %44, align 1
  %46 = load i8, i8* %42, align 1
  %47 = icmp ult i8 %45, %46
  %48 = select i1 %47, i64 %43, i64 %40
  %49 = add nuw nsw i64 %32, 2
  %50 = icmp eq i64 %49, 39
  br i1 %50, label %51, label %31

51:                                               ; preds = %31
  %52 = inttoptr i64 %48 to i8*
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = add nuw nsw i64 %54, 1
  %56 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 3
  store i64 %55, i64* %56, align 8
  %57 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 4
  store i64 1, i64* %57, align 8
  %58 = getelementptr %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0
  %59 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0
  %60 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 1
  %61 = bitcast %"class.jxl::Image3"* %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 392, i1 false)
  store i32 1, i32* %60, align 8
  %62 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %62) #5
  %63 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 4, i32 0
  %64 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 8
  %65 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 11
  %66 = bitcast i32* %63 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 14, i1 false) #5
  %67 = bitcast %"class.std::__1::basic_string"* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 128, i1 false) #5
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %65) #5
  %68 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 12
  %69 = bitcast %"class.std::__1::vector.87"* %68 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 32, i1 false) #5
  %70 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 1
  store %"class.jxl::ImageBundle"* %59, %"class.jxl::ImageBundle"** %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 2
  store i8 0, i8* %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1
  %73 = getelementptr inbounds %struct.anon.176, %struct.anon.176* %72, i64 0, i32 0
  %74 = bitcast %struct.anon.176* %72 to i64*
  store i64 0, i64* %74, align 8
  %75 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 1
  store i32 1, i32* %75, align 8
  %76 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %76) #5
  %77 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 4, i32 0
  %78 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 8
  %79 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 11
  %80 = bitcast i32* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %80, i8 0, i64 14, i1 false) #5
  %81 = bitcast %"class.std::__1::basic_string"* %78 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 128, i1 false) #5
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %79) #5
  %82 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 12
  %83 = bitcast %"class.std::__1::vector.87"* %82 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 32, i1 false) #5
  %84 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 1
  store %"class.jxl::ImageBundle"* %73, %"class.jxl::ImageBundle"** %84, align 8
  %85 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 2
  store i8 0, i8* %85, align 8
  %86 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2
  %87 = getelementptr inbounds %struct.anon.176, %struct.anon.176* %86, i64 0, i32 0
  %88 = bitcast %struct.anon.176* %86 to i64*
  store i64 0, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 1
  store i32 1, i32* %89, align 8
  %90 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %90) #5
  %91 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 4, i32 0
  %92 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 8
  %93 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 11
  %94 = bitcast i32* %91 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 14, i1 false) #5
  %95 = bitcast %"class.std::__1::basic_string"* %92 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 128, i1 false) #5
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %93) #5
  %96 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 12
  %97 = bitcast %"class.std::__1::vector.87"* %96 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %97, i8 0, i64 32, i1 false) #5
  %98 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 1
  store %"class.jxl::ImageBundle"* %87, %"class.jxl::ImageBundle"** %98, align 8
  %99 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 2
  store i8 0, i8* %99, align 8
  %100 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3
  %101 = getelementptr inbounds %struct.anon.176, %struct.anon.176* %100, i64 0, i32 0
  %102 = bitcast %struct.anon.176* %100 to i64*
  store i64 0, i64* %102, align 8
  %103 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 1
  store i32 1, i32* %103, align 8
  %104 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %104) #5
  %105 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 4, i32 0
  %106 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 8
  %107 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 11
  %108 = bitcast i32* %105 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 14, i1 false) #5
  %109 = bitcast %"class.std::__1::basic_string"* %106 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %109, i8 0, i64 128, i1 false) #5
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %107) #5
  %110 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 12
  %111 = bitcast %"class.std::__1::vector.87"* %110 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %111, i8 0, i64 32, i1 false) #5
  %112 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 1
  store %"class.jxl::ImageBundle"* %101, %"class.jxl::ImageBundle"** %112, align 8
  %113 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 2
  store i8 0, i8* %113, align 8
  %114 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 18
  store i64 0, i64* %114, align 8
  ret void
}

declare void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"*, %"struct.jxl::CodecMetadata"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca [216 x i8], align 4
  %3 = alloca [112 x i8], align 4
  %4 = alloca [216 x i8], align 4
  %5 = alloca %"class.jxl::QuantEncoding", align 8
  %6 = alloca [51 x i64], align 16
  %7 = alloca %"class.jxl::QuantEncoding", align 8
  %8 = bitcast %"class.jxl::DequantMatrices"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #5
  %9 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 0
  %10 = bitcast float* %9 to <4 x float>*
  store <4 x float> <float 0x3F30000000000000, float 0x3F60000000000000, float 3.906250e-03, float 4.096000e+03>, <4 x float>* %10, align 4
  %11 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 1
  store float 5.120000e+02, float* %11, align 4
  %12 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 2
  store float 2.560000e+02, float* %12, align 4
  %13 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6
  %14 = bitcast %"class.std::__1::vector.105"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #5
  %15 = bitcast %"class.jxl::QuantEncoding"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %15) #5
  %16 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  %17 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  %18 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  %19 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !420, !noalias !423
  %20 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !420, !noalias !423
  %21 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !420, !noalias !423
  %22 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 0
  store i32 0, i32* %22, align 8, !alias.scope !423
  %23 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* nonnull align 4 %16, i64 216, i1 false) #5
  %24 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 2, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* nonnull align 4 %17, i64 112, i1 false) #5
  %25 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* nonnull align 4 %18, i64 216, i1 false) #5
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 5, i32 0
  store i8 0, i8* %26, align 8, !alias.scope !423
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.105"* %13, i64 17, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %5) #5
  %27 = load i32, i32* %22, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %45

29:                                               ; preds = %1
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon.109* %30 to %"class.std::__1::vector.119"**
  %32 = load %"class.std::__1::vector.119"*, %"class.std::__1::vector.119"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.119"* %32, null
  br i1 %33, label %45, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %32, i64 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp eq i32* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = ptrtoint i32* %36 to i64
  %40 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %32, i64 0, i32 0, i32 1
  %41 = bitcast i32** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = bitcast i32* %36 to i8*
  call void @_ZdlPv(i8* %42) #25
  br label %43

43:                                               ; preds = %38, %34
  %44 = bitcast %"class.std::__1::vector.119"* %32 to i8*
  call void @_ZdlPv(i8* %44) #25
  br label %45

45:                                               ; preds = %1, %29, %43
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %15) #5
  %46 = bitcast [51 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 408, i8* nonnull %46) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 408, i1 false)
  %47 = bitcast %"class.jxl::QuantEncoding"* %7 to i8*
  %48 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 1, i64 0
  %50 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 2, i32 2, i64 0
  %51 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3, i32 1, i64 0
  %52 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 5, i32 0
  %53 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %13, i64 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3
  %55 = bitcast %union.anon.109* %54 to %"class.std::__1::vector.119"**
  br label %56

56:                                               ; preds = %78, %45
  %57 = phi i64 [ 0, %45 ], [ %93, %78 ]
  %58 = phi i64 [ 0, %45 ], [ %92, %78 ]
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %47) #5
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !426, !noalias !429
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !426, !noalias !429
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !426, !noalias !429
  store i32 0, i32* %48, align 8, !alias.scope !429
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* nonnull align 4 %16, i64 216, i1 false) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* nonnull align 4 %17, i64 112, i1 false) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* nonnull align 4 %18, i64 216, i1 false) #5
  store i8 0, i8* %52, align 8, !alias.scope !429
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  %59 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %53, align 8
  %60 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %59, i64 %57
  %61 = call dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"* %60, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %7)
  %62 = load i32, i32* %48, align 8
  %63 = icmp eq i32 %62, 7
  br i1 %63, label %64, label %78

64:                                               ; preds = %56
  %65 = load %"class.std::__1::vector.119"*, %"class.std::__1::vector.119"** %55, align 8
  %66 = icmp eq %"class.std::__1::vector.119"* %65, null
  br i1 %66, label %78, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %65, i64 0, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %67
  %72 = ptrtoint i32* %69 to i64
  %73 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %65, i64 0, i32 0, i32 1
  %74 = bitcast i32** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast i32* %69 to i8*
  call void @_ZdlPv(i8* %75) #25
  br label %76

76:                                               ; preds = %71, %67
  %77 = bitcast %"class.std::__1::vector.119"* %65 to i8*
  call void @_ZdlPv(i8* %77) #25
  br label %78

78:                                               ; preds = %56, %64, %76
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %47) #5
  %79 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices14required_size_E.const, i64 0, i64 %57
  %80 = load i64, i64* %79, align 8
  %81 = shl i64 %80, 6
  %82 = mul nuw nsw i64 %57, 3
  %83 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %82
  store i64 %58, i64* %83, align 8
  %84 = add i64 %81, %58
  %85 = add nuw nsw i64 %82, 1
  %86 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %85
  store i64 %84, i64* %86, align 8
  %87 = shl i64 %80, 7
  %88 = add i64 %87, %58
  %89 = add nuw nsw i64 %82, 2
  %90 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %89
  store i64 %88, i64* %90, align 8
  %91 = mul i64 %80, 192
  %92 = add i64 %91, %58
  %93 = add nuw nsw i64 %57, 1
  %94 = icmp eq i64 %93, 17
  br i1 %94, label %95, label %56

95:                                               ; preds = %78, %114
  %96 = phi i64 [ %123, %114 ], [ 0, %78 ]
  %97 = mul nuw nsw i64 %96, 3
  %98 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %97
  %99 = bitcast i64* %98 to i8*
  %100 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %96
  %101 = load i64, i64* %100, align 16
  %102 = mul i64 %101, 3
  %103 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %102
  %104 = bitcast i64* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %104, i64 24, i1 false)
  %105 = or i64 %96, 1
  %106 = icmp eq i64 %105, 27
  br i1 %106, label %107, label %114

107:                                              ; preds = %95
  %108 = call i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"* %0) #5
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %107
  %111 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.49, i64 0, i64 0), i32 393, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0)) #5
  %112 = call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

113:                                              ; preds = %107
  call void @llvm.lifetime.end.p0i8(i64 408, i8* nonnull %46) #5
  ret void

114:                                              ; preds = %95
  %115 = mul nuw nsw i64 %105, 3
  %116 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %115
  %117 = bitcast i64* %116 to i8*
  %118 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %105
  %119 = load i64, i64* %118, align 8
  %120 = mul i64 %119, 3
  %121 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %120
  %122 = bitcast i64* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %122, i64 24, i1 false)
  %123 = add nuw nsw i64 %96, 2
  br label %95
}

declare void @_ZN3jxl9QuantizerC1EPKNS_15DequantMatricesE(%"class.jxl::Quantizer"*, %"class.jxl::DequantMatrices"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 7
  br i1 %5, label %6, label %22

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %8 = bitcast %union.anon.109* %7 to %"class.std::__1::vector.119"**
  %9 = load %"class.std::__1::vector.119"*, %"class.std::__1::vector.119"** %8, align 8
  %10 = icmp eq %"class.std::__1::vector.119"* %9, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %9, i64 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i32* %13 to i64
  %17 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %9, i64 0, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #25
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.std::__1::vector.119"* %9 to i8*
  tail call void @_ZdlPv(i8* %21) #25
  br label %22

22:                                               ; preds = %6, %20, %2
  %23 = bitcast %"class.jxl::QuantEncoding"* %1 to i8*
  %24 = bitcast %"class.jxl::QuantEncoding"* %0 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %23, i64 553, i1 false)
  %25 = load i32, i32* %3, align 8
  %26 = icmp eq i32 %25, 7
  br i1 %26, label %27, label %75

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %29 = bitcast %union.anon.109* %28 to %"class.std::__1::vector.119"**
  %30 = load %"class.std::__1::vector.119"*, %"class.std::__1::vector.119"** %29, align 8
  %31 = icmp eq %"class.std::__1::vector.119"* %30, null
  br i1 %31, label %75, label %32

32:                                               ; preds = %27
  %33 = tail call i8* @_Znwm(i64 24) #25
  %34 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1, i64 0, i32 0, i32 3
  %35 = bitcast %union.anon.109* %34 to %"class.std::__1::vector.119"**
  %36 = load %"class.std::__1::vector.119"*, %"class.std::__1::vector.119"** %35, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #5
  %37 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.119"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %32
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #24
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #25
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %33, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %33 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %33, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #5
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %32, %71
  %74 = bitcast %union.anon.109* %28 to i8**
  store i8* %33, i8** %74, align 8
  br label %75

75:                                               ; preds = %27, %73, %22
  ret %"class.jxl::QuantEncoding"* %0
}

declare i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.105"*, i64, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.jxl::QuantEncoding"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.jxl::QuantEncoding"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 560
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %80, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.jxl::QuantEncoding"*
  %15 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %78, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %19 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %20 = bitcast %union.anon.109* %19 to %"class.std::__1::vector.119"**
  br label %23

21:                                               ; preds = %75
  %22 = ptrtoint %"class.jxl::QuantEncoding"* %15 to i64
  br label %78

23:                                               ; preds = %75, %17
  %24 = phi %"class.jxl::QuantEncoding"* [ %14, %17 ], [ %76, %75 ]
  %25 = bitcast %"class.jxl::QuantEncoding"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %18, i64 553, i1 false) #5
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %75

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon.109* %30 to %"class.std::__1::vector.119"**
  %32 = load %"class.std::__1::vector.119"*, %"class.std::__1::vector.119"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.119"* %32, null
  br i1 %33, label %75, label %34

34:                                               ; preds = %29
  %35 = tail call i8* @_Znwm(i64 24) #25
  %36 = load %"class.std::__1::vector.119"*, %"class.std::__1::vector.119"** %20, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #5
  %37 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.119"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %34
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %35 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #24
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #25
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %35, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %35 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %35, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #5
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %71, %34
  %74 = bitcast %union.anon.109* %30 to i8**
  store i8* %35, i8** %74, align 8
  br label %75

75:                                               ; preds = %73, %29, %23
  %76 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 1
  %77 = icmp eq %"class.jxl::QuantEncoding"* %76, %15
  br i1 %77, label %21, label %23

78:                                               ; preds = %13, %21
  %79 = phi i64 [ %22, %21 ], [ %9, %13 ]
  store i64 %79, i64* %8, align 8
  br label %229

80:                                               ; preds = %3
  %81 = bitcast %"class.std::__1::vector.105"* %0 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %9, %82
  %84 = sdiv exact i64 %83, 560
  %85 = add i64 %84, %1
  %86 = icmp ugt i64 %85, 32940614417338485
  br i1 %86, label %87, label %89

87:                                               ; preds = %80
  %88 = bitcast %"class.std::__1::vector.105"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %88) #24
  unreachable

89:                                               ; preds = %80
  %90 = sub i64 %6, %82
  %91 = sdiv exact i64 %90, 560
  %92 = icmp ult i64 %91, 16470307208669242
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = shl nsw i64 %91, 1
  %95 = icmp ult i64 %94, %85
  %96 = select i1 %95, i64 %85, i64 %94
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %103, label %98

98:                                               ; preds = %89, %93
  %99 = phi i64 [ %96, %93 ], [ 32940614417338485, %89 ]
  %100 = mul i64 %99, 560
  %101 = tail call i8* @_Znwm(i64 %100) #25
  %102 = bitcast i8* %101 to %"class.jxl::QuantEncoding"*
  br label %103

103:                                              ; preds = %98, %93
  %104 = phi i64 [ %99, %98 ], [ 0, %93 ]
  %105 = phi %"class.jxl::QuantEncoding"* [ %102, %98 ], [ null, %93 ]
  %106 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %84
  %107 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %104
  %108 = ptrtoint %"class.jxl::QuantEncoding"* %107 to i64
  %109 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %106, i64 %1
  %110 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %111 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %112 = bitcast %union.anon.109* %111 to %"class.std::__1::vector.119"**
  br label %113

113:                                              ; preds = %165, %103
  %114 = phi %"class.jxl::QuantEncoding"* [ %106, %103 ], [ %166, %165 ]
  %115 = bitcast %"class.jxl::QuantEncoding"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %110, i64 553, i1 false) #5
  %116 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = icmp eq i32 %117, 7
  br i1 %118, label %119, label %165

119:                                              ; preds = %113
  %120 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 3
  %121 = bitcast %union.anon.109* %120 to %"class.std::__1::vector.119"**
  %122 = load %"class.std::__1::vector.119"*, %"class.std::__1::vector.119"** %121, align 8
  %123 = icmp eq %"class.std::__1::vector.119"* %122, null
  br i1 %123, label %165, label %124

124:                                              ; preds = %119
  %125 = tail call i8* @_Znwm(i64 24) #25
  %126 = load %"class.std::__1::vector.119"*, %"class.std::__1::vector.119"** %112, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %125, i8 0, i64 24, i1 false) #5
  %127 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %126, i64 0, i32 0, i32 1
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.std::__1::vector.119"* %126 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %129, %131
  %133 = ashr exact i64 %132, 2
  %134 = icmp eq i64 %132, 0
  br i1 %134, label %163, label %135

135:                                              ; preds = %124
  %136 = icmp ugt i64 %133, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %135
  %138 = bitcast i8* %125 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %138) #24
  unreachable

139:                                              ; preds = %135
  %140 = tail call i8* @_Znwm(i64 %132) #25
  %141 = bitcast i8* %140 to i32*
  %142 = getelementptr inbounds i8, i8* %125, i64 8
  %143 = bitcast i8* %142 to i8**
  store i8* %140, i8** %143, align 8
  %144 = bitcast i8* %125 to i8**
  store i8* %140, i8** %144, align 8
  %145 = getelementptr inbounds i32, i32* %141, i64 %133
  %146 = getelementptr inbounds i8, i8* %125, i64 16
  %147 = bitcast i8* %146 to i32**
  store i32* %145, i32** %147, align 8
  %148 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %126, i64 0, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8
  %150 = load i64, i64* %128, align 8
  %151 = bitcast i8* %142 to i64*
  %152 = ptrtoint i8* %140 to i64
  %153 = ptrtoint i32* %149 to i64
  %154 = sub i64 %150, %153
  %155 = icmp sgt i64 %154, 0
  br i1 %155, label %156, label %161

156:                                              ; preds = %139
  %157 = lshr exact i64 %154, 2
  %158 = bitcast i32* %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %140, i8* align 4 %158, i64 %154, i1 false) #5
  %159 = getelementptr inbounds i32, i32* %141, i64 %157
  %160 = ptrtoint i32* %159 to i64
  br label %161

161:                                              ; preds = %156, %139
  %162 = phi i64 [ %160, %156 ], [ %152, %139 ]
  store i64 %162, i64* %151, align 8
  br label %163

163:                                              ; preds = %161, %124
  %164 = bitcast %union.anon.109* %120 to i8**
  store i8* %125, i8** %164, align 8
  br label %165

165:                                              ; preds = %113, %119, %163
  %166 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 1
  %167 = icmp eq %"class.jxl::QuantEncoding"* %109, %166
  br i1 %167, label %168, label %113

168:                                              ; preds = %165
  %169 = ptrtoint %"class.jxl::QuantEncoding"* %109 to i64
  %170 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %0, i64 0, i32 0, i32 0
  %171 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %170, align 8
  %172 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  %173 = icmp eq %"class.jxl::QuantEncoding"* %172, %171
  br i1 %173, label %174, label %176

174:                                              ; preds = %168
  %175 = ptrtoint %"class.jxl::QuantEncoding"* %171 to i64
  br label %194

176:                                              ; preds = %168, %189
  %177 = phi %"class.jxl::QuantEncoding"* [ %179, %189 ], [ %106, %168 ]
  %178 = phi %"class.jxl::QuantEncoding"* [ %180, %189 ], [ %172, %168 ]
  %179 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %177, i64 -1
  %180 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1
  %181 = bitcast %"class.jxl::QuantEncoding"* %179 to i8*
  %182 = bitcast %"class.jxl::QuantEncoding"* %180 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %181, i8* align 8 %182, i64 553, i1 false) #5
  %183 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %179, i64 0, i32 0, i32 0
  %184 = load i32, i32* %183, align 8
  %185 = icmp eq i32 %184, 7
  br i1 %185, label %186, label %189

186:                                              ; preds = %176
  %187 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1, i32 0, i32 3
  %188 = bitcast %union.anon.109* %187 to %"class.std::__1::vector.119"**
  store %"class.std::__1::vector.119"* null, %"class.std::__1::vector.119"** %188, align 8
  br label %189

189:                                              ; preds = %186, %176
  %190 = icmp eq %"class.jxl::QuantEncoding"* %180, %171
  br i1 %190, label %191, label %176

191:                                              ; preds = %189
  %192 = load i64, i64* %81, align 8
  %193 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  br label %194

194:                                              ; preds = %174, %191
  %195 = phi %"class.jxl::QuantEncoding"* [ %171, %174 ], [ %193, %191 ]
  %196 = phi %"class.jxl::QuantEncoding"* [ %106, %174 ], [ %179, %191 ]
  %197 = phi i64 [ %175, %174 ], [ %192, %191 ]
  %198 = ptrtoint %"class.jxl::QuantEncoding"* %196 to i64
  store i64 %198, i64* %81, align 8
  store i64 %169, i64* %8, align 8
  store i64 %108, i64* %5, align 8
  %199 = inttoptr i64 %197 to %"class.jxl::QuantEncoding"*
  %200 = icmp eq %"class.jxl::QuantEncoding"* %195, %199
  br i1 %200, label %225, label %201

201:                                              ; preds = %194, %223
  %202 = phi %"class.jxl::QuantEncoding"* [ %203, %223 ], [ %195, %194 ]
  %203 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1
  %204 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %203, i64 0, i32 0, i32 0
  %205 = load i32, i32* %204, align 8
  %206 = icmp eq i32 %205, 7
  br i1 %206, label %207, label %223

207:                                              ; preds = %201
  %208 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1, i32 0, i32 3
  %209 = bitcast %union.anon.109* %208 to %"class.std::__1::vector.119"**
  %210 = load %"class.std::__1::vector.119"*, %"class.std::__1::vector.119"** %209, align 8
  %211 = icmp eq %"class.std::__1::vector.119"* %210, null
  br i1 %211, label %223, label %212

212:                                              ; preds = %207
  %213 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %210, i64 0, i32 0, i32 0
  %214 = load i32*, i32** %213, align 8
  %215 = icmp eq i32* %214, null
  br i1 %215, label %221, label %216

216:                                              ; preds = %212
  %217 = ptrtoint i32* %214 to i64
  %218 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %210, i64 0, i32 0, i32 1
  %219 = bitcast i32** %218 to i64*
  store i64 %217, i64* %219, align 8
  %220 = bitcast i32* %214 to i8*
  tail call void @_ZdlPv(i8* %220) #25
  br label %221

221:                                              ; preds = %216, %212
  %222 = bitcast %"class.std::__1::vector.119"* %210 to i8*
  tail call void @_ZdlPv(i8* %222) #25
  br label %223

223:                                              ; preds = %221, %207, %201
  %224 = icmp eq %"class.jxl::QuantEncoding"* %203, %199
  br i1 %224, label %225, label %201

225:                                              ; preds = %223, %194
  %226 = icmp eq i64 %197, 0
  br i1 %226, label %229, label %227

227:                                              ; preds = %225
  %228 = inttoptr i64 %197 to i8*
  tail call void @_ZdlPv(i8* %228) #25
  br label %229

229:                                              ; preds = %227, %225, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT"*, i64, i64) unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.jxl::Image3.398", align 8
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1
  %7 = bitcast %"class.jxl::Image3.398"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 96, i1 false) #5
  %8 = bitcast %"class.jxl::Image3.398"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #5
  %9 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %9, i64 %1, i64 %2, i64 4) #5
  %10 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %10, i64 %1, i64 %2, i64 4) #5
  %11 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %11, i64 %1, i64 %2, i64 4) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* nonnull align 8 %8, i64 24, i1 false) #5
  %12 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5
  %13 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 0, i32 0, i32 5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %3
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %18) #5
  br label %22

22:                                               ; preds = %21, %3
  %23 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 1
  %24 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1
  %25 = bitcast %"class.jxl::Plane.132"* %24 to i8*
  %26 = bitcast %"class.jxl::Plane.132"* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false) #5
  %27 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5
  %28 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 1, i32 0, i32 5
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.std::__1::unique_ptr"* %28 to i64*
  %31 = load i64, i64* %30, align 8
  store i8* null, i8** %29, align 8
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %27, i64 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"class.std::__1::unique_ptr"* %27 to i64*
  store i64 %31, i64* %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %22
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #5
  br label %37

37:                                               ; preds = %36, %22
  %38 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 2
  %39 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2
  %40 = bitcast %"class.jxl::Plane.132"* %39 to i8*
  %41 = bitcast %"class.jxl::Plane.132"* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #5
  %42 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 2, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %49, align 8
  %50 = icmp eq i8* %48, null
  br i1 %50, label %51, label %53

51:                                               ; preds = %37
  %52 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %52, align 8
  br label %59

53:                                               ; preds = %37
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %48) #5
  %54 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %56, align 8
  %57 = icmp eq i8* %55, null
  br i1 %57, label %59, label %58

58:                                               ; preds = %53
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %55) #5
  br label %59

59:                                               ; preds = %51, %58, %53
  %60 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  store i8* null, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #5
  br label %64

64:                                               ; preds = %63, %59
  %65 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %66) #5
  br label %69

69:                                               ; preds = %64, %68
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiED2Ev(%"class.jxl::ACImageT"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #5
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #5
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #5
  br label %17

17:                                               ; preds = %12, %16
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiED0Ev(%"class.jxl::ACImageT"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #5
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #5
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #5
  br label %17

17:                                               ; preds = %12, %16
  %18 = bitcast %"class.jxl::ACImageT"* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3jxl8ACImageTIiE4TypeEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN3jxl8ACImageTIiE8PlaneRowEmmm(%"class.jxl::ACImageT"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #5
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #5
  %17 = bitcast i8* %13 to i32*
  %18 = getelementptr inbounds i32, i32* %17, i64 %3
  ret i32* %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNK3jxl8ACImageTIiE8PlaneRowEmmm(%"class.jxl::ACImageT"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #5
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #5
  %17 = bitcast i8* %13 to i32*
  %18 = getelementptr inbounds i32, i32* %17, i64 %3
  ret i32* %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK3jxl8ACImageTIiE12PixelsPerRowEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = lshr i64 %3, 2
  ret i64 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiE8ZeroFillEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %4 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %74, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %11

9:                                                ; preds = %11
  %10 = icmp eq i32 %27, 0
  br i1 %10, label %74, label %30

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %26, %11 ]
  %13 = load i64, i64* %3, align 8
  %14 = mul i64 %13, %12
  %15 = load i8*, i8** %8, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #5
  %19 = getelementptr inbounds i8, i8* %15, i64 %14
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #5
  %23 = load i32, i32* %4, align 8
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %19, i8 0, i64 %25, i1 false) #5
  %26 = add nuw nsw i64 %12, 1
  %27 = load i32, i32* %2, align 4
  %28 = zext i32 %27 to i64
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %11, label %9

30:                                               ; preds = %9
  %31 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ 0, %30 ], [ %47, %32 ]
  %34 = load i64, i64* %3, align 8
  %35 = mul i64 %34, %33
  %36 = load i8*, i8** %31, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #5
  %40 = getelementptr inbounds i8, i8* %36, i64 %35
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 63
  %43 = icmp eq i64 %42, 0
  tail call void @llvm.assume(i1 %43) #5
  %44 = load i32, i32* %4, align 8
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %40, i8 0, i64 %46, i1 false) #5
  %47 = add nuw nsw i64 %33, 1
  %48 = load i32, i32* %2, align 4
  %49 = zext i32 %48 to i64
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %32, label %51

51:                                               ; preds = %32
  %52 = icmp eq i32 %48, 0
  br i1 %52, label %74, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %70, %55 ]
  %57 = load i64, i64* %3, align 8
  %58 = mul i64 %57, %56
  %59 = load i8*, i8** %54, align 8
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #5
  %63 = getelementptr inbounds i8, i8* %59, i64 %58
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #5
  %67 = load i32, i32* %4, align 8
  %68 = zext i32 %67 to i64
  %69 = shl nuw nsw i64 %68, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %63, i8 0, i64 %69, i1 false) #5
  %70 = add nuw nsw i64 %56, 1
  %71 = load i32, i32* %2, align 4
  %72 = zext i32 %71 to i64
  %73 = icmp ult i64 %70, %72
  br i1 %73, label %55, label %74

74:                                               ; preds = %55, %1, %9, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm(%"class.jxl::ACImageT"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %37, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 4
  %13 = load i8*, i8** %11, align 8
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #5
  %17 = zext i32 %4 to i64
  %18 = shl nuw nsw i64 %17, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %13, i8 0, i64 %18, i1 false) #5
  %19 = load i32, i32* %7, align 4
  %20 = icmp ugt i32 %19, 1
  br i1 %20, label %21, label %37

21:                                               ; preds = %10, %21
  %22 = phi i64 [ %33, %21 ], [ 1, %10 ]
  %23 = load i32, i32* %3, align 8
  %24 = load i8*, i8** %11, align 8
  %25 = load i64, i64* %12, align 8
  %26 = mul i64 %25, %22
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = ptrtoint i8* %27 to i64
  %29 = and i64 %28, 63
  %30 = icmp eq i64 %29, 0
  tail call void @llvm.assume(i1 %30) #5
  %31 = zext i32 %23 to i64
  %32 = shl nuw nsw i64 %31, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %27, i8 0, i64 %32, i1 false) #5
  %33 = add nuw nsw i64 %22, 1
  %34 = load i32, i32* %7, align 4
  %35 = zext i32 %34 to i64
  %36 = icmp ult i64 %33, %35
  br i1 %36, label %21, label %37

37:                                               ; preds = %21, %10, %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3jxl8ACImageTIiE7IsEmptyEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i1 [ true, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderStateD2Ev(%"struct.jxl::PassesDecoderState"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 33, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 33, i32 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #5
  br label %7

7:                                                ; preds = %1, %6
  %8 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32
  %9 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %9, align 8
  %11 = icmp eq %"class.jxl::Image3"* %10, null
  br i1 %11, label %41, label %12

12:                                               ; preds = %7
  %13 = bitcast %"class.jxl::Image3"* %10 to i8*
  %14 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32, i32 0, i32 1
  %15 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %14, align 8
  %16 = icmp eq %"class.jxl::Image3"* %15, %10
  br i1 %16, label %39, label %17

17:                                               ; preds = %12, %34
  %18 = phi %"class.jxl::Image3"* [ %19, %34 ], [ %15, %12 ]
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  store i8* null, i8** %20, align 8
  %22 = icmp eq i8* %21, null
  br i1 %22, label %24, label %23

23:                                               ; preds = %17
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %21) #5
  br label %24

24:                                               ; preds = %23, %17
  %25 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  store i8* null, i8** %25, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %26) #5
  br label %29

29:                                               ; preds = %28, %24
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  store i8* null, i8** %30, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %31) #5
  br label %34

34:                                               ; preds = %33, %29
  %35 = icmp eq %"class.jxl::Image3"* %19, %10
  br i1 %35, label %36, label %17

36:                                               ; preds = %34
  %37 = bitcast %"class.std::__1::vector.314"* %8 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %36, %12
  %40 = phi i8* [ %38, %36 ], [ %13, %12 ]
  store %"class.jxl::Image3"* %10, %"class.jxl::Image3"** %14, align 8
  tail call void @_ZdlPv(i8* %40) #25
  br label %41

41:                                               ; preds = %7, %39
  %42 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31
  %43 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %42, i64 0, i32 0, i32 0
  %44 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %43, align 8
  %45 = icmp eq %"class.jxl::Plane.1"* %44, null
  br i1 %45, label %65, label %46

46:                                               ; preds = %41
  %47 = bitcast %"class.jxl::Plane.1"* %44 to i8*
  %48 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31, i32 0, i32 1
  %49 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %48, align 8
  %50 = icmp eq %"class.jxl::Plane.1"* %49, %44
  br i1 %50, label %63, label %51

51:                                               ; preds = %46, %58
  %52 = phi %"class.jxl::Plane.1"* [ %53, %58 ], [ %49, %46 ]
  %53 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %52, i64 -1
  %54 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %52, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  store i8* null, i8** %54, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %51
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %55) #5
  br label %58

58:                                               ; preds = %57, %51
  %59 = icmp eq %"class.jxl::Plane.1"* %53, %44
  br i1 %59, label %60, label %51

60:                                               ; preds = %58
  %61 = bitcast %"class.std::__1::vector.87"* %42 to i8**
  %62 = load i8*, i8** %61, align 8
  br label %63

63:                                               ; preds = %60, %46
  %64 = phi i8* [ %62, %60 ], [ %47, %46 ]
  store %"class.jxl::Plane.1"* %44, %"class.jxl::Plane.1"** %48, align 8
  tail call void @_ZdlPv(i8* %64) #25
  br label %65

65:                                               ; preds = %41, %63
  %66 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 3
  %67 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %66, i64 0, i32 0, i32 0
  %68 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %67, align 8
  %69 = icmp eq %"class.jxl::Image3"* %68, null
  br i1 %69, label %99, label %70

70:                                               ; preds = %65
  %71 = bitcast %"class.jxl::Image3"* %68 to i8*
  %72 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 3, i32 0, i32 1
  %73 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %72, align 8
  %74 = icmp eq %"class.jxl::Image3"* %73, %68
  br i1 %74, label %97, label %75

75:                                               ; preds = %70, %92
  %76 = phi %"class.jxl::Image3"* [ %77, %92 ], [ %73, %70 ]
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  store i8* null, i8** %78, align 8
  %80 = icmp eq i8* %79, null
  br i1 %80, label %82, label %81

81:                                               ; preds = %75
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %79) #5
  br label %82

82:                                               ; preds = %81, %75
  %83 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  store i8* null, i8** %83, align 8
  %85 = icmp eq i8* %84, null
  br i1 %85, label %87, label %86

86:                                               ; preds = %82
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %84) #5
  br label %87

87:                                               ; preds = %86, %82
  %88 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  store i8* null, i8** %88, align 8
  %90 = icmp eq i8* %89, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %87
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %89) #5
  br label %92

92:                                               ; preds = %91, %87
  %93 = icmp eq %"class.jxl::Image3"* %77, %68
  br i1 %93, label %94, label %75

94:                                               ; preds = %92
  %95 = bitcast %"class.std::__1::vector.314"* %66 to i8**
  %96 = load i8*, i8** %95, align 8
  br label %97

97:                                               ; preds = %94, %70
  %98 = phi i8* [ %96, %94 ], [ %71, %70 ]
  store %"class.jxl::Image3"* %68, %"class.jxl::Image3"** %72, align 8
  tail call void @_ZdlPv(i8* %98) #25
  br label %99

99:                                               ; preds = %65, %97
  %100 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 2
  %101 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %100, i64 0, i32 0, i32 0
  %102 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %101, align 8
  %103 = icmp eq %"class.jxl::Image3"* %102, null
  br i1 %103, label %504, label %475

104:                                              ; preds = %572
  %105 = bitcast %"class.jxl::Image3"* %575 to i8*
  %106 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29, i32 0, i32 1
  %107 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %106, align 8
  %108 = icmp eq %"class.jxl::Image3"* %107, %575
  br i1 %108, label %131, label %109

109:                                              ; preds = %104, %126
  %110 = phi %"class.jxl::Image3"* [ %111, %126 ], [ %107, %104 ]
  %111 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  store i8* null, i8** %112, align 8
  %114 = icmp eq i8* %113, null
  br i1 %114, label %116, label %115

115:                                              ; preds = %109
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %113) #5
  br label %116

116:                                              ; preds = %115, %109
  %117 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  store i8* null, i8** %117, align 8
  %119 = icmp eq i8* %118, null
  br i1 %119, label %121, label %120

120:                                              ; preds = %116
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %118) #5
  br label %121

121:                                              ; preds = %120, %116
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  store i8* null, i8** %122, align 8
  %124 = icmp eq i8* %123, null
  br i1 %124, label %126, label %125

125:                                              ; preds = %121
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %123) #5
  br label %126

126:                                              ; preds = %125, %121
  %127 = icmp eq %"class.jxl::Image3"* %111, %575
  br i1 %127, label %128, label %109

128:                                              ; preds = %126
  %129 = bitcast %"class.std::__1::vector.314"* %573 to i8**
  %130 = load i8*, i8** %129, align 8
  br label %131

131:                                              ; preds = %128, %104
  %132 = phi i8* [ %130, %128 ], [ %105, %104 ]
  store %"class.jxl::Image3"* %575, %"class.jxl::Image3"** %106, align 8
  tail call void @_ZdlPv(i8* %132) #25
  br label %133

133:                                              ; preds = %572, %131
  %134 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28
  %135 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %134, i64 0, i32 0, i32 0
  %136 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %135, align 8
  %137 = icmp eq %"class.jxl::Image3"* %136, null
  br i1 %137, label %167, label %138

138:                                              ; preds = %133
  %139 = bitcast %"class.jxl::Image3"* %136 to i8*
  %140 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28, i32 0, i32 1
  %141 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %140, align 8
  %142 = icmp eq %"class.jxl::Image3"* %141, %136
  br i1 %142, label %165, label %143

143:                                              ; preds = %138, %160
  %144 = phi %"class.jxl::Image3"* [ %145, %160 ], [ %141, %138 ]
  %145 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1
  %146 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %147 = load i8*, i8** %146, align 8
  store i8* null, i8** %146, align 8
  %148 = icmp eq i8* %147, null
  br i1 %148, label %150, label %149

149:                                              ; preds = %143
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %147) #5
  br label %150

150:                                              ; preds = %149, %143
  %151 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  store i8* null, i8** %151, align 8
  %153 = icmp eq i8* %152, null
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %152) #5
  br label %155

155:                                              ; preds = %154, %150
  %156 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %157 = load i8*, i8** %156, align 8
  store i8* null, i8** %156, align 8
  %158 = icmp eq i8* %157, null
  br i1 %158, label %160, label %159

159:                                              ; preds = %155
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %157) #5
  br label %160

160:                                              ; preds = %159, %155
  %161 = icmp eq %"class.jxl::Image3"* %145, %136
  br i1 %161, label %162, label %143

162:                                              ; preds = %160
  %163 = bitcast %"class.std::__1::vector.314"* %134 to i8**
  %164 = load i8*, i8** %163, align 8
  br label %165

165:                                              ; preds = %162, %138
  %166 = phi i8* [ %164, %162 ], [ %139, %138 ]
  store %"class.jxl::Image3"* %136, %"class.jxl::Image3"** %140, align 8
  tail call void @_ZdlPv(i8* %166) #25
  br label %167

167:                                              ; preds = %133, %165
  %168 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27
  %169 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %168, i64 0, i32 0, i32 0
  %170 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %169, align 8
  %171 = icmp eq %"class.jxl::Image3"* %170, null
  br i1 %171, label %201, label %172

172:                                              ; preds = %167
  %173 = bitcast %"class.jxl::Image3"* %170 to i8*
  %174 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27, i32 0, i32 1
  %175 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %174, align 8
  %176 = icmp eq %"class.jxl::Image3"* %175, %170
  br i1 %176, label %199, label %177

177:                                              ; preds = %172, %194
  %178 = phi %"class.jxl::Image3"* [ %179, %194 ], [ %175, %172 ]
  %179 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1
  %180 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  store i8* null, i8** %180, align 8
  %182 = icmp eq i8* %181, null
  br i1 %182, label %184, label %183

183:                                              ; preds = %177
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %181) #5
  br label %184

184:                                              ; preds = %183, %177
  %185 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %186 = load i8*, i8** %185, align 8
  store i8* null, i8** %185, align 8
  %187 = icmp eq i8* %186, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %184
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %186) #5
  br label %189

189:                                              ; preds = %188, %184
  %190 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %191 = load i8*, i8** %190, align 8
  store i8* null, i8** %190, align 8
  %192 = icmp eq i8* %191, null
  br i1 %192, label %194, label %193

193:                                              ; preds = %189
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %191) #5
  br label %194

194:                                              ; preds = %193, %189
  %195 = icmp eq %"class.jxl::Image3"* %179, %170
  br i1 %195, label %196, label %177

196:                                              ; preds = %194
  %197 = bitcast %"class.std::__1::vector.314"* %168 to i8**
  %198 = load i8*, i8** %197, align 8
  br label %199

199:                                              ; preds = %196, %172
  %200 = phi i8* [ %198, %196 ], [ %173, %172 ]
  store %"class.jxl::Image3"* %170, %"class.jxl::Image3"** %174, align 8
  tail call void @_ZdlPv(i8* %200) #25
  br label %201

201:                                              ; preds = %167, %199
  %202 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 26, i32 1, i32 0, i32 0, i32 0
  %203 = load %"struct.std::__1::atomic.310"*, %"struct.std::__1::atomic.310"** %202, align 8
  store %"struct.std::__1::atomic.310"* null, %"struct.std::__1::atomic.310"** %202, align 8
  %204 = icmp eq %"struct.std::__1::atomic.310"* %203, null
  br i1 %204, label %207, label %205

205:                                              ; preds = %201
  %206 = getelementptr inbounds %"struct.std::__1::atomic.310", %"struct.std::__1::atomic.310"* %203, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdaPv(i8* %206) #25
  br label %207

207:                                              ; preds = %201, %205
  %208 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 25, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %209 = load i8*, i8** %208, align 8
  store i8* null, i8** %208, align 8
  %210 = icmp eq i8* %209, null
  br i1 %210, label %212, label %211

211:                                              ; preds = %207
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %209) #5
  br label %212

212:                                              ; preds = %207, %211
  %213 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24
  %214 = getelementptr inbounds %"class.std::__1::vector.300", %"class.std::__1::vector.300"* %213, i64 0, i32 0, i32 0
  %215 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %214, align 8
  %216 = icmp eq %"class.jxl::FilterPipeline"* %215, null
  br i1 %216, label %246, label %217

217:                                              ; preds = %212
  %218 = bitcast %"class.jxl::FilterPipeline"* %215 to i8*
  %219 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 1
  %220 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %219, align 8
  %221 = icmp eq %"class.jxl::FilterPipeline"* %220, %215
  br i1 %221, label %244, label %222

222:                                              ; preds = %217, %239
  %223 = phi %"class.jxl::FilterPipeline"* [ %224, %239 ], [ %220, %217 ]
  %224 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1
  %225 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %226 = load i8*, i8** %225, align 8
  store i8* null, i8** %225, align 8
  %227 = icmp eq i8* %226, null
  br i1 %227, label %229, label %228

228:                                              ; preds = %222
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %226) #5
  br label %229

229:                                              ; preds = %228, %222
  %230 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %231 = load i8*, i8** %230, align 8
  store i8* null, i8** %230, align 8
  %232 = icmp eq i8* %231, null
  br i1 %232, label %234, label %233

233:                                              ; preds = %229
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %231) #5
  br label %234

234:                                              ; preds = %233, %229
  %235 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %236 = load i8*, i8** %235, align 8
  store i8* null, i8** %235, align 8
  %237 = icmp eq i8* %236, null
  br i1 %237, label %239, label %238

238:                                              ; preds = %234
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %236) #5
  br label %239

239:                                              ; preds = %238, %234
  %240 = icmp eq %"class.jxl::FilterPipeline"* %224, %215
  br i1 %240, label %241, label %222

241:                                              ; preds = %239
  %242 = bitcast %"class.std::__1::vector.300"* %213 to i8**
  %243 = load i8*, i8** %242, align 8
  br label %244

244:                                              ; preds = %241, %217
  %245 = phi i8* [ %243, %241 ], [ %218, %217 ]
  store %"class.jxl::FilterPipeline"* %215, %"class.jxl::FilterPipeline"** %219, align 8
  tail call void @_ZdlPv(i8* %245) #25
  br label %246

246:                                              ; preds = %212, %244
  %247 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 23, i32 0, i32 0, i32 0
  %248 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %247, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %247, align 8
  %249 = icmp eq %"class.jxl::ACImage"* %248, null
  br i1 %249, label %255, label %250

250:                                              ; preds = %246
  %251 = bitcast %"class.jxl::ACImage"* %248 to void (%"class.jxl::ACImage"*)***
  %252 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %251, align 8
  %253 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %252, i64 1
  %254 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %253, align 8
  tail call void %254(%"class.jxl::ACImage"* nonnull %248) #5
  br label %255

255:                                              ; preds = %246, %250
  %256 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20
  %257 = getelementptr inbounds %"class.std::__1::vector.293", %"class.std::__1::vector.293"* %256, i64 0, i32 0, i32 0
  %258 = load %"class.std::__1::vector.287"*, %"class.std::__1::vector.287"** %257, align 8
  %259 = icmp eq %"class.std::__1::vector.287"* %258, null
  br i1 %259, label %283, label %260

260:                                              ; preds = %255
  %261 = bitcast %"class.std::__1::vector.287"* %258 to i8*
  %262 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20, i32 0, i32 1
  %263 = load %"class.std::__1::vector.287"*, %"class.std::__1::vector.287"** %262, align 8
  %264 = icmp eq %"class.std::__1::vector.287"* %263, %258
  br i1 %264, label %281, label %265

265:                                              ; preds = %260, %276
  %266 = phi %"class.std::__1::vector.287"* [ %267, %276 ], [ %263, %260 ]
  %267 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %266, i64 -1
  %268 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %267, i64 0, i32 0, i32 0
  %269 = load float*, float** %268, align 8
  %270 = icmp eq float* %269, null
  br i1 %270, label %276, label %271

271:                                              ; preds = %265
  %272 = ptrtoint float* %269 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %266, i64 -1, i32 0, i32 1
  %274 = bitcast float** %273 to i64*
  store i64 %272, i64* %274, align 8
  %275 = bitcast float* %269 to i8*
  tail call void @_ZdlPv(i8* %275) #25
  br label %276

276:                                              ; preds = %271, %265
  %277 = icmp eq %"class.std::__1::vector.287"* %267, %258
  br i1 %277, label %278, label %265

278:                                              ; preds = %276
  %279 = bitcast %"class.std::__1::vector.293"* %256 to i8**
  %280 = load i8*, i8** %279, align 8
  br label %281

281:                                              ; preds = %278, %260
  %282 = phi i8* [ %280, %278 ], [ %261, %260 ]
  store %"class.std::__1::vector.287"* %258, %"class.std::__1::vector.287"** %262, align 8
  tail call void @_ZdlPv(i8* %282) #25
  br label %283

283:                                              ; preds = %255, %281
  %284 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19, i32 0, i32 0
  %285 = load float*, float** %284, align 8
  %286 = icmp eq float* %285, null
  br i1 %286, label %292, label %287

287:                                              ; preds = %283
  %288 = ptrtoint float* %285 to i64
  %289 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19, i32 0, i32 1
  %290 = bitcast float** %289 to i64*
  store i64 %288, i64* %290, align 8
  %291 = bitcast float* %285 to i8*
  tail call void @_ZdlPv(i8* %291) #25
  br label %292

292:                                              ; preds = %283, %287
  %293 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 2
  %294 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %293, align 8
  %295 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %294, i64 0, i32 1
  %296 = load void (i8*)*, void (i8*)** %295, align 8
  %297 = icmp eq void (i8*)* %296, null
  br i1 %297, label %301, label %298

298:                                              ; preds = %292
  %299 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 0, i32 0
  %300 = load i8*, i8** %299, align 8
  tail call void %296(i8* %300) #5
  br label %301

301:                                              ; preds = %292, %298
  %302 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %303 = load i8*, i8** %302, align 8
  store i8* null, i8** %302, align 8
  %304 = icmp eq i8* %303, null
  br i1 %304, label %306, label %305

305:                                              ; preds = %301
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %303) #5
  br label %306

306:                                              ; preds = %305, %301
  %307 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %308 = load i8*, i8** %307, align 8
  store i8* null, i8** %307, align 8
  %309 = icmp eq i8* %308, null
  br i1 %309, label %311, label %310

310:                                              ; preds = %306
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %308) #5
  br label %311

311:                                              ; preds = %310, %306
  %312 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %313 = load i8*, i8** %312, align 8
  store i8* null, i8** %312, align 8
  %314 = icmp eq i8* %313, null
  br i1 %314, label %316, label %315

315:                                              ; preds = %311
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %313) #5
  br label %316

316:                                              ; preds = %311, %315
  %317 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %318 = load i8*, i8** %317, align 8
  store i8* null, i8** %317, align 8
  %319 = icmp eq i8* %318, null
  br i1 %319, label %321, label %320

320:                                              ; preds = %316
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %318) #5
  br label %321

321:                                              ; preds = %320, %316
  %322 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %323 = load i8*, i8** %322, align 8
  store i8* null, i8** %322, align 8
  %324 = icmp eq i8* %323, null
  br i1 %324, label %326, label %325

325:                                              ; preds = %321
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %323) #5
  br label %326

326:                                              ; preds = %325, %321
  %327 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %328 = load i8*, i8** %327, align 8
  store i8* null, i8** %327, align 8
  %329 = icmp eq i8* %328, null
  br i1 %329, label %331, label %330

330:                                              ; preds = %326
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %328) #5
  br label %331

331:                                              ; preds = %326, %330
  %332 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 11
  %333 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %332, i64 0, i32 0, i32 0
  %334 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %333, align 8
  %335 = icmp eq %"class.jxl::Plane.1"* %334, null
  br i1 %335, label %355, label %336

336:                                              ; preds = %331
  %337 = bitcast %"class.jxl::Plane.1"* %334 to i8*
  %338 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 11, i32 0, i32 1
  %339 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %338, align 8
  %340 = icmp eq %"class.jxl::Plane.1"* %339, %334
  br i1 %340, label %353, label %341

341:                                              ; preds = %336, %348
  %342 = phi %"class.jxl::Plane.1"* [ %343, %348 ], [ %339, %336 ]
  %343 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %342, i64 -1
  %344 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %342, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %345 = load i8*, i8** %344, align 8
  store i8* null, i8** %344, align 8
  %346 = icmp eq i8* %345, null
  br i1 %346, label %348, label %347

347:                                              ; preds = %341
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %345) #5
  br label %348

348:                                              ; preds = %347, %341
  %349 = icmp eq %"class.jxl::Plane.1"* %343, %334
  br i1 %349, label %350, label %341

350:                                              ; preds = %348
  %351 = bitcast %"class.std::__1::vector.87"* %332 to i8**
  %352 = load i8*, i8** %351, align 8
  br label %353

353:                                              ; preds = %350, %336
  %354 = phi i8* [ %352, %350 ], [ %337, %336 ]
  store %"class.jxl::Plane.1"* %334, %"class.jxl::Plane.1"** %338, align 8
  tail call void @_ZdlPv(i8* %354) #25
  br label %355

355:                                              ; preds = %331, %353
  %356 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %357 = load i8*, i8** %356, align 8
  store i8* null, i8** %356, align 8
  %358 = icmp eq i8* %357, null
  br i1 %358, label %360, label %359

359:                                              ; preds = %355
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %357) #5
  br label %360

360:                                              ; preds = %359, %355
  %361 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %362 = load i8*, i8** %361, align 8
  store i8* null, i8** %361, align 8
  %363 = icmp eq i8* %362, null
  br i1 %363, label %365, label %364

364:                                              ; preds = %360
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %362) #5
  br label %365

365:                                              ; preds = %364, %360
  %366 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %367 = load i8*, i8** %366, align 8
  store i8* null, i8** %366, align 8
  %368 = icmp eq i8* %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %367) #5
  br label %370

370:                                              ; preds = %365, %369
  %371 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 7
  %372 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %371, i64 0, i32 0, i32 0
  %373 = load %"class.std::__1::vector.6"*, %"class.std::__1::vector.6"** %372, align 8
  %374 = icmp eq %"class.std::__1::vector.6"* %373, null
  br i1 %374, label %397, label %375

375:                                              ; preds = %370
  %376 = bitcast %"class.std::__1::vector.6"* %373 to i8*
  %377 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 7, i32 0, i32 1
  %378 = load %"class.std::__1::vector.6"*, %"class.std::__1::vector.6"** %377, align 8
  %379 = icmp eq %"class.std::__1::vector.6"* %378, %373
  br i1 %379, label %395, label %380

380:                                              ; preds = %375, %390
  %381 = phi %"class.std::__1::vector.6"* [ %382, %390 ], [ %378, %375 ]
  %382 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %381, i64 -1
  %383 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %382, i64 0, i32 0, i32 0
  %384 = load i8*, i8** %383, align 8
  %385 = icmp eq i8* %384, null
  br i1 %385, label %390, label %386

386:                                              ; preds = %380
  %387 = ptrtoint i8* %384 to i64
  %388 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %381, i64 -1, i32 0, i32 1
  %389 = bitcast i8** %388 to i64*
  store i64 %387, i64* %389, align 8
  tail call void @_ZdlPv(i8* nonnull %384) #25
  br label %390

390:                                              ; preds = %386, %380
  %391 = icmp eq %"class.std::__1::vector.6"* %382, %373
  br i1 %391, label %392, label %380

392:                                              ; preds = %390
  %393 = bitcast %"class.std::__1::vector"* %371 to i8**
  %394 = load i8*, i8** %393, align 8
  br label %395

395:                                              ; preds = %392, %375
  %396 = phi i8* [ %394, %392 ], [ %376, %375 ]
  store %"class.std::__1::vector.6"* %373, %"class.std::__1::vector.6"** %377, align 8
  tail call void @_ZdlPv(i8* %396) #25
  br label %397

397:                                              ; preds = %370, %395
  %398 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 6
  %399 = getelementptr inbounds %"class.std::__1::vector.261", %"class.std::__1::vector.261"* %398, i64 0, i32 0, i32 0
  %400 = load %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"** %399, align 8
  %401 = icmp eq %"struct.jxl::ANSCode"* %400, null
  br i1 %401, label %419, label %402

402:                                              ; preds = %397
  %403 = bitcast %"struct.jxl::ANSCode"* %400 to i8*
  %404 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 6, i32 0, i32 1
  %405 = load %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"** %404, align 8
  %406 = icmp eq %"struct.jxl::ANSCode"* %405, %400
  br i1 %406, label %417, label %407

407:                                              ; preds = %402
  %408 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 6, i32 0, i32 2
  %409 = bitcast %"class.std::__1::__compressed_pair.277"* %408 to %"class.std::__1::allocator.280"*
  br label %410

410:                                              ; preds = %410, %407
  %411 = phi %"struct.jxl::ANSCode"* [ %405, %407 ], [ %412, %410 ]
  %412 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %411, i64 -1
  tail call void @_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_(%"class.std::__1::allocator.280"* %409, %"struct.jxl::ANSCode"* %412) #5
  %413 = icmp eq %"struct.jxl::ANSCode"* %412, %400
  br i1 %413, label %414, label %410

414:                                              ; preds = %410
  %415 = bitcast %"class.std::__1::vector.261"* %398 to i8**
  %416 = load i8*, i8** %415, align 8
  br label %417

417:                                              ; preds = %414, %402
  %418 = phi i8* [ %416, %414 ], [ %403, %402 ]
  store %"struct.jxl::ANSCode"* %400, %"struct.jxl::ANSCode"** %404, align 8
  tail call void @_ZdlPv(i8* %418) #25
  br label %419

419:                                              ; preds = %397, %417
  %420 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 5
  %421 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %420, i64 0, i32 0, i32 0
  %422 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %421, align 8
  %423 = icmp eq %"class.jxl::Plane.1"* %422, null
  br i1 %423, label %443, label %424

424:                                              ; preds = %419
  %425 = bitcast %"class.jxl::Plane.1"* %422 to i8*
  %426 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 5, i32 0, i32 1
  %427 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %426, align 8
  %428 = icmp eq %"class.jxl::Plane.1"* %427, %422
  br i1 %428, label %441, label %429

429:                                              ; preds = %424, %436
  %430 = phi %"class.jxl::Plane.1"* [ %431, %436 ], [ %427, %424 ]
  %431 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %430, i64 -1
  %432 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %430, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %433 = load i8*, i8** %432, align 8
  store i8* null, i8** %432, align 8
  %434 = icmp eq i8* %433, null
  br i1 %434, label %436, label %435

435:                                              ; preds = %429
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %433) #5
  br label %436

436:                                              ; preds = %435, %429
  %437 = icmp eq %"class.jxl::Plane.1"* %431, %422
  br i1 %437, label %438, label %429

438:                                              ; preds = %436
  %439 = bitcast %"class.std::__1::vector.87"* %420 to i8**
  %440 = load i8*, i8** %439, align 8
  br label %441

441:                                              ; preds = %438, %424
  %442 = phi i8* [ %440, %438 ], [ %425, %424 ]
  store %"class.jxl::Plane.1"* %422, %"class.jxl::Plane.1"** %426, align 8
  tail call void @_ZdlPv(i8* %442) #25
  br label %443

443:                                              ; preds = %419, %441
  %444 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 4, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %445 = load i8*, i8** %444, align 8
  store i8* null, i8** %444, align 8
  %446 = icmp eq i8* %445, null
  br i1 %446, label %448, label %447

447:                                              ; preds = %443
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %445) #5
  br label %448

448:                                              ; preds = %447, %443
  %449 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 4, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %450 = load i8*, i8** %449, align 8
  store i8* null, i8** %449, align 8
  %451 = icmp eq i8* %450, null
  br i1 %451, label %453, label %452

452:                                              ; preds = %448
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %450) #5
  br label %453

453:                                              ; preds = %452, %448
  %454 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 4, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %455 = load i8*, i8** %454, align 8
  store i8* null, i8** %454, align 8
  %456 = icmp eq i8* %455, null
  br i1 %456, label %458, label %457

457:                                              ; preds = %453
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %455) #5
  br label %458

458:                                              ; preds = %453, %457
  %459 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %460 = load i8*, i8** %459, align 8
  store i8* null, i8** %459, align 8
  %461 = icmp eq i8* %460, null
  br i1 %461, label %463, label %462

462:                                              ; preds = %458
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %460) #5
  br label %463

463:                                              ; preds = %462, %458
  %464 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %465 = load i8*, i8** %464, align 8
  store i8* null, i8** %464, align 8
  %466 = icmp eq i8* %465, null
  br i1 %466, label %468, label %467

467:                                              ; preds = %463
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %465) #5
  br label %468

468:                                              ; preds = %467, %463
  %469 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %470 = load i8*, i8** %469, align 8
  store i8* null, i8** %469, align 8
  %471 = icmp eq i8* %470, null
  br i1 %471, label %473, label %472

472:                                              ; preds = %468
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %470) #5
  br label %473

473:                                              ; preds = %468, %472
  %474 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 0
  tail call void @_ZN3jxl17PassesSharedStateD2Ev(%"struct.jxl::PassesSharedState"* %474) #5
  ret void

475:                                              ; preds = %99
  %476 = bitcast %"class.jxl::Image3"* %102 to i8*
  %477 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 2, i32 0, i32 1
  %478 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %477, align 8
  %479 = icmp eq %"class.jxl::Image3"* %478, %102
  br i1 %479, label %502, label %480

480:                                              ; preds = %475, %497
  %481 = phi %"class.jxl::Image3"* [ %482, %497 ], [ %478, %475 ]
  %482 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1
  %483 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %484 = load i8*, i8** %483, align 8
  store i8* null, i8** %483, align 8
  %485 = icmp eq i8* %484, null
  br i1 %485, label %487, label %486

486:                                              ; preds = %480
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %484) #5
  br label %487

487:                                              ; preds = %486, %480
  %488 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %489 = load i8*, i8** %488, align 8
  store i8* null, i8** %488, align 8
  %490 = icmp eq i8* %489, null
  br i1 %490, label %492, label %491

491:                                              ; preds = %487
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %489) #5
  br label %492

492:                                              ; preds = %491, %487
  %493 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %494 = load i8*, i8** %493, align 8
  store i8* null, i8** %493, align 8
  %495 = icmp eq i8* %494, null
  br i1 %495, label %497, label %496

496:                                              ; preds = %492
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %494) #5
  br label %497

497:                                              ; preds = %496, %492
  %498 = icmp eq %"class.jxl::Image3"* %482, %102
  br i1 %498, label %499, label %480

499:                                              ; preds = %497
  %500 = bitcast %"class.std::__1::vector.314"* %100 to i8**
  %501 = load i8*, i8** %500, align 8
  br label %502

502:                                              ; preds = %499, %475
  %503 = phi i8* [ %501, %499 ], [ %476, %475 ]
  store %"class.jxl::Image3"* %102, %"class.jxl::Image3"** %477, align 8
  tail call void @_ZdlPv(i8* %503) #25
  br label %504

504:                                              ; preds = %502, %99
  %505 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 1
  %506 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %505, i64 0, i32 0, i32 0
  %507 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %506, align 8
  %508 = icmp eq %"class.jxl::Image3"* %507, null
  br i1 %508, label %538, label %509

509:                                              ; preds = %504
  %510 = bitcast %"class.jxl::Image3"* %507 to i8*
  %511 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 1, i32 0, i32 1
  %512 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %511, align 8
  %513 = icmp eq %"class.jxl::Image3"* %512, %507
  br i1 %513, label %536, label %514

514:                                              ; preds = %509, %531
  %515 = phi %"class.jxl::Image3"* [ %516, %531 ], [ %512, %509 ]
  %516 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1
  %517 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %518 = load i8*, i8** %517, align 8
  store i8* null, i8** %517, align 8
  %519 = icmp eq i8* %518, null
  br i1 %519, label %521, label %520

520:                                              ; preds = %514
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %518) #5
  br label %521

521:                                              ; preds = %520, %514
  %522 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %523 = load i8*, i8** %522, align 8
  store i8* null, i8** %522, align 8
  %524 = icmp eq i8* %523, null
  br i1 %524, label %526, label %525

525:                                              ; preds = %521
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %523) #5
  br label %526

526:                                              ; preds = %525, %521
  %527 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %528 = load i8*, i8** %527, align 8
  store i8* null, i8** %527, align 8
  %529 = icmp eq i8* %528, null
  br i1 %529, label %531, label %530

530:                                              ; preds = %526
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %528) #5
  br label %531

531:                                              ; preds = %530, %526
  %532 = icmp eq %"class.jxl::Image3"* %516, %507
  br i1 %532, label %533, label %514

533:                                              ; preds = %531
  %534 = bitcast %"class.std::__1::vector.314"* %505 to i8**
  %535 = load i8*, i8** %534, align 8
  br label %536

536:                                              ; preds = %533, %509
  %537 = phi i8* [ %535, %533 ], [ %510, %509 ]
  store %"class.jxl::Image3"* %507, %"class.jxl::Image3"** %511, align 8
  tail call void @_ZdlPv(i8* %537) #25
  br label %538

538:                                              ; preds = %536, %504
  %539 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 0
  %540 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %539, i64 0, i32 0, i32 0
  %541 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %540, align 8
  %542 = icmp eq %"class.jxl::Image3"* %541, null
  br i1 %542, label %572, label %543

543:                                              ; preds = %538
  %544 = bitcast %"class.jxl::Image3"* %541 to i8*
  %545 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 0, i32 0, i32 1
  %546 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %545, align 8
  %547 = icmp eq %"class.jxl::Image3"* %546, %541
  br i1 %547, label %570, label %548

548:                                              ; preds = %543, %565
  %549 = phi %"class.jxl::Image3"* [ %550, %565 ], [ %546, %543 ]
  %550 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1
  %551 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %552 = load i8*, i8** %551, align 8
  store i8* null, i8** %551, align 8
  %553 = icmp eq i8* %552, null
  br i1 %553, label %555, label %554

554:                                              ; preds = %548
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %552) #5
  br label %555

555:                                              ; preds = %554, %548
  %556 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %557 = load i8*, i8** %556, align 8
  store i8* null, i8** %556, align 8
  %558 = icmp eq i8* %557, null
  br i1 %558, label %560, label %559

559:                                              ; preds = %555
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %557) #5
  br label %560

560:                                              ; preds = %559, %555
  %561 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %562 = load i8*, i8** %561, align 8
  store i8* null, i8** %561, align 8
  %563 = icmp eq i8* %562, null
  br i1 %563, label %565, label %564

564:                                              ; preds = %560
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %562) #5
  br label %565

565:                                              ; preds = %564, %560
  %566 = icmp eq %"class.jxl::Image3"* %550, %541
  br i1 %566, label %567, label %548

567:                                              ; preds = %565
  %568 = bitcast %"class.std::__1::vector.314"* %539 to i8**
  %569 = load i8*, i8** %568, align 8
  br label %570

570:                                              ; preds = %567, %543
  %571 = phi i8* [ %569, %567 ], [ %544, %543 ]
  store %"class.jxl::Image3"* %541, %"class.jxl::Image3"** %545, align 8
  tail call void @_ZdlPv(i8* %571) #25
  br label %572

572:                                              ; preds = %570, %538
  %573 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29
  %574 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %573, i64 0, i32 0, i32 0
  %575 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %574, align 8
  %576 = icmp eq %"class.jxl::Image3"* %575, null
  br i1 %576, label %133, label %104
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17PassesSharedStateD2Ev(%"struct.jxl::PassesSharedState"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %2) #5
  %3 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %3) #5
  %4 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %4) #5
  %5 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %5) #5
  %6 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  store i8* null, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %7) #5
  br label %10

10:                                               ; preds = %9, %1
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  store i8* null, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %12) #5
  br label %15

15:                                               ; preds = %14, %10
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  store i8* null, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %17) #5
  br label %20

20:                                               ; preds = %15, %19
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  store i8* null, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %293, label %292

24:                                               ; preds = %333
  %25 = ptrtoint i8* %335 to i64
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  store i64 %25, i64* %27, align 8
  tail call void @_ZdlPv(i8* nonnull %335) #25
  br label %28

28:                                               ; preds = %24, %333
  %29 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 1, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = icmp eq i32* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i32* %30 to i64
  %34 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 1, i32 0, i32 1
  %35 = bitcast i32** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = bitcast i32* %30 to i8*
  tail call void @_ZdlPv(i8* %36) #25
  br label %37

37:                                               ; preds = %32, %28
  %38 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 2, i32 0, i32 0
  %39 = load i32*, i32** %38, align 8
  %40 = icmp eq i32* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = ptrtoint i32* %39 to i64
  %43 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 2, i32 0, i32 1
  %44 = bitcast i32** %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = bitcast i32* %39 to i8*
  tail call void @_ZdlPv(i8* %45) #25
  br label %46

46:                                               ; preds = %41, %37
  %47 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 1, i32 0, i32 0
  %48 = load i32*, i32** %47, align 8
  %49 = icmp eq i32* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = ptrtoint i32* %48 to i64
  %52 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 1, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = bitcast i32* %48 to i8*
  tail call void @_ZdlPv(i8* %54) #25
  br label %55

55:                                               ; preds = %50, %46
  %56 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 0, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8
  %58 = icmp eq i32* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = ptrtoint i32* %57 to i64
  %61 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 0, i32 0, i32 1
  %62 = bitcast i32** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast i32* %57 to i8*
  tail call void @_ZdlPv(i8* %63) #25
  br label %64

64:                                               ; preds = %55, %59
  %65 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %66) #5
  br label %69

69:                                               ; preds = %68, %64
  %70 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  store i8* null, i8** %70, align 8
  %72 = icmp eq i8* %71, null
  br i1 %72, label %74, label %73

73:                                               ; preds = %69
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %71) #5
  br label %74

74:                                               ; preds = %73, %69
  %75 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  store i8* null, i8** %75, align 8
  %77 = icmp eq i8* %76, null
  br i1 %77, label %79, label %78

78:                                               ; preds = %74
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %76) #5
  br label %79

79:                                               ; preds = %74, %78
  %80 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 12, i32 0, i32 5, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  store i8* null, i8** %80, align 8
  %82 = icmp eq i8* %81, null
  br i1 %82, label %84, label %83

83:                                               ; preds = %79
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %81) #5
  br label %84

84:                                               ; preds = %79, %83
  %85 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 11, i32 0, i32 0
  %86 = load i32*, i32** %85, align 8
  %87 = icmp eq i32* %86, null
  br i1 %87, label %93, label %88

88:                                               ; preds = %84
  %89 = ptrtoint i32* %86 to i64
  %90 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 11, i32 0, i32 1
  %91 = bitcast i32** %90 to i64*
  store i64 %89, i64* %91, align 8
  %92 = bitcast i32* %86 to i8*
  tail call void @_ZdlPv(i8* %92) #25
  br label %93

93:                                               ; preds = %84, %88
  %94 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 2, i32 0, i32 0
  %95 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %94, align 8
  %96 = icmp eq %"struct.jxl::Spline::Point"* %95, null
  br i1 %96, label %102, label %97

97:                                               ; preds = %93
  %98 = ptrtoint %"struct.jxl::Spline::Point"* %95 to i64
  %99 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 2, i32 0, i32 1
  %100 = bitcast %"struct.jxl::Spline::Point"** %99 to i64*
  store i64 %98, i64* %100, align 8
  %101 = bitcast %"struct.jxl::Spline::Point"* %95 to i8*
  tail call void @_ZdlPv(i8* %101) #25
  br label %102

102:                                              ; preds = %97, %93
  %103 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1
  %104 = getelementptr inbounds %"class.std::__1::vector.155", %"class.std::__1::vector.155"* %103, i64 0, i32 0, i32 0
  %105 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %104, align 8
  %106 = icmp eq %"class.jxl::QuantizedSpline"* %105, null
  br i1 %106, label %130, label %107

107:                                              ; preds = %102
  %108 = bitcast %"class.jxl::QuantizedSpline"* %105 to i8*
  %109 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1, i32 0, i32 1
  %110 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %109, align 8
  %111 = icmp eq %"class.jxl::QuantizedSpline"* %110, %105
  br i1 %111, label %128, label %112

112:                                              ; preds = %107, %123
  %113 = phi %"class.jxl::QuantizedSpline"* [ %114, %123 ], [ %110, %107 ]
  %114 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %114, i64 0, i32 0, i32 0, i32 0
  %116 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %115, align 8
  %117 = icmp eq %"struct.std::__1::pair"* %116, null
  br i1 %117, label %123, label %118

118:                                              ; preds = %112
  %119 = ptrtoint %"struct.std::__1::pair"* %116 to i64
  %120 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %113, i64 -1, i32 0, i32 0, i32 1
  %121 = bitcast %"struct.std::__1::pair"** %120 to i64*
  store i64 %119, i64* %121, align 8
  %122 = bitcast %"struct.std::__1::pair"* %116 to i8*
  tail call void @_ZdlPv(i8* %122) #25
  br label %123

123:                                              ; preds = %118, %112
  %124 = icmp eq %"class.jxl::QuantizedSpline"* %114, %105
  br i1 %124, label %125, label %112

125:                                              ; preds = %123
  %126 = bitcast %"class.std::__1::vector.155"* %103 to i8**
  %127 = load i8*, i8** %126, align 8
  br label %128

128:                                              ; preds = %125, %107
  %129 = phi i8* [ %127, %125 ], [ %108, %107 ]
  store %"class.jxl::QuantizedSpline"* %105, %"class.jxl::QuantizedSpline"** %109, align 8
  tail call void @_ZdlPv(i8* %129) #25
  br label %130

130:                                              ; preds = %102, %128
  %131 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 3, i32 0, i32 0
  %132 = load i64*, i64** %131, align 8
  %133 = icmp eq i64* %132, null
  br i1 %133, label %139, label %134

134:                                              ; preds = %130
  %135 = ptrtoint i64* %132 to i64
  %136 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 3, i32 0, i32 1
  %137 = bitcast i64** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = bitcast i64* %132 to i8*
  tail call void @_ZdlPv(i8* %138) #25
  br label %139

139:                                              ; preds = %134, %130
  %140 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 2, i32 0, i32 0
  %141 = load i64*, i64** %140, align 8
  %142 = icmp eq i64* %141, null
  br i1 %142, label %148, label %143

143:                                              ; preds = %139
  %144 = ptrtoint i64* %141 to i64
  %145 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 2, i32 0, i32 1
  %146 = bitcast i64** %145 to i64*
  store i64 %144, i64* %146, align 8
  %147 = bitcast i64* %141 to i8*
  tail call void @_ZdlPv(i8* %147) #25
  br label %148

148:                                              ; preds = %143, %139
  %149 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1
  %150 = getelementptr inbounds %"class.std::__1::vector.134", %"class.std::__1::vector.134"* %149, i64 0, i32 0, i32 0
  %151 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %150, align 8
  %152 = icmp eq %"struct.jxl::PatchPosition"* %151, null
  br i1 %152, label %176, label %153

153:                                              ; preds = %148
  %154 = bitcast %"struct.jxl::PatchPosition"* %151 to i8*
  %155 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1, i32 0, i32 1
  %156 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %155, align 8
  %157 = icmp eq %"struct.jxl::PatchPosition"* %156, %151
  br i1 %157, label %174, label %158

158:                                              ; preds = %153, %169
  %159 = phi %"struct.jxl::PatchPosition"* [ %160, %169 ], [ %156, %153 ]
  %160 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1
  %161 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1, i32 2, i32 0, i32 0
  %162 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %161, align 8
  %163 = icmp eq %"struct.jxl::PatchBlending"* %162, null
  br i1 %163, label %169, label %164

164:                                              ; preds = %158
  %165 = ptrtoint %"struct.jxl::PatchBlending"* %162 to i64
  %166 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1, i32 2, i32 0, i32 1
  %167 = bitcast %"struct.jxl::PatchBlending"** %166 to i64*
  store i64 %165, i64* %167, align 8
  %168 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %162, i64 0, i32 0
  tail call void @_ZdlPv(i8* %168) #25
  br label %169

169:                                              ; preds = %164, %158
  %170 = icmp eq %"struct.jxl::PatchPosition"* %160, %151
  br i1 %170, label %171, label %158

171:                                              ; preds = %169
  %172 = bitcast %"class.std::__1::vector.134"* %149 to i8**
  %173 = load i8*, i8** %172, align 8
  br label %174

174:                                              ; preds = %171, %153
  %175 = phi i8* [ %173, %171 ], [ %154, %153 ]
  store %"struct.jxl::PatchPosition"* %151, %"struct.jxl::PatchPosition"** %155, align 8
  tail call void @_ZdlPv(i8* %175) #25
  br label %176

176:                                              ; preds = %148, %174
  %177 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %178 = load i8*, i8** %177, align 8
  store i8* null, i8** %177, align 8
  %179 = icmp eq i8* %178, null
  br i1 %179, label %181, label %180

180:                                              ; preds = %176
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %178) #5
  br label %181

181:                                              ; preds = %180, %176
  %182 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %183 = load i8*, i8** %182, align 8
  store i8* null, i8** %182, align 8
  %184 = icmp eq i8* %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %183) #5
  br label %186

186:                                              ; preds = %181, %185
  %187 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %188 = load i8*, i8** %187, align 8
  store i8* null, i8** %187, align 8
  %189 = icmp eq i8* %188, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %186
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %188) #5
  br label %191

191:                                              ; preds = %186, %190
  %192 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 6, i32 0, i32 5, i32 0, i32 0, i32 0
  %193 = load i8*, i8** %192, align 8
  store i8* null, i8** %192, align 8
  %194 = icmp eq i8* %193, null
  br i1 %194, label %196, label %195

195:                                              ; preds = %191
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %193) #5
  br label %196

196:                                              ; preds = %191, %195
  %197 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 6
  %198 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %197, i64 0, i32 0, i32 0
  %199 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %198, align 8
  %200 = icmp eq %"class.jxl::QuantEncoding"* %199, null
  br i1 %200, label %235, label %201

201:                                              ; preds = %196
  %202 = bitcast %"class.jxl::QuantEncoding"* %199 to i8*
  %203 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 6, i32 0, i32 1
  %204 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %203, align 8
  %205 = icmp eq %"class.jxl::QuantEncoding"* %204, %199
  br i1 %205, label %233, label %206

206:                                              ; preds = %201, %228
  %207 = phi %"class.jxl::QuantEncoding"* [ %208, %228 ], [ %204, %201 ]
  %208 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %207, i64 -1
  %209 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %208, i64 0, i32 0, i32 0
  %210 = load i32, i32* %209, align 8
  %211 = icmp eq i32 %210, 7
  br i1 %211, label %212, label %228

212:                                              ; preds = %206
  %213 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %207, i64 -1, i32 0, i32 3
  %214 = bitcast %union.anon.109* %213 to %"class.std::__1::vector.119"**
  %215 = load %"class.std::__1::vector.119"*, %"class.std::__1::vector.119"** %214, align 8
  %216 = icmp eq %"class.std::__1::vector.119"* %215, null
  br i1 %216, label %228, label %217

217:                                              ; preds = %212
  %218 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %215, i64 0, i32 0, i32 0
  %219 = load i32*, i32** %218, align 8
  %220 = icmp eq i32* %219, null
  br i1 %220, label %226, label %221

221:                                              ; preds = %217
  %222 = ptrtoint i32* %219 to i64
  %223 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %215, i64 0, i32 0, i32 1
  %224 = bitcast i32** %223 to i64*
  store i64 %222, i64* %224, align 8
  %225 = bitcast i32* %219 to i8*
  tail call void @_ZdlPv(i8* %225) #25
  br label %226

226:                                              ; preds = %221, %217
  %227 = bitcast %"class.std::__1::vector.119"* %215 to i8*
  tail call void @_ZdlPv(i8* %227) #25
  br label %228

228:                                              ; preds = %226, %212, %206
  %229 = icmp eq %"class.jxl::QuantEncoding"* %208, %199
  br i1 %229, label %230, label %206

230:                                              ; preds = %228
  %231 = bitcast %"class.std::__1::vector.105"* %197 to i8**
  %232 = load i8*, i8** %231, align 8
  br label %233

233:                                              ; preds = %230, %201
  %234 = phi i8* [ %232, %230 ], [ %202, %201 ]
  store %"class.jxl::QuantEncoding"* %199, %"class.jxl::QuantEncoding"** %203, align 8
  tail call void @_ZdlPv(i8* %234) #25
  br label %235

235:                                              ; preds = %233, %196
  %236 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %237 = load float*, float** %236, align 8
  store float* null, float** %236, align 8
  %238 = icmp eq float* %237, null
  br i1 %238, label %245, label %239

239:                                              ; preds = %235
  %240 = bitcast float* %237 to i8*
  %241 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 0
  %242 = load void (i8*, i8*)*, void (i8*, i8*)** %241, align 8
  %243 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 1
  %244 = load i8*, i8** %243, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %240, void (i8*, i8*)* %242, i8* %244) #5
  br label %245

245:                                              ; preds = %235, %239
  %246 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %247 = load i8*, i8** %246, align 8
  store i8* null, i8** %246, align 8
  %248 = icmp eq i8* %247, null
  br i1 %248, label %250, label %249

249:                                              ; preds = %245
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %247) #5
  br label %250

250:                                              ; preds = %245, %249
  %251 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11FrameHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %251, align 8
  %252 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 19
  %253 = getelementptr inbounds %"class.std::__1::vector.94", %"class.std::__1::vector.94"* %252, i64 0, i32 0, i32 0
  %254 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %253, align 8
  %255 = icmp eq %"struct.jxl::BlendingInfo"* %254, null
  br i1 %255, label %273, label %256

256:                                              ; preds = %250
  %257 = bitcast %"struct.jxl::BlendingInfo"* %254 to i8*
  %258 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 19, i32 0, i32 1
  %259 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %258, align 8
  %260 = icmp eq %"struct.jxl::BlendingInfo"* %259, %254
  br i1 %260, label %271, label %261

261:                                              ; preds = %256, %261
  %262 = phi %"struct.jxl::BlendingInfo"* [ %263, %261 ], [ %259, %256 ]
  %263 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %262, i64 -1
  %264 = bitcast %"struct.jxl::BlendingInfo"* %263 to void (%"struct.jxl::BlendingInfo"*)***
  %265 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %264, align 8
  %266 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %265, align 8
  tail call void %266(%"struct.jxl::BlendingInfo"* %263) #5
  %267 = icmp eq %"struct.jxl::BlendingInfo"* %263, %254
  br i1 %267, label %268, label %261

268:                                              ; preds = %261
  %269 = bitcast %"class.std::__1::vector.94"* %252 to i8**
  %270 = load i8*, i8** %269, align 8
  br label %271

271:                                              ; preds = %268, %256
  %272 = phi i8* [ %270, %268 ], [ %257, %256 ]
  store %"struct.jxl::BlendingInfo"* %254, %"struct.jxl::BlendingInfo"** %258, align 8
  tail call void @_ZdlPv(i8* %272) #25
  br label %273

273:                                              ; preds = %271, %250
  %274 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 16, i32 0, i32 0
  %275 = load i32*, i32** %274, align 8
  %276 = icmp eq i32* %275, null
  br i1 %276, label %282, label %277

277:                                              ; preds = %273
  %278 = ptrtoint i32* %275 to i64
  %279 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 16, i32 0, i32 1
  %280 = bitcast i32** %279 to i64*
  store i64 %278, i64* %280, align 8
  %281 = bitcast i32* %275 to i8*
  tail call void @_ZdlPv(i8* %281) #25
  br label %282

282:                                              ; preds = %277, %273
  %283 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 11
  %284 = bitcast %"class.std::__1::basic_string"* %283 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %285 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %284, i64 0, i32 1, i32 0
  %286 = load i8, i8* %285, align 1
  %287 = icmp slt i8 %286, 0
  br i1 %287, label %288, label %291

288:                                              ; preds = %282
  %289 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %283, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %290 = load i8*, i8** %289, align 8
  tail call void @_ZdlPv(i8* %290) #25
  br label %291

291:                                              ; preds = %282, %288
  ret void

292:                                              ; preds = %20
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %22) #5
  br label %293

293:                                              ; preds = %292, %20
  %294 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %295 = load i8*, i8** %294, align 8
  store i8* null, i8** %294, align 8
  %296 = icmp eq i8* %295, null
  br i1 %296, label %298, label %297

297:                                              ; preds = %293
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %295) #5
  br label %298

298:                                              ; preds = %297, %293
  %299 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %300 = load i8*, i8** %299, align 8
  store i8* null, i8** %299, align 8
  %301 = icmp eq i8* %300, null
  br i1 %301, label %303, label %302

302:                                              ; preds = %298
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %300) #5
  br label %303

303:                                              ; preds = %302, %298
  %304 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %305 = load i8*, i8** %304, align 8
  store i8* null, i8** %304, align 8
  %306 = icmp eq i8* %305, null
  br i1 %306, label %308, label %307

307:                                              ; preds = %303
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %305) #5
  br label %308

308:                                              ; preds = %307, %303
  %309 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %310 = load i8*, i8** %309, align 8
  store i8* null, i8** %309, align 8
  %311 = icmp eq i8* %310, null
  br i1 %311, label %313, label %312

312:                                              ; preds = %308
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %310) #5
  br label %313

313:                                              ; preds = %312, %308
  %314 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %315 = load i8*, i8** %314, align 8
  store i8* null, i8** %314, align 8
  %316 = icmp eq i8* %315, null
  br i1 %316, label %318, label %317

317:                                              ; preds = %313
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %315) #5
  br label %318

318:                                              ; preds = %317, %313
  %319 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %320 = load i8*, i8** %319, align 8
  store i8* null, i8** %319, align 8
  %321 = icmp eq i8* %320, null
  br i1 %321, label %323, label %322

322:                                              ; preds = %318
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %320) #5
  br label %323

323:                                              ; preds = %322, %318
  %324 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %325 = load i8*, i8** %324, align 8
  store i8* null, i8** %324, align 8
  %326 = icmp eq i8* %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %325) #5
  br label %328

328:                                              ; preds = %327, %323
  %329 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %330 = load i8*, i8** %329, align 8
  store i8* null, i8** %329, align 8
  %331 = icmp eq i8* %330, null
  br i1 %331, label %333, label %332

332:                                              ; preds = %328
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %330) #5
  br label %333

333:                                              ; preds = %332, %328
  %334 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 0
  %335 = load i8*, i8** %334, align 8
  %336 = icmp eq i8* %335, null
  br i1 %336, label %28, label %24
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #22

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_(%"class.std::__1::allocator.280"*, %"struct.jxl::ANSCode"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #25
  br label %11

11:                                               ; preds = %6, %2
  %12 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 0
  %13 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %12, align 8
  %14 = icmp eq %"struct.jxl::HybridUintConfig"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint %"struct.jxl::HybridUintConfig"* %13 to i64
  %17 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 1
  %18 = bitcast %"struct.jxl::HybridUintConfig"** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast %"struct.jxl::HybridUintConfig"* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #25
  br label %20

20:                                               ; preds = %15, %11
  %21 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1
  %22 = getelementptr inbounds %"class.std::__1::vector.263", %"class.std::__1::vector.263"* %21, i64 0, i32 0, i32 0
  %23 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %22, align 8
  %24 = icmp eq %"struct.jxl::HuffmanDecodingData"* %23, null
  br i1 %24, label %48, label %25

25:                                               ; preds = %20
  %26 = bitcast %"struct.jxl::HuffmanDecodingData"* %23 to i8*
  %27 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1, i32 0, i32 1
  %28 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %27, align 8
  %29 = icmp eq %"struct.jxl::HuffmanDecodingData"* %28, %23
  br i1 %29, label %46, label %30

30:                                               ; preds = %25, %41
  %31 = phi %"struct.jxl::HuffmanDecodingData"* [ %32, %41 ], [ %28, %25 ]
  %32 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %31, i64 -1
  %33 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %32, i64 0, i32 0, i32 0, i32 0
  %34 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %33, align 8
  %35 = icmp eq %"struct.jxl::HuffmanCode"* %34, null
  br i1 %35, label %41, label %36

36:                                               ; preds = %30
  %37 = ptrtoint %"struct.jxl::HuffmanCode"* %34 to i64
  %38 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %31, i64 -1, i32 0, i32 0, i32 1
  %39 = bitcast %"struct.jxl::HuffmanCode"** %38 to i64*
  store i64 %37, i64* %39, align 8
  %40 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %34, i64 0, i32 0
  tail call void @_ZdlPv(i8* %40) #25
  br label %41

41:                                               ; preds = %36, %30
  %42 = icmp eq %"struct.jxl::HuffmanDecodingData"* %32, %23
  br i1 %42, label %43, label %30

43:                                               ; preds = %41
  %44 = bitcast %"class.std::__1::vector.263"* %21 to i8**
  %45 = load i8*, i8** %44, align 8
  br label %46

46:                                               ; preds = %43, %25
  %47 = phi i8* [ %45, %43 ], [ %26, %25 ]
  store %"struct.jxl::HuffmanDecodingData"* %23, %"struct.jxl::HuffmanDecodingData"** %27, align 8
  tail call void @_ZdlPv(i8* %47) #25
  br label %48

48:                                               ; preds = %46, %20
  %49 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  store i8* null, i8** %49, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %53, label %52

52:                                               ; preds = %48
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %50) #5
  br label %53

53:                                               ; preds = %48, %52
  ret void
}

declare void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8*, void (i8*, i8*)*, i8*) local_unnamed_addr #2

declare void @_ZN3jxl19ModularFrameEncoderC1ERKNS_11FrameHeaderERKNS_14CompressParamsE(%"class.jxl::ModularFrameEncoder"*, %"struct.jxl::FrameHeader"* dereferenceable(576), %"struct.jxl::CompressParams"* dereferenceable(360)) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl19ModularFrameEncoderD2Ev(%"class.jxl::ModularFrameEncoder"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 17, i32 0, i32 0
  %3 = load i64*, i64** %2, align 8
  %4 = icmp eq i64* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i64* %3 to i64
  %7 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 17, i32 0, i32 1
  %8 = bitcast i64** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i64* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #25
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 16
  %12 = getelementptr inbounds %"class.std::__1::vector.385", %"class.std::__1::vector.385"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.std::__1::vector.55"*, %"class.std::__1::vector.55"** %12, align 8
  %14 = icmp eq %"class.std::__1::vector.55"* %13, null
  br i1 %14, label %38, label %15

15:                                               ; preds = %10
  %16 = bitcast %"class.std::__1::vector.55"* %13 to i8*
  %17 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 16, i32 0, i32 1
  %18 = load %"class.std::__1::vector.55"*, %"class.std::__1::vector.55"** %17, align 8
  %19 = icmp eq %"class.std::__1::vector.55"* %18, %13
  br i1 %19, label %36, label %20

20:                                               ; preds = %15, %31
  %21 = phi %"class.std::__1::vector.55"* [ %22, %31 ], [ %18, %15 ]
  %22 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %21, i64 -1
  %23 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %22, i64 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = icmp eq i32* %24, null
  br i1 %25, label %31, label %26

26:                                               ; preds = %20
  %27 = ptrtoint i32* %24 to i64
  %28 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %21, i64 -1, i32 0, i32 1
  %29 = bitcast i32** %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = bitcast i32* %24 to i8*
  tail call void @_ZdlPv(i8* %30) #25
  br label %31

31:                                               ; preds = %26, %20
  %32 = icmp eq %"class.std::__1::vector.55"* %22, %13
  br i1 %32, label %33, label %20

33:                                               ; preds = %31
  %34 = bitcast %"class.std::__1::vector.385"* %11 to i8**
  %35 = load i8*, i8** %34, align 8
  br label %36

36:                                               ; preds = %33, %15
  %37 = phi i8* [ %35, %33 ], [ %16, %15 ]
  store %"class.std::__1::vector.55"* %13, %"class.std::__1::vector.55"** %17, align 8
  tail call void @_ZdlPv(i8* %37) #25
  br label %38

38:                                               ; preds = %10, %36
  %39 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 15, i32 0, i32 0
  %40 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %39, align 8
  %41 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %38
  %43 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %40 to i64
  %44 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 15, i32 0, i32 1
  %45 = bitcast %"struct.jxl::ModularMultiplierInfo"** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = bitcast %"struct.jxl::ModularMultiplierInfo"* %40 to i8*
  tail call void @_ZdlPv(i8* %46) #25
  br label %47

47:                                               ; preds = %38, %42
  %48 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 14, i32 0, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = icmp eq i64* %49, null
  br i1 %50, label %56, label %51

51:                                               ; preds = %47
  %52 = ptrtoint i64* %49 to i64
  %53 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 14, i32 0, i32 1
  %54 = bitcast i64** %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = bitcast i64* %49 to i8*
  tail call void @_ZdlPv(i8* %55) #25
  br label %56

56:                                               ; preds = %47, %51
  %57 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 0
  %58 = load i32*, i32** %57, align 8
  %59 = icmp eq i32* %58, null
  br i1 %59, label %65, label %60

60:                                               ; preds = %56
  %61 = ptrtoint i32* %58 to i64
  %62 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 1
  %63 = bitcast i32** %62 to i64*
  store i64 %61, i64* %63, align 8
  %64 = bitcast i32* %58 to i8*
  tail call void @_ZdlPv(i8* %64) #25
  br label %65

65:                                               ; preds = %56, %60
  %66 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 9, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %73, label %69

69:                                               ; preds = %65
  %70 = ptrtoint i8* %67 to i64
  %71 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 9, i32 0, i32 1
  %72 = bitcast i8** %71 to i64*
  store i64 %70, i64* %72, align 8
  tail call void @_ZdlPv(i8* nonnull %67) #25
  br label %73

73:                                               ; preds = %65, %69
  %74 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8
  %75 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8, i32 2, i32 0, i32 0
  %76 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %75, align 8
  %77 = icmp eq %"struct.jxl::HybridUintConfig"* %76, null
  br i1 %77, label %83, label %78

78:                                               ; preds = %73
  %79 = ptrtoint %"struct.jxl::HybridUintConfig"* %76 to i64
  %80 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8, i32 2, i32 0, i32 1
  %81 = bitcast %"struct.jxl::HybridUintConfig"** %80 to i64*
  store i64 %79, i64* %81, align 8
  %82 = bitcast %"struct.jxl::HybridUintConfig"* %76 to i8*
  tail call void @_ZdlPv(i8* %82) #25
  br label %83

83:                                               ; preds = %78, %73
  %84 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %74, i64 0, i32 0, i32 0, i32 0
  %85 = load %"class.std::__1::vector.212"*, %"class.std::__1::vector.212"** %84, align 8
  %86 = icmp eq %"class.std::__1::vector.212"* %85, null
  br i1 %86, label %128, label %87

87:                                               ; preds = %83
  %88 = bitcast %"class.std::__1::vector.212"* %85 to i8*
  %89 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8, i32 0, i32 0, i32 1
  %90 = load %"class.std::__1::vector.212"*, %"class.std::__1::vector.212"** %89, align 8
  %91 = icmp eq %"class.std::__1::vector.212"* %90, %85
  br i1 %91, label %126, label %92

92:                                               ; preds = %87, %121
  %93 = phi %"class.std::__1::vector.212"* [ %94, %121 ], [ %90, %87 ]
  %94 = getelementptr inbounds %"class.std::__1::vector.212", %"class.std::__1::vector.212"* %93, i64 -1
  %95 = getelementptr inbounds %"class.std::__1::vector.212", %"class.std::__1::vector.212"* %94, i64 0, i32 0, i32 0
  %96 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %95, align 8
  %97 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %96, null
  br i1 %97, label %121, label %98

98:                                               ; preds = %92
  %99 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %96 to i8*
  %100 = getelementptr inbounds %"class.std::__1::vector.212", %"class.std::__1::vector.212"* %93, i64 -1, i32 0, i32 1
  %101 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %100, align 8
  %102 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %101, %96
  br i1 %102, label %119, label %103

103:                                              ; preds = %98, %114
  %104 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %105, %114 ], [ %101, %98 ]
  %105 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %104, i64 -1
  %106 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %104, i64 -1, i32 2, i32 0, i32 0
  %107 = load i16*, i16** %106, align 8
  %108 = icmp eq i16* %107, null
  br i1 %108, label %114, label %109

109:                                              ; preds = %103
  %110 = ptrtoint i16* %107 to i64
  %111 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %104, i64 -1, i32 2, i32 0, i32 1
  %112 = bitcast i16** %111 to i64*
  store i64 %110, i64* %112, align 8
  %113 = bitcast i16* %107 to i8*
  tail call void @_ZdlPv(i8* %113) #25
  br label %114

114:                                              ; preds = %109, %103
  %115 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %105, %96
  br i1 %115, label %116, label %103

116:                                              ; preds = %114
  %117 = bitcast %"class.std::__1::vector.212"* %94 to i8**
  %118 = load i8*, i8** %117, align 8
  br label %119

119:                                              ; preds = %116, %98
  %120 = phi i8* [ %118, %116 ], [ %99, %98 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %96, %"struct.jxl::ANSEncSymbolInfo"** %100, align 8
  tail call void @_ZdlPv(i8* %120) #25
  br label %121

121:                                              ; preds = %119, %92
  %122 = icmp eq %"class.std::__1::vector.212"* %94, %85
  br i1 %122, label %123, label %92

123:                                              ; preds = %121
  %124 = bitcast %"struct.jxl::EntropyEncodingData"* %74 to i8**
  %125 = load i8*, i8** %124, align 8
  br label %126

126:                                              ; preds = %123, %87
  %127 = phi i8* [ %125, %123 ], [ %88, %87 ]
  store %"class.std::__1::vector.212"* %85, %"class.std::__1::vector.212"** %89, align 8
  tail call void @_ZdlPv(i8* %127) #25
  br label %128

128:                                              ; preds = %83, %126
  %129 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 7
  %130 = getelementptr inbounds %"class.std::__1::vector.202", %"class.std::__1::vector.202"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::vector.204"*, %"class.std::__1::vector.204"** %130, align 8
  %132 = icmp eq %"class.std::__1::vector.204"* %131, null
  br i1 %132, label %156, label %133

133:                                              ; preds = %128
  %134 = bitcast %"class.std::__1::vector.204"* %131 to i8*
  %135 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 7, i32 0, i32 1
  %136 = load %"class.std::__1::vector.204"*, %"class.std::__1::vector.204"** %135, align 8
  %137 = icmp eq %"class.std::__1::vector.204"* %136, %131
  br i1 %137, label %154, label %138

138:                                              ; preds = %133, %149
  %139 = phi %"class.std::__1::vector.204"* [ %140, %149 ], [ %136, %133 ]
  %140 = getelementptr inbounds %"class.std::__1::vector.204", %"class.std::__1::vector.204"* %139, i64 -1
  %141 = getelementptr inbounds %"class.std::__1::vector.204", %"class.std::__1::vector.204"* %140, i64 0, i32 0, i32 0
  %142 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %141, align 8
  %143 = icmp eq %"struct.jxl::Token"* %142, null
  br i1 %143, label %149, label %144

144:                                              ; preds = %138
  %145 = ptrtoint %"struct.jxl::Token"* %142 to i64
  %146 = getelementptr inbounds %"class.std::__1::vector.204", %"class.std::__1::vector.204"* %139, i64 -1, i32 0, i32 1
  %147 = bitcast %"struct.jxl::Token"** %146 to i64*
  store i64 %145, i64* %147, align 8
  %148 = bitcast %"struct.jxl::Token"* %142 to i8*
  tail call void @_ZdlPv(i8* %148) #25
  br label %149

149:                                              ; preds = %144, %138
  %150 = icmp eq %"class.std::__1::vector.204"* %140, %131
  br i1 %150, label %151, label %138

151:                                              ; preds = %149
  %152 = bitcast %"class.std::__1::vector.202"* %129 to i8**
  %153 = load i8*, i8** %152, align 8
  br label %154

154:                                              ; preds = %151, %133
  %155 = phi i8* [ %153, %151 ], [ %134, %133 ]
  store %"class.std::__1::vector.204"* %131, %"class.std::__1::vector.204"** %135, align 8
  tail call void @_ZdlPv(i8* %155) #25
  br label %156

156:                                              ; preds = %128, %154
  %157 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 6
  %158 = getelementptr inbounds %"class.std::__1::vector.369", %"class.std::__1::vector.369"* %157, i64 0, i32 0, i32 0
  %159 = load %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"** %158, align 8
  %160 = icmp eq %"struct.jxl::GroupHeader"* %159, null
  br i1 %160, label %178, label %161

161:                                              ; preds = %156
  %162 = bitcast %"struct.jxl::GroupHeader"* %159 to i8*
  %163 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 6, i32 0, i32 1
  %164 = load %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"** %163, align 8
  %165 = icmp eq %"struct.jxl::GroupHeader"* %164, %159
  br i1 %165, label %176, label %166

166:                                              ; preds = %161, %166
  %167 = phi %"struct.jxl::GroupHeader"* [ %168, %166 ], [ %164, %161 ]
  %168 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %167, i64 -1
  %169 = bitcast %"struct.jxl::GroupHeader"* %168 to void (%"struct.jxl::GroupHeader"*)***
  %170 = load void (%"struct.jxl::GroupHeader"*)**, void (%"struct.jxl::GroupHeader"*)*** %169, align 8
  %171 = load void (%"struct.jxl::GroupHeader"*)*, void (%"struct.jxl::GroupHeader"*)** %170, align 8
  tail call void %171(%"struct.jxl::GroupHeader"* %168) #5
  %172 = icmp eq %"struct.jxl::GroupHeader"* %168, %159
  br i1 %172, label %173, label %166

173:                                              ; preds = %166
  %174 = bitcast %"class.std::__1::vector.369"* %157 to i8**
  %175 = load i8*, i8** %174, align 8
  br label %176

176:                                              ; preds = %173, %161
  %177 = phi i8* [ %175, %173 ], [ %162, %161 ]
  store %"struct.jxl::GroupHeader"* %159, %"struct.jxl::GroupHeader"** %163, align 8
  tail call void @_ZdlPv(i8* %177) #25
  br label %178

178:                                              ; preds = %156, %176
  %179 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 5
  %180 = getelementptr inbounds %"class.std::__1::vector.202", %"class.std::__1::vector.202"* %179, i64 0, i32 0, i32 0
  %181 = load %"class.std::__1::vector.204"*, %"class.std::__1::vector.204"** %180, align 8
  %182 = icmp eq %"class.std::__1::vector.204"* %181, null
  br i1 %182, label %206, label %183

183:                                              ; preds = %178
  %184 = bitcast %"class.std::__1::vector.204"* %181 to i8*
  %185 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 5, i32 0, i32 1
  %186 = load %"class.std::__1::vector.204"*, %"class.std::__1::vector.204"** %185, align 8
  %187 = icmp eq %"class.std::__1::vector.204"* %186, %181
  br i1 %187, label %204, label %188

188:                                              ; preds = %183, %199
  %189 = phi %"class.std::__1::vector.204"* [ %190, %199 ], [ %186, %183 ]
  %190 = getelementptr inbounds %"class.std::__1::vector.204", %"class.std::__1::vector.204"* %189, i64 -1
  %191 = getelementptr inbounds %"class.std::__1::vector.204", %"class.std::__1::vector.204"* %190, i64 0, i32 0, i32 0
  %192 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %191, align 8
  %193 = icmp eq %"struct.jxl::Token"* %192, null
  br i1 %193, label %199, label %194

194:                                              ; preds = %188
  %195 = ptrtoint %"struct.jxl::Token"* %192 to i64
  %196 = getelementptr inbounds %"class.std::__1::vector.204", %"class.std::__1::vector.204"* %189, i64 -1, i32 0, i32 1
  %197 = bitcast %"struct.jxl::Token"** %196 to i64*
  store i64 %195, i64* %197, align 8
  %198 = bitcast %"struct.jxl::Token"* %192 to i8*
  tail call void @_ZdlPv(i8* %198) #25
  br label %199

199:                                              ; preds = %194, %188
  %200 = icmp eq %"class.std::__1::vector.204"* %190, %181
  br i1 %200, label %201, label %188

201:                                              ; preds = %199
  %202 = bitcast %"class.std::__1::vector.202"* %179 to i8**
  %203 = load i8*, i8** %202, align 8
  br label %204

204:                                              ; preds = %201, %183
  %205 = phi i8* [ %203, %201 ], [ %184, %183 ]
  store %"class.std::__1::vector.204"* %181, %"class.std::__1::vector.204"** %185, align 8
  tail call void @_ZdlPv(i8* %205) #25
  br label %206

206:                                              ; preds = %178, %204
  %207 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 4, i32 0, i32 0
  %208 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %207, align 8
  %209 = icmp eq %"struct.jxl::PropertyDecisionNode"* %208, null
  br i1 %209, label %215, label %210

210:                                              ; preds = %206
  %211 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %208 to i64
  %212 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 4, i32 0, i32 1
  %213 = bitcast %"struct.jxl::PropertyDecisionNode"** %212 to i64*
  store i64 %211, i64* %213, align 8
  %214 = bitcast %"struct.jxl::PropertyDecisionNode"* %208 to i8*
  tail call void @_ZdlPv(i8* %214) #25
  br label %215

215:                                              ; preds = %206, %210
  %216 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 3
  %217 = getelementptr inbounds %"class.std::__1::vector.355", %"class.std::__1::vector.355"* %216, i64 0, i32 0, i32 0
  %218 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %217, align 8
  %219 = icmp eq %"struct.jxl::ModularOptions"* %218, null
  br i1 %219, label %243, label %220

220:                                              ; preds = %215
  %221 = bitcast %"struct.jxl::ModularOptions"* %218 to i8*
  %222 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 3, i32 0, i32 1
  %223 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %222, align 8
  %224 = icmp eq %"struct.jxl::ModularOptions"* %223, %218
  br i1 %224, label %241, label %225

225:                                              ; preds = %220, %236
  %226 = phi %"struct.jxl::ModularOptions"* [ %227, %236 ], [ %223, %220 ]
  %227 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %226, i64 -1
  %228 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %226, i64 -1, i32 3, i32 0, i32 0
  %229 = load i32*, i32** %228, align 8
  %230 = icmp eq i32* %229, null
  br i1 %230, label %236, label %231

231:                                              ; preds = %225
  %232 = ptrtoint i32* %229 to i64
  %233 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %226, i64 -1, i32 3, i32 0, i32 1
  %234 = bitcast i32** %233 to i64*
  store i64 %232, i64* %234, align 8
  %235 = bitcast i32* %229 to i8*
  tail call void @_ZdlPv(i8* %235) #25
  br label %236

236:                                              ; preds = %231, %225
  %237 = icmp eq %"struct.jxl::ModularOptions"* %227, %218
  br i1 %237, label %238, label %225

238:                                              ; preds = %236
  %239 = bitcast %"class.std::__1::vector.355"* %216 to i8**
  %240 = load i8*, i8** %239, align 8
  br label %241

241:                                              ; preds = %238, %220
  %242 = phi i8* [ %240, %238 ], [ %221, %220 ]
  store %"struct.jxl::ModularOptions"* %218, %"struct.jxl::ModularOptions"** %222, align 8
  tail call void @_ZdlPv(i8* %242) #25
  br label %243

243:                                              ; preds = %215, %241
  %244 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2
  %245 = getelementptr inbounds %"class.std::__1::vector.327", %"class.std::__1::vector.327"* %244, i64 0, i32 0, i32 0
  %246 = load %"class.jxl::Image"*, %"class.jxl::Image"** %245, align 8
  %247 = icmp eq %"class.jxl::Image"* %246, null
  br i1 %247, label %262, label %248

248:                                              ; preds = %243
  %249 = bitcast %"class.jxl::Image"* %246 to i8*
  %250 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2, i32 0, i32 1
  %251 = load %"class.jxl::Image"*, %"class.jxl::Image"** %250, align 8
  %252 = icmp eq %"class.jxl::Image"* %251, %246
  br i1 %252, label %260, label %253

253:                                              ; preds = %248, %253
  %254 = phi %"class.jxl::Image"* [ %255, %253 ], [ %251, %248 ]
  %255 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %254, i64 -1
  tail call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* %255) #5
  %256 = icmp eq %"class.jxl::Image"* %255, %246
  br i1 %256, label %257, label %253

257:                                              ; preds = %253
  %258 = bitcast %"class.std::__1::vector.327"* %244 to i8**
  %259 = load i8*, i8** %258, align 8
  br label %260

260:                                              ; preds = %257, %248
  %261 = phi i8* [ %259, %257 ], [ %249, %248 ]
  store %"class.jxl::Image"* %246, %"class.jxl::Image"** %250, align 8
  tail call void @_ZdlPv(i8* %261) #25
  br label %262

262:                                              ; preds = %243, %260
  %263 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 1, i32 0, i32 0
  %264 = load i8*, i8** %263, align 8
  %265 = icmp eq i8* %264, null
  br i1 %265, label %270, label %266

266:                                              ; preds = %262
  %267 = ptrtoint i8* %264 to i64
  %268 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 1, i32 0, i32 1
  %269 = bitcast i8** %268 to i64*
  store i64 %267, i64* %269, align 8
  tail call void @_ZdlPv(i8* nonnull %264) #25
  br label %270

270:                                              ; preds = %262, %266
  %271 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 0, i32 0, i32 0
  %272 = load i64*, i64** %271, align 8
  %273 = icmp eq i64* %272, null
  br i1 %273, label %279, label %274

274:                                              ; preds = %270
  %275 = ptrtoint i64* %272 to i64
  %276 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 0, i32 0, i32 1
  %277 = bitcast i64** %276 to i64*
  store i64 %275, i64* %277, align 8
  %278 = bitcast i64* %272 to i8*
  tail call void @_ZdlPv(i8* %278) #25
  br label %279

279:                                              ; preds = %270, %274
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"*) unnamed_addr #18

declare void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8*, void (i8*, i8*)*, i8*, void (i8*, i64)*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl13GroupDecCacheEEEvPvm(i8*, i64) #0 comdat align 2 {
  %3 = udiv i64 %1, 1168
  %4 = icmp ugt i64 %1, 1167
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = bitcast i8* %0 to %"struct.jxl::GroupDecCache"*
  br label %8

7:                                                ; preds = %8, %2
  ret void

8:                                                ; preds = %5, %8
  %9 = phi i64 [ 0, %5 ], [ %11, %8 ]
  %10 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %6, i64 %9
  tail call void @_ZN3jxl13GroupDecCacheD2Ev(%"struct.jxl::GroupDecCache"* %10) #5
  %11 = add nuw nsw i64 %9, 1
  %12 = icmp ult i64 %11, %3
  br i1 %12, label %8, label %7
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl13GroupDecCacheD2Ev(%"struct.jxl::GroupDecCache"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %3 = load i16*, i16** %2, align 8
  store i16* null, i16** %2, align 8
  %4 = icmp eq i16* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = bitcast i16* %3 to i8*
  %7 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7, i32 0, i32 1, i32 0, i32 0
  %8 = load void (i8*, i8*)*, void (i8*, i8*)** %7, align 8
  %9 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7, i32 0, i32 1, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %6, void (i8*, i8*)* %8, i8* %10) #5
  br label %11

11:                                               ; preds = %1, %5
  %12 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  store i32* null, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %21, label %15

15:                                               ; preds = %11
  %16 = bitcast i32* %13 to i8*
  %17 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6, i32 0, i32 1, i32 0, i32 0
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %17, align 8
  %19 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6, i32 0, i32 1, i32 0, i32 1
  %20 = load i8*, i8** %19, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %16, void (i8*, i8*)* %18, i8* %20) #5
  br label %21

21:                                               ; preds = %11, %15
  %22 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %23 = load float*, float** %22, align 8
  store float* null, float** %22, align 8
  %24 = icmp eq float* %23, null
  br i1 %24, label %31, label %25

25:                                               ; preds = %21
  %26 = bitcast float* %23 to i8*
  %27 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %28 = load void (i8*, i8*)*, void (i8*, i8*)** %27, align 8
  %29 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 1
  %30 = load i8*, i8** %29, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %26, void (i8*, i8*)* %28, i8* %30) #5
  br label %31

31:                                               ; preds = %21, %25
  %32 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 0
  %33 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 11
  br label %34

34:                                               ; preds = %51, %31
  %35 = phi %"class.jxl::Image3.398"* [ %33, %31 ], [ %36, %51 ]
  %36 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %35, i64 -1
  %37 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %35, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %34
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #5
  br label %41

41:                                               ; preds = %40, %34
  %42 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %35, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #5
  br label %46

46:                                               ; preds = %45, %41
  %47 = getelementptr inbounds %"class.jxl::Image3.398", %"class.jxl::Image3.398"* %35, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  store i8* null, i8** %47, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %48) #5
  br label %51

51:                                               ; preds = %46, %50
  %52 = icmp eq %"class.jxl::Image3.398"* %36, %32
  br i1 %52, label %53, label %34

53:                                               ; preds = %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_14RoundtripImageERKNS_6Image3IfEEPNS_18PassesEncoderStateEPS0_E3$_0ZNS_14RoundtripImageES5_S7_S8_E3$_1E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to %class.anon**
  %4 = load %class.anon*, %class.anon** %3, align 8
  %5 = getelementptr inbounds %class.anon, %class.anon* %4, i64 0, i32 0
  %6 = load %"class.std::__1::unique_ptr.258"*, %"class.std::__1::unique_ptr.258"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::unique_ptr.258", %"class.std::__1::unique_ptr.258"* %6, i64 0, i32 0, i32 0, i32 0
  %8 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %7, align 8
  tail call void @_ZN3jxl18PassesDecoderState13EnsureStorageEm(%"struct.jxl::PassesDecoderState"* %8, i64 %1) #5
  %9 = mul i64 %1, 1168
  %10 = tail call i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64 %9, i8* (i8*, i64)* null, i8* null) #5, !noalias !432
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 %9, i1 false) #5, !noalias !437
  br label %13

13:                                               ; preds = %12, %2
  %14 = ptrtoint i8* %10 to i64
  %15 = getelementptr inbounds %class.anon, %class.anon* %4, i64 0, i32 1
  %16 = load %"class.std::__1::unique_ptr.395"*, %"class.std::__1::unique_ptr.395"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr.395", %"class.std::__1::unique_ptr.395"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr.395"* %16 to i64*
  store i64 %14, i64* %19, align 8
  %20 = icmp eq %"struct.jxl::GroupDecCache"* %18, null
  br i1 %20, label %27, label %21

21:                                               ; preds = %13
  %22 = bitcast %"struct.jxl::GroupDecCache"* %18 to i8*
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr.395", %"class.std::__1::unique_ptr.395"* %16, i64 0, i32 0, i32 1, i32 0, i32 0
  %24 = load void (i8*, i8*)*, void (i8*, i8*)** %23, align 8
  %25 = getelementptr inbounds %"class.std::__1::unique_ptr.395", %"class.std::__1::unique_ptr.395"* %16, i64 0, i32 0, i32 1, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  tail call void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8* nonnull %22, void (i8*, i8*)* %24, i8* %26, void (i8*, i64)* nonnull @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl13GroupDecCacheEEEvPvm) #5
  br label %27

27:                                               ; preds = %13, %21
  %28 = getelementptr inbounds %"class.std::__1::unique_ptr.395", %"class.std::__1::unique_ptr.395"* %16, i64 0, i32 0, i32 1, i32 0, i32 0
  %29 = bitcast void (i8*, i8*)** %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #5
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_14RoundtripImageERKNS_6Image3IfEEPNS_18PassesEncoderStateEPS0_E3$_0ZNS_14RoundtripImageES5_S7_S8_E3$_1E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon.404**
  %7 = load %class.anon.404*, %class.anon.404** %6, align 8
  %8 = getelementptr inbounds %class.anon.404, %class.anon.404* %7, i64 0, i32 0
  %9 = load %"class.std::__1::unique_ptr.258"*, %"class.std::__1::unique_ptr.258"** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::unique_ptr.258", %"class.std::__1::unique_ptr.258"* %9, i64 0, i32 0, i32 0, i32 0
  %11 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %10, align 8
  %12 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %11, i64 0, i32 1
  %13 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %12, align 8
  %14 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %13, i64 0, i32 1, i32 26, i32 11
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %3
  %18 = sext i32 %1 to i64
  br label %51

19:                                               ; preds = %3
  %20 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #5
  %21 = sext i32 %1 to i64
  %22 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %13, i64 0, i32 2, i32 10
  %23 = load i64, i64* %22, align 8, !noalias !438
  %24 = urem i64 %21, %23
  %25 = udiv i64 %21, %23
  %26 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %28 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  %29 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  %30 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %13, i64 0, i32 2, i32 16
  %31 = load i64, i64* %30, align 8, !noalias !438
  %32 = lshr i64 %31, 3
  %33 = mul i64 %32, %24
  %34 = mul i64 %32, %25
  %35 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %13, i64 0, i32 2, i32 8
  %36 = load i64, i64* %35, align 8, !noalias !438
  %37 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %13, i64 0, i32 2, i32 9
  %38 = load i64, i64* %37, align 8, !noalias !438
  store i64 %33, i64* %26, align 8, !alias.scope !438
  store i64 %34, i64* %27, align 8, !alias.scope !438
  %39 = add i64 %33, %32
  %40 = icmp ugt i64 %39, %36
  %41 = tail call i64 @llvm.usub.sat.i64(i64 %36, i64 %33) #5
  %42 = select i1 %40, i64 %41, i64 %32
  store i64 %42, i64* %28, align 8, !alias.scope !438
  %43 = add i64 %34, %32
  %44 = icmp ugt i64 %43, %38
  %45 = tail call i64 @llvm.usub.sat.i64(i64 %38, i64 %34) #5
  %46 = select i1 %44, i64 %45, i64 %32
  store i64 %46, i64* %29, align 8, !alias.scope !438
  %47 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %10, align 8
  call void @_ZN3jxl12ComputeSigmaERKNS_4RectEPNS_18PassesDecoderStateE(%"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"struct.jxl::PassesDecoderState"* %47) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #5
  %48 = load %"class.std::__1::unique_ptr.258"*, %"class.std::__1::unique_ptr.258"** %8, align 8
  %49 = getelementptr inbounds %"class.std::__1::unique_ptr.258", %"class.std::__1::unique_ptr.258"* %48, i64 0, i32 0, i32 0, i32 0
  %50 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %49, align 8
  br label %51

51:                                               ; preds = %19, %17
  %52 = phi i64 [ %18, %17 ], [ %21, %19 ]
  %53 = phi %"struct.jxl::PassesDecoderState"* [ %11, %17 ], [ %50, %19 ]
  %54 = getelementptr inbounds %class.anon.404, %class.anon.404* %7, i64 0, i32 1
  %55 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %54, align 8
  %56 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %55, align 8
  %57 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %56, i64 0, i32 3
  %58 = getelementptr inbounds %class.anon.404, %class.anon.404* %7, i64 0, i32 2
  %59 = load %"class.std::__1::unique_ptr.395"*, %"class.std::__1::unique_ptr.395"** %58, align 8
  %60 = shl i64 %2, 32
  %61 = ashr exact i64 %60, 32
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr.395", %"class.std::__1::unique_ptr.395"* %59, i64 0, i32 0, i32 0, i32 0
  %63 = load %"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"** %62, align 8
  %64 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %63, i64 %61
  %65 = getelementptr inbounds %class.anon.404, %class.anon.404* %7, i64 0, i32 3
  %66 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %65, align 8
  %67 = call i32 @_ZN3jxl23DecodeGroupForRoundtripERKNSt3__16vectorINS0_10unique_ptrINS_7ACImageENS0_14default_deleteIS3_EEEENS0_9allocatorIS6_EEEEmPNS_18PassesDecoderStateEPNS_13GroupDecCacheEmPNS_11ImageBundleEPNS_6AuxOutE(%"class.std::__1::vector.178"* dereferenceable(24) %57, i64 %52, %"struct.jxl::PassesDecoderState"* %53, %"struct.jxl::GroupDecCache"* %64, i64 %61, %"class.jxl::ImageBundle"* %66, %"struct.jxl::AuxOut"* null) #5
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %72, label %69

69:                                               ; preds = %51
  %70 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 1031, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.52, i64 0, i64 0)) #5
  %71 = call zeroext i1 @_ZN3jxl5AbortEv() #24
  unreachable

72:                                               ; preds = %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderState13EnsureStorageEm(%"struct.jxl::PassesDecoderState"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca float, align 4
  %14 = alloca %"class.jxl::Plane.1", align 8
  %15 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %16 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %17 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %16, i64 0, i32 1, i32 26, i32 11
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %2
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %16, i64 0, i32 1, i32 26, i32 2
  %22 = load i8, i8* %21, align 1, !range !9
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %36, label %24

24:                                               ; preds = %20, %2
  %25 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24
  %26 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 1
  %27 = bitcast %"class.jxl::FilterPipeline"** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.std::__1::vector.300"* %25 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %28, %30
  %32 = sdiv exact i64 %31, 832
  %33 = icmp ult i64 %32, %1
  br i1 %33, label %34, label %36

34:                                               ; preds = %24
  %35 = sub i64 %1, %32
  tail call void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.300"* %25, i64 %35) #5
  br label %36

36:                                               ; preds = %34, %20, %24
  %37 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27
  %38 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27, i32 0, i32 1
  %39 = bitcast %"class.jxl::Image3"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.std::__1::vector.314"* %37 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %40, %42
  %44 = sdiv exact i64 %43, 96
  %45 = icmp ult i64 %44, %1
  br i1 %45, label %46, label %51

46:                                               ; preds = %36
  %47 = inttoptr i64 %40 to %"class.jxl::Image3"*
  %48 = bitcast i64* %3 to i8*
  %49 = bitcast i64* %4 to i8*
  %50 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27, i32 0, i32 2, i32 0, i32 0
  br label %56

51:                                               ; preds = %68, %36
  %52 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %53 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %52, i64 0, i32 1, i32 15
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %122, label %73

56:                                               ; preds = %71, %46
  %57 = phi %"class.jxl::Image3"* [ %47, %46 ], [ %72, %71 ]
  %58 = phi i64 [ %44, %46 ], [ %69, %71 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #5
  store i64 368, i64* %3, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #5
  store i64 324, i64* %4, align 8
  %59 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %50, align 8
  %60 = icmp ult %"class.jxl::Image3"* %57, %59
  br i1 %60, label %61, label %67

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %62, i64 368, i64 324, i64 4) #5
  %63 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %63, i64 368, i64 324, i64 4) #5
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %64, i64 368, i64 324, i64 4) #5
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 1
  %66 = ptrtoint %"class.jxl::Image3"* %65 to i64
  store i64 %66, i64* %39, align 8
  br label %68

67:                                               ; preds = %56
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.314"* %37, i64* nonnull dereferenceable(8) %3, i64* nonnull dereferenceable(8) %4) #5
  br label %68

68:                                               ; preds = %61, %67
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #5
  %69 = add i64 %58, 1
  %70 = icmp eq i64 %69, %1
  br i1 %70, label %51, label %71

71:                                               ; preds = %68
  %72 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %38, align 8
  br label %56

73:                                               ; preds = %51
  %74 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29
  %75 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29, i32 0, i32 1
  %76 = bitcast %"class.jxl::Image3"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = bitcast %"class.std::__1::vector.314"* %74 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = sub i64 %77, %79
  %81 = sdiv exact i64 %80, 96
  %82 = icmp ult i64 %81, %1
  br i1 %82, label %83, label %122

83:                                               ; preds = %73
  %84 = inttoptr i64 %77 to %"class.jxl::Image3"*
  %85 = bitcast i64* %5 to i8*
  %86 = bitcast i64* %6 to i8*
  %87 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29, i32 0, i32 2, i32 0, i32 0
  %88 = bitcast i64* %7 to i8*
  %89 = bitcast i64* %8 to i8*
  %90 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28, i32 0, i32 1
  %91 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28, i32 0, i32 2, i32 0, i32 0
  %92 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28
  %93 = bitcast %"class.jxl::Image3"** %90 to i64*
  br label %94

94:                                               ; preds = %120, %83
  %95 = phi %"class.jxl::Image3"* [ %84, %83 ], [ %121, %120 ]
  %96 = phi i64 [ %81, %83 ], [ %118, %120 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #5
  store i64 304, i64* %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %86) #5
  store i64 292, i64* %6, align 8
  %97 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %87, align 8
  %98 = icmp ult %"class.jxl::Image3"* %95, %97
  br i1 %98, label %99, label %105

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %100, i64 304, i64 292, i64 4) #5
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %101, i64 304, i64 292, i64 4) #5
  %102 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %102, i64 304, i64 292, i64 4) #5
  %103 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 1
  %104 = ptrtoint %"class.jxl::Image3"* %103 to i64
  store i64 %104, i64* %76, align 8
  br label %106

105:                                              ; preds = %94
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.314"* %74, i64* nonnull dereferenceable(8) %5, i64* nonnull dereferenceable(8) %6) #5
  br label %106

106:                                              ; preds = %99, %105
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #5
  store i64 304, i64* %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #5
  store i64 292, i64* %8, align 8
  %107 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %90, align 8
  %108 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %91, align 8
  %109 = icmp ult %"class.jxl::Image3"* %107, %108
  br i1 %109, label %110, label %116

110:                                              ; preds = %106
  %111 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %111, i64 304, i64 292, i64 4) #5
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %112, i64 304, i64 292, i64 4) #5
  %113 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %113, i64 304, i64 292, i64 4) #5
  %114 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 1
  %115 = ptrtoint %"class.jxl::Image3"* %114 to i64
  store i64 %115, i64* %93, align 8
  br label %117

116:                                              ; preds = %106
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.314"* %92, i64* nonnull dereferenceable(8) %7, i64* nonnull dereferenceable(8) %8) #5
  br label %117

117:                                              ; preds = %110, %116
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #5
  %118 = add i64 %96, 1
  %119 = icmp eq i64 %118, %1
  br i1 %119, label %122, label %120

120:                                              ; preds = %117
  %121 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %75, align 8
  br label %94

122:                                              ; preds = %117, %73, %51
  %123 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32
  %124 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32, i32 0, i32 1
  %125 = bitcast %"class.jxl::Image3"** %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = bitcast %"class.std::__1::vector.314"* %123 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = sub i64 %126, %128
  %130 = sdiv exact i64 %129, 96
  %131 = icmp ult i64 %130, %1
  br i1 %131, label %132, label %137

132:                                              ; preds = %122
  %133 = inttoptr i64 %126 to %"class.jxl::Image3"*
  %134 = bitcast i64* %9 to i8*
  %135 = bitcast i64* %10 to i8*
  %136 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32, i32 0, i32 2, i32 0, i32 0
  br label %141

137:                                              ; preds = %153, %122
  %138 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 14
  %139 = load i8*, i8** %138, align 8
  %140 = icmp eq i8* %139, null
  br i1 %140, label %158, label %164

141:                                              ; preds = %156, %132
  %142 = phi %"class.jxl::Image3"* [ %133, %132 ], [ %157, %156 ]
  %143 = phi i64 [ %130, %132 ], [ %154, %156 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #5
  store i64 336, i64* %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %135) #5
  store i64 292, i64* %10, align 8
  %144 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %136, align 8
  %145 = icmp ult %"class.jxl::Image3"* %142, %144
  br i1 %145, label %146, label %152

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %147, i64 336, i64 292, i64 4) #5
  %148 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %148, i64 336, i64 292, i64 4) #5
  %149 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %149, i64 336, i64 292, i64 4) #5
  %150 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 1
  %151 = ptrtoint %"class.jxl::Image3"* %150 to i64
  store i64 %151, i64* %125, align 8
  br label %153

152:                                              ; preds = %141
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.314"* %123, i64* nonnull dereferenceable(8) %9, i64* nonnull dereferenceable(8) %10) #5
  br label %153

153:                                              ; preds = %146, %152
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %135) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #5
  %154 = add i64 %143, 1
  %155 = icmp eq i64 %154, %1
  br i1 %155, label %137, label %156

156:                                              ; preds = %153
  %157 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %124, align 8
  br label %141

158:                                              ; preds = %137
  %159 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 2
  %160 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %159, align 8
  %161 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %160, i64 0, i32 2
  %162 = load i8, i8* %161, align 8, !range !9
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %164, label %315

164:                                              ; preds = %137, %158
  %165 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %166 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %165, i64 0, i32 1, i32 15
  %167 = load i32, i32* %166, align 4
  %168 = call i32 @llvm.ctlz.i32(i32 %167, i1 true) #5, !range !8
  %169 = xor i32 %168, 31
  %170 = zext i32 %169 to i64
  %171 = call i32 @llvm.ctpop.i32(i32 %167) #5, !range !8
  %172 = icmp ugt i32 %171, 1
  %173 = zext i1 %172 to i64
  %174 = add nuw nsw i64 %173, %170
  %175 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 %174
  %176 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 %174, i32 0, i32 1
  %177 = bitcast %"class.jxl::Image3"** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.std::__1::vector.314"* %175 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = sub i64 %178, %180
  %182 = sdiv exact i64 %181, 96
  %183 = icmp ult i64 %182, %1
  br i1 %183, label %184, label %194

184:                                              ; preds = %164
  %185 = inttoptr i64 %178 to %"class.jxl::Image3"*
  %186 = bitcast i64* %11 to i8*
  %187 = shl i64 288, %174
  %188 = bitcast i64* %12 to i8*
  %189 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 %174, i32 0, i32 2, i32 0, i32 0
  br label %221

190:                                              ; preds = %233
  %191 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %192 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %191, i64 0, i32 1, i32 15
  %193 = load i32, i32* %192, align 4
  br label %194

194:                                              ; preds = %190, %164
  %195 = phi i32 [ %193, %190 ], [ %167, %164 ]
  %196 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19
  %197 = zext i32 %195 to i64
  %198 = mul nuw nsw i64 %197, 288
  %199 = bitcast float* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %199) #5
  store float 1.000000e+00, float* %13, align 4
  %200 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19, i32 0, i32 1
  %201 = bitcast float** %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = bitcast %"class.std::__1::vector.287"* %196 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = sub i64 %202, %204
  %206 = ashr exact i64 %205, 2
  %207 = icmp ugt i64 %198, %206
  %208 = inttoptr i64 %204 to float*
  br i1 %207, label %209, label %211

209:                                              ; preds = %194
  %210 = sub nsw i64 %198, %206
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEmRKf(%"class.std::__1::vector.287"* %196, i64 %210, float* nonnull dereferenceable(4) %13) #5
  br label %215

211:                                              ; preds = %194
  %212 = icmp ult i64 %198, %206
  br i1 %212, label %213, label %215

213:                                              ; preds = %211
  %214 = getelementptr inbounds float, float* %208, i64 %198
  store float* %214, float** %200, align 8
  br label %215

215:                                              ; preds = %209, %211, %213
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %199) #5
  %216 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 2
  %217 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %216, align 8
  %218 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %217, i64 0, i32 2
  %219 = load i8, i8* %218, align 8, !range !9
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %238, label %315

221:                                              ; preds = %236, %184
  %222 = phi %"class.jxl::Image3"* [ %185, %184 ], [ %237, %236 ]
  %223 = phi i64 [ %182, %184 ], [ %234, %236 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %186) #5
  store i64 %187, i64* %11, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %188) #5
  store i64 %187, i64* %12, align 8
  %224 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %189, align 8
  %225 = icmp ult %"class.jxl::Image3"* %222, %224
  br i1 %225, label %226, label %232

226:                                              ; preds = %221
  %227 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %227, i64 %187, i64 %187, i64 4) #5
  %228 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %228, i64 %187, i64 %187, i64 4) #5
  %229 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %229, i64 %187, i64 %187, i64 4) #5
  %230 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 1
  %231 = ptrtoint %"class.jxl::Image3"* %230 to i64
  store i64 %231, i64* %177, align 8
  br label %233

232:                                              ; preds = %221
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.314"* %175, i64* nonnull dereferenceable(8) %11, i64* nonnull dereferenceable(8) %12) #5
  br label %233

233:                                              ; preds = %226, %232
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %188) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %186) #5
  %234 = add i64 %223, 1
  %235 = icmp eq i64 %234, %1
  br i1 %235, label %190, label %236

236:                                              ; preds = %233
  %237 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %176, align 8
  br label %221

238:                                              ; preds = %215
  %239 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20
  %240 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20, i32 0, i32 1
  %241 = bitcast %"class.std::__1::vector.287"** %240 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = bitcast %"class.std::__1::vector.293"* %239 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = sub i64 %242, %244
  %246 = sdiv exact i64 %245, 24
  %247 = icmp ult i64 %246, %1
  %248 = inttoptr i64 %244 to %"class.std::__1::vector.287"*
  %249 = inttoptr i64 %242 to %"class.std::__1::vector.287"*
  br i1 %247, label %250, label %253

250:                                              ; preds = %238
  %251 = sub i64 %1, %246
  call void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.293"* %239, i64 %251) #5
  %252 = load i64, i64* %241, align 8
  br label %273

253:                                              ; preds = %238
  %254 = icmp ugt i64 %246, %1
  br i1 %254, label %255, label %273

255:                                              ; preds = %253
  %256 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %248, i64 %1
  %257 = icmp eq %"class.std::__1::vector.287"* %256, %249
  br i1 %257, label %271, label %258

258:                                              ; preds = %255, %269
  %259 = phi %"class.std::__1::vector.287"* [ %260, %269 ], [ %249, %255 ]
  %260 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %259, i64 -1
  %261 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %260, i64 0, i32 0, i32 0
  %262 = load float*, float** %261, align 8
  %263 = icmp eq float* %262, null
  br i1 %263, label %269, label %264

264:                                              ; preds = %258
  %265 = ptrtoint float* %262 to i64
  %266 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %259, i64 -1, i32 0, i32 1
  %267 = bitcast float** %266 to i64*
  store i64 %265, i64* %267, align 8
  %268 = bitcast float* %262 to i8*
  call void @_ZdlPv(i8* %268) #25
  br label %269

269:                                              ; preds = %264, %258
  %270 = icmp eq %"class.std::__1::vector.287"* %260, %256
  br i1 %270, label %271, label %258

271:                                              ; preds = %269, %255
  store %"class.std::__1::vector.287"* %256, %"class.std::__1::vector.287"** %240, align 8
  %272 = ptrtoint %"class.std::__1::vector.287"* %256 to i64
  br label %273

273:                                              ; preds = %250, %253, %271
  %274 = phi i64 [ %252, %250 ], [ %242, %253 ], [ %272, %271 ]
  %275 = load i64, i64* %243, align 8
  %276 = icmp eq i64 %274, %275
  br i1 %276, label %315, label %277

277:                                              ; preds = %273
  %278 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 17
  br label %279

279:                                              ; preds = %277, %308
  %280 = phi i64 [ %275, %277 ], [ %311, %308 ]
  %281 = phi i64 [ 0, %277 ], [ %309, %308 ]
  %282 = inttoptr i64 %280 to %"class.std::__1::vector.287"*
  %283 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %282, i64 %281
  %284 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %285 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %284, i64 0, i32 1, i32 15
  %286 = load i32, i32* %285, align 4
  %287 = zext i32 %286 to i64
  %288 = mul nuw nsw i64 %287, 288
  %289 = load i8, i8* %278, align 1, !range !9
  %290 = icmp eq i8 %289, 0
  %291 = select i1 %290, i64 3, i64 4
  %292 = mul nuw nsw i64 %288, %291
  %293 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %282, i64 %281, i32 0, i32 1
  %294 = bitcast float** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"class.std::__1::vector.287"* %283 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = sub i64 %295, %297
  %299 = ashr exact i64 %298, 2
  %300 = icmp ugt i64 %292, %299
  %301 = inttoptr i64 %297 to float*
  br i1 %300, label %302, label %304

302:                                              ; preds = %279
  %303 = sub nsw i64 %292, %299
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.287"* %283, i64 %303) #5
  br label %308

304:                                              ; preds = %279
  %305 = icmp ult i64 %292, %299
  br i1 %305, label %306, label %308

306:                                              ; preds = %304
  %307 = getelementptr inbounds float, float* %301, i64 %292
  store float* %307, float** %293, align 8
  br label %308

308:                                              ; preds = %302, %304, %306
  %309 = add nuw i64 %281, 1
  %310 = load i64, i64* %241, align 8
  %311 = load i64, i64* %243, align 8
  %312 = sub i64 %310, %311
  %313 = sdiv exact i64 %312, 24
  %314 = icmp ult i64 %309, %313
  br i1 %314, label %279, label %315

315:                                              ; preds = %308, %273, %215, %158
  %316 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %317 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %316, i64 0, i32 0
  %318 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %317, align 8
  %319 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %318, i64 0, i32 0, i32 15
  %320 = load i32, i32* %319, align 8
  %321 = zext i32 %320 to i64
  %322 = mul i64 %321, %1
  %323 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31
  %324 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31, i32 0, i32 1
  %325 = bitcast %"class.jxl::Plane.1"** %324 to i64*
  %326 = load i64, i64* %325, align 8
  %327 = bitcast %"class.std::__1::vector.87"* %323 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = sub i64 %326, %328
  %330 = ashr exact i64 %329, 5
  %331 = icmp ugt i64 %322, %330
  br i1 %331, label %332, label %339

332:                                              ; preds = %315
  %333 = sub i64 %322, %330
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.87"* %323, i64 %333) #5
  %334 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %335 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %334, i64 0, i32 0
  %336 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %335, align 8
  %337 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %336, i64 0, i32 0, i32 15
  %338 = load i32, i32* %337, align 8
  br label %339

339:                                              ; preds = %332, %315
  %340 = phi i32 [ %338, %332 ], [ %320, %315 ]
  %341 = phi %"struct.jxl::PassesSharedState"* [ %334, %332 ], [ %316, %315 ]
  %342 = icmp eq i32 %340, 0
  br i1 %342, label %352, label %343

343:                                              ; preds = %339
  %344 = icmp eq i64 %1, 0
  %345 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %323, i64 0, i32 0, i32 0
  %346 = bitcast %"class.jxl::Plane.1"* %14 to i8*
  %347 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %14, i64 0, i32 0
  %348 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %14, i64 0, i32 0, i32 5
  %349 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %348, i64 0, i32 0, i32 0, i32 0
  %350 = bitcast %"class.std::__1::unique_ptr"* %348 to i64*
  %351 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %14, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %353

352:                                              ; preds = %409, %339
  ret void

353:                                              ; preds = %343, %409
  %354 = phi %"struct.jxl::PassesSharedState"* [ %341, %343 ], [ %410, %409 ]
  %355 = phi i64 [ 0, %343 ], [ %411, %409 ]
  %356 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %354, i64 0, i32 1, i32 16, i32 0, i32 0
  %357 = load i32*, i32** %356, align 8
  %358 = getelementptr inbounds i32, i32* %357, i64 %355
  %359 = load i32, i32* %358, align 4
  %360 = icmp eq i32 %359, 1
  br i1 %360, label %409, label %361

361:                                              ; preds = %353
  %362 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %354, i64 0, i32 1, i32 15
  %363 = load i32, i32* %362, align 4
  %364 = zext i32 %363 to i64
  %365 = mul nuw nsw i64 %364, 288
  %366 = zext i32 %359 to i64
  %367 = udiv i64 %365, %366
  %368 = add nuw nsw i64 %367, 16
  %369 = add nuw nsw i64 %367, 4
  br i1 %344, label %409, label %370

370:                                              ; preds = %361, %405
  %371 = phi %"struct.jxl::PassesSharedState"* [ %408, %405 ], [ %354, %361 ]
  %372 = phi i64 [ %406, %405 ], [ 0, %361 ]
  %373 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %371, i64 0, i32 0
  %374 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %373, align 8
  %375 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %374, i64 0, i32 0, i32 15
  %376 = load i32, i32* %375, align 8
  %377 = zext i32 %376 to i64
  %378 = mul i64 %372, %377
  %379 = add i64 %378, %355
  %380 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %345, align 8
  %381 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %380, i64 %379
  %382 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %381, i64 0, i32 0, i32 0
  %383 = load i32, i32* %382, align 8
  %384 = zext i32 %383 to i64
  %385 = icmp ugt i64 %368, %384
  br i1 %385, label %391, label %386

386:                                              ; preds = %370
  %387 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %380, i64 %379, i32 0, i32 1
  %388 = load i32, i32* %387, align 4
  %389 = zext i32 %388 to i64
  %390 = icmp ugt i64 %369, %389
  br i1 %390, label %391, label %405

391:                                              ; preds = %386, %370
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %346) #5
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %347, i64 %368, i64 %369, i64 4) #5
  %392 = bitcast %"class.jxl::Plane.1"* %381 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %392, i8* nonnull align 8 %346, i64 24, i1 false) #5
  %393 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %380, i64 %379, i32 0, i32 5
  %394 = load i64, i64* %350, align 8
  store i8* null, i8** %349, align 8
  %395 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %393, i64 0, i32 0, i32 0, i32 0
  %396 = load i8*, i8** %395, align 8
  %397 = bitcast %"class.std::__1::unique_ptr"* %393 to i64*
  store i64 %394, i64* %397, align 8
  %398 = icmp eq i8* %396, null
  br i1 %398, label %400, label %399

399:                                              ; preds = %391
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %396) #5
  br label %400

400:                                              ; preds = %391, %399
  %401 = load i8*, i8** %351, align 8
  store i8* null, i8** %351, align 8
  %402 = icmp eq i8* %401, null
  br i1 %402, label %404, label %403

403:                                              ; preds = %400
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %401) #5
  br label %404

404:                                              ; preds = %400, %403
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %346) #5
  br label %405

405:                                              ; preds = %404, %386
  %406 = add nuw i64 %372, 1
  %407 = icmp eq i64 %406, %1
  %408 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  br i1 %407, label %409, label %370

409:                                              ; preds = %405, %361, %353
  %410 = phi %"struct.jxl::PassesSharedState"* [ %354, %361 ], [ %354, %353 ], [ %408, %405 ]
  %411 = add nuw nsw i64 %355, 1
  %412 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %410, i64 0, i32 0
  %413 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %412, align 8
  %414 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %413, i64 0, i32 0, i32 15
  %415 = load i32, i32* %414, align 8
  %416 = zext i32 %415 to i64
  %417 = icmp ult i64 %411, %416
  br i1 %417, label %353, label %352
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.300"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"struct.std::__1::__split_buffer.547", align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.300", %"class.std::__1::vector.300"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.jxl::FilterPipeline"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.300", %"class.std::__1::vector.300"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.jxl::FilterPipeline"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 832
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %44, label %13

13:                                               ; preds = %2
  %14 = inttoptr i64 %9 to %"class.jxl::FilterPipeline"*
  %15 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %42, label %19

17:                                               ; preds = %19
  %18 = ptrtoint %"class.jxl::FilterPipeline"* %15 to i64
  br label %42

19:                                               ; preds = %13, %19
  %20 = phi %"class.jxl::FilterPipeline"* [ %40, %19 ], [ %14, %13 ]
  %21 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 0, i32 0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %21, i64 320, i64 15, i64 4) #5
  %22 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 0, i32 0, i64 1, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %22, i64 320, i64 15, i64 4) #5
  %23 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 0, i32 0, i64 2, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %23, i64 320, i64 15, i64 4) #5
  %24 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 1
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 0, i32 1
  store i64 0, i64* %25, align 8
  %26 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 0, i32 3
  %27 = bitcast i64* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 104, i1 false) #5
  %28 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 1, i32 1
  store i64 0, i64* %28, align 8
  %29 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 1, i32 3
  %30 = bitcast i64* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 104, i1 false) #5
  %31 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 2, i32 1
  store i64 0, i64* %31, align 8
  %32 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 2, i32 3
  %33 = bitcast i64* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 104, i1 false) #5
  %34 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 3, i32 1
  store i64 0, i64* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 3, i32 3
  %36 = bitcast i64* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 104, i1 false) #5
  %37 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 3
  store i64 0, i64* %37, align 8
  %38 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 4
  store i8 0, i8* %38, align 8
  %39 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 5
  store i64 0, i64* %39, align 8
  %40 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 1
  %41 = icmp eq %"class.jxl::FilterPipeline"* %40, %15
  br i1 %41, label %17, label %19

42:                                               ; preds = %13, %17
  %43 = phi i64 [ %18, %17 ], [ %9, %13 ]
  store i64 %43, i64* %8, align 8
  br label %139

44:                                               ; preds = %2
  %45 = getelementptr inbounds %"class.std::__1::vector.300", %"class.std::__1::vector.300"* %0, i64 0, i32 0, i32 2
  %46 = bitcast %"struct.std::__1::__split_buffer.547"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %46) #5
  %47 = getelementptr inbounds %"struct.std::__1::__split_buffer.547", %"struct.std::__1::__split_buffer.547"* %3, i64 0, i32 0
  %48 = getelementptr inbounds %"struct.std::__1::__split_buffer.547", %"struct.std::__1::__split_buffer.547"* %3, i64 0, i32 1
  %49 = getelementptr inbounds %"struct.std::__1::__split_buffer.547", %"struct.std::__1::__split_buffer.547"* %3, i64 0, i32 2
  %50 = getelementptr inbounds %"struct.std::__1::__split_buffer.547", %"struct.std::__1::__split_buffer.547"* %3, i64 0, i32 3, i32 0, i32 0
  %51 = getelementptr inbounds %"struct.std::__1::__split_buffer.547", %"struct.std::__1::__split_buffer.547"* %3, i64 0, i32 3, i32 1, i32 0
  %52 = bitcast %"class.std::__1::vector.300"* %0 to i64*
  %53 = bitcast %"struct.std::__1::__split_buffer.547"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 -86, i64 40, i1 false)
  %54 = load i64, i64* %52, align 8
  %55 = sub i64 %9, %54
  %56 = sdiv exact i64 %55, 832
  %57 = add i64 %56, %1
  %58 = icmp ugt i64 %57, 22171567396285518
  br i1 %58, label %59, label %61

59:                                               ; preds = %44
  %60 = bitcast %"class.std::__1::vector.300"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #24
  unreachable

61:                                               ; preds = %44
  %62 = sub i64 %6, %54
  %63 = sdiv exact i64 %62, 832
  %64 = icmp ult i64 %63, 11085783698142759
  br i1 %64, label %67, label %65

65:                                               ; preds = %61
  store %"class.jxl::FilterPipeline"* null, %"class.jxl::FilterPipeline"** %50, align 8
  %66 = bitcast %"class.std::__1::allocator.305"** %51 to %"class.std::__1::__compressed_pair.302"**
  store %"class.std::__1::__compressed_pair.302"* %45, %"class.std::__1::__compressed_pair.302"** %66, align 8
  br label %73

67:                                               ; preds = %61
  %68 = shl nsw i64 %63, 1
  %69 = icmp ult i64 %68, %57
  %70 = select i1 %69, i64 %57, i64 %68
  store %"class.jxl::FilterPipeline"* null, %"class.jxl::FilterPipeline"** %50, align 8
  %71 = bitcast %"class.std::__1::allocator.305"** %51 to %"class.std::__1::__compressed_pair.302"**
  store %"class.std::__1::__compressed_pair.302"* %45, %"class.std::__1::__compressed_pair.302"** %71, align 8
  %72 = icmp eq i64 %70, 0
  br i1 %72, label %78, label %73

73:                                               ; preds = %67, %65
  %74 = phi i64 [ 22171567396285518, %65 ], [ %70, %67 ]
  %75 = mul i64 %74, 832
  %76 = tail call i8* @_Znwm(i64 %75) #25
  %77 = bitcast i8* %76 to %"class.jxl::FilterPipeline"*
  br label %78

78:                                               ; preds = %67, %73
  %79 = phi i64 [ %74, %73 ], [ 0, %67 ]
  %80 = phi %"class.jxl::FilterPipeline"* [ %77, %73 ], [ null, %67 ]
  store %"class.jxl::FilterPipeline"* %80, %"class.jxl::FilterPipeline"** %47, align 8
  %81 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %80, i64 %56
  store %"class.jxl::FilterPipeline"* %81, %"class.jxl::FilterPipeline"** %49, align 8
  store %"class.jxl::FilterPipeline"* %81, %"class.jxl::FilterPipeline"** %48, align 8
  %82 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %80, i64 %79
  store %"class.jxl::FilterPipeline"* %82, %"class.jxl::FilterPipeline"** %50, align 8
  %83 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %81, i64 %1
  br label %84

84:                                               ; preds = %78, %84
  %85 = phi %"class.jxl::FilterPipeline"* [ %105, %84 ], [ %81, %78 ]
  %86 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 0, i32 0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %86, i64 320, i64 15, i64 4) #5
  %87 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 0, i32 0, i64 1, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %87, i64 320, i64 15, i64 4) #5
  %88 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 0, i32 0, i64 2, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %88, i64 320, i64 15, i64 4) #5
  %89 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 1
  store i64 0, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 0, i32 1
  store i64 0, i64* %90, align 8
  %91 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 0, i32 3
  %92 = bitcast i64* %91 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 104, i1 false) #5
  %93 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 1, i32 1
  store i64 0, i64* %93, align 8
  %94 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 1, i32 3
  %95 = bitcast i64* %94 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 104, i1 false) #5
  %96 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 2, i32 1
  store i64 0, i64* %96, align 8
  %97 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 2, i32 3
  %98 = bitcast i64* %97 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 104, i1 false) #5
  %99 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 3, i32 1
  store i64 0, i64* %99, align 8
  %100 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 3, i32 3
  %101 = bitcast i64* %100 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %101, i8 0, i64 104, i1 false) #5
  %102 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 3
  store i64 0, i64* %102, align 8
  %103 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 4
  store i8 0, i8* %103, align 8
  %104 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 5
  store i64 0, i64* %104, align 8
  %105 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 1
  %106 = icmp eq %"class.jxl::FilterPipeline"* %83, %105
  br i1 %106, label %107, label %84

107:                                              ; preds = %84
  %108 = bitcast %"class.jxl::FilterPipeline"** %49 to i64*
  %109 = ptrtoint %"class.jxl::FilterPipeline"* %83 to i64
  store i64 %109, i64* %108, align 8
  call void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(%"class.std::__1::vector.300"* %0, %"struct.std::__1::__split_buffer.547"* nonnull dereferenceable(40) %3)
  %110 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %48, align 8
  %111 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %49, align 8
  %112 = icmp eq %"class.jxl::FilterPipeline"* %111, %110
  br i1 %112, label %133, label %113

113:                                              ; preds = %107, %130
  %114 = phi %"class.jxl::FilterPipeline"* [ %131, %130 ], [ %111, %107 ]
  %115 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1
  store %"class.jxl::FilterPipeline"* %115, %"class.jxl::FilterPipeline"** %49, align 8
  %116 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %117 = load i8*, i8** %116, align 8
  store i8* null, i8** %116, align 8
  %118 = icmp eq i8* %117, null
  br i1 %118, label %120, label %119

119:                                              ; preds = %113
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %117) #5
  br label %120

120:                                              ; preds = %119, %113
  %121 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %122 = load i8*, i8** %121, align 8
  store i8* null, i8** %121, align 8
  %123 = icmp eq i8* %122, null
  br i1 %123, label %125, label %124

124:                                              ; preds = %120
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %122) #5
  br label %125

125:                                              ; preds = %124, %120
  %126 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %127 = load i8*, i8** %126, align 8
  store i8* null, i8** %126, align 8
  %128 = icmp eq i8* %127, null
  br i1 %128, label %130, label %129

129:                                              ; preds = %125
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %127) #5
  br label %130

130:                                              ; preds = %129, %125
  %131 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %49, align 8
  %132 = icmp eq %"class.jxl::FilterPipeline"* %131, %110
  br i1 %132, label %133, label %113

133:                                              ; preds = %130, %107
  %134 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %47, align 8
  %135 = icmp eq %"class.jxl::FilterPipeline"* %134, null
  br i1 %135, label %138, label %136

136:                                              ; preds = %133
  %137 = bitcast %"class.jxl::FilterPipeline"* %134 to i8*
  call void @_ZdlPv(i8* %137) #25
  br label %138

138:                                              ; preds = %133, %136
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %46) #5
  br label %139

139:                                              ; preds = %138, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(%"class.std::__1::vector.300"*, %"struct.std::__1::__split_buffer.547"* dereferenceable(40)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.300", %"class.std::__1::vector.300"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.300", %"class.std::__1::vector.300"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %5, align 8
  %7 = getelementptr inbounds %"struct.std::__1::__split_buffer.547", %"struct.std::__1::__split_buffer.547"* %1, i64 0, i32 1
  %8 = icmp eq %"class.jxl::FilterPipeline"* %6, %4
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = ptrtoint %"class.jxl::FilterPipeline"* %4 to i64
  %11 = bitcast %"class.jxl::FilterPipeline"** %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.300"* %0 to i64*
  br label %77

14:                                               ; preds = %2
  %15 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %7, align 8
  br label %16

16:                                               ; preds = %64, %14
  %17 = phi %"class.jxl::FilterPipeline"* [ %70, %64 ], [ %15, %14 ]
  %18 = phi %"class.jxl::FilterPipeline"* [ %20, %64 ], [ %6, %14 ]
  %19 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1
  %20 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1
  %21 = bitcast %"class.jxl::FilterPipeline"* %19 to i8*
  %22 = bitcast %"class.jxl::FilterPipeline"* %20 to i8*
  %23 = getelementptr %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5
  %24 = bitcast %"class.std::__1::unique_ptr"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 72, i1 false) #5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #5
  %25 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i8* null, i8** %26, align 8
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %23, i64 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = bitcast %"class.std::__1::unique_ptr"* %23 to i64*
  store i64 %28, i64* %31, align 8
  %32 = icmp eq i8* %30, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %16
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %30) #5
  br label %34

34:                                               ; preds = %33, %16
  %35 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 1
  %36 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 1
  %37 = bitcast %"class.jxl::Plane.1"* %36 to i8*
  %38 = bitcast %"class.jxl::Plane.1"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #5
  %39 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5
  %40 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = bitcast %"class.std::__1::unique_ptr"* %40 to i64*
  %43 = load i64, i64* %42, align 8
  store i8* null, i8** %41, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %39, i64 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast %"class.std::__1::unique_ptr"* %39 to i64*
  store i64 %43, i64* %46, align 8
  %47 = icmp eq i8* %45, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %34
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %45) #5
  br label %49

49:                                               ; preds = %48, %34
  %50 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 2
  %51 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 2
  %52 = bitcast %"class.jxl::Plane.1"* %51 to i8*
  %53 = bitcast %"class.jxl::Plane.1"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #5
  %54 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5
  %55 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i8* null, i8** %56, align 8
  %59 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = bitcast %"class.std::__1::unique_ptr"* %54 to i64*
  store i64 %58, i64* %61, align 8
  %62 = icmp eq i8* %60, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %49
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %60) #5
  br label %64

64:                                               ; preds = %63, %49
  %65 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 1
  %66 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 1
  %67 = bitcast i64* %65 to i8*
  %68 = bitcast i64* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 736, i1 false) #5
  %69 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %7, align 8
  %70 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %69, i64 -1
  store %"class.jxl::FilterPipeline"* %70, %"class.jxl::FilterPipeline"** %7, align 8
  %71 = icmp eq %"class.jxl::FilterPipeline"* %20, %4
  br i1 %71, label %72, label %16

72:                                               ; preds = %64
  %73 = ptrtoint %"class.jxl::FilterPipeline"* %70 to i64
  %74 = bitcast %"class.std::__1::vector.300"* %0 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.jxl::FilterPipeline"** %7 to i64*
  br label %77

77:                                               ; preds = %9, %72
  %78 = phi i64* [ %11, %9 ], [ %76, %72 ]
  %79 = phi i64* [ %13, %9 ], [ %74, %72 ]
  %80 = phi i64 [ %12, %9 ], [ %73, %72 ]
  %81 = phi i64 [ %10, %9 ], [ %75, %72 ]
  store i64 %80, i64* %79, align 8
  store i64 %81, i64* %78, align 8
  %82 = getelementptr inbounds %"struct.std::__1::__split_buffer.547", %"struct.std::__1::__split_buffer.547"* %1, i64 0, i32 2
  %83 = bitcast %"class.jxl::FilterPipeline"** %5 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = bitcast %"class.jxl::FilterPipeline"** %82 to i64*
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %83, align 8
  store i64 %84, i64* %85, align 8
  %87 = getelementptr inbounds %"class.std::__1::vector.300", %"class.std::__1::vector.300"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %88 = getelementptr inbounds %"struct.std::__1::__split_buffer.547", %"struct.std::__1::__split_buffer.547"* %1, i64 0, i32 3, i32 0, i32 0
  %89 = bitcast %"class.jxl::FilterPipeline"** %87 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"class.jxl::FilterPipeline"** %88 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %89, align 8
  store i64 %90, i64* %91, align 8
  %93 = load i64, i64* %78, align 8
  %94 = bitcast %"struct.std::__1::__split_buffer.547"* %1 to i64*
  store i64 %93, i64* %94, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.314"*, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %4 = alloca %"struct.std::__1::__split_buffer.550", align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %0, i64 0, i32 0, i32 2
  %6 = bitcast %"struct.std::__1::__split_buffer.550"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #5
  %7 = getelementptr inbounds %"struct.std::__1::__split_buffer.550", %"struct.std::__1::__split_buffer.550"* %4, i64 0, i32 0
  %8 = getelementptr inbounds %"struct.std::__1::__split_buffer.550", %"struct.std::__1::__split_buffer.550"* %4, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.std::__1::__split_buffer.550", %"struct.std::__1::__split_buffer.550"* %4, i64 0, i32 2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.550", %"struct.std::__1::__split_buffer.550"* %4, i64 0, i32 3, i32 0, i32 0
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.550", %"struct.std::__1::__split_buffer.550"* %4, i64 0, i32 3, i32 1, i32 0
  %12 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %0, i64 0, i32 0, i32 1
  %13 = bitcast %"class.jxl::Image3"** %12 to i64*
  %14 = bitcast %"struct.std::__1::__split_buffer.550"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 40, i1 false)
  %15 = load i64, i64* %13, align 8
  %16 = bitcast %"class.std::__1::vector.314"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = sdiv exact i64 %18, 96
  %20 = add nsw i64 %19, 1
  %21 = icmp ugt i64 %20, 192153584101141162
  br i1 %21, label %22, label %24

22:                                               ; preds = %3
  %23 = bitcast %"class.std::__1::vector.314"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #24
  unreachable

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %26 = bitcast %"class.jxl::Image3"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %17
  %29 = sdiv exact i64 %28, 96
  %30 = icmp ult i64 %29, 96076792050570581
  br i1 %30, label %33, label %31

31:                                               ; preds = %24
  store %"class.jxl::Image3"* null, %"class.jxl::Image3"** %10, align 8
  %32 = bitcast %"class.std::__1::allocator.319"** %11 to %"class.std::__1::__compressed_pair.316"**
  store %"class.std::__1::__compressed_pair.316"* %5, %"class.std::__1::__compressed_pair.316"** %32, align 8
  br label %39

33:                                               ; preds = %24
  %34 = shl nsw i64 %29, 1
  %35 = icmp ult i64 %34, %20
  %36 = select i1 %35, i64 %20, i64 %34
  store %"class.jxl::Image3"* null, %"class.jxl::Image3"** %10, align 8
  %37 = bitcast %"class.std::__1::allocator.319"** %11 to %"class.std::__1::__compressed_pair.316"**
  store %"class.std::__1::__compressed_pair.316"* %5, %"class.std::__1::__compressed_pair.316"** %37, align 8
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %33, %31
  %40 = phi i64 [ 192153584101141162, %31 ], [ %36, %33 ]
  %41 = mul i64 %40, 96
  %42 = tail call i8* @_Znwm(i64 %41) #25
  %43 = bitcast i8* %42 to %"class.jxl::Image3"*
  br label %44

44:                                               ; preds = %33, %39
  %45 = phi i64 [ %40, %39 ], [ 0, %33 ]
  %46 = phi %"class.jxl::Image3"* [ %43, %39 ], [ null, %33 ]
  store %"class.jxl::Image3"* %46, %"class.jxl::Image3"** %7, align 8
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %19
  store %"class.jxl::Image3"* %47, %"class.jxl::Image3"** %8, align 8
  %48 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %45
  store %"class.jxl::Image3"* %48, %"class.jxl::Image3"** %10, align 8
  %49 = load i64, i64* %1, align 8
  %50 = load i64, i64* %2, align 8
  %51 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %47, i64 0, i32 0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %51, i64 %49, i64 %50, i64 4) #5
  %52 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %19, i32 0, i64 1, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %52, i64 %49, i64 %50, i64 4) #5
  %53 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %19, i32 0, i64 2, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %53, i64 %49, i64 %50, i64 4) #5
  %54 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %47, i64 1
  store %"class.jxl::Image3"* %54, %"class.jxl::Image3"** %9, align 8
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(%"class.std::__1::vector.314"* %0, %"struct.std::__1::__split_buffer.550"* nonnull dereferenceable(40) %4)
  %55 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %8, align 8
  %56 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %9, align 8
  %57 = icmp eq %"class.jxl::Image3"* %56, %55
  br i1 %57, label %78, label %58

58:                                               ; preds = %44, %75
  %59 = phi %"class.jxl::Image3"* [ %76, %75 ], [ %56, %44 ]
  %60 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1
  store %"class.jxl::Image3"* %60, %"class.jxl::Image3"** %9, align 8
  %61 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  store i8* null, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %58
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %62) #5
  br label %65

65:                                               ; preds = %64, %58
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  store i8* null, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %70, label %69

69:                                               ; preds = %65
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #5
  br label %70

70:                                               ; preds = %69, %65
  %71 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  store i8* null, i8** %71, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %70
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %72) #5
  br label %75

75:                                               ; preds = %74, %70
  %76 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %9, align 8
  %77 = icmp eq %"class.jxl::Image3"* %76, %55
  br i1 %77, label %78, label %58

78:                                               ; preds = %75, %44
  %79 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %7, align 8
  %80 = icmp eq %"class.jxl::Image3"* %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %78
  %82 = bitcast %"class.jxl::Image3"* %79 to i8*
  call void @_ZdlPv(i8* %82) #25
  br label %83

83:                                               ; preds = %78, %81
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(%"class.std::__1::vector.314"*, %"struct.std::__1::__split_buffer.550"* dereferenceable(40)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %5, align 8
  %7 = getelementptr inbounds %"struct.std::__1::__split_buffer.550", %"struct.std::__1::__split_buffer.550"* %1, i64 0, i32 1
  %8 = icmp eq %"class.jxl::Image3"* %6, %4
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = ptrtoint %"class.jxl::Image3"* %4 to i64
  %11 = bitcast %"class.jxl::Image3"** %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.314"* %0 to i64*
  br label %73

14:                                               ; preds = %2
  %15 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %7, align 8
  br label %16

16:                                               ; preds = %64, %14
  %17 = phi %"class.jxl::Image3"* [ %66, %64 ], [ %15, %14 ]
  %18 = phi %"class.jxl::Image3"* [ %20, %64 ], [ %6, %14 ]
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1
  %21 = bitcast %"class.jxl::Image3"* %19 to i8*
  %22 = bitcast %"class.jxl::Image3"* %20 to i8*
  %23 = getelementptr %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 0, i32 0, i32 5
  %24 = bitcast %"class.std::__1::unique_ptr"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 72, i1 false) #5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #5
  %25 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 0, i32 0, i32 5
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i8* null, i8** %26, align 8
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %23, i64 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = bitcast %"class.std::__1::unique_ptr"* %23 to i64*
  store i64 %28, i64* %31, align 8
  %32 = icmp eq i8* %30, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %16
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %30) #5
  br label %34

34:                                               ; preds = %33, %16
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 1
  %36 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 1
  %37 = bitcast %"class.jxl::Plane.1"* %36 to i8*
  %38 = bitcast %"class.jxl::Plane.1"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #5
  %39 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 1, i32 0, i32 5
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 1, i32 0, i32 5
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = bitcast %"class.std::__1::unique_ptr"* %40 to i64*
  %43 = load i64, i64* %42, align 8
  store i8* null, i8** %41, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %39, i64 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast %"class.std::__1::unique_ptr"* %39 to i64*
  store i64 %43, i64* %46, align 8
  %47 = icmp eq i8* %45, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %34
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %45) #5
  br label %49

49:                                               ; preds = %48, %34
  %50 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 2
  %51 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 2
  %52 = bitcast %"class.jxl::Plane.1"* %51 to i8*
  %53 = bitcast %"class.jxl::Plane.1"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #5
  %54 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 2, i32 0, i32 5
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 2, i32 0, i32 5
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i8* null, i8** %56, align 8
  %59 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = bitcast %"class.std::__1::unique_ptr"* %54 to i64*
  store i64 %58, i64* %61, align 8
  %62 = icmp eq i8* %60, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %49
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %60) #5
  br label %64

64:                                               ; preds = %63, %49
  %65 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %7, align 8
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %65, i64 -1
  store %"class.jxl::Image3"* %66, %"class.jxl::Image3"** %7, align 8
  %67 = icmp eq %"class.jxl::Image3"* %20, %4
  br i1 %67, label %68, label %16

68:                                               ; preds = %64
  %69 = ptrtoint %"class.jxl::Image3"* %66 to i64
  %70 = bitcast %"class.std::__1::vector.314"* %0 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.jxl::Image3"** %7 to i64*
  br label %73

73:                                               ; preds = %9, %68
  %74 = phi i64* [ %11, %9 ], [ %72, %68 ]
  %75 = phi i64* [ %13, %9 ], [ %70, %68 ]
  %76 = phi i64 [ %12, %9 ], [ %69, %68 ]
  %77 = phi i64 [ %10, %9 ], [ %71, %68 ]
  store i64 %76, i64* %75, align 8
  store i64 %77, i64* %74, align 8
  %78 = getelementptr inbounds %"struct.std::__1::__split_buffer.550", %"struct.std::__1::__split_buffer.550"* %1, i64 0, i32 2
  %79 = bitcast %"class.jxl::Image3"** %5 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast %"class.jxl::Image3"** %78 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %79, align 8
  store i64 %80, i64* %81, align 8
  %83 = getelementptr inbounds %"class.std::__1::vector.314", %"class.std::__1::vector.314"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %84 = getelementptr inbounds %"struct.std::__1::__split_buffer.550", %"struct.std::__1::__split_buffer.550"* %1, i64 0, i32 3, i32 0, i32 0
  %85 = bitcast %"class.jxl::Image3"** %83 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"class.jxl::Image3"** %84 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %85, align 8
  store i64 %86, i64* %87, align 8
  %89 = load i64, i64* %74, align 8
  %90 = bitcast %"struct.std::__1::__split_buffer.550"* %1 to i64*
  store i64 %89, i64* %90, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEmRKf(%"class.std::__1::vector.287"*, i64, float* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast float* %2 to i8*
  %5 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast float** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 1
  %9 = bitcast float** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %7, %10
  %12 = ashr exact i64 %11, 2
  %13 = icmp ult i64 %12, %1
  br i1 %13, label %139, label %14

14:                                               ; preds = %3
  %15 = inttoptr i64 %10 to float*
  %16 = inttoptr i64 %10 to i8*
  %17 = getelementptr inbounds float, float* %15, i64 %1
  %18 = icmp eq i64 %1, 0
  br i1 %18, label %137, label %19

19:                                               ; preds = %14
  %20 = bitcast float* %2 to i32*
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %48

26:                                               ; preds = %106, %48, %19
  %27 = phi float* [ %15, %48 ], [ %15, %19 ], [ %60, %106 ]
  %28 = ptrtoint float* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr float, float* %15, i64 %29
  %31 = ptrtoint float* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %26, %37
  %38 = phi float* [ %42, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %43, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %20, align 4
  %41 = bitcast float* %38 to i32*
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds float, float* %38, i64 1
  %43 = add i64 %39, -1
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %37, !llvm.loop !441

45:                                               ; preds = %37, %26
  %46 = phi float* [ %27, %26 ], [ %42, %37 ]
  %47 = icmp ult i64 %32, 28
  br i1 %47, label %108, label %110

48:                                               ; preds = %19
  %49 = shl nsw i64 %1, 2
  %50 = add i64 %49, -4
  %51 = lshr exact i64 %50, 2
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr float, float* %15, i64 %52
  %54 = getelementptr i8, i8* %4, i64 1
  %55 = icmp ugt i8* %54, %16
  %56 = icmp ugt float* %53, %2
  %57 = and i1 %55, %56
  br i1 %57, label %26, label %58

58:                                               ; preds = %48
  %59 = and i64 %24, 9223372036854775800
  %60 = getelementptr float, float* %15, i64 %59
  %61 = add nsw i64 %59, -8
  %62 = lshr exact i64 %61, 3
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %93, label %66

66:                                               ; preds = %58
  %67 = sub nuw nsw i64 %63, %64
  %68 = load i32, i32* %20, align 4, !alias.scope !442
  %69 = insertelement <4 x i32> undef, i32 %68, i32 0
  %70 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> zeroinitializer
  %71 = insertelement <4 x i32> undef, i32 %68, i32 0
  %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> zeroinitializer
  %73 = load i32, i32* %20, align 4, !alias.scope !442
  %74 = insertelement <4 x i32> undef, i32 %73, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  %76 = insertelement <4 x i32> undef, i32 %73, i32 0
  %77 = shufflevector <4 x i32> %76, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %78

78:                                               ; preds = %78, %66
  %79 = phi i64 [ 0, %66 ], [ %90, %78 ]
  %80 = phi i64 [ %67, %66 ], [ %91, %78 ]
  %81 = getelementptr float, float* %15, i64 %79
  %82 = bitcast float* %81 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %82, align 4, !alias.scope !445, !noalias !442
  %83 = getelementptr float, float* %81, i64 4
  %84 = bitcast float* %83 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %84, align 4, !alias.scope !445, !noalias !442
  %85 = or i64 %79, 8
  %86 = getelementptr float, float* %15, i64 %85
  %87 = bitcast float* %86 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %87, align 4, !alias.scope !445, !noalias !442
  %88 = getelementptr float, float* %86, i64 4
  %89 = bitcast float* %88 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %89, align 4, !alias.scope !445, !noalias !442
  %90 = add i64 %79, 16
  %91 = add i64 %80, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %78, !llvm.loop !447

93:                                               ; preds = %78, %58
  %94 = phi i64 [ 0, %58 ], [ %90, %78 ]
  %95 = icmp eq i64 %64, 0
  br i1 %95, label %106, label %96

96:                                               ; preds = %93
  %97 = getelementptr float, float* %15, i64 %94
  %98 = load i32, i32* %20, align 4, !alias.scope !442
  %99 = insertelement <4 x i32> undef, i32 %98, i32 0
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> zeroinitializer
  %101 = insertelement <4 x i32> undef, i32 %98, i32 0
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> zeroinitializer
  %103 = bitcast float* %97 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %103, align 4, !alias.scope !445, !noalias !442
  %104 = getelementptr float, float* %97, i64 4
  %105 = bitcast float* %104 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %105, align 4, !alias.scope !445, !noalias !442
  br label %106

106:                                              ; preds = %93, %96
  %107 = icmp eq i64 %24, %59
  br i1 %107, label %108, label %26

108:                                              ; preds = %45, %110, %106
  %109 = ptrtoint float* %17 to i64
  br label %137

110:                                              ; preds = %45, %110
  %111 = phi float* [ %135, %110 ], [ %46, %45 ]
  %112 = load i32, i32* %20, align 4
  %113 = bitcast float* %111 to i32*
  store i32 %112, i32* %113, align 4
  %114 = getelementptr inbounds float, float* %111, i64 1
  %115 = load i32, i32* %20, align 4
  %116 = bitcast float* %114 to i32*
  store i32 %115, i32* %116, align 4
  %117 = getelementptr inbounds float, float* %111, i64 2
  %118 = load i32, i32* %20, align 4
  %119 = bitcast float* %117 to i32*
  store i32 %118, i32* %119, align 4
  %120 = getelementptr inbounds float, float* %111, i64 3
  %121 = load i32, i32* %20, align 4
  %122 = bitcast float* %120 to i32*
  store i32 %121, i32* %122, align 4
  %123 = getelementptr inbounds float, float* %111, i64 4
  %124 = load i32, i32* %20, align 4
  %125 = bitcast float* %123 to i32*
  store i32 %124, i32* %125, align 4
  %126 = getelementptr inbounds float, float* %111, i64 5
  %127 = load i32, i32* %20, align 4
  %128 = bitcast float* %126 to i32*
  store i32 %127, i32* %128, align 4
  %129 = getelementptr inbounds float, float* %111, i64 6
  %130 = load i32, i32* %20, align 4
  %131 = bitcast float* %129 to i32*
  store i32 %130, i32* %131, align 4
  %132 = getelementptr inbounds float, float* %111, i64 7
  %133 = load i32, i32* %20, align 4
  %134 = bitcast float* %132 to i32*
  store i32 %133, i32* %134, align 4
  %135 = getelementptr inbounds float, float* %111, i64 8
  %136 = icmp eq float* %135, %17
  br i1 %136, label %108, label %110, !llvm.loop !448

137:                                              ; preds = %14, %108
  %138 = phi i64 [ %109, %108 ], [ %10, %14 ]
  store i64 %138, i64* %9, align 8
  br label %311

139:                                              ; preds = %3
  %140 = bitcast %"class.std::__1::vector.287"* %0 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = sub i64 %10, %141
  %143 = ashr exact i64 %142, 2
  %144 = add i64 %143, %1
  %145 = icmp ugt i64 %144, 4611686018427387903
  br i1 %145, label %146, label %148

146:                                              ; preds = %139
  %147 = bitcast %"class.std::__1::vector.287"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %147) #24
  unreachable

148:                                              ; preds = %139
  %149 = sub i64 %7, %141
  %150 = ashr exact i64 %149, 2
  %151 = icmp ult i64 %150, 2305843009213693951
  br i1 %151, label %152, label %160

152:                                              ; preds = %148
  %153 = ashr exact i64 %149, 1
  %154 = icmp ult i64 %153, %144
  %155 = select i1 %154, i64 %144, i64 %153
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %165, label %157

157:                                              ; preds = %152
  %158 = icmp ugt i64 %155, 4611686018427387903
  br i1 %158, label %159, label %160

159:                                              ; preds = %157
  tail call void @abort() #24
  unreachable

160:                                              ; preds = %148, %157
  %161 = phi i64 [ %155, %157 ], [ 4611686018427387903, %148 ]
  %162 = shl i64 %161, 2
  %163 = tail call i8* @_Znwm(i64 %162) #25
  %164 = bitcast i8* %163 to float*
  br label %165

165:                                              ; preds = %160, %152
  %166 = phi i64 [ %161, %160 ], [ 0, %152 ]
  %167 = phi float* [ %164, %160 ], [ null, %152 ]
  %168 = getelementptr inbounds float, float* %167, i64 %143
  %169 = getelementptr inbounds float, float* %167, i64 %166
  %170 = getelementptr inbounds float, float* %168, i64 %1
  %171 = bitcast float* %2 to i32*
  %172 = shl nsw i64 %1, 2
  %173 = add i64 %172, -4
  %174 = lshr exact i64 %173, 2
  %175 = add nuw nsw i64 %174, 1
  %176 = icmp ult i64 %175, 8
  br i1 %176, label %239, label %177

177:                                              ; preds = %165
  %178 = bitcast float* %168 to i8*
  %179 = shl nsw i64 %1, 2
  %180 = add i64 %179, -4
  %181 = lshr exact i64 %180, 2
  %182 = add nsw i64 %143, %181
  %183 = add i64 %182, 1
  %184 = getelementptr float, float* %167, i64 %183
  %185 = getelementptr i8, i8* %4, i64 1
  %186 = icmp ugt i8* %185, %178
  %187 = icmp ugt float* %184, %2
  %188 = and i1 %186, %187
  br i1 %188, label %239, label %189

189:                                              ; preds = %177
  %190 = and i64 %175, 9223372036854775800
  %191 = getelementptr float, float* %168, i64 %190
  %192 = add nsw i64 %190, -8
  %193 = lshr exact i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 1
  %196 = icmp eq i64 %192, 0
  br i1 %196, label %224, label %197

197:                                              ; preds = %189
  %198 = sub nuw nsw i64 %194, %195
  %199 = load i32, i32* %171, align 4, !alias.scope !449
  %200 = insertelement <4 x i32> undef, i32 %199, i32 0
  %201 = shufflevector <4 x i32> %200, <4 x i32> undef, <4 x i32> zeroinitializer
  %202 = insertelement <4 x i32> undef, i32 %199, i32 0
  %203 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> zeroinitializer
  %204 = load i32, i32* %171, align 4, !alias.scope !449
  %205 = insertelement <4 x i32> undef, i32 %204, i32 0
  %206 = shufflevector <4 x i32> %205, <4 x i32> undef, <4 x i32> zeroinitializer
  %207 = insertelement <4 x i32> undef, i32 %204, i32 0
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %209

209:                                              ; preds = %209, %197
  %210 = phi i64 [ 0, %197 ], [ %221, %209 ]
  %211 = phi i64 [ %198, %197 ], [ %222, %209 ]
  %212 = getelementptr float, float* %168, i64 %210
  %213 = bitcast float* %212 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %213, align 4, !alias.scope !452, !noalias !449
  %214 = getelementptr float, float* %212, i64 4
  %215 = bitcast float* %214 to <4 x i32>*
  store <4 x i32> %203, <4 x i32>* %215, align 4, !alias.scope !452, !noalias !449
  %216 = or i64 %210, 8
  %217 = getelementptr float, float* %168, i64 %216
  %218 = bitcast float* %217 to <4 x i32>*
  store <4 x i32> %206, <4 x i32>* %218, align 4, !alias.scope !452, !noalias !449
  %219 = getelementptr float, float* %217, i64 4
  %220 = bitcast float* %219 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %220, align 4, !alias.scope !452, !noalias !449
  %221 = add i64 %210, 16
  %222 = add i64 %211, -2
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %209, !llvm.loop !454

224:                                              ; preds = %209, %189
  %225 = phi i64 [ 0, %189 ], [ %221, %209 ]
  %226 = icmp eq i64 %195, 0
  br i1 %226, label %237, label %227

227:                                              ; preds = %224
  %228 = getelementptr float, float* %168, i64 %225
  %229 = load i32, i32* %171, align 4, !alias.scope !449
  %230 = insertelement <4 x i32> undef, i32 %229, i32 0
  %231 = shufflevector <4 x i32> %230, <4 x i32> undef, <4 x i32> zeroinitializer
  %232 = insertelement <4 x i32> undef, i32 %229, i32 0
  %233 = shufflevector <4 x i32> %232, <4 x i32> undef, <4 x i32> zeroinitializer
  %234 = bitcast float* %228 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %234, align 4, !alias.scope !452, !noalias !449
  %235 = getelementptr float, float* %228, i64 4
  %236 = bitcast float* %235 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %236, align 4, !alias.scope !452, !noalias !449
  br label %237

237:                                              ; preds = %224, %227
  %238 = icmp eq i64 %175, %190
  br i1 %238, label %289, label %239

239:                                              ; preds = %237, %177, %165
  %240 = phi float* [ %168, %177 ], [ %168, %165 ], [ %191, %237 ]
  %241 = ptrtoint float* %240 to i64
  %242 = add i64 %143, %1
  %243 = add i64 %242, -1
  %244 = getelementptr float, float* %167, i64 %243
  %245 = ptrtoint float* %244 to i64
  %246 = sub i64 %245, %241
  %247 = lshr i64 %246, 2
  %248 = add nuw nsw i64 %247, 1
  %249 = and i64 %248, 7
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %259, label %251

251:                                              ; preds = %239, %251
  %252 = phi float* [ %256, %251 ], [ %240, %239 ]
  %253 = phi i64 [ %257, %251 ], [ %249, %239 ]
  %254 = load i32, i32* %171, align 4
  %255 = bitcast float* %252 to i32*
  store i32 %254, i32* %255, align 4
  %256 = getelementptr inbounds float, float* %252, i64 1
  %257 = add i64 %253, -1
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %251, !llvm.loop !455

259:                                              ; preds = %251, %239
  %260 = phi float* [ %240, %239 ], [ %256, %251 ]
  %261 = icmp ult i64 %246, 28
  br i1 %261, label %289, label %262

262:                                              ; preds = %259, %262
  %263 = phi float* [ %287, %262 ], [ %260, %259 ]
  %264 = load i32, i32* %171, align 4
  %265 = bitcast float* %263 to i32*
  store i32 %264, i32* %265, align 4
  %266 = getelementptr inbounds float, float* %263, i64 1
  %267 = load i32, i32* %171, align 4
  %268 = bitcast float* %266 to i32*
  store i32 %267, i32* %268, align 4
  %269 = getelementptr inbounds float, float* %263, i64 2
  %270 = load i32, i32* %171, align 4
  %271 = bitcast float* %269 to i32*
  store i32 %270, i32* %271, align 4
  %272 = getelementptr inbounds float, float* %263, i64 3
  %273 = load i32, i32* %171, align 4
  %274 = bitcast float* %272 to i32*
  store i32 %273, i32* %274, align 4
  %275 = getelementptr inbounds float, float* %263, i64 4
  %276 = load i32, i32* %171, align 4
  %277 = bitcast float* %275 to i32*
  store i32 %276, i32* %277, align 4
  %278 = getelementptr inbounds float, float* %263, i64 5
  %279 = load i32, i32* %171, align 4
  %280 = bitcast float* %278 to i32*
  store i32 %279, i32* %280, align 4
  %281 = getelementptr inbounds float, float* %263, i64 6
  %282 = load i32, i32* %171, align 4
  %283 = bitcast float* %281 to i32*
  store i32 %282, i32* %283, align 4
  %284 = getelementptr inbounds float, float* %263, i64 7
  %285 = load i32, i32* %171, align 4
  %286 = bitcast float* %284 to i32*
  store i32 %285, i32* %286, align 4
  %287 = getelementptr inbounds float, float* %263, i64 8
  %288 = icmp eq float* %170, %287
  br i1 %288, label %289, label %262, !llvm.loop !456

289:                                              ; preds = %259, %262, %237
  %290 = ptrtoint float* %169 to i64
  %291 = ptrtoint float* %170 to i64
  %292 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 0
  %293 = load float*, float** %292, align 8
  %294 = load i64, i64* %9, align 8
  %295 = ptrtoint float* %293 to i64
  %296 = sub i64 %294, %295
  %297 = ashr exact i64 %296, 2
  %298 = sub nsw i64 0, %297
  %299 = getelementptr inbounds float, float* %168, i64 %298
  %300 = ptrtoint float* %299 to i64
  %301 = icmp sgt i64 %296, 0
  br i1 %301, label %302, label %306

302:                                              ; preds = %289
  %303 = bitcast float* %299 to i8*
  %304 = bitcast float* %293 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %303, i8* align 4 %304, i64 %296, i1 false) #5
  %305 = load float*, float** %292, align 8
  br label %306

306:                                              ; preds = %289, %302
  %307 = phi float* [ %293, %289 ], [ %305, %302 ]
  store i64 %300, i64* %140, align 8
  store i64 %291, i64* %9, align 8
  store i64 %290, i64* %6, align 8
  %308 = icmp eq float* %307, null
  br i1 %308, label %311, label %309

309:                                              ; preds = %306
  %310 = bitcast float* %307 to i8*
  tail call void @_ZdlPv(i8* %310) #25
  br label %311

311:                                              ; preds = %309, %306, %137
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.293"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.293", %"class.std::__1::vector.293"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.287"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.293", %"class.std::__1::vector.293"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.287"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.287"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast float** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #5
  %27 = ptrtoint %"class.std::__1::vector.287"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.293"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.293"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #24
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #25
  %52 = bitcast i8* %51 to %"class.std::__1::vector.287"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.287"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.287"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.287"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #5
  %64 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.287"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.287"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.287"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.287"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.293", %"class.std::__1::vector.293"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.287"*, %"class.std::__1::vector.287"** %70, align 8
  %72 = load %"class.std::__1::vector.287"*, %"class.std::__1::vector.287"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.287"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.287"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.287"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.287"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.287"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #5
  %82 = bitcast %"class.std::__1::vector.287"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.287"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast float** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast float** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast float** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast float** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.287"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #5
  %96 = icmp eq %"class.std::__1::vector.287"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.287"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.287"*, %"class.std::__1::vector.287"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.287"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.287"*
  %106 = icmp eq %"class.std::__1::vector.287"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.287"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %109, i64 0, i32 0, i32 0
  %111 = load float*, float** %110, align 8
  %112 = icmp eq float* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint float* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast float** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast float* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #25
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.287"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #25
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.287"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float, float* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float, float* %13, i64 %18
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #5
  %26 = ptrtoint float* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.287"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.287"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #24
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #24
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #25
  %54 = bitcast i8* %53 to float*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float, float* %57, i64 %33
  %59 = getelementptr inbounds float, float* %57, i64 %56
  %60 = getelementptr inbounds float, float* %58, i64 %1
  %61 = bitcast float* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #5
  %63 = ptrtoint float* %59 to i64
  %64 = ptrtoint float* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.287", %"class.std::__1::vector.287"* %0, i64 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float, float* %58, i64 %71
  %73 = ptrtoint float* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float* %72 to i8*
  %77 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #5
  %78 = load float*, float** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #25
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.87"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Plane.1"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.jxl::Plane.1"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 5
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.jxl::Plane.1"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 32
  %25 = and i64 %24, -32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #5
  %26 = ptrtoint %"class.jxl::Plane.1"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %182

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.87"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 5
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 576460752303423487
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.87"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #24
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 5
  %41 = icmp ult i64 %40, 288230376151711743
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 4
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 576460752303423487
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #24
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 576460752303423487, %38 ]
  %52 = shl i64 %51, 5
  %53 = tail call i8* @_Znwm(i64 %52) #25
  %54 = bitcast i8* %53 to %"class.jxl::Plane.1"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"class.jxl::Plane.1"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %57, i64 %33
  %59 = ptrtoint %"class.jxl::Plane.1"* %58 to i64
  %60 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %57, i64 %56
  %61 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %58, i64 %1
  %62 = shl nsw i64 %1, 5
  %63 = add i64 %62, -32
  %64 = lshr exact i64 %63, 5
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %79, label %68

68:                                               ; preds = %55, %68
  %69 = phi %"class.jxl::Plane.1"* [ %73, %68 ], [ %58, %55 ]
  %70 = phi i64 [ %74, %68 ], [ %59, %55 ]
  %71 = phi i64 [ %75, %68 ], [ %66, %55 ]
  %72 = inttoptr i64 %70 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 32, i1 false) #5
  %73 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %69, i64 1
  %74 = ptrtoint %"class.jxl::Plane.1"* %73 to i64
  %75 = add i64 %71, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %68, !llvm.loop !457

77:                                               ; preds = %68
  %78 = ptrtoint %"class.jxl::Plane.1"* %73 to i64
  br label %79

79:                                               ; preds = %55, %77
  %80 = phi %"class.jxl::Plane.1"* [ %58, %55 ], [ %73, %77 ]
  %81 = phi i64 [ %59, %55 ], [ %78, %77 ]
  %82 = icmp ult i64 %63, 224
  br i1 %82, label %104, label %83

83:                                               ; preds = %79, %83
  %84 = phi %"class.jxl::Plane.1"* [ %101, %83 ], [ %80, %79 ]
  %85 = phi i64 [ %102, %83 ], [ %81, %79 ]
  %86 = inttoptr i64 %85 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 32, i1 false) #5
  %87 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %84, i64 1
  %88 = bitcast %"class.jxl::Plane.1"* %87 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 32, i1 false) #5
  %89 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %84, i64 2
  %90 = bitcast %"class.jxl::Plane.1"* %89 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 32, i1 false) #5
  %91 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %84, i64 3
  %92 = bitcast %"class.jxl::Plane.1"* %91 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 32, i1 false) #5
  %93 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %84, i64 4
  %94 = bitcast %"class.jxl::Plane.1"* %93 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 32, i1 false) #5
  %95 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %84, i64 5
  %96 = bitcast %"class.jxl::Plane.1"* %95 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 32, i1 false) #5
  %97 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %84, i64 6
  %98 = bitcast %"class.jxl::Plane.1"* %97 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 32, i1 false) #5
  %99 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %84, i64 7
  %100 = bitcast %"class.jxl::Plane.1"* %99 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 32, i1 false) #5
  %101 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %84, i64 8
  %102 = ptrtoint %"class.jxl::Plane.1"* %101 to i64
  %103 = icmp eq %"class.jxl::Plane.1"* %61, %101
  br i1 %103, label %104, label %83

104:                                              ; preds = %83, %79
  %105 = ptrtoint %"class.jxl::Plane.1"* %60 to i64
  %106 = ptrtoint %"class.jxl::Plane.1"* %61 to i64
  %107 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 0
  %108 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %107, align 8
  %109 = ptrtoint %"class.jxl::Plane.1"* %108 to i64
  %110 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %6, align 8
  %111 = icmp eq %"class.jxl::Plane.1"* %110, %108
  br i1 %111, label %163, label %112

112:                                              ; preds = %104
  %113 = getelementptr %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %110, i64 -1, i32 0, i32 0
  %114 = ptrtoint i32* %113 to i64
  %115 = sub i64 %114, %109
  %116 = and i64 %115, 32
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %129

118:                                              ; preds = %112
  %119 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %58, i64 -1
  %120 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %110, i64 -1
  %121 = bitcast %"class.jxl::Plane.1"* %119 to i8*
  %122 = bitcast %"class.jxl::Plane.1"* %120 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 24, i1 false) #5
  %123 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %58, i64 -1, i32 0, i32 5
  %124 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %110, i64 -1, i32 0, i32 5
  %125 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %124, i64 0, i32 0, i32 0, i32 0
  %126 = bitcast %"class.std::__1::unique_ptr"* %124 to i64*
  %127 = load i64, i64* %126, align 8
  store i8* null, i8** %125, align 8
  %128 = bitcast %"class.std::__1::unique_ptr"* %123 to i64*
  store i64 %127, i64* %128, align 8
  br label %129

129:                                              ; preds = %118, %112
  %130 = phi %"class.jxl::Plane.1"* [ undef, %112 ], [ %119, %118 ]
  %131 = phi %"class.jxl::Plane.1"* [ %58, %112 ], [ %119, %118 ]
  %132 = phi %"class.jxl::Plane.1"* [ %110, %112 ], [ %120, %118 ]
  %133 = icmp ult i64 %115, 32
  br i1 %133, label %158, label %134

134:                                              ; preds = %129, %134
  %135 = phi %"class.jxl::Plane.1"* [ %147, %134 ], [ %131, %129 ]
  %136 = phi %"class.jxl::Plane.1"* [ %148, %134 ], [ %132, %129 ]
  %137 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %135, i64 -1
  %138 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -1
  %139 = bitcast %"class.jxl::Plane.1"* %137 to i8*
  %140 = bitcast %"class.jxl::Plane.1"* %138 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 24, i1 false) #5
  %141 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %135, i64 -1, i32 0, i32 5
  %142 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -1, i32 0, i32 5
  %143 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %142, i64 0, i32 0, i32 0, i32 0
  %144 = bitcast %"class.std::__1::unique_ptr"* %142 to i64*
  %145 = load i64, i64* %144, align 8
  store i8* null, i8** %143, align 8
  %146 = bitcast %"class.std::__1::unique_ptr"* %141 to i64*
  store i64 %145, i64* %146, align 8
  %147 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %135, i64 -2
  %148 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -2
  %149 = bitcast %"class.jxl::Plane.1"* %147 to i8*
  %150 = bitcast %"class.jxl::Plane.1"* %148 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* align 8 %150, i64 24, i1 false) #5
  %151 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %135, i64 -2, i32 0, i32 5
  %152 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %136, i64 -2, i32 0, i32 5
  %153 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %152, i64 0, i32 0, i32 0, i32 0
  %154 = bitcast %"class.std::__1::unique_ptr"* %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i8* null, i8** %153, align 8
  %156 = bitcast %"class.std::__1::unique_ptr"* %151 to i64*
  store i64 %155, i64* %156, align 8
  %157 = icmp eq %"class.jxl::Plane.1"* %148, %108
  br i1 %157, label %158, label %134

158:                                              ; preds = %134, %129
  %159 = phi %"class.jxl::Plane.1"* [ %130, %129 ], [ %147, %134 ]
  %160 = ptrtoint %"class.jxl::Plane.1"* %159 to i64
  %161 = load i64, i64* %30, align 8
  %162 = load %"class.jxl::Plane.1"*, %"class.jxl::Plane.1"** %6, align 8
  br label %163

163:                                              ; preds = %104, %158
  %164 = phi %"class.jxl::Plane.1"* [ %162, %158 ], [ %108, %104 ]
  %165 = phi i64 [ %160, %158 ], [ %59, %104 ]
  %166 = phi i64 [ %161, %158 ], [ %109, %104 ]
  store i64 %165, i64* %30, align 8
  store i64 %106, i64* %7, align 8
  store i64 %105, i64* %4, align 8
  %167 = inttoptr i64 %166 to %"class.jxl::Plane.1"*
  %168 = icmp eq %"class.jxl::Plane.1"* %164, %167
  br i1 %168, label %178, label %169

169:                                              ; preds = %163, %176
  %170 = phi %"class.jxl::Plane.1"* [ %171, %176 ], [ %164, %163 ]
  %171 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %170, i64 -1
  %172 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %170, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %173 = load i8*, i8** %172, align 8
  store i8* null, i8** %172, align 8
  %174 = icmp eq i8* %173, null
  br i1 %174, label %176, label %175

175:                                              ; preds = %169
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %173) #5
  br label %176

176:                                              ; preds = %175, %169
  %177 = icmp eq %"class.jxl::Plane.1"* %171, %167
  br i1 %177, label %178, label %169

178:                                              ; preds = %176, %163
  %179 = icmp eq i64 %166, 0
  br i1 %179, label %182, label %180

180:                                              ; preds = %178
  %181 = inttoptr i64 %166 to i8*
  tail call void @_ZdlPv(i8* %181) #25
  br label %182

182:                                              ; preds = %180, %178, %27
  ret void
}

declare i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64, i8* (i8*, i64)*, i8*) local_unnamed_addr #2

declare void @_ZN3jxl12ComputeSigmaERKNS_4RectEPNS_18PassesDecoderStateE(%"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::PassesDecoderState"*) local_unnamed_addr #2

declare i32 @_ZN3jxl23DecodeGroupForRoundtripERKNSt3__16vectorINS0_10unique_ptrINS_7ACImageENS0_14default_deleteIS3_EEEENS0_9allocatorIS6_EEEEmPNS_18PassesDecoderStateEPNS_13GroupDecCacheEmPNS_11ImageBundleEPNS_6AuxOutE(%"class.std::__1::vector.178"* dereferenceable(24), i64, %"struct.jxl::PassesDecoderState"*, %"struct.jxl::GroupDecCache"*, i64, %"class.jxl::ImageBundle"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl9BitWriterENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE8__appendEm(%"class.std::__1::vector.191"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.191", %"class.std::__1::vector.191"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::unique_ptr.193"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.191", %"class.std::__1::vector.191"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::unique_ptr.193"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::unique_ptr.193"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %13, i64 %18, i32 0, i32 0, i32 0
  %20 = bitcast %"struct.jxl::BitWriter"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #5
  %26 = ptrtoint %"class.std::__1::unique_ptr.193"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %219

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.191"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.191"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #24
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #24
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #25
  %54 = bitcast i8* %53 to %"class.std::__1::unique_ptr.193"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"class.std::__1::unique_ptr.193"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %57, i64 %33
  %59 = ptrtoint %"class.std::__1::unique_ptr.193"* %58 to i64
  %60 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %57, i64 %56
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %58, i64 %1
  %62 = shl nsw i64 %1, 3
  %63 = add i64 %62, -8
  %64 = lshr exact i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %79, label %68

68:                                               ; preds = %55, %68
  %69 = phi %"class.std::__1::unique_ptr.193"* [ %73, %68 ], [ %58, %55 ]
  %70 = phi i64 [ %74, %68 ], [ %59, %55 ]
  %71 = phi i64 [ %75, %68 ], [ %66, %55 ]
  %72 = inttoptr i64 %70 to i64*
  store i64 0, i64* %72, align 8
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %69, i64 1
  %74 = ptrtoint %"class.std::__1::unique_ptr.193"* %73 to i64
  %75 = add i64 %71, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %68, !llvm.loop !458

77:                                               ; preds = %68
  %78 = ptrtoint %"class.std::__1::unique_ptr.193"* %73 to i64
  br label %79

79:                                               ; preds = %55, %77
  %80 = phi %"class.std::__1::unique_ptr.193"* [ %58, %55 ], [ %73, %77 ]
  %81 = phi i64 [ %59, %55 ], [ %78, %77 ]
  %82 = icmp ult i64 %63, 56
  br i1 %82, label %104, label %83

83:                                               ; preds = %79, %83
  %84 = phi %"class.std::__1::unique_ptr.193"* [ %101, %83 ], [ %80, %79 ]
  %85 = phi i64 [ %102, %83 ], [ %81, %79 ]
  %86 = inttoptr i64 %85 to i64*
  store i64 0, i64* %86, align 8
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %84, i64 1
  %88 = bitcast %"class.std::__1::unique_ptr.193"* %87 to i64*
  store i64 0, i64* %88, align 8
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %84, i64 2
  %90 = bitcast %"class.std::__1::unique_ptr.193"* %89 to i64*
  store i64 0, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %84, i64 3
  %92 = bitcast %"class.std::__1::unique_ptr.193"* %91 to i64*
  store i64 0, i64* %92, align 8
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %84, i64 4
  %94 = bitcast %"class.std::__1::unique_ptr.193"* %93 to i64*
  store i64 0, i64* %94, align 8
  %95 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %84, i64 5
  %96 = bitcast %"class.std::__1::unique_ptr.193"* %95 to i64*
  store i64 0, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %84, i64 6
  %98 = bitcast %"class.std::__1::unique_ptr.193"* %97 to i64*
  store i64 0, i64* %98, align 8
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %84, i64 7
  %100 = bitcast %"class.std::__1::unique_ptr.193"* %99 to i64*
  store i64 0, i64* %100, align 8
  %101 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %84, i64 8
  %102 = ptrtoint %"class.std::__1::unique_ptr.193"* %101 to i64
  %103 = icmp eq %"class.std::__1::unique_ptr.193"* %61, %101
  br i1 %103, label %104, label %83

104:                                              ; preds = %83, %79
  %105 = ptrtoint %"class.std::__1::unique_ptr.193"* %60 to i64
  %106 = ptrtoint %"class.std::__1::unique_ptr.193"* %61 to i64
  %107 = getelementptr inbounds %"class.std::__1::vector.191", %"class.std::__1::vector.191"* %0, i64 0, i32 0, i32 0
  %108 = load %"class.std::__1::unique_ptr.193"*, %"class.std::__1::unique_ptr.193"** %107, align 8
  %109 = ptrtoint %"class.std::__1::unique_ptr.193"* %108 to i64
  %110 = load %"class.std::__1::unique_ptr.193"*, %"class.std::__1::unique_ptr.193"** %6, align 8
  %111 = icmp eq %"class.std::__1::unique_ptr.193"* %110, %108
  br i1 %111, label %194, label %112

112:                                              ; preds = %104
  %113 = getelementptr %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %110, i64 -1, i32 0, i32 0, i32 0
  %114 = ptrtoint %"struct.jxl::BitWriter"** %113 to i64
  %115 = sub i64 %114, %109
  %116 = lshr i64 %115, 3
  %117 = add nuw nsw i64 %116, 1
  %118 = and i64 %117, 7
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %132, label %120

120:                                              ; preds = %112, %120
  %121 = phi %"class.std::__1::unique_ptr.193"* [ %124, %120 ], [ %58, %112 ]
  %122 = phi %"class.std::__1::unique_ptr.193"* [ %125, %120 ], [ %110, %112 ]
  %123 = phi i64 [ %130, %120 ], [ %118, %112 ]
  %124 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %121, i64 -1
  %125 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %122, i64 -1
  %126 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %125, i64 0, i32 0, i32 0, i32 0
  %127 = bitcast %"class.std::__1::unique_ptr.193"* %125 to i64*
  %128 = load i64, i64* %127, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %126, align 8
  %129 = bitcast %"class.std::__1::unique_ptr.193"* %124 to i64*
  store i64 %128, i64* %129, align 8
  %130 = add i64 %123, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %120, !llvm.loop !459

132:                                              ; preds = %120, %112
  %133 = phi %"class.std::__1::unique_ptr.193"* [ undef, %112 ], [ %124, %120 ]
  %134 = phi %"class.std::__1::unique_ptr.193"* [ %58, %112 ], [ %124, %120 ]
  %135 = phi %"class.std::__1::unique_ptr.193"* [ %110, %112 ], [ %125, %120 ]
  %136 = icmp ult i64 %115, 56
  br i1 %136, label %189, label %137

137:                                              ; preds = %132, %137
  %138 = phi %"class.std::__1::unique_ptr.193"* [ %182, %137 ], [ %134, %132 ]
  %139 = phi %"class.std::__1::unique_ptr.193"* [ %183, %137 ], [ %135, %132 ]
  %140 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %138, i64 -1
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %139, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = bitcast %"class.std::__1::unique_ptr.193"* %141 to i64*
  %144 = load i64, i64* %143, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %142, align 8
  %145 = bitcast %"class.std::__1::unique_ptr.193"* %140 to i64*
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %138, i64 -2
  %147 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %139, i64 -2
  %148 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %147, i64 0, i32 0, i32 0, i32 0
  %149 = bitcast %"class.std::__1::unique_ptr.193"* %147 to i64*
  %150 = load i64, i64* %149, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %148, align 8
  %151 = bitcast %"class.std::__1::unique_ptr.193"* %146 to i64*
  store i64 %150, i64* %151, align 8
  %152 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %138, i64 -3
  %153 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %139, i64 -3
  %154 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %153, i64 0, i32 0, i32 0, i32 0
  %155 = bitcast %"class.std::__1::unique_ptr.193"* %153 to i64*
  %156 = load i64, i64* %155, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %154, align 8
  %157 = bitcast %"class.std::__1::unique_ptr.193"* %152 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %138, i64 -4
  %159 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %139, i64 -4
  %160 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %159, i64 0, i32 0, i32 0, i32 0
  %161 = bitcast %"class.std::__1::unique_ptr.193"* %159 to i64*
  %162 = load i64, i64* %161, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %160, align 8
  %163 = bitcast %"class.std::__1::unique_ptr.193"* %158 to i64*
  store i64 %162, i64* %163, align 8
  %164 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %138, i64 -5
  %165 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %139, i64 -5
  %166 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %165, i64 0, i32 0, i32 0, i32 0
  %167 = bitcast %"class.std::__1::unique_ptr.193"* %165 to i64*
  %168 = load i64, i64* %167, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %166, align 8
  %169 = bitcast %"class.std::__1::unique_ptr.193"* %164 to i64*
  store i64 %168, i64* %169, align 8
  %170 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %138, i64 -6
  %171 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %139, i64 -6
  %172 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %171, i64 0, i32 0, i32 0, i32 0
  %173 = bitcast %"class.std::__1::unique_ptr.193"* %171 to i64*
  %174 = load i64, i64* %173, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %172, align 8
  %175 = bitcast %"class.std::__1::unique_ptr.193"* %170 to i64*
  store i64 %174, i64* %175, align 8
  %176 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %138, i64 -7
  %177 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %139, i64 -7
  %178 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %177, i64 0, i32 0, i32 0, i32 0
  %179 = bitcast %"class.std::__1::unique_ptr.193"* %177 to i64*
  %180 = load i64, i64* %179, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %178, align 8
  %181 = bitcast %"class.std::__1::unique_ptr.193"* %176 to i64*
  store i64 %180, i64* %181, align 8
  %182 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %138, i64 -8
  %183 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %139, i64 -8
  %184 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %183, i64 0, i32 0, i32 0, i32 0
  %185 = bitcast %"class.std::__1::unique_ptr.193"* %183 to i64*
  %186 = load i64, i64* %185, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %184, align 8
  %187 = bitcast %"class.std::__1::unique_ptr.193"* %182 to i64*
  store i64 %186, i64* %187, align 8
  %188 = icmp eq %"class.std::__1::unique_ptr.193"* %183, %108
  br i1 %188, label %189, label %137

189:                                              ; preds = %137, %132
  %190 = phi %"class.std::__1::unique_ptr.193"* [ %133, %132 ], [ %182, %137 ]
  %191 = ptrtoint %"class.std::__1::unique_ptr.193"* %190 to i64
  %192 = load i64, i64* %30, align 8
  %193 = load %"class.std::__1::unique_ptr.193"*, %"class.std::__1::unique_ptr.193"** %6, align 8
  br label %194

194:                                              ; preds = %104, %189
  %195 = phi %"class.std::__1::unique_ptr.193"* [ %193, %189 ], [ %108, %104 ]
  %196 = phi i64 [ %191, %189 ], [ %59, %104 ]
  %197 = phi i64 [ %192, %189 ], [ %109, %104 ]
  store i64 %196, i64* %30, align 8
  store i64 %106, i64* %7, align 8
  store i64 %105, i64* %4, align 8
  %198 = inttoptr i64 %197 to %"class.std::__1::unique_ptr.193"*
  %199 = icmp eq %"class.std::__1::unique_ptr.193"* %195, %198
  br i1 %199, label %215, label %200

200:                                              ; preds = %194, %213
  %201 = phi %"class.std::__1::unique_ptr.193"* [ %202, %213 ], [ %195, %194 ]
  %202 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %201, i64 -1
  %203 = getelementptr inbounds %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193"* %202, i64 0, i32 0, i32 0, i32 0
  %204 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %203, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %203, align 8
  %205 = icmp eq %"struct.jxl::BitWriter"* %204, null
  br i1 %205, label %213, label %206

206:                                              ; preds = %200
  %207 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %204, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %208 = load i8*, i8** %207, align 8
  store i8* null, i8** %207, align 8
  %209 = icmp eq i8* %208, null
  br i1 %209, label %211, label %210

210:                                              ; preds = %206
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %208) #5
  br label %211

211:                                              ; preds = %210, %206
  %212 = bitcast %"struct.jxl::BitWriter"* %204 to i8*
  tail call void @_ZdlPv(i8* %212) #25
  br label %213

213:                                              ; preds = %211, %200
  %214 = icmp eq %"class.std::__1::unique_ptr.193"* %202, %198
  br i1 %214, label %215, label %200

215:                                              ; preds = %213, %194
  %216 = icmp eq i64 %197, 0
  br i1 %216, label %219, label %217

217:                                              ; preds = %215
  %218 = inttoptr i64 %197 to i8*
  tail call void @_ZdlPv(i8* %218) #25
  br label %219

219:                                              ; preds = %217, %215, %27
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #13

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #13

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone }
attributes #13 = { nounwind readnone speculatable }
attributes #14 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #19 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #20 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #21 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #22 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #23 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #24 = { noreturn nounwind }
attributes #25 = { builtin nounwind }
attributes #26 = { noreturn }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = !{i32 0, i32 33}
!9 = !{i8 0, i8 2}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN3jxl8ToStringIiEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEET_: argument 0"}
!12 = distinct !{!12, !"_ZN3jxl8ToStringIiEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEET_"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_OS9_: argument 0"}
!15 = distinct !{!15, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_OS9_"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN3jxl8ToStringIiEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEET_: argument 0"}
!18 = distinct !{!18, !"_ZN3jxl8ToStringIiEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEET_"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_OS9_: argument 0"}
!21 = distinct !{!21, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_OS9_"}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !7, !3}
!24 = !{!25, !27}
!25 = distinct !{!25, !26, !"_ZN3jxl11ImageMinMaxIfEEvRKNS_5PlaneIT_EEPS2_S6_: argument 0"}
!26 = distinct !{!26, !"_ZN3jxl11ImageMinMaxIfEEvRKNS_5PlaneIT_EEPS2_S6_"}
!27 = distinct !{!27, !26, !"_ZN3jxl11ImageMinMaxIfEEvRKNS_5PlaneIT_EEPS2_S6_: argument 1"}
!28 = distinct !{!28, !5}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN3jxl10ScaleImageIfEENS_5PlaneIT_EES2_RKS3_: argument 0"}
!31 = distinct !{!31, !"_ZN3jxl10ScaleImageIfEENS_5PlaneIT_EES2_RKS3_"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN3jxl12_GLOBAL__N_111TileDistMapERKNS_5PlaneIfEEiiRKNS_15AcStrategyImageE: argument 0"}
!34 = distinct !{!34, !"_ZN3jxl12_GLOBAL__N_111TileDistMapERKNS_5PlaneIfEEiiRKNS_15AcStrategyImageE"}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !5}
!37 = distinct !{!37, !7, !3}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN3jxl8ToStringIiEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEET_: argument 0"}
!40 = distinct !{!40, !"_ZN3jxl8ToStringIiEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEET_"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_OS9_: argument 0"}
!43 = distinct !{!43, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_OS9_"}
!44 = !{!45}
!45 = distinct !{!45, !46, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!46 = distinct !{!46, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!47 = !{!48}
!48 = distinct !{!48, !46, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!51 = distinct !{!51, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!52 = !{!53}
!53 = distinct !{!53, !51, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!56 = distinct !{!56, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!57 = !{!58}
!58 = distinct !{!58, !56, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!61 = distinct !{!61, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!62 = !{!63}
!63 = distinct !{!63, !61, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!66 = distinct !{!66, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!67 = !{!68}
!68 = distinct !{!68, !66, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!71 = distinct !{!71, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!72 = !{!73}
!73 = distinct !{!73, !71, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!76 = distinct !{!76, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!77 = !{!78}
!78 = distinct !{!78, !76, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!81 = distinct !{!81, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!82 = !{!83}
!83 = distinct !{!83, !81, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!86 = distinct !{!86, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!87 = !{!88}
!88 = distinct !{!88, !86, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!91 = distinct !{!91, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!92 = !{!93}
!93 = distinct !{!93, !91, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!94 = !{!95}
!95 = distinct !{!95, !96, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!96 = distinct !{!96, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!97 = !{!98}
!98 = distinct !{!98, !96, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!99 = !{!100}
!100 = distinct !{!100, !101, !"_ZN3hwy6N_AVX3L6StoreUENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!101 = distinct !{!101, !"_ZN3hwy6N_AVX3L6StoreUENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!102 = !{!103}
!103 = distinct !{!103, !104}
!104 = distinct !{!104, !"LVerDomain"}
!105 = !{!106}
!106 = distinct !{!106, !104}
!107 = distinct !{!107, !3}
!108 = distinct !{!108, !3}
!109 = !{!110}
!110 = distinct !{!110, !111, !"_ZN3jxl6N_AVX312_GLOBAL__N_112HfModulationIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEET0_T_mmRKNS_5PlaneIfEES9_: argument 0"}
!111 = distinct !{!111, !"_ZN3jxl6N_AVX312_GLOBAL__N_112HfModulationIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEET0_T_mmRKNS_5PlaneIfEES9_"}
!112 = !{!113}
!113 = distinct !{!113, !114, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!114 = distinct !{!114, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!115 = !{!116, !110}
!116 = distinct !{!116, !114, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!117 = !{!118}
!118 = distinct !{!118, !119, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!119 = distinct !{!119, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!120 = !{!121, !110}
!121 = distinct !{!121, !119, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!122 = !{!123}
!123 = distinct !{!123, !124, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!124 = distinct !{!124, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!125 = !{!126, !110}
!126 = distinct !{!126, !124, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!127 = !{!128}
!128 = distinct !{!128, !129, !"_ZN3jxl6N_AVX312_GLOBAL__N_115GammaModulationIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEET0_T_mmRKNS_5PlaneIfEESE_S9_: argument 0"}
!129 = distinct !{!129, !"_ZN3jxl6N_AVX312_GLOBAL__N_115GammaModulationIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEET0_T_mmRKNS_5PlaneIfEESE_S9_"}
!130 = !{!131}
!131 = distinct !{!131, !132, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!132 = distinct !{!132, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!133 = !{!134, !128}
!134 = distinct !{!134, !132, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!135 = !{!136}
!136 = distinct !{!136, !137, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!137 = distinct !{!137, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!138 = !{!139, !128}
!139 = distinct !{!139, !137, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!140 = !{!141}
!141 = distinct !{!141, !142}
!142 = distinct !{!142, !"LVerDomain"}
!143 = !{!144}
!144 = distinct !{!144, !142}
!145 = distinct !{!145, !3}
!146 = distinct !{!146, !3}
!147 = !{!148}
!148 = distinct !{!148, !149, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!149 = distinct !{!149, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!150 = !{!151}
!151 = distinct !{!151, !149, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!152 = !{!153}
!153 = distinct !{!153, !154, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!154 = distinct !{!154, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!155 = !{!156}
!156 = distinct !{!156, !154, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!157 = !{!158}
!158 = distinct !{!158, !159, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!159 = distinct !{!159, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!160 = !{!161}
!161 = distinct !{!161, !159, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!162 = !{!163}
!163 = distinct !{!163, !164, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!164 = distinct !{!164, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!165 = !{!166}
!166 = distinct !{!166, !164, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!167 = !{!168}
!168 = distinct !{!168, !169, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!169 = distinct !{!169, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!170 = !{!171}
!171 = distinct !{!171, !169, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!172 = !{!173}
!173 = distinct !{!173, !174, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!174 = distinct !{!174, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!175 = !{!176}
!176 = distinct !{!176, !174, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!177 = !{!178}
!178 = distinct !{!178, !179, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!179 = distinct !{!179, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!180 = !{!181}
!181 = distinct !{!181, !179, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!182 = !{!183}
!183 = distinct !{!183, !184, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!184 = distinct !{!184, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!185 = !{!186}
!186 = distinct !{!186, !184, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!187 = !{!188}
!188 = distinct !{!188, !189, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!189 = distinct !{!189, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!190 = !{!191}
!191 = distinct !{!191, !189, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!192 = !{!193}
!193 = distinct !{!193, !194, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!194 = distinct !{!194, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!195 = !{!196}
!196 = distinct !{!196, !194, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!197 = !{!198}
!198 = distinct !{!198, !199, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!199 = distinct !{!199, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!200 = !{!201}
!201 = distinct !{!201, !199, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!202 = !{!203}
!203 = distinct !{!203, !204, !"_ZN3hwy6N_AVX2L6StoreUENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!204 = distinct !{!204, !"_ZN3hwy6N_AVX2L6StoreUENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!205 = !{!206}
!206 = distinct !{!206, !207}
!207 = distinct !{!207, !"LVerDomain"}
!208 = !{!209}
!209 = distinct !{!209, !207}
!210 = distinct !{!210, !3}
!211 = distinct !{!211, !3}
!212 = !{!213}
!213 = distinct !{!213, !214, !"_ZN3jxl6N_AVX212_GLOBAL__N_112HfModulationIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEET0_T_mmRKNS_5PlaneIfEES9_: argument 0"}
!214 = distinct !{!214, !"_ZN3jxl6N_AVX212_GLOBAL__N_112HfModulationIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEET0_T_mmRKNS_5PlaneIfEES9_"}
!215 = !{!216}
!216 = distinct !{!216, !217, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!217 = distinct !{!217, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!218 = !{!219, !213}
!219 = distinct !{!219, !217, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!220 = !{!221}
!221 = distinct !{!221, !222, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!222 = distinct !{!222, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!223 = !{!224, !213}
!224 = distinct !{!224, !222, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!225 = !{!226}
!226 = distinct !{!226, !227, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!227 = distinct !{!227, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!228 = !{!229, !213}
!229 = distinct !{!229, !227, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!230 = !{!231}
!231 = distinct !{!231, !232, !"_ZN3jxl6N_AVX212_GLOBAL__N_115GammaModulationIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEET0_T_mmRKNS_5PlaneIfEESE_S9_: argument 0"}
!232 = distinct !{!232, !"_ZN3jxl6N_AVX212_GLOBAL__N_115GammaModulationIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEET0_T_mmRKNS_5PlaneIfEESE_S9_"}
!233 = !{!234}
!234 = distinct !{!234, !235, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!235 = distinct !{!235, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!236 = !{!237, !231}
!237 = distinct !{!237, !235, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!238 = !{!239}
!239 = distinct !{!239, !240, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!240 = distinct !{!240, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!241 = !{!242, !231}
!242 = distinct !{!242, !240, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!243 = !{!244}
!244 = distinct !{!244, !245}
!245 = distinct !{!245, !"LVerDomain"}
!246 = !{!247}
!247 = distinct !{!247, !245}
!248 = distinct !{!248, !3}
!249 = distinct !{!249, !3}
!250 = !{!251}
!251 = distinct !{!251, !252, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!252 = distinct !{!252, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!253 = !{!254}
!254 = distinct !{!254, !255, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!255 = distinct !{!255, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!256 = !{!257}
!257 = distinct !{!257, !258, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!258 = distinct !{!258, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!259 = !{!260}
!260 = distinct !{!260, !261, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!261 = distinct !{!261, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!262 = !{!263}
!263 = distinct !{!263, !264, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!264 = distinct !{!264, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!265 = !{!266}
!266 = distinct !{!266, !267, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!267 = distinct !{!267, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!268 = !{!269}
!269 = distinct !{!269, !270, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!270 = distinct !{!270, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!271 = !{!272}
!272 = distinct !{!272, !273, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!273 = distinct !{!273, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!274 = !{!275}
!275 = distinct !{!275, !276, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!276 = distinct !{!276, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!277 = !{!278}
!278 = distinct !{!278, !279, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!279 = distinct !{!279, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!280 = !{!281}
!281 = distinct !{!281, !282, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!282 = distinct !{!282, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!283 = !{!284}
!284 = distinct !{!284, !285, !"_ZN3hwy6N_SSE4L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!285 = distinct !{!285, !"_ZN3hwy6N_SSE4L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!286 = !{!287}
!287 = distinct !{!287, !288}
!288 = distinct !{!288, !"LVerDomain"}
!289 = !{!290}
!290 = distinct !{!290, !288}
!291 = distinct !{!291, !3}
!292 = distinct !{!292, !3}
!293 = !{!294}
!294 = distinct !{!294, !295, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!295 = distinct !{!295, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!296 = !{!297}
!297 = distinct !{!297, !298, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!298 = distinct !{!298, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!299 = !{!300}
!300 = distinct !{!300, !301, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!301 = distinct !{!301, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!302 = !{!303}
!303 = distinct !{!303, !304, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!304 = distinct !{!304, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!305 = !{!306}
!306 = distinct !{!306, !307, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!307 = distinct !{!307, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!308 = !{!309}
!309 = distinct !{!309, !310}
!310 = distinct !{!310, !"LVerDomain"}
!311 = !{!312}
!312 = distinct !{!312, !310}
!313 = distinct !{!313, !3}
!314 = distinct !{!314, !3}
!315 = !{!316, !318}
!316 = distinct !{!316, !317, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!317 = distinct !{!317, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!318 = distinct !{!318, !319, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!319 = distinct !{!319, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!320 = !{!321, !323}
!321 = distinct !{!321, !322, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!322 = distinct !{!322, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!323 = distinct !{!323, !324, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!324 = distinct !{!324, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!325 = !{!326, !328}
!326 = distinct !{!326, !327, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!327 = distinct !{!327, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!328 = distinct !{!328, !329, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!329 = distinct !{!329, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!330 = !{!331, !333}
!331 = distinct !{!331, !332, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!332 = distinct !{!332, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!333 = distinct !{!333, !334, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!334 = distinct !{!334, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!335 = !{!336, !338}
!336 = distinct !{!336, !337, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!337 = distinct !{!337, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!338 = distinct !{!338, !339, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!339 = distinct !{!339, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!340 = !{!341, !343}
!341 = distinct !{!341, !342, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!342 = distinct !{!342, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!343 = distinct !{!343, !344, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!344 = distinct !{!344, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!345 = !{!346, !348}
!346 = distinct !{!346, !347, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!347 = distinct !{!347, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!348 = distinct !{!348, !349, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!349 = distinct !{!349, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!350 = !{!351, !353}
!351 = distinct !{!351, !352, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!352 = distinct !{!352, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!353 = distinct !{!353, !354, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!354 = distinct !{!354, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!355 = !{!356, !358}
!356 = distinct !{!356, !357, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!357 = distinct !{!357, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!358 = distinct !{!358, !359, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!359 = distinct !{!359, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!360 = !{!361, !363}
!361 = distinct !{!361, !362, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!362 = distinct !{!362, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!363 = distinct !{!363, !364, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!364 = distinct !{!364, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!365 = !{!366, !368}
!366 = distinct !{!366, !367, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!367 = distinct !{!367, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!368 = distinct !{!368, !369, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!369 = distinct !{!369, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!370 = !{!371, !373}
!371 = distinct !{!371, !372, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!372 = distinct !{!372, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!373 = distinct !{!373, !374, !"_ZN3hwy8N_SCALAR6StoreUIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!374 = distinct !{!374, !"_ZN3hwy8N_SCALAR6StoreUIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!375 = !{!376}
!376 = distinct !{!376, !377}
!377 = distinct !{!377, !"LVerDomain"}
!378 = !{!379}
!379 = distinct !{!379, !377}
!380 = distinct !{!380, !3}
!381 = distinct !{!381, !3}
!382 = !{!383}
!383 = distinct !{!383, !384, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!384 = distinct !{!384, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!385 = !{!383, !386, !388}
!386 = distinct !{!386, !387, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!387 = distinct !{!387, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!388 = distinct !{!388, !389, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!389 = distinct !{!389, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!390 = !{!391}
!391 = distinct !{!391, !392, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!392 = distinct !{!392, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!393 = !{!386, !388}
!394 = !{!395}
!395 = distinct !{!395, !396, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!396 = distinct !{!396, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!397 = !{!398}
!398 = distinct !{!398, !399, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!399 = distinct !{!399, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!400 = !{!401}
!401 = distinct !{!401, !402}
!402 = distinct !{!402, !"LVerDomain"}
!403 = !{!404}
!404 = distinct !{!404, !402}
!405 = distinct !{!405, !3}
!406 = distinct !{!406, !3}
!407 = !{!408}
!408 = distinct !{!408, !409, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!409 = distinct !{!409, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!410 = !{!411}
!411 = distinct !{!411, !412, !"_ZN3jxl14ConvertToFloatIfEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!412 = distinct !{!412, !"_ZN3jxl14ConvertToFloatIfEENS_5PlaneIfEERKNS1_IT_EE"}
!413 = !{!414}
!414 = distinct !{!414, !415, !"_ZN3jxl14ConvertToFloatIfEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!415 = distinct !{!415, !"_ZN3jxl14ConvertToFloatIfEENS_5PlaneIfEERKNS1_IT_EE"}
!416 = !{!417}
!417 = distinct !{!417, !418, !"_ZN3jxl14ConvertToFloatIfEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!418 = distinct !{!418, !"_ZN3jxl14ConvertToFloatIfEENS_5PlaneIfEERKNS1_IT_EE"}
!419 = distinct !{!419, !5}
!420 = !{!421}
!421 = distinct !{!421, !422, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!422 = distinct !{!422, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!423 = !{!424}
!424 = distinct !{!424, !425, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!425 = distinct !{!425, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!426 = !{!427}
!427 = distinct !{!427, !428, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!428 = distinct !{!428, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!429 = !{!430}
!430 = distinct !{!430, !431, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!431 = distinct !{!431, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!432 = !{!433, !435}
!433 = distinct !{!433, !434, !"_ZN3hwy31MakeUniqueAlignedArrayWithAllocIN3jxl13GroupDecCacheEJEEENSt3__110unique_ptrIA_T_NS_14AlignedDeleterEEEmPFPvS9_mEPFvS9_S9_ES9_DpOT0_: argument 0"}
!434 = distinct !{!434, !"_ZN3hwy31MakeUniqueAlignedArrayWithAllocIN3jxl13GroupDecCacheEJEEENSt3__110unique_ptrIA_T_NS_14AlignedDeleterEEEmPFPvS9_mEPFvS9_S9_ES9_DpOT0_"}
!435 = distinct !{!435, !436, !"_ZN3hwy22MakeUniqueAlignedArrayIN3jxl13GroupDecCacheEJEEENSt3__110unique_ptrIA_T_NS_14AlignedDeleterEEEmDpOT0_: argument 0"}
!436 = distinct !{!436, !"_ZN3hwy22MakeUniqueAlignedArrayIN3jxl13GroupDecCacheEJEEENSt3__110unique_ptrIA_T_NS_14AlignedDeleterEEEmDpOT0_"}
!437 = !{!435}
!438 = !{!439}
!439 = distinct !{!439, !440, !"_ZNK3jxl17PassesSharedState14BlockGroupRectEm: argument 0"}
!440 = distinct !{!440, !"_ZNK3jxl17PassesSharedState14BlockGroupRectEm"}
!441 = distinct !{!441, !5}
!442 = !{!443}
!443 = distinct !{!443, !444}
!444 = distinct !{!444, !"LVerDomain"}
!445 = !{!446}
!446 = distinct !{!446, !444}
!447 = distinct !{!447, !3}
!448 = distinct !{!448, !3}
!449 = !{!450}
!450 = distinct !{!450, !451}
!451 = distinct !{!451, !"LVerDomain"}
!452 = !{!453}
!453 = distinct !{!453, !451}
!454 = distinct !{!454, !3}
!455 = distinct !{!455, !5}
!456 = distinct !{!456, !3}
!457 = distinct !{!457, !5}
!458 = distinct !{!458, !5}
!459 = distinct !{!459, !5}
