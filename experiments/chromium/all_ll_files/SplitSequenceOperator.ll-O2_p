; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/SplitSequenceOperator.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/SplitSequenceOperator.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TSymbolTable" = type opaque
%"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser" = type { %"class.sh::TLValueTrackingTraverser.base", i8, i32, %"class.sh::IntermNodePatternMatcher", [4 x i8] }
%"class.sh::TLValueTrackingTraverser.base" = type <{ %"class.sh::TIntermTraverser", i8, i8 }>
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.sh::TVector", %"class.std::__1::vector.20" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.8" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.sh::TVector" = type { %"class.std::__1::vector.0" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.22" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::IntermNodePatternMatcher" = type { i32 }
%"class.sh::TLValueTrackingTraverser" = type <{ %"class.sh::TIntermTraverser", i8, i8, [6 x i8] }>
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TVariable" = type opaque
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.27"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.27" = type opaque
%"class.sh::TInterfaceBlock" = type opaque
%"class.sh::TStructure" = type opaque
%"class.sh::TConstantUnion" = type { %union.anon, i32 }
%union.anon = type { i32 }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.28", i8, [7 x i8] }>
%"class.sh::TVector.28" = type { %"class.std::__1::vector.29" }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { i32*, i32*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.38", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.40" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::ImmutableString" = type { i8*, i64 }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

@_ZTVN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"*)* @_ZN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh24TLValueTrackingTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh24TLValueTrackingTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh24TLValueTrackingTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh21SplitSequenceOperatorEPNS_9TCompilerEPNS_11TIntermNodeEiPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermNode"*, i32, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %5 = alloca %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", align 8
  %6 = bitcast %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %6) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 168, i1 false)
  %7 = bitcast %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %5 to %"class.sh::TLValueTrackingTraverser"*
  call void @_ZN2sh24TLValueTrackingTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TLValueTrackingTraverser"* nonnull %7, i1 zeroext true, i1 zeroext false, i1 zeroext true, %"class.sh::TSymbolTable"* %3) #5
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %5, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %5, i64 0, i32 1
  store i8 0, i8* %9, align 2
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %5, i64 0, i32 2
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %5, i64 0, i32 3
  call void @_ZN2sh24IntermNodePatternMatcherC1Ej(%"class.sh::IntermNodePatternMatcher"* %11, i32 %2) #5
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %5, i64 0, i32 0, i32 0
  %13 = bitcast %"class.sh::TIntermNode"* %1 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  br label %14

14:                                               ; preds = %22, %4
  store i8 0, i8* %9, align 2
  store i32 0, i32* %10, align 4
  %15 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %13, align 8
  %16 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %15, i64 2
  %17 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %16, align 8
  call void %17(%"class.sh::TIntermNode"* %1, %"class.sh::TIntermTraverser"* nonnull %12) #5
  %18 = load i8, i8* %9, align 2, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %12, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %1) #5
  br i1 %21, label %22, label %25

22:                                               ; preds = %20
  %23 = load i8, i8* %9, align 2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %14

25:                                               ; preds = %22, %14, %20
  %26 = phi i1 [ false, %20 ], [ true, %22 ], [ true, %14 ]
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %6) #5
  ret i1 %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh24TLValueTrackingTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TLValueTrackingTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

declare void @_ZN2sh24IntermNodePatternMatcherC1Ej(%"class.sh::IntermNodePatternMatcher"*, i32) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverserD0Ev(%"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVector", align 8
  %5 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 0, i32 1
  %6 = load i8, i8* %5, align 8
  %7 = icmp eq i8 %6, 30
  br i1 %7, label %8, label %237

8:                                                ; preds = %3
  switch i32 %1, label %277 [
    i32 0, label %9
    i32 2, label %17
  ]

9:                                                ; preds = %8
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 1
  %11 = load i8, i8* %10, align 2, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %277

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %14, align 4
  br label %277

17:                                               ; preds = %8
  %18 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 1
  %19 = load i8, i8* %18, align 2, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %233, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %233

25:                                               ; preds = %21
  %26 = bitcast %"class.sh::TVector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #5
  %27 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 24, i1 false) #5
  %30 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 2
  %31 = bitcast %"class.sh::TIntermTyped"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.sh::TIntermNode"*** %28 to i64*
  %34 = bitcast %"class.sh::TVector"* %4 to i64*
  %35 = bitcast %"class.sh::TIntermNode"*** %29 to i64*
  %36 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %37 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %36, i64 8) #5
  %38 = bitcast i8* %37 to %"class.sh::TIntermNode"**
  %39 = getelementptr inbounds i8, i8* %37, i64 8
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast i8* %37 to i64*
  store i64 %32, i64* %41, align 8
  %42 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %27, align 8
  %43 = ptrtoint %"class.sh::TIntermNode"** %42 to i64
  %44 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %28, align 8
  %45 = bitcast %"class.sh::TIntermNode"** %44 to i8*
  %46 = icmp eq %"class.sh::TIntermNode"** %44, %42
  br i1 %46, label %220, label %47

47:                                               ; preds = %25
  %48 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %44, i64 -1
  %49 = ptrtoint %"class.sh::TIntermNode"** %48 to i64
  %50 = sub i64 %49, %43
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = icmp ult i64 %52, 4
  br i1 %53, label %150, label %54

54:                                               ; preds = %47
  %55 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %44, i64 -1
  %56 = ptrtoint %"class.sh::TIntermNode"** %55 to i64
  %57 = sub i64 %56, %43
  %58 = lshr i64 %57, 3
  %59 = and i64 %57, -8
  %60 = xor i64 %59, -8
  %61 = getelementptr i8, i8* %37, i64 %60
  %62 = xor i64 %58, -1
  %63 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %44, i64 %62
  %64 = bitcast %"class.sh::TIntermNode"** %63 to i8*
  %65 = icmp ult i8* %61, %45
  %66 = icmp ugt i8* %37, %64
  %67 = and i1 %65, %66
  br i1 %67, label %150, label %68

68:                                               ; preds = %54
  %69 = and i64 %52, 4611686018427387900
  %70 = sub nsw i64 0, %69
  %71 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, i64 %70
  %72 = sub nsw i64 0, %69
  %73 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %44, i64 %72
  %74 = add nsw i64 %69, -4
  %75 = lshr exact i64 %74, 2
  %76 = add nuw nsw i64 %75, 1
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %74, 0
  br i1 %78, label %127, label %79

79:                                               ; preds = %68
  %80 = sub nuw nsw i64 %76, %77
  %81 = getelementptr i8, i8* %37, i64 -8
  %82 = bitcast i8* %81 to %"class.sh::TIntermNode"**
  %83 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %44, i64 -1
  %84 = getelementptr i8, i8* %37, i64 -8
  %85 = bitcast i8* %84 to %"class.sh::TIntermNode"**
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %44, i64 -1
  br label %87

87:                                               ; preds = %87, %79
  %88 = phi i64 [ 0, %79 ], [ %122, %87 ]
  %89 = phi i64 [ %80, %79 ], [ %123, %87 ]
  %90 = sub i64 0, %88
  %91 = sub i64 0, %88
  %92 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %82, i64 %90
  %93 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %83, i64 %91
  %94 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %93, i64 -1
  %95 = bitcast %"class.sh::TIntermNode"** %94 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 8, !alias.scope !3
  %97 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %93, i64 -2
  %98 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %97, i64 -1
  %99 = bitcast %"class.sh::TIntermNode"** %98 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 8, !alias.scope !3
  %101 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -1
  %102 = bitcast %"class.sh::TIntermNode"** %101 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %102, align 8, !alias.scope !6, !noalias !3
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -2
  %104 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %103, i64 -1
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %105, align 8, !alias.scope !6, !noalias !3
  %106 = sub nuw nsw i64 -4, %88
  %107 = sub nuw nsw i64 -4, %88
  %108 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 %106
  %109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %86, i64 %107
  %110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, i64 -1
  %111 = bitcast %"class.sh::TIntermNode"** %110 to <2 x i64>*
  %112 = load <2 x i64>, <2 x i64>* %111, align 8, !alias.scope !3
  %113 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, i64 -2
  %114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %113, i64 -1
  %115 = bitcast %"class.sh::TIntermNode"** %114 to <2 x i64>*
  %116 = load <2 x i64>, <2 x i64>* %115, align 8, !alias.scope !3
  %117 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 -1
  %118 = bitcast %"class.sh::TIntermNode"** %117 to <2 x i64>*
  store <2 x i64> %112, <2 x i64>* %118, align 8, !alias.scope !6, !noalias !3
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 -2
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %121 = bitcast %"class.sh::TIntermNode"** %120 to <2 x i64>*
  store <2 x i64> %116, <2 x i64>* %121, align 8, !alias.scope !6, !noalias !3
  %122 = add i64 %88, 8
  %123 = add i64 %89, -2
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %87, !llvm.loop !8

125:                                              ; preds = %87
  %126 = sub nuw nsw i64 -8, %88
  br label %127

127:                                              ; preds = %125, %68
  %128 = phi i64 [ 0, %68 ], [ %126, %125 ]
  %129 = icmp eq i64 %77, 0
  br i1 %129, label %148, label %130

130:                                              ; preds = %127
  %131 = getelementptr i8, i8* %37, i64 -8
  %132 = bitcast i8* %131 to %"class.sh::TIntermNode"**
  %133 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %44, i64 -1
  %134 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 %128
  %135 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %133, i64 %128
  %136 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 -1
  %137 = bitcast %"class.sh::TIntermNode"** %136 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 8, !alias.scope !3
  %139 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 -2
  %140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %139, i64 -1
  %141 = bitcast %"class.sh::TIntermNode"** %140 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 8, !alias.scope !3
  %143 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %134, i64 -1
  %144 = bitcast %"class.sh::TIntermNode"** %143 to <2 x i64>*
  store <2 x i64> %138, <2 x i64>* %144, align 8, !alias.scope !6, !noalias !3
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %134, i64 -2
  %146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %147 = bitcast %"class.sh::TIntermNode"** %146 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %147, align 8, !alias.scope !6, !noalias !3
  br label %148

148:                                              ; preds = %127, %130
  %149 = icmp eq i64 %52, %69
  br i1 %149, label %220, label %150

150:                                              ; preds = %148, %54, %47
  %151 = phi %"class.sh::TIntermNode"** [ %38, %54 ], [ %38, %47 ], [ %71, %148 ]
  %152 = phi %"class.sh::TIntermNode"** [ %44, %54 ], [ %44, %47 ], [ %73, %148 ]
  %153 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %152, i64 -1
  %154 = ptrtoint %"class.sh::TIntermNode"** %153 to i64
  %155 = sub i64 %154, %43
  %156 = lshr i64 %155, 3
  %157 = add nuw nsw i64 %156, 1
  %158 = and i64 %157, 7
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %171, label %160

160:                                              ; preds = %150, %160
  %161 = phi %"class.sh::TIntermNode"** [ %164, %160 ], [ %151, %150 ]
  %162 = phi %"class.sh::TIntermNode"** [ %165, %160 ], [ %152, %150 ]
  %163 = phi i64 [ %169, %160 ], [ %158, %150 ]
  %164 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -1
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -1
  %166 = bitcast %"class.sh::TIntermNode"** %165 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = bitcast %"class.sh::TIntermNode"** %164 to i64*
  store i64 %167, i64* %168, align 8
  %169 = add i64 %163, -1
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %160, !llvm.loop !10

171:                                              ; preds = %160, %150
  %172 = phi %"class.sh::TIntermNode"** [ undef, %150 ], [ %164, %160 ]
  %173 = phi %"class.sh::TIntermNode"** [ %151, %150 ], [ %164, %160 ]
  %174 = phi %"class.sh::TIntermNode"** [ %152, %150 ], [ %165, %160 ]
  %175 = icmp ult i64 %155, 56
  br i1 %175, label %220, label %176

176:                                              ; preds = %171, %176
  %177 = phi %"class.sh::TIntermNode"** [ %214, %176 ], [ %173, %171 ]
  %178 = phi %"class.sh::TIntermNode"** [ %215, %176 ], [ %174, %171 ]
  %179 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %177, i64 -1
  %180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %178, i64 -1
  %181 = bitcast %"class.sh::TIntermNode"** %180 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = bitcast %"class.sh::TIntermNode"** %179 to i64*
  store i64 %182, i64* %183, align 8
  %184 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %177, i64 -2
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %178, i64 -2
  %186 = bitcast %"class.sh::TIntermNode"** %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.sh::TIntermNode"** %184 to i64*
  store i64 %187, i64* %188, align 8
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %177, i64 -3
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %178, i64 -3
  %191 = bitcast %"class.sh::TIntermNode"** %190 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = bitcast %"class.sh::TIntermNode"** %189 to i64*
  store i64 %192, i64* %193, align 8
  %194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %177, i64 -4
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %178, i64 -4
  %196 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = bitcast %"class.sh::TIntermNode"** %194 to i64*
  store i64 %197, i64* %198, align 8
  %199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %177, i64 -5
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %178, i64 -5
  %201 = bitcast %"class.sh::TIntermNode"** %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = bitcast %"class.sh::TIntermNode"** %199 to i64*
  store i64 %202, i64* %203, align 8
  %204 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %177, i64 -6
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %178, i64 -6
  %206 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = bitcast %"class.sh::TIntermNode"** %204 to i64*
  store i64 %207, i64* %208, align 8
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %177, i64 -7
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %178, i64 -7
  %211 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = bitcast %"class.sh::TIntermNode"** %209 to i64*
  store i64 %212, i64* %213, align 8
  %214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %177, i64 -8
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %178, i64 -8
  %216 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = bitcast %"class.sh::TIntermNode"** %214 to i64*
  store i64 %217, i64* %218, align 8
  %219 = icmp eq %"class.sh::TIntermNode"** %215, %42
  br i1 %219, label %220, label %176, !llvm.loop !12

220:                                              ; preds = %171, %176, %148, %25
  %221 = phi %"class.sh::TIntermNode"** [ %38, %25 ], [ %71, %148 ], [ %172, %171 ], [ %214, %176 ]
  %222 = ptrtoint %"class.sh::TIntermNode"** %221 to i64
  store i64 %222, i64* %34, align 8
  store i64 %40, i64* %33, align 8
  store i64 %40, i64* %35, align 8
  %223 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 0, i32 0
  call void @_ZN2sh16TIntermTraverser29insertStatementsInParentBlockERKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermTraverser"* %223, %"class.sh::TVector"* nonnull dereferenceable(24) %4) #5
  %224 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 3
  %225 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %224, align 8
  %226 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %225, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %223, %"class.sh::TIntermNode"* %226, i32 1) #5
  %227 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %27, align 8
  %228 = icmp eq %"class.sh::TIntermNode"** %227, null
  br i1 %228, label %232, label %229

229:                                              ; preds = %220
  %230 = ptrtoint %"class.sh::TIntermNode"** %227 to i64
  %231 = bitcast %"class.sh::TIntermNode"*** %28 to i64*
  store i64 %230, i64* %231, align 8
  br label %232

232:                                              ; preds = %220, %229
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #5
  br label %233

233:                                              ; preds = %17, %232, %21
  %234 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 2
  %235 = load i32, i32* %234, align 4
  %236 = add nsw i32 %235, -1
  store i32 %236, i32* %234, align 4
  br label %277

237:                                              ; preds = %3
  %238 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 1
  %239 = load i8, i8* %238, align 2, !range !2
  %240 = icmp eq i8 %239, 0
  br i1 %240, label %241, label %277

241:                                              ; preds = %237
  %242 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 2
  %243 = load i32, i32* %242, align 4
  %244 = icmp sgt i32 %243, 0
  %245 = icmp eq i32 %1, 0
  %246 = and i1 %245, %244
  br i1 %246, label %247, label %277

247:                                              ; preds = %241
  %248 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 3
  %249 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 0, i32 0, i32 11, i32 0
  %250 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %251 = bitcast %"class.sh::TIntermNode"*** %250 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = bitcast %"class.std::__1::vector.0"* %249 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = sub i64 %252, %254
  %256 = ashr exact i64 %255, 3
  %257 = icmp ult i64 %256, 2
  br i1 %257, label %263, label %258

258:                                              ; preds = %247
  %259 = inttoptr i64 %254 to %"class.sh::TIntermNode"**
  %260 = add nsw i64 %256, -2
  %261 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 %260
  %262 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %261, align 8
  br label %263

263:                                              ; preds = %247, %258
  %264 = phi %"class.sh::TIntermNode"* [ %262, %258 ], [ null, %247 ]
  %265 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 0, i32 1
  %266 = load i8, i8* %265, align 8, !range !2
  %267 = icmp eq i8 %266, 0
  br i1 %267, label %268, label %272

268:                                              ; preds = %263
  %269 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 0, i32 2
  %270 = load i8, i8* %269, align 1, !range !2
  %271 = icmp ne i8 %270, 0
  br label %272

272:                                              ; preds = %263, %268
  %273 = phi i1 [ true, %263 ], [ %271, %268 ]
  %274 = tail call zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_13TIntermBinaryEPNS_11TIntermNodeEb(%"class.sh::IntermNodePatternMatcher"* %248, %"class.sh::TIntermBinary"* %2, %"class.sh::TIntermNode"* %264, i1 zeroext %273) #5
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %238, align 2
  %276 = xor i1 %274, true
  br label %277

277:                                              ; preds = %241, %237, %13, %233, %8, %9, %272
  %278 = phi i1 [ %276, %272 ], [ false, %9 ], [ true, %8 ], [ true, %233 ], [ true, %13 ], [ false, %237 ], [ true, %241 ]
  ret i1 %278
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %18

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  %11 = icmp eq i32 %1, 0
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %18

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 3
  %15 = tail call zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_12TIntermUnaryE(%"class.sh::IntermNodePatternMatcher"* %14, %"class.sh::TIntermUnary"* %2) #5
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %4, align 2
  %17 = xor i1 %15, true
  br label %18

18:                                               ; preds = %7, %3, %13
  %19 = phi i1 [ %17, %13 ], [ false, %3 ], [ true, %7 ]
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %18

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  %11 = icmp eq i32 %1, 0
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %18

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 3
  %15 = tail call zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_14TIntermTernaryE(%"class.sh::IntermNodePatternMatcher"* %14, %"class.sh::TIntermTernary"* %2) #5
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %4, align 2
  %17 = xor i1 %15, true
  br label %18

18:                                               ; preds = %7, %3, %13
  %19 = phi i1 [ %17, %13 ], [ false, %3 ], [ true, %7 ]
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_130SplitSequenceOperatorTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %34

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  %11 = icmp eq i32 %1, 0
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %34

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 3
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 0, i32 0, i32 11, i32 0
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser", %"class.sh::(anonymous namespace)::SplitSequenceOperatorTraverser"* %0, i64 0, i32 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %17 = bitcast %"class.sh::TIntermNode"*** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.std::__1::vector.0"* %15 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %18, %20
  %22 = ashr exact i64 %21, 3
  %23 = icmp ult i64 %22, 2
  br i1 %23, label %29, label %24

24:                                               ; preds = %13
  %25 = inttoptr i64 %20 to %"class.sh::TIntermNode"**
  %26 = add nsw i64 %22, -2
  %27 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %25, i64 %26
  %28 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %27, align 8
  br label %29

29:                                               ; preds = %13, %24
  %30 = phi %"class.sh::TIntermNode"* [ %28, %24 ], [ null, %13 ]
  %31 = tail call zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_16TIntermAggregateEPNS_11TIntermNodeE(%"class.sh::IntermNodePatternMatcher"* %14, %"class.sh::TIntermAggregate"* %2, %"class.sh::TIntermNode"* %30) #5
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %4, align 2
  %33 = xor i1 %31, true
  br label %34

34:                                               ; preds = %7, %3, %29
  %35 = phi i1 [ %33, %29 ], [ false, %3 ], [ true, %7 ]
  ret i1 %35
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh24TLValueTrackingTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh24TLValueTrackingTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh24TLValueTrackingTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser29insertStatementsInParentBlockERKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermTraverser"*, %"class.sh::TVector"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_13TIntermBinaryEPNS_11TIntermNodeEb(%"class.sh::IntermNodePatternMatcher"*, %"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, i1 zeroext) local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_12TIntermUnaryE(%"class.sh::IntermNodePatternMatcher"*, %"class.sh::TIntermUnary"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_14TIntermTernaryE(%"class.sh::IntermNodePatternMatcher"*, %"class.sh::TIntermTernary"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_16TIntermAggregateEPNS_11TIntermNodeE(%"class.sh::IntermNodePatternMatcher"*, %"class.sh::TIntermAggregate"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
