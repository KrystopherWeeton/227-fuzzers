; ModuleID = '../../third_party/skia/src/core/SkTypefaceCache.cpp'
source_filename = "../../third_party/skia/src/core/SkTypefaceCache.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkTypefaceCache = type { %class.SkTArray }
%class.SkTArray = type { %class.sk_sp*, i64 }
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZN15SkTypefaceCacheD2Ev = comdat any

$_ZN8SkTArrayI5sk_spI10SkTypefaceELb0EE12checkReallocEiNS3_11ReallocTypeE = comdat any

@_ZZN15SkTypefaceCache3GetEvE6gCache = internal global %class.SkTypefaceCache zeroinitializer, align 8
@_ZGVZN15SkTypefaceCache3GetEvE6gCache = internal global i64 0, align 8
@__dso_handle = external hidden global i8
@_ZZN15SkTypefaceCache9NewFontIDEvE6nextID = internal global { { i32 } } { { i32 } { i32 1 } }, align 4
@_ZZL20typeface_cache_mutexvE5mutex = internal unnamed_addr global %class.SkMutex* null, align 8
@_ZGVZL20typeface_cache_mutexvE5mutex = internal global i64 0, align 8

@_ZN15SkTypefaceCacheC1Ev = hidden unnamed_addr alias void (%class.SkTypefaceCache*), void (%class.SkTypefaceCache*)* @_ZN15SkTypefaceCacheC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN15SkTypefaceCacheC2Ev(%class.SkTypefaceCache* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %0, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %0, i64 0, i32 0, i32 0
  store %class.sk_sp* null, %class.sk_sp** %3, align 8
  store i64 1, i64* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkTypefaceCache3addE5sk_spI10SkTypefaceE(%class.SkTypefaceCache*, %class.sk_sp* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %0, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 4294965248
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %2
  tail call void @_ZN15SkTypefaceCache5purgeEi(%class.SkTypefaceCache* %0, i32 256)
  br label %9

9:                                                ; preds = %2, %8
  tail call void @_ZN8SkTArrayI5sk_spI10SkTypefaceELb0EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray* %3, i32 1, i32 1) #9
  %10 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %0, i64 0, i32 0, i32 0
  %11 = load %class.sk_sp*, %class.sk_sp** %10, align 8
  %12 = load i64, i64* %4, align 8
  %13 = lshr i64 %12, 1
  %14 = and i64 %13, 2147483647
  %15 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %11, i64 %14
  %16 = add i64 %12, 2
  %17 = and i64 %16, 4294967294
  %18 = and i64 %12, -4294967295
  %19 = or i64 %17, %18
  store i64 %19, i64* %4, align 8
  %20 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %21 = bitcast %class.sk_sp* %1 to i64*
  %22 = load i64, i64* %21, align 8
  store %class.SkTypeface* null, %class.SkTypeface** %20, align 8
  %23 = bitcast %class.sk_sp* %15 to i64*
  store i64 %22, i64* %23, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkTypefaceCache5purgeEi(%class.SkTypefaceCache* nocapture, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2147483647
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %83, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %0, i64 0, i32 0, i32 0
  br label %11

11:                                               ; preds = %9, %78
  %12 = phi i32 [ 0, %9 ], [ %81, %78 ]
  %13 = phi i32 [ %7, %9 ], [ %80, %78 ]
  %14 = phi i32 [ %1, %9 ], [ %79, %78 ]
  %15 = load %class.sk_sp*, %class.sk_sp** %10, align 8
  %16 = sext i32 %12 to i64
  %17 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %15, i64 %16, i32 0
  %18 = bitcast %class.SkTypeface** %17 to %class.SkRefCntBase**
  %19 = load %class.SkRefCntBase*, %class.SkRefCntBase** %18, align 8
  %20 = getelementptr inbounds %class.SkRefCntBase, %class.SkRefCntBase* %19, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 acquire, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %76

23:                                               ; preds = %11
  %24 = load i64, i64* %3, align 8
  %25 = lshr i64 %24, 1
  %26 = trunc i64 %25 to i32
  %27 = and i32 %26, 2147483647
  %28 = add nsw i32 %27, -1
  %29 = shl i32 %28, 1
  %30 = zext i32 %29 to i64
  %31 = and i64 %24, -4294967295
  %32 = or i64 %31, %30
  store i64 %32, i64* %3, align 8
  %33 = load %class.sk_sp*, %class.sk_sp** %10, align 8
  %34 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %33, i64 %16, i32 0
  %35 = load %class.SkTypeface*, %class.SkTypeface** %34, align 8
  %36 = icmp eq %class.SkTypeface* %35, null
  br i1 %36, label %47, label %37

37:                                               ; preds = %23
  %38 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %35, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = atomicrmw add i32* %38, i32 -1 acq_rel
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %41, label %47

41:                                               ; preds = %37
  %42 = bitcast %class.SkTypeface* %35 to %class.SkRefCntBase*
  %43 = bitcast %class.SkTypeface* %35 to void (%class.SkRefCntBase*)***
  %44 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %43, align 8
  %45 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %44, i64 2
  %46 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %45, align 8
  tail call void %46(%class.SkRefCntBase* nonnull %42) #9
  br label %47

47:                                               ; preds = %41, %37, %23
  %48 = icmp eq i32 %28, %12
  br i1 %48, label %72, label %49

49:                                               ; preds = %47
  %50 = load %class.sk_sp*, %class.sk_sp** %10, align 8
  %51 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %50, i64 %16
  %52 = sext i32 %28 to i64
  %53 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %50, i64 %52
  %54 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %53, i64 0, i32 0
  %55 = bitcast %class.sk_sp* %53 to i64*
  %56 = load i64, i64* %55, align 8
  store %class.SkTypeface* null, %class.SkTypeface** %54, align 8
  %57 = bitcast %class.sk_sp* %51 to i64*
  store i64 %56, i64* %57, align 8
  %58 = load %class.sk_sp*, %class.sk_sp** %10, align 8
  %59 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %58, i64 %52, i32 0
  %60 = load %class.SkTypeface*, %class.SkTypeface** %59, align 8
  %61 = icmp eq %class.SkTypeface* %60, null
  br i1 %61, label %72, label %62

62:                                               ; preds = %49
  %63 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %60, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = atomicrmw add i32* %63, i32 -1 acq_rel
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %66, label %72

66:                                               ; preds = %62
  %67 = bitcast %class.SkTypeface* %60 to %class.SkRefCntBase*
  %68 = bitcast %class.SkTypeface* %60 to void (%class.SkRefCntBase*)***
  %69 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %68, align 8
  %70 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %69, i64 2
  %71 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %70, align 8
  tail call void %71(%class.SkRefCntBase* nonnull %67) #9
  br label %72

72:                                               ; preds = %47, %49, %62, %66
  %73 = add nsw i32 %13, -1
  %74 = add nsw i32 %14, -1
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %83, label %78

76:                                               ; preds = %11
  %77 = add nsw i32 %12, 1
  br label %78

78:                                               ; preds = %72, %76
  %79 = phi i32 [ %74, %72 ], [ %14, %76 ]
  %80 = phi i32 [ %73, %72 ], [ %13, %76 ]
  %81 = phi i32 [ %12, %72 ], [ %77, %76 ]
  %82 = icmp slt i32 %81, %80
  br i1 %82, label %11, label %83

83:                                               ; preds = %72, %78, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK15SkTypefaceCache16findByProcAndRefEPFbP10SkTypefacePvES2_(%class.sk_sp* noalias nocapture sret, %class.SkTypefaceCache* nocapture readonly, i1 (%class.SkTypeface*, i8*)* nocapture, i8*) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %1, i64 0, i32 0, i32 0
  %6 = load %class.sk_sp*, %class.sk_sp** %5, align 8
  %7 = icmp eq %class.sk_sp* %6, null
  br i1 %7, label %32, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %1, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = lshr i64 %10, 1
  %12 = and i64 %11, 2147483647
  %13 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %6, i64 %12
  %14 = icmp eq i64 %12, 0
  br i1 %14, label %32, label %17

15:                                               ; preds = %17
  %16 = icmp eq %class.sk_sp* %22, %13
  br i1 %16, label %32, label %17

17:                                               ; preds = %8, %15
  %18 = phi %class.sk_sp* [ %22, %15 ], [ %6, %8 ]
  %19 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %18, i64 0, i32 0
  %20 = load %class.SkTypeface*, %class.SkTypeface** %19, align 8
  %21 = tail call zeroext i1 %2(%class.SkTypeface* %20, i8* %3) #9
  %22 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %18, i64 1
  br i1 %21, label %23, label %15

23:                                               ; preds = %17
  %24 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %18, i64 0, i32 0
  %25 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  %26 = load %class.SkTypeface*, %class.SkTypeface** %24, align 8
  %27 = icmp eq %class.SkTypeface* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %26, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = atomicrmw add i32* %29, i32 1 monotonic
  br label %31

31:                                               ; preds = %23, %28
  store %class.SkTypeface* %26, %class.SkTypeface** %25, align 8
  br label %34

32:                                               ; preds = %15, %4, %8
  %33 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkTypeface* null, %class.SkTypeface** %33, align 8
  br label %34

34:                                               ; preds = %31, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkTypefaceCache8purgeAllEv(%class.SkTypefaceCache* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %0, i64 0, i32 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = lshr i64 %3, 1
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 2147483647
  tail call void @_ZN15SkTypefaceCache5purgeEi(%class.SkTypefaceCache* %0, i32 %6)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden nonnull dereferenceable(16) %class.SkTypefaceCache* @_ZN15SkTypefaceCache3GetEv() local_unnamed_addr #2 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN15SkTypefaceCache3GetEvE6gCache to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %8, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN15SkTypefaceCache3GetEvE6gCache) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  store %class.sk_sp* null, %class.sk_sp** getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 0), align 8
  store i64 1, i64* getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 1), align 8
  %7 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%class.SkTypefaceCache*)* @_ZN15SkTypefaceCacheD2Ev to void (i8*)*), i8* bitcast (%class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache to i8*), i8* nonnull @__dso_handle) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN15SkTypefaceCache3GetEvE6gCache) #9
  br label %8

8:                                                ; preds = %3, %6, %0
  ret %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15SkTypefaceCacheD2Ev(%class.SkTypefaceCache*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %0, i64 0, i32 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 4294967294
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkTypefaceCache, %class.SkTypefaceCache* %0, i64 0, i32 0, i32 0
  br label %12

8:                                                ; preds = %28, %1
  %9 = phi i64 [ %3, %1 ], [ %30, %28 ]
  %10 = and i64 %9, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %37, label %34

12:                                               ; preds = %28, %6
  %13 = phi i64 [ 0, %6 ], [ %29, %28 ]
  %14 = load %class.sk_sp*, %class.sk_sp** %7, align 8
  %15 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %14, i64 %13, i32 0
  %16 = load %class.SkTypeface*, %class.SkTypeface** %15, align 8
  %17 = icmp eq %class.SkTypeface* %16, null
  br i1 %17, label %28, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %16, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw add i32* %19, i32 -1 acq_rel
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %28

22:                                               ; preds = %18
  %23 = bitcast %class.SkTypeface* %16 to %class.SkRefCntBase*
  %24 = bitcast %class.SkTypeface* %16 to void (%class.SkRefCntBase*)***
  %25 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %24, align 8
  %26 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, i64 2
  %27 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %26, align 8
  tail call void %27(%class.SkRefCntBase* nonnull %23) #9
  br label %28

28:                                               ; preds = %22, %18, %12
  %29 = add nuw nsw i64 %13, 1
  %30 = load i64, i64* %2, align 8
  %31 = lshr i64 %30, 1
  %32 = and i64 %31, 2147483647
  %33 = icmp ult i64 %29, %32
  br i1 %33, label %12, label %8

34:                                               ; preds = %8
  %35 = bitcast %class.SkTypefaceCache* %0 to i8**
  %36 = load i8*, i8** %35, align 8
  tail call void @_Z7sk_freePv(i8* %36) #9
  br label %37

37:                                               ; preds = %8, %34
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN15SkTypefaceCache9NewFontIDEv() local_unnamed_addr #5 align 2 {
  %1 = atomicrmw add i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN15SkTypefaceCache9NewFontIDEvE6nextID, i64 0, i32 0, i32 0), i32 1 monotonic
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkTypefaceCache3AddE5sk_spI10SkTypefaceE(%class.sk_sp* nocapture) local_unnamed_addr #1 align 2 {
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZL20typeface_cache_mutexvE5mutex to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %13, !prof !2

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZL20typeface_cache_mutexvE5mutex) #9
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %4
  %8 = tail call i8* @_Znwm(i64 16) #10
  %9 = bitcast i8* %8 to i32*
  store i32 1, i32* %9, align 4
  %10 = getelementptr inbounds i8, i8* %8, i64 4
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds i8, i8* %8, i64 8
  %12 = bitcast i8* %11 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %12, align 8
  store i8* %8, i8** bitcast (%class.SkMutex** @_ZZL20typeface_cache_mutexvE5mutex to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZL20typeface_cache_mutexvE5mutex) #9
  br label %13

13:                                               ; preds = %1, %4, %7
  %14 = load %class.SkMutex*, %class.SkMutex** @_ZZL20typeface_cache_mutexvE5mutex, align 8
  %15 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw sub i32* %15, i32 1 acquire
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %18, label %20

18:                                               ; preds = %13
  %19 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %14, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %19) #9
  br label %20

20:                                               ; preds = %13, %18
  %21 = load atomic i8, i8* bitcast (i64* @_ZGVZN15SkTypefaceCache3GetEvE6gCache to i8*) acquire, align 8
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %28, !prof !2

23:                                               ; preds = %20
  %24 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN15SkTypefaceCache3GetEvE6gCache) #9
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %23
  store %class.sk_sp* null, %class.sk_sp** getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 0), align 8
  store i64 1, i64* getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 1), align 8
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%class.SkTypefaceCache*)* @_ZN15SkTypefaceCacheD2Ev to void (i8*)*), i8* bitcast (%class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache to i8*), i8* nonnull @__dso_handle) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN15SkTypefaceCache3GetEvE6gCache) #9
  br label %28

28:                                               ; preds = %20, %23, %26
  %29 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  %30 = bitcast %class.sk_sp* %0 to i64*
  %31 = load i64, i64* %30, align 8
  store %class.SkTypeface* null, %class.SkTypeface** %29, align 8
  %32 = load i64, i64* getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 1), align 8
  %33 = and i64 %32, 4294965248
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %36, label %35

35:                                               ; preds = %28
  tail call void @_ZN15SkTypefaceCache5purgeEi(%class.SkTypefaceCache* nonnull @_ZZN15SkTypefaceCache3GetEvE6gCache, i32 256) #9
  br label %36

36:                                               ; preds = %35, %28
  tail call void @_ZN8SkTArrayI5sk_spI10SkTypefaceELb0EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray* getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0), i32 1, i32 1) #9
  %37 = load %class.sk_sp*, %class.sk_sp** getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 0), align 8
  %38 = load i64, i64* getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 1), align 8
  %39 = lshr i64 %38, 1
  %40 = and i64 %39, 2147483647
  %41 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %37, i64 %40
  %42 = add i64 %38, 2
  %43 = and i64 %42, 4294967294
  %44 = and i64 %38, -4294967295
  %45 = or i64 %43, %44
  store i64 %45, i64* getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 1), align 8
  %46 = bitcast %class.sk_sp* %41 to i64*
  store i64 %31, i64* %46, align 8
  %47 = atomicrmw add i32* %15, i32 1 release
  %48 = icmp slt i32 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %36
  %50 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %14, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %50, i32 1) #9
  br label %51

51:                                               ; preds = %36, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkTypefaceCache16FindByProcAndRefEPFbP10SkTypefacePvES2_(%class.sk_sp* noalias nocapture sret, i1 (%class.SkTypeface*, i8*)* nocapture, i8*) local_unnamed_addr #1 align 2 {
  %4 = load atomic i8, i8* bitcast (i64* @_ZGVZL20typeface_cache_mutexvE5mutex to i8*) acquire, align 8
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %15, !prof !2

6:                                                ; preds = %3
  %7 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZL20typeface_cache_mutexvE5mutex) #9
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %6
  %10 = tail call i8* @_Znwm(i64 16) #10
  %11 = bitcast i8* %10 to i32*
  store i32 1, i32* %11, align 4
  %12 = getelementptr inbounds i8, i8* %10, i64 4
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds i8, i8* %10, i64 8
  %14 = bitcast i8* %13 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %14, align 8
  store i8* %10, i8** bitcast (%class.SkMutex** @_ZZL20typeface_cache_mutexvE5mutex to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZL20typeface_cache_mutexvE5mutex) #9
  br label %15

15:                                               ; preds = %3, %6, %9
  %16 = load %class.SkMutex*, %class.SkMutex** @_ZZL20typeface_cache_mutexvE5mutex, align 8
  %17 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw sub i32* %17, i32 1 acquire
  %19 = icmp slt i32 %18, 1
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  %21 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %16, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %21) #9
  br label %22

22:                                               ; preds = %15, %20
  %23 = load atomic i8, i8* bitcast (i64* @_ZGVZN15SkTypefaceCache3GetEvE6gCache to i8*) acquire, align 8
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %30, !prof !2

25:                                               ; preds = %22
  %26 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN15SkTypefaceCache3GetEvE6gCache) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %25
  store %class.sk_sp* null, %class.sk_sp** getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 0), align 8
  store i64 1, i64* getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 1), align 8
  %29 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%class.SkTypefaceCache*)* @_ZN15SkTypefaceCacheD2Ev to void (i8*)*), i8* bitcast (%class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache to i8*), i8* nonnull @__dso_handle) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN15SkTypefaceCache3GetEvE6gCache) #9
  br label %30

30:                                               ; preds = %22, %25, %28
  %31 = load %class.sk_sp*, %class.sk_sp** getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 0), align 8, !noalias !3
  %32 = icmp eq %class.sk_sp* %31, null
  br i1 %32, label %56, label %33

33:                                               ; preds = %30
  %34 = load i64, i64* getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 1), align 8, !noalias !3
  %35 = lshr i64 %34, 1
  %36 = and i64 %35, 2147483647
  %37 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %31, i64 %36
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %56, label %41

39:                                               ; preds = %41
  %40 = icmp eq %class.sk_sp* %46, %37
  br i1 %40, label %56, label %41

41:                                               ; preds = %33, %39
  %42 = phi %class.sk_sp* [ %46, %39 ], [ %31, %33 ]
  %43 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %42, i64 0, i32 0
  %44 = load %class.SkTypeface*, %class.SkTypeface** %43, align 8, !noalias !3
  %45 = tail call zeroext i1 %1(%class.SkTypeface* %44, i8* %2) #9, !noalias !3
  %46 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %42, i64 1
  br i1 %45, label %47, label %39

47:                                               ; preds = %41
  %48 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %42, i64 0, i32 0
  %49 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  %50 = load %class.SkTypeface*, %class.SkTypeface** %48, align 8, !noalias !3
  %51 = icmp eq %class.SkTypeface* %50, null
  br i1 %51, label %55, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %50, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = atomicrmw add i32* %53, i32 1 monotonic, !noalias !3
  br label %55

55:                                               ; preds = %52, %47
  store %class.SkTypeface* %50, %class.SkTypeface** %49, align 8, !alias.scope !3
  br label %58

56:                                               ; preds = %39, %33, %30
  %57 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkTypeface* null, %class.SkTypeface** %57, align 8, !alias.scope !3
  br label %58

58:                                               ; preds = %55, %56
  %59 = atomicrmw add i32* %17, i32 1 release
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %58
  %62 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %16, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %62, i32 1) #9
  br label %63

63:                                               ; preds = %58, %61
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkTypefaceCache8PurgeAllEv() local_unnamed_addr #1 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZL20typeface_cache_mutexvE5mutex to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %12, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZL20typeface_cache_mutexvE5mutex) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %3
  %7 = tail call i8* @_Znwm(i64 16) #10
  %8 = bitcast i8* %7 to i32*
  store i32 1, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %7, i64 4
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds i8, i8* %7, i64 8
  %11 = bitcast i8* %10 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %11, align 8
  store i8* %7, i8** bitcast (%class.SkMutex** @_ZZL20typeface_cache_mutexvE5mutex to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZL20typeface_cache_mutexvE5mutex) #9
  br label %12

12:                                               ; preds = %0, %3, %6
  %13 = load %class.SkMutex*, %class.SkMutex** @_ZZL20typeface_cache_mutexvE5mutex, align 8
  %14 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw sub i32* %14, i32 1 acquire
  %16 = icmp slt i32 %15, 1
  br i1 %16, label %17, label %19

17:                                               ; preds = %12
  %18 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %13, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %18) #9
  br label %19

19:                                               ; preds = %12, %17
  %20 = load atomic i8, i8* bitcast (i64* @_ZGVZN15SkTypefaceCache3GetEvE6gCache to i8*) acquire, align 8
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %27, !prof !2

22:                                               ; preds = %19
  %23 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN15SkTypefaceCache3GetEvE6gCache) #9
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %22
  store %class.sk_sp* null, %class.sk_sp** getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 0), align 8
  store i64 1, i64* getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 1), align 8
  %26 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%class.SkTypefaceCache*)* @_ZN15SkTypefaceCacheD2Ev to void (i8*)*), i8* bitcast (%class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache to i8*), i8* nonnull @__dso_handle) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN15SkTypefaceCache3GetEvE6gCache) #9
  br label %27

27:                                               ; preds = %19, %22, %25
  %28 = load i64, i64* getelementptr inbounds (%class.SkTypefaceCache, %class.SkTypefaceCache* @_ZZN15SkTypefaceCache3GetEvE6gCache, i64 0, i32 0, i32 1), align 8
  %29 = lshr i64 %28, 1
  %30 = trunc i64 %29 to i32
  %31 = and i32 %30, 2147483647
  tail call void @_ZN15SkTypefaceCache5purgeEi(%class.SkTypefaceCache* nonnull @_ZZN15SkTypefaceCache3GetEvE6gCache, i32 %31) #9
  %32 = atomicrmw add i32* %14, i32 1 release
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %27
  %35 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %13, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %35, i32 1) #9
  br label %36

36:                                               ; preds = %27, %34
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN15SkTypefaceCache4DumpEv() local_unnamed_addr #6 align 2 {
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore*) local_unnamed_addr #7

declare void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore*, i32) local_unnamed_addr #7

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI5sk_spI10SkTypefaceELb0EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %92

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %92, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %80, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %74, %48
  %51 = phi i64 [ 0, %48 ], [ %75, %74 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %class.sk_sp*, %class.sk_sp** %49, align 8
  %55 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %54, i64 %51
  %56 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %55, i64 0, i32 0
  %57 = bitcast %class.sk_sp* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %class.SkTypeface* null, %class.SkTypeface** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %class.sk_sp*, %class.sk_sp** %49, align 8
  %61 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %60, i64 %51, i32 0
  %62 = load %class.SkTypeface*, %class.SkTypeface** %61, align 8
  %63 = icmp eq %class.SkTypeface* %62, null
  br i1 %63, label %74, label %64

64:                                               ; preds = %50
  %65 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %62, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw add i32* %65, i32 -1 acq_rel
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %74

68:                                               ; preds = %64
  %69 = bitcast %class.SkTypeface* %62 to %class.SkRefCntBase*
  %70 = bitcast %class.SkTypeface* %62 to void (%class.SkRefCntBase*)***
  %71 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %70, align 8
  %72 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %71, i64 2
  %73 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %72, align 8
  tail call void %73(%class.SkRefCntBase* nonnull %69) #9
  br label %74

74:                                               ; preds = %68, %64, %50
  %75 = add nuw nsw i64 %51, 1
  %76 = load i64, i64* %4, align 8
  %77 = lshr i64 %76, 1
  %78 = and i64 %77, 2147483647
  %79 = icmp ult i64 %75, %78
  br i1 %79, label %50, label %80

80:                                               ; preds = %74, %35
  %81 = phi i64 [ %45, %35 ], [ %76, %74 ]
  %82 = and i64 %81, 1
  %83 = icmp eq i64 %82, 0
  %84 = bitcast %class.SkTArray* %0 to i8**
  br i1 %83, label %88, label %85

85:                                               ; preds = %80
  %86 = load i8*, i8** %84, align 8
  tail call void @_Z7sk_freePv(i8* %86) #9
  %87 = load i64, i64* %4, align 8
  br label %88

88:                                               ; preds = %80, %85
  %89 = phi i64 [ %87, %85 ], [ %81, %80 ]
  store i8* %44, i8** %84, align 8
  %90 = and i64 %89, -4294967298
  %91 = or i64 %90, 1
  store i64 %91, i64* %4, align 8
  br label %92

92:                                               ; preds = %88, %32, %21
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK15SkTypefaceCache16findByProcAndRefEPFbP10SkTypefacePvES2_: argument 0"}
!5 = distinct !{!5, !"_ZNK15SkTypefaceCache16findByProcAndRefEPFbP10SkTypefacePvES2_"}
