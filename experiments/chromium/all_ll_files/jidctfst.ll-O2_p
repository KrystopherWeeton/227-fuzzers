; ModuleID = '../../third_party/libjpeg_turbo/jidctfst.c'
source_filename = "../../third_party/libjpeg_turbo/jidctfst.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x {}*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_idct_ifast(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i16* nocapture readonly, i8** nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = alloca [64 x i32], align 16
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast [64 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false)
  %10 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 20
  %11 = bitcast i8** %10 to i16**
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 0
  br label %17

14:                                               ; preds = %164
  %15 = getelementptr inbounds i8, i8* %8, i64 128
  %16 = zext i32 %4 to i64
  br label %173

17:                                               ; preds = %164, %5
  %18 = phi i32 [ 8, %5 ], [ %171, %164 ]
  %19 = phi i32* [ %13, %5 ], [ %168, %164 ]
  %20 = phi i16* [ %12, %5 ], [ %169, %164 ]
  %21 = phi i16* [ %2, %5 ], [ %170, %164 ]
  %22 = getelementptr inbounds i16, i16* %21, i64 8
  %23 = load i16, i16* %22, align 2
  %24 = getelementptr inbounds i16, i16* %21, i64 16
  %25 = load i16, i16* %24, align 2
  %26 = or i16 %23, %25
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %28, label %60

28:                                               ; preds = %17
  %29 = getelementptr inbounds i16, i16* %21, i64 24
  %30 = load i16, i16* %29, align 2
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %32, label %60

32:                                               ; preds = %28
  %33 = getelementptr inbounds i16, i16* %21, i64 32
  %34 = load i16, i16* %33, align 2
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %36, label %60

36:                                               ; preds = %32
  %37 = getelementptr inbounds i16, i16* %21, i64 40
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 0
  br i1 %39, label %40, label %60

40:                                               ; preds = %36
  %41 = getelementptr inbounds i16, i16* %21, i64 48
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 0
  br i1 %43, label %44, label %60

44:                                               ; preds = %40
  %45 = getelementptr inbounds i16, i16* %21, i64 56
  %46 = load i16, i16* %45, align 2
  %47 = icmp eq i16 %46, 0
  br i1 %47, label %48, label %60

48:                                               ; preds = %44
  %49 = load i16, i16* %21, align 2
  %50 = sext i16 %49 to i32
  %51 = load i16, i16* %20, align 2
  %52 = sext i16 %51 to i32
  %53 = mul nsw i32 %52, %50
  store i32 %53, i32* %19, align 4
  %54 = getelementptr inbounds i32, i32* %19, i64 8
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds i32, i32* %19, i64 16
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds i32, i32* %19, i64 24
  store i32 %53, i32* %56, align 4
  %57 = getelementptr inbounds i32, i32* %19, i64 32
  store i32 %53, i32* %57, align 4
  %58 = getelementptr inbounds i32, i32* %19, i64 40
  store i32 %53, i32* %58, align 4
  %59 = getelementptr inbounds i32, i32* %19, i64 48
  store i32 %53, i32* %59, align 4
  br label %164

60:                                               ; preds = %17, %44, %40, %36, %32, %28
  %61 = phi i16 [ 0, %44 ], [ 0, %40 ], [ 0, %36 ], [ 0, %32 ], [ 0, %28 ], [ %25, %17 ]
  %62 = load i16, i16* %21, align 2
  %63 = load i16, i16* %20, align 2
  %64 = mul i16 %63, %62
  %65 = getelementptr inbounds i16, i16* %20, i64 16
  %66 = load i16, i16* %65, align 2
  %67 = mul i16 %66, %61
  %68 = getelementptr inbounds i16, i16* %21, i64 32
  %69 = load i16, i16* %68, align 2
  %70 = getelementptr inbounds i16, i16* %20, i64 32
  %71 = load i16, i16* %70, align 2
  %72 = mul i16 %71, %69
  %73 = getelementptr inbounds i16, i16* %21, i64 48
  %74 = load i16, i16* %73, align 2
  %75 = getelementptr inbounds i16, i16* %20, i64 48
  %76 = load i16, i16* %75, align 2
  %77 = mul i16 %76, %74
  %78 = add i16 %72, %64
  %79 = sub i16 %64, %72
  %80 = sext i16 %67 to i64
  %81 = sext i16 %77 to i64
  %82 = add i16 %77, %67
  %83 = sub nsw i64 %80, %81
  %84 = mul nsw i64 %83, 362
  %85 = lshr i64 %84, 8
  %86 = trunc i64 %85 to i16
  %87 = sub i16 %86, %82
  %88 = add i16 %82, %78
  %89 = sub i16 %78, %82
  %90 = add i16 %87, %79
  %91 = sub i16 %79, %87
  %92 = getelementptr inbounds i16, i16* %20, i64 8
  %93 = load i16, i16* %92, align 2
  %94 = mul i16 %93, %23
  %95 = getelementptr inbounds i16, i16* %21, i64 24
  %96 = load i16, i16* %95, align 2
  %97 = getelementptr inbounds i16, i16* %20, i64 24
  %98 = load i16, i16* %97, align 2
  %99 = mul i16 %98, %96
  %100 = getelementptr inbounds i16, i16* %21, i64 40
  %101 = load i16, i16* %100, align 2
  %102 = getelementptr inbounds i16, i16* %20, i64 40
  %103 = load i16, i16* %102, align 2
  %104 = mul i16 %103, %101
  %105 = getelementptr inbounds i16, i16* %21, i64 56
  %106 = load i16, i16* %105, align 2
  %107 = getelementptr inbounds i16, i16* %20, i64 56
  %108 = load i16, i16* %107, align 2
  %109 = mul i16 %108, %106
  %110 = add i16 %104, %99
  %111 = sub i16 %104, %99
  %112 = add i16 %109, %94
  %113 = sub i16 %94, %109
  %114 = sext i16 %112 to i64
  %115 = sext i16 %110 to i64
  %116 = add i16 %112, %110
  %117 = sub nsw i64 %114, %115
  %118 = mul nsw i64 %117, 362
  %119 = lshr i64 %118, 8
  %120 = sext i16 %111 to i64
  %121 = sext i16 %113 to i64
  %122 = add nsw i64 %121, %120
  %123 = mul nsw i64 %122, 473
  %124 = lshr i64 %123, 8
  %125 = mul nsw i64 %121, 277
  %126 = lshr i64 %125, 8
  %127 = trunc i64 %126 to i32
  %128 = shl i64 %124, 16
  %129 = trunc i64 %128 to i32
  %130 = ashr exact i32 %129, 16
  %131 = sub i32 %127, %130
  %132 = mul nsw i64 %120, -669
  %133 = lshr i64 %132, 8
  %134 = trunc i64 %133 to i32
  %135 = add i32 %130, %134
  %136 = sext i16 %116 to i32
  %137 = trunc i32 %135 to i16
  %138 = sub i16 %137, %116
  %139 = trunc i64 %119 to i16
  %140 = sext i16 %138 to i32
  %141 = sub i16 %139, %138
  %142 = sext i16 %141 to i32
  %143 = trunc i32 %131 to i16
  %144 = add i16 %141, %143
  %145 = sext i16 %88 to i32
  %146 = add nsw i32 %136, %145
  store i32 %146, i32* %19, align 4
  %147 = sub nsw i32 %145, %136
  %148 = getelementptr inbounds i32, i32* %19, i64 56
  store i32 %147, i32* %148, align 4
  %149 = sext i16 %90 to i32
  %150 = add nsw i32 %140, %149
  %151 = getelementptr inbounds i32, i32* %19, i64 8
  store i32 %150, i32* %151, align 4
  %152 = sub nsw i32 %149, %140
  %153 = getelementptr inbounds i32, i32* %19, i64 48
  store i32 %152, i32* %153, align 4
  %154 = sext i16 %91 to i32
  %155 = add nsw i32 %142, %154
  %156 = getelementptr inbounds i32, i32* %19, i64 16
  store i32 %155, i32* %156, align 4
  %157 = sub nsw i32 %154, %142
  %158 = getelementptr inbounds i32, i32* %19, i64 40
  store i32 %157, i32* %158, align 4
  %159 = sext i16 %89 to i32
  %160 = sext i16 %144 to i32
  %161 = add nsw i32 %160, %159
  %162 = getelementptr inbounds i32, i32* %19, i64 32
  store i32 %161, i32* %162, align 4
  %163 = sub nsw i32 %159, %160
  br label %164

164:                                              ; preds = %60, %48
  %165 = phi i64 [ 24, %60 ], [ 56, %48 ]
  %166 = phi i32 [ %163, %60 ], [ %53, %48 ]
  %167 = getelementptr inbounds i32, i32* %19, i64 %165
  store i32 %166, i32* %167, align 4
  %168 = getelementptr inbounds i32, i32* %19, i64 1
  %169 = getelementptr inbounds i16, i16* %20, i64 1
  %170 = getelementptr inbounds i16, i16* %21, i64 1
  %171 = add nsw i32 %18, -1
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %14, label %17

173:                                              ; preds = %364, %14
  %174 = phi i64 [ 0, %14 ], [ %366, %364 ]
  %175 = phi i32* [ %13, %14 ], [ %365, %364 ]
  %176 = getelementptr inbounds i8*, i8** %3, i64 %174
  %177 = load i8*, i8** %176, align 8
  %178 = getelementptr inbounds i8, i8* %177, i64 %16
  %179 = getelementptr inbounds i32, i32* %175, i64 1
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds i32, i32* %175, i64 2
  %182 = load i32, i32* %181, align 4
  %183 = or i32 %180, %182
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %213

185:                                              ; preds = %173
  %186 = getelementptr inbounds i32, i32* %175, i64 3
  %187 = load i32, i32* %186, align 4
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %213

189:                                              ; preds = %185
  %190 = getelementptr inbounds i32, i32* %175, i64 4
  %191 = load i32, i32* %190, align 4
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %213

193:                                              ; preds = %189
  %194 = getelementptr inbounds i32, i32* %175, i64 5
  %195 = load i32, i32* %194, align 4
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %213

197:                                              ; preds = %193
  %198 = getelementptr inbounds i32, i32* %175, i64 6
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %213

201:                                              ; preds = %197
  %202 = getelementptr inbounds i32, i32* %175, i64 7
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %213

205:                                              ; preds = %201
  %206 = load i32, i32* %175, align 4
  %207 = lshr i32 %206, 5
  %208 = and i32 %207, 1023
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %15, i64 %209
  %211 = load i8, i8* %210, align 1
  store i8 %211, i8* %178, align 1
  %212 = getelementptr inbounds i8, i8* %178, i64 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %212, i8 %211, i64 7, i1 false)
  br label %364

213:                                              ; preds = %173, %201, %197, %193, %189, %185
  %214 = phi i32 [ 0, %201 ], [ 0, %197 ], [ 0, %193 ], [ 0, %189 ], [ 0, %185 ], [ %182, %173 ]
  %215 = load i32, i32* %175, align 4
  %216 = shl i32 %215, 16
  %217 = ashr exact i32 %216, 16
  %218 = getelementptr inbounds i32, i32* %175, i64 4
  %219 = load i32, i32* %218, align 4
  %220 = shl i32 %219, 16
  %221 = ashr exact i32 %220, 16
  %222 = add nsw i32 %221, %217
  %223 = sub nsw i32 %217, %221
  %224 = shl i32 %214, 16
  %225 = ashr exact i32 %224, 16
  %226 = getelementptr inbounds i32, i32* %175, i64 6
  %227 = load i32, i32* %226, align 4
  %228 = shl i32 %227, 16
  %229 = ashr exact i32 %228, 16
  %230 = add nsw i32 %229, %225
  %231 = sub nsw i32 %225, %229
  %232 = mul i32 %231, 92672
  %233 = shl i32 %230, 16
  %234 = ashr exact i32 %233, 16
  %235 = shl i32 %222, 16
  %236 = ashr exact i32 %235, 16
  %237 = add nsw i32 %234, %236
  %238 = sub nsw i32 %236, %234
  %239 = shl i32 %223, 16
  %240 = ashr exact i32 %239, 16
  %241 = sub i32 %232, %233
  %242 = ashr i32 %241, 16
  %243 = add nsw i32 %242, %240
  %244 = sub nsw i32 %240, %242
  %245 = getelementptr inbounds i32, i32* %175, i64 5
  %246 = load i32, i32* %245, align 4
  %247 = shl i32 %246, 16
  %248 = ashr exact i32 %247, 16
  %249 = getelementptr inbounds i32, i32* %175, i64 3
  %250 = load i32, i32* %249, align 4
  %251 = shl i32 %250, 16
  %252 = ashr exact i32 %251, 16
  %253 = add nsw i32 %252, %248
  %254 = sub nsw i32 %248, %252
  %255 = zext i32 %254 to i64
  %256 = shl i32 %180, 16
  %257 = ashr exact i32 %256, 16
  %258 = getelementptr inbounds i32, i32* %175, i64 7
  %259 = load i32, i32* %258, align 4
  %260 = shl i32 %259, 16
  %261 = ashr exact i32 %260, 16
  %262 = add nsw i32 %261, %257
  %263 = sub nsw i32 %257, %261
  %264 = zext i32 %263 to i64
  %265 = shl i32 %262, 16
  %266 = ashr exact i32 %265, 16
  %267 = shl i32 %253, 16
  %268 = ashr exact i32 %267, 16
  %269 = add nsw i32 %266, %268
  %270 = sub nsw i32 %266, %268
  %271 = shl i32 %254, 16
  %272 = ashr exact i32 %271, 16
  %273 = shl i32 %263, 16
  %274 = ashr exact i32 %273, 16
  %275 = add nsw i32 %274, %272
  %276 = shl i64 %264, 48
  %277 = ashr exact i64 %276, 48
  %278 = mul nsw i64 %277, 277
  %279 = lshr i64 %278, 8
  %280 = trunc i64 %279 to i32
  %281 = mul i32 %275, 121088
  %282 = ashr i32 %281, 16
  %283 = sub i32 %280, %282
  %284 = shl i64 %255, 48
  %285 = ashr exact i64 %284, 48
  %286 = mul nsw i64 %285, -669
  %287 = lshr i64 %286, 8
  %288 = trunc i64 %287 to i32
  %289 = add i32 %282, %288
  %290 = shl i32 %269, 16
  %291 = ashr exact i32 %290, 16
  %292 = sub i32 %289, %291
  %293 = mul i32 %270, 92672
  %294 = shl i32 %292, 16
  %295 = ashr exact i32 %294, 16
  %296 = sub i32 %293, %294
  %297 = ashr i32 %296, 16
  %298 = add i32 %283, %297
  %299 = shl i32 %237, 16
  %300 = ashr exact i32 %299, 16
  %301 = add nsw i32 %291, %300
  %302 = lshr i32 %301, 5
  %303 = and i32 %302, 1023
  %304 = zext i32 %303 to i64
  %305 = getelementptr inbounds i8, i8* %15, i64 %304
  %306 = load i8, i8* %305, align 1
  store i8 %306, i8* %178, align 1
  %307 = sub nsw i32 %300, %291
  %308 = lshr i32 %307, 5
  %309 = and i32 %308, 1023
  %310 = zext i32 %309 to i64
  %311 = getelementptr inbounds i8, i8* %15, i64 %310
  %312 = load i8, i8* %311, align 1
  %313 = getelementptr inbounds i8, i8* %178, i64 7
  store i8 %312, i8* %313, align 1
  %314 = shl i32 %243, 16
  %315 = ashr exact i32 %314, 16
  %316 = add nsw i32 %295, %315
  %317 = lshr i32 %316, 5
  %318 = and i32 %317, 1023
  %319 = zext i32 %318 to i64
  %320 = getelementptr inbounds i8, i8* %15, i64 %319
  %321 = load i8, i8* %320, align 1
  %322 = getelementptr inbounds i8, i8* %178, i64 1
  store i8 %321, i8* %322, align 1
  %323 = sub nsw i32 %315, %295
  %324 = lshr i32 %323, 5
  %325 = and i32 %324, 1023
  %326 = zext i32 %325 to i64
  %327 = getelementptr inbounds i8, i8* %15, i64 %326
  %328 = load i8, i8* %327, align 1
  %329 = getelementptr inbounds i8, i8* %178, i64 6
  store i8 %328, i8* %329, align 1
  %330 = shl i32 %244, 16
  %331 = ashr exact i32 %330, 16
  %332 = add nsw i32 %297, %331
  %333 = lshr i32 %332, 5
  %334 = and i32 %333, 1023
  %335 = zext i32 %334 to i64
  %336 = getelementptr inbounds i8, i8* %15, i64 %335
  %337 = load i8, i8* %336, align 1
  %338 = getelementptr inbounds i8, i8* %178, i64 2
  store i8 %337, i8* %338, align 1
  %339 = sub nsw i32 %331, %297
  %340 = lshr i32 %339, 5
  %341 = and i32 %340, 1023
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds i8, i8* %15, i64 %342
  %344 = load i8, i8* %343, align 1
  %345 = getelementptr inbounds i8, i8* %178, i64 5
  store i8 %344, i8* %345, align 1
  %346 = shl i32 %238, 16
  %347 = ashr exact i32 %346, 16
  %348 = shl i32 %298, 16
  %349 = ashr exact i32 %348, 16
  %350 = add nsw i32 %349, %347
  %351 = lshr i32 %350, 5
  %352 = and i32 %351, 1023
  %353 = zext i32 %352 to i64
  %354 = getelementptr inbounds i8, i8* %15, i64 %353
  %355 = load i8, i8* %354, align 1
  %356 = getelementptr inbounds i8, i8* %178, i64 4
  store i8 %355, i8* %356, align 1
  %357 = sub nsw i32 %347, %349
  %358 = lshr i32 %357, 5
  %359 = and i32 %358, 1023
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds i8, i8* %15, i64 %360
  %362 = load i8, i8* %361, align 1
  %363 = getelementptr inbounds i8, i8* %178, i64 3
  store i8 %362, i8* %363, align 1
  br label %364

364:                                              ; preds = %213, %205
  %365 = getelementptr inbounds i32, i32* %175, i64 8
  %366 = add nuw nsw i64 %174, 1
  %367 = icmp eq i64 %366, 8
  br i1 %367, label %368, label %173

368:                                              ; preds = %364
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
