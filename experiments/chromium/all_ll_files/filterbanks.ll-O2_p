; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/filterbanks.c'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/filterbanks.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.PostFiltBankstr = type { [6 x double], [6 x double], [2 x double], [2 x double], [6 x float], [6 x float], [2 x float], [2 x float] }

@WebRtcIsac_kLowerApFactorsFloat = external constant [2 x float], align 4
@WebRtcIsac_kUpperApFactorsFloat = external constant [2 x float], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_FilterAndCombineFloat(float* nocapture readonly, float* nocapture readonly, float* nocapture, %struct.PostFiltBankstr*) local_unnamed_addr #0 {
  %5 = alloca [492 x float], align 16
  %6 = alloca [492 x float], align 16
  %7 = bitcast [492 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1968, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -1, i64 1968, i1 false)
  %8 = bitcast [492 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1968, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 1968, i1 false)
  br label %9

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %60, %9 ]
  %11 = getelementptr inbounds float, float* %0, i64 %10
  %12 = bitcast float* %11 to <4 x float>*
  %13 = load <4 x float>, <4 x float>* %12, align 4
  %14 = getelementptr inbounds float, float* %11, i64 4
  %15 = bitcast float* %14 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 4
  %17 = getelementptr inbounds float, float* %1, i64 %10
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 4
  %20 = getelementptr inbounds float, float* %17, i64 4
  %21 = bitcast float* %20 to <4 x float>*
  %22 = load <4 x float>, <4 x float>* %21, align 4
  %23 = fadd <4 x float> %13, %19
  %24 = fadd <4 x float> %16, %22
  %25 = getelementptr inbounds [492 x float], [492 x float]* %5, i64 0, i64 %10
  %26 = bitcast float* %25 to <4 x float>*
  store <4 x float> %23, <4 x float>* %26, align 16
  %27 = getelementptr inbounds float, float* %25, i64 4
  %28 = bitcast float* %27 to <4 x float>*
  store <4 x float> %24, <4 x float>* %28, align 16
  %29 = fsub <4 x float> %13, %19
  %30 = fsub <4 x float> %16, %22
  %31 = getelementptr inbounds [492 x float], [492 x float]* %6, i64 0, i64 %10
  %32 = bitcast float* %31 to <4 x float>*
  store <4 x float> %29, <4 x float>* %32, align 16
  %33 = getelementptr inbounds float, float* %31, i64 4
  %34 = bitcast float* %33 to <4 x float>*
  store <4 x float> %30, <4 x float>* %34, align 16
  %35 = or i64 %10, 8
  %36 = getelementptr inbounds float, float* %0, i64 %35
  %37 = bitcast float* %36 to <4 x float>*
  %38 = load <4 x float>, <4 x float>* %37, align 4
  %39 = getelementptr inbounds float, float* %36, i64 4
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 4
  %42 = getelementptr inbounds float, float* %1, i64 %35
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 4
  %45 = getelementptr inbounds float, float* %42, i64 4
  %46 = bitcast float* %45 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 4
  %48 = fadd <4 x float> %38, %44
  %49 = fadd <4 x float> %41, %47
  %50 = getelementptr inbounds [492 x float], [492 x float]* %5, i64 0, i64 %35
  %51 = bitcast float* %50 to <4 x float>*
  store <4 x float> %48, <4 x float>* %51, align 16
  %52 = getelementptr inbounds float, float* %50, i64 4
  %53 = bitcast float* %52 to <4 x float>*
  store <4 x float> %49, <4 x float>* %53, align 16
  %54 = fsub <4 x float> %38, %44
  %55 = fsub <4 x float> %41, %47
  %56 = getelementptr inbounds [492 x float], [492 x float]* %6, i64 0, i64 %35
  %57 = bitcast float* %56 to <4 x float>*
  store <4 x float> %54, <4 x float>* %57, align 16
  %58 = getelementptr inbounds float, float* %56, i64 4
  %59 = bitcast float* %58 to <4 x float>*
  store <4 x float> %55, <4 x float>* %59, align 16
  %60 = add nuw nsw i64 %10, 16
  %61 = icmp eq i64 %60, 240
  br i1 %61, label %62, label %9, !llvm.loop !2

62:                                               ; preds = %9
  %63 = getelementptr inbounds [492 x float], [492 x float]* %5, i64 0, i64 0
  %64 = getelementptr inbounds %struct.PostFiltBankstr, %struct.PostFiltBankstr* %3, i64 0, i32 5, i64 0
  call void @WebRtcIsac_AllPassFilter2Float(float* nonnull %63, float* getelementptr inbounds ([2 x float], [2 x float]* @WebRtcIsac_kLowerApFactorsFloat, i64 0, i64 0), i32 240, i32 2, float* %64) #3
  %65 = getelementptr inbounds [492 x float], [492 x float]* %6, i64 0, i64 0
  %66 = getelementptr inbounds %struct.PostFiltBankstr, %struct.PostFiltBankstr* %3, i64 0, i32 4, i64 0
  call void @WebRtcIsac_AllPassFilter2Float(float* nonnull %65, float* getelementptr inbounds ([2 x float], [2 x float]* @WebRtcIsac_kUpperApFactorsFloat, i64 0, i64 0), i32 240, i32 2, float* %66) #3
  %67 = getelementptr inbounds float, float* %2, i64 -1
  %68 = getelementptr inbounds float, float* %2, i64 -1
  %69 = getelementptr inbounds float, float* %2, i64 -1
  br label %70

70:                                               ; preds = %70, %62
  %71 = phi i64 [ 0, %62 ], [ %107, %70 ]
  %72 = getelementptr inbounds [492 x float], [492 x float]* %6, i64 0, i64 %71
  %73 = bitcast float* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 16
  %75 = shl nuw nsw i64 %71, 1
  %76 = getelementptr inbounds [492 x float], [492 x float]* %5, i64 0, i64 %71
  %77 = bitcast float* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 16
  %79 = or i64 %75, 1
  %80 = getelementptr inbounds float, float* %67, i64 %79
  %81 = bitcast float* %80 to <8 x i32>*
  %82 = shufflevector <4 x i32> %74, <4 x i32> %78, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %82, <8 x i32>* %81, align 4
  %83 = add nuw nsw i64 %71, 4
  %84 = getelementptr inbounds [492 x float], [492 x float]* %6, i64 0, i64 %83
  %85 = bitcast float* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 16
  %87 = shl nuw nsw i64 %83, 1
  %88 = getelementptr inbounds [492 x float], [492 x float]* %5, i64 0, i64 %83
  %89 = bitcast float* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 16
  %91 = or i64 %87, 1
  %92 = getelementptr inbounds float, float* %68, i64 %91
  %93 = bitcast float* %92 to <8 x i32>*
  %94 = shufflevector <4 x i32> %86, <4 x i32> %90, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %94, <8 x i32>* %93, align 4
  %95 = add nuw nsw i64 %71, 8
  %96 = getelementptr inbounds [492 x float], [492 x float]* %6, i64 0, i64 %95
  %97 = bitcast float* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 16
  %99 = shl nuw nsw i64 %95, 1
  %100 = getelementptr inbounds [492 x float], [492 x float]* %5, i64 0, i64 %95
  %101 = bitcast float* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 16
  %103 = or i64 %99, 1
  %104 = getelementptr inbounds float, float* %69, i64 %103
  %105 = bitcast float* %104 to <8 x i32>*
  %106 = shufflevector <4 x i32> %98, <4 x i32> %102, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %106, <8 x i32>* %105, align 4
  %107 = add nuw nsw i64 %71, 12
  %108 = icmp eq i64 %107, 240
  br i1 %108, label %109, label %70, !llvm.loop !4

109:                                              ; preds = %70
  %110 = getelementptr inbounds %struct.PostFiltBankstr, %struct.PostFiltBankstr* %3, i64 0, i32 6, i64 0
  %111 = getelementptr inbounds %struct.PostFiltBankstr, %struct.PostFiltBankstr* %3, i64 0, i32 6, i64 1
  br label %115

112:                                              ; preds = %115
  %113 = getelementptr inbounds %struct.PostFiltBankstr, %struct.PostFiltBankstr* %3, i64 0, i32 7, i64 0
  %114 = getelementptr inbounds %struct.PostFiltBankstr, %struct.PostFiltBankstr* %3, i64 0, i32 7, i64 1
  br label %131

115:                                              ; preds = %115, %109
  %116 = phi i64 [ 0, %109 ], [ %129, %115 ]
  %117 = getelementptr inbounds float, float* %2, i64 %116
  %118 = load float, float* %117, align 4
  %119 = load float, float* %110, align 8
  %120 = fmul float %119, 0x3F916B32E0000000
  %121 = fadd float %118, %120
  %122 = load float, float* %111, align 4
  %123 = fmul float %122, 0x3F91737840000000
  %124 = fsub float %121, %123
  %125 = fmul float %119, 0x3FFFF3C140000000
  %126 = fadd float %118, %125
  %127 = fmul float %122, 0x3FEFE89660000000
  %128 = fsub float %126, %127
  store float %119, float* %111, align 4
  store float %128, float* %110, align 8
  store float %124, float* %117, align 4
  %129 = add nuw nsw i64 %116, 1
  %130 = icmp eq i64 %129, 480
  br i1 %130, label %112, label %115

131:                                              ; preds = %131, %112
  %132 = phi i64 [ 0, %112 ], [ %145, %131 ]
  %133 = getelementptr inbounds float, float* %2, i64 %132
  %134 = load float, float* %133, align 4
  %135 = load float, float* %113, align 8
  %136 = fmul float %135, 0x3F7A6E6740000000
  %137 = fadd float %134, %136
  %138 = load float, float* %114, align 4
  %139 = fmul float %138, 0x3F7B2223E0000000
  %140 = fsub float %137, %139
  %141 = fmul float %135, 0x3FFFC882E0000000
  %142 = fadd float %134, %141
  %143 = fmul float %138, 0x3FEF933F00000000
  %144 = fsub float %142, %143
  store float %135, float* %114, align 4
  store float %144, float* %113, align 8
  store float %140, float* %133, align 4
  %145 = add nuw nsw i64 %132, 1
  %146 = icmp eq i64 %145, 480
  br i1 %146, label %147, label %131

147:                                              ; preds = %131
  call void @llvm.lifetime.end.p0i8(i64 1968, i8* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 1968, i8* nonnull %7) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @WebRtcIsac_AllPassFilter2Float(float*, float*, i32, i32, float*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
