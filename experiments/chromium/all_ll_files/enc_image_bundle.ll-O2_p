; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_image_bundle.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_image_bundle.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::ColorSpaceTransform" = type <{ %"class.std::__1::unique_ptr.96", %"class.jxl::Plane", %"class.jxl::Plane", float, [4 x i8], i64, i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.jxl::ColorSpaceTransform::SkcmsICC"* }
%"struct.jxl::ColorSpaceTransform::SkcmsICC" = type opaque
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr.75" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i8* }
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.85", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.10", %"class.std::__1::vector", %"class.std::__1::vector.17", %"class.std::__1::vector.24", %"class.std::__1::vector.33", %"class.std::__1::vector.47", %"class.std::__1::vector.0", %"class.std::__1::vector", %"class.std::__1::vector.0", i32, i8, %"class.std::__1::vector.0" }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { i32*, i32*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i32* }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.19" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.28" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.26", %"struct.std::__1::array.27", i32, i8, [3 x i8] }>
%"struct.std::__1::array.26" = type { [17 x i32] }
%"struct.std::__1::array.27" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.42" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.35" }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { i16*, i16*, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { i16* }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.64" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.49", i32, %"class.std::__1::vector.50", %"class.std::__1::vector.57" }
%"struct.std::__1::array.49" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { i32*, i32*, %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { i32* }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.59" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i8*, i8*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.78", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.80" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.jxl::ExtraChannelInfo"* }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr.75" }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.jxl::Plane"* }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"class.jxl::ThreadPool::RunCallState.107" = type { %class.anon.105*, %class.anon.106* }
%class.anon.105 = type { %"class.jxl::ColorSpaceTransform"*, %"class.jxl::ImageBundle"**, %"struct.jxl::ColorEncoding"*, %"struct.jxl::ImageMetadata"**, %"class.jxl::Rect"* }
%class.anon.106 = type { %"class.jxl::ColorSpaceTransform"*, i8*, %"class.jxl::Rect"*, %"class.jxl::ImageBundle"**, %"class.jxl::Image3"** }
%"class.jxl::Image3.92" = type { [3 x %"class.jxl::Plane.93"] }
%"class.jxl::Plane.93" = type { %"struct.jxl::PlaneBase" }
%"class.jxl::ThreadPool::RunCallState" = type { %class.anon*, %class.anon.102* }
%class.anon = type { %"class.jxl::ColorSpaceTransform"*, %"class.jxl::ImageBundle"**, %"struct.jxl::ColorEncoding"*, %"struct.jxl::ImageMetadata"**, %"class.jxl::Rect"* }
%class.anon.102 = type { %"class.jxl::ColorSpaceTransform"*, i8*, %"class.jxl::Rect"*, %"class.jxl::ImageBundle"**, %"class.jxl::Image3.92"** }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_ = comdat any

$_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_ = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_ = comdat any

$_ZN3jxl6Image3IhE8ShrinkToEmm = comdat any

$_ZN3jxl6Image3IfE8ShrinkToEmm = comdat any

@.str.1 = private unnamed_addr constant [57 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_image_bundle.cc\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"SameSize(rect_from, rect_to)\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [35 x i8] c"ib->IsGray() == c_desired.IsGray()\00", align 1
@.str.10 = private unnamed_addr constant [21 x i8] c"Colorspace transform\00", align 1
@.str.11 = private unnamed_addr constant [45 x i8] c"../../third_party/libjxl/src/lib/jxl/image.h\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"xsize <= orig_xsize_\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"ysize <= orig_ysize_\00", align 1
@.str.16 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/image_metadata.h\00", align 1
@.str.17 = private unnamed_addr constant [35 x i8] c"tone_mapping.intensity_target != 0\00", align 1
@__const._ZN3jxl12_GLOBAL__N_17CopyToTIfEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPNS_10ThreadPoolEPNS_6Image3IT_EE.c_transform = private unnamed_addr constant %"class.jxl::ColorSpaceTransform" <{ %"class.std::__1::unique_ptr.96" { %"class.std::__1::__compressed_pair.97" { %"struct.std::__1::__compressed_pair_elem.98" { %"struct.jxl::ColorSpaceTransform::SkcmsICC"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ColorSpaceTransform::SkcmsICC"*) } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr.75" { %"class.std::__1::__compressed_pair.76" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr.75" { %"class.std::__1::__compressed_pair.76" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl11ImageBundle11TransformToERKNS_13ColorEncodingEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"*, %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::ThreadPool"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %7 = bitcast %"class.jxl::Image3"* %6 to <2 x i32>*
  %8 = load <2 x i32>, <2 x i32>* %7, align 8
  %9 = zext <2 x i32> %8 to <2 x i64>
  %10 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #5
  %11 = bitcast i64* %10 to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %11, align 8
  %12 = call i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* %0, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"struct.jxl::ColorEncoding"* dereferenceable(152) %1, %"class.jxl::Image3"* %6, %"class.jxl::ThreadPool"* %2)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #5
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %65

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %16 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 12, i1 false) #5
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %18 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 1
  %19 = bitcast i32* %17 to i8*
  %20 = bitcast i32* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false) #5
  %21 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %22 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 5
  %23 = bitcast i32* %21 to i8*
  %24 = bitcast i32* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 6, i1 false) #5
  %25 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8
  %26 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 8, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = icmp ult i64 %29, %27
  br i1 %30, label %31, label %32

31:                                               ; preds = %14
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %25, i64 %27) #5
  br label %32

32:                                               ; preds = %31, %14
  %33 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  %36 = select i1 %35, i64 0, i64 %27
  %37 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %25, i64 0, i32 0
  store i64 %36, i64* %37, align 8
  br i1 %35, label %41, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* align 1 %40, i64 %36, i1 false) #5
  br label %41

41:                                               ; preds = %32, %38
  %42 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 9
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  store i32 %43, i32* %44, align 8
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %46 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 10, i32 1
  %47 = bitcast i32* %46 to i64*
  %48 = bitcast i32* %45 to i64*
  %49 = load i64, i64* %47, align 8
  store i64 %49, i64* %48, align 8
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %51 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 11, i32 1
  %52 = bitcast i32* %51 to i64*
  %53 = bitcast i32* %50 to i64*
  %54 = load i64, i64* %52, align 8
  store i64 %54, i64* %53, align 8
  %55 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %56 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 12, i32 1
  %57 = bitcast i32* %56 to i64*
  %58 = bitcast i32* %55 to i64*
  %59 = load i64, i64* %57, align 8
  store i64 %59, i64* %58, align 8
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %61 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 13, i32 1
  %62 = bitcast i32* %61 to i64*
  %63 = bitcast i32* %60 to i64*
  %64 = load i64, i64* %62, align 8
  store i64 %64, i64* %63, align 8
  br label %65

65:                                               ; preds = %3, %41
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"*, %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::Image3"*, %"class.jxl::ThreadPool"* readonly) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.107", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.107", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca %"struct.jxl::ImageMetadata"*, align 8
  %11 = alloca %"class.jxl::ImageBundle"*, align 8
  %12 = alloca %"class.jxl::Image3"*, align 8
  %13 = alloca %"class.jxl::ColorSpaceTransform", align 8
  %14 = alloca i8, align 1
  %15 = alloca %"class.jxl::Image3", align 8
  %16 = alloca %class.anon.105, align 8
  %17 = alloca %class.anon.106, align 8
  %18 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %19 = bitcast %"struct.jxl::ImageMetadata"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.jxl::ImageMetadata"** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = bitcast %"class.jxl::ImageBundle"** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = bitcast %"class.jxl::Image3"** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23)
  %24 = bitcast %"struct.jxl::ImageMetadata"** %10 to i64*
  store i64 %20, i64* %24, align 8
  store %"class.jxl::ImageBundle"* %0, %"class.jxl::ImageBundle"** %11, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %12, align 8
  %25 = bitcast %"class.jxl::ColorSpaceTransform"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %25) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %25, i8* align 8 bitcast (%"class.jxl::ColorSpaceTransform"* @__const._ZN3jxl12_GLOBAL__N_17CopyToTIfEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPNS_10ThreadPoolEPNS_6Image3IT_EE.c_transform to i8*), i64 104, i1 false) #5
  call void @_ZN3jxl19ColorSpaceTransformC1Ev(%"class.jxl::ColorSpaceTransform"* nonnull %13) #5
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 1
  %29 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 9
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 1
  %32 = xor i1 %28, %31
  br i1 %32, label %33, label %36

33:                                               ; preds = %5
  %34 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 45, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.9, i64 0, i64 0)) #5
  %35 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

36:                                               ; preds = %5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #5
  store i8 0, i8* %14, align 1
  %37 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = icmp ugt i64 %41, %39
  br i1 %42, label %43, label %46

43:                                               ; preds = %36
  %44 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  br label %53

46:                                               ; preds = %36
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %51 = load i64, i64* %50, align 8
  %52 = icmp ugt i64 %51, %49
  br i1 %52, label %53, label %117

53:                                               ; preds = %46, %43
  %54 = phi i64 [ %45, %43 ], [ %51, %46 ]
  %55 = bitcast %"class.jxl::Image3"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %55) #5
  %56 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %56, i64 %41, i64 %54, i64 4) #5
  %57 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %57, i64 %41, i64 %54, i64 4) #5
  %58 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %58, i64 %41, i64 %54, i64 4) #5
  %59 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %12, align 8
  %60 = bitcast %"class.jxl::Image3"* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* nonnull align 8 %55, i64 24, i1 false) #5
  %61 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 0, i32 0, i64 0, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 0, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr.75"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %61, i64 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.75"* %61 to i64*
  store i64 %65, i64* %68, align 8
  %69 = icmp eq i8* %67, null
  br i1 %69, label %71, label %70

70:                                               ; preds = %53
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #5
  br label %71

71:                                               ; preds = %70, %53
  %72 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 1
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 0, i32 0, i64 1
  %74 = bitcast %"class.jxl::Plane"* %73 to i8*
  %75 = bitcast %"class.jxl::Plane"* %72 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 24, i1 false) #5
  %76 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 0, i32 0, i64 1, i32 0, i32 5
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 1, i32 0, i32 5
  %78 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %77, i64 0, i32 0, i32 0, i32 0
  %79 = bitcast %"class.std::__1::unique_ptr.75"* %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i8* null, i8** %78, align 8
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %76, i64 0, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = bitcast %"class.std::__1::unique_ptr.75"* %76 to i64*
  store i64 %80, i64* %83, align 8
  %84 = icmp eq i8* %82, null
  br i1 %84, label %86, label %85

85:                                               ; preds = %71
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %82) #5
  br label %86

86:                                               ; preds = %85, %71
  %87 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 2
  %88 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 0, i32 0, i64 2
  %89 = bitcast %"class.jxl::Plane"* %88 to i8*
  %90 = bitcast %"class.jxl::Plane"* %87 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 24, i1 false) #5
  %91 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 0, i32 0, i64 2, i32 0, i32 5
  %92 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 2, i32 0, i32 5
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.75"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store i8* null, i8** %93, align 8
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %91, i64 0, i32 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = bitcast %"class.std::__1::unique_ptr.75"* %91 to i64*
  store i64 %95, i64* %98, align 8
  %99 = icmp eq i8* %97, null
  br i1 %99, label %101, label %100

100:                                              ; preds = %86
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %97) #5
  br label %101

101:                                              ; preds = %100, %86
  %102 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  store i8* null, i8** %102, align 8
  %104 = icmp eq i8* %103, null
  br i1 %104, label %106, label %105

105:                                              ; preds = %101
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %103) #5
  br label %106

106:                                              ; preds = %105, %101
  %107 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  store i8* null, i8** %107, align 8
  %109 = icmp eq i8* %108, null
  br i1 %109, label %111, label %110

110:                                              ; preds = %106
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %108) #5
  br label %111

111:                                              ; preds = %110, %106
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  store i8* null, i8** %112, align 8
  %114 = icmp eq i8* %113, null
  br i1 %114, label %116, label %115

115:                                              ; preds = %111
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %113) #5
  br label %116

116:                                              ; preds = %115, %111
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %55) #5
  br label %118

117:                                              ; preds = %46
  call void @_ZN3jxl6Image3IfE8ShrinkToEmm(%"class.jxl::Image3"* %3, i64 %41, i64 %51) #5
  br label %118

118:                                              ; preds = %117, %116
  %119 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %120 = load i64, i64* %119, align 8
  %121 = trunc i64 %120 to i32
  %122 = bitcast %class.anon.105* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %122) #5
  %123 = getelementptr inbounds %class.anon.105, %class.anon.105* %16, i64 0, i32 0
  store %"class.jxl::ColorSpaceTransform"* %13, %"class.jxl::ColorSpaceTransform"** %123, align 8
  %124 = getelementptr inbounds %class.anon.105, %class.anon.105* %16, i64 0, i32 1
  store %"class.jxl::ImageBundle"** %11, %"class.jxl::ImageBundle"*** %124, align 8
  %125 = getelementptr inbounds %class.anon.105, %class.anon.105* %16, i64 0, i32 2
  store %"struct.jxl::ColorEncoding"* %2, %"struct.jxl::ColorEncoding"** %125, align 8
  %126 = getelementptr inbounds %class.anon.105, %class.anon.105* %16, i64 0, i32 3
  store %"struct.jxl::ImageMetadata"** %10, %"struct.jxl::ImageMetadata"*** %126, align 8
  %127 = getelementptr inbounds %class.anon.105, %class.anon.105* %16, i64 0, i32 4
  store %"class.jxl::Rect"* %1, %"class.jxl::Rect"** %127, align 8
  %128 = bitcast %class.anon.106* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %128) #5
  %129 = getelementptr inbounds %class.anon.106, %class.anon.106* %17, i64 0, i32 0
  store %"class.jxl::ColorSpaceTransform"* %13, %"class.jxl::ColorSpaceTransform"** %129, align 8
  %130 = getelementptr inbounds %class.anon.106, %class.anon.106* %17, i64 0, i32 1
  store i8* %14, i8** %130, align 8
  %131 = getelementptr inbounds %class.anon.106, %class.anon.106* %17, i64 0, i32 2
  store %"class.jxl::Rect"* %1, %"class.jxl::Rect"** %131, align 8
  %132 = getelementptr inbounds %class.anon.106, %class.anon.106* %17, i64 0, i32 3
  store %"class.jxl::ImageBundle"** %11, %"class.jxl::ImageBundle"*** %132, align 8
  %133 = getelementptr inbounds %class.anon.106, %class.anon.106* %17, i64 0, i32 4
  store %"class.jxl::Image3"** %12, %"class.jxl::Image3"*** %133, align 8
  %134 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0), double* nonnull %8) #5
  %135 = icmp eq %"class.jxl::ThreadPool"* %4, null
  br i1 %135, label %136, label %147

136:                                              ; preds = %118
  %137 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #5
  %138 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %139 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %138, align 8
  %140 = bitcast i8** %139 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %140, align 8
  %141 = icmp eq i32 %121, 0
  br i1 %141, label %158, label %142

142:                                              ; preds = %136
  %143 = bitcast %"class.jxl::ThreadPool::RunCallState.107"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %143) #5
  %144 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.107", %"class.jxl::ThreadPool::RunCallState.107"* %6, i64 0, i32 0
  %145 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.107", %"class.jxl::ThreadPool::RunCallState.107"* %6, i64 0, i32 1
  store %class.anon.105* %16, %class.anon.105** %144, align 8
  store %class.anon.106* %17, %class.anon.106** %145, align 8
  %146 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %137, i8* nonnull %143, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIfEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IfEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIfEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IfEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallDataFuncEPvjm, i32 0, i32 %121) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %143) #5
  br label %158

147:                                              ; preds = %118
  %148 = icmp eq i32 %121, 0
  br i1 %148, label %160, label %149

149:                                              ; preds = %147
  %150 = bitcast %"class.jxl::ThreadPool::RunCallState.107"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %150) #5
  %151 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.107", %"class.jxl::ThreadPool::RunCallState.107"* %7, i64 0, i32 0
  %152 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.107", %"class.jxl::ThreadPool::RunCallState.107"* %7, i64 0, i32 1
  store %class.anon.105* %16, %class.anon.105** %151, align 8
  store %class.anon.106* %17, %class.anon.106** %152, align 8
  %153 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %154 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %153, align 8
  %155 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %156 = load i8*, i8** %155, align 8
  %157 = call i32 %154(i8* %156, i8* nonnull %150, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIfEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IfEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIfEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IfEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallDataFuncEPvjm, i32 0, i32 %121) #5
  br label %158

158:                                              ; preds = %136, %142, %149
  %159 = phi i8* [ %150, %149 ], [ %137, %142 ], [ %137, %136 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %159) #5
  br label %160

160:                                              ; preds = %158, %147
  %161 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0), double %161) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %128) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %122) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #5
  call void @_ZN3jxl19ColorSpaceTransformD1Ev(%"class.jxl::ColorSpaceTransform"* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %25) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23)
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IhEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"*, %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::Image3.92"*, %"class.jxl::ThreadPool"* readonly) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca %"struct.jxl::ImageMetadata"*, align 8
  %11 = alloca %"class.jxl::ImageBundle"*, align 8
  %12 = alloca %"class.jxl::Image3.92"*, align 8
  %13 = alloca %"class.jxl::ColorSpaceTransform", align 8
  %14 = alloca i8, align 1
  %15 = alloca %"class.jxl::Image3.92", align 8
  %16 = alloca %class.anon, align 8
  %17 = alloca %class.anon.102, align 8
  %18 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %19 = bitcast %"struct.jxl::ImageMetadata"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.jxl::ImageMetadata"** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = bitcast %"class.jxl::ImageBundle"** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = bitcast %"class.jxl::Image3.92"** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23)
  %24 = bitcast %"struct.jxl::ImageMetadata"** %10 to i64*
  store i64 %20, i64* %24, align 8
  store %"class.jxl::ImageBundle"* %0, %"class.jxl::ImageBundle"** %11, align 8
  store %"class.jxl::Image3.92"* %3, %"class.jxl::Image3.92"** %12, align 8
  %25 = bitcast %"class.jxl::ColorSpaceTransform"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %25) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %25, i8* align 8 bitcast (%"class.jxl::ColorSpaceTransform"* @__const._ZN3jxl12_GLOBAL__N_17CopyToTIfEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPNS_10ThreadPoolEPNS_6Image3IT_EE.c_transform to i8*), i64 104, i1 false) #5
  call void @_ZN3jxl19ColorSpaceTransformC1Ev(%"class.jxl::ColorSpaceTransform"* nonnull %13) #5
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 1
  %29 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %2, i64 0, i32 9
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 1
  %32 = xor i1 %28, %31
  br i1 %32, label %33, label %36

33:                                               ; preds = %5
  %34 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 45, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.9, i64 0, i64 0)) #5
  %35 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

36:                                               ; preds = %5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #5
  store i8 0, i8* %14, align 1
  %37 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %3, i64 0, i32 0, i64 0, i32 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = icmp ugt i64 %41, %39
  br i1 %42, label %43, label %46

43:                                               ; preds = %36
  %44 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  br label %53

46:                                               ; preds = %36
  %47 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %3, i64 0, i32 0, i64 0, i32 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %51 = load i64, i64* %50, align 8
  %52 = icmp ugt i64 %51, %49
  br i1 %52, label %53, label %117

53:                                               ; preds = %46, %43
  %54 = phi i64 [ %45, %43 ], [ %51, %46 ]
  %55 = bitcast %"class.jxl::Image3.92"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %55) #5
  %56 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %15, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %56, i64 %41, i64 %54, i64 1) #5
  %57 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %15, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %57, i64 %41, i64 %54, i64 1) #5
  %58 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %15, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %58, i64 %41, i64 %54, i64 1) #5
  %59 = load %"class.jxl::Image3.92"*, %"class.jxl::Image3.92"** %12, align 8
  %60 = bitcast %"class.jxl::Image3.92"* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* nonnull align 8 %55, i64 24, i1 false) #5
  %61 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %59, i64 0, i32 0, i64 0, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %15, i64 0, i32 0, i64 0, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr.75"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %61, i64 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.75"* %61 to i64*
  store i64 %65, i64* %68, align 8
  %69 = icmp eq i8* %67, null
  br i1 %69, label %71, label %70

70:                                               ; preds = %53
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #5
  br label %71

71:                                               ; preds = %70, %53
  %72 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %15, i64 0, i32 0, i64 1
  %73 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %59, i64 0, i32 0, i64 1
  %74 = bitcast %"class.jxl::Plane.93"* %73 to i8*
  %75 = bitcast %"class.jxl::Plane.93"* %72 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 24, i1 false) #5
  %76 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %59, i64 0, i32 0, i64 1, i32 0, i32 5
  %77 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %15, i64 0, i32 0, i64 1, i32 0, i32 5
  %78 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %77, i64 0, i32 0, i32 0, i32 0
  %79 = bitcast %"class.std::__1::unique_ptr.75"* %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i8* null, i8** %78, align 8
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %76, i64 0, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = bitcast %"class.std::__1::unique_ptr.75"* %76 to i64*
  store i64 %80, i64* %83, align 8
  %84 = icmp eq i8* %82, null
  br i1 %84, label %86, label %85

85:                                               ; preds = %71
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %82) #5
  br label %86

86:                                               ; preds = %85, %71
  %87 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %15, i64 0, i32 0, i64 2
  %88 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %59, i64 0, i32 0, i64 2
  %89 = bitcast %"class.jxl::Plane.93"* %88 to i8*
  %90 = bitcast %"class.jxl::Plane.93"* %87 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 24, i1 false) #5
  %91 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %59, i64 0, i32 0, i64 2, i32 0, i32 5
  %92 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %15, i64 0, i32 0, i64 2, i32 0, i32 5
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.75"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store i8* null, i8** %93, align 8
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %91, i64 0, i32 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = bitcast %"class.std::__1::unique_ptr.75"* %91 to i64*
  store i64 %95, i64* %98, align 8
  %99 = icmp eq i8* %97, null
  br i1 %99, label %101, label %100

100:                                              ; preds = %86
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %97) #5
  br label %101

101:                                              ; preds = %100, %86
  %102 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %15, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  store i8* null, i8** %102, align 8
  %104 = icmp eq i8* %103, null
  br i1 %104, label %106, label %105

105:                                              ; preds = %101
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %103) #5
  br label %106

106:                                              ; preds = %105, %101
  %107 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %15, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  store i8* null, i8** %107, align 8
  %109 = icmp eq i8* %108, null
  br i1 %109, label %111, label %110

110:                                              ; preds = %106
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %108) #5
  br label %111

111:                                              ; preds = %110, %106
  %112 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %15, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  store i8* null, i8** %112, align 8
  %114 = icmp eq i8* %113, null
  br i1 %114, label %116, label %115

115:                                              ; preds = %111
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %113) #5
  br label %116

116:                                              ; preds = %115, %111
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %55) #5
  br label %118

117:                                              ; preds = %46
  call void @_ZN3jxl6Image3IhE8ShrinkToEmm(%"class.jxl::Image3.92"* %3, i64 %41, i64 %51) #5
  br label %118

118:                                              ; preds = %117, %116
  %119 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %120 = load i64, i64* %119, align 8
  %121 = trunc i64 %120 to i32
  %122 = bitcast %class.anon* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %122) #5
  %123 = getelementptr inbounds %class.anon, %class.anon* %16, i64 0, i32 0
  store %"class.jxl::ColorSpaceTransform"* %13, %"class.jxl::ColorSpaceTransform"** %123, align 8
  %124 = getelementptr inbounds %class.anon, %class.anon* %16, i64 0, i32 1
  store %"class.jxl::ImageBundle"** %11, %"class.jxl::ImageBundle"*** %124, align 8
  %125 = getelementptr inbounds %class.anon, %class.anon* %16, i64 0, i32 2
  store %"struct.jxl::ColorEncoding"* %2, %"struct.jxl::ColorEncoding"** %125, align 8
  %126 = getelementptr inbounds %class.anon, %class.anon* %16, i64 0, i32 3
  store %"struct.jxl::ImageMetadata"** %10, %"struct.jxl::ImageMetadata"*** %126, align 8
  %127 = getelementptr inbounds %class.anon, %class.anon* %16, i64 0, i32 4
  store %"class.jxl::Rect"* %1, %"class.jxl::Rect"** %127, align 8
  %128 = bitcast %class.anon.102* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %128) #5
  %129 = getelementptr inbounds %class.anon.102, %class.anon.102* %17, i64 0, i32 0
  store %"class.jxl::ColorSpaceTransform"* %13, %"class.jxl::ColorSpaceTransform"** %129, align 8
  %130 = getelementptr inbounds %class.anon.102, %class.anon.102* %17, i64 0, i32 1
  store i8* %14, i8** %130, align 8
  %131 = getelementptr inbounds %class.anon.102, %class.anon.102* %17, i64 0, i32 2
  store %"class.jxl::Rect"* %1, %"class.jxl::Rect"** %131, align 8
  %132 = getelementptr inbounds %class.anon.102, %class.anon.102* %17, i64 0, i32 3
  store %"class.jxl::ImageBundle"** %11, %"class.jxl::ImageBundle"*** %132, align 8
  %133 = getelementptr inbounds %class.anon.102, %class.anon.102* %17, i64 0, i32 4
  store %"class.jxl::Image3.92"** %12, %"class.jxl::Image3.92"*** %133, align 8
  %134 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0), double* nonnull %8) #5
  %135 = icmp eq %"class.jxl::ThreadPool"* %4, null
  br i1 %135, label %136, label %147

136:                                              ; preds = %118
  %137 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #5
  %138 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %139 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %138, align 8
  %140 = bitcast i8** %139 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %140, align 8
  %141 = icmp eq i32 %121, 0
  br i1 %141, label %158, label %142

142:                                              ; preds = %136
  %143 = bitcast %"class.jxl::ThreadPool::RunCallState"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %143) #5
  %144 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %6, i64 0, i32 0
  %145 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %6, i64 0, i32 1
  store %class.anon* %16, %class.anon** %144, align 8
  store %class.anon.102* %17, %class.anon.102** %145, align 8
  %146 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %137, i8* nonnull %143, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIhEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IhEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIhEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IhEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallDataFuncEPvjm, i32 0, i32 %121) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %143) #5
  br label %158

147:                                              ; preds = %118
  %148 = icmp eq i32 %121, 0
  br i1 %148, label %160, label %149

149:                                              ; preds = %147
  %150 = bitcast %"class.jxl::ThreadPool::RunCallState"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %150) #5
  %151 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %7, i64 0, i32 0
  %152 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %7, i64 0, i32 1
  store %class.anon* %16, %class.anon** %151, align 8
  store %class.anon.102* %17, %class.anon.102** %152, align 8
  %153 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %154 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %153, align 8
  %155 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %156 = load i8*, i8** %155, align 8
  %157 = call i32 %154(i8* %156, i8* nonnull %150, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIhEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IhEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIhEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IhEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallDataFuncEPvjm, i32 0, i32 %121) #5
  br label %158

158:                                              ; preds = %136, %142, %149
  %159 = phi i8* [ %150, %149 ], [ %137, %142 ], [ %137, %136 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %159) #5
  br label %160

160:                                              ; preds = %158, %147
  %161 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0), double %161) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %128) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %122) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #5
  call void @_ZN3jxl19ColorSpaceTransformD1Ev(%"class.jxl::ColorSpaceTransform"* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %25) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3jxl11ImageBundle10CopyToSRGBERKNS_4RectEPNS_6Image3IhEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3.92"*, %"class.jxl::ThreadPool"* readonly) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 1
  %8 = tail call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %7) #5
  %9 = tail call i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IhEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* %0, %"class.jxl::Rect"* dereferenceable(32) %1, %"struct.jxl::ColorEncoding"* dereferenceable(152) %8, %"class.jxl::Image3.92"* %2, %"class.jxl::ThreadPool"* %3)
  ret i32 %9
}

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17TransformIfNeededERKNS_11ImageBundleERKNS_13ColorEncodingEPNS_10ThreadPoolEPS0_PPS1_(%"class.jxl::ImageBundle"* dereferenceable(368), %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::ThreadPool"*, %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** nocapture) local_unnamed_addr #0 {
  %6 = alloca %"class.jxl::Rect", align 8
  %7 = alloca %"class.jxl::Rect", align 8
  %8 = alloca %"class.jxl::Rect", align 8
  %9 = alloca %"class.jxl::Image3", align 8
  %10 = alloca %"class.std::__1::vector.85", align 8
  %11 = alloca %"class.jxl::Plane", align 8
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 9
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %14, %16
  br i1 %17, label %18, label %105

18:                                               ; preds = %5
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %20, %22
  br i1 %23, label %24, label %105

24:                                               ; preds = %18
  %25 = icmp eq i32 %20, 2
  br i1 %25, label %26, label %38

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 10, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %28, %30
  br i1 %31, label %32, label %105

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 10, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %34, %36
  br i1 %37, label %38, label %105

38:                                               ; preds = %32, %24
  %39 = add i32 %14, -1
  %40 = icmp ugt i32 %39, 1
  br i1 %40, label %41, label %85

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 3
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 3
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %47, label %105

47:                                               ; preds = %41
  %48 = icmp eq i32 %43, 2
  br i1 %48, label %49, label %85

49:                                               ; preds = %47
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %51 = load i32, i32* %50, align 8
  %52 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 11, i32 1
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %51, %53
  br i1 %54, label %55, label %105

55:                                               ; preds = %49
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 11, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %57, %59
  br i1 %60, label %61, label %105

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %63 = load i32, i32* %62, align 8
  %64 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 12, i32 1
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %63, %65
  br i1 %66, label %67, label %105

67:                                               ; preds = %61
  %68 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 12, i32 2
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %69, %71
  br i1 %72, label %73, label %105

73:                                               ; preds = %67
  %74 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %75 = load i32, i32* %74, align 8
  %76 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 13, i32 1
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %75, %77
  br i1 %78, label %79, label %105

79:                                               ; preds = %73
  %80 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 2
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 13, i32 2
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %81, %83
  br i1 %84, label %85, label %105

85:                                               ; preds = %79, %47, %38
  %86 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 2
  %87 = load i8, i8* %86, align 4, !range !2
  %88 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 2
  %89 = load i8, i8* %88, align 4, !range !2
  %90 = icmp eq i8 %87, %89
  br i1 %90, label %91, label %105

91:                                               ; preds = %85
  %92 = icmp eq i8 %87, 0
  br i1 %92, label %99, label %93

93:                                               ; preds = %91
  %94 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 3
  %95 = load i32, i32* %94, align 8
  %96 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 3
  %97 = load i32, i32* %96, align 8
  %98 = icmp eq i32 %95, %97
  br i1 %98, label %262, label %105

99:                                               ; preds = %91
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 4
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 4
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %101, %103
  br i1 %104, label %262, label %105

105:                                              ; preds = %73, %79, %61, %67, %49, %55, %41, %26, %32, %18, %5, %85, %93, %99
  %106 = bitcast %"class.jxl::Image3"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %106) #5
  %107 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %106, i8 -86, i64 96, i1 false) #5, !alias.scope !3
  %108 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 0, i32 0, i64 0, i32 0, i32 0
  %109 = load i32, i32* %108, align 8, !noalias !3
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %112 = load i32, i32* %111, align 4, !noalias !3
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %114, i64 %110, i64 %113, i64 4) #5
  %115 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %115, i64 %110, i64 %113, i64 4) #5
  %116 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %116, i64 %110, i64 %113, i64 4) #5
  %117 = bitcast %"class.jxl::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %117) #5, !noalias !6
  %118 = bitcast %"class.jxl::Image3"* %107 to <2 x i32>*
  %119 = load <2 x i32>, <2 x i32>* %118, align 8, !noalias !6
  %120 = zext <2 x i32> %119 to <2 x i64>
  %121 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %117, i8 0, i64 16, i1 false) #5, !noalias !6
  %122 = bitcast i64* %121 to <2 x i64>*
  store <2 x i64> %120, <2 x i64>* %122, align 8, !noalias !6
  %123 = bitcast %"class.jxl::Rect"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %123) #5, !noalias !6
  %124 = bitcast %"class.jxl::Image3"* %9 to <2 x i32>*
  %125 = load <2 x i32>, <2 x i32>* %124, align 8, !alias.scope !6
  %126 = zext <2 x i32> %125 to <2 x i64>
  %127 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %7, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %123, i8 0, i64 16, i1 false) #5, !noalias !6
  %128 = bitcast i64* %127 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %128, align 8, !noalias !6
  call void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* nonnull dereferenceable(32) %6, %"class.jxl::Image3"* dereferenceable(96) %107, %"class.jxl::Rect"* nonnull dereferenceable(32) %7, %"class.jxl::Image3"* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %123) #5, !noalias !6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %117) #5, !noalias !6
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* %3, %"class.jxl::Image3"* nonnull dereferenceable(96) %9, %"struct.jxl::ColorEncoding"* dereferenceable(152) %12) #5
  %129 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %130 = load i8*, i8** %129, align 8
  store i8* null, i8** %129, align 8
  %131 = icmp eq i8* %130, null
  br i1 %131, label %133, label %132

132:                                              ; preds = %105
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %130) #5
  br label %133

133:                                              ; preds = %132, %105
  %134 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %135 = load i8*, i8** %134, align 8
  store i8* null, i8** %134, align 8
  %136 = icmp eq i8* %135, null
  br i1 %136, label %138, label %137

137:                                              ; preds = %133
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %135) #5
  br label %138

138:                                              ; preds = %137, %133
  %139 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %140 = load i8*, i8** %139, align 8
  store i8* null, i8** %139, align 8
  %141 = icmp eq i8* %140, null
  br i1 %141, label %143, label %142

142:                                              ; preds = %138
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %140) #5
  br label %143

143:                                              ; preds = %138, %142
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %106) #5
  %144 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %145 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %144, align 8
  %146 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %147 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %146, align 8
  %148 = icmp eq %"class.jxl::Plane"* %145, %147
  br i1 %148, label %202, label %149

149:                                              ; preds = %143
  %150 = bitcast %"class.std::__1::vector.85"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %150) #5
  %151 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %10, i64 0, i32 0, i32 0
  %152 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %10, i64 0, i32 0, i32 1
  %153 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %150, i8 0, i64 24, i1 false) #5
  %154 = bitcast %"class.jxl::Plane"* %11 to i8*
  %155 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 0, i32 0, i32 5
  %156 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %155, i64 0, i32 0, i32 0, i32 0
  %157 = bitcast %"class.std::__1::unique_ptr.75"* %155 to i64*
  %158 = bitcast %"class.jxl::Plane"** %152 to i64*
  %159 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %182

160:                                              ; preds = %199
  call void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"* %3, %"class.std::__1::vector.85"* nonnull dereferenceable(24) %10) #5
  %161 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %151, align 8
  %162 = icmp eq %"class.jxl::Plane"* %161, null
  br i1 %162, label %181, label %163

163:                                              ; preds = %160
  %164 = bitcast %"class.jxl::Plane"* %161 to i8*
  %165 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %152, align 8
  %166 = icmp eq %"class.jxl::Plane"* %165, %161
  br i1 %166, label %179, label %167

167:                                              ; preds = %163, %174
  %168 = phi %"class.jxl::Plane"* [ %169, %174 ], [ %165, %163 ]
  %169 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %168, i64 -1
  %170 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %168, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %171 = load i8*, i8** %170, align 8
  store i8* null, i8** %170, align 8
  %172 = icmp eq i8* %171, null
  br i1 %172, label %174, label %173

173:                                              ; preds = %167
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %171) #5
  br label %174

174:                                              ; preds = %173, %167
  %175 = icmp eq %"class.jxl::Plane"* %169, %161
  br i1 %175, label %176, label %167

176:                                              ; preds = %174
  %177 = bitcast %"class.std::__1::vector.85"* %10 to i8**
  %178 = load i8*, i8** %177, align 8
  br label %179

179:                                              ; preds = %176, %163
  %180 = phi i8* [ %178, %176 ], [ %164, %163 ]
  store %"class.jxl::Plane"* %161, %"class.jxl::Plane"** %152, align 8
  call void @_ZdlPv(i8* %180) #11
  br label %181

181:                                              ; preds = %160, %179
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %150) #5
  br label %202

182:                                              ; preds = %149, %199
  %183 = phi %"class.jxl::Plane"* [ %145, %149 ], [ %200, %199 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %154) #5
  call void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* nonnull sret %11, %"class.jxl::Plane"* dereferenceable(32) %183)
  %184 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %152, align 8
  %185 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %153, align 8
  %186 = icmp ult %"class.jxl::Plane"* %184, %185
  br i1 %186, label %187, label %194

187:                                              ; preds = %182
  %188 = bitcast %"class.jxl::Plane"* %184 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %188, i8* nonnull align 8 %154, i64 24, i1 false) #5
  %189 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %184, i64 0, i32 0, i32 5
  %190 = load i64, i64* %157, align 8
  store i8* null, i8** %156, align 8
  %191 = bitcast %"class.std::__1::unique_ptr.75"* %189 to i64*
  store i64 %190, i64* %191, align 8
  %192 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %184, i64 1
  %193 = ptrtoint %"class.jxl::Plane"* %192 to i64
  store i64 %193, i64* %158, align 8
  br label %195

194:                                              ; preds = %182
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.85"* nonnull %10, %"class.jxl::Plane"* nonnull dereferenceable(32) %11) #5
  br label %195

195:                                              ; preds = %187, %194
  %196 = load i8*, i8** %159, align 8
  store i8* null, i8** %159, align 8
  %197 = icmp eq i8* %196, null
  br i1 %197, label %199, label %198

198:                                              ; preds = %195
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %196) #5
  br label %199

199:                                              ; preds = %195, %198
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %154) #5
  %200 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %183, i64 1
  %201 = icmp eq %"class.jxl::Plane"* %200, %147
  br i1 %201, label %160, label %182

202:                                              ; preds = %143, %181
  %203 = bitcast %"class.jxl::Rect"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %203) #5
  %204 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10
  %205 = bitcast %"class.jxl::Image3"* %204 to <2 x i32>*
  %206 = load <2 x i32>, <2 x i32>* %205, align 8
  %207 = zext <2 x i32> %206 to <2 x i64>
  %208 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %203, i8 0, i64 16, i1 false) #5
  %209 = bitcast i64* %208 to <2 x i64>*
  store <2 x i64> %207, <2 x i64>* %209, align 8
  %210 = call i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* %3, %"class.jxl::Rect"* nonnull dereferenceable(32) %8, %"struct.jxl::ColorEncoding"* dereferenceable(152) %1, %"class.jxl::Image3"* %204, %"class.jxl::ThreadPool"* %2) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %203) #5
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %264

212:                                              ; preds = %202
  %213 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 1
  %214 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %213, i8* align 8 %214, i64 12, i1 false) #5
  %215 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 4, i32 1
  %216 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 1
  %217 = bitcast i32* %215 to i8*
  %218 = bitcast i32* %216 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %217, i8* align 8 %218, i64 16, i1 false) #5
  %219 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 5
  %220 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 5
  %221 = bitcast i32* %219 to i8*
  %222 = bitcast i32* %220 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %221, i8* align 8 %222, i64 6, i1 false) #5
  %223 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 8
  %224 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 8, i32 0
  %225 = load i64, i64* %224, align 8
  %226 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 8, i32 1
  %227 = load i64, i64* %226, align 8
  %228 = icmp ult i64 %227, %225
  br i1 %228, label %229, label %230

229:                                              ; preds = %212
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %223, i64 %225) #5
  br label %230

230:                                              ; preds = %229, %212
  %231 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %232 = load i8*, i8** %231, align 8
  %233 = icmp eq i8* %232, null
  %234 = select i1 %233, i64 0, i64 %225
  %235 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %223, i64 0, i32 0
  store i64 %234, i64* %235, align 8
  br i1 %233, label %239, label %236

236:                                              ; preds = %230
  %237 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %238 = load i8*, i8** %237, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %232, i8* align 1 %238, i64 %234, i1 false) #5
  br label %239

239:                                              ; preds = %230, %236
  %240 = load i32, i32* %15, align 8
  %241 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 9
  store i32 %240, i32* %241, align 8
  %242 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 10, i32 1
  %243 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 10, i32 1
  %244 = bitcast i32* %243 to i64*
  %245 = bitcast i32* %242 to i64*
  %246 = load i64, i64* %244, align 8
  store i64 %246, i64* %245, align 8
  %247 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 11, i32 1
  %248 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 11, i32 1
  %249 = bitcast i32* %248 to i64*
  %250 = bitcast i32* %247 to i64*
  %251 = load i64, i64* %249, align 8
  store i64 %251, i64* %250, align 8
  %252 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 12, i32 1
  %253 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 12, i32 1
  %254 = bitcast i32* %253 to i64*
  %255 = bitcast i32* %252 to i64*
  %256 = load i64, i64* %254, align 8
  store i64 %256, i64* %255, align 8
  %257 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 11, i32 13, i32 1
  %258 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 13, i32 1
  %259 = bitcast i32* %258 to i64*
  %260 = bitcast i32* %257 to i64*
  %261 = load i64, i64* %259, align 8
  store i64 %261, i64* %260, align 8
  br label %262

262:                                              ; preds = %93, %99, %239
  %263 = phi %"class.jxl::ImageBundle"* [ %3, %239 ], [ %0, %99 ], [ %0, %93 ]
  store %"class.jxl::ImageBundle"* %263, %"class.jxl::ImageBundle"** %4, align 8
  br label %264

264:                                              ; preds = %262, %202
  %265 = phi i32 [ 1, %202 ], [ 0, %262 ]
  ret i32 %265
}

declare void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %5 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 32, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %13, i64 %9, i64 %12, i64 4) #5
  %14 = load i32, i32* %6, align 8, !noalias !9
  %15 = load i32, i32* %3, align 8, !alias.scope !9
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %10, align 4, !noalias !9
  %20 = load i32, i32* %18, align 4, !alias.scope !9
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17, %2
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0)) #5, !noalias !9
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10, !noalias !9
  unreachable

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  %27 = icmp eq i32 %14, 0
  %28 = or i1 %27, %26
  br i1 %28, label %66, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %32 = load i8*, i8** %5, align 8, !alias.scope !9
  %33 = load i64, i64* %4, align 8, !alias.scope !9
  %34 = load i8*, i8** %30, align 8, !noalias !9
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #5, !noalias !9
  %38 = ptrtoint i8* %32 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #5, !noalias !9
  %41 = zext i32 %14 to i64
  %42 = shl nuw nsw i64 %41, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %32, i8* align 64 %34, i64 %42, i1 false) #5, !noalias !9
  %43 = load i32, i32* %10, align 4, !noalias !9
  %44 = icmp ugt i32 %43, 1
  br i1 %44, label %45, label %66

45:                                               ; preds = %29, %45
  %46 = phi i64 [ %62, %45 ], [ 1, %29 ]
  %47 = load i32, i32* %6, align 8, !noalias !9
  %48 = load i8*, i8** %30, align 8, !noalias !9
  %49 = load i64, i64* %31, align 8, !noalias !9
  %50 = mul i64 %49, %46
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #5, !noalias !9
  %55 = mul i64 %46, %33
  %56 = getelementptr inbounds i8, i8* %32, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #5, !noalias !9
  %60 = zext i32 %47 to i64
  %61 = shl nuw nsw i64 %60, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %56, i8* align 64 %51, i64 %61, i1 false) #5, !noalias !9
  %62 = add nuw nsw i64 %46, 1
  %63 = load i32, i32* %10, align 4, !noalias !9
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %45, label %66

66:                                               ; preds = %45, %29, %25
  ret void
}

declare void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"*, %"class.std::__1::vector.85"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* noalias) local_unnamed_addr #0 comdat {
  %5 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %24

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %16, label %24

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 1
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 0
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %21 = icmp eq i64 %6, 0
  %22 = icmp eq i64 %12, 0
  %23 = or i1 %21, %22
  br i1 %23, label %66, label %27

24:                                               ; preds = %4, %10
  %25 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0)) #5
  %26 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

27:                                               ; preds = %16
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8, !alias.scope !12
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8, !alias.scope !12
  br label %34

34:                                               ; preds = %34, %27
  %35 = phi i64 [ %6, %27 ], [ %65, %34 ]
  %36 = phi i64 [ 0, %27 ], [ %62, %34 ]
  %37 = load i64, i64* %17, align 8, !noalias !12
  %38 = add i64 %37, %36
  %39 = load i8*, i8** %28, align 8, !noalias !12
  %40 = load i64, i64* %29, align 8, !noalias !12
  %41 = mul i64 %40, %38
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #5, !noalias !12
  %46 = bitcast i8* %42 to float*
  %47 = load i64, i64* %18, align 8, !noalias !12
  %48 = getelementptr inbounds float, float* %46, i64 %47
  %49 = load i64, i64* %19, align 8, !noalias !12
  %50 = add i64 %49, %36
  %51 = mul i64 %50, %33
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #5, !noalias !12
  %56 = bitcast i8* %52 to float*
  %57 = load i64, i64* %20, align 8, !noalias !12
  %58 = getelementptr inbounds float, float* %56, i64 %57
  %59 = bitcast float* %58 to i8*
  %60 = bitcast float* %48 to i8*
  %61 = shl i64 %35, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 %61, i1 false) #5, !noalias !12
  %62 = add nuw i64 %36, 1
  %63 = load i64, i64* %11, align 8, !noalias !12
  %64 = icmp ult i64 %62, %63
  %65 = load i64, i64* %5, align 8
  br i1 %64, label %34, label %66

66:                                               ; preds = %34, %16
  %67 = phi i64 [ %12, %16 ], [ %63, %34 ]
  %68 = phi i64 [ %6, %16 ], [ %65, %34 ]
  %69 = icmp eq i64 %68, 0
  %70 = icmp eq i64 %67, 0
  %71 = or i1 %69, %70
  br i1 %71, label %111, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8, !alias.scope !12
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 4
  %78 = load i64, i64* %77, align 8, !alias.scope !12
  br label %79

79:                                               ; preds = %79, %72
  %80 = phi i64 [ %68, %72 ], [ %110, %79 ]
  %81 = phi i64 [ 0, %72 ], [ %107, %79 ]
  %82 = load i64, i64* %17, align 8, !noalias !12
  %83 = add i64 %82, %81
  %84 = load i8*, i8** %73, align 8, !noalias !12
  %85 = load i64, i64* %74, align 8, !noalias !12
  %86 = mul i64 %85, %83
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #5, !noalias !12
  %91 = bitcast i8* %87 to float*
  %92 = load i64, i64* %18, align 8, !noalias !12
  %93 = getelementptr inbounds float, float* %91, i64 %92
  %94 = load i64, i64* %19, align 8, !noalias !12
  %95 = add i64 %94, %81
  %96 = mul i64 %95, %78
  %97 = getelementptr inbounds i8, i8* %76, i64 %96
  %98 = ptrtoint i8* %97 to i64
  %99 = and i64 %98, 63
  %100 = icmp eq i64 %99, 0
  tail call void @llvm.assume(i1 %100) #5, !noalias !12
  %101 = bitcast i8* %97 to float*
  %102 = load i64, i64* %20, align 8, !noalias !12
  %103 = getelementptr inbounds float, float* %101, i64 %102
  %104 = bitcast float* %103 to i8*
  %105 = bitcast float* %93 to i8*
  %106 = shl i64 %80, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %106, i1 false) #5, !noalias !12
  %107 = add nuw i64 %81, 1
  %108 = load i64, i64* %11, align 8, !noalias !12
  %109 = icmp ult i64 %107, %108
  %110 = load i64, i64* %5, align 8
  br i1 %109, label %79, label %111

111:                                              ; preds = %79, %66
  %112 = phi i64 [ %67, %66 ], [ %108, %79 ]
  %113 = phi i64 [ %68, %66 ], [ %110, %79 ]
  %114 = icmp eq i64 %113, 0
  %115 = icmp eq i64 %112, 0
  %116 = or i1 %114, %115
  br i1 %116, label %157, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %120 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8, !alias.scope !12
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 4
  %123 = load i64, i64* %122, align 8, !alias.scope !12
  br label %124

124:                                              ; preds = %155, %117
  %125 = phi i64 [ %113, %117 ], [ %156, %155 ]
  %126 = phi i64 [ 0, %117 ], [ %152, %155 ]
  %127 = load i64, i64* %17, align 8, !noalias !12
  %128 = add i64 %127, %126
  %129 = load i8*, i8** %118, align 8, !noalias !12
  %130 = load i64, i64* %119, align 8, !noalias !12
  %131 = mul i64 %130, %128
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  %133 = ptrtoint i8* %132 to i64
  %134 = and i64 %133, 63
  %135 = icmp eq i64 %134, 0
  tail call void @llvm.assume(i1 %135) #5, !noalias !12
  %136 = bitcast i8* %132 to float*
  %137 = load i64, i64* %18, align 8, !noalias !12
  %138 = getelementptr inbounds float, float* %136, i64 %137
  %139 = load i64, i64* %19, align 8, !noalias !12
  %140 = add i64 %139, %126
  %141 = mul i64 %140, %123
  %142 = getelementptr inbounds i8, i8* %121, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  tail call void @llvm.assume(i1 %145) #5, !noalias !12
  %146 = bitcast i8* %142 to float*
  %147 = load i64, i64* %20, align 8, !noalias !12
  %148 = getelementptr inbounds float, float* %146, i64 %147
  %149 = bitcast float* %148 to i8*
  %150 = bitcast float* %138 to i8*
  %151 = shl i64 %125, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %149, i8* align 4 %150, i64 %151, i1 false) #5, !noalias !12
  %152 = add nuw i64 %126, 1
  %153 = load i64, i64* %11, align 8, !noalias !12
  %154 = icmp ult i64 %152, %153
  br i1 %154, label %155, label %157

155:                                              ; preds = %124
  %156 = load i64, i64* %5, align 8, !noalias !12
  br label %124

157:                                              ; preds = %124, %111
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #4

; Function Attrs: nounwind
declare void @llvm.assume(i1) #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.85"*, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Plane"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.85"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.85"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #10
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #11
  %33 = bitcast i8* %32 to %"class.jxl::Plane"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Plane"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Plane"* %38 to i64
  %40 = bitcast %"class.jxl::Plane"* %37 to i8*
  %41 = bitcast %"class.jxl::Plane"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #5
  %42 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr.75"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr.75"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 1
  %49 = ptrtoint %"class.jxl::Plane"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %50, align 8
  %52 = ptrtoint %"class.jxl::Plane"* %51 to i64
  %53 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %54 = icmp eq %"class.jxl::Plane"* %53, %51
  br i1 %54, label %105, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 0
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1
  %63 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1
  %64 = bitcast %"class.jxl::Plane"* %62 to i8*
  %65 = bitcast %"class.jxl::Plane"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #5
  %66 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr.75"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i8* null, i8** %68, align 8
  %71 = bitcast %"class.std::__1::unique_ptr.75"* %66 to i64*
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.jxl::Plane"* [ undef, %55 ], [ %62, %61 ]
  %74 = phi %"class.jxl::Plane"* [ %37, %55 ], [ %62, %61 ]
  %75 = phi %"class.jxl::Plane"* [ %53, %55 ], [ %63, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %101, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.jxl::Plane"* [ %90, %77 ], [ %74, %72 ]
  %79 = phi %"class.jxl::Plane"* [ %91, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1
  %82 = bitcast %"class.jxl::Plane"* %80 to i8*
  %83 = bitcast %"class.jxl::Plane"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false) #5
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr.75"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = bitcast %"class.std::__1::unique_ptr.75"* %84 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2
  %92 = bitcast %"class.jxl::Plane"* %90 to i8*
  %93 = bitcast %"class.jxl::Plane"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #5
  %94 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2, i32 0, i32 5
  %95 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2, i32 0, i32 5
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr.75"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i8* null, i8** %96, align 8
  %99 = bitcast %"class.std::__1::unique_ptr.75"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = icmp eq %"class.jxl::Plane"* %91, %51
  br i1 %100, label %101, label %77

101:                                              ; preds = %77, %72
  %102 = phi %"class.jxl::Plane"* [ %73, %72 ], [ %90, %77 ]
  %103 = load i64, i64* %6, align 8
  %104 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  br label %105

105:                                              ; preds = %34, %101
  %106 = phi %"class.jxl::Plane"* [ %104, %101 ], [ %51, %34 ]
  %107 = phi %"class.jxl::Plane"* [ %102, %101 ], [ %37, %34 ]
  %108 = phi i64 [ %103, %101 ], [ %52, %34 ]
  %109 = ptrtoint %"class.jxl::Plane"* %107 to i64
  store i64 %109, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %110 = inttoptr i64 %108 to %"class.jxl::Plane"*
  %111 = icmp eq %"class.jxl::Plane"* %106, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105, %119
  %113 = phi %"class.jxl::Plane"* [ %114, %119 ], [ %106, %105 ]
  %114 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #5
  br label %119

119:                                              ; preds = %118, %112
  %120 = icmp eq %"class.jxl::Plane"* %114, %110
  br i1 %120, label %121, label %112

121:                                              ; preds = %119, %105
  %122 = icmp eq i64 %108, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %108 to i8*
  tail call void @_ZdlPv(i8* %124) #11
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN3jxl19ColorSpaceTransformC1Ev(%"class.jxl::ColorSpaceTransform"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6Image3IhE8ShrinkToEmm(%"class.jxl::Image3.92"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = trunc i64 %1 to i32
  %5 = trunc i64 %2 to i32
  %6 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %10, label %13

10:                                               ; preds = %33, %21, %3
  %11 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0)) #5
  %12 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 0, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = icmp ult i64 %16, %2
  br i1 %17, label %18, label %21

18:                                               ; preds = %40, %28, %13
  %19 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)) #5
  %20 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  store i32 %4, i32* %22, align 8
  %23 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  store i32 %5, i32* %23, align 4
  %24 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 1, i32 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = zext i32 %25 to i64
  %27 = icmp ult i64 %26, %1
  br i1 %27, label %10, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 1, i32 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = icmp ult i64 %31, %2
  br i1 %32, label %18, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 1, i32 0, i32 0
  store i32 %4, i32* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 1, i32 0, i32 1
  store i32 %5, i32* %35, align 4
  %36 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 2, i32 0, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = zext i32 %37 to i64
  %39 = icmp ult i64 %38, %1
  br i1 %39, label %10, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 2, i32 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = icmp ult i64 %43, %2
  br i1 %44, label %18, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 2, i32 0, i32 0
  store i32 %4, i32* %46, align 8
  %47 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %0, i64 0, i32 0, i64 2, i32 0, i32 1
  store i32 %5, i32* %47, align 4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3jxl19ColorSpaceTransformD1Ev(%"class.jxl::ColorSpaceTransform"*) unnamed_addr #9

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #2

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #2

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIhEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IhEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallInitFuncEPvm(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to %class.anon**
  %4 = load %class.anon*, %class.anon** %3, align 8
  %5 = getelementptr inbounds %class.anon, %class.anon* %4, i64 0, i32 3
  %6 = load %"struct.jxl::ImageMetadata"**, %"struct.jxl::ImageMetadata"*** %5, align 8
  %7 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %6, align 8
  %8 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %7, i64 0, i32 14, i32 3
  %9 = load float, float* %8, align 4
  %10 = fcmp une float %9, 0.000000e+00
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.16, i64 0, i64 0), i32 250, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.17, i64 0, i64 0)) #5
  %13 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %class.anon, %class.anon* %4, i64 0, i32 2
  %16 = load %"struct.jxl::ColorEncoding"*, %"struct.jxl::ColorEncoding"** %15, align 8
  %17 = getelementptr inbounds %class.anon, %class.anon* %4, i64 0, i32 1
  %18 = load %"class.jxl::ImageBundle"**, %"class.jxl::ImageBundle"*** %17, align 8
  %19 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %18, align 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %19, i64 0, i32 11
  %21 = getelementptr inbounds %class.anon, %class.anon* %4, i64 0, i32 0
  %22 = load %"class.jxl::ColorSpaceTransform"*, %"class.jxl::ColorSpaceTransform"** %21, align 8
  %23 = getelementptr inbounds %class.anon, %class.anon* %4, i64 0, i32 4
  %24 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %23, align 8
  %25 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %24, i64 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = tail call i32 @_ZN3jxl19ColorSpaceTransform4InitERKNS_13ColorEncodingES3_fmm(%"class.jxl::ColorSpaceTransform"* %22, %"struct.jxl::ColorEncoding"* dereferenceable(152) %20, %"struct.jxl::ColorEncoding"* dereferenceable(152) %16, float %9, i64 %26, i64 %1) #5
  %28 = icmp ne i32 %27, 0
  %29 = sext i1 %28 to i32
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIhEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IhEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallDataFuncEPvjm(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.102**
  %6 = load %class.anon.102*, %class.anon.102** %5, align 8
  %7 = getelementptr inbounds %class.anon.102, %class.anon.102* %6, i64 0, i32 0
  %8 = load %"class.jxl::ColorSpaceTransform"*, %"class.jxl::ColorSpaceTransform"** %7, align 8
  %9 = shl i64 %2, 32
  %10 = ashr exact i64 %9, 32
  %11 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %8, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %8, i64 0, i32 1, i32 0, i32 4
  %14 = load i64, i64* %13, align 8
  %15 = mul i64 %14, %10
  %16 = getelementptr inbounds i8, i8* %12, i64 %15
  %17 = ptrtoint i8* %16 to i64
  %18 = and i64 %17, 63
  %19 = icmp eq i64 %18, 0
  tail call void @llvm.assume(i1 %19) #5
  %20 = bitcast i8* %16 to float*
  %21 = getelementptr inbounds %class.anon.102, %class.anon.102* %6, i64 0, i32 1
  %22 = load i8*, i8** %21, align 8
  %23 = load i8, i8* %22, align 1, !range !2
  %24 = icmp eq i8 %23, 0
  %25 = getelementptr inbounds %class.anon.102, %class.anon.102* %6, i64 0, i32 2
  %26 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %25, align 8
  %27 = getelementptr inbounds %class.anon.102, %class.anon.102* %6, i64 0, i32 3
  %28 = load %"class.jxl::ImageBundle"**, %"class.jxl::ImageBundle"*** %27, align 8
  %29 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %28, align 8
  %30 = sext i32 %1 to i64
  %31 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %26, i64 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, %30
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 10, i32 0, i64 0, i32 0, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = mul i64 %35, %33
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = ptrtoint i8* %38 to i64
  %40 = and i64 %39, 63
  %41 = icmp eq i64 %40, 0
  tail call void @llvm.assume(i1 %41) #5
  %42 = getelementptr inbounds i8, i8* %38, i64 %36
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #5
  %46 = bitcast i8* %42 to float*
  %47 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %26, i64 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds float, float* %46, i64 %48
  br i1 %24, label %50, label %103

50:                                               ; preds = %3
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #5
  %56 = getelementptr inbounds i8, i8* %52, i64 %36
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #5
  %60 = bitcast i8* %56 to float*
  %61 = getelementptr inbounds float, float* %60, i64 %48
  %62 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #5
  %67 = getelementptr inbounds i8, i8* %63, i64 %36
  %68 = ptrtoint i8* %67 to i64
  %69 = and i64 %68, 63
  %70 = icmp eq i64 %69, 0
  tail call void @llvm.assume(i1 %70) #5
  %71 = bitcast i8* %67 to float*
  %72 = getelementptr inbounds float, float* %71, i64 %48
  %73 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %26, i64 0, i32 2
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %103, label %76

76:                                               ; preds = %50, %76
  %77 = phi i64 [ %96, %76 ], [ 0, %50 ]
  %78 = getelementptr inbounds float, float* %49, i64 %77
  %79 = bitcast float* %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = mul i64 %77, 3
  %82 = getelementptr inbounds float, float* %20, i64 %81
  %83 = bitcast float* %82 to i32*
  store i32 %80, i32* %83, align 4
  %84 = getelementptr inbounds float, float* %61, i64 %77
  %85 = bitcast float* %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = add i64 %81, 1
  %88 = getelementptr inbounds float, float* %20, i64 %87
  %89 = bitcast float* %88 to i32*
  store i32 %86, i32* %89, align 4
  %90 = getelementptr inbounds float, float* %72, i64 %77
  %91 = bitcast float* %90 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = add i64 %81, 2
  %94 = getelementptr inbounds float, float* %20, i64 %93
  %95 = bitcast float* %94 to i32*
  store i32 %92, i32* %95, align 4
  %96 = add nuw i64 %77, 1
  %97 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %25, align 8
  %98 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %97, i64 0, i32 2
  %99 = load i64, i64* %98, align 8
  %100 = icmp ult i64 %96, %99
  br i1 %100, label %76, label %101

101:                                              ; preds = %76
  %102 = load %"class.jxl::ColorSpaceTransform"*, %"class.jxl::ColorSpaceTransform"** %7, align 8
  br label %103

103:                                              ; preds = %101, %50, %3
  %104 = phi %"class.jxl::ColorSpaceTransform"* [ %8, %3 ], [ %8, %50 ], [ %102, %101 ]
  %105 = phi float* [ %49, %3 ], [ %20, %50 ], [ %20, %101 ]
  %106 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %104, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %104, i64 0, i32 2, i32 0, i32 4
  %109 = load i64, i64* %108, align 8
  %110 = mul i64 %109, %10
  %111 = getelementptr inbounds i8, i8* %107, i64 %110
  %112 = ptrtoint i8* %111 to i64
  %113 = and i64 %112, 63
  %114 = icmp eq i64 %113, 0
  tail call void @llvm.assume(i1 %114) #5
  %115 = bitcast i8* %111 to float*
  tail call void @_ZN3jxl21DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf(%"class.jxl::ColorSpaceTransform"* %104, i64 %10, float* %105, float* %115) #5
  %116 = getelementptr inbounds %class.anon.102, %class.anon.102* %6, i64 0, i32 4
  %117 = load %"class.jxl::Image3.92"**, %"class.jxl::Image3.92"*** %116, align 8
  %118 = load %"class.jxl::Image3.92"*, %"class.jxl::Image3.92"** %117, align 8
  %119 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %118, i64 0, i32 0, i64 0, i32 0, i32 4
  %120 = load i64, i64* %119, align 8
  %121 = mul i64 %120, %30
  %122 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %118, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = ptrtoint i8* %123 to i64
  %125 = and i64 %124, 63
  %126 = icmp eq i64 %125, 0
  tail call void @llvm.assume(i1 %126) #5
  %127 = getelementptr inbounds i8, i8* %123, i64 %121
  %128 = ptrtoint i8* %127 to i64
  %129 = and i64 %128, 63
  %130 = icmp eq i64 %129, 0
  tail call void @llvm.assume(i1 %130) #5
  %131 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %118, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  %133 = ptrtoint i8* %132 to i64
  %134 = and i64 %133, 63
  %135 = icmp eq i64 %134, 0
  tail call void @llvm.assume(i1 %135) #5
  %136 = getelementptr inbounds i8, i8* %132, i64 %121
  %137 = ptrtoint i8* %136 to i64
  %138 = and i64 %137, 63
  %139 = icmp eq i64 %138, 0
  tail call void @llvm.assume(i1 %139) #5
  %140 = getelementptr inbounds %"class.jxl::Image3.92", %"class.jxl::Image3.92"* %118, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %141 = load i8*, i8** %140, align 8
  %142 = ptrtoint i8* %141 to i64
  %143 = and i64 %142, 63
  %144 = icmp eq i64 %143, 0
  tail call void @llvm.assume(i1 %144) #5
  %145 = getelementptr inbounds i8, i8* %141, i64 %121
  %146 = ptrtoint i8* %145 to i64
  %147 = and i64 %146, 63
  %148 = icmp eq i64 %147, 0
  tail call void @llvm.assume(i1 %148) #5
  %149 = load i8*, i8** %21, align 8
  %150 = load i8, i8* %149, align 1, !range !2
  %151 = icmp eq i8 %150, 0
  %152 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %25, align 8
  %153 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %152, i64 0, i32 2
  %154 = load i64, i64* %153, align 8
  %155 = icmp ne i64 %154, 0
  br i1 %151, label %157, label %156

156:                                              ; preds = %103
  br i1 %155, label %158, label %245

157:                                              ; preds = %103
  br i1 %155, label %199, label %245

158:                                              ; preds = %156, %158
  %159 = phi i64 [ %194, %158 ], [ 0, %156 ]
  %160 = getelementptr inbounds float, float* %115, i64 %159
  %161 = load float, float* %160, align 4
  %162 = fmul float %161, 2.550000e+02
  %163 = fcmp olt float %162, 2.550000e+02
  %164 = select i1 %163, float %162, float 2.550000e+02
  %165 = fcmp ogt float %164, 0.000000e+00
  %166 = select i1 %165, float %164, float 0.000000e+00
  %167 = fcmp olt float %166, 0.000000e+00
  %168 = select i1 %167, float -5.000000e-01, float 5.000000e-01
  %169 = fadd float %166, %168
  %170 = fptoui float %169 to i8
  %171 = getelementptr inbounds i8, i8* %127, i64 %159
  store i8 %170, i8* %171, align 1
  %172 = load float, float* %160, align 4
  %173 = fmul float %172, 2.550000e+02
  %174 = fcmp olt float %173, 2.550000e+02
  %175 = select i1 %174, float %173, float 2.550000e+02
  %176 = fcmp ogt float %175, 0.000000e+00
  %177 = select i1 %176, float %175, float 0.000000e+00
  %178 = fcmp olt float %177, 0.000000e+00
  %179 = select i1 %178, float -5.000000e-01, float 5.000000e-01
  %180 = fadd float %177, %179
  %181 = fptoui float %180 to i8
  %182 = getelementptr inbounds i8, i8* %136, i64 %159
  store i8 %181, i8* %182, align 1
  %183 = load float, float* %160, align 4
  %184 = fmul float %183, 2.550000e+02
  %185 = fcmp olt float %184, 2.550000e+02
  %186 = select i1 %185, float %184, float 2.550000e+02
  %187 = fcmp ogt float %186, 0.000000e+00
  %188 = select i1 %187, float %186, float 0.000000e+00
  %189 = fcmp olt float %188, 0.000000e+00
  %190 = select i1 %189, float -5.000000e-01, float 5.000000e-01
  %191 = fadd float %188, %190
  %192 = fptoui float %191 to i8
  %193 = getelementptr inbounds i8, i8* %145, i64 %159
  store i8 %192, i8* %193, align 1
  %194 = add nuw i64 %159, 1
  %195 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %25, align 8
  %196 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %195, i64 0, i32 2
  %197 = load i64, i64* %196, align 8
  %198 = icmp ult i64 %194, %197
  br i1 %198, label %158, label %245

199:                                              ; preds = %157, %199
  %200 = phi i64 [ %240, %199 ], [ 0, %157 ]
  %201 = mul i64 %200, 3
  %202 = getelementptr inbounds float, float* %115, i64 %201
  %203 = load float, float* %202, align 4
  %204 = fmul float %203, 2.550000e+02
  %205 = fcmp olt float %204, 2.550000e+02
  %206 = select i1 %205, float %204, float 2.550000e+02
  %207 = fcmp ogt float %206, 0.000000e+00
  %208 = select i1 %207, float %206, float 0.000000e+00
  %209 = fcmp olt float %208, 0.000000e+00
  %210 = select i1 %209, float -5.000000e-01, float 5.000000e-01
  %211 = fadd float %208, %210
  %212 = fptoui float %211 to i8
  %213 = getelementptr inbounds i8, i8* %127, i64 %200
  store i8 %212, i8* %213, align 1
  %214 = add i64 %201, 1
  %215 = getelementptr inbounds float, float* %115, i64 %214
  %216 = load float, float* %215, align 4
  %217 = fmul float %216, 2.550000e+02
  %218 = fcmp olt float %217, 2.550000e+02
  %219 = select i1 %218, float %217, float 2.550000e+02
  %220 = fcmp ogt float %219, 0.000000e+00
  %221 = select i1 %220, float %219, float 0.000000e+00
  %222 = fcmp olt float %221, 0.000000e+00
  %223 = select i1 %222, float -5.000000e-01, float 5.000000e-01
  %224 = fadd float %221, %223
  %225 = fptoui float %224 to i8
  %226 = getelementptr inbounds i8, i8* %136, i64 %200
  store i8 %225, i8* %226, align 1
  %227 = add i64 %201, 2
  %228 = getelementptr inbounds float, float* %115, i64 %227
  %229 = load float, float* %228, align 4
  %230 = fmul float %229, 2.550000e+02
  %231 = fcmp olt float %230, 2.550000e+02
  %232 = select i1 %231, float %230, float 2.550000e+02
  %233 = fcmp ogt float %232, 0.000000e+00
  %234 = select i1 %233, float %232, float 0.000000e+00
  %235 = fcmp olt float %234, 0.000000e+00
  %236 = select i1 %235, float -5.000000e-01, float 5.000000e-01
  %237 = fadd float %234, %236
  %238 = fptoui float %237 to i8
  %239 = getelementptr inbounds i8, i8* %145, i64 %200
  store i8 %238, i8* %239, align 1
  %240 = add nuw i64 %200, 1
  %241 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %25, align 8
  %242 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %241, i64 0, i32 2
  %243 = load i64, i64* %242, align 8
  %244 = icmp ult i64 %240, %243
  br i1 %244, label %199, label %245

245:                                              ; preds = %158, %199, %156, %157
  ret void
}

declare i32 @_ZN3jxl19ColorSpaceTransform4InitERKNS_13ColorEncodingES3_fmm(%"class.jxl::ColorSpaceTransform"*, %"struct.jxl::ColorEncoding"* dereferenceable(152), %"struct.jxl::ColorEncoding"* dereferenceable(152), float, i64, i64) local_unnamed_addr #2

declare void @_ZN3jxl21DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf(%"class.jxl::ColorSpaceTransform"*, i64, float*, float*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6Image3IfE8ShrinkToEmm(%"class.jxl::Image3"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = trunc i64 %1 to i32
  %5 = trunc i64 %2 to i32
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %10, label %13

10:                                               ; preds = %33, %21, %3
  %11 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0)) #5
  %12 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = icmp ult i64 %16, %2
  br i1 %17, label %18, label %21

18:                                               ; preds = %40, %28, %13
  %19 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)) #5
  %20 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  store i32 %4, i32* %22, align 8
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  store i32 %5, i32* %23, align 4
  %24 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = zext i32 %25 to i64
  %27 = icmp ult i64 %26, %1
  br i1 %27, label %10, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = icmp ult i64 %31, %2
  br i1 %32, label %18, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 0
  store i32 %4, i32* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 1
  store i32 %5, i32* %35, align 4
  %36 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = zext i32 %37 to i64
  %39 = icmp ult i64 %38, %1
  br i1 %39, label %10, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = icmp ult i64 %43, %2
  br i1 %44, label %18, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 0
  store i32 %4, i32* %46, align 8
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 1
  store i32 %5, i32* %47, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIfEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IfEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallInitFuncEPvm(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to %class.anon.105**
  %4 = load %class.anon.105*, %class.anon.105** %3, align 8
  %5 = getelementptr inbounds %class.anon.105, %class.anon.105* %4, i64 0, i32 3
  %6 = load %"struct.jxl::ImageMetadata"**, %"struct.jxl::ImageMetadata"*** %5, align 8
  %7 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %6, align 8
  %8 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %7, i64 0, i32 14, i32 3
  %9 = load float, float* %8, align 4
  %10 = fcmp une float %9, 0.000000e+00
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.16, i64 0, i64 0), i32 250, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.17, i64 0, i64 0)) #5
  %13 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %class.anon.105, %class.anon.105* %4, i64 0, i32 2
  %16 = load %"struct.jxl::ColorEncoding"*, %"struct.jxl::ColorEncoding"** %15, align 8
  %17 = getelementptr inbounds %class.anon.105, %class.anon.105* %4, i64 0, i32 1
  %18 = load %"class.jxl::ImageBundle"**, %"class.jxl::ImageBundle"*** %17, align 8
  %19 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %18, align 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %19, i64 0, i32 11
  %21 = getelementptr inbounds %class.anon.105, %class.anon.105* %4, i64 0, i32 0
  %22 = load %"class.jxl::ColorSpaceTransform"*, %"class.jxl::ColorSpaceTransform"** %21, align 8
  %23 = getelementptr inbounds %class.anon.105, %class.anon.105* %4, i64 0, i32 4
  %24 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %23, align 8
  %25 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %24, i64 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = tail call i32 @_ZN3jxl19ColorSpaceTransform4InitERKNS_13ColorEncodingES3_fmm(%"class.jxl::ColorSpaceTransform"* %22, %"struct.jxl::ColorEncoding"* dereferenceable(152) %20, %"struct.jxl::ColorEncoding"* dereferenceable(152) %16, float %9, i64 %26, i64 %1) #5
  %28 = icmp ne i32 %27, 0
  %29 = sext i1 %28 to i32
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl10ThreadPool12RunCallStateIZNS_12_GLOBAL__N_17CopyToTIfEENS_6StatusEPKNS_13ImageMetadataEPKNS_11ImageBundleERKNS_4RectERKNS_13ColorEncodingEPS0_PNS_6Image3IT_EEEUlmE_ZNS3_IfEES4_S7_SA_SD_SG_SH_SL_EUliiE_E12CallDataFuncEPvjm(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.106**
  %6 = load %class.anon.106*, %class.anon.106** %5, align 8
  %7 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 0
  %8 = load %"class.jxl::ColorSpaceTransform"*, %"class.jxl::ColorSpaceTransform"** %7, align 8
  %9 = shl i64 %2, 32
  %10 = ashr exact i64 %9, 32
  %11 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %8, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %8, i64 0, i32 1, i32 0, i32 4
  %14 = load i64, i64* %13, align 8
  %15 = mul i64 %14, %10
  %16 = getelementptr inbounds i8, i8* %12, i64 %15
  %17 = ptrtoint i8* %16 to i64
  %18 = and i64 %17, 63
  %19 = icmp eq i64 %18, 0
  tail call void @llvm.assume(i1 %19) #5
  %20 = bitcast i8* %16 to float*
  %21 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 1
  %22 = load i8*, i8** %21, align 8
  %23 = load i8, i8* %22, align 1, !range !2
  %24 = icmp eq i8 %23, 0
  %25 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 2
  %26 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %25, align 8
  %27 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 3
  %28 = load %"class.jxl::ImageBundle"**, %"class.jxl::ImageBundle"*** %27, align 8
  %29 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %28, align 8
  %30 = sext i32 %1 to i64
  %31 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %26, i64 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, %30
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 10, i32 0, i64 0, i32 0, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = mul i64 %35, %33
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = ptrtoint i8* %38 to i64
  %40 = and i64 %39, 63
  %41 = icmp eq i64 %40, 0
  tail call void @llvm.assume(i1 %41) #5
  %42 = getelementptr inbounds i8, i8* %38, i64 %36
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #5
  %46 = bitcast i8* %42 to float*
  %47 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %26, i64 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds float, float* %46, i64 %48
  br i1 %24, label %50, label %103

50:                                               ; preds = %3
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #5
  %56 = getelementptr inbounds i8, i8* %52, i64 %36
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #5
  %60 = bitcast i8* %56 to float*
  %61 = getelementptr inbounds float, float* %60, i64 %48
  %62 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #5
  %67 = getelementptr inbounds i8, i8* %63, i64 %36
  %68 = ptrtoint i8* %67 to i64
  %69 = and i64 %68, 63
  %70 = icmp eq i64 %69, 0
  tail call void @llvm.assume(i1 %70) #5
  %71 = bitcast i8* %67 to float*
  %72 = getelementptr inbounds float, float* %71, i64 %48
  %73 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %26, i64 0, i32 2
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %103, label %76

76:                                               ; preds = %50, %76
  %77 = phi i64 [ %96, %76 ], [ 0, %50 ]
  %78 = getelementptr inbounds float, float* %49, i64 %77
  %79 = bitcast float* %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = mul i64 %77, 3
  %82 = getelementptr inbounds float, float* %20, i64 %81
  %83 = bitcast float* %82 to i32*
  store i32 %80, i32* %83, align 4
  %84 = getelementptr inbounds float, float* %61, i64 %77
  %85 = bitcast float* %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = add i64 %81, 1
  %88 = getelementptr inbounds float, float* %20, i64 %87
  %89 = bitcast float* %88 to i32*
  store i32 %86, i32* %89, align 4
  %90 = getelementptr inbounds float, float* %72, i64 %77
  %91 = bitcast float* %90 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = add i64 %81, 2
  %94 = getelementptr inbounds float, float* %20, i64 %93
  %95 = bitcast float* %94 to i32*
  store i32 %92, i32* %95, align 4
  %96 = add nuw i64 %77, 1
  %97 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %25, align 8
  %98 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %97, i64 0, i32 2
  %99 = load i64, i64* %98, align 8
  %100 = icmp ult i64 %96, %99
  br i1 %100, label %76, label %101

101:                                              ; preds = %76
  %102 = load %"class.jxl::ColorSpaceTransform"*, %"class.jxl::ColorSpaceTransform"** %7, align 8
  br label %103

103:                                              ; preds = %101, %50, %3
  %104 = phi %"class.jxl::ColorSpaceTransform"* [ %8, %3 ], [ %8, %50 ], [ %102, %101 ]
  %105 = phi float* [ %49, %3 ], [ %20, %50 ], [ %20, %101 ]
  %106 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %104, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds %"class.jxl::ColorSpaceTransform", %"class.jxl::ColorSpaceTransform"* %104, i64 0, i32 2, i32 0, i32 4
  %109 = load i64, i64* %108, align 8
  %110 = mul i64 %109, %10
  %111 = getelementptr inbounds i8, i8* %107, i64 %110
  %112 = ptrtoint i8* %111 to i64
  %113 = and i64 %112, 63
  %114 = icmp eq i64 %113, 0
  tail call void @llvm.assume(i1 %114) #5
  %115 = bitcast i8* %111 to float*
  tail call void @_ZN3jxl21DoColorSpaceTransformEPNS_19ColorSpaceTransformEmPKfPf(%"class.jxl::ColorSpaceTransform"* %104, i64 %10, float* %105, float* %115) #5
  %116 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 4
  %117 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %116, align 8
  %118 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %117, align 8
  %119 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %118, i64 0, i32 0, i64 0, i32 0, i32 4
  %120 = load i64, i64* %119, align 8
  %121 = mul i64 %120, %30
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %118, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = ptrtoint i8* %123 to i64
  %125 = and i64 %124, 63
  %126 = icmp eq i64 %125, 0
  tail call void @llvm.assume(i1 %126) #5
  %127 = getelementptr inbounds i8, i8* %123, i64 %121
  %128 = ptrtoint i8* %127 to i64
  %129 = and i64 %128, 63
  %130 = icmp eq i64 %129, 0
  tail call void @llvm.assume(i1 %130) #5
  %131 = bitcast i8* %127 to float*
  %132 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %118, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %133 = load i8*, i8** %132, align 8
  %134 = ptrtoint i8* %133 to i64
  %135 = and i64 %134, 63
  %136 = icmp eq i64 %135, 0
  tail call void @llvm.assume(i1 %136) #5
  %137 = getelementptr inbounds i8, i8* %133, i64 %121
  %138 = ptrtoint i8* %137 to i64
  %139 = and i64 %138, 63
  %140 = icmp eq i64 %139, 0
  tail call void @llvm.assume(i1 %140) #5
  %141 = bitcast i8* %137 to float*
  %142 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %118, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  %144 = ptrtoint i8* %143 to i64
  %145 = and i64 %144, 63
  %146 = icmp eq i64 %145, 0
  tail call void @llvm.assume(i1 %146) #5
  %147 = getelementptr inbounds i8, i8* %143, i64 %121
  %148 = ptrtoint i8* %147 to i64
  %149 = and i64 %148, 63
  %150 = icmp eq i64 %149, 0
  tail call void @llvm.assume(i1 %150) #5
  %151 = bitcast i8* %147 to float*
  %152 = load i8*, i8** %21, align 8
  %153 = load i8, i8* %152, align 1, !range !2
  %154 = icmp eq i8 %153, 0
  %155 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %25, align 8
  %156 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %155, i64 0, i32 2
  %157 = load i64, i64* %156, align 8
  %158 = icmp ne i64 %157, 0
  br i1 %154, label %160, label %159

159:                                              ; preds = %103
  br i1 %158, label %161, label %204

160:                                              ; preds = %103
  br i1 %158, label %179, label %204

161:                                              ; preds = %159, %161
  %162 = phi i64 [ %174, %161 ], [ 0, %159 ]
  %163 = getelementptr inbounds float, float* %115, i64 %162
  %164 = bitcast float* %163 to i32*
  %165 = load i32, i32* %164, align 4
  %166 = getelementptr inbounds float, float* %131, i64 %162
  %167 = bitcast float* %166 to i32*
  store i32 %165, i32* %167, align 4
  %168 = load i32, i32* %164, align 4
  %169 = getelementptr inbounds float, float* %141, i64 %162
  %170 = bitcast float* %169 to i32*
  store i32 %168, i32* %170, align 4
  %171 = load i32, i32* %164, align 4
  %172 = getelementptr inbounds float, float* %151, i64 %162
  %173 = bitcast float* %172 to i32*
  store i32 %171, i32* %173, align 4
  %174 = add nuw i64 %162, 1
  %175 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %25, align 8
  %176 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %175, i64 0, i32 2
  %177 = load i64, i64* %176, align 8
  %178 = icmp ult i64 %174, %177
  br i1 %178, label %161, label %204

179:                                              ; preds = %160, %179
  %180 = phi i64 [ %199, %179 ], [ 0, %160 ]
  %181 = mul i64 %180, 3
  %182 = getelementptr inbounds float, float* %115, i64 %181
  %183 = bitcast float* %182 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = getelementptr inbounds float, float* %131, i64 %180
  %186 = bitcast float* %185 to i32*
  store i32 %184, i32* %186, align 4
  %187 = add i64 %181, 1
  %188 = getelementptr inbounds float, float* %115, i64 %187
  %189 = bitcast float* %188 to i32*
  %190 = load i32, i32* %189, align 4
  %191 = getelementptr inbounds float, float* %141, i64 %180
  %192 = bitcast float* %191 to i32*
  store i32 %190, i32* %192, align 4
  %193 = add i64 %181, 2
  %194 = getelementptr inbounds float, float* %115, i64 %193
  %195 = bitcast float* %194 to i32*
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr inbounds float, float* %151, i64 %180
  %198 = bitcast float* %197 to i32*
  store i32 %196, i32* %198, align 4
  %199 = add nuw i64 %180, 1
  %200 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %25, align 8
  %201 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %200, i64 0, i32 2
  %202 = load i64, i64* %201, align 8
  %203 = icmp ult i64 %199, %202
  br i1 %203, label %179, label %204

204:                                              ; preds = %161, %179, %159, %160
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_"}
!6 = !{!7, !4}
!7 = distinct !{!7, !8, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_: argument 0"}
!8 = distinct !{!8, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_: argument 0"}
!14 = distinct !{!14, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_"}
