; ModuleID = '../../third_party/webrtc/rtc_base/numerics/event_based_exponential_moving_average.cc'
source_filename = "../../third_party/webrtc/rtc_base/numerics/event_based_exponential_moving_average.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.rtc::EventBasedExponentialMovingAverage" = type { double, double, double, double, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i64 }

@.str = private unnamed_addr constant [7 x i8] c"uninit\00", align 1

@_ZN3rtc34EventBasedExponentialMovingAverageC1Ei = hidden unnamed_addr alias void (%"class.rtc::EventBasedExponentialMovingAverage"*, i32), void (%"class.rtc::EventBasedExponentialMovingAverage"*, i32)* @_ZN3rtc34EventBasedExponentialMovingAverageC2Ei

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3rtc34EventBasedExponentialMovingAverageC2Ei(%"class.rtc::EventBasedExponentialMovingAverage"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 1
  %4 = tail call double @nan(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)) #4
  store double %4, double* %3, align 8
  %5 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 3
  %7 = bitcast double* %5 to <2 x double>*
  store <2 x double> <double 0x7FF0000000000000, double 1.000000e+00>, <2 x double>* %7, align 8
  %8 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %8, align 8
  %9 = sitofp i32 %1 to double
  %10 = fdiv double %9, 0x3FE62E42FEFA39EF
  %11 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 0
  store double %10, double* %11, align 8
  %12 = tail call double @nan(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)) #4
  store double %12, double* %3, align 8
  store double 0x7FF0000000000000, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i8 0, i8* %8, align 8
  ret void
}

; Function Attrs: nounwind readonly
declare double @nan(i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3rtc34EventBasedExponentialMovingAverage11SetHalfTimeEi(%"class.rtc::EventBasedExponentialMovingAverage"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = sitofp i32 %1 to double
  %4 = fdiv double %3, 0x3FE62E42FEFA39EF
  %5 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 0
  store double %4, double* %5, align 8
  %6 = tail call double @nan(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)) #4
  %7 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 1
  store double %6, double* %7, align 8
  %8 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 2
  %9 = bitcast double* %8 to <2 x double>*
  store <2 x double> <double 0x7FF0000000000000, double 1.000000e+00>, <2 x double>* %9, align 8
  %10 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %10, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3rtc34EventBasedExponentialMovingAverage5ResetEv(%"class.rtc::EventBasedExponentialMovingAverage"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = tail call double @nan(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)) #4
  %3 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 1
  store double %2, double* %3, align 8
  %4 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 2
  %5 = bitcast double* %4 to <2 x double>*
  store <2 x double> <double 0x7FF0000000000000, double 1.000000e+00>, <2 x double>* %5, align 8
  %6 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc34EventBasedExponentialMovingAverage9AddSampleEli(%"class.rtc::EventBasedExponentialMovingAverage"* nocapture, i64, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = sitofp i32 %2 to double
  %9 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 1
  store double %8, double* %9, align 8
  br label %47

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %12, %1
  %14 = sitofp i64 %13 to double
  %15 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 0
  %16 = load double, double* %15, align 8
  %17 = fdiv double %14, %16
  %18 = tail call double @exp(double %17) #5
  %19 = fadd double %18, 1.000000e+00
  %20 = fdiv double %18, %19
  %21 = fsub double 1.000000e+00, %20
  %22 = sitofp i32 %2 to double
  %23 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = fsub double %22, %24
  %26 = fmul double %24, %21
  %27 = fmul double %20, %22
  %28 = fadd double %27, %26
  store double %28, double* %23, align 8
  %29 = fmul double %21, %21
  %30 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 3
  %31 = load double, double* %30, align 8
  %32 = fmul double %31, %29
  %33 = fmul double %20, %20
  %34 = fadd double %33, %32
  store double %34, double* %30, align 8
  %35 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 2
  %36 = load double, double* %35, align 8
  %37 = fcmp oeq double %36, 0x7FF0000000000000
  br i1 %37, label %38, label %40

38:                                               ; preds = %10
  %39 = fmul double %25, %25
  br label %45

40:                                               ; preds = %10
  %41 = fmul double %21, %36
  %42 = fmul double %20, %25
  %43 = fmul double %25, %42
  %44 = fadd double %43, %41
  br label %45

45:                                               ; preds = %40, %38
  %46 = phi double [ %44, %40 ], [ %39, %38 ]
  store double %46, double* %35, align 8
  br label %47

47:                                               ; preds = %45, %7
  store i8 1, i8* %4, align 8
  %48 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %1, i64* %48, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZNK3rtc34EventBasedExponentialMovingAverage21GetConfidenceIntervalEv(%"class.rtc::EventBasedExponentialMovingAverage"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 2
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.rtc::EventBasedExponentialMovingAverage", %"class.rtc::EventBasedExponentialMovingAverage"* %0, i64 0, i32 3
  %5 = load double, double* %4, align 8
  %6 = fmul double %3, %5
  %7 = tail call double @sqrt(double %6) #5
  %8 = fmul double %7, 1.960000e+00
  ret double %8
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #3

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
