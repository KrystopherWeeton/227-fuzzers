; ModuleID = '../../third_party/libgav1/src/src/utils/segmentation_map.cc'
source_filename = "../../third_party/libgav1/src/src/utils/segmentation_map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.std::nothrow_t" = type { i8 }
%"class.libgav1::SegmentationMap" = type { i32, i32, %"class.std::__1::unique_ptr", %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }

@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav115SegmentationMap8AllocateEii(%"class.libgav1::SegmentationMap"* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 0
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 1
  store i32 %2, i32* %5, align 4
  %6 = mul nsw i32 %2, %1
  %7 = sext i32 %6 to i64
  %8 = tail call noalias i8* @_ZnamRKSt9nothrow_t(i64 %7, %"struct.std::nothrow_t"* dereferenceable(1) @_ZSt7nothrow) #4
  %9 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  store i8* %8, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %3
  tail call void @_ZdaPv(i8* nonnull %10) #4
  %13 = load i8*, i8** %9, align 8
  br label %14

14:                                               ; preds = %3, %12
  %15 = phi i8* [ %8, %3 ], [ %13, %12 ]
  %16 = icmp eq i8* %15, null
  br i1 %16, label %23, label %17

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 8
  %19 = load i32, i32* %5, align 4
  %20 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 3, i32 0
  store i32 %18, i32* %20, align 8
  %21 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 3, i32 1
  store i32 %19, i32* %21, align 4
  %22 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 3, i32 2
  store i8* %15, i8** %22, align 8
  br label %23

23:                                               ; preds = %14, %17
  %24 = phi i1 [ true, %17 ], [ false, %14 ]
  ret i1 %24
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnamRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav115SegmentationMap5ClearEv(%"class.libgav1::SegmentationMap"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = mul nsw i32 %7, %5
  %9 = sext i32 %8 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 %9, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav115SegmentationMap8CopyFromERKS0_(%"class.libgav1::SegmentationMap"* nocapture readonly, %"class.libgav1::SegmentationMap"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = mul nsw i32 %10, %8
  %12 = sext i32 %11 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %6, i64 %12, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav115SegmentationMap9FillBlockEiiiia(%"class.libgav1::SegmentationMap"* nocapture readonly, i32, i32, i32, i32, i8 signext) local_unnamed_addr #0 align 2 {
  %7 = icmp sgt i32 %4, 0
  br i1 %7, label %8, label %36

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 3, i32 1
  %10 = getelementptr inbounds %"class.libgav1::SegmentationMap", %"class.libgav1::SegmentationMap"* %0, i64 0, i32 3, i32 2
  %11 = sext i32 %2 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %1 to i64
  %14 = zext i32 %4 to i64
  %15 = add nsw i64 %14, -1
  %16 = and i64 %14, 3
  %17 = icmp ult i64 %15, 3
  br i1 %17, label %20, label %18

18:                                               ; preds = %8
  %19 = sub nsw i64 %14, %16
  br label %37

20:                                               ; preds = %37, %8
  %21 = phi i64 [ 0, %8 ], [ %71, %37 ]
  %22 = icmp eq i64 %16, 0
  br i1 %22, label %36, label %23

23:                                               ; preds = %20, %23
  %24 = phi i64 [ %33, %23 ], [ %21, %20 ]
  %25 = phi i64 [ %34, %23 ], [ %16, %20 ]
  %26 = add nsw i64 %24, %13
  %27 = load i32, i32* %9, align 4
  %28 = sext i32 %27 to i64
  %29 = mul nsw i64 %26, %28
  %30 = load i8*, i8** %10, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 %11
  %32 = getelementptr inbounds i8, i8* %31, i64 %29
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %5, i64 %12, i1 false)
  %33 = add nuw nsw i64 %24, 1
  %34 = add i64 %25, -1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %23, !llvm.loop !2

36:                                               ; preds = %20, %23, %6
  ret void

37:                                               ; preds = %37, %18
  %38 = phi i64 [ 0, %18 ], [ %71, %37 ]
  %39 = phi i64 [ %19, %18 ], [ %72, %37 ]
  %40 = add nsw i64 %38, %13
  %41 = load i32, i32* %9, align 4
  %42 = sext i32 %41 to i64
  %43 = mul nsw i64 %40, %42
  %44 = load i8*, i8** %10, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 %11
  %46 = getelementptr inbounds i8, i8* %45, i64 %43
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %5, i64 %12, i1 false)
  %47 = or i64 %38, 1
  %48 = add nsw i64 %47, %13
  %49 = load i32, i32* %9, align 4
  %50 = sext i32 %49 to i64
  %51 = mul nsw i64 %48, %50
  %52 = load i8*, i8** %10, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 %11
  %54 = getelementptr inbounds i8, i8* %53, i64 %51
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %5, i64 %12, i1 false)
  %55 = or i64 %38, 2
  %56 = add nsw i64 %55, %13
  %57 = load i32, i32* %9, align 4
  %58 = sext i32 %57 to i64
  %59 = mul nsw i64 %56, %58
  %60 = load i8*, i8** %10, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 %11
  %62 = getelementptr inbounds i8, i8* %61, i64 %59
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 %5, i64 %12, i1 false)
  %63 = or i64 %38, 3
  %64 = add nsw i64 %63, %13
  %65 = load i32, i32* %9, align 4
  %66 = sext i32 %65 to i64
  %67 = mul nsw i64 %64, %66
  %68 = load i8*, i8** %10, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 %11
  %70 = getelementptr inbounds i8, i8* %69, i64 %67
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %70, i8 %5, i64 %12, i1 false)
  %71 = add nuw nsw i64 %38, 4
  %72 = add i64 %39, -4
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %20, label %37
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
