; ModuleID = '../../third_party/libjxl/src/lib/jxl/splines.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/splines.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i8* }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.jxl::Spline" = type { %"class.std::__1::vector.1", [3 x [32 x float]], [32 x float] }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.3" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.jxl::Spline::Point"* }
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"*, %"class.std::__1::__compressed_pair.66" }
%"struct.std::__1::pair.65" = type { %"struct.jxl::Spline::Point", float }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.std::__1::pair.65"* }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.72" }
%"struct.std::__1::__atomic_base.72" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { i8*, i8*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.jxl::ANSSymbolReader" = type <{ %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::HuffmanDecodingData"*, i8, [3 x i8], i32, %"struct.jxl::HybridUintConfig"*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", i32*, i32, i32, i32, i32, i32, i32, %"struct.jxl::HybridUintConfig", [120 x i32], i32, [4 x i8] }>
%"struct.jxl::AliasTable::Entry" = type { i8, i8, i16, i16, i16 }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.16" }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.18" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.jxl::HuffmanCode"* }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.26", %"class.std::__1::vector.1" }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.jxl::QuantizedSpline"* }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.33", %"class.std::__1::vector.40", %"class.std::__1::vector.47", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.jxl::HybridUintConfig"* }
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { i32*, i32*, %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { i32* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.54", %"class.jxl::Plane.54", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.54" = type { %"struct.jxl::PlaneBase" }
%"struct.std::__1::__split_buffer" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.std::__1::allocator.6"* }
%"class.std::__1::allocator.6" = type { i8 }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { float*, float*, %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { float* }

$_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm = comdat any

$_ZNSt3__16vectorIN3jxl15QuantizedSplineENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZNK3jxl7Splines5ApplyILb1EEENS_6StatusEPNS_6Image3IfEERKNS_4RectES8_RKNS_19ColorCorrelationMapE = comdat any

$_ZNK3jxl7Splines5ApplyILb0EEENS_6StatusEPNS_6Image3IfEERKNS_4RectES8_RKNS_19ColorCorrelationMapE = comdat any

$_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZNSt3__16vectorINS_4pairIllEENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl15QuantizedSplineENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_ = comdat any

$_ZNSt3__16vectorIN3jxl6Spline5PointENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EEOS3_ = comdat any

$_ZNSt3__114__split_bufferIN3jxl6Spline5PointERNS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"../../third_party/libjxl/src/lib/jxl/splines.cc\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"!original.control_points.empty()\00", align 1
@_ZN3jxlL17kSpecialDistancesE = internal unnamed_addr constant [120 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00", [2 x i8] c"\01\01", [2 x i8] c"\FF\01", [2 x i8] c"\00\02", [2 x i8] c"\02\00", [2 x i8] c"\01\02", [2 x i8] c"\FF\02", [2 x i8] c"\02\01", [2 x i8] c"\FE\01", [2 x i8] c"\02\02", [2 x i8] c"\FE\02", [2 x i8] c"\00\03", [2 x i8] c"\03\00", [2 x i8] c"\01\03", [2 x i8] c"\FF\03", [2 x i8] c"\03\01", [2 x i8] c"\FD\01", [2 x i8] c"\02\03", [2 x i8] c"\FE\03", [2 x i8] c"\03\02", [2 x i8] c"\FD\02", [2 x i8] c"\00\04", [2 x i8] c"\04\00", [2 x i8] c"\01\04", [2 x i8] c"\FF\04", [2 x i8] c"\04\01", [2 x i8] c"\FC\01", [2 x i8] c"\03\03", [2 x i8] c"\FD\03", [2 x i8] c"\02\04", [2 x i8] c"\FE\04", [2 x i8] c"\04\02", [2 x i8] c"\FC\02", [2 x i8] c"\00\05", [2 x i8] c"\03\04", [2 x i8] c"\FD\04", [2 x i8] c"\04\03", [2 x i8] c"\FC\03", [2 x i8] c"\05\00", [2 x i8] c"\01\05", [2 x i8] c"\FF\05", [2 x i8] c"\05\01", [2 x i8] c"\FB\01", [2 x i8] c"\02\05", [2 x i8] c"\FE\05", [2 x i8] c"\05\02", [2 x i8] c"\FB\02", [2 x i8] c"\04\04", [2 x i8] c"\FC\04", [2 x i8] c"\03\05", [2 x i8] c"\FD\05", [2 x i8] c"\05\03", [2 x i8] c"\FB\03", [2 x i8] c"\00\06", [2 x i8] c"\06\00", [2 x i8] c"\01\06", [2 x i8] c"\FF\06", [2 x i8] c"\06\01", [2 x i8] c"\FA\01", [2 x i8] c"\02\06", [2 x i8] c"\FE\06", [2 x i8] c"\06\02", [2 x i8] c"\FA\02", [2 x i8] c"\04\05", [2 x i8] c"\FC\05", [2 x i8] c"\05\04", [2 x i8] c"\FB\04", [2 x i8] c"\03\06", [2 x i8] c"\FD\06", [2 x i8] c"\06\03", [2 x i8] c"\FA\03", [2 x i8] c"\00\07", [2 x i8] c"\07\00", [2 x i8] c"\01\07", [2 x i8] c"\FF\07", [2 x i8] c"\05\05", [2 x i8] c"\FB\05", [2 x i8] c"\07\01", [2 x i8] c"\F9\01", [2 x i8] c"\04\06", [2 x i8] c"\FC\06", [2 x i8] c"\06\04", [2 x i8] c"\FA\04", [2 x i8] c"\02\07", [2 x i8] c"\FE\07", [2 x i8] c"\07\02", [2 x i8] c"\F9\02", [2 x i8] c"\03\07", [2 x i8] c"\FD\07", [2 x i8] c"\07\03", [2 x i8] c"\F9\03", [2 x i8] c"\05\06", [2 x i8] c"\FB\06", [2 x i8] c"\06\05", [2 x i8] c"\FA\05", [2 x i8] c"\08\00", [2 x i8] c"\04\07", [2 x i8] c"\FC\07", [2 x i8] c"\07\04", [2 x i8] c"\F9\04", [2 x i8] c"\08\01", [2 x i8] c"\08\02", [2 x i8] c"\06\06", [2 x i8] c"\FA\06", [2 x i8] c"\08\03", [2 x i8] c"\05\07", [2 x i8] c"\FB\07", [2 x i8] c"\07\05", [2 x i8] c"\F9\05", [2 x i8] c"\08\04", [2 x i8] c"\06\07", [2 x i8] c"\FA\07", [2 x i8] c"\07\06", [2 x i8] c"\F9\06", [2 x i8] c"\08\05", [2 x i8] c"\07\07", [2 x i8] c"\F9\07", [2 x i8] c"\08\06", [2 x i8] c"\08\07"], align 16
@_ZN3jxlL34DrawFromPointsHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)*] [void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* @_ZN3hwy13FunctionCacheIvJPN3jxl6Image3IfEERKNS1_4RectES7_RKNS1_6SplineEbRKNSt3__16vectorINSB_4pairINS8_5PointEfEENSB_9allocatorISF_EEEEfEE13ChooseAndCallIXadL_ZNS1_L34DrawFromPointsHighwayDispatchTableEEEEEvS4_S7_S7_SA_bSK_f, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* @_ZN3jxl6N_AVX312_GLOBAL__N_114DrawFromPointsEPNS_6Image3IfEERKNS_4RectES7_RKNS_6SplineEbRKNSt3__16vectorINSB_4pairINS8_5PointEfEENSB_9allocatorISF_EEEEf, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* @_ZN3jxl6N_AVX212_GLOBAL__N_114DrawFromPointsEPNS_6Image3IfEERKNS_4RectES7_RKNS_6SplineEbRKNSt3__16vectorINSB_4pairINS8_5PointEfEENSB_9allocatorISF_EEEEf, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* @_ZN3jxl6N_SSE412_GLOBAL__N_114DrawFromPointsEPNS_6Image3IfEERKNS_4RectES7_RKNS_6SplineEbRKNSt3__16vectorINSB_4pairINS8_5PointEfEENSB_9allocatorISF_EEEEf, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)* @_ZN3jxl8N_SCALAR12_GLOBAL__N_114DrawFromPointsEPNS_6Image3IfEERKNS_4RectES7_RKNS_6SplineEbRKNSt3__16vectorINSB_4pairINS8_5PointEfEENSB_9allocatorISF_EEEEf], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@.str.15 = private unnamed_addr constant [16 x i8] c"!points.empty()\00", align 1
@_ZZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKffE12kMultipliers = internal unnamed_addr constant [32 x float] [float 0.000000e+00, float 0x3FB921FB60000000, float 0x3FC921FB60000000, float 0x3FD2D97C80000000, float 0x3FD921FB60000000, float 0x3FDF6A7A20000000, float 0x3FE2D97C80000000, float 0x3FE5FDBBE0000000, float 0x3FE921FB60000000, float 0x3FEC463AC0000000, float 0x3FEF6A7A20000000, float 0x3FF1475CC0000000, float 0x3FF2D97C80000000, float 0x3FF46B9C40000000, float 0x3FF5FDBBE0000000, float 0x3FF78FDBA0000000, float 0x3FF921FB60000000, float 0x3FFAB41B00000000, float 0x3FFC463AC0000000, float 0x3FFDD85A80000000, float 0x3FFF6A7A20000000, float 0x40007E4CE0000000, float 0x4001475CC0000000, float 0x4002106CA0000000, float 0x4002D97C80000000, float 0x4003A28C60000000, float 0x40046B9C40000000, float 0x400534AC00000000, float 0x4005FDBBE0000000, float 0x4006C6CBC0000000, float 0x40078FDBA0000000, float 0x400858EB80000000], align 64
@__const._ZNK3jxl7Splines5ApplyILb0EEENS_6StatusEPNS_6Image3IfEERKNS_4RectES8_RKNS_19ColorCorrelationMapE.spline = private unnamed_addr constant %"struct.jxl::Spline" { %"class.std::__1::vector.1" { %"class.std::__1::__vector_base.2" { %"struct.jxl::Spline::Point"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::Spline::Point"*), %"struct.jxl::Spline::Point"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::Spline::Point"*), %"class.std::__1::__compressed_pair.3" { %"struct.std::__1::__compressed_pair_elem.4" { %"struct.jxl::Spline::Point"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::Spline::Point"*) } } } }, [3 x [32 x float]] [[32 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [32 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [32 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [32 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, align 8

@_ZN3jxl15QuantizedSplineC1ERKNS_6SplineEiff = hidden unnamed_addr alias void (%"class.jxl::QuantizedSpline"*, %"struct.jxl::Spline"*, i32, float, float), void (%"class.jxl::QuantizedSpline"*, %"struct.jxl::Spline"*, i32, float, float)* @_ZN3jxl15QuantizedSplineC2ERKNS_6SplineEiff

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl15QuantizedSplineC2ERKNS_6SplineEiff(%"class.jxl::QuantizedSpline"*, %"struct.jxl::Spline"* nocapture readonly dereferenceable(536), i32, float, float) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.jxl::QuantizedSpline"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 536, i1 false)
  %8 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %6, align 8
  %9 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 0, i32 0, i32 1
  %10 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %9, align 8
  %11 = icmp eq %"struct.jxl::Spline::Point"* %8, %10
  br i1 %11, label %12, label %15

12:                                               ; preds = %5
  %13 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 328, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #18
  %14 = tail call zeroext i1 @_ZN3jxl5AbortEv() #20
  unreachable

15:                                               ; preds = %5
  %16 = ptrtoint %"struct.jxl::Spline::Point"* %8 to i64
  %17 = ptrtoint %"struct.jxl::Spline::Point"* %10 to i64
  %18 = sub i64 %17, %16
  %19 = ashr exact i64 %18, 3
  %20 = add nsw i64 %19, -1
  %21 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast %"struct.std::__1::pair"** %21 to i64*
  %23 = bitcast %"class.jxl::QuantizedSpline"* %0 to i64*
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %40, label %25

25:                                               ; preds = %15
  %26 = icmp ugt i64 %20, 1152921504606846975
  br i1 %26, label %27, label %28

27:                                               ; preds = %25
  tail call void @abort() #20
  unreachable

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = bitcast %"struct.std::__1::pair"** %29 to i64*
  %31 = shl i64 %20, 4
  %32 = tail call i8* @_Znwm(i64 %31) #21
  %33 = bitcast i8* %32 to %"struct.std::__1::pair"*
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 %20
  %36 = ptrtoint %"struct.std::__1::pair"* %35 to i64
  %37 = ptrtoint i8* %32 to i64
  store i64 %37, i64* %23, align 8
  store i64 %34, i64* %30, align 8
  store i64 %36, i64* %22, align 8
  %38 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %6, align 8
  %39 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %9, align 8
  br label %40

40:                                               ; preds = %15, %28
  %41 = phi i64 [ %36, %28 ], [ 0, %15 ]
  %42 = phi i64 [ %34, %28 ], [ 0, %15 ]
  %43 = phi %"struct.std::__1::pair"* [ %35, %28 ], [ null, %15 ]
  %44 = phi %"struct.std::__1::pair"* [ %33, %28 ], [ null, %15 ]
  %45 = phi %"struct.jxl::Spline::Point"* [ %39, %28 ], [ %10, %15 ]
  %46 = phi %"struct.jxl::Spline::Point"* [ %38, %28 ], [ %8, %15 ]
  %47 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %46, i64 1
  %48 = icmp eq %"struct.jxl::Spline::Point"* %47, %45
  br i1 %48, label %61, label %49

49:                                               ; preds = %40
  %50 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %46, i64 0, i32 1
  %51 = load float, float* %50, align 4
  %52 = tail call float @llvm.round.f32(float %51)
  %53 = fptosi float %52 to i32
  %54 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %46, i64 0, i32 0
  %55 = load float, float* %54, align 4
  %56 = tail call float @llvm.round.f32(float %55)
  %57 = fptosi float %56 to i32
  %58 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 0, i32 0, i32 1
  %59 = bitcast %"struct.std::__1::pair"** %58 to i64*
  %60 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 0, i32 0, i32 0
  br label %210

61:                                               ; preds = %296, %40
  %62 = icmp sgt i32 %2, -1
  %63 = sub nsw i32 0, %2
  %64 = sitofp i32 %63 to float
  %65 = fmul float %64, 1.250000e-01
  %66 = fadd float %65, 1.000000e+00
  %67 = fdiv float 1.000000e+00, %66
  %68 = sitofp i32 %2 to float
  %69 = fmul float %68, 1.250000e-01
  %70 = fadd float %69, 1.000000e+00
  %71 = select i1 %62, float %70, float %67
  %72 = fdiv float %71, 0x3FB3333340000000
  %73 = fdiv float %71, 0x3F713404E0000000
  %74 = getelementptr %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 0, i64 0
  %75 = getelementptr %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 0
  %76 = getelementptr %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 0, i64 0
  %77 = getelementptr %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 1, i64 0
  %78 = bitcast float* %77 to i32*
  %79 = icmp ult i32* %74, %78
  %80 = bitcast i32* %75 to float*
  %81 = icmp ult float* %76, %80
  %82 = and i1 %79, %81
  br i1 %82, label %430, label %83

83:                                               ; preds = %61
  %84 = insertelement <4 x float> undef, float %3, i32 0
  %85 = shufflevector <4 x float> %84, <4 x float> undef, <4 x i32> zeroinitializer
  %86 = insertelement <4 x float> undef, float %72, i32 0
  %87 = shufflevector <4 x float> %86, <4 x float> undef, <4 x i32> zeroinitializer
  %88 = insertelement <4 x float> undef, float %73, i32 0
  %89 = shufflevector <4 x float> %88, <4 x float> undef, <4 x i32> zeroinitializer
  %90 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 0, i64 0
  %91 = bitcast float* %90 to <4 x float>*
  %92 = load <4 x float>, <4 x float>* %91, align 4, !alias.scope !2
  %93 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 0
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4, !alias.scope !5, !noalias !2
  %96 = sitofp <4 x i32> %95 to <4 x float>
  %97 = fmul <4 x float> %85, %96
  %98 = fdiv <4 x float> %97, %87
  %99 = fsub <4 x float> %92, %98
  %100 = fmul <4 x float> %99, %89
  %101 = call <4 x float> @llvm.round.v4f32(<4 x float> %100)
  %102 = fptosi <4 x float> %101 to <4 x i32>
  %103 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 0, i64 0
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %104, align 4, !alias.scope !5, !noalias !2
  %105 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 0, i64 4
  %106 = bitcast float* %105 to <4 x float>*
  %107 = load <4 x float>, <4 x float>* %106, align 4, !alias.scope !2
  %108 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !5, !noalias !2
  %111 = sitofp <4 x i32> %110 to <4 x float>
  %112 = fmul <4 x float> %85, %111
  %113 = fdiv <4 x float> %112, %87
  %114 = fsub <4 x float> %107, %113
  %115 = fmul <4 x float> %114, %89
  %116 = call <4 x float> @llvm.round.v4f32(<4 x float> %115)
  %117 = fptosi <4 x float> %116 to <4 x i32>
  %118 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 0, i64 4
  %119 = bitcast i32* %118 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %119, align 4, !alias.scope !5, !noalias !2
  %120 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 0, i64 8
  %121 = bitcast float* %120 to <4 x float>*
  %122 = load <4 x float>, <4 x float>* %121, align 4, !alias.scope !2
  %123 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 8
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 4, !alias.scope !5, !noalias !2
  %126 = sitofp <4 x i32> %125 to <4 x float>
  %127 = fmul <4 x float> %85, %126
  %128 = fdiv <4 x float> %127, %87
  %129 = fsub <4 x float> %122, %128
  %130 = fmul <4 x float> %129, %89
  %131 = call <4 x float> @llvm.round.v4f32(<4 x float> %130)
  %132 = fptosi <4 x float> %131 to <4 x i32>
  %133 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 0, i64 8
  %134 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %134, align 4, !alias.scope !5, !noalias !2
  %135 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 0, i64 12
  %136 = bitcast float* %135 to <4 x float>*
  %137 = load <4 x float>, <4 x float>* %136, align 4, !alias.scope !2
  %138 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 12
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4, !alias.scope !5, !noalias !2
  %141 = sitofp <4 x i32> %140 to <4 x float>
  %142 = fmul <4 x float> %85, %141
  %143 = fdiv <4 x float> %142, %87
  %144 = fsub <4 x float> %137, %143
  %145 = fmul <4 x float> %144, %89
  %146 = call <4 x float> @llvm.round.v4f32(<4 x float> %145)
  %147 = fptosi <4 x float> %146 to <4 x i32>
  %148 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 0, i64 12
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %149, align 4, !alias.scope !5, !noalias !2
  %150 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 0, i64 16
  %151 = bitcast float* %150 to <4 x float>*
  %152 = load <4 x float>, <4 x float>* %151, align 4, !alias.scope !2
  %153 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 16
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !alias.scope !5, !noalias !2
  %156 = sitofp <4 x i32> %155 to <4 x float>
  %157 = fmul <4 x float> %85, %156
  %158 = fdiv <4 x float> %157, %87
  %159 = fsub <4 x float> %152, %158
  %160 = fmul <4 x float> %159, %89
  %161 = call <4 x float> @llvm.round.v4f32(<4 x float> %160)
  %162 = fptosi <4 x float> %161 to <4 x i32>
  %163 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 0, i64 16
  %164 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %162, <4 x i32>* %164, align 4, !alias.scope !5, !noalias !2
  %165 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 0, i64 20
  %166 = bitcast float* %165 to <4 x float>*
  %167 = load <4 x float>, <4 x float>* %166, align 4, !alias.scope !2
  %168 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 20
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4, !alias.scope !5, !noalias !2
  %171 = sitofp <4 x i32> %170 to <4 x float>
  %172 = fmul <4 x float> %85, %171
  %173 = fdiv <4 x float> %172, %87
  %174 = fsub <4 x float> %167, %173
  %175 = fmul <4 x float> %174, %89
  %176 = call <4 x float> @llvm.round.v4f32(<4 x float> %175)
  %177 = fptosi <4 x float> %176 to <4 x i32>
  %178 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 0, i64 20
  %179 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> %177, <4 x i32>* %179, align 4, !alias.scope !5, !noalias !2
  %180 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 0, i64 24
  %181 = bitcast float* %180 to <4 x float>*
  %182 = load <4 x float>, <4 x float>* %181, align 4, !alias.scope !2
  %183 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 24
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4, !alias.scope !5, !noalias !2
  %186 = sitofp <4 x i32> %185 to <4 x float>
  %187 = fmul <4 x float> %85, %186
  %188 = fdiv <4 x float> %187, %87
  %189 = fsub <4 x float> %182, %188
  %190 = fmul <4 x float> %189, %89
  %191 = call <4 x float> @llvm.round.v4f32(<4 x float> %190)
  %192 = fptosi <4 x float> %191 to <4 x i32>
  %193 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 0, i64 24
  %194 = bitcast i32* %193 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %194, align 4, !alias.scope !5, !noalias !2
  %195 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 0, i64 28
  %196 = bitcast float* %195 to <4 x float>*
  %197 = load <4 x float>, <4 x float>* %196, align 4, !alias.scope !2
  %198 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 28
  %199 = bitcast i32* %198 to <4 x i32>*
  %200 = load <4 x i32>, <4 x i32>* %199, align 4, !alias.scope !5, !noalias !2
  %201 = sitofp <4 x i32> %200 to <4 x float>
  %202 = fmul <4 x float> %85, %201
  %203 = fdiv <4 x float> %202, %87
  %204 = fsub <4 x float> %197, %203
  %205 = fmul <4 x float> %204, %89
  %206 = call <4 x float> @llvm.round.v4f32(<4 x float> %205)
  %207 = fptosi <4 x float> %206 to <4 x i32>
  %208 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 0, i64 28
  %209 = bitcast i32* %208 to <4 x i32>*
  store <4 x i32> %207, <4 x i32>* %209, align 4, !alias.scope !5, !noalias !2
  br label %305

210:                                              ; preds = %300, %49
  %211 = phi i64 [ %41, %49 ], [ %304, %300 ]
  %212 = phi i64 [ %42, %49 ], [ %303, %300 ]
  %213 = phi %"struct.std::__1::pair"* [ %43, %49 ], [ %302, %300 ]
  %214 = phi %"struct.std::__1::pair"* [ %44, %49 ], [ %301, %300 ]
  %215 = phi %"struct.jxl::Spline::Point"* [ %47, %49 ], [ %297, %300 ]
  %216 = phi i32 [ %57, %49 ], [ %224, %300 ]
  %217 = phi i32 [ %53, %49 ], [ %228, %300 ]
  %218 = phi i32 [ 0, %49 ], [ %229, %300 ]
  %219 = phi i32 [ 0, %49 ], [ %230, %300 ]
  %220 = phi %"struct.jxl::Spline::Point"* [ %46, %49 ], [ %215, %300 ]
  %221 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %215, i64 0, i32 0
  %222 = load float, float* %221, align 4
  %223 = tail call float @llvm.round.f32(float %222)
  %224 = fptosi float %223 to i32
  %225 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %220, i64 1, i32 1
  %226 = load float, float* %225, align 4
  %227 = tail call float @llvm.round.f32(float %226)
  %228 = fptosi float %227 to i32
  %229 = sub nsw i32 %224, %216
  %230 = sub nsw i32 %228, %217
  %231 = sub nsw i32 %229, %218
  %232 = sub nsw i32 %230, %219
  %233 = icmp ult %"struct.std::__1::pair"* %214, %213
  br i1 %233, label %234, label %241

234:                                              ; preds = %210
  %235 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %214, i64 0, i32 0
  %236 = sext i32 %231 to i64
  store i64 %236, i64* %235, align 8
  %237 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %214, i64 0, i32 1
  %238 = sext i32 %232 to i64
  store i64 %238, i64* %237, align 8
  %239 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %214, i64 1
  %240 = ptrtoint %"struct.std::__1::pair"* %239 to i64
  store i64 %240, i64* %59, align 8
  br label %296

241:                                              ; preds = %210
  %242 = load i64, i64* %23, align 8
  %243 = sub i64 %212, %242
  %244 = ashr exact i64 %243, 4
  %245 = add nsw i64 %244, 1
  %246 = icmp ugt i64 %245, 1152921504606846975
  br i1 %246, label %247, label %249

247:                                              ; preds = %241
  %248 = bitcast %"class.jxl::QuantizedSpline"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %248) #20
  unreachable

249:                                              ; preds = %241
  %250 = sub i64 %211, %242
  %251 = ashr exact i64 %250, 4
  %252 = icmp ult i64 %251, 576460752303423487
  br i1 %252, label %253, label %261

253:                                              ; preds = %249
  %254 = ashr exact i64 %250, 3
  %255 = icmp ult i64 %254, %245
  %256 = select i1 %255, i64 %245, i64 %254
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %266, label %258

258:                                              ; preds = %253
  %259 = icmp ugt i64 %256, 1152921504606846975
  br i1 %259, label %260, label %261

260:                                              ; preds = %258
  tail call void @abort() #20
  unreachable

261:                                              ; preds = %258, %249
  %262 = phi i64 [ %256, %258 ], [ 1152921504606846975, %249 ]
  %263 = shl i64 %262, 4
  %264 = tail call i8* @_Znwm(i64 %263) #21
  %265 = bitcast i8* %264 to %"struct.std::__1::pair"*
  br label %266

266:                                              ; preds = %261, %253
  %267 = phi i64 [ %262, %261 ], [ 0, %253 ]
  %268 = phi %"struct.std::__1::pair"* [ %265, %261 ], [ null, %253 ]
  %269 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %268, i64 %244
  %270 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %268, i64 %267
  %271 = ptrtoint %"struct.std::__1::pair"* %270 to i64
  %272 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %269, i64 0, i32 0
  %273 = sext i32 %231 to i64
  store i64 %273, i64* %272, align 8
  %274 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %268, i64 %244, i32 1
  %275 = sext i32 %232 to i64
  store i64 %275, i64* %274, align 8
  %276 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %269, i64 1
  %277 = ptrtoint %"struct.std::__1::pair"* %276 to i64
  %278 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %60, align 8
  %279 = load i64, i64* %59, align 8
  %280 = ptrtoint %"struct.std::__1::pair"* %278 to i64
  %281 = sub i64 %279, %280
  %282 = ashr exact i64 %281, 4
  %283 = sub nsw i64 0, %282
  %284 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %269, i64 %283
  %285 = ptrtoint %"struct.std::__1::pair"* %284 to i64
  %286 = icmp sgt i64 %281, 0
  br i1 %286, label %287, label %291

287:                                              ; preds = %266
  %288 = bitcast %"struct.std::__1::pair"* %284 to i8*
  %289 = bitcast %"struct.std::__1::pair"* %278 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %288, i8* align 8 %289, i64 %281, i1 false) #18
  %290 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %60, align 8
  br label %291

291:                                              ; preds = %287, %266
  %292 = phi %"struct.std::__1::pair"* [ %278, %266 ], [ %290, %287 ]
  store i64 %285, i64* %23, align 8
  store i64 %277, i64* %59, align 8
  store i64 %271, i64* %22, align 8
  %293 = icmp eq %"struct.std::__1::pair"* %292, null
  br i1 %293, label %296, label %294

294:                                              ; preds = %291
  %295 = bitcast %"struct.std::__1::pair"* %292 to i8*
  tail call void @_ZdlPv(i8* %295) #21
  br label %296

296:                                              ; preds = %294, %291, %234
  %297 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %215, i64 1
  %298 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %9, align 8
  %299 = icmp eq %"struct.jxl::Spline::Point"* %297, %298
  br i1 %299, label %61, label %300

300:                                              ; preds = %296
  %301 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %58, align 8
  %302 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %21, align 8
  %303 = ptrtoint %"struct.std::__1::pair"* %301 to i64
  %304 = ptrtoint %"struct.std::__1::pair"* %302 to i64
  br label %210

305:                                              ; preds = %430, %83
  %306 = getelementptr %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 0
  %307 = getelementptr %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 0
  %308 = getelementptr %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 1, i64 0
  %309 = getelementptr %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 2, i64 0
  %310 = bitcast float* %309 to i32*
  %311 = icmp ult i32* %306, %310
  %312 = bitcast i32* %307 to float*
  %313 = icmp ult float* %308, %312
  %314 = and i1 %311, %313
  br i1 %314, label %464, label %315

315:                                              ; preds = %305
  %316 = insertelement <4 x float> undef, float %72, i32 0
  %317 = shufflevector <4 x float> %316, <4 x float> undef, <4 x i32> zeroinitializer
  %318 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 1, i64 0
  %319 = bitcast float* %318 to <4 x float>*
  %320 = load <4 x float>, <4 x float>* %319, align 4, !alias.scope !7
  %321 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 0
  %322 = bitcast i32* %321 to <4 x i32>*
  %323 = load <4 x i32>, <4 x i32>* %322, align 4, !alias.scope !10, !noalias !7
  %324 = sitofp <4 x i32> %323 to <4 x float>
  %325 = fmul <4 x float> %324, zeroinitializer
  %326 = fdiv <4 x float> %325, %317
  %327 = fsub <4 x float> %320, %326
  %328 = fmul <4 x float> %327, %317
  %329 = call <4 x float> @llvm.round.v4f32(<4 x float> %328)
  %330 = fptosi <4 x float> %329 to <4 x i32>
  %331 = bitcast i32* %321 to <4 x i32>*
  store <4 x i32> %330, <4 x i32>* %331, align 4, !alias.scope !10, !noalias !7
  %332 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 1, i64 4
  %333 = bitcast float* %332 to <4 x float>*
  %334 = load <4 x float>, <4 x float>* %333, align 4, !alias.scope !7
  %335 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 4
  %336 = bitcast i32* %335 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 4, !alias.scope !10, !noalias !7
  %338 = sitofp <4 x i32> %337 to <4 x float>
  %339 = fmul <4 x float> %338, zeroinitializer
  %340 = fdiv <4 x float> %339, %317
  %341 = fsub <4 x float> %334, %340
  %342 = fmul <4 x float> %341, %317
  %343 = call <4 x float> @llvm.round.v4f32(<4 x float> %342)
  %344 = fptosi <4 x float> %343 to <4 x i32>
  %345 = bitcast i32* %335 to <4 x i32>*
  store <4 x i32> %344, <4 x i32>* %345, align 4, !alias.scope !10, !noalias !7
  %346 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 1, i64 8
  %347 = bitcast float* %346 to <4 x float>*
  %348 = load <4 x float>, <4 x float>* %347, align 4, !alias.scope !7
  %349 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 8
  %350 = bitcast i32* %349 to <4 x i32>*
  %351 = load <4 x i32>, <4 x i32>* %350, align 4, !alias.scope !10, !noalias !7
  %352 = sitofp <4 x i32> %351 to <4 x float>
  %353 = fmul <4 x float> %352, zeroinitializer
  %354 = fdiv <4 x float> %353, %317
  %355 = fsub <4 x float> %348, %354
  %356 = fmul <4 x float> %355, %317
  %357 = call <4 x float> @llvm.round.v4f32(<4 x float> %356)
  %358 = fptosi <4 x float> %357 to <4 x i32>
  %359 = bitcast i32* %349 to <4 x i32>*
  store <4 x i32> %358, <4 x i32>* %359, align 4, !alias.scope !10, !noalias !7
  %360 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 1, i64 12
  %361 = bitcast float* %360 to <4 x float>*
  %362 = load <4 x float>, <4 x float>* %361, align 4, !alias.scope !7
  %363 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 12
  %364 = bitcast i32* %363 to <4 x i32>*
  %365 = load <4 x i32>, <4 x i32>* %364, align 4, !alias.scope !10, !noalias !7
  %366 = sitofp <4 x i32> %365 to <4 x float>
  %367 = fmul <4 x float> %366, zeroinitializer
  %368 = fdiv <4 x float> %367, %317
  %369 = fsub <4 x float> %362, %368
  %370 = fmul <4 x float> %369, %317
  %371 = call <4 x float> @llvm.round.v4f32(<4 x float> %370)
  %372 = fptosi <4 x float> %371 to <4 x i32>
  %373 = bitcast i32* %363 to <4 x i32>*
  store <4 x i32> %372, <4 x i32>* %373, align 4, !alias.scope !10, !noalias !7
  %374 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 1, i64 16
  %375 = bitcast float* %374 to <4 x float>*
  %376 = load <4 x float>, <4 x float>* %375, align 4, !alias.scope !7
  %377 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 16
  %378 = bitcast i32* %377 to <4 x i32>*
  %379 = load <4 x i32>, <4 x i32>* %378, align 4, !alias.scope !10, !noalias !7
  %380 = sitofp <4 x i32> %379 to <4 x float>
  %381 = fmul <4 x float> %380, zeroinitializer
  %382 = fdiv <4 x float> %381, %317
  %383 = fsub <4 x float> %376, %382
  %384 = fmul <4 x float> %383, %317
  %385 = call <4 x float> @llvm.round.v4f32(<4 x float> %384)
  %386 = fptosi <4 x float> %385 to <4 x i32>
  %387 = bitcast i32* %377 to <4 x i32>*
  store <4 x i32> %386, <4 x i32>* %387, align 4, !alias.scope !10, !noalias !7
  %388 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 1, i64 20
  %389 = bitcast float* %388 to <4 x float>*
  %390 = load <4 x float>, <4 x float>* %389, align 4, !alias.scope !7
  %391 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 20
  %392 = bitcast i32* %391 to <4 x i32>*
  %393 = load <4 x i32>, <4 x i32>* %392, align 4, !alias.scope !10, !noalias !7
  %394 = sitofp <4 x i32> %393 to <4 x float>
  %395 = fmul <4 x float> %394, zeroinitializer
  %396 = fdiv <4 x float> %395, %317
  %397 = fsub <4 x float> %390, %396
  %398 = fmul <4 x float> %397, %317
  %399 = call <4 x float> @llvm.round.v4f32(<4 x float> %398)
  %400 = fptosi <4 x float> %399 to <4 x i32>
  %401 = bitcast i32* %391 to <4 x i32>*
  store <4 x i32> %400, <4 x i32>* %401, align 4, !alias.scope !10, !noalias !7
  %402 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 1, i64 24
  %403 = bitcast float* %402 to <4 x float>*
  %404 = load <4 x float>, <4 x float>* %403, align 4, !alias.scope !7
  %405 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 24
  %406 = bitcast i32* %405 to <4 x i32>*
  %407 = load <4 x i32>, <4 x i32>* %406, align 4, !alias.scope !10, !noalias !7
  %408 = sitofp <4 x i32> %407 to <4 x float>
  %409 = fmul <4 x float> %408, zeroinitializer
  %410 = fdiv <4 x float> %409, %317
  %411 = fsub <4 x float> %404, %410
  %412 = fmul <4 x float> %411, %317
  %413 = call <4 x float> @llvm.round.v4f32(<4 x float> %412)
  %414 = fptosi <4 x float> %413 to <4 x i32>
  %415 = bitcast i32* %405 to <4 x i32>*
  store <4 x i32> %414, <4 x i32>* %415, align 4, !alias.scope !10, !noalias !7
  %416 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 1, i64 28
  %417 = bitcast float* %416 to <4 x float>*
  %418 = load <4 x float>, <4 x float>* %417, align 4, !alias.scope !7
  %419 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 28
  %420 = bitcast i32* %419 to <4 x i32>*
  %421 = load <4 x i32>, <4 x i32>* %420, align 4, !alias.scope !10, !noalias !7
  %422 = sitofp <4 x i32> %421 to <4 x float>
  %423 = fmul <4 x float> %422, zeroinitializer
  %424 = fdiv <4 x float> %423, %317
  %425 = fsub <4 x float> %418, %424
  %426 = fmul <4 x float> %425, %317
  %427 = call <4 x float> @llvm.round.v4f32(<4 x float> %426)
  %428 = fptosi <4 x float> %427 to <4 x i32>
  %429 = bitcast i32* %419 to <4 x i32>*
  store <4 x i32> %428, <4 x i32>* %429, align 4, !alias.scope !10, !noalias !7
  br label %479

430:                                              ; preds = %61, %430
  %431 = phi i64 [ %444, %430 ], [ 0, %61 ]
  %432 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 0, i64 %431
  %433 = load float, float* %432, align 4
  %434 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 %431
  %435 = load i32, i32* %434, align 4
  %436 = sitofp i32 %435 to float
  %437 = fmul float %436, %3
  %438 = fdiv float %437, %72
  %439 = fsub float %433, %438
  %440 = fmul float %439, %73
  %441 = tail call float @llvm.round.f32(float %440)
  %442 = fptosi float %441 to i32
  %443 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 0, i64 %431
  store i32 %442, i32* %443, align 4
  %444 = add nuw nsw i64 %431, 1
  %445 = icmp eq i64 %444, 32
  br i1 %445, label %305, label %430, !llvm.loop !12

446:                                              ; preds = %447, %644
  ret void

447:                                              ; preds = %633, %447
  %448 = phi i64 [ %462, %447 ], [ 0, %633 ]
  %449 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 %448
  %450 = load float, float* %449, align 4
  %451 = fmul float %450, %634
  %452 = tail call float @llvm.round.f32(float %451)
  %453 = fptosi float %452 to i32
  %454 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 %448
  store i32 %453, i32* %454, align 4
  %455 = or i64 %448, 1
  %456 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 %455
  %457 = load float, float* %456, align 4
  %458 = fmul float %457, %634
  %459 = tail call float @llvm.round.f32(float %458)
  %460 = fptosi float %459 to i32
  %461 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 %455
  store i32 %460, i32* %461, align 4
  %462 = add nuw nsw i64 %448, 2
  %463 = icmp eq i64 %462, 32
  br i1 %463, label %446, label %447, !llvm.loop !14

464:                                              ; preds = %305, %464
  %465 = phi i64 [ %477, %464 ], [ 0, %305 ]
  %466 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 1, i64 %465
  %467 = load float, float* %466, align 4
  %468 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 %465
  %469 = load i32, i32* %468, align 4
  %470 = sitofp i32 %469 to float
  %471 = fmul float %470, 0.000000e+00
  %472 = fdiv float %471, %72
  %473 = fsub float %467, %472
  %474 = fmul float %473, %72
  %475 = tail call float @llvm.round.f32(float %474)
  %476 = fptosi float %475 to i32
  store i32 %476, i32* %468, align 4
  %477 = add nuw nsw i64 %465, 1
  %478 = icmp eq i64 %477, 32
  br i1 %478, label %479, label %464, !llvm.loop !15

479:                                              ; preds = %464, %315
  %480 = fdiv float %71, 0x3FB1EB8520000000
  %481 = getelementptr %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 0
  %482 = getelementptr %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 0
  %483 = getelementptr %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 2, i64 0
  %484 = getelementptr %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 0
  %485 = bitcast float* %484 to i32*
  %486 = icmp ult i32* %481, %485
  %487 = bitcast i32* %482 to float*
  %488 = icmp ult float* %483, %487
  %489 = and i1 %486, %488
  br i1 %489, label %617, label %490

490:                                              ; preds = %479
  %491 = insertelement <4 x float> undef, float %4, i32 0
  %492 = shufflevector <4 x float> %491, <4 x float> undef, <4 x i32> zeroinitializer
  %493 = insertelement <4 x float> undef, float %72, i32 0
  %494 = shufflevector <4 x float> %493, <4 x float> undef, <4 x i32> zeroinitializer
  %495 = insertelement <4 x float> undef, float %480, i32 0
  %496 = shufflevector <4 x float> %495, <4 x float> undef, <4 x i32> zeroinitializer
  %497 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 2, i64 0
  %498 = bitcast float* %497 to <4 x float>*
  %499 = load <4 x float>, <4 x float>* %498, align 4, !alias.scope !16
  %500 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 0
  %501 = bitcast i32* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 4, !alias.scope !19, !noalias !16
  %503 = sitofp <4 x i32> %502 to <4 x float>
  %504 = fmul <4 x float> %492, %503
  %505 = fdiv <4 x float> %504, %494
  %506 = fsub <4 x float> %499, %505
  %507 = fmul <4 x float> %506, %496
  %508 = call <4 x float> @llvm.round.v4f32(<4 x float> %507)
  %509 = fptosi <4 x float> %508 to <4 x i32>
  %510 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 0
  %511 = bitcast i32* %510 to <4 x i32>*
  store <4 x i32> %509, <4 x i32>* %511, align 4, !alias.scope !19, !noalias !16
  %512 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 2, i64 4
  %513 = bitcast float* %512 to <4 x float>*
  %514 = load <4 x float>, <4 x float>* %513, align 4, !alias.scope !16
  %515 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 4
  %516 = bitcast i32* %515 to <4 x i32>*
  %517 = load <4 x i32>, <4 x i32>* %516, align 4, !alias.scope !19, !noalias !16
  %518 = sitofp <4 x i32> %517 to <4 x float>
  %519 = fmul <4 x float> %492, %518
  %520 = fdiv <4 x float> %519, %494
  %521 = fsub <4 x float> %514, %520
  %522 = fmul <4 x float> %521, %496
  %523 = call <4 x float> @llvm.round.v4f32(<4 x float> %522)
  %524 = fptosi <4 x float> %523 to <4 x i32>
  %525 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 4
  %526 = bitcast i32* %525 to <4 x i32>*
  store <4 x i32> %524, <4 x i32>* %526, align 4, !alias.scope !19, !noalias !16
  %527 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 2, i64 8
  %528 = bitcast float* %527 to <4 x float>*
  %529 = load <4 x float>, <4 x float>* %528, align 4, !alias.scope !16
  %530 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 8
  %531 = bitcast i32* %530 to <4 x i32>*
  %532 = load <4 x i32>, <4 x i32>* %531, align 4, !alias.scope !19, !noalias !16
  %533 = sitofp <4 x i32> %532 to <4 x float>
  %534 = fmul <4 x float> %492, %533
  %535 = fdiv <4 x float> %534, %494
  %536 = fsub <4 x float> %529, %535
  %537 = fmul <4 x float> %536, %496
  %538 = call <4 x float> @llvm.round.v4f32(<4 x float> %537)
  %539 = fptosi <4 x float> %538 to <4 x i32>
  %540 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 8
  %541 = bitcast i32* %540 to <4 x i32>*
  store <4 x i32> %539, <4 x i32>* %541, align 4, !alias.scope !19, !noalias !16
  %542 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 2, i64 12
  %543 = bitcast float* %542 to <4 x float>*
  %544 = load <4 x float>, <4 x float>* %543, align 4, !alias.scope !16
  %545 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 12
  %546 = bitcast i32* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 4, !alias.scope !19, !noalias !16
  %548 = sitofp <4 x i32> %547 to <4 x float>
  %549 = fmul <4 x float> %492, %548
  %550 = fdiv <4 x float> %549, %494
  %551 = fsub <4 x float> %544, %550
  %552 = fmul <4 x float> %551, %496
  %553 = call <4 x float> @llvm.round.v4f32(<4 x float> %552)
  %554 = fptosi <4 x float> %553 to <4 x i32>
  %555 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 12
  %556 = bitcast i32* %555 to <4 x i32>*
  store <4 x i32> %554, <4 x i32>* %556, align 4, !alias.scope !19, !noalias !16
  %557 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 2, i64 16
  %558 = bitcast float* %557 to <4 x float>*
  %559 = load <4 x float>, <4 x float>* %558, align 4, !alias.scope !16
  %560 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 16
  %561 = bitcast i32* %560 to <4 x i32>*
  %562 = load <4 x i32>, <4 x i32>* %561, align 4, !alias.scope !19, !noalias !16
  %563 = sitofp <4 x i32> %562 to <4 x float>
  %564 = fmul <4 x float> %492, %563
  %565 = fdiv <4 x float> %564, %494
  %566 = fsub <4 x float> %559, %565
  %567 = fmul <4 x float> %566, %496
  %568 = call <4 x float> @llvm.round.v4f32(<4 x float> %567)
  %569 = fptosi <4 x float> %568 to <4 x i32>
  %570 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 16
  %571 = bitcast i32* %570 to <4 x i32>*
  store <4 x i32> %569, <4 x i32>* %571, align 4, !alias.scope !19, !noalias !16
  %572 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 2, i64 20
  %573 = bitcast float* %572 to <4 x float>*
  %574 = load <4 x float>, <4 x float>* %573, align 4, !alias.scope !16
  %575 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 20
  %576 = bitcast i32* %575 to <4 x i32>*
  %577 = load <4 x i32>, <4 x i32>* %576, align 4, !alias.scope !19, !noalias !16
  %578 = sitofp <4 x i32> %577 to <4 x float>
  %579 = fmul <4 x float> %492, %578
  %580 = fdiv <4 x float> %579, %494
  %581 = fsub <4 x float> %574, %580
  %582 = fmul <4 x float> %581, %496
  %583 = call <4 x float> @llvm.round.v4f32(<4 x float> %582)
  %584 = fptosi <4 x float> %583 to <4 x i32>
  %585 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 20
  %586 = bitcast i32* %585 to <4 x i32>*
  store <4 x i32> %584, <4 x i32>* %586, align 4, !alias.scope !19, !noalias !16
  %587 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 2, i64 24
  %588 = bitcast float* %587 to <4 x float>*
  %589 = load <4 x float>, <4 x float>* %588, align 4, !alias.scope !16
  %590 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 24
  %591 = bitcast i32* %590 to <4 x i32>*
  %592 = load <4 x i32>, <4 x i32>* %591, align 4, !alias.scope !19, !noalias !16
  %593 = sitofp <4 x i32> %592 to <4 x float>
  %594 = fmul <4 x float> %492, %593
  %595 = fdiv <4 x float> %594, %494
  %596 = fsub <4 x float> %589, %595
  %597 = fmul <4 x float> %596, %496
  %598 = call <4 x float> @llvm.round.v4f32(<4 x float> %597)
  %599 = fptosi <4 x float> %598 to <4 x i32>
  %600 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 24
  %601 = bitcast i32* %600 to <4 x i32>*
  store <4 x i32> %599, <4 x i32>* %601, align 4, !alias.scope !19, !noalias !16
  %602 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 2, i64 28
  %603 = bitcast float* %602 to <4 x float>*
  %604 = load <4 x float>, <4 x float>* %603, align 4, !alias.scope !16
  %605 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 28
  %606 = bitcast i32* %605 to <4 x i32>*
  %607 = load <4 x i32>, <4 x i32>* %606, align 4, !alias.scope !19, !noalias !16
  %608 = sitofp <4 x i32> %607 to <4 x float>
  %609 = fmul <4 x float> %492, %608
  %610 = fdiv <4 x float> %609, %494
  %611 = fsub <4 x float> %604, %610
  %612 = fmul <4 x float> %611, %496
  %613 = call <4 x float> @llvm.round.v4f32(<4 x float> %612)
  %614 = fptosi <4 x float> %613 to <4 x i32>
  %615 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 28
  %616 = bitcast i32* %615 to <4 x i32>*
  store <4 x i32> %614, <4 x i32>* %616, align 4, !alias.scope !19, !noalias !16
  br label %633

617:                                              ; preds = %479, %617
  %618 = phi i64 [ %631, %617 ], [ 0, %479 ]
  %619 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 1, i64 2, i64 %618
  %620 = load float, float* %619, align 4
  %621 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 %618
  %622 = load i32, i32* %621, align 4
  %623 = sitofp i32 %622 to float
  %624 = fmul float %623, %4
  %625 = fdiv float %624, %72
  %626 = fsub float %620, %625
  %627 = fmul float %626, %480
  %628 = tail call float @llvm.round.f32(float %627)
  %629 = fptosi float %628 to i32
  %630 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 %618
  store i32 %629, i32* %630, align 4
  %631 = add nuw nsw i64 %618, 1
  %632 = icmp eq i64 %631, 32
  br i1 %632, label %633, label %617, !llvm.loop !21

633:                                              ; preds = %617, %490
  %634 = fdiv float %71, 0x3FD554C980000000
  %635 = getelementptr %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 0
  %636 = getelementptr %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 1
  %637 = getelementptr %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 0
  %638 = getelementptr %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 1
  %639 = bitcast %"struct.jxl::Spline"* %638 to i32*
  %640 = icmp ult i32* %635, %639
  %641 = bitcast %"class.jxl::QuantizedSpline"* %636 to float*
  %642 = icmp ult float* %637, %641
  %643 = and i1 %640, %642
  br i1 %643, label %447, label %644

644:                                              ; preds = %633
  %645 = insertelement <4 x float> undef, float %634, i32 0
  %646 = shufflevector <4 x float> %645, <4 x float> undef, <4 x i32> zeroinitializer
  %647 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 0
  %648 = bitcast float* %647 to <4 x float>*
  %649 = load <4 x float>, <4 x float>* %648, align 4, !alias.scope !22
  %650 = fmul <4 x float> %649, %646
  %651 = call <4 x float> @llvm.round.v4f32(<4 x float> %650)
  %652 = fptosi <4 x float> %651 to <4 x i32>
  %653 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 0
  %654 = bitcast i32* %653 to <4 x i32>*
  store <4 x i32> %652, <4 x i32>* %654, align 4, !alias.scope !25, !noalias !22
  %655 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 4
  %656 = bitcast float* %655 to <4 x float>*
  %657 = load <4 x float>, <4 x float>* %656, align 4, !alias.scope !22
  %658 = fmul <4 x float> %657, %646
  %659 = call <4 x float> @llvm.round.v4f32(<4 x float> %658)
  %660 = fptosi <4 x float> %659 to <4 x i32>
  %661 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 4
  %662 = bitcast i32* %661 to <4 x i32>*
  store <4 x i32> %660, <4 x i32>* %662, align 4, !alias.scope !25, !noalias !22
  %663 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 8
  %664 = bitcast float* %663 to <4 x float>*
  %665 = load <4 x float>, <4 x float>* %664, align 4, !alias.scope !22
  %666 = fmul <4 x float> %665, %646
  %667 = call <4 x float> @llvm.round.v4f32(<4 x float> %666)
  %668 = fptosi <4 x float> %667 to <4 x i32>
  %669 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 8
  %670 = bitcast i32* %669 to <4 x i32>*
  store <4 x i32> %668, <4 x i32>* %670, align 4, !alias.scope !25, !noalias !22
  %671 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 12
  %672 = bitcast float* %671 to <4 x float>*
  %673 = load <4 x float>, <4 x float>* %672, align 4, !alias.scope !22
  %674 = fmul <4 x float> %673, %646
  %675 = call <4 x float> @llvm.round.v4f32(<4 x float> %674)
  %676 = fptosi <4 x float> %675 to <4 x i32>
  %677 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 12
  %678 = bitcast i32* %677 to <4 x i32>*
  store <4 x i32> %676, <4 x i32>* %678, align 4, !alias.scope !25, !noalias !22
  %679 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 16
  %680 = bitcast float* %679 to <4 x float>*
  %681 = load <4 x float>, <4 x float>* %680, align 4, !alias.scope !22
  %682 = fmul <4 x float> %681, %646
  %683 = call <4 x float> @llvm.round.v4f32(<4 x float> %682)
  %684 = fptosi <4 x float> %683 to <4 x i32>
  %685 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 16
  %686 = bitcast i32* %685 to <4 x i32>*
  store <4 x i32> %684, <4 x i32>* %686, align 4, !alias.scope !25, !noalias !22
  %687 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 20
  %688 = bitcast float* %687 to <4 x float>*
  %689 = load <4 x float>, <4 x float>* %688, align 4, !alias.scope !22
  %690 = fmul <4 x float> %689, %646
  %691 = call <4 x float> @llvm.round.v4f32(<4 x float> %690)
  %692 = fptosi <4 x float> %691 to <4 x i32>
  %693 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 20
  %694 = bitcast i32* %693 to <4 x i32>*
  store <4 x i32> %692, <4 x i32>* %694, align 4, !alias.scope !25, !noalias !22
  %695 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 24
  %696 = bitcast float* %695 to <4 x float>*
  %697 = load <4 x float>, <4 x float>* %696, align 4, !alias.scope !22
  %698 = fmul <4 x float> %697, %646
  %699 = call <4 x float> @llvm.round.v4f32(<4 x float> %698)
  %700 = fptosi <4 x float> %699 to <4 x i32>
  %701 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 24
  %702 = bitcast i32* %701 to <4 x i32>*
  store <4 x i32> %700, <4 x i32>* %702, align 4, !alias.scope !25, !noalias !22
  %703 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %1, i64 0, i32 2, i64 28
  %704 = bitcast float* %703 to <4 x float>*
  %705 = load <4 x float>, <4 x float>* %704, align 4, !alias.scope !22
  %706 = fmul <4 x float> %705, %646
  %707 = call <4 x float> @llvm.round.v4f32(<4 x float> %706)
  %708 = fptosi <4 x float> %707 to <4 x i32>
  %709 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 28
  %710 = bitcast i32* %709 to <4 x i32>*
  store <4 x i32> %708, <4 x i32>* %710, align 4, !alias.scope !25, !noalias !22
  br label %446
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3jxl15QuantizedSpline10DequantizeERKNS_6Spline5PointEiff(%"struct.jxl::Spline"* noalias sret, %"class.jxl::QuantizedSpline"* nocapture readonly, %"struct.jxl::Spline::Point"* nocapture readonly dereferenceable(8), i32, float, float) local_unnamed_addr #0 align 2 {
  %7 = bitcast %"struct.jxl::Spline"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 bitcast (%"struct.jxl::Spline"* @__const._ZNK3jxl7Splines5ApplyILb0EEENS_6StatusEPNS_6Image3IfEERKNS_4RectES8_RKNS_19ColorCorrelationMapE.spline to i8*), i64 536, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #18
  %8 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 0, i32 0, i32 1
  %9 = bitcast %"struct.std::__1::pair"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.jxl::QuantizedSpline"* %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 4
  %15 = add nsw i64 %14, 1
  %16 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"struct.jxl::Spline::Point"** %16 to i64*
  %18 = bitcast %"struct.jxl::Spline"* %0 to i64*
  %19 = icmp eq i64 %15, 0
  br i1 %19, label %34, label %20

20:                                               ; preds = %6
  %21 = icmp ugt i64 %15, 2305843009213693951
  br i1 %21, label %22, label %23

22:                                               ; preds = %20
  tail call void @abort() #20
  unreachable

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 0, i32 0, i32 1
  %25 = bitcast %"struct.jxl::Spline::Point"** %24 to i64*
  %26 = shl nsw i64 %15, 3
  %27 = tail call i8* @_Znwm(i64 %26) #21
  %28 = bitcast i8* %27 to %"struct.jxl::Spline::Point"*
  %29 = ptrtoint i8* %27 to i64
  %30 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %28, i64 %15
  %31 = ptrtoint %"struct.jxl::Spline::Point"* %30 to i64
  %32 = ptrtoint i8* %27 to i64
  store i64 %32, i64* %18, align 8
  store i64 %29, i64* %25, align 8
  store i64 %31, i64* %17, align 8
  %33 = bitcast i8* %27 to %"struct.jxl::Spline::Point"*
  br label %34

34:                                               ; preds = %23, %6
  %35 = phi i64 [ 0, %6 ], [ %29, %23 ]
  %36 = phi i8* [ null, %6 ], [ %27, %23 ]
  %37 = phi %"struct.jxl::Spline::Point"* [ null, %6 ], [ %33, %23 ]
  %38 = phi i64 [ 0, %6 ], [ %32, %23 ]
  %39 = phi %"struct.jxl::Spline::Point"* [ null, %6 ], [ %30, %23 ]
  %40 = phi %"struct.jxl::Spline::Point"* [ null, %6 ], [ %28, %23 ]
  %41 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %2, i64 0, i32 0
  %42 = load float, float* %41, align 4
  %43 = tail call float @llvm.round.f32(float %42)
  %44 = fptosi float %43 to i32
  %45 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %2, i64 0, i32 1
  %46 = load float, float* %45, align 4
  %47 = tail call float @llvm.round.f32(float %46)
  %48 = fptosi float %47 to i32
  %49 = sitofp i32 %44 to float
  %50 = sitofp i32 %48 to float
  %51 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 0, i32 0, i32 1
  %52 = icmp ult %"struct.jxl::Spline::Point"* %40, %39
  %53 = ptrtoint %"struct.jxl::Spline::Point"* %39 to i64
  br i1 %52, label %54, label %60

54:                                               ; preds = %34
  %55 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %40, i64 0, i32 0
  store float %49, float* %55, align 4
  %56 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %40, i64 0, i32 1
  store float %50, float* %56, align 4
  %57 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %40, i64 1
  %58 = ptrtoint %"struct.jxl::Spline::Point"* %57 to i64
  %59 = bitcast %"struct.jxl::Spline::Point"** %51 to i64*
  store i64 %58, i64* %59, align 8
  br label %108

60:                                               ; preds = %34
  %61 = ptrtoint %"struct.jxl::Spline::Point"* %40 to i64
  %62 = bitcast %"struct.jxl::Spline::Point"** %51 to i64*
  %63 = sub i64 %61, %38
  %64 = ashr exact i64 %63, 3
  %65 = add nsw i64 %64, 1
  %66 = icmp ugt i64 %65, 2305843009213693951
  br i1 %66, label %67, label %69

67:                                               ; preds = %60
  %68 = bitcast %"struct.jxl::Spline"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %68) #20
  unreachable

69:                                               ; preds = %60
  %70 = sub i64 %53, %38
  %71 = ashr exact i64 %70, 3
  %72 = icmp ult i64 %71, 1152921504606846975
  br i1 %72, label %73, label %81

73:                                               ; preds = %69
  %74 = ashr exact i64 %70, 2
  %75 = icmp ult i64 %74, %65
  %76 = select i1 %75, i64 %65, i64 %74
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %86, label %78

78:                                               ; preds = %73
  %79 = icmp ugt i64 %76, 2305843009213693951
  br i1 %79, label %80, label %81

80:                                               ; preds = %78
  tail call void @abort() #20
  unreachable

81:                                               ; preds = %78, %69
  %82 = phi i64 [ %76, %78 ], [ 2305843009213693951, %69 ]
  %83 = shl i64 %82, 3
  %84 = tail call i8* @_Znwm(i64 %83) #21
  %85 = bitcast i8* %84 to %"struct.jxl::Spline::Point"*
  br label %86

86:                                               ; preds = %81, %73
  %87 = phi i64 [ %82, %81 ], [ 0, %73 ]
  %88 = phi %"struct.jxl::Spline::Point"* [ %85, %81 ], [ null, %73 ]
  %89 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %88, i64 %64
  %90 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %88, i64 %87
  %91 = ptrtoint %"struct.jxl::Spline::Point"* %90 to i64
  %92 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %89, i64 0, i32 0
  store float %49, float* %92, align 4
  %93 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %88, i64 %64, i32 1
  store float %50, float* %93, align 4
  %94 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %89, i64 1
  %95 = ptrtoint %"struct.jxl::Spline::Point"* %94 to i64
  %96 = ptrtoint %"struct.jxl::Spline::Point"* %37 to i64
  %97 = sub i64 %35, %96
  %98 = ashr exact i64 %97, 3
  %99 = sub nsw i64 0, %98
  %100 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %89, i64 %99
  %101 = ptrtoint %"struct.jxl::Spline::Point"* %100 to i64
  %102 = icmp sgt i64 %97, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %86
  %104 = bitcast %"struct.jxl::Spline::Point"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %36, i64 %97, i1 false) #18
  br label %105

105:                                              ; preds = %103, %86
  store i64 %101, i64* %18, align 8
  store i64 %95, i64* %62, align 8
  store i64 %91, i64* %17, align 8
  %106 = icmp eq %"struct.jxl::Spline::Point"* %37, null
  br i1 %106, label %108, label %107

107:                                              ; preds = %105
  tail call void @_ZdlPv(i8* %36) #21
  br label %108

108:                                              ; preds = %54, %105, %107
  %109 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 0, i32 0, i32 0
  %110 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %109, align 8
  %111 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %8, align 8
  %112 = icmp eq %"struct.std::__1::pair"* %110, %111
  br i1 %112, label %115, label %113

113:                                              ; preds = %108
  %114 = bitcast %"struct.jxl::Spline::Point"** %51 to i64*
  br label %490

115:                                              ; preds = %566, %108
  %116 = icmp sgt i32 %3, -1
  %117 = sub nsw i32 0, %3
  %118 = sitofp i32 %117 to float
  %119 = fmul float %118, 1.250000e-01
  %120 = fadd float %119, 1.000000e+00
  %121 = fdiv float 1.000000e+00, %120
  %122 = sitofp i32 %3 to float
  %123 = fmul float %122, 1.250000e-01
  %124 = fadd float %123, 1.000000e+00
  %125 = select i1 %116, float %124, float %121
  %126 = fdiv float %125, 0x3F713404E0000000
  %127 = insertelement <4 x float> undef, float %126, i32 0
  %128 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> zeroinitializer
  %129 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 0, i64 0
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4
  %132 = sitofp <4 x i32> %131 to <4 x float>
  %133 = fmul <4 x float> %132, <float 0x3FE6A09E60000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %134 = fdiv <4 x float> %133, %128
  %135 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 0
  %136 = bitcast float* %135 to <4 x float>*
  store <4 x float> %134, <4 x float>* %136, align 8
  %137 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 0, i64 4
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 4
  %140 = sitofp <4 x i32> %139 to <4 x float>
  %141 = fdiv <4 x float> %140, %128
  %142 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 4
  %143 = bitcast float* %142 to <4 x float>*
  store <4 x float> %141, <4 x float>* %143, align 8
  %144 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 0, i64 8
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = sitofp <4 x i32> %146 to <4 x float>
  %148 = fdiv <4 x float> %147, %128
  %149 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 8
  %150 = bitcast float* %149 to <4 x float>*
  store <4 x float> %148, <4 x float>* %150, align 8
  %151 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 0, i64 12
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = sitofp <4 x i32> %153 to <4 x float>
  %155 = fdiv <4 x float> %154, %128
  %156 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 12
  %157 = bitcast float* %156 to <4 x float>*
  store <4 x float> %155, <4 x float>* %157, align 8
  %158 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 0, i64 16
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 4
  %161 = sitofp <4 x i32> %160 to <4 x float>
  %162 = fdiv <4 x float> %161, %128
  %163 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 16
  %164 = bitcast float* %163 to <4 x float>*
  store <4 x float> %162, <4 x float>* %164, align 8
  %165 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 0, i64 20
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = sitofp <4 x i32> %167 to <4 x float>
  %169 = fdiv <4 x float> %168, %128
  %170 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 20
  %171 = bitcast float* %170 to <4 x float>*
  store <4 x float> %169, <4 x float>* %171, align 8
  %172 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 0, i64 24
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4
  %175 = sitofp <4 x i32> %174 to <4 x float>
  %176 = fdiv <4 x float> %175, %128
  %177 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 24
  %178 = bitcast float* %177 to <4 x float>*
  store <4 x float> %176, <4 x float>* %178, align 8
  %179 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 0, i64 28
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 4
  %182 = sitofp <4 x i32> %181 to <4 x float>
  %183 = fdiv <4 x float> %182, %128
  %184 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 28
  %185 = bitcast float* %184 to <4 x float>*
  store <4 x float> %183, <4 x float>* %185, align 8
  %186 = fdiv float %125, 0x3FB3333340000000
  %187 = insertelement <4 x float> undef, float %186, i32 0
  %188 = shufflevector <4 x float> %187, <4 x float> undef, <4 x i32> zeroinitializer
  %189 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 1, i64 0
  %190 = bitcast i32* %189 to <4 x i32>*
  %191 = load <4 x i32>, <4 x i32>* %190, align 4
  %192 = sitofp <4 x i32> %191 to <4 x float>
  %193 = fmul <4 x float> %192, <float 0x3FE6A09E60000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %194 = fdiv <4 x float> %193, %188
  %195 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 0
  %196 = bitcast float* %195 to <4 x float>*
  store <4 x float> %194, <4 x float>* %196, align 8
  %197 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 1, i64 4
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 4
  %200 = sitofp <4 x i32> %199 to <4 x float>
  %201 = fdiv <4 x float> %200, %188
  %202 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 4
  %203 = bitcast float* %202 to <4 x float>*
  store <4 x float> %201, <4 x float>* %203, align 8
  %204 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 1, i64 8
  %205 = bitcast i32* %204 to <4 x i32>*
  %206 = load <4 x i32>, <4 x i32>* %205, align 4
  %207 = sitofp <4 x i32> %206 to <4 x float>
  %208 = fdiv <4 x float> %207, %188
  %209 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 8
  %210 = bitcast float* %209 to <4 x float>*
  store <4 x float> %208, <4 x float>* %210, align 8
  %211 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 1, i64 12
  %212 = bitcast i32* %211 to <4 x i32>*
  %213 = load <4 x i32>, <4 x i32>* %212, align 4
  %214 = sitofp <4 x i32> %213 to <4 x float>
  %215 = fdiv <4 x float> %214, %188
  %216 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 12
  %217 = bitcast float* %216 to <4 x float>*
  store <4 x float> %215, <4 x float>* %217, align 8
  %218 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 1, i64 16
  %219 = bitcast i32* %218 to <4 x i32>*
  %220 = load <4 x i32>, <4 x i32>* %219, align 4
  %221 = sitofp <4 x i32> %220 to <4 x float>
  %222 = fdiv <4 x float> %221, %188
  %223 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 16
  %224 = bitcast float* %223 to <4 x float>*
  store <4 x float> %222, <4 x float>* %224, align 8
  %225 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 1, i64 20
  %226 = bitcast i32* %225 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4
  %228 = sitofp <4 x i32> %227 to <4 x float>
  %229 = fdiv <4 x float> %228, %188
  %230 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 20
  %231 = bitcast float* %230 to <4 x float>*
  store <4 x float> %229, <4 x float>* %231, align 8
  %232 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 1, i64 24
  %233 = bitcast i32* %232 to <4 x i32>*
  %234 = load <4 x i32>, <4 x i32>* %233, align 4
  %235 = sitofp <4 x i32> %234 to <4 x float>
  %236 = fdiv <4 x float> %235, %188
  %237 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 24
  %238 = bitcast float* %237 to <4 x float>*
  store <4 x float> %236, <4 x float>* %238, align 8
  %239 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 1, i64 28
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4
  %242 = sitofp <4 x i32> %241 to <4 x float>
  %243 = fdiv <4 x float> %242, %188
  %244 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 28
  %245 = bitcast float* %244 to <4 x float>*
  store <4 x float> %243, <4 x float>* %245, align 8
  %246 = fdiv float %125, 0x3FB1EB8520000000
  %247 = insertelement <4 x float> undef, float %246, i32 0
  %248 = shufflevector <4 x float> %247, <4 x float> undef, <4 x i32> zeroinitializer
  %249 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 2, i64 0
  %250 = bitcast i32* %249 to <4 x i32>*
  %251 = load <4 x i32>, <4 x i32>* %250, align 4
  %252 = sitofp <4 x i32> %251 to <4 x float>
  %253 = fmul <4 x float> %252, <float 0x3FE6A09E60000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %254 = fdiv <4 x float> %253, %248
  %255 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 0
  %256 = bitcast float* %255 to <4 x float>*
  store <4 x float> %254, <4 x float>* %256, align 8
  %257 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 2, i64 4
  %258 = bitcast i32* %257 to <4 x i32>*
  %259 = load <4 x i32>, <4 x i32>* %258, align 4
  %260 = sitofp <4 x i32> %259 to <4 x float>
  %261 = fdiv <4 x float> %260, %248
  %262 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 4
  %263 = bitcast float* %262 to <4 x float>*
  store <4 x float> %261, <4 x float>* %263, align 8
  %264 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 2, i64 8
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4
  %267 = sitofp <4 x i32> %266 to <4 x float>
  %268 = fdiv <4 x float> %267, %248
  %269 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 8
  %270 = bitcast float* %269 to <4 x float>*
  store <4 x float> %268, <4 x float>* %270, align 8
  %271 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 2, i64 12
  %272 = bitcast i32* %271 to <4 x i32>*
  %273 = load <4 x i32>, <4 x i32>* %272, align 4
  %274 = sitofp <4 x i32> %273 to <4 x float>
  %275 = fdiv <4 x float> %274, %248
  %276 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 12
  %277 = bitcast float* %276 to <4 x float>*
  store <4 x float> %275, <4 x float>* %277, align 8
  %278 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 2, i64 16
  %279 = bitcast i32* %278 to <4 x i32>*
  %280 = load <4 x i32>, <4 x i32>* %279, align 4
  %281 = sitofp <4 x i32> %280 to <4 x float>
  %282 = fdiv <4 x float> %281, %248
  %283 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 16
  %284 = bitcast float* %283 to <4 x float>*
  store <4 x float> %282, <4 x float>* %284, align 8
  %285 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 2, i64 20
  %286 = bitcast i32* %285 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 4
  %288 = sitofp <4 x i32> %287 to <4 x float>
  %289 = fdiv <4 x float> %288, %248
  %290 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 20
  %291 = bitcast float* %290 to <4 x float>*
  store <4 x float> %289, <4 x float>* %291, align 8
  %292 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 2, i64 24
  %293 = bitcast i32* %292 to <4 x i32>*
  %294 = load <4 x i32>, <4 x i32>* %293, align 4
  %295 = sitofp <4 x i32> %294 to <4 x float>
  %296 = fdiv <4 x float> %295, %248
  %297 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 24
  %298 = bitcast float* %297 to <4 x float>*
  store <4 x float> %296, <4 x float>* %298, align 8
  %299 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1, i64 2, i64 28
  %300 = bitcast i32* %299 to <4 x i32>*
  %301 = load <4 x i32>, <4 x i32>* %300, align 4
  %302 = sitofp <4 x i32> %301 to <4 x float>
  %303 = fdiv <4 x float> %302, %248
  %304 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 28
  %305 = bitcast float* %304 to <4 x float>*
  store <4 x float> %303, <4 x float>* %305, align 8
  %306 = insertelement <4 x float> undef, float %4, i32 0
  %307 = shufflevector <4 x float> %306, <4 x float> undef, <4 x i32> zeroinitializer
  %308 = insertelement <4 x float> undef, float %5, i32 0
  %309 = shufflevector <4 x float> %308, <4 x float> undef, <4 x i32> zeroinitializer
  %310 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 0
  %311 = bitcast float* %310 to <4 x float>*
  %312 = load <4 x float>, <4 x float>* %311, align 8
  %313 = fmul <4 x float> %312, %307
  %314 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 0
  %315 = bitcast float* %314 to <4 x float>*
  %316 = load <4 x float>, <4 x float>* %315, align 8
  %317 = fadd <4 x float> %316, %313
  %318 = bitcast float* %314 to <4 x float>*
  store <4 x float> %317, <4 x float>* %318, align 8
  %319 = fmul <4 x float> %312, %309
  %320 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 0
  %321 = bitcast float* %320 to <4 x float>*
  %322 = load <4 x float>, <4 x float>* %321, align 8
  %323 = fadd <4 x float> %319, %322
  %324 = bitcast float* %320 to <4 x float>*
  store <4 x float> %323, <4 x float>* %324, align 8
  %325 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 4
  %326 = bitcast float* %325 to <4 x float>*
  %327 = load <4 x float>, <4 x float>* %326, align 8
  %328 = fmul <4 x float> %327, %307
  %329 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 4
  %330 = bitcast float* %329 to <4 x float>*
  %331 = load <4 x float>, <4 x float>* %330, align 8
  %332 = fadd <4 x float> %331, %328
  %333 = bitcast float* %329 to <4 x float>*
  store <4 x float> %332, <4 x float>* %333, align 8
  %334 = fmul <4 x float> %327, %309
  %335 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 4
  %336 = bitcast float* %335 to <4 x float>*
  %337 = load <4 x float>, <4 x float>* %336, align 8
  %338 = fadd <4 x float> %334, %337
  %339 = bitcast float* %335 to <4 x float>*
  store <4 x float> %338, <4 x float>* %339, align 8
  %340 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 8
  %341 = bitcast float* %340 to <4 x float>*
  %342 = load <4 x float>, <4 x float>* %341, align 8
  %343 = fmul <4 x float> %342, %307
  %344 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 8
  %345 = bitcast float* %344 to <4 x float>*
  %346 = load <4 x float>, <4 x float>* %345, align 8
  %347 = fadd <4 x float> %346, %343
  %348 = bitcast float* %344 to <4 x float>*
  store <4 x float> %347, <4 x float>* %348, align 8
  %349 = fmul <4 x float> %342, %309
  %350 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 8
  %351 = bitcast float* %350 to <4 x float>*
  %352 = load <4 x float>, <4 x float>* %351, align 8
  %353 = fadd <4 x float> %349, %352
  %354 = bitcast float* %350 to <4 x float>*
  store <4 x float> %353, <4 x float>* %354, align 8
  %355 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 12
  %356 = bitcast float* %355 to <4 x float>*
  %357 = load <4 x float>, <4 x float>* %356, align 8
  %358 = fmul <4 x float> %357, %307
  %359 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 12
  %360 = bitcast float* %359 to <4 x float>*
  %361 = load <4 x float>, <4 x float>* %360, align 8
  %362 = fadd <4 x float> %361, %358
  %363 = bitcast float* %359 to <4 x float>*
  store <4 x float> %362, <4 x float>* %363, align 8
  %364 = fmul <4 x float> %357, %309
  %365 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 12
  %366 = bitcast float* %365 to <4 x float>*
  %367 = load <4 x float>, <4 x float>* %366, align 8
  %368 = fadd <4 x float> %364, %367
  %369 = bitcast float* %365 to <4 x float>*
  store <4 x float> %368, <4 x float>* %369, align 8
  %370 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 16
  %371 = bitcast float* %370 to <4 x float>*
  %372 = load <4 x float>, <4 x float>* %371, align 8
  %373 = fmul <4 x float> %372, %307
  %374 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 16
  %375 = bitcast float* %374 to <4 x float>*
  %376 = load <4 x float>, <4 x float>* %375, align 8
  %377 = fadd <4 x float> %376, %373
  %378 = bitcast float* %374 to <4 x float>*
  store <4 x float> %377, <4 x float>* %378, align 8
  %379 = fmul <4 x float> %372, %309
  %380 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 16
  %381 = bitcast float* %380 to <4 x float>*
  %382 = load <4 x float>, <4 x float>* %381, align 8
  %383 = fadd <4 x float> %379, %382
  %384 = bitcast float* %380 to <4 x float>*
  store <4 x float> %383, <4 x float>* %384, align 8
  %385 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 20
  %386 = bitcast float* %385 to <4 x float>*
  %387 = load <4 x float>, <4 x float>* %386, align 8
  %388 = fmul <4 x float> %387, %307
  %389 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 20
  %390 = bitcast float* %389 to <4 x float>*
  %391 = load <4 x float>, <4 x float>* %390, align 8
  %392 = fadd <4 x float> %391, %388
  %393 = bitcast float* %389 to <4 x float>*
  store <4 x float> %392, <4 x float>* %393, align 8
  %394 = fmul <4 x float> %387, %309
  %395 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 20
  %396 = bitcast float* %395 to <4 x float>*
  %397 = load <4 x float>, <4 x float>* %396, align 8
  %398 = fadd <4 x float> %394, %397
  %399 = bitcast float* %395 to <4 x float>*
  store <4 x float> %398, <4 x float>* %399, align 8
  %400 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 24
  %401 = bitcast float* %400 to <4 x float>*
  %402 = load <4 x float>, <4 x float>* %401, align 8
  %403 = fmul <4 x float> %402, %307
  %404 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 24
  %405 = bitcast float* %404 to <4 x float>*
  %406 = load <4 x float>, <4 x float>* %405, align 8
  %407 = fadd <4 x float> %406, %403
  %408 = bitcast float* %404 to <4 x float>*
  store <4 x float> %407, <4 x float>* %408, align 8
  %409 = fmul <4 x float> %402, %309
  %410 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 24
  %411 = bitcast float* %410 to <4 x float>*
  %412 = load <4 x float>, <4 x float>* %411, align 8
  %413 = fadd <4 x float> %409, %412
  %414 = bitcast float* %410 to <4 x float>*
  store <4 x float> %413, <4 x float>* %414, align 8
  %415 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 1, i64 28
  %416 = bitcast float* %415 to <4 x float>*
  %417 = load <4 x float>, <4 x float>* %416, align 8
  %418 = fmul <4 x float> %417, %307
  %419 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 0, i64 28
  %420 = bitcast float* %419 to <4 x float>*
  %421 = load <4 x float>, <4 x float>* %420, align 8
  %422 = fadd <4 x float> %421, %418
  %423 = bitcast float* %419 to <4 x float>*
  store <4 x float> %422, <4 x float>* %423, align 8
  %424 = fmul <4 x float> %417, %309
  %425 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 1, i64 2, i64 28
  %426 = bitcast float* %425 to <4 x float>*
  %427 = load <4 x float>, <4 x float>* %426, align 8
  %428 = fadd <4 x float> %424, %427
  %429 = bitcast float* %425 to <4 x float>*
  store <4 x float> %428, <4 x float>* %429, align 8
  %430 = fdiv float %125, 0x3FD554C980000000
  %431 = insertelement <4 x float> undef, float %430, i32 0
  %432 = shufflevector <4 x float> %431, <4 x float> undef, <4 x i32> zeroinitializer
  %433 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 2, i64 0
  %434 = bitcast i32* %433 to <4 x i32>*
  %435 = load <4 x i32>, <4 x i32>* %434, align 4
  %436 = sitofp <4 x i32> %435 to <4 x float>
  %437 = fmul <4 x float> %436, <float 0x3FE6A09E60000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %438 = fdiv <4 x float> %437, %432
  %439 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 2, i64 0
  %440 = bitcast float* %439 to <4 x float>*
  store <4 x float> %438, <4 x float>* %440, align 8
  %441 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 2, i64 4
  %442 = bitcast i32* %441 to <4 x i32>*
  %443 = load <4 x i32>, <4 x i32>* %442, align 4
  %444 = sitofp <4 x i32> %443 to <4 x float>
  %445 = fdiv <4 x float> %444, %432
  %446 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 2, i64 4
  %447 = bitcast float* %446 to <4 x float>*
  store <4 x float> %445, <4 x float>* %447, align 8
  %448 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 2, i64 8
  %449 = bitcast i32* %448 to <4 x i32>*
  %450 = load <4 x i32>, <4 x i32>* %449, align 4
  %451 = sitofp <4 x i32> %450 to <4 x float>
  %452 = fdiv <4 x float> %451, %432
  %453 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 2, i64 8
  %454 = bitcast float* %453 to <4 x float>*
  store <4 x float> %452, <4 x float>* %454, align 8
  %455 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 2, i64 12
  %456 = bitcast i32* %455 to <4 x i32>*
  %457 = load <4 x i32>, <4 x i32>* %456, align 4
  %458 = sitofp <4 x i32> %457 to <4 x float>
  %459 = fdiv <4 x float> %458, %432
  %460 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 2, i64 12
  %461 = bitcast float* %460 to <4 x float>*
  store <4 x float> %459, <4 x float>* %461, align 8
  %462 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 2, i64 16
  %463 = bitcast i32* %462 to <4 x i32>*
  %464 = load <4 x i32>, <4 x i32>* %463, align 4
  %465 = sitofp <4 x i32> %464 to <4 x float>
  %466 = fdiv <4 x float> %465, %432
  %467 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 2, i64 16
  %468 = bitcast float* %467 to <4 x float>*
  store <4 x float> %466, <4 x float>* %468, align 8
  %469 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 2, i64 20
  %470 = bitcast i32* %469 to <4 x i32>*
  %471 = load <4 x i32>, <4 x i32>* %470, align 4
  %472 = sitofp <4 x i32> %471 to <4 x float>
  %473 = fdiv <4 x float> %472, %432
  %474 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 2, i64 20
  %475 = bitcast float* %474 to <4 x float>*
  store <4 x float> %473, <4 x float>* %475, align 8
  %476 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 2, i64 24
  %477 = bitcast i32* %476 to <4 x i32>*
  %478 = load <4 x i32>, <4 x i32>* %477, align 4
  %479 = sitofp <4 x i32> %478 to <4 x float>
  %480 = fdiv <4 x float> %479, %432
  %481 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 2, i64 24
  %482 = bitcast float* %481 to <4 x float>*
  store <4 x float> %480, <4 x float>* %482, align 8
  %483 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 2, i64 28
  %484 = bitcast i32* %483 to <4 x i32>*
  %485 = load <4 x i32>, <4 x i32>* %484, align 4
  %486 = sitofp <4 x i32> %485 to <4 x float>
  %487 = fdiv <4 x float> %486, %432
  %488 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %0, i64 0, i32 2, i64 28
  %489 = bitcast float* %488 to <4 x float>*
  store <4 x float> %487, <4 x float>* %489, align 8
  ret void

490:                                              ; preds = %113, %566
  %491 = phi i32 [ %44, %113 ], [ %508, %566 ]
  %492 = phi i64 [ 0, %113 ], [ %506, %566 ]
  %493 = phi i64 [ 0, %113 ], [ %500, %566 ]
  %494 = phi i32 [ %48, %113 ], [ %509, %566 ]
  %495 = phi %"struct.std::__1::pair"* [ %110, %113 ], [ %567, %566 ]
  %496 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %495, i64 0, i32 0
  %497 = load i64, i64* %496, align 8
  %498 = shl i64 %493, 32
  %499 = ashr exact i64 %498, 32
  %500 = add nsw i64 %497, %499
  %501 = trunc i64 %500 to i32
  %502 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %495, i64 0, i32 1
  %503 = load i64, i64* %502, align 8
  %504 = shl i64 %492, 32
  %505 = ashr exact i64 %504, 32
  %506 = add nsw i64 %503, %505
  %507 = trunc i64 %506 to i32
  %508 = add nsw i32 %491, %501
  %509 = add nsw i32 %494, %507
  %510 = sitofp i32 %508 to float
  %511 = sitofp i32 %509 to float
  %512 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %51, align 8
  %513 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %16, align 8
  %514 = icmp ult %"struct.jxl::Spline::Point"* %512, %513
  %515 = ptrtoint %"struct.jxl::Spline::Point"* %513 to i64
  br i1 %514, label %516, label %521

516:                                              ; preds = %490
  %517 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %512, i64 0, i32 0
  store float %510, float* %517, align 4
  %518 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %512, i64 0, i32 1
  store float %511, float* %518, align 4
  %519 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %512, i64 1
  %520 = ptrtoint %"struct.jxl::Spline::Point"* %519 to i64
  store i64 %520, i64* %114, align 8
  br label %566

521:                                              ; preds = %490
  %522 = ptrtoint %"struct.jxl::Spline::Point"* %512 to i64
  %523 = load i64, i64* %18, align 8
  %524 = sub i64 %522, %523
  %525 = ashr exact i64 %524, 3
  %526 = add nsw i64 %525, 1
  %527 = icmp ugt i64 %526, 2305843009213693951
  br i1 %527, label %528, label %530

528:                                              ; preds = %521
  %529 = bitcast %"struct.jxl::Spline"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %529) #20
  unreachable

530:                                              ; preds = %521
  %531 = sub i64 %515, %523
  %532 = ashr exact i64 %531, 3
  %533 = icmp ult i64 %532, 1152921504606846975
  br i1 %533, label %534, label %542

534:                                              ; preds = %530
  %535 = ashr exact i64 %531, 2
  %536 = icmp ult i64 %535, %526
  %537 = select i1 %536, i64 %526, i64 %535
  %538 = icmp eq i64 %537, 0
  br i1 %538, label %547, label %539

539:                                              ; preds = %534
  %540 = icmp ugt i64 %537, 2305843009213693951
  br i1 %540, label %541, label %542

541:                                              ; preds = %539
  tail call void @abort() #20
  unreachable

542:                                              ; preds = %539, %530
  %543 = phi i64 [ %537, %539 ], [ 2305843009213693951, %530 ]
  %544 = shl i64 %543, 3
  %545 = tail call i8* @_Znwm(i64 %544) #21
  %546 = bitcast i8* %545 to %"struct.jxl::Spline::Point"*
  br label %547

547:                                              ; preds = %542, %534
  %548 = phi i64 [ %543, %542 ], [ 0, %534 ]
  %549 = phi i8* [ %545, %542 ], [ null, %534 ]
  %550 = phi %"struct.jxl::Spline::Point"* [ %546, %542 ], [ null, %534 ]
  %551 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %550, i64 %525
  %552 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %550, i64 %548
  %553 = ptrtoint %"struct.jxl::Spline::Point"* %552 to i64
  %554 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %551, i64 0, i32 0
  store float %510, float* %554, align 4
  %555 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %550, i64 %525, i32 1
  store float %511, float* %555, align 4
  %556 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %551, i64 1
  %557 = ptrtoint %"struct.jxl::Spline::Point"* %556 to i64
  %558 = ptrtoint %"struct.jxl::Spline::Point"* %550 to i64
  %559 = icmp sgt i64 %524, 0
  br i1 %559, label %560, label %562

560:                                              ; preds = %547
  %561 = inttoptr i64 %523 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %549, i8* align 4 %561, i64 %524, i1 false) #18
  br label %562

562:                                              ; preds = %560, %547
  store i64 %558, i64* %18, align 8
  store i64 %557, i64* %114, align 8
  store i64 %553, i64* %17, align 8
  %563 = icmp eq i64 %523, 0
  br i1 %563, label %566, label %564

564:                                              ; preds = %562
  %565 = inttoptr i64 %523 to i8*
  tail call void @_ZdlPv(i8* %565) #21
  br label %566

566:                                              ; preds = %516, %562, %564
  %567 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %495, i64 1
  %568 = icmp eq %"struct.std::__1::pair"* %567, %111
  br i1 %568, label %115, label %490
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl15QuantizedSpline6DecodeERKNSt3__16vectorIhNS1_9allocatorIhEEEEPNS_15ANSSymbolReaderEPNS_9BitReaderEmPm(%"class.jxl::QuantizedSpline"*, %"class.std::__1::vector.9"* dereferenceable(24), %"class.jxl::ANSSymbolReader"*, %"class.jxl::BitReader"*, i64, i64* nocapture) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !noalias !27
  %9 = getelementptr inbounds i8, i8* %8, i64 3
  %10 = load i8, i8* %9, align 1, !noalias !27
  %11 = zext i8 %10 to i64
  %12 = tail call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %2, i64 %11, %"class.jxl::BitReader"* %3) #18
  %13 = load i64, i64* %5, align 8
  %14 = add i64 %13, %12
  store i64 %14, i64* %5, align 8
  %15 = icmp ugt i64 %14, %4
  br i1 %15, label %96, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 0, i32 0, i32 1
  %18 = bitcast %"struct.std::__1::pair"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.jxl::QuantizedSpline"* %0 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = ashr exact i64 %22, 4
  %24 = icmp ugt i64 %12, %23
  %25 = inttoptr i64 %21 to %"struct.std::__1::pair"*
  br i1 %24, label %26, label %32

26:                                               ; preds = %16
  %27 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 0
  %28 = sub i64 %12, %23
  tail call void @_ZNSt3__16vectorINS_4pairIllEENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %27, i64 %28) #18
  %29 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 0, i32 0, i32 0
  %30 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %29, align 8
  %31 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %17, align 8
  br label %37

32:                                               ; preds = %16
  %33 = inttoptr i64 %19 to %"struct.std::__1::pair"*
  %34 = icmp ult i64 %12, %23
  br i1 %34, label %35, label %37

35:                                               ; preds = %32
  %36 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 %12
  store %"struct.std::__1::pair"* %36, %"struct.std::__1::pair"** %17, align 8
  br label %37

37:                                               ; preds = %26, %32, %35
  %38 = phi %"struct.std::__1::pair"* [ %31, %26 ], [ %33, %32 ], [ %36, %35 ]
  %39 = phi %"struct.std::__1::pair"* [ %30, %26 ], [ %25, %32 ], [ %25, %35 ]
  %40 = icmp eq %"struct.std::__1::pair"* %39, %38
  br i1 %40, label %65, label %41

41:                                               ; preds = %37, %41
  %42 = phi %"struct.std::__1::pair"* [ %63, %41 ], [ %39, %37 ]
  %43 = load i8*, i8** %7, align 8, !noalias !30
  %44 = getelementptr inbounds i8, i8* %43, i64 4
  %45 = load i8, i8* %44, align 1, !noalias !30
  %46 = zext i8 %45 to i64
  %47 = tail call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %2, i64 %46, %"class.jxl::BitReader"* %3) #18
  %48 = lshr i64 %47, 1
  %49 = shl i64 %47, 63
  %50 = ashr exact i64 %49, 63
  %51 = xor i64 %50, %48
  %52 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %42, i64 0, i32 0
  store i64 %51, i64* %52, align 8
  %53 = load i8*, i8** %7, align 8, !noalias !33
  %54 = getelementptr inbounds i8, i8* %53, i64 4
  %55 = load i8, i8* %54, align 1, !noalias !33
  %56 = zext i8 %55 to i64
  %57 = tail call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %2, i64 %56, %"class.jxl::BitReader"* %3) #18
  %58 = lshr i64 %57, 1
  %59 = shl i64 %57, 63
  %60 = ashr exact i64 %59, 63
  %61 = xor i64 %60, %58
  %62 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %42, i64 0, i32 1
  store i64 %61, i64* %62, align 8
  %63 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %42, i64 1
  %64 = icmp eq %"struct.std::__1::pair"* %63, %38
  br i1 %64, label %65, label %41

65:                                               ; preds = %41, %37
  br label %66

66:                                               ; preds = %65, %66
  %67 = phi i64 [ %79, %66 ], [ 0, %65 ]
  %68 = load i8*, i8** %7, align 8, !noalias !36
  %69 = getelementptr inbounds i8, i8* %68, i64 5
  %70 = load i8, i8* %69, align 1, !noalias !36
  %71 = zext i8 %70 to i64
  %72 = tail call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %2, i64 %71, %"class.jxl::BitReader"* %3) #18
  %73 = lshr i64 %72, 1
  %74 = shl i64 %72, 63
  %75 = ashr exact i64 %74, 63
  %76 = xor i64 %75, %73
  %77 = trunc i64 %76 to i32
  %78 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 0, i64 %67
  store i32 %77, i32* %78, align 4
  %79 = add nuw nsw i64 %67, 1
  %80 = icmp eq i64 %79, 32
  br i1 %80, label %98, label %66

81:                                               ; preds = %113, %81
  %82 = phi i64 [ %94, %81 ], [ 0, %113 ]
  %83 = load i8*, i8** %7, align 8, !noalias !39
  %84 = getelementptr inbounds i8, i8* %83, i64 5
  %85 = load i8, i8* %84, align 1, !noalias !39
  %86 = zext i8 %85 to i64
  %87 = tail call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %2, i64 %86, %"class.jxl::BitReader"* %3) #18
  %88 = lshr i64 %87, 1
  %89 = shl i64 %87, 63
  %90 = ashr exact i64 %89, 63
  %91 = xor i64 %90, %88
  %92 = trunc i64 %91 to i32
  %93 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 2, i64 %82
  store i32 %92, i32* %93, align 4
  %94 = add nuw nsw i64 %82, 1
  %95 = icmp eq i64 %94, 32
  br i1 %95, label %96, label %81

96:                                               ; preds = %81, %6
  %97 = phi i32 [ 1, %6 ], [ 0, %81 ]
  ret i32 %97

98:                                               ; preds = %66, %98
  %99 = phi i64 [ %111, %98 ], [ 0, %66 ]
  %100 = load i8*, i8** %7, align 8, !noalias !36
  %101 = getelementptr inbounds i8, i8* %100, i64 5
  %102 = load i8, i8* %101, align 1, !noalias !36
  %103 = zext i8 %102 to i64
  %104 = tail call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %2, i64 %103, %"class.jxl::BitReader"* %3) #18
  %105 = lshr i64 %104, 1
  %106 = shl i64 %104, 63
  %107 = ashr exact i64 %106, 63
  %108 = xor i64 %107, %105
  %109 = trunc i64 %108 to i32
  %110 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 1, i64 %99
  store i32 %109, i32* %110, align 4
  %111 = add nuw nsw i64 %99, 1
  %112 = icmp eq i64 %111, 32
  br i1 %112, label %113, label %98

113:                                              ; preds = %98, %113
  %114 = phi i64 [ %126, %113 ], [ 0, %98 ]
  %115 = load i8*, i8** %7, align 8, !noalias !36
  %116 = getelementptr inbounds i8, i8* %115, i64 5
  %117 = load i8, i8* %116, align 1, !noalias !36
  %118 = zext i8 %117 to i64
  %119 = tail call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %2, i64 %118, %"class.jxl::BitReader"* %3) #18
  %120 = lshr i64 %119, 1
  %121 = shl i64 %119, 63
  %122 = ashr exact i64 %121, 63
  %123 = xor i64 %122, %120
  %124 = trunc i64 %123 to i32
  %125 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %0, i64 0, i32 1, i64 2, i64 %114
  store i32 %124, i32* %125, align 4
  %126 = add nuw nsw i64 %114, 1
  %127 = icmp eq i64 %126, 32
  br i1 %127, label %81, label %113
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl7Splines6DecodeEPNS_9BitReaderEm(%"class.jxl::Splines"*, %"class.jxl::BitReader"*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector.9", align 8
  %5 = alloca %"struct.jxl::ANSCode", align 8
  %6 = alloca %"class.jxl::ANSSymbolReader", align 8
  %7 = alloca i64, align 8
  %8 = alloca %"class.jxl::QuantizedSpline", align 8
  %9 = bitcast %"class.std::__1::vector.9"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #18
  %10 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %4, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %4, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #18
  %12 = bitcast %"struct.jxl::ANSCode"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %12) #18
  %13 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 64, i1 false)
  %14 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 80, i1 false) #18
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %14) #18
  %15 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 7
  store i64 0, i64* %15, align 8
  %16 = call i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"* %1, i64 6, %"struct.jxl::ANSCode"* nonnull %5, %"class.std::__1::vector.9"* nonnull %4, i1 zeroext false) #18
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %255

18:                                               ; preds = %3
  %19 = bitcast %"class.jxl::ANSSymbolReader"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 592, i8* nonnull %19) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 592, i1 false)
  call void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"* nonnull %6, %"struct.jxl::ANSCode"* nonnull %5, %"class.jxl::BitReader"* %1, i64 0)
  %20 = load i8*, i8** %10, align 8, !noalias !42
  %21 = getelementptr inbounds i8, i8* %20, i64 2
  %22 = load i8, i8* %21, align 1, !noalias !42
  %23 = zext i8 %22 to i64
  %24 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %6, i64 %23, %"class.jxl::BitReader"* %1) #18
  %25 = add i64 %24, 1
  %26 = lshr i64 %2, 1
  %27 = icmp ult i64 %26, 1048576
  %28 = select i1 %27, i64 %26, i64 1048576
  %29 = icmp ugt i64 %25, %28
  br i1 %29, label %248, label %30

30:                                               ; preds = %18
  %31 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 2
  %32 = bitcast %"class.std::__1::vector.1"* %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 2, i32 0, i32 1
  %35 = bitcast %"struct.jxl::Spline::Point"** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %37 = bitcast %"struct.jxl::Spline::Point"** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = sub i64 %38, %33
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, %25
  br i1 %41, label %42, label %55

42:                                               ; preds = %30
  %43 = icmp ugt i64 %25, 2305843009213693951
  br i1 %43, label %44, label %45

44:                                               ; preds = %42
  call void @abort() #20
  unreachable

45:                                               ; preds = %42
  %46 = shl i64 %25, 3
  %47 = call i8* @_Znwm(i64 %46) #21
  %48 = bitcast i8* %47 to %"struct.jxl::Spline::Point"*
  %49 = ptrtoint i8* %47 to i64
  %50 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %48, i64 %25
  %51 = ptrtoint %"struct.jxl::Spline::Point"* %50 to i64
  store i64 %49, i64* %32, align 8
  store i64 %49, i64* %35, align 8
  store i64 %51, i64* %37, align 8
  %52 = icmp eq i64 %33, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %45
  %54 = inttoptr i64 %33 to i8*
  call void @_ZdlPv(i8* %54) #21
  br label %57

55:                                               ; preds = %30
  %56 = icmp eq i64 %25, 0
  br i1 %56, label %156, label %57

57:                                               ; preds = %55, %53, %45
  %58 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %31, i64 0, i32 0, i32 0
  br label %59

59:                                               ; preds = %153, %57
  %60 = phi i64 [ 0, %57 ], [ %154, %153 ]
  %61 = phi i64 [ 0, %57 ], [ %87, %153 ]
  %62 = phi i64 [ 0, %57 ], [ %86, %153 ]
  %63 = load i8*, i8** %10, align 8, !noalias !45
  %64 = getelementptr inbounds i8, i8* %63, i64 1
  %65 = load i8, i8* %64, align 1, !noalias !45
  %66 = zext i8 %65 to i64
  %67 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %6, i64 %66, %"class.jxl::BitReader"* %1) #18
  %68 = load i8*, i8** %10, align 8, !noalias !48
  %69 = getelementptr inbounds i8, i8* %68, i64 1
  %70 = load i8, i8* %69, align 1, !noalias !48
  %71 = zext i8 %70 to i64
  %72 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %6, i64 %71, %"class.jxl::BitReader"* %1) #18
  %73 = icmp eq i64 %60, 0
  br i1 %73, label %85, label %74

74:                                               ; preds = %59
  %75 = lshr i64 %67, 1
  %76 = shl i64 %67, 63
  %77 = ashr exact i64 %76, 63
  %78 = xor i64 %77, %75
  %79 = add nsw i64 %78, %62
  %80 = lshr i64 %72, 1
  %81 = shl i64 %72, 63
  %82 = ashr exact i64 %81, 63
  %83 = xor i64 %82, %80
  %84 = add nsw i64 %83, %61
  br label %85

85:                                               ; preds = %74, %59
  %86 = phi i64 [ %79, %74 ], [ %67, %59 ]
  %87 = phi i64 [ %84, %74 ], [ %72, %59 ]
  %88 = sitofp i64 %86 to float
  %89 = sitofp i64 %87 to float
  %90 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %34, align 8
  %91 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %36, align 8
  %92 = icmp ult %"struct.jxl::Spline::Point"* %90, %91
  %93 = ptrtoint %"struct.jxl::Spline::Point"* %91 to i64
  br i1 %92, label %94, label %99

94:                                               ; preds = %85
  %95 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %90, i64 0, i32 0
  store float %88, float* %95, align 4
  %96 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %90, i64 0, i32 1
  store float %89, float* %96, align 4
  %97 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %90, i64 1
  %98 = ptrtoint %"struct.jxl::Spline::Point"* %97 to i64
  store i64 %98, i64* %35, align 8
  br label %153

99:                                               ; preds = %85
  %100 = ptrtoint %"struct.jxl::Spline::Point"* %90 to i64
  %101 = load i64, i64* %32, align 8
  %102 = sub i64 %100, %101
  %103 = ashr exact i64 %102, 3
  %104 = add nsw i64 %103, 1
  %105 = icmp ugt i64 %104, 2305843009213693951
  br i1 %105, label %106, label %108

106:                                              ; preds = %99
  %107 = bitcast %"class.std::__1::vector.1"* %31 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %107) #20
  unreachable

108:                                              ; preds = %99
  %109 = sub i64 %93, %101
  %110 = ashr exact i64 %109, 3
  %111 = icmp ult i64 %110, 1152921504606846975
  br i1 %111, label %112, label %120

112:                                              ; preds = %108
  %113 = ashr exact i64 %109, 2
  %114 = icmp ult i64 %113, %104
  %115 = select i1 %114, i64 %104, i64 %113
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %125, label %117

117:                                              ; preds = %112
  %118 = icmp ugt i64 %115, 2305843009213693951
  br i1 %118, label %119, label %120

119:                                              ; preds = %117
  call void @abort() #20
  unreachable

120:                                              ; preds = %117, %108
  %121 = phi i64 [ %115, %117 ], [ 2305843009213693951, %108 ]
  %122 = shl i64 %121, 3
  %123 = call i8* @_Znwm(i64 %122) #21
  %124 = bitcast i8* %123 to %"struct.jxl::Spline::Point"*
  br label %125

125:                                              ; preds = %120, %112
  %126 = phi i64 [ %121, %120 ], [ 0, %112 ]
  %127 = phi %"struct.jxl::Spline::Point"* [ %124, %120 ], [ null, %112 ]
  %128 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %127, i64 %103
  %129 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %127, i64 %126
  %130 = ptrtoint %"struct.jxl::Spline::Point"* %129 to i64
  %131 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %128, i64 0, i32 0
  store float %88, float* %131, align 4
  %132 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %127, i64 %103, i32 1
  store float %89, float* %132, align 4
  %133 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %128, i64 1
  %134 = ptrtoint %"struct.jxl::Spline::Point"* %133 to i64
  %135 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %58, align 8
  %136 = load i64, i64* %35, align 8
  %137 = ptrtoint %"struct.jxl::Spline::Point"* %135 to i64
  %138 = sub i64 %136, %137
  %139 = ashr exact i64 %138, 3
  %140 = sub nsw i64 0, %139
  %141 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %128, i64 %140
  %142 = ptrtoint %"struct.jxl::Spline::Point"* %141 to i64
  %143 = icmp sgt i64 %138, 0
  br i1 %143, label %144, label %148

144:                                              ; preds = %125
  %145 = bitcast %"struct.jxl::Spline::Point"* %141 to i8*
  %146 = bitcast %"struct.jxl::Spline::Point"* %135 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %145, i8* align 4 %146, i64 %138, i1 false) #18
  %147 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %58, align 8
  br label %148

148:                                              ; preds = %144, %125
  %149 = phi %"struct.jxl::Spline::Point"* [ %135, %125 ], [ %147, %144 ]
  store i64 %142, i64* %32, align 8
  store i64 %134, i64* %35, align 8
  store i64 %130, i64* %37, align 8
  %150 = icmp eq %"struct.jxl::Spline::Point"* %149, null
  br i1 %150, label %153, label %151

151:                                              ; preds = %148
  %152 = bitcast %"struct.jxl::Spline::Point"* %149 to i8*
  call void @_ZdlPv(i8* %152) #21
  br label %153

153:                                              ; preds = %151, %148, %94
  %154 = add nuw i64 %60, 1
  %155 = icmp eq i64 %154, %25
  br i1 %155, label %156, label %59

156:                                              ; preds = %153, %55
  %157 = load i8*, i8** %10, align 8, !noalias !51
  %158 = load i8, i8* %157, align 1, !noalias !51
  %159 = zext i8 %158 to i64
  %160 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %6, i64 %159, %"class.jxl::BitReader"* %1) #18
  %161 = lshr i64 %160, 1
  %162 = shl i64 %160, 63
  %163 = ashr exact i64 %162, 63
  %164 = xor i64 %163, %161
  %165 = trunc i64 %164 to i32
  %166 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 0
  store i32 %165, i32* %166, align 8
  %167 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 1
  %168 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %167, i64 0, i32 0, i32 0
  %169 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %168, align 8
  %170 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 1, i32 0, i32 1
  %171 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %170, align 8
  %172 = icmp eq %"class.jxl::QuantizedSpline"* %171, %169
  br i1 %172, label %186, label %173

173:                                              ; preds = %156, %184
  %174 = phi %"class.jxl::QuantizedSpline"* [ %175, %184 ], [ %171, %156 ]
  %175 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %174, i64 -1
  %176 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %175, i64 0, i32 0, i32 0, i32 0
  %177 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %176, align 8
  %178 = icmp eq %"struct.std::__1::pair"* %177, null
  br i1 %178, label %184, label %179

179:                                              ; preds = %173
  %180 = ptrtoint %"struct.std::__1::pair"* %177 to i64
  %181 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %174, i64 -1, i32 0, i32 0, i32 1
  %182 = bitcast %"struct.std::__1::pair"** %181 to i64*
  store i64 %180, i64* %182, align 8
  %183 = bitcast %"struct.std::__1::pair"* %177 to i8*
  call void @_ZdlPv(i8* %183) #21
  br label %184

184:                                              ; preds = %179, %173
  %185 = icmp eq %"class.jxl::QuantizedSpline"* %175, %169
  br i1 %185, label %186, label %173

186:                                              ; preds = %184, %156
  store %"class.jxl::QuantizedSpline"* %169, %"class.jxl::QuantizedSpline"** %170, align 8
  call void @_ZNSt3__16vectorIN3jxl15QuantizedSplineENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.26"* %167, i64 %25)
  %187 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %187) #18
  store i64 %25, i64* %7, align 8
  %188 = icmp eq i64 %25, 0
  br i1 %188, label %236, label %189

189:                                              ; preds = %186
  %190 = bitcast %"class.jxl::QuantizedSpline"* %8 to i8*
  %191 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %192 = bitcast %"class.jxl::QuantizedSpline"* %8 to i64*
  %193 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %8, i64 0, i32 0, i32 0, i32 1
  %194 = bitcast %"struct.std::__1::pair"** %193 to i64*
  %195 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %196 = bitcast %"struct.std::__1::pair"** %195 to i64*
  %197 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %8, i64 0, i32 1
  %198 = bitcast [3 x [32 x i32]]* %197 to i8*
  %199 = bitcast %"class.jxl::QuantizedSpline"** %170 to i64*
  %200 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %8, i64 0, i32 0, i32 0, i32 0
  br label %203

201:                                              ; preds = %233
  %202 = icmp eq i64 %235, %25
  br i1 %202, label %236, label %203

203:                                              ; preds = %201, %189
  %204 = phi i64 [ 0, %189 ], [ %235, %201 ]
  call void @llvm.lifetime.start.p0i8(i64 536, i8* nonnull %190) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %190, i8 0, i64 536, i1 false) #18
  %205 = call i32 @_ZN3jxl15QuantizedSpline6DecodeERKNSt3__16vectorIhNS1_9allocatorIhEEEEPNS_15ANSSymbolReaderEPNS_9BitReaderEmPm(%"class.jxl::QuantizedSpline"* nonnull %8, %"class.std::__1::vector.9"* nonnull dereferenceable(24) %4, %"class.jxl::ANSSymbolReader"* nonnull %6, %"class.jxl::BitReader"* %1, i64 %28, i64* nonnull %7)
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %226

207:                                              ; preds = %203
  %208 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %170, align 8
  %209 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %191, align 8
  %210 = icmp ult %"class.jxl::QuantizedSpline"* %208, %209
  br i1 %210, label %211, label %225

211:                                              ; preds = %207
  %212 = bitcast %"class.jxl::QuantizedSpline"* %208 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %212, i8 0, i64 24, i1 false) #18
  %213 = load i64, i64* %192, align 8
  %214 = bitcast %"class.jxl::QuantizedSpline"* %208 to i64*
  store i64 %213, i64* %214, align 8
  %215 = load i64, i64* %194, align 8
  %216 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %208, i64 0, i32 0, i32 0, i32 1
  %217 = bitcast %"struct.std::__1::pair"** %216 to i64*
  store i64 %215, i64* %217, align 8
  %218 = load i64, i64* %196, align 8
  %219 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %208, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %220 = bitcast %"struct.std::__1::pair"** %219 to i64*
  store i64 %218, i64* %220, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %190, i8 0, i64 24, i1 false) #18
  %221 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %208, i64 0, i32 1
  %222 = bitcast [3 x [32 x i32]]* %221 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %222, i8* align 8 %198, i64 512, i1 false) #18
  %223 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %208, i64 1
  %224 = ptrtoint %"class.jxl::QuantizedSpline"* %223 to i64
  store i64 %224, i64* %199, align 8
  br label %226

225:                                              ; preds = %207
  call void @_ZNSt3__16vectorIN3jxl15QuantizedSplineENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector.26"* %167, %"class.jxl::QuantizedSpline"* nonnull dereferenceable(536) %8) #18
  br label %226

226:                                              ; preds = %225, %211, %203
  %227 = phi i32 [ 1, %203 ], [ 0, %211 ], [ 0, %225 ]
  %228 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %200, align 8
  %229 = icmp eq %"struct.std::__1::pair"* %228, null
  br i1 %229, label %233, label %230

230:                                              ; preds = %226
  %231 = ptrtoint %"struct.std::__1::pair"* %228 to i64
  store i64 %231, i64* %194, align 8
  %232 = bitcast %"struct.std::__1::pair"* %228 to i8*
  call void @_ZdlPv(i8* %232) #21
  br label %233

233:                                              ; preds = %226, %230
  call void @llvm.lifetime.end.p0i8(i64 536, i8* nonnull %190) #18
  %234 = icmp eq i32 %227, 0
  %235 = add nuw i64 %204, 1
  br i1 %234, label %201, label %246

236:                                              ; preds = %201, %186
  %237 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %6, i64 0, i32 4
  %238 = load i32, i32* %237, align 4
  %239 = icmp eq i32 %238, 1245184
  br i1 %239, label %240, label %246

240:                                              ; preds = %236
  %241 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 1, i32 0, i32 0
  %242 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %241, align 8
  %243 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %170, align 8
  %244 = icmp eq %"class.jxl::QuantizedSpline"* %242, %243
  %245 = zext i1 %244 to i32
  br label %246

246:                                              ; preds = %233, %240, %236
  %247 = phi i32 [ 1, %236 ], [ %245, %240 ], [ %205, %233 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %187) #18
  br label %248

248:                                              ; preds = %18, %246
  %249 = phi i32 [ %247, %246 ], [ 1, %18 ]
  %250 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %6, i64 0, i32 10, i32 0, i32 0, i32 0
  %251 = load i8*, i8** %250, align 8
  store i8* null, i8** %250, align 8
  %252 = icmp eq i8* %251, null
  br i1 %252, label %254, label %253

253:                                              ; preds = %248
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %251) #18
  br label %254

254:                                              ; preds = %248, %253
  call void @llvm.lifetime.end.p0i8(i64 592, i8* nonnull %19) #18
  br label %255

255:                                              ; preds = %3, %254
  %256 = phi i32 [ %249, %254 ], [ %16, %3 ]
  %257 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 3, i32 0, i32 0
  %258 = load i32*, i32** %257, align 8
  %259 = icmp eq i32* %258, null
  br i1 %259, label %265, label %260

260:                                              ; preds = %255
  %261 = ptrtoint i32* %258 to i64
  %262 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 3, i32 0, i32 1
  %263 = bitcast i32** %262 to i64*
  store i64 %261, i64* %263, align 8
  %264 = bitcast i32* %258 to i8*
  call void @_ZdlPv(i8* %264) #21
  br label %265

265:                                              ; preds = %260, %255
  %266 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 2, i32 0, i32 0
  %267 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %266, align 8
  %268 = icmp eq %"struct.jxl::HybridUintConfig"* %267, null
  br i1 %268, label %274, label %269

269:                                              ; preds = %265
  %270 = ptrtoint %"struct.jxl::HybridUintConfig"* %267 to i64
  %271 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 2, i32 0, i32 1
  %272 = bitcast %"struct.jxl::HybridUintConfig"** %271 to i64*
  store i64 %270, i64* %272, align 8
  %273 = bitcast %"struct.jxl::HybridUintConfig"* %267 to i8*
  call void @_ZdlPv(i8* %273) #21
  br label %274

274:                                              ; preds = %269, %265
  %275 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 1
  %276 = getelementptr inbounds %"class.std::__1::vector.33", %"class.std::__1::vector.33"* %275, i64 0, i32 0, i32 0
  %277 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %276, align 8
  %278 = icmp eq %"struct.jxl::HuffmanDecodingData"* %277, null
  br i1 %278, label %302, label %279

279:                                              ; preds = %274
  %280 = bitcast %"struct.jxl::HuffmanDecodingData"* %277 to i8*
  %281 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 1, i32 0, i32 1
  %282 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %281, align 8
  %283 = icmp eq %"struct.jxl::HuffmanDecodingData"* %282, %277
  br i1 %283, label %300, label %284

284:                                              ; preds = %279, %295
  %285 = phi %"struct.jxl::HuffmanDecodingData"* [ %286, %295 ], [ %282, %279 ]
  %286 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %285, i64 -1
  %287 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %286, i64 0, i32 0, i32 0, i32 0
  %288 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %287, align 8
  %289 = icmp eq %"struct.jxl::HuffmanCode"* %288, null
  br i1 %289, label %295, label %290

290:                                              ; preds = %284
  %291 = ptrtoint %"struct.jxl::HuffmanCode"* %288 to i64
  %292 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %285, i64 -1, i32 0, i32 0, i32 1
  %293 = bitcast %"struct.jxl::HuffmanCode"** %292 to i64*
  store i64 %291, i64* %293, align 8
  %294 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %288, i64 0, i32 0
  call void @_ZdlPv(i8* %294) #21
  br label %295

295:                                              ; preds = %290, %284
  %296 = icmp eq %"struct.jxl::HuffmanDecodingData"* %286, %277
  br i1 %296, label %297, label %284

297:                                              ; preds = %295
  %298 = bitcast %"class.std::__1::vector.33"* %275 to i8**
  %299 = load i8*, i8** %298, align 8
  br label %300

300:                                              ; preds = %297, %279
  %301 = phi i8* [ %299, %297 ], [ %280, %279 ]
  store %"struct.jxl::HuffmanDecodingData"* %277, %"struct.jxl::HuffmanDecodingData"** %281, align 8
  call void @_ZdlPv(i8* %301) #21
  br label %302

302:                                              ; preds = %300, %274
  %303 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %304 = load i8*, i8** %303, align 8
  store i8* null, i8** %303, align 8
  %305 = icmp eq i8* %304, null
  br i1 %305, label %307, label %306

306:                                              ; preds = %302
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %304) #18
  br label %307

307:                                              ; preds = %302, %306
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %12) #18
  %308 = load i8*, i8** %10, align 8
  %309 = icmp eq i8* %308, null
  br i1 %309, label %313, label %310

310:                                              ; preds = %307
  %311 = ptrtoint i8* %308 to i64
  %312 = bitcast i8** %11 to i64*
  store i64 %311, i64* %312, align 8
  call void @_ZdlPv(i8* nonnull %308) #21
  br label %313

313:                                              ; preds = %307, %310
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #18
  ret i32 %256
}

declare i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"*, i64, %"struct.jxl::ANSCode"*, %"class.std::__1::vector.9"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"*, %"struct.jxl::ANSCode"*, %"class.jxl::BitReader"* noalias, i64) unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"struct.jxl::ANSCode"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.jxl::ANSSymbolReader"* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"struct.jxl::HuffmanDecodingData"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"struct.jxl::HuffmanDecodingData"** %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 4
  %15 = load i8, i8* %14, align 8, !range !54
  store i8 %15, i8* %13, align 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  store i32 1245184, i32* %16, align 4
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %18 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 0
  %19 = bitcast %"struct.jxl::HybridUintConfig"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.jxl::HybridUintConfig"** %17 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 10
  %23 = bitcast %"class.std::__1::unique_ptr"* %22 to i64*
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %28 = bitcast %"class.std::__1::unique_ptr"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 36, i1 false)
  %29 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18
  %30 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> <i32 1048576, i32 4, i32 16, i32 2>, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  store i32 0, i32* %31, align 4
  %32 = icmp eq i8 %15, 0
  br i1 %32, label %33, label %76

33:                                               ; preds = %4
  %34 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = icmp ugt i8* %35, %37
  br i1 %38, label %39, label %44, !prof !55

39:                                               ; preds = %33
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #18
  %40 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  br label %57

44:                                               ; preds = %33
  %45 = bitcast i8* %35 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = shl i64 %46, %48
  %50 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = or i64 %51, %49
  store i64 %52, i64* %50, align 8
  %53 = sub i64 63, %48
  %54 = lshr i64 %53, 3
  %55 = getelementptr inbounds i8, i8* %35, i64 %54
  store i8* %55, i8** %34, align 8
  %56 = or i64 %48, 56
  store i64 %56, i64* %47, align 8
  br label %57

57:                                               ; preds = %39, %44
  %58 = phi i64 [ %43, %39 ], [ %56, %44 ]
  %59 = phi i64 [ %41, %39 ], [ %52, %44 ]
  %60 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %61 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %62 = add i64 %58, -32
  store i64 %62, i64* %61, align 8
  %63 = lshr i64 %59, 32
  store i64 %63, i64* %60, align 8
  %64 = trunc i64 %59 to i32
  store i32 %64, i32* %16, align 4
  %65 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  store i32 %67, i32* %68, align 8
  %69 = load i8, i8* %65, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 12, %70
  %72 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  store i32 %71, i32* %72, align 4
  %73 = shl nsw i32 -1, %71
  %74 = xor i32 %73, -1
  %75 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  store i32 %74, i32* %75, align 8
  br label %77

76:                                               ; preds = %4
  store i32 1245184, i32* %16, align 4
  br label %77

77:                                               ; preds = %76, %57
  %78 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 1
  %79 = load i8, i8* %78, align 8, !range !54
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %125, label %81

81:                                               ; preds = %77
  %82 = tail call i64 @_ZN3jxl12CacheAligned10NextOffsetEv() #18
  %83 = tail call i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64 4194304, i64 %82) #18
  %84 = ptrtoint i8* %83 to i64
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %22, i64 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  store i64 %84, i64* %23, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %81
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %86) #18
  %89 = load i64, i64* %23, align 8
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i64 [ %89, %88 ], [ %84, %81 ]
  %92 = bitcast i32** %24 to i64*
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 5
  %94 = load i64, i64* %93, align 8
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %25, align 4
  %96 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 4
  %97 = bitcast %"struct.jxl::HybridUintConfig"* %29 to i8*
  %98 = bitcast %"struct.jxl::HybridUintConfig"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 4 %98, i64 16, i1 false)
  %99 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 2
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %27, align 4
  %101 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 3
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %26, align 8
  %103 = icmp eq i64 %3, 0
  %104 = select i1 %103, i32 0, i32 120
  %105 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  store i32 %104, i32* %105, align 8
  br i1 %103, label %125, label %106

106:                                              ; preds = %90
  %107 = trunc i64 %3 to i32
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ 0, %106 ], [ %121, %108 ]
  %110 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 0
  %111 = load i8, i8* %110, align 2
  %112 = sext i8 %111 to i32
  %113 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = mul nsw i32 %115, %107
  %117 = add nsw i32 %116, %112
  %118 = icmp sgt i32 %117, 1
  %119 = select i1 %118, i32 %117, i32 1
  %120 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %109
  store i32 %119, i32* %120, align 4
  %121 = add nuw nsw i64 %109, 1
  %122 = load i32, i32* %105, align 8
  %123 = zext i32 %122 to i64
  %124 = icmp ult i64 %121, %123
  br i1 %124, label %108, label %125

125:                                              ; preds = %108, %90, %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl15QuantizedSplineENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.26"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::QuantizedSpline"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.26"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 536
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.jxl::QuantizedSpline"*
  br i1 %10, label %12, label %83

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.jxl::QuantizedSpline"** %13 to i64*
  %15 = icmp ugt i64 %1, 34415567301696924
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #20
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 536
  %21 = mul i64 %1, 536
  %22 = tail call i8* @_Znwm(i64 %21) #21
  %23 = bitcast i8* %22 to %"class.jxl::QuantizedSpline"*
  %24 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %23, i64 %20
  %25 = ptrtoint %"class.jxl::QuantizedSpline"* %24 to i64
  %26 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %23, i64 %1
  %27 = ptrtoint %"class.jxl::QuantizedSpline"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.jxl::QuantizedSpline"*
  %29 = icmp eq %"class.jxl::QuantizedSpline"* %28, %11
  br i1 %29, label %60, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"class.jxl::QuantizedSpline"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"class.jxl::QuantizedSpline"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %31, i64 -1
  %34 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %32, i64 -1
  %35 = bitcast %"class.jxl::QuantizedSpline"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #18
  %36 = bitcast %"class.jxl::QuantizedSpline"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"class.jxl::QuantizedSpline"* %33 to i64*
  store i64 %37, i64* %38, align 8
  %39 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %32, i64 -1, i32 0, i32 0, i32 1
  %40 = bitcast %"struct.std::__1::pair"** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %31, i64 -1, i32 0, i32 0, i32 1
  %43 = bitcast %"struct.std::__1::pair"** %42 to i64*
  store i64 %41, i64* %43, align 8
  %44 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %32, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %45 = bitcast %"struct.std::__1::pair"** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %31, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %48 = bitcast %"struct.std::__1::pair"** %47 to i64*
  store i64 %46, i64* %48, align 8
  %49 = bitcast %"class.jxl::QuantizedSpline"* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #18
  %50 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %31, i64 -1, i32 1
  %51 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %32, i64 -1, i32 1
  %52 = bitcast [3 x [32 x i32]]* %50 to i8*
  %53 = bitcast [3 x [32 x i32]]* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 512, i1 false) #18
  %54 = icmp eq %"class.jxl::QuantizedSpline"* %34, %11
  br i1 %54, label %55, label %30

55:                                               ; preds = %30
  %56 = ptrtoint %"class.jxl::QuantizedSpline"* %33 to i64
  %57 = load i64, i64* %6, align 8
  %58 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %13, align 8
  %59 = inttoptr i64 %57 to %"class.jxl::QuantizedSpline"*
  br label %60

60:                                               ; preds = %17, %55
  %61 = phi %"class.jxl::QuantizedSpline"* [ %59, %55 ], [ %28, %17 ]
  %62 = phi %"class.jxl::QuantizedSpline"* [ %58, %55 ], [ %11, %17 ]
  %63 = phi i64 [ %56, %55 ], [ %25, %17 ]
  %64 = phi i64 [ %57, %55 ], [ %18, %17 ]
  store i64 %63, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %65 = icmp eq %"class.jxl::QuantizedSpline"* %62, %61
  br i1 %65, label %79, label %66

66:                                               ; preds = %60, %77
  %67 = phi %"class.jxl::QuantizedSpline"* [ %68, %77 ], [ %62, %60 ]
  %68 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %67, i64 -1
  %69 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %68, i64 0, i32 0, i32 0, i32 0
  %70 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %69, align 8
  %71 = icmp eq %"struct.std::__1::pair"* %70, null
  br i1 %71, label %77, label %72

72:                                               ; preds = %66
  %73 = ptrtoint %"struct.std::__1::pair"* %70 to i64
  %74 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %67, i64 -1, i32 0, i32 0, i32 1
  %75 = bitcast %"struct.std::__1::pair"** %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = bitcast %"struct.std::__1::pair"* %70 to i8*
  tail call void @_ZdlPv(i8* %76) #21
  br label %77

77:                                               ; preds = %72, %66
  %78 = icmp eq %"class.jxl::QuantizedSpline"* %68, %61
  br i1 %78, label %79, label %66

79:                                               ; preds = %77, %60
  %80 = icmp eq i64 %64, 0
  br i1 %80, label %83, label %81

81:                                               ; preds = %79
  %82 = inttoptr i64 %64 to i8*
  tail call void @_ZdlPv(i8* %82) #21
  br label %83

83:                                               ; preds = %81, %79, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3jxl7Splines5AddToEPNS_6Image3IfEERKNS_4RectES6_RKNS_19ColorCorrelationMapE(%"class.jxl::Splines"*, %"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::ColorCorrelationMap"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %6 = tail call i32 @_ZNK3jxl7Splines5ApplyILb1EEENS_6StatusEPNS_6Image3IfEERKNS_4RectES8_RKNS_19ColorCorrelationMapE(%"class.jxl::Splines"* %0, %"class.jxl::Image3"* %1, %"class.jxl::Rect"* dereferenceable(32) %2, %"class.jxl::Rect"* dereferenceable(32) %3, %"struct.jxl::ColorCorrelationMap"* dereferenceable(104) %4)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3jxl7Splines5ApplyILb1EEENS_6StatusEPNS_6Image3IfEERKNS_4RectES8_RKNS_19ColorCorrelationMapE(%"class.jxl::Splines"*, %"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::ColorCorrelationMap"* dereferenceable(104)) local_unnamed_addr #5 comdat align 2 {
  %6 = alloca i64, align 8
  %7 = alloca %"struct.jxl::Spline", align 8
  %8 = alloca %"class.std::__1::vector.63", align 8
  %9 = alloca %"class.std::__1::vector.1", align 8
  %10 = alloca %"class.std::__1::vector.1", align 8
  %11 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = bitcast %"class.jxl::QuantizedSpline"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector.26"* %11 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %14, %16
  br i1 %17, label %429, label %18

18:                                               ; preds = %5
  %19 = bitcast %"struct.jxl::Spline"* %7 to i8*
  %20 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 2, i32 0, i32 0
  %21 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 0
  %22 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 5
  %23 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 4
  %24 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 6
  %25 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %7, i64 0, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %7, i64 0, i32 0, i32 0, i32 1
  %27 = bitcast %"class.std::__1::vector.63"* %8 to i8*
  %28 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast %"class.std::__1::vector.1"* %9 to i8*
  %32 = bitcast %"class.std::__1::vector.1"* %10 to i8*
  %33 = bitcast %"struct.jxl::Spline::Point"** %26 to i64*
  %34 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %10, i64 0, i32 0, i32 1
  %35 = bitcast %"struct.jxl::Spline::Point"** %34 to i8**
  %36 = bitcast %"class.std::__1::vector.1"* %10 to i8**
  %37 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  %38 = bitcast %"struct.jxl::Spline::Point"** %34 to i64*
  %39 = bitcast i64* %6 to %"struct.jxl::Spline::Point"*
  %40 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %9, i64 0, i32 0, i32 0
  %41 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %9, i64 0, i32 0, i32 1
  %42 = bitcast i64* %6 to i8*
  %43 = bitcast %"struct.std::__1::pair.65"** %29 to i64*
  %44 = bitcast %"class.std::__1::vector.63"* %8 to i64*
  %45 = bitcast %"struct.std::__1::pair.65"** %30 to i64*
  %46 = bitcast i64* %6 to <2 x float>*
  %47 = bitcast %"struct.jxl::Spline::Point"** %41 to i64*
  %48 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %10, i64 0, i32 0, i32 0
  br label %49

49:                                               ; preds = %18, %422
  %50 = phi i64 [ %16, %18 ], [ %425, %422 ]
  %51 = phi i64 [ 0, %18 ], [ %423, %422 ]
  %52 = inttoptr i64 %50 to %"class.jxl::QuantizedSpline"*
  call void @llvm.lifetime.start.p0i8(i64 536, i8* nonnull %19) #18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 bitcast (%"struct.jxl::Spline"* @__const._ZNK3jxl7Splines5ApplyILb0EEENS_6StatusEPNS_6Image3IfEERKNS_4RectES8_RKNS_19ColorCorrelationMapE.spline to i8*), i64 536, i1 false)
  %53 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %52, i64 %51
  %54 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %20, align 8
  %55 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %54, i64 %51
  %56 = load i32, i32* %21, align 8
  %57 = load float, float* %22, align 8
  %58 = load float, float* %23, align 4
  %59 = fmul float %58, 0.000000e+00
  %60 = fadd float %57, %59
  %61 = load float, float* %24, align 4
  %62 = fadd float %61, %59
  call void @_ZNK3jxl15QuantizedSpline10DequantizeERKNS_6Spline5PointEiff(%"struct.jxl::Spline"* nonnull sret %7, %"class.jxl::QuantizedSpline"* %53, %"struct.jxl::Spline::Point"* dereferenceable(8) %55, i32 %56, float %60, float %62)
  %63 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %25, align 8
  %64 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %26, align 8
  %65 = icmp eq %"struct.jxl::Spline::Point"* %63, %64
  %66 = ptrtoint %"struct.jxl::Spline::Point"* %64 to i64
  %67 = ptrtoint %"struct.jxl::Spline::Point"* %63 to i64
  br i1 %65, label %94, label %68

68:                                               ; preds = %49
  %69 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %63, i64 1
  %70 = icmp eq %"struct.jxl::Spline::Point"* %69, %64
  br i1 %70, label %97, label %71

71:                                               ; preds = %68
  %72 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %63, i64 0, i32 0
  %73 = load float, float* %72, align 4
  br label %74

74:                                               ; preds = %91, %71
  %75 = phi float [ %79, %91 ], [ %73, %71 ]
  %76 = phi %"struct.jxl::Spline::Point"* [ %92, %91 ], [ %69, %71 ]
  %77 = phi %"struct.jxl::Spline::Point"* [ %76, %91 ], [ %63, %71 ]
  %78 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %76, i64 0, i32 0
  %79 = load float, float* %78, align 4
  %80 = fsub float %75, %79
  %81 = call float @llvm.fabs.f32(float %80) #18
  %82 = fcmp olt float %81, 0x3F50624DE0000000
  br i1 %82, label %83, label %91

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %77, i64 0, i32 1
  %85 = load float, float* %84, align 4
  %86 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %77, i64 1, i32 1
  %87 = load float, float* %86, align 4
  %88 = fsub float %85, %87
  %89 = call float @llvm.fabs.f32(float %88) #18
  %90 = fcmp olt float %89, 0x3F50624DE0000000
  br i1 %90, label %94, label %91

91:                                               ; preds = %83, %74
  %92 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %76, i64 1
  %93 = icmp eq %"struct.jxl::Spline::Point"* %92, %64
  br i1 %93, label %97, label %74

94:                                               ; preds = %83, %49
  %95 = phi %"struct.jxl::Spline::Point"* [ %63, %49 ], [ %77, %83 ]
  %96 = icmp eq %"struct.jxl::Spline::Point"* %95, %64
  br i1 %96, label %97, label %414

97:                                               ; preds = %91, %94, %68
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 24, i1 false) #18
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 0, i64 24, i1 false) #18
  %98 = sub i64 %66, %67
  %99 = ashr exact i64 %98, 3
  %100 = icmp eq i64 %98, 0
  br i1 %100, label %118, label %101

101:                                              ; preds = %97
  %102 = icmp ugt i64 %99, 2305843009213693951
  br i1 %102, label %103, label %105

103:                                              ; preds = %101
  %104 = bitcast %"class.std::__1::vector.1"* %10 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %104) #20
  unreachable

105:                                              ; preds = %101
  %106 = call i8* @_Znwm(i64 %98) #21
  %107 = bitcast i8* %106 to %"struct.jxl::Spline::Point"*
  store i8* %106, i8** %35, align 8
  store i8* %106, i8** %36, align 8
  %108 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %107, i64 %99
  store %"struct.jxl::Spline::Point"* %108, %"struct.jxl::Spline::Point"** %37, align 8
  %109 = ptrtoint i8* %106 to i64
  %110 = icmp sgt i64 %98, 0
  br i1 %110, label %111, label %116

111:                                              ; preds = %105
  %112 = lshr exact i64 %98, 3
  %113 = bitcast %"struct.jxl::Spline::Point"* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %106, i8* align 4 %113, i64 %98, i1 false) #18
  %114 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %107, i64 %112
  %115 = ptrtoint %"struct.jxl::Spline::Point"* %114 to i64
  br label %116

116:                                              ; preds = %111, %105
  %117 = phi i64 [ %115, %111 ], [ %109, %105 ]
  store i64 %117, i64* %38, align 8
  br label %118

118:                                              ; preds = %97, %116
  call fastcc void @_ZN3jxl12_GLOBAL__N_131DrawCentripetalCatmullRomSplineENSt3__16vectorINS_6Spline5PointENS1_9allocatorIS4_EEEE(%"class.std::__1::vector.1"* nonnull sret %9, %"class.std::__1::vector.1"* nonnull %10)
  %119 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %40, align 8
  %120 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %41, align 8
  %121 = icmp eq %"struct.jxl::Spline::Point"* %119, %120
  br i1 %121, label %122, label %125

122:                                              ; preds = %118
  %123 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 293, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0)) #18
  %124 = call zeroext i1 @_ZN3jxl5AbortEv() #20
  unreachable

125:                                              ; preds = %118
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #18
  %126 = bitcast %"struct.jxl::Spline::Point"* %119 to i64*
  %127 = load i64, i64* %126, align 4
  store i64 %127, i64* %6, align 8
  %128 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %29, align 8
  %129 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %30, align 8
  %130 = icmp ult %"struct.std::__1::pair.65"* %128, %129
  %131 = ptrtoint %"struct.std::__1::pair.65"* %129 to i64
  %132 = lshr i64 %127, 32
  %133 = trunc i64 %132 to i32
  %134 = trunc i64 %127 to i32
  %135 = bitcast i32 %134 to float
  br i1 %130, label %136, label %141

136:                                              ; preds = %125
  %137 = bitcast %"struct.std::__1::pair.65"* %128 to i64*
  store i64 %127, i64* %137, align 4
  %138 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %128, i64 0, i32 1
  store float 1.000000e+00, float* %138, align 4
  %139 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %128, i64 1
  %140 = ptrtoint %"struct.std::__1::pair.65"* %139 to i64
  store i64 %140, i64* %43, align 8
  br label %185

141:                                              ; preds = %125
  %142 = ptrtoint %"struct.std::__1::pair.65"* %128 to i64
  %143 = load i64, i64* %44, align 8
  %144 = sub i64 %142, %143
  %145 = sdiv exact i64 %144, 12
  %146 = add nsw i64 %145, 1
  %147 = icmp ugt i64 %146, 1537228672809129301
  br i1 %147, label %148, label %150

148:                                              ; preds = %141
  %149 = bitcast %"class.std::__1::vector.63"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %149) #20
  unreachable

150:                                              ; preds = %141
  %151 = sub i64 %131, %143
  %152 = sdiv exact i64 %151, 12
  %153 = icmp ult i64 %152, 768614336404564650
  br i1 %153, label %154, label %159

154:                                              ; preds = %150
  %155 = shl nsw i64 %152, 1
  %156 = icmp ult i64 %155, %146
  %157 = select i1 %156, i64 %146, i64 %155
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %164, label %159

159:                                              ; preds = %154, %150
  %160 = phi i64 [ %157, %154 ], [ 1537228672809129301, %150 ]
  %161 = mul i64 %160, 12
  %162 = call i8* @_Znwm(i64 %161) #21
  %163 = bitcast i8* %162 to %"struct.std::__1::pair.65"*
  br label %164

164:                                              ; preds = %159, %154
  %165 = phi i64 [ %160, %159 ], [ 0, %154 ]
  %166 = phi %"struct.std::__1::pair.65"* [ %163, %159 ], [ null, %154 ]
  %167 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %166, i64 %145
  %168 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %166, i64 %165
  %169 = ptrtoint %"struct.std::__1::pair.65"* %168 to i64
  %170 = bitcast %"struct.std::__1::pair.65"* %167 to i64*
  store i64 %127, i64* %170, align 4
  %171 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %166, i64 %145, i32 1
  store float 1.000000e+00, float* %171, align 4
  %172 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %167, i64 1
  %173 = ptrtoint %"struct.std::__1::pair.65"* %172 to i64
  %174 = sdiv exact i64 %144, -12
  %175 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %167, i64 %174
  %176 = ptrtoint %"struct.std::__1::pair.65"* %175 to i64
  %177 = icmp sgt i64 %144, 0
  br i1 %177, label %178, label %181

178:                                              ; preds = %164
  %179 = bitcast %"struct.std::__1::pair.65"* %175 to i8*
  %180 = inttoptr i64 %143 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %179, i8* align 4 %180, i64 %144, i1 false) #18
  br label %181

181:                                              ; preds = %178, %164
  store i64 %176, i64* %44, align 8
  store i64 %173, i64* %43, align 8
  store i64 %169, i64* %45, align 8
  %182 = icmp eq i64 %143, 0
  br i1 %182, label %185, label %183

183:                                              ; preds = %181
  %184 = inttoptr i64 %143 to i8*
  call void @_ZdlPv(i8* %184) #21
  br label %185

185:                                              ; preds = %136, %181, %183
  br label %186

186:                                              ; preds = %185, %371
  %187 = phi float [ %292, %371 ], [ %135, %185 ]
  %188 = phi i32 [ %298, %371 ], [ %133, %185 ]
  %189 = phi %"struct.jxl::Spline::Point"* [ %273, %371 ], [ %119, %185 ]
  %190 = icmp eq %"struct.jxl::Spline::Point"* %189, %120
  br i1 %190, label %206, label %191

191:                                              ; preds = %186
  %192 = bitcast i32 %188 to float
  %193 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %189, i64 0, i32 1
  %194 = bitcast %"struct.jxl::Spline::Point"* %189 to <2 x float>*
  %195 = load <2 x float>, <2 x float>* %194, align 4
  %196 = insertelement <2 x float> undef, float %187, i32 0
  %197 = insertelement <2 x float> %196, float %192, i32 1
  %198 = fsub <2 x float> %195, %197
  %199 = fmul <2 x float> %198, %198
  %200 = extractelement <2 x float> %199, i32 0
  %201 = extractelement <2 x float> %199, i32 1
  %202 = fadd float %200, %201
  %203 = call float @sqrtf(float %202) #18
  %204 = fadd float %203, 0.000000e+00
  %205 = fcmp ult float %204, 1.000000e+00
  br i1 %205, label %348, label %269

206:                                              ; preds = %186, %348
  %207 = phi float [ %349, %348 ], [ 0.000000e+00, %186 ]
  %208 = phi %"struct.jxl::Spline::Point"* [ %351, %348 ], [ %39, %186 ]
  %209 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %29, align 8
  %210 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %30, align 8
  %211 = icmp ult %"struct.std::__1::pair.65"* %209, %210
  %212 = ptrtoint %"struct.std::__1::pair.65"* %210 to i64
  br i1 %211, label %213, label %220

213:                                              ; preds = %206
  %214 = bitcast %"struct.jxl::Spline::Point"* %208 to i64*
  %215 = bitcast %"struct.std::__1::pair.65"* %209 to i64*
  %216 = load i64, i64* %214, align 4
  store i64 %216, i64* %215, align 4
  %217 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %209, i64 0, i32 1
  store float %207, float* %217, align 4
  %218 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %209, i64 1
  %219 = ptrtoint %"struct.std::__1::pair.65"* %218 to i64
  store i64 %219, i64* %43, align 8
  br label %373

220:                                              ; preds = %206
  %221 = ptrtoint %"struct.std::__1::pair.65"* %209 to i64
  %222 = load i64, i64* %44, align 8
  %223 = sub i64 %221, %222
  %224 = sdiv exact i64 %223, 12
  %225 = add nsw i64 %224, 1
  %226 = icmp ugt i64 %225, 1537228672809129301
  br i1 %226, label %227, label %229

227:                                              ; preds = %220
  %228 = bitcast %"class.std::__1::vector.63"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %228) #20
  unreachable

229:                                              ; preds = %220
  %230 = sub i64 %212, %222
  %231 = sdiv exact i64 %230, 12
  %232 = icmp ult i64 %231, 768614336404564650
  br i1 %232, label %233, label %238

233:                                              ; preds = %229
  %234 = shl nsw i64 %231, 1
  %235 = icmp ult i64 %234, %225
  %236 = select i1 %235, i64 %225, i64 %234
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %243, label %238

238:                                              ; preds = %233, %229
  %239 = phi i64 [ %236, %233 ], [ 1537228672809129301, %229 ]
  %240 = mul i64 %239, 12
  %241 = call i8* @_Znwm(i64 %240) #21
  %242 = bitcast i8* %241 to %"struct.std::__1::pair.65"*
  br label %243

243:                                              ; preds = %238, %233
  %244 = phi i64 [ %239, %238 ], [ 0, %233 ]
  %245 = phi %"struct.std::__1::pair.65"* [ %242, %238 ], [ null, %233 ]
  %246 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %245, i64 %224
  %247 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %245, i64 %244
  %248 = ptrtoint %"struct.std::__1::pair.65"* %247 to i64
  %249 = bitcast %"struct.jxl::Spline::Point"* %208 to i64*
  %250 = bitcast %"struct.std::__1::pair.65"* %246 to i64*
  %251 = load i64, i64* %249, align 4
  store i64 %251, i64* %250, align 4
  %252 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %245, i64 %224, i32 1
  store float %207, float* %252, align 4
  %253 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %246, i64 1
  %254 = ptrtoint %"struct.std::__1::pair.65"* %253 to i64
  %255 = sdiv exact i64 %223, -12
  %256 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %246, i64 %255
  %257 = ptrtoint %"struct.std::__1::pair.65"* %256 to i64
  %258 = icmp sgt i64 %223, 0
  br i1 %258, label %259, label %262

259:                                              ; preds = %243
  %260 = bitcast %"struct.std::__1::pair.65"* %256 to i8*
  %261 = inttoptr i64 %222 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %260, i8* align 4 %261, i64 %223, i1 false) #18
  br label %262

262:                                              ; preds = %259, %243
  store i64 %257, i64* %44, align 8
  store i64 %254, i64* %43, align 8
  store i64 %248, i64* %45, align 8
  %263 = icmp eq i64 %222, 0
  br i1 %263, label %373, label %264

264:                                              ; preds = %262
  %265 = inttoptr i64 %222 to i8*
  call void @_ZdlPv(i8* %265) #21
  br label %373

266:                                              ; preds = %354
  %267 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %351, i64 0, i32 0
  %268 = load float, float* %267, align 4
  br label %269

269:                                              ; preds = %266, %191
  %270 = phi float [ %268, %266 ], [ %187, %191 ]
  %271 = phi %"struct.jxl::Spline::Point"* [ %351, %266 ], [ %39, %191 ]
  %272 = phi float [ %349, %266 ], [ 0.000000e+00, %191 ]
  %273 = phi %"struct.jxl::Spline::Point"* [ %352, %266 ], [ %189, %191 ]
  %274 = phi float* [ %358, %266 ], [ %193, %191 ]
  %275 = phi float [ %368, %266 ], [ %203, %191 ]
  %276 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %273, i64 0, i32 0
  %277 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %271, i64 0, i32 1
  %278 = fsub float 1.000000e+00, %272
  %279 = fdiv float %278, %275
  %280 = load float, float* %276, align 4
  %281 = load float, float* %274, align 4
  %282 = load float, float* %277, align 4
  %283 = insertelement <2 x float> undef, float %280, i32 0
  %284 = insertelement <2 x float> %283, float %281, i32 1
  %285 = insertelement <2 x float> undef, float %270, i32 0
  %286 = insertelement <2 x float> %285, float %282, i32 1
  %287 = fsub <2 x float> %284, %286
  %288 = insertelement <2 x float> undef, float %279, i32 0
  %289 = shufflevector <2 x float> %288, <2 x float> undef, <2 x i32> zeroinitializer
  %290 = fmul <2 x float> %289, %287
  %291 = fadd <2 x float> %286, %290
  %292 = extractelement <2 x float> %291, i32 0
  store <2 x float> %291, <2 x float>* %46, align 8
  %293 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %29, align 8
  %294 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %30, align 8
  %295 = icmp ult %"struct.std::__1::pair.65"* %293, %294
  %296 = ptrtoint %"struct.std::__1::pair.65"* %294 to i64
  %297 = bitcast <2 x float> %291 to <2 x i32>
  %298 = extractelement <2 x i32> %297, i32 1
  br i1 %295, label %299, label %304

299:                                              ; preds = %269
  %300 = bitcast %"struct.std::__1::pair.65"* %293 to <2 x float>*
  store <2 x float> %291, <2 x float>* %300, align 4
  %301 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %293, i64 0, i32 1
  store float 1.000000e+00, float* %301, align 4
  %302 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %293, i64 1
  %303 = ptrtoint %"struct.std::__1::pair.65"* %302 to i64
  store i64 %303, i64* %43, align 8
  br label %371

304:                                              ; preds = %269
  %305 = ptrtoint %"struct.std::__1::pair.65"* %293 to i64
  %306 = load i64, i64* %44, align 8
  %307 = sub i64 %305, %306
  %308 = sdiv exact i64 %307, 12
  %309 = add nsw i64 %308, 1
  %310 = icmp ugt i64 %309, 1537228672809129301
  br i1 %310, label %311, label %313

311:                                              ; preds = %304
  %312 = bitcast %"class.std::__1::vector.63"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %312) #20
  unreachable

313:                                              ; preds = %304
  %314 = sub i64 %296, %306
  %315 = sdiv exact i64 %314, 12
  %316 = icmp ult i64 %315, 768614336404564650
  br i1 %316, label %317, label %322

317:                                              ; preds = %313
  %318 = shl nsw i64 %315, 1
  %319 = icmp ult i64 %318, %309
  %320 = select i1 %319, i64 %309, i64 %318
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %327, label %322

322:                                              ; preds = %317, %313
  %323 = phi i64 [ %320, %317 ], [ 1537228672809129301, %313 ]
  %324 = mul i64 %323, 12
  %325 = call i8* @_Znwm(i64 %324) #21
  %326 = bitcast i8* %325 to %"struct.std::__1::pair.65"*
  br label %327

327:                                              ; preds = %322, %317
  %328 = phi i64 [ %323, %322 ], [ 0, %317 ]
  %329 = phi %"struct.std::__1::pair.65"* [ %326, %322 ], [ null, %317 ]
  %330 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %329, i64 %308
  %331 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %329, i64 %328
  %332 = ptrtoint %"struct.std::__1::pair.65"* %331 to i64
  %333 = bitcast %"struct.std::__1::pair.65"* %330 to <2 x float>*
  store <2 x float> %291, <2 x float>* %333, align 4
  %334 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %329, i64 %308, i32 1
  store float 1.000000e+00, float* %334, align 4
  %335 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %330, i64 1
  %336 = ptrtoint %"struct.std::__1::pair.65"* %335 to i64
  %337 = sdiv exact i64 %307, -12
  %338 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %330, i64 %337
  %339 = ptrtoint %"struct.std::__1::pair.65"* %338 to i64
  %340 = icmp sgt i64 %307, 0
  br i1 %340, label %341, label %344

341:                                              ; preds = %327
  %342 = bitcast %"struct.std::__1::pair.65"* %338 to i8*
  %343 = inttoptr i64 %306 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %342, i8* align 4 %343, i64 %307, i1 false) #18
  br label %344

344:                                              ; preds = %341, %327
  store i64 %339, i64* %44, align 8
  store i64 %336, i64* %43, align 8
  store i64 %332, i64* %45, align 8
  %345 = icmp eq i64 %306, 0
  br i1 %345, label %371, label %346

346:                                              ; preds = %344
  %347 = inttoptr i64 %306 to i8*
  call void @_ZdlPv(i8* %347) #21
  br label %371

348:                                              ; preds = %191, %354
  %349 = phi float [ %369, %354 ], [ %204, %191 ]
  %350 = phi float* [ %358, %354 ], [ %193, %191 ]
  %351 = phi %"struct.jxl::Spline::Point"* [ %352, %354 ], [ %189, %191 ]
  %352 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %351, i64 1
  %353 = icmp eq %"struct.jxl::Spline::Point"* %352, %120
  br i1 %353, label %206, label %354

354:                                              ; preds = %348
  %355 = load float, float* %350, align 4
  %356 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %351, i64 0, i32 0
  %357 = load float, float* %356, align 4
  %358 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %351, i64 1, i32 1
  %359 = bitcast %"struct.jxl::Spline::Point"* %352 to <2 x float>*
  %360 = load <2 x float>, <2 x float>* %359, align 4
  %361 = insertelement <2 x float> undef, float %357, i32 0
  %362 = insertelement <2 x float> %361, float %355, i32 1
  %363 = fsub <2 x float> %360, %362
  %364 = fmul <2 x float> %363, %363
  %365 = extractelement <2 x float> %364, i32 0
  %366 = extractelement <2 x float> %364, i32 1
  %367 = fadd float %365, %366
  %368 = call float @sqrtf(float %367) #18
  %369 = fadd float %349, %368
  %370 = fcmp ult float %369, 1.000000e+00
  br i1 %370, label %348, label %266

371:                                              ; preds = %346, %344, %299
  %372 = icmp eq %"struct.jxl::Spline::Point"* %273, %120
  br i1 %372, label %373, label %186

373:                                              ; preds = %371, %213, %262, %264
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #18
  %374 = icmp eq %"struct.jxl::Spline::Point"* %119, null
  br i1 %374, label %378, label %375

375:                                              ; preds = %373
  %376 = ptrtoint %"struct.jxl::Spline::Point"* %119 to i64
  store i64 %376, i64* %47, align 8
  %377 = bitcast %"struct.jxl::Spline::Point"* %119 to i8*
  call void @_ZdlPv(i8* %377) #21
  br label %378

378:                                              ; preds = %373, %375
  %379 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %48, align 8
  %380 = icmp eq %"struct.jxl::Spline::Point"* %379, null
  br i1 %380, label %384, label %381

381:                                              ; preds = %378
  %382 = ptrtoint %"struct.jxl::Spline::Point"* %379 to i64
  store i64 %382, i64* %38, align 8
  %383 = bitcast %"struct.jxl::Spline::Point"* %379 to i8*
  call void @_ZdlPv(i8* %383) #21
  br label %384

384:                                              ; preds = %378, %381
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #18
  %385 = load i64, i64* %43, align 8
  %386 = load i64, i64* %44, align 8
  %387 = sub i64 %385, %386
  %388 = sdiv exact i64 %387, 12
  %389 = add nsw i64 %388, -2
  %390 = uitofp i64 %389 to float
  %391 = inttoptr i64 %385 to %"struct.std::__1::pair.65"*
  %392 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %391, i64 -1, i32 1
  %393 = load float, float* %392, align 4
  %394 = fadd float %393, %390
  %395 = fcmp ugt float %394, 0.000000e+00
  %396 = inttoptr i64 %386 to %"struct.std::__1::pair.65"*
  br i1 %395, label %397, label %405

397:                                              ; preds = %384
  %398 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %399 = and i32 %398, 2225
  %400 = call i32 @llvm.cttz.i32(i32 %399, i1 true) #18, !range !56
  %401 = zext i32 %400 to i64
  %402 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)*]* @_ZN3jxlL34DrawFromPointsHighwayDispatchTableE, i64 0, i64 %401
  %403 = load void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)*, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)** %402, align 8
  call void %403(%"class.jxl::Image3"* %1, %"class.jxl::Rect"* dereferenceable(32) %2, %"class.jxl::Rect"* dereferenceable(32) %3, %"struct.jxl::Spline"* nonnull dereferenceable(536) %7, i1 zeroext true, %"class.std::__1::vector.63"* nonnull dereferenceable(24) %8, float %394) #18
  %404 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %28, align 8
  br label %405

405:                                              ; preds = %384, %397
  %406 = phi %"struct.std::__1::pair.65"* [ %404, %397 ], [ %396, %384 ]
  %407 = phi i32 [ 0, %397 ], [ 4, %384 ]
  %408 = icmp eq %"struct.std::__1::pair.65"* %406, null
  br i1 %408, label %412, label %409

409:                                              ; preds = %405
  %410 = ptrtoint %"struct.std::__1::pair.65"* %406 to i64
  store i64 %410, i64* %43, align 8
  %411 = bitcast %"struct.std::__1::pair.65"* %406 to i8*
  call void @_ZdlPv(i8* %411) #21
  br label %412

412:                                              ; preds = %405, %409
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #18
  %413 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %25, align 8
  br label %414

414:                                              ; preds = %94, %412
  %415 = phi %"struct.jxl::Spline::Point"* [ %413, %412 ], [ %63, %94 ]
  %416 = phi i32 [ %407, %412 ], [ 1, %94 ]
  %417 = icmp eq %"struct.jxl::Spline::Point"* %415, null
  br i1 %417, label %421, label %418

418:                                              ; preds = %414
  %419 = ptrtoint %"struct.jxl::Spline::Point"* %415 to i64
  store i64 %419, i64* %33, align 8
  %420 = bitcast %"struct.jxl::Spline::Point"* %415 to i8*
  call void @_ZdlPv(i8* %420) #21
  br label %421

421:                                              ; preds = %414, %418
  call void @llvm.lifetime.end.p0i8(i64 536, i8* nonnull %19) #18
  switch i32 %416, label %429 [
    i32 0, label %422
    i32 4, label %422
  ]

422:                                              ; preds = %421, %421
  %423 = add nuw i64 %51, 1
  %424 = load i64, i64* %13, align 8
  %425 = load i64, i64* %15, align 8
  %426 = sub i64 %424, %425
  %427 = sdiv exact i64 %426, 536
  %428 = icmp ult i64 %423, %427
  br i1 %428, label %49, label %429

429:                                              ; preds = %421, %422, %5
  %430 = phi i32 [ 0, %5 ], [ 0, %422 ], [ 1, %421 ]
  ret i32 %430
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3jxl7Splines12SubtractFromEPNS_6Image3IfEERKNS_19ColorCorrelationMapE(%"class.jxl::Splines"*, %"class.jxl::Image3"*, %"struct.jxl::ColorCorrelationMap"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca %"class.jxl::Rect", align 8
  %6 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #18
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 16, i1 false) #18
  store i64 %9, i64* %13, align 8
  %14 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  store i64 %12, i64* %14, align 8
  %15 = bitcast %"class.jxl::Rect"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #18
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 16, i1 false) #18
  store i64 %9, i64* %16, align 8
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 3
  store i64 %12, i64* %17, align 8
  %18 = call i32 @_ZNK3jxl7Splines5ApplyILb0EEENS_6StatusEPNS_6Image3IfEERKNS_4RectES8_RKNS_19ColorCorrelationMapE(%"class.jxl::Splines"* %0, %"class.jxl::Image3"* %1, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Rect"* nonnull dereferenceable(32) %5, %"struct.jxl::ColorCorrelationMap"* dereferenceable(104) %2)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #18
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3jxl7Splines5ApplyILb0EEENS_6StatusEPNS_6Image3IfEERKNS_4RectES8_RKNS_19ColorCorrelationMapE(%"class.jxl::Splines"*, %"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::ColorCorrelationMap"* dereferenceable(104)) local_unnamed_addr #5 comdat align 2 {
  %6 = alloca i64, align 8
  %7 = alloca %"struct.jxl::Spline", align 8
  %8 = alloca %"class.std::__1::vector.63", align 8
  %9 = alloca %"class.std::__1::vector.1", align 8
  %10 = alloca %"class.std::__1::vector.1", align 8
  %11 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = bitcast %"class.jxl::QuantizedSpline"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector.26"* %11 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %14, %16
  br i1 %17, label %429, label %18

18:                                               ; preds = %5
  %19 = bitcast %"struct.jxl::Spline"* %7 to i8*
  %20 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 2, i32 0, i32 0
  %21 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %0, i64 0, i32 0
  %22 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 5
  %23 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 4
  %24 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 6
  %25 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %7, i64 0, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %7, i64 0, i32 0, i32 0, i32 1
  %27 = bitcast %"class.std::__1::vector.63"* %8 to i8*
  %28 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast %"class.std::__1::vector.1"* %9 to i8*
  %32 = bitcast %"class.std::__1::vector.1"* %10 to i8*
  %33 = bitcast %"struct.jxl::Spline::Point"** %26 to i64*
  %34 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %10, i64 0, i32 0, i32 1
  %35 = bitcast %"struct.jxl::Spline::Point"** %34 to i8**
  %36 = bitcast %"class.std::__1::vector.1"* %10 to i8**
  %37 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  %38 = bitcast %"struct.jxl::Spline::Point"** %34 to i64*
  %39 = bitcast i64* %6 to %"struct.jxl::Spline::Point"*
  %40 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %9, i64 0, i32 0, i32 0
  %41 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %9, i64 0, i32 0, i32 1
  %42 = bitcast i64* %6 to i8*
  %43 = bitcast %"struct.std::__1::pair.65"** %29 to i64*
  %44 = bitcast %"class.std::__1::vector.63"* %8 to i64*
  %45 = bitcast %"struct.std::__1::pair.65"** %30 to i64*
  %46 = bitcast i64* %6 to <2 x float>*
  %47 = bitcast %"struct.jxl::Spline::Point"** %41 to i64*
  %48 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %10, i64 0, i32 0, i32 0
  br label %49

49:                                               ; preds = %18, %422
  %50 = phi i64 [ %16, %18 ], [ %425, %422 ]
  %51 = phi i64 [ 0, %18 ], [ %423, %422 ]
  %52 = inttoptr i64 %50 to %"class.jxl::QuantizedSpline"*
  call void @llvm.lifetime.start.p0i8(i64 536, i8* nonnull %19) #18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 bitcast (%"struct.jxl::Spline"* @__const._ZNK3jxl7Splines5ApplyILb0EEENS_6StatusEPNS_6Image3IfEERKNS_4RectES8_RKNS_19ColorCorrelationMapE.spline to i8*), i64 536, i1 false)
  %53 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %52, i64 %51
  %54 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %20, align 8
  %55 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %54, i64 %51
  %56 = load i32, i32* %21, align 8
  %57 = load float, float* %22, align 8
  %58 = load float, float* %23, align 4
  %59 = fmul float %58, 0.000000e+00
  %60 = fadd float %57, %59
  %61 = load float, float* %24, align 4
  %62 = fadd float %61, %59
  call void @_ZNK3jxl15QuantizedSpline10DequantizeERKNS_6Spline5PointEiff(%"struct.jxl::Spline"* nonnull sret %7, %"class.jxl::QuantizedSpline"* %53, %"struct.jxl::Spline::Point"* dereferenceable(8) %55, i32 %56, float %60, float %62)
  %63 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %25, align 8
  %64 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %26, align 8
  %65 = icmp eq %"struct.jxl::Spline::Point"* %63, %64
  %66 = ptrtoint %"struct.jxl::Spline::Point"* %64 to i64
  %67 = ptrtoint %"struct.jxl::Spline::Point"* %63 to i64
  br i1 %65, label %94, label %68

68:                                               ; preds = %49
  %69 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %63, i64 1
  %70 = icmp eq %"struct.jxl::Spline::Point"* %69, %64
  br i1 %70, label %97, label %71

71:                                               ; preds = %68
  %72 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %63, i64 0, i32 0
  %73 = load float, float* %72, align 4
  br label %74

74:                                               ; preds = %91, %71
  %75 = phi float [ %79, %91 ], [ %73, %71 ]
  %76 = phi %"struct.jxl::Spline::Point"* [ %92, %91 ], [ %69, %71 ]
  %77 = phi %"struct.jxl::Spline::Point"* [ %76, %91 ], [ %63, %71 ]
  %78 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %76, i64 0, i32 0
  %79 = load float, float* %78, align 4
  %80 = fsub float %75, %79
  %81 = call float @llvm.fabs.f32(float %80) #18
  %82 = fcmp olt float %81, 0x3F50624DE0000000
  br i1 %82, label %83, label %91

83:                                               ; preds = %74
  %84 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %77, i64 0, i32 1
  %85 = load float, float* %84, align 4
  %86 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %77, i64 1, i32 1
  %87 = load float, float* %86, align 4
  %88 = fsub float %85, %87
  %89 = call float @llvm.fabs.f32(float %88) #18
  %90 = fcmp olt float %89, 0x3F50624DE0000000
  br i1 %90, label %94, label %91

91:                                               ; preds = %83, %74
  %92 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %76, i64 1
  %93 = icmp eq %"struct.jxl::Spline::Point"* %92, %64
  br i1 %93, label %97, label %74

94:                                               ; preds = %83, %49
  %95 = phi %"struct.jxl::Spline::Point"* [ %63, %49 ], [ %77, %83 ]
  %96 = icmp eq %"struct.jxl::Spline::Point"* %95, %64
  br i1 %96, label %97, label %414

97:                                               ; preds = %91, %94, %68
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 24, i1 false) #18
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 0, i64 24, i1 false) #18
  %98 = sub i64 %66, %67
  %99 = ashr exact i64 %98, 3
  %100 = icmp eq i64 %98, 0
  br i1 %100, label %118, label %101

101:                                              ; preds = %97
  %102 = icmp ugt i64 %99, 2305843009213693951
  br i1 %102, label %103, label %105

103:                                              ; preds = %101
  %104 = bitcast %"class.std::__1::vector.1"* %10 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %104) #20
  unreachable

105:                                              ; preds = %101
  %106 = call i8* @_Znwm(i64 %98) #21
  %107 = bitcast i8* %106 to %"struct.jxl::Spline::Point"*
  store i8* %106, i8** %35, align 8
  store i8* %106, i8** %36, align 8
  %108 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %107, i64 %99
  store %"struct.jxl::Spline::Point"* %108, %"struct.jxl::Spline::Point"** %37, align 8
  %109 = ptrtoint i8* %106 to i64
  %110 = icmp sgt i64 %98, 0
  br i1 %110, label %111, label %116

111:                                              ; preds = %105
  %112 = lshr exact i64 %98, 3
  %113 = bitcast %"struct.jxl::Spline::Point"* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %106, i8* align 4 %113, i64 %98, i1 false) #18
  %114 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %107, i64 %112
  %115 = ptrtoint %"struct.jxl::Spline::Point"* %114 to i64
  br label %116

116:                                              ; preds = %111, %105
  %117 = phi i64 [ %115, %111 ], [ %109, %105 ]
  store i64 %117, i64* %38, align 8
  br label %118

118:                                              ; preds = %97, %116
  call fastcc void @_ZN3jxl12_GLOBAL__N_131DrawCentripetalCatmullRomSplineENSt3__16vectorINS_6Spline5PointENS1_9allocatorIS4_EEEE(%"class.std::__1::vector.1"* nonnull sret %9, %"class.std::__1::vector.1"* nonnull %10)
  %119 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %40, align 8
  %120 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %41, align 8
  %121 = icmp eq %"struct.jxl::Spline::Point"* %119, %120
  br i1 %121, label %122, label %125

122:                                              ; preds = %118
  %123 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 293, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0)) #18
  %124 = call zeroext i1 @_ZN3jxl5AbortEv() #20
  unreachable

125:                                              ; preds = %118
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #18
  %126 = bitcast %"struct.jxl::Spline::Point"* %119 to i64*
  %127 = load i64, i64* %126, align 4
  store i64 %127, i64* %6, align 8
  %128 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %29, align 8
  %129 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %30, align 8
  %130 = icmp ult %"struct.std::__1::pair.65"* %128, %129
  %131 = ptrtoint %"struct.std::__1::pair.65"* %129 to i64
  %132 = lshr i64 %127, 32
  %133 = trunc i64 %132 to i32
  %134 = trunc i64 %127 to i32
  %135 = bitcast i32 %134 to float
  br i1 %130, label %136, label %141

136:                                              ; preds = %125
  %137 = bitcast %"struct.std::__1::pair.65"* %128 to i64*
  store i64 %127, i64* %137, align 4
  %138 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %128, i64 0, i32 1
  store float 1.000000e+00, float* %138, align 4
  %139 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %128, i64 1
  %140 = ptrtoint %"struct.std::__1::pair.65"* %139 to i64
  store i64 %140, i64* %43, align 8
  br label %185

141:                                              ; preds = %125
  %142 = ptrtoint %"struct.std::__1::pair.65"* %128 to i64
  %143 = load i64, i64* %44, align 8
  %144 = sub i64 %142, %143
  %145 = sdiv exact i64 %144, 12
  %146 = add nsw i64 %145, 1
  %147 = icmp ugt i64 %146, 1537228672809129301
  br i1 %147, label %148, label %150

148:                                              ; preds = %141
  %149 = bitcast %"class.std::__1::vector.63"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %149) #20
  unreachable

150:                                              ; preds = %141
  %151 = sub i64 %131, %143
  %152 = sdiv exact i64 %151, 12
  %153 = icmp ult i64 %152, 768614336404564650
  br i1 %153, label %154, label %159

154:                                              ; preds = %150
  %155 = shl nsw i64 %152, 1
  %156 = icmp ult i64 %155, %146
  %157 = select i1 %156, i64 %146, i64 %155
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %164, label %159

159:                                              ; preds = %154, %150
  %160 = phi i64 [ %157, %154 ], [ 1537228672809129301, %150 ]
  %161 = mul i64 %160, 12
  %162 = call i8* @_Znwm(i64 %161) #21
  %163 = bitcast i8* %162 to %"struct.std::__1::pair.65"*
  br label %164

164:                                              ; preds = %159, %154
  %165 = phi i64 [ %160, %159 ], [ 0, %154 ]
  %166 = phi %"struct.std::__1::pair.65"* [ %163, %159 ], [ null, %154 ]
  %167 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %166, i64 %145
  %168 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %166, i64 %165
  %169 = ptrtoint %"struct.std::__1::pair.65"* %168 to i64
  %170 = bitcast %"struct.std::__1::pair.65"* %167 to i64*
  store i64 %127, i64* %170, align 4
  %171 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %166, i64 %145, i32 1
  store float 1.000000e+00, float* %171, align 4
  %172 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %167, i64 1
  %173 = ptrtoint %"struct.std::__1::pair.65"* %172 to i64
  %174 = sdiv exact i64 %144, -12
  %175 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %167, i64 %174
  %176 = ptrtoint %"struct.std::__1::pair.65"* %175 to i64
  %177 = icmp sgt i64 %144, 0
  br i1 %177, label %178, label %181

178:                                              ; preds = %164
  %179 = bitcast %"struct.std::__1::pair.65"* %175 to i8*
  %180 = inttoptr i64 %143 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %179, i8* align 4 %180, i64 %144, i1 false) #18
  br label %181

181:                                              ; preds = %178, %164
  store i64 %176, i64* %44, align 8
  store i64 %173, i64* %43, align 8
  store i64 %169, i64* %45, align 8
  %182 = icmp eq i64 %143, 0
  br i1 %182, label %185, label %183

183:                                              ; preds = %181
  %184 = inttoptr i64 %143 to i8*
  call void @_ZdlPv(i8* %184) #21
  br label %185

185:                                              ; preds = %136, %181, %183
  br label %186

186:                                              ; preds = %185, %371
  %187 = phi float [ %292, %371 ], [ %135, %185 ]
  %188 = phi i32 [ %298, %371 ], [ %133, %185 ]
  %189 = phi %"struct.jxl::Spline::Point"* [ %273, %371 ], [ %119, %185 ]
  %190 = icmp eq %"struct.jxl::Spline::Point"* %189, %120
  br i1 %190, label %206, label %191

191:                                              ; preds = %186
  %192 = bitcast i32 %188 to float
  %193 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %189, i64 0, i32 1
  %194 = bitcast %"struct.jxl::Spline::Point"* %189 to <2 x float>*
  %195 = load <2 x float>, <2 x float>* %194, align 4
  %196 = insertelement <2 x float> undef, float %187, i32 0
  %197 = insertelement <2 x float> %196, float %192, i32 1
  %198 = fsub <2 x float> %195, %197
  %199 = fmul <2 x float> %198, %198
  %200 = extractelement <2 x float> %199, i32 0
  %201 = extractelement <2 x float> %199, i32 1
  %202 = fadd float %200, %201
  %203 = call float @sqrtf(float %202) #18
  %204 = fadd float %203, 0.000000e+00
  %205 = fcmp ult float %204, 1.000000e+00
  br i1 %205, label %348, label %269

206:                                              ; preds = %186, %348
  %207 = phi float [ %349, %348 ], [ 0.000000e+00, %186 ]
  %208 = phi %"struct.jxl::Spline::Point"* [ %351, %348 ], [ %39, %186 ]
  %209 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %29, align 8
  %210 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %30, align 8
  %211 = icmp ult %"struct.std::__1::pair.65"* %209, %210
  %212 = ptrtoint %"struct.std::__1::pair.65"* %210 to i64
  br i1 %211, label %213, label %220

213:                                              ; preds = %206
  %214 = bitcast %"struct.jxl::Spline::Point"* %208 to i64*
  %215 = bitcast %"struct.std::__1::pair.65"* %209 to i64*
  %216 = load i64, i64* %214, align 4
  store i64 %216, i64* %215, align 4
  %217 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %209, i64 0, i32 1
  store float %207, float* %217, align 4
  %218 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %209, i64 1
  %219 = ptrtoint %"struct.std::__1::pair.65"* %218 to i64
  store i64 %219, i64* %43, align 8
  br label %373

220:                                              ; preds = %206
  %221 = ptrtoint %"struct.std::__1::pair.65"* %209 to i64
  %222 = load i64, i64* %44, align 8
  %223 = sub i64 %221, %222
  %224 = sdiv exact i64 %223, 12
  %225 = add nsw i64 %224, 1
  %226 = icmp ugt i64 %225, 1537228672809129301
  br i1 %226, label %227, label %229

227:                                              ; preds = %220
  %228 = bitcast %"class.std::__1::vector.63"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %228) #20
  unreachable

229:                                              ; preds = %220
  %230 = sub i64 %212, %222
  %231 = sdiv exact i64 %230, 12
  %232 = icmp ult i64 %231, 768614336404564650
  br i1 %232, label %233, label %238

233:                                              ; preds = %229
  %234 = shl nsw i64 %231, 1
  %235 = icmp ult i64 %234, %225
  %236 = select i1 %235, i64 %225, i64 %234
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %243, label %238

238:                                              ; preds = %233, %229
  %239 = phi i64 [ %236, %233 ], [ 1537228672809129301, %229 ]
  %240 = mul i64 %239, 12
  %241 = call i8* @_Znwm(i64 %240) #21
  %242 = bitcast i8* %241 to %"struct.std::__1::pair.65"*
  br label %243

243:                                              ; preds = %238, %233
  %244 = phi i64 [ %239, %238 ], [ 0, %233 ]
  %245 = phi %"struct.std::__1::pair.65"* [ %242, %238 ], [ null, %233 ]
  %246 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %245, i64 %224
  %247 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %245, i64 %244
  %248 = ptrtoint %"struct.std::__1::pair.65"* %247 to i64
  %249 = bitcast %"struct.jxl::Spline::Point"* %208 to i64*
  %250 = bitcast %"struct.std::__1::pair.65"* %246 to i64*
  %251 = load i64, i64* %249, align 4
  store i64 %251, i64* %250, align 4
  %252 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %245, i64 %224, i32 1
  store float %207, float* %252, align 4
  %253 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %246, i64 1
  %254 = ptrtoint %"struct.std::__1::pair.65"* %253 to i64
  %255 = sdiv exact i64 %223, -12
  %256 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %246, i64 %255
  %257 = ptrtoint %"struct.std::__1::pair.65"* %256 to i64
  %258 = icmp sgt i64 %223, 0
  br i1 %258, label %259, label %262

259:                                              ; preds = %243
  %260 = bitcast %"struct.std::__1::pair.65"* %256 to i8*
  %261 = inttoptr i64 %222 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %260, i8* align 4 %261, i64 %223, i1 false) #18
  br label %262

262:                                              ; preds = %259, %243
  store i64 %257, i64* %44, align 8
  store i64 %254, i64* %43, align 8
  store i64 %248, i64* %45, align 8
  %263 = icmp eq i64 %222, 0
  br i1 %263, label %373, label %264

264:                                              ; preds = %262
  %265 = inttoptr i64 %222 to i8*
  call void @_ZdlPv(i8* %265) #21
  br label %373

266:                                              ; preds = %354
  %267 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %351, i64 0, i32 0
  %268 = load float, float* %267, align 4
  br label %269

269:                                              ; preds = %266, %191
  %270 = phi float [ %268, %266 ], [ %187, %191 ]
  %271 = phi %"struct.jxl::Spline::Point"* [ %351, %266 ], [ %39, %191 ]
  %272 = phi float [ %349, %266 ], [ 0.000000e+00, %191 ]
  %273 = phi %"struct.jxl::Spline::Point"* [ %352, %266 ], [ %189, %191 ]
  %274 = phi float* [ %358, %266 ], [ %193, %191 ]
  %275 = phi float [ %368, %266 ], [ %203, %191 ]
  %276 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %273, i64 0, i32 0
  %277 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %271, i64 0, i32 1
  %278 = fsub float 1.000000e+00, %272
  %279 = fdiv float %278, %275
  %280 = load float, float* %276, align 4
  %281 = load float, float* %274, align 4
  %282 = load float, float* %277, align 4
  %283 = insertelement <2 x float> undef, float %280, i32 0
  %284 = insertelement <2 x float> %283, float %281, i32 1
  %285 = insertelement <2 x float> undef, float %270, i32 0
  %286 = insertelement <2 x float> %285, float %282, i32 1
  %287 = fsub <2 x float> %284, %286
  %288 = insertelement <2 x float> undef, float %279, i32 0
  %289 = shufflevector <2 x float> %288, <2 x float> undef, <2 x i32> zeroinitializer
  %290 = fmul <2 x float> %289, %287
  %291 = fadd <2 x float> %286, %290
  %292 = extractelement <2 x float> %291, i32 0
  store <2 x float> %291, <2 x float>* %46, align 8
  %293 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %29, align 8
  %294 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %30, align 8
  %295 = icmp ult %"struct.std::__1::pair.65"* %293, %294
  %296 = ptrtoint %"struct.std::__1::pair.65"* %294 to i64
  %297 = bitcast <2 x float> %291 to <2 x i32>
  %298 = extractelement <2 x i32> %297, i32 1
  br i1 %295, label %299, label %304

299:                                              ; preds = %269
  %300 = bitcast %"struct.std::__1::pair.65"* %293 to <2 x float>*
  store <2 x float> %291, <2 x float>* %300, align 4
  %301 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %293, i64 0, i32 1
  store float 1.000000e+00, float* %301, align 4
  %302 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %293, i64 1
  %303 = ptrtoint %"struct.std::__1::pair.65"* %302 to i64
  store i64 %303, i64* %43, align 8
  br label %371

304:                                              ; preds = %269
  %305 = ptrtoint %"struct.std::__1::pair.65"* %293 to i64
  %306 = load i64, i64* %44, align 8
  %307 = sub i64 %305, %306
  %308 = sdiv exact i64 %307, 12
  %309 = add nsw i64 %308, 1
  %310 = icmp ugt i64 %309, 1537228672809129301
  br i1 %310, label %311, label %313

311:                                              ; preds = %304
  %312 = bitcast %"class.std::__1::vector.63"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %312) #20
  unreachable

313:                                              ; preds = %304
  %314 = sub i64 %296, %306
  %315 = sdiv exact i64 %314, 12
  %316 = icmp ult i64 %315, 768614336404564650
  br i1 %316, label %317, label %322

317:                                              ; preds = %313
  %318 = shl nsw i64 %315, 1
  %319 = icmp ult i64 %318, %309
  %320 = select i1 %319, i64 %309, i64 %318
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %327, label %322

322:                                              ; preds = %317, %313
  %323 = phi i64 [ %320, %317 ], [ 1537228672809129301, %313 ]
  %324 = mul i64 %323, 12
  %325 = call i8* @_Znwm(i64 %324) #21
  %326 = bitcast i8* %325 to %"struct.std::__1::pair.65"*
  br label %327

327:                                              ; preds = %322, %317
  %328 = phi i64 [ %323, %322 ], [ 0, %317 ]
  %329 = phi %"struct.std::__1::pair.65"* [ %326, %322 ], [ null, %317 ]
  %330 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %329, i64 %308
  %331 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %329, i64 %328
  %332 = ptrtoint %"struct.std::__1::pair.65"* %331 to i64
  %333 = bitcast %"struct.std::__1::pair.65"* %330 to <2 x float>*
  store <2 x float> %291, <2 x float>* %333, align 4
  %334 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %329, i64 %308, i32 1
  store float 1.000000e+00, float* %334, align 4
  %335 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %330, i64 1
  %336 = ptrtoint %"struct.std::__1::pair.65"* %335 to i64
  %337 = sdiv exact i64 %307, -12
  %338 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %330, i64 %337
  %339 = ptrtoint %"struct.std::__1::pair.65"* %338 to i64
  %340 = icmp sgt i64 %307, 0
  br i1 %340, label %341, label %344

341:                                              ; preds = %327
  %342 = bitcast %"struct.std::__1::pair.65"* %338 to i8*
  %343 = inttoptr i64 %306 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %342, i8* align 4 %343, i64 %307, i1 false) #18
  br label %344

344:                                              ; preds = %341, %327
  store i64 %339, i64* %44, align 8
  store i64 %336, i64* %43, align 8
  store i64 %332, i64* %45, align 8
  %345 = icmp eq i64 %306, 0
  br i1 %345, label %371, label %346

346:                                              ; preds = %344
  %347 = inttoptr i64 %306 to i8*
  call void @_ZdlPv(i8* %347) #21
  br label %371

348:                                              ; preds = %191, %354
  %349 = phi float [ %369, %354 ], [ %204, %191 ]
  %350 = phi float* [ %358, %354 ], [ %193, %191 ]
  %351 = phi %"struct.jxl::Spline::Point"* [ %352, %354 ], [ %189, %191 ]
  %352 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %351, i64 1
  %353 = icmp eq %"struct.jxl::Spline::Point"* %352, %120
  br i1 %353, label %206, label %354

354:                                              ; preds = %348
  %355 = load float, float* %350, align 4
  %356 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %351, i64 0, i32 0
  %357 = load float, float* %356, align 4
  %358 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %351, i64 1, i32 1
  %359 = bitcast %"struct.jxl::Spline::Point"* %352 to <2 x float>*
  %360 = load <2 x float>, <2 x float>* %359, align 4
  %361 = insertelement <2 x float> undef, float %357, i32 0
  %362 = insertelement <2 x float> %361, float %355, i32 1
  %363 = fsub <2 x float> %360, %362
  %364 = fmul <2 x float> %363, %363
  %365 = extractelement <2 x float> %364, i32 0
  %366 = extractelement <2 x float> %364, i32 1
  %367 = fadd float %365, %366
  %368 = call float @sqrtf(float %367) #18
  %369 = fadd float %349, %368
  %370 = fcmp ult float %369, 1.000000e+00
  br i1 %370, label %348, label %266

371:                                              ; preds = %346, %344, %299
  %372 = icmp eq %"struct.jxl::Spline::Point"* %273, %120
  br i1 %372, label %373, label %186

373:                                              ; preds = %371, %213, %262, %264
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #18
  %374 = icmp eq %"struct.jxl::Spline::Point"* %119, null
  br i1 %374, label %378, label %375

375:                                              ; preds = %373
  %376 = ptrtoint %"struct.jxl::Spline::Point"* %119 to i64
  store i64 %376, i64* %47, align 8
  %377 = bitcast %"struct.jxl::Spline::Point"* %119 to i8*
  call void @_ZdlPv(i8* %377) #21
  br label %378

378:                                              ; preds = %373, %375
  %379 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %48, align 8
  %380 = icmp eq %"struct.jxl::Spline::Point"* %379, null
  br i1 %380, label %384, label %381

381:                                              ; preds = %378
  %382 = ptrtoint %"struct.jxl::Spline::Point"* %379 to i64
  store i64 %382, i64* %38, align 8
  %383 = bitcast %"struct.jxl::Spline::Point"* %379 to i8*
  call void @_ZdlPv(i8* %383) #21
  br label %384

384:                                              ; preds = %378, %381
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #18
  %385 = load i64, i64* %43, align 8
  %386 = load i64, i64* %44, align 8
  %387 = sub i64 %385, %386
  %388 = sdiv exact i64 %387, 12
  %389 = add nsw i64 %388, -2
  %390 = uitofp i64 %389 to float
  %391 = inttoptr i64 %385 to %"struct.std::__1::pair.65"*
  %392 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %391, i64 -1, i32 1
  %393 = load float, float* %392, align 4
  %394 = fadd float %393, %390
  %395 = fcmp ugt float %394, 0.000000e+00
  %396 = inttoptr i64 %386 to %"struct.std::__1::pair.65"*
  br i1 %395, label %397, label %405

397:                                              ; preds = %384
  %398 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %399 = and i32 %398, 2225
  %400 = call i32 @llvm.cttz.i32(i32 %399, i1 true) #18, !range !56
  %401 = zext i32 %400 to i64
  %402 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)*]* @_ZN3jxlL34DrawFromPointsHighwayDispatchTableE, i64 0, i64 %401
  %403 = load void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)*, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)** %402, align 8
  call void %403(%"class.jxl::Image3"* %1, %"class.jxl::Rect"* dereferenceable(32) %2, %"class.jxl::Rect"* dereferenceable(32) %3, %"struct.jxl::Spline"* nonnull dereferenceable(536) %7, i1 zeroext false, %"class.std::__1::vector.63"* nonnull dereferenceable(24) %8, float %394) #18
  %404 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %28, align 8
  br label %405

405:                                              ; preds = %384, %397
  %406 = phi %"struct.std::__1::pair.65"* [ %404, %397 ], [ %396, %384 ]
  %407 = phi i32 [ 0, %397 ], [ 4, %384 ]
  %408 = icmp eq %"struct.std::__1::pair.65"* %406, null
  br i1 %408, label %412, label %409

409:                                              ; preds = %405
  %410 = ptrtoint %"struct.std::__1::pair.65"* %406 to i64
  store i64 %410, i64* %43, align 8
  %411 = bitcast %"struct.std::__1::pair.65"* %406 to i8*
  call void @_ZdlPv(i8* %411) #21
  br label %412

412:                                              ; preds = %405, %409
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #18
  %413 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %25, align 8
  br label %414

414:                                              ; preds = %94, %412
  %415 = phi %"struct.jxl::Spline::Point"* [ %413, %412 ], [ %63, %94 ]
  %416 = phi i32 [ %407, %412 ], [ 1, %94 ]
  %417 = icmp eq %"struct.jxl::Spline::Point"* %415, null
  br i1 %417, label %421, label %418

418:                                              ; preds = %414
  %419 = ptrtoint %"struct.jxl::Spline::Point"* %415 to i64
  store i64 %419, i64* %33, align 8
  %420 = bitcast %"struct.jxl::Spline::Point"* %415 to i8*
  call void @_ZdlPv(i8* %420) #21
  br label %421

421:                                              ; preds = %414, %418
  call void @llvm.lifetime.end.p0i8(i64 536, i8* nonnull %19) #18
  switch i32 %416, label %429 [
    i32 0, label %422
    i32 4, label %422
  ]

422:                                              ; preds = %421, %421
  %423 = add nuw i64 %51, 1
  %424 = load i64, i64* %13, align 8
  %425 = load i64, i64* %15, align 8
  %426 = sub i64 %424, %425
  %427 = sdiv exact i64 %426, 536
  %428 = icmp ult i64 %423, %427
  br i1 %428, label %49, label %429

429:                                              ; preds = %421, %422, %5
  %430 = phi i32 [ 0, %5 ], [ 0, %422 ], [ 1, %421 ]
  ret i32 %430
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"*, i64, %"class.jxl::BitReader"* noalias) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 13
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %7 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %9 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  %12 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  %14 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  %15 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 1
  %18 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 2
  %19 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  %20 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 0
  %21 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %23 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 12
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 14
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %28 = bitcast i32** %27 to i8**
  %29 = load i32, i32* %4, align 4
  br label %30

30:                                               ; preds = %333, %3
  %31 = phi i32 [ %334, %333 ], [ %29, %3 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %48, label %33, !prof !57

33:                                               ; preds = %30
  %34 = load i32*, i32** %27, align 8
  %35 = load i32, i32* %26, align 8
  %36 = add i32 %35, 1
  store i32 %36, i32* %26, align 8
  %37 = and i32 %35, 1048575
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %34, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = add i32 %31, -1
  store i32 %42, i32* %4, align 4
  %43 = load i32, i32* %25, align 8
  %44 = add i32 %43, 1
  store i32 %44, i32* %25, align 8
  %45 = and i32 %43, 1048575
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %34, i64 %46
  store i32 %40, i32* %47, align 4
  br label %395

48:                                               ; preds = %30
  %49 = load i8*, i8** %5, align 8
  %50 = load i8*, i8** %6, align 8
  %51 = icmp ugt i8* %49, %50
  br i1 %51, label %52, label %53, !prof !55

52:                                               ; preds = %48
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #18
  br label %64

53:                                               ; preds = %48
  %54 = bitcast i8* %49 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = load i64, i64* %7, align 8
  %57 = shl i64 %55, %56
  %58 = load i64, i64* %8, align 8
  %59 = or i64 %58, %57
  store i64 %59, i64* %8, align 8
  %60 = sub i64 63, %56
  %61 = lshr i64 %60, 3
  %62 = getelementptr inbounds i8, i8* %49, i64 %61
  store i8* %62, i8** %5, align 8
  %63 = or i64 %56, 56
  store i64 %63, i64* %7, align 8
  br label %64

64:                                               ; preds = %52, %53
  %65 = load i8, i8* %9, align 8, !range !54, !noalias !58
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %72, label %67, !prof !57

67:                                               ; preds = %64
  %68 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !61
  %69 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %68, i64 %1
  %70 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %69, %"class.jxl::BitReader"* %2) #18
  %71 = zext i16 %70 to i64
  br label %123

72:                                               ; preds = %64
  %73 = load i32, i32* %11, align 4, !noalias !64
  %74 = and i32 %73, 4095
  %75 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !64
  %76 = load i32, i32* %13, align 8, !noalias !64
  %77 = zext i32 %76 to i64
  %78 = shl i64 %1, %77
  %79 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %75, i64 %78
  %80 = zext i32 %74 to i64
  %81 = load i32, i32* %14, align 4, !noalias !64
  %82 = zext i32 %81 to i64
  %83 = load i32, i32* %15, align 8, !noalias !64
  %84 = lshr i64 %80, %82
  %85 = and i32 %83, %74
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %84
  %88 = bitcast %"struct.jxl::AliasTable::Entry"* %87 to i64*
  %89 = load i64, i64* %88, align 1, !alias.scope !67, !noalias !70
  %90 = and i64 %89, 255
  %91 = lshr i64 %89, 8
  %92 = and i64 %91, 255
  %93 = lshr i64 %89, 16
  %94 = and i64 %93, 65535
  %95 = icmp ule i64 %90, %86
  %96 = select i1 %95, i64 %89, i64 0
  %97 = lshr i64 %96, 32
  %98 = and i64 %97, 65535
  %99 = lshr i64 %96, 48
  %100 = select i1 %95, i64 %92, i64 %84
  %101 = add nuw nsw i64 %98, %86
  %102 = xor i64 %99, %94
  %103 = lshr i32 %73, 12
  %104 = zext i32 %103 to i64
  %105 = mul nuw nsw i64 %102, %104
  %106 = add nuw nsw i64 %101, %105
  %107 = trunc i64 %106 to i32
  %108 = load i64, i64* %8, align 8, !alias.scope !64
  %109 = icmp ult i32 %107, 65536
  %110 = shl i32 %107, 16
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 65535
  %113 = or i32 %110, %112
  %114 = select i1 %109, i32 %113, i32 %107
  store i32 %114, i32* %11, align 4, !noalias !64
  %115 = select i1 %109, i64 16, i64 0
  %116 = load i64, i64* %7, align 8, !alias.scope !64
  %117 = sub i64 %116, %115
  store i64 %117, i64* %7, align 8, !alias.scope !64
  %118 = lshr i64 %108, %115
  store i64 %118, i64* %8, align 8, !alias.scope !64
  %119 = and i32 %114, 4095
  %120 = zext i32 %119 to i64
  %121 = lshr i64 %120, %82
  %122 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %121, i32 0
  tail call void @llvm.prefetch(i8* %122, i32 0, i32 3, i32 1) #18, !noalias !72
  br label %123

123:                                              ; preds = %67, %72
  %124 = phi i64 [ %71, %67 ], [ %100, %72 ]
  %125 = load i32, i32* %16, align 4
  %126 = zext i32 %125 to i64
  %127 = icmp ult i64 %124, %126
  br i1 %127, label %337, label %128, !prof !57

128:                                              ; preds = %123
  %129 = sub nsw i64 %124, %126
  %130 = load i32, i32* %17, align 4
  %131 = zext i32 %130 to i64
  %132 = load i32, i32* %18, align 4
  %133 = load i32, i32* %19, align 4
  %134 = zext i32 %133 to i64
  %135 = icmp ult i64 %129, %131
  br i1 %135, label %136, label %138

136:                                              ; preds = %128
  %137 = trunc i64 %129 to i32
  br label %171

138:                                              ; preds = %128
  %139 = load i32, i32* %20, align 4
  %140 = zext i32 %139 to i64
  %141 = zext i32 %132 to i64
  %142 = add nuw nsw i64 %134, %141
  %143 = sub nsw i64 %129, %131
  %144 = lshr i64 %143, %142
  %145 = sub i64 %144, %142
  %146 = add i64 %145, %140
  %147 = and i64 %146, 31
  %148 = shl nsw i32 -1, %133
  %149 = xor i32 %148, -1
  %150 = trunc i64 %129 to i32
  %151 = and i32 %149, %150
  %152 = lshr i64 %129, %134
  %153 = shl nsw i64 -1, %147
  %154 = xor i64 %153, -1
  %155 = load i64, i64* %8, align 8
  %156 = and i64 %155, %154
  %157 = load i64, i64* %7, align 8
  %158 = sub i64 %157, %147
  store i64 %158, i64* %7, align 8
  %159 = lshr i64 %155, %147
  store i64 %159, i64* %8, align 8
  %160 = shl i32 1, %132
  %161 = sext i32 %160 to i64
  %162 = add nsw i32 %160, -1
  %163 = sext i32 %162 to i64
  %164 = and i64 %152, %163
  %165 = or i64 %164, %161
  %166 = shl i64 %165, %147
  %167 = or i64 %156, %166
  %168 = shl i64 %167, %134
  %169 = trunc i64 %168 to i32
  %170 = or i32 %151, %169
  br label %171

171:                                              ; preds = %136, %138
  %172 = phi i32 [ %137, %136 ], [ %170, %138 ]
  %173 = load i32, i32* %21, align 8
  %174 = add i32 %173, %172
  store i32 %174, i32* %4, align 4
  %175 = load i8*, i8** %5, align 8
  %176 = load i8*, i8** %6, align 8
  %177 = icmp ugt i8* %175, %176
  br i1 %177, label %178, label %179, !prof !55

178:                                              ; preds = %171
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #18
  br label %190

179:                                              ; preds = %171
  %180 = bitcast i8* %175 to i64*
  %181 = load i64, i64* %180, align 1
  %182 = load i64, i64* %7, align 8
  %183 = shl i64 %181, %182
  %184 = load i64, i64* %8, align 8
  %185 = or i64 %184, %183
  store i64 %185, i64* %8, align 8
  %186 = sub i64 63, %182
  %187 = lshr i64 %186, 3
  %188 = getelementptr inbounds i8, i8* %175, i64 %187
  store i8* %188, i8** %5, align 8
  %189 = or i64 %182, 56
  store i64 %189, i64* %7, align 8
  br label %190

190:                                              ; preds = %178, %179
  %191 = load i32, i32* %22, align 4
  %192 = zext i32 %191 to i64
  %193 = load i8, i8* %9, align 8, !range !54, !noalias !73
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %202, label %195, !prof !57

195:                                              ; preds = %190
  %196 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !76
  %197 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %196, i64 %192
  %198 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %197, %"class.jxl::BitReader"* %2) #18
  %199 = zext i16 %198 to i64
  %200 = load i32, i32* %22, align 4
  %201 = zext i32 %200 to i64
  br label %253

202:                                              ; preds = %190
  %203 = load i32, i32* %11, align 4, !noalias !79
  %204 = and i32 %203, 4095
  %205 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !79
  %206 = load i32, i32* %13, align 8, !noalias !79
  %207 = zext i32 %206 to i64
  %208 = shl i64 %192, %207
  %209 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %205, i64 %208
  %210 = zext i32 %204 to i64
  %211 = load i32, i32* %14, align 4, !noalias !79
  %212 = zext i32 %211 to i64
  %213 = load i32, i32* %15, align 8, !noalias !79
  %214 = lshr i64 %210, %212
  %215 = and i32 %213, %204
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %214
  %218 = bitcast %"struct.jxl::AliasTable::Entry"* %217 to i64*
  %219 = load i64, i64* %218, align 1, !alias.scope !82, !noalias !85
  %220 = and i64 %219, 255
  %221 = lshr i64 %219, 8
  %222 = and i64 %221, 255
  %223 = lshr i64 %219, 16
  %224 = and i64 %223, 65535
  %225 = icmp ule i64 %220, %216
  %226 = select i1 %225, i64 %219, i64 0
  %227 = lshr i64 %226, 32
  %228 = and i64 %227, 65535
  %229 = lshr i64 %226, 48
  %230 = select i1 %225, i64 %222, i64 %214
  %231 = add nuw nsw i64 %228, %216
  %232 = xor i64 %229, %224
  %233 = lshr i32 %203, 12
  %234 = zext i32 %233 to i64
  %235 = mul nuw nsw i64 %232, %234
  %236 = add nuw nsw i64 %231, %235
  %237 = trunc i64 %236 to i32
  %238 = load i64, i64* %8, align 8, !alias.scope !79
  %239 = icmp ult i32 %237, 65536
  %240 = shl i32 %237, 16
  %241 = trunc i64 %238 to i32
  %242 = and i32 %241, 65535
  %243 = or i32 %240, %242
  %244 = select i1 %239, i32 %243, i32 %237
  store i32 %244, i32* %11, align 4, !noalias !79
  %245 = select i1 %239, i64 16, i64 0
  %246 = load i64, i64* %7, align 8, !alias.scope !79
  %247 = sub i64 %246, %245
  store i64 %247, i64* %7, align 8, !alias.scope !79
  %248 = lshr i64 %238, %245
  store i64 %248, i64* %8, align 8, !alias.scope !79
  %249 = and i32 %244, 4095
  %250 = zext i32 %249 to i64
  %251 = lshr i64 %250, %212
  %252 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %251, i32 0
  tail call void @llvm.prefetch(i8* %252, i32 0, i32 3, i32 1) #18, !noalias !87
  br label %253

253:                                              ; preds = %195, %202
  %254 = phi i64 [ %201, %195 ], [ %192, %202 ]
  %255 = phi i64 [ %199, %195 ], [ %230, %202 ]
  %256 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %257 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 1
  %258 = load i32, i32* %257, align 4
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 2
  %261 = load i32, i32* %260, align 4
  %262 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 3
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  %265 = icmp ult i64 %255, %259
  br i1 %265, label %266, label %268

266:                                              ; preds = %253
  %267 = trunc i64 %255 to i32
  br label %302

268:                                              ; preds = %253
  %269 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 0
  %270 = load i32, i32* %269, align 4
  %271 = zext i32 %270 to i64
  %272 = zext i32 %261 to i64
  %273 = add nuw nsw i64 %264, %272
  %274 = sub nsw i64 %255, %259
  %275 = lshr i64 %274, %273
  %276 = sub i64 %275, %273
  %277 = add i64 %276, %271
  %278 = and i64 %277, 31
  %279 = shl nsw i32 -1, %263
  %280 = xor i32 %279, -1
  %281 = trunc i64 %255 to i32
  %282 = and i32 %280, %281
  %283 = lshr i64 %255, %264
  %284 = shl nsw i64 -1, %278
  %285 = xor i64 %284, -1
  %286 = load i64, i64* %8, align 8
  %287 = and i64 %286, %285
  %288 = load i64, i64* %7, align 8
  %289 = sub i64 %288, %278
  store i64 %289, i64* %7, align 8
  %290 = lshr i64 %286, %278
  store i64 %290, i64* %8, align 8
  %291 = shl i32 1, %261
  %292 = sext i32 %291 to i64
  %293 = add nsw i32 %291, -1
  %294 = sext i32 %293 to i64
  %295 = and i64 %283, %294
  %296 = or i64 %295, %292
  %297 = shl i64 %296, %278
  %298 = or i64 %287, %297
  %299 = shl i64 %298, %264
  %300 = trunc i64 %299 to i32
  %301 = or i32 %282, %300
  br label %302

302:                                              ; preds = %266, %268
  %303 = phi i32 [ %267, %266 ], [ %301, %268 ]
  %304 = zext i32 %303 to i64
  %305 = load i32, i32* %24, align 8
  %306 = icmp ult i32 %303, %305
  br i1 %306, label %307, label %311, !prof !57

307:                                              ; preds = %302
  %308 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %304
  %309 = load i32, i32* %308, align 4
  %310 = zext i32 %309 to i64
  br label %315

311:                                              ; preds = %302
  %312 = zext i32 %305 to i64
  %313 = add nuw nsw i64 %304, 1
  %314 = sub nsw i64 %313, %312
  br label %315

315:                                              ; preds = %311, %307
  %316 = phi i64 [ %310, %307 ], [ %314, %311 ]
  %317 = load i32, i32* %25, align 8
  %318 = zext i32 %317 to i64
  %319 = icmp ugt i64 %316, %318
  %320 = select i1 %319, i64 %318, i64 %316, !prof !55
  %321 = icmp ult i64 %320, 1048576
  %322 = select i1 %321, i64 %320, i64 1048576, !prof !57
  %323 = trunc i64 %322 to i32
  %324 = sub i32 %317, %323
  store i32 %324, i32* %26, align 8
  %325 = icmp eq i64 %322, 0
  br i1 %325, label %326, label %333, !prof !55

326:                                              ; preds = %315
  %327 = load i32, i32* %4, align 4
  %328 = zext i32 %327 to i64
  %329 = icmp ult i64 %328, 1048576
  %330 = select i1 %329, i64 %328, i64 1048576
  %331 = load i8*, i8** %28, align 8
  %332 = shl nuw nsw i64 %330, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %331, i8 0, i64 %332, i1 false)
  br label %333

333:                                              ; preds = %326, %315
  %334 = load i32, i32* %4, align 4
  %335 = load i32, i32* %21, align 8
  %336 = icmp ult i32 %334, %335
  br i1 %336, label %395, label %30

337:                                              ; preds = %123
  %338 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %339 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 1
  %340 = load i32, i32* %339, align 4
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 2
  %343 = load i32, i32* %342, align 4
  %344 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 3
  %345 = load i32, i32* %344, align 4
  %346 = zext i32 %345 to i64
  %347 = icmp ult i64 %124, %341
  br i1 %347, label %348, label %350

348:                                              ; preds = %337
  %349 = trunc i64 %124 to i32
  br label %384

350:                                              ; preds = %337
  %351 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 0
  %352 = load i32, i32* %351, align 4
  %353 = zext i32 %352 to i64
  %354 = zext i32 %343 to i64
  %355 = add nuw nsw i64 %346, %354
  %356 = sub nsw i64 %124, %341
  %357 = lshr i64 %356, %355
  %358 = sub i64 %357, %355
  %359 = add i64 %358, %353
  %360 = and i64 %359, 31
  %361 = shl nsw i32 -1, %345
  %362 = xor i32 %361, -1
  %363 = trunc i64 %124 to i32
  %364 = and i32 %362, %363
  %365 = lshr i64 %124, %346
  %366 = shl nsw i64 -1, %360
  %367 = xor i64 %366, -1
  %368 = load i64, i64* %8, align 8
  %369 = and i64 %368, %367
  %370 = load i64, i64* %7, align 8
  %371 = sub i64 %370, %360
  store i64 %371, i64* %7, align 8
  %372 = lshr i64 %368, %360
  store i64 %372, i64* %8, align 8
  %373 = shl i32 1, %343
  %374 = sext i32 %373 to i64
  %375 = add nsw i32 %373, -1
  %376 = sext i32 %375 to i64
  %377 = and i64 %365, %376
  %378 = or i64 %377, %374
  %379 = shl i64 %378, %360
  %380 = or i64 %369, %379
  %381 = shl i64 %380, %346
  %382 = trunc i64 %381 to i32
  %383 = or i32 %364, %382
  br label %384

384:                                              ; preds = %348, %350
  %385 = phi i32 [ %349, %348 ], [ %383, %350 ]
  %386 = zext i32 %385 to i64
  %387 = load i32*, i32** %27, align 8
  %388 = icmp eq i32* %387, null
  br i1 %388, label %395, label %389

389:                                              ; preds = %384
  %390 = load i32, i32* %25, align 8
  %391 = add i32 %390, 1
  store i32 %391, i32* %25, align 8
  %392 = and i32 %390, 1048575
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds i32, i32* %387, i64 %393
  store i32 %385, i32* %394, align 4
  br label %395

395:                                              ; preds = %333, %384, %389, %33
  %396 = phi i64 [ %41, %33 ], [ %386, %384 ], [ %386, %389 ], [ 0, %333 ]
  ret i64 %396
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

declare zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"*, %"class.jxl::BitReader"*) local_unnamed_addr #2

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #8

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #2

declare i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64, i64) local_unnamed_addr #2

declare i64 @_ZN3jxl12CacheAligned10NextOffsetEv() local_unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_4pairIllEENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.std::__1::pair"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.std::__1::pair"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 4
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.std::__1::pair"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %13, i64 %18, i32 0
  %20 = bitcast i64* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 16
  %25 = and i64 %24, -16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #18
  %26 = ptrtoint %"struct.std::__1::pair"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 4
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 1152921504606846975
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #20
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 4
  %41 = icmp ult i64 %40, 576460752303423487
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 3
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 1152921504606846975
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #20
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 1152921504606846975, %38 ]
  %52 = shl i64 %51, 4
  %53 = tail call i8* @_Znwm(i64 %52) #21
  %54 = bitcast i8* %53 to %"struct.std::__1::pair"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"struct.std::__1::pair"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %57, i64 %33
  %59 = bitcast %"struct.std::__1::pair"* %58 to i8*
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %57, i64 %56
  %61 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %58, i64 %1
  %62 = shl nsw i64 %1, 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 %62, i1 false)
  %63 = ptrtoint %"struct.std::__1::pair"* %60 to i64
  %64 = ptrtoint %"struct.std::__1::pair"* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint %"struct.std::__1::pair"* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 4
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %58, i64 %71
  %73 = ptrtoint %"struct.std::__1::pair"* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast %"struct.std::__1::pair"* %72 to i8*
  %77 = bitcast %"struct.std::__1::pair"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #18
  %78 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi %"struct.std::__1::pair"* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq %"struct.std::__1::pair"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %"struct.std::__1::pair"* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #21
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl15QuantizedSplineENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector.26"*, %"class.jxl::QuantizedSpline"* dereferenceable(536)) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::QuantizedSpline"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.26"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 536
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 34415567301696924
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.26"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #20
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::QuantizedSpline"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 536
  %20 = icmp ult i64 %19, 17207783650848462
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 34415567301696924, %14 ]
  %28 = mul i64 %27, 536
  %29 = tail call i8* @_Znwm(i64 %28) #21
  %30 = bitcast i8* %29 to %"class.jxl::QuantizedSpline"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.jxl::QuantizedSpline"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %33, i64 %9
  %35 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %33, i64 %32
  %36 = ptrtoint %"class.jxl::QuantizedSpline"* %35 to i64
  %37 = bitcast %"class.jxl::QuantizedSpline"* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false) #18
  %38 = bitcast %"class.jxl::QuantizedSpline"* %1 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.jxl::QuantizedSpline"* %34 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 0, i32 0, i32 1
  %42 = bitcast %"struct.std::__1::pair"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %33, i64 %9, i32 0, i32 0, i32 1
  %45 = bitcast %"struct.std::__1::pair"** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %47 = bitcast %"struct.std::__1::pair"** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %33, i64 %9, i32 0, i32 0, i32 2, i32 0, i32 0
  %50 = bitcast %"struct.std::__1::pair"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast %"class.jxl::QuantizedSpline"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 24, i1 false) #18
  %52 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %33, i64 %9, i32 1
  %53 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %1, i64 0, i32 1
  %54 = bitcast [3 x [32 x i32]]* %52 to i8*
  %55 = bitcast [3 x [32 x i32]]* %53 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 512, i1 false) #18
  %56 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %34, i64 1
  %57 = ptrtoint %"class.jxl::QuantizedSpline"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %0, i64 0, i32 0, i32 0
  %59 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %58, align 8
  %60 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %3, align 8
  %61 = icmp eq %"class.jxl::QuantizedSpline"* %60, %59
  br i1 %61, label %62, label %64

62:                                               ; preds = %31
  %63 = ptrtoint %"class.jxl::QuantizedSpline"* %59 to i64
  br label %92

64:                                               ; preds = %31, %64
  %65 = phi %"class.jxl::QuantizedSpline"* [ %67, %64 ], [ %34, %31 ]
  %66 = phi %"class.jxl::QuantizedSpline"* [ %68, %64 ], [ %60, %31 ]
  %67 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %65, i64 -1
  %68 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %66, i64 -1
  %69 = bitcast %"class.jxl::QuantizedSpline"* %67 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 24, i1 false) #18
  %70 = bitcast %"class.jxl::QuantizedSpline"* %68 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.jxl::QuantizedSpline"* %67 to i64*
  store i64 %71, i64* %72, align 8
  %73 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %66, i64 -1, i32 0, i32 0, i32 1
  %74 = bitcast %"struct.std::__1::pair"** %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %65, i64 -1, i32 0, i32 0, i32 1
  %77 = bitcast %"struct.std::__1::pair"** %76 to i64*
  store i64 %75, i64* %77, align 8
  %78 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %66, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %79 = bitcast %"struct.std::__1::pair"** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %65, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %82 = bitcast %"struct.std::__1::pair"** %81 to i64*
  store i64 %80, i64* %82, align 8
  %83 = bitcast %"class.jxl::QuantizedSpline"* %68 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 24, i1 false) #18
  %84 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %65, i64 -1, i32 1
  %85 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %66, i64 -1, i32 1
  %86 = bitcast [3 x [32 x i32]]* %84 to i8*
  %87 = bitcast [3 x [32 x i32]]* %85 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 512, i1 false) #18
  %88 = icmp eq %"class.jxl::QuantizedSpline"* %68, %59
  br i1 %88, label %89, label %64

89:                                               ; preds = %64
  %90 = load i64, i64* %6, align 8
  %91 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %3, align 8
  br label %92

92:                                               ; preds = %62, %89
  %93 = phi %"class.jxl::QuantizedSpline"* [ %59, %62 ], [ %91, %89 ]
  %94 = phi %"class.jxl::QuantizedSpline"* [ %34, %62 ], [ %67, %89 ]
  %95 = phi i64 [ %63, %62 ], [ %90, %89 ]
  %96 = ptrtoint %"class.jxl::QuantizedSpline"* %94 to i64
  store i64 %96, i64* %6, align 8
  store i64 %57, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %97 = inttoptr i64 %95 to %"class.jxl::QuantizedSpline"*
  %98 = icmp eq %"class.jxl::QuantizedSpline"* %93, %97
  br i1 %98, label %112, label %99

99:                                               ; preds = %92, %110
  %100 = phi %"class.jxl::QuantizedSpline"* [ %101, %110 ], [ %93, %92 ]
  %101 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %100, i64 -1
  %102 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %101, i64 0, i32 0, i32 0, i32 0
  %103 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %102, align 8
  %104 = icmp eq %"struct.std::__1::pair"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = ptrtoint %"struct.std::__1::pair"* %103 to i64
  %107 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %100, i64 -1, i32 0, i32 0, i32 1
  %108 = bitcast %"struct.std::__1::pair"** %107 to i64*
  store i64 %106, i64* %108, align 8
  %109 = bitcast %"struct.std::__1::pair"* %103 to i8*
  tail call void @_ZdlPv(i8* %109) #21
  br label %110

110:                                              ; preds = %105, %99
  %111 = icmp eq %"class.jxl::QuantizedSpline"* %101, %97
  br i1 %111, label %112, label %99

112:                                              ; preds = %110, %92
  %113 = icmp eq i64 %95, 0
  br i1 %113, label %116, label %114

114:                                              ; preds = %112
  %115 = inttoptr i64 %95 to i8*
  tail call void @_ZdlPv(i8* %115) #21
  br label %116

116:                                              ; preds = %112, %114
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_131DrawCentripetalCatmullRomSplineENSt3__16vectorINS_6Spline5PointENS1_9allocatorIS4_EEEE(%"class.std::__1::vector.1"* noalias nocapture sret, %"class.std::__1::vector.1"*) unnamed_addr #5 {
  %3 = alloca %"class.std::__1::vector.1", align 16
  %4 = alloca <2 x float>, align 8
  %5 = alloca [4 x float], align 16
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %1, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::Spline::Point"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.1"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = ashr exact i64 %11, 3
  %13 = icmp ult i64 %12, 2
  %14 = inttoptr i64 %10 to %"struct.jxl::Spline::Point"*
  br i1 %13, label %15, label %25

15:                                               ; preds = %2
  %16 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  store i64 %10, i64* %16, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %18 = bitcast %"struct.jxl::Spline::Point"** %17 to i64*
  store i64 %8, i64* %18, align 8
  %19 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %20 = bitcast %"struct.jxl::Spline::Point"** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %23 = bitcast %"struct.jxl::Spline::Point"** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast %"class.std::__1::vector.1"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #18
  br label %448

25:                                               ; preds = %2
  %26 = bitcast %"class.std::__1::vector.1"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #18
  %27 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %3, i64 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 24, i1 false) #18
  %29 = shl i64 %11, 1
  %30 = add i64 %29, -15
  %31 = bitcast %"struct.jxl::Spline::Point"** %28 to i64*
  %32 = bitcast %"class.std::__1::vector.1"* %3 to i64*
  %33 = icmp ugt i64 %30, 2305843009213693951
  br i1 %33, label %34, label %35

34:                                               ; preds = %25
  tail call void @abort() #20
  unreachable

35:                                               ; preds = %25
  %36 = bitcast <2 x float>* %4 to %"struct.jxl::Spline::Point"*
  %37 = shl i64 %30, 3
  %38 = tail call i8* @_Znwm(i64 %37) #21
  %39 = bitcast i8* %38 to %"struct.jxl::Spline::Point"*
  %40 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %39, i64 %30
  %41 = ptrtoint %"struct.jxl::Spline::Point"* %40 to i64
  %42 = insertelement <2 x i8*> undef, i8* %38, i32 0
  %43 = shufflevector <2 x i8*> %42, <2 x i8*> undef, <2 x i32> zeroinitializer
  %44 = ptrtoint <2 x i8*> %43 to <2 x i64>
  %45 = bitcast %"class.std::__1::vector.1"* %3 to <2 x i64>*
  store <2 x i64> %44, <2 x i64>* %45, align 16
  store i64 %41, i64* %31, align 16
  %46 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %14, i64 1, i32 0
  %47 = inttoptr i64 %10 to <2 x float>*
  %48 = load <2 x float>, <2 x float>* %47, align 4
  %49 = bitcast float* %46 to <2 x float>*
  %50 = load <2 x float>, <2 x float>* %49, align 4
  %51 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %1, i64 0, i32 0, i32 0
  %52 = bitcast <2 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #18
  %53 = fsub <2 x float> %48, %50
  %54 = fadd <2 x float> %48, %53
  store <2 x float> %54, <2 x float>* %4, align 8
  %55 = call %"struct.jxl::Spline::Point"* @_ZNSt3__16vectorIN3jxl6Spline5PointENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.1"* %1, %"struct.jxl::Spline::Point"* %14, %"struct.jxl::Spline::Point"* nonnull dereferenceable(8) %36)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #18
  %56 = load i64, i64* %7, align 8
  %57 = load i64, i64* %9, align 8
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 3
  %60 = add nsw i64 %59, -1
  %61 = inttoptr i64 %57 to %"struct.jxl::Spline::Point"*
  %62 = add nsw i64 %59, -2
  %63 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %61, i64 %60, i32 0
  %64 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %61, i64 %62, i32 0
  %65 = bitcast float* %63 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 4
  %67 = bitcast float* %64 to <2 x float>*
  %68 = load <2 x float>, <2 x float>* %67, align 4
  %69 = fsub <2 x float> %66, %68
  %70 = fadd <2 x float> %66, %69
  %71 = inttoptr i64 %56 to %"struct.jxl::Spline::Point"*
  %72 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %73 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %72, align 8
  %74 = icmp ugt %"struct.jxl::Spline::Point"* %73, %71
  %75 = ptrtoint %"struct.jxl::Spline::Point"* %73 to i64
  br i1 %74, label %76, label %80

76:                                               ; preds = %35
  %77 = inttoptr i64 %56 to <2 x float>*
  store <2 x float> %70, <2 x float>* %77, align 4
  %78 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %71, i64 1
  %79 = ptrtoint %"struct.jxl::Spline::Point"* %78 to i64
  store i64 %79, i64* %7, align 8
  br label %131

80:                                               ; preds = %35
  %81 = add nsw i64 %59, 1
  %82 = icmp ugt i64 %81, 2305843009213693951
  br i1 %82, label %83, label %85

83:                                               ; preds = %80
  %84 = bitcast %"class.std::__1::vector.1"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %84) #20
  unreachable

85:                                               ; preds = %80
  %86 = bitcast %"struct.jxl::Spline::Point"** %72 to i64*
  %87 = sub i64 %75, %57
  %88 = ashr exact i64 %87, 3
  %89 = icmp ult i64 %88, 1152921504606846975
  br i1 %89, label %90, label %98

90:                                               ; preds = %85
  %91 = ashr exact i64 %87, 2
  %92 = icmp ult i64 %91, %81
  %93 = select i1 %92, i64 %81, i64 %91
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %103, label %95

95:                                               ; preds = %90
  %96 = icmp ugt i64 %93, 2305843009213693951
  br i1 %96, label %97, label %98

97:                                               ; preds = %95
  call void @abort() #20
  unreachable

98:                                               ; preds = %95, %85
  %99 = phi i64 [ %93, %95 ], [ 2305843009213693951, %85 ]
  %100 = shl i64 %99, 3
  %101 = call i8* @_Znwm(i64 %100) #21
  %102 = bitcast i8* %101 to %"struct.jxl::Spline::Point"*
  br label %103

103:                                              ; preds = %98, %90
  %104 = phi i64 [ %99, %98 ], [ 0, %90 ]
  %105 = phi %"struct.jxl::Spline::Point"* [ %102, %98 ], [ null, %90 ]
  %106 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %105, i64 %59
  %107 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %105, i64 %104
  %108 = ptrtoint %"struct.jxl::Spline::Point"* %107 to i64
  %109 = bitcast %"struct.jxl::Spline::Point"* %106 to <2 x float>*
  store <2 x float> %70, <2 x float>* %109, align 4
  %110 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %106, i64 1
  %111 = ptrtoint %"struct.jxl::Spline::Point"* %110 to i64
  %112 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %51, align 8
  %113 = load i64, i64* %7, align 8
  %114 = ptrtoint %"struct.jxl::Spline::Point"* %112 to i64
  %115 = sub i64 %113, %114
  %116 = ashr exact i64 %115, 3
  %117 = sub nsw i64 0, %116
  %118 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %106, i64 %117
  %119 = ptrtoint %"struct.jxl::Spline::Point"* %118 to i64
  %120 = icmp sgt i64 %115, 0
  br i1 %120, label %121, label %125

121:                                              ; preds = %103
  %122 = bitcast %"struct.jxl::Spline::Point"* %118 to i8*
  %123 = bitcast %"struct.jxl::Spline::Point"* %112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %122, i8* align 4 %123, i64 %115, i1 false) #18
  %124 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %51, align 8
  br label %125

125:                                              ; preds = %121, %103
  %126 = phi %"struct.jxl::Spline::Point"* [ %112, %103 ], [ %124, %121 ]
  store i64 %119, i64* %9, align 8
  store i64 %111, i64* %7, align 8
  store i64 %108, i64* %86, align 8
  %127 = icmp eq %"struct.jxl::Spline::Point"* %126, null
  br i1 %127, label %131, label %128

128:                                              ; preds = %125
  %129 = bitcast %"struct.jxl::Spline::Point"* %126 to i8*
  call void @_ZdlPv(i8* %129) #21
  %130 = load i64, i64* %7, align 8
  br label %131

131:                                              ; preds = %76, %125, %128
  %132 = phi i64 [ %79, %76 ], [ %111, %125 ], [ %130, %128 ]
  %133 = load i64, i64* %9, align 8
  %134 = sub i64 %132, %133
  %135 = icmp eq i64 %134, 24
  %136 = inttoptr i64 %133 to %"struct.jxl::Spline::Point"*
  br i1 %135, label %146, label %137

137:                                              ; preds = %131
  %138 = bitcast %"struct.jxl::Spline::Point"** %27 to i64*
  %139 = bitcast [4 x float]* %5 to i8*
  %140 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 1
  %141 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 2
  %142 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 3
  br label %218

143:                                              ; preds = %323
  %144 = inttoptr i64 %326 to %"struct.jxl::Spline::Point"*
  %145 = add nsw i64 %328, -2
  br label %146

146:                                              ; preds = %143, %131
  %147 = phi %"struct.jxl::Spline::Point"* [ %136, %131 ], [ %144, %143 ]
  %148 = phi i64 [ 1, %131 ], [ %145, %143 ]
  %149 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %147, i64 %148
  %150 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %27, align 8
  %151 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %28, align 16
  %152 = icmp eq %"struct.jxl::Spline::Point"* %150, %151
  %153 = ptrtoint %"struct.jxl::Spline::Point"* %151 to i64
  br i1 %152, label %161, label %154

154:                                              ; preds = %146
  %155 = bitcast %"struct.jxl::Spline::Point"* %149 to i64*
  %156 = bitcast %"struct.jxl::Spline::Point"* %150 to i64*
  %157 = load i64, i64* %155, align 4
  store i64 %157, i64* %156, align 4
  %158 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %150, i64 1
  %159 = ptrtoint %"struct.jxl::Spline::Point"* %158 to i64
  %160 = bitcast %"struct.jxl::Spline::Point"** %27 to i64*
  store i64 %159, i64* %160, align 8
  br label %209

161:                                              ; preds = %146
  %162 = ptrtoint %"struct.jxl::Spline::Point"* %150 to i64
  %163 = bitcast %"struct.jxl::Spline::Point"** %27 to i64*
  %164 = load i64, i64* %32, align 16
  %165 = sub i64 %162, %164
  %166 = ashr exact i64 %165, 3
  %167 = add nsw i64 %166, 1
  %168 = icmp ugt i64 %167, 2305843009213693951
  br i1 %168, label %169, label %171

169:                                              ; preds = %161
  %170 = bitcast %"class.std::__1::vector.1"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %170) #20
  unreachable

171:                                              ; preds = %161
  %172 = sub i64 %153, %164
  %173 = ashr exact i64 %172, 3
  %174 = icmp ult i64 %173, 1152921504606846975
  br i1 %174, label %175, label %183

175:                                              ; preds = %171
  %176 = ashr exact i64 %172, 2
  %177 = icmp ult i64 %176, %167
  %178 = select i1 %177, i64 %167, i64 %176
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %188, label %180

180:                                              ; preds = %175
  %181 = icmp ugt i64 %178, 2305843009213693951
  br i1 %181, label %182, label %183

182:                                              ; preds = %180
  call void @abort() #20
  unreachable

183:                                              ; preds = %180, %171
  %184 = phi i64 [ %178, %180 ], [ 2305843009213693951, %171 ]
  %185 = shl i64 %184, 3
  %186 = call i8* @_Znwm(i64 %185) #21
  %187 = bitcast i8* %186 to %"struct.jxl::Spline::Point"*
  br label %188

188:                                              ; preds = %183, %175
  %189 = phi i64 [ %184, %183 ], [ 0, %175 ]
  %190 = phi i8* [ %186, %183 ], [ null, %175 ]
  %191 = phi %"struct.jxl::Spline::Point"* [ %187, %183 ], [ null, %175 ]
  %192 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %191, i64 %166
  %193 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %191, i64 %189
  %194 = ptrtoint %"struct.jxl::Spline::Point"* %193 to i64
  %195 = bitcast %"struct.jxl::Spline::Point"* %149 to i64*
  %196 = bitcast %"struct.jxl::Spline::Point"* %192 to i64*
  %197 = load i64, i64* %195, align 4
  store i64 %197, i64* %196, align 4
  %198 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %192, i64 1
  %199 = ptrtoint %"struct.jxl::Spline::Point"* %198 to i64
  %200 = ptrtoint %"struct.jxl::Spline::Point"* %191 to i64
  %201 = icmp sgt i64 %165, 0
  br i1 %201, label %202, label %204

202:                                              ; preds = %188
  %203 = inttoptr i64 %164 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %190, i8* align 4 %203, i64 %165, i1 false) #18
  br label %204

204:                                              ; preds = %202, %188
  store i64 %200, i64* %32, align 16
  store i64 %199, i64* %163, align 8
  store i64 %194, i64* %31, align 16
  %205 = icmp eq i64 %164, 0
  br i1 %205, label %209, label %206

206:                                              ; preds = %204
  %207 = inttoptr i64 %164 to i8*
  call void @_ZdlPv(i8* %207) #21
  %208 = load i64, i64* %163, align 8
  br label %209

209:                                              ; preds = %206, %204, %154
  %210 = phi i64 [ %159, %154 ], [ %199, %204 ], [ %208, %206 ]
  %211 = load i64, i64* %32, align 16
  %212 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  store i64 %211, i64* %212, align 8
  %213 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %214 = bitcast %"struct.jxl::Spline::Point"** %213 to i64*
  store i64 %210, i64* %214, align 8
  %215 = load i64, i64* %31, align 16
  %216 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %217 = bitcast %"struct.jxl::Spline::Point"** %216 to i64*
  store i64 %215, i64* %217, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #18
  br label %448

218:                                              ; preds = %137, %323
  %219 = phi %"struct.jxl::Spline::Point"* [ %136, %137 ], [ %331, %323 ]
  %220 = phi i64 [ 0, %137 ], [ %324, %323 ]
  %221 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %219, i64 %220
  %222 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %221, i64 1
  %223 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %27, align 8
  %224 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %28, align 16
  %225 = icmp eq %"struct.jxl::Spline::Point"* %223, %224
  %226 = ptrtoint %"struct.jxl::Spline::Point"* %224 to i64
  br i1 %225, label %233, label %227

227:                                              ; preds = %218
  %228 = bitcast %"struct.jxl::Spline::Point"* %222 to i64*
  %229 = bitcast %"struct.jxl::Spline::Point"* %223 to i64*
  %230 = load i64, i64* %228, align 4
  store i64 %230, i64* %229, align 4
  %231 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %223, i64 1
  %232 = ptrtoint %"struct.jxl::Spline::Point"* %231 to i64
  store i64 %232, i64* %138, align 8
  br label %279

233:                                              ; preds = %218
  %234 = ptrtoint %"struct.jxl::Spline::Point"* %223 to i64
  %235 = load i64, i64* %32, align 16
  %236 = sub i64 %234, %235
  %237 = ashr exact i64 %236, 3
  %238 = add nsw i64 %237, 1
  %239 = icmp ugt i64 %238, 2305843009213693951
  br i1 %239, label %240, label %242

240:                                              ; preds = %233
  %241 = bitcast %"class.std::__1::vector.1"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %241) #20
  unreachable

242:                                              ; preds = %233
  %243 = sub i64 %226, %235
  %244 = ashr exact i64 %243, 3
  %245 = icmp ult i64 %244, 1152921504606846975
  br i1 %245, label %246, label %254

246:                                              ; preds = %242
  %247 = ashr exact i64 %243, 2
  %248 = icmp ult i64 %247, %238
  %249 = select i1 %248, i64 %238, i64 %247
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %259, label %251

251:                                              ; preds = %246
  %252 = icmp ugt i64 %249, 2305843009213693951
  br i1 %252, label %253, label %254

253:                                              ; preds = %251
  call void @abort() #20
  unreachable

254:                                              ; preds = %251, %242
  %255 = phi i64 [ %249, %251 ], [ 2305843009213693951, %242 ]
  %256 = shl i64 %255, 3
  %257 = call i8* @_Znwm(i64 %256) #21
  %258 = bitcast i8* %257 to %"struct.jxl::Spline::Point"*
  br label %259

259:                                              ; preds = %254, %246
  %260 = phi i64 [ %255, %254 ], [ 0, %246 ]
  %261 = phi i8* [ %257, %254 ], [ null, %246 ]
  %262 = phi %"struct.jxl::Spline::Point"* [ %258, %254 ], [ null, %246 ]
  %263 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %262, i64 %237
  %264 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %262, i64 %260
  %265 = ptrtoint %"struct.jxl::Spline::Point"* %264 to i64
  %266 = bitcast %"struct.jxl::Spline::Point"* %222 to i64*
  %267 = bitcast %"struct.jxl::Spline::Point"* %263 to i64*
  %268 = load i64, i64* %266, align 4
  store i64 %268, i64* %267, align 4
  %269 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %263, i64 1
  %270 = ptrtoint %"struct.jxl::Spline::Point"* %269 to i64
  %271 = ptrtoint %"struct.jxl::Spline::Point"* %262 to i64
  %272 = icmp sgt i64 %236, 0
  br i1 %272, label %273, label %275

273:                                              ; preds = %259
  %274 = inttoptr i64 %235 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %261, i8* align 4 %274, i64 %236, i1 false) #18
  br label %275

275:                                              ; preds = %273, %259
  store i64 %271, i64* %32, align 16
  store i64 %270, i64* %138, align 8
  store i64 %265, i64* %31, align 16
  %276 = icmp eq i64 %235, 0
  br i1 %276, label %279, label %277

277:                                              ; preds = %275
  %278 = inttoptr i64 %235 to i8*
  call void @_ZdlPv(i8* %278) #21
  br label %279

279:                                              ; preds = %227, %275, %277
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %139) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %139, i8 0, i64 16, i1 false)
  %280 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %221, i64 1, i32 0
  %281 = load float, float* %280, align 4
  %282 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %221, i64 0, i32 0
  %283 = load float, float* %282, align 4
  %284 = fsub float %281, %283
  %285 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %221, i64 1, i32 1
  %286 = load float, float* %285, align 4
  %287 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %219, i64 %220, i32 1
  %288 = load float, float* %287, align 4
  %289 = fsub float %286, %288
  %290 = call float @hypotf(float %284, float %289) #18
  %291 = call float @sqrtf(float %290) #18
  %292 = fadd float %291, 0.000000e+00
  store float %292, float* %140, align 4
  %293 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %221, i64 2, i32 0
  %294 = load float, float* %293, align 4
  %295 = load float, float* %280, align 4
  %296 = fsub float %294, %295
  %297 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %221, i64 2, i32 1
  %298 = load float, float* %297, align 4
  %299 = load float, float* %285, align 4
  %300 = fsub float %298, %299
  %301 = call float @hypotf(float %296, float %300) #18
  %302 = call float @sqrtf(float %301) #18
  %303 = fadd float %302, %292
  store float %303, float* %141, align 8
  %304 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %221, i64 3, i32 0
  %305 = load float, float* %304, align 4
  %306 = load float, float* %293, align 4
  %307 = fsub float %305, %306
  %308 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %221, i64 3, i32 1
  %309 = load float, float* %308, align 4
  %310 = load float, float* %297, align 4
  %311 = fsub float %309, %310
  %312 = call float @hypotf(float %307, float %311) #18
  %313 = call float @sqrtf(float %312) #18
  %314 = fadd float %313, %303
  store float %314, float* %142, align 4
  %315 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %221, i64 2
  %316 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %221, i64 3
  %317 = bitcast %"struct.jxl::Spline::Point"* %222 to <2 x float>*
  %318 = bitcast %"struct.jxl::Spline::Point"* %221 to <2 x float>*
  %319 = bitcast %"struct.jxl::Spline::Point"* %315 to <2 x float>*
  %320 = bitcast %"struct.jxl::Spline::Point"* %222 to <2 x float>*
  %321 = bitcast %"struct.jxl::Spline::Point"* %316 to <2 x float>*
  %322 = bitcast %"struct.jxl::Spline::Point"* %315 to <2 x float>*
  br label %332

323:                                              ; preds = %445
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %139) #18
  %324 = add nuw i64 %220, 1
  %325 = load i64, i64* %7, align 8
  %326 = load i64, i64* %9, align 8
  %327 = sub i64 %325, %326
  %328 = ashr exact i64 %327, 3
  %329 = add nsw i64 %328, -3
  %330 = icmp ult i64 %324, %329
  %331 = inttoptr i64 %326 to %"struct.jxl::Spline::Point"*
  br i1 %330, label %218, label %143

332:                                              ; preds = %445, %279
  %333 = phi float [ %377, %445 ], [ %314, %279 ]
  %334 = phi float [ %385, %445 ], [ %303, %279 ]
  %335 = phi float [ %375, %445 ], [ %292, %279 ]
  %336 = phi i32 [ %446, %445 ], [ 1, %279 ]
  %337 = sitofp i32 %336 to float
  %338 = fmul float %337, 6.250000e-02
  %339 = fsub float %334, %335
  %340 = fmul float %338, %339
  %341 = fadd float %335, %340
  %342 = fdiv float %341, %335
  %343 = load <2 x float>, <2 x float>* %317, align 4
  %344 = load <2 x float>, <2 x float>* %318, align 4
  %345 = fsub <2 x float> %343, %344
  %346 = insertelement <2 x float> undef, float %342, i32 0
  %347 = shufflevector <2 x float> %346, <2 x float> undef, <2 x i32> zeroinitializer
  %348 = fmul <2 x float> %347, %345
  %349 = fadd <2 x float> %344, %348
  %350 = fsub float %341, %335
  %351 = fdiv float %350, %339
  %352 = load <2 x float>, <2 x float>* %319, align 4
  %353 = load <2 x float>, <2 x float>* %320, align 4
  %354 = fsub <2 x float> %352, %353
  %355 = insertelement <2 x float> undef, float %351, i32 0
  %356 = shufflevector <2 x float> %355, <2 x float> undef, <2 x i32> zeroinitializer
  %357 = fmul <2 x float> %356, %354
  %358 = fadd <2 x float> %353, %357
  %359 = fsub float %341, %334
  %360 = fsub float %333, %334
  %361 = fdiv float %359, %360
  %362 = load <2 x float>, <2 x float>* %321, align 4
  %363 = load <2 x float>, <2 x float>* %322, align 4
  %364 = fsub <2 x float> %362, %363
  %365 = insertelement <2 x float> undef, float %361, i32 0
  %366 = shufflevector <2 x float> %365, <2 x float> undef, <2 x i32> zeroinitializer
  %367 = fmul <2 x float> %366, %364
  %368 = fadd <2 x float> %363, %367
  %369 = fdiv float %341, %334
  %370 = fsub <2 x float> %358, %349
  %371 = insertelement <2 x float> undef, float %369, i32 0
  %372 = shufflevector <2 x float> %371, <2 x float> undef, <2 x i32> zeroinitializer
  %373 = fmul <2 x float> %372, %370
  %374 = fadd <2 x float> %373, %349
  %375 = load float, float* %140, align 4
  %376 = fsub float %341, %375
  %377 = load float, float* %142, align 4
  %378 = fsub float %377, %375
  %379 = fdiv float %376, %378
  %380 = fsub <2 x float> %368, %358
  %381 = insertelement <2 x float> undef, float %379, i32 0
  %382 = shufflevector <2 x float> %381, <2 x float> undef, <2 x i32> zeroinitializer
  %383 = fmul <2 x float> %382, %380
  %384 = fadd <2 x float> %383, %358
  %385 = load float, float* %141, align 8
  %386 = fsub float %385, %335
  %387 = fdiv float %350, %386
  %388 = fsub <2 x float> %384, %374
  %389 = insertelement <2 x float> undef, float %387, i32 0
  %390 = shufflevector <2 x float> %389, <2 x float> undef, <2 x i32> zeroinitializer
  %391 = fmul <2 x float> %390, %388
  %392 = fadd <2 x float> %391, %374
  %393 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %27, align 8
  %394 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %28, align 16
  %395 = icmp ult %"struct.jxl::Spline::Point"* %393, %394
  %396 = ptrtoint %"struct.jxl::Spline::Point"* %394 to i64
  br i1 %395, label %397, label %401

397:                                              ; preds = %332
  %398 = bitcast %"struct.jxl::Spline::Point"* %393 to <2 x float>*
  store <2 x float> %392, <2 x float>* %398, align 4
  %399 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %393, i64 1
  %400 = ptrtoint %"struct.jxl::Spline::Point"* %399 to i64
  store i64 %400, i64* %138, align 8
  br label %445

401:                                              ; preds = %332
  %402 = ptrtoint %"struct.jxl::Spline::Point"* %393 to i64
  %403 = load i64, i64* %32, align 16
  %404 = sub i64 %402, %403
  %405 = ashr exact i64 %404, 3
  %406 = add nsw i64 %405, 1
  %407 = icmp ugt i64 %406, 2305843009213693951
  br i1 %407, label %408, label %410

408:                                              ; preds = %401
  %409 = bitcast %"class.std::__1::vector.1"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %409) #20
  unreachable

410:                                              ; preds = %401
  %411 = sub i64 %396, %403
  %412 = ashr exact i64 %411, 3
  %413 = icmp ult i64 %412, 1152921504606846975
  br i1 %413, label %414, label %422

414:                                              ; preds = %410
  %415 = ashr exact i64 %411, 2
  %416 = icmp ult i64 %415, %406
  %417 = select i1 %416, i64 %406, i64 %415
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %427, label %419

419:                                              ; preds = %414
  %420 = icmp ugt i64 %417, 2305843009213693951
  br i1 %420, label %421, label %422

421:                                              ; preds = %419
  call void @abort() #20
  unreachable

422:                                              ; preds = %419, %410
  %423 = phi i64 [ %417, %419 ], [ 2305843009213693951, %410 ]
  %424 = shl i64 %423, 3
  %425 = call i8* @_Znwm(i64 %424) #21
  %426 = bitcast i8* %425 to %"struct.jxl::Spline::Point"*
  br label %427

427:                                              ; preds = %422, %414
  %428 = phi i64 [ %423, %422 ], [ 0, %414 ]
  %429 = phi i8* [ %425, %422 ], [ null, %414 ]
  %430 = phi %"struct.jxl::Spline::Point"* [ %426, %422 ], [ null, %414 ]
  %431 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %430, i64 %405
  %432 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %430, i64 %428
  %433 = ptrtoint %"struct.jxl::Spline::Point"* %432 to i64
  %434 = bitcast %"struct.jxl::Spline::Point"* %431 to <2 x float>*
  store <2 x float> %392, <2 x float>* %434, align 4
  %435 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %431, i64 1
  %436 = ptrtoint %"struct.jxl::Spline::Point"* %435 to i64
  %437 = ptrtoint %"struct.jxl::Spline::Point"* %430 to i64
  %438 = icmp sgt i64 %404, 0
  br i1 %438, label %439, label %441

439:                                              ; preds = %427
  %440 = inttoptr i64 %403 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %429, i8* align 4 %440, i64 %404, i1 false) #18
  br label %441

441:                                              ; preds = %439, %427
  store i64 %437, i64* %32, align 16
  store i64 %436, i64* %138, align 8
  store i64 %433, i64* %31, align 16
  %442 = icmp eq i64 %403, 0
  br i1 %442, label %445, label %443

443:                                              ; preds = %441
  %444 = inttoptr i64 %403 to i8*
  call void @_ZdlPv(i8* %444) #21
  br label %445

445:                                              ; preds = %397, %441, %443
  %446 = add nuw nsw i32 %336, 1
  %447 = icmp eq i32 %446, 16
  br i1 %447, label %323, label %332

448:                                              ; preds = %209, %15
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.jxl::Spline::Point"* @_ZNSt3__16vectorIN3jxl6Spline5PointENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.1"*, %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.jxl::Spline::Point"* %1 to i64
  %5 = alloca %"struct.std::__1::__split_buffer", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %8 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %9, align 8
  %11 = icmp ult %"struct.jxl::Spline::Point"* %8, %10
  %12 = ptrtoint %"struct.jxl::Spline::Point"* %8 to i64
  %13 = ptrtoint %"struct.jxl::Spline::Point"* %10 to i64
  br i1 %11, label %14, label %165

14:                                               ; preds = %3
  %15 = icmp eq %"struct.jxl::Spline::Point"* %8, %1
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = bitcast %"struct.jxl::Spline::Point"* %2 to i64*
  %18 = bitcast %"struct.jxl::Spline::Point"* %1 to i64*
  %19 = load i64, i64* %17, align 4
  store i64 %19, i64* %18, align 4
  %20 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %1, i64 1
  %21 = ptrtoint %"struct.jxl::Spline::Point"* %20 to i64
  %22 = bitcast %"struct.jxl::Spline::Point"** %7 to i64*
  store i64 %21, i64* %22, align 8
  br label %321

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %1, i64 1
  %25 = ptrtoint %"struct.jxl::Spline::Point"* %24 to i64
  %26 = sub i64 %12, %25
  %27 = ashr exact i64 %26, 3
  %28 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %1, i64 %27
  %29 = bitcast %"struct.jxl::Spline::Point"** %7 to i64*
  %30 = icmp ult %"struct.jxl::Spline::Point"* %28, %8
  br i1 %30, label %31, label %144

31:                                               ; preds = %23
  %32 = sub nsw i64 0, %27
  %33 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %8, i64 %32, i32 0
  %34 = bitcast float* %33 to i8*
  %35 = xor i64 %4, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %44

41:                                               ; preds = %139, %44, %31
  %42 = phi %"struct.jxl::Spline::Point"* [ %8, %44 ], [ %8, %31 ], [ %62, %139 ]
  %43 = phi %"struct.jxl::Spline::Point"* [ %28, %44 ], [ %28, %31 ], [ %63, %139 ]
  br label %152

44:                                               ; preds = %31
  %45 = sub nsw i64 0, %27
  %46 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %8, i64 %45, i32 0
  %47 = bitcast float* %46 to i8*
  %48 = xor i64 %4, -1
  %49 = getelementptr i8, i8* %47, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %8, i64 %52
  %54 = add nsw i64 %27, %51
  %55 = add nsw i64 %54, 1
  %56 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %1, i64 %55
  %57 = icmp ult %"struct.jxl::Spline::Point"* %8, %56
  %58 = icmp ult %"struct.jxl::Spline::Point"* %28, %53
  %59 = and i1 %57, %58
  br i1 %59, label %41, label %60

60:                                               ; preds = %44
  %61 = and i64 %39, 4611686018427387900
  %62 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %8, i64 %61
  %63 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %28, i64 %61
  %64 = add nsw i64 %61, -4
  %65 = lshr exact i64 %64, 2
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 12
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %8, i64 %72
  %75 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %28, i64 %72
  %76 = bitcast %"struct.jxl::Spline::Point"* %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 4, !alias.scope !88
  %78 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %75, i64 2
  %79 = bitcast %"struct.jxl::Spline::Point"* %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 4, !alias.scope !88
  %81 = bitcast %"struct.jxl::Spline::Point"* %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 4, !alias.scope !91, !noalias !88
  %82 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %74, i64 2
  %83 = bitcast %"struct.jxl::Spline::Point"* %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 4, !alias.scope !91, !noalias !88
  %84 = or i64 %72, 4
  %85 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %8, i64 %84
  %86 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %28, i64 %84
  %87 = bitcast %"struct.jxl::Spline::Point"* %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 4, !alias.scope !88
  %89 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %86, i64 2
  %90 = bitcast %"struct.jxl::Spline::Point"* %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 4, !alias.scope !88
  %92 = bitcast %"struct.jxl::Spline::Point"* %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 4, !alias.scope !91, !noalias !88
  %93 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %85, i64 2
  %94 = bitcast %"struct.jxl::Spline::Point"* %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 4, !alias.scope !91, !noalias !88
  %95 = or i64 %72, 8
  %96 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %8, i64 %95
  %97 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %28, i64 %95
  %98 = bitcast %"struct.jxl::Spline::Point"* %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 4, !alias.scope !88
  %100 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %97, i64 2
  %101 = bitcast %"struct.jxl::Spline::Point"* %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 4, !alias.scope !88
  %103 = bitcast %"struct.jxl::Spline::Point"* %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 4, !alias.scope !91, !noalias !88
  %104 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %96, i64 2
  %105 = bitcast %"struct.jxl::Spline::Point"* %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 4, !alias.scope !91, !noalias !88
  %106 = or i64 %72, 12
  %107 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %8, i64 %106
  %108 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %28, i64 %106
  %109 = bitcast %"struct.jxl::Spline::Point"* %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 4, !alias.scope !88
  %111 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %108, i64 2
  %112 = bitcast %"struct.jxl::Spline::Point"* %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 4, !alias.scope !88
  %114 = bitcast %"struct.jxl::Spline::Point"* %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 4, !alias.scope !91, !noalias !88
  %115 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %107, i64 2
  %116 = bitcast %"struct.jxl::Spline::Point"* %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 4, !alias.scope !91, !noalias !88
  %117 = add i64 %72, 16
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !93

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %8, i64 %124
  %127 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %28, i64 %124
  %128 = bitcast %"struct.jxl::Spline::Point"* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 4, !alias.scope !88
  %130 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %127, i64 2
  %131 = bitcast %"struct.jxl::Spline::Point"* %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 4, !alias.scope !88
  %133 = bitcast %"struct.jxl::Spline::Point"* %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 4, !alias.scope !91, !noalias !88
  %134 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %126, i64 2
  %135 = bitcast %"struct.jxl::Spline::Point"* %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 4, !alias.scope !91, !noalias !88
  %136 = add i64 %124, 4
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !94

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %61
  br i1 %140, label %141, label %41

141:                                              ; preds = %152, %139
  %142 = phi %"struct.jxl::Spline::Point"* [ %62, %139 ], [ %159, %152 ]
  %143 = ptrtoint %"struct.jxl::Spline::Point"* %142 to i64
  br label %144

144:                                              ; preds = %141, %23
  %145 = phi i64 [ %143, %141 ], [ %12, %23 ]
  store i64 %145, i64* %29, align 8
  %146 = icmp eq i64 %26, 0
  br i1 %146, label %161, label %147

147:                                              ; preds = %144
  %148 = sub nsw i64 0, %27
  %149 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %8, i64 %148
  %150 = bitcast %"struct.jxl::Spline::Point"* %149 to i8*
  %151 = bitcast %"struct.jxl::Spline::Point"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %150, i8* align 4 %151, i64 %26, i1 false) #18
  br label %161

152:                                              ; preds = %41, %152
  %153 = phi %"struct.jxl::Spline::Point"* [ %159, %152 ], [ %42, %41 ]
  %154 = phi %"struct.jxl::Spline::Point"* [ %158, %152 ], [ %43, %41 ]
  %155 = bitcast %"struct.jxl::Spline::Point"* %154 to i64*
  %156 = bitcast %"struct.jxl::Spline::Point"* %153 to i64*
  %157 = load i64, i64* %155, align 4
  store i64 %157, i64* %156, align 4
  %158 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %154, i64 1
  %159 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %153, i64 1
  %160 = icmp ult %"struct.jxl::Spline::Point"* %158, %8
  br i1 %160, label %152, label %141, !llvm.loop !96

161:                                              ; preds = %144, %147
  %162 = bitcast %"struct.jxl::Spline::Point"* %2 to i64*
  %163 = bitcast %"struct.jxl::Spline::Point"* %1 to i64*
  %164 = load i64, i64* %162, align 4
  store i64 %164, i64* %163, align 4
  br label %321

165:                                              ; preds = %3
  %166 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2
  %167 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %167) #18
  %168 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 0
  %169 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 1
  %170 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 2
  %171 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 0, i32 0
  %172 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 1, i32 0
  %173 = bitcast %"struct.jxl::Spline::Point"** %7 to i64*
  %174 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %175 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %175, i8 -86, i64 40, i1 false)
  %176 = load i64, i64* %174, align 8
  %177 = sub i64 %12, %176
  %178 = ashr exact i64 %177, 3
  %179 = add nsw i64 %178, 1
  %180 = icmp ugt i64 %179, 2305843009213693951
  br i1 %180, label %181, label %183

181:                                              ; preds = %165
  %182 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %182) #20
  unreachable

183:                                              ; preds = %165
  %184 = bitcast %"struct.jxl::Spline::Point"** %9 to i64*
  %185 = sub i64 %13, %176
  %186 = ashr exact i64 %185, 3
  %187 = icmp ult i64 %186, 1152921504606846975
  br i1 %187, label %192, label %188

188:                                              ; preds = %183
  %189 = sub i64 %4, %176
  %190 = ashr exact i64 %189, 3
  store %"struct.jxl::Spline::Point"* null, %"struct.jxl::Spline::Point"** %171, align 8
  %191 = bitcast %"class.std::__1::allocator.6"** %172 to %"class.std::__1::__compressed_pair.3"**
  store %"class.std::__1::__compressed_pair.3"* %166, %"class.std::__1::__compressed_pair.3"** %191, align 8
  br label %203

192:                                              ; preds = %183
  %193 = ashr exact i64 %185, 2
  %194 = icmp ult i64 %193, %179
  %195 = select i1 %194, i64 %179, i64 %193
  %196 = sub i64 %4, %176
  %197 = ashr exact i64 %196, 3
  store %"struct.jxl::Spline::Point"* null, %"struct.jxl::Spline::Point"** %171, align 8
  %198 = bitcast %"class.std::__1::allocator.6"** %172 to %"class.std::__1::__compressed_pair.3"**
  store %"class.std::__1::__compressed_pair.3"* %166, %"class.std::__1::__compressed_pair.3"** %198, align 8
  %199 = icmp eq i64 %195, 0
  br i1 %199, label %209, label %200

200:                                              ; preds = %192
  %201 = icmp ugt i64 %195, 2305843009213693951
  br i1 %201, label %202, label %203

202:                                              ; preds = %200
  tail call void @abort() #20
  unreachable

203:                                              ; preds = %188, %200
  %204 = phi i64 [ 2305843009213693951, %188 ], [ %195, %200 ]
  %205 = phi i64 [ %190, %188 ], [ %197, %200 ]
  %206 = shl i64 %204, 3
  %207 = tail call i8* @_Znwm(i64 %206) #21
  %208 = bitcast i8* %207 to %"struct.jxl::Spline::Point"*
  br label %209

209:                                              ; preds = %192, %203
  %210 = phi i64 [ %205, %203 ], [ %197, %192 ]
  %211 = phi i64 [ %204, %203 ], [ 0, %192 ]
  %212 = phi %"struct.jxl::Spline::Point"* [ %208, %203 ], [ null, %192 ]
  store %"struct.jxl::Spline::Point"* %212, %"struct.jxl::Spline::Point"** %168, align 8
  %213 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %212, i64 %210
  store %"struct.jxl::Spline::Point"* %213, %"struct.jxl::Spline::Point"** %170, align 8
  store %"struct.jxl::Spline::Point"* %213, %"struct.jxl::Spline::Point"** %169, align 8
  %214 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %212, i64 %211
  store %"struct.jxl::Spline::Point"* %214, %"struct.jxl::Spline::Point"** %171, align 8
  call void @_ZNSt3__114__split_bufferIN3jxl6Spline5PointERNS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"* nonnull %5, %"struct.jxl::Spline::Point"* dereferenceable(8) %2)
  %215 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %169, align 8
  %216 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %6, align 8
  %217 = ptrtoint %"struct.jxl::Spline::Point"* %216 to i64
  %218 = sub i64 %4, %217
  %219 = ashr exact i64 %218, 3
  %220 = sub nsw i64 0, %219
  %221 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %215, i64 %220
  store %"struct.jxl::Spline::Point"* %221, %"struct.jxl::Spline::Point"** %169, align 8
  %222 = icmp sgt i64 %218, 0
  br i1 %222, label %223, label %226

223:                                              ; preds = %209
  %224 = bitcast %"struct.jxl::Spline::Point"* %221 to i8*
  %225 = bitcast %"struct.jxl::Spline::Point"* %216 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %224, i8* align 4 %225, i64 %218, i1 false) #18
  br label %226

226:                                              ; preds = %223, %209
  %227 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %7, align 8
  %228 = icmp eq %"struct.jxl::Spline::Point"* %227, %1
  br i1 %228, label %229, label %233

229:                                              ; preds = %226
  %230 = ptrtoint %"struct.jxl::Spline::Point"* %227 to i64
  %231 = bitcast %"struct.jxl::Spline::Point"** %170 to i64*
  %232 = load i64, i64* %231, align 8
  br label %295

233:                                              ; preds = %226
  %234 = bitcast %"struct.jxl::Spline::Point"** %170 to i64**
  %235 = load i64*, i64** %234, align 8
  %236 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %227, i64 -1, i32 0
  %237 = ptrtoint float* %236 to i64
  %238 = sub i64 %237, %4
  %239 = lshr i64 %238, 3
  %240 = add nuw nsw i64 %239, 1
  %241 = and i64 %240, 3
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %257, label %243

243:                                              ; preds = %233, %243
  %244 = phi i64* [ %252, %243 ], [ %235, %233 ]
  %245 = phi %"struct.jxl::Spline::Point"* [ %249, %243 ], [ %1, %233 ]
  %246 = phi i64 [ %253, %243 ], [ %241, %233 ]
  %247 = bitcast %"struct.jxl::Spline::Point"* %245 to i64*
  %248 = load i64, i64* %247, align 4
  store i64 %248, i64* %244, align 4
  %249 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %245, i64 1
  %250 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %170, align 8
  %251 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %250, i64 1
  store %"struct.jxl::Spline::Point"* %251, %"struct.jxl::Spline::Point"** %170, align 8
  %252 = bitcast %"struct.jxl::Spline::Point"* %251 to i64*
  %253 = add i64 %246, -1
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %243, !llvm.loop !97

255:                                              ; preds = %243
  %256 = bitcast %"struct.jxl::Spline::Point"* %251 to i64*
  br label %257

257:                                              ; preds = %233, %255
  %258 = phi %"struct.jxl::Spline::Point"* [ undef, %233 ], [ %251, %255 ]
  %259 = phi i64* [ %235, %233 ], [ %256, %255 ]
  %260 = phi %"struct.jxl::Spline::Point"* [ %1, %233 ], [ %249, %255 ]
  %261 = icmp ult i64 %238, 24
  br i1 %261, label %290, label %262

262:                                              ; preds = %257, %262
  %263 = phi i64* [ %289, %262 ], [ %259, %257 ]
  %264 = phi %"struct.jxl::Spline::Point"* [ %285, %262 ], [ %260, %257 ]
  %265 = bitcast %"struct.jxl::Spline::Point"* %264 to i64*
  %266 = load i64, i64* %265, align 4
  store i64 %266, i64* %263, align 4
  %267 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %264, i64 1
  %268 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %170, align 8
  %269 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %268, i64 1
  store %"struct.jxl::Spline::Point"* %269, %"struct.jxl::Spline::Point"** %170, align 8
  %270 = bitcast %"struct.jxl::Spline::Point"* %269 to i64*
  %271 = bitcast %"struct.jxl::Spline::Point"* %267 to i64*
  %272 = load i64, i64* %271, align 4
  store i64 %272, i64* %270, align 4
  %273 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %264, i64 2
  %274 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %170, align 8
  %275 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %274, i64 1
  store %"struct.jxl::Spline::Point"* %275, %"struct.jxl::Spline::Point"** %170, align 8
  %276 = bitcast %"struct.jxl::Spline::Point"* %275 to i64*
  %277 = bitcast %"struct.jxl::Spline::Point"* %273 to i64*
  %278 = load i64, i64* %277, align 4
  store i64 %278, i64* %276, align 4
  %279 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %264, i64 3
  %280 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %170, align 8
  %281 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %280, i64 1
  store %"struct.jxl::Spline::Point"* %281, %"struct.jxl::Spline::Point"** %170, align 8
  %282 = bitcast %"struct.jxl::Spline::Point"* %281 to i64*
  %283 = bitcast %"struct.jxl::Spline::Point"* %279 to i64*
  %284 = load i64, i64* %283, align 4
  store i64 %284, i64* %282, align 4
  %285 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %264, i64 4
  %286 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %170, align 8
  %287 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %286, i64 1
  store %"struct.jxl::Spline::Point"* %287, %"struct.jxl::Spline::Point"** %170, align 8
  %288 = icmp eq %"struct.jxl::Spline::Point"* %285, %227
  %289 = bitcast %"struct.jxl::Spline::Point"* %287 to i64*
  br i1 %288, label %290, label %262

290:                                              ; preds = %262, %257
  %291 = phi %"struct.jxl::Spline::Point"* [ %258, %257 ], [ %287, %262 ]
  %292 = ptrtoint %"struct.jxl::Spline::Point"* %291 to i64
  %293 = load i64, i64* %173, align 8
  %294 = bitcast %"struct.jxl::Spline::Point"** %170 to i64*
  br label %295

295:                                              ; preds = %229, %290
  %296 = phi i64* [ %231, %229 ], [ %294, %290 ]
  %297 = phi i64 [ %232, %229 ], [ %292, %290 ]
  %298 = phi i64 [ %230, %229 ], [ %293, %290 ]
  %299 = load i64, i64* %174, align 8
  %300 = bitcast %"struct.jxl::Spline::Point"** %169 to i64*
  %301 = load i64, i64* %300, align 8
  store i64 %301, i64* %174, align 8
  store i64 %299, i64* %300, align 8
  store i64 %297, i64* %173, align 8
  store i64 %298, i64* %296, align 8
  %302 = load i64, i64* %184, align 8
  %303 = bitcast %"struct.jxl::Spline::Point"** %171 to i64*
  %304 = load i64, i64* %303, align 8
  store i64 %304, i64* %184, align 8
  store i64 %302, i64* %303, align 8
  %305 = bitcast %"struct.std::__1::__split_buffer"* %5 to i64*
  store i64 %299, i64* %305, align 8
  %306 = inttoptr i64 %299 to %"struct.jxl::Spline::Point"*
  %307 = inttoptr i64 %298 to %"struct.jxl::Spline::Point"*
  %308 = icmp eq %"struct.jxl::Spline::Point"* %307, %306
  br i1 %308, label %316, label %309

309:                                              ; preds = %295
  %310 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %307, i64 -1, i32 0
  %311 = ptrtoint float* %310 to i64
  %312 = sub i64 %311, %299
  %313 = lshr i64 %312, 3
  %314 = xor i64 %313, -1
  %315 = getelementptr %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %307, i64 %314
  store %"struct.jxl::Spline::Point"* %315, %"struct.jxl::Spline::Point"** %170, align 8
  br label %316

316:                                              ; preds = %309, %295
  %317 = icmp eq i64 %299, 0
  br i1 %317, label %320, label %318

318:                                              ; preds = %316
  %319 = inttoptr i64 %299 to i8*
  call void @_ZdlPv(i8* %319) #21
  br label %320

320:                                              ; preds = %316, %318
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %167) #18
  br label %321

321:                                              ; preds = %16, %161, %320
  %322 = phi %"struct.jxl::Spline::Point"* [ %1, %16 ], [ %1, %161 ], [ %215, %320 ]
  ret %"struct.jxl::Spline::Point"* %322
}

; Function Attrs: nounwind
declare float @hypotf(float, float) local_unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIN3jxl6Spline5PointERNS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"*, %"struct.jxl::Spline::Point"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %5, align 8
  %7 = icmp eq %"struct.jxl::Spline::Point"* %4, %6
  %8 = ptrtoint %"struct.jxl::Spline::Point"* %6 to i64
  %9 = bitcast %"struct.jxl::Spline::Point"* %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %13, align 8
  %15 = icmp ugt %"struct.jxl::Spline::Point"* %12, %14
  %16 = ptrtoint %"struct.jxl::Spline::Point"* %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"struct.jxl::Spline::Point"* %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %12, i64 %22
  %24 = ptrtoint %"struct.jxl::Spline::Point"* %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"struct.jxl::Spline::Point"* %23 to i8*
  %30 = bitcast %"struct.jxl::Spline::Point"* %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 %30, i64 %25, i1 false) #18
  %31 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"struct.jxl::Spline::Point"* [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %23, i64 %26
  store %"struct.jxl::Spline::Point"* %34, %"struct.jxl::Spline::Point"** %3, align 8
  %35 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %33, i64 %22
  store %"struct.jxl::Spline::Point"* %35, %"struct.jxl::Spline::Point"** %11, align 8
  %36 = bitcast %"struct.jxl::Spline::Point"* %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"struct.jxl::Spline::Point"** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #20
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #21
  %50 = bitcast i8* %49 to %"struct.jxl::Spline::Point"*
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %50, i64 %47
  %53 = ptrtoint %"struct.jxl::Spline::Point"* %52 to i64
  %54 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %50, i64 %43
  %55 = ptrtoint %"struct.jxl::Spline::Point"* %54 to i64
  %56 = ptrtoint %"struct.jxl::Spline::Point"* %12 to i64
  %57 = ptrtoint %"struct.jxl::Spline::Point"* %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"struct.jxl::Spline::Point"* [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"struct.jxl::Spline::Point"* [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"struct.jxl::Spline::Point"* %71 to i64*
  %74 = inttoptr i64 %70 to i64*
  %75 = load i64, i64* %73, align 4
  store i64 %75, i64* %74, align 4
  %76 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %69, i64 1
  %77 = ptrtoint %"struct.jxl::Spline::Point"* %76 to i64
  %78 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !98

81:                                               ; preds = %68
  %82 = ptrtoint %"struct.jxl::Spline::Point"* %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"struct.jxl::Spline::Point"* [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"struct.jxl::Spline::Point"* [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"struct.jxl::Spline::Point"* [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"struct.jxl::Spline::Point"* [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"struct.jxl::Spline::Point"* %91 to i64*
  %93 = inttoptr i64 %90 to i64*
  %94 = load i64, i64* %92, align 4
  store i64 %94, i64* %93, align 4
  %95 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %89, i64 1
  %96 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %91, i64 1
  %97 = bitcast %"struct.jxl::Spline::Point"* %96 to i64*
  %98 = bitcast %"struct.jxl::Spline::Point"* %95 to i64*
  %99 = load i64, i64* %97, align 4
  store i64 %99, i64* %98, align 4
  %100 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %89, i64 2
  %101 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %91, i64 2
  %102 = bitcast %"struct.jxl::Spline::Point"* %101 to i64*
  %103 = bitcast %"struct.jxl::Spline::Point"* %100 to i64*
  %104 = load i64, i64* %102, align 4
  store i64 %104, i64* %103, align 4
  %105 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %89, i64 3
  %106 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %91, i64 3
  %107 = bitcast %"struct.jxl::Spline::Point"* %106 to i64*
  %108 = bitcast %"struct.jxl::Spline::Point"* %105 to i64*
  %109 = load i64, i64* %107, align 4
  store i64 %109, i64* %108, align 4
  %110 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %89, i64 4
  %111 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %91, i64 4
  %112 = bitcast %"struct.jxl::Spline::Point"* %111 to i64*
  %113 = bitcast %"struct.jxl::Spline::Point"* %110 to i64*
  %114 = load i64, i64* %112, align 4
  store i64 %114, i64* %113, align 4
  %115 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %89, i64 5
  %116 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %91, i64 5
  %117 = bitcast %"struct.jxl::Spline::Point"* %116 to i64*
  %118 = bitcast %"struct.jxl::Spline::Point"* %115 to i64*
  %119 = load i64, i64* %117, align 4
  store i64 %119, i64* %118, align 4
  %120 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %89, i64 6
  %121 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %91, i64 6
  %122 = bitcast %"struct.jxl::Spline::Point"* %121 to i64*
  %123 = bitcast %"struct.jxl::Spline::Point"* %120 to i64*
  %124 = load i64, i64* %122, align 4
  store i64 %124, i64* %123, align 4
  %125 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %89, i64 7
  %126 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %91, i64 7
  %127 = bitcast %"struct.jxl::Spline::Point"* %126 to i64*
  %128 = bitcast %"struct.jxl::Spline::Point"* %125 to i64*
  %129 = load i64, i64* %127, align 4
  store i64 %129, i64* %128, align 4
  %130 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %89, i64 8
  %131 = ptrtoint %"struct.jxl::Spline::Point"* %130 to i64
  %132 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %91, i64 8
  %133 = icmp eq %"struct.jxl::Spline::Point"* %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"struct.jxl::Spline::Point"* %60 to i64
  %136 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"struct.jxl::Spline::Point"* [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"struct.jxl::Spline::Point"** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"struct.jxl::Spline::Point"** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"struct.jxl::Spline::Point"* %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"struct.jxl::Spline::Point"* %138 to i8*
  tail call void @_ZdlPv(i8* %145) #21
  %146 = bitcast %"struct.jxl::Spline::Point"** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"struct.jxl::Spline::Point"* %1 to i64*
  %151 = load i64, i64* %150, align 4
  store i64 %151, i64* %149, align 4
  %152 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %3, align 8
  %153 = getelementptr inbounds %"struct.jxl::Spline::Point", %"struct.jxl::Spline::Point"* %152, i64 1
  store %"struct.jxl::Spline::Point"* %153, %"struct.jxl::Spline::Point"** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJPN3jxl6Image3IfEERKNS1_4RectES7_RKNS1_6SplineEbRKNSt3__16vectorINSB_4pairINS8_5PointEfEENSB_9allocatorISF_EEEEfEE13ChooseAndCallIXadL_ZNS1_L34DrawFromPointsHighwayDispatchTableEEEEEvS4_S7_S7_SA_bSK_f(%"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::Spline"* dereferenceable(536), i1 zeroext, %"class.std::__1::vector.63"* dereferenceable(24), float) #0 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #18
  %8 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %9 = and i32 %8, 2225
  %10 = tail call i32 @llvm.cttz.i32(i32 %9, i1 true) #18, !range !56
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)*]* @_ZN3jxlL34DrawFromPointsHighwayDispatchTableE, i64 0, i64 %11
  %13 = load void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)*, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"struct.jxl::Spline"*, i1, %"class.std::__1::vector.63"*, float)** %12, align 8
  tail call void %13(%"class.jxl::Image3"* %0, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::Rect"* dereferenceable(32) %2, %"struct.jxl::Spline"* dereferenceable(536) %3, i1 zeroext %4, %"class.std::__1::vector.63"* dereferenceable(24) %5, float %6) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl6N_AVX312_GLOBAL__N_114DrawFromPointsEPNS_6Image3IfEERKNS_4RectES7_RKNS_6SplineEbRKNSt3__16vectorINSB_4pairINS8_5PointEfEENSB_9allocatorISF_EEEEf(%"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::Spline"* nocapture readonly dereferenceable(536), i1 zeroext, %"class.std::__1::vector.63"* nocapture readonly dereferenceable(24), float) #14 {
  %8 = alloca %"class.std::__1::vector.47", align 8
  %9 = alloca %"class.std::__1::vector.47", align 8
  %10 = alloca %"class.std::__1::vector.77", align 8
  %11 = alloca [3 x float], align 4
  %12 = fdiv float 1.000000e+00, %6
  %13 = bitcast %"class.std::__1::vector.47"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #18
  %14 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %8, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %8, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #18
  %16 = bitcast %"class.std::__1::vector.47"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #18
  %17 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %9, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %9, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 24, i1 false) #18
  %19 = bitcast %"class.std::__1::vector.77"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #18
  %20 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %10, i64 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %10, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 24, i1 false) #18
  %22 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %5, i64 0, i32 0, i32 0
  %23 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %22, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %5, i64 0, i32 0, i32 1
  %25 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %24, align 8
  %26 = icmp eq %"struct.std::__1::pair.65"* %23, %25
  br i1 %26, label %73, label %27

27:                                               ; preds = %7
  %28 = bitcast [3 x float]* %11 to i8*
  %29 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 0, i64 0
  %30 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 0, i64 1
  %31 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 0, i64 2
  %32 = load <16 x float>, <16 x float>* bitcast ([32 x float]* @_ZZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKffE12kMultipliers to <16 x float>*), align 64, !alias.scope !99, !noalias !104
  %33 = load <16 x float>, <16 x float>* bitcast (float* getelementptr inbounds ([32 x float], [32 x float]* @_ZZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKffE12kMultipliers, i64 0, i64 16) to <16 x float>*), align 64, !alias.scope !99, !noalias !104
  %34 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 2, i64 0
  %35 = bitcast float* %34 to <16 x float>*
  %36 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 2, i64 16
  %37 = bitcast float* %36 to <16 x float>*
  %38 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %39 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %41 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %44 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %45 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %46 = bitcast i32** %15 to i64*
  %47 = bitcast %"class.std::__1::vector.47"* %8 to i64*
  %48 = bitcast i32** %18 to i64*
  %49 = bitcast %"class.std::__1::vector.47"* %9 to i64*
  %50 = bitcast float** %21 to i64*
  %51 = bitcast %"class.std::__1::vector.77"* %10 to i64*
  %52 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 0, i64 0
  %53 = bitcast float* %52 to <16 x float>*
  %54 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 0, i64 16
  %55 = bitcast float* %54 to <16 x float>*
  %56 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 1, i64 0
  %57 = bitcast float* %56 to <16 x float>*
  %58 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 1, i64 16
  %59 = bitcast float* %58 to <16 x float>*
  %60 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 2, i64 0
  %61 = bitcast float* %60 to <16 x float>*
  %62 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 2, i64 16
  %63 = bitcast float* %62 to <16 x float>*
  %64 = bitcast %"class.jxl::Rect"* %2 to <2 x i64>*
  %65 = bitcast i64* %39 to <2 x i64>*
  br label %88

66:                                               ; preds = %503
  %67 = load float*, float** %20, align 8
  %68 = icmp eq float* %67, null
  br i1 %68, label %73, label %69

69:                                               ; preds = %66
  %70 = bitcast float* %67 to i8*
  %71 = ptrtoint float* %67 to i64
  %72 = bitcast float** %21 to i64*
  store i64 %71, i64* %72, align 8
  call void @_ZdlPv(i8* %70) #21
  br label %73

73:                                               ; preds = %7, %66, %69
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #18
  %74 = load i32*, i32** %17, align 8
  %75 = icmp eq i32* %74, null
  br i1 %75, label %80, label %76

76:                                               ; preds = %73
  %77 = ptrtoint i32* %74 to i64
  %78 = bitcast i32** %18 to i64*
  store i64 %77, i64* %78, align 8
  %79 = bitcast i32* %74 to i8*
  call void @_ZdlPv(i8* %79) #21
  br label %80

80:                                               ; preds = %73, %76
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #18
  %81 = load i32*, i32** %14, align 8
  %82 = icmp eq i32* %81, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %80
  %84 = ptrtoint i32* %81 to i64
  %85 = bitcast i32** %15 to i64*
  store i64 %84, i64* %85, align 8
  %86 = bitcast i32* %81 to i8*
  call void @_ZdlPv(i8* %86) #21
  br label %87

87:                                               ; preds = %80, %83
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #18
  ret void

88:                                               ; preds = %27, %503
  %89 = phi i32 [ 0, %27 ], [ %209, %503 ]
  %90 = phi %"struct.std::__1::pair.65"* [ %23, %27 ], [ %504, %503 ]
  %91 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %90, i64 0, i32 1
  %92 = load float, float* %91, align 4
  %93 = fsub float -0.000000e+00, %92
  %94 = sitofp i32 %89 to float
  %95 = fmul float %12, %94
  %96 = fcmp olt float %95, 1.000000e+00
  %97 = select i1 %96, float %95, float 1.000000e+00
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %28) #18
  store float 0xFFFFFFFFE0000000, float* %30, align 4
  store float 0xFFFFFFFFE0000000, float* %31, align 4
  %98 = fmul float %97, 3.100000e+01
  %99 = fadd float %98, 5.000000e-01
  %100 = insertelement <16 x float> undef, float %99, i32 0
  %101 = shufflevector <16 x float> %100, <16 x float> undef, <16 x i32> zeroinitializer
  %102 = fmul <16 x float> %101, %32
  %103 = fmul <16 x float> %102, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>
  %104 = call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %103, i32 9, <16 x float> zeroinitializer, i16 -1, i32 4) #18
  %105 = fmul <16 x float> %104, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %106 = fsub <16 x float> %102, %105
  %107 = fsub <16 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, %106
  %108 = call <16 x float> @llvm.x86.avx512.min.ps.512(<16 x float> %106, <16 x float> %107, i32 4) #18
  %109 = fcmp oge <16 x float> %108, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %110 = fsub <16 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %108
  %111 = select <16 x i1> %109, <16 x float> %110, <16 x float> %108
  %112 = fmul <16 x float> %111, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %113 = fmul <16 x float> %112, %112
  %114 = fmul <16 x float> %113, %113
  %115 = call <16 x float> @llvm.fma.v16f32(<16 x float> %113, <16 x float> <float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000>, <16 x float> <float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000>) #18
  %116 = call <16 x float> @llvm.fma.v16f32(<16 x float> %114, <16 x float> <float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000>, <16 x float> %115) #18
  %117 = call <16 x float> @llvm.fma.v16f32(<16 x float> %116, <16 x float> %116, <16 x float> <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>) #18
  %118 = call <16 x float> @llvm.fma.v16f32(<16 x float> %117, <16 x float> %117, <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>) #18
  %119 = zext <16 x i1> %109 to <16 x i32>
  %120 = shl nuw <16 x i32> %119, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %121 = bitcast <16 x i32> %120 to <8 x i64>
  %122 = bitcast <16 x float> %118 to <8 x i64>
  %123 = xor <8 x i64> %122, %121
  %124 = bitcast <8 x i64> %123 to <16 x float>
  %125 = fmul <16 x float> %101, %33
  %126 = fmul <16 x float> %125, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>
  %127 = call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %126, i32 9, <16 x float> zeroinitializer, i16 -1, i32 4) #18
  %128 = fmul <16 x float> %127, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %129 = fsub <16 x float> %125, %128
  %130 = fsub <16 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, %129
  %131 = call <16 x float> @llvm.x86.avx512.min.ps.512(<16 x float> %129, <16 x float> %130, i32 4) #18
  %132 = fcmp oge <16 x float> %131, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %133 = fsub <16 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %131
  %134 = select <16 x i1> %132, <16 x float> %133, <16 x float> %131
  %135 = fmul <16 x float> %134, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %136 = fmul <16 x float> %135, %135
  %137 = fmul <16 x float> %136, %136
  %138 = call <16 x float> @llvm.fma.v16f32(<16 x float> %136, <16 x float> <float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000>, <16 x float> <float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000>) #18
  %139 = call <16 x float> @llvm.fma.v16f32(<16 x float> %137, <16 x float> <float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000>, <16 x float> %138) #18
  %140 = call <16 x float> @llvm.fma.v16f32(<16 x float> %139, <16 x float> %139, <16 x float> <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>) #18
  %141 = call <16 x float> @llvm.fma.v16f32(<16 x float> %140, <16 x float> %140, <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>) #18
  %142 = zext <16 x i1> %132 to <16 x i32>
  %143 = shl nuw <16 x i32> %142, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %144 = bitcast <16 x i32> %143 to <8 x i64>
  %145 = bitcast <16 x float> %141 to <8 x i64>
  %146 = xor <8 x i64> %145, %144
  %147 = bitcast <8 x i64> %146 to <16 x float>
  %148 = load <16 x float>, <16 x float>* %53, align 1, !alias.scope !105, !noalias !108
  %149 = fmul <16 x float> %148, %124
  %150 = call <16 x float> @llvm.fma.v16f32(<16 x float> %149, <16 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <16 x float> zeroinitializer) #18
  %151 = load <16 x float>, <16 x float>* %55, align 1, !alias.scope !105, !noalias !108
  %152 = fmul <16 x float> %151, %147
  %153 = call <16 x float> @llvm.fma.v16f32(<16 x float> %152, <16 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <16 x float> %150) #18
  %154 = bitcast <16 x float> %153 to <8 x double>
  %155 = shufflevector <8 x double> %154, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %156 = bitcast <4 x double> %155 to <8 x float>
  %157 = shufflevector <8 x double> %154, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %158 = bitcast <4 x double> %157 to <8 x float>
  %159 = fadd <8 x float> %156, %158
  %160 = shufflevector <8 x float> %159, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %161 = shufflevector <8 x float> %159, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %162 = fadd <4 x float> %160, %161
  %163 = shufflevector <4 x float> %162, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %164 = fadd <4 x float> %162, %163
  %165 = shufflevector <4 x float> %164, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %166 = fadd <4 x float> %164, %165
  %167 = extractelement <4 x float> %166, i32 0
  store float %167, float* %29, align 4
  %168 = load <16 x float>, <16 x float>* %57, align 1, !alias.scope !105, !noalias !108
  %169 = fmul <16 x float> %168, %124
  %170 = call <16 x float> @llvm.fma.v16f32(<16 x float> %169, <16 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <16 x float> zeroinitializer) #18
  %171 = load <16 x float>, <16 x float>* %59, align 1, !alias.scope !105, !noalias !108
  %172 = fmul <16 x float> %171, %147
  %173 = call <16 x float> @llvm.fma.v16f32(<16 x float> %172, <16 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <16 x float> %170) #18
  %174 = bitcast <16 x float> %173 to <8 x double>
  %175 = shufflevector <8 x double> %174, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %176 = bitcast <4 x double> %175 to <8 x float>
  %177 = shufflevector <8 x double> %174, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %178 = bitcast <4 x double> %177 to <8 x float>
  %179 = fadd <8 x float> %176, %178
  %180 = shufflevector <8 x float> %179, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %181 = shufflevector <8 x float> %179, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %182 = fadd <4 x float> %180, %181
  %183 = shufflevector <4 x float> %182, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %184 = fadd <4 x float> %182, %183
  %185 = shufflevector <4 x float> %184, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %186 = fadd <4 x float> %184, %185
  %187 = extractelement <4 x float> %186, i32 0
  store float %187, float* %30, align 4
  %188 = load <16 x float>, <16 x float>* %61, align 1, !alias.scope !105, !noalias !108
  %189 = fmul <16 x float> %188, %124
  %190 = call <16 x float> @llvm.fma.v16f32(<16 x float> %189, <16 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <16 x float> zeroinitializer) #18
  %191 = load <16 x float>, <16 x float>* %63, align 1, !alias.scope !105, !noalias !108
  %192 = fmul <16 x float> %191, %147
  %193 = call <16 x float> @llvm.fma.v16f32(<16 x float> %192, <16 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <16 x float> %190) #18
  %194 = bitcast <16 x float> %193 to <8 x double>
  %195 = shufflevector <8 x double> %194, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %196 = bitcast <4 x double> %195 to <8 x float>
  %197 = shufflevector <8 x double> %194, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %198 = bitcast <4 x double> %197 to <8 x float>
  %199 = fadd <8 x float> %196, %198
  %200 = shufflevector <8 x float> %199, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %201 = shufflevector <8 x float> %199, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %202 = fadd <4 x float> %200, %201
  %203 = shufflevector <4 x float> %202, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %204 = fadd <4 x float> %202, %203
  %205 = shufflevector <4 x float> %204, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %206 = fadd <4 x float> %204, %205
  %207 = extractelement <4 x float> %206, i32 0
  store float %207, float* %31, align 4
  %208 = select i1 %4, float %92, float %93
  %209 = add nuw nsw i32 %89, 1
  %210 = load <16 x float>, <16 x float>* %35, align 1, !alias.scope !110, !noalias !113
  %211 = fmul <16 x float> %210, %124
  %212 = call <16 x float> @llvm.fma.v16f32(<16 x float> %211, <16 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <16 x float> zeroinitializer) #18
  %213 = load <16 x float>, <16 x float>* %37, align 1, !alias.scope !110, !noalias !113
  %214 = fmul <16 x float> %213, %147
  %215 = call <16 x float> @llvm.fma.v16f32(<16 x float> %214, <16 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <16 x float> %212) #18
  %216 = bitcast <16 x float> %215 to <8 x double>
  %217 = shufflevector <8 x double> %216, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %218 = bitcast <4 x double> %217 to <8 x float>
  %219 = shufflevector <8 x double> %216, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %220 = bitcast <4 x double> %219 to <8 x float>
  %221 = fadd <8 x float> %218, %220
  %222 = shufflevector <8 x float> %221, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %223 = shufflevector <8 x float> %221, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %224 = fadd <4 x float> %222, %223
  %225 = shufflevector <4 x float> %224, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %226 = fadd <4 x float> %224, %225
  %227 = shufflevector <4 x float> %226, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %228 = fadd <4 x float> %226, %227
  %229 = extractelement <4 x float> %228, i32 0
  %230 = fmul float %229, %229
  %231 = fmul float %230, 0x40126BB1C0000000
  %232 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %90, i64 0, i32 0, i32 0
  %233 = load <2 x i64>, <2 x i64>* %64, align 8
  %234 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %90, i64 0, i32 0, i32 1
  %235 = bitcast %"struct.std::__1::pair.65"* %90 to <2 x float>*
  %236 = load <2 x float>, <2 x float>* %235, align 4
  %237 = insertelement <2 x float> undef, float %231, i32 0
  %238 = shufflevector <2 x float> %237, <2 x float> undef, <2 x i32> zeroinitializer
  %239 = fsub <2 x float> %236, %238
  %240 = fadd <2 x float> %239, <float 5.000000e-01, float 5.000000e-01>
  %241 = fptosi <2 x float> %240 to <2 x i64>
  %242 = icmp slt <2 x i64> %233, %241
  %243 = select <2 x i1> %242, <2 x i64> %241, <2 x i64> %233
  %244 = extractelement <2 x i64> %243, i32 0
  %245 = sub i64 0, %244
  %246 = fadd <2 x float> %236, %238
  %247 = fadd <2 x float> %246, <float 5.000000e-01, float 5.000000e-01>
  %248 = fptosi <2 x float> %247 to <2 x i64>
  %249 = load <2 x i64>, <2 x i64>* %65, align 8
  %250 = add <2 x i64> %233, <i64 -1, i64 -1>
  %251 = add <2 x i64> %250, %249
  %252 = icmp slt <2 x i64> %251, %248
  %253 = select <2 x i1> %252, <2 x i64> %251, <2 x i64> %248
  %254 = extractelement <2 x i64> %253, i32 0
  %255 = icmp slt i64 %254, 1
  %256 = icmp slt i64 %254, %244
  %257 = or i1 %255, %256
  br i1 %257, label %503, label %258

258:                                              ; preds = %88
  %259 = extractelement <2 x i64> %253, i32 1
  %260 = icmp slt i64 %259, 1
  %261 = extractelement <2 x i64> %243, i32 1
  %262 = icmp slt i64 %259, %261
  %263 = or i1 %260, %262
  br i1 %263, label %503, label %264

264:                                              ; preds = %258
  %265 = load i64, i64* %40, align 8
  %266 = lshr i64 %265, 2
  %267 = extractelement <2 x i64> %233, i32 1
  %268 = sub i64 %261, %267
  %269 = load i64, i64* %41, align 8
  %270 = add i64 %268, %269
  %271 = mul i64 %270, %265
  %272 = load i8*, i8** %42, align 8
  %273 = ptrtoint i8* %272 to i64
  %274 = and i64 %273, 63
  %275 = icmp eq i64 %274, 0
  call void @llvm.assume(i1 %275) #18
  %276 = getelementptr inbounds i8, i8* %272, i64 %271
  %277 = ptrtoint i8* %276 to i64
  %278 = and i64 %277, 63
  %279 = icmp eq i64 %278, 0
  call void @llvm.assume(i1 %279) #18
  %280 = bitcast i8* %276 to float*
  %281 = load i64, i64* %43, align 8
  %282 = getelementptr inbounds float, float* %280, i64 %281
  %283 = load i8*, i8** %44, align 8
  %284 = ptrtoint i8* %283 to i64
  %285 = and i64 %284, 63
  %286 = icmp eq i64 %285, 0
  call void @llvm.assume(i1 %286) #18
  %287 = getelementptr inbounds i8, i8* %283, i64 %271
  %288 = ptrtoint i8* %287 to i64
  %289 = and i64 %288, 63
  %290 = icmp eq i64 %289, 0
  call void @llvm.assume(i1 %290) #18
  %291 = bitcast i8* %287 to float*
  %292 = getelementptr inbounds float, float* %291, i64 %281
  %293 = load i8*, i8** %45, align 8
  %294 = ptrtoint i8* %293 to i64
  %295 = and i64 %294, 63
  %296 = icmp eq i64 %295, 0
  call void @llvm.assume(i1 %296) #18
  %297 = getelementptr inbounds i8, i8* %293, i64 %271
  %298 = ptrtoint i8* %297 to i64
  %299 = and i64 %298, 63
  %300 = icmp eq i64 %299, 0
  call void @llvm.assume(i1 %300) #18
  %301 = bitcast i8* %297 to float*
  %302 = getelementptr inbounds float, float* %301, i64 %281
  %303 = add nuw <2 x i64> %253, <i64 1, i64 1>
  %304 = sub <2 x i64> %303, %243
  %305 = load i64, i64* %46, align 8
  %306 = load i64, i64* %47, align 8
  %307 = sub i64 %305, %306
  %308 = ashr exact i64 %307, 2
  %309 = extractelement <2 x i64> %304, i32 0
  %310 = extractelement <2 x i64> %304, i32 1
  %311 = mul i64 %310, %309
  %312 = icmp ult i64 %308, %311
  %313 = inttoptr i64 %306 to i32*
  br i1 %312, label %314, label %350

314:                                              ; preds = %264
  %315 = add i64 %311, 15
  %316 = and i64 %315, -16
  %317 = icmp ugt i64 %316, %308
  br i1 %317, label %318, label %320

318:                                              ; preds = %314
  %319 = sub i64 %316, %308
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.47"* nonnull %8, i64 %319) #18
  br label %324

320:                                              ; preds = %314
  %321 = icmp ult i64 %316, %308
  br i1 %321, label %322, label %324

322:                                              ; preds = %320
  %323 = getelementptr inbounds i32, i32* %313, i64 %316
  store i32* %323, i32** %15, align 8
  br label %324

324:                                              ; preds = %322, %320, %318
  %325 = load i64, i64* %48, align 8
  %326 = load i64, i64* %49, align 8
  %327 = sub i64 %325, %326
  %328 = ashr exact i64 %327, 2
  %329 = icmp ugt i64 %316, %328
  %330 = inttoptr i64 %326 to i32*
  br i1 %329, label %331, label %333

331:                                              ; preds = %324
  %332 = sub i64 %316, %328
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.47"* nonnull %9, i64 %332) #18
  br label %337

333:                                              ; preds = %324
  %334 = icmp ult i64 %316, %328
  br i1 %334, label %335, label %337

335:                                              ; preds = %333
  %336 = getelementptr inbounds i32, i32* %330, i64 %316
  store i32* %336, i32** %18, align 8
  br label %337

337:                                              ; preds = %335, %333, %331
  %338 = load i64, i64* %50, align 8
  %339 = load i64, i64* %51, align 8
  %340 = sub i64 %338, %339
  %341 = ashr exact i64 %340, 2
  %342 = icmp ugt i64 %316, %341
  %343 = inttoptr i64 %339 to float*
  br i1 %342, label %344, label %346

344:                                              ; preds = %337
  %345 = sub i64 %316, %341
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.77"* nonnull %10, i64 %345) #18
  br label %350

346:                                              ; preds = %337
  %347 = icmp ult i64 %316, %341
  br i1 %347, label %348, label %350

348:                                              ; preds = %346
  %349 = getelementptr inbounds float, float* %343, i64 %316
  store float* %349, float** %21, align 8
  br label %350

350:                                              ; preds = %348, %346, %344, %264
  %351 = icmp ugt i64 %261, %259
  br i1 %351, label %360, label %352

352:                                              ; preds = %350
  %353 = icmp ugt i64 %244, %254
  br label %354

354:                                              ; preds = %373, %352
  %355 = phi i64 [ %261, %352 ], [ %374, %373 ]
  br i1 %353, label %373, label %356

356:                                              ; preds = %354
  %357 = sub i64 %355, %261
  %358 = mul i64 %357, %309
  %359 = trunc i64 %355 to i32
  br label %376

360:                                              ; preds = %373, %350
  %361 = fdiv float 1.000000e+00, %229
  %362 = insertelement <16 x float> undef, float %361, i32 0
  %363 = shufflevector <16 x float> %362, <16 x float> undef, <16 x i32> zeroinitializer
  %364 = fmul float %229, 2.500000e-01
  %365 = fmul float %208, %364
  %366 = insertelement <16 x float> undef, float %365, i32 0
  %367 = shufflevector <16 x float> %366, <16 x float> undef, <16 x i32> zeroinitializer
  %368 = icmp eq i64 %311, 0
  br i1 %368, label %387, label %369

369:                                              ; preds = %360
  %370 = load i32*, i32** %14, align 8
  %371 = load i32*, i32** %17, align 8
  %372 = load float*, float** %20, align 8
  br label %397

373:                                              ; preds = %376, %354
  %374 = add i64 %355, 1
  %375 = icmp ugt i64 %374, %259
  br i1 %375, label %360, label %354

376:                                              ; preds = %376, %356
  %377 = phi i64 [ %244, %356 ], [ %385, %376 ]
  %378 = trunc i64 %377 to i32
  %379 = sub i64 %377, %244
  %380 = add i64 %379, %358
  %381 = load i32*, i32** %14, align 8
  %382 = getelementptr inbounds i32, i32* %381, i64 %380
  store i32 %378, i32* %382, align 4
  %383 = load i32*, i32** %17, align 8
  %384 = getelementptr inbounds i32, i32* %383, i64 %380
  store i32 %359, i32* %384, align 4
  %385 = add i64 %377, 1
  %386 = icmp ugt i64 %385, %254
  br i1 %386, label %373, label %376

387:                                              ; preds = %397, %360
  br i1 %351, label %503, label %388

388:                                              ; preds = %387
  %389 = load i64, i64* %38, align 8
  %390 = sub nsw i64 0, %389
  %391 = icmp ugt i64 %244, %254
  %392 = load float, float* %29, align 4
  %393 = insertelement <4 x float> undef, float %392, i32 0
  %394 = shufflevector <4 x float> %393, <4 x float> undef, <4 x i32> zeroinitializer
  %395 = shufflevector <4 x float> %186, <4 x float> undef, <4 x i32> zeroinitializer
  %396 = shufflevector <4 x float> %206, <4 x float> undef, <4 x i32> zeroinitializer
  br label %465

397:                                              ; preds = %369, %397
  %398 = phi i64 [ %463, %397 ], [ 0, %369 ]
  %399 = getelementptr inbounds i32, i32* %370, i64 %398
  %400 = bitcast i32* %399 to <16 x i32>*
  %401 = load <16 x i32>, <16 x i32>* %400, align 1, !alias.scope !115, !noalias !118
  %402 = sitofp <16 x i32> %401 to <16 x float>
  %403 = getelementptr inbounds i32, i32* %371, i64 %398
  %404 = bitcast i32* %403 to <16 x i32>*
  %405 = load <16 x i32>, <16 x i32>* %404, align 1, !alias.scope !120, !noalias !123
  %406 = sitofp <16 x i32> %405 to <16 x float>
  %407 = load float, float* %232, align 4
  %408 = insertelement <16 x float> undef, float %407, i32 0
  %409 = shufflevector <16 x float> %408, <16 x float> undef, <16 x i32> zeroinitializer
  %410 = fsub <16 x float> %402, %409
  %411 = load float, float* %234, align 4
  %412 = insertelement <16 x float> undef, float %411, i32 0
  %413 = shufflevector <16 x float> %412, <16 x float> undef, <16 x i32> zeroinitializer
  %414 = fsub <16 x float> %406, %413
  %415 = fmul <16 x float> %414, %414
  %416 = call <16 x float> @llvm.fma.v16f32(<16 x float> %410, <16 x float> %410, <16 x float> %415) #18
  %417 = call <16 x float> @llvm.sqrt.v16f32(<16 x float> %416) #18
  %418 = call <16 x float> @llvm.fma.v16f32(<16 x float> %417, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <16 x float> <float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000>) #18
  %419 = fmul <16 x float> %363, %418
  %420 = fcmp ole <16 x float> %419, zeroinitializer
  %421 = bitcast <16 x float> %419 to <8 x i64>
  %422 = and <8 x i64> %421, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %423 = bitcast <8 x i64> %422 to <16 x float>
  %424 = call <16 x float> @llvm.fma.v16f32(<16 x float> %423, <16 x float> <float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000>, <16 x float> <float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000>) #18
  %425 = call <16 x float> @llvm.fma.v16f32(<16 x float> %424, <16 x float> %423, <16 x float> <float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000>) #18
  %426 = call <16 x float> @llvm.fma.v16f32(<16 x float> %425, <16 x float> %423, <16 x float> <float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000>) #18
  %427 = call <16 x float> @llvm.fma.v16f32(<16 x float> %426, <16 x float> %423, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %428 = fmul <16 x float> %427, %427
  %429 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %428
  %430 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %429
  %431 = call <16 x float> @llvm.fma.v16f32(<16 x float> %429, <16 x float> %430, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %432 = zext <16 x i1> %420 to <16 x i32>
  %433 = shl nuw <16 x i32> %432, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %434 = bitcast <16 x i32> %433 to <8 x i64>
  %435 = bitcast <16 x float> %431 to <8 x i64>
  %436 = xor <8 x i64> %435, %434
  %437 = call <16 x float> @llvm.fma.v16f32(<16 x float> %417, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <16 x float> <float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000>) #18
  %438 = fmul <16 x float> %363, %437
  %439 = fcmp ole <16 x float> %438, zeroinitializer
  %440 = bitcast <16 x float> %438 to <8 x i64>
  %441 = and <8 x i64> %440, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %442 = bitcast <8 x i64> %441 to <16 x float>
  %443 = call <16 x float> @llvm.fma.v16f32(<16 x float> %442, <16 x float> <float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000>, <16 x float> <float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000>) #18
  %444 = call <16 x float> @llvm.fma.v16f32(<16 x float> %443, <16 x float> %442, <16 x float> <float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000>) #18
  %445 = call <16 x float> @llvm.fma.v16f32(<16 x float> %444, <16 x float> %442, <16 x float> <float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000>) #18
  %446 = call <16 x float> @llvm.fma.v16f32(<16 x float> %445, <16 x float> %442, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %447 = fmul <16 x float> %446, %446
  %448 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %447
  %449 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %448
  %450 = call <16 x float> @llvm.fma.v16f32(<16 x float> %448, <16 x float> %449, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %451 = zext <16 x i1> %439 to <16 x i32>
  %452 = shl nuw <16 x i32> %451, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %453 = bitcast <16 x i32> %452 to <8 x i64>
  %454 = bitcast <16 x float> %450 to <8 x i64>
  %455 = xor <8 x i64> %454, %453
  %456 = bitcast <8 x i64> %436 to <16 x float>
  %457 = bitcast <8 x i64> %455 to <16 x float>
  %458 = fsub <16 x float> %456, %457
  %459 = fmul <16 x float> %367, %458
  %460 = fmul <16 x float> %458, %459
  %461 = getelementptr inbounds float, float* %372, i64 %398
  %462 = bitcast float* %461 to <16 x float>*
  store <16 x float> %460, <16 x float>* %462, align 1, !alias.scope !125
  %463 = add i64 %398, 16
  %464 = icmp ult i64 %463, %311
  br i1 %464, label %397, label %387

465:                                              ; preds = %474, %388
  %466 = phi i64 [ %261, %388 ], [ %476, %474 ]
  %467 = phi i64 [ %390, %388 ], [ %475, %474 ]
  br i1 %391, label %474, label %468

468:                                              ; preds = %465
  %469 = sub i64 %466, %261
  %470 = mul i64 %469, %309
  %471 = getelementptr inbounds float, float* %282, i64 %467
  %472 = getelementptr inbounds float, float* %292, i64 %467
  %473 = getelementptr inbounds float, float* %302, i64 %467
  br label %478

474:                                              ; preds = %478, %465
  %475 = add i64 %467, %266
  %476 = add i64 %466, 1
  %477 = icmp ugt i64 %476, %259
  br i1 %477, label %503, label %465

478:                                              ; preds = %478, %468
  %479 = phi i64 [ %244, %468 ], [ %501, %478 ]
  %480 = load float*, float** %20, align 8
  %481 = getelementptr inbounds float, float* %480, i64 %470
  %482 = getelementptr inbounds float, float* %481, i64 %245
  %483 = getelementptr inbounds float, float* %482, i64 %479
  %484 = load float, float* %483, align 1, !alias.scope !128
  %485 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %484, i32 0
  %486 = getelementptr inbounds float, float* %471, i64 %479
  %487 = load float, float* %486, align 4, !alias.scope !131
  %488 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %487, i32 0
  %489 = call <4 x float> @llvm.fma.v4f32(<4 x float> %394, <4 x float> %485, <4 x float> %488) #18
  %490 = extractelement <4 x float> %489, i32 0
  store float %490, float* %486, align 4, !alias.scope !136
  %491 = getelementptr inbounds float, float* %472, i64 %479
  %492 = load float, float* %491, align 4, !alias.scope !131
  %493 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %492, i32 0
  %494 = call <4 x float> @llvm.fma.v4f32(<4 x float> %395, <4 x float> %485, <4 x float> %493) #18
  %495 = extractelement <4 x float> %494, i32 0
  store float %495, float* %491, align 4, !alias.scope !136
  %496 = getelementptr inbounds float, float* %473, i64 %479
  %497 = load float, float* %496, align 4, !alias.scope !131
  %498 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %497, i32 0
  %499 = call <4 x float> @llvm.fma.v4f32(<4 x float> %396, <4 x float> %485, <4 x float> %498) #18
  %500 = extractelement <4 x float> %499, i32 0
  store float %500, float* %496, align 4, !alias.scope !136
  %501 = add i64 %479, 1
  %502 = icmp ugt i64 %501, %254
  br i1 %502, label %474, label %478

503:                                              ; preds = %474, %88, %258, %387
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %28) #18
  %504 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %90, i64 1
  %505 = icmp eq %"struct.std::__1::pair.65"* %504, %25
  br i1 %505, label %66, label %88
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl6N_AVX212_GLOBAL__N_114DrawFromPointsEPNS_6Image3IfEERKNS_4RectES7_RKNS_6SplineEbRKNSt3__16vectorINSB_4pairINS8_5PointEfEENSB_9allocatorISF_EEEEf(%"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::Spline"* nocapture readonly dereferenceable(536), i1 zeroext, %"class.std::__1::vector.63"* nocapture readonly dereferenceable(24), float) #15 {
  %8 = alloca %"class.std::__1::vector.47", align 8
  %9 = alloca %"class.std::__1::vector.47", align 8
  %10 = alloca %"class.std::__1::vector.77", align 8
  %11 = alloca [3 x float], align 4
  %12 = fdiv float 1.000000e+00, %6
  %13 = bitcast %"class.std::__1::vector.47"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #18
  %14 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %8, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %8, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #18
  %16 = bitcast %"class.std::__1::vector.47"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #18
  %17 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %9, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %9, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 24, i1 false) #18
  %19 = bitcast %"class.std::__1::vector.77"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #18
  %20 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %10, i64 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %10, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 24, i1 false) #18
  %22 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %5, i64 0, i32 0, i32 0
  %23 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %22, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %5, i64 0, i32 0, i32 1
  %25 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %24, align 8
  %26 = icmp eq %"struct.std::__1::pair.65"* %23, %25
  br i1 %26, label %87, label %27

27:                                               ; preds = %7
  %28 = bitcast [3 x float]* %11 to i8*
  %29 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 0, i64 0
  %30 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 0, i64 1
  %31 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 0, i64 2
  %32 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 2, i64 0
  %33 = bitcast float* %32 to <8 x float>*
  %34 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 2, i64 8
  %35 = bitcast float* %34 to <8 x float>*
  %36 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 2, i64 16
  %37 = bitcast float* %36 to <8 x float>*
  %38 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 2, i64 24
  %39 = bitcast float* %38 to <8 x float>*
  %40 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %41 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %42 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %43 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %44 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %45 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %46 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %48 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %50 = bitcast i32** %15 to i64*
  %51 = bitcast %"class.std::__1::vector.47"* %8 to i64*
  %52 = bitcast i32** %18 to i64*
  %53 = bitcast %"class.std::__1::vector.47"* %9 to i64*
  %54 = bitcast float** %21 to i64*
  %55 = bitcast %"class.std::__1::vector.77"* %10 to i64*
  %56 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 0, i64 0
  %57 = bitcast float* %56 to <8 x float>*
  %58 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 0, i64 8
  %59 = bitcast float* %58 to <8 x float>*
  %60 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 0, i64 16
  %61 = bitcast float* %60 to <8 x float>*
  %62 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 0, i64 24
  %63 = bitcast float* %62 to <8 x float>*
  %64 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 1, i64 0
  %65 = bitcast float* %64 to <8 x float>*
  %66 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 1, i64 8
  %67 = bitcast float* %66 to <8 x float>*
  %68 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 1, i64 16
  %69 = bitcast float* %68 to <8 x float>*
  %70 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 1, i64 24
  %71 = bitcast float* %70 to <8 x float>*
  %72 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 2, i64 0
  %73 = bitcast float* %72 to <8 x float>*
  %74 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 2, i64 8
  %75 = bitcast float* %74 to <8 x float>*
  %76 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 2, i64 16
  %77 = bitcast float* %76 to <8 x float>*
  %78 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 2, i64 24
  %79 = bitcast float* %78 to <8 x float>*
  br label %102

80:                                               ; preds = %566
  %81 = load float*, float** %20, align 8
  %82 = icmp eq float* %81, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %80
  %84 = bitcast float* %81 to i8*
  %85 = ptrtoint float* %81 to i64
  %86 = bitcast float** %21 to i64*
  store i64 %85, i64* %86, align 8
  call void @_ZdlPv(i8* %84) #21
  br label %87

87:                                               ; preds = %7, %80, %83
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #18
  %88 = load i32*, i32** %17, align 8
  %89 = icmp eq i32* %88, null
  br i1 %89, label %94, label %90

90:                                               ; preds = %87
  %91 = ptrtoint i32* %88 to i64
  %92 = bitcast i32** %18 to i64*
  store i64 %91, i64* %92, align 8
  %93 = bitcast i32* %88 to i8*
  call void @_ZdlPv(i8* %93) #21
  br label %94

94:                                               ; preds = %87, %90
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #18
  %95 = load i32*, i32** %14, align 8
  %96 = icmp eq i32* %95, null
  br i1 %96, label %101, label %97

97:                                               ; preds = %94
  %98 = ptrtoint i32* %95 to i64
  %99 = bitcast i32** %15 to i64*
  store i64 %98, i64* %99, align 8
  %100 = bitcast i32* %95 to i8*
  call void @_ZdlPv(i8* %100) #21
  br label %101

101:                                              ; preds = %94, %97
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #18
  ret void

102:                                              ; preds = %27, %566
  %103 = phi i32 [ 0, %27 ], [ %266, %566 ]
  %104 = phi %"struct.std::__1::pair.65"* [ %23, %27 ], [ %567, %566 ]
  %105 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %104, i64 0, i32 1
  %106 = load float, float* %105, align 4
  %107 = fsub float -0.000000e+00, %106
  %108 = sitofp i32 %103 to float
  %109 = fmul float %12, %108
  %110 = fcmp olt float %109, 1.000000e+00
  %111 = select i1 %110, float %109, float 1.000000e+00
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %28) #18
  store float 0xFFFFFFFFE0000000, float* %29, align 4
  store float 0xFFFFFFFFE0000000, float* %30, align 4
  store float 0xFFFFFFFFE0000000, float* %31, align 4
  %112 = fmul float %111, 3.100000e+01
  %113 = fadd float %112, 5.000000e-01
  %114 = insertelement <8 x float> undef, float %113, i32 0
  %115 = shufflevector <8 x float> %114, <8 x float> undef, <8 x i32> zeroinitializer
  %116 = fmul <8 x float> %115, <float 0.000000e+00, float 0x3FB921FB60000000, float 0x3FC921FB60000000, float 0x3FD2D97C80000000, float 0x3FD921FB60000000, float 0x3FDF6A7A20000000, float 0x3FE2D97C80000000, float 0x3FE5FDBBE0000000>
  %117 = fmul <8 x float> %116, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>
  %118 = call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %117, i32 9) #18
  %119 = fmul <8 x float> %118, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %120 = fsub <8 x float> %116, %119
  %121 = fsub <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, %120
  %122 = call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %120, <8 x float> %121) #18
  %123 = fcmp oge <8 x float> %122, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %124 = zext <8 x i1> %123 to <8 x i32>
  %125 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %122
  %126 = select <8 x i1> %123, <8 x float> %125, <8 x float> %122
  %127 = fmul <8 x float> %126, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %128 = fmul <8 x float> %127, %127
  %129 = fmul <8 x float> %128, %128
  %130 = call <8 x float> @llvm.fma.v8f32(<8 x float> %128, <8 x float> <float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000>, <8 x float> <float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000>) #18
  %131 = call <8 x float> @llvm.fma.v8f32(<8 x float> %129, <8 x float> <float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000>, <8 x float> %130) #18
  %132 = call <8 x float> @llvm.fma.v8f32(<8 x float> %131, <8 x float> %131, <8 x float> <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>) #18
  %133 = call <8 x float> @llvm.fma.v8f32(<8 x float> %132, <8 x float> %132, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>) #18
  %134 = shl nuw <8 x i32> %124, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %135 = bitcast <8 x i32> %134 to <4 x i64>
  %136 = bitcast <8 x float> %133 to <4 x i64>
  %137 = xor <4 x i64> %136, %135
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = fmul <8 x float> %115, <float 0x3FE921FB60000000, float 0x3FEC463AC0000000, float 0x3FEF6A7A20000000, float 0x3FF1475CC0000000, float 0x3FF2D97C80000000, float 0x3FF46B9C40000000, float 0x3FF5FDBBE0000000, float 0x3FF78FDBA0000000>
  %140 = fmul <8 x float> %139, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>
  %141 = call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %140, i32 9) #18
  %142 = fmul <8 x float> %141, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %143 = fsub <8 x float> %139, %142
  %144 = fsub <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, %143
  %145 = call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %143, <8 x float> %144) #18
  %146 = fcmp oge <8 x float> %145, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %147 = zext <8 x i1> %146 to <8 x i32>
  %148 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %145
  %149 = select <8 x i1> %146, <8 x float> %148, <8 x float> %145
  %150 = fmul <8 x float> %149, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %151 = fmul <8 x float> %150, %150
  %152 = fmul <8 x float> %151, %151
  %153 = call <8 x float> @llvm.fma.v8f32(<8 x float> %151, <8 x float> <float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000>, <8 x float> <float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000>) #18
  %154 = call <8 x float> @llvm.fma.v8f32(<8 x float> %152, <8 x float> <float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000>, <8 x float> %153) #18
  %155 = call <8 x float> @llvm.fma.v8f32(<8 x float> %154, <8 x float> %154, <8 x float> <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>) #18
  %156 = call <8 x float> @llvm.fma.v8f32(<8 x float> %155, <8 x float> %155, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>) #18
  %157 = shl nuw <8 x i32> %147, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %158 = bitcast <8 x i32> %157 to <4 x i64>
  %159 = bitcast <8 x float> %156 to <4 x i64>
  %160 = xor <4 x i64> %159, %158
  %161 = bitcast <4 x i64> %160 to <8 x float>
  %162 = fmul <8 x float> %115, <float 0x3FF921FB60000000, float 0x3FFAB41B00000000, float 0x3FFC463AC0000000, float 0x3FFDD85A80000000, float 0x3FFF6A7A20000000, float 0x40007E4CE0000000, float 0x4001475CC0000000, float 0x4002106CA0000000>
  %163 = fmul <8 x float> %162, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>
  %164 = call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %163, i32 9) #18
  %165 = fmul <8 x float> %164, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %166 = fsub <8 x float> %162, %165
  %167 = fsub <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, %166
  %168 = call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %166, <8 x float> %167) #18
  %169 = fcmp oge <8 x float> %168, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %170 = zext <8 x i1> %169 to <8 x i32>
  %171 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %168
  %172 = select <8 x i1> %169, <8 x float> %171, <8 x float> %168
  %173 = fmul <8 x float> %172, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %174 = fmul <8 x float> %173, %173
  %175 = fmul <8 x float> %174, %174
  %176 = call <8 x float> @llvm.fma.v8f32(<8 x float> %174, <8 x float> <float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000>, <8 x float> <float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000>) #18
  %177 = call <8 x float> @llvm.fma.v8f32(<8 x float> %175, <8 x float> <float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000>, <8 x float> %176) #18
  %178 = call <8 x float> @llvm.fma.v8f32(<8 x float> %177, <8 x float> %177, <8 x float> <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>) #18
  %179 = call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %178, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>) #18
  %180 = shl nuw <8 x i32> %170, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %181 = bitcast <8 x i32> %180 to <4 x i64>
  %182 = bitcast <8 x float> %179 to <4 x i64>
  %183 = xor <4 x i64> %182, %181
  %184 = bitcast <4 x i64> %183 to <8 x float>
  %185 = fmul <8 x float> %115, <float 0x4002D97C80000000, float 0x4003A28C60000000, float 0x40046B9C40000000, float 0x400534AC00000000, float 0x4005FDBBE0000000, float 0x4006C6CBC0000000, float 0x40078FDBA0000000, float 0x400858EB80000000>
  %186 = fmul <8 x float> %185, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>
  %187 = call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %186, i32 9) #18
  %188 = fmul <8 x float> %187, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %189 = fsub <8 x float> %185, %188
  %190 = fsub <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, %189
  %191 = call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %189, <8 x float> %190) #18
  %192 = fcmp oge <8 x float> %191, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %193 = zext <8 x i1> %192 to <8 x i32>
  %194 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %191
  %195 = select <8 x i1> %192, <8 x float> %194, <8 x float> %191
  %196 = fmul <8 x float> %195, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %197 = fmul <8 x float> %196, %196
  %198 = fmul <8 x float> %197, %197
  %199 = call <8 x float> @llvm.fma.v8f32(<8 x float> %197, <8 x float> <float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000>, <8 x float> <float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000>) #18
  %200 = call <8 x float> @llvm.fma.v8f32(<8 x float> %198, <8 x float> <float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000>, <8 x float> %199) #18
  %201 = call <8 x float> @llvm.fma.v8f32(<8 x float> %200, <8 x float> %200, <8 x float> <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>) #18
  %202 = call <8 x float> @llvm.fma.v8f32(<8 x float> %201, <8 x float> %201, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>) #18
  %203 = shl nuw <8 x i32> %193, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %204 = bitcast <8 x i32> %203 to <4 x i64>
  %205 = bitcast <8 x float> %202 to <4 x i64>
  %206 = xor <4 x i64> %205, %204
  %207 = bitcast <4 x i64> %206 to <8 x float>
  %208 = load <8 x float>, <8 x float>* %57, align 1, !alias.scope !141, !noalias !144
  %209 = fmul <8 x float> %208, %138
  %210 = call <8 x float> @llvm.fma.v8f32(<8 x float> %209, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> zeroinitializer) #18
  %211 = load <8 x float>, <8 x float>* %59, align 1, !alias.scope !141, !noalias !144
  %212 = fmul <8 x float> %211, %161
  %213 = call <8 x float> @llvm.fma.v8f32(<8 x float> %212, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %210) #18
  %214 = load <8 x float>, <8 x float>* %61, align 1, !alias.scope !141, !noalias !144
  %215 = fmul <8 x float> %214, %184
  %216 = call <8 x float> @llvm.fma.v8f32(<8 x float> %215, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %213) #18
  %217 = load <8 x float>, <8 x float>* %63, align 1, !alias.scope !141, !noalias !144
  %218 = fmul <8 x float> %217, %207
  %219 = call <8 x float> @llvm.fma.v8f32(<8 x float> %218, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %216) #18
  %220 = shufflevector <8 x float> %219, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %221 = fadd <8 x float> %219, %220
  %222 = shufflevector <8 x float> %221, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %223 = fadd <8 x float> %221, %222
  %224 = shufflevector <8 x float> %223, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %225 = fadd <8 x float> %223, %224
  %226 = extractelement <8 x float> %225, i32 0
  store float %226, float* %29, align 4
  %227 = load <8 x float>, <8 x float>* %65, align 1, !alias.scope !141, !noalias !144
  %228 = fmul <8 x float> %227, %138
  %229 = call <8 x float> @llvm.fma.v8f32(<8 x float> %228, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> zeroinitializer) #18
  %230 = load <8 x float>, <8 x float>* %67, align 1, !alias.scope !141, !noalias !144
  %231 = fmul <8 x float> %230, %161
  %232 = call <8 x float> @llvm.fma.v8f32(<8 x float> %231, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %229) #18
  %233 = load <8 x float>, <8 x float>* %69, align 1, !alias.scope !141, !noalias !144
  %234 = fmul <8 x float> %233, %184
  %235 = call <8 x float> @llvm.fma.v8f32(<8 x float> %234, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %232) #18
  %236 = load <8 x float>, <8 x float>* %71, align 1, !alias.scope !141, !noalias !144
  %237 = fmul <8 x float> %236, %207
  %238 = call <8 x float> @llvm.fma.v8f32(<8 x float> %237, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %235) #18
  %239 = shufflevector <8 x float> %238, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %240 = fadd <8 x float> %238, %239
  %241 = shufflevector <8 x float> %240, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %242 = fadd <8 x float> %240, %241
  %243 = shufflevector <8 x float> %242, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %244 = fadd <8 x float> %242, %243
  %245 = extractelement <8 x float> %244, i32 0
  store float %245, float* %30, align 4
  %246 = load <8 x float>, <8 x float>* %73, align 1, !alias.scope !141, !noalias !144
  %247 = fmul <8 x float> %246, %138
  %248 = call <8 x float> @llvm.fma.v8f32(<8 x float> %247, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> zeroinitializer) #18
  %249 = load <8 x float>, <8 x float>* %75, align 1, !alias.scope !141, !noalias !144
  %250 = fmul <8 x float> %249, %161
  %251 = call <8 x float> @llvm.fma.v8f32(<8 x float> %250, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %248) #18
  %252 = load <8 x float>, <8 x float>* %77, align 1, !alias.scope !141, !noalias !144
  %253 = fmul <8 x float> %252, %184
  %254 = call <8 x float> @llvm.fma.v8f32(<8 x float> %253, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %251) #18
  %255 = load <8 x float>, <8 x float>* %79, align 1, !alias.scope !141, !noalias !144
  %256 = fmul <8 x float> %255, %207
  %257 = call <8 x float> @llvm.fma.v8f32(<8 x float> %256, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %254) #18
  %258 = shufflevector <8 x float> %257, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %259 = fadd <8 x float> %257, %258
  %260 = shufflevector <8 x float> %259, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %261 = fadd <8 x float> %259, %260
  %262 = shufflevector <8 x float> %261, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %263 = fadd <8 x float> %261, %262
  %264 = extractelement <8 x float> %263, i32 0
  store float %264, float* %31, align 4
  %265 = select i1 %4, float %106, float %107
  %266 = add nuw nsw i32 %103, 1
  %267 = load <8 x float>, <8 x float>* %33, align 1, !alias.scope !146, !noalias !149
  %268 = fmul <8 x float> %267, %138
  %269 = call <8 x float> @llvm.fma.v8f32(<8 x float> %268, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> zeroinitializer) #18
  %270 = load <8 x float>, <8 x float>* %35, align 1, !alias.scope !146, !noalias !149
  %271 = fmul <8 x float> %270, %161
  %272 = call <8 x float> @llvm.fma.v8f32(<8 x float> %271, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %269) #18
  %273 = load <8 x float>, <8 x float>* %37, align 1, !alias.scope !146, !noalias !149
  %274 = fmul <8 x float> %273, %184
  %275 = call <8 x float> @llvm.fma.v8f32(<8 x float> %274, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %272) #18
  %276 = load <8 x float>, <8 x float>* %39, align 1, !alias.scope !146, !noalias !149
  %277 = fmul <8 x float> %276, %207
  %278 = call <8 x float> @llvm.fma.v8f32(<8 x float> %277, <8 x float> <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>, <8 x float> %275) #18
  %279 = shufflevector <8 x float> %278, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %280 = fadd <8 x float> %278, %279
  %281 = shufflevector <8 x float> %280, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %282 = fadd <8 x float> %280, %281
  %283 = shufflevector <8 x float> %282, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %284 = fadd <8 x float> %282, %283
  %285 = extractelement <8 x float> %284, i32 0
  %286 = fmul float %285, %285
  %287 = fmul float %286, 0x40126BB1C0000000
  %288 = load i64, i64* %40, align 8
  %289 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %104, i64 0, i32 0, i32 0
  %290 = load float, float* %289, align 4
  %291 = fsub float %290, %287
  %292 = fadd float %291, 5.000000e-01
  %293 = fptosi float %292 to i64
  %294 = icmp slt i64 %288, %293
  %295 = select i1 %294, i64 %293, i64 %288
  %296 = sub i64 0, %295
  %297 = fadd float %290, %287
  %298 = fadd float %297, 5.000000e-01
  %299 = fptosi float %298 to i64
  %300 = load i64, i64* %41, align 8
  %301 = add i64 %288, -1
  %302 = add i64 %301, %300
  %303 = icmp slt i64 %302, %299
  %304 = select i1 %303, i64 %302, i64 %299
  %305 = load i64, i64* %42, align 8
  %306 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %104, i64 0, i32 0, i32 1
  %307 = load float, float* %306, align 4
  %308 = fsub float %307, %287
  %309 = fadd float %308, 5.000000e-01
  %310 = fptosi float %309 to i64
  %311 = icmp slt i64 %305, %310
  %312 = select i1 %311, i64 %310, i64 %305
  %313 = fadd float %307, %287
  %314 = fadd float %313, 5.000000e-01
  %315 = fptosi float %314 to i64
  %316 = load i64, i64* %43, align 8
  %317 = add i64 %305, -1
  %318 = add i64 %317, %316
  %319 = icmp slt i64 %318, %315
  %320 = select i1 %319, i64 %318, i64 %315
  %321 = icmp slt i64 %304, 1
  %322 = icmp slt i64 %304, %295
  %323 = or i1 %321, %322
  br i1 %323, label %566, label %324

324:                                              ; preds = %102
  %325 = icmp slt i64 %320, 1
  %326 = icmp slt i64 %320, %312
  %327 = or i1 %325, %326
  br i1 %327, label %566, label %328

328:                                              ; preds = %324
  %329 = load i64, i64* %44, align 8
  %330 = lshr i64 %329, 2
  %331 = sub i64 %312, %305
  %332 = load i64, i64* %45, align 8
  %333 = add i64 %331, %332
  %334 = mul i64 %333, %329
  %335 = load i8*, i8** %46, align 8
  %336 = ptrtoint i8* %335 to i64
  %337 = and i64 %336, 63
  %338 = icmp eq i64 %337, 0
  call void @llvm.assume(i1 %338) #18
  %339 = getelementptr inbounds i8, i8* %335, i64 %334
  %340 = ptrtoint i8* %339 to i64
  %341 = and i64 %340, 63
  %342 = icmp eq i64 %341, 0
  call void @llvm.assume(i1 %342) #18
  %343 = bitcast i8* %339 to float*
  %344 = load i64, i64* %47, align 8
  %345 = getelementptr inbounds float, float* %343, i64 %344
  %346 = load i8*, i8** %48, align 8
  %347 = ptrtoint i8* %346 to i64
  %348 = and i64 %347, 63
  %349 = icmp eq i64 %348, 0
  call void @llvm.assume(i1 %349) #18
  %350 = getelementptr inbounds i8, i8* %346, i64 %334
  %351 = ptrtoint i8* %350 to i64
  %352 = and i64 %351, 63
  %353 = icmp eq i64 %352, 0
  call void @llvm.assume(i1 %353) #18
  %354 = bitcast i8* %350 to float*
  %355 = getelementptr inbounds float, float* %354, i64 %344
  %356 = load i8*, i8** %49, align 8
  %357 = ptrtoint i8* %356 to i64
  %358 = and i64 %357, 63
  %359 = icmp eq i64 %358, 0
  call void @llvm.assume(i1 %359) #18
  %360 = getelementptr inbounds i8, i8* %356, i64 %334
  %361 = ptrtoint i8* %360 to i64
  %362 = and i64 %361, 63
  %363 = icmp eq i64 %362, 0
  call void @llvm.assume(i1 %363) #18
  %364 = bitcast i8* %360 to float*
  %365 = getelementptr inbounds float, float* %364, i64 %344
  %366 = add nuw i64 %304, 1
  %367 = sub i64 %366, %295
  %368 = add nuw i64 %320, 1
  %369 = sub i64 %368, %312
  %370 = load i64, i64* %50, align 8
  %371 = load i64, i64* %51, align 8
  %372 = sub i64 %370, %371
  %373 = ashr exact i64 %372, 2
  %374 = mul i64 %369, %367
  %375 = icmp ult i64 %373, %374
  %376 = inttoptr i64 %371 to i32*
  br i1 %375, label %377, label %413

377:                                              ; preds = %328
  %378 = add i64 %374, 7
  %379 = and i64 %378, -8
  %380 = icmp ugt i64 %379, %373
  br i1 %380, label %381, label %383

381:                                              ; preds = %377
  %382 = sub i64 %379, %373
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.47"* nonnull %8, i64 %382) #18
  br label %387

383:                                              ; preds = %377
  %384 = icmp ult i64 %379, %373
  br i1 %384, label %385, label %387

385:                                              ; preds = %383
  %386 = getelementptr inbounds i32, i32* %376, i64 %379
  store i32* %386, i32** %15, align 8
  br label %387

387:                                              ; preds = %385, %383, %381
  %388 = load i64, i64* %52, align 8
  %389 = load i64, i64* %53, align 8
  %390 = sub i64 %388, %389
  %391 = ashr exact i64 %390, 2
  %392 = icmp ugt i64 %379, %391
  %393 = inttoptr i64 %389 to i32*
  br i1 %392, label %394, label %396

394:                                              ; preds = %387
  %395 = sub i64 %379, %391
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.47"* nonnull %9, i64 %395) #18
  br label %400

396:                                              ; preds = %387
  %397 = icmp ult i64 %379, %391
  br i1 %397, label %398, label %400

398:                                              ; preds = %396
  %399 = getelementptr inbounds i32, i32* %393, i64 %379
  store i32* %399, i32** %18, align 8
  br label %400

400:                                              ; preds = %398, %396, %394
  %401 = load i64, i64* %54, align 8
  %402 = load i64, i64* %55, align 8
  %403 = sub i64 %401, %402
  %404 = ashr exact i64 %403, 2
  %405 = icmp ugt i64 %379, %404
  %406 = inttoptr i64 %402 to float*
  br i1 %405, label %407, label %409

407:                                              ; preds = %400
  %408 = sub i64 %379, %404
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.77"* nonnull %10, i64 %408) #18
  br label %413

409:                                              ; preds = %400
  %410 = icmp ult i64 %379, %404
  br i1 %410, label %411, label %413

411:                                              ; preds = %409
  %412 = getelementptr inbounds float, float* %406, i64 %379
  store float* %412, float** %21, align 8
  br label %413

413:                                              ; preds = %411, %409, %407, %328
  %414 = icmp ugt i64 %312, %320
  br i1 %414, label %423, label %415

415:                                              ; preds = %413
  %416 = icmp ugt i64 %295, %304
  br label %417

417:                                              ; preds = %436, %415
  %418 = phi i64 [ %312, %415 ], [ %437, %436 ]
  br i1 %416, label %436, label %419

419:                                              ; preds = %417
  %420 = sub i64 %418, %312
  %421 = mul i64 %420, %367
  %422 = trunc i64 %418 to i32
  br label %439

423:                                              ; preds = %436, %413
  %424 = fdiv float 1.000000e+00, %285
  %425 = insertelement <8 x float> undef, float %424, i32 0
  %426 = shufflevector <8 x float> %425, <8 x float> undef, <8 x i32> zeroinitializer
  %427 = fmul float %285, 2.500000e-01
  %428 = fmul float %265, %427
  %429 = insertelement <8 x float> undef, float %428, i32 0
  %430 = shufflevector <8 x float> %429, <8 x float> undef, <8 x i32> zeroinitializer
  %431 = icmp eq i64 %374, 0
  br i1 %431, label %450, label %432

432:                                              ; preds = %423
  %433 = load i32*, i32** %14, align 8
  %434 = load i32*, i32** %17, align 8
  %435 = load float*, float** %20, align 8
  br label %460

436:                                              ; preds = %439, %417
  %437 = add i64 %418, 1
  %438 = icmp ugt i64 %437, %320
  br i1 %438, label %423, label %417

439:                                              ; preds = %439, %419
  %440 = phi i64 [ %295, %419 ], [ %448, %439 ]
  %441 = trunc i64 %440 to i32
  %442 = sub i64 %440, %295
  %443 = add i64 %442, %421
  %444 = load i32*, i32** %14, align 8
  %445 = getelementptr inbounds i32, i32* %444, i64 %443
  store i32 %441, i32* %445, align 4
  %446 = load i32*, i32** %17, align 8
  %447 = getelementptr inbounds i32, i32* %446, i64 %443
  store i32 %422, i32* %447, align 4
  %448 = add i64 %440, 1
  %449 = icmp ugt i64 %448, %304
  br i1 %449, label %436, label %439

450:                                              ; preds = %460, %423
  br i1 %414, label %566, label %451

451:                                              ; preds = %450
  %452 = load i64, i64* %40, align 8
  %453 = sub nsw i64 0, %452
  %454 = icmp ugt i64 %295, %304
  %455 = load float, float* %29, align 4
  %456 = insertelement <4 x float> undef, float %455, i32 0
  %457 = shufflevector <4 x float> %456, <4 x float> undef, <4 x i32> zeroinitializer
  %458 = shufflevector <8 x float> %244, <8 x float> undef, <4 x i32> zeroinitializer
  %459 = shufflevector <8 x float> %263, <8 x float> undef, <4 x i32> zeroinitializer
  br label %528

460:                                              ; preds = %432, %460
  %461 = phi i64 [ %526, %460 ], [ 0, %432 ]
  %462 = getelementptr inbounds i32, i32* %433, i64 %461
  %463 = bitcast i32* %462 to <8 x i32>*
  %464 = load <8 x i32>, <8 x i32>* %463, align 1, !alias.scope !151, !noalias !154
  %465 = sitofp <8 x i32> %464 to <8 x float>
  %466 = getelementptr inbounds i32, i32* %434, i64 %461
  %467 = bitcast i32* %466 to <8 x i32>*
  %468 = load <8 x i32>, <8 x i32>* %467, align 1, !alias.scope !156, !noalias !159
  %469 = sitofp <8 x i32> %468 to <8 x float>
  %470 = load float, float* %289, align 4
  %471 = insertelement <8 x float> undef, float %470, i32 0
  %472 = shufflevector <8 x float> %471, <8 x float> undef, <8 x i32> zeroinitializer
  %473 = fsub <8 x float> %465, %472
  %474 = load float, float* %306, align 4
  %475 = insertelement <8 x float> undef, float %474, i32 0
  %476 = shufflevector <8 x float> %475, <8 x float> undef, <8 x i32> zeroinitializer
  %477 = fsub <8 x float> %469, %476
  %478 = fmul <8 x float> %477, %477
  %479 = call <8 x float> @llvm.fma.v8f32(<8 x float> %473, <8 x float> %473, <8 x float> %478) #18
  %480 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %479) #18
  %481 = call <8 x float> @llvm.fma.v8f32(<8 x float> %480, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <8 x float> <float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000>) #18
  %482 = fmul <8 x float> %426, %481
  %483 = fcmp ole <8 x float> %482, zeroinitializer
  %484 = zext <8 x i1> %483 to <8 x i32>
  %485 = bitcast <8 x float> %482 to <8 x i32>
  %486 = and <8 x i32> %485, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %487 = bitcast <8 x i32> %486 to <8 x float>
  %488 = call <8 x float> @llvm.fma.v8f32(<8 x float> %487, <8 x float> <float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000>, <8 x float> <float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000>) #18
  %489 = call <8 x float> @llvm.fma.v8f32(<8 x float> %488, <8 x float> %487, <8 x float> <float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000>) #18
  %490 = call <8 x float> @llvm.fma.v8f32(<8 x float> %489, <8 x float> %487, <8 x float> <float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000>) #18
  %491 = call <8 x float> @llvm.fma.v8f32(<8 x float> %490, <8 x float> %487, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %492 = fmul <8 x float> %491, %491
  %493 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %492
  %494 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %493
  %495 = call <8 x float> @llvm.fma.v8f32(<8 x float> %494, <8 x float> %493, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %496 = shl nuw <8 x i32> %484, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %497 = bitcast <8 x i32> %496 to <4 x i64>
  %498 = bitcast <8 x float> %495 to <4 x i64>
  %499 = xor <4 x i64> %498, %497
  %500 = call <8 x float> @llvm.fma.v8f32(<8 x float> %480, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <8 x float> <float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000>) #18
  %501 = fmul <8 x float> %426, %500
  %502 = fcmp ole <8 x float> %501, zeroinitializer
  %503 = zext <8 x i1> %502 to <8 x i32>
  %504 = bitcast <8 x float> %501 to <8 x i32>
  %505 = and <8 x i32> %504, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %506 = bitcast <8 x i32> %505 to <8 x float>
  %507 = call <8 x float> @llvm.fma.v8f32(<8 x float> %506, <8 x float> <float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000>, <8 x float> <float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000>) #18
  %508 = call <8 x float> @llvm.fma.v8f32(<8 x float> %507, <8 x float> %506, <8 x float> <float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000>) #18
  %509 = call <8 x float> @llvm.fma.v8f32(<8 x float> %508, <8 x float> %506, <8 x float> <float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000>) #18
  %510 = call <8 x float> @llvm.fma.v8f32(<8 x float> %509, <8 x float> %506, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %511 = fmul <8 x float> %510, %510
  %512 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %511
  %513 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %512
  %514 = call <8 x float> @llvm.fma.v8f32(<8 x float> %513, <8 x float> %512, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %515 = shl nuw <8 x i32> %503, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %516 = bitcast <8 x i32> %515 to <4 x i64>
  %517 = bitcast <8 x float> %514 to <4 x i64>
  %518 = xor <4 x i64> %517, %516
  %519 = bitcast <4 x i64> %499 to <8 x float>
  %520 = bitcast <4 x i64> %518 to <8 x float>
  %521 = fsub <8 x float> %519, %520
  %522 = fmul <8 x float> %430, %521
  %523 = fmul <8 x float> %521, %522
  %524 = getelementptr inbounds float, float* %435, i64 %461
  %525 = bitcast float* %524 to <8 x float>*
  store <8 x float> %523, <8 x float>* %525, align 1, !alias.scope !161
  %526 = add i64 %461, 8
  %527 = icmp ult i64 %526, %374
  br i1 %527, label %460, label %450

528:                                              ; preds = %537, %451
  %529 = phi i64 [ %312, %451 ], [ %539, %537 ]
  %530 = phi i64 [ %453, %451 ], [ %538, %537 ]
  br i1 %454, label %537, label %531

531:                                              ; preds = %528
  %532 = sub i64 %529, %312
  %533 = mul i64 %532, %367
  %534 = getelementptr inbounds float, float* %345, i64 %530
  %535 = getelementptr inbounds float, float* %355, i64 %530
  %536 = getelementptr inbounds float, float* %365, i64 %530
  br label %541

537:                                              ; preds = %541, %528
  %538 = add i64 %530, %330
  %539 = add i64 %529, 1
  %540 = icmp ugt i64 %539, %320
  br i1 %540, label %566, label %528

541:                                              ; preds = %541, %531
  %542 = phi i64 [ %295, %531 ], [ %564, %541 ]
  %543 = load float*, float** %20, align 8
  %544 = getelementptr inbounds float, float* %543, i64 %533
  %545 = getelementptr inbounds float, float* %544, i64 %296
  %546 = getelementptr inbounds float, float* %545, i64 %542
  %547 = load float, float* %546, align 1, !alias.scope !164
  %548 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %547, i32 0
  %549 = getelementptr inbounds float, float* %534, i64 %542
  %550 = load float, float* %549, align 4, !alias.scope !167
  %551 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %550, i32 0
  %552 = call <4 x float> @llvm.fma.v4f32(<4 x float> %457, <4 x float> %548, <4 x float> %551) #18
  %553 = extractelement <4 x float> %552, i32 0
  store float %553, float* %549, align 4, !alias.scope !172
  %554 = getelementptr inbounds float, float* %535, i64 %542
  %555 = load float, float* %554, align 4, !alias.scope !167
  %556 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %555, i32 0
  %557 = call <4 x float> @llvm.fma.v4f32(<4 x float> %458, <4 x float> %548, <4 x float> %556) #18
  %558 = extractelement <4 x float> %557, i32 0
  store float %558, float* %554, align 4, !alias.scope !172
  %559 = getelementptr inbounds float, float* %536, i64 %542
  %560 = load float, float* %559, align 4, !alias.scope !167
  %561 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %560, i32 0
  %562 = call <4 x float> @llvm.fma.v4f32(<4 x float> %459, <4 x float> %548, <4 x float> %561) #18
  %563 = extractelement <4 x float> %562, i32 0
  store float %563, float* %559, align 4, !alias.scope !172
  %564 = add i64 %542, 1
  %565 = icmp ugt i64 %564, %304
  br i1 %565, label %537, label %541

566:                                              ; preds = %537, %102, %324, %450
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %28) #18
  %567 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %104, i64 1
  %568 = icmp eq %"struct.std::__1::pair.65"* %567, %25
  br i1 %568, label %80, label %102
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl6N_SSE412_GLOBAL__N_114DrawFromPointsEPNS_6Image3IfEERKNS_4RectES7_RKNS_6SplineEbRKNSt3__16vectorINSB_4pairINS8_5PointEfEENSB_9allocatorISF_EEEEf(%"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::Spline"* nocapture readonly dereferenceable(536), i1 zeroext, %"class.std::__1::vector.63"* nocapture readonly dereferenceable(24), float) #16 {
  %8 = alloca %"class.std::__1::vector.47", align 8
  %9 = alloca %"class.std::__1::vector.47", align 8
  %10 = alloca %"class.std::__1::vector.77", align 8
  %11 = fdiv float 1.000000e+00, %6
  %12 = bitcast %"class.std::__1::vector.47"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #18
  %13 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %8, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %8, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 24, i1 false) #18
  %15 = bitcast %"class.std::__1::vector.47"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #18
  %16 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %9, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %9, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #18
  %18 = bitcast %"class.std::__1::vector.77"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #18
  %19 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %10, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %10, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #18
  %21 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %5, i64 0, i32 0, i32 0
  %22 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %21, align 8
  %23 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %5, i64 0, i32 0, i32 1
  %24 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %23, align 8
  %25 = icmp eq %"struct.std::__1::pair.65"* %22, %24
  br i1 %25, label %50, label %26

26:                                               ; preds = %7
  %27 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %28 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %29 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %30 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %31 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %32 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %36 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %37 = bitcast i32** %14 to i64*
  %38 = bitcast %"class.std::__1::vector.47"* %8 to i64*
  %39 = bitcast i32** %17 to i64*
  %40 = bitcast %"class.std::__1::vector.47"* %9 to i64*
  %41 = bitcast float** %20 to i64*
  %42 = bitcast %"class.std::__1::vector.77"* %10 to i64*
  br label %65

43:                                               ; preds = %407
  %44 = load float*, float** %19, align 8
  %45 = icmp eq float* %44, null
  br i1 %45, label %50, label %46

46:                                               ; preds = %43
  %47 = bitcast float* %44 to i8*
  %48 = ptrtoint float* %44 to i64
  %49 = bitcast float** %20 to i64*
  store i64 %48, i64* %49, align 8
  call void @_ZdlPv(i8* %47) #21
  br label %50

50:                                               ; preds = %7, %43, %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #18
  %51 = load i32*, i32** %16, align 8
  %52 = icmp eq i32* %51, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %50
  %54 = ptrtoint i32* %51 to i64
  %55 = bitcast i32** %17 to i64*
  store i64 %54, i64* %55, align 8
  %56 = bitcast i32* %51 to i8*
  call void @_ZdlPv(i8* %56) #21
  br label %57

57:                                               ; preds = %50, %53
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #18
  %58 = load i32*, i32** %13, align 8
  %59 = icmp eq i32* %58, null
  br i1 %59, label %64, label %60

60:                                               ; preds = %57
  %61 = ptrtoint i32* %58 to i64
  %62 = bitcast i32** %14 to i64*
  store i64 %61, i64* %62, align 8
  %63 = bitcast i32* %58 to i8*
  call void @_ZdlPv(i8* %63) #21
  br label %64

64:                                               ; preds = %57, %60
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #18
  ret void

65:                                               ; preds = %26, %407
  %66 = phi i32 [ 0, %26 ], [ %121, %407 ]
  %67 = phi %"struct.std::__1::pair.65"* [ %22, %26 ], [ %408, %407 ]
  %68 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %67, i64 0, i32 1
  %69 = load float, float* %68, align 4
  %70 = fsub float -0.000000e+00, %69
  %71 = sitofp i32 %66 to float
  %72 = fmul float %11, %71
  %73 = fcmp olt float %72, 1.000000e+00
  %74 = select i1 %73, float %72, float 1.000000e+00
  %75 = fmul float %74, 3.100000e+01
  %76 = fadd float %75, 5.000000e-01
  %77 = insertelement <4 x float> undef, float %76, i32 0
  %78 = shufflevector <4 x float> %77, <4 x float> undef, <4 x i32> zeroinitializer
  br label %410

79:                                               ; preds = %545, %79
  %80 = phi i64 [ %118, %79 ], [ 0, %545 ]
  %81 = phi <4 x float> [ %117, %79 ], [ zeroinitializer, %545 ]
  %82 = getelementptr inbounds [32 x float], [32 x float]* @_ZZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKffE12kMultipliers, i64 0, i64 %80
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 16, !alias.scope !177
  %85 = fmul <4 x float> %78, %84
  %86 = fmul <4 x float> %85, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>
  %87 = call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %86, i32 9) #18
  %88 = fmul <4 x float> %87, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %89 = fsub <4 x float> %85, %88
  %90 = fsub <4 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, %89
  %91 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %89, <4 x float> %90) #18
  %92 = fcmp oge <4 x float> %91, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %93 = zext <4 x i1> %92 to <4 x i32>
  %94 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %91
  %95 = select <4 x i1> %92, <4 x float> %94, <4 x float> %91
  %96 = fmul <4 x float> %95, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %97 = fmul <4 x float> %96, %96
  %98 = fmul <4 x float> %97, %97
  %99 = fmul <4 x float> %97, <float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000>
  %100 = fadd <4 x float> %99, <float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000>
  %101 = fmul <4 x float> %98, <float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000>
  %102 = fadd <4 x float> %101, %100
  %103 = fmul <4 x float> %102, %102
  %104 = fadd <4 x float> %103, <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>
  %105 = fmul <4 x float> %104, %104
  %106 = fadd <4 x float> %105, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %107 = shl nuw <4 x i32> %93, <i32 31, i32 31, i32 31, i32 31>
  %108 = bitcast <4 x i32> %107 to <2 x i64>
  %109 = bitcast <4 x float> %106 to <2 x i64>
  %110 = xor <2 x i64> %109, %108
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 2, i64 %80
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 1, !alias.scope !180
  %115 = fmul <4 x float> %114, %111
  %116 = fmul <4 x float> %115, <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>
  %117 = fadd <4 x float> %81, %116
  %118 = add nuw nsw i64 %80, 4
  %119 = icmp ult i64 %118, 32
  br i1 %119, label %79, label %120

120:                                              ; preds = %79
  %121 = add nuw nsw i32 %66, 1
  %122 = shufflevector <4 x float> %117, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %123 = fadd <4 x float> %117, %122
  %124 = shufflevector <4 x float> %123, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %125 = fadd <4 x float> %123, %124
  %126 = extractelement <4 x float> %125, i32 0
  %127 = fmul float %126, %126
  %128 = fmul float %127, 0x40126BB1C0000000
  %129 = load i64, i64* %27, align 8
  %130 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %67, i64 0, i32 0, i32 0
  %131 = load float, float* %130, align 4
  %132 = fsub float %131, %128
  %133 = fadd float %132, 5.000000e-01
  %134 = fptosi float %133 to i64
  %135 = icmp slt i64 %129, %134
  %136 = select i1 %135, i64 %134, i64 %129
  %137 = sub i64 0, %136
  %138 = fadd float %128, %131
  %139 = fadd float %138, 5.000000e-01
  %140 = fptosi float %139 to i64
  %141 = load i64, i64* %28, align 8
  %142 = add i64 %129, -1
  %143 = add i64 %142, %141
  %144 = icmp slt i64 %143, %140
  %145 = select i1 %144, i64 %143, i64 %140
  %146 = load i64, i64* %29, align 8
  %147 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %67, i64 0, i32 0, i32 1
  %148 = load float, float* %147, align 4
  %149 = fsub float %148, %128
  %150 = fadd float %149, 5.000000e-01
  %151 = fptosi float %150 to i64
  %152 = icmp slt i64 %146, %151
  %153 = select i1 %152, i64 %151, i64 %146
  %154 = fadd float %128, %148
  %155 = fadd float %154, 5.000000e-01
  %156 = fptosi float %155 to i64
  %157 = load i64, i64* %30, align 8
  %158 = add i64 %146, -1
  %159 = add i64 %158, %157
  %160 = icmp slt i64 %159, %156
  %161 = select i1 %160, i64 %159, i64 %156
  %162 = icmp slt i64 %145, 1
  %163 = icmp slt i64 %145, %136
  %164 = or i1 %162, %163
  br i1 %164, label %407, label %165

165:                                              ; preds = %120
  %166 = icmp slt i64 %161, 1
  %167 = icmp slt i64 %161, %153
  %168 = or i1 %166, %167
  br i1 %168, label %407, label %169

169:                                              ; preds = %165
  %170 = load i64, i64* %31, align 8
  %171 = lshr i64 %170, 2
  %172 = sub i64 %153, %146
  %173 = load i64, i64* %32, align 8
  %174 = add i64 %172, %173
  %175 = mul i64 %174, %170
  %176 = load i8*, i8** %33, align 8
  %177 = ptrtoint i8* %176 to i64
  %178 = and i64 %177, 63
  %179 = icmp eq i64 %178, 0
  call void @llvm.assume(i1 %179) #18
  %180 = getelementptr inbounds i8, i8* %176, i64 %175
  %181 = ptrtoint i8* %180 to i64
  %182 = and i64 %181, 63
  %183 = icmp eq i64 %182, 0
  call void @llvm.assume(i1 %183) #18
  %184 = bitcast i8* %180 to float*
  %185 = load i64, i64* %34, align 8
  %186 = getelementptr inbounds float, float* %184, i64 %185
  %187 = load i8*, i8** %35, align 8
  %188 = ptrtoint i8* %187 to i64
  %189 = and i64 %188, 63
  %190 = icmp eq i64 %189, 0
  call void @llvm.assume(i1 %190) #18
  %191 = getelementptr inbounds i8, i8* %187, i64 %175
  %192 = ptrtoint i8* %191 to i64
  %193 = and i64 %192, 63
  %194 = icmp eq i64 %193, 0
  call void @llvm.assume(i1 %194) #18
  %195 = bitcast i8* %191 to float*
  %196 = getelementptr inbounds float, float* %195, i64 %185
  %197 = load i8*, i8** %36, align 8
  %198 = ptrtoint i8* %197 to i64
  %199 = and i64 %198, 63
  %200 = icmp eq i64 %199, 0
  call void @llvm.assume(i1 %200) #18
  %201 = getelementptr inbounds i8, i8* %197, i64 %175
  %202 = ptrtoint i8* %201 to i64
  %203 = and i64 %202, 63
  %204 = icmp eq i64 %203, 0
  call void @llvm.assume(i1 %204) #18
  %205 = bitcast i8* %201 to float*
  %206 = getelementptr inbounds float, float* %205, i64 %185
  %207 = add nuw i64 %145, 1
  %208 = sub i64 %207, %136
  %209 = add nuw i64 %161, 1
  %210 = sub i64 %209, %153
  %211 = load i64, i64* %37, align 8
  %212 = load i64, i64* %38, align 8
  %213 = sub i64 %211, %212
  %214 = ashr exact i64 %213, 2
  %215 = mul i64 %210, %208
  %216 = icmp ult i64 %214, %215
  br i1 %216, label %217, label %254

217:                                              ; preds = %169
  %218 = add i64 %215, 3
  %219 = and i64 %218, -4
  %220 = icmp ugt i64 %219, %214
  %221 = inttoptr i64 %212 to i32*
  br i1 %220, label %222, label %224

222:                                              ; preds = %217
  %223 = sub i64 %219, %214
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.47"* nonnull %8, i64 %223) #18
  br label %228

224:                                              ; preds = %217
  %225 = icmp ult i64 %219, %214
  br i1 %225, label %226, label %228

226:                                              ; preds = %224
  %227 = getelementptr inbounds i32, i32* %221, i64 %219
  store i32* %227, i32** %14, align 8
  br label %228

228:                                              ; preds = %226, %224, %222
  %229 = load i64, i64* %39, align 8
  %230 = load i64, i64* %40, align 8
  %231 = sub i64 %229, %230
  %232 = ashr exact i64 %231, 2
  %233 = icmp ugt i64 %219, %232
  %234 = inttoptr i64 %230 to i32*
  br i1 %233, label %235, label %237

235:                                              ; preds = %228
  %236 = sub i64 %219, %232
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.47"* nonnull %9, i64 %236) #18
  br label %241

237:                                              ; preds = %228
  %238 = icmp ult i64 %219, %232
  br i1 %238, label %239, label %241

239:                                              ; preds = %237
  %240 = getelementptr inbounds i32, i32* %234, i64 %219
  store i32* %240, i32** %17, align 8
  br label %241

241:                                              ; preds = %239, %237, %235
  %242 = load i64, i64* %41, align 8
  %243 = load i64, i64* %42, align 8
  %244 = sub i64 %242, %243
  %245 = ashr exact i64 %244, 2
  %246 = icmp ugt i64 %219, %245
  %247 = inttoptr i64 %243 to float*
  br i1 %246, label %248, label %250

248:                                              ; preds = %241
  %249 = sub i64 %219, %245
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.77"* nonnull %10, i64 %249) #18
  br label %254

250:                                              ; preds = %241
  %251 = icmp ult i64 %219, %245
  br i1 %251, label %252, label %254

252:                                              ; preds = %250
  %253 = getelementptr inbounds float, float* %247, i64 %219
  store float* %253, float** %20, align 8
  br label %254

254:                                              ; preds = %252, %250, %248, %169
  %255 = icmp ugt i64 %153, %161
  br i1 %255, label %264, label %256

256:                                              ; preds = %254
  %257 = icmp ugt i64 %136, %145
  br label %258

258:                                              ; preds = %273, %256
  %259 = phi i64 [ %153, %256 ], [ %274, %273 ]
  br i1 %257, label %273, label %260

260:                                              ; preds = %258
  %261 = sub i64 %259, %153
  %262 = mul i64 %261, %208
  %263 = trunc i64 %259 to i32
  br label %276

264:                                              ; preds = %273, %254
  %265 = fdiv float 1.000000e+00, %126
  %266 = insertelement <4 x float> undef, float %265, i32 0
  %267 = shufflevector <4 x float> %266, <4 x float> undef, <4 x i32> zeroinitializer
  %268 = fmul float %126, 2.500000e-01
  %269 = fmul float %551, %268
  %270 = insertelement <4 x float> undef, float %269, i32 0
  %271 = shufflevector <4 x float> %270, <4 x float> undef, <4 x i32> zeroinitializer
  %272 = icmp eq i64 %215, 0
  br i1 %272, label %287, label %292

273:                                              ; preds = %276, %258
  %274 = add i64 %259, 1
  %275 = icmp ugt i64 %274, %161
  br i1 %275, label %264, label %258

276:                                              ; preds = %276, %260
  %277 = phi i64 [ %136, %260 ], [ %285, %276 ]
  %278 = trunc i64 %277 to i32
  %279 = sub i64 %277, %136
  %280 = add i64 %279, %262
  %281 = load i32*, i32** %13, align 8
  %282 = getelementptr inbounds i32, i32* %281, i64 %280
  store i32 %278, i32* %282, align 4
  %283 = load i32*, i32** %16, align 8
  %284 = getelementptr inbounds i32, i32* %283, i64 %280
  store i32 %263, i32* %284, align 4
  %285 = add i64 %277, 1
  %286 = icmp ugt i64 %285, %145
  br i1 %286, label %273, label %276

287:                                              ; preds = %292, %264
  br i1 %255, label %407, label %288

288:                                              ; preds = %287
  %289 = load i64, i64* %27, align 8
  %290 = sub nsw i64 0, %289
  %291 = icmp ugt i64 %136, %145
  br label %373

292:                                              ; preds = %264, %292
  %293 = phi i64 [ %371, %292 ], [ 0, %264 ]
  %294 = load i32*, i32** %13, align 8
  %295 = getelementptr inbounds i32, i32* %294, i64 %293
  %296 = bitcast i32* %295 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 1, !alias.scope !183
  %298 = sitofp <4 x i32> %297 to <4 x float>
  %299 = load i32*, i32** %16, align 8
  %300 = getelementptr inbounds i32, i32* %299, i64 %293
  %301 = bitcast i32* %300 to <4 x i32>*
  %302 = load <4 x i32>, <4 x i32>* %301, align 1, !alias.scope !186
  %303 = sitofp <4 x i32> %302 to <4 x float>
  %304 = load float, float* %130, align 4
  %305 = insertelement <4 x float> undef, float %304, i32 0
  %306 = shufflevector <4 x float> %305, <4 x float> undef, <4 x i32> zeroinitializer
  %307 = fsub <4 x float> %298, %306
  %308 = load float, float* %147, align 4
  %309 = insertelement <4 x float> undef, float %308, i32 0
  %310 = shufflevector <4 x float> %309, <4 x float> undef, <4 x i32> zeroinitializer
  %311 = fsub <4 x float> %303, %310
  %312 = fmul <4 x float> %311, %311
  %313 = fmul <4 x float> %307, %307
  %314 = fadd <4 x float> %313, %312
  %315 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %314) #18
  %316 = fmul <4 x float> %315, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %317 = fadd <4 x float> %316, <float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000, float 0x3FD6A09E60000000>
  %318 = fmul <4 x float> %267, %317
  %319 = fcmp ole <4 x float> %318, zeroinitializer
  %320 = zext <4 x i1> %319 to <4 x i32>
  %321 = bitcast <4 x float> %318 to <4 x i32>
  %322 = and <4 x i32> %321, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %323 = bitcast <4 x i32> %322 to <4 x float>
  %324 = fmul <4 x float> %323, <float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000>
  %325 = fadd <4 x float> %324, <float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000>
  %326 = fmul <4 x float> %325, %323
  %327 = fadd <4 x float> %326, <float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000>
  %328 = fmul <4 x float> %327, %323
  %329 = fadd <4 x float> %328, <float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000>
  %330 = fmul <4 x float> %329, %323
  %331 = fadd <4 x float> %330, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %332 = fmul <4 x float> %331, %331
  %333 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %332
  %334 = fmul <4 x float> %333, %333
  %335 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %334
  %336 = shl nuw <4 x i32> %320, <i32 31, i32 31, i32 31, i32 31>
  %337 = bitcast <4 x i32> %336 to <2 x i64>
  %338 = bitcast <4 x float> %335 to <2 x i64>
  %339 = xor <2 x i64> %338, %337
  %340 = bitcast <2 x i64> %339 to <4 x float>
  %341 = fadd <4 x float> %316, <float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000, float 0xBFD6A09E60000000>
  %342 = fmul <4 x float> %267, %341
  %343 = fcmp ole <4 x float> %342, zeroinitializer
  %344 = zext <4 x i1> %343 to <4 x i32>
  %345 = bitcast <4 x float> %342 to <4 x i32>
  %346 = and <4 x i32> %345, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %347 = bitcast <4 x i32> %346 to <4 x float>
  %348 = fmul <4 x float> %347, <float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000, float 0x3FB3E6BB60000000>
  %349 = fadd <4 x float> %348, <float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000, float 0x3F2AE76220000000>
  %350 = fmul <4 x float> %349, %347
  %351 = fadd <4 x float> %350, <float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000, float 0x3FCDB61D80000000>
  %352 = fmul <4 x float> %351, %347
  %353 = fadd <4 x float> %352, <float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000, float 0x3FD1C7D0E0000000>
  %354 = fmul <4 x float> %353, %347
  %355 = fadd <4 x float> %354, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %356 = fmul <4 x float> %355, %355
  %357 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %356
  %358 = fmul <4 x float> %357, %357
  %359 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %358
  %360 = shl nuw <4 x i32> %344, <i32 31, i32 31, i32 31, i32 31>
  %361 = bitcast <4 x i32> %360 to <2 x i64>
  %362 = bitcast <4 x float> %359 to <2 x i64>
  %363 = xor <2 x i64> %362, %361
  %364 = bitcast <2 x i64> %363 to <4 x float>
  %365 = fsub <4 x float> %340, %364
  %366 = fmul <4 x float> %271, %365
  %367 = fmul <4 x float> %365, %366
  %368 = load float*, float** %19, align 8
  %369 = getelementptr inbounds float, float* %368, i64 %293
  %370 = bitcast float* %369 to <4 x float>*
  store <4 x float> %367, <4 x float>* %370, align 1, !alias.scope !189
  %371 = add i64 %293, 4
  %372 = icmp ult i64 %371, %215
  br i1 %372, label %292, label %287

373:                                              ; preds = %382, %288
  %374 = phi i64 [ %153, %288 ], [ %384, %382 ]
  %375 = phi i64 [ %290, %288 ], [ %383, %382 ]
  br i1 %291, label %382, label %376

376:                                              ; preds = %373
  %377 = sub i64 %374, %153
  %378 = mul i64 %377, %208
  %379 = getelementptr inbounds float, float* %186, i64 %375
  %380 = getelementptr inbounds float, float* %196, i64 %375
  %381 = getelementptr inbounds float, float* %206, i64 %375
  br label %386

382:                                              ; preds = %386, %373
  %383 = add i64 %375, %171
  %384 = add i64 %374, 1
  %385 = icmp ugt i64 %384, %161
  br i1 %385, label %407, label %373

386:                                              ; preds = %386, %376
  %387 = phi i64 [ %136, %376 ], [ %405, %386 ]
  %388 = load float*, float** %19, align 8
  %389 = getelementptr inbounds float, float* %388, i64 %378
  %390 = getelementptr inbounds float, float* %389, i64 %137
  %391 = getelementptr inbounds float, float* %390, i64 %387
  %392 = load float, float* %391, align 1, !alias.scope !192
  %393 = getelementptr inbounds float, float* %379, i64 %387
  %394 = load float, float* %393, align 4, !alias.scope !195
  %395 = fmul float %392, %456
  %396 = fadd float %395, %394
  store float %396, float* %393, align 4, !alias.scope !200
  %397 = getelementptr inbounds float, float* %380, i64 %387
  %398 = load float, float* %397, align 4, !alias.scope !195
  %399 = fmul float %392, %503
  %400 = fadd float %399, %398
  store float %400, float* %397, align 4, !alias.scope !200
  %401 = getelementptr inbounds float, float* %381, i64 %387
  %402 = load float, float* %401, align 4, !alias.scope !195
  %403 = fmul float %392, %550
  %404 = fadd float %403, %402
  store float %404, float* %401, align 4, !alias.scope !200
  %405 = add i64 %387, 1
  %406 = icmp ugt i64 %405, %145
  br i1 %406, label %382, label %386

407:                                              ; preds = %382, %120, %165, %287
  %408 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %67, i64 1
  %409 = icmp eq %"struct.std::__1::pair.65"* %408, %24
  br i1 %409, label %43, label %65

410:                                              ; preds = %65, %410
  %411 = phi i64 [ %449, %410 ], [ 0, %65 ]
  %412 = phi <4 x float> [ %448, %410 ], [ zeroinitializer, %65 ]
  %413 = getelementptr inbounds [32 x float], [32 x float]* @_ZZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKffE12kMultipliers, i64 0, i64 %411
  %414 = bitcast float* %413 to <4 x float>*
  %415 = load <4 x float>, <4 x float>* %414, align 16, !alias.scope !205
  %416 = fmul <4 x float> %78, %415
  %417 = fmul <4 x float> %416, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>
  %418 = call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %417, i32 9) #18
  %419 = fmul <4 x float> %418, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %420 = fsub <4 x float> %416, %419
  %421 = fsub <4 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, %420
  %422 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %420, <4 x float> %421) #18
  %423 = fcmp oge <4 x float> %422, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %424 = zext <4 x i1> %423 to <4 x i32>
  %425 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %422
  %426 = select <4 x i1> %423, <4 x float> %425, <4 x float> %422
  %427 = fmul <4 x float> %426, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %428 = fmul <4 x float> %427, %427
  %429 = fmul <4 x float> %428, %428
  %430 = fmul <4 x float> %428, <float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000>
  %431 = fadd <4 x float> %430, <float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000>
  %432 = fmul <4 x float> %429, <float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000>
  %433 = fadd <4 x float> %432, %431
  %434 = fmul <4 x float> %433, %433
  %435 = fadd <4 x float> %434, <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>
  %436 = fmul <4 x float> %435, %435
  %437 = fadd <4 x float> %436, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %438 = shl nuw <4 x i32> %424, <i32 31, i32 31, i32 31, i32 31>
  %439 = bitcast <4 x i32> %438 to <2 x i64>
  %440 = bitcast <4 x float> %437 to <2 x i64>
  %441 = xor <2 x i64> %440, %439
  %442 = bitcast <2 x i64> %441 to <4 x float>
  %443 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 0, i64 %411
  %444 = bitcast float* %443 to <4 x float>*
  %445 = load <4 x float>, <4 x float>* %444, align 1, !alias.scope !208
  %446 = fmul <4 x float> %445, %442
  %447 = fmul <4 x float> %446, <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>
  %448 = fadd <4 x float> %412, %447
  %449 = add nuw nsw i64 %411, 4
  %450 = icmp ult i64 %449, 32
  br i1 %450, label %410, label %451

451:                                              ; preds = %410
  %452 = shufflevector <4 x float> %448, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %453 = fadd <4 x float> %448, %452
  %454 = shufflevector <4 x float> %453, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %455 = fadd <4 x float> %453, %454
  %456 = extractelement <4 x float> %455, i32 0
  br label %457

457:                                              ; preds = %457, %451
  %458 = phi i64 [ %496, %457 ], [ 0, %451 ]
  %459 = phi <4 x float> [ %495, %457 ], [ zeroinitializer, %451 ]
  %460 = getelementptr inbounds [32 x float], [32 x float]* @_ZZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKffE12kMultipliers, i64 0, i64 %458
  %461 = bitcast float* %460 to <4 x float>*
  %462 = load <4 x float>, <4 x float>* %461, align 16, !alias.scope !205
  %463 = fmul <4 x float> %78, %462
  %464 = fmul <4 x float> %463, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>
  %465 = call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %464, i32 9) #18
  %466 = fmul <4 x float> %465, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %467 = fsub <4 x float> %463, %466
  %468 = fsub <4 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, %467
  %469 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %467, <4 x float> %468) #18
  %470 = fcmp oge <4 x float> %469, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %471 = zext <4 x i1> %470 to <4 x i32>
  %472 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %469
  %473 = select <4 x i1> %470, <4 x float> %472, <4 x float> %469
  %474 = fmul <4 x float> %473, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %475 = fmul <4 x float> %474, %474
  %476 = fmul <4 x float> %475, %475
  %477 = fmul <4 x float> %475, <float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000>
  %478 = fadd <4 x float> %477, <float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000>
  %479 = fmul <4 x float> %476, <float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000>
  %480 = fadd <4 x float> %479, %478
  %481 = fmul <4 x float> %480, %480
  %482 = fadd <4 x float> %481, <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>
  %483 = fmul <4 x float> %482, %482
  %484 = fadd <4 x float> %483, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %485 = shl nuw <4 x i32> %471, <i32 31, i32 31, i32 31, i32 31>
  %486 = bitcast <4 x i32> %485 to <2 x i64>
  %487 = bitcast <4 x float> %484 to <2 x i64>
  %488 = xor <2 x i64> %487, %486
  %489 = bitcast <2 x i64> %488 to <4 x float>
  %490 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 1, i64 %458
  %491 = bitcast float* %490 to <4 x float>*
  %492 = load <4 x float>, <4 x float>* %491, align 1, !alias.scope !208
  %493 = fmul <4 x float> %492, %489
  %494 = fmul <4 x float> %493, <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>
  %495 = fadd <4 x float> %459, %494
  %496 = add nuw nsw i64 %458, 4
  %497 = icmp ult i64 %496, 32
  br i1 %497, label %457, label %498

498:                                              ; preds = %457
  %499 = shufflevector <4 x float> %495, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %500 = fadd <4 x float> %495, %499
  %501 = shufflevector <4 x float> %500, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %502 = fadd <4 x float> %500, %501
  %503 = extractelement <4 x float> %502, i32 0
  br label %504

504:                                              ; preds = %504, %498
  %505 = phi i64 [ %543, %504 ], [ 0, %498 ]
  %506 = phi <4 x float> [ %542, %504 ], [ zeroinitializer, %498 ]
  %507 = getelementptr inbounds [32 x float], [32 x float]* @_ZZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKffE12kMultipliers, i64 0, i64 %505
  %508 = bitcast float* %507 to <4 x float>*
  %509 = load <4 x float>, <4 x float>* %508, align 16, !alias.scope !205
  %510 = fmul <4 x float> %78, %509
  %511 = fmul <4 x float> %510, <float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000, float 0x3FC45F3060000000>
  %512 = call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %511, i32 9) #18
  %513 = fmul <4 x float> %512, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %514 = fsub <4 x float> %510, %513
  %515 = fsub <4 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, %514
  %516 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %514, <4 x float> %515) #18
  %517 = fcmp oge <4 x float> %516, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %518 = zext <4 x i1> %517 to <4 x i32>
  %519 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %516
  %520 = select <4 x i1> %517, <4 x float> %519, <4 x float> %516
  %521 = fmul <4 x float> %520, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %522 = fmul <4 x float> %521, %521
  %523 = fmul <4 x float> %522, %522
  %524 = fmul <4 x float> %522, <float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000, float 0xBFEAE87000000000>
  %525 = fadd <4 x float> %524, <float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000, float 0x3FFAE89F80000000>
  %526 = fmul <4 x float> %523, <float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000, float 0x3FB1D197C0000000>
  %527 = fadd <4 x float> %526, %525
  %528 = fmul <4 x float> %527, %527
  %529 = fadd <4 x float> %528, <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>
  %530 = fmul <4 x float> %529, %529
  %531 = fadd <4 x float> %530, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %532 = shl nuw <4 x i32> %518, <i32 31, i32 31, i32 31, i32 31>
  %533 = bitcast <4 x i32> %532 to <2 x i64>
  %534 = bitcast <4 x float> %531 to <2 x i64>
  %535 = xor <2 x i64> %534, %533
  %536 = bitcast <2 x i64> %535 to <4 x float>
  %537 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 2, i64 %505
  %538 = bitcast float* %537 to <4 x float>*
  %539 = load <4 x float>, <4 x float>* %538, align 1, !alias.scope !208
  %540 = fmul <4 x float> %539, %536
  %541 = fmul <4 x float> %540, <float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000, float 0x3FF6A09E60000000>
  %542 = fadd <4 x float> %506, %541
  %543 = add nuw nsw i64 %505, 4
  %544 = icmp ult i64 %543, 32
  br i1 %544, label %504, label %545

545:                                              ; preds = %504
  %546 = shufflevector <4 x float> %542, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %547 = fadd <4 x float> %542, %546
  %548 = shufflevector <4 x float> %547, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %549 = fadd <4 x float> %547, %548
  %550 = extractelement <4 x float> %549, i32 0
  %551 = select i1 %4, float %69, float %70
  br label %79
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl8N_SCALAR12_GLOBAL__N_114DrawFromPointsEPNS_6Image3IfEERKNS_4RectES7_RKNS_6SplineEbRKNSt3__16vectorINSB_4pairINS8_5PointEfEENSB_9allocatorISF_EEEEf(%"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::Spline"* nocapture readonly dereferenceable(536), i1 zeroext, %"class.std::__1::vector.63"* nocapture readonly dereferenceable(24), float) #0 {
  %8 = alloca %"class.std::__1::vector.47", align 8
  %9 = alloca %"class.std::__1::vector.47", align 8
  %10 = alloca %"class.std::__1::vector.77", align 8
  %11 = fdiv float 1.000000e+00, %6
  %12 = bitcast %"class.std::__1::vector.47"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #18
  %13 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %8, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %8, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 24, i1 false) #18
  %15 = bitcast %"class.std::__1::vector.47"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #18
  %16 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %9, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %9, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #18
  %18 = bitcast %"class.std::__1::vector.77"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #18
  %19 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %10, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %10, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #18
  %21 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %5, i64 0, i32 0, i32 0
  %22 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %21, align 8
  %23 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %5, i64 0, i32 0, i32 1
  %24 = load %"struct.std::__1::pair.65"*, %"struct.std::__1::pair.65"** %23, align 8
  %25 = icmp eq %"struct.std::__1::pair.65"* %22, %24
  br i1 %25, label %54, label %26

26:                                               ; preds = %7
  %27 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 2, i64 0
  %28 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %30 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %31 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %33 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %35 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %36 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = bitcast i32** %14 to i64*
  %39 = bitcast %"class.std::__1::vector.47"* %8 to i64*
  %40 = bitcast i32** %17 to i64*
  %41 = bitcast %"class.std::__1::vector.47"* %9 to i64*
  %42 = bitcast float** %20 to i64*
  %43 = bitcast %"class.std::__1::vector.77"* %10 to i64*
  %44 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 0, i64 0
  %45 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 1, i64 0
  %46 = getelementptr inbounds %"struct.jxl::Spline", %"struct.jxl::Spline"* %3, i64 0, i32 1, i64 2, i64 0
  br label %69

47:                                               ; preds = %339
  %48 = load float*, float** %19, align 8
  %49 = icmp eq float* %48, null
  br i1 %49, label %54, label %50

50:                                               ; preds = %47
  %51 = bitcast float* %48 to i8*
  %52 = ptrtoint float* %48 to i64
  %53 = bitcast float** %20 to i64*
  store i64 %52, i64* %53, align 8
  call void @_ZdlPv(i8* %51) #21
  br label %54

54:                                               ; preds = %7, %47, %50
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #18
  %55 = load i32*, i32** %16, align 8
  %56 = icmp eq i32* %55, null
  br i1 %56, label %61, label %57

57:                                               ; preds = %54
  %58 = ptrtoint i32* %55 to i64
  %59 = bitcast i32** %17 to i64*
  store i64 %58, i64* %59, align 8
  %60 = bitcast i32* %55 to i8*
  call void @_ZdlPv(i8* %60) #21
  br label %61

61:                                               ; preds = %54, %57
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #18
  %62 = load i32*, i32** %13, align 8
  %63 = icmp eq i32* %62, null
  br i1 %63, label %68, label %64

64:                                               ; preds = %61
  %65 = ptrtoint i32* %62 to i64
  %66 = bitcast i32** %14 to i64*
  store i64 %65, i64* %66, align 8
  %67 = bitcast i32* %62 to i8*
  call void @_ZdlPv(i8* %67) #21
  br label %68

68:                                               ; preds = %61, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #18
  ret void

69:                                               ; preds = %26, %339
  %70 = phi i32 [ 0, %26 ], [ %84, %339 ]
  %71 = phi %"struct.std::__1::pair.65"* [ %22, %26 ], [ %340, %339 ]
  %72 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %71, i64 0, i32 1
  %73 = load float, float* %72, align 4
  %74 = fsub float -0.000000e+00, %73
  %75 = sitofp i32 %70 to float
  %76 = fmul float %11, %75
  %77 = fcmp olt float %76, 1.000000e+00
  %78 = select i1 %77, float %76, float 1.000000e+00
  %79 = fmul float %78, 3.100000e+01
  %80 = call fastcc float @_ZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKff(float* %44, float %79)
  %81 = call fastcc float @_ZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKff(float* %45, float %79)
  %82 = call fastcc float @_ZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKff(float* %46, float %79)
  %83 = select i1 %4, float %73, float %74
  %84 = add nuw nsw i32 %70, 1
  %85 = call fastcc float @_ZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKff(float* %27, float %79)
  %86 = fmul float %85, %85
  %87 = fmul float %86, 0x40126BB1C0000000
  %88 = load i64, i64* %28, align 8
  %89 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %71, i64 0, i32 0, i32 0
  %90 = load float, float* %89, align 4
  %91 = fsub float %90, %87
  %92 = fadd float %91, 5.000000e-01
  %93 = fptosi float %92 to i64
  %94 = icmp slt i64 %88, %93
  %95 = select i1 %94, i64 %93, i64 %88
  %96 = sub i64 0, %95
  %97 = fadd float %87, %90
  %98 = fadd float %97, 5.000000e-01
  %99 = fptosi float %98 to i64
  %100 = load i64, i64* %29, align 8
  %101 = add i64 %88, -1
  %102 = add i64 %101, %100
  %103 = icmp slt i64 %102, %99
  %104 = select i1 %103, i64 %102, i64 %99
  %105 = load i64, i64* %30, align 8
  %106 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %71, i64 0, i32 0, i32 1
  %107 = load float, float* %106, align 4
  %108 = fsub float %107, %87
  %109 = fadd float %108, 5.000000e-01
  %110 = fptosi float %109 to i64
  %111 = icmp slt i64 %105, %110
  %112 = select i1 %111, i64 %110, i64 %105
  %113 = fadd float %87, %107
  %114 = fadd float %113, 5.000000e-01
  %115 = fptosi float %114 to i64
  %116 = load i64, i64* %31, align 8
  %117 = add i64 %105, -1
  %118 = add i64 %117, %116
  %119 = icmp slt i64 %118, %115
  %120 = select i1 %119, i64 %118, i64 %115
  %121 = icmp slt i64 %104, 1
  %122 = icmp slt i64 %104, %95
  %123 = or i1 %121, %122
  br i1 %123, label %339, label %124

124:                                              ; preds = %69
  %125 = icmp slt i64 %120, 1
  %126 = icmp slt i64 %120, %112
  %127 = or i1 %125, %126
  br i1 %127, label %339, label %128

128:                                              ; preds = %124
  %129 = load i64, i64* %32, align 8
  %130 = lshr i64 %129, 2
  %131 = sub i64 %112, %105
  %132 = load i64, i64* %33, align 8
  %133 = add i64 %131, %132
  %134 = mul i64 %133, %129
  %135 = load i8*, i8** %34, align 8
  %136 = ptrtoint i8* %135 to i64
  %137 = and i64 %136, 63
  %138 = icmp eq i64 %137, 0
  call void @llvm.assume(i1 %138) #18
  %139 = getelementptr inbounds i8, i8* %135, i64 %134
  %140 = ptrtoint i8* %139 to i64
  %141 = and i64 %140, 63
  %142 = icmp eq i64 %141, 0
  call void @llvm.assume(i1 %142) #18
  %143 = bitcast i8* %139 to float*
  %144 = load i64, i64* %35, align 8
  %145 = getelementptr inbounds float, float* %143, i64 %144
  %146 = load i8*, i8** %36, align 8
  %147 = ptrtoint i8* %146 to i64
  %148 = and i64 %147, 63
  %149 = icmp eq i64 %148, 0
  call void @llvm.assume(i1 %149) #18
  %150 = getelementptr inbounds i8, i8* %146, i64 %134
  %151 = ptrtoint i8* %150 to i64
  %152 = and i64 %151, 63
  %153 = icmp eq i64 %152, 0
  call void @llvm.assume(i1 %153) #18
  %154 = bitcast i8* %150 to float*
  %155 = getelementptr inbounds float, float* %154, i64 %144
  %156 = load i8*, i8** %37, align 8
  %157 = ptrtoint i8* %156 to i64
  %158 = and i64 %157, 63
  %159 = icmp eq i64 %158, 0
  call void @llvm.assume(i1 %159) #18
  %160 = getelementptr inbounds i8, i8* %156, i64 %134
  %161 = ptrtoint i8* %160 to i64
  %162 = and i64 %161, 63
  %163 = icmp eq i64 %162, 0
  call void @llvm.assume(i1 %163) #18
  %164 = bitcast i8* %160 to float*
  %165 = getelementptr inbounds float, float* %164, i64 %144
  %166 = add nuw i64 %104, 1
  %167 = sub i64 %166, %95
  %168 = add nuw i64 %120, 1
  %169 = sub i64 %168, %112
  %170 = load i64, i64* %38, align 8
  %171 = load i64, i64* %39, align 8
  %172 = sub i64 %170, %171
  %173 = ashr exact i64 %172, 2
  %174 = mul i64 %169, %167
  %175 = icmp ugt i64 %174, %173
  br i1 %175, label %176, label %203

176:                                              ; preds = %128
  %177 = sub i64 %174, %173
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.47"* nonnull %8, i64 %177) #18
  %178 = load i64, i64* %40, align 8
  %179 = load i64, i64* %41, align 8
  %180 = sub i64 %178, %179
  %181 = ashr exact i64 %180, 2
  %182 = icmp ugt i64 %174, %181
  %183 = inttoptr i64 %179 to i32*
  br i1 %182, label %184, label %186

184:                                              ; preds = %176
  %185 = sub i64 %174, %181
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.47"* nonnull %9, i64 %185) #18
  br label %190

186:                                              ; preds = %176
  %187 = icmp ult i64 %174, %181
  br i1 %187, label %188, label %190

188:                                              ; preds = %186
  %189 = getelementptr inbounds i32, i32* %183, i64 %174
  store i32* %189, i32** %17, align 8
  br label %190

190:                                              ; preds = %188, %186, %184
  %191 = load i64, i64* %42, align 8
  %192 = load i64, i64* %43, align 8
  %193 = sub i64 %191, %192
  %194 = ashr exact i64 %193, 2
  %195 = icmp ugt i64 %174, %194
  %196 = inttoptr i64 %192 to float*
  br i1 %195, label %197, label %199

197:                                              ; preds = %190
  %198 = sub i64 %174, %194
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.77"* nonnull %10, i64 %198) #18
  br label %203

199:                                              ; preds = %190
  %200 = icmp ult i64 %174, %194
  br i1 %200, label %201, label %203

201:                                              ; preds = %199
  %202 = getelementptr inbounds float, float* %196, i64 %174
  store float* %202, float** %20, align 8
  br label %203

203:                                              ; preds = %201, %199, %197, %128
  %204 = icmp ugt i64 %112, %120
  br i1 %204, label %213, label %205

205:                                              ; preds = %203
  %206 = icmp ugt i64 %95, %104
  br label %207

207:                                              ; preds = %218, %205
  %208 = phi i64 [ %112, %205 ], [ %219, %218 ]
  br i1 %206, label %218, label %209

209:                                              ; preds = %207
  %210 = sub i64 %208, %112
  %211 = mul i64 %210, %167
  %212 = trunc i64 %208 to i32
  br label %221

213:                                              ; preds = %218, %203
  %214 = fdiv float 1.000000e+00, %85
  %215 = fmul float %85, 2.500000e-01
  %216 = fmul float %83, %215
  %217 = icmp eq i64 %174, 0
  br i1 %217, label %232, label %237

218:                                              ; preds = %221, %207
  %219 = add i64 %208, 1
  %220 = icmp ugt i64 %219, %120
  br i1 %220, label %213, label %207

221:                                              ; preds = %221, %209
  %222 = phi i64 [ %95, %209 ], [ %230, %221 ]
  %223 = trunc i64 %222 to i32
  %224 = sub i64 %222, %95
  %225 = add i64 %224, %211
  %226 = load i32*, i32** %13, align 8
  %227 = getelementptr inbounds i32, i32* %226, i64 %225
  store i32 %223, i32* %227, align 4
  %228 = load i32*, i32** %16, align 8
  %229 = getelementptr inbounds i32, i32* %228, i64 %225
  store i32 %212, i32* %229, align 4
  %230 = add i64 %222, 1
  %231 = icmp ugt i64 %230, %104
  br i1 %231, label %218, label %221

232:                                              ; preds = %237, %213
  br i1 %204, label %339, label %233

233:                                              ; preds = %232
  %234 = load i64, i64* %28, align 8
  %235 = sub nsw i64 0, %234
  %236 = icmp ugt i64 %95, %104
  br label %305

237:                                              ; preds = %213, %237
  %238 = phi i64 [ %303, %237 ], [ 0, %213 ]
  %239 = load i32*, i32** %13, align 8
  %240 = getelementptr inbounds i32, i32* %239, i64 %238
  %241 = load i32, i32* %240, align 4, !alias.scope !211
  %242 = sitofp i32 %241 to float
  %243 = load i32*, i32** %16, align 8
  %244 = getelementptr inbounds i32, i32* %243, i64 %238
  %245 = load i32, i32* %244, align 4, !alias.scope !216
  %246 = sitofp i32 %245 to float
  %247 = load float, float* %89, align 4
  %248 = fsub float %242, %247
  %249 = load float, float* %106, align 4
  %250 = fsub float %246, %249
  %251 = fmul float %250, %250
  %252 = fmul float %248, %248
  %253 = fadd float %252, %251
  %254 = call float @sqrtf(float %253) #18
  %255 = fmul float %254, 5.000000e-01
  %256 = fadd float %255, 0x3FD6A09E60000000
  %257 = fmul float %214, %256
  %258 = fcmp ole float %257, 0.000000e+00
  %259 = zext i1 %258 to i32
  %260 = call float @llvm.fabs.f32(float %257) #18
  %261 = fmul float %260, 0x3FB3E6BB60000000
  %262 = fadd float %261, 0x3F2AE76220000000
  %263 = fmul float %260, %262
  %264 = fadd float %263, 0x3FCDB61D80000000
  %265 = fmul float %260, %264
  %266 = fadd float %265, 0x3FD1C7D0E0000000
  %267 = fmul float %260, %266
  %268 = fadd float %267, 1.000000e+00
  %269 = fmul float %268, %268
  %270 = fdiv float 1.000000e+00, %269
  %271 = fmul float %270, %270
  %272 = fsub float 1.000000e+00, %271
  %273 = shl nuw i32 %259, 31
  %274 = bitcast float %272 to i32
  %275 = xor i32 %273, %274
  %276 = bitcast i32 %275 to float
  %277 = fadd float %255, 0xBFD6A09E60000000
  %278 = fmul float %214, %277
  %279 = fcmp ole float %278, 0.000000e+00
  %280 = zext i1 %279 to i32
  %281 = call float @llvm.fabs.f32(float %278) #18
  %282 = fmul float %281, 0x3FB3E6BB60000000
  %283 = fadd float %282, 0x3F2AE76220000000
  %284 = fmul float %281, %283
  %285 = fadd float %284, 0x3FCDB61D80000000
  %286 = fmul float %281, %285
  %287 = fadd float %286, 0x3FD1C7D0E0000000
  %288 = fmul float %281, %287
  %289 = fadd float %288, 1.000000e+00
  %290 = fmul float %289, %289
  %291 = fdiv float 1.000000e+00, %290
  %292 = fmul float %291, %291
  %293 = fsub float 1.000000e+00, %292
  %294 = shl nuw i32 %280, 31
  %295 = bitcast float %293 to i32
  %296 = xor i32 %294, %295
  %297 = bitcast i32 %296 to float
  %298 = fsub float %276, %297
  %299 = fmul float %216, %298
  %300 = fmul float %298, %299
  %301 = load float*, float** %19, align 8
  %302 = getelementptr inbounds float, float* %301, i64 %238
  store float %300, float* %302, align 4, !alias.scope !221
  %303 = add nuw i64 %238, 1
  %304 = icmp ult i64 %303, %174
  br i1 %304, label %237, label %232

305:                                              ; preds = %314, %233
  %306 = phi i64 [ %112, %233 ], [ %316, %314 ]
  %307 = phi i64 [ %235, %233 ], [ %315, %314 ]
  br i1 %236, label %314, label %308

308:                                              ; preds = %305
  %309 = sub i64 %306, %112
  %310 = mul i64 %309, %167
  %311 = getelementptr inbounds float, float* %145, i64 %307
  %312 = getelementptr inbounds float, float* %155, i64 %307
  %313 = getelementptr inbounds float, float* %165, i64 %307
  br label %318

314:                                              ; preds = %318, %305
  %315 = add i64 %307, %130
  %316 = add i64 %306, 1
  %317 = icmp ugt i64 %316, %120
  br i1 %317, label %339, label %305

318:                                              ; preds = %318, %308
  %319 = phi i64 [ %95, %308 ], [ %337, %318 ]
  %320 = load float*, float** %19, align 8
  %321 = getelementptr inbounds float, float* %320, i64 %310
  %322 = getelementptr inbounds float, float* %321, i64 %96
  %323 = getelementptr inbounds float, float* %322, i64 %319
  %324 = load float, float* %323, align 4, !alias.scope !226
  %325 = getelementptr inbounds float, float* %311, i64 %319
  %326 = load float, float* %325, align 4, !alias.scope !229
  %327 = fmul float %324, %80
  %328 = fadd float %327, %326
  store float %328, float* %325, align 4, !alias.scope !234
  %329 = getelementptr inbounds float, float* %312, i64 %319
  %330 = load float, float* %329, align 4, !alias.scope !229
  %331 = fmul float %324, %81
  %332 = fadd float %331, %330
  store float %332, float* %329, align 4, !alias.scope !234
  %333 = getelementptr inbounds float, float* %313, i64 %319
  %334 = load float, float* %333, align 4, !alias.scope !229
  %335 = fmul float %324, %82
  %336 = fadd float %335, %334
  store float %336, float* %333, align 4, !alias.scope !234
  %337 = add i64 %319, 1
  %338 = icmp ugt i64 %337, %104
  br i1 %338, label %314, label %318

339:                                              ; preds = %314, %69, %124, %232
  %340 = getelementptr inbounds %"struct.std::__1::pair.65", %"struct.std::__1::pair.65"* %71, i64 1
  %341 = icmp eq %"struct.std::__1::pair.65"* %340, %24
  br i1 %341, label %47, label %69
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float>, i32 immarg, <16 x float>, i16, i32 immarg) #17

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.min.ps.512(<16 x float>, <16 x float>, i32 immarg) #17

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fma.v16f32(<16 x float>, <16 x float>, <16 x float>) #4

; Function Attrs: nounwind
declare void @llvm.assume(i1) #18

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.47"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #18
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.47"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.47"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #20
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #20
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #21
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #18
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #18
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #21
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.77"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float, float* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float, float* %13, i64 %18
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #18
  %26 = ptrtoint float* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.77"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.77"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #20
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #20
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #21
  %54 = bitcast i8* %53 to float*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float, float* %57, i64 %33
  %59 = getelementptr inbounds float, float* %57, i64 %56
  %60 = getelementptr inbounds float, float* %58, i64 %1
  %61 = bitcast float* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #18
  %63 = ptrtoint float* %59 to i64
  %64 = ptrtoint float* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %0, i64 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float, float* %58, i64 %71
  %73 = ptrtoint float* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float* %72 to i8*
  %77 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #18
  %78 = load float*, float** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #21
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.sqrt.v16f32(<16 x float>) #4

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.fma.v4f32(<4 x float>, <4 x float>, <4 x float>) #4

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.round.ps.256(<8 x float>, i32 immarg) #17

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.min.ps.256(<8 x float>, <8 x float>) #17

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #4

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.sqrt.v8f32(<8 x float>) #4

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse41.round.ps(<4 x float>, i32 immarg) #17

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.min.ps(<4 x float>, <4 x float>) #17

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>) #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc float @_ZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKff(float* nocapture readonly, float) unnamed_addr #19 {
  %3 = fadd float %1, 5.000000e-01
  br label %5

4:                                                ; preds = %45
  ret float %70

5:                                                ; preds = %45, %2
  %6 = phi i64 [ 0, %2 ], [ %71, %45 ]
  %7 = phi float [ 0.000000e+00, %2 ], [ %70, %45 ]
  %8 = getelementptr inbounds [32 x float], [32 x float]* @_ZZN3jxl8N_SCALAR12_GLOBAL__N_114ContinuousIDCTEPKffE12kMultipliers, i64 0, i64 %6
  %9 = load float, float* %8, align 4, !alias.scope !239
  %10 = fmul float %3, %9
  %11 = fmul float %10, 0x3FC45F3060000000
  %12 = bitcast float %11 to i32
  %13 = fcmp olt float %11, 0.000000e+00
  %14 = lshr i32 %12, 23
  %15 = and i32 %14, 255
  %16 = add nsw i32 %15, -127
  %17 = icmp sgt i32 %16, 22
  br i1 %17, label %33, label %18

18:                                               ; preds = %5
  %19 = icmp slt i32 %16, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %18
  %21 = select i1 %13, float -1.000000e+00, float 0.000000e+00
  %22 = bitcast float %21 to i32
  br label %33

23:                                               ; preds = %18
  %24 = lshr i32 8388607, %16
  %25 = and i32 %24, %12
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %33, label %27

27:                                               ; preds = %23
  %28 = lshr i32 8388608, %16
  %29 = select i1 %13, i32 %28, i32 0
  %30 = add i32 %29, %12
  %31 = ashr i32 -8388608, %16
  %32 = and i32 %30, %31
  br label %33

33:                                               ; preds = %27, %23, %20, %5
  %34 = phi i32 [ %22, %20 ], [ %32, %27 ], [ %12, %5 ], [ %12, %23 ]
  %35 = bitcast i32 %34 to float
  %36 = fmul float %35, 0x401921FB60000000
  %37 = fsub float %10, %36
  %38 = fsub float 0x401921FB60000000, %37
  %39 = fcmp uno float %37, 0.000000e+00
  br i1 %39, label %45, label %40

40:                                               ; preds = %33
  %41 = fcmp uno float %38, 0.000000e+00
  br i1 %41, label %45, label %42

42:                                               ; preds = %40
  %43 = fcmp olt float %37, %38
  %44 = select i1 %43, float %37, float %38
  br label %45

45:                                               ; preds = %33, %40, %42
  %46 = phi float [ %44, %42 ], [ %38, %33 ], [ %37, %40 ]
  %47 = fcmp oge float %46, 0x3FF921FB60000000
  %48 = zext i1 %47 to i32
  %49 = fsub float 0x400921FB60000000, %46
  %50 = select i1 %47, float %49, float %46
  %51 = fmul float %50, 2.500000e-01
  %52 = fmul float %51, %51
  %53 = fmul float %52, %52
  %54 = fmul float %52, 0x3FEAE87000000000
  %55 = fsub float 0x3FFAE89F80000000, %54
  %56 = fmul float %53, 0x3FB1D197C0000000
  %57 = fadd float %56, %55
  %58 = fmul float %57, %57
  %59 = fadd float %58, 0xBFF6A09E60000000
  %60 = fmul float %59, %59
  %61 = fadd float %60, -1.000000e+00
  %62 = shl nuw i32 %48, 31
  %63 = bitcast float %61 to i32
  %64 = xor i32 %62, %63
  %65 = bitcast i32 %64 to float
  %66 = getelementptr inbounds float, float* %0, i64 %6
  %67 = load float, float* %66, align 4, !alias.scope !244
  %68 = fmul float %67, %65
  %69 = fmul float %68, 0x3FF6A09E60000000
  %70 = fadd float %7, %69
  %71 = add nuw nsw i64 %6, 1
  %72 = icmp eq i64 %71, 32
  br i1 %72, label %4, label %5
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #4

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.round.v4f32(<4 x float>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inaccessiblemem_or_argmemonly nounwind }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind readnone }
attributes #18 = { nounwind }
attributes #19 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #20 = { noreturn nounwind }
attributes #21 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !13}
!15 = distinct !{!15, !13}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !13}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!29 = distinct !{!29, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!32 = distinct !{!32, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!35 = distinct !{!35, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!38 = distinct !{!38, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!41 = distinct !{!41, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!44 = distinct !{!44, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!47 = distinct !{!47, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!50 = distinct !{!50, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!53 = distinct !{!53, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!54 = !{i8 0, i8 2}
!55 = !{!"branch_weights", i32 1, i32 2000}
!56 = !{i32 0, i32 33}
!57 = !{!"branch_weights", i32 2000, i32 1}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!60 = distinct !{!60, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!61 = !{!62, !59}
!62 = distinct !{!62, !63, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!63 = distinct !{!63, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!64 = !{!65, !59}
!65 = distinct !{!65, !66, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!66 = distinct !{!66, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!69 = distinct !{!69, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!70 = !{!71, !65}
!71 = distinct !{!71, !69, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!72 = !{!65}
!73 = !{!74}
!74 = distinct !{!74, !75, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!75 = distinct !{!75, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!76 = !{!77, !74}
!77 = distinct !{!77, !78, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!78 = distinct !{!78, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!79 = !{!80, !74}
!80 = distinct !{!80, !81, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!81 = distinct !{!81, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!84 = distinct !{!84, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!85 = !{!86, !80}
!86 = distinct !{!86, !84, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!87 = !{!80}
!88 = !{!89}
!89 = distinct !{!89, !90}
!90 = distinct !{!90, !"LVerDomain"}
!91 = !{!92}
!92 = distinct !{!92, !90}
!93 = distinct !{!93, !13}
!94 = distinct !{!94, !95}
!95 = !{!"llvm.loop.unroll.disable"}
!96 = distinct !{!96, !13}
!97 = distinct !{!97, !95}
!98 = distinct !{!98, !95}
!99 = !{!100, !102}
!100 = distinct !{!100, !101, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!101 = distinct !{!101, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!102 = distinct !{!102, !103, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!103 = distinct !{!103, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!104 = !{}
!105 = !{!106}
!106 = distinct !{!106, !107, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!107 = distinct !{!107, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!108 = !{!109}
!109 = distinct !{!109, !107, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!110 = !{!111}
!111 = distinct !{!111, !112, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!112 = distinct !{!112, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!113 = !{!114}
!114 = distinct !{!114, !112, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!115 = !{!116}
!116 = distinct !{!116, !117, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!117 = distinct !{!117, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!118 = !{!119}
!119 = distinct !{!119, !117, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!120 = !{!121}
!121 = distinct !{!121, !122, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!122 = distinct !{!122, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!123 = !{!124}
!124 = distinct !{!124, !122, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!125 = !{!126}
!126 = distinct !{!126, !127, !"_ZN3hwy6N_AVX3L6StoreUENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!127 = distinct !{!127, !"_ZN3hwy6N_AVX3L6StoreUENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!128 = !{!129}
!129 = distinct !{!129, !130, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!130 = distinct !{!130, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf"}
!131 = !{!132, !134}
!132 = distinct !{!132, !133, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!133 = distinct !{!133, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf"}
!134 = distinct !{!134, !135, !"_ZN3hwy6N_AVX3L5LoadUIfLm1ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!135 = distinct !{!135, !"_ZN3hwy6N_AVX3L5LoadUIfLm1ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!136 = !{!137, !139}
!137 = distinct !{!137, !138, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!138 = distinct !{!138, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!139 = distinct !{!139, !140, !"_ZN3hwy6N_AVX3L6StoreUIfLm1ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!140 = distinct !{!140, !"_ZN3hwy6N_AVX3L6StoreUIfLm1ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!141 = !{!142}
!142 = distinct !{!142, !143, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!143 = distinct !{!143, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!144 = !{!145}
!145 = distinct !{!145, !143, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!146 = !{!147}
!147 = distinct !{!147, !148, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!148 = distinct !{!148, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!149 = !{!150}
!150 = distinct !{!150, !148, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!151 = !{!152}
!152 = distinct !{!152, !153, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!153 = distinct !{!153, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!154 = !{!155}
!155 = distinct !{!155, !153, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!156 = !{!157}
!157 = distinct !{!157, !158, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!158 = distinct !{!158, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!159 = !{!160}
!160 = distinct !{!160, !158, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!161 = !{!162}
!162 = distinct !{!162, !163, !"_ZN3hwy6N_AVX2L6StoreUENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!163 = distinct !{!163, !"_ZN3hwy6N_AVX2L6StoreUENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!164 = !{!165}
!165 = distinct !{!165, !166, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!166 = distinct !{!166, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf"}
!167 = !{!168, !170}
!168 = distinct !{!168, !169, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!169 = distinct !{!169, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf"}
!170 = distinct !{!170, !171, !"_ZN3hwy6N_AVX2L5LoadUIfLm1ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!171 = distinct !{!171, !"_ZN3hwy6N_AVX2L5LoadUIfLm1ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!172 = !{!173, !175}
!173 = distinct !{!173, !174, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!174 = distinct !{!174, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!175 = distinct !{!175, !176, !"_ZN3hwy6N_AVX2L6StoreUIfLm1ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!176 = distinct !{!176, !"_ZN3hwy6N_AVX2L6StoreUIfLm1ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!177 = !{!178}
!178 = distinct !{!178, !179, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!179 = distinct !{!179, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!180 = !{!181}
!181 = distinct !{!181, !182, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!182 = distinct !{!182, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!183 = !{!184}
!184 = distinct !{!184, !185, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!185 = distinct !{!185, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!186 = !{!187}
!187 = distinct !{!187, !188, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!188 = distinct !{!188, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!189 = !{!190}
!190 = distinct !{!190, !191, !"_ZN3hwy6N_SSE4L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!191 = distinct !{!191, !"_ZN3hwy6N_SSE4L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!192 = !{!193}
!193 = distinct !{!193, !194, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!194 = distinct !{!194, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf"}
!195 = !{!196, !198}
!196 = distinct !{!196, !197, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!197 = distinct !{!197, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf"}
!198 = distinct !{!198, !199, !"_ZN3hwy6N_SSE4L5LoadUIfLm1ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!199 = distinct !{!199, !"_ZN3hwy6N_SSE4L5LoadUIfLm1ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!200 = !{!201, !203}
!201 = distinct !{!201, !202, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!202 = distinct !{!202, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!203 = distinct !{!203, !204, !"_ZN3hwy6N_SSE4L6StoreUIfLm1ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!204 = distinct !{!204, !"_ZN3hwy6N_SSE4L6StoreUIfLm1ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!205 = !{!206}
!206 = distinct !{!206, !207, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!207 = distinct !{!207, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!208 = !{!209}
!209 = distinct !{!209, !210, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!210 = distinct !{!210, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!211 = !{!212, !214}
!212 = distinct !{!212, !213, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!213 = distinct !{!213, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!214 = distinct !{!214, !215, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!215 = distinct !{!215, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!216 = !{!217, !219}
!217 = distinct !{!217, !218, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!218 = distinct !{!218, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!219 = distinct !{!219, !220, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!220 = distinct !{!220, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!221 = !{!222, !224}
!222 = distinct !{!222, !223, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!223 = distinct !{!223, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!224 = distinct !{!224, !225, !"_ZN3hwy8N_SCALAR6StoreUIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!225 = distinct !{!225, !"_ZN3hwy8N_SCALAR6StoreUIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!226 = !{!227}
!227 = distinct !{!227, !228, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!228 = distinct !{!228, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!229 = !{!230, !232}
!230 = distinct !{!230, !231, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!231 = distinct !{!231, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!232 = distinct !{!232, !233, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!233 = distinct !{!233, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!234 = !{!235, !237}
!235 = distinct !{!235, !236, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!236 = distinct !{!236, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!237 = distinct !{!237, !238, !"_ZN3hwy8N_SCALAR6StoreUIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!238 = distinct !{!238, !"_ZN3hwy8N_SCALAR6StoreUIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!239 = !{!240, !242}
!240 = distinct !{!240, !241, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!241 = distinct !{!241, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!242 = distinct !{!242, !243, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!243 = distinct !{!243, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!244 = !{!245, !247}
!245 = distinct !{!245, !246, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!246 = distinct !{!246, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!247 = distinct !{!247, !248, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!248 = distinct !{!248, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
