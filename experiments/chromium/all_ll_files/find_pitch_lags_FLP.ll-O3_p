; ModuleID = '../../third_party/opus/src/silk/float/find_pitch_lags_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/find_pitch_lags_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_encoder_state_FLP = type { %struct.silk_encoder_state, %struct.silk_shape_state_FLP, [720 x float], float }
%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.silk_shape_state_FLP = type { i8, float, float }
%struct.silk_encoder_control_FLP = type { [4 x float], [2 x [16 x float]], [20 x float], float, [4 x i32], [96 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, [4 x float], [4 x i32], i8 }

@.str = private unnamed_addr constant [62 x i8] c"assertion failed: buf_len >= psEnc->sCmn.pitch_LPC_win_length\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"../../third_party/opus/src/silk/float/find_pitch_lags_FLP.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_find_pitch_lags_FLP(%struct.silk_encoder_state_FLP*, %struct.silk_encoder_control_FLP*, float*, float*, i32) local_unnamed_addr #0 {
  %6 = alloca [17 x float], align 16
  %7 = alloca [16 x float], align 16
  %8 = alloca [16 x float], align 16
  %9 = alloca [384 x float], align 16
  %10 = bitcast [17 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 68, i1 false)
  %11 = bitcast [16 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 64, i1 false)
  %12 = bitcast [16 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 64, i1 false)
  %13 = bitcast [384 x float]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1536, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -1, i64 1536, i1 false)
  %14 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 24
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 21
  %17 = load i32, i32* %16, align 8
  %18 = add nsw i32 %17, %15
  %19 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 23
  %20 = load i32, i32* %19, align 8
  %21 = add nsw i32 %18, %20
  %22 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 12
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %21, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %5
  tail call void @celt_fatal(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 59) #5
  unreachable

26:                                               ; preds = %5
  %27 = sext i32 %20 to i64
  %28 = sub nsw i64 0, %27
  %29 = getelementptr inbounds float, float* %3, i64 %28
  %30 = sext i32 %21 to i64
  %31 = getelementptr inbounds float, float* %29, i64 %30
  %32 = sext i32 %23 to i64
  %33 = sub nsw i64 0, %32
  %34 = getelementptr inbounds float, float* %31, i64 %33
  %35 = getelementptr inbounds [384 x float], [384 x float]* %9, i64 0, i64 0
  call void @silk_apply_sine_window_FLP(float* nonnull %35, float* %34, i32 1, i32 %15) #4
  %36 = load i32, i32* %14, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [384 x float], [384 x float]* %9, i64 0, i64 %37
  %39 = getelementptr inbounds float, float* %34, i64 %37
  %40 = bitcast float* %38 to i8*
  %41 = bitcast float* %39 to i8*
  %42 = load i32, i32* %22, align 4
  %43 = shl i32 %36, 1
  %44 = sub nsw i32 %42, %43
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %46, i1 false)
  %47 = getelementptr inbounds float, float* %38, i64 %45
  %48 = getelementptr inbounds float, float* %39, i64 %45
  call void @silk_apply_sine_window_FLP(float* %47, float* %48, i32 2, i32 %36) #4
  %49 = getelementptr inbounds [17 x float], [17 x float]* %6, i64 0, i64 0
  %50 = load i32, i32* %22, align 4
  %51 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 37
  %52 = load i32, i32* %51, align 8
  %53 = add nsw i32 %52, 1
  call void @silk_autocorrelation_FLP(float* nonnull %49, float* nonnull %35, i32 %50, i32 %53) #4
  %54 = load float, float* %49, align 16
  %55 = fmul float %54, 0x3F50624DE0000000
  %56 = fadd float %55, 1.000000e+00
  %57 = fadd float %54, %56
  store float %57, float* %49, align 16
  %58 = getelementptr inbounds [16 x float], [16 x float]* %8, i64 0, i64 0
  %59 = load i32, i32* %51, align 8
  %60 = call float @silk_schur_FLP(float* nonnull %58, float* nonnull %49, i32 %59) #4
  %61 = load float, float* %49, align 16
  %62 = fcmp ogt float %60, 1.000000e+00
  %63 = select i1 %62, float %60, float 1.000000e+00
  %64 = fdiv float %61, %63
  %65 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 13
  store float %64, float* %65, align 4
  %66 = getelementptr inbounds [16 x float], [16 x float]* %7, i64 0, i64 0
  %67 = load i32, i32* %51, align 8
  call void @silk_k2a_FLP(float* nonnull %66, float* nonnull %58, i32 %67) #4
  %68 = load i32, i32* %51, align 8
  call void @silk_bwexpander_FLP(float* nonnull %66, i32 %68, float 0x3FEFAE1480000000) #4
  %69 = load i32, i32* %51, align 8
  call void @silk_LPC_analysis_filter_FLP(float* %2, float* nonnull %66, float* %29, i32 %21, i32 %69) #4
  %70 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 5
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %120, label %73

73:                                               ; preds = %26
  %74 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 41
  %75 = load i32, i32* %74, align 8
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %120

77:                                               ; preds = %73
  %78 = load i32, i32* %51, align 8
  %79 = sitofp i32 %78 to float
  %80 = fmul float %79, 0x3F70624DE0000000
  %81 = fsub float 0x3FE3333340000000, %80
  %82 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 7
  %83 = load i32, i32* %82, align 4
  %84 = sitofp i32 %83 to float
  %85 = fmul float %84, 0x3FB99999A0000000
  %86 = fmul float %85, 3.906250e-03
  %87 = fsub float %81, %86
  %88 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 10
  %89 = load i8, i8* %88, align 1
  %90 = ashr i8 %89, 1
  %91 = sitofp i8 %90 to float
  %92 = fmul float %91, 0x3FC3333340000000
  %93 = fsub float %87, %92
  %94 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 50
  %95 = load i32, i32* %94, align 8
  %96 = sitofp i32 %95 to float
  %97 = fmul float %96, 0x3FB99999A0000000
  %98 = fmul float %97, 0x3F00000000000000
  %99 = fsub float %93, %98
  %100 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 4, i64 0
  %101 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 3
  %102 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 4
  %103 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 3
  %104 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 11
  %105 = load i32, i32* %104, align 8
  %106 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 38
  %107 = load i32, i32* %106, align 4
  %108 = sitofp i32 %107 to float
  %109 = fmul float %108, 0x3EF0000000000000
  %110 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 19
  %111 = load i32, i32* %110, align 8
  %112 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 36
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 20
  %115 = load i32, i32* %114, align 4
  %116 = call i32 @silk_pitch_analysis_core_FLP(float* %2, i32* %100, i16* %101, i8* %102, float* %103, i32 %105, float %109, float %99, i32 %111, i32 %113, i32 %115, i32 %4) #4
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %77
  store i8 2, i8* %70, align 1
  br label %126

119:                                              ; preds = %77
  store i8 1, i8* %70, align 1
  br label %126

120:                                              ; preds = %26, %73
  %121 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 4, i64 0
  %122 = bitcast i32* %121 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %122, i8 0, i64 16, i1 false)
  %123 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 3
  store i16 0, i16* %123, align 2
  %124 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 4
  store i8 0, i8* %124, align 4
  %125 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 3
  store float 0.000000e+00, float* %125, align 4
  br label %126

126:                                              ; preds = %118, %119, %120
  call void @llvm.lifetime.end.p0i8(i64 1536, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %10) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @silk_apply_sine_window_FLP(float*, float*, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @silk_autocorrelation_FLP(float*, float*, i32, i32) local_unnamed_addr #3

declare float @silk_schur_FLP(float*, float*, i32) local_unnamed_addr #3

declare void @silk_k2a_FLP(float*, float*, i32) local_unnamed_addr #3

declare void @silk_bwexpander_FLP(float*, i32, float) local_unnamed_addr #3

declare void @silk_LPC_analysis_filter_FLP(float*, float*, float*, i32, i32) local_unnamed_addr #3

declare i32 @silk_pitch_analysis_core_FLP(float*, i32*, i16*, i8*, float*, i32, float, float, i32, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
