; ModuleID = '../../third_party/libgav1/src/src/dsp/x86/average_blend_sse4.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/x86/average_blend_sse4.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp23AverageBlendInit_SSE4_1Ev() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #5
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 0
  store void (i8*, i8*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_119AverageBlend_SSE4_1EPKvS4_iiPvl, void (i8*, i8*, i32, i32, i8*, i64)** %2, align 8
  %3 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #5
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %3, i64 0, i32 0
  store void (i8*, i8*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_124AverageBlend10bpp_SSE4_1EPKvS4_iiPvl, void (i8*, i8*, i32, i32, i8*, i64)** %4, align 8
  ret void
}

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_119AverageBlend_SSE4_1EPKvS4_iiPvl(i8* nocapture readonly, i8* nocapture readonly, i32, i32, i8* nocapture, i64) #2 {
  %7 = bitcast i8* %0 to i16*
  %8 = bitcast i8* %1 to i16*
  switch i32 %2, label %9 [
    i32 4, label %11
    i32 8, label %54
  ]

9:                                                ; preds = %6
  %10 = sext i32 %2 to i64
  br label %89

11:                                               ; preds = %6, %11
  %12 = phi i8* [ %49, %11 ], [ %4, %6 ]
  %13 = phi i16* [ %50, %11 ], [ %7, %6 ]
  %14 = phi i16* [ %51, %11 ], [ %8, %6 ]
  %15 = phi i32 [ %52, %11 ], [ %3, %6 ]
  %16 = bitcast i16* %13 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %17, i32 0
  %19 = bitcast i16* %14 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %20, i32 0
  %22 = bitcast <2 x i64> %18 to <8 x i16>
  %23 = bitcast <2 x i64> %21 to <8 x i16>
  %24 = add <8 x i16> %22, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %25 = add <8 x i16> %24, %23
  %26 = ashr <8 x i16> %25, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %27 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %26, <8 x i16> undef) #5
  %28 = bitcast <16 x i8> %27 to <4 x i32>
  %29 = extractelement <4 x i32> %28, i32 0
  %30 = bitcast i8* %12 to i32*
  store i32 %29, i32* %30, align 1
  %31 = getelementptr inbounds i8, i8* %12, i64 %5
  %32 = getelementptr inbounds i16, i16* %13, i64 4
  %33 = getelementptr inbounds i16, i16* %14, i64 4
  %34 = bitcast i16* %32 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %35, i32 0
  %37 = bitcast i16* %33 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %38, i32 0
  %40 = bitcast <2 x i64> %36 to <8 x i16>
  %41 = bitcast <2 x i64> %39 to <8 x i16>
  %42 = add <8 x i16> %40, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %43 = add <8 x i16> %42, %41
  %44 = ashr <8 x i16> %43, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %45 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %44, <8 x i16> undef) #5
  %46 = bitcast <16 x i8> %45 to <4 x i32>
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = bitcast i8* %31 to i32*
  store i32 %47, i32* %48, align 1
  %49 = getelementptr inbounds i8, i8* %31, i64 %5
  %50 = getelementptr inbounds i16, i16* %13, i64 8
  %51 = getelementptr inbounds i16, i16* %14, i64 8
  %52 = add nsw i32 %15, -2
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %156, label %11

54:                                               ; preds = %6, %54
  %55 = phi i8* [ %84, %54 ], [ %4, %6 ]
  %56 = phi i16* [ %85, %54 ], [ %7, %6 ]
  %57 = phi i16* [ %86, %54 ], [ %8, %6 ]
  %58 = phi i32 [ %87, %54 ], [ %3, %6 ]
  %59 = bitcast i16* %56 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 16
  %61 = bitcast i16* %57 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 16
  %63 = add <8 x i16> %60, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %64 = add <8 x i16> %63, %62
  %65 = ashr <8 x i16> %64, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %65, <8 x i16> undef) #5
  %67 = bitcast <16 x i8> %66 to <2 x i64>
  %68 = extractelement <2 x i64> %67, i32 0
  %69 = bitcast i8* %55 to i64*
  store i64 %68, i64* %69, align 1
  %70 = getelementptr inbounds i8, i8* %55, i64 %5
  %71 = getelementptr inbounds i16, i16* %56, i64 8
  %72 = getelementptr inbounds i16, i16* %57, i64 8
  %73 = bitcast i16* %71 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 16
  %75 = bitcast i16* %72 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 16
  %77 = add <8 x i16> %74, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %78 = add <8 x i16> %77, %76
  %79 = ashr <8 x i16> %78, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %80 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %79, <8 x i16> undef) #5
  %81 = bitcast <16 x i8> %80 to <2 x i64>
  %82 = extractelement <2 x i64> %81, i32 0
  %83 = bitcast i8* %70 to i64*
  store i64 %82, i64* %83, align 1
  %84 = getelementptr inbounds i8, i8* %70, i64 %5
  %85 = getelementptr inbounds i16, i16* %56, i64 16
  %86 = getelementptr inbounds i16, i16* %57, i64 16
  %87 = add nsw i32 %58, -2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %156, label %54

89:                                               ; preds = %9, %150
  %90 = phi i8* [ %151, %150 ], [ %4, %9 ]
  %91 = phi i16* [ %152, %150 ], [ %7, %9 ]
  %92 = phi i16* [ %153, %150 ], [ %8, %9 ]
  %93 = phi i32 [ %154, %150 ], [ %3, %9 ]
  br label %94

94:                                               ; preds = %94, %89
  %95 = phi i64 [ %118, %94 ], [ 0, %89 ]
  %96 = getelementptr inbounds i16, i16* %91, i64 %95
  %97 = bitcast i16* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 16
  %99 = getelementptr inbounds i16, i16* %92, i64 %95
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 16
  %102 = add <8 x i16> %98, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %103 = add <8 x i16> %102, %101
  %104 = ashr <8 x i16> %103, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %105 = or i64 %95, 8
  %106 = getelementptr inbounds i16, i16* %91, i64 %105
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 16
  %109 = getelementptr inbounds i16, i16* %92, i64 %105
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 16
  %112 = add <8 x i16> %108, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %113 = add <8 x i16> %112, %111
  %114 = ashr <8 x i16> %113, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %115 = getelementptr inbounds i8, i8* %90, i64 %95
  %116 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %104, <8 x i16> %114) #5
  %117 = bitcast i8* %115 to <16 x i8>*
  store <16 x i8> %116, <16 x i8>* %117, align 1
  %118 = add nuw nsw i64 %95, 16
  %119 = icmp slt i64 %118, %10
  br i1 %119, label %94, label %120

120:                                              ; preds = %94
  %121 = getelementptr inbounds i8, i8* %90, i64 %5
  %122 = getelementptr inbounds i16, i16* %91, i64 %10
  %123 = getelementptr inbounds i16, i16* %92, i64 %10
  br label %124

124:                                              ; preds = %124, %120
  %125 = phi i64 [ %148, %124 ], [ 0, %120 ]
  %126 = getelementptr inbounds i16, i16* %122, i64 %125
  %127 = bitcast i16* %126 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 16
  %129 = getelementptr inbounds i16, i16* %123, i64 %125
  %130 = bitcast i16* %129 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 16
  %132 = add <8 x i16> %128, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %133 = add <8 x i16> %132, %131
  %134 = ashr <8 x i16> %133, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %135 = or i64 %125, 8
  %136 = getelementptr inbounds i16, i16* %122, i64 %135
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 16
  %139 = getelementptr inbounds i16, i16* %123, i64 %135
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 16
  %142 = add <8 x i16> %138, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %143 = add <8 x i16> %142, %141
  %144 = ashr <8 x i16> %143, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %145 = getelementptr inbounds i8, i8* %121, i64 %125
  %146 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %134, <8 x i16> %144) #5
  %147 = bitcast i8* %145 to <16 x i8>*
  store <16 x i8> %146, <16 x i8>* %147, align 1
  %148 = add nuw nsw i64 %125, 16
  %149 = icmp slt i64 %148, %10
  br i1 %149, label %124, label %150

150:                                              ; preds = %124
  %151 = getelementptr inbounds i8, i8* %121, i64 %5
  %152 = getelementptr inbounds i16, i16* %122, i64 %10
  %153 = getelementptr inbounds i16, i16* %123, i64 %10
  %154 = add nsw i32 %93, -2
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %89

156:                                              ; preds = %54, %11, %150
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_124AverageBlend10bpp_SSE4_1EPKvS4_iiPvl(i8* nocapture readonly, i8* nocapture readonly, i32, i32, i8* nocapture, i64) #4 {
  %7 = bitcast i8* %4 to i16*
  %8 = lshr i64 %5, 1
  %9 = bitcast i8* %0 to i16*
  %10 = bitcast i8* %1 to i16*
  switch i32 %2, label %11 [
    i32 4, label %13
    i32 8, label %53
    i32 16, label %112
    i32 32, label %221
    i32 64, label %328
  ]

11:                                               ; preds = %6
  %12 = sext i32 %2 to i64
  br label %535

13:                                               ; preds = %6
  %14 = and i64 %5, -2
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i16* [ %7, %13 ], [ %48, %15 ]
  %17 = phi i16* [ %9, %13 ], [ %49, %15 ]
  %18 = phi i16* [ %10, %13 ], [ %50, %15 ]
  %19 = phi i32 [ %3, %13 ], [ %51, %15 ]
  %20 = bitcast i16* %17 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 1
  %22 = bitcast i16* %18 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = shufflevector <8 x i16> %21, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %25 = zext <4 x i16> %24 to <4 x i32>
  %26 = shufflevector <8 x i16> %21, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %27 = shufflevector <8 x i16> %23, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %28 = zext <4 x i16> %27 to <4 x i32>
  %29 = shufflevector <8 x i16> %23, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %30 = bitcast <8 x i16> %26 to <4 x i32>
  %31 = bitcast <8 x i16> %29 to <4 x i32>
  %32 = add nsw <4 x i32> %25, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %33 = add nsw <4 x i32> %32, %28
  %34 = add <4 x i32> %30, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %35 = add <4 x i32> %34, %31
  %36 = ashr <4 x i32> %33, <i32 5, i32 5, i32 5, i32 5>
  %37 = ashr <4 x i32> %35, <i32 5, i32 5, i32 5, i32 5>
  %38 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %36, <4 x i32> %37) #5
  %39 = icmp slt <8 x i16> %38, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %40 = select <8 x i1> %39, <8 x i16> %38, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %41 = bitcast <8 x i16> %40 to <2 x i64>
  %42 = extractelement <2 x i64> %41, i32 0
  %43 = bitcast i16* %16 to i64*
  store i64 %42, i64* %43, align 1
  %44 = getelementptr inbounds i16, i16* %16, i64 %8
  %45 = bitcast <8 x i16> %40 to <4 x float>
  %46 = shufflevector <4 x float> %45, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %47 = bitcast i16* %44 to <2 x float>*
  store <2 x float> %46, <2 x float>* %47, align 1
  %48 = getelementptr inbounds i16, i16* %16, i64 %14
  %49 = getelementptr inbounds i16, i16* %17, i64 8
  %50 = getelementptr inbounds i16, i16* %18, i64 8
  %51 = add nsw i32 %19, -2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %942, label %15

53:                                               ; preds = %6
  %54 = and i64 %5, -2
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i16* [ %7, %53 ], [ %107, %55 ]
  %57 = phi i16* [ %9, %53 ], [ %108, %55 ]
  %58 = phi i16* [ %10, %53 ], [ %109, %55 ]
  %59 = phi i32 [ %3, %53 ], [ %110, %55 ]
  %60 = bitcast i16* %57 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 1
  %62 = bitcast i16* %58 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 1
  %64 = shufflevector <8 x i16> %61, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %65 = zext <4 x i16> %64 to <4 x i32>
  %66 = shufflevector <8 x i16> %61, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %67 = shufflevector <8 x i16> %63, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %68 = zext <4 x i16> %67 to <4 x i32>
  %69 = shufflevector <8 x i16> %63, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %70 = bitcast <8 x i16> %66 to <4 x i32>
  %71 = bitcast <8 x i16> %69 to <4 x i32>
  %72 = add nsw <4 x i32> %65, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %73 = add nsw <4 x i32> %72, %68
  %74 = add <4 x i32> %70, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %75 = add <4 x i32> %74, %71
  %76 = ashr <4 x i32> %73, <i32 5, i32 5, i32 5, i32 5>
  %77 = ashr <4 x i32> %75, <i32 5, i32 5, i32 5, i32 5>
  %78 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %76, <4 x i32> %77) #5
  %79 = icmp slt <8 x i16> %78, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %80 = select <8 x i1> %79, <8 x i16> %78, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %81 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %81, align 1
  %82 = getelementptr inbounds i16, i16* %57, i64 8
  %83 = getelementptr inbounds i16, i16* %58, i64 8
  %84 = getelementptr inbounds i16, i16* %56, i64 %8
  %85 = bitcast i16* %82 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = bitcast i16* %83 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 1
  %89 = shufflevector <8 x i16> %86, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %90 = zext <4 x i16> %89 to <4 x i32>
  %91 = shufflevector <8 x i16> %86, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %92 = shufflevector <8 x i16> %88, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %93 = zext <4 x i16> %92 to <4 x i32>
  %94 = shufflevector <8 x i16> %88, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %95 = bitcast <8 x i16> %91 to <4 x i32>
  %96 = bitcast <8 x i16> %94 to <4 x i32>
  %97 = add nsw <4 x i32> %90, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %98 = add nsw <4 x i32> %97, %93
  %99 = add <4 x i32> %95, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %100 = add <4 x i32> %99, %96
  %101 = ashr <4 x i32> %98, <i32 5, i32 5, i32 5, i32 5>
  %102 = ashr <4 x i32> %100, <i32 5, i32 5, i32 5, i32 5>
  %103 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %101, <4 x i32> %102) #5
  %104 = icmp slt <8 x i16> %103, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %105 = select <8 x i1> %104, <8 x i16> %103, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %106 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %106, align 1
  %107 = getelementptr inbounds i16, i16* %56, i64 %54
  %108 = getelementptr inbounds i16, i16* %57, i64 16
  %109 = getelementptr inbounds i16, i16* %58, i64 16
  %110 = add nsw i32 %59, -2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %942, label %55

112:                                              ; preds = %6
  %113 = and i64 %5, -2
  br label %114

114:                                              ; preds = %114, %112
  %115 = phi i16* [ %7, %112 ], [ %216, %114 ]
  %116 = phi i16* [ %9, %112 ], [ %217, %114 ]
  %117 = phi i16* [ %10, %112 ], [ %218, %114 ]
  %118 = phi i32 [ %3, %112 ], [ %219, %114 ]
  %119 = bitcast i16* %116 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 1
  %121 = bitcast i16* %117 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 1
  %123 = shufflevector <8 x i16> %120, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %124 = zext <4 x i16> %123 to <4 x i32>
  %125 = shufflevector <8 x i16> %120, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %126 = shufflevector <8 x i16> %122, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %127 = zext <4 x i16> %126 to <4 x i32>
  %128 = shufflevector <8 x i16> %122, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %129 = bitcast <8 x i16> %125 to <4 x i32>
  %130 = bitcast <8 x i16> %128 to <4 x i32>
  %131 = add nsw <4 x i32> %124, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %132 = add nsw <4 x i32> %131, %127
  %133 = add <4 x i32> %129, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %134 = add <4 x i32> %133, %130
  %135 = ashr <4 x i32> %132, <i32 5, i32 5, i32 5, i32 5>
  %136 = ashr <4 x i32> %134, <i32 5, i32 5, i32 5, i32 5>
  %137 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %135, <4 x i32> %136) #5
  %138 = icmp slt <8 x i16> %137, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %139 = select <8 x i1> %138, <8 x i16> %137, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %140 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %140, align 1
  %141 = getelementptr inbounds i16, i16* %116, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 1
  %144 = getelementptr inbounds i16, i16* %117, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 1
  %147 = shufflevector <8 x i16> %143, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %148 = zext <4 x i16> %147 to <4 x i32>
  %149 = shufflevector <8 x i16> %143, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %150 = shufflevector <8 x i16> %146, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %151 = zext <4 x i16> %150 to <4 x i32>
  %152 = shufflevector <8 x i16> %146, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %153 = bitcast <8 x i16> %149 to <4 x i32>
  %154 = bitcast <8 x i16> %152 to <4 x i32>
  %155 = add nsw <4 x i32> %148, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %156 = add nsw <4 x i32> %155, %151
  %157 = add <4 x i32> %153, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %158 = add <4 x i32> %157, %154
  %159 = ashr <4 x i32> %156, <i32 5, i32 5, i32 5, i32 5>
  %160 = ashr <4 x i32> %158, <i32 5, i32 5, i32 5, i32 5>
  %161 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %159, <4 x i32> %160) #5
  %162 = icmp slt <8 x i16> %161, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %163 = select <8 x i1> %162, <8 x i16> %161, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %164 = getelementptr inbounds i16, i16* %115, i64 8
  %165 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %165, align 1
  %166 = getelementptr inbounds i16, i16* %116, i64 16
  %167 = getelementptr inbounds i16, i16* %117, i64 16
  %168 = getelementptr inbounds i16, i16* %115, i64 %8
  %169 = bitcast i16* %166 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 1
  %171 = bitcast i16* %167 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 1
  %173 = shufflevector <8 x i16> %170, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %174 = zext <4 x i16> %173 to <4 x i32>
  %175 = shufflevector <8 x i16> %170, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %176 = shufflevector <8 x i16> %172, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %177 = zext <4 x i16> %176 to <4 x i32>
  %178 = shufflevector <8 x i16> %172, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %179 = bitcast <8 x i16> %175 to <4 x i32>
  %180 = bitcast <8 x i16> %178 to <4 x i32>
  %181 = add nsw <4 x i32> %174, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %182 = add nsw <4 x i32> %181, %177
  %183 = add <4 x i32> %179, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %184 = add <4 x i32> %183, %180
  %185 = ashr <4 x i32> %182, <i32 5, i32 5, i32 5, i32 5>
  %186 = ashr <4 x i32> %184, <i32 5, i32 5, i32 5, i32 5>
  %187 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %185, <4 x i32> %186) #5
  %188 = icmp slt <8 x i16> %187, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %189 = select <8 x i1> %188, <8 x i16> %187, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %190 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %189, <8 x i16>* %190, align 1
  %191 = getelementptr inbounds i16, i16* %116, i64 24
  %192 = bitcast i16* %191 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 1
  %194 = getelementptr inbounds i16, i16* %117, i64 24
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 1
  %197 = shufflevector <8 x i16> %193, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %198 = zext <4 x i16> %197 to <4 x i32>
  %199 = shufflevector <8 x i16> %193, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %200 = shufflevector <8 x i16> %196, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %201 = zext <4 x i16> %200 to <4 x i32>
  %202 = shufflevector <8 x i16> %196, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %203 = bitcast <8 x i16> %199 to <4 x i32>
  %204 = bitcast <8 x i16> %202 to <4 x i32>
  %205 = add nsw <4 x i32> %198, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %206 = add nsw <4 x i32> %205, %201
  %207 = add <4 x i32> %203, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %208 = add <4 x i32> %207, %204
  %209 = ashr <4 x i32> %206, <i32 5, i32 5, i32 5, i32 5>
  %210 = ashr <4 x i32> %208, <i32 5, i32 5, i32 5, i32 5>
  %211 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %209, <4 x i32> %210) #5
  %212 = icmp slt <8 x i16> %211, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %213 = select <8 x i1> %212, <8 x i16> %211, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %214 = getelementptr inbounds i16, i16* %168, i64 8
  %215 = bitcast i16* %214 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %215, align 1
  %216 = getelementptr inbounds i16, i16* %115, i64 %113
  %217 = getelementptr inbounds i16, i16* %116, i64 32
  %218 = getelementptr inbounds i16, i16* %117, i64 32
  %219 = add nsw i32 %118, -2
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %942, label %114

221:                                              ; preds = %6, %221
  %222 = phi i16* [ %323, %221 ], [ %7, %6 ]
  %223 = phi i16* [ %324, %221 ], [ %9, %6 ]
  %224 = phi i16* [ %325, %221 ], [ %10, %6 ]
  %225 = phi i32 [ %326, %221 ], [ %3, %6 ]
  %226 = bitcast i16* %223 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 1
  %228 = bitcast i16* %224 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 1
  %230 = shufflevector <8 x i16> %227, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %231 = zext <4 x i16> %230 to <4 x i32>
  %232 = shufflevector <8 x i16> %227, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %233 = shufflevector <8 x i16> %229, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %234 = zext <4 x i16> %233 to <4 x i32>
  %235 = shufflevector <8 x i16> %229, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %236 = bitcast <8 x i16> %232 to <4 x i32>
  %237 = bitcast <8 x i16> %235 to <4 x i32>
  %238 = add nsw <4 x i32> %231, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %239 = add nsw <4 x i32> %238, %234
  %240 = add <4 x i32> %236, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %241 = add <4 x i32> %240, %237
  %242 = ashr <4 x i32> %239, <i32 5, i32 5, i32 5, i32 5>
  %243 = ashr <4 x i32> %241, <i32 5, i32 5, i32 5, i32 5>
  %244 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %242, <4 x i32> %243) #5
  %245 = icmp slt <8 x i16> %244, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %246 = select <8 x i1> %245, <8 x i16> %244, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %247 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %247, align 1
  %248 = getelementptr inbounds i16, i16* %223, i64 8
  %249 = bitcast i16* %248 to <8 x i16>*
  %250 = load <8 x i16>, <8 x i16>* %249, align 1
  %251 = getelementptr inbounds i16, i16* %224, i64 8
  %252 = bitcast i16* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 1
  %254 = shufflevector <8 x i16> %250, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %255 = zext <4 x i16> %254 to <4 x i32>
  %256 = shufflevector <8 x i16> %250, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %257 = shufflevector <8 x i16> %253, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %258 = zext <4 x i16> %257 to <4 x i32>
  %259 = shufflevector <8 x i16> %253, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %260 = bitcast <8 x i16> %256 to <4 x i32>
  %261 = bitcast <8 x i16> %259 to <4 x i32>
  %262 = add nsw <4 x i32> %255, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %263 = add nsw <4 x i32> %262, %258
  %264 = add <4 x i32> %260, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %265 = add <4 x i32> %264, %261
  %266 = ashr <4 x i32> %263, <i32 5, i32 5, i32 5, i32 5>
  %267 = ashr <4 x i32> %265, <i32 5, i32 5, i32 5, i32 5>
  %268 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %266, <4 x i32> %267) #5
  %269 = icmp slt <8 x i16> %268, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %270 = select <8 x i1> %269, <8 x i16> %268, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %271 = getelementptr inbounds i16, i16* %222, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %272, align 1
  %273 = getelementptr inbounds i16, i16* %223, i64 16
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 1
  %276 = getelementptr inbounds i16, i16* %224, i64 16
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 1
  %279 = shufflevector <8 x i16> %275, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %280 = zext <4 x i16> %279 to <4 x i32>
  %281 = shufflevector <8 x i16> %275, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %282 = shufflevector <8 x i16> %278, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %283 = zext <4 x i16> %282 to <4 x i32>
  %284 = shufflevector <8 x i16> %278, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %285 = bitcast <8 x i16> %281 to <4 x i32>
  %286 = bitcast <8 x i16> %284 to <4 x i32>
  %287 = add nsw <4 x i32> %280, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %288 = add nsw <4 x i32> %287, %283
  %289 = add <4 x i32> %285, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %290 = add <4 x i32> %289, %286
  %291 = ashr <4 x i32> %288, <i32 5, i32 5, i32 5, i32 5>
  %292 = ashr <4 x i32> %290, <i32 5, i32 5, i32 5, i32 5>
  %293 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %291, <4 x i32> %292) #5
  %294 = icmp slt <8 x i16> %293, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %295 = select <8 x i1> %294, <8 x i16> %293, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %296 = getelementptr inbounds i16, i16* %222, i64 16
  %297 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %297, align 1
  %298 = getelementptr inbounds i16, i16* %223, i64 24
  %299 = bitcast i16* %298 to <8 x i16>*
  %300 = load <8 x i16>, <8 x i16>* %299, align 1
  %301 = getelementptr inbounds i16, i16* %224, i64 24
  %302 = bitcast i16* %301 to <8 x i16>*
  %303 = load <8 x i16>, <8 x i16>* %302, align 1
  %304 = shufflevector <8 x i16> %300, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %305 = zext <4 x i16> %304 to <4 x i32>
  %306 = shufflevector <8 x i16> %300, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %307 = shufflevector <8 x i16> %303, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %308 = zext <4 x i16> %307 to <4 x i32>
  %309 = shufflevector <8 x i16> %303, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %310 = bitcast <8 x i16> %306 to <4 x i32>
  %311 = bitcast <8 x i16> %309 to <4 x i32>
  %312 = add nsw <4 x i32> %305, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %313 = add nsw <4 x i32> %312, %308
  %314 = add <4 x i32> %310, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %315 = add <4 x i32> %314, %311
  %316 = ashr <4 x i32> %313, <i32 5, i32 5, i32 5, i32 5>
  %317 = ashr <4 x i32> %315, <i32 5, i32 5, i32 5, i32 5>
  %318 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %316, <4 x i32> %317) #5
  %319 = icmp slt <8 x i16> %318, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %320 = select <8 x i1> %319, <8 x i16> %318, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %321 = getelementptr inbounds i16, i16* %222, i64 24
  %322 = bitcast i16* %321 to <8 x i16>*
  store <8 x i16> %320, <8 x i16>* %322, align 1
  %323 = getelementptr inbounds i16, i16* %222, i64 %8
  %324 = getelementptr inbounds i16, i16* %223, i64 32
  %325 = getelementptr inbounds i16, i16* %224, i64 32
  %326 = add nsw i32 %225, -1
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %942, label %221

328:                                              ; preds = %6, %328
  %329 = phi i16* [ %530, %328 ], [ %7, %6 ]
  %330 = phi i16* [ %531, %328 ], [ %9, %6 ]
  %331 = phi i16* [ %532, %328 ], [ %10, %6 ]
  %332 = phi i32 [ %533, %328 ], [ %3, %6 ]
  %333 = bitcast i16* %330 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 1
  %335 = bitcast i16* %331 to <8 x i16>*
  %336 = load <8 x i16>, <8 x i16>* %335, align 1
  %337 = shufflevector <8 x i16> %334, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %338 = zext <4 x i16> %337 to <4 x i32>
  %339 = shufflevector <8 x i16> %334, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %340 = shufflevector <8 x i16> %336, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %341 = zext <4 x i16> %340 to <4 x i32>
  %342 = shufflevector <8 x i16> %336, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %343 = bitcast <8 x i16> %339 to <4 x i32>
  %344 = bitcast <8 x i16> %342 to <4 x i32>
  %345 = add nsw <4 x i32> %338, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %346 = add nsw <4 x i32> %345, %341
  %347 = add <4 x i32> %343, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %348 = add <4 x i32> %347, %344
  %349 = ashr <4 x i32> %346, <i32 5, i32 5, i32 5, i32 5>
  %350 = ashr <4 x i32> %348, <i32 5, i32 5, i32 5, i32 5>
  %351 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %349, <4 x i32> %350) #5
  %352 = icmp slt <8 x i16> %351, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %353 = select <8 x i1> %352, <8 x i16> %351, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %354 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %354, align 1
  %355 = getelementptr inbounds i16, i16* %330, i64 8
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 1
  %358 = getelementptr inbounds i16, i16* %331, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  %360 = load <8 x i16>, <8 x i16>* %359, align 1
  %361 = shufflevector <8 x i16> %357, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %362 = zext <4 x i16> %361 to <4 x i32>
  %363 = shufflevector <8 x i16> %357, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %364 = shufflevector <8 x i16> %360, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %365 = zext <4 x i16> %364 to <4 x i32>
  %366 = shufflevector <8 x i16> %360, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %367 = bitcast <8 x i16> %363 to <4 x i32>
  %368 = bitcast <8 x i16> %366 to <4 x i32>
  %369 = add nsw <4 x i32> %362, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %370 = add nsw <4 x i32> %369, %365
  %371 = add <4 x i32> %367, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %372 = add <4 x i32> %371, %368
  %373 = ashr <4 x i32> %370, <i32 5, i32 5, i32 5, i32 5>
  %374 = ashr <4 x i32> %372, <i32 5, i32 5, i32 5, i32 5>
  %375 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %373, <4 x i32> %374) #5
  %376 = icmp slt <8 x i16> %375, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %377 = select <8 x i1> %376, <8 x i16> %375, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %378 = getelementptr inbounds i16, i16* %329, i64 8
  %379 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %377, <8 x i16>* %379, align 1
  %380 = getelementptr inbounds i16, i16* %330, i64 16
  %381 = bitcast i16* %380 to <8 x i16>*
  %382 = load <8 x i16>, <8 x i16>* %381, align 1
  %383 = getelementptr inbounds i16, i16* %331, i64 16
  %384 = bitcast i16* %383 to <8 x i16>*
  %385 = load <8 x i16>, <8 x i16>* %384, align 1
  %386 = shufflevector <8 x i16> %382, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %387 = zext <4 x i16> %386 to <4 x i32>
  %388 = shufflevector <8 x i16> %382, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %389 = shufflevector <8 x i16> %385, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %390 = zext <4 x i16> %389 to <4 x i32>
  %391 = shufflevector <8 x i16> %385, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %392 = bitcast <8 x i16> %388 to <4 x i32>
  %393 = bitcast <8 x i16> %391 to <4 x i32>
  %394 = add nsw <4 x i32> %387, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %395 = add nsw <4 x i32> %394, %390
  %396 = add <4 x i32> %392, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %397 = add <4 x i32> %396, %393
  %398 = ashr <4 x i32> %395, <i32 5, i32 5, i32 5, i32 5>
  %399 = ashr <4 x i32> %397, <i32 5, i32 5, i32 5, i32 5>
  %400 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %398, <4 x i32> %399) #5
  %401 = icmp slt <8 x i16> %400, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %402 = select <8 x i1> %401, <8 x i16> %400, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %403 = getelementptr inbounds i16, i16* %329, i64 16
  %404 = bitcast i16* %403 to <8 x i16>*
  store <8 x i16> %402, <8 x i16>* %404, align 1
  %405 = getelementptr inbounds i16, i16* %330, i64 24
  %406 = bitcast i16* %405 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 1
  %408 = getelementptr inbounds i16, i16* %331, i64 24
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 1
  %411 = shufflevector <8 x i16> %407, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %412 = zext <4 x i16> %411 to <4 x i32>
  %413 = shufflevector <8 x i16> %407, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %414 = shufflevector <8 x i16> %410, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %415 = zext <4 x i16> %414 to <4 x i32>
  %416 = shufflevector <8 x i16> %410, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %417 = bitcast <8 x i16> %413 to <4 x i32>
  %418 = bitcast <8 x i16> %416 to <4 x i32>
  %419 = add nsw <4 x i32> %412, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %420 = add nsw <4 x i32> %419, %415
  %421 = add <4 x i32> %417, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %422 = add <4 x i32> %421, %418
  %423 = ashr <4 x i32> %420, <i32 5, i32 5, i32 5, i32 5>
  %424 = ashr <4 x i32> %422, <i32 5, i32 5, i32 5, i32 5>
  %425 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %423, <4 x i32> %424) #5
  %426 = icmp slt <8 x i16> %425, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %427 = select <8 x i1> %426, <8 x i16> %425, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %428 = getelementptr inbounds i16, i16* %329, i64 24
  %429 = bitcast i16* %428 to <8 x i16>*
  store <8 x i16> %427, <8 x i16>* %429, align 1
  %430 = getelementptr inbounds i16, i16* %330, i64 32
  %431 = bitcast i16* %430 to <8 x i16>*
  %432 = load <8 x i16>, <8 x i16>* %431, align 1
  %433 = getelementptr inbounds i16, i16* %331, i64 32
  %434 = bitcast i16* %433 to <8 x i16>*
  %435 = load <8 x i16>, <8 x i16>* %434, align 1
  %436 = shufflevector <8 x i16> %432, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %437 = zext <4 x i16> %436 to <4 x i32>
  %438 = shufflevector <8 x i16> %432, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %439 = shufflevector <8 x i16> %435, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %440 = zext <4 x i16> %439 to <4 x i32>
  %441 = shufflevector <8 x i16> %435, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %442 = bitcast <8 x i16> %438 to <4 x i32>
  %443 = bitcast <8 x i16> %441 to <4 x i32>
  %444 = add nsw <4 x i32> %437, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %445 = add nsw <4 x i32> %444, %440
  %446 = add <4 x i32> %442, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %447 = add <4 x i32> %446, %443
  %448 = ashr <4 x i32> %445, <i32 5, i32 5, i32 5, i32 5>
  %449 = ashr <4 x i32> %447, <i32 5, i32 5, i32 5, i32 5>
  %450 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %448, <4 x i32> %449) #5
  %451 = icmp slt <8 x i16> %450, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %452 = select <8 x i1> %451, <8 x i16> %450, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %453 = getelementptr inbounds i16, i16* %329, i64 32
  %454 = bitcast i16* %453 to <8 x i16>*
  store <8 x i16> %452, <8 x i16>* %454, align 1
  %455 = getelementptr inbounds i16, i16* %330, i64 40
  %456 = bitcast i16* %455 to <8 x i16>*
  %457 = load <8 x i16>, <8 x i16>* %456, align 1
  %458 = getelementptr inbounds i16, i16* %331, i64 40
  %459 = bitcast i16* %458 to <8 x i16>*
  %460 = load <8 x i16>, <8 x i16>* %459, align 1
  %461 = shufflevector <8 x i16> %457, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %462 = zext <4 x i16> %461 to <4 x i32>
  %463 = shufflevector <8 x i16> %457, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %464 = shufflevector <8 x i16> %460, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %465 = zext <4 x i16> %464 to <4 x i32>
  %466 = shufflevector <8 x i16> %460, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %467 = bitcast <8 x i16> %463 to <4 x i32>
  %468 = bitcast <8 x i16> %466 to <4 x i32>
  %469 = add nsw <4 x i32> %462, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %470 = add nsw <4 x i32> %469, %465
  %471 = add <4 x i32> %467, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %472 = add <4 x i32> %471, %468
  %473 = ashr <4 x i32> %470, <i32 5, i32 5, i32 5, i32 5>
  %474 = ashr <4 x i32> %472, <i32 5, i32 5, i32 5, i32 5>
  %475 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %473, <4 x i32> %474) #5
  %476 = icmp slt <8 x i16> %475, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %477 = select <8 x i1> %476, <8 x i16> %475, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %478 = getelementptr inbounds i16, i16* %329, i64 40
  %479 = bitcast i16* %478 to <8 x i16>*
  store <8 x i16> %477, <8 x i16>* %479, align 1
  %480 = getelementptr inbounds i16, i16* %330, i64 48
  %481 = bitcast i16* %480 to <8 x i16>*
  %482 = load <8 x i16>, <8 x i16>* %481, align 1
  %483 = getelementptr inbounds i16, i16* %331, i64 48
  %484 = bitcast i16* %483 to <8 x i16>*
  %485 = load <8 x i16>, <8 x i16>* %484, align 1
  %486 = shufflevector <8 x i16> %482, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %487 = zext <4 x i16> %486 to <4 x i32>
  %488 = shufflevector <8 x i16> %482, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %489 = shufflevector <8 x i16> %485, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %490 = zext <4 x i16> %489 to <4 x i32>
  %491 = shufflevector <8 x i16> %485, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %492 = bitcast <8 x i16> %488 to <4 x i32>
  %493 = bitcast <8 x i16> %491 to <4 x i32>
  %494 = add nsw <4 x i32> %487, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %495 = add nsw <4 x i32> %494, %490
  %496 = add <4 x i32> %492, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %497 = add <4 x i32> %496, %493
  %498 = ashr <4 x i32> %495, <i32 5, i32 5, i32 5, i32 5>
  %499 = ashr <4 x i32> %497, <i32 5, i32 5, i32 5, i32 5>
  %500 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %498, <4 x i32> %499) #5
  %501 = icmp slt <8 x i16> %500, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %502 = select <8 x i1> %501, <8 x i16> %500, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %503 = getelementptr inbounds i16, i16* %329, i64 48
  %504 = bitcast i16* %503 to <8 x i16>*
  store <8 x i16> %502, <8 x i16>* %504, align 1
  %505 = getelementptr inbounds i16, i16* %330, i64 56
  %506 = bitcast i16* %505 to <8 x i16>*
  %507 = load <8 x i16>, <8 x i16>* %506, align 1
  %508 = getelementptr inbounds i16, i16* %331, i64 56
  %509 = bitcast i16* %508 to <8 x i16>*
  %510 = load <8 x i16>, <8 x i16>* %509, align 1
  %511 = shufflevector <8 x i16> %507, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %512 = zext <4 x i16> %511 to <4 x i32>
  %513 = shufflevector <8 x i16> %507, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %514 = shufflevector <8 x i16> %510, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %515 = zext <4 x i16> %514 to <4 x i32>
  %516 = shufflevector <8 x i16> %510, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %517 = bitcast <8 x i16> %513 to <4 x i32>
  %518 = bitcast <8 x i16> %516 to <4 x i32>
  %519 = add nsw <4 x i32> %512, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %520 = add nsw <4 x i32> %519, %515
  %521 = add <4 x i32> %517, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %522 = add <4 x i32> %521, %518
  %523 = ashr <4 x i32> %520, <i32 5, i32 5, i32 5, i32 5>
  %524 = ashr <4 x i32> %522, <i32 5, i32 5, i32 5, i32 5>
  %525 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %523, <4 x i32> %524) #5
  %526 = icmp slt <8 x i16> %525, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %527 = select <8 x i1> %526, <8 x i16> %525, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %528 = getelementptr inbounds i16, i16* %329, i64 56
  %529 = bitcast i16* %528 to <8 x i16>*
  store <8 x i16> %527, <8 x i16>* %529, align 1
  %530 = getelementptr inbounds i16, i16* %329, i64 %8
  %531 = getelementptr inbounds i16, i16* %330, i64 64
  %532 = getelementptr inbounds i16, i16* %331, i64 64
  %533 = add nsw i32 %332, -1
  %534 = icmp eq i32 %533, 0
  br i1 %534, label %942, label %328

535:                                              ; preds = %11, %535
  %536 = phi i16* [ %937, %535 ], [ %7, %11 ]
  %537 = phi i16* [ %938, %535 ], [ %9, %11 ]
  %538 = phi i16* [ %939, %535 ], [ %10, %11 ]
  %539 = phi i32 [ %940, %535 ], [ %3, %11 ]
  %540 = bitcast i16* %537 to <8 x i16>*
  %541 = load <8 x i16>, <8 x i16>* %540, align 1
  %542 = bitcast i16* %538 to <8 x i16>*
  %543 = load <8 x i16>, <8 x i16>* %542, align 1
  %544 = shufflevector <8 x i16> %541, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %545 = zext <4 x i16> %544 to <4 x i32>
  %546 = shufflevector <8 x i16> %541, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %547 = shufflevector <8 x i16> %543, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %548 = zext <4 x i16> %547 to <4 x i32>
  %549 = shufflevector <8 x i16> %543, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %550 = bitcast <8 x i16> %546 to <4 x i32>
  %551 = bitcast <8 x i16> %549 to <4 x i32>
  %552 = add nsw <4 x i32> %545, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %553 = add nsw <4 x i32> %552, %548
  %554 = add <4 x i32> %550, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %555 = add <4 x i32> %554, %551
  %556 = ashr <4 x i32> %553, <i32 5, i32 5, i32 5, i32 5>
  %557 = ashr <4 x i32> %555, <i32 5, i32 5, i32 5, i32 5>
  %558 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %556, <4 x i32> %557) #5
  %559 = icmp slt <8 x i16> %558, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %560 = select <8 x i1> %559, <8 x i16> %558, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %561 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %560, <8 x i16>* %561, align 1
  %562 = getelementptr inbounds i16, i16* %537, i64 8
  %563 = bitcast i16* %562 to <8 x i16>*
  %564 = load <8 x i16>, <8 x i16>* %563, align 1
  %565 = getelementptr inbounds i16, i16* %538, i64 8
  %566 = bitcast i16* %565 to <8 x i16>*
  %567 = load <8 x i16>, <8 x i16>* %566, align 1
  %568 = shufflevector <8 x i16> %564, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %569 = zext <4 x i16> %568 to <4 x i32>
  %570 = shufflevector <8 x i16> %564, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %571 = shufflevector <8 x i16> %567, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %572 = zext <4 x i16> %571 to <4 x i32>
  %573 = shufflevector <8 x i16> %567, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %574 = bitcast <8 x i16> %570 to <4 x i32>
  %575 = bitcast <8 x i16> %573 to <4 x i32>
  %576 = add nsw <4 x i32> %569, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %577 = add nsw <4 x i32> %576, %572
  %578 = add <4 x i32> %574, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %579 = add <4 x i32> %578, %575
  %580 = ashr <4 x i32> %577, <i32 5, i32 5, i32 5, i32 5>
  %581 = ashr <4 x i32> %579, <i32 5, i32 5, i32 5, i32 5>
  %582 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %580, <4 x i32> %581) #5
  %583 = icmp slt <8 x i16> %582, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %584 = select <8 x i1> %583, <8 x i16> %582, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %585 = getelementptr inbounds i16, i16* %536, i64 8
  %586 = bitcast i16* %585 to <8 x i16>*
  store <8 x i16> %584, <8 x i16>* %586, align 1
  %587 = getelementptr inbounds i16, i16* %537, i64 16
  %588 = bitcast i16* %587 to <8 x i16>*
  %589 = load <8 x i16>, <8 x i16>* %588, align 1
  %590 = getelementptr inbounds i16, i16* %538, i64 16
  %591 = bitcast i16* %590 to <8 x i16>*
  %592 = load <8 x i16>, <8 x i16>* %591, align 1
  %593 = shufflevector <8 x i16> %589, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %594 = zext <4 x i16> %593 to <4 x i32>
  %595 = shufflevector <8 x i16> %589, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %596 = shufflevector <8 x i16> %592, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %597 = zext <4 x i16> %596 to <4 x i32>
  %598 = shufflevector <8 x i16> %592, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %599 = bitcast <8 x i16> %595 to <4 x i32>
  %600 = bitcast <8 x i16> %598 to <4 x i32>
  %601 = add nsw <4 x i32> %594, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %602 = add nsw <4 x i32> %601, %597
  %603 = add <4 x i32> %599, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %604 = add <4 x i32> %603, %600
  %605 = ashr <4 x i32> %602, <i32 5, i32 5, i32 5, i32 5>
  %606 = ashr <4 x i32> %604, <i32 5, i32 5, i32 5, i32 5>
  %607 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %605, <4 x i32> %606) #5
  %608 = icmp slt <8 x i16> %607, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %609 = select <8 x i1> %608, <8 x i16> %607, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %610 = getelementptr inbounds i16, i16* %536, i64 16
  %611 = bitcast i16* %610 to <8 x i16>*
  store <8 x i16> %609, <8 x i16>* %611, align 1
  %612 = getelementptr inbounds i16, i16* %537, i64 24
  %613 = bitcast i16* %612 to <8 x i16>*
  %614 = load <8 x i16>, <8 x i16>* %613, align 1
  %615 = getelementptr inbounds i16, i16* %538, i64 24
  %616 = bitcast i16* %615 to <8 x i16>*
  %617 = load <8 x i16>, <8 x i16>* %616, align 1
  %618 = shufflevector <8 x i16> %614, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %619 = zext <4 x i16> %618 to <4 x i32>
  %620 = shufflevector <8 x i16> %614, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %621 = shufflevector <8 x i16> %617, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %622 = zext <4 x i16> %621 to <4 x i32>
  %623 = shufflevector <8 x i16> %617, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %624 = bitcast <8 x i16> %620 to <4 x i32>
  %625 = bitcast <8 x i16> %623 to <4 x i32>
  %626 = add nsw <4 x i32> %619, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %627 = add nsw <4 x i32> %626, %622
  %628 = add <4 x i32> %624, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %629 = add <4 x i32> %628, %625
  %630 = ashr <4 x i32> %627, <i32 5, i32 5, i32 5, i32 5>
  %631 = ashr <4 x i32> %629, <i32 5, i32 5, i32 5, i32 5>
  %632 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %630, <4 x i32> %631) #5
  %633 = icmp slt <8 x i16> %632, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %634 = select <8 x i1> %633, <8 x i16> %632, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %635 = getelementptr inbounds i16, i16* %536, i64 24
  %636 = bitcast i16* %635 to <8 x i16>*
  store <8 x i16> %634, <8 x i16>* %636, align 1
  %637 = getelementptr inbounds i16, i16* %537, i64 32
  %638 = bitcast i16* %637 to <8 x i16>*
  %639 = load <8 x i16>, <8 x i16>* %638, align 1
  %640 = getelementptr inbounds i16, i16* %538, i64 32
  %641 = bitcast i16* %640 to <8 x i16>*
  %642 = load <8 x i16>, <8 x i16>* %641, align 1
  %643 = shufflevector <8 x i16> %639, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %644 = zext <4 x i16> %643 to <4 x i32>
  %645 = shufflevector <8 x i16> %639, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %646 = shufflevector <8 x i16> %642, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %647 = zext <4 x i16> %646 to <4 x i32>
  %648 = shufflevector <8 x i16> %642, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %649 = bitcast <8 x i16> %645 to <4 x i32>
  %650 = bitcast <8 x i16> %648 to <4 x i32>
  %651 = add nsw <4 x i32> %644, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %652 = add nsw <4 x i32> %651, %647
  %653 = add <4 x i32> %649, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %654 = add <4 x i32> %653, %650
  %655 = ashr <4 x i32> %652, <i32 5, i32 5, i32 5, i32 5>
  %656 = ashr <4 x i32> %654, <i32 5, i32 5, i32 5, i32 5>
  %657 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %655, <4 x i32> %656) #5
  %658 = icmp slt <8 x i16> %657, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %659 = select <8 x i1> %658, <8 x i16> %657, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %660 = getelementptr inbounds i16, i16* %536, i64 32
  %661 = bitcast i16* %660 to <8 x i16>*
  store <8 x i16> %659, <8 x i16>* %661, align 1
  %662 = getelementptr inbounds i16, i16* %537, i64 40
  %663 = bitcast i16* %662 to <8 x i16>*
  %664 = load <8 x i16>, <8 x i16>* %663, align 1
  %665 = getelementptr inbounds i16, i16* %538, i64 40
  %666 = bitcast i16* %665 to <8 x i16>*
  %667 = load <8 x i16>, <8 x i16>* %666, align 1
  %668 = shufflevector <8 x i16> %664, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %669 = zext <4 x i16> %668 to <4 x i32>
  %670 = shufflevector <8 x i16> %664, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %671 = shufflevector <8 x i16> %667, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %672 = zext <4 x i16> %671 to <4 x i32>
  %673 = shufflevector <8 x i16> %667, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %674 = bitcast <8 x i16> %670 to <4 x i32>
  %675 = bitcast <8 x i16> %673 to <4 x i32>
  %676 = add nsw <4 x i32> %669, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %677 = add nsw <4 x i32> %676, %672
  %678 = add <4 x i32> %674, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %679 = add <4 x i32> %678, %675
  %680 = ashr <4 x i32> %677, <i32 5, i32 5, i32 5, i32 5>
  %681 = ashr <4 x i32> %679, <i32 5, i32 5, i32 5, i32 5>
  %682 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %680, <4 x i32> %681) #5
  %683 = icmp slt <8 x i16> %682, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %684 = select <8 x i1> %683, <8 x i16> %682, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %685 = getelementptr inbounds i16, i16* %536, i64 40
  %686 = bitcast i16* %685 to <8 x i16>*
  store <8 x i16> %684, <8 x i16>* %686, align 1
  %687 = getelementptr inbounds i16, i16* %537, i64 48
  %688 = bitcast i16* %687 to <8 x i16>*
  %689 = load <8 x i16>, <8 x i16>* %688, align 1
  %690 = getelementptr inbounds i16, i16* %538, i64 48
  %691 = bitcast i16* %690 to <8 x i16>*
  %692 = load <8 x i16>, <8 x i16>* %691, align 1
  %693 = shufflevector <8 x i16> %689, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %694 = zext <4 x i16> %693 to <4 x i32>
  %695 = shufflevector <8 x i16> %689, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %696 = shufflevector <8 x i16> %692, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %697 = zext <4 x i16> %696 to <4 x i32>
  %698 = shufflevector <8 x i16> %692, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %699 = bitcast <8 x i16> %695 to <4 x i32>
  %700 = bitcast <8 x i16> %698 to <4 x i32>
  %701 = add nsw <4 x i32> %694, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %702 = add nsw <4 x i32> %701, %697
  %703 = add <4 x i32> %699, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %704 = add <4 x i32> %703, %700
  %705 = ashr <4 x i32> %702, <i32 5, i32 5, i32 5, i32 5>
  %706 = ashr <4 x i32> %704, <i32 5, i32 5, i32 5, i32 5>
  %707 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %705, <4 x i32> %706) #5
  %708 = icmp slt <8 x i16> %707, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %709 = select <8 x i1> %708, <8 x i16> %707, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %710 = getelementptr inbounds i16, i16* %536, i64 48
  %711 = bitcast i16* %710 to <8 x i16>*
  store <8 x i16> %709, <8 x i16>* %711, align 1
  %712 = getelementptr inbounds i16, i16* %537, i64 56
  %713 = bitcast i16* %712 to <8 x i16>*
  %714 = load <8 x i16>, <8 x i16>* %713, align 1
  %715 = getelementptr inbounds i16, i16* %538, i64 56
  %716 = bitcast i16* %715 to <8 x i16>*
  %717 = load <8 x i16>, <8 x i16>* %716, align 1
  %718 = shufflevector <8 x i16> %714, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %719 = zext <4 x i16> %718 to <4 x i32>
  %720 = shufflevector <8 x i16> %714, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %721 = shufflevector <8 x i16> %717, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %722 = zext <4 x i16> %721 to <4 x i32>
  %723 = shufflevector <8 x i16> %717, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %724 = bitcast <8 x i16> %720 to <4 x i32>
  %725 = bitcast <8 x i16> %723 to <4 x i32>
  %726 = add nsw <4 x i32> %719, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %727 = add nsw <4 x i32> %726, %722
  %728 = add <4 x i32> %724, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %729 = add <4 x i32> %728, %725
  %730 = ashr <4 x i32> %727, <i32 5, i32 5, i32 5, i32 5>
  %731 = ashr <4 x i32> %729, <i32 5, i32 5, i32 5, i32 5>
  %732 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %730, <4 x i32> %731) #5
  %733 = icmp slt <8 x i16> %732, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %734 = select <8 x i1> %733, <8 x i16> %732, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %735 = getelementptr inbounds i16, i16* %536, i64 56
  %736 = bitcast i16* %735 to <8 x i16>*
  store <8 x i16> %734, <8 x i16>* %736, align 1
  %737 = getelementptr inbounds i16, i16* %537, i64 64
  %738 = bitcast i16* %737 to <8 x i16>*
  %739 = load <8 x i16>, <8 x i16>* %738, align 1
  %740 = getelementptr inbounds i16, i16* %538, i64 64
  %741 = bitcast i16* %740 to <8 x i16>*
  %742 = load <8 x i16>, <8 x i16>* %741, align 1
  %743 = shufflevector <8 x i16> %739, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %744 = zext <4 x i16> %743 to <4 x i32>
  %745 = shufflevector <8 x i16> %739, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %746 = shufflevector <8 x i16> %742, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %747 = zext <4 x i16> %746 to <4 x i32>
  %748 = shufflevector <8 x i16> %742, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %749 = bitcast <8 x i16> %745 to <4 x i32>
  %750 = bitcast <8 x i16> %748 to <4 x i32>
  %751 = add nsw <4 x i32> %744, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %752 = add nsw <4 x i32> %751, %747
  %753 = add <4 x i32> %749, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %754 = add <4 x i32> %753, %750
  %755 = ashr <4 x i32> %752, <i32 5, i32 5, i32 5, i32 5>
  %756 = ashr <4 x i32> %754, <i32 5, i32 5, i32 5, i32 5>
  %757 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %755, <4 x i32> %756) #5
  %758 = icmp slt <8 x i16> %757, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %759 = select <8 x i1> %758, <8 x i16> %757, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %760 = getelementptr inbounds i16, i16* %536, i64 64
  %761 = bitcast i16* %760 to <8 x i16>*
  store <8 x i16> %759, <8 x i16>* %761, align 1
  %762 = getelementptr inbounds i16, i16* %537, i64 72
  %763 = bitcast i16* %762 to <8 x i16>*
  %764 = load <8 x i16>, <8 x i16>* %763, align 1
  %765 = getelementptr inbounds i16, i16* %538, i64 72
  %766 = bitcast i16* %765 to <8 x i16>*
  %767 = load <8 x i16>, <8 x i16>* %766, align 1
  %768 = shufflevector <8 x i16> %764, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %769 = zext <4 x i16> %768 to <4 x i32>
  %770 = shufflevector <8 x i16> %764, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %771 = shufflevector <8 x i16> %767, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %772 = zext <4 x i16> %771 to <4 x i32>
  %773 = shufflevector <8 x i16> %767, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %774 = bitcast <8 x i16> %770 to <4 x i32>
  %775 = bitcast <8 x i16> %773 to <4 x i32>
  %776 = add nsw <4 x i32> %769, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %777 = add nsw <4 x i32> %776, %772
  %778 = add <4 x i32> %774, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %779 = add <4 x i32> %778, %775
  %780 = ashr <4 x i32> %777, <i32 5, i32 5, i32 5, i32 5>
  %781 = ashr <4 x i32> %779, <i32 5, i32 5, i32 5, i32 5>
  %782 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %780, <4 x i32> %781) #5
  %783 = icmp slt <8 x i16> %782, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %784 = select <8 x i1> %783, <8 x i16> %782, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %785 = getelementptr inbounds i16, i16* %536, i64 72
  %786 = bitcast i16* %785 to <8 x i16>*
  store <8 x i16> %784, <8 x i16>* %786, align 1
  %787 = getelementptr inbounds i16, i16* %537, i64 80
  %788 = bitcast i16* %787 to <8 x i16>*
  %789 = load <8 x i16>, <8 x i16>* %788, align 1
  %790 = getelementptr inbounds i16, i16* %538, i64 80
  %791 = bitcast i16* %790 to <8 x i16>*
  %792 = load <8 x i16>, <8 x i16>* %791, align 1
  %793 = shufflevector <8 x i16> %789, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %794 = zext <4 x i16> %793 to <4 x i32>
  %795 = shufflevector <8 x i16> %789, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %796 = shufflevector <8 x i16> %792, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %797 = zext <4 x i16> %796 to <4 x i32>
  %798 = shufflevector <8 x i16> %792, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %799 = bitcast <8 x i16> %795 to <4 x i32>
  %800 = bitcast <8 x i16> %798 to <4 x i32>
  %801 = add nsw <4 x i32> %794, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %802 = add nsw <4 x i32> %801, %797
  %803 = add <4 x i32> %799, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %804 = add <4 x i32> %803, %800
  %805 = ashr <4 x i32> %802, <i32 5, i32 5, i32 5, i32 5>
  %806 = ashr <4 x i32> %804, <i32 5, i32 5, i32 5, i32 5>
  %807 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %805, <4 x i32> %806) #5
  %808 = icmp slt <8 x i16> %807, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %809 = select <8 x i1> %808, <8 x i16> %807, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %810 = getelementptr inbounds i16, i16* %536, i64 80
  %811 = bitcast i16* %810 to <8 x i16>*
  store <8 x i16> %809, <8 x i16>* %811, align 1
  %812 = getelementptr inbounds i16, i16* %537, i64 88
  %813 = bitcast i16* %812 to <8 x i16>*
  %814 = load <8 x i16>, <8 x i16>* %813, align 1
  %815 = getelementptr inbounds i16, i16* %538, i64 88
  %816 = bitcast i16* %815 to <8 x i16>*
  %817 = load <8 x i16>, <8 x i16>* %816, align 1
  %818 = shufflevector <8 x i16> %814, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %819 = zext <4 x i16> %818 to <4 x i32>
  %820 = shufflevector <8 x i16> %814, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %821 = shufflevector <8 x i16> %817, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %822 = zext <4 x i16> %821 to <4 x i32>
  %823 = shufflevector <8 x i16> %817, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %824 = bitcast <8 x i16> %820 to <4 x i32>
  %825 = bitcast <8 x i16> %823 to <4 x i32>
  %826 = add nsw <4 x i32> %819, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %827 = add nsw <4 x i32> %826, %822
  %828 = add <4 x i32> %824, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %829 = add <4 x i32> %828, %825
  %830 = ashr <4 x i32> %827, <i32 5, i32 5, i32 5, i32 5>
  %831 = ashr <4 x i32> %829, <i32 5, i32 5, i32 5, i32 5>
  %832 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %830, <4 x i32> %831) #5
  %833 = icmp slt <8 x i16> %832, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %834 = select <8 x i1> %833, <8 x i16> %832, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %835 = getelementptr inbounds i16, i16* %536, i64 88
  %836 = bitcast i16* %835 to <8 x i16>*
  store <8 x i16> %834, <8 x i16>* %836, align 1
  %837 = getelementptr inbounds i16, i16* %537, i64 96
  %838 = bitcast i16* %837 to <8 x i16>*
  %839 = load <8 x i16>, <8 x i16>* %838, align 1
  %840 = getelementptr inbounds i16, i16* %538, i64 96
  %841 = bitcast i16* %840 to <8 x i16>*
  %842 = load <8 x i16>, <8 x i16>* %841, align 1
  %843 = shufflevector <8 x i16> %839, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %844 = zext <4 x i16> %843 to <4 x i32>
  %845 = shufflevector <8 x i16> %839, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %846 = shufflevector <8 x i16> %842, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %847 = zext <4 x i16> %846 to <4 x i32>
  %848 = shufflevector <8 x i16> %842, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %849 = bitcast <8 x i16> %845 to <4 x i32>
  %850 = bitcast <8 x i16> %848 to <4 x i32>
  %851 = add nsw <4 x i32> %844, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %852 = add nsw <4 x i32> %851, %847
  %853 = add <4 x i32> %849, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %854 = add <4 x i32> %853, %850
  %855 = ashr <4 x i32> %852, <i32 5, i32 5, i32 5, i32 5>
  %856 = ashr <4 x i32> %854, <i32 5, i32 5, i32 5, i32 5>
  %857 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %855, <4 x i32> %856) #5
  %858 = icmp slt <8 x i16> %857, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %859 = select <8 x i1> %858, <8 x i16> %857, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %860 = getelementptr inbounds i16, i16* %536, i64 96
  %861 = bitcast i16* %860 to <8 x i16>*
  store <8 x i16> %859, <8 x i16>* %861, align 1
  %862 = getelementptr inbounds i16, i16* %537, i64 104
  %863 = bitcast i16* %862 to <8 x i16>*
  %864 = load <8 x i16>, <8 x i16>* %863, align 1
  %865 = getelementptr inbounds i16, i16* %538, i64 104
  %866 = bitcast i16* %865 to <8 x i16>*
  %867 = load <8 x i16>, <8 x i16>* %866, align 1
  %868 = shufflevector <8 x i16> %864, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %869 = zext <4 x i16> %868 to <4 x i32>
  %870 = shufflevector <8 x i16> %864, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %871 = shufflevector <8 x i16> %867, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %872 = zext <4 x i16> %871 to <4 x i32>
  %873 = shufflevector <8 x i16> %867, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %874 = bitcast <8 x i16> %870 to <4 x i32>
  %875 = bitcast <8 x i16> %873 to <4 x i32>
  %876 = add nsw <4 x i32> %869, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %877 = add nsw <4 x i32> %876, %872
  %878 = add <4 x i32> %874, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %879 = add <4 x i32> %878, %875
  %880 = ashr <4 x i32> %877, <i32 5, i32 5, i32 5, i32 5>
  %881 = ashr <4 x i32> %879, <i32 5, i32 5, i32 5, i32 5>
  %882 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %880, <4 x i32> %881) #5
  %883 = icmp slt <8 x i16> %882, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %884 = select <8 x i1> %883, <8 x i16> %882, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %885 = getelementptr inbounds i16, i16* %536, i64 104
  %886 = bitcast i16* %885 to <8 x i16>*
  store <8 x i16> %884, <8 x i16>* %886, align 1
  %887 = getelementptr inbounds i16, i16* %537, i64 112
  %888 = bitcast i16* %887 to <8 x i16>*
  %889 = load <8 x i16>, <8 x i16>* %888, align 1
  %890 = getelementptr inbounds i16, i16* %538, i64 112
  %891 = bitcast i16* %890 to <8 x i16>*
  %892 = load <8 x i16>, <8 x i16>* %891, align 1
  %893 = shufflevector <8 x i16> %889, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %894 = zext <4 x i16> %893 to <4 x i32>
  %895 = shufflevector <8 x i16> %889, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %896 = shufflevector <8 x i16> %892, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %897 = zext <4 x i16> %896 to <4 x i32>
  %898 = shufflevector <8 x i16> %892, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %899 = bitcast <8 x i16> %895 to <4 x i32>
  %900 = bitcast <8 x i16> %898 to <4 x i32>
  %901 = add nsw <4 x i32> %894, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %902 = add nsw <4 x i32> %901, %897
  %903 = add <4 x i32> %899, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %904 = add <4 x i32> %903, %900
  %905 = ashr <4 x i32> %902, <i32 5, i32 5, i32 5, i32 5>
  %906 = ashr <4 x i32> %904, <i32 5, i32 5, i32 5, i32 5>
  %907 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %905, <4 x i32> %906) #5
  %908 = icmp slt <8 x i16> %907, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %909 = select <8 x i1> %908, <8 x i16> %907, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %910 = getelementptr inbounds i16, i16* %536, i64 112
  %911 = bitcast i16* %910 to <8 x i16>*
  store <8 x i16> %909, <8 x i16>* %911, align 1
  %912 = getelementptr inbounds i16, i16* %537, i64 120
  %913 = bitcast i16* %912 to <8 x i16>*
  %914 = load <8 x i16>, <8 x i16>* %913, align 1
  %915 = getelementptr inbounds i16, i16* %538, i64 120
  %916 = bitcast i16* %915 to <8 x i16>*
  %917 = load <8 x i16>, <8 x i16>* %916, align 1
  %918 = shufflevector <8 x i16> %914, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %919 = zext <4 x i16> %918 to <4 x i32>
  %920 = shufflevector <8 x i16> %914, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %921 = shufflevector <8 x i16> %917, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %922 = zext <4 x i16> %921 to <4 x i32>
  %923 = shufflevector <8 x i16> %917, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %924 = bitcast <8 x i16> %920 to <4 x i32>
  %925 = bitcast <8 x i16> %923 to <4 x i32>
  %926 = add nsw <4 x i32> %919, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %927 = add nsw <4 x i32> %926, %922
  %928 = add <4 x i32> %924, <i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %929 = add <4 x i32> %928, %925
  %930 = ashr <4 x i32> %927, <i32 5, i32 5, i32 5, i32 5>
  %931 = ashr <4 x i32> %929, <i32 5, i32 5, i32 5, i32 5>
  %932 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %930, <4 x i32> %931) #5
  %933 = icmp slt <8 x i16> %932, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %934 = select <8 x i1> %933, <8 x i16> %932, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %935 = getelementptr inbounds i16, i16* %536, i64 120
  %936 = bitcast i16* %935 to <8 x i16>*
  store <8 x i16> %934, <8 x i16>* %936, align 1
  %937 = getelementptr inbounds i16, i16* %536, i64 %8
  %938 = getelementptr inbounds i16, i16* %537, i64 %12
  %939 = getelementptr inbounds i16, i16* %538, i64 %12
  %940 = add nsw i32 %539, -1
  %941 = icmp eq i32 %940, 0
  br i1 %941, label %942, label %535

942:                                              ; preds = %328, %221, %114, %55, %15, %535
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
