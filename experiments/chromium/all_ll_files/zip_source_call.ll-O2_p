; ModuleID = '../../third_party/libzip/src/lib/zip_source_call.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_call.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_zip_source_call(%struct.zip_source*, i8*, i64, i32) local_unnamed_addr #0 {
  %5 = alloca [2 x i32], align 4
  %6 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = zext i32 %3 to i64
  %9 = shl i64 1, %8
  %10 = and i64 %7, %9
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 3
  tail call void @zip_error_set(%struct.zip_error* %13, i32 28, i32 0) #3
  br label %69

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 0
  %16 = load %struct.zip_source*, %struct.zip_source** %15, align 8
  %17 = icmp eq %struct.zip_source* %16, null
  %18 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 1
  br i1 %17, label %19, label %25

19:                                               ; preds = %14
  %20 = getelementptr inbounds %union.anon, %union.anon* %18, i64 0, i32 0
  %21 = load i64 (i8*, i8*, i64, i32)*, i64 (i8*, i8*, i64, i32)** %20, align 8
  %22 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 2
  %23 = load i8*, i8** %22, align 8
  %24 = tail call i64 %21(i8* %23, i8* %1, i64 %2, i32 %3) #3
  br label %31

25:                                               ; preds = %14
  %26 = bitcast %union.anon* %18 to i64 (%struct.zip_source*, i8*, i8*, i64, i32)**
  %27 = load i64 (%struct.zip_source*, i8*, i8*, i64, i32)*, i64 (%struct.zip_source*, i8*, i8*, i64, i32)** %26, align 8
  %28 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 2
  %29 = load i8*, i8** %28, align 8
  %30 = tail call i64 %27(%struct.zip_source* nonnull %16, i8* %29, i8* %1, i64 %2, i32 %3) #3
  br label %31

31:                                               ; preds = %25, %19
  %32 = phi i64 [ %24, %19 ], [ %30, %25 ]
  %33 = icmp slt i64 %32, 0
  br i1 %33, label %34, label %69

34:                                               ; preds = %31
  switch i32 %3, label %35 [
    i32 14, label %69
    i32 4, label %69
  ]

35:                                               ; preds = %34
  %36 = bitcast [2 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #3
  %37 = getelementptr inbounds [2 x i32], [2 x i32]* %5, i64 0, i64 0
  store i32 -1431655766, i32* %37, align 4
  %38 = getelementptr inbounds [2 x i32], [2 x i32]* %5, i64 0, i64 1
  store i32 -1431655766, i32* %38, align 4
  %39 = load i64, i64* %6, align 8
  %40 = and i64 %39, 16
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %35
  %43 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 3
  tail call void @zip_error_set(%struct.zip_error* %43, i32 28, i32 0) #3
  br label %63

44:                                               ; preds = %35
  %45 = load %struct.zip_source*, %struct.zip_source** %15, align 8
  %46 = icmp eq %struct.zip_source* %45, null
  br i1 %46, label %47, label %53

47:                                               ; preds = %44
  %48 = getelementptr inbounds %union.anon, %union.anon* %18, i64 0, i32 0
  %49 = load i64 (i8*, i8*, i64, i32)*, i64 (i8*, i8*, i64, i32)** %48, align 8
  %50 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 2
  %51 = load i8*, i8** %50, align 8
  %52 = call i64 %49(i8* %51, i8* nonnull %36, i64 8, i32 4) #3
  br label %59

53:                                               ; preds = %44
  %54 = bitcast %union.anon* %18 to i64 (%struct.zip_source*, i8*, i8*, i64, i32)**
  %55 = load i64 (%struct.zip_source*, i8*, i8*, i64, i32)*, i64 (%struct.zip_source*, i8*, i8*, i64, i32)** %54, align 8
  %56 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 2
  %57 = load i8*, i8** %56, align 8
  %58 = call i64 %55(%struct.zip_source* nonnull %45, i8* %57, i8* nonnull %36, i64 8, i32 4) #3
  br label %59

59:                                               ; preds = %47, %53
  %60 = phi i64 [ %52, %47 ], [ %58, %53 ]
  %61 = icmp slt i64 %60, 0
  %62 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 3
  br i1 %61, label %63, label %65

63:                                               ; preds = %42, %59
  %64 = phi %struct.zip_error* [ %43, %42 ], [ %62, %59 ]
  call void @zip_error_set(%struct.zip_error* %64, i32 20, i32 0) #3
  br label %68

65:                                               ; preds = %59
  %66 = load i32, i32* %37, align 4
  %67 = load i32, i32* %38, align 4
  call void @zip_error_set(%struct.zip_error* %62, i32 %66, i32 %67) #3
  br label %68

68:                                               ; preds = %65, %63
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #3
  br label %69

69:                                               ; preds = %31, %68, %34, %34, %12
  %70 = phi i64 [ -1, %12 ], [ %32, %34 ], [ %32, %34 ], [ %32, %68 ], [ %32, %31 ]
  ret i64 %70
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
