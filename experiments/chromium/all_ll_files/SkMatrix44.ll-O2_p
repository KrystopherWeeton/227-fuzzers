; ModuleID = '../../third_party/skia/src/core/SkMatrix44.cpp'
source_filename = "../../third_party/skia/src/core/SkMatrix44.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%class.SkMatrix = type { [9 x float], i32 }

@_ZZN10SkMatrix441IEvE11gIdentity44 = internal constant { [4 x [4 x float]], i8 } { [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], i8 0 }, align 4
@__const._ZNK10SkMatrix446invertEPS_.tmp = private unnamed_addr constant %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }>, align 4
@_ZZNK10SkMatrix444map2EPKfiPfE5gProc = internal unnamed_addr constant [8 x void ([4 x float]*, float*, i32, float*)*] [void ([4 x float]*, float*, i32, float*)* @_ZL7map2_ifPA4_KfPS_iPf, void ([4 x float]*, float*, i32, float*)* @_ZL7map2_tfPA4_KfPS_iPf, void ([4 x float]*, float*, i32, float*)* @_ZL7map2_sfPA4_KfPS_iPf, void ([4 x float]*, float*, i32, float*)* @_ZL7map2_sfPA4_KfPS_iPf, void ([4 x float]*, float*, i32, float*)* @_ZL7map2_afPA4_KfPS_iPf, void ([4 x float]*, float*, i32, float*)* @_ZL7map2_afPA4_KfPS_iPf, void ([4 x float]*, float*, i32, float*)* @_ZL7map2_afPA4_KfPS_iPf, void ([4 x float]*, float*, i32, float*)* @_ZL7map2_afPA4_KfPS_iPf], align 16
@_ZZNK10SkMatrix444map2EPKdiPdE5gProc = internal unnamed_addr constant [8 x void ([4 x float]*, double*, i32, double*)*] [void ([4 x float]*, double*, i32, double*)* @_ZL7map2_idPA4_KfPKdiPd, void ([4 x float]*, double*, i32, double*)* @_ZL7map2_tdPA4_KfPKdiPd, void ([4 x float]*, double*, i32, double*)* @_ZL7map2_sdPA4_KfPKdiPd, void ([4 x float]*, double*, i32, double*)* @_ZL7map2_sdPA4_KfPKdiPd, void ([4 x float]*, double*, i32, double*)* @_ZL7map2_adPA4_KfPKdiPd, void ([4 x float]*, double*, i32, double*)* @_ZL7map2_adPA4_KfPKdiPd, void ([4 x float]*, double*, i32, double*)* @_ZL7map2_adPA4_KfPKdiPd, void ([4 x float]*, double*, i32, double*)* @_ZL7map2_adPA4_KfPKdiPd], align 16
@.str = private unnamed_addr constant [57 x i8] c"|%g %g %g %g|\0A|%g %g %g %g|\0A|%g %g %g %g|\0A|%g %g %g %g|\0A\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"../../third_party/skia/src/core/SkMatrix44.cpp\00", align 1
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4

@_ZN10SkMatrix44C1ERK8SkMatrix = hidden unnamed_addr alias void (%class.SkMatrix44*, %class.SkMatrix*), void (%class.SkMatrix44*, %class.SkMatrix*)* @_ZN10SkMatrix44C2ERK8SkMatrix

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK10SkMatrix44eqERKS_(%class.SkMatrix44* readonly, %class.SkMatrix44* readonly dereferenceable(68)) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %class.SkMatrix44* %0, %1
  br i1 %3, label %73, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  %6 = load i8, i8* %5, align 4
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %4
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 1
  %10 = load i8, i8* %9, align 4
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %73, label %12

12:                                               ; preds = %8, %4
  %13 = bitcast %class.SkMatrix44* %0 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 4, !alias.scope !2, !noalias !5
  %15 = bitcast %class.SkMatrix44* %1 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 4, !alias.scope !5, !noalias !2
  %17 = fcmp oeq <4 x float> %14, %16
  %18 = shufflevector <4 x i1> %17, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %19 = and <4 x i1> %17, %18
  %20 = shufflevector <4 x i1> %19, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %21 = and <4 x i1> %19, %20
  %22 = extractelement <4 x i1> %21, i32 0
  br i1 %22, label %23, label %73

23:                                               ; preds = %12
  %24 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 4
  %25 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 4
  %26 = bitcast float* %24 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 4, !alias.scope !7, !noalias !10
  %28 = bitcast float* %25 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 4, !alias.scope !10, !noalias !7
  %30 = fcmp oeq <4 x float> %27, %29
  %31 = shufflevector <4 x i1> %30, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %32 = and <4 x i1> %30, %31
  %33 = shufflevector <4 x i1> %32, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %34 = and <4 x i1> %32, %33
  %35 = extractelement <4 x i1> %34, i32 0
  br i1 %35, label %36, label %73

36:                                               ; preds = %23
  %37 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 8
  %38 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 8
  %39 = bitcast float* %37 to <4 x float>*
  %40 = load <4 x float>, <4 x float>* %39, align 4, !alias.scope !12, !noalias !15
  %41 = bitcast float* %38 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !alias.scope !15, !noalias !12
  %43 = fcmp oeq <4 x float> %40, %42
  %44 = shufflevector <4 x i1> %43, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %45 = and <4 x i1> %43, %44
  %46 = shufflevector <4 x i1> %45, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %47 = and <4 x i1> %45, %46
  %48 = extractelement <4 x i1> %47, i32 0
  br i1 %48, label %49, label %73

49:                                               ; preds = %36
  %50 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 12
  %51 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 12
  %52 = load float, float* %50, align 4, !alias.scope !17, !noalias !20
  %53 = load float, float* %51, align 4, !alias.scope !20, !noalias !17
  %54 = fcmp oeq float %52, %53
  %55 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 13
  %56 = load float, float* %55, align 4, !alias.scope !17, !noalias !20
  %57 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 13
  %58 = load float, float* %57, align 4, !alias.scope !20, !noalias !17
  %59 = fcmp oeq float %56, %58
  %60 = and i1 %54, %59
  %61 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 14
  %62 = load float, float* %61, align 4, !alias.scope !17, !noalias !20
  %63 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 14
  %64 = load float, float* %63, align 4, !alias.scope !20, !noalias !17
  %65 = fcmp oeq float %62, %64
  %66 = and i1 %60, %65
  %67 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 15
  %68 = load float, float* %67, align 4, !alias.scope !17, !noalias !20
  %69 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 15
  %70 = load float, float* %69, align 4, !alias.scope !20, !noalias !17
  %71 = fcmp oeq float %68, %70
  %72 = and i1 %66, %71
  br label %73

73:                                               ; preds = %49, %12, %23, %36, %8, %2
  %74 = phi i1 [ true, %2 ], [ true, %8 ], [ %72, %49 ], [ false, %12 ], [ false, %23 ], [ false, %36 ]
  ret i1 %74
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 0.000000e+00
  br i1 %4, label %72, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  %7 = load float, float* %6, align 4
  %8 = fcmp une float %7, 0.000000e+00
  br i1 %8, label %72, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %11 = load float, float* %10, align 4
  %12 = fcmp une float %11, 0.000000e+00
  br i1 %12, label %72, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %15 = load float, float* %14, align 4
  %16 = fcmp une float %15, 1.000000e+00
  br i1 %16, label %72, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %19 = load float, float* %18, align 4
  %20 = fcmp une float %19, 0.000000e+00
  br i1 %20, label %29, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %23 = load float, float* %22, align 4
  %24 = fcmp une float %23, 0.000000e+00
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %27 = load float, float* %26, align 4
  %28 = fcmp une float %27, 0.000000e+00
  br i1 %28, label %29, label %30

29:                                               ; preds = %25, %21, %17
  br label %30

30:                                               ; preds = %29, %25
  %31 = phi i8 [ 1, %29 ], [ 0, %25 ]
  %32 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %33 = load float, float* %32, align 4
  %34 = fcmp une float %33, 1.000000e+00
  br i1 %34, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %37 = load float, float* %36, align 4
  %38 = fcmp une float %37, 1.000000e+00
  br i1 %38, label %43, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %41 = load float, float* %40, align 4
  %42 = fcmp une float %41, 1.000000e+00
  br i1 %42, label %43, label %45

43:                                               ; preds = %39, %35, %30
  %44 = or i8 %31, 2
  br label %45

45:                                               ; preds = %43, %39
  %46 = phi i8 [ %44, %43 ], [ %31, %39 ]
  %47 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %48 = load float, float* %47, align 4
  %49 = fcmp une float %48, 0.000000e+00
  br i1 %49, label %70, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %52 = load float, float* %51, align 4
  %53 = fcmp une float %52, 0.000000e+00
  br i1 %53, label %70, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %56 = load float, float* %55, align 4
  %57 = fcmp une float %56, 0.000000e+00
  br i1 %57, label %70, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  %60 = load float, float* %59, align 4
  %61 = fcmp une float %60, 0.000000e+00
  br i1 %61, label %70, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %64 = load float, float* %63, align 4
  %65 = fcmp une float %64, 0.000000e+00
  br i1 %65, label %70, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  %68 = load float, float* %67, align 4
  %69 = fcmp une float %68, 0.000000e+00
  br i1 %69, label %70, label %72

70:                                               ; preds = %66, %62, %58, %54, %50, %45
  %71 = or i8 %46, 4
  br label %72

72:                                               ; preds = %66, %70, %1, %5, %9, %13
  %73 = phi i8 [ 15, %13 ], [ 15, %9 ], [ 15, %5 ], [ 15, %1 ], [ %71, %70 ], [ %46, %66 ]
  %74 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  store i8 %73, i8* %74, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK10SkMatrix4411asColMajorfEPf(%class.SkMatrix44* nocapture readonly, float* nocapture) local_unnamed_addr #2 align 2 {
  %3 = bitcast %class.SkMatrix44* %0 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast float* %1 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds float, float* %1, i64 1
  %10 = bitcast float* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds float, float* %1, i64 2
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds float, float* %1, i64 3
  %20 = bitcast float* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 4
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds float, float* %1, i64 4
  %25 = bitcast float* %24 to i32*
  store i32 %23, i32* %25, align 4
  %26 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 5
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds float, float* %1, i64 5
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 6
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds float, float* %1, i64 6
  %35 = bitcast float* %34 to i32*
  store i32 %33, i32* %35, align 4
  %36 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 7
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds float, float* %1, i64 7
  %40 = bitcast float* %39 to i32*
  store i32 %38, i32* %40, align 4
  %41 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 8
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds float, float* %1, i64 8
  %45 = bitcast float* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 9
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds float, float* %1, i64 9
  %50 = bitcast float* %49 to i32*
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 10
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds float, float* %1, i64 10
  %55 = bitcast float* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 11
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds float, float* %1, i64 11
  %60 = bitcast float* %59 to i32*
  store i32 %58, i32* %60, align 4
  %61 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 12
  %62 = bitcast float* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds float, float* %1, i64 12
  %65 = bitcast float* %64 to i32*
  store i32 %63, i32* %65, align 4
  %66 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 13
  %67 = bitcast float* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds float, float* %1, i64 13
  %70 = bitcast float* %69 to i32*
  store i32 %68, i32* %70, align 4
  %71 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 14
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds float, float* %1, i64 14
  %75 = bitcast float* %74 to i32*
  store i32 %73, i32* %75, align 4
  %76 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 15
  %77 = bitcast float* %76 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds float, float* %1, i64 15
  %80 = bitcast float* %79 to i32*
  store i32 %78, i32* %80, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK10SkMatrix4414as3x4RowMajorfEPf(%class.SkMatrix44* nocapture readonly, float* nocapture) local_unnamed_addr #2 align 2 {
  %3 = bitcast %class.SkMatrix44* %0 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast float* %1 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1
  %7 = bitcast [4 x float]* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds float, float* %1, i64 1
  %10 = bitcast float* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2
  %12 = bitcast [4 x float]* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds float, float* %1, i64 2
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3
  %17 = bitcast [4 x float]* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds float, float* %1, i64 3
  %20 = bitcast float* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds float, float* %1, i64 4
  %25 = bitcast float* %24 to i32*
  store i32 %23, i32* %25, align 4
  %26 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds float, float* %1, i64 5
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds float, float* %1, i64 6
  %35 = bitcast float* %34 to i32*
  store i32 %33, i32* %35, align 4
  %36 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds float, float* %1, i64 7
  %40 = bitcast float* %39 to i32*
  store i32 %38, i32* %40, align 4
  %41 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds float, float* %1, i64 8
  %45 = bitcast float* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds float, float* %1, i64 9
  %50 = bitcast float* %49 to i32*
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds float, float* %1, i64 10
  %55 = bitcast float* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds float, float* %1, i64 11
  %60 = bitcast float* %59 to i32*
  store i32 %58, i32* %60, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK10SkMatrix4411asColMajordEPd(%class.SkMatrix44* nocapture readonly, double* nocapture) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  store double %5, double* %1, align 8
  %6 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds double, double* %1, i64 1
  store double %8, double* %9, align 8
  %10 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %11 = load float, float* %10, align 4
  %12 = fpext float %11 to double
  %13 = getelementptr inbounds double, double* %1, i64 2
  store double %12, double* %13, align 8
  %14 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds double, double* %1, i64 3
  store double %16, double* %17, align 8
  %18 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 4
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = getelementptr inbounds double, double* %1, i64 4
  store double %20, double* %21, align 8
  %22 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 5
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  %25 = getelementptr inbounds double, double* %1, i64 5
  store double %24, double* %25, align 8
  %26 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 6
  %27 = load float, float* %26, align 4
  %28 = fpext float %27 to double
  %29 = getelementptr inbounds double, double* %1, i64 6
  store double %28, double* %29, align 8
  %30 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 7
  %31 = load float, float* %30, align 4
  %32 = fpext float %31 to double
  %33 = getelementptr inbounds double, double* %1, i64 7
  store double %32, double* %33, align 8
  %34 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 8
  %35 = load float, float* %34, align 4
  %36 = fpext float %35 to double
  %37 = getelementptr inbounds double, double* %1, i64 8
  store double %36, double* %37, align 8
  %38 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 9
  %39 = load float, float* %38, align 4
  %40 = fpext float %39 to double
  %41 = getelementptr inbounds double, double* %1, i64 9
  store double %40, double* %41, align 8
  %42 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 10
  %43 = load float, float* %42, align 4
  %44 = fpext float %43 to double
  %45 = getelementptr inbounds double, double* %1, i64 10
  store double %44, double* %45, align 8
  %46 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 11
  %47 = load float, float* %46, align 4
  %48 = fpext float %47 to double
  %49 = getelementptr inbounds double, double* %1, i64 11
  store double %48, double* %49, align 8
  %50 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 12
  %51 = load float, float* %50, align 4
  %52 = fpext float %51 to double
  %53 = getelementptr inbounds double, double* %1, i64 12
  store double %52, double* %53, align 8
  %54 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 13
  %55 = load float, float* %54, align 4
  %56 = fpext float %55 to double
  %57 = getelementptr inbounds double, double* %1, i64 13
  store double %56, double* %57, align 8
  %58 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 14
  %59 = load float, float* %58, align 4
  %60 = fpext float %59 to double
  %61 = getelementptr inbounds double, double* %1, i64 14
  store double %60, double* %61, align 8
  %62 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 15
  %63 = load float, float* %62, align 4
  %64 = fpext float %63 to double
  %65 = getelementptr inbounds double, double* %1, i64 15
  store double %64, double* %65, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK10SkMatrix4411asRowMajorfEPf(%class.SkMatrix44* nocapture readonly, float* nocapture) local_unnamed_addr #2 align 2 {
  %3 = bitcast %class.SkMatrix44* %0 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast float* %1 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds float, float* %1, i64 4
  %10 = bitcast float* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds float, float* %1, i64 8
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds float, float* %1, i64 12
  %20 = bitcast float* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 4
  %22 = getelementptr inbounds float, float* %1, i64 1
  %23 = bitcast float* %21 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = bitcast float* %22 to i32*
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 5
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds float, float* %1, i64 5
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 6
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds float, float* %1, i64 9
  %35 = bitcast float* %34 to i32*
  store i32 %33, i32* %35, align 4
  %36 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 7
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds float, float* %1, i64 13
  %40 = bitcast float* %39 to i32*
  store i32 %38, i32* %40, align 4
  %41 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 8
  %42 = getelementptr inbounds float, float* %1, i64 2
  %43 = bitcast float* %41 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = bitcast float* %42 to i32*
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 9
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds float, float* %1, i64 6
  %50 = bitcast float* %49 to i32*
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 10
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds float, float* %1, i64 10
  %55 = bitcast float* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 11
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds float, float* %1, i64 14
  %60 = bitcast float* %59 to i32*
  store i32 %58, i32* %60, align 4
  %61 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 12
  %62 = getelementptr inbounds float, float* %1, i64 3
  %63 = bitcast float* %61 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = bitcast float* %62 to i32*
  store i32 %64, i32* %65, align 4
  %66 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 13
  %67 = bitcast float* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds float, float* %1, i64 7
  %70 = bitcast float* %69 to i32*
  store i32 %68, i32* %70, align 4
  %71 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 14
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds float, float* %1, i64 11
  %75 = bitcast float* %74 to i32*
  store i32 %73, i32* %75, align 4
  %76 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 15
  %77 = bitcast float* %76 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds float, float* %1, i64 15
  %80 = bitcast float* %79 to i32*
  store i32 %78, i32* %80, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK10SkMatrix4411asRowMajordEPd(%class.SkMatrix44* nocapture readonly, double* nocapture) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  store double %5, double* %1, align 8
  %6 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds double, double* %1, i64 4
  store double %8, double* %9, align 8
  %10 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %11 = load float, float* %10, align 4
  %12 = fpext float %11 to double
  %13 = getelementptr inbounds double, double* %1, i64 8
  store double %12, double* %13, align 8
  %14 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds double, double* %1, i64 12
  store double %16, double* %17, align 8
  %18 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 4
  %19 = getelementptr inbounds double, double* %1, i64 1
  %20 = load float, float* %18, align 4
  %21 = fpext float %20 to double
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 5
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  %25 = getelementptr inbounds double, double* %1, i64 5
  store double %24, double* %25, align 8
  %26 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 6
  %27 = load float, float* %26, align 4
  %28 = fpext float %27 to double
  %29 = getelementptr inbounds double, double* %1, i64 9
  store double %28, double* %29, align 8
  %30 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 7
  %31 = load float, float* %30, align 4
  %32 = fpext float %31 to double
  %33 = getelementptr inbounds double, double* %1, i64 13
  store double %32, double* %33, align 8
  %34 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 8
  %35 = getelementptr inbounds double, double* %1, i64 2
  %36 = load float, float* %34, align 4
  %37 = fpext float %36 to double
  store double %37, double* %35, align 8
  %38 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 9
  %39 = load float, float* %38, align 4
  %40 = fpext float %39 to double
  %41 = getelementptr inbounds double, double* %1, i64 6
  store double %40, double* %41, align 8
  %42 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 10
  %43 = load float, float* %42, align 4
  %44 = fpext float %43 to double
  %45 = getelementptr inbounds double, double* %1, i64 10
  store double %44, double* %45, align 8
  %46 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 11
  %47 = load float, float* %46, align 4
  %48 = fpext float %47 to double
  %49 = getelementptr inbounds double, double* %1, i64 14
  store double %48, double* %49, align 8
  %50 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 12
  %51 = getelementptr inbounds double, double* %1, i64 3
  %52 = load float, float* %50, align 4
  %53 = fpext float %52 to double
  store double %53, double* %51, align 8
  %54 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 13
  %55 = load float, float* %54, align 4
  %56 = fpext float %55 to double
  %57 = getelementptr inbounds double, double* %1, i64 7
  store double %56, double* %57, align 8
  %58 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 14
  %59 = load float, float* %58, align 4
  %60 = fpext float %59 to double
  %61 = getelementptr inbounds double, double* %1, i64 11
  store double %60, double* %61, align 8
  %62 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 15
  %63 = load float, float* %62, align 4
  %64 = fpext float %63 to double
  %65 = getelementptr inbounds double, double* %1, i64 15
  store double %64, double* %65, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkMatrix4412setColMajorfEPKf(%class.SkMatrix44* nocapture, float* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = bitcast float* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %class.SkMatrix44* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds float, float* %1, i64 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %10 = bitcast float* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds float, float* %1, i64 2
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds float, float* %1, i64 3
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %20 = bitcast float* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = getelementptr inbounds float, float* %1, i64 4
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 4
  %25 = bitcast float* %24 to i32*
  store i32 %23, i32* %25, align 4
  %26 = getelementptr inbounds float, float* %1, i64 5
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 5
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = getelementptr inbounds float, float* %1, i64 6
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 6
  %35 = bitcast float* %34 to i32*
  store i32 %33, i32* %35, align 4
  %36 = getelementptr inbounds float, float* %1, i64 7
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 7
  %40 = bitcast float* %39 to i32*
  store i32 %38, i32* %40, align 4
  %41 = getelementptr inbounds float, float* %1, i64 8
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 8
  %45 = bitcast float* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr inbounds float, float* %1, i64 9
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 9
  %50 = bitcast float* %49 to i32*
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds float, float* %1, i64 10
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 10
  %55 = bitcast float* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds float, float* %1, i64 11
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 11
  %60 = bitcast float* %59 to i32*
  store i32 %58, i32* %60, align 4
  %61 = getelementptr inbounds float, float* %1, i64 12
  %62 = bitcast float* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 12
  %65 = bitcast float* %64 to i32*
  store i32 %63, i32* %65, align 4
  %66 = getelementptr inbounds float, float* %1, i64 13
  %67 = bitcast float* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 13
  %70 = bitcast float* %69 to i32*
  store i32 %68, i32* %70, align 4
  %71 = getelementptr inbounds float, float* %1, i64 14
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 14
  %75 = bitcast float* %74 to i32*
  store i32 %73, i32* %75, align 4
  %76 = getelementptr inbounds float, float* %1, i64 15
  %77 = bitcast float* %76 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 15
  %80 = bitcast float* %79 to i32*
  store i32 %78, i32* %80, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkMatrix4412setColMajordEPKd(%class.SkMatrix44* nocapture, double* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = load double, double* %1, align 8
  %4 = fptrunc double %3 to float
  %5 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  store float %4, float* %5, align 4
  %6 = getelementptr inbounds double, double* %1, i64 1
  %7 = load double, double* %6, align 8
  %8 = fptrunc double %7 to float
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  store float %8, float* %9, align 4
  %10 = getelementptr inbounds double, double* %1, i64 2
  %11 = load double, double* %10, align 8
  %12 = fptrunc double %11 to float
  %13 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  store float %12, float* %13, align 4
  %14 = getelementptr inbounds double, double* %1, i64 3
  %15 = load double, double* %14, align 8
  %16 = fptrunc double %15 to float
  %17 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  store float %16, float* %17, align 4
  %18 = getelementptr inbounds double, double* %1, i64 4
  %19 = load double, double* %18, align 8
  %20 = fptrunc double %19 to float
  %21 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 4
  store float %20, float* %21, align 4
  %22 = getelementptr inbounds double, double* %1, i64 5
  %23 = load double, double* %22, align 8
  %24 = fptrunc double %23 to float
  %25 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 5
  store float %24, float* %25, align 4
  %26 = getelementptr inbounds double, double* %1, i64 6
  %27 = load double, double* %26, align 8
  %28 = fptrunc double %27 to float
  %29 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 6
  store float %28, float* %29, align 4
  %30 = getelementptr inbounds double, double* %1, i64 7
  %31 = load double, double* %30, align 8
  %32 = fptrunc double %31 to float
  %33 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 7
  store float %32, float* %33, align 4
  %34 = getelementptr inbounds double, double* %1, i64 8
  %35 = load double, double* %34, align 8
  %36 = fptrunc double %35 to float
  %37 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 8
  store float %36, float* %37, align 4
  %38 = getelementptr inbounds double, double* %1, i64 9
  %39 = load double, double* %38, align 8
  %40 = fptrunc double %39 to float
  %41 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 9
  store float %40, float* %41, align 4
  %42 = getelementptr inbounds double, double* %1, i64 10
  %43 = load double, double* %42, align 8
  %44 = fptrunc double %43 to float
  %45 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 10
  store float %44, float* %45, align 4
  %46 = getelementptr inbounds double, double* %1, i64 11
  %47 = load double, double* %46, align 8
  %48 = fptrunc double %47 to float
  %49 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 11
  store float %48, float* %49, align 4
  %50 = getelementptr inbounds double, double* %1, i64 12
  %51 = load double, double* %50, align 8
  %52 = fptrunc double %51 to float
  %53 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 12
  store float %52, float* %53, align 4
  %54 = getelementptr inbounds double, double* %1, i64 13
  %55 = load double, double* %54, align 8
  %56 = fptrunc double %55 to float
  %57 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 13
  store float %56, float* %57, align 4
  %58 = getelementptr inbounds double, double* %1, i64 14
  %59 = load double, double* %58, align 8
  %60 = fptrunc double %59 to float
  %61 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 14
  store float %60, float* %61, align 4
  %62 = getelementptr inbounds double, double* %1, i64 15
  %63 = load double, double* %62, align 8
  %64 = fptrunc double %63 to float
  %65 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 15
  store float %64, float* %65, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkMatrix4412setRowMajorfEPKf(%class.SkMatrix44* nocapture, float* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = bitcast float* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %class.SkMatrix44* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds float, float* %1, i64 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 4
  %10 = bitcast float* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds float, float* %1, i64 2
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 8
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds float, float* %1, i64 3
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 12
  %20 = bitcast float* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = getelementptr inbounds float, float* %1, i64 4
  %22 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %23 = bitcast float* %21 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = bitcast float* %22 to i32*
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds float, float* %1, i64 5
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 5
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = getelementptr inbounds float, float* %1, i64 6
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 9
  %35 = bitcast float* %34 to i32*
  store i32 %33, i32* %35, align 4
  %36 = getelementptr inbounds float, float* %1, i64 7
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 13
  %40 = bitcast float* %39 to i32*
  store i32 %38, i32* %40, align 4
  %41 = getelementptr inbounds float, float* %1, i64 8
  %42 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %43 = bitcast float* %41 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = bitcast float* %42 to i32*
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds float, float* %1, i64 9
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 6
  %50 = bitcast float* %49 to i32*
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds float, float* %1, i64 10
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 10
  %55 = bitcast float* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds float, float* %1, i64 11
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 14
  %60 = bitcast float* %59 to i32*
  store i32 %58, i32* %60, align 4
  %61 = getelementptr inbounds float, float* %1, i64 12
  %62 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %63 = bitcast float* %61 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = bitcast float* %62 to i32*
  store i32 %64, i32* %65, align 4
  %66 = getelementptr inbounds float, float* %1, i64 13
  %67 = bitcast float* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 7
  %70 = bitcast float* %69 to i32*
  store i32 %68, i32* %70, align 4
  %71 = getelementptr inbounds float, float* %1, i64 14
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 11
  %75 = bitcast float* %74 to i32*
  store i32 %73, i32* %75, align 4
  %76 = getelementptr inbounds float, float* %1, i64 15
  %77 = bitcast float* %76 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 15
  %80 = bitcast float* %79 to i32*
  store i32 %78, i32* %80, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkMatrix4412setRowMajordEPKd(%class.SkMatrix44* nocapture, double* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %4 = load double, double* %1, align 8
  %5 = fptrunc double %4 to float
  store float %5, float* %3, align 4
  %6 = getelementptr inbounds double, double* %1, i64 1
  %7 = load double, double* %6, align 8
  %8 = fptrunc double %7 to float
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 4
  store float %8, float* %9, align 4
  %10 = getelementptr inbounds double, double* %1, i64 2
  %11 = load double, double* %10, align 8
  %12 = fptrunc double %11 to float
  %13 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 8
  store float %12, float* %13, align 4
  %14 = getelementptr inbounds double, double* %1, i64 3
  %15 = load double, double* %14, align 8
  %16 = fptrunc double %15 to float
  %17 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 12
  store float %16, float* %17, align 4
  %18 = getelementptr inbounds double, double* %1, i64 4
  %19 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %20 = load double, double* %18, align 8
  %21 = fptrunc double %20 to float
  store float %21, float* %19, align 4
  %22 = getelementptr inbounds double, double* %1, i64 5
  %23 = load double, double* %22, align 8
  %24 = fptrunc double %23 to float
  %25 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 5
  store float %24, float* %25, align 4
  %26 = getelementptr inbounds double, double* %1, i64 6
  %27 = load double, double* %26, align 8
  %28 = fptrunc double %27 to float
  %29 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 9
  store float %28, float* %29, align 4
  %30 = getelementptr inbounds double, double* %1, i64 7
  %31 = load double, double* %30, align 8
  %32 = fptrunc double %31 to float
  %33 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 13
  store float %32, float* %33, align 4
  %34 = getelementptr inbounds double, double* %1, i64 8
  %35 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %36 = load double, double* %34, align 8
  %37 = fptrunc double %36 to float
  store float %37, float* %35, align 4
  %38 = getelementptr inbounds double, double* %1, i64 9
  %39 = load double, double* %38, align 8
  %40 = fptrunc double %39 to float
  %41 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 6
  store float %40, float* %41, align 4
  %42 = getelementptr inbounds double, double* %1, i64 10
  %43 = load double, double* %42, align 8
  %44 = fptrunc double %43 to float
  %45 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 10
  store float %44, float* %45, align 4
  %46 = getelementptr inbounds double, double* %1, i64 11
  %47 = load double, double* %46, align 8
  %48 = fptrunc double %47 to float
  %49 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 14
  store float %48, float* %49, align 4
  %50 = getelementptr inbounds double, double* %1, i64 12
  %51 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %52 = load double, double* %50, align 8
  %53 = fptrunc double %52 to float
  store float %53, float* %51, align 4
  %54 = getelementptr inbounds double, double* %1, i64 13
  %55 = load double, double* %54, align 8
  %56 = fptrunc double %55 to float
  %57 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 7
  store float %56, float* %57, align 4
  %58 = getelementptr inbounds double, double* %1, i64 14
  %59 = load double, double* %58, align 8
  %60 = fptrunc double %59 to float
  %61 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 11
  store float %60, float* %61, align 4
  %62 = getelementptr inbounds double, double* %1, i64 15
  %63 = load double, double* %62, align 8
  %64 = fptrunc double %63 to float
  %65 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 15
  store float %64, float* %65, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix441IEv() local_unnamed_addr #3 align 2 {
  ret %class.SkMatrix44* bitcast ({ [4 x [4 x float]], i8 }* @_ZZN10SkMatrix441IEvE11gIdentity44 to %class.SkMatrix44*)
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10SkMatrix4411setIdentityEv(%class.SkMatrix44* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  store float 1.000000e+00, float* %2, align 4
  %3 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %4 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %5 = bitcast float* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %4, align 4
  %6 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %7 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %8 = bitcast float* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %10 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %11 = bitcast float* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %10, align 4
  %12 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  store i8 0, i8* %12, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkMatrix446set3x3Efffffffff(%class.SkMatrix44* nocapture, float, float, float, float, float, float, float, float, float) local_unnamed_addr #2 align 2 {
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  store float %1, float* %11, align 4
  %12 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  store float %2, float* %12, align 4
  %13 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  store float %3, float* %13, align 4
  %14 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  store float 0.000000e+00, float* %14, align 4
  %15 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  store float %4, float* %15, align 4
  %16 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  store float %5, float* %16, align 4
  %17 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  store float %6, float* %17, align 4
  %18 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  store float 0.000000e+00, float* %18, align 4
  %19 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  store float %7, float* %19, align 4
  %20 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  store float %8, float* %20, align 4
  %21 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  store float %9, float* %21, align 4
  %22 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %23 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %24 = bitcast float* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %23, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkMatrix4415set3x3RowMajorfEPKf(%class.SkMatrix44* nocapture, float* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = bitcast float* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %class.SkMatrix44* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds float, float* %1, i64 3
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %10 = bitcast float* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds float, float* %1, i64 6
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  store float 0.000000e+00, float* %16, align 4
  %17 = getelementptr inbounds float, float* %1, i64 1
  %18 = bitcast float* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1
  %21 = bitcast [4 x float]* %20 to i32*
  store i32 %19, i32* %21, align 4
  %22 = getelementptr inbounds float, float* %1, i64 4
  %23 = bitcast float* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %26 = bitcast float* %25 to i32*
  store i32 %24, i32* %26, align 4
  %27 = getelementptr inbounds float, float* %1, i64 7
  %28 = bitcast float* %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %31 = bitcast float* %30 to i32*
  store i32 %29, i32* %31, align 4
  %32 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  store float 0.000000e+00, float* %32, align 4
  %33 = getelementptr inbounds float, float* %1, i64 2
  %34 = bitcast float* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2
  %37 = bitcast [4 x float]* %36 to i32*
  store i32 %35, i32* %37, align 4
  %38 = getelementptr inbounds float, float* %1, i64 5
  %39 = bitcast float* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  %42 = bitcast float* %41 to i32*
  store i32 %40, i32* %42, align 4
  %43 = getelementptr inbounds float, float* %1, i64 8
  %44 = bitcast float* %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %47 = bitcast float* %46 to i32*
  store i32 %45, i32* %47, align 4
  %48 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %49 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %50 = bitcast float* %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %50, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %49, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkMatrix4415set3x4RowMajorfEPKf(%class.SkMatrix44* nocapture, float* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = bitcast float* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %class.SkMatrix44* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds float, float* %1, i64 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1
  %10 = bitcast [4 x float]* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds float, float* %1, i64 2
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2
  %15 = bitcast [4 x float]* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds float, float* %1, i64 3
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3
  %20 = bitcast [4 x float]* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = getelementptr inbounds float, float* %1, i64 4
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %25 = bitcast float* %24 to i32*
  store i32 %23, i32* %25, align 4
  %26 = getelementptr inbounds float, float* %1, i64 5
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = getelementptr inbounds float, float* %1, i64 6
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  %35 = bitcast float* %34 to i32*
  store i32 %33, i32* %35, align 4
  %36 = getelementptr inbounds float, float* %1, i64 7
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %40 = bitcast float* %39 to i32*
  store i32 %38, i32* %40, align 4
  %41 = getelementptr inbounds float, float* %1, i64 8
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %45 = bitcast float* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr inbounds float, float* %1, i64 9
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %50 = bitcast float* %49 to i32*
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds float, float* %1, i64 10
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %55 = bitcast float* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds float, float* %1, i64 11
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %60 = bitcast float* %59 to i32*
  store i32 %58, i32* %60, align 4
  %61 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  store float 0.000000e+00, float* %61, align 4
  %62 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  store float 0.000000e+00, float* %62, align 4
  %63 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  store float 0.000000e+00, float* %63, align 4
  %64 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  store float 1.000000e+00, float* %64, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkMatrix446set4x4Effffffffffffffff(%class.SkMatrix44* nocapture, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float) local_unnamed_addr #2 align 2 {
  %18 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  store float %1, float* %18, align 4
  %19 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  store float %2, float* %19, align 4
  %20 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  store float %3, float* %20, align 4
  %21 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  store float %4, float* %21, align 4
  %22 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  store float %5, float* %22, align 4
  %23 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  store float %6, float* %23, align 4
  %24 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  store float %7, float* %24, align 4
  %25 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  store float %8, float* %25, align 4
  %26 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  store float %9, float* %26, align 4
  %27 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  store float %10, float* %27, align 4
  %28 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  store float %11, float* %28, align 4
  %29 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  store float %12, float* %29, align 4
  %30 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  store float %13, float* %30, align 4
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  store float %14, float* %31, align 4
  %32 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  store float %15, float* %32, align 4
  %33 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  store float %16, float* %33, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix4412setTranslateEfff(%class.SkMatrix44* returned, float, float, float) local_unnamed_addr #5 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  store float 1.000000e+00, float* %5, align 4
  %6 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %7 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %8 = bitcast float* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %10 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %11 = bitcast float* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %10, align 4
  %12 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %13 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %14 = bitcast float* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %13, align 4
  %15 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  store i8 0, i8* %15, align 4
  %16 = fcmp une float %1, 0.000000e+00
  %17 = fcmp une float %2, 0.000000e+00
  %18 = or i1 %16, %17
  %19 = fcmp une float %3, 0.000000e+00
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  store float %1, float* %22, align 4
  %23 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  store float %2, float* %23, align 4
  %24 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  store float %3, float* %24, align 4
  store i8 1, i8* %15, align 4
  br label %25

25:                                               ; preds = %4, %21
  ret %class.SkMatrix44* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix4412preTranslateEfff(%class.SkMatrix44* returned, float, float, float) local_unnamed_addr #2 align 2 {
  %5 = fcmp une float %1, 0.000000e+00
  %6 = fcmp une float %2, 0.000000e+00
  %7 = or i1 %5, %6
  %8 = fcmp une float %3, 0.000000e+00
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %35

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %12 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  %13 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %14 = bitcast %class.SkMatrix44* %0 to <4 x float>*
  %15 = load <4 x float>, <4 x float>* %14, align 4
  %16 = insertelement <4 x float> undef, float %1, i32 0
  %17 = shufflevector <4 x float> %16, <4 x float> undef, <4 x i32> zeroinitializer
  %18 = fmul <4 x float> %15, %17
  %19 = bitcast float* %11 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 4
  %21 = insertelement <4 x float> undef, float %2, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  %23 = fmul <4 x float> %20, %22
  %24 = fadd <4 x float> %18, %23
  %25 = bitcast float* %12 to <4 x float>*
  %26 = load <4 x float>, <4 x float>* %25, align 4
  %27 = insertelement <4 x float> undef, float %3, i32 0
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> zeroinitializer
  %29 = fmul <4 x float> %26, %28
  %30 = fadd <4 x float> %24, %29
  %31 = bitcast float* %13 to <4 x float>*
  %32 = load <4 x float>, <4 x float>* %31, align 4
  %33 = fadd <4 x float> %32, %30
  %34 = bitcast float* %13 to <4 x float>*
  store <4 x float> %33, <4 x float>* %34, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  br label %35

35:                                               ; preds = %4, %10
  ret %class.SkMatrix44* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix4413postTranslateEfff(%class.SkMatrix44* returned, float, float, float) local_unnamed_addr #2 align 2 {
  %5 = fcmp une float %1, 0.000000e+00
  %6 = fcmp une float %2, 0.000000e+00
  %7 = or i1 %5, %6
  %8 = fcmp une float %3, 0.000000e+00
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %82

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  %12 = load i8, i8* %11, align 4
  %13 = and i8 %12, 8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %72, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %17 = load float, float* %16, align 4
  %18 = fmul float %17, %1
  %19 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %20 = load float, float* %19, align 4
  %21 = fadd float %20, %18
  store float %21, float* %19, align 4
  %22 = fmul float %17, %2
  %23 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %24 = load float, float* %23, align 4
  %25 = fadd float %22, %24
  store float %25, float* %23, align 4
  %26 = fmul float %17, %3
  %27 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %28 = load float, float* %27, align 4
  %29 = fadd float %26, %28
  store float %29, float* %27, align 4
  %30 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  %31 = load float, float* %30, align 4
  %32 = fmul float %31, %1
  %33 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %34 = load float, float* %33, align 4
  %35 = fadd float %34, %32
  store float %35, float* %33, align 4
  %36 = fmul float %31, %2
  %37 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %38 = load float, float* %37, align 4
  %39 = fadd float %36, %38
  store float %39, float* %37, align 4
  %40 = fmul float %31, %3
  %41 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %42 = load float, float* %41, align 4
  %43 = fadd float %40, %42
  store float %43, float* %41, align 4
  %44 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %45 = load float, float* %44, align 4
  %46 = fmul float %45, %1
  %47 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  %48 = load float, float* %47, align 4
  %49 = fadd float %48, %46
  store float %49, float* %47, align 4
  %50 = fmul float %45, %2
  %51 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  %52 = load float, float* %51, align 4
  %53 = fadd float %50, %52
  store float %53, float* %51, align 4
  %54 = fmul float %45, %3
  %55 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %56 = load float, float* %55, align 4
  %57 = fadd float %54, %56
  store float %57, float* %55, align 4
  %58 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %59 = load float, float* %58, align 4
  %60 = fmul float %59, %1
  %61 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %62 = load float, float* %61, align 4
  %63 = fadd float %62, %60
  store float %63, float* %61, align 4
  %64 = fmul float %59, %2
  %65 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %66 = load float, float* %65, align 4
  %67 = fadd float %64, %66
  store float %67, float* %65, align 4
  %68 = fmul float %59, %3
  %69 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %70 = load float, float* %69, align 4
  %71 = fadd float %68, %70
  store float %71, float* %69, align 4
  br label %82

72:                                               ; preds = %10
  %73 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %74 = load float, float* %73, align 4
  %75 = fadd float %74, %1
  store float %75, float* %73, align 4
  %76 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %77 = load float, float* %76, align 4
  %78 = fadd float %77, %2
  store float %78, float* %76, align 4
  %79 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %80 = load float, float* %79, align 4
  %81 = fadd float %80, %3
  store float %81, float* %79, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  br label %82

82:                                               ; preds = %15, %72, %4
  ret %class.SkMatrix44* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix448setScaleEfff(%class.SkMatrix44* returned, float, float, float) local_unnamed_addr #5 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  store float 1.000000e+00, float* %5, align 4
  %6 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %7 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %8 = bitcast float* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %10 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %11 = bitcast float* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %10, align 4
  %12 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %13 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %14 = bitcast float* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %13, align 4
  %15 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  store i8 0, i8* %15, align 4
  %16 = fcmp oeq float %1, 1.000000e+00
  %17 = fcmp oeq float %2, 1.000000e+00
  %18 = and i1 %16, %17
  %19 = fcmp oeq float %3, 1.000000e+00
  %20 = and i1 %18, %19
  br i1 %20, label %22, label %21

21:                                               ; preds = %4
  store float %1, float* %5, align 4
  store float %2, float* %7, align 4
  store float %3, float* %10, align 4
  store i8 2, i8* %15, align 4
  br label %22

22:                                               ; preds = %4, %21
  ret %class.SkMatrix44* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix448preScaleEfff(%class.SkMatrix44* returned, float, float, float) local_unnamed_addr #2 align 2 {
  %5 = fcmp oeq float %1, 1.000000e+00
  %6 = fcmp oeq float %2, 1.000000e+00
  %7 = and i1 %5, %6
  %8 = fcmp oeq float %3, 1.000000e+00
  %9 = and i1 %7, %8
  br i1 %9, label %31, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %12 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  %13 = bitcast %class.SkMatrix44* %0 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 4
  %15 = insertelement <4 x float> undef, float %1, i32 0
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> zeroinitializer
  %17 = fmul <4 x float> %14, %16
  %18 = bitcast %class.SkMatrix44* %0 to <4 x float>*
  store <4 x float> %17, <4 x float>* %18, align 4
  %19 = bitcast float* %11 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 4
  %21 = insertelement <4 x float> undef, float %2, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  %23 = fmul <4 x float> %20, %22
  %24 = bitcast float* %11 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 4
  %25 = bitcast float* %12 to <4 x float>*
  %26 = load <4 x float>, <4 x float>* %25, align 4
  %27 = insertelement <4 x float> undef, float %3, i32 0
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> zeroinitializer
  %29 = fmul <4 x float> %26, %28
  %30 = bitcast float* %12 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  br label %31

31:                                               ; preds = %4, %10
  ret %class.SkMatrix44* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix449postScaleEfff(%class.SkMatrix44* returned, float, float, float) local_unnamed_addr #2 align 2 {
  %5 = fcmp oeq float %1, 1.000000e+00
  %6 = fcmp oeq float %2, 1.000000e+00
  %7 = and i1 %5, %6
  %8 = fcmp oeq float %3, 1.000000e+00
  %9 = and i1 %7, %8
  br i1 %9, label %47, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, %1
  store float %13, float* %11, align 4
  %14 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %15 = load float, float* %14, align 4
  %16 = fmul float %15, %2
  store float %16, float* %14, align 4
  %17 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fmul float %18, %3
  store float %19, float* %17, align 4
  %20 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %21 = load float, float* %20, align 4
  %22 = fmul float %21, %1
  store float %22, float* %20, align 4
  %23 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %24 = load float, float* %23, align 4
  %25 = fmul float %24, %2
  store float %25, float* %23, align 4
  %26 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %27 = load float, float* %26, align 4
  %28 = fmul float %27, %3
  store float %28, float* %26, align 4
  %29 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  %30 = load float, float* %29, align 4
  %31 = fmul float %30, %1
  store float %31, float* %29, align 4
  %32 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  %33 = load float, float* %32, align 4
  %34 = fmul float %33, %2
  store float %34, float* %32, align 4
  %35 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %36 = load float, float* %35, align 4
  %37 = fmul float %36, %3
  store float %37, float* %35, align 4
  %38 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %39 = load float, float* %38, align 4
  %40 = fmul float %39, %1
  store float %40, float* %38, align 4
  %41 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %42 = load float, float* %41, align 4
  %43 = fmul float %42, %2
  store float %43, float* %41, align 4
  %44 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %45 = load float, float* %44, align 4
  %46 = fmul float %45, %3
  store float %46, float* %44, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  br label %47

47:                                               ; preds = %4, %10
  ret %class.SkMatrix44* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkMatrix4414setRotateAboutEffff(%class.SkMatrix44*, float, float, float, float) local_unnamed_addr #5 align 2 {
  %6 = fpext float %1 to double
  %7 = fmul double %6, %6
  %8 = insertelement <2 x float> undef, float %3, i32 0
  %9 = insertelement <2 x float> %8, float %2, i32 1
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = fmul <2 x double> %10, %10
  %12 = extractelement <2 x double> %11, i32 1
  %13 = fadd double %7, %12
  %14 = extractelement <2 x double> %11, i32 0
  %15 = fadd double %13, %14
  %16 = fcmp une double %15, 1.000000e+00
  br i1 %16, label %17, label %42

17:                                               ; preds = %5
  %18 = fcmp oeq double %15, 0.000000e+00
  br i1 %18, label %19, label %31

19:                                               ; preds = %17
  %20 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  store float 1.000000e+00, float* %20, align 4
  %21 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %22 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %23 = bitcast float* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %23, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %22, align 4
  %24 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %25 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %26 = bitcast float* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %26, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %25, align 4
  %27 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %28 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %29 = bitcast float* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %28, align 4
  %30 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  store i8 0, i8* %30, align 4
  br label %96

31:                                               ; preds = %17
  %32 = tail call double @sqrt(double %15) #10
  %33 = fdiv double 1.000000e+00, %32
  %34 = fmul double %33, %6
  %35 = fptrunc double %34 to float
  %36 = insertelement <2 x double> undef, double %33, i32 0
  %37 = shufflevector <2 x double> %36, <2 x double> undef, <2 x i32> zeroinitializer
  %38 = fmul <2 x double> %37, %10
  %39 = fptrunc <2 x double> %38 to <2 x float>
  %40 = fpext float %35 to double
  %41 = fpext <2 x float> %39 to <2 x double>
  br label %42

42:                                               ; preds = %31, %5
  %43 = phi double [ %40, %31 ], [ %6, %5 ]
  %44 = phi <2 x double> [ %41, %31 ], [ %10, %5 ]
  %45 = tail call float @cosf(float %4) #10
  %46 = fpext float %45 to double
  %47 = tail call float @sinf(float %4) #10
  %48 = fpext float %47 to double
  %49 = fsub double 1.000000e+00, %46
  %50 = fmul double %43, %48
  %51 = extractelement <2 x double> %44, i32 1
  %52 = fmul double %51, %48
  %53 = extractelement <2 x double> %44, i32 0
  %54 = fmul double %53, %48
  %55 = fmul double %49, %43
  %56 = fmul double %49, %51
  %57 = fmul double %49, %53
  %58 = fmul double %56, %43
  %59 = fmul double %57, %51
  %60 = fmul double %55, %53
  %61 = fmul double %55, %43
  %62 = fadd double %61, %46
  %63 = fptrunc double %62 to float
  %64 = fadd double %54, %58
  %65 = fptrunc double %64 to float
  %66 = fsub double %60, %52
  %67 = fptrunc double %66 to float
  %68 = fsub double %58, %54
  %69 = fptrunc double %68 to float
  %70 = fmul double %56, %51
  %71 = fadd double %70, %46
  %72 = fptrunc double %71 to float
  %73 = fadd double %50, %59
  %74 = fptrunc double %73 to float
  %75 = fadd double %52, %60
  %76 = fptrunc double %75 to float
  %77 = fsub double %59, %50
  %78 = fptrunc double %77 to float
  %79 = fmul double %57, %53
  %80 = fadd double %79, %46
  %81 = fptrunc double %80 to float
  %82 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  store float %63, float* %82, align 4
  %83 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  store float %65, float* %83, align 4
  %84 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  store float %67, float* %84, align 4
  %85 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  store float 0.000000e+00, float* %85, align 4
  %86 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  store float %69, float* %86, align 4
  %87 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  store float %72, float* %87, align 4
  %88 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  store float %74, float* %88, align 4
  %89 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  store float 0.000000e+00, float* %89, align 4
  %90 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  store float %76, float* %90, align 4
  %91 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  store float %78, float* %91, align 4
  %92 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  store float %81, float* %92, align 4
  %93 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %94 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %95 = bitcast float* %93 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %95, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %94, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0) #10
  br label %96

96:                                               ; preds = %42, %19
  ret void
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkMatrix4418setRotateAboutUnitEffff(%class.SkMatrix44* nocapture, float, float, float, float) local_unnamed_addr #5 align 2 {
  %6 = tail call float @cosf(float %4) #10
  %7 = fpext float %6 to double
  %8 = tail call float @sinf(float %4) #10
  %9 = fpext float %8 to double
  %10 = fsub double 1.000000e+00, %7
  %11 = fpext float %1 to double
  %12 = fmul double %11, %9
  %13 = fpext float %2 to double
  %14 = fmul double %13, %9
  %15 = fpext float %3 to double
  %16 = fmul double %15, %9
  %17 = fmul double %10, %11
  %18 = fmul double %10, %13
  %19 = fmul double %10, %15
  %20 = fmul double %18, %11
  %21 = fmul double %19, %13
  %22 = fmul double %17, %15
  %23 = fmul double %17, %11
  %24 = fadd double %23, %7
  %25 = fptrunc double %24 to float
  %26 = fadd double %16, %20
  %27 = fptrunc double %26 to float
  %28 = fsub double %22, %14
  %29 = fptrunc double %28 to float
  %30 = fsub double %20, %16
  %31 = fptrunc double %30 to float
  %32 = fmul double %18, %13
  %33 = fadd double %32, %7
  %34 = fptrunc double %33 to float
  %35 = fadd double %12, %21
  %36 = fptrunc double %35 to float
  %37 = fadd double %14, %22
  %38 = fptrunc double %37 to float
  %39 = fsub double %21, %12
  %40 = fptrunc double %39 to float
  %41 = fmul double %19, %15
  %42 = fadd double %41, %7
  %43 = fptrunc double %42 to float
  %44 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  store float %25, float* %44, align 4
  %45 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  store float %27, float* %45, align 4
  %46 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  store float %29, float* %46, align 4
  %47 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  store float 0.000000e+00, float* %47, align 4
  %48 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  store float %31, float* %48, align 4
  %49 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  store float %34, float* %49, align 4
  %50 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  store float %36, float* %50, align 4
  %51 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  store float 0.000000e+00, float* %51, align 4
  %52 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  store float %38, float* %52, align 4
  %53 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  store float %40, float* %53, align 4
  %54 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  store float %43, float* %54, align 4
  %55 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %56 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %57 = bitcast float* %55 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %57, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %56, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44*, %class.SkMatrix44* readonly dereferenceable(68), %class.SkMatrix44* readonly dereferenceable(68)) local_unnamed_addr #5 align 2 {
  %4 = alloca [16 x float], align 16
  %5 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 1
  %6 = load i8, i8* %5, align 4
  %7 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %2, i64 0, i32 1
  %8 = load i8, i8* %7, align 4
  %9 = icmp eq i8 %6, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %3
  %11 = bitcast %class.SkMatrix44* %0 to i8*
  %12 = bitcast %class.SkMatrix44* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 %12, i64 65, i1 false)
  br label %210

13:                                               ; preds = %3
  %14 = icmp eq i8 %8, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  %16 = bitcast %class.SkMatrix44* %0 to i8*
  %17 = bitcast %class.SkMatrix44* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %16, i8* align 4 %17, i64 65, i1 false)
  br label %210

18:                                               ; preds = %13
  %19 = icmp eq %class.SkMatrix44* %0, %1
  %20 = icmp eq %class.SkMatrix44* %0, %2
  %21 = or i1 %19, %20
  %22 = bitcast [16 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %22) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -1, i64 64, i1 false)
  %23 = getelementptr inbounds [16 x float], [16 x float]* %4, i64 0, i64 0
  %24 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %25 = select i1 %21, float* %23, float* %24
  %26 = or i8 %8, %6
  %27 = icmp ult i8 %26, 4
  br i1 %27, label %45, label %28

28:                                               ; preds = %18
  %29 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 3
  %30 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 0
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1, i64 0
  %32 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 2, i64 0
  %33 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 0
  %34 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 1
  %35 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1, i64 1
  %36 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 2, i64 1
  %37 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 1
  %38 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 2
  %39 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1, i64 2
  %40 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 2, i64 2
  %41 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 2
  %42 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1, i64 3
  %43 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 2, i64 3
  %44 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 3
  br label %93

45:                                               ; preds = %18
  %46 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 0
  %47 = load float, float* %46, align 4
  %48 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %2, i64 0, i32 0, i64 0, i64 0
  %49 = load float, float* %48, align 4
  %50 = fmul float %47, %49
  store float %50, float* %25, align 4
  %51 = getelementptr inbounds float, float* %25, i64 1
  %52 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1, i64 1
  %53 = bitcast float* %51 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %53, i8 0, i64 16, i1 false)
  %54 = load float, float* %52, align 4
  %55 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %2, i64 0, i32 0, i64 1, i64 1
  %56 = load float, float* %55, align 4
  %57 = fmul float %54, %56
  %58 = getelementptr inbounds float, float* %25, i64 5
  store float %57, float* %58, align 4
  %59 = getelementptr inbounds float, float* %25, i64 6
  %60 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 2, i64 2
  %61 = bitcast float* %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 16, i1 false)
  %62 = load float, float* %60, align 4
  %63 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %2, i64 0, i32 0, i64 2, i64 2
  %64 = load float, float* %63, align 4
  %65 = fmul float %62, %64
  %66 = getelementptr inbounds float, float* %25, i64 10
  store float %65, float* %66, align 4
  %67 = getelementptr inbounds float, float* %25, i64 11
  store float 0.000000e+00, float* %67, align 4
  %68 = load float, float* %46, align 4
  %69 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %2, i64 0, i32 0, i64 3, i64 0
  %70 = load float, float* %69, align 4
  %71 = fmul float %68, %70
  %72 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 0
  %73 = load float, float* %72, align 4
  %74 = fadd float %71, %73
  %75 = getelementptr inbounds float, float* %25, i64 12
  store float %74, float* %75, align 4
  %76 = load float, float* %52, align 4
  %77 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %2, i64 0, i32 0, i64 3, i64 1
  %78 = load float, float* %77, align 4
  %79 = fmul float %76, %78
  %80 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 1
  %81 = load float, float* %80, align 4
  %82 = fadd float %79, %81
  %83 = getelementptr inbounds float, float* %25, i64 13
  store float %82, float* %83, align 4
  %84 = load float, float* %60, align 4
  %85 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %2, i64 0, i32 0, i64 3, i64 2
  %86 = load float, float* %85, align 4
  %87 = fmul float %84, %86
  %88 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 2
  %89 = load float, float* %88, align 4
  %90 = fadd float %87, %89
  %91 = getelementptr inbounds float, float* %25, i64 14
  store float %90, float* %91, align 4
  %92 = getelementptr inbounds float, float* %25, i64 15
  store float 1.000000e+00, float* %92, align 4
  br label %206

93:                                               ; preds = %93, %28
  %94 = phi i64 [ 0, %28 ], [ %204, %93 ]
  %95 = phi float* [ %25, %28 ], [ %203, %93 ]
  %96 = load float, float* %30, align 4
  %97 = fpext float %96 to double
  %98 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %2, i64 0, i32 0, i64 %94, i64 0
  %99 = load float, float* %98, align 4
  %100 = fpext float %99 to double
  %101 = fmul double %97, %100
  %102 = fadd double %101, 0.000000e+00
  %103 = load float, float* %31, align 4
  %104 = fpext float %103 to double
  %105 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %2, i64 0, i32 0, i64 %94, i64 1
  %106 = load float, float* %105, align 4
  %107 = fpext float %106 to double
  %108 = fmul double %104, %107
  %109 = fadd double %102, %108
  %110 = load float, float* %32, align 4
  %111 = fpext float %110 to double
  %112 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %2, i64 0, i32 0, i64 %94, i64 2
  %113 = load float, float* %112, align 4
  %114 = fpext float %113 to double
  %115 = fmul double %111, %114
  %116 = fadd double %109, %115
  %117 = load float, float* %33, align 4
  %118 = fpext float %117 to double
  %119 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %2, i64 0, i32 0, i64 %94, i64 3
  %120 = load float, float* %119, align 4
  %121 = fpext float %120 to double
  %122 = fmul double %118, %121
  %123 = fadd double %116, %122
  %124 = fptrunc double %123 to float
  %125 = getelementptr inbounds float, float* %95, i64 1
  store float %124, float* %95, align 4
  %126 = load float, float* %34, align 4
  %127 = fpext float %126 to double
  %128 = load float, float* %98, align 4
  %129 = fpext float %128 to double
  %130 = fmul double %127, %129
  %131 = fadd double %130, 0.000000e+00
  %132 = load float, float* %35, align 4
  %133 = fpext float %132 to double
  %134 = load float, float* %105, align 4
  %135 = fpext float %134 to double
  %136 = fmul double %133, %135
  %137 = fadd double %131, %136
  %138 = load float, float* %36, align 4
  %139 = fpext float %138 to double
  %140 = load float, float* %112, align 4
  %141 = fpext float %140 to double
  %142 = fmul double %139, %141
  %143 = fadd double %137, %142
  %144 = load float, float* %37, align 4
  %145 = fpext float %144 to double
  %146 = load float, float* %119, align 4
  %147 = fpext float %146 to double
  %148 = fmul double %145, %147
  %149 = fadd double %143, %148
  %150 = fptrunc double %149 to float
  %151 = getelementptr inbounds float, float* %95, i64 2
  store float %150, float* %125, align 4
  %152 = load float, float* %38, align 4
  %153 = fpext float %152 to double
  %154 = load float, float* %98, align 4
  %155 = fpext float %154 to double
  %156 = fmul double %153, %155
  %157 = fadd double %156, 0.000000e+00
  %158 = load float, float* %39, align 4
  %159 = fpext float %158 to double
  %160 = load float, float* %105, align 4
  %161 = fpext float %160 to double
  %162 = fmul double %159, %161
  %163 = fadd double %157, %162
  %164 = load float, float* %40, align 4
  %165 = fpext float %164 to double
  %166 = load float, float* %112, align 4
  %167 = fpext float %166 to double
  %168 = fmul double %165, %167
  %169 = fadd double %163, %168
  %170 = load float, float* %41, align 4
  %171 = fpext float %170 to double
  %172 = load float, float* %119, align 4
  %173 = fpext float %172 to double
  %174 = fmul double %171, %173
  %175 = fadd double %169, %174
  %176 = fptrunc double %175 to float
  %177 = getelementptr inbounds float, float* %95, i64 3
  store float %176, float* %151, align 4
  %178 = load float, float* %29, align 4
  %179 = fpext float %178 to double
  %180 = load float, float* %98, align 4
  %181 = fpext float %180 to double
  %182 = fmul double %179, %181
  %183 = fadd double %182, 0.000000e+00
  %184 = load float, float* %42, align 4
  %185 = fpext float %184 to double
  %186 = load float, float* %105, align 4
  %187 = fpext float %186 to double
  %188 = fmul double %185, %187
  %189 = fadd double %183, %188
  %190 = load float, float* %43, align 4
  %191 = fpext float %190 to double
  %192 = load float, float* %112, align 4
  %193 = fpext float %192 to double
  %194 = fmul double %191, %193
  %195 = fadd double %189, %194
  %196 = load float, float* %44, align 4
  %197 = fpext float %196 to double
  %198 = load float, float* %119, align 4
  %199 = fpext float %198 to double
  %200 = fmul double %197, %199
  %201 = fadd double %195, %200
  %202 = fptrunc double %201 to float
  %203 = getelementptr inbounds float, float* %95, i64 4
  store float %202, float* %177, align 4
  %204 = add nuw nsw i64 %94, 1
  %205 = icmp eq i64 %204, 4
  br i1 %205, label %206, label %93

206:                                              ; preds = %93, %45
  br i1 %21, label %207, label %209

207:                                              ; preds = %206
  %208 = bitcast %class.SkMatrix44* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %208, i8* nonnull align 16 %22, i64 64, i1 false)
  br label %209

209:                                              ; preds = %207, %206
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %22) #10
  br label %210

210:                                              ; preds = %209, %15, %10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK10SkMatrix4411determinantEv(%class.SkMatrix44* readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 4
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %114, label %5

5:                                                ; preds = %1
  %6 = icmp ult i8 %3, 4
  %7 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %8 = load float, float* %7, align 4
  br i1 %6, label %9, label %20

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %11 = load float, float* %10, align 4
  %12 = fmul float %8, %11
  %13 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %14 = load float, float* %13, align 4
  %15 = fmul float %12, %14
  %16 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %17 = load float, float* %16, align 4
  %18 = fmul float %15, %17
  %19 = fpext float %18 to double
  br label %114

20:                                               ; preds = %5
  %21 = fpext float %8 to double
  %22 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  %25 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %26 = load float, float* %25, align 4
  %27 = fpext float %26 to double
  %28 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %29 = load float, float* %28, align 4
  %30 = fpext float %29 to double
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %32 = load float, float* %31, align 4
  %33 = fpext float %32 to double
  %34 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %35 = load float, float* %34, align 4
  %36 = fpext float %35 to double
  %37 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %38 = load float, float* %37, align 4
  %39 = fpext float %38 to double
  %40 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  %41 = load float, float* %40, align 4
  %42 = fpext float %41 to double
  %43 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  %44 = load float, float* %43, align 4
  %45 = fpext float %44 to double
  %46 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  %47 = load float, float* %46, align 4
  %48 = fpext float %47 to double
  %49 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %50 = load float, float* %49, align 4
  %51 = fpext float %50 to double
  %52 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %53 = load float, float* %52, align 4
  %54 = fpext float %53 to double
  %55 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %56 = load float, float* %55, align 4
  %57 = fpext float %56 to double
  %58 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %59 = load float, float* %58, align 4
  %60 = fpext float %59 to double
  %61 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %62 = load float, float* %61, align 4
  %63 = fpext float %62 to double
  %64 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %65 = load float, float* %64, align 4
  %66 = fpext float %65 to double
  %67 = fmul double %21, %36
  %68 = fmul double %24, %33
  %69 = fsub double %67, %68
  %70 = fmul double %21, %39
  %71 = fmul double %27, %33
  %72 = fsub double %70, %71
  %73 = fmul double %21, %42
  %74 = fmul double %30, %33
  %75 = fsub double %73, %74
  %76 = fmul double %24, %39
  %77 = fmul double %27, %36
  %78 = fsub double %76, %77
  %79 = fmul double %24, %42
  %80 = fmul double %30, %36
  %81 = fsub double %79, %80
  %82 = fmul double %27, %42
  %83 = fmul double %30, %39
  %84 = fsub double %82, %83
  %85 = fmul double %45, %60
  %86 = fmul double %48, %57
  %87 = fsub double %85, %86
  %88 = fmul double %45, %63
  %89 = fmul double %51, %57
  %90 = fsub double %88, %89
  %91 = fmul double %45, %66
  %92 = fmul double %54, %57
  %93 = fsub double %91, %92
  %94 = fmul double %48, %63
  %95 = fmul double %51, %60
  %96 = fsub double %94, %95
  %97 = fmul double %48, %66
  %98 = fmul double %54, %60
  %99 = fsub double %97, %98
  %100 = fmul double %51, %66
  %101 = fmul double %54, %63
  %102 = fsub double %100, %101
  %103 = fmul double %69, %102
  %104 = fmul double %72, %99
  %105 = fsub double %103, %104
  %106 = fmul double %75, %96
  %107 = fadd double %106, %105
  %108 = fmul double %78, %93
  %109 = fadd double %108, %107
  %110 = fmul double %81, %90
  %111 = fsub double %109, %110
  %112 = fmul double %84, %87
  %113 = fadd double %112, %111
  br label %114

114:                                              ; preds = %1, %20, %9
  %115 = phi double [ %19, %9 ], [ %113, %20 ], [ 1.000000e+00, %1 ]
  ret double %115
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10SkMatrix446invertEPS_(%class.SkMatrix44* readonly, %class.SkMatrix44*) local_unnamed_addr #5 align 2 {
  %3 = alloca %class.SkMatrix44, align 4
  %4 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 4
  switch i8 %5, label %52 [
    i8 0, label %6
    i8 1, label %20
  ]

6:                                                ; preds = %2
  %7 = icmp eq %class.SkMatrix44* %1, null
  br i1 %7, label %557, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 0
  store float 1.000000e+00, float* %9, align 4
  %10 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 1
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1, i64 1
  %12 = bitcast float* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %11, align 4
  %13 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1, i64 2
  %14 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 2, i64 2
  %15 = bitcast float* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %14, align 4
  %16 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 2, i64 3
  %17 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 3
  %18 = bitcast float* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %17, align 4
  %19 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 1
  store i8 0, i8* %19, align 4
  br label %557

20:                                               ; preds = %2
  %21 = icmp eq %class.SkMatrix44* %1, null
  br i1 %21, label %557, label %22

22:                                               ; preds = %20
  %23 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 0
  store float 1.000000e+00, float* %29, align 4
  %30 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 1
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1, i64 1
  %32 = bitcast float* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %32, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %31, align 4
  %33 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1, i64 2
  %34 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 2, i64 2
  %35 = bitcast float* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %34, align 4
  %36 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 2, i64 3
  %37 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 3
  %38 = bitcast float* %36 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %38, i8 0, i64 16, i1 false) #10
  store float 1.000000e+00, float* %37, align 4
  %39 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 1
  store i8 0, i8* %39, align 4
  %40 = fcmp une float %24, 0.000000e+00
  %41 = fcmp une float %26, 0.000000e+00
  %42 = or i1 %40, %41
  %43 = fcmp une float %28, 0.000000e+00
  %44 = or i1 %42, %43
  br i1 %44, label %45, label %557

45:                                               ; preds = %22
  %46 = fsub float -0.000000e+00, %28
  %47 = fsub float -0.000000e+00, %26
  %48 = fsub float -0.000000e+00, %24
  %49 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 0
  store float %48, float* %49, align 4
  %50 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 1
  store float %47, float* %50, align 4
  %51 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 2
  store float %46, float* %51, align 4
  store i8 1, i8* %39, align 4
  br label %557

52:                                               ; preds = %2
  %53 = bitcast %class.SkMatrix44* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %53) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %53, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZNK10SkMatrix446invertEPS_.tmp to i8*), i64 68, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %53, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #10
  %54 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %3, i64 0, i32 1
  store i8 0, i8* %54, align 4
  %55 = icmp ne %class.SkMatrix44* %1, null
  %56 = icmp ne %class.SkMatrix44* %1, %0
  %57 = and i1 %55, %56
  %58 = select i1 %57, %class.SkMatrix44* %1, %class.SkMatrix44* %3
  %59 = icmp ult i8 %5, 4
  %60 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %61 = load float, float* %60, align 4
  br i1 %59, label %62, label %123

62:                                               ; preds = %52
  %63 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %64 = load float, float* %63, align 4
  %65 = fmul float %61, %64
  %66 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %67 = load float, float* %66, align 4
  %68 = fmul float %65, %67
  %69 = fcmp oeq float %68, 0.000000e+00
  br i1 %69, label %555, label %70

70:                                               ; preds = %62
  %71 = fdiv float 1.000000e+00, %61
  %72 = fdiv float 1.000000e+00, %64
  %73 = fdiv float 1.000000e+00, %67
  %74 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 0, i64 0
  store float %71, float* %74, align 4
  %75 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 0, i64 1
  %76 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 1, i64 1
  %77 = bitcast float* %75 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %77, i8 0, i64 16, i1 false)
  store float %72, float* %76, align 4
  %78 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 1, i64 2
  %79 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 2, i64 2
  %80 = bitcast float* %78 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %80, i8 0, i64 16, i1 false)
  store float %73, float* %79, align 4
  %81 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 2, i64 3
  store float 0.000000e+00, float* %81, align 4
  %82 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %83 = load float, float* %82, align 4
  %84 = fmul float %71, %83
  %85 = fsub float -0.000000e+00, %84
  %86 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 0
  store float %85, float* %86, align 4
  %87 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %88 = load float, float* %87, align 4
  %89 = fmul float %72, %88
  %90 = fsub float -0.000000e+00, %89
  %91 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 1
  store float %90, float* %91, align 4
  %92 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %93 = load float, float* %92, align 4
  %94 = fmul float %73, %93
  %95 = fsub float -0.000000e+00, %94
  %96 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 2
  store float %95, float* %96, align 4
  %97 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 3
  store float 1.000000e+00, float* %97, align 4
  %98 = load i8, i8* %4, align 4
  %99 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 1
  store i8 %98, i8* %99, align 4
  %100 = fmul float %71, 0.000000e+00
  %101 = fmul float %100, 0.000000e+00
  %102 = fmul float %101, 0.000000e+00
  %103 = fmul float %102, %85
  %104 = fmul float %103, 0.000000e+00
  %105 = fmul float %72, %104
  %106 = fmul float %105, 0.000000e+00
  %107 = fmul float %106, %90
  %108 = fmul float %107, 0.000000e+00
  %109 = fmul float %108, 0.000000e+00
  %110 = fmul float %73, %109
  %111 = fmul float %110, %95
  %112 = fmul float %111, 0.000000e+00
  %113 = fmul float %112, 0.000000e+00
  %114 = fmul float %113, 0.000000e+00
  %115 = fcmp oeq float %114, 0.000000e+00
  br i1 %115, label %116, label %555

116:                                              ; preds = %70
  %117 = xor i1 %55, true
  %118 = icmp eq %class.SkMatrix44* %58, %1
  %119 = or i1 %118, %117
  br i1 %119, label %555, label %120

120:                                              ; preds = %116
  %121 = bitcast %class.SkMatrix44* %1 to i8*
  %122 = bitcast %class.SkMatrix44* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %121, i8* nonnull align 4 %122, i64 65, i1 false)
  br label %555

123:                                              ; preds = %52
  %124 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %125 = bitcast float* %124 to <2 x float>*
  %126 = load <2 x float>, <2 x float>* %125, align 4
  %127 = fpext <2 x float> %126 to <2 x double>
  %128 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %129 = load float, float* %128, align 4
  %130 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %131 = load float, float* %130, align 4
  %132 = fpext float %131 to double
  %133 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %134 = bitcast float* %133 to <2 x float>*
  %135 = load <2 x float>, <2 x float>* %134, align 4
  %136 = fpext <2 x float> %135 to <2 x double>
  %137 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  %138 = load float, float* %137, align 4
  %139 = fpext float %138 to double
  %140 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  %141 = bitcast float* %140 to <2 x float>*
  %142 = load <2 x float>, <2 x float>* %141, align 4
  %143 = fpext <2 x float> %142 to <2 x double>
  %144 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %145 = load float, float* %144, align 4
  %146 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %147 = load float, float* %146, align 4
  %148 = insertelement <2 x float> undef, float %147, i32 0
  %149 = insertelement <2 x float> %148, float %129, i32 1
  %150 = fpext <2 x float> %149 to <2 x double>
  %151 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %152 = load float, float* %151, align 4
  %153 = insertelement <2 x float> undef, float %145, i32 0
  %154 = insertelement <2 x float> %153, float %152, i32 1
  %155 = fpext <2 x float> %154 to <2 x double>
  %156 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %157 = bitcast float* %156 to <2 x float>*
  %158 = load <2 x float>, <2 x float>* %157, align 4
  %159 = shufflevector <2 x float> %158, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %160 = fpext <2 x float> %159 to <2 x double>
  %161 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %162 = load float, float* %161, align 4
  %163 = insertelement <2 x float> undef, float %61, i32 0
  %164 = insertelement <2 x float> %163, float %162, i32 1
  %165 = fpext <2 x float> %164 to <2 x double>
  %166 = and i8 %5, 8
  %167 = icmp eq i8 %166, 0
  %168 = extractelement <2 x double> %165, i32 0
  %169 = shufflevector <2 x double> %165, <2 x double> undef, <2 x i32> zeroinitializer
  %170 = fmul <2 x double> %169, %136
  %171 = insertelement <2 x double> undef, double %132, i32 0
  %172 = shufflevector <2 x double> %171, <2 x double> undef, <2 x i32> zeroinitializer
  %173 = fmul <2 x double> %172, %127
  %174 = fsub <2 x double> %170, %173
  br i1 %167, label %175, label %319

175:                                              ; preds = %123
  %176 = shufflevector <2 x double> %136, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %177 = fmul <2 x double> %176, %127
  %178 = extractelement <2 x double> %177, i32 0
  %179 = extractelement <2 x double> %177, i32 1
  %180 = fsub double %178, %179
  %181 = extractelement <2 x double> %174, i32 0
  %182 = extractelement <2 x double> %155, i32 0
  %183 = fmul double %181, %182
  %184 = insertelement <2 x double> %174, double %180, i32 0
  %185 = fmul <2 x double> %184, %143
  %186 = extractelement <2 x double> %185, i32 1
  %187 = fsub double %183, %186
  %188 = extractelement <2 x double> %185, i32 0
  %189 = fadd double %188, %187
  %190 = fdiv double 1.000000e+00, %189
  %191 = fptrunc double %190 to float
  %192 = bitcast float %191 to i32
  %193 = and i32 %192, 2139095040
  %194 = icmp eq i32 %193, 2139095040
  br i1 %194, label %555, label %195

195:                                              ; preds = %175
  %196 = extractelement <2 x double> %160, i32 0
  %197 = extractelement <2 x double> %143, i32 0
  %198 = fmul double %197, %196
  %199 = extractelement <2 x double> %155, i32 0
  %200 = extractelement <2 x double> %155, i32 1
  %201 = fmul double %199, %200
  %202 = fsub double %198, %201
  %203 = shufflevector <2 x double> %160, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %204 = fmul <2 x double> %203, %143
  %205 = shufflevector <2 x double> %143, <2 x double> %155, <2 x i32> <i32 1, i32 2>
  %206 = shufflevector <2 x double> %155, <2 x double> %160, <2 x i32> <i32 1, i32 3>
  %207 = fmul <2 x double> %205, %206
  %208 = fsub <2 x double> %204, %207
  %209 = insertelement <2 x double> undef, double %190, i32 0
  %210 = shufflevector <2 x double> %209, <2 x double> undef, <2 x i32> zeroinitializer
  %211 = fmul <2 x double> %174, %210
  %212 = fmul double %180, %190
  %213 = fmul double %190, %202
  %214 = fmul <2 x double> %210, %208
  %215 = fmul <2 x double> %210, %143
  %216 = fmul double %190, %199
  %217 = extractelement <2 x double> %136, i32 0
  %218 = fmul double %216, %217
  %219 = extractelement <2 x double> %136, i32 1
  %220 = extractelement <2 x double> %215, i32 1
  %221 = fmul double %220, %219
  %222 = fsub double %218, %221
  %223 = fptrunc double %222 to float
  %224 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 0, i64 0
  store float %223, float* %224, align 4
  %225 = extractelement <2 x double> %127, i32 1
  %226 = fmul double %220, %225
  %227 = extractelement <2 x double> %127, i32 0
  %228 = fmul double %216, %227
  %229 = fsub double %226, %228
  %230 = fptrunc double %229 to float
  %231 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 0, i64 1
  store float %230, float* %231, align 4
  %232 = fptrunc double %212 to float
  %233 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 0, i64 2
  store float %232, float* %233, align 4
  %234 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 0, i64 3
  store float 0.000000e+00, float* %234, align 4
  %235 = extractelement <2 x double> %215, i32 0
  %236 = fmul double %235, %219
  %237 = fmul double %216, %132
  %238 = fsub double %236, %237
  %239 = fptrunc double %238 to float
  %240 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 1, i64 0
  store float %239, float* %240, align 4
  %241 = fmul double %216, %168
  %242 = fmul double %235, %225
  %243 = fsub double %241, %242
  %244 = fptrunc double %243 to float
  %245 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 1, i64 1
  store float %244, float* %245, align 4
  %246 = extractelement <2 x double> %211, i32 1
  %247 = fptrunc double %246 to float
  %248 = fsub float -0.000000e+00, %247
  %249 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 1, i64 2
  store float %248, float* %249, align 4
  %250 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 1, i64 3
  store float 0.000000e+00, float* %250, align 4
  %251 = fmul double %220, %132
  %252 = fmul double %235, %217
  %253 = fsub double %251, %252
  %254 = fptrunc double %253 to float
  %255 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 2, i64 0
  store float %254, float* %255, align 4
  %256 = shufflevector <2 x double> %127, <2 x double> %165, <2 x i32> <i32 0, i32 2>
  %257 = fmul <2 x double> %215, %256
  %258 = extractelement <2 x double> %257, i32 0
  %259 = extractelement <2 x double> %257, i32 1
  %260 = fsub double %258, %259
  %261 = fptrunc double %260 to float
  %262 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 2, i64 1
  store float %261, float* %262, align 4
  %263 = extractelement <2 x double> %211, i32 0
  %264 = fptrunc double %263 to float
  %265 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 2, i64 2
  store float %264, float* %265, align 4
  %266 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 2, i64 3
  store float 0.000000e+00, float* %266, align 4
  %267 = fmul double %213, %217
  %268 = extractelement <2 x double> %214, i32 1
  %269 = fmul double %268, %132
  %270 = fsub double %267, %269
  %271 = extractelement <2 x double> %214, i32 0
  %272 = fmul double %271, %219
  %273 = fsub double %270, %272
  %274 = fptrunc double %273 to float
  %275 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 0
  store float %274, float* %275, align 4
  %276 = fmul double %213, %227
  %277 = shufflevector <2 x double> %127, <2 x double> %165, <2 x i32> <i32 1, i32 2>
  %278 = fmul <2 x double> %214, %277
  %279 = extractelement <2 x double> %278, i32 1
  %280 = fsub double %279, %276
  %281 = extractelement <2 x double> %278, i32 0
  %282 = fadd double %281, %280
  %283 = fptrunc double %282 to float
  %284 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 1
  store float %283, float* %284, align 4
  %285 = fmul double %212, %200
  %286 = fmul <2 x double> %211, %160
  %287 = extractelement <2 x double> %286, i32 1
  %288 = fsub double %287, %285
  %289 = extractelement <2 x double> %286, i32 0
  %290 = fsub double %288, %289
  %291 = fptrunc double %290 to float
  %292 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 2
  store float %291, float* %292, align 4
  %293 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 3
  store float 1.000000e+00, float* %293, align 4
  %294 = load i8, i8* %4, align 4
  %295 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 1
  store i8 %294, i8* %295, align 4
  %296 = fmul float %223, 0.000000e+00
  %297 = fmul float %296, %239
  %298 = fmul float %297, %254
  %299 = fmul float %298, %274
  %300 = fmul float %299, %230
  %301 = fmul float %300, %244
  %302 = fmul float %301, %261
  %303 = fmul float %302, %283
  %304 = fmul float %303, %232
  %305 = fmul float %304, %248
  %306 = fmul float %305, %264
  %307 = fmul float %306, %291
  %308 = fmul float %307, 0.000000e+00
  %309 = fmul float %308, 0.000000e+00
  %310 = fmul float %309, 0.000000e+00
  %311 = fcmp oeq float %310, 0.000000e+00
  br i1 %311, label %312, label %555

312:                                              ; preds = %195
  %313 = xor i1 %55, true
  %314 = icmp eq %class.SkMatrix44* %58, %1
  %315 = or i1 %314, %313
  br i1 %315, label %555, label %316

316:                                              ; preds = %312
  %317 = bitcast %class.SkMatrix44* %1 to i8*
  %318 = bitcast %class.SkMatrix44* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %317, i8* nonnull align 4 %318, i64 65, i1 false)
  br label %555

319:                                              ; preds = %123
  %320 = shufflevector <2 x double> %150, <2 x double> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %321 = extractelement <2 x double> %127, i32 0
  %322 = extractelement <2 x double> %127, i32 1
  %323 = extractelement <2 x double> %143, i32 0
  %324 = extractelement <2 x double> %143, i32 1
  %325 = shufflevector <2 x double> %143, <2 x double> undef, <2 x i32> zeroinitializer
  %326 = fmul <2 x double> %325, %160
  %327 = extractelement <2 x double> %155, i32 1
  %328 = shufflevector <2 x double> %155, <2 x double> %143, <2 x i32> <i32 1, i32 3>
  %329 = fmul <2 x double> %328, %155
  %330 = fsub <2 x double> %326, %329
  %331 = insertelement <2 x double> undef, double %139, i32 0
  %332 = shufflevector <2 x double> %331, <2 x double> %143, <2 x i32> <i32 0, i32 2>
  %333 = fmul <2 x double> %332, %165
  %334 = shufflevector <2 x double> %150, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %335 = insertelement <2 x double> %155, double %132, i32 0
  %336 = fmul <2 x double> %334, %335
  %337 = fsub <2 x double> %333, %336
  %338 = extractelement <2 x double> %160, i32 0
  %339 = shufflevector <2 x double> %143, <2 x double> %127, <2 x i32> <i32 1, i32 2>
  %340 = shufflevector <2 x double> %160, <2 x double> %136, <2 x i32> <i32 0, i32 3>
  %341 = fmul <2 x double> %339, %340
  %342 = extractelement <2 x double> %160, i32 1
  %343 = extractelement <2 x double> %155, i32 0
  %344 = shufflevector <2 x double> %155, <2 x double> %127, <2 x i32> <i32 0, i32 3>
  %345 = shufflevector <2 x double> %160, <2 x double> %136, <2 x i32> <i32 1, i32 2>
  %346 = fmul <2 x double> %344, %345
  %347 = fsub <2 x double> %341, %346
  %348 = insertelement <4 x double> undef, double %343, i32 0
  %349 = extractelement <2 x double> %165, i32 1
  %350 = insertelement <4 x double> %348, double %349, i32 1
  %351 = insertelement <4 x double> %350, double %139, i32 2
  %352 = insertelement <4 x double> %351, double %139, i32 3
  %353 = insertelement <4 x double> undef, double %349, i32 0
  %354 = insertelement <4 x double> %353, double %324, i32 1
  %355 = extractelement <2 x double> %127, i32 1
  %356 = insertelement <4 x double> %354, double %355, i32 2
  %357 = extractelement <2 x double> %127, i32 0
  %358 = insertelement <4 x double> %356, double %357, i32 3
  %359 = fmul <4 x double> %352, %358
  %360 = shufflevector <2 x double> %160, <2 x double> %136, <4 x i32> <i32 0, i32 1, i32 3, i32 2>
  %361 = fmul <4 x double> %320, %360
  %362 = fsub <4 x double> %359, %361
  %363 = extractelement <2 x double> %174, i32 0
  %364 = extractelement <4 x double> %362, i32 0
  %365 = fmul double %363, %364
  %366 = extractelement <2 x double> %174, i32 1
  %367 = extractelement <4 x double> %362, i32 1
  %368 = fmul double %366, %367
  %369 = fsub double %365, %368
  %370 = fmul <2 x double> %337, %347
  %371 = extractelement <2 x double> %370, i32 0
  %372 = fadd double %371, %369
  %373 = extractelement <2 x double> %370, i32 1
  %374 = fadd double %373, %372
  %375 = shufflevector <4 x double> %362, <4 x double> undef, <2 x i32> <i32 3, i32 2>
  %376 = fmul <2 x double> %375, %330
  %377 = extractelement <2 x double> %376, i32 0
  %378 = fsub double %374, %377
  %379 = extractelement <2 x double> %376, i32 1
  %380 = fadd double %379, %378
  %381 = fdiv double 1.000000e+00, %380
  %382 = fptrunc double %381 to float
  %383 = bitcast float %382 to i32
  %384 = and i32 %383, 2139095040
  %385 = icmp eq i32 %384, 2139095040
  br i1 %385, label %555, label %386

386:                                              ; preds = %319
  %387 = extractelement <2 x double> %136, i32 1
  %388 = extractelement <2 x double> %136, i32 0
  %389 = extractelement <2 x double> %150, i32 1
  %390 = extractelement <2 x double> %150, i32 0
  %391 = extractelement <2 x double> %337, i32 0
  %392 = fmul double %391, %381
  %393 = shufflevector <2 x double> %330, <2 x double> %174, <2 x i32> <i32 1, i32 2>
  %394 = insertelement <2 x double> undef, double %381, i32 0
  %395 = shufflevector <2 x double> %394, <2 x double> undef, <2 x i32> zeroinitializer
  %396 = fmul <2 x double> %393, %395
  %397 = shufflevector <2 x double> %396, <2 x double> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %398 = shufflevector <2 x double> %330, <2 x double> %174, <2 x i32> <i32 0, i32 3>
  %399 = fmul <2 x double> %398, %395
  %400 = shufflevector <2 x double> %399, <2 x double> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %401 = extractelement <2 x double> %337, i32 1
  %402 = fmul double %401, %381
  %403 = fmul <2 x double> %347, %395
  %404 = shufflevector <2 x double> %403, <2 x double> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %405 = insertelement <4 x double> undef, double %381, i32 0
  %406 = shufflevector <4 x double> %405, <4 x double> undef, <4 x i32> zeroinitializer
  %407 = fmul <4 x double> %362, %406
  %408 = shufflevector <2 x double> %136, <2 x double> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %409 = insertelement <4 x double> %408, double %322, i32 1
  %410 = insertelement <4 x double> %409, double %342, i32 2
  %411 = insertelement <4 x double> %410, double %343, i32 3
  %412 = fmul <4 x double> %407, %411
  %413 = extractelement <4 x double> %407, i32 1
  %414 = shufflevector <4 x double> %407, <4 x double> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %415 = extractelement <4 x double> %407, i32 0
  %416 = extractelement <4 x double> %407, i32 3
  %417 = extractelement <4 x double> %407, i32 2
  %418 = shufflevector <4 x double> %414, <4 x double> %407, <4 x i32> <i32 0, i32 4, i32 7, i32 6>
  %419 = shufflevector <2 x double> %136, <2 x double> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %420 = insertelement <4 x double> %419, double %321, i32 1
  %421 = insertelement <4 x double> %420, double %338, i32 2
  %422 = insertelement <4 x double> %421, double %324, i32 3
  %423 = fmul <4 x double> %418, %422
  %424 = fsub <4 x double> %412, %423
  %425 = insertelement <4 x double> undef, double %139, i32 0
  %426 = insertelement <4 x double> %425, double %389, i32 1
  %427 = insertelement <4 x double> %426, double %349, i32 2
  %428 = insertelement <4 x double> %427, double %390, i32 3
  %429 = fmul <4 x double> %404, %428
  %430 = fadd <4 x double> %424, %429
  %431 = fsub <4 x double> %424, %429
  %432 = shufflevector <4 x double> %430, <4 x double> %431, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %433 = fptrunc <4 x double> %432 to <4 x float>
  %434 = bitcast %class.SkMatrix44* %58 to <4 x float>*
  store <4 x float> %433, <4 x float>* %434, align 4
  %435 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 1, i64 0
  %436 = insertelement <4 x double> undef, double %402, i32 0
  %437 = insertelement <4 x double> %436, double %168, i32 1
  %438 = insertelement <4 x double> %437, double %392, i32 2
  %439 = shufflevector <4 x double> %438, <4 x double> %407, <4 x i32> <i32 0, i32 1, i32 2, i32 6>
  %440 = insertelement <4 x double> %419, double %415, i32 1
  %441 = insertelement <4 x double> %440, double %338, i32 2
  %442 = insertelement <4 x double> %441, double %323, i32 3
  %443 = fmul <4 x double> %439, %442
  %444 = insertelement <4 x double> undef, double %415, i32 0
  %445 = insertelement <4 x double> %444, double %322, i32 1
  %446 = insertelement <4 x double> %445, double %417, i32 2
  %447 = insertelement <4 x double> %446, double %392, i32 3
  %448 = insertelement <4 x double> undef, double %132, i32 0
  %449 = insertelement <4 x double> %448, double %402, i32 1
  %450 = insertelement <4 x double> %449, double %327, i32 2
  %451 = insertelement <4 x double> %450, double %343, i32 3
  %452 = fmul <4 x double> %447, %451
  %453 = fsub <4 x double> %443, %452
  %454 = fmul <4 x double> %400, %428
  %455 = fsub <4 x double> %453, %454
  %456 = fadd <4 x double> %453, %454
  %457 = shufflevector <4 x double> %455, <4 x double> %456, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %458 = fptrunc <4 x double> %457 to <4 x float>
  %459 = bitcast float* %435 to <4 x float>*
  store <4 x float> %458, <4 x float>* %459, align 4
  %460 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 2, i64 0
  %461 = insertelement <4 x double> %414, double %321, i32 1
  %462 = insertelement <4 x double> %461, double %416, i32 2
  %463 = insertelement <4 x double> %462, double %324, i32 3
  %464 = insertelement <4 x double> %450, double %392, i32 3
  %465 = fmul <4 x double> %463, %464
  %466 = shufflevector <4 x double> %438, <4 x double> %407, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %467 = insertelement <4 x double> %408, double %413, i32 1
  %468 = insertelement <4 x double> %467, double %342, i32 2
  %469 = insertelement <4 x double> %468, double %323, i32 3
  %470 = fmul <4 x double> %466, %469
  %471 = fsub <4 x double> %465, %470
  %472 = fmul <4 x double> %397, %428
  %473 = fadd <4 x double> %471, %472
  %474 = fsub <4 x double> %471, %472
  %475 = shufflevector <4 x double> %473, <4 x double> %474, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %476 = fptrunc <4 x double> %475 to <4 x float>
  %477 = bitcast float* %460 to <4 x float>*
  store <4 x float> %476, <4 x float>* %477, align 4
  %478 = extractelement <2 x double> %399, i32 0
  %479 = fmul double %478, %388
  %480 = extractelement <2 x double> %403, i32 0
  %481 = fmul double %480, %132
  %482 = fsub double %479, %481
  %483 = extractelement <2 x double> %396, i32 0
  %484 = fmul double %483, %387
  %485 = fsub double %482, %484
  %486 = fptrunc double %485 to float
  %487 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 0
  store float %486, float* %487, align 4
  %488 = fmul double %480, %168
  %489 = shufflevector <2 x double> %399, <2 x double> %396, <2 x i32> <i32 0, i32 2>
  %490 = fmul <2 x double> %489, %127
  %491 = extractelement <2 x double> %490, i32 0
  %492 = fsub double %488, %491
  %493 = extractelement <2 x double> %490, i32 1
  %494 = fadd double %493, %492
  %495 = fptrunc double %494 to float
  %496 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 1
  store float %495, float* %496, align 4
  %497 = extractelement <2 x double> %403, i32 1
  %498 = fmul double %497, %327
  %499 = extractelement <2 x double> %396, i32 1
  %500 = shufflevector <2 x double> %396, <2 x double> %399, <2 x i32> <i32 1, i32 3>
  %501 = fmul <2 x double> %500, %160
  %502 = extractelement <2 x double> %501, i32 1
  %503 = fsub double %502, %498
  %504 = extractelement <2 x double> %501, i32 0
  %505 = fsub double %503, %504
  %506 = fptrunc double %505 to float
  %507 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 2
  store float %506, float* %507, align 4
  %508 = shufflevector <2 x double> %403, <2 x double> %399, <2 x i32> <i32 1, i32 3>
  %509 = fmul <2 x double> %508, %143
  %510 = extractelement <2 x double> %509, i32 0
  %511 = extractelement <2 x double> %509, i32 1
  %512 = fsub double %510, %511
  %513 = fmul double %499, %343
  %514 = fadd double %513, %512
  %515 = fptrunc double %514 to float
  %516 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 0, i64 3, i64 3
  store float %515, float* %516, align 4
  %517 = load i8, i8* %4, align 4
  %518 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %58, i64 0, i32 1
  store i8 %517, i8* %518, align 4
  %519 = extractelement <4 x float> %433, i32 0
  %520 = fmul float %519, 0.000000e+00
  %521 = extractelement <4 x float> %458, i32 0
  %522 = fmul float %520, %521
  %523 = extractelement <4 x float> %476, i32 0
  %524 = fmul float %522, %523
  %525 = fmul float %524, %486
  %526 = extractelement <4 x float> %433, i32 1
  %527 = fmul float %525, %526
  %528 = extractelement <4 x float> %458, i32 1
  %529 = fmul float %527, %528
  %530 = extractelement <4 x float> %476, i32 1
  %531 = fmul float %529, %530
  %532 = fmul float %531, %495
  %533 = extractelement <4 x float> %433, i32 2
  %534 = fmul float %532, %533
  %535 = extractelement <4 x float> %458, i32 2
  %536 = fmul float %534, %535
  %537 = extractelement <4 x float> %476, i32 2
  %538 = fmul float %536, %537
  %539 = fmul float %538, %506
  %540 = extractelement <4 x float> %433, i32 3
  %541 = fmul float %539, %540
  %542 = extractelement <4 x float> %458, i32 3
  %543 = fmul float %541, %542
  %544 = extractelement <4 x float> %476, i32 3
  %545 = fmul float %543, %544
  %546 = fmul float %545, %515
  %547 = fcmp oeq float %546, 0.000000e+00
  br i1 %547, label %548, label %555

548:                                              ; preds = %386
  %549 = xor i1 %55, true
  %550 = icmp eq %class.SkMatrix44* %58, %1
  %551 = or i1 %550, %549
  br i1 %551, label %555, label %552

552:                                              ; preds = %548
  %553 = bitcast %class.SkMatrix44* %1 to i8*
  %554 = bitcast %class.SkMatrix44* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %553, i8* nonnull align 4 %554, i64 65, i1 false)
  br label %555

555:                                              ; preds = %175, %319, %316, %312, %195, %552, %548, %386, %70, %116, %120, %62
  %556 = phi i1 [ false, %62 ], [ false, %70 ], [ true, %116 ], [ true, %120 ], [ false, %175 ], [ false, %195 ], [ true, %312 ], [ true, %316 ], [ false, %319 ], [ false, %386 ], [ true, %548 ], [ true, %552 ]
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %53) #10
  br label %557

557:                                              ; preds = %45, %22, %20, %8, %6, %555
  %558 = phi i1 [ %556, %555 ], [ true, %6 ], [ true, %8 ], [ true, %20 ], [ true, %22 ], [ true, %45 ]
  ret i1 %558
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkMatrix449transposeEv(%class.SkMatrix44* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 4
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %42, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %7 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %8 = bitcast float* %6 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast float* %7 to i32*
  %11 = load i32, i32* %10, align 4
  store i32 %11, i32* %8, align 4
  store i32 %9, i32* %10, align 4
  %12 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %13 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  %14 = bitcast float* %12 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = bitcast float* %13 to i32*
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %14, align 4
  store i32 %15, i32* %16, align 4
  %18 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %19 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %20 = bitcast float* %18 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = bitcast float* %19 to i32*
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %20, align 4
  store i32 %21, i32* %22, align 4
  %24 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %25 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  %26 = bitcast float* %24 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = bitcast float* %25 to i32*
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %26, align 4
  store i32 %27, i32* %28, align 4
  %30 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %32 = bitcast float* %30 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = bitcast float* %31 to i32*
  %35 = load i32, i32* %34, align 4
  store i32 %35, i32* %32, align 4
  store i32 %33, i32* %34, align 4
  %36 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %37 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %38 = bitcast float* %36 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = bitcast float* %37 to i32*
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %38, align 4
  store i32 %39, i32* %40, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  br label %42

42:                                               ; preds = %5, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* nocapture readonly, float* readonly, float*) local_unnamed_addr #5 align 2 {
  %4 = alloca [4 x float], align 16
  %5 = bitcast [4 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #10
  %6 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 0
  %7 = icmp eq float* %1, %2
  %8 = select i1 %7, float* %6, float* %2
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %10 = bitcast [4 x float]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 16, i1 false)
  %11 = load float, float* %9, align 4
  %12 = load float, float* %1, align 4
  %13 = fmul float %11, %12
  %14 = fadd float %13, 0.000000e+00
  %15 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds float, float* %1, i64 1
  %18 = load float, float* %17, align 4
  %19 = fmul float %16, %18
  %20 = fadd float %14, %19
  %21 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds float, float* %1, i64 2
  %24 = load float, float* %23, align 4
  %25 = fmul float %22, %24
  %26 = fadd float %20, %25
  %27 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds float, float* %1, i64 3
  %30 = load float, float* %29, align 4
  %31 = fmul float %28, %30
  %32 = fadd float %26, %31
  store float %32, float* %8, align 4
  %33 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %34 = load float, float* %33, align 4
  %35 = load float, float* %1, align 4
  %36 = fmul float %34, %35
  %37 = fadd float %36, 0.000000e+00
  %38 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %39 = load float, float* %38, align 4
  %40 = load float, float* %17, align 4
  %41 = fmul float %39, %40
  %42 = fadd float %37, %41
  %43 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  %44 = load float, float* %43, align 4
  %45 = load float, float* %23, align 4
  %46 = fmul float %44, %45
  %47 = fadd float %42, %46
  %48 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %49 = load float, float* %48, align 4
  %50 = load float, float* %29, align 4
  %51 = fmul float %49, %50
  %52 = fadd float %47, %51
  %53 = getelementptr inbounds float, float* %8, i64 1
  store float %52, float* %53, align 4
  %54 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %55 = load float, float* %54, align 4
  %56 = load float, float* %1, align 4
  %57 = fmul float %55, %56
  %58 = fadd float %57, 0.000000e+00
  %59 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %60 = load float, float* %59, align 4
  %61 = load float, float* %17, align 4
  %62 = fmul float %60, %61
  %63 = fadd float %58, %62
  %64 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %65 = load float, float* %64, align 4
  %66 = load float, float* %23, align 4
  %67 = fmul float %65, %66
  %68 = fadd float %63, %67
  %69 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %70 = load float, float* %69, align 4
  %71 = load float, float* %29, align 4
  %72 = fmul float %70, %71
  %73 = fadd float %68, %72
  %74 = getelementptr inbounds float, float* %8, i64 2
  store float %73, float* %74, align 4
  %75 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %76 = load float, float* %75, align 4
  %77 = load float, float* %1, align 4
  %78 = fmul float %76, %77
  %79 = fadd float %78, 0.000000e+00
  %80 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  %81 = load float, float* %80, align 4
  %82 = load float, float* %17, align 4
  %83 = fmul float %81, %82
  %84 = fadd float %79, %83
  %85 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %86 = load float, float* %85, align 4
  %87 = load float, float* %23, align 4
  %88 = fmul float %86, %87
  %89 = fadd float %84, %88
  %90 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %91 = load float, float* %90, align 4
  %92 = load float, float* %29, align 4
  %93 = fmul float %91, %92
  %94 = fadd float %89, %93
  %95 = getelementptr inbounds float, float* %8, i64 3
  store float %94, float* %95, align 4
  %96 = icmp eq float* %6, %8
  br i1 %96, label %97, label %99

97:                                               ; preds = %3
  %98 = bitcast float* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %98, i8* nonnull align 16 %5, i64 16, i1 false)
  br label %99

99:                                               ; preds = %97, %3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10SkMatrix444map2EPKfiPf(%class.SkMatrix44*, float*, i32, float*) local_unnamed_addr #5 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  %6 = load i8, i8* %5, align 4
  %7 = and i8 %6, 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = zext i8 %6 to i64
  %11 = getelementptr inbounds [8 x void ([4 x float]*, float*, i32, float*)*], [8 x void ([4 x float]*, float*, i32, float*)*]* @_ZZNK10SkMatrix444map2EPKfiPfE5gProc, i64 0, i64 %10
  %12 = load void ([4 x float]*, float*, i32, float*)*, void ([4 x float]*, float*, i32, float*)** %11, align 8
  br label %13

13:                                               ; preds = %4, %9
  %14 = phi void ([4 x float]*, float*, i32, float*)* [ %12, %9 ], [ @_ZL7map2_pfPA4_KfPS_iPf, %4 ]
  %15 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0
  tail call void %14([4 x float]* %15, float* %1, i32 %2, float* %3) #10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL7map2_ifPA4_KfPS_iPf([4 x float]* nocapture readnone, float* noalias nocapture readonly, i32, float* noalias nocapture) #2 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %26

6:                                                ; preds = %4
  %7 = and i32 %2, 1
  %8 = icmp eq i32 %2, 1
  br i1 %8, label %11, label %9

9:                                                ; preds = %6
  %10 = sub i32 %2, %7
  br label %27

11:                                               ; preds = %27, %6
  %12 = phi float* [ %3, %6 ], [ %54, %27 ]
  %13 = phi float* [ %1, %6 ], [ %53, %27 ]
  %14 = icmp eq i32 %7, 0
  br i1 %14, label %26, label %15

15:                                               ; preds = %11
  %16 = bitcast float* %13 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = bitcast float* %12 to i32*
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds float, float* %13, i64 1
  %20 = bitcast float* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds float, float* %12, i64 1
  %23 = bitcast float* %22 to i32*
  store i32 %21, i32* %23, align 4
  %24 = getelementptr inbounds float, float* %12, i64 2
  store float 0.000000e+00, float* %24, align 4
  %25 = getelementptr inbounds float, float* %12, i64 3
  store float 1.000000e+00, float* %25, align 4
  br label %26

26:                                               ; preds = %15, %11, %4
  ret void

27:                                               ; preds = %27, %9
  %28 = phi float* [ %3, %9 ], [ %54, %27 ]
  %29 = phi float* [ %1, %9 ], [ %53, %27 ]
  %30 = phi i32 [ %10, %9 ], [ %55, %27 ]
  %31 = bitcast float* %29 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = bitcast float* %28 to i32*
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds float, float* %29, i64 1
  %35 = bitcast float* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds float, float* %28, i64 1
  %38 = bitcast float* %37 to i32*
  store i32 %36, i32* %38, align 4
  %39 = getelementptr inbounds float, float* %28, i64 2
  store float 0.000000e+00, float* %39, align 4
  %40 = getelementptr inbounds float, float* %28, i64 3
  store float 1.000000e+00, float* %40, align 4
  %41 = getelementptr inbounds float, float* %29, i64 2
  %42 = getelementptr inbounds float, float* %28, i64 4
  %43 = bitcast float* %41 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = bitcast float* %42 to i32*
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds float, float* %29, i64 3
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds float, float* %28, i64 5
  %50 = bitcast float* %49 to i32*
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds float, float* %28, i64 6
  store float 0.000000e+00, float* %51, align 4
  %52 = getelementptr inbounds float, float* %28, i64 7
  store float 1.000000e+00, float* %52, align 4
  %53 = getelementptr inbounds float, float* %29, i64 4
  %54 = getelementptr inbounds float, float* %28, i64 8
  %55 = add i32 %30, -2
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %11, label %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL7map2_tfPA4_KfPS_iPf([4 x float]* nocapture readonly, float* noalias nocapture readonly, i32, float* noalias nocapture) #2 {
  %5 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 2
  %10 = bitcast float* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %2, 0
  br i1 %12, label %13, label %32

13:                                               ; preds = %4
  %14 = and i32 %2, 1
  %15 = icmp eq i32 %2, 1
  br i1 %15, label %18, label %16

16:                                               ; preds = %13
  %17 = sub i32 %2, %14
  br label %33

18:                                               ; preds = %33, %13
  %19 = phi float* [ %3, %13 ], [ %58, %33 ]
  %20 = phi float* [ %1, %13 ], [ %57, %33 ]
  %21 = icmp eq i32 %14, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %18
  %23 = load float, float* %20, align 4
  %24 = fadd float %6, %23
  store float %24, float* %19, align 4
  %25 = getelementptr inbounds float, float* %20, i64 1
  %26 = load float, float* %25, align 4
  %27 = fadd float %8, %26
  %28 = getelementptr inbounds float, float* %19, i64 1
  store float %27, float* %28, align 4
  %29 = getelementptr inbounds float, float* %19, i64 2
  %30 = bitcast float* %29 to i32*
  store i32 %11, i32* %30, align 4
  %31 = getelementptr inbounds float, float* %19, i64 3
  store float 1.000000e+00, float* %31, align 4
  br label %32

32:                                               ; preds = %22, %18, %4
  ret void

33:                                               ; preds = %33, %16
  %34 = phi float* [ %3, %16 ], [ %58, %33 ]
  %35 = phi float* [ %1, %16 ], [ %57, %33 ]
  %36 = phi i32 [ %17, %16 ], [ %59, %33 ]
  %37 = load float, float* %35, align 4
  %38 = fadd float %6, %37
  store float %38, float* %34, align 4
  %39 = getelementptr inbounds float, float* %35, i64 1
  %40 = load float, float* %39, align 4
  %41 = fadd float %8, %40
  %42 = getelementptr inbounds float, float* %34, i64 1
  store float %41, float* %42, align 4
  %43 = getelementptr inbounds float, float* %34, i64 2
  %44 = bitcast float* %43 to i32*
  store i32 %11, i32* %44, align 4
  %45 = getelementptr inbounds float, float* %34, i64 3
  store float 1.000000e+00, float* %45, align 4
  %46 = getelementptr inbounds float, float* %35, i64 2
  %47 = getelementptr inbounds float, float* %34, i64 4
  %48 = load float, float* %46, align 4
  %49 = fadd float %6, %48
  store float %49, float* %47, align 4
  %50 = getelementptr inbounds float, float* %35, i64 3
  %51 = load float, float* %50, align 4
  %52 = fadd float %8, %51
  %53 = getelementptr inbounds float, float* %34, i64 5
  store float %52, float* %53, align 4
  %54 = getelementptr inbounds float, float* %34, i64 6
  %55 = bitcast float* %54 to i32*
  store i32 %11, i32* %55, align 4
  %56 = getelementptr inbounds float, float* %34, i64 7
  store float 1.000000e+00, float* %56, align 4
  %57 = getelementptr inbounds float, float* %35, i64 4
  %58 = getelementptr inbounds float, float* %34, i64 8
  %59 = add i32 %36, -2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %18, label %33
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL7map2_sfPA4_KfPS_iPf([4 x float]* nocapture readonly, float* noalias nocapture readonly, i32, float* noalias nocapture) #2 {
  %5 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 2
  %6 = bitcast float* %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %2, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %4
  %10 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 0
  %11 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 0
  %12 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 1
  %13 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 1
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %9
  %16 = phi i32 [ 0, %9 ], [ %36, %15 ]
  %17 = phi float* [ %3, %9 ], [ %35, %15 ]
  %18 = phi float* [ %1, %9 ], [ %34, %15 ]
  %19 = load float, float* %10, align 4
  %20 = load float, float* %18, align 4
  %21 = fmul float %19, %20
  %22 = load float, float* %11, align 4
  %23 = fadd float %21, %22
  store float %23, float* %17, align 4
  %24 = load float, float* %12, align 4
  %25 = getelementptr inbounds float, float* %18, i64 1
  %26 = load float, float* %25, align 4
  %27 = fmul float %24, %26
  %28 = load float, float* %13, align 4
  %29 = fadd float %27, %28
  %30 = getelementptr inbounds float, float* %17, i64 1
  store float %29, float* %30, align 4
  %31 = getelementptr inbounds float, float* %17, i64 2
  %32 = bitcast float* %31 to i32*
  store i32 %7, i32* %32, align 4
  %33 = getelementptr inbounds float, float* %17, i64 3
  store float 1.000000e+00, float* %33, align 4
  %34 = getelementptr inbounds float, float* %18, i64 2
  %35 = getelementptr inbounds float, float* %17, i64 4
  %36 = add nuw nsw i32 %16, 1
  %37 = icmp eq i32 %36, %2
  br i1 %37, label %14, label %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL7map2_afPA4_KfPS_iPf([4 x float]* nocapture readonly, float* noalias nocapture readonly, i32, float* noalias nocapture) #2 {
  %5 = bitcast float* %3 to i8*
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %108

7:                                                ; preds = %4
  %8 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 0
  %9 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 0
  %10 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 0
  %11 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 1
  %12 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 1
  %13 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 1
  %14 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 2
  %15 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 2
  %16 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 2
  %17 = add i32 %2, -1
  %18 = zext i32 %17 to i64
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp ult i64 %19, 4
  br i1 %20, label %21, label %25

21:                                               ; preds = %106, %25, %7
  %22 = phi float* [ %1, %25 ], [ %1, %7 ], [ %47, %106 ]
  %23 = phi float* [ %3, %25 ], [ %3, %7 ], [ %49, %106 ]
  %24 = phi i32 [ 0, %25 ], [ 0, %7 ], [ %50, %106 ]
  br label %109

25:                                               ; preds = %7
  %26 = add i32 %2, -1
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 2
  %29 = add nuw nsw i64 %28, 4
  %30 = getelementptr float, float* %3, i64 %29
  %31 = shl nuw nsw i64 %27, 1
  %32 = add nuw nsw i64 %31, 2
  %33 = getelementptr float, float* %1, i64 %32
  %34 = getelementptr [4 x float], [4 x float]* %0, i64 3, i64 2
  %35 = bitcast float* %34 to i8*
  %36 = getelementptr i8, i8* %35, i64 1
  %37 = icmp ugt float* %33, %3
  %38 = icmp ugt float* %30, %1
  %39 = and i1 %37, %38
  %40 = icmp ugt i8* %36, %5
  %41 = icmp ult float* %16, %30
  %42 = and i1 %40, %41
  %43 = or i1 %39, %42
  br i1 %43, label %21, label %44

44:                                               ; preds = %25
  %45 = and i64 %19, 8589934588
  %46 = shl nuw nsw i64 %45, 1
  %47 = getelementptr float, float* %1, i64 %46
  %48 = shl nuw nsw i64 %45, 2
  %49 = getelementptr float, float* %3, i64 %48
  %50 = trunc i64 %45 to i32
  %51 = load float, float* %8, align 4, !alias.scope !22
  %52 = insertelement <4 x float> undef, float %51, i32 0
  %53 = shufflevector <4 x float> %52, <4 x float> undef, <4 x i32> zeroinitializer
  %54 = load float, float* %9, align 4, !alias.scope !22
  %55 = insertelement <4 x float> undef, float %54, i32 0
  %56 = shufflevector <4 x float> %55, <4 x float> undef, <4 x i32> zeroinitializer
  %57 = load float, float* %10, align 4, !alias.scope !22
  %58 = insertelement <4 x float> undef, float %57, i32 0
  %59 = shufflevector <4 x float> %58, <4 x float> undef, <4 x i32> zeroinitializer
  %60 = load float, float* %11, align 4, !alias.scope !22
  %61 = insertelement <4 x float> undef, float %60, i32 0
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> zeroinitializer
  %63 = load float, float* %12, align 4, !alias.scope !22
  %64 = insertelement <4 x float> undef, float %63, i32 0
  %65 = shufflevector <4 x float> %64, <4 x float> undef, <4 x i32> zeroinitializer
  %66 = load float, float* %13, align 4, !alias.scope !22
  %67 = insertelement <4 x float> undef, float %66, i32 0
  %68 = shufflevector <4 x float> %67, <4 x float> undef, <4 x i32> zeroinitializer
  %69 = load float, float* %14, align 4, !alias.scope !22
  %70 = insertelement <4 x float> undef, float %69, i32 0
  %71 = shufflevector <4 x float> %70, <4 x float> undef, <4 x i32> zeroinitializer
  %72 = load float, float* %15, align 4, !alias.scope !22
  %73 = insertelement <4 x float> undef, float %72, i32 0
  %74 = shufflevector <4 x float> %73, <4 x float> undef, <4 x i32> zeroinitializer
  %75 = load float, float* %16, align 4, !alias.scope !22
  %76 = insertelement <4 x float> undef, float %75, i32 0
  %77 = shufflevector <4 x float> %76, <4 x float> undef, <4 x i32> zeroinitializer
  br label %78

78:                                               ; preds = %78, %44
  %79 = phi i64 [ 0, %44 ], [ %104, %78 ]
  %80 = shl i64 %79, 1
  %81 = getelementptr float, float* %1, i64 %80
  %82 = shl i64 %79, 2
  %83 = bitcast float* %81 to <8 x float>*
  %84 = load <8 x float>, <8 x float>* %83, align 4
  %85 = shufflevector <8 x float> %84, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %86 = shufflevector <8 x float> %84, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %87 = fmul <4 x float> %85, %53
  %88 = fmul <4 x float> %86, %56
  %89 = fadd <4 x float> %87, %88
  %90 = fadd <4 x float> %59, %89
  %91 = fmul <4 x float> %85, %62
  %92 = fmul <4 x float> %86, %65
  %93 = fadd <4 x float> %91, %92
  %94 = fadd <4 x float> %68, %93
  %95 = fmul <4 x float> %85, %71
  %96 = fmul <4 x float> %86, %74
  %97 = fadd <4 x float> %95, %96
  %98 = fadd <4 x float> %77, %97
  %99 = getelementptr inbounds float, float* %3, i64 %82
  %100 = bitcast float* %99 to <16 x float>*
  %101 = shufflevector <4 x float> %90, <4 x float> %94, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %102 = shufflevector <4 x float> %98, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %103 = shufflevector <8 x float> %101, <8 x float> %102, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x float> %103, <16 x float>* %100, align 4
  %104 = add i64 %79, 4
  %105 = icmp eq i64 %104, %45
  br i1 %105, label %106, label %78, !llvm.loop !25

106:                                              ; preds = %78
  %107 = icmp eq i64 %19, %45
  br i1 %107, label %108, label %21

108:                                              ; preds = %109, %106, %4
  ret void

109:                                              ; preds = %21, %109
  %110 = phi float* [ %140, %109 ], [ %22, %21 ]
  %111 = phi float* [ %141, %109 ], [ %23, %21 ]
  %112 = phi i32 [ %142, %109 ], [ %24, %21 ]
  %113 = load float, float* %110, align 4
  %114 = getelementptr inbounds float, float* %110, i64 1
  %115 = load float, float* %114, align 4
  %116 = load float, float* %8, align 4
  %117 = fmul float %113, %116
  %118 = load float, float* %9, align 4
  %119 = fmul float %115, %118
  %120 = fadd float %117, %119
  %121 = load float, float* %10, align 4
  %122 = fadd float %121, %120
  store float %122, float* %111, align 4
  %123 = load float, float* %11, align 4
  %124 = fmul float %113, %123
  %125 = load float, float* %12, align 4
  %126 = fmul float %115, %125
  %127 = fadd float %124, %126
  %128 = load float, float* %13, align 4
  %129 = fadd float %128, %127
  %130 = getelementptr inbounds float, float* %111, i64 1
  store float %129, float* %130, align 4
  %131 = load float, float* %14, align 4
  %132 = fmul float %113, %131
  %133 = load float, float* %15, align 4
  %134 = fmul float %115, %133
  %135 = fadd float %132, %134
  %136 = load float, float* %16, align 4
  %137 = fadd float %136, %135
  %138 = getelementptr inbounds float, float* %111, i64 2
  store float %137, float* %138, align 4
  %139 = getelementptr inbounds float, float* %111, i64 3
  store float 1.000000e+00, float* %139, align 4
  %140 = getelementptr inbounds float, float* %110, i64 2
  %141 = getelementptr inbounds float, float* %111, i64 4
  %142 = add nuw nsw i32 %112, 1
  %143 = icmp eq i32 %142, %2
  br i1 %143, label %108, label %109, !llvm.loop !27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL7map2_pfPA4_KfPS_iPf([4 x float]* nocapture readonly, float* noalias nocapture readonly, i32, float* noalias nocapture) unnamed_addr #2 {
  %5 = bitcast float* %3 to i8*
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %124

7:                                                ; preds = %4
  %8 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 0
  %9 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 0
  %10 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 0
  %11 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 1
  %12 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 1
  %13 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 1
  %14 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 2
  %15 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 2
  %16 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 2
  %17 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 3
  %18 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 3
  %19 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 3
  %20 = add i32 %2, -1
  %21 = zext i32 %20 to i64
  %22 = add nuw nsw i64 %21, 1
  %23 = icmp ult i64 %22, 4
  br i1 %23, label %24, label %28

24:                                               ; preds = %122, %28, %7
  %25 = phi i32 [ 0, %28 ], [ 0, %7 ], [ %49, %122 ]
  %26 = phi float* [ %3, %28 ], [ %3, %7 ], [ %51, %122 ]
  %27 = phi float* [ %1, %28 ], [ %1, %7 ], [ %53, %122 ]
  br label %125

28:                                               ; preds = %7
  %29 = add i32 %2, -1
  %30 = zext i32 %29 to i64
  %31 = shl nuw nsw i64 %30, 2
  %32 = add nuw nsw i64 %31, 4
  %33 = getelementptr float, float* %3, i64 %32
  %34 = shl nuw nsw i64 %30, 1
  %35 = add nuw nsw i64 %34, 2
  %36 = getelementptr float, float* %1, i64 %35
  %37 = getelementptr [4 x float], [4 x float]* %0, i64 3, i64 3
  %38 = bitcast float* %37 to i8*
  %39 = getelementptr i8, i8* %38, i64 1
  %40 = icmp ugt float* %36, %3
  %41 = icmp ugt float* %33, %1
  %42 = and i1 %40, %41
  %43 = icmp ugt i8* %39, %5
  %44 = icmp ult float* %19, %33
  %45 = and i1 %43, %44
  %46 = or i1 %42, %45
  br i1 %46, label %24, label %47

47:                                               ; preds = %28
  %48 = and i64 %22, 8589934588
  %49 = trunc i64 %48 to i32
  %50 = shl nuw nsw i64 %48, 2
  %51 = getelementptr float, float* %3, i64 %50
  %52 = shl nuw nsw i64 %48, 1
  %53 = getelementptr float, float* %1, i64 %52
  %54 = load float, float* %8, align 4, !alias.scope !28
  %55 = insertelement <4 x float> undef, float %54, i32 0
  %56 = shufflevector <4 x float> %55, <4 x float> undef, <4 x i32> zeroinitializer
  %57 = load float, float* %9, align 4, !alias.scope !28
  %58 = insertelement <4 x float> undef, float %57, i32 0
  %59 = shufflevector <4 x float> %58, <4 x float> undef, <4 x i32> zeroinitializer
  %60 = load float, float* %10, align 4, !alias.scope !28
  %61 = insertelement <4 x float> undef, float %60, i32 0
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> zeroinitializer
  %63 = load float, float* %11, align 4, !alias.scope !28
  %64 = insertelement <4 x float> undef, float %63, i32 0
  %65 = shufflevector <4 x float> %64, <4 x float> undef, <4 x i32> zeroinitializer
  %66 = load float, float* %12, align 4, !alias.scope !28
  %67 = insertelement <4 x float> undef, float %66, i32 0
  %68 = shufflevector <4 x float> %67, <4 x float> undef, <4 x i32> zeroinitializer
  %69 = load float, float* %13, align 4, !alias.scope !28
  %70 = insertelement <4 x float> undef, float %69, i32 0
  %71 = shufflevector <4 x float> %70, <4 x float> undef, <4 x i32> zeroinitializer
  %72 = load float, float* %14, align 4, !alias.scope !28
  %73 = insertelement <4 x float> undef, float %72, i32 0
  %74 = shufflevector <4 x float> %73, <4 x float> undef, <4 x i32> zeroinitializer
  %75 = load float, float* %15, align 4, !alias.scope !28
  %76 = insertelement <4 x float> undef, float %75, i32 0
  %77 = shufflevector <4 x float> %76, <4 x float> undef, <4 x i32> zeroinitializer
  %78 = load float, float* %16, align 4, !alias.scope !28
  %79 = insertelement <4 x float> undef, float %78, i32 0
  %80 = shufflevector <4 x float> %79, <4 x float> undef, <4 x i32> zeroinitializer
  %81 = load float, float* %17, align 4, !alias.scope !28
  %82 = insertelement <4 x float> undef, float %81, i32 0
  %83 = shufflevector <4 x float> %82, <4 x float> undef, <4 x i32> zeroinitializer
  %84 = load float, float* %18, align 4, !alias.scope !28
  %85 = insertelement <4 x float> undef, float %84, i32 0
  %86 = shufflevector <4 x float> %85, <4 x float> undef, <4 x i32> zeroinitializer
  %87 = load float, float* %19, align 4, !alias.scope !28
  %88 = insertelement <4 x float> undef, float %87, i32 0
  %89 = shufflevector <4 x float> %88, <4 x float> undef, <4 x i32> zeroinitializer
  br label %90

90:                                               ; preds = %90, %47
  %91 = phi i64 [ 0, %47 ], [ %120, %90 ]
  %92 = shl i64 %91, 2
  %93 = shl i64 %91, 1
  %94 = getelementptr float, float* %1, i64 %93
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 4
  %97 = shufflevector <8 x float> %96, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %98 = shufflevector <8 x float> %96, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %99 = fmul <4 x float> %97, %56
  %100 = fmul <4 x float> %98, %59
  %101 = fadd <4 x float> %99, %100
  %102 = fadd <4 x float> %62, %101
  %103 = fmul <4 x float> %97, %65
  %104 = fmul <4 x float> %98, %68
  %105 = fadd <4 x float> %103, %104
  %106 = fadd <4 x float> %71, %105
  %107 = fmul <4 x float> %97, %74
  %108 = fmul <4 x float> %98, %77
  %109 = fadd <4 x float> %107, %108
  %110 = fadd <4 x float> %80, %109
  %111 = fmul <4 x float> %97, %83
  %112 = fmul <4 x float> %98, %86
  %113 = fadd <4 x float> %111, %112
  %114 = fadd <4 x float> %89, %113
  %115 = getelementptr inbounds float, float* %3, i64 %92
  %116 = bitcast float* %115 to <16 x float>*
  %117 = shufflevector <4 x float> %102, <4 x float> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %118 = shufflevector <4 x float> %110, <4 x float> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %119 = shufflevector <8 x float> %117, <8 x float> %118, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x float> %119, <16 x float>* %116, align 4
  %120 = add i64 %91, 4
  %121 = icmp eq i64 %120, %48
  br i1 %121, label %122, label %90, !llvm.loop !31

122:                                              ; preds = %90
  %123 = icmp eq i64 %22, %48
  br i1 %123, label %124, label %24

124:                                              ; preds = %125, %122, %4
  ret void

125:                                              ; preds = %24, %125
  %126 = phi i32 [ %165, %125 ], [ %25, %24 ]
  %127 = phi float* [ %164, %125 ], [ %26, %24 ]
  %128 = phi float* [ %163, %125 ], [ %27, %24 ]
  %129 = load float, float* %128, align 4
  %130 = getelementptr inbounds float, float* %128, i64 1
  %131 = load float, float* %130, align 4
  %132 = load float, float* %8, align 4
  %133 = fmul float %129, %132
  %134 = load float, float* %9, align 4
  %135 = fmul float %131, %134
  %136 = fadd float %133, %135
  %137 = load float, float* %10, align 4
  %138 = fadd float %137, %136
  store float %138, float* %127, align 4
  %139 = load float, float* %11, align 4
  %140 = fmul float %129, %139
  %141 = load float, float* %12, align 4
  %142 = fmul float %131, %141
  %143 = fadd float %140, %142
  %144 = load float, float* %13, align 4
  %145 = fadd float %144, %143
  %146 = getelementptr inbounds float, float* %127, i64 1
  store float %145, float* %146, align 4
  %147 = load float, float* %14, align 4
  %148 = fmul float %129, %147
  %149 = load float, float* %15, align 4
  %150 = fmul float %131, %149
  %151 = fadd float %148, %150
  %152 = load float, float* %16, align 4
  %153 = fadd float %152, %151
  %154 = getelementptr inbounds float, float* %127, i64 2
  store float %153, float* %154, align 4
  %155 = load float, float* %17, align 4
  %156 = fmul float %129, %155
  %157 = load float, float* %18, align 4
  %158 = fmul float %131, %157
  %159 = fadd float %156, %158
  %160 = load float, float* %19, align 4
  %161 = fadd float %160, %159
  %162 = getelementptr inbounds float, float* %127, i64 3
  store float %161, float* %162, align 4
  %163 = getelementptr inbounds float, float* %128, i64 2
  %164 = getelementptr inbounds float, float* %127, i64 4
  %165 = add nuw nsw i32 %126, 1
  %166 = icmp eq i32 %165, %2
  br i1 %166, label %124, label %125, !llvm.loop !32
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10SkMatrix444map2EPKdiPd(%class.SkMatrix44*, double*, i32, double*) local_unnamed_addr #5 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  %6 = load i8, i8* %5, align 4
  %7 = and i8 %6, 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = zext i8 %6 to i64
  %11 = getelementptr inbounds [8 x void ([4 x float]*, double*, i32, double*)*], [8 x void ([4 x float]*, double*, i32, double*)*]* @_ZZNK10SkMatrix444map2EPKdiPdE5gProc, i64 0, i64 %10
  %12 = load void ([4 x float]*, double*, i32, double*)*, void ([4 x float]*, double*, i32, double*)** %11, align 8
  br label %13

13:                                               ; preds = %4, %9
  %14 = phi void ([4 x float]*, double*, i32, double*)* [ %12, %9 ], [ @_ZL7map2_pdPA4_KfPKdiPd, %4 ]
  %15 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0
  tail call void %14([4 x float]* %15, double* %1, i32 %2, double* %3) #10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL7map2_idPA4_KfPKdiPd([4 x float]* nocapture readnone, double* noalias nocapture readonly, i32, double* noalias nocapture) #2 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %29

6:                                                ; preds = %4
  %7 = add i32 %2, -1
  %8 = and i32 %2, 3
  %9 = icmp ult i32 %7, 3
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = sub i32 %2, %8
  br label %30

12:                                               ; preds = %30, %6
  %13 = phi double* [ %3, %6 ], [ %61, %30 ]
  %14 = phi double* [ %1, %6 ], [ %60, %30 ]
  %15 = icmp eq i32 %8, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %12, %16
  %17 = phi double* [ %26, %16 ], [ %13, %12 ]
  %18 = phi double* [ %25, %16 ], [ %14, %12 ]
  %19 = phi i32 [ %27, %16 ], [ %8, %12 ]
  %20 = bitcast double* %18 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 8
  %22 = bitcast double* %17 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %22, align 8
  %23 = getelementptr inbounds double, double* %17, i64 2
  %24 = bitcast double* %23 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %24, align 8
  %25 = getelementptr inbounds double, double* %18, i64 2
  %26 = getelementptr inbounds double, double* %17, i64 4
  %27 = add i32 %19, -1
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %16, !llvm.loop !33

29:                                               ; preds = %12, %16, %4
  ret void

30:                                               ; preds = %30, %10
  %31 = phi double* [ %3, %10 ], [ %61, %30 ]
  %32 = phi double* [ %1, %10 ], [ %60, %30 ]
  %33 = phi i32 [ %11, %10 ], [ %62, %30 ]
  %34 = bitcast double* %32 to <2 x i64>*
  %35 = load <2 x i64>, <2 x i64>* %34, align 8
  %36 = bitcast double* %31 to <2 x i64>*
  store <2 x i64> %35, <2 x i64>* %36, align 8
  %37 = getelementptr inbounds double, double* %31, i64 2
  %38 = bitcast double* %37 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %38, align 8
  %39 = getelementptr inbounds double, double* %32, i64 2
  %40 = getelementptr inbounds double, double* %31, i64 4
  %41 = bitcast double* %39 to <2 x i64>*
  %42 = load <2 x i64>, <2 x i64>* %41, align 8
  %43 = bitcast double* %40 to <2 x i64>*
  store <2 x i64> %42, <2 x i64>* %43, align 8
  %44 = getelementptr inbounds double, double* %31, i64 6
  %45 = bitcast double* %44 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %45, align 8
  %46 = getelementptr inbounds double, double* %32, i64 4
  %47 = getelementptr inbounds double, double* %31, i64 8
  %48 = bitcast double* %46 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 8
  %50 = bitcast double* %47 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %50, align 8
  %51 = getelementptr inbounds double, double* %31, i64 10
  %52 = bitcast double* %51 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %52, align 8
  %53 = getelementptr inbounds double, double* %32, i64 6
  %54 = getelementptr inbounds double, double* %31, i64 12
  %55 = bitcast double* %53 to <2 x i64>*
  %56 = load <2 x i64>, <2 x i64>* %55, align 8
  %57 = bitcast double* %54 to <2 x i64>*
  store <2 x i64> %56, <2 x i64>* %57, align 8
  %58 = getelementptr inbounds double, double* %31, i64 14
  %59 = bitcast double* %58 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %59, align 8
  %60 = getelementptr inbounds double, double* %32, i64 8
  %61 = getelementptr inbounds double, double* %31, i64 16
  %62 = add i32 %33, -4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %12, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL7map2_tdPA4_KfPKdiPd([4 x float]* nocapture readonly, double* noalias nocapture readonly, i32, double* noalias nocapture) #2 {
  %5 = bitcast double* %3 to i8*
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %78

7:                                                ; preds = %4
  %8 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 0
  %9 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 1
  %10 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 2
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i64 %12, 1
  %14 = icmp ult i64 %13, 2
  br i1 %14, label %15, label %19

15:                                               ; preds = %76, %19, %7
  %16 = phi i32 [ 0, %19 ], [ 0, %7 ], [ %41, %76 ]
  %17 = phi double* [ %3, %19 ], [ %3, %7 ], [ %43, %76 ]
  %18 = phi double* [ %1, %19 ], [ %1, %7 ], [ %45, %76 ]
  br label %79

19:                                               ; preds = %7
  %20 = add i32 %2, -1
  %21 = zext i32 %20 to i64
  %22 = shl nuw nsw i64 %21, 2
  %23 = add nuw nsw i64 %22, 4
  %24 = getelementptr double, double* %3, i64 %23
  %25 = shl nuw nsw i64 %21, 1
  %26 = add nuw nsw i64 %25, 2
  %27 = getelementptr double, double* %1, i64 %26
  %28 = getelementptr [4 x float], [4 x float]* %0, i64 3, i64 2
  %29 = bitcast float* %28 to i8*
  %30 = getelementptr i8, i8* %29, i64 1
  %31 = icmp ugt double* %27, %3
  %32 = icmp ugt double* %24, %1
  %33 = and i1 %31, %32
  %34 = icmp ugt i8* %30, %5
  %35 = bitcast double* %24 to float*
  %36 = icmp ult float* %10, %35
  %37 = and i1 %34, %36
  %38 = or i1 %33, %37
  br i1 %38, label %15, label %39

39:                                               ; preds = %19
  %40 = and i64 %13, 8589934590
  %41 = trunc i64 %40 to i32
  %42 = shl nuw nsw i64 %40, 2
  %43 = getelementptr double, double* %3, i64 %42
  %44 = shl nuw nsw i64 %40, 1
  %45 = getelementptr double, double* %1, i64 %44
  %46 = load float, float* %8, align 4, !alias.scope !35
  %47 = insertelement <2 x float> undef, float %46, i32 0
  %48 = shufflevector <2 x float> %47, <2 x float> undef, <2 x i32> zeroinitializer
  %49 = fpext <2 x float> %48 to <2 x double>
  %50 = load float, float* %9, align 4, !alias.scope !35
  %51 = insertelement <2 x float> undef, float %50, i32 0
  %52 = shufflevector <2 x float> %51, <2 x float> undef, <2 x i32> zeroinitializer
  %53 = fpext <2 x float> %52 to <2 x double>
  %54 = load float, float* %10, align 4, !alias.scope !35
  %55 = insertelement <2 x float> undef, float %54, i32 0
  %56 = shufflevector <2 x float> %55, <2 x float> undef, <2 x i32> zeroinitializer
  %57 = fpext <2 x float> %56 to <2 x double>
  %58 = shufflevector <2 x double> %57, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %59

59:                                               ; preds = %59, %39
  %60 = phi i64 [ 0, %39 ], [ %74, %59 ]
  %61 = shl i64 %60, 2
  %62 = shl i64 %60, 1
  %63 = getelementptr double, double* %1, i64 %62
  %64 = bitcast double* %63 to <4 x double>*
  %65 = load <4 x double>, <4 x double>* %64, align 8
  %66 = shufflevector <4 x double> %65, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %67 = shufflevector <4 x double> %65, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %68 = fadd <2 x double> %66, %49
  %69 = fadd <2 x double> %67, %53
  %70 = getelementptr inbounds double, double* %3, i64 %61
  %71 = bitcast double* %70 to <8 x double>*
  %72 = shufflevector <2 x double> %68, <2 x double> %69, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %73 = shufflevector <4 x double> %72, <4 x double> %58, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %73, <8 x double>* %71, align 8
  %74 = add i64 %60, 2
  %75 = icmp eq i64 %74, %40
  br i1 %75, label %76, label %59, !llvm.loop !38

76:                                               ; preds = %59
  %77 = icmp eq i64 %13, %40
  br i1 %77, label %78, label %15

78:                                               ; preds = %79, %76, %4
  ret void

79:                                               ; preds = %15, %79
  %80 = phi i32 [ %99, %79 ], [ %16, %15 ]
  %81 = phi double* [ %98, %79 ], [ %17, %15 ]
  %82 = phi double* [ %97, %79 ], [ %18, %15 ]
  %83 = load double, double* %82, align 8
  %84 = load float, float* %8, align 4
  %85 = fpext float %84 to double
  %86 = fadd double %83, %85
  store double %86, double* %81, align 8
  %87 = getelementptr inbounds double, double* %82, i64 1
  %88 = load double, double* %87, align 8
  %89 = load float, float* %9, align 4
  %90 = fpext float %89 to double
  %91 = fadd double %88, %90
  %92 = getelementptr inbounds double, double* %81, i64 1
  store double %91, double* %92, align 8
  %93 = load float, float* %10, align 4
  %94 = fpext float %93 to double
  %95 = getelementptr inbounds double, double* %81, i64 2
  store double %94, double* %95, align 8
  %96 = getelementptr inbounds double, double* %81, i64 3
  store double 1.000000e+00, double* %96, align 8
  %97 = getelementptr inbounds double, double* %82, i64 2
  %98 = getelementptr inbounds double, double* %81, i64 4
  %99 = add nuw nsw i32 %80, 1
  %100 = icmp eq i32 %99, %2
  br i1 %100, label %78, label %79, !llvm.loop !39
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL7map2_sdPA4_KfPKdiPd([4 x float]* nocapture readonly, double* noalias nocapture readonly, i32, double* noalias nocapture) #2 {
  %5 = bitcast double* %3 to i8*
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %90

7:                                                ; preds = %4
  %8 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 0
  %9 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 0
  %10 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 1
  %11 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 1
  %12 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 2
  %13 = add i32 %2, -1
  %14 = zext i32 %13 to i64
  %15 = add nuw nsw i64 %14, 1
  %16 = icmp ult i64 %15, 2
  br i1 %16, label %17, label %21

17:                                               ; preds = %88, %21, %7
  %18 = phi i32 [ 0, %21 ], [ 0, %7 ], [ %43, %88 ]
  %19 = phi double* [ %3, %21 ], [ %3, %7 ], [ %45, %88 ]
  %20 = phi double* [ %1, %21 ], [ %1, %7 ], [ %47, %88 ]
  br label %91

21:                                               ; preds = %7
  %22 = add i32 %2, -1
  %23 = zext i32 %22 to i64
  %24 = shl nuw nsw i64 %23, 2
  %25 = add nuw nsw i64 %24, 4
  %26 = getelementptr double, double* %3, i64 %25
  %27 = getelementptr [4 x float], [4 x float]* %0, i64 3, i64 2
  %28 = bitcast float* %27 to i8*
  %29 = getelementptr i8, i8* %28, i64 1
  %30 = shl nuw nsw i64 %23, 1
  %31 = add nuw nsw i64 %30, 2
  %32 = getelementptr double, double* %1, i64 %31
  %33 = icmp ugt i8* %29, %5
  %34 = bitcast double* %26 to float*
  %35 = icmp ult float* %12, %34
  %36 = and i1 %33, %35
  %37 = icmp ugt double* %32, %3
  %38 = icmp ugt double* %26, %1
  %39 = and i1 %37, %38
  %40 = or i1 %36, %39
  br i1 %40, label %17, label %41

41:                                               ; preds = %21
  %42 = and i64 %15, 8589934590
  %43 = trunc i64 %42 to i32
  %44 = shl nuw nsw i64 %42, 2
  %45 = getelementptr double, double* %3, i64 %44
  %46 = shl nuw nsw i64 %42, 1
  %47 = getelementptr double, double* %1, i64 %46
  %48 = load float, float* %8, align 4, !alias.scope !40
  %49 = insertelement <2 x float> undef, float %48, i32 0
  %50 = shufflevector <2 x float> %49, <2 x float> undef, <2 x i32> zeroinitializer
  %51 = fpext <2 x float> %50 to <2 x double>
  %52 = load float, float* %9, align 4, !alias.scope !40
  %53 = insertelement <2 x float> undef, float %52, i32 0
  %54 = shufflevector <2 x float> %53, <2 x float> undef, <2 x i32> zeroinitializer
  %55 = fpext <2 x float> %54 to <2 x double>
  %56 = load float, float* %10, align 4, !alias.scope !40
  %57 = insertelement <2 x float> undef, float %56, i32 0
  %58 = shufflevector <2 x float> %57, <2 x float> undef, <2 x i32> zeroinitializer
  %59 = fpext <2 x float> %58 to <2 x double>
  %60 = load float, float* %11, align 4, !alias.scope !40
  %61 = insertelement <2 x float> undef, float %60, i32 0
  %62 = shufflevector <2 x float> %61, <2 x float> undef, <2 x i32> zeroinitializer
  %63 = fpext <2 x float> %62 to <2 x double>
  %64 = load float, float* %12, align 4, !alias.scope !40
  %65 = insertelement <2 x float> undef, float %64, i32 0
  %66 = shufflevector <2 x float> %65, <2 x float> undef, <2 x i32> zeroinitializer
  %67 = fpext <2 x float> %66 to <2 x double>
  %68 = shufflevector <2 x double> %67, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %69

69:                                               ; preds = %69, %41
  %70 = phi i64 [ 0, %41 ], [ %86, %69 ]
  %71 = shl i64 %70, 2
  %72 = shl i64 %70, 1
  %73 = getelementptr double, double* %1, i64 %72
  %74 = bitcast double* %73 to <4 x double>*
  %75 = load <4 x double>, <4 x double>* %74, align 8
  %76 = shufflevector <4 x double> %75, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %77 = shufflevector <4 x double> %75, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %78 = fmul <2 x double> %76, %51
  %79 = fadd <2 x double> %78, %55
  %80 = fmul <2 x double> %77, %59
  %81 = fadd <2 x double> %80, %63
  %82 = getelementptr inbounds double, double* %3, i64 %71
  %83 = bitcast double* %82 to <8 x double>*
  %84 = shufflevector <2 x double> %79, <2 x double> %81, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %85 = shufflevector <4 x double> %84, <4 x double> %68, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %85, <8 x double>* %83, align 8
  %86 = add i64 %70, 2
  %87 = icmp eq i64 %86, %42
  br i1 %87, label %88, label %69, !llvm.loop !43

88:                                               ; preds = %69
  %89 = icmp eq i64 %15, %42
  br i1 %89, label %90, label %17

90:                                               ; preds = %91, %88, %4
  ret void

91:                                               ; preds = %17, %91
  %92 = phi i32 [ %117, %91 ], [ %18, %17 ]
  %93 = phi double* [ %116, %91 ], [ %19, %17 ]
  %94 = phi double* [ %115, %91 ], [ %20, %17 ]
  %95 = load float, float* %8, align 4
  %96 = fpext float %95 to double
  %97 = load double, double* %94, align 8
  %98 = fmul double %97, %96
  %99 = load float, float* %9, align 4
  %100 = fpext float %99 to double
  %101 = fadd double %98, %100
  store double %101, double* %93, align 8
  %102 = load float, float* %10, align 4
  %103 = fpext float %102 to double
  %104 = getelementptr inbounds double, double* %94, i64 1
  %105 = load double, double* %104, align 8
  %106 = fmul double %105, %103
  %107 = load float, float* %11, align 4
  %108 = fpext float %107 to double
  %109 = fadd double %106, %108
  %110 = getelementptr inbounds double, double* %93, i64 1
  store double %109, double* %110, align 8
  %111 = load float, float* %12, align 4
  %112 = fpext float %111 to double
  %113 = getelementptr inbounds double, double* %93, i64 2
  store double %112, double* %113, align 8
  %114 = getelementptr inbounds double, double* %93, i64 3
  store double 1.000000e+00, double* %114, align 8
  %115 = getelementptr inbounds double, double* %94, i64 2
  %116 = getelementptr inbounds double, double* %93, i64 4
  %117 = add nuw nsw i32 %92, 1
  %118 = icmp eq i32 %117, %2
  br i1 %118, label %90, label %91, !llvm.loop !44
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL7map2_adPA4_KfPKdiPd([4 x float]* nocapture readonly, double* noalias nocapture readonly, i32, double* noalias nocapture) #2 {
  %5 = bitcast double* %3 to i8*
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %118

7:                                                ; preds = %4
  %8 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 0
  %9 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 0
  %10 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 0
  %11 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 1
  %12 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 1
  %13 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 1
  %14 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 2
  %15 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 2
  %16 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 2
  %17 = add i32 %2, -1
  %18 = zext i32 %17 to i64
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp ult i64 %19, 2
  br i1 %20, label %21, label %25

21:                                               ; preds = %116, %25, %7
  %22 = phi double* [ %1, %25 ], [ %1, %7 ], [ %48, %116 ]
  %23 = phi double* [ %3, %25 ], [ %3, %7 ], [ %50, %116 ]
  %24 = phi i32 [ 0, %25 ], [ 0, %7 ], [ %51, %116 ]
  br label %119

25:                                               ; preds = %7
  %26 = add i32 %2, -1
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 2
  %29 = add nuw nsw i64 %28, 4
  %30 = getelementptr double, double* %3, i64 %29
  %31 = shl nuw nsw i64 %27, 1
  %32 = add nuw nsw i64 %31, 2
  %33 = getelementptr double, double* %1, i64 %32
  %34 = getelementptr [4 x float], [4 x float]* %0, i64 3, i64 2
  %35 = bitcast float* %34 to i8*
  %36 = getelementptr i8, i8* %35, i64 1
  %37 = icmp ugt double* %33, %3
  %38 = icmp ugt double* %30, %1
  %39 = and i1 %37, %38
  %40 = icmp ugt i8* %36, %5
  %41 = bitcast double* %30 to float*
  %42 = icmp ult float* %16, %41
  %43 = and i1 %40, %42
  %44 = or i1 %39, %43
  br i1 %44, label %21, label %45

45:                                               ; preds = %25
  %46 = and i64 %19, 8589934590
  %47 = shl nuw nsw i64 %46, 1
  %48 = getelementptr double, double* %1, i64 %47
  %49 = shl nuw nsw i64 %46, 2
  %50 = getelementptr double, double* %3, i64 %49
  %51 = trunc i64 %46 to i32
  %52 = load float, float* %8, align 4, !alias.scope !45
  %53 = insertelement <2 x float> undef, float %52, i32 0
  %54 = shufflevector <2 x float> %53, <2 x float> undef, <2 x i32> zeroinitializer
  %55 = fpext <2 x float> %54 to <2 x double>
  %56 = load float, float* %9, align 4, !alias.scope !45
  %57 = insertelement <2 x float> undef, float %56, i32 0
  %58 = shufflevector <2 x float> %57, <2 x float> undef, <2 x i32> zeroinitializer
  %59 = fpext <2 x float> %58 to <2 x double>
  %60 = load float, float* %10, align 4, !alias.scope !45
  %61 = insertelement <2 x float> undef, float %60, i32 0
  %62 = shufflevector <2 x float> %61, <2 x float> undef, <2 x i32> zeroinitializer
  %63 = fpext <2 x float> %62 to <2 x double>
  %64 = load float, float* %11, align 4, !alias.scope !45
  %65 = insertelement <2 x float> undef, float %64, i32 0
  %66 = shufflevector <2 x float> %65, <2 x float> undef, <2 x i32> zeroinitializer
  %67 = fpext <2 x float> %66 to <2 x double>
  %68 = load float, float* %12, align 4, !alias.scope !45
  %69 = insertelement <2 x float> undef, float %68, i32 0
  %70 = shufflevector <2 x float> %69, <2 x float> undef, <2 x i32> zeroinitializer
  %71 = fpext <2 x float> %70 to <2 x double>
  %72 = load float, float* %13, align 4, !alias.scope !45
  %73 = insertelement <2 x float> undef, float %72, i32 0
  %74 = shufflevector <2 x float> %73, <2 x float> undef, <2 x i32> zeroinitializer
  %75 = fpext <2 x float> %74 to <2 x double>
  %76 = load float, float* %14, align 4, !alias.scope !45
  %77 = insertelement <2 x float> undef, float %76, i32 0
  %78 = shufflevector <2 x float> %77, <2 x float> undef, <2 x i32> zeroinitializer
  %79 = fpext <2 x float> %78 to <2 x double>
  %80 = load float, float* %15, align 4, !alias.scope !45
  %81 = insertelement <2 x float> undef, float %80, i32 0
  %82 = shufflevector <2 x float> %81, <2 x float> undef, <2 x i32> zeroinitializer
  %83 = fpext <2 x float> %82 to <2 x double>
  %84 = load float, float* %16, align 4, !alias.scope !45
  %85 = insertelement <2 x float> undef, float %84, i32 0
  %86 = shufflevector <2 x float> %85, <2 x float> undef, <2 x i32> zeroinitializer
  %87 = fpext <2 x float> %86 to <2 x double>
  br label %88

88:                                               ; preds = %88, %45
  %89 = phi i64 [ 0, %45 ], [ %114, %88 ]
  %90 = shl i64 %89, 1
  %91 = getelementptr double, double* %1, i64 %90
  %92 = shl i64 %89, 2
  %93 = bitcast double* %91 to <4 x double>*
  %94 = load <4 x double>, <4 x double>* %93, align 8
  %95 = shufflevector <4 x double> %94, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %96 = shufflevector <4 x double> %94, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %97 = fmul <2 x double> %95, %55
  %98 = fmul <2 x double> %96, %59
  %99 = fadd <2 x double> %97, %98
  %100 = fadd <2 x double> %99, %63
  %101 = fmul <2 x double> %95, %67
  %102 = fmul <2 x double> %96, %71
  %103 = fadd <2 x double> %101, %102
  %104 = fadd <2 x double> %103, %75
  %105 = fmul <2 x double> %95, %79
  %106 = fmul <2 x double> %96, %83
  %107 = fadd <2 x double> %105, %106
  %108 = fadd <2 x double> %107, %87
  %109 = getelementptr inbounds double, double* %3, i64 %92
  %110 = bitcast double* %109 to <8 x double>*
  %111 = shufflevector <2 x double> %100, <2 x double> %104, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %112 = shufflevector <2 x double> %108, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %113 = shufflevector <4 x double> %111, <4 x double> %112, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %113, <8 x double>* %110, align 8
  %114 = add i64 %89, 2
  %115 = icmp eq i64 %114, %46
  br i1 %115, label %116, label %88, !llvm.loop !48

116:                                              ; preds = %88
  %117 = icmp eq i64 %19, %46
  br i1 %117, label %118, label %21

118:                                              ; preds = %119, %116, %4
  ret void

119:                                              ; preds = %21, %119
  %120 = phi double* [ %159, %119 ], [ %22, %21 ]
  %121 = phi double* [ %160, %119 ], [ %23, %21 ]
  %122 = phi i32 [ %161, %119 ], [ %24, %21 ]
  %123 = load double, double* %120, align 8
  %124 = getelementptr inbounds double, double* %120, i64 1
  %125 = load double, double* %124, align 8
  %126 = load float, float* %8, align 4
  %127 = fpext float %126 to double
  %128 = fmul double %123, %127
  %129 = load float, float* %9, align 4
  %130 = fpext float %129 to double
  %131 = fmul double %125, %130
  %132 = fadd double %128, %131
  %133 = load float, float* %10, align 4
  %134 = fpext float %133 to double
  %135 = fadd double %132, %134
  store double %135, double* %121, align 8
  %136 = load float, float* %11, align 4
  %137 = fpext float %136 to double
  %138 = fmul double %123, %137
  %139 = load float, float* %12, align 4
  %140 = fpext float %139 to double
  %141 = fmul double %125, %140
  %142 = fadd double %138, %141
  %143 = load float, float* %13, align 4
  %144 = fpext float %143 to double
  %145 = fadd double %142, %144
  %146 = getelementptr inbounds double, double* %121, i64 1
  store double %145, double* %146, align 8
  %147 = load float, float* %14, align 4
  %148 = fpext float %147 to double
  %149 = fmul double %123, %148
  %150 = load float, float* %15, align 4
  %151 = fpext float %150 to double
  %152 = fmul double %125, %151
  %153 = fadd double %149, %152
  %154 = load float, float* %16, align 4
  %155 = fpext float %154 to double
  %156 = fadd double %153, %155
  %157 = getelementptr inbounds double, double* %121, i64 2
  store double %156, double* %157, align 8
  %158 = getelementptr inbounds double, double* %121, i64 3
  store double 1.000000e+00, double* %158, align 8
  %159 = getelementptr inbounds double, double* %120, i64 2
  %160 = getelementptr inbounds double, double* %121, i64 4
  %161 = add nuw nsw i32 %122, 1
  %162 = icmp eq i32 %161, %2
  br i1 %162, label %118, label %119, !llvm.loop !49
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL7map2_pdPA4_KfPKdiPd([4 x float]* nocapture readonly, double* noalias nocapture readonly, i32, double* noalias nocapture) unnamed_addr #2 {
  %5 = bitcast double* %3 to i8*
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %137

7:                                                ; preds = %4
  %8 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 0
  %9 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 0
  %10 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 0
  %11 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 1
  %12 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 1
  %13 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 1
  %14 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 2
  %15 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 2
  %16 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 2
  %17 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, i64 3
  %18 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 1, i64 3
  %19 = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, i64 3
  %20 = add i32 %2, -1
  %21 = zext i32 %20 to i64
  %22 = add nuw nsw i64 %21, 1
  %23 = icmp ult i64 %22, 2
  br i1 %23, label %24, label %28

24:                                               ; preds = %135, %28, %7
  %25 = phi i32 [ 0, %28 ], [ 0, %7 ], [ %50, %135 ]
  %26 = phi double* [ %3, %28 ], [ %3, %7 ], [ %52, %135 ]
  %27 = phi double* [ %1, %28 ], [ %1, %7 ], [ %54, %135 ]
  br label %138

28:                                               ; preds = %7
  %29 = add i32 %2, -1
  %30 = zext i32 %29 to i64
  %31 = shl nuw nsw i64 %30, 2
  %32 = add nuw nsw i64 %31, 4
  %33 = getelementptr double, double* %3, i64 %32
  %34 = shl nuw nsw i64 %30, 1
  %35 = add nuw nsw i64 %34, 2
  %36 = getelementptr double, double* %1, i64 %35
  %37 = getelementptr [4 x float], [4 x float]* %0, i64 3, i64 3
  %38 = bitcast float* %37 to i8*
  %39 = getelementptr i8, i8* %38, i64 1
  %40 = icmp ugt double* %36, %3
  %41 = icmp ugt double* %33, %1
  %42 = and i1 %40, %41
  %43 = icmp ugt i8* %39, %5
  %44 = bitcast double* %33 to float*
  %45 = icmp ult float* %19, %44
  %46 = and i1 %43, %45
  %47 = or i1 %42, %46
  br i1 %47, label %24, label %48

48:                                               ; preds = %28
  %49 = and i64 %22, 8589934590
  %50 = trunc i64 %49 to i32
  %51 = shl nuw nsw i64 %49, 2
  %52 = getelementptr double, double* %3, i64 %51
  %53 = shl nuw nsw i64 %49, 1
  %54 = getelementptr double, double* %1, i64 %53
  %55 = load float, float* %8, align 4, !alias.scope !50
  %56 = insertelement <2 x float> undef, float %55, i32 0
  %57 = shufflevector <2 x float> %56, <2 x float> undef, <2 x i32> zeroinitializer
  %58 = fpext <2 x float> %57 to <2 x double>
  %59 = load float, float* %9, align 4, !alias.scope !50
  %60 = insertelement <2 x float> undef, float %59, i32 0
  %61 = shufflevector <2 x float> %60, <2 x float> undef, <2 x i32> zeroinitializer
  %62 = fpext <2 x float> %61 to <2 x double>
  %63 = load float, float* %10, align 4, !alias.scope !50
  %64 = insertelement <2 x float> undef, float %63, i32 0
  %65 = shufflevector <2 x float> %64, <2 x float> undef, <2 x i32> zeroinitializer
  %66 = fpext <2 x float> %65 to <2 x double>
  %67 = load float, float* %11, align 4, !alias.scope !50
  %68 = insertelement <2 x float> undef, float %67, i32 0
  %69 = shufflevector <2 x float> %68, <2 x float> undef, <2 x i32> zeroinitializer
  %70 = fpext <2 x float> %69 to <2 x double>
  %71 = load float, float* %12, align 4, !alias.scope !50
  %72 = insertelement <2 x float> undef, float %71, i32 0
  %73 = shufflevector <2 x float> %72, <2 x float> undef, <2 x i32> zeroinitializer
  %74 = fpext <2 x float> %73 to <2 x double>
  %75 = load float, float* %13, align 4, !alias.scope !50
  %76 = insertelement <2 x float> undef, float %75, i32 0
  %77 = shufflevector <2 x float> %76, <2 x float> undef, <2 x i32> zeroinitializer
  %78 = fpext <2 x float> %77 to <2 x double>
  %79 = load float, float* %14, align 4, !alias.scope !50
  %80 = insertelement <2 x float> undef, float %79, i32 0
  %81 = shufflevector <2 x float> %80, <2 x float> undef, <2 x i32> zeroinitializer
  %82 = fpext <2 x float> %81 to <2 x double>
  %83 = load float, float* %15, align 4, !alias.scope !50
  %84 = insertelement <2 x float> undef, float %83, i32 0
  %85 = shufflevector <2 x float> %84, <2 x float> undef, <2 x i32> zeroinitializer
  %86 = fpext <2 x float> %85 to <2 x double>
  %87 = load float, float* %16, align 4, !alias.scope !50
  %88 = insertelement <2 x float> undef, float %87, i32 0
  %89 = shufflevector <2 x float> %88, <2 x float> undef, <2 x i32> zeroinitializer
  %90 = fpext <2 x float> %89 to <2 x double>
  %91 = load float, float* %17, align 4, !alias.scope !50
  %92 = insertelement <2 x float> undef, float %91, i32 0
  %93 = shufflevector <2 x float> %92, <2 x float> undef, <2 x i32> zeroinitializer
  %94 = fpext <2 x float> %93 to <2 x double>
  %95 = load float, float* %18, align 4, !alias.scope !50
  %96 = insertelement <2 x float> undef, float %95, i32 0
  %97 = shufflevector <2 x float> %96, <2 x float> undef, <2 x i32> zeroinitializer
  %98 = fpext <2 x float> %97 to <2 x double>
  %99 = load float, float* %19, align 4, !alias.scope !50
  %100 = insertelement <2 x float> undef, float %99, i32 0
  %101 = shufflevector <2 x float> %100, <2 x float> undef, <2 x i32> zeroinitializer
  %102 = fpext <2 x float> %101 to <2 x double>
  br label %103

103:                                              ; preds = %103, %48
  %104 = phi i64 [ 0, %48 ], [ %133, %103 ]
  %105 = shl i64 %104, 2
  %106 = shl i64 %104, 1
  %107 = getelementptr double, double* %1, i64 %106
  %108 = bitcast double* %107 to <4 x double>*
  %109 = load <4 x double>, <4 x double>* %108, align 8
  %110 = shufflevector <4 x double> %109, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %111 = shufflevector <4 x double> %109, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %112 = fmul <2 x double> %110, %58
  %113 = fmul <2 x double> %111, %62
  %114 = fadd <2 x double> %112, %113
  %115 = fadd <2 x double> %114, %66
  %116 = fmul <2 x double> %110, %70
  %117 = fmul <2 x double> %111, %74
  %118 = fadd <2 x double> %116, %117
  %119 = fadd <2 x double> %118, %78
  %120 = fmul <2 x double> %110, %82
  %121 = fmul <2 x double> %111, %86
  %122 = fadd <2 x double> %120, %121
  %123 = fadd <2 x double> %122, %90
  %124 = fmul <2 x double> %110, %94
  %125 = fmul <2 x double> %111, %98
  %126 = fadd <2 x double> %124, %125
  %127 = fadd <2 x double> %126, %102
  %128 = getelementptr inbounds double, double* %3, i64 %105
  %129 = bitcast double* %128 to <8 x double>*
  %130 = shufflevector <2 x double> %115, <2 x double> %119, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %131 = shufflevector <2 x double> %123, <2 x double> %127, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %132 = shufflevector <4 x double> %130, <4 x double> %131, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %132, <8 x double>* %129, align 8
  %133 = add i64 %104, 2
  %134 = icmp eq i64 %133, %49
  br i1 %134, label %135, label %103, !llvm.loop !53

135:                                              ; preds = %103
  %136 = icmp eq i64 %22, %49
  br i1 %136, label %137, label %24

137:                                              ; preds = %138, %135, %4
  ret void

138:                                              ; preds = %24, %138
  %139 = phi i32 [ %190, %138 ], [ %25, %24 ]
  %140 = phi double* [ %189, %138 ], [ %26, %24 ]
  %141 = phi double* [ %188, %138 ], [ %27, %24 ]
  %142 = load double, double* %141, align 8
  %143 = getelementptr inbounds double, double* %141, i64 1
  %144 = load double, double* %143, align 8
  %145 = load float, float* %8, align 4
  %146 = fpext float %145 to double
  %147 = fmul double %142, %146
  %148 = load float, float* %9, align 4
  %149 = fpext float %148 to double
  %150 = fmul double %144, %149
  %151 = fadd double %147, %150
  %152 = load float, float* %10, align 4
  %153 = fpext float %152 to double
  %154 = fadd double %151, %153
  store double %154, double* %140, align 8
  %155 = load float, float* %11, align 4
  %156 = fpext float %155 to double
  %157 = fmul double %142, %156
  %158 = load float, float* %12, align 4
  %159 = fpext float %158 to double
  %160 = fmul double %144, %159
  %161 = fadd double %157, %160
  %162 = load float, float* %13, align 4
  %163 = fpext float %162 to double
  %164 = fadd double %161, %163
  %165 = getelementptr inbounds double, double* %140, i64 1
  store double %164, double* %165, align 8
  %166 = load float, float* %14, align 4
  %167 = fpext float %166 to double
  %168 = fmul double %142, %167
  %169 = load float, float* %15, align 4
  %170 = fpext float %169 to double
  %171 = fmul double %144, %170
  %172 = fadd double %168, %171
  %173 = load float, float* %16, align 4
  %174 = fpext float %173 to double
  %175 = fadd double %172, %174
  %176 = getelementptr inbounds double, double* %140, i64 2
  store double %175, double* %176, align 8
  %177 = load float, float* %17, align 4
  %178 = fpext float %177 to double
  %179 = fmul double %142, %178
  %180 = load float, float* %18, align 4
  %181 = fpext float %180 to double
  %182 = fmul double %144, %181
  %183 = fadd double %179, %182
  %184 = load float, float* %19, align 4
  %185 = fpext float %184 to double
  %186 = fadd double %183, %185
  %187 = getelementptr inbounds double, double* %140, i64 3
  store double %186, double* %187, align 8
  %188 = getelementptr inbounds double, double* %141, i64 2
  %189 = getelementptr inbounds double, double* %140, i64 4
  %190 = add nuw nsw i32 %139, 1
  %191 = icmp eq i32 %190, %2
  br i1 %191, label %137, label %138, !llvm.loop !54
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK10SkMatrix4424preserves2dAxisAlignmentEf(%class.SkMatrix44* nocapture readonly, float) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %4 = load float, float* %3, align 4
  %5 = fcmp une float %4, 0.000000e+00
  br i1 %5, label %35, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  %8 = load float, float* %7, align 4
  %9 = fcmp une float %8, 0.000000e+00
  br i1 %9, label %35, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %12 = load float, float* %11, align 4
  %13 = tail call float @llvm.fabs.f32(float %12)
  %14 = fcmp ogt float %13, %1
  %15 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %16 = load float, float* %15, align 4
  %17 = tail call float @llvm.fabs.f32(float %16)
  %18 = fcmp ogt float %17, %1
  %19 = and i1 %14, %18
  %20 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %21 = load float, float* %20, align 4
  %22 = tail call float @llvm.fabs.f32(float %21)
  %23 = fcmp ogt float %22, %1
  %24 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %25 = load float, float* %24, align 4
  %26 = tail call float @llvm.fabs.f32(float %25)
  %27 = fcmp ogt float %26, %1
  %28 = and i1 %18, %27
  %29 = and i1 %23, %27
  %30 = and i1 %14, %23
  %31 = or i1 %30, %28
  %32 = or i1 %19, %31
  %33 = or i1 %29, %32
  %34 = xor i1 %33, true
  br label %35

35:                                               ; preds = %2, %6, %10
  %36 = phi i1 [ %34, %10 ], [ false, %6 ], [ false, %2 ]
  ret i1 %36
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10SkMatrix444dumpEv(%class.SkMatrix44* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 0
  %3 = load float, float* %2, align 4
  %4 = fpext float %3 to double
  %5 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %6 = load float, float* %5, align 4
  %7 = fpext float %6 to double
  %8 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %12 = load float, float* %11, align 4
  %13 = fpext float %12 to double
  %14 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %24 = load float, float* %23, align 4
  %25 = fpext float %24 to double
  %26 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  %27 = load float, float* %26, align 4
  %28 = fpext float %27 to double
  %29 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  %30 = load float, float* %29, align 4
  %31 = fpext float %30 to double
  %32 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  %33 = load float, float* %32, align 4
  %34 = fpext float %33 to double
  %35 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  %36 = load float, float* %35, align 4
  %37 = fpext float %36 to double
  %38 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %39 = load float, float* %38, align 4
  %40 = fpext float %39 to double
  %41 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  %45 = load float, float* %44, align 4
  %46 = fpext float %45 to double
  %47 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %48 = load float, float* %47, align 4
  %49 = fpext float %48 to double
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 944, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0), double %4, double %7, double %10, double %13, double %16, double %19, double %22, double %25, double %28, double %31, double %34, double %37, double %40, double %43, double %46, double %49) #10
  ret void
}

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkMatrix44C2ERK8SkMatrix(%class.SkMatrix44* nocapture, %class.SkMatrix* dereferenceable(40)) unnamed_addr #5 align 2 {
  %3 = bitcast %class.SkMatrix* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %class.SkMatrix44* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %10 = bitcast float* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  store float 0.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %16 = bitcast float* %15 to i32*
  store i32 %14, i32* %16, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  %18 = bitcast float* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %21 = bitcast float* %20 to i32*
  store i32 %19, i32* %21, align 4
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  %23 = bitcast float* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %26 = bitcast float* %25 to i32*
  store i32 %24, i32* %26, align 4
  %27 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  store float 0.000000e+00, float* %27, align 4
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %32 = bitcast float* %31 to i32*
  store i32 %30, i32* %32, align 4
  %33 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  store float 0.000000e+00, float* %33, align 4
  %34 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  store float 0.000000e+00, float* %34, align 4
  %35 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  store float 1.000000e+00, float* %35, align 4
  %36 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  store float 0.000000e+00, float* %36, align 4
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 6
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %41 = bitcast float* %40 to i32*
  store i32 %39, i32* %41, align 4
  %42 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 7
  %43 = bitcast float* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  %46 = bitcast float* %45 to i32*
  store i32 %44, i32* %46, align 4
  %47 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  store float 0.000000e+00, float* %47, align 4
  %48 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  %49 = bitcast float* %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %52 = bitcast float* %51 to i32*
  store i32 %50, i32* %52, align 4
  %53 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = trunc i32 %54 to i8
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %2
  %58 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %1) #10
  %59 = zext i8 %58 to i32
  store i32 %59, i32* %53, align 4
  br label %60

60:                                               ; preds = %57, %2
  %61 = phi i32 [ %59, %57 ], [ %54, %2 ]
  %62 = and i32 %61, 15
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %60
  %65 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  store i8 0, i8* %65, align 4
  br label %67

66:                                               ; preds = %60
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0) #10
  br label %67

67:                                               ; preds = %64, %66
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix44aSERK8SkMatrix(%class.SkMatrix44* returned, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #5 align 2 {
  %3 = bitcast %class.SkMatrix* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %class.SkMatrix44* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 0
  %10 = bitcast float* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 0
  store float 0.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 0
  %16 = bitcast float* %15 to i32*
  store i32 %14, i32* %16, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  %18 = bitcast float* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 1
  %21 = bitcast float* %20 to i32*
  store i32 %19, i32* %21, align 4
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  %23 = bitcast float* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 1
  %26 = bitcast float* %25 to i32*
  store i32 %24, i32* %26, align 4
  %27 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 1
  store float 0.000000e+00, float* %27, align 4
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 1
  %32 = bitcast float* %31 to i32*
  store i32 %30, i32* %32, align 4
  %33 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 2
  store float 0.000000e+00, float* %33, align 4
  %34 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 2
  store float 0.000000e+00, float* %34, align 4
  %35 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 2
  store float 1.000000e+00, float* %35, align 4
  %36 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 2
  store float 0.000000e+00, float* %36, align 4
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 6
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 0, i64 3
  %41 = bitcast float* %40 to i32*
  store i32 %39, i32* %41, align 4
  %42 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 7
  %43 = bitcast float* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 1, i64 3
  %46 = bitcast float* %45 to i32*
  store i32 %44, i32* %46, align 4
  %47 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 2, i64 3
  store float 0.000000e+00, float* %47, align 4
  %48 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  %49 = bitcast float* %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 0, i64 3, i64 3
  %52 = bitcast float* %51 to i32*
  store i32 %50, i32* %52, align 4
  %53 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = trunc i32 %54 to i8
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %2
  %58 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %1) #10
  %59 = zext i8 %58 to i32
  store i32 %59, i32* %53, align 4
  br label %60

60:                                               ; preds = %2, %57
  %61 = phi i32 [ %59, %57 ], [ %54, %2 ]
  %62 = and i32 %61, 15
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %60
  %65 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %0, i64 0, i32 1
  store i8 0, i8* %65, align 4
  br label %67

66:                                               ; preds = %60
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %0)
  br label %67

67:                                               ; preds = %66, %64
  ret %class.SkMatrix44* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10SkMatrix44cv8SkMatrixEv(%class.SkMatrix* noalias sret, %class.SkMatrix44* nocapture readonly) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %12 = bitcast %class.SkMatrix44* %1 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = bitcast %class.SkMatrix* %0 to i32*
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1
  %16 = bitcast [4 x float]* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = bitcast float* %4 to i32*
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3
  %20 = bitcast [4 x float]* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = bitcast float* %5 to i32*
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 1
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = bitcast float* %6 to i32*
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1, i64 1
  %28 = bitcast float* %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = bitcast float* %7 to i32*
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 1
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = bitcast float* %8 to i32*
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 0, i64 3
  %36 = bitcast float* %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = bitcast float* %9 to i32*
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 1, i64 3
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = bitcast float* %10 to i32*
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %1, i64 0, i32 0, i64 3, i64 3
  %44 = bitcast float* %43 to i32*
  %45 = load i32, i32* %44, align 4
  store i32 128, i32* %3, align 4
  %46 = bitcast float* %11 to i32*
  store i32 %45, i32* %46, align 4
  ret void
}

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #6

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #9

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZL3eq4PKfS0_: argument 0"}
!4 = distinct !{!4, !"_ZL3eq4PKfS0_"}
!5 = !{!6}
!6 = distinct !{!6, !4, !"_ZL3eq4PKfS0_: argument 1"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZL3eq4PKfS0_: argument 0"}
!9 = distinct !{!9, !"_ZL3eq4PKfS0_"}
!10 = !{!11}
!11 = distinct !{!11, !9, !"_ZL3eq4PKfS0_: argument 1"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZL3eq4PKfS0_: argument 0"}
!14 = distinct !{!14, !"_ZL3eq4PKfS0_"}
!15 = !{!16}
!16 = distinct !{!16, !14, !"_ZL3eq4PKfS0_: argument 1"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZL3eq4PKfS0_: argument 0"}
!19 = distinct !{!19, !"_ZL3eq4PKfS0_"}
!20 = !{!21}
!21 = distinct !{!21, !19, !"_ZL3eq4PKfS0_: argument 1"}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = distinct !{!25, !26}
!26 = !{!"llvm.loop.isvectorized", i32 1}
!27 = distinct !{!27, !26}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = distinct !{!31, !26}
!32 = distinct !{!32, !26}
!33 = distinct !{!33, !34}
!34 = !{!"llvm.loop.unroll.disable"}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = distinct !{!38, !26}
!39 = distinct !{!39, !26}
!40 = !{!41}
!41 = distinct !{!41, !42}
!42 = distinct !{!42, !"LVerDomain"}
!43 = distinct !{!43, !26}
!44 = distinct !{!44, !26}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = distinct !{!48, !26}
!49 = distinct !{!49, !26}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = distinct !{!53, !26}
!54 = distinct !{!54, !26}
