; ModuleID = '../../third_party/skia/modules/sksg/src/SkSGInvalidationController.cpp'
source_filename = "../../third_party/skia/modules/sksg/src/SkSGInvalidationController.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sksg::InvalidationController" = type { %"class.std::__1::vector", %struct.SkRect }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %struct.SkRect*, %struct.SkRect*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.SkRect* }
%struct.SkRect = type { float, float, float, float }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkTCopyOnFirstWrite = type { %struct.SkRect*, %class.SkTLazy }
%class.SkTLazy = type { [16 x i8], %struct.SkRect* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN4sksg22InvalidationControllerC1Ev = hidden unnamed_addr alias void (%"class.sksg::InvalidationController"*), void (%"class.sksg::InvalidationController"*)* @_ZN4sksg22InvalidationControllerC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg22InvalidationControllerC2Ev(%"class.sksg::InvalidationController"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.sksg::InvalidationController"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 40, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg22InvalidationController5invalERK6SkRectRK8SkMatrix(%"class.sksg::InvalidationController"*, %struct.SkRect* dereferenceable(16), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkTCopyOnFirstWrite, align 8
  %5 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = fcmp olt float %6, %8
  br i1 %9, label %10, label %121

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %14 = load float, float* %13, align 4
  %15 = fcmp uge float %12, %14
  br i1 %15, label %121, label %16

16:                                               ; preds = %10
  %17 = bitcast %class.SkTCopyOnFirstWrite* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #7
  %18 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %4, i64 0, i32 0
  %19 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %4, i64 0, i32 1, i32 1
  %20 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %4, i64 0, i32 1, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 16, i1 false)
  store %struct.SkRect* %1, %struct.SkRect** %18, align 8
  store %struct.SkRect* null, %struct.SkRect** %19, align 8
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = trunc i32 %22 to i8
  %24 = icmp slt i8 %23, 0
  %25 = bitcast %struct.SkRect* %1 to i8*
  br i1 %24, label %26, label %29

26:                                               ; preds = %16
  %27 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #7
  %28 = zext i8 %27 to i32
  store i32 %28, i32* %21, align 4
  br label %29

29:                                               ; preds = %16, %26
  %30 = phi i32 [ %28, %26 ], [ %22, %16 ]
  %31 = and i32 %30, 15
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %42, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %4, i64 0, i32 1
  %35 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %34, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 4 %25, i64 16, i1 false) #7
  %36 = bitcast %struct.SkRect** %19 to %class.SkTLazy**
  store %class.SkTLazy* %34, %class.SkTLazy** %36, align 8
  %37 = ptrtoint %class.SkTLazy* %34 to i64
  %38 = bitcast %class.SkTCopyOnFirstWrite* %4 to i64*
  store i64 %37, i64* %38, align 8
  %39 = bitcast %class.SkTLazy* %34 to %struct.SkRect*
  %40 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* %2, %struct.SkRect* %39, %struct.SkRect* dereferenceable(16) %39, i32 1) #7
  %41 = load %struct.SkRect*, %struct.SkRect** %18, align 8
  br label %42

42:                                               ; preds = %33, %29
  %43 = phi %struct.SkRect* [ %41, %33 ], [ %1, %29 ]
  %44 = getelementptr inbounds %"class.sksg::InvalidationController", %"class.sksg::InvalidationController"* %0, i64 0, i32 0, i32 0, i32 1
  %45 = load %struct.SkRect*, %struct.SkRect** %44, align 8
  %46 = getelementptr inbounds %"class.sksg::InvalidationController", %"class.sksg::InvalidationController"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %47 = load %struct.SkRect*, %struct.SkRect** %46, align 8
  %48 = icmp eq %struct.SkRect* %45, %47
  %49 = ptrtoint %struct.SkRect* %47 to i64
  br i1 %48, label %56, label %50

50:                                               ; preds = %42
  %51 = bitcast %struct.SkRect* %45 to i8*
  %52 = bitcast %struct.SkRect* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* align 4 %52, i64 16, i1 false) #7
  %53 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %45, i64 1
  %54 = ptrtoint %struct.SkRect* %53 to i64
  %55 = bitcast %struct.SkRect** %44 to i64*
  store i64 %54, i64* %55, align 8
  br label %114

56:                                               ; preds = %42
  %57 = ptrtoint %struct.SkRect* %45 to i64
  %58 = bitcast %struct.SkRect** %44 to i64*
  %59 = bitcast %"class.sksg::InvalidationController"* %0 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = sub i64 %57, %60
  %62 = ashr exact i64 %61, 4
  %63 = add nsw i64 %62, 1
  %64 = icmp ugt i64 %63, 1152921504606846975
  br i1 %64, label %65, label %67

65:                                               ; preds = %56
  %66 = bitcast %"class.sksg::InvalidationController"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %66) #8
  unreachable

67:                                               ; preds = %56
  %68 = bitcast %struct.SkRect** %46 to i64*
  %69 = sub i64 %49, %60
  %70 = ashr exact i64 %69, 4
  %71 = icmp ult i64 %70, 576460752303423487
  br i1 %71, label %72, label %80

72:                                               ; preds = %67
  %73 = ashr exact i64 %69, 3
  %74 = icmp ult i64 %73, %63
  %75 = select i1 %74, i64 %63, i64 %73
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %85, label %77

77:                                               ; preds = %72
  %78 = icmp ugt i64 %75, 1152921504606846975
  br i1 %78, label %79, label %80

79:                                               ; preds = %77
  call void @abort() #8
  unreachable

80:                                               ; preds = %77, %67
  %81 = phi i64 [ %75, %77 ], [ 1152921504606846975, %67 ]
  %82 = shl i64 %81, 4
  %83 = call i8* @_Znwm(i64 %82) #9
  %84 = bitcast i8* %83 to %struct.SkRect*
  br label %85

85:                                               ; preds = %80, %72
  %86 = phi i64 [ %81, %80 ], [ 0, %72 ]
  %87 = phi %struct.SkRect* [ %84, %80 ], [ null, %72 ]
  %88 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %87, i64 %62
  %89 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %87, i64 %86
  %90 = ptrtoint %struct.SkRect* %89 to i64
  %91 = bitcast %struct.SkRect* %88 to i8*
  %92 = bitcast %struct.SkRect* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %91, i8* align 4 %92, i64 16, i1 false) #7
  %93 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %88, i64 1
  %94 = ptrtoint %struct.SkRect* %93 to i64
  %95 = getelementptr inbounds %"class.sksg::InvalidationController", %"class.sksg::InvalidationController"* %0, i64 0, i32 0, i32 0, i32 0
  %96 = load %struct.SkRect*, %struct.SkRect** %95, align 8
  %97 = load i64, i64* %58, align 8
  %98 = ptrtoint %struct.SkRect* %96 to i64
  %99 = sub i64 %97, %98
  %100 = ashr exact i64 %99, 4
  %101 = sub nsw i64 0, %100
  %102 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %88, i64 %101
  %103 = ptrtoint %struct.SkRect* %102 to i64
  %104 = icmp sgt i64 %99, 0
  br i1 %104, label %105, label %109

105:                                              ; preds = %85
  %106 = bitcast %struct.SkRect* %102 to i8*
  %107 = bitcast %struct.SkRect* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %106, i8* align 4 %107, i64 %99, i1 false) #7
  %108 = load %struct.SkRect*, %struct.SkRect** %95, align 8
  br label %109

109:                                              ; preds = %105, %85
  %110 = phi %struct.SkRect* [ %96, %85 ], [ %108, %105 ]
  store i64 %103, i64* %59, align 8
  store i64 %94, i64* %58, align 8
  store i64 %90, i64* %68, align 8
  %111 = icmp eq %struct.SkRect* %110, null
  br i1 %111, label %114, label %112

112:                                              ; preds = %109
  %113 = bitcast %struct.SkRect* %110 to i8*
  call void @_ZdlPv(i8* %113) #9
  br label %114

114:                                              ; preds = %50, %109, %112
  %115 = getelementptr inbounds %"class.sksg::InvalidationController", %"class.sksg::InvalidationController"* %0, i64 0, i32 1
  %116 = load %struct.SkRect*, %struct.SkRect** %18, align 8
  call void @_ZN6SkRect4joinERKS_(%struct.SkRect* %115, %struct.SkRect* dereferenceable(16) %116) #7
  %117 = load %struct.SkRect*, %struct.SkRect** %19, align 8
  %118 = icmp eq %struct.SkRect* %117, null
  br i1 %118, label %120, label %119

119:                                              ; preds = %114
  store %struct.SkRect* null, %struct.SkRect** %19, align 8
  br label %120

120:                                              ; preds = %114, %119
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #7
  br label %121

121:                                              ; preds = %3, %10, %120
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN6SkRect4joinERKS_(%struct.SkRect*, %struct.SkRect* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg22InvalidationController5resetEv(%"class.sksg::InvalidationController"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.sksg::InvalidationController"* %0 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.sksg::InvalidationController", %"class.sksg::InvalidationController"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast %struct.SkRect** %4 to i64*
  store i64 %3, i64* %5, align 8
  %6 = getelementptr inbounds %"class.sksg::InvalidationController", %"class.sksg::InvalidationController"* %0, i64 0, i32 1
  %7 = bitcast %struct.SkRect* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 16, i1 false) #7
  ret void
}

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
