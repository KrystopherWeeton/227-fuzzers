; ModuleID = '../../media/midi/task_service.cc'
source_filename = "../../media/midi/task_service.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.midi::TaskService" = type { i64, %class.scoped_refptr, %"class.std::__1::vector", i64, %"class.base::Lock", %"class.base::ConditionVariable", i32, %"class.base::Lock" }
%class.scoped_refptr = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::Thread"* }
%"class.base::Thread" = type <{ %"class.base::PlatformThread::Delegate", i8, i8, i8, [5 x i8], %"class.base::Lock", %"class.base::PlatformThreadHandle", %"class.base::Lock", i32, [4 x i8], %"class.base::WaitableEvent", %"class.std::__1::unique_ptr.6", %"class.base::RunLoop"*, i32, [4 x i8], %"class.std::__1::basic_string", %"class.base::WaitableEvent", %"class.base::SequenceCheckerDoNothing", [7 x i8] }>
%"class.base::PlatformThread::Delegate" = type { i32 (...)** }
%"class.base::PlatformThreadHandle" = type { i64 }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.base::Thread::Delegate"* }
%"class.base::Thread::Delegate" = type { i32 (...)** }
%"class.base::RunLoop" = type { %"class.base::RunLoop::Delegate"*, i32, i8, i8, i8, i8, i8, %class.scoped_refptr, %"class.base::WeakPtrFactory" }
%"class.base::RunLoop::Delegate" = type <{ i32 (...)**, %"class.std::__1::stack", %"class.base::ObserverList", i8, [7 x i8] }>
%"class.std::__1::stack" = type { %"class.std::__1::vector.10" }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.base::RunLoop"**, %"class.base::RunLoop"**, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.base::RunLoop"** }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.17", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.19" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.24 }
%class.scoped_refptr.24 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.25", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.25" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.26" }
%"struct.std::__1::atomic.26" = type { %"struct.std::__1::__atomic_base.27" }
%"struct.std::__1::__atomic_base.27" = type { %"struct.std::__1::__atomic_base.28" }
%"struct.std::__1::__atomic_base.28" = type { %"struct.std::__1::__cxx_atomic_impl.29" }
%"struct.std::__1::__cxx_atomic_impl.29" = type { %"struct.std::__1::__cxx_atomic_base_impl.30" }
%"struct.std::__1::__cxx_atomic_base_impl.30" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.1, i8, [7 x i8] }>
%class.scoped_refptr.1 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.2", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.3" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i64 }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.std::__1::unique_ptr"* }
%"class.base::ConditionVariable" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t*, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.44, %union.anon.46, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.44 = type { i64 }
%union.anon.46 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope" = type { %"class.base::IgnoreHangsInScope" }
%"class.base::IgnoreHangsInScope" = type { i8 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.48 }
%class.scoped_refptr.48 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.49", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.49" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.base::Thread::Options" = type <{ i32, [4 x i8], %"class.base::Thread::Delegate"*, i32, [4 x i8], %"class.base::sequence_manager::TimeDomain"*, %"class.base::RepeatingCallback", i64, i32, i8, i8, [2 x i8] }>
%"class.base::sequence_manager::TimeDomain" = type opaque
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN4base8internal7InvokerINS0_9BindStateIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS0_17UnretainedWrapperIS4_EElmS7_EEES6_E7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS0_17UnretainedWrapperIS3_EElmS6_EE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN4base6ThreadENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE8__appendEm = comdat any

@_ZN4midi11TaskService16kDefaultRunnerIdE = hidden local_unnamed_addr constant i64 0, align 8
@_ZN4midi11TaskService18kInvalidInstanceIdE = hidden local_unnamed_addr constant i64 -1, align 8
@.str = private unnamed_addr constant [15 x i8] c"UnbindInstance\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"../../media/midi/task_service.cc\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"PostStaticTask\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"PostBoundTask\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"PostBoundDelayedTask\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"MidiService_TaskService_Thread(%zu)\00", align 1

@_ZN4midi11TaskServiceC1Ev = hidden unnamed_addr alias void (%"class.midi::TaskService"*), void (%"class.midi::TaskService"*)* @_ZN4midi11TaskServiceC2Ev
@_ZN4midi11TaskServiceD1Ev = hidden unnamed_addr alias void (%"class.midi::TaskService"*), void (%"class.midi::TaskService"*)* @_ZN4midi11TaskServiceD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4midi11TaskServiceC2Ev(%"class.midi::TaskService"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 0
  store i64 -1, i64* %2, align 8
  %3 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 1, i32 0
  %4 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 3
  %5 = bitcast %"class.base::SingleThreadTaskRunner"** %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false)
  store i64 -1, i64* %4, align 8
  %6 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 4, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %6) #9
  %7 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 5
  %8 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 7
  tail call void @_ZN4base17ConditionVariableC1EPNS_4LockE(%"class.base::ConditionVariable"* %7, %"class.base::Lock"* %8) #9
  %9 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 6
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %8, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %10) #9
  ret void
}

declare void @_ZN4base17ConditionVariableC1EPNS_4LockE(%"class.base::ConditionVariable"*, %"class.base::Lock"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4midi11TaskServiceD2Ev(%"class.midi::TaskService"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 4
  %3 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  %11 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %10, align 8
  %12 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 2, i32 0, i32 1
  %13 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %12, align 8
  %14 = bitcast %"class.std::__1::vector"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #9
  %15 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #9
  %16 = icmp eq %"class.std::__1::unique_ptr"* %13, %11
  br i1 %16, label %30, label %17

17:                                               ; preds = %8, %28
  %18 = phi %"class.std::__1::unique_ptr"* [ %19, %28 ], [ %13, %8 ]
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 -1
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %19, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.base::Thread"*, %"class.base::Thread"** %20, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %20, align 8
  %22 = icmp eq %"class.base::Thread"* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %17
  %24 = bitcast %"class.base::Thread"* %21 to void (%"class.base::Thread"*)***
  %25 = load void (%"class.base::Thread"*)**, void (%"class.base::Thread"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %25, i64 3
  %27 = load void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %26, align 8
  tail call void %27(%"class.base::Thread"* nonnull %21) #9
  br label %28

28:                                               ; preds = %23, %17
  %29 = icmp eq %"class.std::__1::unique_ptr"* %19, %11
  br i1 %29, label %30, label %17

30:                                               ; preds = %28, %8
  %31 = icmp eq %"class.std::__1::unique_ptr"* %11, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %30
  %33 = bitcast %"class.std::__1::unique_ptr"* %11 to i8*
  tail call void @_ZdlPv(i8* %33) #10
  br label %34

34:                                               ; preds = %30, %32
  %35 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 7, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %35) #9
  %36 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 5
  tail call void @_ZN4base17ConditionVariableD1Ev(%"class.base::ConditionVariable"* %36) #9
  %37 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %37) #9
  %38 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %10, align 8
  %39 = icmp eq %"class.std::__1::unique_ptr"* %38, null
  br i1 %39, label %62, label %40

40:                                               ; preds = %34
  %41 = bitcast %"class.std::__1::unique_ptr"* %38 to i8*
  %42 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %12, align 8
  %43 = icmp eq %"class.std::__1::unique_ptr"* %42, %38
  br i1 %43, label %60, label %44

44:                                               ; preds = %40, %55
  %45 = phi %"class.std::__1::unique_ptr"* [ %46, %55 ], [ %42, %40 ]
  %46 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %45, i64 -1
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %46, i64 0, i32 0, i32 0, i32 0
  %48 = load %"class.base::Thread"*, %"class.base::Thread"** %47, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %47, align 8
  %49 = icmp eq %"class.base::Thread"* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.base::Thread"* %48 to void (%"class.base::Thread"*)***
  %52 = load void (%"class.base::Thread"*)**, void (%"class.base::Thread"*)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %52, i64 3
  %54 = load void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %53, align 8
  tail call void %54(%"class.base::Thread"* nonnull %48) #9
  br label %55

55:                                               ; preds = %50, %44
  %56 = icmp eq %"class.std::__1::unique_ptr"* %46, %38
  br i1 %56, label %57, label %44

57:                                               ; preds = %55
  %58 = bitcast %"class.std::__1::vector"* %9 to i8**
  %59 = load i8*, i8** %58, align 8
  br label %60

60:                                               ; preds = %57, %40
  %61 = phi i8* [ %59, %57 ], [ %41, %40 ]
  store %"class.std::__1::unique_ptr"* %38, %"class.std::__1::unique_ptr"** %12, align 8
  tail call void @_ZdlPv(i8* %61) #10
  br label %62

62:                                               ; preds = %34, %60
  %63 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 1, i32 0
  %64 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %63, align 8
  %65 = icmp eq %"class.base::SingleThreadTaskRunner"* %64, null
  br i1 %65, label %74, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %64, i64 0, i32 0, i32 0, i32 1
  %68 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %67, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = atomicrmw sub i32* %68, i32 1 acq_rel
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %74

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %67, i64 -2
  %73 = bitcast %"class.base::RefCountedThreadSafe"* %72 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %73) #9
  br label %74

74:                                               ; preds = %62, %66, %71
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare void @_ZN4base17ConditionVariableD1Ev(%"class.base::ConditionVariable"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4midi11TaskService12BindInstanceEv(%"class.midi::TaskService"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 4
  %3 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, -1
  br i1 %11, label %12, label %40

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 9223372036854775807
  br i1 %15, label %40, label %16

16:                                               ; preds = %12
  %17 = add nsw i64 %14, 1
  store i64 %17, i64* %13, align 8
  store i64 %17, i64* %9, align 8
  %18 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base22ThreadTaskRunnerHandle3GetEv() #9
  %19 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %18, i64 0, i32 0
  %20 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %19, align 8
  %21 = icmp eq %"class.base::SingleThreadTaskRunner"* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %20, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw add i32* %23, i32 1 monotonic
  br label %25

25:                                               ; preds = %16, %22
  %26 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 1
  %27 = ptrtoint %"class.base::SingleThreadTaskRunner"* %20 to i64
  %28 = bitcast %class.scoped_refptr* %26 to i64*
  %29 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %26, i64 0, i32 0
  %30 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %29, align 8
  store i64 %27, i64* %28, align 8
  %31 = icmp eq %"class.base::SingleThreadTaskRunner"* %30, null
  br i1 %31, label %40, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %30, i64 0, i32 0, i32 0, i32 1
  %34 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw sub i32* %34, i32 1 acq_rel
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %37, label %40

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %33, i64 -2
  %39 = bitcast %"class.base::RefCountedThreadSafe"* %38 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %39) #9
  br label %40

40:                                               ; preds = %37, %32, %25, %12, %8
  %41 = phi i1 [ false, %8 ], [ false, %12 ], [ true, %25 ], [ true, %32 ], [ true, %37 ]
  %42 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #9
  ret i1 %41
}

declare dereferenceable(8) %class.scoped_refptr* @_ZN4base22ThreadTaskRunnerHandle3GetEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4midi11TaskService14UnbindInstanceEv(%"class.midi::TaskService"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope", align 1
  %3 = alloca %"class.base::Location", align 8
  %4 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 4
  %5 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %4, i64 0, i32 0, i32 0
  %6 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %5) #9
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8, !prof !2

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %4, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %9) #9
  br label %10

10:                                               ; preds = %1, %8
  %11 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, -1
  br i1 %13, label %44, label %14

14:                                               ; preds = %10
  store i64 -1, i64* %11, align 8
  %15 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 1
  %16 = bitcast %class.scoped_refptr* %15 to i64*
  %17 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %15, i64 0, i32 0
  %18 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %17, align 8
  store i64 0, i64* %16, align 8
  %19 = icmp eq %"class.base::SingleThreadTaskRunner"* %18, null
  br i1 %19, label %28, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %18, i64 0, i32 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw sub i32* %22, i32 1 acq_rel
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %21, i64 -2
  %27 = bitcast %"class.base::RefCountedThreadSafe"* %26 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %27) #9
  br label %28

28:                                               ; preds = %14, %20, %25
  %29 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %5) #9
  %30 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 7
  %31 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %30, i64 0, i32 0, i32 0
  %32 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %31) #9
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %36, label %34, !prof !2

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %30, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %35) #9
  br label %36

36:                                               ; preds = %28, %34
  %37 = getelementptr inbounds %"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope", %"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope"* %2, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %37) #9
  store i8 -86, i8* %37, align 1
  %38 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %38) #9
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i32 74) #9
  call void @_ZN4base49ScopedAllowBaseSyncPrimitivesOutsideBlockingScopeC1ERKNS_8LocationE(%"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope"* nonnull %2, %"class.base::Location"* nonnull dereferenceable(32) %3) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %38) #9
  %39 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 6
  %40 = load i32, i32* %39, align 8
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %49

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 5
  br label %46

44:                                               ; preds = %10
  %45 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %5) #9
  br label %51

46:                                               ; preds = %42, %46
  notail call void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"* %43) #9
  %47 = load i32, i32* %39, align 8
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %46, label %49

49:                                               ; preds = %46, %36
  call void @_ZN4base49ScopedAllowBaseSyncPrimitivesOutsideBlockingScopeD1Ev(%"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope"* nonnull %2) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %37) #9
  %50 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %31) #9
  br label %51

51:                                               ; preds = %44, %49
  %52 = phi i1 [ true, %49 ], [ false, %44 ]
  ret i1 %52
}

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #1

declare void @_ZN4base49ScopedAllowBaseSyncPrimitivesOutsideBlockingScopeC1ERKNS_8LocationE(%"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope"*, %"class.base::Location"* dereferenceable(32)) unnamed_addr #1

declare void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base49ScopedAllowBaseSyncPrimitivesOutsideBlockingScopeD1Ev(%"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4midi11TaskService14IsOnTaskRunnerEm(%"class.midi::TaskService"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %3, i64 0, i32 0, i32 0
  %5 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %4) #9
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !2

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %3, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %8) #9
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, -1
  br i1 %12, label %67, label %13

13:                                               ; preds = %9
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %15, label %24

15:                                               ; preds = %13
  %16 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 1, i32 0
  %17 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %16, align 8
  %18 = bitcast %"class.base::SingleThreadTaskRunner"* %17 to %"class.base::SequencedTaskRunner"*
  %19 = bitcast %"class.base::SingleThreadTaskRunner"* %17 to i1 (%"class.base::SequencedTaskRunner"*)***
  %20 = load i1 (%"class.base::SequencedTaskRunner"*)**, i1 (%"class.base::SequencedTaskRunner"*)*** %19, align 8
  %21 = getelementptr inbounds i1 (%"class.base::SequencedTaskRunner"*)*, i1 (%"class.base::SequencedTaskRunner"*)** %20, i64 5
  %22 = load i1 (%"class.base::SequencedTaskRunner"*)*, i1 (%"class.base::SequencedTaskRunner"*)** %21, align 8
  %23 = tail call zeroext i1 %22(%"class.base::SequencedTaskRunner"* %18) #9
  br label %67

24:                                               ; preds = %13
  %25 = add i64 %1, -1
  %26 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 2
  %27 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 2, i32 0, i32 1
  %28 = bitcast %"class.std::__1::unique_ptr"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.std::__1::vector"* %26 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %29, %31
  %33 = ashr exact i64 %32, 3
  %34 = icmp ugt i64 %33, %25
  br i1 %34, label %35, label %67

35:                                               ; preds = %24
  %36 = inttoptr i64 %31 to %"class.std::__1::unique_ptr"*
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %25, i32 0, i32 0, i32 0
  %38 = load %"class.base::Thread"*, %"class.base::Thread"** %37, align 8
  %39 = icmp eq %"class.base::Thread"* %38, null
  br i1 %39, label %67, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.base::Thread", %"class.base::Thread"* %38, i64 0, i32 11, i32 0, i32 0, i32 0
  %42 = load %"class.base::Thread::Delegate"*, %"class.base::Thread::Delegate"** %41, align 8
  %43 = icmp eq %"class.base::Thread::Delegate"* %42, null
  br i1 %43, label %50, label %44

44:                                               ; preds = %40
  %45 = bitcast %"class.base::Thread::Delegate"* %42 to %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)***
  %46 = load %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)**, %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)*** %45, align 8
  %47 = getelementptr inbounds %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)*, %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)** %46, i64 2
  %48 = load %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)*, %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)** %47, align 8
  %49 = tail call %"class.base::SingleThreadTaskRunner"* %48(%"class.base::Thread::Delegate"* nonnull %42) #9
  br label %50

50:                                               ; preds = %40, %44
  %51 = phi %"class.base::SingleThreadTaskRunner"* [ %49, %44 ], [ null, %40 ]
  %52 = bitcast %"class.base::SingleThreadTaskRunner"* %51 to %"class.base::SequencedTaskRunner"*
  %53 = bitcast %"class.base::SingleThreadTaskRunner"* %51 to i1 (%"class.base::SequencedTaskRunner"*)***
  %54 = load i1 (%"class.base::SequencedTaskRunner"*)**, i1 (%"class.base::SequencedTaskRunner"*)*** %53, align 8
  %55 = getelementptr inbounds i1 (%"class.base::SequencedTaskRunner"*)*, i1 (%"class.base::SequencedTaskRunner"*)** %54, i64 5
  %56 = load i1 (%"class.base::SequencedTaskRunner"*)*, i1 (%"class.base::SequencedTaskRunner"*)** %55, align 8
  %57 = tail call zeroext i1 %56(%"class.base::SequencedTaskRunner"* %52) #9
  %58 = icmp eq %"class.base::SingleThreadTaskRunner"* %51, null
  br i1 %58, label %67, label %59

59:                                               ; preds = %50
  %60 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %51, i64 0, i32 0, i32 0, i32 1
  %61 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %60, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = atomicrmw sub i32* %61, i32 1 acq_rel
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %67

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %60, i64 -2
  %66 = bitcast %"class.base::RefCountedThreadSafe"* %65 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %66) #9
  br label %67

67:                                               ; preds = %35, %64, %59, %50, %24, %9, %15
  %68 = phi i1 [ %23, %15 ], [ false, %9 ], [ false, %24 ], [ false, %35 ], [ %57, %50 ], [ %57, %59 ], [ %57, %64 ]
  %69 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #9
  ret i1 %68
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4midi11TaskService14PostStaticTaskEmN4base12OnceCallbackIFvvEEE(%"class.midi::TaskService"*, i64, %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = tail call %"class.base::SingleThreadTaskRunner"* @_ZN4midi11TaskService13GetTaskRunnerEm(%"class.midi::TaskService"* %0, i64 %1)
  %7 = bitcast %"class.base::SingleThreadTaskRunner"* %6 to %"class.base::TaskRunner"*
  %8 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #9
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i32 98) #9
  %9 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %10 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %11, i64* %12, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %9, align 8
  %13 = call zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"* %7, %"class.base::Location"* nonnull dereferenceable(32) %4, %"class.base::OnceCallback"* nonnull %5) #9
  %14 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %14) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #9
  %15 = icmp eq %"class.base::SingleThreadTaskRunner"* %6, null
  br i1 %15, label %24, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %6, i64 0, i32 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %24

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %17, i64 -2
  %23 = bitcast %"class.base::RefCountedThreadSafe"* %22 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %23) #9
  br label %24

24:                                               ; preds = %3, %16, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::SingleThreadTaskRunner"* @_ZN4midi11TaskService13GetTaskRunnerEm(%"class.midi::TaskService"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"struct.base::Thread::Options", align 8
  %5 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 4
  %6 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %5, i64 0, i32 0, i32 0
  %7 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %6) #9
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9, !prof !2

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %5, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %10) #9
  br label %11

11:                                               ; preds = %2, %9
  %12 = icmp eq i64 %1, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %11
  %14 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 1, i32 0
  %15 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %14, align 8
  %16 = icmp eq %"class.base::SingleThreadTaskRunner"* %15, null
  br i1 %16, label %85, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 1 monotonic
  br label %85

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 2
  %22 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 2, i32 0, i32 1
  %23 = bitcast %"class.std::__1::unique_ptr"** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.std::__1::vector"* %21 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %24, %26
  %28 = ashr exact i64 %27, 3
  %29 = icmp ult i64 %28, %1
  %30 = inttoptr i64 %26 to %"class.std::__1::unique_ptr"*
  br i1 %29, label %31, label %35

31:                                               ; preds = %20
  %32 = sub i64 %1, %28
  tail call void @_ZNSt3__16vectorINS_10unique_ptrIN4base6ThreadENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE8__appendEm(%"class.std::__1::vector"* %21, i64 %32) #9
  %33 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %21, i64 0, i32 0, i32 0
  %34 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %33, align 8
  br label %35

35:                                               ; preds = %31, %20
  %36 = phi %"class.std::__1::unique_ptr"* [ %34, %31 ], [ %30, %20 ]
  %37 = add i64 %1, -1
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %21, i64 0, i32 0, i32 0
  %39 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %37, i32 0, i32 0, i32 0
  %40 = load %"class.base::Thread"*, %"class.base::Thread"** %39, align 8
  %41 = icmp eq %"class.base::Thread"* %40, null
  br i1 %41, label %42, label %72

42:                                               ; preds = %35
  %43 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %43) #9
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %3, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i64 %1) #9
  %44 = call i8* @_Znwm(i64 200) #10
  %45 = bitcast i8* %44 to %"class.base::Thread"*
  call void @_ZN4base6ThreadC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::Thread"* nonnull %45, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3) #9
  %46 = ptrtoint i8* %44 to i64
  %47 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %38, align 8
  %48 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %47, i64 %37
  %49 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %50 = load %"class.base::Thread"*, %"class.base::Thread"** %49, align 8
  %51 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %46, i64* %51, align 8
  %52 = icmp eq %"class.base::Thread"* %50, null
  br i1 %52, label %58, label %53

53:                                               ; preds = %42
  %54 = bitcast %"class.base::Thread"* %50 to void (%"class.base::Thread"*)***
  %55 = load void (%"class.base::Thread"*)**, void (%"class.base::Thread"*)*** %54, align 8
  %56 = getelementptr inbounds void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %55, i64 3
  %57 = load void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %56, align 8
  call void %57(%"class.base::Thread"* nonnull %50) #9
  br label %58

58:                                               ; preds = %53, %42
  %59 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %60 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %59, i64 0, i32 1, i32 0
  %61 = load i8, i8* %60, align 1
  %62 = icmp slt i8 %61, 0
  br i1 %62, label %63, label %66

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  call void @_ZdlPv(i8* %65) #10
  br label %66

66:                                               ; preds = %58, %63
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %43) #9
  %67 = bitcast %"struct.base::Thread::Options"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %67) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %67, i8 -86, i64 56, i1 false)
  call void @_ZN4base6Thread7OptionsC1Ev(%"struct.base::Thread::Options"* nonnull %4) #9
  %68 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %38, align 8
  %69 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %68, i64 %37, i32 0, i32 0, i32 0
  %70 = load %"class.base::Thread"*, %"class.base::Thread"** %69, align 8
  %71 = call zeroext i1 @_ZN4base6Thread16StartWithOptionsERKNS0_7OptionsE(%"class.base::Thread"* %70, %"struct.base::Thread::Options"* nonnull dereferenceable(56) %4) #9
  call void @_ZN4base6Thread7OptionsD1Ev(%"struct.base::Thread::Options"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %67) #9
  br label %72

72:                                               ; preds = %35, %66
  %73 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %38, align 8
  %74 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %73, i64 %37, i32 0, i32 0, i32 0
  %75 = load %"class.base::Thread"*, %"class.base::Thread"** %74, align 8
  %76 = getelementptr inbounds %"class.base::Thread", %"class.base::Thread"* %75, i64 0, i32 11, i32 0, i32 0, i32 0
  %77 = load %"class.base::Thread::Delegate"*, %"class.base::Thread::Delegate"** %76, align 8
  %78 = icmp eq %"class.base::Thread::Delegate"* %77, null
  br i1 %78, label %85, label %79

79:                                               ; preds = %72
  %80 = bitcast %"class.base::Thread::Delegate"* %77 to %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)***
  %81 = load %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)**, %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)*** %80, align 8
  %82 = getelementptr inbounds %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)*, %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)** %81, i64 2
  %83 = load %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)*, %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)** %82, align 8
  %84 = call %"class.base::SingleThreadTaskRunner"* %83(%"class.base::Thread::Delegate"* nonnull %77) #9
  br label %85

85:                                               ; preds = %79, %72, %17, %13
  %86 = phi %"class.base::SingleThreadTaskRunner"* [ null, %13 ], [ %15, %17 ], [ %84, %79 ], [ null, %72 ]
  %87 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %6) #9
  ret %"class.base::SingleThreadTaskRunner"* %86
}

declare zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4midi11TaskService13PostBoundTaskEmN4base12OnceCallbackIFvvEEE(%"class.midi::TaskService"*, i64, %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 4
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %6, i64 0, i32 0, i32 0
  %8 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %7) #9
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10, !prof !2

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %6, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %11) #9
  br label %12

12:                                               ; preds = %3, %10
  %13 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, -1
  %16 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %7) #9
  br i1 %15, label %49, label %17

17:                                               ; preds = %12
  %18 = tail call %"class.base::SingleThreadTaskRunner"* @_ZN4midi11TaskService13GetTaskRunnerEm(%"class.midi::TaskService"* %0, i64 %1)
  %19 = bitcast %"class.base::SingleThreadTaskRunner"* %18 to %"class.base::TaskRunner"*
  %20 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #9
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i32 110) #9
  %21 = ptrtoint %"class.midi::TaskService"* %0 to i64
  %22 = call i8* @_Znwm(i64 80) #10, !noalias !3
  %23 = bitcast i8* %22 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %23, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS0_17UnretainedWrapperIS4_EElmS7_EEES6_E7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS0_17UnretainedWrapperIS3_EElmS6_EE7DestroyEPKNS0_13BindStateBaseE) #9, !noalias !3
  %24 = getelementptr inbounds i8, i8* %22, i64 32
  %25 = bitcast i8* %24 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.midi::TaskService"*, i64, i64, %"class.base::OnceCallback"*)* @_ZN4midi11TaskService7RunTaskElmN4base12OnceCallbackIFvvEEE to i64), i64 0>, <2 x i64>* %25, align 8, !noalias !3
  %26 = getelementptr inbounds i8, i8* %22, i64 48
  %27 = bitcast i8* %26 to i64*
  store i64 %21, i64* %27, align 8, !noalias !3
  %28 = getelementptr inbounds i8, i8* %22, i64 56
  %29 = bitcast i8* %28 to i64*
  store i64 %14, i64* %29, align 8, !noalias !3
  %30 = getelementptr inbounds i8, i8* %22, i64 64
  %31 = bitcast i8* %30 to i64*
  store i64 %1, i64* %31, align 8, !noalias !3
  %32 = getelementptr inbounds i8, i8* %22, i64 72
  %33 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %34 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %35 = load i64, i64* %34, align 8, !noalias !3
  %36 = bitcast i8* %32 to i64*
  store i64 %35, i64* %36, align 8, !noalias !3
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %33, align 8, !noalias !3
  %37 = bitcast %"class.base::OnceCallback"* %5 to i8**
  store i8* %22, i8** %37, align 8, !alias.scope !3
  %38 = call zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"* %19, %"class.base::Location"* nonnull dereferenceable(32) %4, %"class.base::OnceCallback"* nonnull %5) #9
  %39 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %39) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #9
  %40 = icmp eq %"class.base::SingleThreadTaskRunner"* %18, null
  br i1 %40, label %49, label %41

41:                                               ; preds = %17
  %42 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %18, i64 0, i32 0, i32 0, i32 1
  %43 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = atomicrmw sub i32* %43, i32 1 acq_rel
  %45 = icmp eq i32 %44, 1
  br i1 %45, label %46, label %49

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %42, i64 -2
  %48 = bitcast %"class.base::RefCountedThreadSafe"* %47 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %48) #9
  br label %49

49:                                               ; preds = %12, %46, %41, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4midi11TaskService7RunTaskElmN4base12OnceCallbackIFvvEEE(%"class.midi::TaskService"*, i64, i64, %"class.base::OnceCallback"* nocapture) #0 align 2 {
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 7
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %6, i64 0, i32 0, i32 0
  %8 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %7) #9
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10, !prof !2

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %6, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %11) #9
  br label %12

12:                                               ; preds = %4, %10
  %13 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 6
  %14 = load i32, i32* %13, align 8
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %13, align 8
  %16 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %7) #9
  %17 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 4
  %18 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %17, i64 0, i32 0, i32 0
  %19 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %18) #9
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %23, label %21, !prof !2

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %17, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %22) #9
  br label %23

23:                                               ; preds = %12, %21
  %24 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, %1
  %27 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %18) #9
  br i1 %26, label %28, label %39

28:                                               ; preds = %23
  %29 = bitcast %"class.base::OnceCallback"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #9
  %30 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %31 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %32, i64* %33, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %30, align 8
  %34 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  %35 = inttoptr i64 %32 to %"class.base::internal::BindStateBase"*
  %36 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %35, i64 0, i32 1
  %37 = bitcast void ()** %36 to void (%"class.base::internal::BindStateBase"*)**
  %38 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %37, align 8
  tail call void %38(%"class.base::internal::BindStateBase"* %35) #9
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %34) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #9
  br label %39

39:                                               ; preds = %28, %23
  %40 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %7) #9
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %44, label %42, !prof !2

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %6, i64 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %43) #9
  br label %44

44:                                               ; preds = %39, %42
  %45 = load i32, i32* %13, align 8
  %46 = add nsw i32 %45, -1
  store i32 %46, i32* %13, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 5
  call void @_ZN4base17ConditionVariable6SignalEv(%"class.base::ConditionVariable"* %49) #9
  br label %50

50:                                               ; preds = %48, %44
  %51 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %7) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4midi11TaskService20PostBoundDelayedTaskEmN4base12OnceCallbackIFvvEEENS1_9TimeDeltaE(%"class.midi::TaskService"*, i64, %"class.base::OnceCallback"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::Location", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 4
  %8 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %7, i64 0, i32 0, i32 0
  %9 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %8) #9
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11, !prof !2

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %7, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %12) #9
  br label %13

13:                                               ; preds = %4, %11
  %14 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, -1
  %17 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %8) #9
  br i1 %16, label %53, label %18

18:                                               ; preds = %13
  %19 = tail call %"class.base::SingleThreadTaskRunner"* @_ZN4midi11TaskService13GetTaskRunnerEm(%"class.midi::TaskService"* %0, i64 %1)
  %20 = bitcast %"class.base::SingleThreadTaskRunner"* %19 to %"class.base::TaskRunner"*
  %21 = bitcast %"class.base::Location"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #9
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i32 125) #9
  %22 = ptrtoint %"class.midi::TaskService"* %0 to i64
  %23 = call i8* @_Znwm(i64 80) #10, !noalias !8
  %24 = bitcast i8* %23 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %24, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS0_17UnretainedWrapperIS4_EElmS7_EEES6_E7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS0_17UnretainedWrapperIS3_EElmS6_EE7DestroyEPKNS0_13BindStateBaseE) #9, !noalias !8
  %25 = getelementptr inbounds i8, i8* %23, i64 32
  %26 = bitcast i8* %25 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.midi::TaskService"*, i64, i64, %"class.base::OnceCallback"*)* @_ZN4midi11TaskService7RunTaskElmN4base12OnceCallbackIFvvEEE to i64), i64 0>, <2 x i64>* %26, align 8, !noalias !8
  %27 = getelementptr inbounds i8, i8* %23, i64 48
  %28 = bitcast i8* %27 to i64*
  store i64 %22, i64* %28, align 8, !noalias !8
  %29 = getelementptr inbounds i8, i8* %23, i64 56
  %30 = bitcast i8* %29 to i64*
  store i64 %15, i64* %30, align 8, !noalias !8
  %31 = getelementptr inbounds i8, i8* %23, i64 64
  %32 = bitcast i8* %31 to i64*
  store i64 %1, i64* %32, align 8, !noalias !8
  %33 = getelementptr inbounds i8, i8* %23, i64 72
  %34 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %35 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %36 = load i64, i64* %35, align 8, !noalias !8
  %37 = bitcast i8* %33 to i64*
  store i64 %36, i64* %37, align 8, !noalias !8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %34, align 8, !noalias !8
  %38 = bitcast %"class.base::OnceCallback"* %6 to i8**
  store i8* %23, i8** %38, align 8, !alias.scope !8
  %39 = bitcast %"class.base::SingleThreadTaskRunner"* %19 to i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)***
  %40 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*** %39, align 8
  %41 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)** %40, align 8
  %42 = call zeroext i1 %41(%"class.base::TaskRunner"* %20, %"class.base::Location"* nonnull dereferenceable(32) %5, %"class.base::OnceCallback"* nonnull %6, i64 %3) #9
  %43 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %43) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #9
  %44 = icmp eq %"class.base::SingleThreadTaskRunner"* %19, null
  br i1 %44, label %53, label %45

45:                                               ; preds = %18
  %46 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %19, i64 0, i32 0, i32 0, i32 1
  %47 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %46, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = atomicrmw sub i32* %47, i32 1 acq_rel
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %50, label %53

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %46, i64 -2
  %52 = bitcast %"class.base::RefCountedThreadSafe"* %51 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %52) #9
  br label %53

53:                                               ; preds = %13, %50, %45, %18
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4midi11TaskService28OverflowInstanceIdForTestingEv(%"class.midi::TaskService"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 0
  store i64 9223372036854775807, i64* %2, align 8
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN4base6Thread7OptionsC1Ev(%"struct.base::Thread::Options"*) unnamed_addr #1

declare zeroext i1 @_ZN4base6Thread16StartWithOptionsERKNS0_7OptionsE(%"class.base::Thread"*, %"struct.base::Thread::Options"* dereferenceable(56)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base6Thread7OptionsD1Ev(%"struct.base::Thread::Options"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4midi11TaskService22IsInstanceIdStillBoundEl(%"class.midi::TaskService"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %3, i64 0, i32 0, i32 0
  %5 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %4) #9
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !2

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %3, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %8) #9
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.midi::TaskService", %"class.midi::TaskService"* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, %1
  %13 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #9
  ret i1 %12
}

declare void @_ZN4base17ConditionVariable6SignalEv(%"class.base::ConditionVariable"*) local_unnamed_addr #1

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #1

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS0_17UnretainedWrapperIS4_EElmS7_EEES6_E7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %4, i64 1
  %8 = bitcast void (%"class.base::internal::BindStateBase"*)** %7 to i64*
  %9 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %4, i64 2
  %10 = bitcast void (%"class.base::internal::BindStateBase"*)** %9 to i64*
  %11 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %4, i64 3
  %12 = bitcast %"class.base::internal::BindStateBase"* %3 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %15 = bitcast void ()** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  %18 = getelementptr inbounds i8, i8* %6, i64 %16
  %19 = bitcast i8* %18 to %"class.midi::TaskService"*
  %20 = and i64 %13, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %29, label %22

22:                                               ; preds = %1
  %23 = bitcast i8* %18 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = add i64 %13, -1
  %26 = getelementptr i8, i8* %24, i64 %25
  %27 = bitcast i8* %26 to void (%"class.midi::TaskService"*, i64, i64, %"class.base::OnceCallback"*)**
  %28 = load void (%"class.midi::TaskService"*, i64, i64, %"class.base::OnceCallback"*)*, void (%"class.midi::TaskService"*, i64, i64, %"class.base::OnceCallback"*)** %27, align 8
  br label %31

29:                                               ; preds = %1
  %30 = inttoptr i64 %13 to void (%"class.midi::TaskService"*, i64, i64, %"class.base::OnceCallback"*)*
  br label %31

31:                                               ; preds = %22, %29
  %32 = phi void (%"class.midi::TaskService"*, i64, i64, %"class.base::OnceCallback"*)* [ %28, %22 ], [ %30, %29 ]
  %33 = load i64, i64* %8, align 8
  %34 = load i64, i64* %10, align 8
  %35 = bitcast void (%"class.base::internal::BindStateBase"*)** %11 to %"class.base::internal::BindStateBase"**
  %36 = bitcast void (%"class.base::internal::BindStateBase"*)** %11 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %37, i64* %38, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %35, align 8
  call void %32(%"class.midi::TaskService"* %19, i64 %33, i64 %34, %"class.base::OnceCallback"* nonnull %2) #9
  %39 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %39) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS0_17UnretainedWrapperIS3_EElmS6_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 2, i32 1
  %5 = bitcast void ()** %4 to %"class.base::internal::CallbackBase"*
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %5) #9
  %6 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %6) #10
  br label %7

7:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN4base6ThreadENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::unique_ptr"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::unique_ptr"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::unique_ptr"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 %18, i32 0, i32 0, i32 0
  %20 = bitcast %"class.base::Thread"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint %"class.std::__1::unique_ptr"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %217

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to %"class.std::__1::unique_ptr"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"class.std::__1::unique_ptr"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %57, i64 %33
  %59 = ptrtoint %"class.std::__1::unique_ptr"* %58 to i64
  %60 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %57, i64 %56
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %58, i64 %1
  %62 = shl nsw i64 %1, 3
  %63 = add i64 %62, -8
  %64 = lshr exact i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %79, label %68

68:                                               ; preds = %55, %68
  %69 = phi %"class.std::__1::unique_ptr"* [ %73, %68 ], [ %58, %55 ]
  %70 = phi i64 [ %74, %68 ], [ %59, %55 ]
  %71 = phi i64 [ %75, %68 ], [ %66, %55 ]
  %72 = inttoptr i64 %70 to i64*
  store i64 0, i64* %72, align 8
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %69, i64 1
  %74 = ptrtoint %"class.std::__1::unique_ptr"* %73 to i64
  %75 = add i64 %71, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %68, !llvm.loop !13

77:                                               ; preds = %68
  %78 = ptrtoint %"class.std::__1::unique_ptr"* %73 to i64
  br label %79

79:                                               ; preds = %55, %77
  %80 = phi %"class.std::__1::unique_ptr"* [ %58, %55 ], [ %73, %77 ]
  %81 = phi i64 [ %59, %55 ], [ %78, %77 ]
  %82 = icmp ult i64 %63, 56
  br i1 %82, label %104, label %83

83:                                               ; preds = %79, %83
  %84 = phi %"class.std::__1::unique_ptr"* [ %101, %83 ], [ %80, %79 ]
  %85 = phi i64 [ %102, %83 ], [ %81, %79 ]
  %86 = inttoptr i64 %85 to i64*
  store i64 0, i64* %86, align 8
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 1
  %88 = bitcast %"class.std::__1::unique_ptr"* %87 to i64*
  store i64 0, i64* %88, align 8
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 2
  %90 = bitcast %"class.std::__1::unique_ptr"* %89 to i64*
  store i64 0, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 3
  %92 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  store i64 0, i64* %92, align 8
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 4
  %94 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  store i64 0, i64* %94, align 8
  %95 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 5
  %96 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  store i64 0, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 6
  %98 = bitcast %"class.std::__1::unique_ptr"* %97 to i64*
  store i64 0, i64* %98, align 8
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 7
  %100 = bitcast %"class.std::__1::unique_ptr"* %99 to i64*
  store i64 0, i64* %100, align 8
  %101 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 8
  %102 = ptrtoint %"class.std::__1::unique_ptr"* %101 to i64
  %103 = icmp eq %"class.std::__1::unique_ptr"* %61, %101
  br i1 %103, label %104, label %83

104:                                              ; preds = %83, %79
  %105 = ptrtoint %"class.std::__1::unique_ptr"* %60 to i64
  %106 = ptrtoint %"class.std::__1::unique_ptr"* %61 to i64
  %107 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %108 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %107, align 8
  %109 = ptrtoint %"class.std::__1::unique_ptr"* %108 to i64
  %110 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  %111 = icmp eq %"class.std::__1::unique_ptr"* %110, %108
  br i1 %111, label %194, label %112

112:                                              ; preds = %104
  %113 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %110, i64 -1, i32 0, i32 0, i32 0
  %114 = ptrtoint %"class.base::Thread"** %113 to i64
  %115 = sub i64 %114, %109
  %116 = lshr i64 %115, 3
  %117 = add nuw nsw i64 %116, 1
  %118 = and i64 %117, 7
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %132, label %120

120:                                              ; preds = %112, %120
  %121 = phi %"class.std::__1::unique_ptr"* [ %124, %120 ], [ %58, %112 ]
  %122 = phi %"class.std::__1::unique_ptr"* [ %125, %120 ], [ %110, %112 ]
  %123 = phi i64 [ %130, %120 ], [ %118, %112 ]
  %124 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %121, i64 -1
  %125 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %122, i64 -1
  %126 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %125, i64 0, i32 0, i32 0, i32 0
  %127 = bitcast %"class.std::__1::unique_ptr"* %125 to i64*
  %128 = load i64, i64* %127, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %126, align 8
  %129 = bitcast %"class.std::__1::unique_ptr"* %124 to i64*
  store i64 %128, i64* %129, align 8
  %130 = add i64 %123, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %120, !llvm.loop !15

132:                                              ; preds = %120, %112
  %133 = phi %"class.std::__1::unique_ptr"* [ undef, %112 ], [ %124, %120 ]
  %134 = phi %"class.std::__1::unique_ptr"* [ %58, %112 ], [ %124, %120 ]
  %135 = phi %"class.std::__1::unique_ptr"* [ %110, %112 ], [ %125, %120 ]
  %136 = icmp ult i64 %115, 56
  br i1 %136, label %189, label %137

137:                                              ; preds = %132, %137
  %138 = phi %"class.std::__1::unique_ptr"* [ %182, %137 ], [ %134, %132 ]
  %139 = phi %"class.std::__1::unique_ptr"* [ %183, %137 ], [ %135, %132 ]
  %140 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -1
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = bitcast %"class.std::__1::unique_ptr"* %141 to i64*
  %144 = load i64, i64* %143, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %142, align 8
  %145 = bitcast %"class.std::__1::unique_ptr"* %140 to i64*
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -2
  %147 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -2
  %148 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %147, i64 0, i32 0, i32 0, i32 0
  %149 = bitcast %"class.std::__1::unique_ptr"* %147 to i64*
  %150 = load i64, i64* %149, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %148, align 8
  %151 = bitcast %"class.std::__1::unique_ptr"* %146 to i64*
  store i64 %150, i64* %151, align 8
  %152 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -3
  %153 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -3
  %154 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %153, i64 0, i32 0, i32 0, i32 0
  %155 = bitcast %"class.std::__1::unique_ptr"* %153 to i64*
  %156 = load i64, i64* %155, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %154, align 8
  %157 = bitcast %"class.std::__1::unique_ptr"* %152 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -4
  %159 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -4
  %160 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %159, i64 0, i32 0, i32 0, i32 0
  %161 = bitcast %"class.std::__1::unique_ptr"* %159 to i64*
  %162 = load i64, i64* %161, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %160, align 8
  %163 = bitcast %"class.std::__1::unique_ptr"* %158 to i64*
  store i64 %162, i64* %163, align 8
  %164 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -5
  %165 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -5
  %166 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %165, i64 0, i32 0, i32 0, i32 0
  %167 = bitcast %"class.std::__1::unique_ptr"* %165 to i64*
  %168 = load i64, i64* %167, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %166, align 8
  %169 = bitcast %"class.std::__1::unique_ptr"* %164 to i64*
  store i64 %168, i64* %169, align 8
  %170 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -6
  %171 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -6
  %172 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %171, i64 0, i32 0, i32 0, i32 0
  %173 = bitcast %"class.std::__1::unique_ptr"* %171 to i64*
  %174 = load i64, i64* %173, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %172, align 8
  %175 = bitcast %"class.std::__1::unique_ptr"* %170 to i64*
  store i64 %174, i64* %175, align 8
  %176 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -7
  %177 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -7
  %178 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %177, i64 0, i32 0, i32 0, i32 0
  %179 = bitcast %"class.std::__1::unique_ptr"* %177 to i64*
  %180 = load i64, i64* %179, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %178, align 8
  %181 = bitcast %"class.std::__1::unique_ptr"* %176 to i64*
  store i64 %180, i64* %181, align 8
  %182 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -8
  %183 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -8
  %184 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %183, i64 0, i32 0, i32 0, i32 0
  %185 = bitcast %"class.std::__1::unique_ptr"* %183 to i64*
  %186 = load i64, i64* %185, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %184, align 8
  %187 = bitcast %"class.std::__1::unique_ptr"* %182 to i64*
  store i64 %186, i64* %187, align 8
  %188 = icmp eq %"class.std::__1::unique_ptr"* %183, %108
  br i1 %188, label %189, label %137

189:                                              ; preds = %137, %132
  %190 = phi %"class.std::__1::unique_ptr"* [ %133, %132 ], [ %182, %137 ]
  %191 = ptrtoint %"class.std::__1::unique_ptr"* %190 to i64
  %192 = load i64, i64* %30, align 8
  %193 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  br label %194

194:                                              ; preds = %104, %189
  %195 = phi %"class.std::__1::unique_ptr"* [ %193, %189 ], [ %108, %104 ]
  %196 = phi i64 [ %191, %189 ], [ %59, %104 ]
  %197 = phi i64 [ %192, %189 ], [ %109, %104 ]
  store i64 %196, i64* %30, align 8
  store i64 %106, i64* %7, align 8
  store i64 %105, i64* %4, align 8
  %198 = inttoptr i64 %197 to %"class.std::__1::unique_ptr"*
  %199 = icmp eq %"class.std::__1::unique_ptr"* %195, %198
  br i1 %199, label %213, label %200

200:                                              ; preds = %194, %211
  %201 = phi %"class.std::__1::unique_ptr"* [ %202, %211 ], [ %195, %194 ]
  %202 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %201, i64 -1
  %203 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %202, i64 0, i32 0, i32 0, i32 0
  %204 = load %"class.base::Thread"*, %"class.base::Thread"** %203, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %203, align 8
  %205 = icmp eq %"class.base::Thread"* %204, null
  br i1 %205, label %211, label %206

206:                                              ; preds = %200
  %207 = bitcast %"class.base::Thread"* %204 to void (%"class.base::Thread"*)***
  %208 = load void (%"class.base::Thread"*)**, void (%"class.base::Thread"*)*** %207, align 8
  %209 = getelementptr inbounds void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %208, i64 3
  %210 = load void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %209, align 8
  tail call void %210(%"class.base::Thread"* nonnull %204) #9
  br label %211

211:                                              ; preds = %206, %200
  %212 = icmp eq %"class.std::__1::unique_ptr"* %202, %198
  br i1 %212, label %213, label %200

213:                                              ; preds = %211, %194
  %214 = icmp eq i64 %197, 0
  br i1 %214, label %217, label %215

215:                                              ; preds = %213
  %216 = inttoptr i64 %197 to i8*
  tail call void @_ZdlPv(i8* %216) #10
  br label %217

217:                                              ; preds = %215, %213, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

declare void @_ZN4base6ThreadC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::Thread"*, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN4midi11TaskServiceEFvlmNS2_IFvvEEEEJNS0_17UnretainedWrapperIS4_EERlRmS6_EEEDcOT0_DpOT1_: argument 0"}
!5 = distinct !{!5, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN4midi11TaskServiceEFvlmNS2_IFvvEEEEJNS0_17UnretainedWrapperIS4_EERlRmS6_EEEDcOT0_DpOT1_"}
!6 = distinct !{!6, !7, !"_ZN4base8BindOnceIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS_8internal17UnretainedWrapperIS2_EERlRmS5_EEENS3_INS8_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSE_DpOSF_: argument 0"}
!7 = distinct !{!7, !"_ZN4base8BindOnceIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS_8internal17UnretainedWrapperIS2_EERlRmS5_EEENS3_INS8_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSE_DpOSF_"}
!8 = !{!9, !11}
!9 = distinct !{!9, !10, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN4midi11TaskServiceEFvlmNS2_IFvvEEEEJNS0_17UnretainedWrapperIS4_EERlRmS6_EEEDcOT0_DpOT1_: argument 0"}
!10 = distinct !{!10, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN4midi11TaskServiceEFvlmNS2_IFvvEEEEJNS0_17UnretainedWrapperIS4_EERlRmS6_EEEDcOT0_DpOT1_"}
!11 = distinct !{!11, !12, !"_ZN4base8BindOnceIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS_8internal17UnretainedWrapperIS2_EERlRmS5_EEENS3_INS8_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSE_DpOSF_: argument 0"}
!12 = distinct !{!12, !"_ZN4base8BindOnceIMN4midi11TaskServiceEFvlmNS_12OnceCallbackIFvvEEEEJNS_8internal17UnretainedWrapperIS2_EERlRmS5_EEENS3_INS8_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSE_DpOSF_"}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !14}
