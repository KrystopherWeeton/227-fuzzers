; ModuleID = '../../base/posix/file_descriptor_shuffle.cc'
source_filename = "../../base/posix/file_descriptor_shuffle.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.base::InjectionArc"*, %"struct.base::InjectionArc"*, %"class.std::__1::__compressed_pair" }
%"struct.base::InjectionArc" = type <{ i32, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.base::InjectionArc"* }
%"class.base::InjectionDelegate" = type { i32 (...)** }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.base::FileDescriptorTableInjection" = type { %"class.base::InjectionDelegate" }

$_ZN4base17InjectionDelegateD2Ev = comdat any

$_ZN4base28FileDescriptorTableInjectionD0Ev = comdat any

@.str = private unnamed_addr constant [84 x i8] c"PerformInjectiveMultimapDestructive overflowed extra_fds. Leaking file descriptors!\00", align 1
@_ZTVN4base28FileDescriptorTableInjectionE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.base::FileDescriptorTableInjection"*, i32*, i32)* @_ZN4base28FileDescriptorTableInjection9DuplicateEPii to i8*), i8* bitcast (i1 (%"class.base::FileDescriptorTableInjection"*, i32, i32)* @_ZN4base28FileDescriptorTableInjection4MoveEii to i8*), i8* bitcast (void (%"class.base::FileDescriptorTableInjection"*, i32)* @_ZN4base28FileDescriptorTableInjection5CloseEi to i8*), i8* bitcast (void (%"class.base::InjectionDelegate"*)* @_ZN4base17InjectionDelegateD2Ev to i8*), i8* bitcast (void (%"class.base::FileDescriptorTableInjection"*)* @_ZN4base28FileDescriptorTableInjectionD0Ev to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base35PerformInjectiveMultimapDestructiveEPNSt3__16vectorINS_12InjectionArcENS0_9allocatorIS2_EEEEPNS_17InjectionDelegateE(%"class.std::__1::vector"* nocapture readonly, %"class.base::InjectionDelegate"*) local_unnamed_addr #0 {
  %3 = alloca [16 x i32], align 16
  %4 = alloca i32, align 4
  %5 = bitcast [16 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 64, i1 false)
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.base::InjectionArc"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %0 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %8, %10
  br i1 %11, label %134, label %12

12:                                               ; preds = %2
  %13 = bitcast i32* %4 to i8*
  %14 = bitcast %"class.base::InjectionDelegate"* %1 to i1 (%"class.base::InjectionDelegate"*, i32*, i32)***
  %15 = bitcast %"class.base::InjectionDelegate"* %1 to i1 (%"class.base::InjectionDelegate"*, i32, i32)***
  %16 = bitcast %"class.base::InjectionDelegate"* %1 to void (%"class.base::InjectionDelegate"*, i32)***
  br label %29

17:                                               ; preds = %101
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #9
  br label %18

18:                                               ; preds = %17, %121
  %19 = phi i64 [ %102, %17 ], [ %123, %121 ]
  %20 = phi i64 [ %103, %17 ], [ %122, %121 ]
  %21 = sub i64 %20, %19
  %22 = sdiv exact i64 %21, 12
  %23 = icmp ult i64 %35, %22
  br i1 %23, label %29, label %24

24:                                               ; preds = %18
  %25 = icmp eq i32 %104, 0
  br i1 %25, label %134, label %26

26:                                               ; preds = %24
  %27 = bitcast %"class.base::InjectionDelegate"* %1 to void (%"class.base::InjectionDelegate"*, i32)***
  %28 = zext i32 %104 to i64
  br label %124

29:                                               ; preds = %12, %18
  %30 = phi i64 [ %10, %12 ], [ %19, %18 ]
  %31 = phi i64 [ %8, %12 ], [ %20, %18 ]
  %32 = phi i64 [ 0, %12 ], [ %35, %18 ]
  %33 = phi i32 [ 0, %12 ], [ %104, %18 ]
  %34 = inttoptr i64 %30 to %"struct.base::InjectionArc"*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #9
  store i32 -1, i32* %4, align 4
  %35 = add nuw i64 %32, 1
  %36 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %34, i64 %32, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %34, i64 %32, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %37, %39
  %41 = sub i64 %31, %30
  %42 = sdiv exact i64 %41, 12
  %43 = icmp ult i64 %35, %42
  br i1 %43, label %44, label %101

44:                                               ; preds = %29
  %45 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %34, i64 %32, i32 2
  br label %46

46:                                               ; preds = %44, %93
  %47 = phi %"struct.base::InjectionArc"* [ %34, %44 ], [ %100, %93 ]
  %48 = phi i64 [ %35, %44 ], [ %94, %93 ]
  %49 = phi i32 [ %33, %44 ], [ %78, %93 ]
  %50 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %47, i64 %48
  br i1 %40, label %77, label %51

51:                                               ; preds = %46
  %52 = load i32, i32* %38, align 4
  %53 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %50, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %52, %54
  br i1 %55, label %56, label %77

56:                                               ; preds = %51
  %57 = load i32, i32* %4, align 4
  %58 = icmp eq i32 %57, -1
  br i1 %58, label %59, label %73

59:                                               ; preds = %56
  %60 = load i1 (%"class.base::InjectionDelegate"*, i32*, i32)**, i1 (%"class.base::InjectionDelegate"*, i32*, i32)*** %14, align 8
  %61 = load i1 (%"class.base::InjectionDelegate"*, i32*, i32)*, i1 (%"class.base::InjectionDelegate"*, i32*, i32)** %60, align 8
  %62 = call zeroext i1 %61(%"class.base::InjectionDelegate"* %1, i32* nonnull %4, i32 %52) #9
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #9
  br label %134

64:                                               ; preds = %59
  %65 = icmp ult i32 %49, 16
  br i1 %65, label %66, label %71

66:                                               ; preds = %64
  %67 = zext i32 %49 to i64
  %68 = load i32, i32* %4, align 4
  %69 = add nuw nsw i32 %49, 1
  %70 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 %67
  store i32 %68, i32* %70, align 4
  br label %73

71:                                               ; preds = %64
  call void @_ZN7logging6RawLogEiPKc(i32 2, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str, i64 0, i64 0)) #9
  %72 = load i32, i32* %4, align 4
  br label %73

73:                                               ; preds = %66, %71, %56
  %74 = phi i32 [ %68, %66 ], [ %72, %71 ], [ %57, %56 ]
  %75 = phi i32 [ %69, %66 ], [ %49, %71 ], [ %49, %56 ]
  store i32 %74, i32* %53, align 4
  %76 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %47, i64 %48, i32 2
  store i8 0, i8* %76, align 4
  br label %77

77:                                               ; preds = %73, %51, %46
  %78 = phi i32 [ %49, %46 ], [ %75, %73 ], [ %49, %51 ]
  %79 = load i8, i8* %45, align 4, !range !2
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %93, label %81

81:                                               ; preds = %77
  %82 = load i32, i32* %36, align 4
  %83 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %47, i64 %48, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %82, %84
  br i1 %85, label %86, label %87

86:                                               ; preds = %81
  store i8 0, i8* %45, align 4
  br label %93

87:                                               ; preds = %81
  %88 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %50, i64 0, i32 0
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %82, %89
  br i1 %90, label %91, label %93

91:                                               ; preds = %87
  store i8 0, i8* %45, align 4
  %92 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %47, i64 %48, i32 2
  store i8 1, i8* %92, align 4
  br label %93

93:                                               ; preds = %86, %77, %91, %87
  %94 = add nuw i64 %48, 1
  %95 = load i64, i64* %7, align 8
  %96 = load i64, i64* %9, align 8
  %97 = sub i64 %95, %96
  %98 = sdiv exact i64 %97, 12
  %99 = icmp ult i64 %94, %98
  %100 = inttoptr i64 %96 to %"struct.base::InjectionArc"*
  br i1 %99, label %46, label %101

101:                                              ; preds = %93, %29
  %102 = phi i64 [ %30, %29 ], [ %96, %93 ]
  %103 = phi i64 [ %31, %29 ], [ %95, %93 ]
  %104 = phi i32 [ %33, %29 ], [ %78, %93 ]
  br i1 %40, label %17, label %105

105:                                              ; preds = %101
  %106 = load i32, i32* %36, align 4
  %107 = load i32, i32* %38, align 4
  %108 = load i1 (%"class.base::InjectionDelegate"*, i32, i32)**, i1 (%"class.base::InjectionDelegate"*, i32, i32)*** %15, align 8
  %109 = getelementptr inbounds i1 (%"class.base::InjectionDelegate"*, i32, i32)*, i1 (%"class.base::InjectionDelegate"*, i32, i32)** %108, i64 1
  %110 = load i1 (%"class.base::InjectionDelegate"*, i32, i32)*, i1 (%"class.base::InjectionDelegate"*, i32, i32)** %109, align 8
  %111 = call zeroext i1 %110(%"class.base::InjectionDelegate"* %1, i32 %106, i32 %107) #9
  br i1 %111, label %112, label %133

112:                                              ; preds = %105
  %113 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %34, i64 %32, i32 2
  %114 = load i8, i8* %113, align 4, !range !2
  %115 = icmp eq i8 %114, 0
  br i1 %115, label %121, label %116

116:                                              ; preds = %112
  %117 = load i32, i32* %36, align 4
  %118 = load void (%"class.base::InjectionDelegate"*, i32)**, void (%"class.base::InjectionDelegate"*, i32)*** %16, align 8
  %119 = getelementptr inbounds void (%"class.base::InjectionDelegate"*, i32)*, void (%"class.base::InjectionDelegate"*, i32)** %118, i64 2
  %120 = load void (%"class.base::InjectionDelegate"*, i32)*, void (%"class.base::InjectionDelegate"*, i32)** %119, align 8
  call void %120(%"class.base::InjectionDelegate"* %1, i32 %117) #9
  br label %121

121:                                              ; preds = %116, %112
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #9
  %122 = load i64, i64* %7, align 8
  %123 = load i64, i64* %9, align 8
  br label %18

124:                                              ; preds = %124, %26
  %125 = phi i64 [ 0, %26 ], [ %131, %124 ]
  %126 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = load void (%"class.base::InjectionDelegate"*, i32)**, void (%"class.base::InjectionDelegate"*, i32)*** %27, align 8
  %129 = getelementptr inbounds void (%"class.base::InjectionDelegate"*, i32)*, void (%"class.base::InjectionDelegate"*, i32)** %128, i64 2
  %130 = load void (%"class.base::InjectionDelegate"*, i32)*, void (%"class.base::InjectionDelegate"*, i32)** %129, align 8
  call void %130(%"class.base::InjectionDelegate"* %1, i32 %127) #9
  %131 = add nuw nsw i64 %125, 1
  %132 = icmp eq i64 %131, %28
  br i1 %132, label %134, label %124

133:                                              ; preds = %105
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #9
  br label %134

134:                                              ; preds = %124, %2, %24, %133, %63
  %135 = phi i1 [ false, %63 ], [ false, %133 ], [ true, %24 ], [ true, %2 ], [ true, %124 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #9
  ret i1 %135
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN7logging6RawLogEiPKc(i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base24PerformInjectiveMultimapERKNSt3__16vectorINS_12InjectionArcENS0_9allocatorIS2_EEEEPNS_17InjectionDelegateE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.base::InjectionDelegate"*) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #9
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #9
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %9 = bitcast %"struct.base::InjectionArc"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 12
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %36, label %16

16:                                               ; preds = %2
  %17 = icmp ugt i64 %14, 1537228672809129301
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %19) #10
  unreachable

20:                                               ; preds = %16
  %21 = tail call i8* @_Znwm(i64 %13) #11
  %22 = bitcast i8* %21 to %"struct.base::InjectionArc"*
  %23 = bitcast %"struct.base::InjectionArc"** %6 to i8**
  store i8* %21, i8** %23, align 8
  %24 = bitcast %"class.std::__1::vector"* %3 to i8**
  store i8* %21, i8** %24, align 8
  %25 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %22, i64 %14
  store %"struct.base::InjectionArc"* %25, %"struct.base::InjectionArc"** %7, align 8
  %26 = bitcast %"struct.base::InjectionArc"** %6 to i64*
  %27 = ptrtoint i8* %21 to i64
  %28 = icmp sgt i64 %13, 0
  br i1 %28, label %29, label %34

29:                                               ; preds = %20
  %30 = udiv exact i64 %13, 12
  %31 = inttoptr i64 %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %21, i8* align 4 %31, i64 %13, i1 false) #9
  %32 = getelementptr inbounds %"struct.base::InjectionArc", %"struct.base::InjectionArc"* %22, i64 %30
  %33 = ptrtoint %"struct.base::InjectionArc"* %32 to i64
  br label %34

34:                                               ; preds = %29, %20
  %35 = phi i64 [ %33, %29 ], [ %27, %20 ]
  store i64 %35, i64* %26, align 8
  br label %36

36:                                               ; preds = %2, %34
  %37 = call zeroext i1 @_ZN4base35PerformInjectiveMultimapDestructiveEPNSt3__16vectorINS_12InjectionArcENS0_9allocatorIS2_EEEEPNS_17InjectionDelegateE(%"class.std::__1::vector"* nonnull %3, %"class.base::InjectionDelegate"* %1)
  %38 = load %"struct.base::InjectionArc"*, %"struct.base::InjectionArc"** %5, align 8
  %39 = icmp eq %"struct.base::InjectionArc"* %38, null
  br i1 %39, label %44, label %40

40:                                               ; preds = %36
  %41 = ptrtoint %"struct.base::InjectionArc"* %38 to i64
  %42 = bitcast %"struct.base::InjectionArc"** %6 to i64*
  store i64 %41, i64* %42, align 8
  %43 = bitcast %"struct.base::InjectionArc"* %38 to i8*
  tail call void @_ZdlPv(i8* %43) #11
  br label %44

44:                                               ; preds = %36, %40
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #9
  ret i1 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base28FileDescriptorTableInjection9DuplicateEPii(%"class.base::FileDescriptorTableInjection"* nocapture readnone, i32* nocapture, i32) unnamed_addr #0 align 2 {
  br label %4

4:                                                ; preds = %7, %3
  %5 = tail call i32 @dup(i32 %2) #9
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %7, label %11

7:                                                ; preds = %4
  %8 = tail call i32* @__errno_location() #12
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 4
  br i1 %10, label %4, label %11

11:                                               ; preds = %4, %7
  store i32 %5, i32* %1, align 4
  %12 = icmp sgt i32 %5, -1
  ret i1 %12
}

; Function Attrs: nounwind
declare i32 @dup(i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base28FileDescriptorTableInjection4MoveEii(%"class.base::FileDescriptorTableInjection"* nocapture readnone, i32, i32) unnamed_addr #0 align 2 {
  br label %4

4:                                                ; preds = %7, %3
  %5 = tail call i32 @dup2(i32 %1, i32 %2) #9
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %7, label %11

7:                                                ; preds = %4
  %8 = tail call i32* @__errno_location() #12
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 4
  br i1 %10, label %4, label %11

11:                                               ; preds = %4, %7
  %12 = icmp ne i32 %5, -1
  ret i1 %12
}

; Function Attrs: nounwind
declare i32 @dup2(i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base28FileDescriptorTableInjection5CloseEi(%"class.base::FileDescriptorTableInjection"* nocapture readnone, i32) unnamed_addr #0 align 2 {
  %3 = tail call i32 @close(i32 %1) #9
  ret void
}

declare i32 @close(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base17InjectionDelegateD2Ev(%"class.base::InjectionDelegate"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base28FileDescriptorTableInjectionD0Ev(%"class.base::FileDescriptorTableInjection"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"class.base::FileDescriptorTableInjection"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
