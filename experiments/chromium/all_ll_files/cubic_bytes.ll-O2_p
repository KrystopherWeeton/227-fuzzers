; ModuleID = '../../net/third_party/quiche/src/quic/core/congestion_control/cubic_bytes.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/congestion_control/cubic_bytes.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.quic::CubicBytes" = type { %"class.quic::QuicClock"*, i32, %"class.quic::QuicTime", i64, i64, i64, i64, i32, i64 }
%"class.quic::QuicTime" = type { i64 }
%"class.quic::QuicClock" = type { i32 (...)**, i8, %"class.quic::QuicTime::Delta" }
%"class.quic::QuicTime::Delta" = type { i64 }

@_ZN4quic10CubicBytesC1EPKNS_9QuicClockE = hidden unnamed_addr alias void (%"class.quic::CubicBytes"*, %"class.quic::QuicClock"*), void (%"class.quic::CubicBytes"*, %"class.quic::QuicClock"*)* @_ZN4quic10CubicBytesC2EPKNS_9QuicClockE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic10CubicBytesC2EPKNS_9QuicClockE(%"class.quic::CubicBytes"* nocapture, %"class.quic::QuicClock"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 0
  store %"class.quic::QuicClock"* %1, %"class.quic::QuicClock"** %3, align 8
  %4 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 1
  store i32 2, i32* %4, align 8
  %5 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 2, i32 0
  %6 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 8
  store i64 0, i64* %6, align 8
  %7 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 44, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN4quic10CubicBytes15ResetCubicStateEv(%"class.quic::CubicBytes"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 2, i32 0
  %3 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 8
  store i64 0, i64* %3, align 8
  %4 = bitcast i64* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 44, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic10CubicBytes17SetNumConnectionsEi(%"class.quic::CubicBytes"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 1
  store i32 %1, i32* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK4quic10CubicBytes5AlphaEv(%"class.quic::CubicBytes"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = add nsw i32 %3, -1
  %5 = sitofp i32 %4 to float
  %6 = fadd float %5, 0x3FE6666660000000
  %7 = sitofp i32 %3 to float
  %8 = fdiv float %6, %7
  %9 = mul nsw i32 %3, 3
  %10 = mul nsw i32 %9, %3
  %11 = sitofp i32 %10 to float
  %12 = fsub float 1.000000e+00, %8
  %13 = fmul float %12, %11
  %14 = fadd float %8, 1.000000e+00
  %15 = fdiv float %13, %14
  ret float %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK4quic10CubicBytes4BetaEv(%"class.quic::CubicBytes"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = add nsw i32 %3, -1
  %5 = sitofp i32 %4 to float
  %6 = fadd float %5, 0x3FE6666660000000
  %7 = sitofp i32 %3 to float
  %8 = fdiv float %6, %7
  ret float %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK4quic10CubicBytes11BetaLastMaxEv(%"class.quic::CubicBytes"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = add nsw i32 %3, -1
  %5 = sitofp i32 %4 to float
  %6 = fadd float %5, 0x3FEB333340000000
  %7 = sitofp i32 %3 to float
  %8 = fdiv float %6, %7
  ret float %8
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN4quic10CubicBytes20OnApplicationLimitedEv(%"class.quic::CubicBytes"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 2, i32 0
  store i64 0, i64* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4quic10CubicBytes31CongestionWindowAfterPacketLossEm(%"class.quic::CubicBytes"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = add i64 %1, 1460
  %4 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %3, %5
  %7 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  br i1 %6, label %14, label %9

9:                                                ; preds = %2
  %10 = uitofp i64 %1 to float
  %11 = add nsw i32 %8, -1
  %12 = sitofp i32 %11 to float
  %13 = sitofp i32 %8 to float
  br label %24

14:                                               ; preds = %2
  %15 = add nsw i32 %8, -1
  %16 = sitofp i32 %15 to float
  %17 = fadd float %16, 0x3FEB333340000000
  %18 = sitofp i32 %8 to float
  %19 = fdiv float %17, %18
  %20 = uitofp i64 %1 to float
  %21 = fmul float %19, %20
  %22 = fptosi float %21 to i32
  %23 = sext i32 %22 to i64
  br label %24

24:                                               ; preds = %9, %14
  %25 = phi float [ %13, %9 ], [ %18, %14 ]
  %26 = phi float [ %12, %9 ], [ %16, %14 ]
  %27 = phi float [ %10, %9 ], [ %20, %14 ]
  %28 = phi i64 [ %1, %9 ], [ %23, %14 ]
  store i64 %28, i64* %4, align 8
  %29 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 2, i32 0
  store i64 0, i64* %29, align 8
  %30 = fadd float %26, 0x3FE6666660000000
  %31 = fdiv float %30, %25
  %32 = fmul float %31, %27
  %33 = fptosi float %32 to i32
  %34 = sext i32 %33 to i64
  ret i64 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4quic10CubicBytes24CongestionWindowAfterAckEmmNS_8QuicTime5DeltaES1_(%"class.quic::CubicBytes"* nocapture, i64, i64, i64, i64) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, %1
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 2, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %19, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 7
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 6
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 5
  %18 = load i64, i64* %17, align 8
  br label %35

19:                                               ; preds = %5
  store i64 %4, i64* %9, align 8
  store i64 %1, i64* %6, align 8
  %20 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 5
  store i64 %2, i64* %20, align 8
  %21 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = icmp ugt i64 %22, %2
  br i1 %23, label %27, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 7
  store i32 0, i32* %25, align 8
  %26 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 6
  store i64 %2, i64* %26, align 8
  br label %35

27:                                               ; preds = %19
  %28 = sub i64 %22, %2
  %29 = mul i64 %28, 1836805
  %30 = uitofp i64 %29 to double
  %31 = tail call double @cbrt(double %30) #6
  %32 = fptoui double %31 to i32
  %33 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 7
  store i32 %32, i32* %33, align 8
  %34 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 6
  store i64 %22, i64* %34, align 8
  br label %35

35:                                               ; preds = %12, %24, %27
  %36 = phi i64 [ %18, %12 ], [ %2, %24 ], [ %2, %27 ]
  %37 = phi i64 [ %8, %12 ], [ %1, %24 ], [ %1, %27 ]
  %38 = phi i64 [ %16, %12 ], [ %2, %24 ], [ %22, %27 ]
  %39 = phi i32 [ %14, %12 ], [ 0, %24 ], [ %32, %27 ]
  %40 = phi i64 [ %10, %12 ], [ %4, %24 ], [ %4, %27 ]
  %41 = add nsw i64 %4, %3
  %42 = sub i64 %41, %40
  %43 = shl i64 %42, 10
  %44 = udiv i64 %43, 1000000
  %45 = zext i32 %39 to i64
  %46 = sub nsw i64 %45, %44
  %47 = sub nsw i64 0, %46
  %48 = icmp slt i64 %46, 0
  %49 = select i1 %48, i64 %47, i64 %46
  %50 = mul i64 %49, 598600
  %51 = mul i64 %50, %49
  %52 = mul i64 %51, %49
  %53 = lshr i64 %52, 40
  %54 = icmp ugt i64 %44, %45
  %55 = sub nsw i64 0, %53
  %56 = select i1 %54, i64 %53, i64 %55
  %57 = add i64 %56, %38
  %58 = lshr i64 %37, 1
  %59 = add i64 %58, %2
  %60 = icmp ult i64 %59, %57
  %61 = select i1 %60, i64 %59, i64 %57
  %62 = uitofp i64 %37 to float
  %63 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = add nsw i32 %64, -1
  %66 = sitofp i32 %65 to float
  %67 = fadd float %66, 0x3FE6666660000000
  %68 = sitofp i32 %64 to float
  %69 = fdiv float %67, %68
  %70 = mul nsw i32 %64, 3
  %71 = mul nsw i32 %70, %64
  %72 = sitofp i32 %71 to float
  %73 = fsub float 1.000000e+00, %69
  %74 = fmul float %73, %72
  %75 = fadd float %69, 1.000000e+00
  %76 = fdiv float %74, %75
  %77 = fmul float %76, 1.460000e+03
  %78 = fmul float %77, %62
  %79 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 5
  %80 = uitofp i64 %36 to float
  %81 = fdiv float %78, %80
  %82 = fadd float %81, %80
  %83 = fptoui float %82 to i64
  store i64 %83, i64* %79, align 8
  store i64 0, i64* %6, align 8
  %84 = getelementptr inbounds %"class.quic::CubicBytes", %"class.quic::CubicBytes"* %0, i64 0, i32 8
  store i64 %61, i64* %84, align 8
  %85 = icmp ult i64 %61, %83
  %86 = select i1 %85, i64 %83, i64 %61
  ret i64 %86
}

; Function Attrs: nofree nounwind readnone
declare double @cbrt(double) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
