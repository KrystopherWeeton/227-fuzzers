; ModuleID = '../../third_party/blink/renderer/core/html/parser/text_resource_decoder.cc'
source_filename = "../../third_party/blink/renderer/core/html/parser/text_resource_decoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::TextResourceDecoder" = type { %"class.blink::TextResourceDecoderOptions", %"class.WTF::TextEncoding", %"class.std::__1::unique_ptr.2", i32, %"class.WTF::Vector", i8, i8, i8, i8, i8, i8, %"class.std::__1::unique_ptr.8" }
%"class.blink::TextResourceDecoderOptions" = type <{ i32, i32, %"class.WTF::TextEncoding", i8, i8, [6 x i8], i8*, %"class.blink::KURL", [3 x i8], [5 x i8] }>
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.WTF::TextEncoding" = type { i8* }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.WTF::TextCodec"* }
%"class.WTF::TextCodec" = type { i32 (...)** }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.blink::HTMLMetaCharsetParser"* }
%"class.blink::HTMLMetaCharsetParser" = type { %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.2", %"class.blink::SegmentedString", %"class.blink::HTMLToken", i8, i8, %"class.WTF::TextEncoding" }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.blink::HTMLTokenizer"* }
%"class.blink::HTMLTokenizer" = type opaque
%"class.blink::SegmentedString" = type <{ %"class.blink::SegmentedSubstring", i32, i32, i32, [4 x i8], %"class.WTF::Deque", i8, i8, [6 x i8] }>
%"class.blink::SegmentedSubstring" = type { %union.anon, i8*, i8*, i8, i8, %"class.WTF::String" }
%union.anon = type { i8* }
%"class.WTF::Deque" = type { %"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.19" }
%"class.WTF::VectorBuffer.19" = type { %"class.WTF::VectorBufferBase.20" }
%"class.WTF::VectorBufferBase.20" = type { %"class.blink::SegmentedSubstring"*, i32, i32 }
%"class.blink::HTMLToken" = type { i32, %"class.blink::HTMLToken::Attribute::Range", i32, %class.LiteralBuffer, i16, i8, %"class.WTF::Vector.21", %"class.blink::HTMLToken::Attribute"*, %"class.std::__1::unique_ptr.27" }
%"class.blink::HTMLToken::Attribute::Range" = type { i32, i32 }
%class.LiteralBuffer = type { i16*, i16*, i16*, [256 x i16] }
%"class.WTF::Vector.21" = type { %"class.WTF::VectorBuffer.22" }
%"class.WTF::VectorBuffer.22" = type { %"class.WTF::VectorBufferBase.23", [1920 x i8] }
%"class.WTF::VectorBufferBase.23" = type { %"class.blink::HTMLToken::Attribute"*, i32, i32 }
%"class.blink::HTMLToken::Attribute" = type { %class.LiteralBuffer.24, %class.LiteralBuffer.24, %"class.blink::HTMLToken::Attribute::Range", %"class.blink::HTMLToken::Attribute::Range" }
%class.LiteralBuffer.24 = type { i16*, i16*, i16*, [32 x i16] }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.blink::DoctypeData"* }
%"class.blink::DoctypeData" = type <{ i8, i8, [6 x i8], %"class.WTF::Vector.30", %"class.WTF::Vector.30", i8, [7 x i8] }>
%"class.WTF::Vector.30" = type { %"class.WTF::VectorBuffer.31" }
%"class.WTF::VectorBuffer.31" = type { %"class.WTF::VectorBufferBase.32" }
%"class.WTF::VectorBufferBase.32" = type { i16*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.51 }
%union.anon.51 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::Vector.41" = type { %"class.WTF::VectorBuffer.42" }
%"class.WTF::VectorBuffer.42" = type { %"class.WTF::VectorBufferBase", [64 x i8] }

$_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j = comdat any

$_ZN3WTF22EqualIgnoringASCIICaseILm15EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm = comdat any

$_ZN3WTF6VectorIcLj64ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF12VectorBufferIcLj64ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPc = comdat any

@.str = private unnamed_addr constant [15 x i8] c"x-user-defined\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"windows-1252\00", align 1
@_ZN3WTF14g_empty_stringE = external local_unnamed_addr constant %"class.WTF::String"*, align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.5 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"new_size >= size_\00", align 1
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16

@_ZN5blink19TextResourceDecoderC1ERKNS_26TextResourceDecoderOptionsE = hidden unnamed_addr alias void (%"class.blink::TextResourceDecoder"*, %"class.blink::TextResourceDecoderOptions"*), void (%"class.blink::TextResourceDecoder"*, %"class.blink::TextResourceDecoderOptions"*)* @_ZN5blink19TextResourceDecoderC2ERKNS_26TextResourceDecoderOptionsE
@_ZN5blink19TextResourceDecoderD1Ev = hidden unnamed_addr alias void (%"class.blink::TextResourceDecoder"*), void (%"class.blink::TextResourceDecoder"*)* @_ZN5blink19TextResourceDecoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN5blink19TextResourceDecoder15DefaultEncodingENS_26TextResourceDecoderOptions11ContentTypeERKN3WTF12TextEncodingE(i32, %"class.WTF::TextEncoding"* readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = or i32 %0, 1
  %4 = icmp eq i32 %3, 3
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = tail call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF12UTF8EncodingEv() #10
  br label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %1, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = tail call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF14Latin1EncodingEv() #10
  br label %13

13:                                               ; preds = %7, %11, %5
  %14 = phi %"class.WTF::TextEncoding"* [ %6, %5 ], [ %12, %11 ], [ %1, %7 ]
  ret %"class.WTF::TextEncoding"* %14
}

declare dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF12UTF8EncodingEv() local_unnamed_addr #1

declare dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF14Latin1EncodingEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19TextResourceDecoderC2ERKNS_26TextResourceDecoderOptionsE(%"class.blink::TextResourceDecoder"*, %"class.blink::TextResourceDecoderOptions"* dereferenceable(152)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::TextResourceDecoder"* %0 to i8*
  %4 = bitcast %"class.blink::TextResourceDecoderOptions"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 32, i1 false) #10
  %5 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 7
  %6 = getelementptr inbounds %"class.blink::TextResourceDecoderOptions", %"class.blink::TextResourceDecoderOptions"* %1, i64 0, i32 7
  tail call void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"* %5, %"class.blink::KURL"* dereferenceable(112) %6) #10
  %7 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 8, i64 0
  %8 = getelementptr inbounds %"class.blink::TextResourceDecoderOptions", %"class.blink::TextResourceDecoderOptions"* %1, i64 0, i32 8, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 3, i1 false) #10
  %9 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 2
  %13 = or i32 %11, 1
  %14 = icmp eq i32 %13, 3
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = tail call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF12UTF8EncodingEv() #10
  br label %23

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %12, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %17
  %22 = tail call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF14Latin1EncodingEv() #10
  br label %23

23:                                               ; preds = %15, %17, %21
  %24 = phi %"class.WTF::TextEncoding"* [ %16, %15 ], [ %22, %21 ], [ %12, %17 ]
  %25 = bitcast %"class.WTF::TextEncoding"* %24 to i64*
  %26 = bitcast %"class.WTF::TextEncoding"* %9 to i64*
  %27 = load i64, i64* %25, align 8
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2
  %29 = bitcast %"class.std::__1::unique_ptr.2"* %28 to i64*
  store i64 0, i64* %29, align 8
  %30 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 3
  store i32 0, i32* %30, align 8
  %31 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4
  %32 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 11
  %33 = bitcast %"class.std::__1::unique_ptr.8"* %32 to i64*
  store i64 0, i64* %33, align 8
  %34 = bitcast %"class.WTF::Vector"* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 22, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19TextResourceDecoderD2Ev(%"class.blink::TextResourceDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %3 = load %"class.blink::HTMLMetaCharsetParser"*, %"class.blink::HTMLMetaCharsetParser"** %2, align 8
  store %"class.blink::HTMLMetaCharsetParser"* null, %"class.blink::HTMLMetaCharsetParser"** %2, align 8
  %4 = icmp eq %"class.blink::HTMLMetaCharsetParser"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN5blink21HTMLMetaCharsetParserD1Ev(%"class.blink::HTMLMetaCharsetParser"* nonnull %3) #10
  %6 = bitcast %"class.blink::HTMLMetaCharsetParser"* %3 to i8*
  tail call void @free(i8* %6) #10
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %17, label %11, !prof !2

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15, !prof !3

15:                                               ; preds = %11
  store i32 0, i32* %12, align 4
  br label %16

16:                                               ; preds = %15, %11
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %9) #10
  store i8* null, i8** %8, align 8
  br label %17

17:                                               ; preds = %7, %16
  %18 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %18, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %18, align 8
  %20 = icmp eq %"class.WTF::TextCodec"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %17
  %22 = bitcast %"class.WTF::TextCodec"* %19 to void (%"class.WTF::TextCodec"*)***
  %23 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %23, i64 1
  %25 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %24, align 8
  tail call void %25(%"class.WTF::TextCodec"* nonnull %19) #10
  br label %26

26:                                               ; preds = %17, %21
  %27 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 7
  tail call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* %27) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19TextResourceDecoder11AddToBufferEPKcj(%"class.blink::TextResourceDecoder"*, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4
  %5 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = add i32 %6, %2
  %8 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, %7
  br i1 %10, label %11, label %33, !prof !2

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  %15 = zext i32 %7 to i64
  %16 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %15) #10
  %17 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %16) #10
  %18 = ptrtoint i8* %17 to i64
  br i1 %14, label %30, label %19

19:                                               ; preds = %11
  %20 = load i8*, i8** %12, align 8
  %21 = icmp ne i8* %17, null
  %22 = icmp ne i8* %20, null
  %23 = and i1 %21, %22
  br i1 %23, label %24, label %28, !prof !2

24:                                               ; preds = %19
  %25 = load i32, i32* %5, align 4
  %26 = zext i32 %25 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %17, i8* nonnull align 1 %20, i64 %26, i1 false) #10
  %27 = load i8*, i8** %12, align 8
  br label %28

28:                                               ; preds = %24, %19
  %29 = phi i8* [ %20, %19 ], [ %27, %24 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %29) #10
  br label %30

30:                                               ; preds = %11, %28
  %31 = bitcast %"class.WTF::Vector"* %4 to i64*
  store atomic i64 %18, i64* %31 monotonic, align 8
  %32 = trunc i64 %16 to i32
  store i32 %32, i32* %8, align 8
  br label %33

33:                                               ; preds = %30, %3
  tail call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %4, i8* %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %87

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ugt i8* %15, %1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  %20 = icmp ugt i8* %19, %1
  br i1 %20, label %52, label %21

21:                                               ; preds = %17, %13
  %22 = lshr i32 %11, 2
  %23 = add nuw i32 %11, 1
  %24 = add i32 %23, %22
  %25 = icmp ugt i32 %24, 4
  %26 = select i1 %25, i32 %24, i32 4
  %27 = icmp ugt i32 %26, %9
  %28 = select i1 %27, i32 %26, i32 %9
  %29 = icmp ult i32 %11, %28
  br i1 %29, label %30, label %87, !prof !2

30:                                               ; preds = %21
  %31 = icmp eq i8* %15, null
  %32 = zext i32 %28 to i64
  %33 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %32) #10
  %34 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %33) #10
  %35 = ptrtoint i8* %34 to i64
  br i1 %31, label %36, label %39

36:                                               ; preds = %30
  %37 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %35, i64* %37 monotonic, align 8
  %38 = trunc i64 %33 to i32
  store i32 %38, i32* %10, align 8
  br label %87

39:                                               ; preds = %30
  %40 = load i8*, i8** %14, align 8
  %41 = icmp ne i8* %34, null
  %42 = icmp ne i8* %40, null
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %48, !prof !2

44:                                               ; preds = %39
  %45 = load i32, i32* %7, align 4
  %46 = zext i32 %45 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* nonnull align 1 %40, i64 %46, i1 false) #10
  %47 = load i8*, i8** %14, align 8
  br label %48

48:                                               ; preds = %44, %39
  %49 = phi i8* [ %40, %39 ], [ %47, %44 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %49) #10
  %50 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %35, i64* %50 monotonic, align 8
  %51 = trunc i64 %33 to i32
  store i32 %51, i32* %10, align 8
  br label %87

52:                                               ; preds = %17
  %53 = ptrtoint i8* %1 to i64
  %54 = ptrtoint i8* %15 to i64
  %55 = sub i64 %53, %54
  %56 = lshr i32 %11, 2
  %57 = add nuw i32 %11, 1
  %58 = add i32 %57, %56
  %59 = icmp ugt i32 %58, 4
  %60 = select i1 %59, i32 %58, i32 4
  %61 = icmp ugt i32 %60, %9
  %62 = select i1 %61, i32 %60, i32 %9
  %63 = icmp ult i32 %11, %62
  br i1 %63, label %64, label %84, !prof !2

64:                                               ; preds = %52
  %65 = icmp eq i8* %15, null
  %66 = zext i32 %62 to i64
  %67 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %66) #10
  %68 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %67) #10
  %69 = ptrtoint i8* %68 to i64
  br i1 %65, label %81, label %70

70:                                               ; preds = %64
  %71 = load i8*, i8** %14, align 8
  %72 = icmp ne i8* %68, null
  %73 = icmp ne i8* %71, null
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %79, !prof !2

75:                                               ; preds = %70
  %76 = load i32, i32* %7, align 4
  %77 = zext i32 %76 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %68, i8* nonnull align 1 %71, i64 %77, i1 false) #10
  %78 = load i8*, i8** %14, align 8
  br label %79

79:                                               ; preds = %75, %70
  %80 = phi i8* [ %71, %70 ], [ %78, %75 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %80) #10
  br label %81

81:                                               ; preds = %64, %79
  %82 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %69, i64* %82 monotonic, align 8
  %83 = trunc i64 %67 to i32
  store i32 %83, i32* %10, align 8
  br label %84

84:                                               ; preds = %81, %52
  %85 = phi i8* [ %15, %52 ], [ %68, %81 ]
  %86 = getelementptr inbounds i8, i8* %85, i64 %55
  br label %87

87:                                               ; preds = %84, %21, %36, %48, %3
  %88 = phi i8* [ %1, %3 ], [ %86, %84 ], [ %1, %21 ], [ %1, %36 ], [ %1, %48 ]
  %89 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #10
  %90 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %90, align 8
  %91 = load i32, i32* %7, align 4
  %92 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92)
  %93 = icmp ult i32 %9, %91
  br i1 %93, label %95, label %94

94:                                               ; preds = %87
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* null, i8** %90, align 8
  br label %104

95:                                               ; preds = %87
  %96 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  %97 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %91) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0), i8* %96, i8* %97) #10
  %98 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %99 = load i8*, i8** %98, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* %99, i8** %90, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %95
  %102 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #10
  %103 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #10
  br label %104

104:                                              ; preds = %94, %95, %101
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #10
  %105 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = load i32, i32* %7, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = icmp ne i8* %109, null
  %111 = icmp ne i8* %88, null
  %112 = and i1 %111, %110
  br i1 %112, label %113, label %115, !prof !2

113:                                              ; preds = %104
  %114 = zext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %109, i8* nonnull align 1 %88, i64 %114, i1 false) #10
  br label %115

115:                                              ; preds = %104, %113
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19TextResourceDecoder18AddToBufferIfEmptyEPKcj(%"class.blink::TextResourceDecoder"*, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4
  tail call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %8, i8* %1, i32 %2)
  br label %9

9:                                                ; preds = %7, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19TextResourceDecoder11SetEncodingERKN3WTF12TextEncodingENS0_14EncodingSourceE(%"class.blink::TextResourceDecoder"* nocapture, %"class.WTF::TextEncoding"* dereferenceable(8), i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.WTF::TextEncoding", align 8
  %6 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %1, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  %9 = ptrtoint i8* %7 to i64
  br i1 %8, label %57, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 2
  br i1 %13, label %57, label %14

14:                                               ; preds = %10
  %15 = icmp eq i32 %2, 4
  %16 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #10
  br i1 %15, label %17, label %34

17:                                               ; preds = %14
  %18 = tail call i64 @strlen(i8* nonnull %7) #11
  %19 = icmp ult i64 %18, 4294967296
  br i1 %19, label %21, label %20, !prof !2

20:                                               ; preds = %17
  tail call void @llvm.trap() #10
  unreachable

21:                                               ; preds = %17
  %22 = trunc i64 %18 to i32
  %23 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %24 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* %7, i8** %25, align 8
  %26 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %22, i32* %26, align 8
  %27 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm15EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %4, [15 x i8]* nonnull dereferenceable(15) @.str)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #10
  br i1 %27, label %28, label %37

28:                                               ; preds = %21
  %29 = bitcast %"class.WTF::TextEncoding"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #10
  call void @_ZN3WTF12TextEncodingC1EPKc(%"class.WTF::TextEncoding"* nonnull %5, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)) #10
  %30 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %31 = bitcast %"class.WTF::TextEncoding"* %5 to i64*
  %32 = bitcast %"class.WTF::TextEncoding"* %30 to i64*
  %33 = load i64, i64* %31, align 8
  store i64 %33, i64* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #10
  br label %46

34:                                               ; preds = %14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #10
  %35 = add i32 %2, -3
  %36 = icmp ult i32 %35, 3
  br i1 %36, label %37, label %43

37:                                               ; preds = %21, %34
  %38 = call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZNK3WTF12TextEncoding26ClosestByteBasedEquivalentEv(%"class.WTF::TextEncoding"* %1) #10
  %39 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %40 = bitcast %"class.WTF::TextEncoding"* %38 to i64*
  %41 = bitcast %"class.WTF::TextEncoding"* %39 to i64*
  %42 = load i64, i64* %40, align 8
  store i64 %42, i64* %41, align 8
  br label %46

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %45 = bitcast %"class.WTF::TextEncoding"* %44 to i64*
  store i64 %9, i64* %45, align 8
  br label %46

46:                                               ; preds = %37, %43, %28
  %47 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %48 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %47, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %47, align 8
  %49 = icmp eq %"class.WTF::TextCodec"* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = bitcast %"class.WTF::TextCodec"* %48 to void (%"class.WTF::TextCodec"*)***
  %52 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %52, i64 1
  %54 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %53, align 8
  call void %54(%"class.WTF::TextCodec"* nonnull %48) #10
  br label %55

55:                                               ; preds = %46, %50
  %56 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 3
  store i32 %2, i32* %56, align 8
  br label %57

57:                                               ; preds = %3, %10, %55
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm15EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [15 x i8]* dereferenceable(15)) local_unnamed_addr #3 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 14
  br i1 %5, label %6, label %80

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %80

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %82, label %80

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  br label %62

45:                                               ; preds = %62
  %46 = getelementptr inbounds i16, i16* %44, i64 %79
  %47 = load i16, i16* %46, align 2
  %48 = add i16 %47, -65
  %49 = icmp ult i16 %48, 26
  %50 = zext i1 %49 to i16
  %51 = shl nuw nsw i16 %50, 5
  %52 = or i16 %51, %47
  %53 = zext i16 %52 to i32
  %54 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 %79
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  %60 = icmp eq i32 %53, %59
  %61 = add nuw nsw i64 %63, 2
  br i1 %60, label %250, label %80

62:                                               ; preds = %250, %42
  %63 = phi i64 [ 0, %42 ], [ %61, %250 ]
  %64 = getelementptr inbounds i16, i16* %44, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = add i16 %65, -65
  %67 = icmp ult i16 %66, 26
  %68 = zext i1 %67 to i16
  %69 = shl nuw nsw i16 %68, 5
  %70 = or i16 %69, %65
  %71 = zext i16 %70 to i32
  %72 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 %63
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i64
  %75 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = sext i8 %76 to i32
  %78 = icmp eq i32 %71, %77
  %79 = or i64 %63, 1
  br i1 %78, label %45, label %80

80:                                               ; preds = %62, %45, %250, %14, %28, %82, %96, %110, %124, %138, %152, %166, %180, %194, %208, %222, %2
  %81 = phi i1 [ false, %2 ], [ false, %14 ], [ false, %28 ], [ false, %82 ], [ false, %96 ], [ false, %110 ], [ false, %124 ], [ false, %138 ], [ false, %152 ], [ false, %166 ], [ false, %180 ], [ false, %194 ], [ false, %208 ], [ false, %222 ], [ false, %62 ], [ false, %45 ], [ true, %250 ]
  ret i1 %81

82:                                               ; preds = %28
  %83 = getelementptr inbounds i8, i8* %15, i64 2
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i64
  %86 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 2
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i64
  %92 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = icmp eq i32 %88, %94
  br i1 %95, label %96, label %80

96:                                               ; preds = %82
  %97 = getelementptr inbounds i8, i8* %15, i64 3
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i64
  %100 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 3
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i64
  %106 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = sext i8 %107 to i32
  %109 = icmp eq i32 %102, %108
  br i1 %109, label %110, label %80

110:                                              ; preds = %96
  %111 = getelementptr inbounds i8, i8* %15, i64 4
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i64
  %114 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 4
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i64
  %120 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = sext i8 %121 to i32
  %123 = icmp eq i32 %116, %122
  br i1 %123, label %124, label %80

124:                                              ; preds = %110
  %125 = getelementptr inbounds i8, i8* %15, i64 5
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 5
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i64
  %134 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = sext i8 %135 to i32
  %137 = icmp eq i32 %130, %136
  br i1 %137, label %138, label %80

138:                                              ; preds = %124
  %139 = getelementptr inbounds i8, i8* %15, i64 6
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i64
  %142 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 6
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i64
  %148 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = sext i8 %149 to i32
  %151 = icmp eq i32 %144, %150
  br i1 %151, label %152, label %80

152:                                              ; preds = %138
  %153 = getelementptr inbounds i8, i8* %15, i64 7
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i64
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 7
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i64
  %162 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = sext i8 %163 to i32
  %165 = icmp eq i32 %158, %164
  br i1 %165, label %166, label %80

166:                                              ; preds = %152
  %167 = getelementptr inbounds i8, i8* %15, i64 8
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i64
  %170 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 8
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i64
  %176 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = sext i8 %177 to i32
  %179 = icmp eq i32 %172, %178
  br i1 %179, label %180, label %80

180:                                              ; preds = %166
  %181 = getelementptr inbounds i8, i8* %15, i64 9
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i64
  %184 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 9
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i64
  %190 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %189
  %191 = load i8, i8* %190, align 1
  %192 = sext i8 %191 to i32
  %193 = icmp eq i32 %186, %192
  br i1 %193, label %194, label %80

194:                                              ; preds = %180
  %195 = getelementptr inbounds i8, i8* %15, i64 10
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i64
  %198 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 10
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i64
  %204 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %203
  %205 = load i8, i8* %204, align 1
  %206 = sext i8 %205 to i32
  %207 = icmp eq i32 %200, %206
  br i1 %207, label %208, label %80

208:                                              ; preds = %194
  %209 = getelementptr inbounds i8, i8* %15, i64 11
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i64
  %212 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %211
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 11
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i64
  %218 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = sext i8 %219 to i32
  %221 = icmp eq i32 %214, %220
  br i1 %221, label %222, label %80

222:                                              ; preds = %208
  %223 = getelementptr inbounds i8, i8* %15, i64 12
  %224 = load i8, i8* %223, align 1
  %225 = zext i8 %224 to i64
  %226 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 12
  %230 = load i8, i8* %229, align 1
  %231 = zext i8 %230 to i64
  %232 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = sext i8 %233 to i32
  %235 = icmp eq i32 %228, %234
  br i1 %235, label %236, label %80

236:                                              ; preds = %222
  %237 = getelementptr inbounds i8, i8* %15, i64 13
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i64
  %240 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %239
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i32
  %243 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 13
  %244 = load i8, i8* %243, align 1
  %245 = zext i8 %244 to i64
  %246 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = sext i8 %247 to i32
  %249 = icmp eq i32 %242, %248
  ret i1 %249

250:                                              ; preds = %45
  %251 = icmp eq i64 %61, 14
  br i1 %251, label %80, label %62
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN3WTF12TextEncodingC1EPKc(%"class.WTF::TextEncoding"*, i8*) unnamed_addr #1

declare dereferenceable(8) %"class.WTF::TextEncoding"* @_ZNK3WTF12TextEncoding26ClosestByteBasedEquivalentEv(%"class.WTF::TextEncoding"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink19TextResourceDecoder11CheckForBOMEPKcj(%"class.blink::TextResourceDecoder"* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 3
  %5 = load i8, i8* %4, align 8, !range !4
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 5
  store i8 1, i8* %8, align 8
  br label %107

9:                                                ; preds = %3
  %10 = icmp ult i32 %2, 2
  br i1 %10, label %107, label %11

11:                                               ; preds = %9
  %12 = load i8, i8* %1, align 1
  %13 = getelementptr inbounds i8, i8* %1, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp ne i32 %2, 2
  br i1 %15, label %16, label %47

16:                                               ; preds = %11
  %17 = getelementptr inbounds i8, i8* %1, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %12, -17
  %20 = icmp eq i8 %14, -69
  %21 = and i1 %19, %20
  %22 = icmp eq i8 %18, -65
  %23 = and i1 %21, %22
  br i1 %23, label %24, label %47

24:                                               ; preds = %16
  %25 = tail call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF12UTF8EncodingEv() #10
  %26 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %25, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  %29 = ptrtoint i8* %27 to i64
  br i1 %28, label %104, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 2
  br i1 %33, label %104, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %36 = bitcast %"class.WTF::TextEncoding"* %35 to i64*
  store i64 %29, i64* %36, align 8
  %37 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %38 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %37, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %37, align 8
  %39 = icmp eq %"class.WTF::TextCodec"* %38, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %34
  %41 = bitcast %"class.WTF::TextCodec"* %38 to void (%"class.WTF::TextCodec"*)***
  %42 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %42, i64 1
  %44 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %43, align 8
  tail call void %44(%"class.WTF::TextCodec"* nonnull %38) #10
  br label %45

45:                                               ; preds = %40, %34
  %46 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 3
  store i32 1, i32* %46, align 8
  br label %104

47:                                               ; preds = %11, %16
  %48 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 2
  br i1 %50, label %103, label %51

51:                                               ; preds = %47
  %52 = icmp eq i8 %12, -2
  %53 = icmp eq i8 %14, -1
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %77

55:                                               ; preds = %51
  %56 = tail call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF22UTF16BigEndianEncodingEv() #10
  %57 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %56, i64 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = icmp eq i8* %58, null
  %60 = ptrtoint i8* %58 to i64
  br i1 %59, label %104, label %61

61:                                               ; preds = %55
  %62 = load i32, i32* %48, align 8
  %63 = icmp eq i32 %62, 2
  br i1 %63, label %104, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %66 = bitcast %"class.WTF::TextEncoding"* %65 to i64*
  store i64 %60, i64* %66, align 8
  %67 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %68 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %67, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %67, align 8
  %69 = icmp eq %"class.WTF::TextCodec"* %68, null
  br i1 %69, label %75, label %70

70:                                               ; preds = %64
  %71 = bitcast %"class.WTF::TextCodec"* %68 to void (%"class.WTF::TextCodec"*)***
  %72 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %71, align 8
  %73 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %72, i64 1
  %74 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %73, align 8
  tail call void %74(%"class.WTF::TextCodec"* nonnull %68) #10
  br label %75

75:                                               ; preds = %70, %64
  %76 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 3
  store i32 1, i32* %76, align 8
  br label %104

77:                                               ; preds = %51
  %78 = icmp eq i8 %12, -1
  %79 = icmp eq i8 %14, -2
  %80 = and i1 %78, %79
  br i1 %80, label %81, label %103

81:                                               ; preds = %77
  %82 = tail call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF25UTF16LittleEndianEncodingEv() #10
  %83 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %82, i64 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = icmp eq i8* %84, null
  %86 = ptrtoint i8* %84 to i64
  br i1 %85, label %104, label %87

87:                                               ; preds = %81
  %88 = load i32, i32* %48, align 8
  %89 = icmp eq i32 %88, 2
  br i1 %89, label %104, label %90

90:                                               ; preds = %87
  %91 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %92 = bitcast %"class.WTF::TextEncoding"* %91 to i64*
  store i64 %86, i64* %92, align 8
  %93 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %94 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %93, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %93, align 8
  %95 = icmp eq %"class.WTF::TextCodec"* %94, null
  br i1 %95, label %101, label %96

96:                                               ; preds = %90
  %97 = bitcast %"class.WTF::TextCodec"* %94 to void (%"class.WTF::TextCodec"*)***
  %98 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %97, align 8
  %99 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %98, i64 1
  %100 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %99, align 8
  tail call void %100(%"class.WTF::TextCodec"* nonnull %94) #10
  br label %101

101:                                              ; preds = %96, %90
  %102 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 3
  store i32 1, i32* %102, align 8
  br label %104

103:                                              ; preds = %47, %77
  br i1 %15, label %104, label %107

104:                                              ; preds = %101, %87, %81, %75, %61, %55, %45, %30, %24, %103
  %105 = phi i32 [ 0, %103 ], [ 2, %101 ], [ 2, %87 ], [ 2, %81 ], [ 2, %75 ], [ 2, %61 ], [ 2, %55 ], [ 3, %45 ], [ 3, %30 ], [ 3, %24 ]
  %106 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 5
  store i8 1, i8* %106, align 8
  br label %107

107:                                              ; preds = %104, %103, %9, %7
  %108 = phi i32 [ 0, %7 ], [ 0, %9 ], [ 0, %103 ], [ %105, %104 ]
  ret i32 %108
}

declare dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF22UTF16BigEndianEncodingEv() local_unnamed_addr #1

declare dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF25UTF16LittleEndianEncodingEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19TextResourceDecoder18CheckForCSSCharsetEPKcj(%"class.blink::TextResourceDecoder"* nocapture, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::TextEncoding", align 8
  %5 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  switch i32 %6, label %7 [
    i32 0, label %9
    i32 7, label %9
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 6
  store i8 1, i8* %8, align 1
  br label %101

9:                                                ; preds = %3, %3
  %10 = icmp ult i32 %2, 14
  br i1 %10, label %101, label %11

11:                                               ; preds = %9
  %12 = zext i32 %2 to i64
  %13 = getelementptr inbounds i8, i8* %1, i64 %12
  %14 = load i8, i8* %1, align 1
  %15 = icmp eq i8 %14, 64
  br i1 %15, label %16, label %99

16:                                               ; preds = %11
  %17 = getelementptr inbounds i8, i8* %1, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 99
  br i1 %19, label %20, label %99

20:                                               ; preds = %16
  %21 = getelementptr inbounds i8, i8* %1, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, 104
  br i1 %23, label %24, label %99

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, i8* %1, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, 97
  br i1 %27, label %28, label %99

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %30, 114
  br i1 %31, label %32, label %99

32:                                               ; preds = %28
  %33 = getelementptr inbounds i8, i8* %1, i64 5
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 115
  br i1 %35, label %36, label %99

36:                                               ; preds = %32
  %37 = getelementptr inbounds i8, i8* %1, i64 6
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, 101
  br i1 %39, label %40, label %99

40:                                               ; preds = %36
  %41 = getelementptr inbounds i8, i8* %1, i64 7
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 116
  br i1 %43, label %44, label %99

44:                                               ; preds = %40
  %45 = getelementptr inbounds i8, i8* %1, i64 8
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 32
  br i1 %47, label %48, label %99

48:                                               ; preds = %44
  %49 = getelementptr inbounds i8, i8* %1, i64 9
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %50, 34
  br i1 %51, label %52, label %99

52:                                               ; preds = %48
  %53 = getelementptr inbounds i8, i8* %1, i64 10
  br label %54

54:                                               ; preds = %52, %58
  %55 = phi i8* [ %59, %58 ], [ %53, %52 ]
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 34
  br i1 %57, label %61, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds i8, i8* %55, i64 1
  %60 = icmp ult i8* %59, %13
  br i1 %60, label %54, label %61

61:                                               ; preds = %58, %54
  %62 = phi i8* [ %59, %58 ], [ %55, %54 ]
  %63 = icmp eq i8* %62, %13
  br i1 %63, label %101, label %64

64:                                               ; preds = %61
  %65 = ptrtoint i8* %62 to i64
  %66 = ptrtoint i8* %53 to i64
  %67 = sub i64 %65, %66
  %68 = trunc i64 %67 to i32
  %69 = getelementptr inbounds i8, i8* %62, i64 1
  %70 = icmp eq i8* %69, %13
  br i1 %70, label %101, label %71

71:                                               ; preds = %64
  %72 = load i8, i8* %69, align 1
  %73 = icmp eq i8 %72, 59
  br i1 %73, label %74, label %99

74:                                               ; preds = %71
  %75 = bitcast %"class.WTF::TextEncoding"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #10
  %76 = tail call fastcc i8* @_ZN5blinkL16FindTextEncodingEPKcj(i8* %53, i32 %68)
  %77 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %4, i64 0, i32 0
  store i8* %76, i8** %77, align 8
  %78 = icmp eq i8* %76, null
  br i1 %78, label %98, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 2
  br i1 %82, label %98, label %83

83:                                               ; preds = %79
  %84 = call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZNK3WTF12TextEncoding26ClosestByteBasedEquivalentEv(%"class.WTF::TextEncoding"* nonnull %4) #10
  %85 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %86 = bitcast %"class.WTF::TextEncoding"* %84 to i64*
  %87 = bitcast %"class.WTF::TextEncoding"* %85 to i64*
  %88 = load i64, i64* %86, align 8
  store i64 %88, i64* %87, align 8
  %89 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %90 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %89, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %89, align 8
  %91 = icmp eq %"class.WTF::TextCodec"* %90, null
  br i1 %91, label %97, label %92

92:                                               ; preds = %83
  %93 = bitcast %"class.WTF::TextCodec"* %90 to void (%"class.WTF::TextCodec"*)***
  %94 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %93, align 8
  %95 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %94, i64 1
  %96 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %95, align 8
  call void %96(%"class.WTF::TextCodec"* nonnull %90) #10
  br label %97

97:                                               ; preds = %92, %83
  store i32 5, i32* %5, align 8
  br label %98

98:                                               ; preds = %74, %79, %97
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #10
  br label %99

99:                                               ; preds = %71, %98, %11, %16, %20, %24, %28, %32, %36, %40, %44, %48
  %100 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 6
  store i8 1, i8* %100, align 1
  br label %101

101:                                              ; preds = %61, %64, %99, %9, %7
  %102 = phi i1 [ true, %7 ], [ false, %9 ], [ true, %99 ], [ false, %64 ], [ false, %61 ]
  ret i1 %102
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @_ZN5blinkL16FindTextEncodingEPKcj(i8* nocapture readonly, i32) unnamed_addr #0 {
  %3 = alloca %"class.WTF::TextEncoding", align 8
  %4 = alloca %"class.WTF::Vector.41", align 8
  %5 = bitcast %"class.WTF::Vector.41"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %5) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 80, i1 false)
  %6 = add i32 %1, 1
  %7 = getelementptr inbounds %"class.WTF::Vector.41", %"class.WTF::Vector.41"* %4, i64 0, i32 0, i32 1, i64 0
  %8 = getelementptr inbounds %"class.WTF::Vector.41", %"class.WTF::Vector.41"* %4, i64 0, i32 0, i32 0, i32 0
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds %"class.WTF::Vector.41", %"class.WTF::Vector.41"* %4, i64 0, i32 0, i32 0, i32 1
  store i32 64, i32* %9, align 8
  %10 = icmp ugt i32 %6, 64
  %11 = zext i32 %6 to i64
  br i1 %10, label %12, label %18

12:                                               ; preds = %2
  %13 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %11) #10
  %14 = call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %13) #10
  %15 = ptrtoint i8* %14 to i64
  %16 = bitcast %"class.WTF::Vector.41"* %4 to i64*
  store atomic i64 %15, i64* %16 monotonic, align 8
  %17 = trunc i64 %13 to i32
  store i32 %17, i32* %9, align 8
  br label %18

18:                                               ; preds = %2, %12
  %19 = phi i8* [ %14, %12 ], [ %7, %2 ]
  %20 = getelementptr inbounds %"class.WTF::Vector.41", %"class.WTF::Vector.41"* %4, i64 0, i32 0, i32 0, i32 2
  store i32 %6, i32* %20, align 4
  call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 0, i64 %11, i1 false) #10
  %21 = load i8*, i8** %8, align 8
  %22 = zext i32 %1 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* align 1 %0, i64 %22, i1 false)
  %23 = call dereferenceable(1) i8* @_ZN3WTF6VectorIcLj64ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.41"* nonnull %4, i32 %1) #10
  store i8 0, i8* %23, align 1
  %24 = load i8*, i8** %8, align 8
  call void @_ZN3WTF12TextEncodingC1EPKc(%"class.WTF::TextEncoding"* nonnull %3, i8* %24) #10
  %25 = load i32, i32* %20, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %28, label %27, !prof !3

27:                                               ; preds = %18
  store i32 0, i32* %20, align 4
  br label %28

28:                                               ; preds = %27, %18
  %29 = load i8*, i8** %8, align 8
  %30 = icmp eq i8* %7, %29
  br i1 %30, label %33, label %31, !prof !2

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"class.WTF::Vector.41", %"class.WTF::Vector.41"* %4, i64 0, i32 0
  call void @_ZN3WTF12VectorBufferIcLj64ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPc(%"class.WTF::VectorBuffer.42"* nonnull %32, i8* %29) #10
  br label %33

33:                                               ; preds = %28, %31
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %5) #10
  %34 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %3, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  ret i8* %35
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19TextResourceDecoder18CheckForXMLCharsetEPKcj(%"class.blink::TextResourceDecoder"* nocapture, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::TextEncoding", align 8
  %5 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  switch i32 %6, label %7 [
    i32 0, label %9
    i32 7, label %9
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 7
  store i8 1, i8* %8, align 2
  br label %254

9:                                                ; preds = %3, %3
  %10 = icmp ult i32 %2, 8
  br i1 %10, label %254, label %11

11:                                               ; preds = %9
  %12 = zext i32 %2 to i64
  %13 = getelementptr inbounds i8, i8* %1, i64 %12
  %14 = load i8, i8* %1, align 1
  switch i8 %14, label %252 [
    i8 60, label %15
    i8 0, label %210
  ]

15:                                               ; preds = %11
  %16 = getelementptr inbounds i8, i8* %1, i64 1
  %17 = load i8, i8* %16, align 1
  switch i8 %17, label %252 [
    i8 63, label %18
    i8 0, label %172
  ]

18:                                               ; preds = %15
  %19 = getelementptr inbounds i8, i8* %1, i64 2
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 120
  br i1 %21, label %22, label %252

22:                                               ; preds = %18
  %23 = getelementptr inbounds i8, i8* %1, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 109
  br i1 %25, label %26, label %252

26:                                               ; preds = %22
  %27 = getelementptr inbounds i8, i8* %1, i64 4
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 108
  br i1 %29, label %30, label %252

30:                                               ; preds = %26, %34
  %31 = phi i8* [ %32, %34 ], [ %1, %26 ]
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  %33 = icmp eq i8* %32, %13
  br i1 %33, label %254, label %34

34:                                               ; preds = %30
  %35 = load i8, i8* %32, align 1
  %36 = icmp eq i8 %35, 62
  br i1 %36, label %37, label %30

37:                                               ; preds = %34
  %38 = ptrtoint i8* %32 to i64
  %39 = ptrtoint i8* %1 to i64
  %40 = sub i64 %38, %39
  %41 = trunc i64 %40 to i32
  %42 = icmp ult i32 %41, 8
  br i1 %42, label %252, label %43

43:                                               ; preds = %37
  %44 = shl i64 %40, 32
  %45 = ashr exact i64 %44, 32
  %46 = add nsw i64 %45, -8
  br label %47

47:                                               ; preds = %58, %43
  %48 = phi i8 [ 60, %43 ], [ %60, %58 ]
  %49 = phi i64 [ 0, %43 ], [ %51, %58 ]
  %50 = icmp eq i8 %48, 101
  %51 = add i64 %49, 1
  br i1 %50, label %52, label %56

52:                                               ; preds = %47
  %53 = getelementptr inbounds i8, i8* %1, i64 %51
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 110
  br i1 %55, label %61, label %56

56:                                               ; preds = %86, %81, %76, %71, %66, %61, %52, %47
  %57 = icmp ugt i64 %51, %46
  br i1 %57, label %252, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds i8, i8* %1, i64 %51
  %60 = load i8, i8* %59, align 1
  br label %47

61:                                               ; preds = %52
  %62 = add i64 %49, 2
  %63 = getelementptr inbounds i8, i8* %1, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 99
  br i1 %65, label %66, label %56

66:                                               ; preds = %61
  %67 = add i64 %49, 3
  %68 = getelementptr inbounds i8, i8* %1, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = icmp eq i8 %69, 111
  br i1 %70, label %71, label %56

71:                                               ; preds = %66
  %72 = add i64 %49, 4
  %73 = getelementptr inbounds i8, i8* %1, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 100
  br i1 %75, label %76, label %56

76:                                               ; preds = %71
  %77 = add i64 %49, 5
  %78 = getelementptr inbounds i8, i8* %1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = icmp eq i8 %79, 105
  br i1 %80, label %81, label %56

81:                                               ; preds = %76
  %82 = add i64 %49, 6
  %83 = getelementptr inbounds i8, i8* %1, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 110
  br i1 %85, label %86, label %56

86:                                               ; preds = %81
  %87 = add i64 %49, 7
  %88 = getelementptr inbounds i8, i8* %1, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, 103
  br i1 %90, label %91, label %56

91:                                               ; preds = %86
  %92 = trunc i64 %49 to i32
  %93 = icmp eq i32 %92, -1
  br i1 %93, label %252, label %94

94:                                               ; preds = %91
  %95 = add i32 %92, 8
  %96 = icmp slt i32 %95, %41
  br i1 %96, label %97, label %252

97:                                               ; preds = %94
  %98 = sext i32 %95 to i64
  br label %99

99:                                               ; preds = %104, %97
  %100 = phi i64 [ %98, %97 ], [ %105, %104 ]
  %101 = getelementptr inbounds i8, i8* %1, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = icmp slt i8 %102, 33
  br i1 %103, label %104, label %108

104:                                              ; preds = %99
  %105 = add nsw i64 %100, 1
  %106 = trunc i64 %105 to i32
  %107 = icmp eq i32 %106, %41
  br i1 %107, label %252, label %99

108:                                              ; preds = %99
  %109 = shl i64 %100, 32
  %110 = ashr exact i64 %109, 32
  %111 = getelementptr inbounds i8, i8* %1, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = icmp eq i8 %112, 61
  br i1 %113, label %114, label %252

114:                                              ; preds = %108, %118
  %115 = phi i64 [ %116, %118 ], [ %110, %108 ]
  %116 = add nsw i64 %115, 1
  %117 = icmp slt i64 %116, %45
  br i1 %117, label %118, label %252

118:                                              ; preds = %114
  %119 = getelementptr inbounds i8, i8* %1, i64 %116
  %120 = load i8, i8* %119, align 1
  %121 = icmp slt i8 %120, 33
  br i1 %121, label %114, label %122

122:                                              ; preds = %118
  %123 = shl i64 %116, 32
  %124 = ashr exact i64 %123, 32
  %125 = getelementptr inbounds i8, i8* %1, i64 %124
  %126 = load i8, i8* %125, align 1
  switch i8 %126, label %252 [
    i8 34, label %127
    i8 39, label %127
  ]

127:                                              ; preds = %122, %122
  %128 = trunc i64 %115 to i32
  %129 = add i32 %128, 2
  %130 = icmp slt i32 %129, %41
  br i1 %130, label %131, label %252

131:                                              ; preds = %127
  %132 = sext i32 %129 to i64
  br label %133

133:                                              ; preds = %138, %131
  %134 = phi i64 [ %132, %131 ], [ %139, %138 ]
  %135 = getelementptr inbounds i8, i8* %1, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = icmp eq i8 %136, %126
  br i1 %137, label %142, label %138

138:                                              ; preds = %133
  %139 = add nsw i64 %134, 1
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, %41
  br i1 %141, label %252, label %133

142:                                              ; preds = %133
  %143 = icmp eq i32 %129, -1
  br i1 %143, label %252, label %144

144:                                              ; preds = %142
  %145 = trunc i64 %134 to i32
  %146 = sub nsw i32 %145, %129
  %147 = bitcast %"class.WTF::TextEncoding"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %147) #10
  %148 = getelementptr inbounds i8, i8* %1, i64 %132
  %149 = tail call fastcc i8* @_ZN5blinkL16FindTextEncodingEPKcj(i8* %148, i32 %146)
  %150 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %4, i64 0, i32 0
  store i8* %149, i8** %150, align 8
  %151 = icmp eq i8* %149, null
  br i1 %151, label %171, label %152

152:                                              ; preds = %144
  %153 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 0
  %154 = load i32, i32* %153, align 8
  %155 = icmp eq i32 %154, 2
  br i1 %155, label %171, label %156

156:                                              ; preds = %152
  %157 = call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZNK3WTF12TextEncoding26ClosestByteBasedEquivalentEv(%"class.WTF::TextEncoding"* nonnull %4) #10
  %158 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %159 = bitcast %"class.WTF::TextEncoding"* %157 to i64*
  %160 = bitcast %"class.WTF::TextEncoding"* %158 to i64*
  %161 = load i64, i64* %159, align 8
  store i64 %161, i64* %160, align 8
  %162 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %163 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %162, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %162, align 8
  %164 = icmp eq %"class.WTF::TextCodec"* %163, null
  br i1 %164, label %170, label %165

165:                                              ; preds = %156
  %166 = bitcast %"class.WTF::TextCodec"* %163 to void (%"class.WTF::TextCodec"*)***
  %167 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %166, align 8
  %168 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %167, i64 1
  %169 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %168, align 8
  call void %169(%"class.WTF::TextCodec"* nonnull %163) #10
  br label %170

170:                                              ; preds = %165, %156
  store i32 3, i32* %5, align 8
  br label %171

171:                                              ; preds = %144, %152, %170
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %147) #10
  br label %252

172:                                              ; preds = %15
  %173 = getelementptr inbounds i8, i8* %1, i64 2
  %174 = load i8, i8* %173, align 1
  %175 = icmp eq i8 %174, 63
  br i1 %175, label %176, label %252

176:                                              ; preds = %172
  %177 = getelementptr inbounds i8, i8* %1, i64 3
  %178 = load i8, i8* %177, align 1
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %180, label %252

180:                                              ; preds = %176
  %181 = getelementptr inbounds i8, i8* %1, i64 4
  %182 = load i8, i8* %181, align 1
  %183 = icmp eq i8 %182, 120
  br i1 %183, label %184, label %252

184:                                              ; preds = %180
  %185 = getelementptr inbounds i8, i8* %1, i64 5
  %186 = load i8, i8* %185, align 1
  %187 = icmp eq i8 %186, 0
  br i1 %187, label %188, label %252

188:                                              ; preds = %184
  %189 = tail call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF25UTF16LittleEndianEncodingEv() #10
  %190 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %189, i64 0, i32 0
  %191 = load i8*, i8** %190, align 8
  %192 = icmp eq i8* %191, null
  %193 = ptrtoint i8* %191 to i64
  br i1 %192, label %252, label %194

194:                                              ; preds = %188
  %195 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 0
  %196 = load i32, i32* %195, align 8
  %197 = icmp eq i32 %196, 2
  br i1 %197, label %252, label %198

198:                                              ; preds = %194
  %199 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %200 = bitcast %"class.WTF::TextEncoding"* %199 to i64*
  store i64 %193, i64* %200, align 8
  %201 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %202 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %201, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %201, align 8
  %203 = icmp eq %"class.WTF::TextCodec"* %202, null
  br i1 %203, label %209, label %204

204:                                              ; preds = %198
  %205 = bitcast %"class.WTF::TextCodec"* %202 to void (%"class.WTF::TextCodec"*)***
  %206 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %205, align 8
  %207 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %206, i64 1
  %208 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %207, align 8
  tail call void %208(%"class.WTF::TextCodec"* nonnull %202) #10
  br label %209

209:                                              ; preds = %204, %198
  store i32 1, i32* %5, align 8
  br label %252

210:                                              ; preds = %11
  %211 = getelementptr inbounds i8, i8* %1, i64 1
  %212 = load i8, i8* %211, align 1
  %213 = icmp eq i8 %212, 60
  br i1 %213, label %214, label %252

214:                                              ; preds = %210
  %215 = getelementptr inbounds i8, i8* %1, i64 2
  %216 = load i8, i8* %215, align 1
  %217 = icmp eq i8 %216, 0
  br i1 %217, label %218, label %252

218:                                              ; preds = %214
  %219 = getelementptr inbounds i8, i8* %1, i64 3
  %220 = load i8, i8* %219, align 1
  %221 = icmp eq i8 %220, 63
  br i1 %221, label %222, label %252

222:                                              ; preds = %218
  %223 = getelementptr inbounds i8, i8* %1, i64 4
  %224 = load i8, i8* %223, align 1
  %225 = icmp eq i8 %224, 0
  br i1 %225, label %226, label %252

226:                                              ; preds = %222
  %227 = getelementptr inbounds i8, i8* %1, i64 5
  %228 = load i8, i8* %227, align 1
  %229 = icmp eq i8 %228, 120
  br i1 %229, label %230, label %252

230:                                              ; preds = %226
  %231 = tail call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF22UTF16BigEndianEncodingEv() #10
  %232 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %231, i64 0, i32 0
  %233 = load i8*, i8** %232, align 8
  %234 = icmp eq i8* %233, null
  %235 = ptrtoint i8* %233 to i64
  br i1 %234, label %252, label %236

236:                                              ; preds = %230
  %237 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 0
  %238 = load i32, i32* %237, align 8
  %239 = icmp eq i32 %238, 2
  br i1 %239, label %252, label %240

240:                                              ; preds = %236
  %241 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %242 = bitcast %"class.WTF::TextEncoding"* %241 to i64*
  store i64 %235, i64* %242, align 8
  %243 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %244 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %243, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %243, align 8
  %245 = icmp eq %"class.WTF::TextCodec"* %244, null
  br i1 %245, label %251, label %246

246:                                              ; preds = %240
  %247 = bitcast %"class.WTF::TextCodec"* %244 to void (%"class.WTF::TextCodec"*)***
  %248 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %247, align 8
  %249 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %248, i64 1
  %250 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %249, align 8
  tail call void %250(%"class.WTF::TextCodec"* nonnull %244) #10
  br label %251

251:                                              ; preds = %246, %240
  store i32 1, i32* %5, align 8
  br label %252

252:                                              ; preds = %56, %104, %114, %138, %15, %26, %22, %18, %11, %172, %176, %180, %184, %210, %214, %218, %222, %94, %127, %37, %122, %108, %91, %251, %236, %230, %209, %194, %188, %171, %142, %226
  %253 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 7
  store i8 1, i8* %253, align 2
  br label %254

254:                                              ; preds = %30, %252, %9, %7
  %255 = phi i1 [ true, %7 ], [ false, %9 ], [ true, %252 ], [ false, %30 ]
  ret i1 %255
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19TextResourceDecoder19CheckForMetaCharsetEPKcj(%"class.blink::TextResourceDecoder"* nocapture, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %6 [
    i32 6, label %32
    i32 1, label %32
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 11
  %8 = getelementptr inbounds %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.8"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.blink::HTMLMetaCharsetParser"*, %"class.blink::HTMLMetaCharsetParser"** %8, align 8
  %10 = icmp eq %"class.blink::HTMLMetaCharsetParser"* %9, null
  br i1 %10, label %11, label %22

11:                                               ; preds = %6
  %12 = tail call noalias i8* @malloc(i64 2632) #10
  %13 = bitcast i8* %12 to %"class.blink::HTMLMetaCharsetParser"*
  tail call void @_ZN5blink21HTMLMetaCharsetParserC1Ev(%"class.blink::HTMLMetaCharsetParser"* %13) #10
  %14 = ptrtoint i8* %12 to i64
  %15 = load %"class.blink::HTMLMetaCharsetParser"*, %"class.blink::HTMLMetaCharsetParser"** %8, align 8
  %16 = bitcast %"class.std::__1::unique_ptr.8"* %7 to i64*
  store i64 %14, i64* %16, align 8
  %17 = icmp eq %"class.blink::HTMLMetaCharsetParser"* %15, null
  %18 = bitcast i8* %12 to %"class.blink::HTMLMetaCharsetParser"*
  br i1 %17, label %22, label %19

19:                                               ; preds = %11
  tail call void @_ZN5blink21HTMLMetaCharsetParserD1Ev(%"class.blink::HTMLMetaCharsetParser"* nonnull %15) #10
  %20 = bitcast %"class.blink::HTMLMetaCharsetParser"* %15 to i8*
  tail call void @free(i8* %20) #10
  %21 = load %"class.blink::HTMLMetaCharsetParser"*, %"class.blink::HTMLMetaCharsetParser"** %8, align 8
  br label %22

22:                                               ; preds = %6, %11, %19
  %23 = phi %"class.blink::HTMLMetaCharsetParser"* [ %9, %6 ], [ %18, %11 ], [ %21, %19 ]
  %24 = tail call zeroext i1 @_ZN5blink21HTMLMetaCharsetParser19CheckForMetaCharsetEPKcj(%"class.blink::HTMLMetaCharsetParser"* %23, i8* %1, i32 %2) #10
  br i1 %24, label %25, label %34

25:                                               ; preds = %22
  %26 = load %"class.blink::HTMLMetaCharsetParser"*, %"class.blink::HTMLMetaCharsetParser"** %8, align 8
  %27 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %26, i64 0, i32 6
  tail call void @_ZN5blink19TextResourceDecoder11SetEncodingERKN3WTF12TextEncodingENS0_14EncodingSourceE(%"class.blink::TextResourceDecoder"* %0, %"class.WTF::TextEncoding"* dereferenceable(8) %27, i32 4)
  %28 = load %"class.blink::HTMLMetaCharsetParser"*, %"class.blink::HTMLMetaCharsetParser"** %8, align 8
  store %"class.blink::HTMLMetaCharsetParser"* null, %"class.blink::HTMLMetaCharsetParser"** %8, align 8
  %29 = icmp eq %"class.blink::HTMLMetaCharsetParser"* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %25
  tail call void @_ZN5blink21HTMLMetaCharsetParserD1Ev(%"class.blink::HTMLMetaCharsetParser"* nonnull %28) #10
  %31 = bitcast %"class.blink::HTMLMetaCharsetParser"* %28 to i8*
  tail call void @free(i8* %31) #10
  br label %32

32:                                               ; preds = %30, %25, %3, %3
  %33 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 8
  store i8 1, i8* %33, align 1
  br label %34

34:                                               ; preds = %32, %22
  ret void
}

declare zeroext i1 @_ZN5blink21HTMLMetaCharsetParser19CheckForMetaCharsetEPKcj(%"class.blink::HTMLMetaCharsetParser"*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19TextResourceDecoder27AutoDetectEncodingIfAllowedEPKcj(%"class.blink::TextResourceDecoder"*, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::TextEncoding", align 8
  %5 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %56

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 10
  %10 = load i8, i8* %9, align 1, !range !4
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %56

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 3
  %14 = load i32, i32* %13, align 8
  switch i32 %14, label %56 [
    i32 0, label %15
    i32 7, label %18
  ]

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 6
  %17 = load i8*, i8** %16, align 8
  br label %22

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 6
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %56, label %22

22:                                               ; preds = %15, %18
  %23 = phi i8* [ %17, %15 ], [ %20, %18 ]
  %24 = bitcast %"class.WTF::TextEncoding"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #10
  %25 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %4, i64 0, i32 0
  store i8* null, i8** %25, align 8
  %26 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 7
  %27 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 8, i64 0
  %28 = call zeroext i1 @_ZN5blink18DetectTextEncodingEPKcjS1_RKNS_4KURLES1_PN3WTF12TextEncodingE(i8* %1, i32 %2, i8* %23, %"class.blink::KURL"* dereferenceable(112) %26, i8* %27, %"class.WTF::TextEncoding"* nonnull %4) #10
  br i1 %28, label %29, label %48

29:                                               ; preds = %22
  %30 = load i8*, i8** %25, align 8
  %31 = icmp eq i8* %30, null
  %32 = ptrtoint i8* %30 to i64
  br i1 %31, label %48, label %33

33:                                               ; preds = %29
  %34 = load i32, i32* %5, align 8
  %35 = icmp eq i32 %34, 2
  br i1 %35, label %48, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %38 = bitcast %"class.WTF::TextEncoding"* %37 to i64*
  store i64 %32, i64* %38, align 8
  %39 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %40 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %39, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %39, align 8
  %41 = icmp eq %"class.WTF::TextCodec"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %36
  %43 = bitcast %"class.WTF::TextCodec"* %40 to void (%"class.WTF::TextCodec"*)***
  %44 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %44, i64 1
  %46 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %45, align 8
  call void %46(%"class.WTF::TextCodec"* nonnull %40) #10
  br label %47

47:                                               ; preds = %42, %36
  store i32 2, i32* %13, align 8
  br label %48

48:                                               ; preds = %47, %33, %29, %22
  %49 = call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF15UnknownEncodingEv() #10
  %50 = load i8*, i8** %25, align 8
  %51 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %49, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = icmp eq i8* %50, %52
  br i1 %53, label %55, label %54

54:                                               ; preds = %48
  store i8 1, i8* %9, align 1
  br label %55

55:                                               ; preds = %48, %54
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #10
  br label %56

56:                                               ; preds = %12, %18, %8, %3, %55
  ret void
}

declare zeroext i1 @_ZN5blink18DetectTextEncodingEPKcjS1_RKNS_4KURLES1_PN3WTF12TextEncodingE(i8*, i32, i8*, %"class.blink::KURL"* dereferenceable(112), i8*, %"class.WTF::TextEncoding"*) local_unnamed_addr #1

declare dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF15UnknownEncodingEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink19TextResourceDecoder6DecodeEPKcm(%"class.blink::TextResourceDecoder"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = icmp ult i64 %2, 4294967296
  br i1 %4, label %6, label %5, !prof !2

5:                                                ; preds = %3
  tail call void @llvm.trap() #10
  unreachable

6:                                                ; preds = %3
  %7 = trunc i64 %2 to i32
  %8 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4
  %9 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %43, label %12

12:                                               ; preds = %6
  %13 = add i32 %10, %7
  %14 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = icmp ult i32 %15, %13
  br i1 %16, label %17, label %39, !prof !2

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  %21 = zext i32 %13 to i64
  %22 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %21) #10
  %23 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %22) #10
  %24 = ptrtoint i8* %23 to i64
  br i1 %20, label %36, label %25

25:                                               ; preds = %17
  %26 = load i8*, i8** %18, align 8
  %27 = icmp ne i8* %23, null
  %28 = icmp ne i8* %26, null
  %29 = and i1 %27, %28
  br i1 %29, label %30, label %34, !prof !2

30:                                               ; preds = %25
  %31 = load i32, i32* %9, align 4
  %32 = zext i32 %31 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %23, i8* nonnull align 1 %26, i64 %32, i1 false) #10
  %33 = load i8*, i8** %18, align 8
  br label %34

34:                                               ; preds = %30, %25
  %35 = phi i8* [ %26, %25 ], [ %33, %30 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %35) #10
  br label %36

36:                                               ; preds = %17, %34
  %37 = bitcast %"class.WTF::Vector"* %8 to i64*
  store atomic i64 %24, i64* %37 monotonic, align 8
  %38 = trunc i64 %22 to i32
  store i32 %38, i32* %14, align 8
  br label %39

39:                                               ; preds = %36, %12
  tail call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %8, i8* %1, i32 %7) #10
  %40 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = load i32, i32* %9, align 4
  br label %43

43:                                               ; preds = %39, %6
  %44 = phi i8* [ %1, %6 ], [ %41, %39 ]
  %45 = phi i32 [ %7, %6 ], [ %42, %39 ]
  %46 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 5
  %47 = load i8, i8* %46, align 8, !range !4
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %49, label %80

49:                                               ; preds = %43
  %50 = tail call i32 @_ZN5blink19TextResourceDecoder11CheckForBOMEPKcj(%"class.blink::TextResourceDecoder"* %0, i8* %44, i32 %45)
  %51 = load i8, i8* %46, align 8, !range !4
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %80

53:                                               ; preds = %49
  %54 = load i32, i32* %9, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %8, i8* %44, i32 %45) #10
  br label %57

57:                                               ; preds = %53, %56
  %58 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %59 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %58, i64 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = ptrtoint %"class.WTF::StringImpl"* %60 to i64
  %62 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %62, label %220, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %220

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i33
  %72 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #10
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !3

77:                                               ; preds = %68
  tail call void @llvm.trap() #10
  unreachable

78:                                               ; preds = %68
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %69, align 4
  br label %220

80:                                               ; preds = %49, %43
  %81 = phi i32 [ 0, %43 ], [ %50, %49 ]
  %82 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 4
  br i1 %84, label %85, label %124

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 6
  %87 = load i8, i8* %86, align 1, !range !4
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %93, label %89

89:                                               ; preds = %85
  %90 = zext i32 %81 to i64
  %91 = getelementptr inbounds i8, i8* %44, i64 %90
  %92 = sub i32 %45, %81
  br label %172

93:                                               ; preds = %85
  %94 = tail call zeroext i1 @_ZN5blink19TextResourceDecoder18CheckForCSSCharsetEPKcj(%"class.blink::TextResourceDecoder"* %0, i8* %44, i32 %45)
  br i1 %94, label %95, label %97

95:                                               ; preds = %93
  %96 = load i32, i32* %82, align 4
  br label %124

97:                                               ; preds = %93
  %98 = load i32, i32* %9, align 4
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %97
  tail call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %8, i8* %44, i32 %45) #10
  br label %101

101:                                              ; preds = %97, %100
  %102 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %103 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %102, i64 0, i32 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %105 = ptrtoint %"class.WTF::StringImpl"* %104 to i64
  %106 = icmp eq %"class.WTF::StringImpl"* %104, null
  br i1 %106, label %220, label %107

107:                                              ; preds = %101
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = load atomic i32, i32* %108 monotonic, align 4
  %110 = and i32 %109, 2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %220

112:                                              ; preds = %107
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i33
  %116 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %115, i33 1) #10
  %117 = extractvalue { i33, i1 } %116, 1
  %118 = extractvalue { i33, i1 } %116, 0
  %119 = icmp slt i33 %118, 0
  %120 = or i1 %117, %119
  br i1 %120, label %121, label %122, !prof !3

121:                                              ; preds = %112
  tail call void @llvm.trap() #10
  unreachable

122:                                              ; preds = %112
  %123 = trunc i33 %118 to i32
  store i32 %123, i32* %113, align 4
  br label %220

124:                                              ; preds = %95, %80
  %125 = phi i32 [ %83, %80 ], [ %96, %95 ]
  switch i32 %125, label %161 [
    i32 1, label %126
    i32 3, label %126
  ]

126:                                              ; preds = %124, %124
  %127 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 7
  %128 = load i8, i8* %127, align 2, !range !4
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %130, label %161

130:                                              ; preds = %126
  %131 = tail call zeroext i1 @_ZN5blink19TextResourceDecoder18CheckForXMLCharsetEPKcj(%"class.blink::TextResourceDecoder"* %0, i8* %44, i32 %45)
  br i1 %131, label %132, label %134

132:                                              ; preds = %130
  %133 = load i32, i32* %82, align 4
  br label %161

134:                                              ; preds = %130
  %135 = load i32, i32* %9, align 4
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %134
  tail call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %8, i8* %44, i32 %45) #10
  br label %138

138:                                              ; preds = %134, %137
  %139 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %140 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %139, i64 0, i32 0, i32 0
  %141 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %140, align 8
  %142 = ptrtoint %"class.WTF::StringImpl"* %141 to i64
  %143 = icmp eq %"class.WTF::StringImpl"* %141, null
  br i1 %143, label %220, label %144

144:                                              ; preds = %138
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load atomic i32, i32* %145 monotonic, align 4
  %147 = and i32 %146, 2
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %220

149:                                              ; preds = %144
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 0
  %151 = load i32, i32* %150, align 4
  %152 = zext i32 %151 to i33
  %153 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %152, i33 1) #10
  %154 = extractvalue { i33, i1 } %153, 1
  %155 = extractvalue { i33, i1 } %153, 0
  %156 = icmp slt i33 %155, 0
  %157 = or i1 %154, %156
  br i1 %157, label %158, label %159, !prof !3

158:                                              ; preds = %149
  tail call void @llvm.trap() #10
  unreachable

159:                                              ; preds = %149
  %160 = trunc i33 %155 to i32
  store i32 %160, i32* %150, align 4
  br label %220

161:                                              ; preds = %132, %124, %126
  %162 = phi i32 [ %133, %132 ], [ %125, %124 ], [ %125, %126 ]
  %163 = zext i32 %81 to i64
  %164 = getelementptr inbounds i8, i8* %44, i64 %163
  %165 = sub i32 %45, %81
  %166 = icmp eq i32 %162, 1
  br i1 %166, label %167, label %172

167:                                              ; preds = %161
  %168 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 8
  %169 = load i8, i8* %168, align 1, !range !4
  %170 = icmp eq i8 %169, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %167
  tail call void @_ZN5blink19TextResourceDecoder19CheckForMetaCharsetEPKcj(%"class.blink::TextResourceDecoder"* %0, i8* %164, i32 %165)
  br label %172

172:                                              ; preds = %89, %167, %171, %161
  %173 = phi i32 [ %92, %89 ], [ %165, %167 ], [ %165, %171 ], [ %165, %161 ]
  %174 = phi i8* [ %91, %89 ], [ %164, %167 ], [ %164, %171 ], [ %164, %161 ]
  tail call void @_ZN5blink19TextResourceDecoder27AutoDetectEncodingIfAllowedEPKcj(%"class.blink::TextResourceDecoder"* %0, i8* %44, i32 %45)
  %175 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2
  %176 = getelementptr inbounds %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2"* %175, i64 0, i32 0, i32 0, i32 0
  %177 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %176, align 8
  %178 = icmp eq %"class.WTF::TextCodec"* %177, null
  br i1 %178, label %179, label %192

179:                                              ; preds = %172
  %180 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %181 = tail call %"class.WTF::TextCodec"* @_ZN3WTF12NewTextCodecERKNS_12TextEncodingE(%"class.WTF::TextEncoding"* dereferenceable(8) %180) #10
  %182 = ptrtoint %"class.WTF::TextCodec"* %181 to i64
  %183 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %176, align 8
  %184 = bitcast %"class.std::__1::unique_ptr.2"* %175 to i64*
  store i64 %182, i64* %184, align 8
  %185 = icmp eq %"class.WTF::TextCodec"* %183, null
  br i1 %185, label %192, label %186

186:                                              ; preds = %179
  %187 = bitcast %"class.WTF::TextCodec"* %183 to void (%"class.WTF::TextCodec"*)***
  %188 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %187, align 8
  %189 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %188, i64 1
  %190 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %189, align 8
  tail call void %190(%"class.WTF::TextCodec"* nonnull %183) #10
  %191 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %176, align 8
  br label %192

192:                                              ; preds = %172, %179, %186
  %193 = phi %"class.WTF::TextCodec"* [ %177, %172 ], [ %181, %179 ], [ %191, %186 ]
  %194 = load i32, i32* %82, align 4
  %195 = icmp eq i32 %194, 3
  br i1 %195, label %196, label %200

196:                                              ; preds = %192
  %197 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 4
  %198 = load i8, i8* %197, align 1, !range !4
  %199 = icmp eq i8 %198, 0
  br label %200

200:                                              ; preds = %196, %192
  %201 = phi i1 [ false, %192 ], [ %199, %196 ]
  %202 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 9
  %203 = bitcast %"class.WTF::TextCodec"* %193 to %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)***
  %204 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)**, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*** %203, align 8
  %205 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %204, i64 2
  %206 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %205, align 8
  %207 = tail call %"class.WTF::StringImpl"* %206(%"class.WTF::TextCodec"* %193, i8* %174, i32 %173, i32 0, i1 zeroext %201, i8* dereferenceable(1) %202) #10
  %208 = ptrtoint %"class.WTF::StringImpl"* %207 to i64
  %209 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %210 = load i32, i32* %209, align 8
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %220, label %212

212:                                              ; preds = %200
  %213 = load i32, i32* %9, align 4
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %216, label %215

215:                                              ; preds = %212
  store i32 0, i32* %9, align 4
  br label %216

216:                                              ; preds = %215, %212
  %217 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 0
  %218 = load i8*, i8** %217, align 8
  %219 = bitcast %"class.WTF::Vector"* %8 to i64*
  store atomic i64 0, i64* %219 monotonic, align 8
  store i32 0, i32* %209, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %218) #10
  br label %220

220:                                              ; preds = %200, %216, %159, %144, %138, %122, %107, %101, %78, %63, %57
  %221 = phi i64 [ %61, %57 ], [ %61, %63 ], [ %61, %78 ], [ %105, %101 ], [ %105, %107 ], [ %105, %122 ], [ %142, %138 ], [ %142, %144 ], [ %142, %159 ], [ %208, %216 ], [ %208, %200 ]
  %222 = inttoptr i64 %221 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %222
}

declare %"class.WTF::TextCodec"* @_ZN3WTF12NewTextCodecERKNS_12TextEncodingE(%"class.WTF::TextEncoding"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink19TextResourceDecoder5FlushEv(%"class.blink::TextResourceDecoder"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4
  %3 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %24, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 7
  %8 = load i8, i8* %7, align 2, !range !4
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  switch i32 %12, label %13 [
    i32 1, label %21
    i32 3, label %21
  ]

13:                                               ; preds = %10, %6
  %14 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 6
  %15 = load i8, i8* %14, align 1, !range !4
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 4
  br i1 %20, label %21, label %24

21:                                               ; preds = %10, %10, %17
  %22 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  tail call void @_ZN5blink19TextResourceDecoder27AutoDetectEncodingIfAllowedEPKcj(%"class.blink::TextResourceDecoder"* %0, i8* %23, i32 %4)
  br label %24

24:                                               ; preds = %13, %1, %21, %17
  %25 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 2
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %26, align 8
  %28 = icmp eq %"class.WTF::TextCodec"* %27, null
  br i1 %28, label %29, label %42

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 1
  %31 = tail call %"class.WTF::TextCodec"* @_ZN3WTF12NewTextCodecERKNS_12TextEncodingE(%"class.WTF::TextEncoding"* dereferenceable(8) %30) #10
  %32 = ptrtoint %"class.WTF::TextCodec"* %31 to i64
  %33 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %26, align 8
  %34 = bitcast %"class.std::__1::unique_ptr.2"* %25 to i64*
  store i64 %32, i64* %34, align 8
  %35 = icmp eq %"class.WTF::TextCodec"* %33, null
  br i1 %35, label %42, label %36

36:                                               ; preds = %29
  %37 = bitcast %"class.WTF::TextCodec"* %33 to void (%"class.WTF::TextCodec"*)***
  %38 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %37, align 8
  %39 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %38, i64 1
  %40 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %39, align 8
  tail call void %40(%"class.WTF::TextCodec"* nonnull %33) #10
  %41 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %26, align 8
  br label %42

42:                                               ; preds = %24, %29, %36
  %43 = phi %"class.WTF::TextCodec"* [ %27, %24 ], [ %31, %29 ], [ %41, %36 ]
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = load i32, i32* %3, align 4
  %47 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 3
  br i1 %49, label %50, label %54

50:                                               ; preds = %42
  %51 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 0, i32 4
  %52 = load i8, i8* %51, align 1, !range !4
  %53 = icmp eq i8 %52, 0
  br label %54

54:                                               ; preds = %50, %42
  %55 = phi i1 [ false, %42 ], [ %53, %50 ]
  %56 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 9
  %57 = bitcast %"class.WTF::TextCodec"* %43 to %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)***
  %58 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)**, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*** %57, align 8
  %59 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %58, i64 2
  %60 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %59, align 8
  %61 = tail call %"class.WTF::StringImpl"* %60(%"class.WTF::TextCodec"* %43, i8* %45, i32 %46, i32 1, i1 zeroext %55, i8* dereferenceable(1) %56) #10
  %62 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %72, label %65

65:                                               ; preds = %54
  %66 = load i32, i32* %3, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %69, label %68

68:                                               ; preds = %65
  store i32 0, i32* %3, align 4
  br label %69

69:                                               ; preds = %68, %65
  %70 = load i8*, i8** %44, align 8
  %71 = bitcast %"class.WTF::Vector"* %2 to i64*
  store atomic i64 0, i64* %71 monotonic, align 8
  store i32 0, i32* %62, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %70) #10
  br label %72

72:                                               ; preds = %54, %69
  %73 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %26, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %26, align 8
  %74 = icmp eq %"class.WTF::TextCodec"* %73, null
  br i1 %74, label %80, label %75

75:                                               ; preds = %72
  %76 = bitcast %"class.WTF::TextCodec"* %73 to void (%"class.WTF::TextCodec"*)***
  %77 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %76, align 8
  %78 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %77, i64 1
  %79 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %78, align 8
  tail call void %79(%"class.WTF::TextCodec"* nonnull %73) #10
  br label %80

80:                                               ; preds = %72, %75
  %81 = getelementptr inbounds %"class.blink::TextResourceDecoder", %"class.blink::TextResourceDecoder"* %0, i64 0, i32 5
  store i8 0, i8* %81, align 8
  ret %"class.WTF::StringImpl"* %61
}

declare void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"*, %"class.blink::KURL"* dereferenceable(112)) unnamed_addr #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"*) unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #10
  ret i64 %20
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZN3WTF6VectorIcLj64ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.41"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.41", %"class.WTF::Vector.41"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector.41", %"class.WTF::Vector.41"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  ret i8* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIcLj64ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPc(%"class.WTF::VectorBuffer.42"*, i8*) local_unnamed_addr #6 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #10
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

declare void @_ZN5blink21HTMLMetaCharsetParserC1Ev(%"class.blink::HTMLMetaCharsetParser"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #9

; Function Attrs: nounwind
declare void @_ZN5blink21HTMLMetaCharsetParserD1Ev(%"class.blink::HTMLMetaCharsetParser"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
