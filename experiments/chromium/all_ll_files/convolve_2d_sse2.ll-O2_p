; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/convolve_2d_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/convolve_2d_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.InterpFilterParams = type { i16*, i16, i8 }
%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_convolve_2d_sr_12tap_sse2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, %struct.InterpFilterParams* nocapture readonly, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %12 = alloca [17792 x i16], align 16
  %13 = bitcast [17792 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 35584, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 35584, i1 false)
  %14 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = add i32 %5, -1
  %18 = add i32 %17, %16
  %19 = lshr i32 %16, 1
  %20 = add nsw i32 %19, -1
  %21 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = lshr i16 %22, 1
  %24 = zext i16 %23 to i64
  %25 = mul nsw i32 %20, %1
  %26 = sext i32 %25 to i64
  %27 = sub nsw i64 0, %26
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = sub nsw i64 1, %24
  %30 = getelementptr inbounds i8, i8* %28, i64 %29
  %31 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = sub nsw i32 14, %32
  %34 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %35 = load i32, i32* %34, align 8
  %36 = sub i32 %33, %35
  %37 = sub nsw i32 22, %32
  %38 = and i32 %8, 15
  %39 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %40 = load i16*, i16** %39, align 8
  %41 = zext i16 %22 to i32
  %42 = mul nuw nsw i32 %38, %41
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds i16, i16* %40, i64 %43
  %45 = bitcast i16* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 1
  %47 = getelementptr inbounds i16, i16* %44, i64 8
  %48 = bitcast i16* %47 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <4 x i32>
  %52 = shl i32 1, %32
  %53 = ashr i32 %52, 1
  %54 = add nsw i32 %53, 16384
  %55 = insertelement <4 x i32> undef, i32 %54, i32 0
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> zeroinitializer
  %57 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %32, i32 0
  %58 = icmp sgt i32 %18, 0
  br i1 %58, label %59, label %161

59:                                               ; preds = %11
  %60 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %61 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> zeroinitializer
  %62 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %63 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %64 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %65 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> zeroinitializer
  %66 = icmp sgt i32 %4, 0
  %67 = bitcast <4 x i32> %65 to <8 x i16>
  %68 = bitcast <4 x i32> %64 to <8 x i16>
  %69 = bitcast <4 x i32> %63 to <8 x i16>
  %70 = bitcast <4 x i32> %62 to <8 x i16>
  %71 = bitcast <4 x i32> %61 to <8 x i16>
  %72 = bitcast <4 x i32> %60 to <8 x i16>
  %73 = sext i32 %4 to i64
  %74 = sext i32 %1 to i64
  %75 = zext i32 %18 to i64
  br label %76

76:                                               ; preds = %158, %59
  %77 = phi i64 [ 0, %59 ], [ %159, %158 ]
  br i1 %66, label %78, label %158

78:                                               ; preds = %76
  %79 = mul nsw i64 %77, %74
  %80 = mul nsw i64 %77, %73
  br label %81

81:                                               ; preds = %78, %81
  %82 = phi i64 [ 0, %78 ], [ %156, %81 ]
  %83 = add nsw i64 %82, %79
  %84 = getelementptr inbounds i8, i8* %30, i64 %83
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = or i64 %82, 4
  %88 = add nsw i64 %87, %79
  %89 = getelementptr inbounds i8, i8* %30, i64 %88
  %90 = bitcast i8* %89 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1
  %92 = shufflevector <16 x i8> %86, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = bitcast <16 x i8> %92 to <8 x i16>
  %94 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %93, <8 x i16> %67) #4
  %95 = shufflevector <16 x i8> %86, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %96 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %97 = bitcast <16 x i8> %96 to <8 x i16>
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %97, <8 x i16> %68) #4
  %99 = shufflevector <16 x i8> %91, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = bitcast <16 x i8> %99 to <8 x i16>
  %101 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %100, <8 x i16> %69) #4
  %102 = shufflevector <16 x i8> %91, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %104 = bitcast <16 x i8> %103 to <8 x i16>
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %104, <8 x i16> %70) #4
  %106 = shufflevector <16 x i8> %91, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %107 = shufflevector <16 x i8> %106, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = bitcast <16 x i8> %107 to <8 x i16>
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %108, <8 x i16> %71) #4
  %110 = shufflevector <16 x i8> %91, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %111 = shufflevector <16 x i8> %110, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = bitcast <16 x i8> %111 to <8 x i16>
  %113 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %112, <8 x i16> %72) #4
  %114 = add <4 x i32> %94, %56
  %115 = add <4 x i32> %114, %98
  %116 = add <4 x i32> %115, %101
  %117 = add <4 x i32> %116, %105
  %118 = add <4 x i32> %117, %109
  %119 = add <4 x i32> %118, %113
  %120 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %119, <4 x i32> %57) #4
  %121 = shufflevector <16 x i8> %86, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %122 = shufflevector <16 x i8> %121, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %123 = bitcast <16 x i8> %122 to <8 x i16>
  %124 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %123, <8 x i16> %67) #4
  %125 = shufflevector <16 x i8> %86, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = shufflevector <16 x i8> %125, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %127 = bitcast <16 x i8> %126 to <8 x i16>
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %127, <8 x i16> %68) #4
  %129 = shufflevector <16 x i8> %91, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %130 = shufflevector <16 x i8> %129, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %131 = bitcast <16 x i8> %130 to <8 x i16>
  %132 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %131, <8 x i16> %69) #4
  %133 = shufflevector <16 x i8> %91, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = shufflevector <16 x i8> %133, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %135 = bitcast <16 x i8> %134 to <8 x i16>
  %136 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %135, <8 x i16> %70) #4
  %137 = shufflevector <16 x i8> %91, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %138 = shufflevector <16 x i8> %137, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %139 = bitcast <16 x i8> %138 to <8 x i16>
  %140 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %139, <8 x i16> %71) #4
  %141 = shufflevector <16 x i8> %91, <16 x i8> undef, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = bitcast <16 x i8> %142 to <8 x i16>
  %144 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %143, <8 x i16> %72) #4
  %145 = add <4 x i32> %124, %56
  %146 = add <4 x i32> %145, %128
  %147 = add <4 x i32> %146, %132
  %148 = add <4 x i32> %147, %136
  %149 = add <4 x i32> %148, %140
  %150 = add <4 x i32> %149, %144
  %151 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %150, <4 x i32> %57) #4
  %152 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %120, <4 x i32> %151) #4
  %153 = add nsw i64 %82, %80
  %154 = getelementptr inbounds [17792 x i16], [17792 x i16]* %12, i64 0, i64 %153
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %155, align 2
  %156 = add nuw nsw i64 %82, 8
  %157 = icmp slt i64 %156, %73
  br i1 %157, label %81, label %158

158:                                              ; preds = %81, %76
  %159 = add nuw nsw i64 %77, 1
  %160 = icmp eq i64 %159, %75
  br i1 %160, label %161, label %76

161:                                              ; preds = %158, %11
  %162 = and i32 %9, 15
  %163 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 0
  %164 = load i16*, i16** %163, align 8
  %165 = mul nuw nsw i32 %162, %16
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds i16, i16* %164, i64 %166
  %168 = bitcast i16* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 1
  %170 = getelementptr inbounds i16, i16* %167, i64 8
  %171 = bitcast i16* %170 to i64*
  %172 = load i64, i64* %171, align 1
  %173 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %172, i32 0
  %174 = bitcast <2 x i64> %173 to <4 x i32>
  %175 = shl i32 1, %37
  %176 = shl i32 1, %35
  %177 = ashr i32 %176, 1
  %178 = add nsw i32 %177, %175
  %179 = insertelement <4 x i32> undef, i32 %178, i32 0
  %180 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> zeroinitializer
  %181 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %35, i32 0
  %182 = shl i32 1, %36
  %183 = ashr i32 %182, 1
  %184 = sub nsw i32 %37, %35
  %185 = shl i32 1, %184
  %186 = sub i32 %183, %185
  %187 = ashr i32 %185, 1
  %188 = sub i32 %186, %187
  %189 = insertelement <4 x i32> undef, i32 %188, i32 0
  %190 = shufflevector <4 x i32> %189, <4 x i32> undef, <4 x i32> zeroinitializer
  %191 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %36, i32 0
  %192 = icmp sgt i32 %5, 0
  br i1 %192, label %193, label %330

193:                                              ; preds = %161
  %194 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %195 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> zeroinitializer
  %196 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %197 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %198 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %199 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> zeroinitializer
  %200 = icmp sgt i32 %4, 0
  %201 = sext i32 %4 to i64
  %202 = shl nsw i32 %4, 1
  %203 = sext i32 %202 to i64
  %204 = mul nsw i32 %4, 3
  %205 = sext i32 %204 to i64
  %206 = shl nsw i32 %4, 2
  %207 = sext i32 %206 to i64
  %208 = mul nsw i32 %4, 5
  %209 = sext i32 %208 to i64
  %210 = mul nsw i32 %4, 6
  %211 = sext i32 %210 to i64
  %212 = mul nsw i32 %4, 7
  %213 = sext i32 %212 to i64
  %214 = shl nsw i32 %4, 3
  %215 = sext i32 %214 to i64
  %216 = mul nsw i32 %4, 9
  %217 = sext i32 %216 to i64
  %218 = mul nsw i32 %4, 10
  %219 = sext i32 %218 to i64
  %220 = mul nsw i32 %4, 11
  %221 = sext i32 %220 to i64
  %222 = bitcast <4 x i32> %199 to <8 x i16>
  %223 = bitcast <4 x i32> %198 to <8 x i16>
  %224 = bitcast <4 x i32> %197 to <8 x i16>
  %225 = bitcast <4 x i32> %196 to <8 x i16>
  %226 = bitcast <4 x i32> %195 to <8 x i16>
  %227 = bitcast <4 x i32> %194 to <8 x i16>
  %228 = sext i32 %3 to i64
  %229 = zext i32 %5 to i64
  br label %230

230:                                              ; preds = %327, %193
  %231 = phi i64 [ 0, %193 ], [ %328, %327 ]
  br i1 %200, label %232, label %327

232:                                              ; preds = %230
  %233 = mul nsw i64 %231, %201
  %234 = mul nsw i64 %231, %228
  br label %235

235:                                              ; preds = %232, %235
  %236 = phi i64 [ 0, %232 ], [ %325, %235 ]
  %237 = add nsw i64 %236, %233
  %238 = getelementptr inbounds [17792 x i16], [17792 x i16]* %12, i64 0, i64 %237
  %239 = bitcast i16* %238 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 16
  %241 = getelementptr inbounds i16, i16* %238, i64 %201
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 16
  %244 = shufflevector <8 x i16> %240, <8 x i16> %243, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %245 = getelementptr inbounds i16, i16* %238, i64 %203
  %246 = bitcast i16* %245 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 16
  %248 = getelementptr inbounds i16, i16* %238, i64 %205
  %249 = bitcast i16* %248 to <8 x i16>*
  %250 = load <8 x i16>, <8 x i16>* %249, align 16
  %251 = shufflevector <8 x i16> %247, <8 x i16> %250, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %252 = getelementptr inbounds i16, i16* %238, i64 %207
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 16
  %255 = getelementptr inbounds i16, i16* %238, i64 %209
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 16
  %258 = shufflevector <8 x i16> %254, <8 x i16> %257, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %259 = getelementptr inbounds i16, i16* %238, i64 %211
  %260 = bitcast i16* %259 to <8 x i16>*
  %261 = load <8 x i16>, <8 x i16>* %260, align 16
  %262 = getelementptr inbounds i16, i16* %238, i64 %213
  %263 = bitcast i16* %262 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 16
  %265 = shufflevector <8 x i16> %261, <8 x i16> %264, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %266 = getelementptr inbounds i16, i16* %238, i64 %215
  %267 = bitcast i16* %266 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 16
  %269 = getelementptr inbounds i16, i16* %238, i64 %217
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 16
  %272 = shufflevector <8 x i16> %268, <8 x i16> %271, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %273 = getelementptr inbounds i16, i16* %238, i64 %219
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 16
  %276 = getelementptr inbounds i16, i16* %238, i64 %221
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 16
  %279 = shufflevector <8 x i16> %275, <8 x i16> %278, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %280 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %244, <8 x i16> %222) #4
  %281 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %251, <8 x i16> %223) #4
  %282 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %258, <8 x i16> %224) #4
  %283 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %265, <8 x i16> %225) #4
  %284 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %272, <8 x i16> %226) #4
  %285 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %279, <8 x i16> %227) #4
  %286 = add <4 x i32> %281, %280
  %287 = add <4 x i32> %286, %282
  %288 = add <4 x i32> %287, %283
  %289 = add <4 x i32> %288, %284
  %290 = add <4 x i32> %289, %285
  %291 = shufflevector <8 x i16> %240, <8 x i16> %243, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %292 = shufflevector <8 x i16> %247, <8 x i16> %250, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %293 = shufflevector <8 x i16> %254, <8 x i16> %257, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %294 = shufflevector <8 x i16> %261, <8 x i16> %264, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %295 = shufflevector <8 x i16> %268, <8 x i16> %271, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %296 = shufflevector <8 x i16> %275, <8 x i16> %278, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %297 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %291, <8 x i16> %222) #4
  %298 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %292, <8 x i16> %223) #4
  %299 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %293, <8 x i16> %224) #4
  %300 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %294, <8 x i16> %225) #4
  %301 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %295, <8 x i16> %226) #4
  %302 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %296, <8 x i16> %227) #4
  %303 = add <4 x i32> %298, %297
  %304 = add <4 x i32> %303, %299
  %305 = add <4 x i32> %304, %300
  %306 = add <4 x i32> %305, %301
  %307 = add <4 x i32> %306, %302
  %308 = shufflevector <4 x i32> %290, <4 x i32> %307, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %309 = shufflevector <4 x i32> %290, <4 x i32> %307, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %310 = add <4 x i32> %308, %180
  %311 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %310, <4 x i32> %181) #4
  %312 = add <4 x i32> %309, %180
  %313 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %312, <4 x i32> %181) #4
  %314 = add <4 x i32> %311, %190
  %315 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %314, <4 x i32> %191) #4
  %316 = add <4 x i32> %313, %190
  %317 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %316, <4 x i32> %191) #4
  %318 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %315, <4 x i32> %317) #4
  %319 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %318, <8 x i16> undef) #4
  %320 = bitcast <16 x i8> %319 to <2 x i64>
  %321 = add nsw i64 %236, %234
  %322 = getelementptr inbounds i8, i8* %2, i64 %321
  %323 = extractelement <2 x i64> %320, i32 0
  %324 = bitcast i8* %322 to i64*
  store i64 %323, i64* %324, align 1
  %325 = add nuw nsw i64 %236, 8
  %326 = icmp slt i64 %325, %201
  br i1 %326, label %235, label %327

327:                                              ; preds = %235, %230
  %328 = add nuw nsw i64 %231, 1
  %329 = icmp eq i64 %328, %229
  br i1 %329, label %330, label %230

330:                                              ; preds = %327, %161
  call void @llvm.lifetime.end.p0i8(i64 35584, i8* nonnull %13) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_convolve_2d_sr_sse2(i8*, i32, i8*, i32, i32, i32, %struct.InterpFilterParams*, %struct.InterpFilterParams*, i32, i32, %struct.ConvolveParams*) local_unnamed_addr #0 {
  %12 = alloca [17792 x i16], align 16
  %13 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = icmp ugt i16 %14, 8
  br i1 %15, label %16, label %20

16:                                               ; preds = %11
  %17 = icmp slt i32 %4, 8
  br i1 %17, label %18, label %19

18:                                               ; preds = %16
  tail call void @av1_convolve_2d_sr_c(i8* %0, i32 %1, i8* %2, i32 %3, i32 %4, i32 %5, %struct.InterpFilterParams* %6, %struct.InterpFilterParams* %7, i32 %8, i32 %9, %struct.ConvolveParams* %10) #4
  br label %272

19:                                               ; preds = %16
  tail call void @av1_convolve_2d_sr_12tap_sse2(i8* %0, i32 %1, i8* %2, i32 %3, i32 %4, i32 %5, %struct.InterpFilterParams* %6, %struct.InterpFilterParams* %7, i32 %8, i32 %9, %struct.ConvolveParams* %10)
  br label %272

20:                                               ; preds = %11
  %21 = bitcast [17792 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 35584, i8* nonnull %21) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 35584, i1 false)
  %22 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 1
  %23 = load i16, i16* %22, align 8
  %24 = zext i16 %23 to i32
  %25 = add i32 %5, -1
  %26 = add i32 %25, %24
  %27 = lshr i32 %24, 1
  %28 = add nsw i32 %27, -1
  %29 = lshr i16 %14, 1
  %30 = zext i16 %29 to i64
  %31 = mul nsw i32 %28, %1
  %32 = sext i32 %31 to i64
  %33 = sub nsw i64 0, %32
  %34 = getelementptr inbounds i8, i8* %0, i64 %33
  %35 = sub nsw i64 1, %30
  %36 = getelementptr inbounds i8, i8* %34, i64 %35
  %37 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = sub nsw i32 14, %38
  %40 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %41 = load i32, i32* %40, align 8
  %42 = sub i32 %39, %41
  %43 = sub nsw i32 22, %38
  %44 = and i32 %8, 15
  %45 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %46 = load i16*, i16** %45, align 8
  %47 = zext i16 %14 to i32
  %48 = mul nuw nsw i32 %44, %47
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i16, i16* %46, i64 %49
  %51 = bitcast i16* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 1
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  %55 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = shl i32 1, %38
  %58 = ashr i32 %57, 1
  %59 = add nsw i32 %58, 16384
  %60 = insertelement <4 x i32> undef, i32 %59, i32 0
  %61 = shufflevector <4 x i32> %60, <4 x i32> undef, <4 x i32> zeroinitializer
  %62 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %38, i32 0
  %63 = icmp sgt i32 %26, 0
  br i1 %63, label %64, label %139

64:                                               ; preds = %20
  %65 = shufflevector <2 x i64> %56, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %66 = shufflevector <2 x i64> %56, <2 x i64> undef, <2 x i32> zeroinitializer
  %67 = shufflevector <2 x i64> %54, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %68 = shufflevector <2 x i64> %54, <2 x i64> undef, <2 x i32> zeroinitializer
  %69 = icmp sgt i32 %4, 0
  %70 = bitcast <2 x i64> %68 to <8 x i16>
  %71 = bitcast <2 x i64> %67 to <8 x i16>
  %72 = bitcast <2 x i64> %66 to <8 x i16>
  %73 = bitcast <2 x i64> %65 to <8 x i16>
  %74 = sext i32 %4 to i64
  %75 = sext i32 %1 to i64
  %76 = zext i32 %26 to i64
  br label %77

77:                                               ; preds = %136, %64
  %78 = phi i64 [ 0, %64 ], [ %137, %136 ]
  br i1 %69, label %79, label %136

79:                                               ; preds = %77
  %80 = mul nsw i64 %78, %75
  %81 = shl i64 %78, 7
  %82 = and i64 %81, 4294967168
  br label %83

83:                                               ; preds = %79, %83
  %84 = phi i64 [ 0, %79 ], [ %134, %83 ]
  %85 = add nsw i64 %84, %80
  %86 = getelementptr inbounds i8, i8* %36, i64 %85
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1
  %89 = shufflevector <16 x i8> %88, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %90 = bitcast <16 x i8> %89 to <8 x i16>
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %90, <8 x i16> %70) #4
  %92 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = bitcast <16 x i8> %93 to <8 x i16>
  %95 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %94, <8 x i16> %71) #4
  %96 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %97 = shufflevector <16 x i8> %96, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %98 = bitcast <16 x i8> %97 to <8 x i16>
  %99 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %98, <8 x i16> %72) #4
  %100 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = shufflevector <16 x i8> %100, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %102 = bitcast <16 x i8> %101 to <8 x i16>
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %73) #4
  %104 = add <4 x i32> %91, %61
  %105 = add <4 x i32> %104, %95
  %106 = add <4 x i32> %105, %99
  %107 = add <4 x i32> %106, %103
  %108 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %107, <4 x i32> %62) #4
  %109 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = bitcast <16 x i8> %110 to <8 x i16>
  %112 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %111, <8 x i16> %70) #4
  %113 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = shufflevector <16 x i8> %113, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = bitcast <16 x i8> %114 to <8 x i16>
  %116 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %115, <8 x i16> %71) #4
  %117 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = shufflevector <16 x i8> %117, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %119 = bitcast <16 x i8> %118 to <8 x i16>
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %72) #4
  %121 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %122 = shufflevector <16 x i8> %121, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %123 = bitcast <16 x i8> %122 to <8 x i16>
  %124 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %123, <8 x i16> %73) #4
  %125 = add <4 x i32> %112, %61
  %126 = add <4 x i32> %125, %116
  %127 = add <4 x i32> %126, %120
  %128 = add <4 x i32> %127, %124
  %129 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %128, <4 x i32> %62) #4
  %130 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %108, <4 x i32> %129) #4
  %131 = add nuw nsw i64 %84, %82
  %132 = getelementptr inbounds [17792 x i16], [17792 x i16]* %12, i64 0, i64 %131
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %133, align 16
  %134 = add nuw nsw i64 %84, 8
  %135 = icmp slt i64 %134, %74
  br i1 %135, label %83, label %136

136:                                              ; preds = %83, %77
  %137 = add nuw nsw i64 %78, 1
  %138 = icmp eq i64 %137, %76
  br i1 %138, label %139, label %77

139:                                              ; preds = %136, %20
  %140 = and i32 %9, 15
  %141 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 0
  %142 = load i16*, i16** %141, align 8
  %143 = mul nuw nsw i32 %140, %24
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds i16, i16* %142, i64 %144
  %146 = bitcast i16* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 1
  %148 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %149 = bitcast <4 x i32> %148 to <2 x i64>
  %150 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %151 = bitcast <4 x i32> %150 to <2 x i64>
  %152 = shl i32 1, %43
  %153 = shl i32 1, %41
  %154 = ashr i32 %153, 1
  %155 = add nsw i32 %154, %152
  %156 = insertelement <4 x i32> undef, i32 %155, i32 0
  %157 = shufflevector <4 x i32> %156, <4 x i32> undef, <4 x i32> zeroinitializer
  %158 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %41, i32 0
  %159 = shl i32 1, %42
  %160 = ashr i32 %159, 1
  %161 = sub nsw i32 %43, %41
  %162 = shl i32 1, %161
  %163 = sub i32 %160, %162
  %164 = ashr i32 %162, 1
  %165 = sub i32 %163, %164
  %166 = insertelement <4 x i32> undef, i32 %165, i32 0
  %167 = shufflevector <4 x i32> %166, <4 x i32> undef, <4 x i32> zeroinitializer
  %168 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %42, i32 0
  %169 = icmp sgt i32 %5, 0
  br i1 %169, label %170, label %271

170:                                              ; preds = %139
  %171 = shufflevector <2 x i64> %151, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %172 = shufflevector <2 x i64> %151, <2 x i64> undef, <2 x i32> zeroinitializer
  %173 = shufflevector <2 x i64> %149, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %174 = shufflevector <2 x i64> %149, <2 x i64> undef, <2 x i32> zeroinitializer
  %175 = icmp sgt i32 %4, 0
  %176 = bitcast <2 x i64> %174 to <8 x i16>
  %177 = bitcast <2 x i64> %173 to <8 x i16>
  %178 = bitcast <2 x i64> %172 to <8 x i16>
  %179 = bitcast <2 x i64> %171 to <8 x i16>
  %180 = sext i32 %4 to i64
  %181 = sext i32 %3 to i64
  %182 = zext i32 %5 to i64
  br label %183

183:                                              ; preds = %268, %170
  %184 = phi i64 [ 0, %170 ], [ %269, %268 ]
  br i1 %175, label %185, label %268

185:                                              ; preds = %183
  %186 = shl i64 %184, 7
  %187 = mul nsw i64 %184, %181
  br label %188

188:                                              ; preds = %185, %265
  %189 = phi i64 [ 0, %185 ], [ %266, %265 ]
  %190 = add i64 %186, %189
  %191 = and i64 %190, 4294967288
  %192 = getelementptr inbounds [17792 x i16], [17792 x i16]* %12, i64 0, i64 %191
  %193 = bitcast i16* %192 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = getelementptr inbounds i16, i16* %192, i64 128
  %196 = bitcast i16* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 16
  %198 = shufflevector <8 x i16> %194, <8 x i16> %197, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %199 = getelementptr inbounds i16, i16* %192, i64 256
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 16
  %202 = getelementptr inbounds i16, i16* %192, i64 384
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 16
  %205 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %206 = getelementptr inbounds i16, i16* %192, i64 512
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 16
  %209 = getelementptr inbounds i16, i16* %192, i64 640
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 16
  %212 = shufflevector <8 x i16> %208, <8 x i16> %211, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %213 = getelementptr inbounds i16, i16* %192, i64 768
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 16
  %216 = getelementptr inbounds i16, i16* %192, i64 896
  %217 = bitcast i16* %216 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 16
  %219 = shufflevector <8 x i16> %215, <8 x i16> %218, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %220 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %198, <8 x i16> %176) #4
  %221 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %205, <8 x i16> %177) #4
  %222 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %212, <8 x i16> %178) #4
  %223 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %219, <8 x i16> %179) #4
  %224 = add <4 x i32> %221, %220
  %225 = add <4 x i32> %224, %222
  %226 = add <4 x i32> %225, %223
  %227 = shufflevector <8 x i16> %194, <8 x i16> %197, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %228 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %229 = shufflevector <8 x i16> %208, <8 x i16> %211, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %230 = shufflevector <8 x i16> %215, <8 x i16> %218, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %231 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %227, <8 x i16> %176) #4
  %232 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %228, <8 x i16> %177) #4
  %233 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %229, <8 x i16> %178) #4
  %234 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %230, <8 x i16> %179) #4
  %235 = add <4 x i32> %232, %231
  %236 = add <4 x i32> %235, %233
  %237 = add <4 x i32> %236, %234
  %238 = shufflevector <4 x i32> %226, <4 x i32> %237, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %239 = shufflevector <4 x i32> %226, <4 x i32> %237, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %240 = add <4 x i32> %238, %157
  %241 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %240, <4 x i32> %158) #4
  %242 = add <4 x i32> %239, %157
  %243 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %242, <4 x i32> %158) #4
  %244 = add <4 x i32> %241, %167
  %245 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %244, <4 x i32> %168) #4
  %246 = add <4 x i32> %243, %167
  %247 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %246, <4 x i32> %168) #4
  %248 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %245, <4 x i32> %247) #4
  %249 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %248, <8 x i16> %248) #4
  %250 = add nsw i64 %189, %187
  %251 = getelementptr inbounds i8, i8* %2, i64 %250
  switch i32 %4, label %261 [
    i32 2, label %252
    i32 4, label %257
  ]

252:                                              ; preds = %188
  %253 = bitcast <16 x i8> %249 to <4 x i32>
  %254 = extractelement <4 x i32> %253, i32 0
  %255 = trunc i32 %254 to i16
  %256 = bitcast i8* %251 to i16*
  store i16 %255, i16* %256, align 2
  br label %265

257:                                              ; preds = %188
  %258 = bitcast <16 x i8> %249 to <4 x i32>
  %259 = extractelement <4 x i32> %258, i32 0
  %260 = bitcast i8* %251 to i32*
  store i32 %259, i32* %260, align 4
  br label %265

261:                                              ; preds = %188
  %262 = bitcast <16 x i8> %249 to <2 x i64>
  %263 = extractelement <2 x i64> %262, i32 0
  %264 = bitcast i8* %251 to i64*
  store i64 %263, i64* %264, align 1
  br label %265

265:                                              ; preds = %257, %261, %252
  %266 = add nuw nsw i64 %189, 8
  %267 = icmp slt i64 %266, %180
  br i1 %267, label %188, label %268

268:                                              ; preds = %265, %183
  %269 = add nuw nsw i64 %184, 1
  %270 = icmp eq i64 %269, %182
  br i1 %270, label %271, label %183

271:                                              ; preds = %268, %139
  call void @llvm.lifetime.end.p0i8(i64 35584, i8* nonnull %21) #4
  br label %272

272:                                              ; preds = %18, %19, %271
  ret void
}

declare void @av1_convolve_2d_sr_c(i8*, i32, i8*, i32, i32, i32, %struct.InterpFilterParams*, %struct.InterpFilterParams*, i32, i32, %struct.ConvolveParams*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dist_wtd_convolve_2d_copy_sse2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 1
  %9 = load i16*, i16** %8, align 8
  %10 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = sub i32 14, %13
  %15 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 %14, %16
  %18 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 7
  %21 = load i32, i32* %20, align 4
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  %23 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 8
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 9
  %26 = load i32, i32* %25, align 4
  %27 = trunc i32 %24 to i16
  %28 = insertelement <8 x i16> undef, i16 %27, i32 0
  %29 = shufflevector <8 x i16> %28, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = trunc i32 %26 to i16
  %31 = insertelement <8 x i16> undef, i16 %30, i32 0
  %32 = shufflevector <8 x i16> %31, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = shufflevector <8 x i16> %29, <8 x i16> %32, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %34 = sub nsw i32 22, %16
  %35 = sub i32 %34, %13
  %36 = shl i32 1, %35
  %37 = add nsw i32 %35, -1
  %38 = shl i32 1, %37
  %39 = add nsw i32 %38, %36
  %40 = trunc i32 %39 to i16
  %41 = insertelement <8 x i16> undef, i16 %40, i32 0
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <8 x i32> zeroinitializer
  %43 = sub nsw i32 14, %16
  %44 = sub i32 %43, %13
  %45 = shl i32 1, %44
  %46 = lshr i32 %45, 1
  %47 = trunc i32 %46 to i16
  %48 = insertelement <8 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <8 x i16> %48, <8 x i16> undef, <8 x i32> zeroinitializer
  %50 = and i32 %4, 15
  %51 = icmp eq i32 %50, 0
  %52 = icmp sgt i32 %5, 0
  br i1 %51, label %65, label %53

53:                                               ; preds = %7
  br i1 %52, label %54, label %205

54:                                               ; preds = %53
  %55 = icmp sgt i32 %4, 0
  %56 = bitcast <4 x i32> %22 to <8 x i16>
  %57 = icmp eq i32 %19, 0
  %58 = icmp eq i32 %21, 0
  %59 = sub <8 x i16> %49, %42
  %60 = icmp sgt i32 %4, 4
  %61 = sext i32 %1 to i64
  %62 = sext i32 %11 to i64
  %63 = sext i32 %3 to i64
  %64 = sext i32 %4 to i64
  br label %149

65:                                               ; preds = %7
  br i1 %52, label %66, label %205

66:                                               ; preds = %65
  %67 = icmp sgt i32 %4, 0
  %68 = bitcast <4 x i32> %22 to <8 x i16>
  %69 = icmp eq i32 %19, 0
  %70 = icmp eq i32 %21, 0
  %71 = sub <8 x i16> %49, %42
  %72 = sext i32 %1 to i64
  %73 = sext i32 %11 to i64
  %74 = sext i32 %3 to i64
  %75 = sext i32 %4 to i64
  br label %76

76:                                               ; preds = %143, %66
  %77 = phi i8* [ %0, %66 ], [ %144, %143 ]
  %78 = phi i8* [ %2, %66 ], [ %146, %143 ]
  %79 = phi i16* [ %9, %66 ], [ %145, %143 ]
  %80 = phi i32 [ 0, %66 ], [ %147, %143 ]
  br i1 %67, label %81, label %143

81:                                               ; preds = %76, %140
  %82 = phi i64 [ %141, %140 ], [ 0, %76 ]
  %83 = getelementptr inbounds i8, i8* %77, i64 %82
  %84 = bitcast i8* %83 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1
  %86 = shufflevector <16 x i8> %85, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %87 = shufflevector <16 x i8> %85, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %88 = bitcast <16 x i8> %86 to <8 x i16>
  %89 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %88, <8 x i16> %68) #4
  %90 = add <8 x i16> %89, %42
  %91 = bitcast <16 x i8> %87 to <8 x i16>
  %92 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %91, <8 x i16> %68) #4
  %93 = add <8 x i16> %92, %42
  %94 = getelementptr inbounds i16, i16* %79, i64 %82
  %95 = bitcast i16* %94 to <8 x i16>*
  br i1 %69, label %136, label %96

96:                                               ; preds = %81
  %97 = load <8 x i16>, <8 x i16>* %95, align 1
  %98 = or i64 %82, 8
  %99 = getelementptr inbounds i16, i16* %79, i64 %98
  %100 = bitcast i16* %99 to <2 x i64>*
  %101 = load <2 x i64>, <2 x i64>* %100, align 1
  br i1 %70, label %120, label %102

102:                                              ; preds = %96
  %103 = shufflevector <8 x i16> %97, <8 x i16> %90, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %104 = shufflevector <8 x i16> %97, <8 x i16> %90, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %103, <8 x i16> %33) #4
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %104, <8 x i16> %33) #4
  %107 = ashr <4 x i32> %105, <i32 4, i32 4, i32 4, i32 4>
  %108 = ashr <4 x i32> %106, <i32 4, i32 4, i32 4, i32 4>
  %109 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %107, <4 x i32> %108) #4
  %110 = add <8 x i16> %71, %109
  %111 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %110, i32 %44) #4
  %112 = bitcast <2 x i64> %101 to <8 x i16>
  %113 = shufflevector <8 x i16> %112, <8 x i16> %93, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %114 = shufflevector <8 x i16> %112, <8 x i16> %93, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %115 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %113, <8 x i16> %33) #4
  %116 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %114, <8 x i16> %33) #4
  %117 = ashr <4 x i32> %115, <i32 4, i32 4, i32 4, i32 4>
  %118 = ashr <4 x i32> %116, <i32 4, i32 4, i32 4, i32 4>
  %119 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %117, <4 x i32> %118) #4
  br label %128

120:                                              ; preds = %96
  %121 = add <8 x i16> %97, %90
  %122 = ashr <8 x i16> %121, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %123 = add <8 x i16> %71, %122
  %124 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %123, i32 %44) #4
  %125 = bitcast <2 x i64> %101 to <8 x i16>
  %126 = add <8 x i16> %93, %125
  %127 = ashr <8 x i16> %126, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %128

128:                                              ; preds = %102, %120
  %129 = phi <8 x i16> [ %111, %102 ], [ %124, %120 ]
  %130 = phi <8 x i16> [ %119, %102 ], [ %127, %120 ]
  %131 = add <8 x i16> %71, %130
  %132 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %131, i32 %44) #4
  %133 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %129, <8 x i16> %132) #4
  %134 = getelementptr inbounds i8, i8* %78, i64 %82
  %135 = bitcast i8* %134 to <16 x i8>*
  store <16 x i8> %133, <16 x i8>* %135, align 16
  br label %140

136:                                              ; preds = %81
  store <8 x i16> %90, <8 x i16>* %95, align 16
  %137 = or i64 %82, 8
  %138 = getelementptr inbounds i16, i16* %79, i64 %137
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %139, align 16
  br label %140

140:                                              ; preds = %136, %128
  %141 = add nuw nsw i64 %82, 16
  %142 = icmp slt i64 %141, %75
  br i1 %142, label %81, label %143

143:                                              ; preds = %140, %76
  %144 = getelementptr inbounds i8, i8* %77, i64 %72
  %145 = getelementptr inbounds i16, i16* %79, i64 %73
  %146 = getelementptr inbounds i8, i8* %78, i64 %74
  %147 = add nuw nsw i32 %80, 1
  %148 = icmp eq i32 %147, %5
  br i1 %148, label %205, label %76

149:                                              ; preds = %199, %54
  %150 = phi i8* [ %0, %54 ], [ %200, %199 ]
  %151 = phi i8* [ %2, %54 ], [ %202, %199 ]
  %152 = phi i16* [ %9, %54 ], [ %201, %199 ]
  %153 = phi i32 [ 0, %54 ], [ %203, %199 ]
  br i1 %55, label %154, label %199

154:                                              ; preds = %149, %196
  %155 = phi i64 [ %197, %196 ], [ 0, %149 ]
  %156 = getelementptr inbounds i8, i8* %150, i64 %155
  %157 = bitcast i8* %156 to i64*
  %158 = load i64, i64* %157, align 1
  %159 = insertelement <2 x i64> undef, i64 %158, i32 0
  %160 = bitcast <2 x i64> %159 to <16 x i8>
  %161 = shufflevector <16 x i8> %160, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %162 = bitcast <16 x i8> %161 to <8 x i16>
  %163 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %162, <8 x i16> %56) #4
  %164 = add <8 x i16> %163, %42
  %165 = getelementptr inbounds i16, i16* %152, i64 %155
  %166 = bitcast i16* %165 to <8 x i16>*
  br i1 %57, label %195, label %167

167:                                              ; preds = %154
  %168 = load <8 x i16>, <8 x i16>* %166, align 1
  br i1 %58, label %177, label %169

169:                                              ; preds = %167
  %170 = shufflevector <8 x i16> %168, <8 x i16> %164, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %171 = shufflevector <8 x i16> %168, <8 x i16> %164, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %33) #4
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> %33) #4
  %174 = ashr <4 x i32> %172, <i32 4, i32 4, i32 4, i32 4>
  %175 = ashr <4 x i32> %173, <i32 4, i32 4, i32 4, i32 4>
  %176 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %174, <4 x i32> %175) #4
  br label %180

177:                                              ; preds = %167
  %178 = add <8 x i16> %168, %164
  %179 = ashr <8 x i16> %178, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %180

180:                                              ; preds = %169, %177
  %181 = phi <8 x i16> [ %176, %169 ], [ %179, %177 ]
  %182 = add <8 x i16> %59, %181
  %183 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %182, i32 %44) #4
  %184 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %183, <8 x i16> %183) #4
  br i1 %60, label %185, label %190

185:                                              ; preds = %180
  %186 = bitcast <16 x i8> %184 to <2 x i64>
  %187 = getelementptr inbounds i8, i8* %151, i64 %155
  %188 = extractelement <2 x i64> %186, i32 0
  %189 = bitcast i8* %187 to i64*
  store i64 %188, i64* %189, align 1
  br label %196

190:                                              ; preds = %180
  %191 = bitcast <16 x i8> %184 to <4 x i32>
  %192 = extractelement <4 x i32> %191, i32 0
  %193 = getelementptr inbounds i8, i8* %151, i64 %155
  %194 = bitcast i8* %193 to i32*
  store i32 %192, i32* %194, align 4
  br label %196

195:                                              ; preds = %154
  store <8 x i16> %164, <8 x i16>* %166, align 16
  br label %196

196:                                              ; preds = %185, %190, %195
  %197 = add nuw nsw i64 %155, 8
  %198 = icmp slt i64 %197, %64
  br i1 %198, label %154, label %199

199:                                              ; preds = %196, %149
  %200 = getelementptr inbounds i8, i8* %150, i64 %61
  %201 = getelementptr inbounds i16, i16* %152, i64 %62
  %202 = getelementptr inbounds i8, i8* %151, i64 %63
  %203 = add nuw nsw i32 %153, 1
  %204 = icmp eq i32 %203, %5
  br i1 %204, label %205, label %149

205:                                              ; preds = %199, %143, %53, %65
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16>, i32) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
