; ModuleID = '../../third_party/opus/src/silk/stereo_LR_to_MS.c'
source_filename = "../../third_party/opus/src/silk/stereo_LR_to_MS.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.stereo_enc_state = type { [2 x i16], [2 x i16], [2 x i16], [4 x i32], i16, i16, i16, [3 x [2 x [3 x i8]]], [3 x i8] }

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_stereo_LR_to_MS(%struct.stereo_enc_state*, i16* nocapture, i16* nocapture, [3 x i8]*, i8* nocapture, i32* nocapture, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = alloca [2 x i32], align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = bitcast [2 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #4
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 0
  store i32 -1431655766, i32* %16, align 4
  %17 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 -1431655766, i32* %17, align 4
  %18 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #4
  store i32 -1431655766, i32* %13, align 4
  %19 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #4
  store i32 -1431655766, i32* %14, align 4
  %20 = getelementptr inbounds i16, i16* %1, i64 -2
  %21 = add i32 %10, 2
  %22 = sext i32 %21 to i64
  %23 = shl nsw i64 %22, 1
  %24 = alloca i16, i64 %22, align 16
  %25 = bitcast i16* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 %23, i1 false)
  %26 = icmp sgt i32 %21, 0
  br i1 %26, label %27, label %102

27:                                               ; preds = %11
  %28 = zext i32 %21 to i64
  %29 = icmp ult i32 %21, 8
  br i1 %29, label %73, label %30

30:                                               ; preds = %27
  %31 = add nsw i64 %28, -2
  %32 = getelementptr i16, i16* %1, i64 %31
  %33 = getelementptr i16, i16* %2, i64 -2
  %34 = getelementptr i16, i16* %2, i64 %31
  %35 = icmp ult i16* %20, %34
  %36 = icmp ult i16* %33, %32
  %37 = and i1 %35, %36
  br i1 %37, label %73, label %38

38:                                               ; preds = %30
  %39 = and i64 %28, 4294967288
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %69, %40 ]
  %42 = add nsw i64 %41, -2
  %43 = getelementptr inbounds i16, i16* %1, i64 %42
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !2, !noalias !5
  %46 = sext <8 x i16> %45 to <8 x i32>
  %47 = getelementptr inbounds i16, i16* %2, i64 %42
  %48 = bitcast i16* %47 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 2, !alias.scope !5
  %50 = sext <8 x i16> %49 to <8 x i32>
  %51 = add nsw <8 x i32> %50, %46
  %52 = sub nsw <8 x i32> %46, %50
  %53 = lshr <8 x i32> %51, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %54 = and <8 x i32> %51, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %55 = add nuw <8 x i32> %53, %54
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = getelementptr inbounds i16, i16* %20, i64 %41
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %58, align 2, !alias.scope !2, !noalias !5
  %59 = ashr <8 x i32> %52, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %60 = and <8 x i32> %52, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %61 = add nsw <8 x i32> %59, %60
  %62 = icmp sgt <8 x i32> %61, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %63 = select <8 x i1> %62, <8 x i32> %61, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %64 = icmp slt <8 x i32> %63, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %65 = select <8 x i1> %64, <8 x i32> %63, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %66 = trunc <8 x i32> %65 to <8 x i16>
  %67 = getelementptr inbounds i16, i16* %24, i64 %41
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %68, align 16, !alias.scope !7
  %69 = add i64 %41, 8
  %70 = icmp eq i64 %69, %39
  br i1 %70, label %71, label %40, !llvm.loop !9

71:                                               ; preds = %40
  %72 = icmp eq i64 %39, %28
  br i1 %72, label %102, label %73

73:                                               ; preds = %71, %30, %27
  %74 = phi i64 [ 0, %30 ], [ 0, %27 ], [ %39, %71 ]
  br label %75

75:                                               ; preds = %73, %75
  %76 = phi i64 [ %100, %75 ], [ %74, %73 ]
  %77 = add nsw i64 %76, -2
  %78 = getelementptr inbounds i16, i16* %1, i64 %77
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = getelementptr inbounds i16, i16* %2, i64 %77
  %82 = load i16, i16* %81, align 2
  %83 = sext i16 %82 to i32
  %84 = add nsw i32 %83, %80
  %85 = sub nsw i32 %80, %83
  %86 = lshr i32 %84, 1
  %87 = and i32 %84, 1
  %88 = add nuw i32 %86, %87
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %20, i64 %76
  store i16 %89, i16* %90, align 2
  %91 = ashr i32 %85, 1
  %92 = and i32 %85, 1
  %93 = add nsw i32 %91, %92
  %94 = icmp sgt i32 %93, -32768
  %95 = select i1 %94, i32 %93, i32 -32768
  %96 = icmp slt i32 %95, 32767
  %97 = select i1 %96, i32 %95, i32 32767
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %24, i64 %76
  store i16 %98, i16* %99, align 2
  %100 = add nuw nsw i64 %76, 1
  %101 = icmp eq i64 %100, %28
  br i1 %101, label %102, label %75, !llvm.loop !11

102:                                              ; preds = %75, %71, %11
  %103 = getelementptr inbounds %struct.stereo_enc_state, %struct.stereo_enc_state* %0, i64 0, i32 1, i64 0
  %104 = bitcast i16* %103 to i32*
  %105 = bitcast i16* %20 to i32*
  %106 = load i32, i32* %104, align 4
  store i32 %106, i32* %105, align 2
  %107 = getelementptr inbounds %struct.stereo_enc_state, %struct.stereo_enc_state* %0, i64 0, i32 2, i64 0
  %108 = bitcast i16* %107 to i32*
  %109 = bitcast i16* %24 to i32*
  %110 = load i32, i32* %108, align 4
  store i32 %110, i32* %109, align 16
  %111 = sext i32 %10 to i64
  %112 = getelementptr inbounds i16, i16* %20, i64 %111
  %113 = bitcast i16* %112 to i32*
  %114 = load i32, i32* %113, align 2
  store i32 %114, i32* %104, align 4
  %115 = getelementptr inbounds i16, i16* %24, i64 %111
  %116 = bitcast i16* %115 to i32*
  %117 = load i32, i32* %116, align 2
  store i32 %117, i32* %108, align 4
  %118 = shl nsw i64 %111, 1
  %119 = alloca i16, i64 %111, align 16
  %120 = bitcast i16* %119 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %120, i8 -86, i64 %118, i1 false)
  %121 = alloca i16, i64 %111, align 16
  %122 = bitcast i16* %121 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %122, i8 -86, i64 %118, i1 false)
  %123 = icmp sgt i32 %10, 0
  %124 = trunc i32 %110 to i16
  %125 = lshr i32 %110, 16
  %126 = trunc i32 %125 to i16
  br i1 %123, label %132, label %127

127:                                              ; preds = %102
  %128 = alloca i16, i64 %111, align 16
  %129 = bitcast i16* %128 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %129, i8 -86, i64 %118, i1 false)
  %130 = alloca i16, i64 %111, align 16
  %131 = bitcast i16* %130 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %131, i8 -86, i64 %118, i1 false)
  br label %187

132:                                              ; preds = %102
  %133 = zext i32 %10 to i64
  %134 = load i16, i16* %20, align 2
  %135 = getelementptr inbounds i16, i16* %1, i64 -1
  %136 = load i16, i16* %135, align 2
  br label %137

137:                                              ; preds = %137, %132
  %138 = phi i16 [ %136, %132 ], [ %143, %137 ]
  %139 = phi i16 [ %134, %132 ], [ %138, %137 ]
  %140 = phi i64 [ 0, %132 ], [ %146, %137 ]
  %141 = sext i16 %139 to i32
  %142 = getelementptr inbounds i16, i16* %1, i64 %140
  %143 = load i16, i16* %142, align 2
  %144 = sext i16 %143 to i32
  %145 = add nsw i32 %144, %141
  %146 = add nuw nsw i64 %140, 1
  %147 = sext i16 %138 to i32
  %148 = shl nsw i32 %147, 1
  %149 = add nsw i32 %145, %148
  %150 = lshr i32 %149, 1
  %151 = add nuw i32 %150, 1
  %152 = lshr i32 %151, 1
  %153 = trunc i32 %152 to i16
  %154 = getelementptr inbounds i16, i16* %119, i64 %140
  store i16 %153, i16* %154, align 2
  %155 = sub i16 %138, %153
  %156 = getelementptr inbounds i16, i16* %121, i64 %140
  store i16 %155, i16* %156, align 2
  %157 = icmp eq i64 %146, %133
  br i1 %157, label %158, label %137

158:                                              ; preds = %137
  %159 = alloca i16, i64 %111, align 16
  %160 = bitcast i16* %159 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %160, i8 -86, i64 %118, i1 false)
  %161 = alloca i16, i64 %111, align 16
  %162 = bitcast i16* %161 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %162, i8 -86, i64 %118, i1 false)
  br i1 %123, label %163, label %187

163:                                              ; preds = %158
  %164 = zext i32 %10 to i64
  br label %165

165:                                              ; preds = %165, %163
  %166 = phi i16 [ %126, %163 ], [ %172, %165 ]
  %167 = phi i16 [ %124, %163 ], [ %166, %165 ]
  %168 = phi i64 [ 0, %163 ], [ %175, %165 ]
  %169 = sext i16 %167 to i32
  %170 = add nuw nsw i64 %168, 2
  %171 = getelementptr inbounds i16, i16* %24, i64 %170
  %172 = load i16, i16* %171, align 2
  %173 = sext i16 %172 to i32
  %174 = add nsw i32 %173, %169
  %175 = add nuw nsw i64 %168, 1
  %176 = sext i16 %166 to i32
  %177 = shl nsw i32 %176, 1
  %178 = add nsw i32 %174, %177
  %179 = lshr i32 %178, 1
  %180 = add nuw i32 %179, 1
  %181 = lshr i32 %180, 1
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds i16, i16* %159, i64 %168
  store i16 %182, i16* %183, align 2
  %184 = sub i16 %166, %182
  %185 = getelementptr inbounds i16, i16* %161, i64 %168
  store i16 %184, i16* %185, align 2
  %186 = icmp eq i64 %175, %164
  br i1 %186, label %187, label %165

187:                                              ; preds = %165, %127, %158
  %188 = phi i16* [ %130, %127 ], [ %161, %158 ], [ %161, %165 ]
  %189 = phi i16* [ %128, %127 ], [ %159, %158 ], [ %159, %165 ]
  %190 = mul nsw i32 %9, 10
  %191 = icmp eq i32 %190, %10
  %192 = shl i32 %7, 16
  %193 = ashr exact i32 %192, 16
  %194 = mul nsw i32 %193, %193
  %195 = zext i32 %194 to i64
  %196 = select i1 %191, i64 328, i64 655
  %197 = mul nuw nsw i64 %196, %195
  %198 = lshr i64 %197, 16
  %199 = trunc i64 %198 to i32
  %200 = getelementptr inbounds %struct.stereo_enc_state, %struct.stereo_enc_state* %0, i64 0, i32 3, i64 0
  %201 = call i32 @silk_stereo_find_predictor(i32* nonnull %13, i16* nonnull %119, i16* nonnull %189, i32* %200, i32 %10, i32 %199) #4
  store i32 %201, i32* %16, align 4
  %202 = getelementptr inbounds %struct.stereo_enc_state, %struct.stereo_enc_state* %0, i64 0, i32 3, i64 2
  %203 = call i32 @silk_stereo_find_predictor(i32* nonnull %14, i16* nonnull %121, i16* nonnull %188, i32* %202, i32 %10, i32 %199) #4
  store i32 %203, i32* %17, align 4
  %204 = load i32, i32* %14, align 4
  %205 = load i32, i32* %13, align 4
  %206 = shl i32 %205, 16
  %207 = ashr exact i32 %206, 16
  %208 = mul nsw i32 %207, 3
  %209 = add nsw i32 %208, %204
  %210 = icmp slt i32 %209, 65536
  %211 = select i1 %210, i32 %209, i32 65536
  %212 = select i1 %191, i32 1200, i32 600
  %213 = sub nsw i32 %6, %212
  %214 = icmp sgt i32 %213, 1
  %215 = select i1 %214, i32 %213, i32 1
  %216 = shl i32 %9, 16
  %217 = ashr exact i32 %216, 16
  %218 = mul nsw i32 %217, 600
  %219 = add nsw i32 %218, 2000
  %220 = mul nsw i32 %211, 3
  %221 = add nsw i32 %220, 851968
  %222 = call i32 @llvm.ctlz.i32(i32 %215, i1 false) #4, !range !12
  %223 = add nsw i32 %222, -1
  %224 = shl i32 %215, %223
  %225 = icmp slt i32 %221, 0
  %226 = sub i32 -851968, %220
  %227 = select i1 %225, i32 %226, i32 %221
  %228 = call i32 @llvm.ctlz.i32(i32 %227, i1 false) #4, !range !12
  %229 = add nsw i32 %228, -1
  %230 = shl i32 %221, %229
  %231 = ashr i32 %230, 16
  %232 = sdiv i32 536870911, %231
  %233 = sext i32 %224 to i64
  %234 = zext i32 %232 to i64
  %235 = shl i64 %234, 48
  %236 = ashr exact i64 %235, 48
  %237 = mul nsw i64 %236, %233
  %238 = sext i32 %230 to i64
  %239 = ashr i64 %237, 16
  %240 = mul nsw i64 %239, %238
  %241 = lshr i64 %240, 29
  %242 = trunc i64 %241 to i32
  %243 = and i32 %242, -8
  %244 = sub i32 %224, %243
  %245 = sext i32 %244 to i64
  %246 = mul nsw i64 %236, %245
  %247 = lshr i64 %246, 16
  %248 = add nsw i64 %247, %239
  %249 = trunc i64 %248 to i32
  %250 = sub nsw i32 1, %228
  %251 = add nuw nsw i32 %222, 9
  %252 = add nsw i32 %251, %250
  %253 = icmp slt i32 %252, 0
  br i1 %253, label %254, label %272

254:                                              ; preds = %187
  %255 = sub nsw i32 0, %252
  %256 = ashr i32 -2147483648, %255
  %257 = lshr i32 2147483647, %255
  %258 = icmp sgt i32 %256, %257
  br i1 %258, label %259, label %264

259:                                              ; preds = %254
  %260 = icmp slt i32 %256, %249
  br i1 %260, label %269, label %261

261:                                              ; preds = %259
  %262 = icmp sgt i32 %257, %249
  %263 = select i1 %262, i32 %257, i32 %249
  br label %269

264:                                              ; preds = %254
  %265 = icmp slt i32 %257, %249
  br i1 %265, label %269, label %266

266:                                              ; preds = %264
  %267 = icmp sgt i32 %256, %249
  %268 = select i1 %267, i32 %256, i32 %249
  br label %269

269:                                              ; preds = %266, %264, %261, %259
  %270 = phi i32 [ %256, %259 ], [ %263, %261 ], [ %257, %264 ], [ %268, %266 ]
  %271 = shl i32 %270, %255
  br label %276

272:                                              ; preds = %187
  %273 = icmp slt i32 %252, 32
  %274 = ashr i32 %249, %252
  %275 = select i1 %273, i32 %274, i32 0
  br label %276

276:                                              ; preds = %272, %269
  %277 = phi i32 [ %271, %269 ], [ %275, %272 ]
  store i32 %277, i32* %5, align 4
  %278 = icmp slt i32 %277, %219
  br i1 %278, label %279, label %355

279:                                              ; preds = %276
  store i32 %219, i32* %5, align 4
  %280 = sub nsw i32 %215, %219
  %281 = getelementptr inbounds i32, i32* %5, i64 1
  store i32 %280, i32* %281, align 4
  %282 = shl i32 %280, 1
  %283 = sub nsw i32 %282, %219
  %284 = add nsw i32 %220, 65536
  %285 = sext i32 %284 to i64
  %286 = zext i32 %219 to i64
  %287 = shl i64 %286, 48
  %288 = ashr exact i64 %287, 48
  %289 = mul nsw i64 %288, %285
  %290 = lshr i64 %289, 16
  %291 = trunc i64 %290 to i32
  %292 = icmp slt i32 %283, 0
  %293 = sub nsw i32 0, %283
  %294 = select i1 %292, i32 %293, i32 %283
  %295 = call i32 @llvm.ctlz.i32(i32 %294, i1 false) #4, !range !12
  %296 = add nsw i32 %295, -1
  %297 = shl i32 %283, %296
  %298 = icmp slt i32 %291, 0
  %299 = sub nsw i32 0, %291
  %300 = select i1 %298, i32 %299, i32 %291
  %301 = call i32 @llvm.ctlz.i32(i32 %300, i1 false) #4, !range !12
  %302 = add nsw i32 %301, -1
  %303 = shl i32 %291, %302
  %304 = ashr i32 %303, 16
  %305 = sdiv i32 536870911, %304
  %306 = sext i32 %297 to i64
  %307 = zext i32 %305 to i64
  %308 = shl i64 %307, 48
  %309 = ashr exact i64 %308, 48
  %310 = mul nsw i64 %309, %306
  %311 = sext i32 %303 to i64
  %312 = ashr i64 %310, 16
  %313 = mul nsw i64 %312, %311
  %314 = lshr i64 %313, 29
  %315 = trunc i64 %314 to i32
  %316 = and i32 %315, -8
  %317 = sub i32 %297, %316
  %318 = sext i32 %317 to i64
  %319 = mul nsw i64 %309, %318
  %320 = lshr i64 %319, 16
  %321 = add nsw i64 %320, %312
  %322 = trunc i64 %321 to i32
  %323 = sub nsw i32 1, %301
  %324 = add nuw nsw i32 %295, 12
  %325 = add nsw i32 %324, %323
  %326 = icmp slt i32 %325, 0
  br i1 %326, label %327, label %345

327:                                              ; preds = %279
  %328 = sub nsw i32 0, %325
  %329 = ashr i32 -2147483648, %328
  %330 = lshr i32 2147483647, %328
  %331 = icmp sgt i32 %329, %330
  br i1 %331, label %332, label %337

332:                                              ; preds = %327
  %333 = icmp slt i32 %329, %322
  br i1 %333, label %342, label %334

334:                                              ; preds = %332
  %335 = icmp sgt i32 %330, %322
  %336 = select i1 %335, i32 %330, i32 %322
  br label %342

337:                                              ; preds = %327
  %338 = icmp slt i32 %330, %322
  br i1 %338, label %342, label %339

339:                                              ; preds = %337
  %340 = icmp sgt i32 %329, %322
  %341 = select i1 %340, i32 %329, i32 %322
  br label %342

342:                                              ; preds = %339, %337, %334, %332
  %343 = phi i32 [ %329, %332 ], [ %336, %334 ], [ %330, %337 ], [ %341, %339 ]
  %344 = shl i32 %343, %328
  br label %349

345:                                              ; preds = %279
  %346 = icmp slt i32 %325, 32
  %347 = ashr i32 %322, %325
  %348 = select i1 %346, i32 %347, i32 0
  br label %349

349:                                              ; preds = %345, %342
  %350 = phi i32 [ %344, %342 ], [ %348, %345 ]
  %351 = icmp sgt i32 %350, 0
  %352 = select i1 %351, i32 %350, i32 0
  %353 = icmp slt i32 %352, 16384
  %354 = select i1 %353, i32 %352, i32 16384
  br label %358

355:                                              ; preds = %276
  %356 = sub nsw i32 %215, %277
  %357 = getelementptr inbounds i32, i32* %5, i64 1
  store i32 %356, i32* %357, align 4
  br label %358

358:                                              ; preds = %349, %355
  %359 = phi i32 [ 16384, %355 ], [ %354, %349 ]
  %360 = getelementptr inbounds %struct.stereo_enc_state, %struct.stereo_enc_state* %0, i64 0, i32 4
  %361 = load i16, i16* %360, align 4
  %362 = sext i16 %361 to i32
  %363 = sub nsw i32 %359, %362
  %364 = sext i32 %363 to i64
  %365 = shl i64 %198, 48
  %366 = ashr exact i64 %365, 48
  %367 = mul nsw i64 %366, %364
  %368 = lshr i64 %367, 16
  %369 = trunc i64 %368 to i16
  %370 = add i16 %361, %369
  store i16 %370, i16* %360, align 4
  store i8 0, i8* %4, align 1
  %371 = icmp eq i32 %8, 0
  br i1 %371, label %373, label %372

372:                                              ; preds = %358
  store i32 0, i32* %16, align 4
  store i32 0, i32* %17, align 4
  call void @silk_stereo_quant_pred(i32* nonnull %16, [3 x i8]* %3) #4
  br label %443

373:                                              ; preds = %358
  %374 = getelementptr inbounds %struct.stereo_enc_state, %struct.stereo_enc_state* %0, i64 0, i32 5
  %375 = load i16, i16* %374, align 2
  %376 = icmp eq i16 %375, 0
  %377 = shl nsw i32 %215, 3
  br i1 %376, label %378, label %403

378:                                              ; preds = %373
  %379 = mul nsw i32 %219, 13
  %380 = icmp slt i32 %377, %379
  br i1 %380, label %381, label %383

381:                                              ; preds = %378
  %382 = load i16, i16* %360, align 4
  br label %391

383:                                              ; preds = %378
  %384 = sext i32 %211 to i64
  %385 = load i16, i16* %360, align 4
  %386 = sext i16 %385 to i64
  %387 = mul nsw i64 %386, %384
  %388 = lshr i64 %387, 16
  %389 = trunc i64 %388 to i32
  %390 = icmp slt i32 %389, 819
  br i1 %390, label %391, label %427

391:                                              ; preds = %381, %383
  %392 = phi i16 [ %382, %381 ], [ %385, %383 ]
  %393 = sext i16 %392 to i32
  %394 = shl i32 %201, 16
  %395 = ashr exact i32 %394, 16
  %396 = mul nsw i32 %395, %393
  %397 = ashr i32 %396, 14
  store i32 %397, i32* %16, align 4
  %398 = shl i32 %203, 16
  %399 = ashr exact i32 %398, 16
  %400 = mul nsw i32 %399, %393
  %401 = ashr i32 %400, 14
  store i32 %401, i32* %17, align 4
  call void @silk_stereo_quant_pred(i32* nonnull %16, [3 x i8]* %3) #4
  store i32 0, i32* %16, align 4
  store i32 0, i32* %17, align 4
  store i32 %215, i32* %5, align 4
  %402 = getelementptr inbounds i32, i32* %5, i64 1
  store i32 0, i32* %402, align 4
  store i8 1, i8* %4, align 1
  br label %447

403:                                              ; preds = %373
  %404 = mul nsw i32 %219, 11
  %405 = icmp slt i32 %377, %404
  br i1 %405, label %406, label %408

406:                                              ; preds = %403
  %407 = load i16, i16* %360, align 4
  br label %416

408:                                              ; preds = %403
  %409 = sext i32 %211 to i64
  %410 = load i16, i16* %360, align 4
  %411 = sext i16 %410 to i64
  %412 = mul nsw i64 %411, %409
  %413 = lshr i64 %412, 16
  %414 = trunc i64 %413 to i32
  %415 = icmp slt i32 %414, 328
  br i1 %415, label %416, label %427

416:                                              ; preds = %406, %408
  %417 = phi i16 [ %407, %406 ], [ %410, %408 ]
  %418 = sext i16 %417 to i32
  %419 = shl i32 %201, 16
  %420 = ashr exact i32 %419, 16
  %421 = mul nsw i32 %420, %418
  %422 = ashr i32 %421, 14
  store i32 %422, i32* %16, align 4
  %423 = shl i32 %203, 16
  %424 = ashr exact i32 %423, 16
  %425 = mul nsw i32 %424, %418
  %426 = ashr i32 %425, 14
  store i32 %426, i32* %17, align 4
  call void @silk_stereo_quant_pred(i32* nonnull %16, [3 x i8]* %3) #4
  store i32 0, i32* %16, align 4
  store i32 0, i32* %17, align 4
  br label %443

427:                                              ; preds = %383, %408
  %428 = phi i16 [ %385, %383 ], [ %410, %408 ]
  %429 = icmp sgt i16 %428, 15565
  br i1 %429, label %430, label %431

430:                                              ; preds = %427
  call void @silk_stereo_quant_pred(i32* nonnull %16, [3 x i8]* %3) #4
  br label %443

431:                                              ; preds = %427
  %432 = sext i16 %428 to i32
  %433 = shl i32 %201, 16
  %434 = ashr exact i32 %433, 16
  %435 = mul nsw i32 %434, %432
  %436 = ashr i32 %435, 14
  store i32 %436, i32* %16, align 4
  %437 = shl i32 %203, 16
  %438 = ashr exact i32 %437, 16
  %439 = mul nsw i32 %438, %432
  %440 = ashr i32 %439, 14
  store i32 %440, i32* %17, align 4
  call void @silk_stereo_quant_pred(i32* nonnull %16, [3 x i8]* %3) #4
  %441 = load i16, i16* %360, align 4
  %442 = sext i16 %441 to i32
  br label %443

443:                                              ; preds = %430, %431, %416, %372
  %444 = phi i32 [ %442, %431 ], [ 16384, %430 ], [ 0, %416 ], [ 0, %372 ]
  %445 = load i8, i8* %4, align 1
  %446 = icmp eq i8 %445, 1
  br i1 %446, label %447, label %460

447:                                              ; preds = %391, %443
  %448 = phi i32 [ 0, %391 ], [ %444, %443 ]
  %449 = shl nsw i32 %9, 3
  %450 = sub nsw i32 %10, %449
  %451 = getelementptr inbounds %struct.stereo_enc_state, %struct.stereo_enc_state* %0, i64 0, i32 6
  %452 = load i16, i16* %451, align 4
  %453 = trunc i32 %450 to i16
  %454 = add i16 %452, %453
  store i16 %454, i16* %451, align 4
  %455 = sext i16 %454 to i32
  %456 = mul nsw i32 %9, 5
  %457 = icmp sgt i32 %456, %455
  br i1 %457, label %458, label %459

458:                                              ; preds = %447
  store i8 0, i8* %4, align 1
  br label %466

459:                                              ; preds = %447
  store i16 10000, i16* %451, align 4
  br label %462

460:                                              ; preds = %443
  %461 = getelementptr inbounds %struct.stereo_enc_state, %struct.stereo_enc_state* %0, i64 0, i32 6
  store i16 0, i16* %461, align 4
  br label %462

462:                                              ; preds = %459, %460
  %463 = phi i32 [ %444, %460 ], [ %448, %459 ]
  %464 = load i8, i8* %4, align 1
  %465 = icmp eq i8 %464, 0
  br i1 %465, label %466, label %475

466:                                              ; preds = %458, %462
  %467 = phi i32 [ %448, %458 ], [ %463, %462 ]
  %468 = getelementptr inbounds i32, i32* %5, i64 1
  %469 = load i32, i32* %468, align 4
  %470 = icmp slt i32 %469, 1
  br i1 %470, label %471, label %475

471:                                              ; preds = %466
  store i32 1, i32* %468, align 4
  %472 = icmp sgt i32 %215, 2
  %473 = add i32 %213, -1
  %474 = select i1 %472, i32 %473, i32 1
  store i32 %474, i32* %5, align 4
  br label %475

475:                                              ; preds = %471, %466, %462
  %476 = phi i32 [ %467, %471 ], [ %467, %466 ], [ %463, %462 ]
  %477 = getelementptr inbounds %struct.stereo_enc_state, %struct.stereo_enc_state* %0, i64 0, i32 0, i64 0
  %478 = load i16, i16* %477, align 4
  %479 = getelementptr inbounds %struct.stereo_enc_state, %struct.stereo_enc_state* %0, i64 0, i32 0, i64 1
  %480 = load i16, i16* %479, align 2
  %481 = getelementptr inbounds %struct.stereo_enc_state, %struct.stereo_enc_state* %0, i64 0, i32 5
  %482 = load i16, i16* %481, align 2
  %483 = sext i16 %482 to i32
  %484 = shl i32 %9, 3
  %485 = sdiv i32 65536, %484
  %486 = load i32, i32* %16, align 4
  %487 = trunc i32 %486 to i16
  %488 = sub i16 %487, %478
  %489 = sext i16 %488 to i32
  %490 = shl i32 %485, 16
  %491 = ashr exact i32 %490, 16
  %492 = mul nsw i32 %491, %489
  %493 = ashr i32 %492, 15
  %494 = add nsw i32 %493, 1
  %495 = ashr i32 %494, 1
  %496 = load i32, i32* %17, align 4
  %497 = trunc i32 %496 to i16
  %498 = sub i16 %497, %480
  %499 = sext i16 %498 to i32
  %500 = mul nsw i32 %491, %499
  %501 = ashr i32 %500, 15
  %502 = add nsw i32 %501, 1
  %503 = ashr i32 %502, 1
  %504 = icmp sgt i32 %9, 0
  br i1 %504, label %505, label %580

505:                                              ; preds = %475
  %506 = zext i32 %485 to i64
  %507 = shl i64 %506, 48
  %508 = ashr exact i64 %507, 48
  %509 = sub nsw i32 %476, %483
  %510 = sext i32 %509 to i64
  %511 = mul nsw i64 %508, %510
  %512 = lshr i64 %511, 6
  %513 = shl nsw i32 %483, 10
  %514 = sext i16 %480 to i32
  %515 = sub nsw i32 0, %514
  %516 = sext i16 %478 to i32
  %517 = sub nsw i32 0, %516
  %518 = sext i32 %513 to i64
  %519 = shl i64 %512, 32
  %520 = ashr exact i64 %519, 32
  %521 = and i64 %520, -1024
  %522 = sext i32 %484 to i64
  br label %523

523:                                              ; preds = %576, %505
  %524 = phi i16 [ %126, %505 ], [ %579, %576 ]
  %525 = phi i64 [ 0, %505 ], [ %539, %576 ]
  %526 = phi i64 [ %518, %505 ], [ %531, %576 ]
  %527 = phi i32 [ %515, %505 ], [ %530, %576 ]
  %528 = phi i32 [ %517, %505 ], [ %529, %576 ]
  %529 = sub i32 %528, %495
  %530 = sub i32 %527, %503
  %531 = add i64 %526, %521
  %532 = getelementptr inbounds i16, i16* %20, i64 %525
  %533 = load i16, i16* %532, align 2
  %534 = sext i16 %533 to i32
  %535 = getelementptr inbounds i16, i16* %1, i64 %525
  %536 = load i16, i16* %535, align 2
  %537 = sext i16 %536 to i32
  %538 = add nsw i32 %537, %534
  %539 = add nuw nsw i64 %525, 1
  %540 = getelementptr inbounds i16, i16* %20, i64 %539
  %541 = load i16, i16* %540, align 2
  %542 = sext i16 %541 to i32
  %543 = shl nsw i32 %542, 1
  %544 = add nsw i32 %538, %543
  %545 = shl nsw i32 %544, 9
  %546 = sext i16 %524 to i64
  %547 = mul nsw i64 %531, %546
  %548 = lshr i64 %547, 16
  %549 = sext i32 %545 to i64
  %550 = zext i32 %529 to i64
  %551 = shl i64 %550, 48
  %552 = ashr exact i64 %551, 48
  %553 = mul nsw i64 %552, %549
  %554 = lshr i64 %553, 16
  %555 = shl nsw i32 %542, 11
  %556 = sext i32 %555 to i64
  %557 = zext i32 %530 to i64
  %558 = shl i64 %557, 48
  %559 = ashr exact i64 %558, 48
  %560 = mul nsw i64 %559, %556
  %561 = lshr i64 %560, 16
  %562 = add nuw nsw i64 %561, %548
  %563 = add nuw nsw i64 %562, %554
  %564 = trunc i64 %563 to i32
  %565 = ashr i32 %564, 7
  %566 = add nsw i32 %565, 1
  %567 = lshr i32 %566, 1
  %568 = icmp sgt i32 %564, 8388479
  %569 = icmp slt i32 %566, -65536
  %570 = select i1 %569, i32 32768, i32 %567
  %571 = select i1 %568, i32 32767, i32 %570
  %572 = trunc i32 %571 to i16
  %573 = add nsw i64 %525, -1
  %574 = getelementptr inbounds i16, i16* %2, i64 %573
  store i16 %572, i16* %574, align 2
  %575 = icmp slt i64 %539, %522
  br i1 %575, label %576, label %580

576:                                              ; preds = %523
  %577 = add nuw nsw i64 %525, 2
  %578 = getelementptr inbounds i16, i16* %24, i64 %577
  %579 = load i16, i16* %578, align 2
  br label %523

580:                                              ; preds = %523, %475
  %581 = icmp slt i32 %484, %10
  br i1 %581, label %582, label %711

582:                                              ; preds = %580
  %583 = shl nsw i32 %476, 10
  %584 = sext i32 %583 to i64
  %585 = zext i32 %486 to i64
  %586 = shl i64 %585, 48
  %587 = sub i64 0, %586
  %588 = ashr exact i64 %587, 48
  %589 = zext i32 %496 to i64
  %590 = shl i64 %589, 48
  %591 = sub i64 0, %590
  %592 = ashr exact i64 %591, 48
  %593 = sext i32 %484 to i64
  %594 = sub nsw i64 %111, %593
  %595 = icmp ult i64 %594, 8
  br i1 %595, label %667, label %596

596:                                              ; preds = %582
  %597 = add nsw i64 %593, -1
  %598 = getelementptr i16, i16* %2, i64 %597
  %599 = add nsw i64 %111, -1
  %600 = getelementptr i16, i16* %2, i64 %599
  %601 = add nsw i64 %593, -2
  %602 = getelementptr i16, i16* %1, i64 %601
  %603 = getelementptr i16, i16* %1, i64 %111
  %604 = icmp ult i16* %598, %603
  %605 = icmp ult i16* %602, %600
  %606 = and i1 %604, %605
  br i1 %606, label %667, label %607

607:                                              ; preds = %596
  %608 = and i64 %594, -8
  %609 = add nsw i64 %608, %593
  %610 = insertelement <8 x i64> undef, i64 %584, i32 0
  %611 = shufflevector <8 x i64> %610, <8 x i64> undef, <8 x i32> zeroinitializer
  %612 = insertelement <8 x i64> undef, i64 %588, i32 0
  %613 = shufflevector <8 x i64> %612, <8 x i64> undef, <8 x i32> zeroinitializer
  %614 = insertelement <8 x i64> undef, i64 %592, i32 0
  %615 = shufflevector <8 x i64> %614, <8 x i64> undef, <8 x i32> zeroinitializer
  br label %616

616:                                              ; preds = %616, %607
  %617 = phi i64 [ 0, %607 ], [ %663, %616 ]
  %618 = add i64 %617, %593
  %619 = getelementptr inbounds i16, i16* %20, i64 %618
  %620 = bitcast i16* %619 to <8 x i16>*
  %621 = load <8 x i16>, <8 x i16>* %620, align 2, !alias.scope !13
  %622 = sext <8 x i16> %621 to <8 x i32>
  %623 = getelementptr inbounds i16, i16* %1, i64 %618
  %624 = bitcast i16* %623 to <8 x i16>*
  %625 = load <8 x i16>, <8 x i16>* %624, align 2, !alias.scope !13
  %626 = sext <8 x i16> %625 to <8 x i32>
  %627 = add nsw <8 x i32> %626, %622
  %628 = or i64 %618, 1
  %629 = getelementptr inbounds i16, i16* %20, i64 %628
  %630 = bitcast i16* %629 to <8 x i16>*
  %631 = load <8 x i16>, <8 x i16>* %630, align 2, !alias.scope !13
  %632 = sext <8 x i16> %631 to <8 x i32>
  %633 = shl nsw <8 x i32> %632, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %634 = add nsw <8 x i32> %627, %633
  %635 = shl nsw <8 x i32> %634, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %636 = getelementptr inbounds i16, i16* %24, i64 %628
  %637 = bitcast i16* %636 to <8 x i16>*
  %638 = load <8 x i16>, <8 x i16>* %637, align 2, !alias.scope !16
  %639 = sext <8 x i16> %638 to <8 x i64>
  %640 = mul nsw <8 x i64> %611, %639
  %641 = lshr <8 x i64> %640, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %642 = sext <8 x i32> %635 to <8 x i64>
  %643 = mul nsw <8 x i64> %613, %642
  %644 = lshr <8 x i64> %643, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %645 = shl nsw <8 x i32> %632, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %646 = sext <8 x i32> %645 to <8 x i64>
  %647 = mul nsw <8 x i64> %615, %646
  %648 = lshr <8 x i64> %647, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %649 = add nuw nsw <8 x i64> %648, %641
  %650 = add nuw nsw <8 x i64> %649, %644
  %651 = trunc <8 x i64> %650 to <8 x i32>
  %652 = ashr <8 x i32> %651, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %653 = add nsw <8 x i32> %652, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %654 = lshr <8 x i32> %653, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %655 = icmp sgt <8 x i32> %651, <i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479>
  %656 = icmp slt <8 x i32> %653, <i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %657 = select <8 x i1> %656, <8 x i32> <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>, <8 x i32> %654
  %658 = select <8 x i1> %655, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <8 x i32> %657
  %659 = trunc <8 x i32> %658 to <8 x i16>
  %660 = add nsw i64 %618, -1
  %661 = getelementptr inbounds i16, i16* %2, i64 %660
  %662 = bitcast i16* %661 to <8 x i16>*
  store <8 x i16> %659, <8 x i16>* %662, align 2, !alias.scope !18, !noalias !13
  %663 = add i64 %617, 8
  %664 = icmp eq i64 %663, %608
  br i1 %664, label %665, label %616, !llvm.loop !20

665:                                              ; preds = %616
  %666 = icmp eq i64 %594, %608
  br i1 %666, label %711, label %667

667:                                              ; preds = %665, %596, %582
  %668 = phi i64 [ %593, %596 ], [ %593, %582 ], [ %609, %665 ]
  br label %669

669:                                              ; preds = %667, %669
  %670 = phi i64 [ %678, %669 ], [ %668, %667 ]
  %671 = getelementptr inbounds i16, i16* %20, i64 %670
  %672 = load i16, i16* %671, align 2
  %673 = sext i16 %672 to i32
  %674 = getelementptr inbounds i16, i16* %1, i64 %670
  %675 = load i16, i16* %674, align 2
  %676 = sext i16 %675 to i32
  %677 = add nsw i32 %676, %673
  %678 = add nsw i64 %670, 1
  %679 = getelementptr inbounds i16, i16* %20, i64 %678
  %680 = load i16, i16* %679, align 2
  %681 = sext i16 %680 to i32
  %682 = shl nsw i32 %681, 1
  %683 = add nsw i32 %677, %682
  %684 = shl nsw i32 %683, 9
  %685 = getelementptr inbounds i16, i16* %24, i64 %678
  %686 = load i16, i16* %685, align 2
  %687 = sext i16 %686 to i64
  %688 = mul nsw i64 %687, %584
  %689 = lshr i64 %688, 16
  %690 = sext i32 %684 to i64
  %691 = mul nsw i64 %588, %690
  %692 = lshr i64 %691, 16
  %693 = shl nsw i32 %681, 11
  %694 = sext i32 %693 to i64
  %695 = mul nsw i64 %592, %694
  %696 = lshr i64 %695, 16
  %697 = add nuw nsw i64 %696, %689
  %698 = add nuw nsw i64 %697, %692
  %699 = trunc i64 %698 to i32
  %700 = ashr i32 %699, 7
  %701 = add nsw i32 %700, 1
  %702 = lshr i32 %701, 1
  %703 = icmp sgt i32 %699, 8388479
  %704 = icmp slt i32 %701, -65536
  %705 = select i1 %704, i32 32768, i32 %702
  %706 = select i1 %703, i32 32767, i32 %705
  %707 = trunc i32 %706 to i16
  %708 = add nsw i64 %670, -1
  %709 = getelementptr inbounds i16, i16* %2, i64 %708
  store i16 %707, i16* %709, align 2
  %710 = icmp eq i64 %678, %111
  br i1 %710, label %711, label %669, !llvm.loop !21

711:                                              ; preds = %669, %665, %580
  store i16 %487, i16* %477, align 4
  store i16 %497, i16* %479, align 2
  %712 = trunc i32 %476 to i16
  store i16 %712, i16* %481, align 2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @silk_stereo_find_predictor(i32*, i16*, i16*, i32*, i32, i32) local_unnamed_addr #2

declare void @silk_stereo_quant_pred(i32*, [3 x i8]*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !10}
!12 = !{i32 0, i32 33}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = !{!19}
!19 = distinct !{!19, !15}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !10}
