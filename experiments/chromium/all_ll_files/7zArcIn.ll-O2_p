; ModuleID = '../../third_party/lzma_sdk/7zArcIn.c'
source_filename = "../../third_party/lzma_sdk/7zArcIn.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.CSzBitUi32s = type { i8*, i32* }
%struct.ISzAlloc = type { i8* (i8*, i64)*, void (i8*, i8*)* }
%struct.CSzBitUi64s = type { i8*, %struct.CNtfsFileTime* }
%struct.CNtfsFileTime = type { i32, i32 }
%struct.CSzArEx = type { %struct.CSzAr, i64, i64, i32, i64*, i8*, %struct.CSzBitUi32s, %struct.CSzBitUi32s, %struct.CSzBitUi64s, %struct.CSzBitUi64s, i32*, i32*, i64*, i8* }
%struct.CSzAr = type { i32, i32, i64*, %struct.CSzBitUi32s, i64*, i32*, i32*, i8*, i64*, i8* }
%struct.CSzFolder = type { i32, i32, i32, i32, [4 x i32], [3 x %struct.CSzBond], [4 x %struct.CSzCoderInfo] }
%struct.CSzBond = type { i32, i32 }
%struct.CSzCoderInfo = type { i64, i32, i8, i8 }
%struct.CSzData = type { i8*, i64 }
%struct.ILookInStream = type { i32 (i8*, i8**, i64*)*, i32 (i8*, i64)*, i32 (i8*, i8*, i64*)*, i32 (i8*, i64*, i32)* }
%struct.CSubStreamInfo = type { i32, i32, %struct.CSzData, %struct.CSzData, %struct.CSzData }
%struct.CBuf = type { i8*, i64 }

@k7zSignature = hidden local_unnamed_addr constant [6 x i8] c"7z\BC\AF'\1C", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @SzBitUi32s_Free(%struct.CSzBitUi32s* nocapture, %struct.ISzAlloc*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %1, i64 0, i32 1
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %5 = bitcast %struct.ISzAlloc* %1 to i8*
  %6 = getelementptr inbounds %struct.CSzBitUi32s, %struct.CSzBitUi32s* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  tail call void %4(i8* %5, i8* %7) #5
  store i8* null, i8** %6, align 8
  %8 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %9 = getelementptr inbounds %struct.CSzBitUi32s, %struct.CSzBitUi32s* %0, i64 0, i32 1
  %10 = bitcast i32** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void %8(i8* %5, i8* %11) #5
  store i32* null, i32** %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @SzBitUi64s_Free(%struct.CSzBitUi64s* nocapture, %struct.ISzAlloc*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %1, i64 0, i32 1
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %5 = bitcast %struct.ISzAlloc* %1 to i8*
  %6 = getelementptr inbounds %struct.CSzBitUi64s, %struct.CSzBitUi64s* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  tail call void %4(i8* %5, i8* %7) #5
  store i8* null, i8** %6, align 8
  %8 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %9 = getelementptr inbounds %struct.CSzBitUi64s, %struct.CSzBitUi64s* %0, i64 0, i32 1
  %10 = bitcast %struct.CNtfsFileTime** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void %8(i8* %5, i8* %11) #5
  store %struct.CNtfsFileTime* null, %struct.CNtfsFileTime** %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @SzArEx_Init(%struct.CSzArEx* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.CSzArEx* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 80, i1 false) #5
  %3 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 3
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 2
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 4
  %6 = bitcast i64** %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 112, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @SzArEx_Free(%struct.CSzArEx* nocapture, %struct.ISzAlloc*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %1, i64 0, i32 1
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %5 = bitcast %struct.ISzAlloc* %1 to i8*
  %6 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 4
  %7 = bitcast i64** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void %4(i8* %5, i8* %8) #5
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %10 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 5
  %11 = load i8*, i8** %10, align 8
  tail call void %9(i8* %5, i8* %11) #5
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %13 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 10
  %14 = bitcast i32** %13 to i8**
  %15 = load i8*, i8** %14, align 8
  tail call void %12(i8* %5, i8* %15) #5
  %16 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %17 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 11
  %18 = bitcast i32** %17 to i8**
  %19 = load i8*, i8** %18, align 8
  tail call void %16(i8* %5, i8* %19) #5
  %20 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %21 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 12
  %22 = bitcast i64** %21 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void %20(i8* %5, i8* %23) #5
  %24 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %25 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 13
  %26 = load i8*, i8** %25, align 8
  tail call void %24(i8* %5, i8* %26) #5
  %27 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %28 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 6, i32 0
  %29 = load i8*, i8** %28, align 8
  tail call void %27(i8* %5, i8* %29) #5
  store i8* null, i8** %28, align 8
  %30 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %31 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 6, i32 1
  %32 = bitcast i32** %31 to i8**
  %33 = load i8*, i8** %32, align 8
  tail call void %30(i8* %5, i8* %33) #5
  store i32* null, i32** %31, align 8
  %34 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %35 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 7, i32 0
  %36 = load i8*, i8** %35, align 8
  tail call void %34(i8* %5, i8* %36) #5
  store i8* null, i8** %35, align 8
  %37 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %38 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 7, i32 1
  %39 = bitcast i32** %38 to i8**
  %40 = load i8*, i8** %39, align 8
  tail call void %37(i8* %5, i8* %40) #5
  store i32* null, i32** %38, align 8
  %41 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %42 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 8, i32 0
  %43 = load i8*, i8** %42, align 8
  tail call void %41(i8* %5, i8* %43) #5
  store i8* null, i8** %42, align 8
  %44 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %45 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 8, i32 1
  %46 = bitcast %struct.CNtfsFileTime** %45 to i8**
  %47 = load i8*, i8** %46, align 8
  tail call void %44(i8* %5, i8* %47) #5
  store %struct.CNtfsFileTime* null, %struct.CNtfsFileTime** %45, align 8
  %48 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %49 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 9, i32 0
  %50 = load i8*, i8** %49, align 8
  tail call void %48(i8* %5, i8* %50) #5
  store i8* null, i8** %49, align 8
  %51 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %52 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 9, i32 1
  %53 = bitcast %struct.CNtfsFileTime** %52 to i8**
  %54 = load i8*, i8** %53, align 8
  tail call void %51(i8* %5, i8* %54) #5
  store %struct.CNtfsFileTime* null, %struct.CNtfsFileTime** %52, align 8
  %55 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %56 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 2
  %57 = bitcast i64** %56 to i8**
  %58 = load i8*, i8** %57, align 8
  tail call void %55(i8* %5, i8* %58) #5
  %59 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %60 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 3, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %59(i8* %5, i8* %61) #5
  store i8* null, i8** %60, align 8
  %62 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %63 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 3, i32 1
  %64 = bitcast i32** %63 to i8**
  %65 = load i8*, i8** %64, align 8
  tail call void %62(i8* %5, i8* %65) #5
  store i32* null, i32** %63, align 8
  %66 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %67 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 4
  %68 = bitcast i64** %67 to i8**
  %69 = load i8*, i8** %68, align 8
  tail call void %66(i8* %5, i8* %69) #5
  %70 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %71 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 5
  %72 = bitcast i32** %71 to i8**
  %73 = load i8*, i8** %72, align 8
  tail call void %70(i8* %5, i8* %73) #5
  %74 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %75 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 6
  %76 = bitcast i32** %75 to i8**
  %77 = load i8*, i8** %76, align 8
  tail call void %74(i8* %5, i8* %77) #5
  %78 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %79 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 7
  %80 = load i8*, i8** %79, align 8
  tail call void %78(i8* %5, i8* %80) #5
  %81 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %82 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 8
  %83 = bitcast i64** %82 to i8**
  %84 = load i8*, i8** %83, align 8
  tail call void %81(i8* %5, i8* %84) #5
  %85 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %86 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 9
  %87 = load i8*, i8** %86, align 8
  tail call void %85(i8* %5, i8* %87) #5
  %88 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 3
  store i32 0, i32* %88, align 8
  %89 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 2
  store i64 0, i64* %89, align 8
  %90 = bitcast i64** %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 112, i1 false) #5
  %91 = bitcast %struct.CSzArEx* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 80, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SzGetNextFolderItem(%struct.CSzFolder* nocapture, %struct.CSzData*) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca [7 x i8], align 1
  %11 = getelementptr inbounds [7 x i8], [7 x i8]* %10, i64 0, i64 0
  %12 = alloca i32, align 4
  %13 = bitcast i32* %12 to [4 x i8]*
  %14 = bitcast i32* %12 to i8*
  %15 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %1, i64 0, i32 0
  %16 = bitcast %struct.CSzData* %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 0
  %19 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 1
  %20 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 2
  %21 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 3
  %22 = bitcast i64* %9 to i8*
  %23 = bitcast %struct.CSzFolder* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #5
  store i64 -6148914691236517206, i64* %9, align 8
  %24 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %1, i64 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %43, label %27

27:                                               ; preds = %2
  %28 = load i8*, i8** %15, align 8
  %29 = load i8, i8* %28, align 1
  %30 = icmp sgt i8 %29, -1
  br i1 %30, label %31, label %35

31:                                               ; preds = %27
  %32 = zext i8 %29 to i32
  %33 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %33, i8** %15, align 8
  %34 = add i64 %25, -1
  store i64 %34, i64* %24, align 8
  br label %45

35:                                               ; preds = %27
  %36 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %9) #5
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %35
  %39 = load i64, i64* %9, align 8
  %40 = icmp ugt i64 %39, 2147483646
  br i1 %40, label %43, label %41

41:                                               ; preds = %38
  %42 = trunc i64 %39 to i32
  br label %45

43:                                               ; preds = %35, %2, %38
  %44 = phi i32 [ 4, %38 ], [ 16, %2 ], [ %36, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #5
  br label %388

45:                                               ; preds = %31, %41
  %46 = phi i32 [ %32, %31 ], [ %42, %41 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #5
  %47 = add nsw i32 %46, -1
  %48 = icmp ugt i32 %47, 3
  br i1 %48, label %388, label %49

49:                                               ; preds = %45
  %50 = bitcast i64* %8 to i8*
  %51 = bitcast i64* %7 to i8*
  %52 = bitcast i64* %6 to i8*
  br label %53

53:                                               ; preds = %220, %49
  %54 = phi i32 [ 0, %49 ], [ %178, %220 ]
  %55 = phi i32 [ 0, %49 ], [ %221, %220 ]
  %56 = zext i32 %55 to i64
  %57 = load i64, i64* %24, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %388, label %59

59:                                               ; preds = %53
  %60 = add i64 %57, -1
  store i64 %60, i64* %24, align 8
  %61 = load i8*, i8** %15, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 1
  store i8* %62, i8** %15, align 8
  %63 = load i8, i8* %61, align 1
  %64 = zext i8 %63 to i32
  %65 = and i32 %64, 192
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %388

67:                                               ; preds = %59
  %68 = and i32 %64, 15
  %69 = icmp ugt i32 %68, 8
  br i1 %69, label %388, label %70

70:                                               ; preds = %67
  %71 = zext i32 %68 to i64
  %72 = icmp ult i64 %60, %71
  br i1 %72, label %388, label %73

73:                                               ; preds = %70
  %74 = icmp eq i32 %68, 0
  br i1 %74, label %115, label %75

75:                                               ; preds = %73
  %76 = and i32 %64, 1
  %77 = icmp eq i32 %68, 1
  br i1 %77, label %99, label %78

78:                                               ; preds = %75
  %79 = sub nsw i32 %68, %76
  br label %80

80:                                               ; preds = %80, %78
  %81 = phi i64 [ %60, %78 ], [ %96, %80 ]
  %82 = phi i8* [ %62, %78 ], [ %95, %80 ]
  %83 = phi i64 [ 0, %78 ], [ %94, %80 ]
  %84 = phi i32 [ %79, %78 ], [ %97, %80 ]
  %85 = shl i64 %83, 8
  %86 = load i8, i8* %82, align 1
  %87 = zext i8 %86 to i64
  %88 = or i64 %85, %87
  %89 = getelementptr inbounds i8, i8* %82, i64 1
  store i8* %89, i8** %15, align 8
  %90 = add i64 %81, -1
  store i64 %90, i64* %24, align 8
  %91 = shl i64 %88, 8
  %92 = load i8, i8* %89, align 1
  %93 = zext i8 %92 to i64
  %94 = or i64 %91, %93
  %95 = getelementptr inbounds i8, i8* %82, i64 2
  store i8* %95, i8** %15, align 8
  %96 = add i64 %81, -2
  store i64 %96, i64* %24, align 8
  %97 = add i32 %84, -2
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %80

99:                                               ; preds = %80, %75
  %100 = phi i64 [ undef, %75 ], [ %94, %80 ]
  %101 = phi i64 [ %60, %75 ], [ %96, %80 ]
  %102 = phi i8* [ %62, %75 ], [ %95, %80 ]
  %103 = phi i64 [ 0, %75 ], [ %94, %80 ]
  %104 = icmp eq i32 %76, 0
  br i1 %104, label %112, label %105

105:                                              ; preds = %99
  %106 = load i8, i8* %102, align 1
  %107 = getelementptr inbounds i8, i8* %102, i64 1
  store i8* %107, i8** %15, align 8
  %108 = add i64 %101, -1
  store i64 %108, i64* %24, align 8
  %109 = shl i64 %103, 8
  %110 = zext i8 %106 to i64
  %111 = or i64 %109, %110
  br label %112

112:                                              ; preds = %99, %105
  %113 = phi i64 [ %100, %99 ], [ %111, %105 ]
  %114 = icmp ugt i64 %113, 4294967295
  br i1 %114, label %388, label %115

115:                                              ; preds = %73, %112
  %116 = phi i64 [ %113, %112 ], [ 0, %73 ]
  %117 = trunc i64 %116 to i32
  %118 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 6, i64 %56, i32 1
  store i32 %117, i32* %118, align 8
  %119 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 6, i64 %56, i32 2
  store i8 1, i8* %119, align 4
  %120 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 6, i64 %56, i32 0
  store i64 0, i64* %120, align 8
  %121 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 6, i64 %56, i32 3
  store i8 0, i8* %121, align 1
  %122 = and i32 %64, 16
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %175, label %124

124:                                              ; preds = %115
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #5
  store i64 -6148914691236517206, i64* %8, align 8
  %125 = load i64, i64* %24, align 8
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %143, label %127

127:                                              ; preds = %124
  %128 = load i8*, i8** %15, align 8
  %129 = load i8, i8* %128, align 1
  %130 = icmp sgt i8 %129, -1
  br i1 %130, label %131, label %135

131:                                              ; preds = %127
  %132 = zext i8 %129 to i32
  %133 = getelementptr inbounds i8, i8* %128, i64 1
  store i8* %133, i8** %15, align 8
  %134 = add i64 %125, -1
  store i64 %134, i64* %24, align 8
  br label %145

135:                                              ; preds = %127
  %136 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %8) #5
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %143

138:                                              ; preds = %135
  %139 = load i64, i64* %8, align 8
  %140 = icmp ugt i64 %139, 2147483646
  br i1 %140, label %143, label %141

141:                                              ; preds = %138
  %142 = trunc i64 %139 to i32
  br label %145

143:                                              ; preds = %135, %124, %138
  %144 = phi i32 [ 4, %138 ], [ 16, %124 ], [ %136, %135 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #5
  br label %388

145:                                              ; preds = %141, %131
  %146 = phi i32 [ %132, %131 ], [ %142, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #5
  %147 = icmp ugt i32 %146, 7
  br i1 %147, label %388, label %148

148:                                              ; preds = %145
  %149 = trunc i32 %146 to i8
  store i8 %149, i8* %119, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #5
  store i64 -6148914691236517206, i64* %7, align 8
  %150 = load i64, i64* %24, align 8
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %168, label %152

152:                                              ; preds = %148
  %153 = load i8*, i8** %15, align 8
  %154 = load i8, i8* %153, align 1
  %155 = icmp sgt i8 %154, -1
  br i1 %155, label %156, label %160

156:                                              ; preds = %152
  %157 = zext i8 %154 to i32
  %158 = getelementptr inbounds i8, i8* %153, i64 1
  store i8* %158, i8** %15, align 8
  %159 = add i64 %150, -1
  store i64 %159, i64* %24, align 8
  br label %170

160:                                              ; preds = %152
  %161 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %7) #5
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %168

163:                                              ; preds = %160
  %164 = load i64, i64* %7, align 8
  %165 = icmp ugt i64 %164, 2147483646
  br i1 %165, label %168, label %166

166:                                              ; preds = %163
  %167 = trunc i64 %164 to i32
  br label %170

168:                                              ; preds = %160, %148, %163
  %169 = phi i32 [ 4, %163 ], [ 16, %148 ], [ %161, %160 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #5
  br label %388

170:                                              ; preds = %166, %156
  %171 = phi i32 [ %157, %156 ], [ %167, %166 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #5
  %172 = icmp eq i32 %171, 1
  br i1 %172, label %173, label %388

173:                                              ; preds = %170
  %174 = load i8, i8* %119, align 4
  br label %175

175:                                              ; preds = %173, %115
  %176 = phi i8 [ %174, %173 ], [ 1, %115 ]
  %177 = zext i8 %176 to i32
  %178 = add i32 %54, %177
  %179 = icmp ugt i32 %178, 7
  br i1 %179, label %388, label %180

180:                                              ; preds = %175
  %181 = and i32 %64, 32
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %220, label %183

183:                                              ; preds = %180
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #5
  store i64 -6148914691236517206, i64* %6, align 8
  %184 = load i64, i64* %24, align 8
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %203, label %186

186:                                              ; preds = %183
  %187 = load i8*, i8** %15, align 8
  %188 = load i8, i8* %187, align 1
  %189 = icmp sgt i8 %188, -1
  br i1 %189, label %190, label %194

190:                                              ; preds = %186
  %191 = zext i8 %188 to i32
  %192 = getelementptr inbounds i8, i8* %187, i64 1
  store i8* %192, i8** %15, align 8
  %193 = add i64 %184, -1
  store i64 %193, i64* %24, align 8
  br label %205

194:                                              ; preds = %186
  %195 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %6) #5
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %203

197:                                              ; preds = %194
  %198 = load i64, i64* %6, align 8
  %199 = icmp ugt i64 %198, 2147483646
  br i1 %199, label %203, label %200

200:                                              ; preds = %197
  %201 = trunc i64 %198 to i32
  %202 = load i64, i64* %24, align 8
  br label %205

203:                                              ; preds = %194, %183, %197
  %204 = phi i32 [ 4, %197 ], [ 16, %183 ], [ %195, %194 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #5
  br label %388

205:                                              ; preds = %200, %190
  %206 = phi i64 [ %193, %190 ], [ %202, %200 ]
  %207 = phi i32 [ %191, %190 ], [ %201, %200 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #5
  %208 = zext i32 %207 to i64
  %209 = icmp ult i64 %206, %208
  br i1 %209, label %388, label %210

210:                                              ; preds = %205
  %211 = icmp ugt i32 %207, 127
  br i1 %211, label %388, label %212

212:                                              ; preds = %210
  %213 = load i64, i64* %16, align 8
  %214 = sub i64 %213, %17
  store i64 %214, i64* %120, align 8
  %215 = trunc i32 %207 to i8
  store i8 %215, i8* %121, align 1
  %216 = load i8*, i8** %15, align 8
  %217 = getelementptr inbounds i8, i8* %216, i64 %208
  store i8* %217, i8** %15, align 8
  %218 = load i64, i64* %24, align 8
  %219 = sub i64 %218, %208
  store i64 %219, i64* %24, align 8
  br label %220

220:                                              ; preds = %212, %180
  %221 = add i32 %55, 1
  %222 = icmp eq i32 %221, %46
  br i1 %222, label %223, label %53

223:                                              ; preds = %220
  %224 = getelementptr inbounds [7 x i8], [7 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %224) #5
  %225 = icmp ult i32 %178, %47
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %224, i8 -86, i64 7, i1 false)
  br i1 %225, label %385, label %226

226:                                              ; preds = %223
  store i32 %47, i32* %19, align 4
  %227 = sub i32 %178, %47
  %228 = icmp ugt i32 %227, 4
  br i1 %228, label %385, label %229

229:                                              ; preds = %226
  store i32 %227, i32* %20, align 8
  %230 = icmp eq i32 %178, 0
  br i1 %230, label %233, label %231

231:                                              ; preds = %229
  %232 = zext i32 %178 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %11, i8 0, i64 %232, i1 false)
  br label %233

233:                                              ; preds = %231, %229
  %234 = icmp eq i32 %47, 0
  br i1 %234, label %327, label %235

235:                                              ; preds = %233
  %236 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %236) #5
  store i32 -1431655766, i32* %12, align 4
  %237 = zext i32 %46 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %14, i8 0, i64 %237, i1 false)
  %238 = bitcast i64* %5 to i8*
  %239 = bitcast i64* %4 to i8*
  %240 = zext i32 %47 to i64
  br label %243

241:                                              ; preds = %310
  %242 = zext i32 %46 to i64
  br label %313

243:                                              ; preds = %310, %235
  %244 = phi i64 [ 0, %235 ], [ %311, %310 ]
  %245 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 5, i64 %244, i32 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %238) #5
  store i64 -6148914691236517206, i64* %5, align 8
  %246 = load i64, i64* %24, align 8
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %267, label %248

248:                                              ; preds = %243
  %249 = load i8*, i8** %15, align 8
  %250 = load i8, i8* %249, align 1
  %251 = icmp sgt i8 %250, -1
  br i1 %251, label %252, label %259

252:                                              ; preds = %248
  %253 = zext i8 %250 to i32
  store i32 %253, i32* %245, align 4
  %254 = load i8*, i8** %15, align 8
  %255 = getelementptr inbounds i8, i8* %254, i64 1
  store i8* %255, i8** %15, align 8
  %256 = load i64, i64* %24, align 8
  %257 = add i64 %256, -1
  store i64 %257, i64* %24, align 8
  %258 = load i32, i32* %245, align 4
  br label %269

259:                                              ; preds = %248
  %260 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %5) #5
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %262, label %267

262:                                              ; preds = %259
  %263 = load i64, i64* %5, align 8
  %264 = icmp ugt i64 %263, 2147483646
  br i1 %264, label %267, label %265

265:                                              ; preds = %262
  %266 = trunc i64 %263 to i32
  store i32 %266, i32* %245, align 4
  br label %269

267:                                              ; preds = %259, %243, %262
  %268 = phi i32 [ 4, %262 ], [ 16, %243 ], [ %260, %259 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %238) #5
  br label %324

269:                                              ; preds = %265, %252
  %270 = phi i32 [ %266, %265 ], [ %258, %252 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %238) #5
  %271 = icmp ult i32 %270, %178
  br i1 %271, label %272, label %324

272:                                              ; preds = %269
  %273 = zext i32 %270 to i64
  %274 = getelementptr inbounds [7 x i8], [7 x i8]* %10, i64 0, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 0
  br i1 %276, label %277, label %324

277:                                              ; preds = %272
  store i8 1, i8* %274, align 1
  %278 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 5, i64 %244, i32 1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %239) #5
  store i64 -6148914691236517206, i64* %4, align 8
  %279 = load i64, i64* %24, align 8
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %300, label %281

281:                                              ; preds = %277
  %282 = load i8*, i8** %15, align 8
  %283 = load i8, i8* %282, align 1
  %284 = icmp sgt i8 %283, -1
  br i1 %284, label %285, label %292

285:                                              ; preds = %281
  %286 = zext i8 %283 to i32
  store i32 %286, i32* %278, align 4
  %287 = load i8*, i8** %15, align 8
  %288 = getelementptr inbounds i8, i8* %287, i64 1
  store i8* %288, i8** %15, align 8
  %289 = load i64, i64* %24, align 8
  %290 = add i64 %289, -1
  store i64 %290, i64* %24, align 8
  %291 = load i32, i32* %278, align 4
  br label %302

292:                                              ; preds = %281
  %293 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %4) #5
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %300

295:                                              ; preds = %292
  %296 = load i64, i64* %4, align 8
  %297 = icmp ugt i64 %296, 2147483646
  br i1 %297, label %300, label %298

298:                                              ; preds = %295
  %299 = trunc i64 %296 to i32
  store i32 %299, i32* %278, align 4
  br label %302

300:                                              ; preds = %292, %277, %295
  %301 = phi i32 [ 4, %295 ], [ 16, %277 ], [ %293, %292 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %239) #5
  br label %324

302:                                              ; preds = %298, %285
  %303 = phi i32 [ %299, %298 ], [ %291, %285 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %239) #5
  %304 = icmp ult i32 %303, %46
  br i1 %304, label %305, label %324

305:                                              ; preds = %302
  %306 = zext i32 %303 to i64
  %307 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 0, i64 %306
  %308 = load i8, i8* %307, align 1
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %310, label %324

310:                                              ; preds = %305
  store i8 1, i8* %307, align 1
  %311 = add nuw nsw i64 %244, 1
  %312 = icmp eq i64 %311, %240
  br i1 %312, label %241, label %243

313:                                              ; preds = %318, %241
  %314 = phi i64 [ 0, %241 ], [ %319, %318 ]
  %315 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 0, i64 %314
  %316 = load i8, i8* %315, align 1
  %317 = icmp eq i8 %316, 0
  br i1 %317, label %321, label %318

318:                                              ; preds = %313
  %319 = add nuw nsw i64 %314, 1
  %320 = icmp eq i64 %319, %242
  br i1 %320, label %324, label %313

321:                                              ; preds = %313
  %322 = trunc i64 %314 to i32
  store i32 %322, i32* %21, align 4
  %323 = icmp eq i32 %46, %322
  br i1 %323, label %324, label %326

324:                                              ; preds = %272, %269, %305, %302, %318, %267, %300, %321
  %325 = phi i32 [ %301, %300 ], [ %268, %267 ], [ 16, %321 ], [ 16, %318 ], [ 16, %302 ], [ 16, %305 ], [ 16, %269 ], [ 16, %272 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %236) #5
  br label %385

326:                                              ; preds = %321
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %236) #5
  br label %327

327:                                              ; preds = %326, %233
  switch i32 %227, label %328 [
    i32 1, label %331
    i32 0, label %387
  ]

328:                                              ; preds = %327
  %329 = bitcast i64* %3 to i8*
  %330 = zext i32 %227 to i64
  br label %351

331:                                              ; preds = %327
  br i1 %230, label %346, label %332

332:                                              ; preds = %331
  %333 = zext i32 %178 to i64
  br label %334

334:                                              ; preds = %340, %332
  %335 = phi i64 [ 0, %332 ], [ %341, %340 ]
  %336 = phi i32 [ 0, %332 ], [ %342, %340 ]
  %337 = getelementptr inbounds [7 x i8], [7 x i8]* %10, i64 0, i64 %335
  %338 = load i8, i8* %337, align 1
  %339 = icmp eq i8 %338, 0
  br i1 %339, label %344, label %340

340:                                              ; preds = %334
  %341 = add nuw nsw i64 %335, 1
  %342 = add nuw i32 %336, 1
  %343 = icmp eq i64 %341, %333
  br i1 %343, label %346, label %334

344:                                              ; preds = %334
  %345 = trunc i64 %335 to i32
  br label %346

346:                                              ; preds = %340, %344, %331
  %347 = phi i32 [ 0, %331 ], [ %345, %344 ], [ %342, %340 ]
  %348 = icmp eq i32 %347, %178
  br i1 %348, label %385, label %349

349:                                              ; preds = %346
  %350 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 4, i64 0
  store i32 %347, i32* %350, align 8
  br label %387

351:                                              ; preds = %381, %328
  %352 = phi i64 [ 0, %328 ], [ %383, %381 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %329) #5
  store i64 -6148914691236517206, i64* %3, align 8
  %353 = load i64, i64* %24, align 8
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %371, label %355

355:                                              ; preds = %351
  %356 = load i8*, i8** %15, align 8
  %357 = load i8, i8* %356, align 1
  %358 = icmp sgt i8 %357, -1
  br i1 %358, label %359, label %363

359:                                              ; preds = %355
  %360 = zext i8 %357 to i32
  %361 = getelementptr inbounds i8, i8* %356, i64 1
  store i8* %361, i8** %15, align 8
  %362 = add i64 %353, -1
  store i64 %362, i64* %24, align 8
  br label %373

363:                                              ; preds = %355
  %364 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %3) #5
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %366, label %371

366:                                              ; preds = %363
  %367 = load i64, i64* %3, align 8
  %368 = icmp ugt i64 %367, 2147483646
  br i1 %368, label %371, label %369

369:                                              ; preds = %366
  %370 = trunc i64 %367 to i32
  br label %373

371:                                              ; preds = %363, %351, %366
  %372 = phi i32 [ 4, %366 ], [ 16, %351 ], [ %364, %363 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %329) #5
  br label %385

373:                                              ; preds = %369, %359
  %374 = phi i32 [ %360, %359 ], [ %370, %369 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %329) #5
  %375 = icmp ult i32 %374, %178
  br i1 %375, label %376, label %385

376:                                              ; preds = %373
  %377 = zext i32 %374 to i64
  %378 = getelementptr inbounds [7 x i8], [7 x i8]* %10, i64 0, i64 %377
  %379 = load i8, i8* %378, align 1
  %380 = icmp eq i8 %379, 0
  br i1 %380, label %381, label %385

381:                                              ; preds = %376
  store i8 1, i8* %378, align 1
  %382 = getelementptr inbounds %struct.CSzFolder, %struct.CSzFolder* %0, i64 0, i32 4, i64 %352
  store i32 %374, i32* %382, align 4
  %383 = add nuw nsw i64 %352, 1
  %384 = icmp eq i64 %383, %330
  br i1 %384, label %387, label %351

385:                                              ; preds = %376, %373, %223, %226, %346, %324, %371
  %386 = phi i32 [ %325, %324 ], [ 16, %346 ], [ 4, %226 ], [ 16, %223 ], [ %372, %371 ], [ 16, %373 ], [ 16, %376 ]
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %224) #5
  br label %388

387:                                              ; preds = %381, %327, %349
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %224) #5
  store i32 %46, i32* %18, align 8
  br label %388

388:                                              ; preds = %210, %205, %170, %145, %175, %112, %70, %67, %59, %53, %203, %168, %143, %385, %43, %45, %387
  %389 = phi i32 [ 0, %387 ], [ %44, %43 ], [ 4, %45 ], [ %386, %385 ], [ %169, %168 ], [ %144, %143 ], [ %204, %203 ], [ 16, %205 ], [ 4, %210 ], [ 4, %145 ], [ 4, %170 ], [ 16, %53 ], [ 4, %59 ], [ 4, %67 ], [ 16, %70 ], [ 4, %112 ], [ 4, %175 ]
  ret i32 %389
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @SzAr_GetFolderUnpackSize(%struct.CSzAr* nocapture readonly, i32) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 8
  %4 = load i64*, i64** %3, align 8
  %5 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 6
  %6 = load i32*, i32** %5, align 8
  %7 = zext i32 %1 to i64
  %8 = getelementptr inbounds i32, i32* %6, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 7
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %7
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add i32 %9, %14
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i64, i64* %4, i64 %16
  %18 = load i64, i64* %17, align 8
  ret i64 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SzArEx_Open(%struct.CSzArEx*, %struct.ILookInStream*, %struct.ISzAlloc*, %struct.ISzAlloc*) local_unnamed_addr #0 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct.CSubStreamInfo, align 8
  %14 = alloca i64, align 8
  %15 = alloca %struct.CSzAr, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca <2 x i64>, align 16
  %19 = bitcast <2 x i64>* %18 to %struct.CSzData*
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca [8 x %struct.CBuf], align 16
  %23 = alloca [32 x i8], align 16
  %24 = alloca i64, align 8
  %25 = alloca <2 x i64>, align 16
  %26 = bitcast <2 x i64>* %25 to %struct.CBuf*
  %27 = alloca i64, align 8
  %28 = alloca <2 x i64>, align 16
  %29 = bitcast <2 x i64>* %28 to %struct.CSzData*
  %30 = alloca i64, align 8
  %31 = alloca %struct.CSzAr, align 8
  %32 = alloca %struct.CBuf, align 8
  %33 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #5
  %34 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 4
  %35 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 5
  %36 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 6
  %37 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 8
  %38 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 12
  %39 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 20
  %40 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 28
  %41 = bitcast i64* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %33, i8 -86, i64 32, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #5
  %42 = bitcast <2 x i64>* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42) #5
  %43 = bitcast <2 x i64>* %25 to i8**
  %44 = getelementptr inbounds %struct.CBuf, %struct.CBuf* %26, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %42, i8 -86, i64 16, i1 false) #5
  store i64 0, i64* %24, align 8
  %45 = getelementptr inbounds %struct.ILookInStream, %struct.ILookInStream* %1, i64 0, i32 3
  %46 = load i32 (i8*, i64*, i32)*, i32 (i8*, i64*, i32)** %45, align 8
  %47 = bitcast %struct.ILookInStream* %1 to i8*
  %48 = call i32 %46(i8* %47, i64* nonnull %24, i32 1) #5
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %1224

50:                                               ; preds = %4
  %51 = call i32 @LookInStream_Read2(%struct.ILookInStream* %1, i8* nonnull %33, i64 32, i32 17) #5
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %1224

53:                                               ; preds = %50
  %54 = bitcast [32 x i8]* %23 to <4 x i8>*
  %55 = load <4 x i8>, <4 x i8>* %54, align 16
  %56 = icmp eq <4 x i8> %55, <i8 55, i8 122, i8 -68, i8 -81>
  %57 = load i8, i8* %34, align 4
  %58 = icmp eq i8 %57, 39
  %59 = load i8, i8* %35, align 1
  %60 = icmp eq i8 %59, 28
  %61 = shufflevector <4 x i1> %56, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %62 = and <4 x i1> %56, %61
  %63 = shufflevector <4 x i1> %62, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %64 = and <4 x i1> %62, %63
  %65 = extractelement <4 x i1> %64, i32 0
  %66 = and i1 %65, %58
  %67 = and i1 %66, %60
  br i1 %67, label %68, label %1224

68:                                               ; preds = %53
  %69 = load i8, i8* %36, align 2
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %71, label %1224

71:                                               ; preds = %68
  %72 = bitcast i8* %38 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = bitcast i8* %39 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast i8* %40 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = load i64, i64* %24, align 8
  %79 = add nsw i64 %78, 32
  %80 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 1
  store i64 %79, i64* %80, align 8
  %81 = call i32 @CrcCalc(i8* %38, i64 20) #5
  %82 = bitcast i8* %37 to i32*
  %83 = load i32, i32* %82, align 8
  %84 = icmp eq i32 %81, %83
  br i1 %84, label %85, label %1224

85:                                               ; preds = %71
  %86 = icmp eq i64 %75, 0
  br i1 %86, label %1224, label %87

87:                                               ; preds = %85
  %88 = add i64 %75, %73
  %89 = icmp ugt i64 %73, %88
  %90 = add i64 %88, 32
  %91 = icmp ugt i64 %73, %90
  %92 = or i1 %89, %91
  br i1 %92, label %1224, label %93

93:                                               ; preds = %87
  %94 = bitcast i64* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #5
  store i64 0, i64* %27, align 8
  %95 = load i32 (i8*, i64*, i32)*, i32 (i8*, i64*, i32)** %45, align 8
  %96 = call i32 %95(i8* %47, i64* nonnull %27, i32 2) #5
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %113

98:                                               ; preds = %93
  %99 = load i64, i64* %27, align 8
  %100 = load i64, i64* %24, align 8
  %101 = add i64 %100, %73
  %102 = icmp ult i64 %99, %101
  br i1 %102, label %112, label %103

103:                                              ; preds = %98
  %104 = add i64 %101, 32
  %105 = icmp ult i64 %99, %104
  %106 = add i64 %104, %75
  %107 = icmp ult i64 %99, %106
  %108 = or i1 %105, %107
  br i1 %108, label %112, label %109

109:                                              ; preds = %103
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #5
  %110 = call i32 @LookInStream_SeekTo(%struct.ILookInStream* %1, i64 %104) #5
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %114, label %1224

112:                                              ; preds = %103, %98
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #5
  br label %1224

113:                                              ; preds = %93
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #5
  br label %1224

114:                                              ; preds = %109
  %115 = call i32 @Buf_Create(%struct.CBuf* nonnull %26, i64 %75, %struct.ISzAlloc* %3) #5
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %1224, label %117

117:                                              ; preds = %114
  %118 = load i8*, i8** %43, align 16
  %119 = call i32 @LookInStream_Read(%struct.ILookInStream* %1, i8* %118, i64 %75) #5
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %1222

121:                                              ; preds = %117
  %122 = load i8*, i8** %43, align 16
  %123 = call i32 @CrcCalc(i8* %122, i64 %75) #5
  %124 = icmp eq i32 %123, %77
  br i1 %124, label %125, label %1222

125:                                              ; preds = %121
  %126 = bitcast <2 x i64>* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %126) #5
  %127 = bitcast <2 x i64>* %28 to i8**
  %128 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %29, i64 0, i32 1
  %129 = bitcast i64* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %129) #5
  store i64 -6148914691236517206, i64* %30, align 8
  %130 = getelementptr inbounds <2 x i64>, <2 x i64>* %25, i64 0, i64 0
  %131 = getelementptr inbounds <2 x i64>, <2 x i64>* %28, i64 0, i64 0
  %132 = load <2 x i64>, <2 x i64>* %25, align 16
  store <2 x i64> %132, <2 x i64>* %28, align 16
  %133 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %30) #5
  %134 = icmp eq i32 %133, 0
  %135 = load i64, i64* %30, align 8
  %136 = icmp eq i64 %135, 23
  %137 = and i1 %134, %136
  br i1 %137, label %138, label %188

138:                                              ; preds = %125
  %139 = bitcast %struct.CSzAr* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %139) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %139, i8 -86, i64 80, i1 false) #5
  %140 = bitcast %struct.CBuf* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %140) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 -86, i64 16, i1 false) #5
  call void @Buf_Init(%struct.CBuf* nonnull %32) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %139, i8 0, i64 80, i1 false) #5
  %141 = load i64, i64* %80, align 8
  %142 = call fastcc i32 @SzReadAndDecodePackedStreams(%struct.ILookInStream* %1, %struct.CSzData* nonnull %29, %struct.CBuf* nonnull %32, i32 1, i64 %141, %struct.CSzAr* nonnull %31, %struct.ISzAlloc* %3) #5
  %143 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %3, i64 0, i32 1
  %144 = load void (i8*, i8*)*, void (i8*, i8*)** %143, align 8
  %145 = bitcast %struct.ISzAlloc* %3 to i8*
  %146 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %31, i64 0, i32 2
  %147 = bitcast i64** %146 to i8**
  %148 = load i8*, i8** %147, align 8
  call void %144(i8* %145, i8* %148) #5
  %149 = load void (i8*, i8*)*, void (i8*, i8*)** %143, align 8
  %150 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %31, i64 0, i32 3, i32 0
  %151 = load i8*, i8** %150, align 8
  call void %149(i8* %145, i8* %151) #5
  store i8* null, i8** %150, align 8
  %152 = load void (i8*, i8*)*, void (i8*, i8*)** %143, align 8
  %153 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %31, i64 0, i32 3, i32 1
  %154 = bitcast i32** %153 to i8**
  %155 = load i8*, i8** %154, align 8
  call void %152(i8* %145, i8* %155) #5
  store i32* null, i32** %153, align 8
  %156 = load void (i8*, i8*)*, void (i8*, i8*)** %143, align 8
  %157 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %31, i64 0, i32 4
  %158 = bitcast i64** %157 to i8**
  %159 = load i8*, i8** %158, align 8
  call void %156(i8* %145, i8* %159) #5
  %160 = load void (i8*, i8*)*, void (i8*, i8*)** %143, align 8
  %161 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %31, i64 0, i32 5
  %162 = bitcast i32** %161 to i8**
  %163 = load i8*, i8** %162, align 8
  call void %160(i8* %145, i8* %163) #5
  %164 = load void (i8*, i8*)*, void (i8*, i8*)** %143, align 8
  %165 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %31, i64 0, i32 6
  %166 = bitcast i32** %165 to i8**
  %167 = load i8*, i8** %166, align 8
  call void %164(i8* %145, i8* %167) #5
  %168 = load void (i8*, i8*)*, void (i8*, i8*)** %143, align 8
  %169 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %31, i64 0, i32 7
  %170 = load i8*, i8** %169, align 8
  call void %168(i8* %145, i8* %170) #5
  %171 = load void (i8*, i8*)*, void (i8*, i8*)** %143, align 8
  %172 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %31, i64 0, i32 8
  %173 = bitcast i64** %172 to i8**
  %174 = load i8*, i8** %173, align 8
  call void %171(i8* %145, i8* %174) #5
  %175 = load void (i8*, i8*)*, void (i8*, i8*)** %143, align 8
  %176 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %31, i64 0, i32 9
  %177 = load i8*, i8** %176, align 8
  call void %175(i8* %145, i8* %177) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %139, i8 0, i64 80, i1 false) #5
  %178 = icmp eq i32 %142, 0
  br i1 %178, label %180, label %179

179:                                              ; preds = %138
  call void @Buf_Free(%struct.CBuf* nonnull %32, %struct.ISzAlloc* %3) #5
  br label %186

180:                                              ; preds = %138
  %181 = getelementptr inbounds %struct.CBuf, %struct.CBuf* %32, i64 0, i32 1
  call void @Buf_Free(%struct.CBuf* nonnull %26, %struct.ISzAlloc* %3) #5
  %182 = bitcast %struct.CBuf* %32 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %130, align 16
  %184 = load i64, i64* %181, align 8
  store i64 %184, i64* %44, align 8
  store i64 %183, i64* %131, align 16
  store i64 %184, i64* %128, align 8
  %185 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %30) #5
  br label %186

186:                                              ; preds = %180, %179
  %187 = phi i32 [ %142, %179 ], [ %185, %180 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %140) #5
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %139) #5
  br label %188

188:                                              ; preds = %186, %125
  %189 = phi i32 [ %187, %186 ], [ %133, %125 ]
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %1220

191:                                              ; preds = %188
  %192 = load i64, i64* %30, align 8
  %193 = icmp eq i64 %192, 1
  br i1 %193, label %194, label %1220

194:                                              ; preds = %191
  %195 = bitcast [8 x %struct.CBuf]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %195) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %195, i8 -86, i64 128, i1 false) #5
  %196 = getelementptr inbounds [8 x %struct.CBuf], [8 x %struct.CBuf]* %22, i64 0, i64 0
  call void @Buf_Init(%struct.CBuf* nonnull %196) #5
  %197 = getelementptr inbounds [8 x %struct.CBuf], [8 x %struct.CBuf]* %22, i64 0, i64 1
  call void @Buf_Init(%struct.CBuf* %197) #5
  %198 = getelementptr inbounds [8 x %struct.CBuf], [8 x %struct.CBuf]* %22, i64 0, i64 2
  call void @Buf_Init(%struct.CBuf* %198) #5
  %199 = getelementptr inbounds [8 x %struct.CBuf], [8 x %struct.CBuf]* %22, i64 0, i64 3
  call void @Buf_Init(%struct.CBuf* %199) #5
  %200 = getelementptr inbounds [8 x %struct.CBuf], [8 x %struct.CBuf]* %22, i64 0, i64 4
  call void @Buf_Init(%struct.CBuf* %200) #5
  %201 = getelementptr inbounds [8 x %struct.CBuf], [8 x %struct.CBuf]* %22, i64 0, i64 5
  call void @Buf_Init(%struct.CBuf* %201) #5
  %202 = getelementptr inbounds [8 x %struct.CBuf], [8 x %struct.CBuf]* %22, i64 0, i64 6
  call void @Buf_Init(%struct.CBuf* %202) #5
  %203 = getelementptr inbounds [8 x %struct.CBuf], [8 x %struct.CBuf]* %22, i64 0, i64 7
  call void @Buf_Init(%struct.CBuf* %203) #5
  %204 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %204) #5
  store i64 -6148914691236517206, i64* %12, align 8
  %205 = bitcast %struct.CSubStreamInfo* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %205) #5
  %206 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %13, i64 0, i32 3
  %207 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %13, i64 0, i32 4, i32 0
  %208 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %13, i64 0, i32 4, i32 1
  %209 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %13, i64 0, i32 2
  %210 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %209, i64 0, i32 0
  %211 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %13, i64 0, i32 2, i32 1
  %212 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %13, i64 0, i32 1
  %213 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %13, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %205, i8 0, i64 56, i1 false) #5
  %214 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %12) #5
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %216, label %1211

216:                                              ; preds = %194
  %217 = load i64, i64* %12, align 8
  %218 = icmp eq i64 %217, 2
  br i1 %218, label %219, label %247

219:                                              ; preds = %216
  %220 = bitcast i64* %14 to i8*
  %221 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %220) #5
  store i64 -6148914691236517206, i64* %14, align 8
  %222 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %14) #5
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %1209

224:                                              ; preds = %219, %239
  %225 = load i64, i64* %14, align 8
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %230

227:                                              ; preds = %224
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220) #5
  %228 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %12) #5
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %245, label %1211

230:                                              ; preds = %224
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %221) #5
  store i64 -6148914691236517206, i64* %11, align 8
  %231 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %11) #5
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %237

233:                                              ; preds = %230
  %234 = load i64, i64* %11, align 8
  %235 = load i64, i64* %128, align 8
  %236 = icmp ult i64 %235, %234
  br i1 %236, label %237, label %239

237:                                              ; preds = %233, %230
  %238 = phi i32 [ 16, %233 ], [ %231, %230 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %221) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220) #5
  br label %1211

239:                                              ; preds = %233
  %240 = sub i64 %235, %234
  store i64 %240, i64* %128, align 8
  %241 = load i8*, i8** %127, align 16
  %242 = getelementptr inbounds i8, i8* %241, i64 %234
  store i8* %242, i8** %127, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %221) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %220) #5
  store i64 -6148914691236517206, i64* %14, align 8
  %243 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %14) #5
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %224, label %1209

245:                                              ; preds = %227
  %246 = load i64, i64* %12, align 8
  br label %247

247:                                              ; preds = %245, %216
  %248 = phi i64 [ %246, %245 ], [ %217, %216 ]
  %249 = icmp eq i64 %248, 3
  br i1 %249, label %250, label %298

250:                                              ; preds = %247
  %251 = bitcast %struct.CSzAr* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %251) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %251, i8 0, i64 80, i1 false) #5
  %252 = load i64, i64* %80, align 8
  %253 = call fastcc i32 @SzReadAndDecodePackedStreams(%struct.ILookInStream* %1, %struct.CSzData* nonnull %29, %struct.CBuf* nonnull %196, i32 8, i64 %252, %struct.CSzAr* nonnull %15, %struct.ISzAlloc* %3) #5
  %254 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %15, i64 0, i32 1
  %255 = load i32, i32* %254, align 4
  %256 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %3, i64 0, i32 1
  %257 = load void (i8*, i8*)*, void (i8*, i8*)** %256, align 8
  %258 = bitcast %struct.ISzAlloc* %3 to i8*
  %259 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %15, i64 0, i32 2
  %260 = bitcast i64** %259 to i8**
  %261 = load i8*, i8** %260, align 8
  call void %257(i8* %258, i8* %261) #5
  %262 = load void (i8*, i8*)*, void (i8*, i8*)** %256, align 8
  %263 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %15, i64 0, i32 3, i32 0
  %264 = load i8*, i8** %263, align 8
  call void %262(i8* %258, i8* %264) #5
  store i8* null, i8** %263, align 8
  %265 = load void (i8*, i8*)*, void (i8*, i8*)** %256, align 8
  %266 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %15, i64 0, i32 3, i32 1
  %267 = bitcast i32** %266 to i8**
  %268 = load i8*, i8** %267, align 8
  call void %265(i8* %258, i8* %268) #5
  store i32* null, i32** %266, align 8
  %269 = load void (i8*, i8*)*, void (i8*, i8*)** %256, align 8
  %270 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %15, i64 0, i32 4
  %271 = bitcast i64** %270 to i8**
  %272 = load i8*, i8** %271, align 8
  call void %269(i8* %258, i8* %272) #5
  %273 = load void (i8*, i8*)*, void (i8*, i8*)** %256, align 8
  %274 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %15, i64 0, i32 5
  %275 = bitcast i32** %274 to i8**
  %276 = load i8*, i8** %275, align 8
  call void %273(i8* %258, i8* %276) #5
  %277 = load void (i8*, i8*)*, void (i8*, i8*)** %256, align 8
  %278 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %15, i64 0, i32 6
  %279 = bitcast i32** %278 to i8**
  %280 = load i8*, i8** %279, align 8
  call void %277(i8* %258, i8* %280) #5
  %281 = load void (i8*, i8*)*, void (i8*, i8*)** %256, align 8
  %282 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %15, i64 0, i32 7
  %283 = load i8*, i8** %282, align 8
  call void %281(i8* %258, i8* %283) #5
  %284 = load void (i8*, i8*)*, void (i8*, i8*)** %256, align 8
  %285 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %15, i64 0, i32 8
  %286 = bitcast i64** %285 to i8**
  %287 = load i8*, i8** %286, align 8
  call void %284(i8* %258, i8* %287) #5
  %288 = load void (i8*, i8*)*, void (i8*, i8*)** %256, align 8
  %289 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %15, i64 0, i32 9
  %290 = load i8*, i8** %289, align 8
  call void %288(i8* %258, i8* %290) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %251, i8 0, i64 80, i1 false) #5
  %291 = icmp eq i32 %253, 0
  br i1 %291, label %293, label %292

292:                                              ; preds = %250
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %251) #5
  br label %1211

293:                                              ; preds = %250
  %294 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %12) #5
  %295 = icmp eq i32 %294, 0
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %251) #5
  br i1 %295, label %296, label %1211

296:                                              ; preds = %293
  %297 = load i64, i64* %12, align 8
  br label %298

298:                                              ; preds = %296, %247
  %299 = phi i32 [ %255, %296 ], [ 0, %247 ]
  %300 = phi i64 [ %297, %296 ], [ %248, %247 ]
  %301 = icmp eq i64 %300, 4
  br i1 %301, label %302, label %315

302:                                              ; preds = %298
  %303 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0
  %304 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 2
  %305 = call fastcc i32 @SzReadStreamsInfo(%struct.CSzAr* %303, %struct.CSzData* nonnull %29, i32 1073741824, %struct.CBuf* nonnull %196, i32 %299, i64* %304, %struct.CSubStreamInfo* nonnull %13, %struct.ISzAlloc* %2) #5
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %1211

307:                                              ; preds = %302
  %308 = load i64, i64* %80, align 8
  %309 = load i64, i64* %304, align 8
  %310 = add i64 %309, %308
  store i64 %310, i64* %304, align 8
  %311 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %12) #5
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %1211

313:                                              ; preds = %307
  %314 = load i64, i64* %12, align 8
  br label %315

315:                                              ; preds = %313, %298
  %316 = phi i64 [ %314, %313 ], [ %300, %298 ]
  switch i64 %316, label %317 [
    i64 0, label %1211
    i64 5, label %318
  ]

317:                                              ; preds = %315
  br label %1211

318:                                              ; preds = %315
  %319 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %319) #5
  store i64 -6148914691236517206, i64* %9, align 8
  %320 = load i64, i64* %128, align 8
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %338, label %322

322:                                              ; preds = %318
  %323 = load i8*, i8** %127, align 16
  %324 = load i8, i8* %323, align 1
  %325 = icmp sgt i8 %324, -1
  br i1 %325, label %326, label %330

326:                                              ; preds = %322
  %327 = zext i8 %324 to i32
  %328 = getelementptr inbounds i8, i8* %323, i64 1
  store i8* %328, i8** %127, align 16
  %329 = add i64 %320, -1
  store i64 %329, i64* %128, align 8
  br label %340

330:                                              ; preds = %322
  %331 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %9) #5
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %338

333:                                              ; preds = %330
  %334 = load i64, i64* %9, align 8
  %335 = icmp ugt i64 %334, 2147483646
  br i1 %335, label %338, label %336

336:                                              ; preds = %333
  %337 = trunc i64 %334 to i32
  br label %340

338:                                              ; preds = %333, %330, %318
  %339 = phi i32 [ 4, %333 ], [ 16, %318 ], [ %331, %330 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %319) #5
  br label %1211

340:                                              ; preds = %336, %326
  %341 = phi i32 [ %327, %326 ], [ %337, %336 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %319) #5
  %342 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 3
  store i32 %341, i32* %342, align 8
  %343 = bitcast i64* %16 to i8*
  %344 = bitcast i64* %17 to i8*
  %345 = bitcast <2 x i64>* %18 to i8*
  %346 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %2, i64 0, i32 1
  %347 = bitcast %struct.ISzAlloc* %2 to i8*
  %348 = add nuw i32 %341, 7
  %349 = lshr i32 %348, 3
  %350 = icmp eq i32 %349, 0
  %351 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %2, i64 0, i32 0
  %352 = zext i32 %349 to i64
  %353 = and i32 %341, 7
  %354 = icmp eq i32 %353, 0
  %355 = shl nsw i32 -1, %353
  %356 = xor i32 %355, -1
  %357 = sub nuw nsw i32 8, %353
  %358 = shl i32 %356, %357
  %359 = trunc i32 %358 to i8
  %360 = add nsw i32 %349, -1
  %361 = zext i32 %360 to i64
  %362 = bitcast i64* %7 to i8*
  %363 = icmp eq i32 %341, 0
  %364 = zext i32 %341 to i64
  %365 = shl nuw nsw i64 %364, 2
  %366 = bitcast i64* %8 to i8*
  %367 = add nuw nsw i32 %341, 1
  %368 = zext i32 %367 to i64
  %369 = shl nuw nsw i64 %368, 3
  %370 = and i32 %341, 1
  %371 = icmp eq i32 %341, 1
  %372 = sub i32 %341, %370
  %373 = icmp eq i32 %370, 0
  br label %374

374:                                              ; preds = %731, %340
  %375 = phi i64 [ 0, %340 ], [ %732, %731 ]
  %376 = phi i64 [ 0, %340 ], [ %733, %731 ]
  %377 = phi i32 [ 0, %340 ], [ %735, %731 ]
  %378 = phi %struct.CSzArEx* [ %0, %340 ], [ %736, %731 ]
  %379 = phi i32 [ 0, %340 ], [ %737, %731 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %343) #5
  store i64 -6148914691236517206, i64* %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %344) #5
  store i64 -6148914691236517206, i64* %17, align 8
  %380 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %16) #5
  %381 = icmp eq i32 %380, 0
  %382 = select i1 %381, i32 %379, i32 %380
  br i1 %381, label %383, label %728

383:                                              ; preds = %374
  %384 = load i64, i64* %16, align 8
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %386, label %390

386:                                              ; preds = %383
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %344) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %343) #5
  %387 = sub i32 %341, %377
  %388 = load i32, i32* %213, align 8
  %389 = icmp eq i32 %387, %388
  br i1 %389, label %739, label %1211

390:                                              ; preds = %383
  %391 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %17) #5
  %392 = icmp eq i32 %391, 0
  %393 = select i1 %392, i32 %382, i32 %391
  br i1 %392, label %394, label %728

394:                                              ; preds = %390
  %395 = load i64, i64* %17, align 8
  %396 = load i64, i64* %128, align 8
  %397 = icmp ult i64 %396, %395
  br i1 %397, label %726, label %398

398:                                              ; preds = %394
  %399 = icmp ugt i64 %384, 255
  br i1 %399, label %400, label %404

400:                                              ; preds = %398
  %401 = sub i64 %396, %395
  store i64 %401, i64* %128, align 8
  %402 = load i8*, i8** %127, align 16
  %403 = getelementptr inbounds i8, i8* %402, i64 %395
  store i8* %403, i8** %127, align 16
  br label %720

404:                                              ; preds = %398
  %405 = trunc i64 %384 to i32
  switch i32 %405, label %698 [
    i32 17, label %406
    i32 14, label %522
    i32 15, label %550
    i32 21, label %560
    i32 20, label %690
    i32 18, label %694
  ]

406:                                              ; preds = %404
  %407 = icmp eq i64 %396, 0
  br i1 %407, label %726, label %408

408:                                              ; preds = %406
  %409 = add i64 %396, -1
  store i64 %409, i64* %128, align 8
  %410 = load i8*, i8** %127, align 16
  %411 = getelementptr inbounds i8, i8* %410, i64 1
  store i8* %411, i8** %127, align 16
  %412 = load i8, i8* %410, align 1
  %413 = icmp eq i8 %412, 0
  br i1 %413, label %414, label %416

414:                                              ; preds = %408
  %415 = add i64 %395, -1
  br label %444

416:                                              ; preds = %408
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %366) #5
  store i64 -6148914691236517206, i64* %8, align 8
  %417 = icmp eq i64 %409, 0
  br i1 %417, label %433, label %418

418:                                              ; preds = %416
  %419 = load i8, i8* %411, align 1
  %420 = icmp sgt i8 %419, -1
  br i1 %420, label %421, label %425

421:                                              ; preds = %418
  %422 = zext i8 %419 to i32
  %423 = getelementptr inbounds i8, i8* %410, i64 2
  store i8* %423, i8** %127, align 16
  %424 = add i64 %396, -2
  store i64 %424, i64* %128, align 8
  br label %435

425:                                              ; preds = %418
  %426 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %8) #5
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %428, label %433

428:                                              ; preds = %425
  %429 = load i64, i64* %8, align 8
  %430 = icmp ugt i64 %429, 2147483646
  br i1 %430, label %433, label %431

431:                                              ; preds = %428
  %432 = trunc i64 %429 to i32
  br label %435

433:                                              ; preds = %428, %425, %416
  %434 = phi i32 [ 4, %428 ], [ 16, %416 ], [ %426, %425 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %366) #5
  br label %726

435:                                              ; preds = %431, %421
  %436 = phi i32 [ %422, %421 ], [ %432, %431 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %366) #5
  %437 = icmp ult i32 %436, %299
  br i1 %437, label %438, label %726

438:                                              ; preds = %435
  %439 = zext i32 %436 to i64
  %440 = getelementptr inbounds [8 x %struct.CBuf], [8 x %struct.CBuf]* %22, i64 0, i64 %439, i32 0
  %441 = load i8*, i8** %440, align 16
  %442 = getelementptr inbounds [8 x %struct.CBuf], [8 x %struct.CBuf]* %22, i64 0, i64 %439, i32 1
  %443 = load i64, i64* %442, align 8
  br label %444

444:                                              ; preds = %438, %414
  %445 = phi i64 [ %415, %414 ], [ %443, %438 ]
  %446 = phi i8* [ %411, %414 ], [ %441, %438 ]
  %447 = and i64 %445, 1
  %448 = icmp eq i64 %447, 0
  br i1 %448, label %449, label %726

449:                                              ; preds = %444
  %450 = load i8* (i8*, i64)*, i8* (i8*, i64)** %351, align 8
  %451 = call i8* %450(i8* %347, i64 %369) #5
  %452 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 12
  %453 = bitcast i64** %452 to i8**
  store i8* %451, i8** %453, align 8
  %454 = icmp eq i8* %451, null
  br i1 %454, label %726, label %455

455:                                              ; preds = %449
  %456 = icmp eq i64 %445, 0
  br i1 %456, label %463, label %457

457:                                              ; preds = %455
  %458 = load i8* (i8*, i64)*, i8* (i8*, i64)** %351, align 8
  %459 = call i8* %458(i8* %347, i64 %445) #5
  %460 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 13
  store i8* %459, i8** %460, align 8
  %461 = icmp eq i8* %459, null
  br i1 %461, label %726, label %462

462:                                              ; preds = %457
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %459, i8* align 1 %446, i64 %445, i1 false) #5
  br label %463

463:                                              ; preds = %462, %455
  %464 = phi %struct.CSzArEx* [ %378, %462 ], [ null, %455 ]
  %465 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %464, i64 0, i32 13
  %466 = load i8*, i8** %465, align 8
  %467 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %464, i64 0, i32 12
  %468 = load i64*, i64** %467, align 8
  store i64 0, i64* %468, align 8
  br i1 %363, label %510, label %469

469:                                              ; preds = %463
  %470 = icmp ult i64 %445, 2
  br i1 %470, label %730, label %471

471:                                              ; preds = %469
  %472 = add i64 %445, -2
  %473 = getelementptr inbounds i8, i8* %466, i64 %472
  %474 = load i8, i8* %473, align 1
  %475 = icmp eq i8 %474, 0
  br i1 %475, label %476, label %730

476:                                              ; preds = %471
  %477 = add i64 %445, -1
  %478 = getelementptr inbounds i8, i8* %466, i64 %477
  %479 = load i8, i8* %478, align 1
  %480 = icmp eq i8 %479, 0
  br i1 %480, label %481, label %730

481:                                              ; preds = %476
  %482 = ptrtoint i8* %466 to i64
  br label %483

483:                                              ; preds = %501, %481
  %484 = phi i32 [ %506, %501 ], [ %341, %481 ]
  %485 = phi i64* [ %487, %501 ], [ %468, %481 ]
  %486 = phi i64 [ %504, %501 ], [ 0, %481 ]
  %487 = getelementptr inbounds i64, i64* %485, i64 1
  %488 = icmp eq i64 %486, %445
  br i1 %488, label %730, label %489

489:                                              ; preds = %483
  %490 = getelementptr inbounds i8, i8* %466, i64 %486
  br label %491

491:                                              ; preds = %499, %489
  %492 = phi i8* [ %490, %489 ], [ %500, %499 ]
  %493 = load i8, i8* %492, align 1
  %494 = icmp eq i8 %493, 0
  br i1 %494, label %495, label %499

495:                                              ; preds = %491
  %496 = getelementptr inbounds i8, i8* %492, i64 1
  %497 = load i8, i8* %496, align 1
  %498 = icmp eq i8 %497, 0
  br i1 %498, label %501, label %499

499:                                              ; preds = %495, %491
  %500 = getelementptr inbounds i8, i8* %492, i64 2
  br label %491

501:                                              ; preds = %495
  %502 = ptrtoint i8* %492 to i64
  %503 = sub i64 %502, %482
  %504 = add nsw i64 %503, 2
  %505 = lshr i64 %504, 1
  store i64 %505, i64* %487, align 8
  %506 = add i32 %484, -1
  %507 = icmp eq i32 %506, 0
  br i1 %507, label %508, label %483

508:                                              ; preds = %501
  %509 = icmp eq i64 %504, %445
  br label %510

510:                                              ; preds = %463, %508
  %511 = phi i1 [ %509, %508 ], [ %456, %463 ]
  %512 = and i1 %413, %511
  br i1 %512, label %513, label %518

513:                                              ; preds = %510
  %514 = load i64, i64* %128, align 8
  %515 = sub i64 %514, %445
  store i64 %515, i64* %128, align 8
  %516 = load i8*, i8** %127, align 16
  %517 = getelementptr inbounds i8, i8* %516, i64 %445
  store i8* %517, i8** %127, align 16
  br label %720

518:                                              ; preds = %510
  %519 = select i1 %511, i32 0, i32 16
  %520 = xor i1 %511, true
  %521 = zext i1 %520 to i32
  br i1 %511, label %720, label %731

522:                                              ; preds = %404
  %523 = icmp ult i64 %396, %352
  br i1 %523, label %726, label %524

524:                                              ; preds = %522
  %525 = load i64, i64* %131, align 16
  %526 = sub i64 %396, %352
  store i64 %526, i64* %128, align 8
  %527 = inttoptr i64 %525 to i8*
  %528 = getelementptr inbounds i8, i8* %527, i64 %352
  store i8* %528, i8** %127, align 16
  br i1 %363, label %720, label %529

529:                                              ; preds = %524
  br i1 %371, label %702, label %530

530:                                              ; preds = %529, %1232
  %531 = phi i32 [ %1240, %1232 ], [ 0, %529 ]
  %532 = phi i32 [ %1236, %1232 ], [ 0, %529 ]
  %533 = phi i8 [ %1234, %1232 ], [ 0, %529 ]
  %534 = phi i8* [ %1233, %1232 ], [ %527, %529 ]
  %535 = phi i32 [ %1241, %1232 ], [ %372, %529 ]
  %536 = icmp eq i32 %532, 0
  br i1 %536, label %537, label %540

537:                                              ; preds = %530
  %538 = getelementptr inbounds i8, i8* %534, i64 1
  %539 = load i8, i8* %534, align 1
  br label %540

540:                                              ; preds = %537, %530
  %541 = phi i8* [ %538, %537 ], [ %534, %530 ]
  %542 = phi i8 [ %539, %537 ], [ %533, %530 ]
  %543 = phi i32 [ 8, %537 ], [ %532, %530 ]
  %544 = add i32 %543, -1
  %545 = zext i8 %542 to i32
  %546 = lshr i32 %545, %544
  %547 = and i32 %546, 1
  %548 = add i32 %547, %531
  %549 = icmp eq i32 %544, 0
  br i1 %549, label %1229, label %1232

550:                                              ; preds = %404
  %551 = add i32 %377, 7
  %552 = lshr i32 %551, 3
  %553 = zext i32 %552 to i64
  %554 = icmp ult i64 %396, %553
  br i1 %554, label %726, label %555

555:                                              ; preds = %550
  %556 = load i64, i64* %131, align 16
  %557 = sub i64 %396, %553
  store i64 %557, i64* %128, align 8
  %558 = inttoptr i64 %556 to i8*
  %559 = getelementptr inbounds i8, i8* %558, i64 %553
  store i8* %559, i8** %127, align 16
  br label %720

560:                                              ; preds = %404
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %345) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %345, i8 -86, i64 16, i1 false) #5
  %561 = load void (i8*, i8*)*, void (i8*, i8*)** %346, align 8
  %562 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 7, i32 0
  %563 = load i8*, i8** %562, align 8
  call void %561(i8* %347, i8* %563) #5
  store i8* null, i8** %562, align 8
  %564 = load void (i8*, i8*)*, void (i8*, i8*)** %346, align 8
  %565 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 7, i32 1
  %566 = bitcast i32** %565 to i8**
  %567 = load i8*, i8** %566, align 8
  call void %564(i8* %347, i8* %567) #5
  %568 = bitcast i8** %562 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %568, i8 0, i64 16, i1 false) #5
  %569 = load i64, i64* %128, align 8
  %570 = icmp eq i64 %569, 0
  br i1 %570, label %683, label %571

571:                                              ; preds = %560
  %572 = add i64 %569, -1
  store i64 %572, i64* %128, align 8
  %573 = load i8*, i8** %127, align 16
  %574 = getelementptr inbounds i8, i8* %573, i64 1
  store i8* %574, i8** %127, align 16
  br i1 %350, label %597, label %575

575:                                              ; preds = %571
  %576 = load i8, i8* %573, align 1
  %577 = icmp eq i8 %576, 0
  br i1 %577, label %578, label %590

578:                                              ; preds = %575
  %579 = icmp ult i64 %572, %352
  br i1 %579, label %683, label %580

580:                                              ; preds = %578
  %581 = load i8* (i8*, i64)*, i8* (i8*, i64)** %351, align 8
  %582 = call i8* %581(i8* %347, i64 %352) #5
  store i8* %582, i8** %562, align 8
  %583 = icmp eq i8* %582, null
  br i1 %583, label %683, label %584

584:                                              ; preds = %580
  %585 = load i8*, i8** %127, align 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %582, i8* align 1 %585, i64 %352, i1 false) #5
  %586 = load i64, i64* %128, align 8
  %587 = sub i64 %586, %352
  store i64 %587, i64* %128, align 8
  %588 = load i8*, i8** %127, align 16
  %589 = getelementptr inbounds i8, i8* %588, i64 %352
  store i8* %589, i8** %127, align 16
  br label %599

590:                                              ; preds = %575
  %591 = load i8* (i8*, i64)*, i8* (i8*, i64)** %351, align 8
  %592 = call i8* %591(i8* %347, i64 %352) #5
  store i8* %592, i8** %562, align 8
  %593 = icmp eq i8* %592, null
  br i1 %593, label %683, label %594

594:                                              ; preds = %590
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %592, i8 -1, i64 %352, i1 false) #5
  br i1 %354, label %597, label %595

595:                                              ; preds = %594
  %596 = getelementptr inbounds i8, i8* %592, i64 %361
  store i8 %359, i8* %596, align 1
  br label %597

597:                                              ; preds = %595, %594, %571
  %598 = load i64, i64* %128, align 8
  br label %599

599:                                              ; preds = %597, %584
  %600 = phi i64 [ %598, %597 ], [ %587, %584 ]
  %601 = icmp eq i64 %600, 0
  br i1 %601, label %683, label %602

602:                                              ; preds = %599
  %603 = add i64 %600, -1
  store i64 %603, i64* %128, align 8
  %604 = load i8*, i8** %127, align 16
  %605 = getelementptr inbounds i8, i8* %604, i64 1
  store i8* %605, i8** %127, align 16
  %606 = load i8, i8* %604, align 1
  %607 = icmp eq i8 %606, 0
  br i1 %607, label %636, label %608

608:                                              ; preds = %602
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %362) #5
  store i64 -6148914691236517206, i64* %7, align 8
  %609 = icmp eq i64 %603, 0
  br i1 %609, label %625, label %610

610:                                              ; preds = %608
  %611 = load i8, i8* %605, align 1
  %612 = icmp sgt i8 %611, -1
  br i1 %612, label %613, label %617

613:                                              ; preds = %610
  %614 = zext i8 %611 to i32
  %615 = getelementptr inbounds i8, i8* %604, i64 2
  store i8* %615, i8** %127, align 16
  %616 = add i64 %600, -2
  store i64 %616, i64* %128, align 8
  br label %627

617:                                              ; preds = %610
  %618 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %7) #5
  %619 = icmp eq i32 %618, 0
  br i1 %619, label %620, label %625

620:                                              ; preds = %617
  %621 = load i64, i64* %7, align 8
  %622 = icmp ugt i64 %621, 2147483646
  br i1 %622, label %625, label %623

623:                                              ; preds = %620
  %624 = trunc i64 %621 to i32
  br label %627

625:                                              ; preds = %620, %617, %608
  %626 = phi i32 [ 4, %620 ], [ 16, %608 ], [ %618, %617 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %362) #5
  br label %683

627:                                              ; preds = %623, %613
  %628 = phi i32 [ %614, %613 ], [ %624, %623 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %362) #5
  %629 = icmp ult i32 %628, %299
  br i1 %629, label %630, label %683

630:                                              ; preds = %627
  %631 = zext i32 %628 to i64
  %632 = getelementptr inbounds [8 x %struct.CBuf], [8 x %struct.CBuf]* %22, i64 0, i64 %631, i32 0
  %633 = bitcast i8** %632 to <2 x i64>*
  %634 = load <2 x i64>, <2 x i64>* %633, align 16
  store <2 x i64> %634, <2 x i64>* %18, align 16
  %635 = extractelement <2 x i64> %634, i32 1
  br label %636

636:                                              ; preds = %630, %602
  %637 = phi i64 [ %603, %602 ], [ %635, %630 ]
  %638 = phi %struct.CSzData* [ %29, %602 ], [ %19, %630 ]
  br i1 %363, label %639, label %643

639:                                              ; preds = %636
  store i32* null, i32** %565, align 8
  %640 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %638, i64 0, i32 0
  %641 = load i8*, i8** %640, align 8
  %642 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %638, i64 0, i32 1
  br label %685

643:                                              ; preds = %636
  %644 = load i8* (i8*, i64)*, i8* (i8*, i64)** %351, align 8
  %645 = call i8* %644(i8* %347, i64 %365) #5
  store i8* %645, i8** %566, align 8
  %646 = icmp eq i8* %645, null
  %647 = bitcast i8* %645 to i32*
  br i1 %646, label %683, label %648

648:                                              ; preds = %643
  %649 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %638, i64 0, i32 0
  %650 = load i8*, i8** %649, align 8
  %651 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %638, i64 0, i32 1
  %652 = load i64, i64* %651, align 8
  %653 = load i8*, i8** %562, align 8
  br label %654

654:                                              ; preds = %678, %648
  %655 = phi i64 [ 0, %648 ], [ %681, %678 ]
  %656 = phi i8* [ %650, %648 ], [ %680, %678 ]
  %657 = phi i64 [ %652, %648 ], [ %679, %678 ]
  %658 = trunc i64 %655 to i32
  %659 = lshr i64 %655, 3
  %660 = and i64 %659, 536870911
  %661 = getelementptr inbounds i8, i8* %653, i64 %660
  %662 = load i8, i8* %661, align 1
  %663 = zext i8 %662 to i32
  %664 = and i32 %658, 7
  %665 = lshr i32 128, %664
  %666 = and i32 %665, %663
  %667 = icmp eq i32 %666, 0
  br i1 %667, label %676, label %668

668:                                              ; preds = %654
  %669 = icmp ult i64 %657, 4
  br i1 %669, label %683, label %670

670:                                              ; preds = %668
  %671 = bitcast i8* %656 to i32*
  %672 = load i32, i32* %671, align 4
  %673 = getelementptr inbounds i32, i32* %647, i64 %655
  store i32 %672, i32* %673, align 4
  %674 = add i64 %657, -4
  %675 = getelementptr inbounds i8, i8* %656, i64 4
  br label %678

676:                                              ; preds = %654
  %677 = getelementptr inbounds i32, i32* %647, i64 %655
  store i32 0, i32* %677, align 4
  br label %678

678:                                              ; preds = %676, %670
  %679 = phi i64 [ %674, %670 ], [ %657, %676 ]
  %680 = phi i8* [ %675, %670 ], [ %656, %676 ]
  %681 = add nuw nsw i64 %655, 1
  %682 = icmp eq i64 %681, %364
  br i1 %682, label %685, label %654

683:                                              ; preds = %643, %627, %599, %590, %580, %578, %560, %668, %625
  %684 = phi i32 [ %626, %625 ], [ 16, %668 ], [ 16, %627 ], [ 16, %599 ], [ 2, %643 ], [ 16, %560 ], [ 16, %578 ], [ 2, %580 ], [ 2, %590 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %345) #5
  br label %728

685:                                              ; preds = %678, %639
  %686 = phi i64* [ %642, %639 ], [ %651, %678 ]
  %687 = phi i8** [ %640, %639 ], [ %649, %678 ]
  %688 = phi i64 [ %637, %639 ], [ %679, %678 ]
  %689 = phi i8* [ %641, %639 ], [ %680, %678 ]
  store i8* %689, i8** %687, align 8
  store i64 %688, i64* %686, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %345) #5
  br label %720

690:                                              ; preds = %404
  %691 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 8
  %692 = call fastcc i32 @ReadTime(%struct.CSzBitUi64s* %691, i32 %341, %struct.CSzData* nonnull %29, %struct.CBuf* nonnull %196, i32 %299, %struct.ISzAlloc* %2) #5
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %720, label %728

694:                                              ; preds = %404
  %695 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 9
  %696 = call fastcc i32 @ReadTime(%struct.CSzBitUi64s* %695, i32 %341, %struct.CSzData* nonnull %29, %struct.CBuf* nonnull %196, i32 %299, %struct.ISzAlloc* %2) #5
  %697 = icmp eq i32 %696, 0
  br i1 %697, label %720, label %728

698:                                              ; preds = %404
  %699 = sub i64 %396, %395
  store i64 %699, i64* %128, align 8
  %700 = load i8*, i8** %127, align 16
  %701 = getelementptr inbounds i8, i8* %700, i64 %395
  store i8* %701, i8** %127, align 16
  br label %720

702:                                              ; preds = %1232, %529
  %703 = phi i32 [ undef, %529 ], [ %1240, %1232 ]
  %704 = phi i32 [ 0, %529 ], [ %1240, %1232 ]
  %705 = phi i32 [ 0, %529 ], [ %1236, %1232 ]
  %706 = phi i8 [ 0, %529 ], [ %1234, %1232 ]
  %707 = phi i8* [ %527, %529 ], [ %1233, %1232 ]
  br i1 %373, label %720, label %708

708:                                              ; preds = %702
  %709 = icmp eq i32 %705, 0
  br i1 %709, label %710, label %712

710:                                              ; preds = %708
  %711 = load i8, i8* %707, align 1
  br label %712

712:                                              ; preds = %708, %710
  %713 = phi i8 [ %711, %710 ], [ %706, %708 ]
  %714 = phi i32 [ 8, %710 ], [ %705, %708 ]
  %715 = zext i8 %713 to i32
  %716 = add i32 %714, -1
  %717 = lshr i32 %715, %716
  %718 = and i32 %717, 1
  %719 = add i32 %718, %704
  br label %720

720:                                              ; preds = %712, %702, %698, %694, %690, %685, %555, %524, %518, %513, %400
  %721 = phi i64 [ %375, %400 ], [ %375, %698 ], [ %375, %694 ], [ %375, %690 ], [ %375, %685 ], [ %375, %513 ], [ %525, %524 ], [ %375, %555 ], [ %375, %518 ], [ %525, %702 ], [ %525, %712 ]
  %722 = phi i64 [ %376, %400 ], [ %376, %698 ], [ %376, %694 ], [ %376, %690 ], [ %376, %685 ], [ %376, %513 ], [ 0, %524 ], [ %556, %555 ], [ %376, %518 ], [ 0, %702 ], [ 0, %712 ]
  %723 = phi i32 [ %377, %400 ], [ %377, %698 ], [ %377, %694 ], [ %377, %690 ], [ %377, %685 ], [ %377, %513 ], [ 0, %524 ], [ %377, %555 ], [ %377, %518 ], [ %703, %702 ], [ %719, %712 ]
  %724 = phi %struct.CSzArEx* [ %378, %400 ], [ %378, %698 ], [ %378, %694 ], [ %378, %690 ], [ %378, %685 ], [ %464, %513 ], [ %378, %524 ], [ %378, %555 ], [ %464, %518 ], [ %378, %702 ], [ %378, %712 ]
  %725 = phi i32 [ %379, %400 ], [ %379, %698 ], [ %379, %694 ], [ %379, %690 ], [ %379, %685 ], [ %379, %513 ], [ %379, %524 ], [ %379, %555 ], [ %379, %518 ], [ %393, %702 ], [ %393, %712 ]
  br label %731

726:                                              ; preds = %550, %522, %457, %449, %444, %435, %406, %394, %433
  %727 = phi i32 [ %434, %433 ], [ 16, %550 ], [ 16, %522 ], [ 16, %406 ], [ 16, %444 ], [ 2, %449 ], [ 2, %457 ], [ 16, %435 ], [ 16, %394 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %344) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %343) #5
  br label %1211

728:                                              ; preds = %694, %690, %390, %374, %683
  %729 = phi i32 [ %684, %683 ], [ %380, %374 ], [ %391, %390 ], [ %692, %690 ], [ %696, %694 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %344) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %343) #5
  br label %1211

730:                                              ; preds = %476, %471, %469, %483
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %344) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %343) #5
  br label %1211

731:                                              ; preds = %720, %518
  %732 = phi i64 [ %721, %720 ], [ %375, %518 ]
  %733 = phi i64 [ %722, %720 ], [ %376, %518 ]
  %734 = phi i32 [ 0, %720 ], [ %521, %518 ]
  %735 = phi i32 [ %723, %720 ], [ %377, %518 ]
  %736 = phi %struct.CSzArEx* [ %724, %720 ], [ %464, %518 ]
  %737 = phi i32 [ %725, %720 ], [ %519, %518 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %344) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %343) #5
  %738 = icmp eq i32 %734, 0
  br i1 %738, label %374, label %1211

739:                                              ; preds = %386
  %740 = bitcast i64* %20 to i8*
  %741 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %740) #5
  store i64 -6148914691236517206, i64* %20, align 8
  %742 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %20) #5
  %743 = icmp eq i32 %742, 0
  br i1 %743, label %744, label %1207

744:                                              ; preds = %739, %767
  %745 = load i64, i64* %20, align 8
  %746 = icmp eq i64 %745, 0
  br i1 %746, label %747, label %758

747:                                              ; preds = %744
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %740) #5
  %748 = load i8* (i8*, i64)*, i8* (i8*, i64)** %351, align 8
  %749 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 0, i32 1
  %750 = load i32, i32* %749, align 4
  %751 = add i32 %750, 1
  %752 = zext i32 %751 to i64
  %753 = shl nuw nsw i64 %752, 2
  %754 = call i8* %748(i8* %347, i64 %753) #5
  %755 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 10
  %756 = bitcast i32** %755 to i8**
  store i8* %754, i8** %756, align 8
  %757 = icmp eq i8* %754, null
  br i1 %757, label %1205, label %773

758:                                              ; preds = %744
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %741) #5
  store i64 -6148914691236517206, i64* %6, align 8
  %759 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %6) #5
  %760 = icmp eq i32 %759, 0
  br i1 %760, label %761, label %765

761:                                              ; preds = %758
  %762 = load i64, i64* %6, align 8
  %763 = load i64, i64* %128, align 8
  %764 = icmp ult i64 %763, %762
  br i1 %764, label %765, label %767

765:                                              ; preds = %761, %758
  %766 = phi i32 [ 16, %761 ], [ %759, %758 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %741) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %740) #5
  br label %1211

767:                                              ; preds = %761
  %768 = sub i64 %763, %762
  store i64 %768, i64* %128, align 8
  %769 = load i8*, i8** %127, align 16
  %770 = getelementptr inbounds i8, i8* %769, i64 %762
  store i8* %770, i8** %127, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %741) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %740) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %740) #5
  store i64 -6148914691236517206, i64* %20, align 8
  %771 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %29, i64* nonnull %20) #5
  %772 = icmp eq i32 %771, 0
  br i1 %772, label %744, label %1207

773:                                              ; preds = %747
  %774 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 3
  %775 = load i32, i32* %774, align 8
  %776 = icmp eq i32 %775, 0
  br i1 %776, label %777, label %779

777:                                              ; preds = %773
  %778 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 11
  store i32* null, i32** %778, align 8
  br label %792

779:                                              ; preds = %773
  %780 = load i8* (i8*, i64)*, i8* (i8*, i64)** %351, align 8
  %781 = zext i32 %775 to i64
  %782 = shl nuw nsw i64 %781, 2
  %783 = call i8* %780(i8* %347, i64 %782) #5
  %784 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 11
  %785 = bitcast i32** %784 to i8**
  store i8* %783, i8** %785, align 8
  %786 = icmp eq i8* %783, null
  br i1 %786, label %1205, label %787

787:                                              ; preds = %779
  %788 = load i32, i32* %774, align 8
  %789 = add i32 %788, 1
  %790 = zext i32 %789 to i64
  %791 = shl nuw nsw i64 %790, 3
  br label %792

792:                                              ; preds = %787, %777
  %793 = phi i64 [ %791, %787 ], [ 8, %777 ]
  %794 = load i8* (i8*, i64)*, i8* (i8*, i64)** %351, align 8
  %795 = call i8* %794(i8* %347, i64 %793) #5
  %796 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 4
  %797 = bitcast i64** %796 to i8**
  store i8* %795, i8** %797, align 8
  %798 = icmp eq i8* %795, null
  br i1 %798, label %1205, label %799

799:                                              ; preds = %792
  %800 = load i32, i32* %774, align 8
  %801 = add i32 %800, 7
  %802 = lshr i32 %801, 3
  %803 = icmp eq i32 %802, 0
  br i1 %803, label %804, label %806

804:                                              ; preds = %799
  %805 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 5
  store i8* null, i8** %805, align 8
  br label %814

806:                                              ; preds = %799
  %807 = load i8* (i8*, i64)*, i8* (i8*, i64)** %351, align 8
  %808 = zext i32 %802 to i64
  %809 = call i8* %807(i8* %347, i64 %808) #5
  %810 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 5
  store i8* %809, i8** %810, align 8
  %811 = icmp eq i8* %809, null
  br i1 %811, label %1205, label %812

812:                                              ; preds = %806
  %813 = load i32, i32* %774, align 8
  br label %814

814:                                              ; preds = %812, %804
  %815 = phi i32 [ %813, %812 ], [ %800, %804 ]
  %816 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 6
  %817 = zext i32 %815 to i64
  %818 = icmp eq i32 %815, 0
  br i1 %818, label %819, label %821

819:                                              ; preds = %814
  %820 = bitcast %struct.CSzBitUi32s* %816 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %820, i8 0, i64 16, i1 false) #5
  br label %835

821:                                              ; preds = %814
  %822 = load i8* (i8*, i64)*, i8* (i8*, i64)** %351, align 8
  %823 = add nuw nsw i64 %817, 7
  %824 = lshr i64 %823, 3
  %825 = call i8* %822(i8* %347, i64 %824) #5
  %826 = getelementptr inbounds %struct.CSzBitUi32s, %struct.CSzBitUi32s* %816, i64 0, i32 0
  store i8* %825, i8** %826, align 8
  %827 = icmp eq i8* %825, null
  br i1 %827, label %1205, label %828

828:                                              ; preds = %821
  %829 = load i8* (i8*, i64)*, i8* (i8*, i64)** %351, align 8
  %830 = shl nuw nsw i64 %817, 2
  %831 = call i8* %829(i8* %347, i64 %830) #5
  %832 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 6, i32 1
  %833 = bitcast i32** %832 to i8**
  store i8* %831, i8** %833, align 8
  %834 = icmp eq i8* %831, null
  br i1 %834, label %1205, label %835

835:                                              ; preds = %828, %819
  %836 = load i64, i64* %208, align 8
  %837 = icmp eq i64 %836, 0
  br i1 %837, label %852, label %838

838:                                              ; preds = %835
  %839 = add i64 %836, -1
  store i64 %839, i64* %208, align 8
  %840 = load i8*, i8** %207, align 8
  %841 = getelementptr inbounds i8, i8* %840, i64 1
  store i8* %841, i8** %207, align 8
  %842 = load i8, i8* %840, align 1
  %843 = icmp eq i8 %842, 0
  br i1 %843, label %846, label %844

844:                                              ; preds = %838
  %845 = zext i8 %842 to i32
  br label %852

846:                                              ; preds = %838
  %847 = load i32, i32* %212, align 4
  %848 = add i32 %847, 7
  %849 = lshr i32 %848, 3
  %850 = zext i32 %849 to i64
  %851 = getelementptr inbounds i8, i8* %841, i64 %850
  br label %852

852:                                              ; preds = %846, %844, %835
  %853 = phi i8* [ null, %844 ], [ %841, %846 ], [ null, %835 ]
  %854 = phi i8* [ %841, %844 ], [ %851, %846 ], [ null, %835 ]
  %855 = phi i32 [ %845, %844 ], [ 0, %846 ], [ 0, %835 ]
  br i1 %363, label %856, label %858

856:                                              ; preds = %852
  %857 = load i64*, i64** %796, align 8
  store i64 0, i64* %857, align 8
  br label %1152

858:                                              ; preds = %852
  %859 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 5
  %860 = getelementptr inbounds %struct.CSzBitUi32s, %struct.CSzBitUi32s* %816, i64 0, i32 0
  %861 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 6, i32 1
  %862 = inttoptr i64 %375 to i8*
  %863 = icmp eq i64 %375, 0
  %864 = icmp eq i64 %376, 0
  %865 = inttoptr i64 %376 to i8*
  %866 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 11
  %867 = bitcast i64* %5 to i8*
  %868 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 0, i32 8
  %869 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 0, i32 6
  %870 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 0, i32 7
  %871 = bitcast i64* %21 to i8*
  %872 = icmp eq i32 %855, 0
  %873 = icmp eq i8* %853, null
  %874 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 0, i32 3, i32 0
  %875 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %378, i64 0, i32 0, i32 3, i32 1
  br label %876

876:                                              ; preds = %1129, %858
  %877 = phi i64 [ 0, %858 ], [ %1138, %1129 ]
  %878 = phi i8 [ -128, %858 ], [ %1139, %1129 ]
  %879 = phi i8 [ 0, %858 ], [ %1137, %1129 ]
  %880 = phi i8 [ 0, %858 ], [ %1136, %1129 ]
  %881 = phi i32 [ 0, %858 ], [ %1135, %1129 ]
  %882 = phi i64 [ 0, %858 ], [ %1134, %1129 ]
  %883 = phi i32 [ 0, %858 ], [ %1133, %1129 ]
  %884 = phi i32 [ 0, %858 ], [ %1132, %1129 ]
  %885 = phi i32 [ 0, %858 ], [ %1131, %1129 ]
  %886 = phi i32 [ 0, %858 ], [ %1130, %1129 ]
  %887 = icmp eq i8 %878, 0
  br i1 %887, label %888, label %896

888:                                              ; preds = %876
  %889 = add nuw nsw i64 %877, 4294967295
  %890 = lshr i64 %889, 3
  %891 = load i8*, i8** %859, align 8
  %892 = and i64 %890, 536870911
  %893 = getelementptr inbounds i8, i8* %891, i64 %892
  store i8 %880, i8* %893, align 1
  %894 = load i8*, i8** %860, align 8
  %895 = getelementptr inbounds i8, i8* %894, i64 %892
  store i8 %879, i8* %895, align 1
  br label %896

896:                                              ; preds = %888, %876
  %897 = phi i8 [ 0, %888 ], [ %880, %876 ]
  %898 = phi i8 [ 0, %888 ], [ %879, %876 ]
  %899 = phi i8 [ -128, %888 ], [ %878, %876 ]
  %900 = load i64*, i64** %796, align 8
  %901 = getelementptr inbounds i64, i64* %900, i64 %877
  store i64 %882, i64* %901, align 8
  %902 = load i32*, i32** %861, align 8
  %903 = getelementptr inbounds i32, i32* %902, i64 %877
  store i32 0, i32* %903, align 4
  br i1 %863, label %937, label %904

904:                                              ; preds = %896
  %905 = trunc i64 %877 to i32
  %906 = lshr i64 %877, 3
  %907 = and i64 %906, 536870911
  %908 = getelementptr inbounds i8, i8* %862, i64 %907
  %909 = load i8, i8* %908, align 1
  %910 = zext i8 %909 to i32
  %911 = and i32 %905, 7
  %912 = lshr i32 128, %911
  %913 = and i32 %912, %910
  %914 = icmp eq i32 %913, 0
  br i1 %914, label %937, label %915

915:                                              ; preds = %904
  br i1 %864, label %928, label %916

916:                                              ; preds = %915
  %917 = lshr i32 %885, 3
  %918 = zext i32 %917 to i64
  %919 = getelementptr inbounds i8, i8* %865, i64 %918
  %920 = load i8, i8* %919, align 1
  %921 = zext i8 %920 to i32
  %922 = and i32 %885, 7
  %923 = lshr i32 128, %922
  %924 = and i32 %923, %921
  %925 = icmp eq i32 %924, 0
  %926 = select i1 %925, i8 %899, i8 0
  %927 = add i32 %885, 1
  br label %928

928:                                              ; preds = %916, %915
  %929 = phi i32 [ %927, %916 ], [ %885, %915 ]
  %930 = phi i8 [ %926, %916 ], [ %899, %915 ]
  %931 = or i8 %930, %897
  %932 = icmp eq i32 %883, 0
  %933 = load i32*, i32** %866, align 8
  %934 = getelementptr inbounds i32, i32* %933, i64 %877
  br i1 %932, label %936, label %935

935:                                              ; preds = %928
  store i32 %884, i32* %934, align 4
  br label %1011

936:                                              ; preds = %928
  store i32 -1, i32* %934, align 4
  br label %1129

937:                                              ; preds = %904, %896
  %938 = icmp eq i32 %883, 0
  br i1 %938, label %939, label %998

939:                                              ; preds = %937
  %940 = load i32, i32* %749, align 4
  %941 = icmp ult i32 %884, %940
  br i1 %941, label %942, label %1205

942:                                              ; preds = %939
  %943 = zext i32 %884 to i64
  %944 = trunc i64 %877 to i32
  br label %945

945:                                              ; preds = %990, %942
  %946 = phi i64 [ %943, %942 ], [ %991, %990 ]
  %947 = phi i64 [ %882, %942 ], [ %988, %990 ]
  %948 = load i32*, i32** %755, align 8
  %949 = getelementptr inbounds i32, i32* %948, i64 %946
  store i32 %944, i32* %949, align 4
  %950 = load i8*, i8** %210, align 8
  %951 = icmp eq i8* %950, null
  br i1 %951, label %995, label %952

952:                                              ; preds = %945
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %867) #5
  store i64 -6148914691236517206, i64* %5, align 8
  %953 = load i64, i64* %211, align 8
  %954 = icmp eq i64 %953, 0
  br i1 %954, label %970, label %955

955:                                              ; preds = %952
  %956 = load i8, i8* %950, align 1
  %957 = icmp sgt i8 %956, -1
  br i1 %957, label %958, label %962

958:                                              ; preds = %955
  %959 = zext i8 %956 to i32
  %960 = getelementptr inbounds i8, i8* %950, i64 1
  store i8* %960, i8** %210, align 8
  %961 = add i64 %953, -1
  store i64 %961, i64* %211, align 8
  br label %972

962:                                              ; preds = %955
  %963 = call fastcc i32 @ReadNumber(%struct.CSzData* %209, i64* nonnull %5) #5
  %964 = icmp eq i32 %963, 0
  br i1 %964, label %965, label %970

965:                                              ; preds = %962
  %966 = load i64, i64* %5, align 8
  %967 = icmp ugt i64 %966, 2147483646
  br i1 %967, label %970, label %968

968:                                              ; preds = %965
  %969 = trunc i64 %966 to i32
  br label %972

970:                                              ; preds = %965, %962, %952
  %971 = phi i32 [ 4, %965 ], [ 16, %952 ], [ %963, %962 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %867) #5
  br label %1205

972:                                              ; preds = %968, %958
  %973 = phi i32 [ %959, %958 ], [ %969, %968 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %867) #5
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %975, label %995

975:                                              ; preds = %972
  %976 = load i64*, i64** %868, align 8
  %977 = load i32*, i32** %869, align 8
  %978 = getelementptr inbounds i32, i32* %977, i64 %946
  %979 = load i32, i32* %978, align 4
  %980 = load i8*, i8** %870, align 8
  %981 = getelementptr inbounds i8, i8* %980, i64 %946
  %982 = load i8, i8* %981, align 1
  %983 = zext i8 %982 to i32
  %984 = add i32 %979, %983
  %985 = zext i32 %984 to i64
  %986 = getelementptr inbounds i64, i64* %976, i64 %985
  %987 = load i64, i64* %986, align 8
  %988 = add i64 %987, %947
  %989 = icmp ult i64 %988, %987
  br i1 %989, label %1205, label %990

990:                                              ; preds = %975
  %991 = add nuw nsw i64 %946, 1
  %992 = load i32, i32* %749, align 4
  %993 = zext i32 %992 to i64
  %994 = icmp ult i64 %991, %993
  br i1 %994, label %945, label %1205

995:                                              ; preds = %972, %945
  %996 = phi i32 [ 1, %945 ], [ %973, %972 ]
  %997 = trunc i64 %946 to i32
  br label %998

998:                                              ; preds = %995, %937
  %999 = phi i32 [ %886, %937 ], [ %996, %995 ]
  %1000 = phi i32 [ %884, %937 ], [ %997, %995 ]
  %1001 = phi i32 [ %883, %937 ], [ %996, %995 ]
  %1002 = phi i64 [ %882, %937 ], [ %947, %995 ]
  %1003 = load i32*, i32** %866, align 8
  %1004 = getelementptr inbounds i32, i32* %1003, i64 %877
  store i32 %1000, i32* %1004, align 4
  br i1 %863, label %1025, label %1005

1005:                                             ; preds = %998
  %1006 = trunc i64 %877 to i32
  %1007 = lshr i64 %877, 3
  %1008 = and i64 %1007, 536870911
  %1009 = and i32 %1006, 7
  %1010 = lshr i32 128, %1009
  br label %1011

1011:                                             ; preds = %1005, %935
  %1012 = phi i32 [ %1010, %1005 ], [ %912, %935 ]
  %1013 = phi i64 [ %1008, %1005 ], [ %907, %935 ]
  %1014 = phi i64 [ %1002, %1005 ], [ %882, %935 ]
  %1015 = phi i32 [ %1001, %1005 ], [ %883, %935 ]
  %1016 = phi i32 [ %1000, %1005 ], [ %884, %935 ]
  %1017 = phi i32 [ %999, %1005 ], [ %886, %935 ]
  %1018 = phi i32 [ %885, %1005 ], [ %929, %935 ]
  %1019 = phi i8 [ %897, %1005 ], [ %931, %935 ]
  %1020 = getelementptr inbounds i8, i8* %862, i64 %1013
  %1021 = load i8, i8* %1020, align 1
  %1022 = zext i8 %1021 to i32
  %1023 = and i32 %1012, %1022
  %1024 = icmp eq i32 %1023, 0
  br i1 %1024, label %1025, label %1129

1025:                                             ; preds = %1011, %998
  %1026 = phi i64 [ %1014, %1011 ], [ %1002, %998 ]
  %1027 = phi i32 [ %1015, %1011 ], [ %1001, %998 ]
  %1028 = phi i32 [ %1016, %1011 ], [ %1000, %998 ]
  %1029 = phi i32 [ %1017, %1011 ], [ %999, %998 ]
  %1030 = phi i8 [ %1019, %1011 ], [ %897, %998 ]
  %1031 = phi i32 [ %1018, %1011 ], [ %885, %998 ]
  %1032 = add i32 %1027, -1
  %1033 = icmp eq i32 %1032, 0
  br i1 %1033, label %1034, label %1102

1034:                                             ; preds = %1025
  %1035 = load i64*, i64** %868, align 8
  %1036 = load i32*, i32** %869, align 8
  %1037 = zext i32 %1028 to i64
  %1038 = getelementptr inbounds i32, i32* %1036, i64 %1037
  %1039 = load i32, i32* %1038, align 4
  %1040 = load i8*, i8** %870, align 8
  %1041 = getelementptr inbounds i8, i8* %1040, i64 %1037
  %1042 = load i8, i8* %1041, align 1
  %1043 = zext i8 %1042 to i32
  %1044 = add i32 %1039, %1043
  %1045 = zext i32 %1044 to i64
  %1046 = getelementptr inbounds i64, i64* %1035, i64 %1045
  %1047 = load i64, i64* %1046, align 8
  %1048 = load i64*, i64** %796, align 8
  %1049 = load i32*, i32** %755, align 8
  %1050 = getelementptr inbounds i32, i32* %1049, i64 %1037
  %1051 = load i32, i32* %1050, align 4
  %1052 = zext i32 %1051 to i64
  %1053 = getelementptr inbounds i64, i64* %1048, i64 %1052
  %1054 = load i64, i64* %1053, align 8
  %1055 = sub i64 %1026, %1054
  %1056 = icmp ult i64 %1047, %1055
  br i1 %1056, label %1205, label %1057

1057:                                             ; preds = %1034
  %1058 = add i64 %1054, %1047
  %1059 = icmp ult i64 %1058, %1047
  br i1 %1059, label %1205, label %1060

1060:                                             ; preds = %1057
  %1061 = icmp eq i32 %1029, 1
  br i1 %1061, label %1062, label %1083

1062:                                             ; preds = %1060
  %1063 = load i8*, i8** %874, align 8
  %1064 = icmp eq i8* %1063, null
  br i1 %1064, label %1083, label %1065

1065:                                             ; preds = %1062
  %1066 = trunc i64 %877 to i32
  %1067 = lshr i64 %877, 3
  %1068 = and i64 %1067, 536870911
  %1069 = getelementptr inbounds i8, i8* %1063, i64 %1068
  %1070 = load i8, i8* %1069, align 1
  %1071 = zext i8 %1070 to i32
  %1072 = and i32 %1066, 7
  %1073 = lshr i32 128, %1072
  %1074 = and i32 %1073, %1071
  %1075 = icmp eq i32 %1074, 0
  br i1 %1075, label %1083, label %1076

1076:                                             ; preds = %1065
  %1077 = load i32*, i32** %875, align 8
  %1078 = getelementptr inbounds i32, i32* %1077, i64 %1037
  %1079 = load i32, i32* %1078, align 4
  %1080 = load i32*, i32** %861, align 8
  %1081 = getelementptr inbounds i32, i32* %1080, i64 %877
  store i32 %1079, i32* %1081, align 4
  %1082 = or i8 %899, %898
  br label %1098

1083:                                             ; preds = %1065, %1062, %1060
  br i1 %872, label %1084, label %1088

1084:                                             ; preds = %1083
  br i1 %873, label %1098, label %1085

1085:                                             ; preds = %1084
  %1086 = load i8, i8* %853, align 1
  %1087 = icmp slt i8 %1086, 0
  br i1 %1087, label %1088, label %1098

1088:                                             ; preds = %1085, %1083
  %1089 = zext i32 %881 to i64
  %1090 = shl nuw nsw i64 %1089, 2
  %1091 = getelementptr inbounds i8, i8* %854, i64 %1090
  %1092 = bitcast i8* %1091 to i32*
  %1093 = load i32, i32* %1092, align 4
  %1094 = load i32*, i32** %861, align 8
  %1095 = getelementptr inbounds i32, i32* %1094, i64 %877
  store i32 %1093, i32* %1095, align 4
  %1096 = add i32 %881, 1
  %1097 = or i8 %899, %898
  br label %1098

1098:                                             ; preds = %1088, %1085, %1084, %1076
  %1099 = phi i32 [ %881, %1076 ], [ %1096, %1088 ], [ %881, %1085 ], [ %881, %1084 ]
  %1100 = phi i8 [ %1082, %1076 ], [ %1097, %1088 ], [ %898, %1085 ], [ %898, %1084 ]
  %1101 = add i32 %1028, 1
  br label %1129

1102:                                             ; preds = %1025
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %871) #5
  store i64 -6148914691236517206, i64* %21, align 8
  %1103 = call fastcc i32 @ReadNumber(%struct.CSzData* %206, i64* nonnull %21) #5
  %1104 = icmp eq i32 %1103, 0
  br i1 %1104, label %1105, label %1128

1105:                                             ; preds = %1102
  %1106 = load i64, i64* %21, align 8
  %1107 = add i64 %1106, %1026
  %1108 = icmp ult i64 %1107, %1106
  br i1 %1108, label %1109, label %1110

1109:                                             ; preds = %1105
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %871) #5
  br label %1205

1110:                                             ; preds = %1105
  br i1 %872, label %1111, label %1115

1111:                                             ; preds = %1110
  br i1 %873, label %1125, label %1112

1112:                                             ; preds = %1111
  %1113 = load i8, i8* %853, align 1
  %1114 = icmp slt i8 %1113, 0
  br i1 %1114, label %1115, label %1125

1115:                                             ; preds = %1112, %1110
  %1116 = zext i32 %881 to i64
  %1117 = shl nuw nsw i64 %1116, 2
  %1118 = getelementptr inbounds i8, i8* %854, i64 %1117
  %1119 = bitcast i8* %1118 to i32*
  %1120 = load i32, i32* %1119, align 4
  %1121 = load i32*, i32** %861, align 8
  %1122 = getelementptr inbounds i32, i32* %1121, i64 %877
  store i32 %1120, i32* %1122, align 4
  %1123 = add i32 %881, 1
  %1124 = or i8 %899, %898
  br label %1125

1125:                                             ; preds = %1115, %1112, %1111
  %1126 = phi i32 [ %881, %1111 ], [ %881, %1112 ], [ %1123, %1115 ]
  %1127 = phi i8 [ %898, %1111 ], [ %898, %1112 ], [ %1124, %1115 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %871) #5
  br label %1129

1128:                                             ; preds = %1102
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %871) #5
  br label %1211

1129:                                             ; preds = %1125, %1098, %1011, %936
  %1130 = phi i32 [ %1029, %1098 ], [ %1017, %1011 ], [ %886, %936 ], [ %1029, %1125 ]
  %1131 = phi i32 [ %1031, %1098 ], [ %1018, %1011 ], [ %929, %936 ], [ %1031, %1125 ]
  %1132 = phi i32 [ %1101, %1098 ], [ %1016, %1011 ], [ %884, %936 ], [ %1028, %1125 ]
  %1133 = phi i32 [ 0, %1098 ], [ %1015, %1011 ], [ 0, %936 ], [ %1032, %1125 ]
  %1134 = phi i64 [ %1058, %1098 ], [ %1014, %1011 ], [ %882, %936 ], [ %1107, %1125 ]
  %1135 = phi i32 [ %1099, %1098 ], [ %881, %1011 ], [ %881, %936 ], [ %1126, %1125 ]
  %1136 = phi i8 [ %1030, %1098 ], [ %1019, %1011 ], [ %931, %936 ], [ %1030, %1125 ]
  %1137 = phi i8 [ %1100, %1098 ], [ %898, %1011 ], [ %898, %936 ], [ %1127, %1125 ]
  %1138 = add nuw nsw i64 %877, 1
  %1139 = lshr i8 %899, 1
  %1140 = icmp eq i64 %1138, %364
  br i1 %1140, label %1141, label %876

1141:                                             ; preds = %1129
  %1142 = add i32 %341, -1
  %1143 = lshr i32 %1142, 3
  %1144 = load i8*, i8** %859, align 8
  %1145 = zext i32 %1143 to i64
  %1146 = getelementptr inbounds i8, i8* %1144, i64 %1145
  store i8 %1136, i8* %1146, align 1
  %1147 = load i8*, i8** %860, align 8
  %1148 = getelementptr inbounds i8, i8* %1147, i64 %1145
  store i8 %1137, i8* %1148, align 1
  %1149 = load i64*, i64** %796, align 8
  %1150 = getelementptr inbounds i64, i64* %1149, i64 %364
  store i64 %1134, i64* %1150, align 8
  %1151 = icmp eq i32 %1133, 0
  br i1 %1151, label %1152, label %1205

1152:                                             ; preds = %1141, %856
  %1153 = phi i32 [ 0, %856 ], [ %1132, %1141 ]
  %1154 = load i32*, i32** %755, align 8
  %1155 = zext i32 %1153 to i64
  %1156 = getelementptr inbounds i32, i32* %1154, i64 %1155
  store i32 %341, i32* %1156, align 4
  %1157 = load i32, i32* %749, align 4
  %1158 = icmp ult i32 %1153, %1157
  %1159 = load i8*, i8** %210, align 8
  %1160 = icmp ne i8* %1159, null
  br i1 %1158, label %1161, label %1199

1161:                                             ; preds = %1152
  %1162 = bitcast i64* %10 to i8*
  br label %1171

1163:                                             ; preds = %1195
  %1164 = load i32*, i32** %755, align 8
  %1165 = getelementptr inbounds i32, i32* %1164, i64 %1198
  store i32 %341, i32* %1165, align 4
  %1166 = load i32, i32* %749, align 4
  %1167 = zext i32 %1166 to i64
  %1168 = icmp ult i64 %1198, %1167
  %1169 = load i8*, i8** %210, align 8
  %1170 = icmp ne i8* %1169, null
  br i1 %1168, label %1171, label %1199

1171:                                             ; preds = %1163, %1161
  %1172 = phi i64 [ %1155, %1161 ], [ %1198, %1163 ]
  %1173 = phi i1 [ %1160, %1161 ], [ %1170, %1163 ]
  %1174 = phi i8* [ %1159, %1161 ], [ %1169, %1163 ]
  br i1 %1173, label %1175, label %1205

1175:                                             ; preds = %1171
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1162) #5
  store i64 -6148914691236517206, i64* %10, align 8
  %1176 = load i64, i64* %211, align 8
  %1177 = icmp eq i64 %1176, 0
  br i1 %1177, label %1193, label %1178

1178:                                             ; preds = %1175
  %1179 = load i8, i8* %1174, align 1
  %1180 = icmp sgt i8 %1179, -1
  br i1 %1180, label %1181, label %1185

1181:                                             ; preds = %1178
  %1182 = zext i8 %1179 to i32
  %1183 = getelementptr inbounds i8, i8* %1174, i64 1
  store i8* %1183, i8** %210, align 8
  %1184 = add i64 %1176, -1
  store i64 %1184, i64* %211, align 8
  br label %1195

1185:                                             ; preds = %1178
  %1186 = call fastcc i32 @ReadNumber(%struct.CSzData* %209, i64* nonnull %10) #5
  %1187 = icmp eq i32 %1186, 0
  br i1 %1187, label %1188, label %1193

1188:                                             ; preds = %1185
  %1189 = load i64, i64* %10, align 8
  %1190 = icmp ugt i64 %1189, 2147483646
  br i1 %1190, label %1193, label %1191

1191:                                             ; preds = %1188
  %1192 = trunc i64 %1189 to i32
  br label %1195

1193:                                             ; preds = %1188, %1185, %1175
  %1194 = phi i32 [ 4, %1188 ], [ 16, %1175 ], [ %1186, %1185 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1162) #5
  br label %1205

1195:                                             ; preds = %1191, %1181
  %1196 = phi i32 [ %1182, %1181 ], [ %1192, %1191 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1162) #5
  %1197 = icmp eq i32 %1196, 0
  %1198 = add nuw nsw i64 %1172, 1
  br i1 %1197, label %1163, label %1205

1199:                                             ; preds = %1163, %1152
  %1200 = phi i1 [ %1160, %1152 ], [ %1170, %1163 ]
  %1201 = xor i1 %1200, true
  %1202 = load i64, i64* %211, align 8
  %1203 = icmp eq i64 %1202, 0
  %1204 = or i1 %1203, %1201
  br i1 %1204, label %1211, label %1205

1205:                                             ; preds = %1057, %1034, %939, %990, %975, %1195, %1171, %1199, %1193, %1141, %1109, %970, %828, %821, %806, %792, %779, %747
  %1206 = phi i32 [ %1194, %1193 ], [ 16, %1109 ], [ %971, %970 ], [ 16, %1199 ], [ 16, %1141 ], [ 2, %806 ], [ 2, %792 ], [ 2, %779 ], [ 2, %747 ], [ 2, %821 ], [ 2, %828 ], [ 16, %1171 ], [ 16, %1195 ], [ 16, %975 ], [ 16, %990 ], [ 16, %939 ], [ 16, %1034 ], [ 16, %1057 ]
  br label %1211

1207:                                             ; preds = %767, %739
  %1208 = phi i32 [ %742, %739 ], [ %771, %767 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %740) #5
  br label %1211

1209:                                             ; preds = %239, %219
  %1210 = phi i32 [ %222, %219 ], [ %243, %239 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220) #5
  br label %1211

1211:                                             ; preds = %731, %1209, %1207, %1205, %1199, %1128, %765, %730, %728, %726, %386, %338, %317, %315, %307, %302, %293, %292, %237, %227, %194
  %1212 = phi i32 [ 16, %317 ], [ %311, %307 ], [ %305, %302 ], [ %228, %227 ], [ %214, %194 ], [ 0, %315 ], [ 16, %386 ], [ %253, %292 ], [ %339, %338 ], [ %727, %726 ], [ %1206, %1205 ], [ %1103, %1128 ], [ %238, %237 ], [ %766, %765 ], [ 0, %1199 ], [ %294, %293 ], [ %1208, %1207 ], [ %1210, %1209 ], [ %729, %728 ], [ 16, %730 ], [ %737, %731 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %205) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %204) #5
  call void @Buf_Free(%struct.CBuf* nonnull %196, %struct.ISzAlloc* %3) #5
  call void @Buf_Free(%struct.CBuf* %197, %struct.ISzAlloc* %3) #5
  call void @Buf_Free(%struct.CBuf* %198, %struct.ISzAlloc* %3) #5
  call void @Buf_Free(%struct.CBuf* %199, %struct.ISzAlloc* %3) #5
  call void @Buf_Free(%struct.CBuf* %200, %struct.ISzAlloc* %3) #5
  call void @Buf_Free(%struct.CBuf* %201, %struct.ISzAlloc* %3) #5
  call void @Buf_Free(%struct.CBuf* %202, %struct.ISzAlloc* %3) #5
  call void @Buf_Free(%struct.CBuf* %203, %struct.ISzAlloc* %3) #5
  %1213 = icmp eq i32 %1212, 0
  br i1 %1213, label %1214, label %1218

1214:                                             ; preds = %1211
  %1215 = load i64, i64* %128, align 8
  %1216 = icmp eq i64 %1215, 0
  %1217 = select i1 %1216, i32 0, i32 11
  br label %1218

1218:                                             ; preds = %1214, %1211
  %1219 = phi i32 [ %1212, %1211 ], [ %1217, %1214 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %195) #5
  br label %1220

1220:                                             ; preds = %1218, %191, %188
  %1221 = phi i32 [ %1219, %1218 ], [ %189, %188 ], [ 4, %191 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %129) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %126) #5
  br label %1222

1222:                                             ; preds = %1220, %121, %117
  %1223 = phi i32 [ %1221, %1220 ], [ 16, %121 ], [ %119, %117 ]
  call void @Buf_Free(%struct.CBuf* nonnull %26, %struct.ISzAlloc* %3) #5
  br label %1224

1224:                                             ; preds = %4, %50, %53, %68, %71, %85, %87, %109, %112, %113, %114, %1222
  %1225 = phi i32 [ %1223, %1222 ], [ %110, %109 ], [ %96, %113 ], [ %51, %50 ], [ %48, %4 ], [ 4, %68 ], [ 3, %71 ], [ 0, %85 ], [ 17, %87 ], [ 2, %114 ], [ 6, %112 ], [ 17, %53 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #5
  %1226 = icmp eq i32 %1225, 0
  br i1 %1226, label %1228, label %1227

1227:                                             ; preds = %1224
  call void @SzArEx_Free(%struct.CSzArEx* %0, %struct.ISzAlloc* %2)
  br label %1228

1228:                                             ; preds = %1224, %1227
  ret i32 %1225

1229:                                             ; preds = %540
  %1230 = getelementptr inbounds i8, i8* %541, i64 1
  %1231 = load i8, i8* %541, align 1
  br label %1232

1232:                                             ; preds = %1229, %540
  %1233 = phi i8* [ %1230, %1229 ], [ %541, %540 ]
  %1234 = phi i8 [ %1231, %1229 ], [ %542, %540 ]
  %1235 = phi i32 [ 8, %1229 ], [ %544, %540 ]
  %1236 = add i32 %1235, -1
  %1237 = zext i8 %1234 to i32
  %1238 = lshr i32 %1237, %1236
  %1239 = and i32 %1238, 1
  %1240 = add i32 %1239, %548
  %1241 = add i32 %535, -2
  %1242 = icmp eq i32 %1241, 0
  br i1 %1242, label %702, label %530
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SzArEx_Extract(%struct.CSzArEx*, %struct.ILookInStream*, i32, i32* nocapture, i8** nocapture, i64* nocapture, i64* nocapture, i64* nocapture, %struct.ISzAlloc*, %struct.ISzAlloc*) local_unnamed_addr #0 {
  %11 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 11
  %12 = load i32*, i32** %11, align 8
  %13 = zext i32 %2 to i64
  %14 = getelementptr inbounds i32, i32* %12, i64 %13
  %15 = load i32, i32* %14, align 4
  store i64 0, i64* %6, align 8
  store i64 0, i64* %7, align 8
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %22

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %8, i64 0, i32 1
  %19 = load void (i8*, i8*)*, void (i8*, i8*)** %18, align 8
  %20 = bitcast %struct.ISzAlloc* %8 to i8*
  %21 = load i8*, i8** %4, align 8
  tail call void %19(i8* %20, i8* %21) #5
  store i32 -1, i32* %3, align 4
  store i8* null, i8** %4, align 8
  store i64 0, i64* %5, align 8
  br label %114

22:                                               ; preds = %10
  %23 = load i8*, i8** %4, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %30, label %25

25:                                               ; preds = %22
  %26 = load i32, i32* %3, align 4
  %27 = icmp eq i32 %26, %15
  br i1 %27, label %28, label %30

28:                                               ; preds = %25
  %29 = zext i32 %15 to i64
  br label %66

30:                                               ; preds = %25, %22
  %31 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0
  %32 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 8
  %33 = load i64*, i64** %32, align 8
  %34 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 6
  %35 = load i32*, i32** %34, align 8
  %36 = zext i32 %15 to i64
  %37 = getelementptr inbounds i32, i32* %35, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 0, i32 7
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 %36
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = add i32 %38, %43
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds i64, i64* %33, i64 %45
  %47 = load i64, i64* %46, align 8
  store i32 %15, i32* %3, align 4
  %48 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %8, i64 0, i32 1
  %49 = load void (i8*, i8*)*, void (i8*, i8*)** %48, align 8
  %50 = bitcast %struct.ISzAlloc* %8 to i8*
  %51 = load i8*, i8** %4, align 8
  tail call void %49(i8* %50, i8* %51) #5
  store i8* null, i8** %4, align 8
  store i64 %47, i64* %5, align 8
  %52 = icmp eq i64 %47, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %30
  %54 = load i8*, i8** %4, align 8
  br label %60

55:                                               ; preds = %30
  %56 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %8, i64 0, i32 0
  %57 = load i8* (i8*, i64)*, i8* (i8*, i64)** %56, align 8
  %58 = tail call i8* %57(i8* %50, i64 %47) #5
  store i8* %58, i8** %4, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %114, label %60

60:                                               ; preds = %53, %55
  %61 = phi i8* [ %54, %53 ], [ %58, %55 ]
  %62 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 2
  %63 = load i64, i64* %62, align 8
  %64 = tail call i32 @SzAr_DecodeFolder(%struct.CSzAr* %31, i32 %15, %struct.ILookInStream* %1, i64 %63, i8* %61, i64 %47, %struct.ISzAlloc* %9) #5
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %114

66:                                               ; preds = %28, %60
  %67 = phi i64 [ %29, %28 ], [ %36, %60 ]
  %68 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 4
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 %13
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 10
  %73 = load i32*, i32** %72, align 8
  %74 = getelementptr inbounds i32, i32* %73, i64 %67
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i64, i64* %69, i64 %76
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %71, %78
  store i64 %79, i64* %6, align 8
  %80 = load i64*, i64** %68, align 8
  %81 = add i32 %2, 1
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i64, i64* %80, i64 %82
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %84, %71
  store i64 %85, i64* %7, align 8
  %86 = load i64, i64* %6, align 8
  %87 = add i64 %86, %85
  %88 = load i64, i64* %5, align 8
  %89 = icmp ugt i64 %87, %88
  br i1 %89, label %114, label %90

90:                                               ; preds = %66
  %91 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 6, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = icmp eq i8* %92, null
  br i1 %93, label %114, label %94

94:                                               ; preds = %90
  %95 = lshr i32 %2, 3
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %92, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = and i32 %2, 7
  %101 = lshr i32 128, %100
  %102 = and i32 %101, %99
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %114, label %104

104:                                              ; preds = %94
  %105 = load i8*, i8** %4, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 %86
  %107 = tail call i32 @CrcCalc(i8* %106, i64 %85) #5
  %108 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 6, i32 1
  %109 = load i32*, i32** %108, align 8
  %110 = getelementptr inbounds i32, i32* %109, i64 %13
  %111 = load i32, i32* %110, align 4
  %112 = icmp eq i32 %107, %111
  %113 = select i1 %112, i32 0, i32 3
  br label %114

114:                                              ; preds = %90, %94, %104, %55, %60, %66, %17
  %115 = phi i32 [ 0, %17 ], [ 11, %66 ], [ %64, %60 ], [ 2, %55 ], [ %113, %104 ], [ 0, %90 ], [ 0, %94 ]
  ret i32 %115
}

declare i32 @SzAr_DecodeFolder(%struct.CSzAr*, i32, %struct.ILookInStream*, i64, i8*, i64, %struct.ISzAlloc*) local_unnamed_addr #3

declare i32 @CrcCalc(i8*, i64) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @SzArEx_GetFileNameUtf16(%struct.CSzArEx* nocapture readonly, i64, i16*) local_unnamed_addr #4 {
  %4 = bitcast i16* %2 to i8*
  %5 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 12
  %6 = load i64*, i64** %5, align 8
  %7 = getelementptr inbounds i64, i64* %6, i64 %1
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %1, 1
  %10 = getelementptr inbounds i64, i64* %6, i64 %9
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %11, %8
  %13 = icmp eq i16* %2, null
  br i1 %13, label %163, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.CSzArEx, %struct.CSzArEx* %0, i64 0, i32 13
  %16 = load i8*, i8** %15, align 8
  %17 = shl i64 %8, 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %17
  %19 = icmp eq i64 %12, 0
  br i1 %19, label %163, label %20

20:                                               ; preds = %14
  %21 = icmp ult i64 %12, 16
  br i1 %21, label %114, label %22

22:                                               ; preds = %20
  %23 = getelementptr i16, i16* %2, i64 %12
  %24 = bitcast i16* %23 to i8*
  %25 = shl i64 %11, 1
  %26 = getelementptr i8, i8* %16, i64 %25
  %27 = icmp ugt i8* %26, %4
  %28 = icmp ult i8* %18, %24
  %29 = and i1 %27, %28
  br i1 %29, label %114, label %30

30:                                               ; preds = %22
  %31 = and i64 %12, -16
  %32 = add i64 %31, -16
  %33 = lshr exact i64 %32, 4
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 3
  %36 = icmp ult i64 %32, 48
  br i1 %36, label %92, label %37

37:                                               ; preds = %30
  %38 = sub nsw i64 %34, %35
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %89, %39 ]
  %41 = phi i64 [ %38, %37 ], [ %90, %39 ]
  %42 = shl i64 %40, 1
  %43 = getelementptr inbounds i8, i8* %18, i64 %42
  %44 = bitcast i8* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !2
  %46 = getelementptr inbounds i8, i8* %43, i64 16
  %47 = bitcast i8* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !2
  %49 = getelementptr inbounds i16, i16* %2, i64 %40
  %50 = bitcast i16* %49 to <8 x i16>*
  store <8 x i16> %45, <8 x i16>* %50, align 2, !alias.scope !5, !noalias !2
  %51 = getelementptr inbounds i16, i16* %49, i64 8
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %52, align 2, !alias.scope !5, !noalias !2
  %53 = or i64 %40, 16
  %54 = shl i64 %53, 1
  %55 = getelementptr inbounds i8, i8* %18, i64 %54
  %56 = bitcast i8* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2, !alias.scope !2
  %58 = getelementptr inbounds i8, i8* %55, i64 16
  %59 = bitcast i8* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !2
  %61 = getelementptr inbounds i16, i16* %2, i64 %53
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %57, <8 x i16>* %62, align 2, !alias.scope !5, !noalias !2
  %63 = getelementptr inbounds i16, i16* %61, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %64, align 2, !alias.scope !5, !noalias !2
  %65 = or i64 %40, 32
  %66 = shl i64 %65, 1
  %67 = getelementptr inbounds i8, i8* %18, i64 %66
  %68 = bitcast i8* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !2
  %70 = getelementptr inbounds i8, i8* %67, i64 16
  %71 = bitcast i8* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !2
  %73 = getelementptr inbounds i16, i16* %2, i64 %65
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %74, align 2, !alias.scope !5, !noalias !2
  %75 = getelementptr inbounds i16, i16* %73, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !5, !noalias !2
  %77 = or i64 %40, 48
  %78 = shl i64 %77, 1
  %79 = getelementptr inbounds i8, i8* %18, i64 %78
  %80 = bitcast i8* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !2
  %82 = getelementptr inbounds i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !2
  %85 = getelementptr inbounds i16, i16* %2, i64 %77
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %86, align 2, !alias.scope !5, !noalias !2
  %87 = getelementptr inbounds i16, i16* %85, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %88, align 2, !alias.scope !5, !noalias !2
  %89 = add i64 %40, 64
  %90 = add i64 %41, -4
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %39, !llvm.loop !7

92:                                               ; preds = %39, %30
  %93 = phi i64 [ 0, %30 ], [ %89, %39 ]
  %94 = icmp eq i64 %35, 0
  br i1 %94, label %112, label %95

95:                                               ; preds = %92, %95
  %96 = phi i64 [ %109, %95 ], [ %93, %92 ]
  %97 = phi i64 [ %110, %95 ], [ %35, %92 ]
  %98 = shl i64 %96, 1
  %99 = getelementptr inbounds i8, i8* %18, i64 %98
  %100 = bitcast i8* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !2
  %102 = getelementptr inbounds i8, i8* %99, i64 16
  %103 = bitcast i8* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !2
  %105 = getelementptr inbounds i16, i16* %2, i64 %96
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %106, align 2, !alias.scope !5, !noalias !2
  %107 = getelementptr inbounds i16, i16* %105, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !5, !noalias !2
  %109 = add i64 %96, 16
  %110 = add i64 %97, -1
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %95, !llvm.loop !9

112:                                              ; preds = %95, %92
  %113 = icmp eq i64 %12, %31
  br i1 %113, label %163, label %114

114:                                              ; preds = %112, %22, %20
  %115 = phi i64 [ 0, %22 ], [ 0, %20 ], [ %31, %112 ]
  %116 = sub i64 %11, %8
  %117 = xor i64 %115, -1
  %118 = add i64 %11, %117
  %119 = sub i64 %118, %8
  %120 = and i64 %116, 3
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %133, label %122

122:                                              ; preds = %114, %122
  %123 = phi i64 [ %130, %122 ], [ %115, %114 ]
  %124 = phi i64 [ %131, %122 ], [ %120, %114 ]
  %125 = shl i64 %123, 1
  %126 = getelementptr inbounds i8, i8* %18, i64 %125
  %127 = bitcast i8* %126 to i16*
  %128 = load i16, i16* %127, align 2
  %129 = getelementptr inbounds i16, i16* %2, i64 %123
  store i16 %128, i16* %129, align 2
  %130 = add nuw i64 %123, 1
  %131 = add i64 %124, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %122, !llvm.loop !11

133:                                              ; preds = %122, %114
  %134 = phi i64 [ %115, %114 ], [ %130, %122 ]
  %135 = icmp ult i64 %119, 3
  br i1 %135, label %163, label %136

136:                                              ; preds = %133, %136
  %137 = phi i64 [ %161, %136 ], [ %134, %133 ]
  %138 = shl i64 %137, 1
  %139 = getelementptr inbounds i8, i8* %18, i64 %138
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = getelementptr inbounds i16, i16* %2, i64 %137
  store i16 %141, i16* %142, align 2
  %143 = add nuw i64 %137, 1
  %144 = shl i64 %143, 1
  %145 = getelementptr inbounds i8, i8* %18, i64 %144
  %146 = bitcast i8* %145 to i16*
  %147 = load i16, i16* %146, align 2
  %148 = getelementptr inbounds i16, i16* %2, i64 %143
  store i16 %147, i16* %148, align 2
  %149 = add nuw i64 %137, 2
  %150 = shl i64 %149, 1
  %151 = getelementptr inbounds i8, i8* %18, i64 %150
  %152 = bitcast i8* %151 to i16*
  %153 = load i16, i16* %152, align 2
  %154 = getelementptr inbounds i16, i16* %2, i64 %149
  store i16 %153, i16* %154, align 2
  %155 = add nuw i64 %137, 3
  %156 = shl i64 %155, 1
  %157 = getelementptr inbounds i8, i8* %18, i64 %156
  %158 = bitcast i8* %157 to i16*
  %159 = load i16, i16* %158, align 2
  %160 = getelementptr inbounds i16, i16* %2, i64 %155
  store i16 %159, i16* %160, align 2
  %161 = add nuw i64 %137, 4
  %162 = icmp eq i64 %161, %12
  br i1 %162, label %163, label %136, !llvm.loop !12

163:                                              ; preds = %133, %136, %112, %14, %3
  ret i64 %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @ReadNumber(%struct.CSzData* nocapture, i64* nocapture) unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %64, label %6

6:                                                ; preds = %2
  %7 = add i64 %4, -1
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 1
  store i8* %10, i8** %8, align 8
  %11 = load i8, i8* %9, align 1
  %12 = zext i8 %11 to i32
  %13 = icmp sgt i8 %11, -1
  br i1 %13, label %14, label %16

14:                                               ; preds = %6
  %15 = zext i8 %11 to i64
  store i64 %15, i64* %1, align 8
  br label %64

16:                                               ; preds = %6
  %17 = icmp eq i64 %7, 0
  br i1 %17, label %64, label %18

18:                                               ; preds = %16
  %19 = add i64 %4, -2
  store i64 %19, i64* %3, align 8
  %20 = getelementptr inbounds i8, i8* %9, i64 2
  store i8* %20, i8** %8, align 8
  %21 = load i8, i8* %10, align 1
  %22 = zext i8 %21 to i32
  %23 = and i32 %12, 64
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %30

25:                                               ; preds = %18
  %26 = shl nuw nsw i32 %12, 8
  %27 = and i32 %26, 16128
  %28 = or i32 %27, %22
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %1, align 8
  br label %64

30:                                               ; preds = %18
  %31 = icmp eq i64 %19, 0
  br i1 %31, label %64, label %32

32:                                               ; preds = %30
  %33 = add i64 %4, -3
  store i64 %33, i64* %3, align 8
  %34 = getelementptr inbounds i8, i8* %9, i64 3
  store i8* %34, i8** %8, align 8
  %35 = load i8, i8* %20, align 1
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 8
  %38 = or i32 %37, %22
  %39 = zext i32 %38 to i64
  store i64 %39, i64* %1, align 8
  %40 = and i8 %11, 32
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %50

42:                                               ; preds = %111, %97, %83, %69, %53, %32
  %43 = phi i64 [ %39, %32 ], [ %61, %53 ], [ %77, %69 ], [ %91, %83 ], [ %105, %97 ], [ %119, %111 ]
  %44 = phi i64 [ 16, %32 ], [ 24, %53 ], [ 32, %69 ], [ 40, %83 ], [ 48, %97 ], [ 56, %111 ]
  %45 = phi i32 [ 287, %32 ], [ 271, %53 ], [ 263, %69 ], [ 259, %83 ], [ 257, %97 ], [ 256, %111 ]
  %46 = and i32 %45, %12
  %47 = zext i32 %46 to i64
  %48 = shl i64 %47, %44
  %49 = or i64 %43, %48
  store i64 %49, i64* %1, align 8
  br label %64

50:                                               ; preds = %32
  %51 = load i64, i64* %3, align 8
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %64, label %53

53:                                               ; preds = %50
  %54 = add i64 %51, -1
  store i64 %54, i64* %3, align 8
  %55 = load i8*, i8** %8, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 1
  store i8* %56, i8** %8, align 8
  %57 = load i8, i8* %55, align 1
  %58 = zext i8 %57 to i64
  %59 = shl nuw nsw i64 %58, 16
  %60 = load i64, i64* %1, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %1, align 8
  %62 = and i8 %11, 16
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %42, label %66

64:                                               ; preds = %50, %66, %80, %94, %108, %122, %125, %42, %30, %16, %2, %25, %14
  %65 = phi i32 [ 0, %14 ], [ 0, %25 ], [ 16, %2 ], [ 16, %16 ], [ 16, %30 ], [ 0, %42 ], [ 16, %50 ], [ 16, %66 ], [ 16, %80 ], [ 16, %94 ], [ 16, %108 ], [ 16, %122 ], [ 0, %125 ]
  ret i32 %65

66:                                               ; preds = %53
  %67 = load i64, i64* %3, align 8
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %64, label %69

69:                                               ; preds = %66
  %70 = add i64 %67, -1
  store i64 %70, i64* %3, align 8
  %71 = load i8*, i8** %8, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 1
  store i8* %72, i8** %8, align 8
  %73 = load i8, i8* %71, align 1
  %74 = zext i8 %73 to i64
  %75 = shl nuw nsw i64 %74, 24
  %76 = load i64, i64* %1, align 8
  %77 = or i64 %75, %76
  store i64 %77, i64* %1, align 8
  %78 = and i8 %11, 8
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %42, label %80

80:                                               ; preds = %69
  %81 = load i64, i64* %3, align 8
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %64, label %83

83:                                               ; preds = %80
  %84 = add i64 %81, -1
  store i64 %84, i64* %3, align 8
  %85 = load i8*, i8** %8, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 1
  store i8* %86, i8** %8, align 8
  %87 = load i8, i8* %85, align 1
  %88 = zext i8 %87 to i64
  %89 = shl nuw nsw i64 %88, 32
  %90 = load i64, i64* %1, align 8
  %91 = or i64 %89, %90
  store i64 %91, i64* %1, align 8
  %92 = and i8 %11, 4
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %42, label %94

94:                                               ; preds = %83
  %95 = load i64, i64* %3, align 8
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %64, label %97

97:                                               ; preds = %94
  %98 = add i64 %95, -1
  store i64 %98, i64* %3, align 8
  %99 = load i8*, i8** %8, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 1
  store i8* %100, i8** %8, align 8
  %101 = load i8, i8* %99, align 1
  %102 = zext i8 %101 to i64
  %103 = shl nuw nsw i64 %102, 40
  %104 = load i64, i64* %1, align 8
  %105 = or i64 %103, %104
  store i64 %105, i64* %1, align 8
  %106 = and i8 %11, 2
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %42, label %108

108:                                              ; preds = %97
  %109 = load i64, i64* %3, align 8
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %64, label %111

111:                                              ; preds = %108
  %112 = add i64 %109, -1
  store i64 %112, i64* %3, align 8
  %113 = load i8*, i8** %8, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 1
  store i8* %114, i8** %8, align 8
  %115 = load i8, i8* %113, align 1
  %116 = zext i8 %115 to i64
  %117 = shl nuw nsw i64 %116, 48
  %118 = load i64, i64* %1, align 8
  %119 = or i64 %117, %118
  store i64 %119, i64* %1, align 8
  %120 = and i8 %11, 1
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %42, label %122

122:                                              ; preds = %111
  %123 = load i64, i64* %3, align 8
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %64, label %125

125:                                              ; preds = %122
  %126 = add i64 %123, -1
  store i64 %126, i64* %3, align 8
  %127 = load i8*, i8** %8, align 8
  %128 = getelementptr inbounds i8, i8* %127, i64 1
  store i8* %128, i8** %8, align 8
  %129 = load i8, i8* %127, align 1
  %130 = zext i8 %129 to i64
  %131 = shl nuw i64 %130, 56
  %132 = load i64, i64* %1, align 8
  %133 = or i64 %131, %132
  store i64 %133, i64* %1, align 8
  br label %64
}

declare i32 @LookInStream_Read2(%struct.ILookInStream*, i8*, i64, i32) local_unnamed_addr #3

declare i32 @LookInStream_SeekTo(%struct.ILookInStream*, i64) local_unnamed_addr #3

declare i32 @Buf_Create(%struct.CBuf*, i64, %struct.ISzAlloc*) local_unnamed_addr #3

declare i32 @LookInStream_Read(%struct.ILookInStream*, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @Buf_Init(%struct.CBuf*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @SzReadAndDecodePackedStreams(%struct.ILookInStream*, %struct.CSzData*, %struct.CBuf*, i32, i64, %struct.CSzAr*, %struct.ISzAlloc*) unnamed_addr #0 {
  %8 = alloca i64, align 8
  %9 = alloca %struct.CSubStreamInfo, align 8
  %10 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #5
  store i64 -6148914691236517206, i64* %8, align 8
  %11 = bitcast %struct.CSubStreamInfo* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 56, i1 false)
  %12 = call fastcc i32 @SzReadStreamsInfo(%struct.CSzAr* %5, %struct.CSzData* %1, i32 %3, %struct.CBuf* null, i32 0, i64* nonnull %8, %struct.CSubStreamInfo* nonnull %9, %struct.ISzAlloc* %6)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %74

14:                                               ; preds = %7
  %15 = load i64, i64* %8, align 8
  %16 = add i64 %15, %4
  store i64 %16, i64* %8, align 8
  %17 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %5, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %74, label %26

20:                                               ; preds = %26
  %21 = icmp eq i32 %30, 0
  br i1 %21, label %74, label %22

22:                                               ; preds = %20
  %23 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %5, i64 0, i32 8
  %24 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %5, i64 0, i32 6
  %25 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %5, i64 0, i32 7
  br label %39

26:                                               ; preds = %14, %26
  %27 = phi i64 [ %29, %26 ], [ 0, %14 ]
  %28 = getelementptr inbounds %struct.CBuf, %struct.CBuf* %2, i64 %27
  tail call void @Buf_Init(%struct.CBuf* %28) #5
  %29 = add nuw nsw i64 %27, 1
  %30 = load i32, i32* %17, align 4
  %31 = zext i32 %30 to i64
  %32 = icmp ult i64 %29, %31
  br i1 %32, label %26, label %20

33:                                               ; preds = %39
  %34 = load i32, i32* %17, align 4
  %35 = zext i32 %34 to i64
  %36 = icmp ult i64 %56, %35
  br i1 %36, label %39, label %37

37:                                               ; preds = %33
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %74, label %61

39:                                               ; preds = %22, %33
  %40 = phi i64 [ 0, %22 ], [ %56, %33 ]
  %41 = load i64*, i64** %23, align 8
  %42 = load i32*, i32** %24, align 8
  %43 = getelementptr inbounds i32, i32* %42, i64 %40
  %44 = load i32, i32* %43, align 4
  %45 = load i8*, i8** %25, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 %40
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add i32 %44, %48
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i64, i64* %41, i64 %50
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.CBuf, %struct.CBuf* %2, i64 %40
  %54 = tail call i32 @Buf_Create(%struct.CBuf* %53, i64 %52, %struct.ISzAlloc* %6) #5
  %55 = icmp eq i32 %54, 0
  %56 = add nuw nsw i64 %40, 1
  br i1 %55, label %74, label %33

57:                                               ; preds = %65
  %58 = load i32, i32* %17, align 4
  %59 = zext i32 %58 to i64
  %60 = icmp ult i64 %73, %59
  br i1 %60, label %61, label %74

61:                                               ; preds = %37, %57
  %62 = phi i64 [ %73, %57 ], [ 0, %37 ]
  %63 = tail call i32 @LookInStream_SeekTo(%struct.ILookInStream* %0, i64 %16) #5
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %74

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.CBuf, %struct.CBuf* %2, i64 %62, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %struct.CBuf, %struct.CBuf* %2, i64 %62, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = trunc i64 %62 to i32
  %71 = tail call i32 @SzAr_DecodeFolder(%struct.CSzAr* %5, i32 %70, %struct.ILookInStream* %0, i64 %16, i8* %67, i64 %69, %struct.ISzAlloc* %6) #5
  %72 = icmp eq i32 %71, 0
  %73 = add nuw nsw i64 %62, 1
  br i1 %72, label %57, label %74

74:                                               ; preds = %39, %57, %65, %61, %20, %37, %14, %7
  %75 = phi i32 [ %12, %7 ], [ 16, %14 ], [ 0, %37 ], [ 0, %20 ], [ 0, %57 ], [ %71, %65 ], [ %63, %61 ], [ 2, %39 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #5
  ret i32 %75
}

declare void @Buf_Free(%struct.CBuf*, %struct.ISzAlloc*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @SzReadStreamsInfo(%struct.CSzAr* nocapture, %struct.CSzData*, i32, %struct.CBuf* nocapture readonly, i32, i64* nocapture, %struct.CSubStreamInfo* nocapture, %struct.ISzAlloc*) unnamed_addr #0 {
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca <2 x i64>, align 16
  %28 = bitcast <2 x i64>* %27 to %struct.CSzData*
  %29 = alloca [64 x i8], align 16
  %30 = alloca [64 x i8], align 16
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = bitcast i64* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #5
  store i64 -6148914691236517206, i64* %38, align 8
  %40 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %6, i64 0, i32 3, i32 1
  %41 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %6, i64 0, i32 4, i32 1
  %42 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %6, i64 0, i32 2, i32 0
  %43 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %6, i64 0, i32 2, i32 1
  %44 = bitcast i8** %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 48, i1 false)
  store i64 0, i64* %5, align 8
  %45 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %38)
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %1230

47:                                               ; preds = %8
  %48 = load i64, i64* %38, align 8
  %49 = icmp eq i64 %48, 6
  br i1 %49, label %50, label %252

50:                                               ; preds = %47
  %51 = tail call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* %5)
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %1230

53:                                               ; preds = %50
  %54 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 0
  %55 = bitcast i64* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #5
  store i64 -6148914691236517206, i64* %35, align 8
  %56 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %1, i64 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %78, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %1, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = load i8, i8* %61, align 1
  %63 = icmp sgt i8 %62, -1
  br i1 %63, label %64, label %70

64:                                               ; preds = %59
  %65 = zext i8 %62 to i32
  store i32 %65, i32* %54, align 4
  %66 = load i8*, i8** %60, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %67, i8** %60, align 8
  %68 = load i64, i64* %56, align 8
  %69 = add i64 %68, -1
  store i64 %69, i64* %56, align 8
  br label %80

70:                                               ; preds = %59
  %71 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %35) #5
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %78

73:                                               ; preds = %70
  %74 = load i64, i64* %35, align 8
  %75 = icmp ugt i64 %74, 2147483646
  br i1 %75, label %78, label %76

76:                                               ; preds = %73
  %77 = trunc i64 %74 to i32
  store i32 %77, i32* %54, align 4
  br label %80

78:                                               ; preds = %73, %70, %53
  %79 = phi i32 [ 4, %73 ], [ 16, %53 ], [ %71, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #5
  br label %1230

80:                                               ; preds = %76, %64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #5
  %81 = bitcast i64* %34 to i8*
  %82 = bitcast i64* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #5
  store i64 -6148914691236517206, i64* %34, align 8
  %83 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %34) #5
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %102

85:                                               ; preds = %80, %96
  %86 = load i64, i64* %34, align 8
  switch i64 %86, label %87 [
    i64 9, label %105
    i64 0, label %104
  ]

87:                                               ; preds = %85
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #5
  store i64 -6148914691236517206, i64* %33, align 8
  %88 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %33) #5
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %94

90:                                               ; preds = %87
  %91 = load i64, i64* %33, align 8
  %92 = load i64, i64* %56, align 8
  %93 = icmp ult i64 %92, %91
  br i1 %93, label %94, label %96

94:                                               ; preds = %90, %87
  %95 = phi i32 [ 16, %90 ], [ %88, %87 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #5
  br label %1230

96:                                               ; preds = %90
  %97 = sub i64 %92, %91
  store i64 %97, i64* %56, align 8
  %98 = load i8*, i8** %60, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 %91
  store i8* %99, i8** %60, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #5
  store i64 -6148914691236517206, i64* %34, align 8
  %100 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %34) #5
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %85, label %102

102:                                              ; preds = %96, %80
  %103 = phi i32 [ %83, %80 ], [ %100, %96 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #5
  br label %1230

104:                                              ; preds = %85
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #5
  br label %1230

105:                                              ; preds = %85
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #5
  %106 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %7, i64 0, i32 0
  %107 = load i8* (i8*, i64)*, i8* (i8*, i64)** %106, align 8
  %108 = bitcast %struct.ISzAlloc* %7 to i8*
  %109 = load i32, i32* %54, align 8
  %110 = zext i32 %109 to i64
  %111 = shl nuw nsw i64 %110, 3
  %112 = add nuw nsw i64 %111, 8
  %113 = tail call i8* %107(i8* %108, i64 %112) #5
  %114 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 2
  %115 = bitcast i64** %114 to i8**
  store i8* %113, i8** %115, align 8
  %116 = icmp eq i8* %113, null
  %117 = bitcast i8* %113 to i64*
  br i1 %116, label %1230, label %118

118:                                              ; preds = %105
  %119 = load i32, i32* %54, align 8
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %140, label %121

121:                                              ; preds = %118
  %122 = bitcast i64* %36 to i8*
  %123 = zext i32 %119 to i64
  br label %124

124:                                              ; preds = %135, %121
  %125 = phi i64* [ %117, %121 ], [ %138, %135 ]
  %126 = phi i64 [ 0, %121 ], [ %136, %135 ]
  %127 = phi i64 [ 0, %121 ], [ %133, %135 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %122) #5
  store i64 -6148914691236517206, i64* %36, align 8
  %128 = getelementptr inbounds i64, i64* %125, i64 %126
  store i64 %127, i64* %128, align 8
  %129 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %36) #5
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %139

131:                                              ; preds = %124
  %132 = load i64, i64* %36, align 8
  %133 = add i64 %132, %127
  %134 = icmp ult i64 %133, %132
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %122) #5
  br i1 %134, label %1230, label %135

135:                                              ; preds = %131
  %136 = add nuw nsw i64 %126, 1
  %137 = icmp eq i64 %136, %123
  %138 = load i64*, i64** %114, align 8
  br i1 %137, label %140, label %124

139:                                              ; preds = %124
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %122) #5
  br label %1230

140:                                              ; preds = %135, %118
  %141 = phi i64* [ %117, %118 ], [ %138, %135 ]
  %142 = phi i64 [ 0, %118 ], [ %133, %135 ]
  %143 = phi i64 [ 0, %118 ], [ %123, %135 ]
  %144 = getelementptr inbounds i64, i64* %141, i64 %143
  store i64 %142, i64* %144, align 8
  %145 = bitcast i64* %37 to i8*
  %146 = bitcast i64* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %145) #5
  store i64 -6148914691236517206, i64* %37, align 8
  %147 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %37) #5
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %245

149:                                              ; preds = %140, %242
  %150 = load i64, i64* %37, align 8
  switch i64 %150, label %223 [
    i64 0, label %247
    i64 10, label %151
  ]

151:                                              ; preds = %149
  %152 = load i32, i32* %54, align 8
  %153 = load i64, i64* %56, align 8
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %240, label %155

155:                                              ; preds = %151
  %156 = add i64 %153, -1
  store i64 %156, i64* %56, align 8
  %157 = load i8*, i8** %60, align 8
  %158 = getelementptr inbounds i8, i8* %157, i64 1
  store i8* %158, i8** %60, align 8
  %159 = load i8, i8* %157, align 1
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %161, label %216

161:                                              ; preds = %155
  %162 = add i32 %152, 7
  %163 = lshr i32 %162, 3
  %164 = zext i32 %163 to i64
  %165 = icmp ult i64 %156, %164
  br i1 %165, label %240, label %166

166:                                              ; preds = %161
  %167 = icmp eq i32 %152, 0
  br i1 %167, label %212, label %168

168:                                              ; preds = %166
  %169 = and i32 %152, 1
  %170 = icmp eq i32 %152, 1
  br i1 %170, label %193, label %171

171:                                              ; preds = %168
  %172 = sub i32 %152, %169
  br label %173

173:                                              ; preds = %1276, %171
  %174 = phi i32 [ 0, %171 ], [ %1284, %1276 ]
  %175 = phi i32 [ 0, %171 ], [ %1280, %1276 ]
  %176 = phi i8 [ 0, %171 ], [ %1278, %1276 ]
  %177 = phi i8* [ %158, %171 ], [ %1277, %1276 ]
  %178 = phi i32 [ %172, %171 ], [ %1285, %1276 ]
  %179 = icmp eq i32 %175, 0
  br i1 %179, label %180, label %183

180:                                              ; preds = %173
  %181 = getelementptr inbounds i8, i8* %177, i64 1
  %182 = load i8, i8* %177, align 1
  br label %183

183:                                              ; preds = %180, %173
  %184 = phi i8* [ %181, %180 ], [ %177, %173 ]
  %185 = phi i8 [ %182, %180 ], [ %176, %173 ]
  %186 = phi i32 [ 8, %180 ], [ %175, %173 ]
  %187 = add i32 %186, -1
  %188 = zext i8 %185 to i32
  %189 = lshr i32 %188, %187
  %190 = and i32 %189, 1
  %191 = add i32 %190, %174
  %192 = icmp eq i32 %187, 0
  br i1 %192, label %1273, label %1276

193:                                              ; preds = %1276, %168
  %194 = phi i32 [ undef, %168 ], [ %1284, %1276 ]
  %195 = phi i32 [ 0, %168 ], [ %1284, %1276 ]
  %196 = phi i32 [ 0, %168 ], [ %1280, %1276 ]
  %197 = phi i8 [ 0, %168 ], [ %1278, %1276 ]
  %198 = phi i8* [ %158, %168 ], [ %1277, %1276 ]
  %199 = icmp eq i32 %169, 0
  br i1 %199, label %212, label %200

200:                                              ; preds = %193
  %201 = icmp eq i32 %196, 0
  br i1 %201, label %202, label %204

202:                                              ; preds = %200
  %203 = load i8, i8* %198, align 1
  br label %204

204:                                              ; preds = %200, %202
  %205 = phi i8 [ %203, %202 ], [ %197, %200 ]
  %206 = phi i32 [ 8, %202 ], [ %196, %200 ]
  %207 = zext i8 %205 to i32
  %208 = add i32 %206, -1
  %209 = lshr i32 %207, %208
  %210 = and i32 %209, 1
  %211 = add i32 %210, %195
  br label %212

212:                                              ; preds = %204, %193, %166
  %213 = phi i32 [ 0, %166 ], [ %194, %193 ], [ %211, %204 ]
  %214 = sub i64 %156, %164
  store i64 %214, i64* %56, align 8
  %215 = getelementptr inbounds i8, i8* %158, i64 %164
  store i8* %215, i8** %60, align 8
  br label %216

216:                                              ; preds = %212, %155
  %217 = phi i8* [ %158, %155 ], [ %215, %212 ]
  %218 = phi i64 [ %156, %155 ], [ %214, %212 ]
  %219 = phi i32 [ %152, %155 ], [ %213, %212 ]
  %220 = zext i32 %219 to i64
  %221 = lshr i64 %218, 2
  %222 = icmp ult i64 %221, %220
  br i1 %222, label %240, label %232

223:                                              ; preds = %149
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %146) #5
  store i64 -6148914691236517206, i64* %32, align 8
  %224 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %32) #5
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %230

226:                                              ; preds = %223
  %227 = load i64, i64* %32, align 8
  %228 = load i64, i64* %56, align 8
  %229 = icmp ult i64 %228, %227
  br i1 %229, label %230, label %236

230:                                              ; preds = %226, %223
  %231 = phi i32 [ 16, %226 ], [ %224, %223 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %146) #5
  br label %240

232:                                              ; preds = %216
  %233 = shl nuw nsw i64 %220, 2
  %234 = sub i64 %218, %233
  store i64 %234, i64* %56, align 8
  %235 = getelementptr inbounds i8, i8* %217, i64 %233
  store i8* %235, i8** %60, align 8
  br label %242

236:                                              ; preds = %226
  %237 = sub i64 %228, %227
  store i64 %237, i64* %56, align 8
  %238 = load i8*, i8** %60, align 8
  %239 = getelementptr inbounds i8, i8* %238, i64 %227
  store i8* %239, i8** %60, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %146) #5
  br label %242

240:                                              ; preds = %216, %161, %151, %230
  %241 = phi i32 [ %231, %230 ], [ 16, %151 ], [ 16, %161 ], [ 16, %216 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %145) #5
  br label %1230

242:                                              ; preds = %236, %232
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %145) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %145) #5
  store i64 -6148914691236517206, i64* %37, align 8
  %243 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %37) #5
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %149, label %245

245:                                              ; preds = %242, %140
  %246 = phi i32 [ %147, %140 ], [ %243, %242 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %145) #5
  br label %1230

247:                                              ; preds = %149
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %145) #5
  %248 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %38)
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %250, label %1230

250:                                              ; preds = %247
  %251 = load i64, i64* %38, align 8
  br label %252

252:                                              ; preds = %250, %47
  %253 = phi i64 [ %251, %250 ], [ %48, %47 ]
  %254 = icmp eq i64 %253, 7
  br i1 %254, label %255, label %899

255:                                              ; preds = %252
  %256 = getelementptr inbounds [64 x i8], [64 x i8]* %29, i64 0, i64 0
  %257 = getelementptr inbounds [64 x i8], [64 x i8]* %30, i64 0, i64 0
  %258 = bitcast <2 x i64>* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %258) #5
  %259 = bitcast <2 x i64>* %27 to i8**
  %260 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %28, i64 0, i32 1
  %261 = bitcast i64* %26 to i8*
  %262 = bitcast i64* %25 to i8*
  %263 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %1, i64 0, i32 1
  %264 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %1, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %258, i8 -86, i64 16, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %261) #5
  store i64 -6148914691236517206, i64* %26, align 8
  %265 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %26) #5
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %284

267:                                              ; preds = %255, %278
  %268 = load i64, i64* %26, align 8
  switch i64 %268, label %269 [
    i64 11, label %287
    i64 0, label %286
  ]

269:                                              ; preds = %267
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %262) #5
  store i64 -6148914691236517206, i64* %25, align 8
  %270 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %25) #5
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %272, label %276

272:                                              ; preds = %269
  %273 = load i64, i64* %25, align 8
  %274 = load i64, i64* %263, align 8
  %275 = icmp ult i64 %274, %273
  br i1 %275, label %276, label %278

276:                                              ; preds = %272, %269
  %277 = phi i32 [ 16, %272 ], [ %270, %269 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %262) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %261) #5
  br label %891

278:                                              ; preds = %272
  %279 = sub i64 %274, %273
  store i64 %279, i64* %263, align 8
  %280 = load i8*, i8** %264, align 8
  %281 = getelementptr inbounds i8, i8* %280, i64 %273
  store i8* %281, i8** %264, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %262) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %261) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %261) #5
  store i64 -6148914691236517206, i64* %26, align 8
  %282 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %26) #5
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %267, label %284

284:                                              ; preds = %278, %255
  %285 = phi i32 [ %265, %255 ], [ %282, %278 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %261) #5
  br label %891

286:                                              ; preds = %267
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %261) #5
  br label %891

287:                                              ; preds = %267
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %261) #5
  %288 = bitcast i64* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %288) #5
  store i64 -6148914691236517206, i64* %24, align 8
  %289 = load i64, i64* %263, align 8
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %307, label %291

291:                                              ; preds = %287
  %292 = load i8*, i8** %264, align 8
  %293 = load i8, i8* %292, align 1
  %294 = icmp sgt i8 %293, -1
  br i1 %294, label %295, label %299

295:                                              ; preds = %291
  %296 = zext i8 %293 to i32
  %297 = getelementptr inbounds i8, i8* %292, i64 1
  store i8* %297, i8** %264, align 8
  %298 = add i64 %289, -1
  store i64 %298, i64* %263, align 8
  br label %309

299:                                              ; preds = %291
  %300 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %24) #5
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %302, label %307

302:                                              ; preds = %299
  %303 = load i64, i64* %24, align 8
  %304 = icmp ugt i64 %303, 2147483646
  br i1 %304, label %307, label %305

305:                                              ; preds = %302
  %306 = trunc i64 %303 to i32
  br label %309

307:                                              ; preds = %302, %299, %287
  %308 = phi i32 [ 4, %302 ], [ 16, %287 ], [ %300, %299 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %288) #5
  br label %891

309:                                              ; preds = %305, %295
  %310 = phi i32 [ %296, %295 ], [ %306, %305 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %288) #5
  %311 = icmp ugt i32 %310, %2
  br i1 %311, label %891, label %312

312:                                              ; preds = %309
  %313 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 1
  store i32 %310, i32* %313, align 4
  %314 = load i64, i64* %263, align 8
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %891, label %316

316:                                              ; preds = %312
  %317 = add i64 %314, -1
  store i64 %317, i64* %263, align 8
  %318 = load i8*, i8** %264, align 8
  %319 = getelementptr inbounds i8, i8* %318, i64 1
  store i8* %319, i8** %264, align 8
  %320 = load i8, i8* %318, align 1
  %321 = icmp eq i8 %320, 0
  br i1 %321, label %322, label %324

322:                                              ; preds = %316
  %323 = bitcast %struct.CSzData* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %258, i8* align 8 %323, i64 16, i1 false) #5
  br label %352

324:                                              ; preds = %316
  %325 = bitcast i64* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %325) #5
  store i64 -6148914691236517206, i64* %23, align 8
  %326 = icmp eq i64 %317, 0
  br i1 %326, label %342, label %327

327:                                              ; preds = %324
  %328 = load i8, i8* %319, align 1
  %329 = icmp sgt i8 %328, -1
  br i1 %329, label %330, label %334

330:                                              ; preds = %327
  %331 = zext i8 %328 to i32
  %332 = getelementptr inbounds i8, i8* %318, i64 2
  store i8* %332, i8** %264, align 8
  %333 = add i64 %314, -2
  store i64 %333, i64* %263, align 8
  br label %344

334:                                              ; preds = %327
  %335 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %23) #5
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %337, label %342

337:                                              ; preds = %334
  %338 = load i64, i64* %23, align 8
  %339 = icmp ugt i64 %338, 2147483646
  br i1 %339, label %342, label %340

340:                                              ; preds = %337
  %341 = trunc i64 %338 to i32
  br label %344

342:                                              ; preds = %337, %334, %324
  %343 = phi i32 [ 4, %337 ], [ 16, %324 ], [ %335, %334 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %325) #5
  br label %891

344:                                              ; preds = %340, %330
  %345 = phi i32 [ %331, %330 ], [ %341, %340 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %325) #5
  %346 = icmp ult i32 %345, %4
  br i1 %346, label %347, label %891

347:                                              ; preds = %344
  %348 = zext i32 %345 to i64
  %349 = getelementptr inbounds %struct.CBuf, %struct.CBuf* %3, i64 %348, i32 0
  %350 = bitcast i8** %349 to <2 x i64>*
  %351 = load <2 x i64>, <2 x i64>* %350, align 8
  store <2 x i64> %351, <2 x i64>* %27, align 16
  br label %352

352:                                              ; preds = %347, %322
  %353 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %7, i64 0, i32 0
  %354 = load i8* (i8*, i64)*, i8* (i8*, i64)** %353, align 8
  %355 = bitcast %struct.ISzAlloc* %7 to i8*
  %356 = zext i32 %310 to i64
  %357 = shl nuw nsw i64 %356, 3
  %358 = add nuw nsw i64 %357, 8
  %359 = tail call i8* %354(i8* %355, i64 %358) #5
  %360 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 4
  %361 = bitcast i64** %360 to i8**
  store i8* %359, i8** %361, align 8
  %362 = icmp eq i8* %359, null
  br i1 %362, label %891, label %363

363:                                              ; preds = %352
  %364 = load i8* (i8*, i64)*, i8* (i8*, i64)** %353, align 8
  %365 = shl nuw nsw i64 %356, 2
  %366 = add nuw nsw i64 %365, 4
  %367 = tail call i8* %364(i8* %355, i64 %366) #5
  %368 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 5
  %369 = bitcast i32** %368 to i8**
  store i8* %367, i8** %369, align 8
  %370 = icmp eq i8* %367, null
  br i1 %370, label %891, label %371

371:                                              ; preds = %363
  %372 = load i8* (i8*, i64)*, i8* (i8*, i64)** %353, align 8
  %373 = tail call i8* %372(i8* %355, i64 %366) #5
  %374 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 6
  %375 = bitcast i32** %374 to i8**
  store i8* %373, i8** %375, align 8
  %376 = icmp eq i8* %373, null
  br i1 %376, label %891, label %377

377:                                              ; preds = %371
  %378 = load i8* (i8*, i64)*, i8* (i8*, i64)** %353, align 8
  %379 = tail call i8* %378(i8* %355, i64 %356) #5
  %380 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 7
  store i8* %379, i8** %380, align 8
  %381 = icmp eq i8* %379, null
  br i1 %381, label %891, label %382

382:                                              ; preds = %377
  %383 = load i8*, i8** %259, align 16
  %384 = icmp eq i32 %310, 0
  %385 = ptrtoint i8* %383 to i64
  %386 = getelementptr inbounds <2 x i64>, <2 x i64>* %27, i64 0, i64 0
  br i1 %384, label %695, label %387

387:                                              ; preds = %382
  %388 = bitcast i64* %22 to i8*
  %389 = bitcast i64* %21 to i8*
  %390 = bitcast i64* %20 to i8*
  %391 = bitcast i64* %19 to i8*
  %392 = bitcast i64* %18 to i8*
  %393 = bitcast i64* %17 to i8*
  %394 = bitcast i64* %16 to i8*
  %395 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 0
  %396 = load i64*, i64** %360, align 8
  store i64 0, i64* %396, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %388) #5
  store i64 -6148914691236517206, i64* %22, align 8
  %397 = load i64, i64* %260, align 8
  %398 = icmp eq i64 %397, 0
  br i1 %398, label %419, label %399

399:                                              ; preds = %387, %688
  %400 = phi i64 [ %693, %688 ], [ %397, %387 ]
  %401 = phi i32 [ %677, %688 ], [ 0, %387 ]
  %402 = phi i32 [ %680, %688 ], [ 0, %387 ]
  %403 = phi i64 [ %686, %688 ], [ 0, %387 ]
  %404 = load i8*, i8** %259, align 16
  %405 = load i8, i8* %404, align 1
  %406 = icmp sgt i8 %405, -1
  br i1 %406, label %407, label %411

407:                                              ; preds = %399
  %408 = zext i8 %405 to i32
  %409 = getelementptr inbounds i8, i8* %404, i64 1
  store i8* %409, i8** %259, align 16
  %410 = add i64 %400, -1
  store i64 %410, i64* %260, align 8
  br label %421

411:                                              ; preds = %399
  %412 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %22) #5
  %413 = icmp eq i32 %412, 0
  br i1 %413, label %414, label %419

414:                                              ; preds = %411
  %415 = load i64, i64* %22, align 8
  %416 = icmp ugt i64 %415, 2147483646
  br i1 %416, label %419, label %417

417:                                              ; preds = %414
  %418 = trunc i64 %415 to i32
  br label %421

419:                                              ; preds = %688, %411, %414, %387
  %420 = phi i32 [ 16, %387 ], [ 4, %414 ], [ %412, %411 ], [ 16, %688 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %388) #5
  br label %891

421:                                              ; preds = %417, %407
  %422 = phi i32 [ %408, %407 ], [ %418, %417 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %388) #5
  %423 = add nsw i32 %422, -1
  %424 = icmp ugt i32 %423, 63
  br i1 %424, label %891, label %425

425:                                              ; preds = %421, %531
  %426 = phi i32 [ %498, %531 ], [ 0, %421 ]
  %427 = phi i32 [ %532, %531 ], [ 0, %421 ]
  %428 = load i64, i64* %260, align 8
  %429 = icmp eq i64 %428, 0
  br i1 %429, label %891, label %430

430:                                              ; preds = %425
  %431 = add i64 %428, -1
  store i64 %431, i64* %260, align 8
  %432 = load i8*, i8** %259, align 16
  %433 = getelementptr inbounds i8, i8* %432, i64 1
  store i8* %433, i8** %259, align 16
  %434 = load i8, i8* %432, align 1
  %435 = zext i8 %434 to i32
  %436 = and i32 %435, 192
  %437 = icmp eq i32 %436, 0
  br i1 %437, label %438, label %891

438:                                              ; preds = %430
  %439 = and i32 %435, 15
  %440 = icmp ugt i32 %439, 8
  br i1 %440, label %891, label %441

441:                                              ; preds = %438
  %442 = zext i32 %439 to i64
  %443 = icmp ult i64 %431, %442
  br i1 %443, label %891, label %444

444:                                              ; preds = %441
  %445 = sub i64 %431, %442
  store i64 %445, i64* %260, align 8
  %446 = getelementptr inbounds i8, i8* %433, i64 %442
  store i8* %446, i8** %259, align 16
  %447 = and i32 %435, 16
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %496, label %449

449:                                              ; preds = %444
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %389) #5
  store i64 -6148914691236517206, i64* %21, align 8
  %450 = icmp eq i64 %445, 0
  br i1 %450, label %467, label %451

451:                                              ; preds = %449
  %452 = load i8, i8* %446, align 1
  %453 = icmp sgt i8 %452, -1
  br i1 %453, label %454, label %458

454:                                              ; preds = %451
  %455 = zext i8 %452 to i32
  %456 = getelementptr inbounds i8, i8* %446, i64 1
  store i8* %456, i8** %259, align 16
  %457 = add i64 %445, -1
  store i64 %457, i64* %260, align 8
  br label %469

458:                                              ; preds = %451
  %459 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %21) #5
  %460 = icmp eq i32 %459, 0
  br i1 %460, label %461, label %467

461:                                              ; preds = %458
  %462 = load i64, i64* %21, align 8
  %463 = icmp ugt i64 %462, 2147483646
  br i1 %463, label %467, label %464

464:                                              ; preds = %461
  %465 = trunc i64 %462 to i32
  %466 = load i64, i64* %260, align 8
  br label %469

467:                                              ; preds = %461, %458, %449
  %468 = phi i32 [ 4, %461 ], [ 16, %449 ], [ %459, %458 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %389) #5
  br label %891

469:                                              ; preds = %464, %454
  %470 = phi i64 [ %457, %454 ], [ %466, %464 ]
  %471 = phi i32 [ %455, %454 ], [ %465, %464 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %389) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %390) #5
  store i64 -6148914691236517206, i64* %20, align 8
  %472 = icmp eq i64 %470, 0
  br i1 %472, label %489, label %473

473:                                              ; preds = %469
  %474 = load i8*, i8** %259, align 16
  %475 = load i8, i8* %474, align 1
  %476 = icmp sgt i8 %475, -1
  br i1 %476, label %477, label %481

477:                                              ; preds = %473
  %478 = zext i8 %475 to i32
  %479 = getelementptr inbounds i8, i8* %474, i64 1
  store i8* %479, i8** %259, align 16
  %480 = add i64 %470, -1
  store i64 %480, i64* %260, align 8
  br label %491

481:                                              ; preds = %473
  %482 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %20) #5
  %483 = icmp eq i32 %482, 0
  br i1 %483, label %484, label %489

484:                                              ; preds = %481
  %485 = load i64, i64* %20, align 8
  %486 = icmp ugt i64 %485, 2147483646
  br i1 %486, label %489, label %487

487:                                              ; preds = %484
  %488 = trunc i64 %485 to i32
  br label %491

489:                                              ; preds = %484, %481, %469
  %490 = phi i32 [ 4, %484 ], [ 16, %469 ], [ %482, %481 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %390) #5
  br label %891

491:                                              ; preds = %487, %477
  %492 = phi i32 [ %478, %477 ], [ %488, %487 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %390) #5
  %493 = icmp ugt i32 %471, 64
  %494 = icmp ne i32 %492, 1
  %495 = or i1 %493, %494
  br i1 %495, label %891, label %496

496:                                              ; preds = %491, %444
  %497 = phi i32 [ 1, %444 ], [ %471, %491 ]
  %498 = add i32 %497, %426
  %499 = and i32 %435, 32
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %531, label %501

501:                                              ; preds = %496
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %391) #5
  store i64 -6148914691236517206, i64* %19, align 8
  %502 = load i64, i64* %260, align 8
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %520, label %504

504:                                              ; preds = %501
  %505 = load i8*, i8** %259, align 16
  %506 = load i8, i8* %505, align 1
  %507 = icmp sgt i8 %506, -1
  br i1 %507, label %508, label %512

508:                                              ; preds = %504
  %509 = zext i8 %506 to i64
  %510 = getelementptr inbounds i8, i8* %505, i64 1
  store i8* %510, i8** %259, align 16
  %511 = add i64 %502, -1
  store i64 %511, i64* %260, align 8
  br label %522

512:                                              ; preds = %504
  %513 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %19) #5
  %514 = icmp eq i32 %513, 0
  br i1 %514, label %515, label %520

515:                                              ; preds = %512
  %516 = load i64, i64* %19, align 8
  %517 = icmp ugt i64 %516, 2147483646
  br i1 %517, label %520, label %518

518:                                              ; preds = %515
  %519 = load i64, i64* %260, align 8
  br label %522

520:                                              ; preds = %515, %512, %501
  %521 = phi i32 [ 4, %515 ], [ 16, %501 ], [ %513, %512 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %391) #5
  br label %891

522:                                              ; preds = %518, %508
  %523 = phi i64 [ %511, %508 ], [ %519, %518 ]
  %524 = phi i64 [ %509, %508 ], [ %516, %518 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %391) #5
  %525 = and i64 %524, 4294967295
  %526 = icmp ult i64 %523, %525
  br i1 %526, label %891, label %527

527:                                              ; preds = %522
  %528 = sub i64 %523, %525
  store i64 %528, i64* %260, align 8
  %529 = load i8*, i8** %259, align 16
  %530 = getelementptr inbounds i8, i8* %529, i64 %525
  store i8* %530, i8** %259, align 16
  br label %531

531:                                              ; preds = %527, %496
  %532 = add nuw i32 %427, 1
  %533 = icmp eq i32 %532, %422
  br i1 %533, label %534, label %425

534:                                              ; preds = %531
  %535 = icmp ne i32 %422, 1
  %536 = icmp ne i32 %498, 1
  %537 = or i1 %535, %536
  br i1 %537, label %538, label %667

538:                                              ; preds = %534
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %256) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %256, i8 -86, i64 64, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %257) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %257, i8 -86, i64 64, i1 false) #5
  %539 = icmp ult i32 %498, %423
  br i1 %539, label %664, label %540

540:                                              ; preds = %538
  %541 = icmp ugt i32 %498, 64
  br i1 %541, label %664, label %542

542:                                              ; preds = %540
  %543 = icmp eq i32 %498, 0
  br i1 %543, label %546, label %544

544:                                              ; preds = %542
  %545 = zext i32 %498 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %256, i8 0, i64 %545, i1 false) #5
  br label %546

546:                                              ; preds = %544, %542
  %547 = zext i32 %422 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %257, i8 0, i64 %547, i1 false) #5
  %548 = icmp eq i32 %423, 0
  br i1 %548, label %611, label %549

549:                                              ; preds = %546, %608
  %550 = phi i32 [ %609, %608 ], [ 0, %546 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %392) #5
  store i64 -6148914691236517206, i64* %18, align 8
  %551 = load i64, i64* %260, align 8
  %552 = icmp eq i64 %551, 0
  br i1 %552, label %569, label %553

553:                                              ; preds = %549
  %554 = load i8*, i8** %259, align 16
  %555 = load i8, i8* %554, align 1
  %556 = icmp sgt i8 %555, -1
  br i1 %556, label %557, label %561

557:                                              ; preds = %553
  %558 = zext i8 %555 to i32
  %559 = getelementptr inbounds i8, i8* %554, i64 1
  store i8* %559, i8** %259, align 16
  %560 = add i64 %551, -1
  store i64 %560, i64* %260, align 8
  br label %571

561:                                              ; preds = %553
  %562 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %18) #5
  %563 = icmp eq i32 %562, 0
  br i1 %563, label %564, label %569

564:                                              ; preds = %561
  %565 = load i64, i64* %18, align 8
  %566 = icmp ugt i64 %565, 2147483646
  br i1 %566, label %569, label %567

567:                                              ; preds = %564
  %568 = trunc i64 %565 to i32
  br label %571

569:                                              ; preds = %564, %561, %549
  %570 = phi i32 [ 4, %564 ], [ 16, %549 ], [ %562, %561 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %392) #5
  br label %664

571:                                              ; preds = %567, %557
  %572 = phi i32 [ %558, %557 ], [ %568, %567 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %392) #5
  %573 = icmp ult i32 %572, %498
  br i1 %573, label %574, label %664

574:                                              ; preds = %571
  %575 = zext i32 %572 to i64
  %576 = getelementptr inbounds [64 x i8], [64 x i8]* %29, i64 0, i64 %575
  %577 = load i8, i8* %576, align 1
  %578 = icmp eq i8 %577, 0
  br i1 %578, label %579, label %664

579:                                              ; preds = %574
  store i8 1, i8* %576, align 1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %393) #5
  store i64 -6148914691236517206, i64* %17, align 8
  %580 = load i64, i64* %260, align 8
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %598, label %582

582:                                              ; preds = %579
  %583 = load i8*, i8** %259, align 16
  %584 = load i8, i8* %583, align 1
  %585 = icmp sgt i8 %584, -1
  br i1 %585, label %586, label %590

586:                                              ; preds = %582
  %587 = zext i8 %584 to i32
  %588 = getelementptr inbounds i8, i8* %583, i64 1
  store i8* %588, i8** %259, align 16
  %589 = add i64 %580, -1
  store i64 %589, i64* %260, align 8
  br label %600

590:                                              ; preds = %582
  %591 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %17) #5
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %593, label %598

593:                                              ; preds = %590
  %594 = load i64, i64* %17, align 8
  %595 = icmp ugt i64 %594, 2147483646
  br i1 %595, label %598, label %596

596:                                              ; preds = %593
  %597 = trunc i64 %594 to i32
  br label %600

598:                                              ; preds = %593, %590, %579
  %599 = phi i32 [ 4, %593 ], [ 16, %579 ], [ %591, %590 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %393) #5
  br label %664

600:                                              ; preds = %596, %586
  %601 = phi i32 [ %587, %586 ], [ %597, %596 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %393) #5
  %602 = icmp ult i32 %601, %422
  br i1 %602, label %603, label %664

603:                                              ; preds = %600
  %604 = zext i32 %601 to i64
  %605 = getelementptr inbounds [64 x i8], [64 x i8]* %30, i64 0, i64 %604
  %606 = load i8, i8* %605, align 1
  %607 = icmp eq i8 %606, 0
  br i1 %607, label %608, label %664

608:                                              ; preds = %603
  store i8 1, i8* %605, align 1
  %609 = add nuw i32 %550, 1
  %610 = icmp eq i32 %609, %423
  br i1 %610, label %611, label %549

611:                                              ; preds = %608, %546
  %612 = sub i32 %498, %423
  %613 = icmp ugt i32 %612, 1
  br i1 %613, label %614, label %647

614:                                              ; preds = %611, %644
  %615 = phi i32 [ %645, %644 ], [ 0, %611 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %394) #5
  store i64 -6148914691236517206, i64* %16, align 8
  %616 = load i64, i64* %260, align 8
  %617 = icmp eq i64 %616, 0
  br i1 %617, label %634, label %618

618:                                              ; preds = %614
  %619 = load i8*, i8** %259, align 16
  %620 = load i8, i8* %619, align 1
  %621 = icmp sgt i8 %620, -1
  br i1 %621, label %622, label %626

622:                                              ; preds = %618
  %623 = zext i8 %620 to i32
  %624 = getelementptr inbounds i8, i8* %619, i64 1
  store i8* %624, i8** %259, align 16
  %625 = add i64 %616, -1
  store i64 %625, i64* %260, align 8
  br label %636

626:                                              ; preds = %618
  %627 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %16) #5
  %628 = icmp eq i32 %627, 0
  br i1 %628, label %629, label %634

629:                                              ; preds = %626
  %630 = load i64, i64* %16, align 8
  %631 = icmp ugt i64 %630, 2147483646
  br i1 %631, label %634, label %632

632:                                              ; preds = %629
  %633 = trunc i64 %630 to i32
  br label %636

634:                                              ; preds = %629, %626, %614
  %635 = phi i32 [ 4, %629 ], [ 16, %614 ], [ %627, %626 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %394) #5
  br label %664

636:                                              ; preds = %632, %622
  %637 = phi i32 [ %623, %622 ], [ %633, %632 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %394) #5
  %638 = icmp ult i32 %637, %498
  br i1 %638, label %639, label %664

639:                                              ; preds = %636
  %640 = zext i32 %637 to i64
  %641 = getelementptr inbounds [64 x i8], [64 x i8]* %29, i64 0, i64 %640
  %642 = load i8, i8* %641, align 1
  %643 = icmp eq i8 %642, 0
  br i1 %643, label %644, label %664

644:                                              ; preds = %639
  store i8 1, i8* %641, align 1
  %645 = add nuw i32 %615, 1
  %646 = icmp eq i32 %645, %612
  br i1 %646, label %647, label %614

647:                                              ; preds = %644, %611
  br label %648

648:                                              ; preds = %647, %654
  %649 = phi i64 [ %655, %654 ], [ 0, %647 ]
  %650 = phi i32 [ %656, %654 ], [ 0, %647 ]
  %651 = getelementptr inbounds [64 x i8], [64 x i8]* %30, i64 0, i64 %649
  %652 = load i8, i8* %651, align 1
  %653 = icmp eq i8 %652, 0
  br i1 %653, label %658, label %654

654:                                              ; preds = %648
  %655 = add nuw nsw i64 %649, 1
  %656 = add nuw i32 %650, 1
  %657 = icmp eq i64 %655, %547
  br i1 %657, label %660, label %648

658:                                              ; preds = %648
  %659 = trunc i64 %649 to i32
  br label %660

660:                                              ; preds = %654, %658
  %661 = phi i32 [ %659, %658 ], [ %656, %654 ]
  %662 = phi i32 [ %659, %658 ], [ 0, %654 ]
  %663 = icmp eq i32 %661, %422
  br i1 %663, label %664, label %666

664:                                              ; preds = %660, %540, %538, %603, %600, %574, %571, %639, %636, %634, %598, %569
  %665 = phi i32 [ %599, %598 ], [ %570, %569 ], [ %635, %634 ], [ 16, %636 ], [ 16, %639 ], [ 16, %571 ], [ 16, %574 ], [ 16, %600 ], [ 16, %603 ], [ 4, %540 ], [ 16, %538 ], [ 16, %660 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %257) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %256) #5
  br label %891

666:                                              ; preds = %660
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %257) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %256) #5
  br label %667

667:                                              ; preds = %666, %534
  %668 = phi i32 [ %662, %666 ], [ 0, %534 ]
  %669 = phi i32 [ %612, %666 ], [ 1, %534 ]
  %670 = load i32*, i32** %368, align 8
  %671 = getelementptr inbounds i32, i32* %670, i64 %403
  store i32 %402, i32* %671, align 4
  %672 = load i32*, i32** %374, align 8
  %673 = getelementptr inbounds i32, i32* %672, i64 %403
  store i32 %401, i32* %673, align 4
  %674 = trunc i32 %668 to i8
  %675 = load i8*, i8** %380, align 8
  %676 = getelementptr inbounds i8, i8* %675, i64 %403
  store i8 %674, i8* %676, align 1
  %677 = add i32 %422, %401
  %678 = icmp ult i32 %677, %422
  br i1 %678, label %891, label %679

679:                                              ; preds = %667
  %680 = add i32 %669, %402
  %681 = icmp ult i32 %680, %669
  br i1 %681, label %891, label %682

682:                                              ; preds = %679
  %683 = load i32, i32* %395, align 8
  %684 = icmp ugt i32 %680, %683
  br i1 %684, label %891, label %685

685:                                              ; preds = %682
  %686 = add nuw nsw i64 %403, 1
  %687 = icmp eq i64 %686, %356
  br i1 %687, label %695, label %688

688:                                              ; preds = %685
  %689 = load i64, i64* %386, align 16
  %690 = sub i64 %689, %385
  %691 = load i64*, i64** %360, align 8
  %692 = getelementptr inbounds i64, i64* %691, i64 %686
  store i64 %690, i64* %692, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %388) #5
  store i64 -6148914691236517206, i64* %22, align 8
  %693 = load i64, i64* %260, align 8
  %694 = icmp eq i64 %693, 0
  br i1 %694, label %419, label %399

695:                                              ; preds = %685, %382
  %696 = phi i32 [ 0, %382 ], [ %677, %685 ]
  %697 = phi i32 [ 0, %382 ], [ %680, %685 ]
  %698 = load i32*, i32** %374, align 8
  %699 = getelementptr inbounds i32, i32* %698, i64 %356
  store i32 %696, i32* %699, align 4
  %700 = load i64, i64* %386, align 16
  %701 = sub i64 %700, %385
  %702 = load i32*, i32** %368, align 8
  %703 = getelementptr inbounds i32, i32* %702, i64 %356
  store i32 %697, i32* %703, align 4
  %704 = load i64*, i64** %360, align 8
  %705 = getelementptr inbounds i64, i64* %704, i64 %356
  store i64 %701, i64* %705, align 8
  %706 = icmp eq i64 %701, 0
  br i1 %706, label %713, label %707

707:                                              ; preds = %695
  %708 = load i8* (i8*, i64)*, i8* (i8*, i64)** %353, align 8
  %709 = tail call i8* %708(i8* %355, i64 %701) #5
  %710 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 9
  store i8* %709, i8** %710, align 8
  %711 = icmp eq i8* %709, null
  br i1 %711, label %891, label %712

712:                                              ; preds = %707
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %709, i8* align 1 %383, i64 %701, i1 false) #5
  br label %713

713:                                              ; preds = %712, %695
  %714 = phi %struct.CSzAr* [ null, %695 ], [ %0, %712 ]
  br i1 %321, label %720, label %715

715:                                              ; preds = %713
  %716 = load i64, i64* %260, align 8
  %717 = icmp eq i64 %716, 0
  br i1 %717, label %718, label %891

718:                                              ; preds = %715
  %719 = bitcast %struct.CSzData* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %258, i8* align 8 %719, i64 16, i1 false) #5
  br label %720

720:                                              ; preds = %718, %713
  %721 = bitcast i64* %15 to i8*
  %722 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %721) #5
  store i64 -6148914691236517206, i64* %15, align 8
  %723 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %15) #5
  %724 = icmp eq i32 %723, 0
  br i1 %724, label %725, label %742

725:                                              ; preds = %720, %736
  %726 = load i64, i64* %15, align 8
  switch i64 %726, label %727 [
    i64 12, label %745
    i64 0, label %744
  ]

727:                                              ; preds = %725
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %722) #5
  store i64 -6148914691236517206, i64* %14, align 8
  %728 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %14) #5
  %729 = icmp eq i32 %728, 0
  br i1 %729, label %730, label %734

730:                                              ; preds = %727
  %731 = load i64, i64* %14, align 8
  %732 = load i64, i64* %260, align 8
  %733 = icmp ult i64 %732, %731
  br i1 %733, label %734, label %736

734:                                              ; preds = %730, %727
  %735 = phi i32 [ 16, %730 ], [ %728, %727 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %722) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %721) #5
  br label %891

736:                                              ; preds = %730
  %737 = sub i64 %732, %731
  store i64 %737, i64* %260, align 8
  %738 = load i8*, i8** %259, align 16
  %739 = getelementptr inbounds i8, i8* %738, i64 %731
  store i8* %739, i8** %259, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %722) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %721) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %721) #5
  store i64 -6148914691236517206, i64* %15, align 8
  %740 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %15) #5
  %741 = icmp eq i32 %740, 0
  br i1 %741, label %725, label %742

742:                                              ; preds = %736, %720
  %743 = phi i32 [ %723, %720 ], [ %740, %736 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %721) #5
  br label %891

744:                                              ; preds = %725
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %721) #5
  br label %891

745:                                              ; preds = %725
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %721) #5
  %746 = icmp eq i32 %696, 0
  br i1 %746, label %747, label %749

747:                                              ; preds = %745
  %748 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %714, i64 0, i32 8
  store i64* null, i64** %748, align 8
  br label %770

749:                                              ; preds = %745
  %750 = zext i32 %696 to i64
  %751 = load i8* (i8*, i64)*, i8* (i8*, i64)** %353, align 8
  %752 = shl nuw nsw i64 %750, 3
  %753 = tail call i8* %751(i8* %355, i64 %752) #5
  %754 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %714, i64 0, i32 8
  %755 = bitcast i64** %754 to i8**
  store i8* %753, i8** %755, align 8
  %756 = icmp eq i8* %753, null
  br i1 %756, label %891, label %757

757:                                              ; preds = %749
  %758 = bitcast i8* %753 to i64*
  %759 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %758) #5
  %760 = icmp eq i32 %759, 0
  br i1 %760, label %761, label %891

761:                                              ; preds = %757, %764
  %762 = phi i64 [ %769, %764 ], [ 1, %757 ]
  %763 = icmp eq i64 %762, %750
  br i1 %763, label %770, label %764

764:                                              ; preds = %761
  %765 = load i64*, i64** %754, align 8
  %766 = getelementptr inbounds i64, i64* %765, i64 %762
  %767 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* %766) #5
  %768 = icmp eq i32 %767, 0
  %769 = add nuw nsw i64 %762, 1
  br i1 %768, label %761, label %891

770:                                              ; preds = %761, %747
  %771 = bitcast i64* %31 to i8*
  %772 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %714, i64 0, i32 3
  %773 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %7, i64 0, i32 1
  %774 = getelementptr inbounds %struct.CSzBitUi32s, %struct.CSzBitUi32s* %772, i64 0, i32 0
  %775 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %714, i64 0, i32 3, i32 1
  %776 = bitcast i32** %775 to i8**
  %777 = add i32 %310, 7
  %778 = lshr i32 %777, 3
  %779 = bitcast %struct.CSzBitUi32s* %772 to i8*
  %780 = icmp eq i32 %778, 0
  %781 = zext i32 %778 to i64
  %782 = and i32 %310, 7
  %783 = icmp eq i32 %782, 0
  %784 = shl nsw i32 -1, %782
  %785 = xor i32 %784, -1
  %786 = sub nuw nsw i32 8, %782
  %787 = shl i32 %785, %786
  %788 = trunc i32 %787 to i8
  %789 = add nsw i32 %778, -1
  %790 = zext i32 %789 to i64
  %791 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %771) #5
  store i64 -6148914691236517206, i64* %31, align 8
  %792 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %31) #5
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %794, label %889

794:                                              ; preds = %770, %886
  %795 = load i64, i64* %31, align 8
  switch i64 %795, label %868 [
    i64 0, label %893
    i64 10, label %796
  ]

796:                                              ; preds = %794
  %797 = load void (i8*, i8*)*, void (i8*, i8*)** %773, align 8
  %798 = load i8*, i8** %774, align 8
  tail call void %797(i8* %355, i8* %798) #5
  store i8* null, i8** %774, align 8
  %799 = load void (i8*, i8*)*, void (i8*, i8*)** %773, align 8
  %800 = load i8*, i8** %776, align 8
  tail call void %799(i8* %355, i8* %800) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %779, i8 0, i64 16, i1 false) #5
  %801 = load i64, i64* %260, align 8
  %802 = icmp eq i64 %801, 0
  br i1 %802, label %884, label %803

803:                                              ; preds = %796
  %804 = add i64 %801, -1
  store i64 %804, i64* %260, align 8
  %805 = load i8*, i8** %259, align 16
  %806 = getelementptr inbounds i8, i8* %805, i64 1
  store i8* %806, i8** %259, align 16
  br i1 %780, label %826, label %807

807:                                              ; preds = %803
  %808 = load i8, i8* %805, align 1
  %809 = icmp eq i8 %808, 0
  br i1 %809, label %810, label %819

810:                                              ; preds = %807
  %811 = icmp ult i64 %804, %781
  br i1 %811, label %884, label %812

812:                                              ; preds = %810
  %813 = load i8* (i8*, i64)*, i8* (i8*, i64)** %353, align 8
  %814 = tail call i8* %813(i8* %355, i64 %781) #5
  store i8* %814, i8** %774, align 8
  %815 = icmp eq i8* %814, null
  br i1 %815, label %884, label %816

816:                                              ; preds = %812
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %814, i8* align 1 %806, i64 %781, i1 false) #5
  %817 = sub i64 %804, %781
  store i64 %817, i64* %260, align 8
  %818 = getelementptr inbounds i8, i8* %806, i64 %781
  store i8* %818, i8** %259, align 16
  br label %826

819:                                              ; preds = %807
  %820 = load i8* (i8*, i64)*, i8* (i8*, i64)** %353, align 8
  %821 = tail call i8* %820(i8* %355, i64 %781) #5
  store i8* %821, i8** %774, align 8
  %822 = icmp eq i8* %821, null
  br i1 %822, label %884, label %823

823:                                              ; preds = %819
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %821, i8 -1, i64 %781, i1 false) #5
  br i1 %783, label %826, label %824

824:                                              ; preds = %823
  %825 = getelementptr inbounds i8, i8* %821, i64 %790
  store i8 %788, i8* %825, align 1
  br label %826

826:                                              ; preds = %824, %823, %816, %803
  br i1 %384, label %827, label %830

827:                                              ; preds = %826
  store i32* null, i32** %775, align 8
  %828 = load i8*, i8** %259, align 16
  %829 = load i64, i64* %260, align 8
  br label %877

830:                                              ; preds = %826
  %831 = load i8* (i8*, i64)*, i8* (i8*, i64)** %353, align 8
  %832 = tail call i8* %831(i8* %355, i64 %365) #5
  store i8* %832, i8** %776, align 8
  %833 = icmp eq i8* %832, null
  %834 = bitcast i8* %832 to i32*
  br i1 %833, label %884, label %835

835:                                              ; preds = %830
  %836 = load i8*, i8** %259, align 16
  %837 = load i64, i64* %260, align 8
  %838 = load i8*, i8** %774, align 8
  br label %839

839:                                              ; preds = %863, %835
  %840 = phi i64 [ 0, %835 ], [ %866, %863 ]
  %841 = phi i8* [ %836, %835 ], [ %865, %863 ]
  %842 = phi i64 [ %837, %835 ], [ %864, %863 ]
  %843 = trunc i64 %840 to i32
  %844 = lshr i64 %840, 3
  %845 = and i64 %844, 536870911
  %846 = getelementptr inbounds i8, i8* %838, i64 %845
  %847 = load i8, i8* %846, align 1
  %848 = zext i8 %847 to i32
  %849 = and i32 %843, 7
  %850 = lshr i32 128, %849
  %851 = and i32 %850, %848
  %852 = icmp eq i32 %851, 0
  br i1 %852, label %861, label %853

853:                                              ; preds = %839
  %854 = icmp ult i64 %842, 4
  br i1 %854, label %884, label %855

855:                                              ; preds = %853
  %856 = bitcast i8* %841 to i32*
  %857 = load i32, i32* %856, align 4
  %858 = getelementptr inbounds i32, i32* %834, i64 %840
  store i32 %857, i32* %858, align 4
  %859 = add i64 %842, -4
  %860 = getelementptr inbounds i8, i8* %841, i64 4
  br label %863

861:                                              ; preds = %839
  %862 = getelementptr inbounds i32, i32* %834, i64 %840
  store i32 0, i32* %862, align 4
  br label %863

863:                                              ; preds = %861, %855
  %864 = phi i64 [ %859, %855 ], [ %842, %861 ]
  %865 = phi i8* [ %860, %855 ], [ %841, %861 ]
  %866 = add nuw nsw i64 %840, 1
  %867 = icmp eq i64 %866, %356
  br i1 %867, label %877, label %839

868:                                              ; preds = %794
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %791) #5
  store i64 -6148914691236517206, i64* %13, align 8
  %869 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %13) #5
  %870 = icmp eq i32 %869, 0
  br i1 %870, label %871, label %875

871:                                              ; preds = %868
  %872 = load i64, i64* %13, align 8
  %873 = load i64, i64* %260, align 8
  %874 = icmp ult i64 %873, %872
  br i1 %874, label %875, label %880

875:                                              ; preds = %871, %868
  %876 = phi i32 [ 16, %871 ], [ %869, %868 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %791) #5
  br label %884

877:                                              ; preds = %863, %827
  %878 = phi i64 [ %829, %827 ], [ %864, %863 ]
  %879 = phi i8* [ %828, %827 ], [ %865, %863 ]
  store i8* %879, i8** %259, align 16
  store i64 %878, i64* %260, align 8
  br label %886

880:                                              ; preds = %871
  %881 = sub i64 %873, %872
  store i64 %881, i64* %260, align 8
  %882 = load i8*, i8** %259, align 16
  %883 = getelementptr inbounds i8, i8* %882, i64 %872
  store i8* %883, i8** %259, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %791) #5
  br label %886

884:                                              ; preds = %830, %819, %812, %810, %796, %853, %875
  %885 = phi i32 [ %876, %875 ], [ 16, %853 ], [ 16, %796 ], [ 16, %810 ], [ 2, %812 ], [ 2, %819 ], [ 2, %830 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %771) #5
  br label %891

886:                                              ; preds = %880, %877
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %771) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %771) #5
  store i64 -6148914691236517206, i64* %31, align 8
  %887 = call fastcc i32 @ReadNumber(%struct.CSzData* nonnull %28, i64* nonnull %31) #5
  %888 = icmp eq i32 %887, 0
  br i1 %888, label %794, label %889

889:                                              ; preds = %886, %770
  %890 = phi i32 [ %792, %770 ], [ %887, %886 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %771) #5
  br label %891

891:                                              ; preds = %421, %679, %667, %682, %522, %441, %438, %430, %425, %491, %764, %757, %889, %734, %742, %884, %664, %467, %489, %520, %419, %276, %284, %707, %342, %344, %307, %749, %715, %377, %371, %363, %352, %312, %309, %286, %744
  %892 = phi i32 [ %890, %889 ], [ %735, %734 ], [ %743, %742 ], [ %885, %884 ], [ %665, %664 ], [ %468, %467 ], [ %490, %489 ], [ %521, %520 ], [ %420, %419 ], [ %277, %276 ], [ %285, %284 ], [ 2, %707 ], [ %343, %342 ], [ 16, %344 ], [ %308, %307 ], [ 2, %749 ], [ 16, %715 ], [ 2, %377 ], [ 2, %371 ], [ 2, %363 ], [ 2, %352 ], [ 16, %312 ], [ 4, %309 ], [ 16, %286 ], [ 16, %744 ], [ %759, %757 ], [ %767, %764 ], [ 4, %491 ], [ 16, %425 ], [ 4, %430 ], [ 4, %438 ], [ 16, %441 ], [ 16, %522 ], [ 16, %682 ], [ 4, %667 ], [ 4, %679 ], [ 4, %421 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %258) #5
  br label %1230

893:                                              ; preds = %794
  %894 = bitcast %struct.CSzData* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %894, i8* nonnull align 16 %258, i64 16, i1 false) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %771) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %258) #5
  %895 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %38)
  %896 = icmp eq i32 %895, 0
  br i1 %896, label %897, label %1230

897:                                              ; preds = %893
  %898 = load i64, i64* %38, align 8
  br label %899

899:                                              ; preds = %897, %252
  %900 = phi i64 [ %898, %897 ], [ %253, %252 ]
  %901 = icmp eq i64 %900, 8
  br i1 %901, label %902, label %1222

902:                                              ; preds = %899
  %903 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %903) #5
  store i64 0, i64* %12, align 8
  %904 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 1
  %905 = load i32, i32* %904, align 4
  %906 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %12) #5
  %907 = icmp eq i32 %906, 0
  br i1 %907, label %908, label %1215

908:                                              ; preds = %902
  %909 = bitcast i64* %10 to i8*
  %910 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %1, i64 0, i32 1
  %911 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %1, i64 0, i32 0
  %912 = bitcast %struct.CSzData* %1 to i64*
  %913 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %6, i64 0, i32 2
  %914 = bitcast %struct.CSzData* %913 to i64*
  %915 = icmp eq i32 %905, 0
  %916 = bitcast i64* %11 to i8*
  %917 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 3, i32 0
  br label %918

918:                                              ; preds = %982, %908
  %919 = phi i32 [ 0, %908 ], [ %986, %982 ]
  %920 = phi i32 [ %905, %908 ], [ %985, %982 ]
  %921 = phi i32 [ 0, %908 ], [ %984, %982 ]
  br label %922

922:                                              ; preds = %1000, %918
  %923 = load i64, i64* %12, align 8
  switch i64 %923, label %991 [
    i64 13, label %924
    i64 10, label %1006
    i64 9, label %1006
    i64 0, label %1006
  ]

924:                                              ; preds = %922
  %925 = load i64, i64* %912, align 8
  store i64 %925, i64* %914, align 8
  br i1 %915, label %982, label %926

926:                                              ; preds = %924, %976
  %927 = phi i32 [ %978, %976 ], [ 0, %924 ]
  %928 = phi i32 [ %959, %976 ], [ %919, %924 ]
  %929 = phi i32 [ %953, %976 ], [ 0, %924 ]
  %930 = phi i32 [ %977, %976 ], [ 0, %924 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %916) #5
  store i64 -6148914691236517206, i64* %11, align 8
  %931 = load i64, i64* %910, align 8
  %932 = icmp eq i64 %931, 0
  br i1 %932, label %949, label %933

933:                                              ; preds = %926
  %934 = load i8*, i8** %911, align 8
  %935 = load i8, i8* %934, align 1
  %936 = icmp sgt i8 %935, -1
  br i1 %936, label %937, label %941

937:                                              ; preds = %933
  %938 = zext i8 %935 to i32
  %939 = getelementptr inbounds i8, i8* %934, i64 1
  store i8* %939, i8** %911, align 8
  %940 = add i64 %931, -1
  store i64 %940, i64* %910, align 8
  br label %951

941:                                              ; preds = %933
  %942 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %11) #5
  %943 = icmp eq i32 %942, 0
  br i1 %943, label %944, label %949

944:                                              ; preds = %941
  %945 = load i64, i64* %11, align 8
  %946 = icmp ugt i64 %945, 2147483646
  br i1 %946, label %949, label %947

947:                                              ; preds = %944
  %948 = trunc i64 %945 to i32
  br label %951

949:                                              ; preds = %944, %941, %926
  %950 = phi i32 [ 4, %944 ], [ 16, %926 ], [ %942, %941 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %916) #5
  br label %1215

951:                                              ; preds = %947, %937
  %952 = phi i32 [ %938, %937 ], [ %948, %947 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %916) #5
  %953 = add i32 %952, %929
  %954 = icmp ugt i32 %929, %953
  br i1 %954, label %1215, label %955

955:                                              ; preds = %951
  %956 = icmp eq i32 %952, 0
  %957 = add nsw i32 %952, -1
  %958 = select i1 %956, i32 0, i32 %957
  %959 = add i32 %958, %928
  %960 = icmp eq i32 %952, 1
  br i1 %960, label %961, label %974

961:                                              ; preds = %955
  %962 = load i8*, i8** %917, align 8
  %963 = icmp eq i8* %962, null
  br i1 %963, label %974, label %964

964:                                              ; preds = %961
  %965 = lshr i32 %927, 3
  %966 = zext i32 %965 to i64
  %967 = getelementptr inbounds i8, i8* %962, i64 %966
  %968 = load i8, i8* %967, align 1
  %969 = zext i8 %968 to i32
  %970 = and i32 %927, 7
  %971 = lshr i32 128, %970
  %972 = and i32 %971, %969
  %973 = icmp eq i32 %972, 0
  br i1 %973, label %974, label %976

974:                                              ; preds = %964, %961, %955
  %975 = add i32 %952, %930
  br label %976

976:                                              ; preds = %974, %964
  %977 = phi i32 [ %930, %964 ], [ %975, %974 ]
  %978 = add nuw i32 %927, 1
  %979 = icmp eq i32 %978, %905
  br i1 %979, label %980, label %926

980:                                              ; preds = %976
  %981 = load i64, i64* %914, align 8
  br label %982

982:                                              ; preds = %980, %924
  %983 = phi i64 [ %925, %924 ], [ %981, %980 ]
  %984 = phi i32 [ 0, %924 ], [ %977, %980 ]
  %985 = phi i32 [ 0, %924 ], [ %953, %980 ]
  %986 = phi i32 [ %919, %924 ], [ %959, %980 ]
  %987 = load i64, i64* %912, align 8
  %988 = sub i64 %987, %983
  store i64 %988, i64* %43, align 8
  %989 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %12) #5
  %990 = icmp eq i32 %989, 0
  br i1 %990, label %918, label %1215

991:                                              ; preds = %922
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %909) #5
  store i64 -6148914691236517206, i64* %10, align 8
  %992 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %10) #5
  %993 = icmp eq i32 %992, 0
  br i1 %993, label %994, label %998

994:                                              ; preds = %991
  %995 = load i64, i64* %10, align 8
  %996 = load i64, i64* %910, align 8
  %997 = icmp ult i64 %996, %995
  br i1 %997, label %998, label %1000

998:                                              ; preds = %994, %991
  %999 = phi i32 [ 16, %994 ], [ %992, %991 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %909) #5
  br label %1215

1000:                                             ; preds = %994
  %1001 = sub i64 %996, %995
  store i64 %1001, i64* %910, align 8
  %1002 = load i8*, i8** %911, align 8
  %1003 = getelementptr inbounds i8, i8* %1002, i64 %995
  store i8* %1003, i8** %911, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %909) #5
  %1004 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %12) #5
  %1005 = icmp eq i32 %1004, 0
  br i1 %1005, label %922, label %1215

1006:                                             ; preds = %922, %922, %922
  %1007 = load i8*, i8** %42, align 8
  %1008 = icmp eq i8* %1007, null
  br i1 %1008, label %1009, label %1060

1009:                                             ; preds = %1006
  %1010 = load i8*, i8** %917, align 8
  %1011 = icmp eq i8* %1010, null
  br i1 %1011, label %1060, label %1012

1012:                                             ; preds = %1009
  br i1 %915, label %1057, label %1013

1013:                                             ; preds = %1012
  %1014 = and i32 %905, 1
  %1015 = icmp eq i32 %905, 1
  br i1 %1015, label %1038, label %1016

1016:                                             ; preds = %1013
  %1017 = sub i32 %905, %1014
  br label %1018

1018:                                             ; preds = %1262, %1016
  %1019 = phi i32 [ 0, %1016 ], [ %1270, %1262 ]
  %1020 = phi i32 [ 0, %1016 ], [ %1266, %1262 ]
  %1021 = phi i8 [ 0, %1016 ], [ %1264, %1262 ]
  %1022 = phi i8* [ %1010, %1016 ], [ %1263, %1262 ]
  %1023 = phi i32 [ %1017, %1016 ], [ %1271, %1262 ]
  %1024 = icmp eq i32 %1020, 0
  br i1 %1024, label %1025, label %1028

1025:                                             ; preds = %1018
  %1026 = getelementptr inbounds i8, i8* %1022, i64 1
  %1027 = load i8, i8* %1022, align 1
  br label %1028

1028:                                             ; preds = %1025, %1018
  %1029 = phi i8* [ %1026, %1025 ], [ %1022, %1018 ]
  %1030 = phi i8 [ %1027, %1025 ], [ %1021, %1018 ]
  %1031 = phi i32 [ 8, %1025 ], [ %1020, %1018 ]
  %1032 = add i32 %1031, -1
  %1033 = zext i8 %1030 to i32
  %1034 = lshr i32 %1033, %1032
  %1035 = and i32 %1034, 1
  %1036 = add i32 %1035, %1019
  %1037 = icmp eq i32 %1032, 0
  br i1 %1037, label %1259, label %1262

1038:                                             ; preds = %1262, %1013
  %1039 = phi i32 [ undef, %1013 ], [ %1270, %1262 ]
  %1040 = phi i32 [ 0, %1013 ], [ %1270, %1262 ]
  %1041 = phi i32 [ 0, %1013 ], [ %1266, %1262 ]
  %1042 = phi i8 [ 0, %1013 ], [ %1264, %1262 ]
  %1043 = phi i8* [ %1010, %1013 ], [ %1263, %1262 ]
  %1044 = icmp eq i32 %1014, 0
  br i1 %1044, label %1057, label %1045

1045:                                             ; preds = %1038
  %1046 = icmp eq i32 %1041, 0
  br i1 %1046, label %1047, label %1049

1047:                                             ; preds = %1045
  %1048 = load i8, i8* %1043, align 1
  br label %1049

1049:                                             ; preds = %1045, %1047
  %1050 = phi i8 [ %1048, %1047 ], [ %1042, %1045 ]
  %1051 = phi i32 [ 8, %1047 ], [ %1041, %1045 ]
  %1052 = zext i8 %1050 to i32
  %1053 = add i32 %1051, -1
  %1054 = lshr i32 %1052, %1053
  %1055 = and i32 %1054, 1
  %1056 = add i32 %1055, %1040
  br label %1057

1057:                                             ; preds = %1049, %1038, %1012
  %1058 = phi i32 [ 0, %1012 ], [ %1039, %1038 ], [ %1056, %1049 ]
  %1059 = sub i32 %905, %1058
  br label %1060

1060:                                             ; preds = %1057, %1009, %1006
  %1061 = phi i32 [ %921, %1006 ], [ %1059, %1057 ], [ %905, %1009 ]
  %1062 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %6, i64 0, i32 0
  store i32 %920, i32* %1062, align 8
  %1063 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %6, i64 0, i32 1
  store i32 %1061, i32* %1063, align 4
  %1064 = icmp eq i64 %923, 9
  br i1 %1064, label %1065, label %1117

1065:                                             ; preds = %1060
  %1066 = load i64, i64* %912, align 8
  %1067 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %6, i64 0, i32 3
  %1068 = bitcast %struct.CSzData* %1067 to i64*
  store i64 %1066, i64* %1068, align 8
  %1069 = load i8*, i8** %911, align 8
  %1070 = load i64, i64* %910, align 8
  %1071 = icmp eq i32 %919, 0
  br i1 %1071, label %1109, label %1072

1072:                                             ; preds = %1065, %1104
  %1073 = phi i8* [ %1106, %1104 ], [ %1069, %1065 ]
  %1074 = phi i64 [ %1105, %1104 ], [ %1070, %1065 ]
  %1075 = phi i32 [ %1107, %1104 ], [ %919, %1065 ]
  %1076 = icmp eq i64 %1074, 0
  br i1 %1076, label %1215, label %1077

1077:                                             ; preds = %1072
  %1078 = add i64 %1074, -1
  %1079 = getelementptr inbounds i8, i8* %1073, i64 1
  %1080 = load i8, i8* %1073, align 1
  %1081 = zext i8 %1080 to i32
  %1082 = icmp sgt i8 %1080, -1
  br i1 %1082, label %1104, label %1083

1083:                                             ; preds = %1077
  %1084 = and i32 %1081, 64
  %1085 = icmp eq i32 %1084, 0
  br i1 %1085, label %1089, label %1086

1086:                                             ; preds = %1083
  %1087 = and i32 %1081, 32
  %1088 = icmp eq i32 %1087, 0
  br i1 %1088, label %1097, label %1094

1089:                                             ; preds = %1083
  %1090 = icmp eq i64 %1078, 0
  br i1 %1090, label %1215, label %1091

1091:                                             ; preds = %1089
  %1092 = add i64 %1074, -2
  %1093 = getelementptr inbounds i8, i8* %1073, i64 2
  br label %1104

1094:                                             ; preds = %1086
  %1095 = and i32 %1081, 16
  %1096 = icmp eq i32 %1095, 0
  br i1 %1096, label %1097, label %1246

1097:                                             ; preds = %1255, %1094, %1246, %1249, %1252, %1086
  %1098 = phi i64 [ 2, %1086 ], [ 3, %1094 ], [ 4, %1246 ], [ 5, %1249 ], [ 6, %1252 ], [ %1258, %1255 ]
  %1099 = and i64 %1098, 4294967295
  %1100 = icmp ult i64 %1078, %1099
  br i1 %1100, label %1215, label %1101

1101:                                             ; preds = %1097
  %1102 = sub i64 %1078, %1099
  %1103 = getelementptr inbounds i8, i8* %1079, i64 %1099
  br label %1104

1104:                                             ; preds = %1101, %1091, %1077
  %1105 = phi i64 [ %1092, %1091 ], [ %1102, %1101 ], [ %1078, %1077 ]
  %1106 = phi i8* [ %1093, %1091 ], [ %1103, %1101 ], [ %1079, %1077 ]
  %1107 = add i32 %1075, -1
  %1108 = icmp eq i32 %1107, 0
  br i1 %1108, label %1109, label %1072

1109:                                             ; preds = %1104, %1065
  %1110 = phi i64 [ %1070, %1065 ], [ %1105, %1104 ]
  %1111 = phi i8* [ %1069, %1065 ], [ %1106, %1104 ]
  store i8* %1111, i8** %911, align 8
  store i64 %1110, i64* %910, align 8
  %1112 = ptrtoint i8* %1111 to i64
  %1113 = load i64, i64* %1068, align 8
  %1114 = sub i64 %1112, %1113
  store i64 %1114, i64* %40, align 8
  %1115 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %12) #5
  %1116 = icmp eq i32 %1115, 0
  br i1 %1116, label %1117, label %1215

1117:                                             ; preds = %1109, %1060
  %1118 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %6, i64 0, i32 4
  %1119 = bitcast %struct.CSzData* %1118 to i64*
  %1120 = add i32 %1061, 7
  %1121 = lshr i32 %1120, 3
  %1122 = zext i32 %1121 to i64
  %1123 = bitcast i64* %9 to i8*
  %1124 = and i32 %1061, 1
  %1125 = icmp eq i32 %1061, 1
  %1126 = sub i32 %1061, %1124
  %1127 = icmp eq i32 %1124, 0
  br label %1128

1128:                                             ; preds = %1212, %1117
  %1129 = load i64, i64* %12, align 8
  switch i64 %1129, label %1199 [
    i64 0, label %1217
    i64 10, label %1130
  ]

1130:                                             ; preds = %1128
  %1131 = load i64, i64* %912, align 8
  store i64 %1131, i64* %1119, align 8
  %1132 = load i64, i64* %910, align 8
  %1133 = icmp eq i64 %1132, 0
  br i1 %1133, label %1215, label %1134

1134:                                             ; preds = %1130
  %1135 = add i64 %1132, -1
  store i64 %1135, i64* %910, align 8
  %1136 = load i8*, i8** %911, align 8
  %1137 = getelementptr inbounds i8, i8* %1136, i64 1
  store i8* %1137, i8** %911, align 8
  %1138 = load i8, i8* %1136, align 1
  %1139 = icmp eq i8 %1138, 0
  br i1 %1139, label %1140, label %1185

1140:                                             ; preds = %1134
  %1141 = icmp ult i64 %1135, %1122
  br i1 %1141, label %1215, label %1142

1142:                                             ; preds = %1140
  switch i32 %1061, label %1143 [
    i32 0, label %1181
    i32 1, label %1163
  ]

1143:                                             ; preds = %1142, %1235
  %1144 = phi i32 [ %1243, %1235 ], [ 0, %1142 ]
  %1145 = phi i32 [ %1239, %1235 ], [ 0, %1142 ]
  %1146 = phi i8 [ %1237, %1235 ], [ 0, %1142 ]
  %1147 = phi i8* [ %1236, %1235 ], [ %1137, %1142 ]
  %1148 = phi i32 [ %1244, %1235 ], [ %1126, %1142 ]
  %1149 = icmp eq i32 %1145, 0
  br i1 %1149, label %1150, label %1153

1150:                                             ; preds = %1143
  %1151 = getelementptr inbounds i8, i8* %1147, i64 1
  %1152 = load i8, i8* %1147, align 1
  br label %1153

1153:                                             ; preds = %1150, %1143
  %1154 = phi i8* [ %1151, %1150 ], [ %1147, %1143 ]
  %1155 = phi i8 [ %1152, %1150 ], [ %1146, %1143 ]
  %1156 = phi i32 [ 8, %1150 ], [ %1145, %1143 ]
  %1157 = add i32 %1156, -1
  %1158 = zext i8 %1155 to i32
  %1159 = lshr i32 %1158, %1157
  %1160 = and i32 %1159, 1
  %1161 = add i32 %1160, %1144
  %1162 = icmp eq i32 %1157, 0
  br i1 %1162, label %1232, label %1235

1163:                                             ; preds = %1235, %1142
  %1164 = phi i32 [ undef, %1142 ], [ %1243, %1235 ]
  %1165 = phi i32 [ 0, %1142 ], [ %1243, %1235 ]
  %1166 = phi i32 [ 0, %1142 ], [ %1239, %1235 ]
  %1167 = phi i8 [ 0, %1142 ], [ %1237, %1235 ]
  %1168 = phi i8* [ %1137, %1142 ], [ %1236, %1235 ]
  br i1 %1127, label %1181, label %1169

1169:                                             ; preds = %1163
  %1170 = icmp eq i32 %1166, 0
  br i1 %1170, label %1171, label %1173

1171:                                             ; preds = %1169
  %1172 = load i8, i8* %1168, align 1
  br label %1173

1173:                                             ; preds = %1169, %1171
  %1174 = phi i8 [ %1172, %1171 ], [ %1167, %1169 ]
  %1175 = phi i32 [ 8, %1171 ], [ %1166, %1169 ]
  %1176 = zext i8 %1174 to i32
  %1177 = add i32 %1175, -1
  %1178 = lshr i32 %1176, %1177
  %1179 = and i32 %1178, 1
  %1180 = add i32 %1179, %1165
  br label %1181

1181:                                             ; preds = %1173, %1163, %1142
  %1182 = phi i32 [ 0, %1142 ], [ %1164, %1163 ], [ %1180, %1173 ]
  %1183 = sub i64 %1135, %1122
  store i64 %1183, i64* %910, align 8
  %1184 = getelementptr inbounds i8, i8* %1137, i64 %1122
  store i8* %1184, i8** %911, align 8
  br label %1185

1185:                                             ; preds = %1181, %1134
  %1186 = phi i8* [ %1137, %1134 ], [ %1184, %1181 ]
  %1187 = phi i64 [ %1135, %1134 ], [ %1183, %1181 ]
  %1188 = phi i32 [ %1061, %1134 ], [ %1182, %1181 ]
  %1189 = zext i32 %1188 to i64
  %1190 = lshr i64 %1187, 2
  %1191 = icmp ult i64 %1190, %1189
  br i1 %1191, label %1215, label %1192

1192:                                             ; preds = %1185
  %1193 = shl nuw nsw i64 %1189, 2
  %1194 = sub i64 %1187, %1193
  store i64 %1194, i64* %910, align 8
  %1195 = getelementptr inbounds i8, i8* %1186, i64 %1193
  store i8* %1195, i8** %911, align 8
  %1196 = ptrtoint i8* %1195 to i64
  %1197 = load i64, i64* %1119, align 8
  %1198 = sub i64 %1196, %1197
  store i64 %1198, i64* %41, align 8
  br label %1212

1199:                                             ; preds = %1128
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1123) #5
  store i64 -6148914691236517206, i64* %9, align 8
  %1200 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %9) #5
  %1201 = icmp eq i32 %1200, 0
  br i1 %1201, label %1202, label %1206

1202:                                             ; preds = %1199
  %1203 = load i64, i64* %9, align 8
  %1204 = load i64, i64* %910, align 8
  %1205 = icmp ult i64 %1204, %1203
  br i1 %1205, label %1206, label %1208

1206:                                             ; preds = %1202, %1199
  %1207 = phi i32 [ 16, %1202 ], [ %1200, %1199 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1123) #5
  br label %1215

1208:                                             ; preds = %1202
  %1209 = sub i64 %1204, %1203
  store i64 %1209, i64* %910, align 8
  %1210 = load i8*, i8** %911, align 8
  %1211 = getelementptr inbounds i8, i8* %1210, i64 %1203
  store i8* %1211, i8** %911, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1123) #5
  br label %1212

1212:                                             ; preds = %1208, %1192
  %1213 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %12) #5
  %1214 = icmp eq i32 %1213, 0
  br i1 %1214, label %1128, label %1215

1215:                                             ; preds = %982, %1000, %951, %1097, %1089, %1072, %1212, %1130, %1185, %1140, %902, %949, %1206, %998, %1109
  %1216 = phi i32 [ %906, %902 ], [ %950, %949 ], [ %1207, %1206 ], [ %999, %998 ], [ %1115, %1109 ], [ 16, %1140 ], [ 16, %1185 ], [ 16, %1130 ], [ %1213, %1212 ], [ 16, %1072 ], [ 16, %1089 ], [ 16, %1097 ], [ 4, %951 ], [ %1004, %1000 ], [ %989, %982 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %903) #5
  br label %1230

1217:                                             ; preds = %1128
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %903) #5
  %1218 = call fastcc i32 @ReadNumber(%struct.CSzData* %1, i64* nonnull %38)
  %1219 = icmp eq i32 %1218, 0
  br i1 %1219, label %1220, label %1230

1220:                                             ; preds = %1217
  %1221 = load i64, i64* %38, align 8
  br label %1226

1222:                                             ; preds = %899
  %1223 = getelementptr inbounds %struct.CSzAr, %struct.CSzAr* %0, i64 0, i32 1
  %1224 = load i32, i32* %1223, align 4
  %1225 = getelementptr inbounds %struct.CSubStreamInfo, %struct.CSubStreamInfo* %6, i64 0, i32 0
  store i32 %1224, i32* %1225, align 8
  br label %1226

1226:                                             ; preds = %1220, %1222
  %1227 = phi i64 [ %1221, %1220 ], [ %900, %1222 ]
  %1228 = icmp eq i64 %1227, 0
  %1229 = select i1 %1228, i32 0, i32 4
  br label %1230

1230:                                             ; preds = %131, %139, %104, %78, %105, %240, %102, %94, %245, %1215, %891, %247, %50, %893, %1217, %8, %1226
  %1231 = phi i32 [ %1229, %1226 ], [ %1218, %1217 ], [ %895, %893 ], [ %248, %247 ], [ %51, %50 ], [ %45, %8 ], [ %892, %891 ], [ %1216, %1215 ], [ %246, %245 ], [ %95, %94 ], [ %103, %102 ], [ %241, %240 ], [ 2, %105 ], [ %79, %78 ], [ 16, %104 ], [ %129, %139 ], [ 16, %131 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #5
  ret i32 %1231

1232:                                             ; preds = %1153
  %1233 = getelementptr inbounds i8, i8* %1154, i64 1
  %1234 = load i8, i8* %1154, align 1
  br label %1235

1235:                                             ; preds = %1232, %1153
  %1236 = phi i8* [ %1233, %1232 ], [ %1154, %1153 ]
  %1237 = phi i8 [ %1234, %1232 ], [ %1155, %1153 ]
  %1238 = phi i32 [ 8, %1232 ], [ %1157, %1153 ]
  %1239 = add i32 %1238, -1
  %1240 = zext i8 %1237 to i32
  %1241 = lshr i32 %1240, %1239
  %1242 = and i32 %1241, 1
  %1243 = add i32 %1242, %1161
  %1244 = add i32 %1148, -2
  %1245 = icmp eq i32 %1244, 0
  br i1 %1245, label %1163, label %1143

1246:                                             ; preds = %1094
  %1247 = and i32 %1081, 8
  %1248 = icmp eq i32 %1247, 0
  br i1 %1248, label %1097, label %1249

1249:                                             ; preds = %1246
  %1250 = and i32 %1081, 4
  %1251 = icmp eq i32 %1250, 0
  br i1 %1251, label %1097, label %1252

1252:                                             ; preds = %1249
  %1253 = and i32 %1081, 2
  %1254 = icmp eq i32 %1253, 0
  br i1 %1254, label %1097, label %1255

1255:                                             ; preds = %1252
  %1256 = and i32 %1081, 1
  %1257 = icmp eq i32 %1256, 0
  %1258 = select i1 %1257, i64 7, i64 8
  br label %1097

1259:                                             ; preds = %1028
  %1260 = getelementptr inbounds i8, i8* %1029, i64 1
  %1261 = load i8, i8* %1029, align 1
  br label %1262

1262:                                             ; preds = %1259, %1028
  %1263 = phi i8* [ %1260, %1259 ], [ %1029, %1028 ]
  %1264 = phi i8 [ %1261, %1259 ], [ %1030, %1028 ]
  %1265 = phi i32 [ 8, %1259 ], [ %1032, %1028 ]
  %1266 = add i32 %1265, -1
  %1267 = zext i8 %1264 to i32
  %1268 = lshr i32 %1267, %1266
  %1269 = and i32 %1268, 1
  %1270 = add i32 %1269, %1036
  %1271 = add i32 %1023, -2
  %1272 = icmp eq i32 %1271, 0
  br i1 %1272, label %1038, label %1018

1273:                                             ; preds = %183
  %1274 = getelementptr inbounds i8, i8* %184, i64 1
  %1275 = load i8, i8* %184, align 1
  br label %1276

1276:                                             ; preds = %1273, %183
  %1277 = phi i8* [ %1274, %1273 ], [ %184, %183 ]
  %1278 = phi i8 [ %1275, %1273 ], [ %185, %183 ]
  %1279 = phi i32 [ 8, %1273 ], [ %187, %183 ]
  %1280 = add i32 %1279, -1
  %1281 = zext i8 %1278 to i32
  %1282 = lshr i32 %1281, %1280
  %1283 = and i32 %1282, 1
  %1284 = add i32 %1283, %191
  %1285 = add i32 %178, -2
  %1286 = icmp eq i32 %1285, 0
  br i1 %1286, label %193, label %173
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ReadTime(%struct.CSzBitUi64s* nocapture, i32, %struct.CSzData* nocapture, %struct.CBuf* nocapture readonly, i32, %struct.ISzAlloc*) unnamed_addr #0 {
  %7 = alloca i64, align 8
  %8 = getelementptr inbounds %struct.CSzBitUi64s, %struct.CSzBitUi64s* %0, i64 0, i32 0
  %9 = add i32 %1, 7
  %10 = lshr i32 %9, 3
  store i8* null, i8** %8, align 8
  %11 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %2, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %155, label %14

14:                                               ; preds = %6
  %15 = add i64 %12, -1
  store i64 %15, i64* %11, align 8
  %16 = getelementptr inbounds %struct.CSzData, %struct.CSzData* %2, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %16, align 8
  %19 = icmp eq i32 %10, 0
  br i1 %19, label %57, label %20

20:                                               ; preds = %14
  %21 = load i8, i8* %17, align 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %38

23:                                               ; preds = %20
  %24 = zext i32 %10 to i64
  %25 = icmp ult i64 %15, %24
  br i1 %25, label %155, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %5, i64 0, i32 0
  %28 = load i8* (i8*, i64)*, i8* (i8*, i64)** %27, align 8
  %29 = bitcast %struct.ISzAlloc* %5 to i8*
  %30 = tail call i8* %28(i8* %29, i64 %24) #5
  store i8* %30, i8** %8, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %155, label %32

32:                                               ; preds = %26
  %33 = load i8*, i8** %16, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %30, i8* align 1 %33, i64 %24, i1 false) #5
  %34 = load i64, i64* %11, align 8
  %35 = sub i64 %34, %24
  store i64 %35, i64* %11, align 8
  %36 = load i8*, i8** %16, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 %24
  store i8* %37, i8** %16, align 8
  br label %59

38:                                               ; preds = %20
  %39 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %5, i64 0, i32 0
  %40 = load i8* (i8*, i64)*, i8* (i8*, i64)** %39, align 8
  %41 = bitcast %struct.ISzAlloc* %5 to i8*
  %42 = zext i32 %10 to i64
  %43 = tail call i8* %40(i8* %41, i64 %42) #5
  store i8* %43, i8** %8, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %155, label %45

45:                                               ; preds = %38
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %43, i8 -1, i64 %42, i1 false) #5
  %46 = and i32 %1, 7
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %57, label %48

48:                                               ; preds = %45
  %49 = shl nsw i32 -1, %46
  %50 = xor i32 %49, -1
  %51 = sub nuw nsw i32 8, %46
  %52 = shl i32 %50, %51
  %53 = trunc i32 %52 to i8
  %54 = add nsw i32 %10, -1
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %43, i64 %55
  store i8 %53, i8* %56, align 1
  br label %57

57:                                               ; preds = %48, %45, %14
  %58 = load i64, i64* %11, align 8
  br label %59

59:                                               ; preds = %57, %32
  %60 = phi i64 [ %58, %57 ], [ %35, %32 ]
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %155, label %62

62:                                               ; preds = %59
  %63 = add i64 %60, -1
  store i64 %63, i64* %11, align 8
  %64 = load i8*, i8** %16, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 1
  store i8* %65, i8** %16, align 8
  %66 = load i8, i8* %64, align 1
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %97, label %68

68:                                               ; preds = %62
  %69 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #5
  store i64 -6148914691236517206, i64* %7, align 8
  %70 = icmp eq i64 %63, 0
  br i1 %70, label %86, label %71

71:                                               ; preds = %68
  %72 = load i8, i8* %65, align 1
  %73 = icmp sgt i8 %72, -1
  br i1 %73, label %74, label %78

74:                                               ; preds = %71
  %75 = zext i8 %72 to i32
  %76 = getelementptr inbounds i8, i8* %64, i64 2
  store i8* %76, i8** %16, align 8
  %77 = add i64 %60, -2
  store i64 %77, i64* %11, align 8
  br label %88

78:                                               ; preds = %71
  %79 = call fastcc i32 @ReadNumber(%struct.CSzData* %2, i64* nonnull %7) #5
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %86

81:                                               ; preds = %78
  %82 = load i64, i64* %7, align 8
  %83 = icmp ugt i64 %82, 2147483646
  br i1 %83, label %86, label %84

84:                                               ; preds = %81
  %85 = trunc i64 %82 to i32
  br label %88

86:                                               ; preds = %78, %68, %81
  %87 = phi i32 [ 4, %81 ], [ 16, %68 ], [ %79, %78 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #5
  br label %155

88:                                               ; preds = %84, %74
  %89 = phi i32 [ %75, %74 ], [ %85, %84 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #5
  %90 = icmp ult i32 %89, %4
  br i1 %90, label %91, label %155

91:                                               ; preds = %88
  %92 = zext i32 %89 to i64
  %93 = getelementptr inbounds %struct.CBuf, %struct.CBuf* %3, i64 %92, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds %struct.CBuf, %struct.CBuf* %3, i64 %92, i32 1
  %96 = load i64, i64* %95, align 8
  br label %97

97:                                               ; preds = %91, %62
  %98 = phi i64 [ %63, %62 ], [ %96, %91 ]
  %99 = phi i8* [ %65, %62 ], [ %94, %91 ]
  %100 = icmp eq i32 %1, 0
  br i1 %100, label %101, label %103

101:                                              ; preds = %97
  %102 = getelementptr inbounds %struct.CSzBitUi64s, %struct.CSzBitUi64s* %0, i64 0, i32 1
  store %struct.CNtfsFileTime* null, %struct.CNtfsFileTime** %102, align 8
  br label %151

103:                                              ; preds = %97
  %104 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %5, i64 0, i32 0
  %105 = load i8* (i8*, i64)*, i8* (i8*, i64)** %104, align 8
  %106 = bitcast %struct.ISzAlloc* %5 to i8*
  %107 = zext i32 %1 to i64
  %108 = shl nuw nsw i64 %107, 3
  %109 = tail call i8* %105(i8* %106, i64 %108) #5
  %110 = getelementptr inbounds %struct.CSzBitUi64s, %struct.CSzBitUi64s* %0, i64 0, i32 1
  %111 = bitcast %struct.CNtfsFileTime** %110 to i8**
  store i8* %109, i8** %111, align 8
  %112 = icmp eq i8* %109, null
  %113 = bitcast i8* %109 to %struct.CNtfsFileTime*
  br i1 %112, label %155, label %114

114:                                              ; preds = %103
  %115 = load i8*, i8** %8, align 8
  %116 = zext i32 %1 to i64
  br label %117

117:                                              ; preds = %146, %114
  %118 = phi i64 [ 0, %114 ], [ %149, %146 ]
  %119 = phi i8* [ %99, %114 ], [ %148, %146 ]
  %120 = phi i64 [ %98, %114 ], [ %147, %146 ]
  %121 = trunc i64 %118 to i32
  %122 = lshr i64 %118, 3
  %123 = and i64 %122, 536870911
  %124 = getelementptr inbounds i8, i8* %115, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = and i32 %121, 7
  %128 = lshr i32 128, %127
  %129 = and i32 %128, %126
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %143, label %131

131:                                              ; preds = %117
  %132 = icmp ult i64 %120, 8
  br i1 %132, label %155, label %133

133:                                              ; preds = %131
  %134 = bitcast i8* %119 to i32*
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds %struct.CNtfsFileTime, %struct.CNtfsFileTime* %113, i64 %118, i32 0
  store i32 %135, i32* %136, align 4
  %137 = getelementptr inbounds i8, i8* %119, i64 4
  %138 = bitcast i8* %137 to i32*
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %struct.CNtfsFileTime, %struct.CNtfsFileTime* %113, i64 %118, i32 1
  store i32 %139, i32* %140, align 4
  %141 = add i64 %120, -8
  %142 = getelementptr inbounds i8, i8* %119, i64 8
  br label %146

143:                                              ; preds = %117
  %144 = getelementptr inbounds %struct.CNtfsFileTime, %struct.CNtfsFileTime* %113, i64 %118, i32 0
  store i32 0, i32* %144, align 4
  %145 = getelementptr inbounds %struct.CNtfsFileTime, %struct.CNtfsFileTime* %113, i64 %118, i32 1
  store i32 0, i32* %145, align 4
  br label %146

146:                                              ; preds = %133, %143
  %147 = phi i64 [ %141, %133 ], [ %120, %143 ]
  %148 = phi i8* [ %142, %133 ], [ %119, %143 ]
  %149 = add nuw nsw i64 %118, 1
  %150 = icmp eq i64 %149, %116
  br i1 %150, label %151, label %117

151:                                              ; preds = %146, %101
  %152 = phi i64 [ %98, %101 ], [ %147, %146 ]
  %153 = phi i8* [ %99, %101 ], [ %148, %146 ]
  br i1 %67, label %154, label %155

154:                                              ; preds = %151
  store i8* %153, i8** %16, align 8
  store i64 %152, i64* %11, align 8
  br label %155

155:                                              ; preds = %131, %86, %88, %6, %23, %26, %38, %151, %154, %103, %59
  %156 = phi i32 [ 16, %59 ], [ 2, %103 ], [ 0, %154 ], [ 0, %151 ], [ 16, %6 ], [ 16, %23 ], [ 2, %26 ], [ 2, %38 ], [ 16, %88 ], [ %87, %86 ], [ 16, %131 ]
  ret i32 %156
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
