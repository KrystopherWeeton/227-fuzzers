; ModuleID = '../../components/password_manager/core/browser/credentials_cleaner.cc'
source_filename = "../../components/password_manager/core/browser/credentials_cleaner.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.password_manager::PasswordForm"* }
%"struct.password_manager::PasswordForm" = type { i32, %"class.std::__1::basic_string", %class.GURL, %class.GURL, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %class.GURL, %"class.std::__1::basic_string.12", %"class.std::__1::basic_string.12", %"class.autofill::FieldRendererId", i8, i8, %"class.std::__1::basic_string.12", %"class.std::__1::vector.21", %"class.std::__1::vector.21", i8, %"class.std::__1::basic_string.12", %"class.autofill::FieldRendererId", %"class.std::__1::basic_string.12", %"class.std::__1::basic_string", %"class.std::__1::basic_string.12", %"class.autofill::FieldRendererId", %"class.std::__1::basic_string.12", %"class.autofill::FieldRendererId", %"class.std::__1::basic_string.12", %"class.base::Time", %"class.base::Time", %"class.base::Time", i8, i32, i32, [4 x i8], %"struct.autofill::FormData", i32, %"class.std::__1::basic_string.12", %class.GURL, %"class.url::Origin", i8, i8, i8, i8, i32, i8, i8, i32, %"class.std::__1::vector.75" }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.23" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::pair"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.autofill::FieldRendererId" = type { %"class.util::IdType" }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i32 }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.autofill::FormData" = type <{ %"class.std::__1::basic_string.12", %"class.std::__1::basic_string.12", %"class.std::__1::basic_string.12", %"class.std::__1::vector.28", %class.GURL, %class.GURL, %class.GURL, i8, [7 x i8], %"class.url::Origin", i8, [7 x i8], %"class.autofill::internal::TokenType", %"class.autofill::FormRendererId", [4 x i8], %"class.std::__1::vector.40", %"class.std::__1::vector.47", i32, [4 x i8], %"class.std::__1::vector.54", %"class.std::__1::vector.68", i8, [7 x i8] }>
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { %"struct.std::__1::pair.30"*, %"struct.std::__1::pair.30"*, %"class.std::__1::__compressed_pair.31" }
%"struct.std::__1::pair.30" = type opaque
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::pair.30"* }
%"class.autofill::internal::TokenType" = type { %"class.base::StrongAlias.37" }
%"class.base::StrongAlias.37" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.autofill::FormRendererId" = type { %"class.util::IdType.38" }
%"class.util::IdType.38" = type { %"class.base::StrongAlias.39" }
%"class.base::StrongAlias.39" = type { i32 }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"class.absl::variant"*, %"class.absl::variant"*, %"class.std::__1::__compressed_pair.42" }
%"class.absl::variant" = type opaque
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.absl::variant"* }
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { i32*, i32*, %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { i32* }
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { %"struct.autofill::FormFieldData"*, %"struct.autofill::FormFieldData"*, %"class.std::__1::__compressed_pair.63" }
%"struct.autofill::FormFieldData" = type { %"class.std::__1::basic_string.12", %"class.std::__1::basic_string.12", %"class.std::__1::basic_string.12", %"class.std::__1::basic_string.12", %"class.std::__1::basic_string.12", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string.12", %"class.std::__1::basic_string.12", %"class.std::__1::basic_string.12", %"class.std::__1::basic_string.12", %"class.autofill::internal::TokenType", %"class.autofill::FieldRendererId", %"class.autofill::FormRendererId", %"class.url::Origin", i32, %"class.std::__1::basic_string", i64, i8, i32, i8, i8, i32, i32, i32, i8, i8, %"class.std::__1::basic_string.12", %"class.std::__1::vector.56", %"class.std::__1::vector.56", i32, %"class.gfx::RectF", %"class.std::__1::vector.56", %"class.std::__1::vector.56" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector.56" = type { %"class.std::__1::__vector_base.57" }
%"class.std::__1::__vector_base.57" = type { %"class.std::__1::basic_string.12"*, %"class.std::__1::basic_string.12"*, %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.std::__1::basic_string.12"* }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.autofill::FormFieldData"* }
%"class.std::__1::vector.68" = type { %"class.std::__1::__vector_base.69" }
%"class.std::__1::__vector_base.69" = type { %"class.autofill::FieldRendererId"*, %"class.autofill::FieldRendererId"*, %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.autofill::FieldRendererId"* }
%"class.std::__1::basic_string.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.15 }
%union.anon.15 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.8" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %class.GURL* }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.36 }
%union.anon.36 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { %"class.autofill::GaiaIdHash"*, %"class.autofill::GaiaIdHash"*, %"class.std::__1::__compressed_pair.77" }
%"class.autofill::GaiaIdHash" = type { %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.autofill::GaiaIdHash"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::unique_ptr"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16password_manager18CredentialsCleaner25RemoveNonHTTPOrHTTPSFormsENSt3__16vectorINS1_10unique_ptrINS_12PasswordFormENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEE(%"class.std::__1::vector"* noalias nocapture sret, %"class.std::__1::vector"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.GURL, align 8
  %4 = alloca %class.GURL, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %8 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %7, align 8
  %9 = icmp eq %"class.std::__1::unique_ptr"* %6, %8
  br i1 %9, label %35, label %10

10:                                               ; preds = %2
  %11 = bitcast %class.GURL* %4 to i8*
  br label %12

12:                                               ; preds = %30, %10
  %13 = phi %"class.std::__1::unique_ptr"* [ %6, %10 ], [ %31, %30 ]
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %11) #5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %"struct.password_manager::PasswordForm"*, %"struct.password_manager::PasswordForm"** %14, align 8
  %16 = getelementptr inbounds %"struct.password_manager::PasswordForm", %"struct.password_manager::PasswordForm"* %15, i64 0, i32 1
  %17 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  %24 = select i1 %20, i8* %22, i8* %23
  %25 = getelementptr inbounds %"struct.password_manager::PasswordForm", %"struct.password_manager::PasswordForm"* %15, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = zext i8 %19 to i64
  %28 = select i1 %20, i64 %26, i64 %27
  call void @_ZN4GURLC1EN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* nonnull %4, i8* %24, i64 %28) #5
  %29 = call zeroext i1 @_ZNK4GURL19SchemeIsHTTPOrHTTPSEv(%class.GURL* nonnull %4) #5
  call void @_ZN4GURLD1Ev(%class.GURL* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %11) #5
  br i1 %29, label %30, label %35

30:                                               ; preds = %12
  %31 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 1
  %32 = icmp eq %"class.std::__1::unique_ptr"* %31, %8
  br i1 %32, label %33, label %12

33:                                               ; preds = %30
  %34 = ptrtoint %"class.std::__1::unique_ptr"* %8 to i64
  br label %80

35:                                               ; preds = %12, %2
  %36 = phi %"class.std::__1::unique_ptr"* [ %6, %2 ], [ %13, %12 ]
  %37 = ptrtoint %"class.std::__1::unique_ptr"* %36 to i64
  %38 = icmp eq %"class.std::__1::unique_ptr"* %36, %8
  br i1 %38, label %80, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 1
  %41 = icmp eq %"class.std::__1::unique_ptr"* %40, %8
  br i1 %41, label %80, label %42

42:                                               ; preds = %39
  %43 = bitcast %class.GURL* %3 to i8*
  br label %44

44:                                               ; preds = %76, %42
  %45 = phi %"class.std::__1::unique_ptr"* [ %40, %42 ], [ %78, %76 ]
  %46 = phi i64 [ %37, %42 ], [ %77, %76 ]
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %43) #5
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %45, i64 0, i32 0, i32 0, i32 0
  %48 = load %"struct.password_manager::PasswordForm"*, %"struct.password_manager::PasswordForm"** %47, align 8
  %49 = getelementptr inbounds %"struct.password_manager::PasswordForm", %"struct.password_manager::PasswordForm"* %48, i64 0, i32 1
  %50 = bitcast %"class.std::__1::basic_string"* %49 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %50, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %49, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = bitcast %"class.std::__1::basic_string"* %49 to i8*
  %57 = select i1 %53, i8* %55, i8* %56
  %58 = getelementptr inbounds %"struct.password_manager::PasswordForm", %"struct.password_manager::PasswordForm"* %48, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = zext i8 %52 to i64
  %61 = select i1 %53, i64 %59, i64 %60
  call void @_ZN4GURLC1EN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* nonnull %3, i8* %57, i64 %61) #5
  %62 = call zeroext i1 @_ZNK4GURL19SchemeIsHTTPOrHTTPSEv(%class.GURL* nonnull %3) #5
  call void @_ZN4GURLD1Ev(%class.GURL* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %43) #5
  br i1 %62, label %63, label %76

63:                                               ; preds = %44
  %64 = inttoptr i64 %46 to %"class.std::__1::unique_ptr"*
  %65 = bitcast %"class.std::__1::unique_ptr"* %45 to i64*
  %66 = load i64, i64* %65, align 8
  store %"struct.password_manager::PasswordForm"* null, %"struct.password_manager::PasswordForm"** %47, align 8
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %68 = load %"struct.password_manager::PasswordForm"*, %"struct.password_manager::PasswordForm"** %67, align 8
  %69 = inttoptr i64 %46 to i64*
  store i64 %66, i64* %69, align 8
  %70 = icmp eq %"struct.password_manager::PasswordForm"* %68, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %63
  call void @_ZN16password_manager12PasswordFormD1Ev(%"struct.password_manager::PasswordForm"* nonnull %68) #5
  %72 = bitcast %"struct.password_manager::PasswordForm"* %68 to i8*
  call void @_ZdlPv(i8* %72) #6
  br label %73

73:                                               ; preds = %71, %63
  %74 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 1
  %75 = ptrtoint %"class.std::__1::unique_ptr"* %74 to i64
  br label %76

76:                                               ; preds = %73, %44
  %77 = phi i64 [ %46, %44 ], [ %75, %73 ]
  %78 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %45, i64 1
  %79 = icmp eq %"class.std::__1::unique_ptr"* %78, %8
  br i1 %79, label %80, label %44

80:                                               ; preds = %76, %39, %35, %33
  %81 = phi i64 [ %37, %35 ], [ %34, %33 ], [ %37, %39 ], [ %77, %76 ]
  %82 = inttoptr i64 %81 to %"class.std::__1::unique_ptr"*
  %83 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %7, align 8
  %84 = icmp eq %"class.std::__1::unique_ptr"* %83, %82
  %85 = ptrtoint %"class.std::__1::unique_ptr"* %83 to i64
  br i1 %84, label %97, label %86

86:                                               ; preds = %80, %94
  %87 = phi %"class.std::__1::unique_ptr"* [ %88, %94 ], [ %83, %80 ]
  %88 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %87, i64 -1
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %88, i64 0, i32 0, i32 0, i32 0
  %90 = load %"struct.password_manager::PasswordForm"*, %"struct.password_manager::PasswordForm"** %89, align 8
  store %"struct.password_manager::PasswordForm"* null, %"struct.password_manager::PasswordForm"** %89, align 8
  %91 = icmp eq %"struct.password_manager::PasswordForm"* %90, null
  br i1 %91, label %94, label %92

92:                                               ; preds = %86
  call void @_ZN16password_manager12PasswordFormD1Ev(%"struct.password_manager::PasswordForm"* nonnull %90) #5
  %93 = bitcast %"struct.password_manager::PasswordForm"* %90 to i8*
  call void @_ZdlPv(i8* %93) #6
  br label %94

94:                                               ; preds = %92, %86
  %95 = icmp eq %"class.std::__1::unique_ptr"* %88, %82
  br i1 %95, label %96, label %86

96:                                               ; preds = %94
  store %"class.std::__1::unique_ptr"* %82, %"class.std::__1::unique_ptr"** %7, align 8
  br label %97

97:                                               ; preds = %80, %96
  %98 = phi i64 [ %85, %80 ], [ %81, %96 ]
  %99 = bitcast %"class.std::__1::vector"* %1 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector"* %0 to i64*
  store i64 %100, i64* %101, align 8
  %102 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %103 = bitcast %"class.std::__1::unique_ptr"** %102 to i64*
  store i64 %98, i64* %103, align 8
  %104 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %105 = bitcast %"class.std::__1::unique_ptr"** %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %108 = bitcast %"class.std::__1::unique_ptr"** %107 to i64*
  store i64 %106, i64* %108, align 8
  %109 = bitcast %"class.std::__1::vector"* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %109, i8 0, i64 24, i1 false) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4GURLC1EN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL*, i8*, i64) unnamed_addr #2

declare zeroext i1 @_ZNK4GURL19SchemeIsHTTPOrHTTPSEv(%class.GURL*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4GURLD1Ev(%class.GURL*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN16password_manager12PasswordFormD1Ev(%"struct.password_manager::PasswordForm"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
