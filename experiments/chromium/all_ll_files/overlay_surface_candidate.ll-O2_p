; ModuleID = '../../ui/ozone/public/overlay_surface_candidate.cc'
source_filename = "../../ui/ozone/public/overlay_surface_candidate.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::OverlaySurfaceCandidate" = type <{ i32, i32, i32, %"class.gfx::Size", %"class.gfx::RectF", %"class.gfx::RectF", %"class.absl::optional", i8, [7 x i8], %class.scoped_refptr, i32, i8, i8, [2 x i8] }>
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Rect" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%class.scoped_refptr = type { %"class.gfx::NativePixmap"* }
%"class.gfx::NativePixmap" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@_ZN2ui23OverlaySurfaceCandidateC1Ev = hidden unnamed_addr alias void (%"class.ui::OverlaySurfaceCandidate"*), void (%"class.ui::OverlaySurfaceCandidate"*)* @_ZN2ui23OverlaySurfaceCandidateC2Ev
@_ZN2ui23OverlaySurfaceCandidateC1ERKS0_ = hidden unnamed_addr alias void (%"class.ui::OverlaySurfaceCandidate"*, %"class.ui::OverlaySurfaceCandidate"*), void (%"class.ui::OverlaySurfaceCandidate"*, %"class.ui::OverlaySurfaceCandidate"*)* @_ZN2ui23OverlaySurfaceCandidateC2ERKS0_
@_ZN2ui23OverlaySurfaceCandidateD1Ev = hidden unnamed_addr alias void (%"class.ui::OverlaySurfaceCandidate"*), void (%"class.ui::OverlaySurfaceCandidate"*)* @_ZN2ui23OverlaySurfaceCandidateD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui23OverlaySurfaceCandidateC2Ev(%"class.ui::OverlaySurfaceCandidate"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 0
  store i32 1, i32* %2, align 8
  %3 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 1
  store i32 10, i32* %3, align 4
  %4 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 7
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 9, i32 0
  %7 = bitcast i32* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 45, i1 false)
  %8 = bitcast %"class.gfx::NativePixmap"** %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 14, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui23OverlaySurfaceCandidateC2ERKS0_(%"class.ui::OverlaySurfaceCandidate"* nocapture, %"class.ui::OverlaySurfaceCandidate"* nocapture readonly dereferenceable(96)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.ui::OverlaySurfaceCandidate"* %0 to i8*
  %4 = bitcast %"class.ui::OverlaySurfaceCandidate"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 73, i1 false)
  %5 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 9, i32 0
  %6 = load %"class.gfx::NativePixmap"*, %"class.gfx::NativePixmap"** %5, align 8
  %7 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 9, i32 0
  store %"class.gfx::NativePixmap"* %6, %"class.gfx::NativePixmap"** %7, align 8
  %8 = icmp eq %"class.gfx::NativePixmap"* %6, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.gfx::NativePixmap", %"class.gfx::NativePixmap"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %2, %9
  %13 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 10
  %14 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 10
  %15 = bitcast i32* %13 to i8*
  %16 = bitcast i32* %14 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 6, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui23OverlaySurfaceCandidateD2Ev(%"class.ui::OverlaySurfaceCandidate"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 9, i32 0
  %3 = load %"class.gfx::NativePixmap"*, %"class.gfx::NativePixmap"** %2, align 8
  %4 = icmp eq %"class.gfx::NativePixmap"* %3, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.gfx::NativePixmap", %"class.gfx::NativePixmap"* %3, i64 0, i32 1
  %7 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 -2
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to %"class.gfx::NativePixmap"*
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %11 to void (%"class.gfx::NativePixmap"*)***
  %14 = load void (%"class.gfx::NativePixmap"*)**, void (%"class.gfx::NativePixmap"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.gfx::NativePixmap"*)*, void (%"class.gfx::NativePixmap"*)** %14, i64 13
  %16 = load void (%"class.gfx::NativePixmap"*)*, void (%"class.gfx::NativePixmap"*)** %15, align 8
  tail call void %16(%"class.gfx::NativePixmap"* nonnull %12) #3
  br label %17

17:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(96) %"class.ui::OverlaySurfaceCandidate"* @_ZN2ui23OverlaySurfaceCandidateaSERKS0_(%"class.ui::OverlaySurfaceCandidate"* returned, %"class.ui::OverlaySurfaceCandidate"* nocapture readonly dereferenceable(96)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.ui::OverlaySurfaceCandidate"* %0 to i8*
  %4 = bitcast %"class.ui::OverlaySurfaceCandidate"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 73, i1 false)
  %5 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 9
  %6 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 9, i32 0
  %7 = load %"class.gfx::NativePixmap"*, %"class.gfx::NativePixmap"** %6, align 8
  %8 = icmp eq %"class.gfx::NativePixmap"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.gfx::NativePixmap", %"class.gfx::NativePixmap"* %7, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %2, %9
  %13 = ptrtoint %"class.gfx::NativePixmap"* %7 to i64
  %14 = bitcast %class.scoped_refptr* %5 to i64*
  %15 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %5, i64 0, i32 0
  %16 = load %"class.gfx::NativePixmap"*, %"class.gfx::NativePixmap"** %15, align 8
  store i64 %13, i64* %14, align 8
  %17 = icmp eq %"class.gfx::NativePixmap"* %16, null
  br i1 %17, label %30, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.gfx::NativePixmap", %"class.gfx::NativePixmap"* %16, i64 0, i32 1
  %20 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw sub i32* %20, i32 1 acq_rel
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %30

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %19, i64 -2
  %25 = bitcast %"class.base::RefCountedThreadSafe"* %24 to %"class.gfx::NativePixmap"*
  %26 = bitcast %"class.base::RefCountedThreadSafe"* %24 to void (%"class.gfx::NativePixmap"*)***
  %27 = load void (%"class.gfx::NativePixmap"*)**, void (%"class.gfx::NativePixmap"*)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.gfx::NativePixmap"*)*, void (%"class.gfx::NativePixmap"*)** %27, i64 13
  %29 = load void (%"class.gfx::NativePixmap"*)*, void (%"class.gfx::NativePixmap"*)** %28, align 8
  tail call void %29(%"class.gfx::NativePixmap"* nonnull %25) #3
  br label %30

30:                                               ; preds = %12, %18, %23
  %31 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 10
  %32 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 10
  %33 = bitcast i32* %31 to i8*
  %34 = bitcast i32* %32 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 6, i1 false)
  ret %"class.ui::OverlaySurfaceCandidate"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2ui23OverlaySurfaceCandidateltERKS0_(%"class.ui::OverlaySurfaceCandidate"*, %"class.ui::OverlaySurfaceCandidate"* dereferenceable(96)) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %"class.gfx::Rect"*
  %7 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 3, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 3, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 3, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #3
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %17 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 4
  %18 = tail call { i64, i64 } @_ZN3gfx13ToNearestRectERKNS_5RectFE(%"class.gfx::RectF"* dereferenceable(16) %17) #3
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %20 = extractvalue { i64, i64 } %18, 0
  store i64 %20, i64* %19, align 8
  %21 = extractvalue { i64, i64 } %18, 1
  store i64 %21, i64* %16, align 8
  %22 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #3
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %24 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 4
  %25 = tail call { i64, i64 } @_ZN3gfx13ToNearestRectERKNS_5RectFE(%"class.gfx::RectF"* dereferenceable(16) %24) #3
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %27 = extractvalue { i64, i64 } %25, 0
  store i64 %27, i64* %26, align 8
  %28 = extractvalue { i64, i64 } %25, 1
  store i64 %28, i64* %23, align 8
  %29 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 2
  %30 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 1
  %31 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 0
  %32 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 5
  %33 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 7
  %34 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %0, i64 0, i32 10
  %35 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 2
  %36 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 1
  %37 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 0
  %38 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 5
  %39 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 7
  %40 = getelementptr inbounds %"class.ui::OverlaySurfaceCandidate", %"class.ui::OverlaySurfaceCandidate"* %1, i64 0, i32 10
  %41 = load i32, i32* %29, align 4
  %42 = load i32, i32* %35, align 4
  %43 = icmp slt i32 %41, %42
  br i1 %43, label %84, label %44

44:                                               ; preds = %2
  %45 = icmp slt i32 %42, %41
  br i1 %45, label %84, label %46

46:                                               ; preds = %44
  %47 = load i32, i32* %30, align 4
  %48 = load i32, i32* %36, align 4
  %49 = icmp slt i32 %47, %48
  br i1 %49, label %84, label %50

50:                                               ; preds = %46
  %51 = icmp slt i32 %48, %47
  br i1 %51, label %84, label %52

52:                                               ; preds = %50
  %53 = call zeroext i1 @_ZNK3gfx4RectltERKS0_(%"class.gfx::Rect"* nonnull %4, %"class.gfx::Rect"* nonnull dereferenceable(16) %6) #3
  br i1 %53, label %84, label %54

54:                                               ; preds = %52
  %55 = call zeroext i1 @_ZNK3gfx4RectltERKS0_(%"class.gfx::Rect"* nonnull %6, %"class.gfx::Rect"* nonnull dereferenceable(16) %4) #3
  br i1 %55, label %84, label %56

56:                                               ; preds = %54
  %57 = icmp slt i32 %8, %12
  br i1 %57, label %84, label %58

58:                                               ; preds = %56
  %59 = icmp slt i32 %12, %8
  br i1 %59, label %84, label %60

60:                                               ; preds = %58
  %61 = icmp slt i32 %10, %14
  br i1 %61, label %84, label %62

62:                                               ; preds = %60
  %63 = icmp slt i32 %14, %10
  br i1 %63, label %84, label %64

64:                                               ; preds = %62
  %65 = load i32, i32* %31, align 4
  %66 = load i32, i32* %37, align 4
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %84, label %68

68:                                               ; preds = %64
  %69 = icmp slt i32 %66, %65
  br i1 %69, label %84, label %70

70:                                               ; preds = %68
  %71 = call zeroext i1 @_ZNK3gfx5RectFltERKS0_(%"class.gfx::RectF"* %32, %"class.gfx::RectF"* dereferenceable(16) %38) #3
  br i1 %71, label %84, label %72

72:                                               ; preds = %70
  %73 = call zeroext i1 @_ZNK3gfx5RectFltERKS0_(%"class.gfx::RectF"* %38, %"class.gfx::RectF"* dereferenceable(16) %32) #3
  br i1 %73, label %84, label %74

74:                                               ; preds = %72
  %75 = load i8, i8* %33, align 1, !range !2
  %76 = load i8, i8* %39, align 1, !range !2
  %77 = icmp ult i8 %75, %76
  br i1 %77, label %84, label %78

78:                                               ; preds = %74
  %79 = icmp ult i8 %76, %75
  br i1 %79, label %84, label %80

80:                                               ; preds = %78
  %81 = load i32, i32* %34, align 4
  %82 = load i32, i32* %40, align 4
  %83 = icmp ult i32 %81, %82
  br label %84

84:                                               ; preds = %80, %78, %74, %72, %70, %68, %64, %62, %60, %58, %56, %2, %44, %46, %50, %52, %54
  %85 = phi i1 [ true, %2 ], [ false, %44 ], [ true, %46 ], [ false, %50 ], [ true, %52 ], [ false, %54 ], [ true, %56 ], [ false, %58 ], [ true, %60 ], [ false, %62 ], [ true, %64 ], [ false, %68 ], [ true, %70 ], [ false, %72 ], [ %83, %80 ], [ true, %74 ], [ false, %78 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #3
  ret i1 %85
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare { i64, i64 } @_ZN3gfx13ToNearestRectERKNS_5RectFE(%"class.gfx::RectF"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK3gfx4RectltERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

declare zeroext i1 @_ZNK3gfx5RectFltERKS0_(%"class.gfx::RectF"*, %"class.gfx::RectF"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
