; ModuleID = '../../native_client/src/trusted/service_runtime/posix/sel_addrspace_posix.c'
source_filename = "../../native_client/src/trusted/service_runtime/posix/sel_addrspace_posix.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rlimit = type { i64, i64 }

@g_prereserved_sandbox_size = hidden local_unnamed_addr global i64 0, align 8
@.str = private unnamed_addr constant [44 x i8] c"NaClFindPrereservedSandboxMemory(, %#.8lx)\0A\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"NaClAddrSpaceBeforeAlloc: getrlimit failed: %s\00", align 1
@.str.2 = private unnamed_addr constant [74 x i8] c"NaClAddrSpaceBeforeAlloc: raising RLIMIT_AS from %#lx to hard limit %#lx\0A\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"NaClAddrSpaceBeforeAlloc: setrlimit failed: %s\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClFindPrereservedSandboxMemory(i8** nocapture, i64) local_unnamed_addr #0 {
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i64 %1) #5
  store i8* null, i8** %0, align 8
  %3 = load i64, i64* @g_prereserved_sandbox_size, align 8
  %4 = icmp eq i64 %3, %1
  %5 = zext i1 %4 to i32
  ret i32 %5
}

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClAddrSpaceBeforeAlloc(i64) local_unnamed_addr #0 {
  %2 = alloca %struct.rlimit, align 8
  %3 = bitcast %struct.rlimit* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #5
  %4 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %2, i64 0, i32 0
  %5 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %2, i64 0, i32 1
  %6 = bitcast %struct.rlimit* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  %7 = call i32 @getrlimit64(i32 9, %struct.rlimit* nonnull %2) #5
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %1
  %10 = tail call i32* @__errno_location() #6
  %11 = load i32, i32* %10, align 4
  %12 = call i8* @strerror(i32 %11) #5
  call void (i32, i8*, ...) @NaClLog(i32 -2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i8* %12) #5
  br label %25

13:                                               ; preds = %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = icmp ult i64 %14, %15
  br i1 %16, label %17, label %25

17:                                               ; preds = %13
  call void (i32, i8*, ...) @NaClLog(i32 -1, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.2, i64 0, i64 0), i64 %14, i64 %15) #5
  %18 = load i64, i64* %5, align 8
  store i64 %18, i64* %4, align 8
  %19 = call i32 @setrlimit64(i32 9, %struct.rlimit* nonnull %2) #5
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = tail call i32* @__errno_location() #6
  %23 = load i32, i32* %22, align 4
  %24 = call i8* @strerror(i32 %23) #5
  call void (i32, i8*, ...) @NaClLog(i32 -2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0), i8* %24) #5
  br label %25

25:                                               ; preds = %13, %21, %17, %9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare i32 @getrlimit64(i32, %struct.rlimit*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i8* @strerror(i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @setrlimit64(i32, %struct.rlimit*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
