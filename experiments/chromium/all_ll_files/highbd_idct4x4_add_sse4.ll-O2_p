; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_idct4x4_add_sse4.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_idct4x4_add_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct4x4_16_add_sse4_1(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [2 x <2 x i64>], align 16
  %6 = bitcast i32* %0 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 16
  %8 = getelementptr inbounds i32, i32* %0, i64 4
  %9 = bitcast i32* %8 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 16
  %11 = getelementptr inbounds i32, i32* %0, i64 8
  %12 = bitcast i32* %11 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 16
  %14 = getelementptr inbounds i32, i32* %0, i64 12
  %15 = bitcast i32* %14 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 16
  %17 = icmp eq i32 %3, 8
  br i1 %17, label %18, label %36

18:                                               ; preds = %4
  %19 = bitcast [2 x <2 x i64>]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #5
  %20 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %5, i64 0, i64 0
  %21 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %5, i64 0, i64 1
  %22 = bitcast <2 x i64> %7 to <4 x i32>
  %23 = bitcast <2 x i64> %10 to <4 x i32>
  %24 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %22, <4 x i32> %23) #5
  %25 = bitcast [2 x <2 x i64>]* %5 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 16
  %26 = bitcast <2 x i64> %13 to <4 x i32>
  %27 = bitcast <2 x i64> %16 to <4 x i32>
  %28 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %26, <4 x i32> %27) #5
  %29 = bitcast <2 x i64>* %21 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %29, align 16
  call void @idct4_sse2(<2 x i64>* nonnull %20) #5
  call void @idct4_sse2(<2 x i64>* nonnull %20) #5
  %30 = load <8 x i16>, <8 x i16>* %25, align 16
  %31 = add <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  store <8 x i16> %31, <8 x i16>* %25, align 16
  %32 = load <8 x i16>, <8 x i16>* %29, align 16
  %33 = add <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = ashr <8 x i16> %31, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %35 = ashr <8 x i16> %33, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #5
  br label %279

36:                                               ; preds = %4
  %37 = bitcast <2 x i64> %7 to <4 x i32>
  %38 = bitcast <2 x i64> %10 to <4 x i32>
  %39 = shufflevector <4 x i32> %37, <4 x i32> %38, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %40 = bitcast <4 x i32> %39 to <2 x i64>
  %41 = bitcast <2 x i64> %13 to <4 x i32>
  %42 = bitcast <2 x i64> %16 to <4 x i32>
  %43 = shufflevector <4 x i32> %41, <4 x i32> %42, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %44 = bitcast <4 x i32> %43 to <2 x i64>
  %45 = shufflevector <4 x i32> %37, <4 x i32> %38, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %46 = bitcast <4 x i32> %45 to <2 x i64>
  %47 = shufflevector <4 x i32> %41, <4 x i32> %42, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %48 = bitcast <4 x i32> %47 to <2 x i64>
  %49 = shufflevector <2 x i64> %40, <2 x i64> %44, <2 x i32> <i32 0, i32 2>
  %50 = shufflevector <2 x i64> %40, <2 x i64> %44, <2 x i32> <i32 1, i32 3>
  %51 = shufflevector <2 x i64> %46, <2 x i64> %48, <2 x i32> <i32 0, i32 2>
  %52 = shufflevector <2 x i64> %46, <2 x i64> %48, <2 x i32> <i32 1, i32 3>
  %53 = bitcast <2 x i64> %49 to <4 x i32>
  %54 = bitcast <2 x i64> %51 to <4 x i32>
  %55 = add <4 x i32> %54, %53
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %57 = bitcast <4 x i32> %56 to <2 x i64>
  %58 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = shl <2 x i64> %57, <i64 32, i64 32>
  %61 = ashr exact <2 x i64> %60, <i64 32, i64 32>
  %62 = mul nsw <2 x i64> %61, <i64 46340, i64 46340>
  %63 = shl <2 x i64> %59, <i64 32, i64 32>
  %64 = ashr exact <2 x i64> %63, <i64 32, i64 32>
  %65 = mul nsw <2 x i64> %64, <i64 46340, i64 46340>
  %66 = add nsw <2 x i64> %62, <i64 32768, i64 32768>
  %67 = bitcast <2 x i64> %66 to <16 x i8>
  %68 = shufflevector <16 x i8> %67, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %69 = add nsw <2 x i64> %65, <i64 32768, i64 32768>
  %70 = bitcast <2 x i64> %69 to <16 x i8>
  %71 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %72 = bitcast <16 x i8> %68 to <4 x i32>
  %73 = bitcast <16 x i8> %71 to <4 x i32>
  %74 = shufflevector <4 x i32> %72, <4 x i32> %73, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %75 = shufflevector <4 x i32> %72, <4 x i32> %73, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %76 = shufflevector <4 x i32> %74, <4 x i32> %75, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %77 = sub <4 x i32> %53, %54
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = shl <2 x i64> %79, <i64 32, i64 32>
  %83 = ashr exact <2 x i64> %82, <i64 32, i64 32>
  %84 = mul nsw <2 x i64> %83, <i64 46340, i64 46340>
  %85 = shl <2 x i64> %81, <i64 32, i64 32>
  %86 = ashr exact <2 x i64> %85, <i64 32, i64 32>
  %87 = mul nsw <2 x i64> %86, <i64 46340, i64 46340>
  %88 = add nsw <2 x i64> %84, <i64 32768, i64 32768>
  %89 = bitcast <2 x i64> %88 to <16 x i8>
  %90 = shufflevector <16 x i8> %89, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %91 = add nsw <2 x i64> %87, <i64 32768, i64 32768>
  %92 = bitcast <2 x i64> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %94 = bitcast <16 x i8> %90 to <4 x i32>
  %95 = bitcast <16 x i8> %93 to <4 x i32>
  %96 = shufflevector <4 x i32> %94, <4 x i32> %95, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %97 = shufflevector <4 x i32> %94, <4 x i32> %95, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %98 = shufflevector <4 x i32> %96, <4 x i32> %97, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %99 = bitcast <2 x i64> %50 to <4 x i32>
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %101 = bitcast <4 x i32> %100 to <2 x i64>
  %102 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = bitcast <2 x i64> %52 to <4 x i32>
  %105 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %106 = bitcast <4 x i32> %105 to <2 x i64>
  %107 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %108 = bitcast <4 x i32> %107 to <2 x i64>
  %109 = shl <2 x i64> %101, <i64 32, i64 32>
  %110 = ashr exact <2 x i64> %109, <i64 32, i64 32>
  %111 = mul nsw <2 x i64> %110, <i64 60548, i64 60548>
  %112 = shl <2 x i64> %103, <i64 32, i64 32>
  %113 = ashr exact <2 x i64> %112, <i64 32, i64 32>
  %114 = mul nsw <2 x i64> %113, <i64 60548, i64 60548>
  %115 = mul nsw <2 x i64> %110, <i64 25080, i64 25080>
  %116 = mul nsw <2 x i64> %113, <i64 25080, i64 25080>
  %117 = shl <2 x i64> %106, <i64 32, i64 32>
  %118 = ashr exact <2 x i64> %117, <i64 32, i64 32>
  %119 = mul nsw <2 x i64> %118, <i64 25080, i64 25080>
  %120 = shl <2 x i64> %108, <i64 32, i64 32>
  %121 = ashr exact <2 x i64> %120, <i64 32, i64 32>
  %122 = mul nsw <2 x i64> %121, <i64 25080, i64 25080>
  %123 = mul nsw <2 x i64> %118, <i64 -60548, i64 -60548>
  %124 = mul nsw <2 x i64> %121, <i64 -60548, i64 -60548>
  %125 = add nsw <2 x i64> %115, <i64 32768, i64 32768>
  %126 = add nsw <2 x i64> %125, %123
  %127 = bitcast <2 x i64> %126 to <16 x i8>
  %128 = shufflevector <16 x i8> %127, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %129 = add nsw <2 x i64> %116, <i64 32768, i64 32768>
  %130 = add nsw <2 x i64> %129, %124
  %131 = bitcast <2 x i64> %130 to <16 x i8>
  %132 = shufflevector <16 x i8> %131, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %133 = add nsw <2 x i64> %111, <i64 32768, i64 32768>
  %134 = add nsw <2 x i64> %133, %119
  %135 = bitcast <2 x i64> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %137 = add nsw <2 x i64> %114, <i64 32768, i64 32768>
  %138 = add nsw <2 x i64> %137, %122
  %139 = bitcast <2 x i64> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %141 = bitcast <16 x i8> %128 to <4 x i32>
  %142 = bitcast <16 x i8> %132 to <4 x i32>
  %143 = shufflevector <4 x i32> %141, <4 x i32> %142, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %144 = shufflevector <4 x i32> %141, <4 x i32> %142, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %145 = shufflevector <4 x i32> %143, <4 x i32> %144, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %146 = bitcast <16 x i8> %136 to <4 x i32>
  %147 = bitcast <16 x i8> %140 to <4 x i32>
  %148 = shufflevector <4 x i32> %146, <4 x i32> %147, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %149 = shufflevector <4 x i32> %146, <4 x i32> %147, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %150 = shufflevector <4 x i32> %148, <4 x i32> %149, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %151 = add <4 x i32> %150, %76
  %152 = add <4 x i32> %145, %98
  %153 = sub <4 x i32> %98, %145
  %154 = sub <4 x i32> %76, %150
  %155 = shufflevector <4 x i32> %151, <4 x i32> %152, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %156 = bitcast <4 x i32> %155 to <2 x i64>
  %157 = shufflevector <4 x i32> %153, <4 x i32> %154, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %158 = bitcast <4 x i32> %157 to <2 x i64>
  %159 = shufflevector <4 x i32> %151, <4 x i32> %152, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %160 = bitcast <4 x i32> %159 to <2 x i64>
  %161 = shufflevector <4 x i32> %153, <4 x i32> %154, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %162 = bitcast <4 x i32> %161 to <2 x i64>
  %163 = shufflevector <2 x i64> %156, <2 x i64> %158, <2 x i32> <i32 0, i32 2>
  %164 = shufflevector <2 x i64> %156, <2 x i64> %158, <2 x i32> <i32 1, i32 3>
  %165 = shufflevector <2 x i64> %160, <2 x i64> %162, <2 x i32> <i32 0, i32 2>
  %166 = shufflevector <2 x i64> %160, <2 x i64> %162, <2 x i32> <i32 1, i32 3>
  %167 = bitcast <2 x i64> %163 to <4 x i32>
  %168 = bitcast <2 x i64> %165 to <4 x i32>
  %169 = add <4 x i32> %168, %167
  %170 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %171 = bitcast <4 x i32> %170 to <2 x i64>
  %172 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %173 = bitcast <4 x i32> %172 to <2 x i64>
  %174 = shl <2 x i64> %171, <i64 32, i64 32>
  %175 = ashr exact <2 x i64> %174, <i64 32, i64 32>
  %176 = mul nsw <2 x i64> %175, <i64 46340, i64 46340>
  %177 = shl <2 x i64> %173, <i64 32, i64 32>
  %178 = ashr exact <2 x i64> %177, <i64 32, i64 32>
  %179 = mul nsw <2 x i64> %178, <i64 46340, i64 46340>
  %180 = add nsw <2 x i64> %176, <i64 32768, i64 32768>
  %181 = bitcast <2 x i64> %180 to <16 x i8>
  %182 = shufflevector <16 x i8> %181, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %183 = add nsw <2 x i64> %179, <i64 32768, i64 32768>
  %184 = bitcast <2 x i64> %183 to <16 x i8>
  %185 = shufflevector <16 x i8> %184, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %186 = bitcast <16 x i8> %182 to <4 x i32>
  %187 = bitcast <16 x i8> %185 to <4 x i32>
  %188 = shufflevector <4 x i32> %186, <4 x i32> %187, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %189 = shufflevector <4 x i32> %186, <4 x i32> %187, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %190 = shufflevector <4 x i32> %188, <4 x i32> %189, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %191 = sub <4 x i32> %167, %168
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %193 = bitcast <4 x i32> %192 to <2 x i64>
  %194 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %195 = bitcast <4 x i32> %194 to <2 x i64>
  %196 = shl <2 x i64> %193, <i64 32, i64 32>
  %197 = ashr exact <2 x i64> %196, <i64 32, i64 32>
  %198 = mul nsw <2 x i64> %197, <i64 46340, i64 46340>
  %199 = shl <2 x i64> %195, <i64 32, i64 32>
  %200 = ashr exact <2 x i64> %199, <i64 32, i64 32>
  %201 = mul nsw <2 x i64> %200, <i64 46340, i64 46340>
  %202 = add nsw <2 x i64> %198, <i64 32768, i64 32768>
  %203 = bitcast <2 x i64> %202 to <16 x i8>
  %204 = shufflevector <16 x i8> %203, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %205 = add nsw <2 x i64> %201, <i64 32768, i64 32768>
  %206 = bitcast <2 x i64> %205 to <16 x i8>
  %207 = shufflevector <16 x i8> %206, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %208 = bitcast <16 x i8> %204 to <4 x i32>
  %209 = bitcast <16 x i8> %207 to <4 x i32>
  %210 = shufflevector <4 x i32> %208, <4 x i32> %209, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %211 = shufflevector <4 x i32> %208, <4 x i32> %209, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %212 = shufflevector <4 x i32> %210, <4 x i32> %211, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %213 = bitcast <2 x i64> %164 to <4 x i32>
  %214 = shufflevector <4 x i32> %213, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %215 = bitcast <4 x i32> %214 to <2 x i64>
  %216 = shufflevector <4 x i32> %213, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %217 = bitcast <4 x i32> %216 to <2 x i64>
  %218 = bitcast <2 x i64> %166 to <4 x i32>
  %219 = shufflevector <4 x i32> %218, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %220 = bitcast <4 x i32> %219 to <2 x i64>
  %221 = shufflevector <4 x i32> %218, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %222 = bitcast <4 x i32> %221 to <2 x i64>
  %223 = shl <2 x i64> %215, <i64 32, i64 32>
  %224 = ashr exact <2 x i64> %223, <i64 32, i64 32>
  %225 = mul nsw <2 x i64> %224, <i64 60548, i64 60548>
  %226 = shl <2 x i64> %217, <i64 32, i64 32>
  %227 = ashr exact <2 x i64> %226, <i64 32, i64 32>
  %228 = mul nsw <2 x i64> %227, <i64 60548, i64 60548>
  %229 = mul nsw <2 x i64> %224, <i64 25080, i64 25080>
  %230 = mul nsw <2 x i64> %227, <i64 25080, i64 25080>
  %231 = shl <2 x i64> %220, <i64 32, i64 32>
  %232 = ashr exact <2 x i64> %231, <i64 32, i64 32>
  %233 = mul nsw <2 x i64> %232, <i64 25080, i64 25080>
  %234 = shl <2 x i64> %222, <i64 32, i64 32>
  %235 = ashr exact <2 x i64> %234, <i64 32, i64 32>
  %236 = mul nsw <2 x i64> %235, <i64 25080, i64 25080>
  %237 = mul nsw <2 x i64> %232, <i64 -60548, i64 -60548>
  %238 = mul nsw <2 x i64> %235, <i64 -60548, i64 -60548>
  %239 = add nsw <2 x i64> %229, <i64 32768, i64 32768>
  %240 = add nsw <2 x i64> %239, %237
  %241 = bitcast <2 x i64> %240 to <16 x i8>
  %242 = shufflevector <16 x i8> %241, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %243 = add nsw <2 x i64> %230, <i64 32768, i64 32768>
  %244 = add nsw <2 x i64> %243, %238
  %245 = bitcast <2 x i64> %244 to <16 x i8>
  %246 = shufflevector <16 x i8> %245, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %247 = add nsw <2 x i64> %225, <i64 32768, i64 32768>
  %248 = add nsw <2 x i64> %247, %233
  %249 = bitcast <2 x i64> %248 to <16 x i8>
  %250 = shufflevector <16 x i8> %249, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %251 = add nsw <2 x i64> %228, <i64 32768, i64 32768>
  %252 = add nsw <2 x i64> %251, %236
  %253 = bitcast <2 x i64> %252 to <16 x i8>
  %254 = shufflevector <16 x i8> %253, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %255 = bitcast <16 x i8> %242 to <4 x i32>
  %256 = bitcast <16 x i8> %246 to <4 x i32>
  %257 = shufflevector <4 x i32> %255, <4 x i32> %256, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %258 = shufflevector <4 x i32> %255, <4 x i32> %256, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %259 = shufflevector <4 x i32> %257, <4 x i32> %258, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %260 = bitcast <16 x i8> %250 to <4 x i32>
  %261 = bitcast <16 x i8> %254 to <4 x i32>
  %262 = shufflevector <4 x i32> %260, <4 x i32> %261, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %263 = shufflevector <4 x i32> %260, <4 x i32> %261, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %264 = shufflevector <4 x i32> %262, <4 x i32> %263, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %265 = add <4 x i32> %190, <i32 8, i32 8, i32 8, i32 8>
  %266 = add <4 x i32> %265, %264
  %267 = add <4 x i32> %212, <i32 8, i32 8, i32 8, i32 8>
  %268 = add <4 x i32> %267, %259
  %269 = ashr <4 x i32> %266, <i32 4, i32 4, i32 4, i32 4>
  %270 = ashr <4 x i32> %268, <i32 4, i32 4, i32 4, i32 4>
  %271 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %269, <4 x i32> %270) #5
  %272 = sub <4 x i32> <i32 8, i32 8, i32 8, i32 8>, %259
  %273 = add <4 x i32> %272, %212
  %274 = sub <4 x i32> <i32 8, i32 8, i32 8, i32 8>, %264
  %275 = add <4 x i32> %274, %190
  %276 = ashr <4 x i32> %273, <i32 4, i32 4, i32 4, i32 4>
  %277 = ashr <4 x i32> %275, <i32 4, i32 4, i32 4, i32 4>
  %278 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %276, <4 x i32> %277) #5
  br label %279

279:                                              ; preds = %36, %18
  %280 = phi <8 x i16> [ %35, %18 ], [ %278, %36 ]
  %281 = phi <8 x i16> [ %34, %18 ], [ %271, %36 ]
  %282 = bitcast i16* %1 to i64*
  %283 = load i64, i64* %282, align 1
  %284 = insertelement <2 x i64> undef, i64 %283, i32 0
  %285 = bitcast <2 x i64> %284 to <4 x float>
  %286 = sext i32 %2 to i64
  %287 = getelementptr inbounds i16, i16* %1, i64 %286
  %288 = bitcast i16* %287 to <2 x float>*
  %289 = load <2 x float>, <2 x float>* %288, align 1
  %290 = shufflevector <2 x float> %289, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %291 = shufflevector <4 x float> %285, <4 x float> %290, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %292 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #5
  %293 = add <8 x i16> %292, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %294 = bitcast <4 x float> %291 to <8 x i16>
  %295 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %294, <8 x i16> %281) #5
  %296 = icmp sgt <8 x i16> %295, zeroinitializer
  %297 = select <8 x i1> %296, <8 x i16> %295, <8 x i16> zeroinitializer
  %298 = icmp slt <8 x i16> %297, %293
  %299 = select <8 x i1> %298, <8 x i16> %297, <8 x i16> %293
  %300 = bitcast <8 x i16> %299 to <2 x i64>
  %301 = extractelement <2 x i64> %300, i32 0
  store i64 %301, i64* %282, align 1
  %302 = bitcast <8 x i16> %299 to <4 x float>
  %303 = shufflevector <4 x float> %302, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %303, <2 x float>* %288, align 1
  %304 = shl nsw i32 %2, 1
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i16, i16* %1, i64 %305
  %307 = bitcast i16* %306 to i64*
  %308 = load i64, i64* %307, align 1
  %309 = insertelement <2 x i64> undef, i64 %308, i32 0
  %310 = bitcast <2 x i64> %309 to <4 x float>
  %311 = getelementptr inbounds i16, i16* %306, i64 %286
  %312 = bitcast i16* %311 to <2 x float>*
  %313 = load <2 x float>, <2 x float>* %312, align 1
  %314 = shufflevector <2 x float> %313, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %315 = shufflevector <4 x float> %310, <4 x float> %314, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %316 = bitcast <4 x float> %315 to <8 x i16>
  %317 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %316, <8 x i16> %280) #5
  %318 = icmp sgt <8 x i16> %317, zeroinitializer
  %319 = select <8 x i1> %318, <8 x i16> %317, <8 x i16> zeroinitializer
  %320 = icmp slt <8 x i16> %319, %293
  %321 = select <8 x i1> %320, <8 x i16> %319, <8 x i16> %293
  %322 = bitcast <8 x i16> %321 to <2 x i64>
  %323 = extractelement <2 x i64> %322, i32 0
  store i64 %323, i64* %307, align 1
  %324 = bitcast <8 x i16> %321 to <4 x float>
  %325 = shufflevector <4 x float> %324, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %325, <2 x float>* %312, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @idct4_sse2(<2 x i64>*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16>, i32) #3

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
