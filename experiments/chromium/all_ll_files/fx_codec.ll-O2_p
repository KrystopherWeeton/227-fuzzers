; ModuleID = '../../third_party/pdfium/core/fxcodec/fx_codec.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/fx_codec.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.fxcodec::CFX_DIBAttribute" = type { i32, i32, i16, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, i8* }

$_ZNSt3__16__treeINS_12__value_typeIjPvEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_S2_EE = comdat any

@_ZN7fxcodec16CFX_DIBAttributeC1Ev = hidden unnamed_addr alias void (%"class.fxcodec::CFX_DIBAttribute"*), void (%"class.fxcodec::CFX_DIBAttribute"*)* @_ZN7fxcodec16CFX_DIBAttributeC2Ev
@_ZN7fxcodec16CFX_DIBAttributeD1Ev = hidden unnamed_addr alias void (%"class.fxcodec::CFX_DIBAttribute"*), void (%"class.fxcodec::CFX_DIBAttribute"*)* @_ZN7fxcodec16CFX_DIBAttributeD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec16CFX_DIBAttributeC2Ev(%"class.fxcodec::CFX_DIBAttribute"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CFX_DIBAttribute", %"class.fxcodec::CFX_DIBAttribute"* %0, i64 0, i32 0
  store i32 -1, i32* %2, align 8
  %3 = getelementptr inbounds %"class.fxcodec::CFX_DIBAttribute", %"class.fxcodec::CFX_DIBAttribute"* %0, i64 0, i32 1
  store i32 -1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.fxcodec::CFX_DIBAttribute", %"class.fxcodec::CFX_DIBAttribute"* %0, i64 0, i32 2
  store i16 0, i16* %4, align 8
  %5 = getelementptr inbounds %"class.fxcodec::CFX_DIBAttribute", %"class.fxcodec::CFX_DIBAttribute"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.fxcodec::CFX_DIBAttribute", %"class.fxcodec::CFX_DIBAttribute"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %"class.fxcodec::CFX_DIBAttribute", %"class.fxcodec::CFX_DIBAttribute"* %0, i64 0, i32 3, i32 0, i32 0
  %8 = bitcast %"class.std::__1::__tree_node_base"** %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #7
  store %"class.std::__1::__tree_end_node"* %6, %"class.std::__1::__tree_end_node"** %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec16CFX_DIBAttributeD2Ev(%"class.fxcodec::CFX_DIBAttribute"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CFX_DIBAttribute", %"class.fxcodec::CFX_DIBAttribute"* %0, i64 0, i32 3
  %3 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %3, align 8
  %5 = getelementptr inbounds %"class.fxcodec::CFX_DIBAttribute", %"class.fxcodec::CFX_DIBAttribute"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %6 = icmp eq %"class.std::__1::__tree_end_node"* %4, %5
  br i1 %6, label %7, label %11

7:                                                ; preds = %43, %1
  %8 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %2, i64 0, i32 0
  %9 = bitcast %"class.std::__1::__tree_end_node"* %5 to %"class.std::__1::__tree_node"**
  %10 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %9, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIjPvEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_S2_EE(%"class.std::__1::__tree"* %8, %"class.std::__1::__tree_node"* %10) #7
  ret void

11:                                               ; preds = %1, %43
  %12 = phi %"class.std::__1::__tree_end_node"* [ %44, %43 ], [ %4, %1 ]
  %13 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %12, i64 5
  %14 = bitcast %"class.std::__1::__tree_end_node"* %13 to i8**
  %15 = load i8*, i8** %14, align 8
  tail call void @_Z7FX_FreePv(i8* %15) #7
  %16 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %12, i64 1, i32 0
  %17 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %16, align 8
  %18 = icmp eq %"class.std::__1::__tree_node_base"* %17, null
  br i1 %18, label %19, label %27

19:                                               ; preds = %11
  %20 = bitcast %"class.std::__1::__tree_end_node"* %12 to %"class.std::__1::__tree_node_base"*
  %21 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %12, i64 2
  %22 = bitcast %"class.std::__1::__tree_end_node"* %21 to %"class.std::__1::__tree_end_node"**
  %23 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %22, align 8
  %24 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %23, i64 0, i32 0
  %25 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %24, align 8
  %26 = icmp eq %"class.std::__1::__tree_node_base"* %25, %20
  br i1 %26, label %43, label %34

27:                                               ; preds = %11, %27
  %28 = phi %"class.std::__1::__tree_node_base"* [ %30, %27 ], [ %17, %11 ]
  %29 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %28, i64 0, i32 0, i32 0
  %30 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %29, align 8
  %31 = icmp eq %"class.std::__1::__tree_node_base"* %30, null
  br i1 %31, label %32, label %27

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %28, i64 0, i32 0
  br label %43

34:                                               ; preds = %19, %34
  %35 = phi %"class.std::__1::__tree_end_node"** [ %38, %34 ], [ %22, %19 ]
  %36 = bitcast %"class.std::__1::__tree_end_node"** %35 to %"class.std::__1::__tree_node_base"**
  %37 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %36, align 8
  %38 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %37, i64 0, i32 2
  %39 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %38, align 8
  %40 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %39, i64 0, i32 0
  %41 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %40, align 8
  %42 = icmp eq %"class.std::__1::__tree_node_base"* %41, %37
  br i1 %42, label %43, label %34

43:                                               ; preds = %34, %19, %32
  %44 = phi %"class.std::__1::__tree_end_node"* [ %33, %32 ], [ %23, %19 ], [ %39, %34 ]
  %45 = icmp eq %"class.std::__1::__tree_end_node"* %44, %5
  br i1 %45, label %7, label %11
}

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7fxcodec10ReverseRGBEPhPKhi(i8*, i8* readonly, i32) local_unnamed_addr #2 {
  %4 = icmp eq i8* %0, %1
  %5 = icmp sgt i32 %2, 0
  br i1 %4, label %12, label %6

6:                                                ; preds = %3
  br i1 %5, label %7, label %88

7:                                                ; preds = %6
  %8 = and i32 %2, 1
  %9 = icmp eq i32 %2, 1
  br i1 %9, label %76, label %10

10:                                               ; preds = %7
  %11 = sub i32 %2, %8
  br label %40

12:                                               ; preds = %3
  br i1 %5, label %13, label %88

13:                                               ; preds = %12
  %14 = add i32 %2, -1
  %15 = and i32 %2, 3
  %16 = icmp ult i32 %14, 3
  br i1 %16, label %64, label %17

17:                                               ; preds = %13
  %18 = sub i32 %2, %15
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i8* [ %0, %17 ], [ %37, %19 ]
  %21 = phi i32 [ %18, %17 ], [ %38, %19 ]
  %22 = getelementptr inbounds i8, i8* %20, i64 2
  %23 = load i8, i8* %20, align 1
  %24 = load i8, i8* %22, align 1
  store i8 %24, i8* %20, align 1
  store i8 %23, i8* %22, align 1
  %25 = getelementptr inbounds i8, i8* %20, i64 3
  %26 = getelementptr inbounds i8, i8* %20, i64 5
  %27 = load i8, i8* %25, align 1
  %28 = load i8, i8* %26, align 1
  store i8 %28, i8* %25, align 1
  store i8 %27, i8* %26, align 1
  %29 = getelementptr inbounds i8, i8* %20, i64 6
  %30 = getelementptr inbounds i8, i8* %20, i64 8
  %31 = load i8, i8* %29, align 1
  %32 = load i8, i8* %30, align 1
  store i8 %32, i8* %29, align 1
  store i8 %31, i8* %30, align 1
  %33 = getelementptr inbounds i8, i8* %20, i64 9
  %34 = getelementptr inbounds i8, i8* %20, i64 11
  %35 = load i8, i8* %33, align 1
  %36 = load i8, i8* %34, align 1
  store i8 %36, i8* %33, align 1
  store i8 %35, i8* %34, align 1
  %37 = getelementptr inbounds i8, i8* %20, i64 12
  %38 = add i32 %21, -4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %64, label %19

40:                                               ; preds = %40, %10
  %41 = phi i8* [ %0, %10 ], [ %60, %40 ]
  %42 = phi i8* [ %1, %10 ], [ %61, %40 ]
  %43 = phi i32 [ %11, %10 ], [ %62, %40 ]
  %44 = load i8, i8* %42, align 1
  %45 = getelementptr inbounds i8, i8* %41, i64 2
  store i8 %44, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %42, i64 1
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %41, i64 1
  store i8 %47, i8* %48, align 1
  %49 = getelementptr inbounds i8, i8* %42, i64 2
  %50 = load i8, i8* %49, align 1
  store i8 %50, i8* %41, align 1
  %51 = getelementptr inbounds i8, i8* %41, i64 3
  %52 = getelementptr inbounds i8, i8* %42, i64 3
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr inbounds i8, i8* %41, i64 5
  store i8 %53, i8* %54, align 1
  %55 = getelementptr inbounds i8, i8* %42, i64 4
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %41, i64 4
  store i8 %56, i8* %57, align 1
  %58 = getelementptr inbounds i8, i8* %42, i64 5
  %59 = load i8, i8* %58, align 1
  store i8 %59, i8* %51, align 1
  %60 = getelementptr inbounds i8, i8* %41, i64 6
  %61 = getelementptr inbounds i8, i8* %42, i64 6
  %62 = add i32 %43, -2
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %76, label %40

64:                                               ; preds = %19, %13
  %65 = phi i8* [ %0, %13 ], [ %37, %19 ]
  %66 = icmp eq i32 %15, 0
  br i1 %66, label %88, label %67

67:                                               ; preds = %64, %67
  %68 = phi i8* [ %73, %67 ], [ %65, %64 ]
  %69 = phi i32 [ %74, %67 ], [ %15, %64 ]
  %70 = getelementptr inbounds i8, i8* %68, i64 2
  %71 = load i8, i8* %68, align 1
  %72 = load i8, i8* %70, align 1
  store i8 %72, i8* %68, align 1
  store i8 %71, i8* %70, align 1
  %73 = getelementptr inbounds i8, i8* %68, i64 3
  %74 = add i32 %69, -1
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %88, label %67, !llvm.loop !2

76:                                               ; preds = %40, %7
  %77 = phi i8* [ %0, %7 ], [ %60, %40 ]
  %78 = phi i8* [ %1, %7 ], [ %61, %40 ]
  %79 = icmp eq i32 %8, 0
  br i1 %79, label %88, label %80

80:                                               ; preds = %76
  %81 = load i8, i8* %78, align 1
  %82 = getelementptr inbounds i8, i8* %77, i64 2
  store i8 %81, i8* %82, align 1
  %83 = getelementptr inbounds i8, i8* %78, i64 1
  %84 = load i8, i8* %83, align 1
  %85 = getelementptr inbounds i8, i8* %77, i64 1
  store i8 %84, i8* %85, align 1
  %86 = getelementptr inbounds i8, i8* %78, i64 2
  %87 = load i8, i8* %86, align 1
  store i8 %87, i8* %77, align 1
  br label %88

88:                                               ; preds = %80, %76, %64, %67, %6, %12
  ret void
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @_ZN7fxcodec15CalculatePitch8Ejji(i32, i32, i32) local_unnamed_addr #3 {
  %4 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %0, i32 %1) #7
  %5 = extractvalue { i32, i1 } %4, 1
  br i1 %5, label %29, label %6

6:                                                ; preds = %3
  %7 = extractvalue { i32, i1 } %4, 0
  %8 = icmp slt i32 %2, 0
  %9 = sub i32 0, %2
  %10 = select i1 %8, i32 %9, i32 %2
  %11 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %10, i32 %7) #7
  %12 = extractvalue { i32, i1 } %11, 1
  %13 = extractvalue { i32, i1 } %11, 0
  %14 = icmp ne i32 %13, 0
  %15 = and i1 %8, %14
  %16 = or i1 %12, %15
  br i1 %16, label %29, label %17

17:                                               ; preds = %6
  %18 = sub i32 0, %13
  %19 = select i1 %8, i32 %18, i32 %13
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 7) #7
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  %26 = zext i33 %23 to i64
  %27 = shl nuw nsw i64 %26, 29
  %28 = and i64 %27, 2305843004918726656
  br i1 %25, label %29, label %30

29:                                               ; preds = %3, %6, %17
  br label %30

30:                                               ; preds = %17, %29
  %31 = phi i64 [ 0, %29 ], [ 1, %17 ]
  %32 = phi i64 [ 0, %29 ], [ %28, %17 ]
  %33 = or i64 %32, %31
  ret i64 %33
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @_ZN7fxcodec16CalculatePitch32Eii(i32, i32) local_unnamed_addr #3 {
  %3 = icmp slt i32 %0, 0
  br i1 %3, label %30, label %4

4:                                                ; preds = %2
  %5 = icmp slt i32 %1, 0
  %6 = sub i32 0, %1
  %7 = select i1 %5, i32 %6, i32 %1
  %8 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %7, i32 %0) #7
  %9 = extractvalue { i32, i1 } %8, 1
  %10 = extractvalue { i32, i1 } %8, 0
  %11 = icmp ne i32 %10, 0
  %12 = and i1 %5, %11
  %13 = or i1 %9, %12
  br i1 %13, label %30, label %14

14:                                               ; preds = %4
  %15 = sub i32 0, %10
  %16 = select i1 %5, i32 %15, i32 %10
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 31) #7
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  %23 = lshr i33 %20, 3
  %24 = and i33 %23, 536870908
  %25 = zext i33 %24 to i64
  %26 = shl nuw nsw i64 %25, 32
  %27 = select i1 %22, i64 0, i64 %26
  %28 = xor i1 %22, true
  %29 = zext i1 %28 to i64
  br label %30

30:                                               ; preds = %14, %2, %4
  %31 = phi i64 [ 0, %4 ], [ 0, %2 ], [ %27, %14 ]
  %32 = phi i64 [ 0, %4 ], [ 0, %2 ], [ %29, %14 ]
  %33 = or i64 %32, %31
  ret i64 %33
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #4

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12__value_typeIjPvEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_S2_EE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIjPvEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_S2_EE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #7
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIjPvEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_S2_EE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #7
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #8
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
