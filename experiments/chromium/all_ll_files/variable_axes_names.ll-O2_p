; ModuleID = '../../third_party/blink/renderer/platform/fonts/opentype/variable_axes_names.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/opentype/variable_axes_names.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"struct.blink::VariationAxis"*, i32, i32 }
%"struct.blink::VariationAxis" = type { %"class.WTF::String", %"class.WTF::String", double, double, double }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.1" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.1" }>
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.6" }
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i8 }
%class.sk_sp.12 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::array" = type { [4 x i8] }
%class.SkStreamAsset = type { %class.SkStreamSeekable }
%class.SkStreamSeekable = type { %class.SkStreamRewindable }
%class.SkStreamRewindable = type { %class.SkStream }
%class.SkStream = type { i32 (...)** }
%struct.hb_blob_t = type opaque
%struct.hb_face_t = type opaque
%struct.hb_ot_var_axis_info_t = type { i32, i32, i32, i32, float, float, float, i32 }
%struct.hb_language_impl_t = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF6VectorIN5blink13VariationAxisELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink13VariationAxisELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13VariationAxisEEEmm = comdat any

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13VariationAxisEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::VariationAxis]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17VariableAxesNames16GetVariationAxesE5sk_spI10SkTypefaceE(%"class.WTF::Vector"* noalias sret, %class.sk_sp* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.sk_sp.12, align 8
  %4 = alloca i32, align 4
  %5 = alloca %"struct.blink::VariationAxis", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = alloca i32, align 4
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to %"struct.std::__1::array"*
  %11 = alloca %"class.WTF::String", align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %15 = bitcast %"class.WTF::Vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false) #9
  %16 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %17 = load %class.SkTypeface*, %class.SkTypeface** %16, align 8
  %18 = tail call %class.SkStreamAsset* @_ZNK10SkTypeface10openStreamEPi(%class.SkTypeface* %17, i32* null) #9
  %19 = icmp eq %class.SkStreamAsset* %18, null
  br i1 %19, label %316, label %20

20:                                               ; preds = %2
  %21 = bitcast %class.sk_sp.12* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #9
  %22 = getelementptr inbounds %class.sk_sp.12, %class.sk_sp.12* %3, i64 0, i32 0
  store %class.SkData* inttoptr (i64 -6148914691236517206 to %class.SkData*), %class.SkData** %22, align 8
  %23 = getelementptr inbounds %class.SkStreamAsset, %class.SkStreamAsset* %18, i64 0, i32 0, i32 0, i32 0
  %24 = bitcast %class.SkStreamAsset* %18 to i64 (%class.SkStreamAsset*)***
  %25 = load i64 (%class.SkStreamAsset*)**, i64 (%class.SkStreamAsset*)*** %24, align 8
  %26 = getelementptr inbounds i64 (%class.SkStreamAsset*)*, i64 (%class.SkStreamAsset*)** %25, i64 11
  %27 = load i64 (%class.SkStreamAsset*)*, i64 (%class.SkStreamAsset*)** %26, align 8
  %28 = tail call i64 %27(%class.SkStreamAsset* nonnull %18) #9
  call void @_ZN6SkData14MakeFromStreamEP8SkStreamm(%class.sk_sp.12* nonnull sret %3, %class.SkStream* %23, i64 %28) #9
  %29 = load %class.SkData*, %class.SkData** %22, align 8
  %30 = getelementptr inbounds %class.SkData, %class.SkData* %29, i64 0, i32 3
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %class.SkData, %class.SkData* %29, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = trunc i64 %33 to i32
  %35 = call %struct.hb_blob_t* @hb_blob_create(i8* %31, i32 %34, i32 1, i8* null, void (i8*)* null) #9
  %36 = call %struct.hb_face_t* @hb_face_create(%struct.hb_blob_t* %35, i32 0) #9
  %37 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #9
  store i32 -1431655766, i32* %4, align 4
  %38 = call i32 @hb_ot_var_get_axis_count(%struct.hb_face_t* %36) #9
  store i32 %38, i32* %4, align 4
  %39 = zext i32 %38 to i64
  %40 = shl nuw nsw i64 %39, 5
  %41 = call i8* @_Znam(i64 %40) #10
  %42 = bitcast i8* %41 to %struct.hb_ot_var_axis_info_t*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %41, i8 0, i64 %40, i1 false) #9
  %43 = call i32 @hb_ot_var_get_axis_infos(%struct.hb_face_t* %36, i32 0, i32* nonnull %4, %struct.hb_ot_var_axis_info_t* nonnull %42) #9
  %44 = load i32, i32* %4, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %73, label %46

46:                                               ; preds = %20
  %47 = bitcast %"struct.blink::VariationAxis"* %5 to i8*
  %48 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %5, i64 0, i32 0, i32 0, i32 0
  %49 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %5, i64 0, i32 1
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 0, i32 0, i32 0
  %51 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %5, i64 0, i32 2
  %52 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %5, i64 0, i32 4
  %53 = bitcast %"class.WTF::String"* %6 to i8*
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %55 = bitcast %"class.WTF::String"* %6 to i64*
  %56 = bitcast %"class.WTF::String"* %49 to i64*
  %57 = bitcast i32* %7 to i8*
  %58 = bitcast %"class.WTF::String"* %8 to i8*
  %59 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  %60 = bitcast %"class.WTF::String"* %8 to i64*
  %61 = bitcast i32* %9 to i8*
  %62 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %10, i64 0, i32 0, i64 1
  %63 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %10, i64 0, i32 0, i64 2
  %64 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %10, i64 0, i32 0, i64 3
  %65 = bitcast %"class.WTF::String"* %11 to i8*
  %66 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  %67 = bitcast %"class.WTF::String"* %11 to i64*
  %68 = bitcast %"struct.blink::VariationAxis"* %5 to i64*
  %69 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %5, i64 0, i32 1, i32 0, i32 0
  %70 = bitcast double* %51 to i8*
  %71 = bitcast double* %51 to i8*
  %72 = bitcast double* %51 to <2 x double>*
  br label %88

73:                                               ; preds = %306, %20
  call void @_ZdaPv(i8* nonnull %41) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #9
  %74 = icmp eq %struct.hb_face_t* %36, null
  br i1 %74, label %76, label %75

75:                                               ; preds = %73
  call void @hb_face_destroy(%struct.hb_face_t* nonnull %36) #9
  br label %76

76:                                               ; preds = %73, %75
  %77 = icmp eq %struct.hb_blob_t* %35, null
  br i1 %77, label %79, label %78

78:                                               ; preds = %76
  call void @hb_blob_destroy(%struct.hb_blob_t* nonnull %35) #9
  br label %79

79:                                               ; preds = %76, %78
  %80 = load %class.SkData*, %class.SkData** %22, align 8
  %81 = icmp eq %class.SkData* %80, null
  br i1 %81, label %311, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds %class.SkData, %class.SkData* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = atomicrmw add i32* %83, i32 -1 acq_rel
  %85 = icmp eq i32 %84, 1
  br i1 %85, label %86, label %311

86:                                               ; preds = %82
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %80) #9
  %87 = bitcast %class.SkData* %80 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %87) #9
  br label %311

88:                                               ; preds = %46, %306
  %89 = phi i64 [ 0, %46 ], [ %307, %306 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %47) #9
  call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 -1, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 0, i64 16, i1 false) #9
  %90 = getelementptr inbounds %struct.hb_ot_var_axis_info_t, %struct.hb_ot_var_axis_info_t* %42, i64 %89, i32 2
  %91 = load i32, i32* %90, align 4
  %92 = call i32 @hb_ot_name_get_utf16(%struct.hb_face_t* %36, i32 %91, %struct.hb_language_impl_t* null, i32* null, i16* null) #9
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0) #9
  %93 = load i64, i64* %55, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %54, align 8
  %94 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %93, i64* %56, align 8
  %95 = icmp eq %"class.WTF::StringImpl"* %94, null
  br i1 %95, label %125, label %96

96:                                               ; preds = %88
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load atomic i32, i32* %97 monotonic, align 4
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 0
  %102 = load i32, i32* %101, align 4
  br i1 %100, label %103, label %105

103:                                              ; preds = %96
  %104 = add i32 %102, -1
  store i32 %104, i32* %101, align 4
  br label %105

105:                                              ; preds = %103, %96
  %106 = phi i32 [ %104, %103 ], [ %102, %96 ]
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %105
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %94) #9
  br label %109

109:                                              ; preds = %105, %108
  %110 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %111 = icmp eq %"class.WTF::StringImpl"* %110, null
  br i1 %111, label %125, label %112

112:                                              ; preds = %109
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = and i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 0
  %118 = load i32, i32* %117, align 4
  br i1 %116, label %119, label %121

119:                                              ; preds = %112
  %120 = add i32 %118, -1
  store i32 %120, i32* %117, align 4
  br label %121

121:                                              ; preds = %119, %112
  %122 = phi i32 [ %120, %119 ], [ %118, %112 ]
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %121
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %110) #9
  br label %125

125:                                              ; preds = %88, %109, %121, %124
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #9
  %126 = icmp eq i32 %92, 0
  br i1 %126, label %168, label %127

127:                                              ; preds = %125
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %57) #9
  %128 = add i32 %92, 1
  store i32 %128, i32* %7, align 4
  %129 = zext i32 %128 to i64
  %130 = shl nuw nsw i64 %129, 1
  %131 = call i8* @_Znam(i64 %130) #10
  %132 = bitcast i8* %131 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %131, i8 0, i64 %130, i1 false) #9
  %133 = load i32, i32* %90, align 4
  %134 = call i32 @hb_ot_name_get_utf16(%struct.hb_face_t* %36, i32 %133, %struct.hb_language_impl_t* null, i32* nonnull %7, i16* nonnull %132) #9
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #9
  call void @_ZN3WTF6StringC1EPKDs(%"class.WTF::String"* nonnull %8, i16* nonnull %132) #9
  %135 = load i64, i64* %60, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %59, align 8
  %136 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %135, i64* %56, align 8
  %137 = icmp eq %"class.WTF::StringImpl"* %136, null
  br i1 %137, label %167, label %138

138:                                              ; preds = %127
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %140 = load atomic i32, i32* %139 monotonic, align 4
  %141 = and i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 0
  %144 = load i32, i32* %143, align 4
  br i1 %142, label %145, label %147

145:                                              ; preds = %138
  %146 = add i32 %144, -1
  store i32 %146, i32* %143, align 4
  br label %147

147:                                              ; preds = %145, %138
  %148 = phi i32 [ %146, %145 ], [ %144, %138 ]
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %151

150:                                              ; preds = %147
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %136) #9
  br label %151

151:                                              ; preds = %147, %150
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %151
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #9
  br label %167

167:                                              ; preds = %127, %151, %163, %166
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #9
  call void @_ZdaPv(i8* nonnull %131) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %57) #9
  br label %168

168:                                              ; preds = %125, %167
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %61) #9
  %169 = getelementptr inbounds %struct.hb_ot_var_axis_info_t, %struct.hb_ot_var_axis_info_t* %42, i64 %89, i32 1
  %170 = load i32, i32* %169, align 4
  %171 = lshr i32 %170, 24
  %172 = trunc i32 %171 to i8
  store i8 %172, i8* %61, align 4
  %173 = lshr i32 %170, 16
  %174 = trunc i32 %173 to i8
  store i8 %174, i8* %62, align 1
  %175 = lshr i32 %170, 8
  %176 = trunc i32 %175 to i8
  store i8 %176, i8* %63, align 2
  %177 = trunc i32 %170 to i8
  store i8 %177, i8* %64, align 1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %65) #9
  call void @_ZN3WTF6StringC1EPKcm(%"class.WTF::String"* nonnull %11, i8* nonnull %61, i64 4) #9
  %178 = load i64, i64* %67, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %66, align 8
  %179 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  store i64 %178, i64* %68, align 8
  %180 = icmp eq %"class.WTF::StringImpl"* %179, null
  br i1 %180, label %210, label %181

181:                                              ; preds = %168
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %183 = load atomic i32, i32* %182 monotonic, align 4
  %184 = and i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 0
  %187 = load i32, i32* %186, align 4
  br i1 %185, label %188, label %190

188:                                              ; preds = %181
  %189 = add i32 %187, -1
  store i32 %189, i32* %186, align 4
  br label %190

190:                                              ; preds = %188, %181
  %191 = phi i32 [ %189, %188 ], [ %187, %181 ]
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %194

193:                                              ; preds = %190
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %179) #9
  br label %194

194:                                              ; preds = %190, %193
  %195 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8
  %196 = icmp eq %"class.WTF::StringImpl"* %195, null
  br i1 %196, label %210, label %197

197:                                              ; preds = %194
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %199 = load atomic i32, i32* %198 monotonic, align 4
  %200 = and i32 %199, 2
  %201 = icmp eq i32 %200, 0
  %202 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 0
  %203 = load i32, i32* %202, align 4
  br i1 %201, label %204, label %206

204:                                              ; preds = %197
  %205 = add i32 %203, -1
  store i32 %205, i32* %202, align 4
  br label %206

206:                                              ; preds = %204, %197
  %207 = phi i32 [ %205, %204 ], [ %203, %197 ]
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %210

209:                                              ; preds = %206
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %195) #9
  br label %210

210:                                              ; preds = %168, %194, %206, %209
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65) #9
  %211 = getelementptr inbounds %struct.hb_ot_var_axis_info_t, %struct.hb_ot_var_axis_info_t* %42, i64 %89, i32 4
  %212 = load float, float* %211, align 4
  %213 = getelementptr inbounds %struct.hb_ot_var_axis_info_t, %struct.hb_ot_var_axis_info_t* %42, i64 %89, i32 6
  %214 = load float, float* %213, align 4
  %215 = insertelement <2 x float> undef, float %212, i32 0
  %216 = insertelement <2 x float> %215, float %214, i32 1
  %217 = fpext <2 x float> %216 to <2 x double>
  store <2 x double> %217, <2 x double>* %72, align 8
  %218 = getelementptr inbounds %struct.hb_ot_var_axis_info_t, %struct.hb_ot_var_axis_info_t* %42, i64 %89, i32 5
  %219 = load float, float* %218, align 4
  %220 = fpext float %219 to double
  store double %220, double* %52, align 8
  %221 = load i32, i32* %14, align 4
  %222 = load i32, i32* %13, align 8
  %223 = icmp eq i32 %221, %222
  br i1 %223, label %273, label %224, !prof !2

224:                                              ; preds = %210
  %225 = load %"struct.blink::VariationAxis"*, %"struct.blink::VariationAxis"** %12, align 8
  %226 = zext i32 %221 to i64
  %227 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  %228 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %225, i64 %226, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %227, %"class.WTF::StringImpl"** %228, align 8
  %229 = icmp eq %"class.WTF::StringImpl"* %227, null
  br i1 %229, label %247, label %230

230:                                              ; preds = %224
  %231 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %227, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %232 = load atomic i32, i32* %231 monotonic, align 4
  %233 = and i32 %232, 2
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %235, label %247

235:                                              ; preds = %230
  %236 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %227, i64 0, i32 0
  %237 = load i32, i32* %236, align 4
  %238 = zext i32 %237 to i33
  %239 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %238, i33 1) #9
  %240 = extractvalue { i33, i1 } %239, 1
  %241 = extractvalue { i33, i1 } %239, 0
  %242 = icmp slt i33 %241, 0
  %243 = or i1 %240, %242
  br i1 %243, label %244, label %245, !prof !2

244:                                              ; preds = %235
  call void @llvm.trap() #9
  unreachable

245:                                              ; preds = %235
  %246 = trunc i33 %241 to i32
  store i32 %246, i32* %236, align 4
  br label %247

247:                                              ; preds = %245, %230, %224
  %248 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %249 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %225, i64 %226, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %248, %"class.WTF::StringImpl"** %249, align 8
  %250 = icmp eq %"class.WTF::StringImpl"* %248, null
  br i1 %250, label %268, label %251

251:                                              ; preds = %247
  %252 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %248, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %253 = load atomic i32, i32* %252 monotonic, align 4
  %254 = and i32 %253, 2
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %256, label %268

256:                                              ; preds = %251
  %257 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %248, i64 0, i32 0
  %258 = load i32, i32* %257, align 4
  %259 = zext i32 %258 to i33
  %260 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %259, i33 1) #9
  %261 = extractvalue { i33, i1 } %260, 1
  %262 = extractvalue { i33, i1 } %260, 0
  %263 = icmp slt i33 %262, 0
  %264 = or i1 %261, %263
  br i1 %264, label %265, label %266, !prof !2

265:                                              ; preds = %256
  call void @llvm.trap() #9
  unreachable

266:                                              ; preds = %256
  %267 = trunc i33 %262 to i32
  store i32 %267, i32* %257, align 4
  br label %268

268:                                              ; preds = %266, %251, %247
  %269 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %225, i64 %226, i32 2
  %270 = bitcast double* %269 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %270, i8* align 8 %70, i64 24, i1 false) #9
  %271 = load i32, i32* %14, align 4
  %272 = add i32 %271, 1
  store i32 %272, i32* %14, align 4
  br label %274

273:                                              ; preds = %210
  call void @_ZN3WTF6VectorIN5blink13VariationAxisELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"* %0, %"struct.blink::VariationAxis"* nonnull dereferenceable(40) %5) #9
  br label %274

274:                                              ; preds = %268, %273
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %61) #9
  %275 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %276 = icmp eq %"class.WTF::StringImpl"* %275, null
  br i1 %276, label %290, label %277

277:                                              ; preds = %274
  %278 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %275, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %279 = load atomic i32, i32* %278 monotonic, align 4
  %280 = and i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %275, i64 0, i32 0
  %283 = load i32, i32* %282, align 4
  br i1 %281, label %284, label %286

284:                                              ; preds = %277
  %285 = add i32 %283, -1
  store i32 %285, i32* %282, align 4
  br label %286

286:                                              ; preds = %284, %277
  %287 = phi i32 [ %285, %284 ], [ %283, %277 ]
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %290

289:                                              ; preds = %286
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %275) #9
  br label %290

290:                                              ; preds = %289, %286, %274
  %291 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  %292 = icmp eq %"class.WTF::StringImpl"* %291, null
  br i1 %292, label %306, label %293

293:                                              ; preds = %290
  %294 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %295 = load atomic i32, i32* %294 monotonic, align 4
  %296 = and i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 0, i32 0
  %299 = load i32, i32* %298, align 4
  br i1 %297, label %300, label %302

300:                                              ; preds = %293
  %301 = add i32 %299, -1
  store i32 %301, i32* %298, align 4
  br label %302

302:                                              ; preds = %300, %293
  %303 = phi i32 [ %301, %300 ], [ %299, %293 ]
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %306

305:                                              ; preds = %302
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %291) #9
  br label %306

306:                                              ; preds = %290, %302, %305
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %47) #9
  %307 = add nuw nsw i64 %89, 1
  %308 = load i32, i32* %4, align 4
  %309 = zext i32 %308 to i64
  %310 = icmp ult i64 %307, %309
  br i1 %310, label %88, label %73

311:                                              ; preds = %86, %82, %79
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #9
  %312 = bitcast %class.SkStreamAsset* %18 to void (%class.SkStreamAsset*)***
  %313 = load void (%class.SkStreamAsset*)**, void (%class.SkStreamAsset*)*** %312, align 8
  %314 = getelementptr inbounds void (%class.SkStreamAsset*)*, void (%class.SkStreamAsset*)** %313, i64 1
  %315 = load void (%class.SkStreamAsset*)*, void (%class.SkStreamAsset*)** %314, align 8
  call void %315(%class.SkStreamAsset* nonnull %18) #9
  br label %316

316:                                              ; preds = %2, %311
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %class.SkStreamAsset* @_ZNK10SkTypeface10openStreamEPi(%class.SkTypeface*, i32*) local_unnamed_addr #2

declare void @_ZN6SkData14MakeFromStreamEP8SkStreamm(%class.sk_sp.12* sret, %class.SkStream*, i64) local_unnamed_addr #2

declare %struct.hb_blob_t* @hb_blob_create(i8*, i32, i32, i8*, void (i8*)*) local_unnamed_addr #2

declare %struct.hb_face_t* @hb_face_create(%struct.hb_blob_t*, i32) local_unnamed_addr #2

declare i32 @hb_ot_var_get_axis_count(%struct.hb_face_t*) local_unnamed_addr #2

declare i32 @hb_ot_var_get_axis_infos(%struct.hb_face_t*, i32, i32*, %struct.hb_ot_var_axis_info_t*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @hb_ot_name_get_utf16(%struct.hb_face_t*, i32, %struct.hb_language_impl_t*, i32*, i16*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3WTF6StringC1EPKDs(%"class.WTF::String"*, i16*) unnamed_addr #2

declare void @_ZN3WTF6StringC1EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6SkDataD1Ev(%class.SkData*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN6SkDatadlEPv(i8*) local_unnamed_addr #3

declare void @hb_blob_destroy(%struct.hb_blob_t*) local_unnamed_addr #2

declare void @hb_face_destroy(%struct.hb_face_t*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink13VariationAxisELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"*, %"struct.blink::VariationAxis"* dereferenceable(40)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"struct.blink::VariationAxis"*, %"struct.blink::VariationAxis"** %6, align 8
  %8 = icmp ugt %"struct.blink::VariationAxis"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %7, i64 %10
  %12 = icmp ugt %"struct.blink::VariationAxis"* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %"struct.blink::VariationAxis"* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13VariationAxisEEEmm(i64 %27) #9
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13VariationAxisEEEPKcv, i64 0, i64 0)) #9
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = udiv i64 %28, 40
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %"struct.blink::VariationAxis"*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorIN5blink13VariationAxisELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %22) #9
  %36 = load %"struct.blink::VariationAxis"*, %"struct.blink::VariationAxis"** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %"struct.blink::VariationAxis"* %1 to i64
  %39 = ptrtoint %"struct.blink::VariationAxis"* %7 to i64
  %40 = sub i64 %38, %39
  %41 = sdiv exact i64 %40, 40
  %42 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !3

52:                                               ; preds = %37
  %53 = icmp eq %"struct.blink::VariationAxis"* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13VariationAxisEEEmm(i64 %55) #9
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13VariationAxisEEEPKcv, i64 0, i64 0)) #9
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = udiv i64 %56, 40
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %"struct.blink::VariationAxis"*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorIN5blink13VariationAxisELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %50) #9
  %64 = load %"struct.blink::VariationAxis"*, %"struct.blink::VariationAxis"** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %"struct.blink::VariationAxis"* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %"struct.blink::VariationAxis"* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %"struct.blink::VariationAxis"* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %70, i64 0, i32 0, i32 0, i32 0
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  %75 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %69, i64 %72, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %74, %"class.WTF::StringImpl"** %75, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %76, label %94, label %77

77:                                               ; preds = %68
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #9
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !2

91:                                               ; preds = %82
  tail call void @llvm.trap() #9
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %68
  %95 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %70, i64 0, i32 1, i32 0, i32 0
  %96 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %95, align 8
  %97 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %69, i64 %72, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %96, %"class.WTF::StringImpl"** %97, align 8
  %98 = icmp eq %"class.WTF::StringImpl"* %96, null
  br i1 %98, label %116, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = and i32 %101, 2
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %116

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %106 to i33
  %108 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %107, i33 1) #9
  %109 = extractvalue { i33, i1 } %108, 1
  %110 = extractvalue { i33, i1 } %108, 0
  %111 = icmp slt i33 %110, 0
  %112 = or i1 %109, %111
  br i1 %112, label %113, label %114, !prof !2

113:                                              ; preds = %104
  tail call void @llvm.trap() #9
  unreachable

114:                                              ; preds = %104
  %115 = trunc i33 %110 to i32
  store i32 %115, i32* %105, align 4
  br label %116

116:                                              ; preds = %94, %99, %114
  %117 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %69, i64 %72, i32 2
  %118 = bitcast double* %117 to i8*
  %119 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %70, i64 0, i32 2
  %120 = bitcast double* %119 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %120, i64 24, i1 false) #9
  %121 = load i32, i32* %3, align 4
  %122 = add i32 %121, 1
  store i32 %122, i32* %3, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink13VariationAxisELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %69

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"struct.blink::VariationAxis"*, %"struct.blink::VariationAxis"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %67, label %14

14:                                               ; preds = %4, %63
  %15 = phi %"struct.blink::VariationAxis"* [ %65, %63 ], [ %6, %4 ]
  %16 = phi %"struct.blink::VariationAxis"* [ %64, %63 ], [ null, %4 ]
  %17 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %15, i64 0, i32 0, i32 0, i32 0
  %18 = bitcast %"struct.blink::VariationAxis"* %15 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"struct.blink::VariationAxis"* %16 to i64*
  store i64 %19, i64* %20, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  %21 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %16, i64 0, i32 1
  %22 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %15, i64 0, i32 1
  %23 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %22, i64 0, i32 0, i32 0
  %24 = bitcast %"class.WTF::String"* %22 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.WTF::String"* %21 to i64*
  store i64 %25, i64* %26, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %23, align 8
  %27 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %16, i64 0, i32 2
  %28 = bitcast double* %27 to i8*
  %29 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %15, i64 0, i32 2
  %30 = bitcast double* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %30, i64 24, i1 false) #9
  %31 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %15, i64 0, i32 1, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %33, label %47, label %34

34:                                               ; preds = %14
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  br i1 %38, label %41, label %43

41:                                               ; preds = %34
  %42 = add i32 %40, -1
  store i32 %42, i32* %39, align 4
  br label %43

43:                                               ; preds = %41, %34
  %44 = phi i32 [ %42, %41 ], [ %40, %34 ]
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #9
  br label %47

47:                                               ; preds = %46, %43, %14
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %49 = icmp eq %"class.WTF::StringImpl"* %48, null
  br i1 %49, label %63, label %50

50:                                               ; preds = %47
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  br i1 %54, label %57, label %59

57:                                               ; preds = %50
  %58 = add i32 %56, -1
  store i32 %58, i32* %55, align 4
  br label %59

59:                                               ; preds = %57, %50
  %60 = phi i32 [ %58, %57 ], [ %56, %50 ]
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %48) #9
  br label %63

63:                                               ; preds = %62, %59, %47
  %64 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %16, i64 1
  %65 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %15, i64 1
  %66 = icmp eq %"struct.blink::VariationAxis"* %65, %10
  br i1 %66, label %67, label %14

67:                                               ; preds = %63, %4
  %68 = bitcast %"struct.blink::VariationAxis"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %68) #9
  br label %147

69:                                               ; preds = %2
  %70 = zext i32 %1 to i64
  %71 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13VariationAxisEEEmm(i64 %70) #9
  %72 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %71, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13VariationAxisEEEPKcv, i64 0, i64 0)) #9
  %73 = udiv i64 %71, 40
  %74 = ptrtoint i8* %72 to i64
  %75 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %76 = load %"struct.blink::VariationAxis"*, %"struct.blink::VariationAxis"** %75, align 8
  %77 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %76, i64 %79
  %81 = icmp eq i32 %78, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %69
  %83 = bitcast %"struct.blink::VariationAxis"* %76 to i8*
  br label %142

84:                                               ; preds = %69
  %85 = bitcast i8* %72 to %"struct.blink::VariationAxis"*
  br label %86

86:                                               ; preds = %84, %135
  %87 = phi %"struct.blink::VariationAxis"* [ %137, %135 ], [ %76, %84 ]
  %88 = phi %"struct.blink::VariationAxis"* [ %136, %135 ], [ %85, %84 ]
  %89 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %87, i64 0, i32 0, i32 0, i32 0
  %90 = bitcast %"struct.blink::VariationAxis"* %87 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = bitcast %"struct.blink::VariationAxis"* %88 to i64*
  store i64 %91, i64* %92, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %89, align 8
  %93 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %88, i64 0, i32 1
  %94 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %87, i64 0, i32 1
  %95 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %94, i64 0, i32 0, i32 0
  %96 = bitcast %"class.WTF::String"* %94 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = bitcast %"class.WTF::String"* %93 to i64*
  store i64 %97, i64* %98, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %95, align 8
  %99 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %88, i64 0, i32 2
  %100 = bitcast double* %99 to i8*
  %101 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %87, i64 0, i32 2
  %102 = bitcast double* %101 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %102, i64 24, i1 false) #9
  %103 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %87, i64 0, i32 1, i32 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %105 = icmp eq %"class.WTF::StringImpl"* %104, null
  br i1 %105, label %119, label %106

106:                                              ; preds = %86
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = and i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 0
  %112 = load i32, i32* %111, align 4
  br i1 %110, label %113, label %115

113:                                              ; preds = %106
  %114 = add i32 %112, -1
  store i32 %114, i32* %111, align 4
  br label %115

115:                                              ; preds = %113, %106
  %116 = phi i32 [ %114, %113 ], [ %112, %106 ]
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %115
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %104) #9
  br label %119

119:                                              ; preds = %118, %115, %86
  %120 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  %121 = icmp eq %"class.WTF::StringImpl"* %120, null
  br i1 %121, label %135, label %122

122:                                              ; preds = %119
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %124 = load atomic i32, i32* %123 monotonic, align 4
  %125 = and i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  br i1 %126, label %129, label %131

129:                                              ; preds = %122
  %130 = add i32 %128, -1
  store i32 %130, i32* %127, align 4
  br label %131

131:                                              ; preds = %129, %122
  %132 = phi i32 [ %130, %129 ], [ %128, %122 ]
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %135

134:                                              ; preds = %131
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %120) #9
  br label %135

135:                                              ; preds = %134, %131, %119
  %136 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %88, i64 1
  %137 = getelementptr inbounds %"struct.blink::VariationAxis", %"struct.blink::VariationAxis"* %87, i64 1
  %138 = icmp eq %"struct.blink::VariationAxis"* %137, %80
  br i1 %138, label %139, label %86

139:                                              ; preds = %135
  %140 = bitcast %"class.WTF::Vector"* %0 to i8**
  %141 = load i8*, i8** %140, align 8
  br label %142

142:                                              ; preds = %82, %139
  %143 = phi i8* [ %141, %139 ], [ %83, %82 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %143) #9
  %144 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %144 monotonic, align 8
  %145 = trunc i64 %73 to i32
  %146 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %145, i32* %146, align 8
  br label %147

147:                                              ; preds = %142, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13VariationAxisEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 53634662
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 53634662) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = mul i64 %0, 40
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
