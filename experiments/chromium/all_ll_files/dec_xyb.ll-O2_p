; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_xyb.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_xyb.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.hwy::N_SSE4::Simd" = type { i8 }
%"struct.hwy::N_AVX2::Simd" = type { i8 }
%"struct.hwy::N_AVX3::Simd.12" = type { i8 }
%"struct.hwy::N_SCALAR::Simd" = type { i8 }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"struct.jxl::OpsinParams" = type { [36 x float], [4 x float], [4 x float], [4 x float] }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon* }
%class.anon = type { %"class.jxl::Image3"**, i64*, %"struct.jxl::OpsinParams"* }
%"class.jxl::ThreadPool::RunCallState.31" = type { i32 (i64)*, %class.anon.1* }
%class.anon.1 = type { %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Image3"**, %"struct.jxl::OpsinParams"* }
%"class.jxl::ThreadPool::RunCallState.32" = type { i32 (i64)*, %class.anon.2* }
%class.anon.2 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, i64*, i64*, %"struct.hwy::N_SSE4::Simd"*, %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"* }
%"class.hwy::N_SSE4::Vec128" = type { <4 x float> }
%"class.jxl::ThreadPool::RunCallState.33" = type { i32 (i64)*, %class.anon.3* }
%class.anon.3 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"struct.hwy::N_SSE4::Simd"*, i64* }
%"class.jxl::ThreadPool::RunCallState.34" = type { i32 (i64)*, %class.anon.4* }
%class.anon.4 = type { %"class.jxl::Image3"**, i64*, %"struct.jxl::OpsinParams"* }
%"class.jxl::ThreadPool::RunCallState.35" = type { i32 (i64)*, %class.anon.5* }
%class.anon.5 = type { %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Image3"**, %"struct.jxl::OpsinParams"* }
%"class.jxl::ThreadPool::RunCallState.36" = type { i32 (i64)*, %class.anon.6* }
%class.anon.6 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, i64*, i64*, %"struct.hwy::N_AVX2::Simd"*, %"class.hwy::N_AVX2::Vec256"*, %"class.hwy::N_AVX2::Vec256"* }
%"class.hwy::N_AVX2::Vec256" = type { <8 x float> }
%"class.jxl::ThreadPool::RunCallState.37" = type { i32 (i64)*, %class.anon.9* }
%class.anon.9 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"struct.hwy::N_AVX2::Simd.7"*, i64* }
%"struct.hwy::N_AVX2::Simd.7" = type { i8 }
%"class.jxl::ThreadPool::RunCallState.38" = type { i32 (i64)*, %class.anon.10* }
%class.anon.10 = type { %"class.jxl::Image3"**, i64*, %"struct.jxl::OpsinParams"* }
%"class.jxl::ThreadPool::RunCallState.39" = type { i32 (i64)*, %class.anon.11* }
%class.anon.11 = type { %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Image3"**, %"struct.jxl::OpsinParams"* }
%"class.jxl::ThreadPool::RunCallState.40" = type { i32 (i64)*, %class.anon.14* }
%class.anon.14 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, i64*, i64*, %"struct.hwy::N_AVX3::Simd.12"*, %"class.hwy::N_AVX3::Vec512"*, %"class.hwy::N_AVX3::Vec512"* }
%"class.hwy::N_AVX3::Vec512" = type { <16 x float> }
%"class.jxl::ThreadPool::RunCallState.41" = type { i32 (i64)*, %class.anon.17* }
%class.anon.17 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"struct.hwy::N_AVX3::Simd.15"*, i64* }
%"struct.hwy::N_AVX3::Simd.15" = type { i8 }
%"class.jxl::ThreadPool::RunCallState.42" = type { i32 (i64)*, %class.anon.18* }
%class.anon.18 = type { %"class.jxl::Image3"**, i64*, %"struct.jxl::OpsinParams"* }
%"class.jxl::ThreadPool::RunCallState.43" = type { i32 (i64)*, %class.anon.19* }
%class.anon.19 = type { %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Image3"**, %"struct.jxl::OpsinParams"* }
%"class.jxl::ThreadPool::RunCallState.44" = type { i32 (i64)*, %class.anon.20* }
%class.anon.20 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, i64*, i64*, %"struct.hwy::N_SCALAR::Simd"*, %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"* }
%"struct.hwy::N_SCALAR::Vec1" = type { float }
%"class.jxl::ThreadPool::RunCallState.45" = type { i32 (i64)*, %class.anon.21* }
%class.anon.21 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"struct.hwy::N_SCALAR::Simd"*, i64* }
%"struct.jxl::OutputEncodingInfo" = type <{ %"struct.jxl::ColorEncoding", float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.26" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.jxl::ExtraChannelInfo"* }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"struct.jxl::PrimariesCIExy" = type { %"struct.jxl::CIExy", %"struct.jxl::CIExy", %"struct.jxl::CIExy" }
%"struct.jxl::CIExy" = type { double, double }

$_ZN3jxl12Inv3x3MatrixIfEENS_6StatusEPT_ = comdat any

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

@.str = private unnamed_addr constant [14 x i8] c"OpsinToLinear\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [48 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_xyb.cc\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"SameSize(rect, *linear)\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"OpsinToLinear(Rect)\00", align 1
@_ZZN3jxl6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEE2df = internal constant %"struct.hwy::N_SSE4::Simd" undef, align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"xsize != 0\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"ysize != 0\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"UpsampleV2\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"DivCeil(output_xsize, 2) == xsize\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"UpsampleH2\00", align 1
@_ZZN3jxl6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEE2df = internal constant %"struct.hwy::N_AVX2::Simd" undef, align 1
@_ZZN3jxl6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEE2df = internal constant %"struct.hwy::N_AVX3::Simd.12" undef, align 1
@_ZZN3jxl8N_SCALAR10UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEE2df = internal constant %"struct.hwy::N_SCALAR::Simd" undef, align 1
@_ZN3jxlL40OpsinToLinearInplaceHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)*] [void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* @_ZN3hwy13FunctionCacheIvJPN3jxl6Image3IfEEPNS1_10ThreadPoolERKNS1_11OpsinParamsEEE13ChooseAndCallIXadL_ZNS1_L40OpsinToLinearInplaceHighwayDispatchTableEEEEEvS4_S6_S9_, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* @_ZN3jxl6N_AVX320OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsE, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* @_ZN3jxl6N_AVX220OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsE, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* @_ZN3jxl6N_SSE420OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsE, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)* @_ZN3jxl8N_SCALAR20OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsE], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZN3jxlL33OpsinToLinearHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)*] [void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* @_ZN3hwy13FunctionCacheIvJRKN3jxl6Image3IfEERKNS1_4RectEPNS1_10ThreadPoolEPS3_RKNS1_11OpsinParamsEEE13ChooseAndCallIXadL_ZNS1_L33OpsinToLinearHighwayDispatchTableEEEEEvS5_S8_SA_SB_SE_, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* @_ZN3jxl6N_AVX313OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsE, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* @_ZN3jxl6N_AVX213OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsE, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* @_ZN3jxl6N_SSE413OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsE, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)* @_ZN3jxl8N_SCALAR13OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsE], align 16
@_ZN3jxlL30YcbcrToRgbHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*] [void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* @_ZN3hwy13FunctionCacheIvJRKN3jxl6Image3IfEEPS3_RKNS1_4RectEEE13ChooseAndCallIXadL_ZNS1_L30YcbcrToRgbHighwayDispatchTableEEEEEvS5_S6_S9_, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* @_ZN3jxl6N_AVX310YcbcrToRgbERKNS_6Image3IfEEPS2_RKNS_4RectE, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* @_ZN3jxl6N_AVX210YcbcrToRgbERKNS_6Image3IfEEPS2_RKNS_4RectE, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* @_ZN3jxl6N_SSE410YcbcrToRgbERKNS_6Image3IfEEPS2_RKNS_4RectE, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* @_ZN3jxl8N_SCALAR10YcbcrToRgbERKNS_6Image3IfEEPS2_RKNS_4RectE], align 16
@_ZN3jxlL30UpsampleV2HighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*] [void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* @_ZN3hwy13FunctionCacheIN3jxl5PlaneIfEEJRKS3_PNS1_10ThreadPoolEEE13ChooseAndCallIXadL_ZNS1_L30UpsampleV2HighwayDispatchTableEEEEES3_S5_S7_, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl8N_SCALAR10UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolE], align 16
@_ZN3jxlL30UpsampleH2HighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)*] [void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* @_ZN3hwy13FunctionCacheIN3jxl5PlaneIfEEJRKS3_mPNS1_10ThreadPoolEEE13ChooseAndCallIXadL_ZNS1_L30UpsampleH2HighwayDispatchTableEEEEES3_S5_mS7_, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_AVX310UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_AVX210UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_SSE410UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)* @_ZN3jxl8N_SCALAR10UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolE], align 16
@_ZN3jxlL37HasFastXYBTosRGB8HighwayDispatchTableE = internal unnamed_addr constant [12 x i1 ()*] [i1 ()* @_ZN3hwy13FunctionCacheIbJEE13ChooseAndCallIXadL_ZN3jxlL37HasFastXYBTosRGB8HighwayDispatchTableEEEEEbv, i1 ()* null, i1 ()* null, i1 ()* null, i1 ()* @_ZN3jxl6N_AVX312_GLOBAL__N_117HasFastXYBTosRGB8Ev, i1 ()* @_ZN3jxl6N_AVX212_GLOBAL__N_117HasFastXYBTosRGB8Ev, i1 ()* null, i1 ()* @_ZN3jxl6N_SSE412_GLOBAL__N_117HasFastXYBTosRGB8Ev, i1 ()* null, i1 ()* null, i1 ()* null, i1 ()* @_ZN3jxl8N_SCALAR12_GLOBAL__N_117HasFastXYBTosRGB8Ev], align 16
@_ZN3jxlL34FastXYBTosRGB8HighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)*] [void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* @_ZN3hwy13FunctionCacheIvJRKN3jxl6Image3IfEERKNS1_4RectES8_PKNS1_5PlaneIfEES8_bPhmmEE13ChooseAndCallIXadL_ZNS1_L34FastXYBTosRGB8HighwayDispatchTableEEEEEvS5_S8_S8_SC_S8_bSD_mm, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* @_ZN3jxl6N_AVX312_GLOBAL__N_114FastXYBTosRGB8ERKNS_6Image3IfEERKNS_4RectES8_PKNS_5PlaneIfEES8_bPhmm, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* @_ZN3jxl6N_AVX212_GLOBAL__N_114FastXYBTosRGB8ERKNS_6Image3IfEERKNS_4RectES8_PKNS_5PlaneIfEES8_bPhmm, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* @_ZN3jxl6N_SSE412_GLOBAL__N_114FastXYBTosRGB8ERKNS_6Image3IfEERKNS_4RectES8_PKNS_5PlaneIfEES8_bPhmm, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)* @_ZN3jxl8N_SCALAR12_GLOBAL__N_114FastXYBTosRGB8ERKNS_6Image3IfEERKNS_4RectES8_PKNS_5PlaneIfEES8_bPhmm], align 16
@_ZN3jxlL26kNegOpsinAbsorbanceBiasRGBE = internal unnamed_addr constant [4 x float] [float 0xBF6F12A6C0000000, float 0xBF6F12A6C0000000, float 0xBF6F12A6C0000000, float 1.000000e+00], align 16
@_ZN3jxlL17kDefaultQuantBiasE = internal unnamed_addr constant [4 x float] [float 0x3FEE404E80000000, float 0x3FEDC21D00000000, float 0x3FEE66EE80000000, float 0x3FC28F5C20000000], align 16
@.str.10 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [233 x i8] c"PrimariesToXYZD50( srgb.GetPrimaries().r.x, srgb.GetPrimaries().r.y, srgb.GetPrimaries().g.x, srgb.GetPrimaries().g.y, srgb.GetPrimaries().b.x, srgb.GetPrimaries().b.y, srgb.GetWhitePoint().x, srgb.GetWhitePoint().y, srgb_to_xyzd50)\00", align 1
@.str.15 = private unnamed_addr constant [31 x i8] c"%s:%d: JXL_ABORT: Unreachable\0A\00", align 1
@.str.16 = private unnamed_addr constant [51 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_xyb-inl.h\00", align 1
@.str.17 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/image_metadata.h\00", align 1
@.str.18 = private unnamed_addr constant [35 x i8] c"tone_mapping.intensity_target != 0\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE420OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsE(%"class.jxl::Image3"* noalias, %"class.jxl::ThreadPool"* readonly, %"struct.jxl::OpsinParams"* dereferenceable(192)) #0 {
  %4 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %5 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %6 = alloca double, align 8
  %7 = alloca %"class.jxl::ThreadPool", align 8
  %8 = alloca %"class.jxl::Image3"*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %class.anon, align 8
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %8, align 8
  %11 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #22
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %9, align 8
  %15 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = bitcast %class.anon* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #22
  %18 = getelementptr inbounds %class.anon, %class.anon* %10, i64 0, i32 0
  store %"class.jxl::Image3"** %8, %"class.jxl::Image3"*** %18, align 8
  %19 = getelementptr inbounds %class.anon, %class.anon* %10, i64 0, i32 1
  store i64* %9, i64** %19, align 8
  %20 = getelementptr inbounds %class.anon, %class.anon* %10, i64 0, i32 2
  store %"struct.jxl::OpsinParams"* %2, %"struct.jxl::OpsinParams"** %20, align 8
  %21 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double* nonnull %6) #22
  %22 = icmp eq %"class.jxl::ThreadPool"* %1, null
  br i1 %22, label %23, label %34

23:                                               ; preds = %3
  %24 = bitcast %"class.jxl::ThreadPool"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #22
  %25 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 0
  %26 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %25, align 8
  %27 = bitcast i8** %26 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %7, %"class.jxl::ThreadPool"** %27, align 8
  %28 = icmp eq i32 %16, 0
  br i1 %28, label %45, label %29

29:                                               ; preds = %23
  %30 = bitcast %"class.jxl::ThreadPool::RunCallState"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #22
  %31 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %4, i64 0, i32 0
  %32 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %4, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %31, align 8
  store %class.anon* %10, %class.anon** %32, align 8
  %33 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %24, i8* nonnull %30, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE420OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE420OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %16) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #22
  br label %45

34:                                               ; preds = %3
  %35 = icmp eq i32 %16, 0
  br i1 %35, label %47, label %36

36:                                               ; preds = %34
  %37 = bitcast %"class.jxl::ThreadPool::RunCallState"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #22
  %38 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %5, i64 0, i32 0
  %39 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %38, align 8
  store %class.anon* %10, %class.anon** %39, align 8
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 0
  %41 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 1
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 %41(i8* %43, i8* nonnull %37, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE420OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE420OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %16) #22
  br label %45

45:                                               ; preds = %23, %29, %36
  %46 = phi i8* [ %37, %36 ], [ %24, %29 ], [ %24, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #22
  br label %47

47:                                               ; preds = %45, %34
  %48 = load double, double* %6, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double %48) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #22
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #22
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE413OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias, %"struct.jxl::OpsinParams"* dereferenceable(192)) #0 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.31", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.31", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca %class.anon.1, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = icmp eq i64 %13, %16
  br i1 %17, label %18, label %25

18:                                               ; preds = %5
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i64
  %24 = icmp eq i64 %20, %23
  br i1 %24, label %28, label %25

25:                                               ; preds = %5, %18
  %26 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #22
  %27 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

28:                                               ; preds = %18
  %29 = trunc i64 %20 to i32
  %30 = bitcast %class.anon.1* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #22
  %31 = getelementptr inbounds %class.anon.1, %class.anon.1* %11, i64 0, i32 0
  store %"class.jxl::Rect"* %1, %"class.jxl::Rect"** %31, align 8
  %32 = getelementptr inbounds %class.anon.1, %class.anon.1* %11, i64 0, i32 1
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %32, align 8
  %33 = getelementptr inbounds %class.anon.1, %class.anon.1* %11, i64 0, i32 2
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %33, align 8
  %34 = getelementptr inbounds %class.anon.1, %class.anon.1* %11, i64 0, i32 3
  store %"struct.jxl::OpsinParams"* %4, %"struct.jxl::OpsinParams"** %34, align 8
  %35 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), double* nonnull %8) #22
  %36 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %36, label %37, label %48

37:                                               ; preds = %28
  %38 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #22
  %39 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %39, align 8
  %41 = bitcast i8** %40 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %41, align 8
  %42 = icmp eq i32 %29, 0
  br i1 %42, label %59, label %43

43:                                               ; preds = %37
  %44 = bitcast %"class.jxl::ThreadPool::RunCallState.31"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #22
  %45 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.31", %"class.jxl::ThreadPool::RunCallState.31"* %6, i64 0, i32 0
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.31", %"class.jxl::ThreadPool::RunCallState.31"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %45, align 8
  store %class.anon.1* %11, %class.anon.1** %46, align 8
  %47 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %38, i8* nonnull %44, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE413OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE413OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_1E12CallDataFuncEPvjm", i32 0, i32 %29) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #22
  br label %59

48:                                               ; preds = %28
  %49 = icmp eq i32 %29, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %48
  %51 = bitcast %"class.jxl::ThreadPool::RunCallState.31"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #22
  %52 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.31", %"class.jxl::ThreadPool::RunCallState.31"* %7, i64 0, i32 0
  %53 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.31", %"class.jxl::ThreadPool::RunCallState.31"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %52, align 8
  store %class.anon.1* %11, %class.anon.1** %53, align 8
  %54 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %55 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 %55(i8* %57, i8* nonnull %51, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE413OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE413OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_1E12CallDataFuncEPvjm", i32 0, i32 %29) #22
  br label %59

59:                                               ; preds = %37, %43, %50
  %60 = phi i8* [ %51, %50 ], [ %38, %43 ], [ %38, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %60) #22
  br label %61

61:                                               ; preds = %59, %48
  %62 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), double %62) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #22
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #22
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE410YcbcrToRgbERKNS_6Image3IfEEPS2_RKNS_4RectE(%"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32)) #4 {
  %4 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = icmp ne i64 %5, 0
  %9 = icmp ne i64 %7, 0
  %10 = and i1 %9, %8
  br i1 %10, label %11, label %122

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %22

22:                                               ; preds = %11, %91
  %23 = phi i64 [ 0, %11 ], [ %92, %91 ]
  %24 = load i64, i64* %12, align 8
  %25 = add i64 %24, %23
  %26 = load i64, i64* %13, align 8
  %27 = mul i64 %26, %25
  %28 = load i8*, i8** %14, align 8
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #22
  %32 = getelementptr inbounds i8, i8* %28, i64 %27
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #22
  %36 = bitcast i8* %32 to float*
  %37 = load i64, i64* %15, align 8
  %38 = getelementptr inbounds float, float* %36, i64 %37
  %39 = load i8*, i8** %16, align 8
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #22
  %43 = getelementptr inbounds i8, i8* %39, i64 %27
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #22
  %47 = bitcast i8* %43 to float*
  %48 = getelementptr inbounds float, float* %47, i64 %37
  %49 = load i8*, i8** %17, align 8
  %50 = ptrtoint i8* %49 to i64
  %51 = and i64 %50, 63
  %52 = icmp eq i64 %51, 0
  tail call void @llvm.assume(i1 %52) #22
  %53 = getelementptr inbounds i8, i8* %49, i64 %27
  %54 = ptrtoint i8* %53 to i64
  %55 = and i64 %54, 63
  %56 = icmp eq i64 %55, 0
  tail call void @llvm.assume(i1 %56) #22
  %57 = bitcast i8* %53 to float*
  %58 = getelementptr inbounds float, float* %57, i64 %37
  %59 = load i64, i64* %18, align 8
  %60 = mul i64 %59, %25
  %61 = load i8*, i8** %19, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #22
  %65 = getelementptr inbounds i8, i8* %61, i64 %60
  %66 = ptrtoint i8* %65 to i64
  %67 = and i64 %66, 63
  %68 = icmp eq i64 %67, 0
  tail call void @llvm.assume(i1 %68) #22
  %69 = bitcast i8* %65 to float*
  %70 = getelementptr inbounds float, float* %69, i64 %37
  %71 = load i8*, i8** %20, align 8
  %72 = ptrtoint i8* %71 to i64
  %73 = and i64 %72, 63
  %74 = icmp eq i64 %73, 0
  tail call void @llvm.assume(i1 %74) #22
  %75 = getelementptr inbounds i8, i8* %71, i64 %60
  %76 = ptrtoint i8* %75 to i64
  %77 = and i64 %76, 63
  %78 = icmp eq i64 %77, 0
  tail call void @llvm.assume(i1 %78) #22
  %79 = bitcast i8* %75 to float*
  %80 = getelementptr inbounds float, float* %79, i64 %37
  %81 = load i8*, i8** %21, align 8
  %82 = ptrtoint i8* %81 to i64
  %83 = and i64 %82, 63
  %84 = icmp eq i64 %83, 0
  tail call void @llvm.assume(i1 %84) #22
  %85 = getelementptr inbounds i8, i8* %81, i64 %60
  %86 = ptrtoint i8* %85 to i64
  %87 = and i64 %86, 63
  %88 = icmp eq i64 %87, 0
  tail call void @llvm.assume(i1 %88) #22
  %89 = bitcast i8* %85 to float*
  %90 = getelementptr inbounds float, float* %89, i64 %37
  br label %94

91:                                               ; preds = %94
  %92 = add nuw i64 %23, 1
  %93 = icmp eq i64 %92, %7
  br i1 %93, label %122, label %22

94:                                               ; preds = %22, %94
  %95 = phi i64 [ %120, %94 ], [ 0, %22 ]
  %96 = getelementptr inbounds float, float* %38, i64 %95
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 16, !alias.scope !2
  %99 = fadd <4 x float> %98, <float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000>
  %100 = getelementptr inbounds float, float* %48, i64 %95
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 16, !alias.scope !5
  %103 = getelementptr inbounds float, float* %58, i64 %95
  %104 = bitcast float* %103 to <4 x float>*
  %105 = load <4 x float>, <4 x float>* %104, align 16, !alias.scope !8
  %106 = fmul <4 x float> %105, <float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000>
  %107 = fadd <4 x float> %99, %106
  %108 = fmul <4 x float> %105, <float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000>
  %109 = fmul <4 x float> %102, <float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000>
  %110 = fadd <4 x float> %109, %108
  %111 = fadd <4 x float> %99, %110
  %112 = fmul <4 x float> %102, <float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000>
  %113 = fadd <4 x float> %99, %112
  %114 = getelementptr inbounds float, float* %70, i64 %95
  %115 = bitcast float* %114 to <4 x float>*
  store <4 x float> %107, <4 x float>* %115, align 16, !alias.scope !11
  %116 = getelementptr inbounds float, float* %80, i64 %95
  %117 = bitcast float* %116 to <4 x float>*
  store <4 x float> %111, <4 x float>* %117, align 16, !alias.scope !14
  %118 = getelementptr inbounds float, float* %90, i64 %95
  %119 = bitcast float* %118 to <4 x float>*
  store <4 x float> %113, <4 x float>* %119, align 16, !alias.scope !17
  %120 = add i64 %95, 4
  %121 = icmp ult i64 %120, %5
  br i1 %121, label %94, label %91

122:                                              ; preds = %91, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::ThreadPool"* readonly) #4 {
  %4 = alloca %"class.jxl::ThreadPool::RunCallState.32", align 8
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.32", align 8
  %6 = alloca double, align 8
  %7 = alloca %"class.jxl::ThreadPool", align 8
  %8 = alloca i64, align 8
  %9 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %10 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %class.anon.2, align 8
  %15 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #22
  store i64 4, i64* %8, align 8
  %16 = bitcast %"class.hwy::N_SSE4::Vec128"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #22
  %17 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %9, i64 0, i32 0
  store <4 x float> <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>, <4 x float>* %17, align 16
  %18 = bitcast %"class.hwy::N_SSE4::Vec128"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #22
  %19 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %10, i64 0, i32 0
  store <4 x float> <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>, <4 x float>* %19, align 16
  %20 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #22
  %21 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = zext i32 %22 to i64
  store i64 %23, i64* %11, align 8
  %24 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #22
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %12, align 8
  %28 = icmp eq i32 %22, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %3
  %30 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 177, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0)) #22
  %31 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

32:                                               ; preds = %3
  %33 = icmp eq i32 %26, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %32
  %35 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 178, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0)) #22
  %36 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = shl nuw nsw i64 %27, 1
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  %41 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 -86, i64 32, i1 false)
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %40, i64 %23, i64 %39, i64 4) #22
  %42 = icmp eq i32 %26, 1
  br i1 %42, label %43, label %65

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %45 = load i8*, i8** %38, align 8
  %46 = ptrtoint i8* %45 to i64
  %47 = and i64 %46, 63
  %48 = icmp eq i64 %47, 0
  tail call void @llvm.assume(i1 %48) #22
  %49 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #22
  %54 = shl nuw nsw i64 %23, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %45, i8* align 64 %50, i64 %54, i1 false)
  %55 = load i8*, i8** %38, align 8
  %56 = load i64, i64* %44, align 8
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #22
  %61 = load i8*, i8** %49, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #22
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %57, i8* align 64 %61, i64 %54, i1 false)
  br label %111

65:                                               ; preds = %37
  %66 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #22
  %67 = add nuw nsw i64 %23, 65535
  %68 = udiv i64 %67, %23
  store i64 %68, i64* %13, align 8
  %69 = add nsw i64 %27, -1
  %70 = add nsw i64 %69, %68
  %71 = udiv i64 %70, %68
  %72 = bitcast %class.anon.2* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %72) #22
  %73 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 0
  store i64* %13, i64** %73, align 8
  %74 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 1
  store i64* %12, i64** %74, align 8
  %75 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 2
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %75, align 8
  %76 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 3
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %76, align 8
  %77 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 4
  store i64* %11, i64** %77, align 8
  %78 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 5
  store i64* %8, i64** %78, align 8
  %79 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 6
  store %"struct.hwy::N_SSE4::Simd"* @_ZZN3jxl6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEE2df, %"struct.hwy::N_SSE4::Simd"** %79, align 8
  %80 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 7
  store %"class.hwy::N_SSE4::Vec128"* %10, %"class.hwy::N_SSE4::Vec128"** %80, align 8
  %81 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 8
  store %"class.hwy::N_SSE4::Vec128"* %9, %"class.hwy::N_SSE4::Vec128"** %81, align 8
  %82 = trunc i64 %71 to i32
  %83 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double* nonnull %6) #22
  %84 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %84, label %85, label %96

85:                                               ; preds = %65
  %86 = bitcast %"class.jxl::ThreadPool"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %86) #22
  %87 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %87, align 8
  %89 = bitcast i8** %88 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %7, %"class.jxl::ThreadPool"** %89, align 8
  %90 = icmp eq i32 %82, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %85
  %92 = bitcast %"class.jxl::ThreadPool::RunCallState.32"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %92) #22
  %93 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.32", %"class.jxl::ThreadPool::RunCallState.32"* %4, i64 0, i32 0
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.32", %"class.jxl::ThreadPool::RunCallState.32"* %4, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %93, align 8
  store %class.anon.2* %14, %class.anon.2** %94, align 8
  %95 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %86, i8* nonnull %92, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_2E12CallDataFuncEPvjm", i32 0, i32 %82) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #22
  br label %107

96:                                               ; preds = %65
  %97 = icmp eq i32 %82, 0
  br i1 %97, label %109, label %98

98:                                               ; preds = %96
  %99 = bitcast %"class.jxl::ThreadPool::RunCallState.32"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99) #22
  %100 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.32", %"class.jxl::ThreadPool::RunCallState.32"* %5, i64 0, i32 0
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.32", %"class.jxl::ThreadPool::RunCallState.32"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %100, align 8
  store %class.anon.2* %14, %class.anon.2** %101, align 8
  %102 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %103 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 %103(i8* %105, i8* nonnull %99, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_2E12CallDataFuncEPvjm", i32 0, i32 %82) #22
  br label %107

107:                                              ; preds = %85, %91, %98
  %108 = phi i8* [ %99, %98 ], [ %86, %91 ], [ %86, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #22
  br label %109

109:                                              ; preds = %107, %96
  %110 = load double, double* %6, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double %110) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #22
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %72) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #22
  br label %111

111:                                              ; preds = %43, %109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #22
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE410UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), i64, %"class.jxl::ThreadPool"* readonly) #0 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.33", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.33", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %"struct.hwy::N_SSE4::Simd", align 1
  %13 = alloca %class.anon.3, align 8
  %14 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #22
  %15 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %9, align 8
  %18 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #22
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  store i64 %21, i64* %10, align 8
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %4
  %24 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 228, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0)) #22
  %25 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

26:                                               ; preds = %4
  %27 = icmp eq i32 %20, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %26
  %29 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 229, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0)) #22
  %30 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

31:                                               ; preds = %26
  %32 = add i64 %2, 1
  %33 = lshr i64 %32, 1
  %34 = icmp eq i64 %33, %17
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 230, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i64 0, i64 0)) #22
  %37 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  %40 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 -86, i64 32, i1 false)
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %39, i64 %2, i64 %21, i64 4) #22
  %41 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #22
  %42 = add nuw nsw i64 %17, 65535
  %43 = udiv i64 %42, %17
  store i64 %43, i64* %11, align 8
  %44 = add nsw i64 %43, -1
  %45 = add nsw i64 %44, %21
  %46 = udiv i64 %45, %43
  %47 = getelementptr inbounds %"struct.hwy::N_SSE4::Simd", %"struct.hwy::N_SSE4::Simd"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %47) #22
  store i8 -86, i8* %47, align 1
  %48 = bitcast %class.anon.3* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %48) #22
  %49 = getelementptr inbounds %class.anon.3, %class.anon.3* %13, i64 0, i32 0
  %50 = getelementptr inbounds %class.anon.3, %class.anon.3* %13, i64 0, i32 1
  %51 = getelementptr inbounds %class.anon.3, %class.anon.3* %13, i64 0, i32 2
  %52 = getelementptr inbounds %class.anon.3, %class.anon.3* %13, i64 0, i32 3
  %53 = getelementptr inbounds %class.anon.3, %class.anon.3* %13, i64 0, i32 4
  %54 = getelementptr inbounds %class.anon.3, %class.anon.3* %13, i64 0, i32 5
  store i64* %11, i64** %49, align 8
  store i64* %10, i64** %50, align 8
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %51, align 8
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %52, align 8
  store %"struct.hwy::N_SSE4::Simd"* %12, %"struct.hwy::N_SSE4::Simd"** %53, align 8
  store i64* %9, i64** %54, align 8
  %55 = trunc i64 %46 to i32
  %56 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), double* nonnull %7) #22
  %57 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %57, label %58, label %69

58:                                               ; preds = %38
  %59 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #22
  %60 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %61 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %60, align 8
  %62 = bitcast i8** %61 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %62, align 8
  %63 = icmp eq i32 %55, 0
  br i1 %63, label %80, label %64

64:                                               ; preds = %58
  %65 = bitcast %"class.jxl::ThreadPool::RunCallState.33"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %65) #22
  %66 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.33", %"class.jxl::ThreadPool::RunCallState.33"* %5, i64 0, i32 0
  %67 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.33", %"class.jxl::ThreadPool::RunCallState.33"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %66, align 8
  store %class.anon.3* %13, %class.anon.3** %67, align 8
  %68 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %59, i8* nonnull %65, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_3E12CallDataFuncEPvjm", i32 0, i32 %55) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %65) #22
  br label %80

69:                                               ; preds = %38
  %70 = icmp eq i32 %55, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %69
  %72 = bitcast %"class.jxl::ThreadPool::RunCallState.33"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %72) #22
  %73 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.33", %"class.jxl::ThreadPool::RunCallState.33"* %6, i64 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.33", %"class.jxl::ThreadPool::RunCallState.33"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %73, align 8
  store %class.anon.3* %13, %class.anon.3** %74, align 8
  %75 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %76 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %75, align 8
  %77 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 %76(i8* %78, i8* nonnull %72, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_3E12CallDataFuncEPvjm", i32 0, i32 %55) #22
  br label %80

80:                                               ; preds = %58, %64, %71
  %81 = phi i8* [ %72, %71 ], [ %59, %64 ], [ %59, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #22
  br label %82

82:                                               ; preds = %80, %69
  %83 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), double %83) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %48) #22
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %47) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX220OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsE(%"class.jxl::Image3"* noalias, %"class.jxl::ThreadPool"* readonly, %"struct.jxl::OpsinParams"* dereferenceable(192)) #5 {
  %4 = alloca %"class.jxl::ThreadPool::RunCallState.34", align 8
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.34", align 8
  %6 = alloca double, align 8
  %7 = alloca %"class.jxl::ThreadPool", align 8
  %8 = alloca %"class.jxl::Image3"*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %class.anon.4, align 8
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %8, align 8
  %11 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #22
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %9, align 8
  %15 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = bitcast %class.anon.4* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #22
  %18 = getelementptr inbounds %class.anon.4, %class.anon.4* %10, i64 0, i32 0
  store %"class.jxl::Image3"** %8, %"class.jxl::Image3"*** %18, align 8
  %19 = getelementptr inbounds %class.anon.4, %class.anon.4* %10, i64 0, i32 1
  store i64* %9, i64** %19, align 8
  %20 = getelementptr inbounds %class.anon.4, %class.anon.4* %10, i64 0, i32 2
  store %"struct.jxl::OpsinParams"* %2, %"struct.jxl::OpsinParams"** %20, align 8
  %21 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double* nonnull %6) #22
  %22 = icmp eq %"class.jxl::ThreadPool"* %1, null
  br i1 %22, label %23, label %34

23:                                               ; preds = %3
  %24 = bitcast %"class.jxl::ThreadPool"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #22
  %25 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 0
  %26 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %25, align 8
  %27 = bitcast i8** %26 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %7, %"class.jxl::ThreadPool"** %27, align 8
  %28 = icmp eq i32 %16, 0
  br i1 %28, label %45, label %29

29:                                               ; preds = %23
  %30 = bitcast %"class.jxl::ThreadPool::RunCallState.34"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #22
  %31 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.34", %"class.jxl::ThreadPool::RunCallState.34"* %4, i64 0, i32 0
  %32 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.34", %"class.jxl::ThreadPool::RunCallState.34"* %4, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %31, align 8
  store %class.anon.4* %10, %class.anon.4** %32, align 8
  %33 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %24, i8* nonnull %30, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX220OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_4E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX220OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_4E12CallDataFuncEPvjm", i32 0, i32 %16) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #22
  br label %45

34:                                               ; preds = %3
  %35 = icmp eq i32 %16, 0
  br i1 %35, label %47, label %36

36:                                               ; preds = %34
  %37 = bitcast %"class.jxl::ThreadPool::RunCallState.34"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #22
  %38 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.34", %"class.jxl::ThreadPool::RunCallState.34"* %5, i64 0, i32 0
  %39 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.34", %"class.jxl::ThreadPool::RunCallState.34"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %38, align 8
  store %class.anon.4* %10, %class.anon.4** %39, align 8
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 0
  %41 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 1
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 %41(i8* %43, i8* nonnull %37, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX220OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_4E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX220OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_4E12CallDataFuncEPvjm", i32 0, i32 %16) #22
  br label %45

45:                                               ; preds = %23, %29, %36
  %46 = phi i8* [ %37, %36 ], [ %24, %29 ], [ %24, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #22
  br label %47

47:                                               ; preds = %45, %34
  %48 = load double, double* %6, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double %48) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #22
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX213OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias, %"struct.jxl::OpsinParams"* dereferenceable(192)) #5 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.35", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.35", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca %class.anon.5, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = icmp eq i64 %13, %16
  br i1 %17, label %18, label %25

18:                                               ; preds = %5
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i64
  %24 = icmp eq i64 %20, %23
  br i1 %24, label %28, label %25

25:                                               ; preds = %5, %18
  %26 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #22
  %27 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

28:                                               ; preds = %18
  %29 = trunc i64 %20 to i32
  %30 = bitcast %class.anon.5* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #22
  %31 = getelementptr inbounds %class.anon.5, %class.anon.5* %11, i64 0, i32 0
  store %"class.jxl::Rect"* %1, %"class.jxl::Rect"** %31, align 8
  %32 = getelementptr inbounds %class.anon.5, %class.anon.5* %11, i64 0, i32 1
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %32, align 8
  %33 = getelementptr inbounds %class.anon.5, %class.anon.5* %11, i64 0, i32 2
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %33, align 8
  %34 = getelementptr inbounds %class.anon.5, %class.anon.5* %11, i64 0, i32 3
  store %"struct.jxl::OpsinParams"* %4, %"struct.jxl::OpsinParams"** %34, align 8
  %35 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), double* nonnull %8) #22
  %36 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %36, label %37, label %48

37:                                               ; preds = %28
  %38 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #22
  %39 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %39, align 8
  %41 = bitcast i8** %40 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %41, align 8
  %42 = icmp eq i32 %29, 0
  br i1 %42, label %59, label %43

43:                                               ; preds = %37
  %44 = bitcast %"class.jxl::ThreadPool::RunCallState.35"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #22
  %45 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.35", %"class.jxl::ThreadPool::RunCallState.35"* %6, i64 0, i32 0
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.35", %"class.jxl::ThreadPool::RunCallState.35"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %45, align 8
  store %class.anon.5* %11, %class.anon.5** %46, align 8
  %47 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %38, i8* nonnull %44, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX213OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_5E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX213OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_5E12CallDataFuncEPvjm", i32 0, i32 %29) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #22
  br label %59

48:                                               ; preds = %28
  %49 = icmp eq i32 %29, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %48
  %51 = bitcast %"class.jxl::ThreadPool::RunCallState.35"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #22
  %52 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.35", %"class.jxl::ThreadPool::RunCallState.35"* %7, i64 0, i32 0
  %53 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.35", %"class.jxl::ThreadPool::RunCallState.35"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %52, align 8
  store %class.anon.5* %11, %class.anon.5** %53, align 8
  %54 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %55 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 %55(i8* %57, i8* nonnull %51, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX213OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_5E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX213OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_5E12CallDataFuncEPvjm", i32 0, i32 %29) #22
  br label %59

59:                                               ; preds = %37, %43, %50
  %60 = phi i8* [ %51, %50 ], [ %38, %43 ], [ %38, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %60) #22
  br label %61

61:                                               ; preds = %59, %48
  %62 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), double %62) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #22
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX210YcbcrToRgbERKNS_6Image3IfEEPS2_RKNS_4RectE(%"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32)) #6 {
  %4 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = icmp ne i64 %5, 0
  %9 = icmp ne i64 %7, 0
  %10 = and i1 %9, %8
  br i1 %10, label %11, label %122

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %22

22:                                               ; preds = %11, %91
  %23 = phi i64 [ 0, %11 ], [ %92, %91 ]
  %24 = load i64, i64* %12, align 8
  %25 = add i64 %24, %23
  %26 = load i64, i64* %13, align 8
  %27 = mul i64 %26, %25
  %28 = load i8*, i8** %14, align 8
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #22
  %32 = getelementptr inbounds i8, i8* %28, i64 %27
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #22
  %36 = bitcast i8* %32 to float*
  %37 = load i64, i64* %15, align 8
  %38 = getelementptr inbounds float, float* %36, i64 %37
  %39 = load i8*, i8** %16, align 8
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #22
  %43 = getelementptr inbounds i8, i8* %39, i64 %27
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #22
  %47 = bitcast i8* %43 to float*
  %48 = getelementptr inbounds float, float* %47, i64 %37
  %49 = load i8*, i8** %17, align 8
  %50 = ptrtoint i8* %49 to i64
  %51 = and i64 %50, 63
  %52 = icmp eq i64 %51, 0
  tail call void @llvm.assume(i1 %52) #22
  %53 = getelementptr inbounds i8, i8* %49, i64 %27
  %54 = ptrtoint i8* %53 to i64
  %55 = and i64 %54, 63
  %56 = icmp eq i64 %55, 0
  tail call void @llvm.assume(i1 %56) #22
  %57 = bitcast i8* %53 to float*
  %58 = getelementptr inbounds float, float* %57, i64 %37
  %59 = load i64, i64* %18, align 8
  %60 = mul i64 %59, %25
  %61 = load i8*, i8** %19, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #22
  %65 = getelementptr inbounds i8, i8* %61, i64 %60
  %66 = ptrtoint i8* %65 to i64
  %67 = and i64 %66, 63
  %68 = icmp eq i64 %67, 0
  tail call void @llvm.assume(i1 %68) #22
  %69 = bitcast i8* %65 to float*
  %70 = getelementptr inbounds float, float* %69, i64 %37
  %71 = load i8*, i8** %20, align 8
  %72 = ptrtoint i8* %71 to i64
  %73 = and i64 %72, 63
  %74 = icmp eq i64 %73, 0
  tail call void @llvm.assume(i1 %74) #22
  %75 = getelementptr inbounds i8, i8* %71, i64 %60
  %76 = ptrtoint i8* %75 to i64
  %77 = and i64 %76, 63
  %78 = icmp eq i64 %77, 0
  tail call void @llvm.assume(i1 %78) #22
  %79 = bitcast i8* %75 to float*
  %80 = getelementptr inbounds float, float* %79, i64 %37
  %81 = load i8*, i8** %21, align 8
  %82 = ptrtoint i8* %81 to i64
  %83 = and i64 %82, 63
  %84 = icmp eq i64 %83, 0
  tail call void @llvm.assume(i1 %84) #22
  %85 = getelementptr inbounds i8, i8* %81, i64 %60
  %86 = ptrtoint i8* %85 to i64
  %87 = and i64 %86, 63
  %88 = icmp eq i64 %87, 0
  tail call void @llvm.assume(i1 %88) #22
  %89 = bitcast i8* %85 to float*
  %90 = getelementptr inbounds float, float* %89, i64 %37
  br label %94

91:                                               ; preds = %94
  %92 = add nuw i64 %23, 1
  %93 = icmp eq i64 %92, %7
  br i1 %93, label %122, label %22

94:                                               ; preds = %22, %94
  %95 = phi i64 [ %120, %94 ], [ 0, %22 ]
  %96 = getelementptr inbounds float, float* %38, i64 %95
  %97 = bitcast float* %96 to <8 x float>*
  %98 = load <8 x float>, <8 x float>* %97, align 32, !alias.scope !20, !noalias !23
  %99 = fadd <8 x float> %98, <float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000>
  %100 = getelementptr inbounds float, float* %48, i64 %95
  %101 = bitcast float* %100 to <8 x float>*
  %102 = load <8 x float>, <8 x float>* %101, align 32, !alias.scope !25, !noalias !28
  %103 = getelementptr inbounds float, float* %58, i64 %95
  %104 = bitcast float* %103 to <8 x float>*
  %105 = load <8 x float>, <8 x float>* %104, align 32, !alias.scope !30, !noalias !33
  %106 = fmul <8 x float> %105, <float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000>
  %107 = fadd <8 x float> %99, %106
  %108 = fmul <8 x float> %105, <float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000>
  %109 = fmul <8 x float> %102, <float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000>
  %110 = fadd <8 x float> %109, %108
  %111 = fadd <8 x float> %99, %110
  %112 = fmul <8 x float> %102, <float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000>
  %113 = fadd <8 x float> %99, %112
  %114 = getelementptr inbounds float, float* %70, i64 %95
  %115 = bitcast float* %114 to <8 x float>*
  store <8 x float> %107, <8 x float>* %115, align 32, !alias.scope !35
  %116 = getelementptr inbounds float, float* %80, i64 %95
  %117 = bitcast float* %116 to <8 x float>*
  store <8 x float> %111, <8 x float>* %117, align 32, !alias.scope !38
  %118 = getelementptr inbounds float, float* %90, i64 %95
  %119 = bitcast float* %118 to <8 x float>*
  store <8 x float> %113, <8 x float>* %119, align 32, !alias.scope !41
  %120 = add i64 %95, 8
  %121 = icmp ult i64 %120, %5
  br i1 %121, label %94, label %91

122:                                              ; preds = %91, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::ThreadPool"* readonly) #6 {
  %4 = alloca %"class.jxl::ThreadPool::RunCallState.36", align 8
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.36", align 8
  %6 = alloca double, align 8
  %7 = alloca %"class.jxl::ThreadPool", align 8
  %8 = alloca i64, align 8
  %9 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %10 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %class.anon.6, align 8
  %15 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #22
  store i64 8, i64* %8, align 8
  %16 = bitcast %"class.hwy::N_AVX2::Vec256"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #22
  %17 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %9, i64 0, i32 0
  store <8 x float> <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>, <8 x float>* %17, align 32, !alias.scope !44
  %18 = bitcast %"class.hwy::N_AVX2::Vec256"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #22
  %19 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %10, i64 0, i32 0
  store <8 x float> <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>, <8 x float>* %19, align 32, !alias.scope !47
  %20 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #22
  %21 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = zext i32 %22 to i64
  store i64 %23, i64* %11, align 8
  %24 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #22
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %12, align 8
  %28 = icmp eq i32 %22, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %3
  %30 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 177, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0)) #22
  %31 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

32:                                               ; preds = %3
  %33 = icmp eq i32 %26, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %32
  %35 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 178, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0)) #22
  %36 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = shl nuw nsw i64 %27, 1
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  %41 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 -86, i64 32, i1 false)
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %40, i64 %23, i64 %39, i64 4) #22
  %42 = icmp eq i32 %26, 1
  br i1 %42, label %43, label %65

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %45 = load i8*, i8** %38, align 8
  %46 = ptrtoint i8* %45 to i64
  %47 = and i64 %46, 63
  %48 = icmp eq i64 %47, 0
  tail call void @llvm.assume(i1 %48) #22
  %49 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #22
  %54 = shl nuw nsw i64 %23, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %45, i8* align 64 %50, i64 %54, i1 false)
  %55 = load i8*, i8** %38, align 8
  %56 = load i64, i64* %44, align 8
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #22
  %61 = load i8*, i8** %49, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #22
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %57, i8* align 64 %61, i64 %54, i1 false)
  br label %111

65:                                               ; preds = %37
  %66 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #22
  %67 = add nuw nsw i64 %23, 65535
  %68 = udiv i64 %67, %23
  store i64 %68, i64* %13, align 8
  %69 = add nsw i64 %27, -1
  %70 = add nsw i64 %69, %68
  %71 = udiv i64 %70, %68
  %72 = bitcast %class.anon.6* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %72) #22
  %73 = getelementptr inbounds %class.anon.6, %class.anon.6* %14, i64 0, i32 0
  store i64* %13, i64** %73, align 8
  %74 = getelementptr inbounds %class.anon.6, %class.anon.6* %14, i64 0, i32 1
  store i64* %12, i64** %74, align 8
  %75 = getelementptr inbounds %class.anon.6, %class.anon.6* %14, i64 0, i32 2
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %75, align 8
  %76 = getelementptr inbounds %class.anon.6, %class.anon.6* %14, i64 0, i32 3
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %76, align 8
  %77 = getelementptr inbounds %class.anon.6, %class.anon.6* %14, i64 0, i32 4
  store i64* %11, i64** %77, align 8
  %78 = getelementptr inbounds %class.anon.6, %class.anon.6* %14, i64 0, i32 5
  store i64* %8, i64** %78, align 8
  %79 = getelementptr inbounds %class.anon.6, %class.anon.6* %14, i64 0, i32 6
  store %"struct.hwy::N_AVX2::Simd"* @_ZZN3jxl6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEE2df, %"struct.hwy::N_AVX2::Simd"** %79, align 8
  %80 = getelementptr inbounds %class.anon.6, %class.anon.6* %14, i64 0, i32 7
  store %"class.hwy::N_AVX2::Vec256"* %10, %"class.hwy::N_AVX2::Vec256"** %80, align 8
  %81 = getelementptr inbounds %class.anon.6, %class.anon.6* %14, i64 0, i32 8
  store %"class.hwy::N_AVX2::Vec256"* %9, %"class.hwy::N_AVX2::Vec256"** %81, align 8
  %82 = trunc i64 %71 to i32
  %83 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double* nonnull %6) #22
  %84 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %84, label %85, label %96

85:                                               ; preds = %65
  %86 = bitcast %"class.jxl::ThreadPool"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %86) #22
  %87 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %87, align 8
  %89 = bitcast i8** %88 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %7, %"class.jxl::ThreadPool"** %89, align 8
  %90 = icmp eq i32 %82, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %85
  %92 = bitcast %"class.jxl::ThreadPool::RunCallState.36"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %92) #22
  %93 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.36", %"class.jxl::ThreadPool::RunCallState.36"* %4, i64 0, i32 0
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.36", %"class.jxl::ThreadPool::RunCallState.36"* %4, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %93, align 8
  store %class.anon.6* %14, %class.anon.6** %94, align 8
  %95 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %86, i8* nonnull %92, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_6E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_6E12CallDataFuncEPvjm", i32 0, i32 %82) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #22
  br label %107

96:                                               ; preds = %65
  %97 = icmp eq i32 %82, 0
  br i1 %97, label %109, label %98

98:                                               ; preds = %96
  %99 = bitcast %"class.jxl::ThreadPool::RunCallState.36"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99) #22
  %100 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.36", %"class.jxl::ThreadPool::RunCallState.36"* %5, i64 0, i32 0
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.36", %"class.jxl::ThreadPool::RunCallState.36"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %100, align 8
  store %class.anon.6* %14, %class.anon.6** %101, align 8
  %102 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %103 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 %103(i8* %105, i8* nonnull %99, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_6E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_6E12CallDataFuncEPvjm", i32 0, i32 %82) #22
  br label %107

107:                                              ; preds = %85, %91, %98
  %108 = phi i8* [ %99, %98 ], [ %86, %91 ], [ %86, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #22
  br label %109

109:                                              ; preds = %107, %96
  %110 = load double, double* %6, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double %110) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #22
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %72) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #22
  br label %111

111:                                              ; preds = %43, %109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #22
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #22
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX210UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), i64, %"class.jxl::ThreadPool"* readonly) #5 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.37", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.37", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %"struct.hwy::N_AVX2::Simd.7", align 1
  %13 = alloca %class.anon.9, align 8
  %14 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #22
  %15 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %9, align 8
  %18 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #22
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  store i64 %21, i64* %10, align 8
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %4
  %24 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 228, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0)) #22
  %25 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

26:                                               ; preds = %4
  %27 = icmp eq i32 %20, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %26
  %29 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 229, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0)) #22
  %30 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

31:                                               ; preds = %26
  %32 = add i64 %2, 1
  %33 = lshr i64 %32, 1
  %34 = icmp eq i64 %33, %17
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 230, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i64 0, i64 0)) #22
  %37 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  %40 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 -86, i64 32, i1 false)
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %39, i64 %2, i64 %21, i64 4) #22
  %41 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #22
  %42 = add nuw nsw i64 %17, 65535
  %43 = udiv i64 %42, %17
  store i64 %43, i64* %11, align 8
  %44 = add nsw i64 %43, -1
  %45 = add nsw i64 %44, %21
  %46 = udiv i64 %45, %43
  %47 = getelementptr inbounds %"struct.hwy::N_AVX2::Simd.7", %"struct.hwy::N_AVX2::Simd.7"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %47) #22
  store i8 -86, i8* %47, align 1
  %48 = bitcast %class.anon.9* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %48) #22
  %49 = getelementptr inbounds %class.anon.9, %class.anon.9* %13, i64 0, i32 0
  %50 = getelementptr inbounds %class.anon.9, %class.anon.9* %13, i64 0, i32 1
  %51 = getelementptr inbounds %class.anon.9, %class.anon.9* %13, i64 0, i32 2
  %52 = getelementptr inbounds %class.anon.9, %class.anon.9* %13, i64 0, i32 3
  %53 = getelementptr inbounds %class.anon.9, %class.anon.9* %13, i64 0, i32 4
  %54 = getelementptr inbounds %class.anon.9, %class.anon.9* %13, i64 0, i32 5
  store i64* %11, i64** %49, align 8
  store i64* %10, i64** %50, align 8
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %51, align 8
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %52, align 8
  store %"struct.hwy::N_AVX2::Simd.7"* %12, %"struct.hwy::N_AVX2::Simd.7"** %53, align 8
  store i64* %9, i64** %54, align 8
  %55 = trunc i64 %46 to i32
  %56 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), double* nonnull %7) #22
  %57 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %57, label %58, label %69

58:                                               ; preds = %38
  %59 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #22
  %60 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %61 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %60, align 8
  %62 = bitcast i8** %61 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %62, align 8
  %63 = icmp eq i32 %55, 0
  br i1 %63, label %80, label %64

64:                                               ; preds = %58
  %65 = bitcast %"class.jxl::ThreadPool::RunCallState.37"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %65) #22
  %66 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.37", %"class.jxl::ThreadPool::RunCallState.37"* %5, i64 0, i32 0
  %67 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.37", %"class.jxl::ThreadPool::RunCallState.37"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %66, align 8
  store %class.anon.9* %13, %class.anon.9** %67, align 8
  %68 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %59, i8* nonnull %65, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_7E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_7E12CallDataFuncEPvjm", i32 0, i32 %55) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %65) #22
  br label %80

69:                                               ; preds = %38
  %70 = icmp eq i32 %55, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %69
  %72 = bitcast %"class.jxl::ThreadPool::RunCallState.37"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %72) #22
  %73 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.37", %"class.jxl::ThreadPool::RunCallState.37"* %6, i64 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.37", %"class.jxl::ThreadPool::RunCallState.37"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %73, align 8
  store %class.anon.9* %13, %class.anon.9** %74, align 8
  %75 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %76 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %75, align 8
  %77 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 %76(i8* %78, i8* nonnull %72, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_7E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_7E12CallDataFuncEPvjm", i32 0, i32 %55) #22
  br label %80

80:                                               ; preds = %58, %64, %71
  %81 = phi i8* [ %72, %71 ], [ %59, %64 ], [ %59, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #22
  br label %82

82:                                               ; preds = %80, %69
  %83 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), double %83) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %48) #22
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %47) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX320OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsE(%"class.jxl::Image3"* noalias, %"class.jxl::ThreadPool"* readonly, %"struct.jxl::OpsinParams"* dereferenceable(192)) #7 {
  %4 = alloca %"class.jxl::ThreadPool::RunCallState.38", align 8
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.38", align 8
  %6 = alloca double, align 8
  %7 = alloca %"class.jxl::ThreadPool", align 8
  %8 = alloca %"class.jxl::Image3"*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %class.anon.10, align 8
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %8, align 8
  %11 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #22
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %9, align 8
  %15 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = bitcast %class.anon.10* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #22
  %18 = getelementptr inbounds %class.anon.10, %class.anon.10* %10, i64 0, i32 0
  store %"class.jxl::Image3"** %8, %"class.jxl::Image3"*** %18, align 8
  %19 = getelementptr inbounds %class.anon.10, %class.anon.10* %10, i64 0, i32 1
  store i64* %9, i64** %19, align 8
  %20 = getelementptr inbounds %class.anon.10, %class.anon.10* %10, i64 0, i32 2
  store %"struct.jxl::OpsinParams"* %2, %"struct.jxl::OpsinParams"** %20, align 8
  %21 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double* nonnull %6) #22
  %22 = icmp eq %"class.jxl::ThreadPool"* %1, null
  br i1 %22, label %23, label %34

23:                                               ; preds = %3
  %24 = bitcast %"class.jxl::ThreadPool"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #22
  %25 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 0
  %26 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %25, align 8
  %27 = bitcast i8** %26 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %7, %"class.jxl::ThreadPool"** %27, align 8
  %28 = icmp eq i32 %16, 0
  br i1 %28, label %45, label %29

29:                                               ; preds = %23
  %30 = bitcast %"class.jxl::ThreadPool::RunCallState.38"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #22
  %31 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.38", %"class.jxl::ThreadPool::RunCallState.38"* %4, i64 0, i32 0
  %32 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.38", %"class.jxl::ThreadPool::RunCallState.38"* %4, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %31, align 8
  store %class.anon.10* %10, %class.anon.10** %32, align 8
  %33 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %24, i8* nonnull %30, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX320OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_8E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX320OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_8E12CallDataFuncEPvjm", i32 0, i32 %16) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #22
  br label %45

34:                                               ; preds = %3
  %35 = icmp eq i32 %16, 0
  br i1 %35, label %47, label %36

36:                                               ; preds = %34
  %37 = bitcast %"class.jxl::ThreadPool::RunCallState.38"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #22
  %38 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.38", %"class.jxl::ThreadPool::RunCallState.38"* %5, i64 0, i32 0
  %39 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.38", %"class.jxl::ThreadPool::RunCallState.38"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %38, align 8
  store %class.anon.10* %10, %class.anon.10** %39, align 8
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 0
  %41 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 1
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 %41(i8* %43, i8* nonnull %37, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX320OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_8E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX320OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_8E12CallDataFuncEPvjm", i32 0, i32 %16) #22
  br label %45

45:                                               ; preds = %23, %29, %36
  %46 = phi i8* [ %37, %36 ], [ %24, %29 ], [ %24, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #22
  br label %47

47:                                               ; preds = %45, %34
  %48 = load double, double* %6, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double %48) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #22
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX313OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias, %"struct.jxl::OpsinParams"* dereferenceable(192)) #7 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.39", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.39", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca %class.anon.11, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = icmp eq i64 %13, %16
  br i1 %17, label %18, label %25

18:                                               ; preds = %5
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i64
  %24 = icmp eq i64 %20, %23
  br i1 %24, label %28, label %25

25:                                               ; preds = %5, %18
  %26 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #22
  %27 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

28:                                               ; preds = %18
  %29 = trunc i64 %20 to i32
  %30 = bitcast %class.anon.11* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #22
  %31 = getelementptr inbounds %class.anon.11, %class.anon.11* %11, i64 0, i32 0
  store %"class.jxl::Rect"* %1, %"class.jxl::Rect"** %31, align 8
  %32 = getelementptr inbounds %class.anon.11, %class.anon.11* %11, i64 0, i32 1
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %32, align 8
  %33 = getelementptr inbounds %class.anon.11, %class.anon.11* %11, i64 0, i32 2
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %33, align 8
  %34 = getelementptr inbounds %class.anon.11, %class.anon.11* %11, i64 0, i32 3
  store %"struct.jxl::OpsinParams"* %4, %"struct.jxl::OpsinParams"** %34, align 8
  %35 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), double* nonnull %8) #22
  %36 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %36, label %37, label %48

37:                                               ; preds = %28
  %38 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #22
  %39 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %39, align 8
  %41 = bitcast i8** %40 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %41, align 8
  %42 = icmp eq i32 %29, 0
  br i1 %42, label %59, label %43

43:                                               ; preds = %37
  %44 = bitcast %"class.jxl::ThreadPool::RunCallState.39"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #22
  %45 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.39", %"class.jxl::ThreadPool::RunCallState.39"* %6, i64 0, i32 0
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.39", %"class.jxl::ThreadPool::RunCallState.39"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %45, align 8
  store %class.anon.11* %11, %class.anon.11** %46, align 8
  %47 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %38, i8* nonnull %44, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX313OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_9E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX313OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_9E12CallDataFuncEPvjm", i32 0, i32 %29) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #22
  br label %59

48:                                               ; preds = %28
  %49 = icmp eq i32 %29, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %48
  %51 = bitcast %"class.jxl::ThreadPool::RunCallState.39"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #22
  %52 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.39", %"class.jxl::ThreadPool::RunCallState.39"* %7, i64 0, i32 0
  %53 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.39", %"class.jxl::ThreadPool::RunCallState.39"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %52, align 8
  store %class.anon.11* %11, %class.anon.11** %53, align 8
  %54 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %55 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 %55(i8* %57, i8* nonnull %51, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX313OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_9E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX313OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_9E12CallDataFuncEPvjm", i32 0, i32 %29) #22
  br label %59

59:                                               ; preds = %37, %43, %50
  %60 = phi i8* [ %51, %50 ], [ %38, %43 ], [ %38, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %60) #22
  br label %61

61:                                               ; preds = %59, %48
  %62 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), double %62) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #22
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX310YcbcrToRgbERKNS_6Image3IfEEPS2_RKNS_4RectE(%"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32)) #8 {
  %4 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = icmp ne i64 %5, 0
  %9 = icmp ne i64 %7, 0
  %10 = and i1 %9, %8
  br i1 %10, label %11, label %122

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %22

22:                                               ; preds = %11, %91
  %23 = phi i64 [ 0, %11 ], [ %92, %91 ]
  %24 = load i64, i64* %12, align 8
  %25 = add i64 %24, %23
  %26 = load i64, i64* %13, align 8
  %27 = mul i64 %26, %25
  %28 = load i8*, i8** %14, align 8
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #22
  %32 = getelementptr inbounds i8, i8* %28, i64 %27
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #22
  %36 = bitcast i8* %32 to float*
  %37 = load i64, i64* %15, align 8
  %38 = getelementptr inbounds float, float* %36, i64 %37
  %39 = load i8*, i8** %16, align 8
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #22
  %43 = getelementptr inbounds i8, i8* %39, i64 %27
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #22
  %47 = bitcast i8* %43 to float*
  %48 = getelementptr inbounds float, float* %47, i64 %37
  %49 = load i8*, i8** %17, align 8
  %50 = ptrtoint i8* %49 to i64
  %51 = and i64 %50, 63
  %52 = icmp eq i64 %51, 0
  tail call void @llvm.assume(i1 %52) #22
  %53 = getelementptr inbounds i8, i8* %49, i64 %27
  %54 = ptrtoint i8* %53 to i64
  %55 = and i64 %54, 63
  %56 = icmp eq i64 %55, 0
  tail call void @llvm.assume(i1 %56) #22
  %57 = bitcast i8* %53 to float*
  %58 = getelementptr inbounds float, float* %57, i64 %37
  %59 = load i64, i64* %18, align 8
  %60 = mul i64 %59, %25
  %61 = load i8*, i8** %19, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #22
  %65 = getelementptr inbounds i8, i8* %61, i64 %60
  %66 = ptrtoint i8* %65 to i64
  %67 = and i64 %66, 63
  %68 = icmp eq i64 %67, 0
  tail call void @llvm.assume(i1 %68) #22
  %69 = bitcast i8* %65 to float*
  %70 = getelementptr inbounds float, float* %69, i64 %37
  %71 = load i8*, i8** %20, align 8
  %72 = ptrtoint i8* %71 to i64
  %73 = and i64 %72, 63
  %74 = icmp eq i64 %73, 0
  tail call void @llvm.assume(i1 %74) #22
  %75 = getelementptr inbounds i8, i8* %71, i64 %60
  %76 = ptrtoint i8* %75 to i64
  %77 = and i64 %76, 63
  %78 = icmp eq i64 %77, 0
  tail call void @llvm.assume(i1 %78) #22
  %79 = bitcast i8* %75 to float*
  %80 = getelementptr inbounds float, float* %79, i64 %37
  %81 = load i8*, i8** %21, align 8
  %82 = ptrtoint i8* %81 to i64
  %83 = and i64 %82, 63
  %84 = icmp eq i64 %83, 0
  tail call void @llvm.assume(i1 %84) #22
  %85 = getelementptr inbounds i8, i8* %81, i64 %60
  %86 = ptrtoint i8* %85 to i64
  %87 = and i64 %86, 63
  %88 = icmp eq i64 %87, 0
  tail call void @llvm.assume(i1 %88) #22
  %89 = bitcast i8* %85 to float*
  %90 = getelementptr inbounds float, float* %89, i64 %37
  br label %94

91:                                               ; preds = %94
  %92 = add nuw i64 %23, 1
  %93 = icmp eq i64 %92, %7
  br i1 %93, label %122, label %22

94:                                               ; preds = %22, %94
  %95 = phi i64 [ %120, %94 ], [ 0, %22 ]
  %96 = getelementptr inbounds float, float* %38, i64 %95
  %97 = bitcast float* %96 to <8 x float>*
  %98 = load <8 x float>, <8 x float>* %97, align 32, !alias.scope !50, !noalias !53
  %99 = fadd <8 x float> %98, <float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000>
  %100 = getelementptr inbounds float, float* %48, i64 %95
  %101 = bitcast float* %100 to <8 x float>*
  %102 = load <8 x float>, <8 x float>* %101, align 32, !alias.scope !55, !noalias !58
  %103 = getelementptr inbounds float, float* %58, i64 %95
  %104 = bitcast float* %103 to <8 x float>*
  %105 = load <8 x float>, <8 x float>* %104, align 32, !alias.scope !60, !noalias !63
  %106 = fmul <8 x float> %105, <float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000>
  %107 = fadd <8 x float> %99, %106
  %108 = fmul <8 x float> %105, <float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000, float 0xBFE6DA3440000000>
  %109 = fmul <8 x float> %102, <float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000, float 0xBFD6065420000000>
  %110 = fadd <8 x float> %109, %108
  %111 = fadd <8 x float> %99, %110
  %112 = fmul <8 x float> %102, <float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000>
  %113 = fadd <8 x float> %99, %112
  %114 = getelementptr inbounds float, float* %70, i64 %95
  %115 = bitcast float* %114 to <8 x float>*
  store <8 x float> %107, <8 x float>* %115, align 32, !alias.scope !65
  %116 = getelementptr inbounds float, float* %80, i64 %95
  %117 = bitcast float* %116 to <8 x float>*
  store <8 x float> %111, <8 x float>* %117, align 32, !alias.scope !68
  %118 = getelementptr inbounds float, float* %90, i64 %95
  %119 = bitcast float* %118 to <8 x float>*
  store <8 x float> %113, <8 x float>* %119, align 32, !alias.scope !71
  %120 = add i64 %95, 8
  %121 = icmp ult i64 %120, %5
  br i1 %121, label %94, label %91

122:                                              ; preds = %91, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::ThreadPool"* readonly) #9 {
  %4 = alloca %"class.jxl::ThreadPool::RunCallState.40", align 8
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.40", align 8
  %6 = alloca double, align 8
  %7 = alloca %"class.jxl::ThreadPool", align 8
  %8 = alloca i64, align 8
  %9 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %10 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %class.anon.14, align 8
  %15 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #22
  store i64 16, i64* %8, align 8
  %16 = bitcast %"class.hwy::N_AVX3::Vec512"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %16) #22
  %17 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %9, i64 0, i32 0
  store <16 x float> <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>, <16 x float>* %17, align 64, !alias.scope !74
  %18 = bitcast %"class.hwy::N_AVX3::Vec512"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %18) #22
  %19 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %10, i64 0, i32 0
  store <16 x float> <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>, <16 x float>* %19, align 64, !alias.scope !77
  %20 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #22
  %21 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = zext i32 %22 to i64
  store i64 %23, i64* %11, align 8
  %24 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #22
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %12, align 8
  %28 = icmp eq i32 %22, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %3
  %30 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 177, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0)) #22
  %31 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

32:                                               ; preds = %3
  %33 = icmp eq i32 %26, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %32
  %35 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 178, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0)) #22
  %36 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = shl nuw nsw i64 %27, 1
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  %41 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 -86, i64 32, i1 false)
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %40, i64 %23, i64 %39, i64 4) #22
  %42 = icmp eq i32 %26, 1
  br i1 %42, label %43, label %65

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %45 = load i8*, i8** %38, align 8
  %46 = ptrtoint i8* %45 to i64
  %47 = and i64 %46, 63
  %48 = icmp eq i64 %47, 0
  tail call void @llvm.assume(i1 %48) #22
  %49 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #22
  %54 = shl nuw nsw i64 %23, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %45, i8* align 64 %50, i64 %54, i1 false)
  %55 = load i8*, i8** %38, align 8
  %56 = load i64, i64* %44, align 8
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #22
  %61 = load i8*, i8** %49, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #22
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %57, i8* align 64 %61, i64 %54, i1 false)
  br label %111

65:                                               ; preds = %37
  %66 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #22
  %67 = add nuw nsw i64 %23, 65535
  %68 = udiv i64 %67, %23
  store i64 %68, i64* %13, align 8
  %69 = add nsw i64 %27, -1
  %70 = add nsw i64 %69, %68
  %71 = udiv i64 %70, %68
  %72 = bitcast %class.anon.14* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %72) #22
  %73 = getelementptr inbounds %class.anon.14, %class.anon.14* %14, i64 0, i32 0
  store i64* %13, i64** %73, align 8
  %74 = getelementptr inbounds %class.anon.14, %class.anon.14* %14, i64 0, i32 1
  store i64* %12, i64** %74, align 8
  %75 = getelementptr inbounds %class.anon.14, %class.anon.14* %14, i64 0, i32 2
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %75, align 8
  %76 = getelementptr inbounds %class.anon.14, %class.anon.14* %14, i64 0, i32 3
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %76, align 8
  %77 = getelementptr inbounds %class.anon.14, %class.anon.14* %14, i64 0, i32 4
  store i64* %11, i64** %77, align 8
  %78 = getelementptr inbounds %class.anon.14, %class.anon.14* %14, i64 0, i32 5
  store i64* %8, i64** %78, align 8
  %79 = getelementptr inbounds %class.anon.14, %class.anon.14* %14, i64 0, i32 6
  store %"struct.hwy::N_AVX3::Simd.12"* @_ZZN3jxl6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEE2df, %"struct.hwy::N_AVX3::Simd.12"** %79, align 8
  %80 = getelementptr inbounds %class.anon.14, %class.anon.14* %14, i64 0, i32 7
  store %"class.hwy::N_AVX3::Vec512"* %10, %"class.hwy::N_AVX3::Vec512"** %80, align 8
  %81 = getelementptr inbounds %class.anon.14, %class.anon.14* %14, i64 0, i32 8
  store %"class.hwy::N_AVX3::Vec512"* %9, %"class.hwy::N_AVX3::Vec512"** %81, align 8
  %82 = trunc i64 %71 to i32
  %83 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double* nonnull %6) #22
  %84 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %84, label %85, label %96

85:                                               ; preds = %65
  %86 = bitcast %"class.jxl::ThreadPool"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %86) #22
  %87 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %87, align 8
  %89 = bitcast i8** %88 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %7, %"class.jxl::ThreadPool"** %89, align 8
  %90 = icmp eq i32 %82, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %85
  %92 = bitcast %"class.jxl::ThreadPool::RunCallState.40"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %92) #22
  %93 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.40", %"class.jxl::ThreadPool::RunCallState.40"* %4, i64 0, i32 0
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.40", %"class.jxl::ThreadPool::RunCallState.40"* %4, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %93, align 8
  store %class.anon.14* %14, %class.anon.14** %94, align 8
  %95 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %86, i8* nonnull %92, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_10E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_10E12CallDataFuncEPvjm", i32 0, i32 %82) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #22
  br label %107

96:                                               ; preds = %65
  %97 = icmp eq i32 %82, 0
  br i1 %97, label %109, label %98

98:                                               ; preds = %96
  %99 = bitcast %"class.jxl::ThreadPool::RunCallState.40"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99) #22
  %100 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.40", %"class.jxl::ThreadPool::RunCallState.40"* %5, i64 0, i32 0
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.40", %"class.jxl::ThreadPool::RunCallState.40"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %100, align 8
  store %class.anon.14* %14, %class.anon.14** %101, align 8
  %102 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %103 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 %103(i8* %105, i8* nonnull %99, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_10E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_10E12CallDataFuncEPvjm", i32 0, i32 %82) #22
  br label %107

107:                                              ; preds = %85, %91, %98
  %108 = phi i8* [ %99, %98 ], [ %86, %91 ], [ %86, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #22
  br label %109

109:                                              ; preds = %107, %96
  %110 = load double, double* %6, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double %110) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #22
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %72) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #22
  br label %111

111:                                              ; preds = %43, %109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #22
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %18) #22
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %16) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX310UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), i64, %"class.jxl::ThreadPool"* readonly) #7 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.41", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.41", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %"struct.hwy::N_AVX3::Simd.15", align 1
  %13 = alloca %class.anon.17, align 8
  %14 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #22
  %15 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %9, align 8
  %18 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #22
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  store i64 %21, i64* %10, align 8
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %4
  %24 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 228, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0)) #22
  %25 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

26:                                               ; preds = %4
  %27 = icmp eq i32 %20, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %26
  %29 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 229, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0)) #22
  %30 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

31:                                               ; preds = %26
  %32 = add i64 %2, 1
  %33 = lshr i64 %32, 1
  %34 = icmp eq i64 %33, %17
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 230, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i64 0, i64 0)) #22
  %37 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  %40 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 -86, i64 32, i1 false)
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %39, i64 %2, i64 %21, i64 4) #22
  %41 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #22
  %42 = add nuw nsw i64 %17, 65535
  %43 = udiv i64 %42, %17
  store i64 %43, i64* %11, align 8
  %44 = add nsw i64 %43, -1
  %45 = add nsw i64 %44, %21
  %46 = udiv i64 %45, %43
  %47 = getelementptr inbounds %"struct.hwy::N_AVX3::Simd.15", %"struct.hwy::N_AVX3::Simd.15"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %47) #22
  store i8 -86, i8* %47, align 1
  %48 = bitcast %class.anon.17* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %48) #22
  %49 = getelementptr inbounds %class.anon.17, %class.anon.17* %13, i64 0, i32 0
  %50 = getelementptr inbounds %class.anon.17, %class.anon.17* %13, i64 0, i32 1
  %51 = getelementptr inbounds %class.anon.17, %class.anon.17* %13, i64 0, i32 2
  %52 = getelementptr inbounds %class.anon.17, %class.anon.17* %13, i64 0, i32 3
  %53 = getelementptr inbounds %class.anon.17, %class.anon.17* %13, i64 0, i32 4
  %54 = getelementptr inbounds %class.anon.17, %class.anon.17* %13, i64 0, i32 5
  store i64* %11, i64** %49, align 8
  store i64* %10, i64** %50, align 8
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %51, align 8
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %52, align 8
  store %"struct.hwy::N_AVX3::Simd.15"* %12, %"struct.hwy::N_AVX3::Simd.15"** %53, align 8
  store i64* %9, i64** %54, align 8
  %55 = trunc i64 %46 to i32
  %56 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), double* nonnull %7) #22
  %57 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %57, label %58, label %69

58:                                               ; preds = %38
  %59 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #22
  %60 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %61 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %60, align 8
  %62 = bitcast i8** %61 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %62, align 8
  %63 = icmp eq i32 %55, 0
  br i1 %63, label %80, label %64

64:                                               ; preds = %58
  %65 = bitcast %"class.jxl::ThreadPool::RunCallState.41"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %65) #22
  %66 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.41", %"class.jxl::ThreadPool::RunCallState.41"* %5, i64 0, i32 0
  %67 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.41", %"class.jxl::ThreadPool::RunCallState.41"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %66, align 8
  store %class.anon.17* %13, %class.anon.17** %67, align 8
  %68 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %59, i8* nonnull %65, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_11E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_11E12CallDataFuncEPvjm", i32 0, i32 %55) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %65) #22
  br label %80

69:                                               ; preds = %38
  %70 = icmp eq i32 %55, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %69
  %72 = bitcast %"class.jxl::ThreadPool::RunCallState.41"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %72) #22
  %73 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.41", %"class.jxl::ThreadPool::RunCallState.41"* %6, i64 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.41", %"class.jxl::ThreadPool::RunCallState.41"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %73, align 8
  store %class.anon.17* %13, %class.anon.17** %74, align 8
  %75 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %76 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %75, align 8
  %77 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 %76(i8* %78, i8* nonnull %72, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_11E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_11E12CallDataFuncEPvjm", i32 0, i32 %55) #22
  br label %80

80:                                               ; preds = %58, %64, %71
  %81 = phi i8* [ %72, %71 ], [ %59, %64 ], [ %59, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #22
  br label %82

82:                                               ; preds = %80, %69
  %83 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), double %83) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %48) #22
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %47) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR20OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsE(%"class.jxl::Image3"* noalias, %"class.jxl::ThreadPool"* readonly, %"struct.jxl::OpsinParams"* dereferenceable(192)) #10 {
  %4 = alloca %"class.jxl::ThreadPool::RunCallState.42", align 8
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.42", align 8
  %6 = alloca double, align 8
  %7 = alloca %"class.jxl::ThreadPool", align 8
  %8 = alloca %"class.jxl::Image3"*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %class.anon.18, align 8
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %8, align 8
  %11 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #22
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %9, align 8
  %15 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = bitcast %class.anon.18* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #22
  %18 = getelementptr inbounds %class.anon.18, %class.anon.18* %10, i64 0, i32 0
  store %"class.jxl::Image3"** %8, %"class.jxl::Image3"*** %18, align 8
  %19 = getelementptr inbounds %class.anon.18, %class.anon.18* %10, i64 0, i32 1
  store i64* %9, i64** %19, align 8
  %20 = getelementptr inbounds %class.anon.18, %class.anon.18* %10, i64 0, i32 2
  store %"struct.jxl::OpsinParams"* %2, %"struct.jxl::OpsinParams"** %20, align 8
  %21 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double* nonnull %6) #22
  %22 = icmp eq %"class.jxl::ThreadPool"* %1, null
  br i1 %22, label %23, label %34

23:                                               ; preds = %3
  %24 = bitcast %"class.jxl::ThreadPool"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #22
  %25 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 0
  %26 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %25, align 8
  %27 = bitcast i8** %26 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %7, %"class.jxl::ThreadPool"** %27, align 8
  %28 = icmp eq i32 %16, 0
  br i1 %28, label %45, label %29

29:                                               ; preds = %23
  %30 = bitcast %"class.jxl::ThreadPool::RunCallState.42"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #22
  %31 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.42", %"class.jxl::ThreadPool::RunCallState.42"* %4, i64 0, i32 0
  %32 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.42", %"class.jxl::ThreadPool::RunCallState.42"* %4, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %31, align 8
  store %class.anon.18* %10, %class.anon.18** %32, align 8
  %33 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %24, i8* nonnull %30, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR20OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE4$_12E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR20OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE4$_12E12CallDataFuncEPvjm", i32 0, i32 %16) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #22
  br label %45

34:                                               ; preds = %3
  %35 = icmp eq i32 %16, 0
  br i1 %35, label %47, label %36

36:                                               ; preds = %34
  %37 = bitcast %"class.jxl::ThreadPool::RunCallState.42"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #22
  %38 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.42", %"class.jxl::ThreadPool::RunCallState.42"* %5, i64 0, i32 0
  %39 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.42", %"class.jxl::ThreadPool::RunCallState.42"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %38, align 8
  store %class.anon.18* %10, %class.anon.18** %39, align 8
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 0
  %41 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 1
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 %41(i8* %43, i8* nonnull %37, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR20OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE4$_12E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR20OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE4$_12E12CallDataFuncEPvjm", i32 0, i32 %16) #22
  br label %45

45:                                               ; preds = %23, %29, %36
  %46 = phi i8* [ %37, %36 ], [ %24, %29 ], [ %24, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #22
  br label %47

47:                                               ; preds = %45, %34
  %48 = load double, double* %6, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double %48) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #22
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR13OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias, %"struct.jxl::OpsinParams"* dereferenceable(192)) #10 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.43", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.43", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca %class.anon.19, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = icmp eq i64 %13, %16
  br i1 %17, label %18, label %25

18:                                               ; preds = %5
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i64
  %24 = icmp eq i64 %20, %23
  br i1 %24, label %28, label %25

25:                                               ; preds = %5, %18
  %26 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #22
  %27 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

28:                                               ; preds = %18
  %29 = trunc i64 %20 to i32
  %30 = bitcast %class.anon.19* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #22
  %31 = getelementptr inbounds %class.anon.19, %class.anon.19* %11, i64 0, i32 0
  store %"class.jxl::Rect"* %1, %"class.jxl::Rect"** %31, align 8
  %32 = getelementptr inbounds %class.anon.19, %class.anon.19* %11, i64 0, i32 1
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %32, align 8
  %33 = getelementptr inbounds %class.anon.19, %class.anon.19* %11, i64 0, i32 2
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %33, align 8
  %34 = getelementptr inbounds %class.anon.19, %class.anon.19* %11, i64 0, i32 3
  store %"struct.jxl::OpsinParams"* %4, %"struct.jxl::OpsinParams"** %34, align 8
  %35 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), double* nonnull %8) #22
  %36 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %36, label %37, label %48

37:                                               ; preds = %28
  %38 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #22
  %39 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %39, align 8
  %41 = bitcast i8** %40 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %41, align 8
  %42 = icmp eq i32 %29, 0
  br i1 %42, label %59, label %43

43:                                               ; preds = %37
  %44 = bitcast %"class.jxl::ThreadPool::RunCallState.43"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #22
  %45 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.43", %"class.jxl::ThreadPool::RunCallState.43"* %6, i64 0, i32 0
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.43", %"class.jxl::ThreadPool::RunCallState.43"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %45, align 8
  store %class.anon.19* %11, %class.anon.19** %46, align 8
  %47 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %38, i8* nonnull %44, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR13OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE4$_13E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR13OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE4$_13E12CallDataFuncEPvjm", i32 0, i32 %29) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #22
  br label %59

48:                                               ; preds = %28
  %49 = icmp eq i32 %29, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %48
  %51 = bitcast %"class.jxl::ThreadPool::RunCallState.43"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #22
  %52 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.43", %"class.jxl::ThreadPool::RunCallState.43"* %7, i64 0, i32 0
  %53 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.43", %"class.jxl::ThreadPool::RunCallState.43"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %52, align 8
  store %class.anon.19* %11, %class.anon.19** %53, align 8
  %54 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %55 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 %55(i8* %57, i8* nonnull %51, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR13OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE4$_13E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR13OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE4$_13E12CallDataFuncEPvjm", i32 0, i32 %29) #22
  br label %59

59:                                               ; preds = %37, %43, %50
  %60 = phi i8* [ %51, %50 ], [ %38, %43 ], [ %38, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %60) #22
  br label %61

61:                                               ; preds = %59, %48
  %62 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), double %62) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #22
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR10YcbcrToRgbERKNS_6Image3IfEEPS2_RKNS_4RectE(%"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32)) #10 {
  %4 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = icmp ne i64 %5, 0
  %9 = icmp ne i64 %7, 0
  %10 = and i1 %9, %8
  br i1 %10, label %11, label %116

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %22

22:                                               ; preds = %11, %91
  %23 = phi i64 [ 0, %11 ], [ %92, %91 ]
  %24 = load i64, i64* %12, align 8
  %25 = add i64 %24, %23
  %26 = load i64, i64* %13, align 8
  %27 = mul i64 %26, %25
  %28 = load i8*, i8** %14, align 8
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #22
  %32 = getelementptr inbounds i8, i8* %28, i64 %27
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #22
  %36 = bitcast i8* %32 to float*
  %37 = load i64, i64* %15, align 8
  %38 = getelementptr inbounds float, float* %36, i64 %37
  %39 = load i8*, i8** %16, align 8
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #22
  %43 = getelementptr inbounds i8, i8* %39, i64 %27
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #22
  %47 = bitcast i8* %43 to float*
  %48 = getelementptr inbounds float, float* %47, i64 %37
  %49 = load i8*, i8** %17, align 8
  %50 = ptrtoint i8* %49 to i64
  %51 = and i64 %50, 63
  %52 = icmp eq i64 %51, 0
  tail call void @llvm.assume(i1 %52) #22
  %53 = getelementptr inbounds i8, i8* %49, i64 %27
  %54 = ptrtoint i8* %53 to i64
  %55 = and i64 %54, 63
  %56 = icmp eq i64 %55, 0
  tail call void @llvm.assume(i1 %56) #22
  %57 = bitcast i8* %53 to float*
  %58 = getelementptr inbounds float, float* %57, i64 %37
  %59 = load i64, i64* %18, align 8
  %60 = mul i64 %59, %25
  %61 = load i8*, i8** %19, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #22
  %65 = getelementptr inbounds i8, i8* %61, i64 %60
  %66 = ptrtoint i8* %65 to i64
  %67 = and i64 %66, 63
  %68 = icmp eq i64 %67, 0
  tail call void @llvm.assume(i1 %68) #22
  %69 = bitcast i8* %65 to float*
  %70 = getelementptr inbounds float, float* %69, i64 %37
  %71 = load i8*, i8** %20, align 8
  %72 = ptrtoint i8* %71 to i64
  %73 = and i64 %72, 63
  %74 = icmp eq i64 %73, 0
  tail call void @llvm.assume(i1 %74) #22
  %75 = getelementptr inbounds i8, i8* %71, i64 %60
  %76 = ptrtoint i8* %75 to i64
  %77 = and i64 %76, 63
  %78 = icmp eq i64 %77, 0
  tail call void @llvm.assume(i1 %78) #22
  %79 = bitcast i8* %75 to float*
  %80 = getelementptr inbounds float, float* %79, i64 %37
  %81 = load i8*, i8** %21, align 8
  %82 = ptrtoint i8* %81 to i64
  %83 = and i64 %82, 63
  %84 = icmp eq i64 %83, 0
  tail call void @llvm.assume(i1 %84) #22
  %85 = getelementptr inbounds i8, i8* %81, i64 %60
  %86 = ptrtoint i8* %85 to i64
  %87 = and i64 %86, 63
  %88 = icmp eq i64 %87, 0
  tail call void @llvm.assume(i1 %88) #22
  %89 = bitcast i8* %85 to float*
  %90 = getelementptr inbounds float, float* %89, i64 %37
  br label %94

91:                                               ; preds = %94
  %92 = add nuw i64 %23, 1
  %93 = icmp eq i64 %92, %7
  br i1 %93, label %116, label %22

94:                                               ; preds = %94, %22
  %95 = phi i64 [ %114, %94 ], [ 0, %22 ]
  %96 = getelementptr inbounds float, float* %38, i64 %95
  %97 = load float, float* %96, align 4, !alias.scope !80
  %98 = fadd float %97, 0x3FE0101020000000
  %99 = getelementptr inbounds float, float* %48, i64 %95
  %100 = load float, float* %99, align 4, !alias.scope !83
  %101 = getelementptr inbounds float, float* %58, i64 %95
  %102 = load float, float* %101, align 4, !alias.scope !86
  %103 = fmul float %102, 0x3FF66E9780000000
  %104 = fadd float %98, %103
  %105 = fmul float %102, 0x3FE6DA3440000000
  %106 = fmul float %100, 0xBFD6065420000000
  %107 = fsub float %106, %105
  %108 = fadd float %98, %107
  %109 = fmul float %100, 0x3FFC5A1CA0000000
  %110 = fadd float %98, %109
  %111 = getelementptr inbounds float, float* %70, i64 %95
  store float %104, float* %111, align 4, !alias.scope !89
  %112 = getelementptr inbounds float, float* %80, i64 %95
  store float %108, float* %112, align 4, !alias.scope !92
  %113 = getelementptr inbounds float, float* %90, i64 %95
  store float %110, float* %113, align 4, !alias.scope !95
  %114 = add nuw i64 %95, 1
  %115 = icmp eq i64 %114, %5
  br i1 %115, label %91, label %94

116:                                              ; preds = %91, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR10UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::ThreadPool"* readonly) #10 {
  %4 = alloca %"class.jxl::ThreadPool::RunCallState.44", align 8
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.44", align 8
  %6 = alloca double, align 8
  %7 = alloca %"class.jxl::ThreadPool", align 8
  %8 = alloca i64, align 8
  %9 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %10 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %class.anon.20, align 8
  %15 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #22
  store i64 1, i64* %8, align 8
  %16 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #22
  %17 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %9, i64 0, i32 0
  store float 2.500000e-01, float* %17, align 4
  %18 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #22
  %19 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %10, i64 0, i32 0
  store float 7.500000e-01, float* %19, align 4
  %20 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #22
  %21 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = zext i32 %22 to i64
  store i64 %23, i64* %11, align 8
  %24 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #22
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %12, align 8
  %28 = icmp eq i32 %22, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %3
  %30 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 177, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0)) #22
  %31 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

32:                                               ; preds = %3
  %33 = icmp eq i32 %26, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %32
  %35 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 178, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0)) #22
  %36 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = shl nuw nsw i64 %27, 1
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  %41 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 -86, i64 32, i1 false)
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %40, i64 %23, i64 %39, i64 4) #22
  %42 = icmp eq i32 %26, 1
  br i1 %42, label %43, label %65

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %45 = load i8*, i8** %38, align 8
  %46 = ptrtoint i8* %45 to i64
  %47 = and i64 %46, 63
  %48 = icmp eq i64 %47, 0
  tail call void @llvm.assume(i1 %48) #22
  %49 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #22
  %54 = shl nuw nsw i64 %23, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %45, i8* align 64 %50, i64 %54, i1 false)
  %55 = load i8*, i8** %38, align 8
  %56 = load i64, i64* %44, align 8
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #22
  %61 = load i8*, i8** %49, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #22
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %57, i8* align 64 %61, i64 %54, i1 false)
  br label %111

65:                                               ; preds = %37
  %66 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #22
  %67 = add nuw nsw i64 %23, 65535
  %68 = udiv i64 %67, %23
  store i64 %68, i64* %13, align 8
  %69 = add nsw i64 %27, -1
  %70 = add nsw i64 %69, %68
  %71 = udiv i64 %70, %68
  %72 = bitcast %class.anon.20* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %72) #22
  %73 = getelementptr inbounds %class.anon.20, %class.anon.20* %14, i64 0, i32 0
  store i64* %13, i64** %73, align 8
  %74 = getelementptr inbounds %class.anon.20, %class.anon.20* %14, i64 0, i32 1
  store i64* %12, i64** %74, align 8
  %75 = getelementptr inbounds %class.anon.20, %class.anon.20* %14, i64 0, i32 2
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %75, align 8
  %76 = getelementptr inbounds %class.anon.20, %class.anon.20* %14, i64 0, i32 3
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %76, align 8
  %77 = getelementptr inbounds %class.anon.20, %class.anon.20* %14, i64 0, i32 4
  store i64* %11, i64** %77, align 8
  %78 = getelementptr inbounds %class.anon.20, %class.anon.20* %14, i64 0, i32 5
  store i64* %8, i64** %78, align 8
  %79 = getelementptr inbounds %class.anon.20, %class.anon.20* %14, i64 0, i32 6
  store %"struct.hwy::N_SCALAR::Simd"* @_ZZN3jxl8N_SCALAR10UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEE2df, %"struct.hwy::N_SCALAR::Simd"** %79, align 8
  %80 = getelementptr inbounds %class.anon.20, %class.anon.20* %14, i64 0, i32 7
  store %"struct.hwy::N_SCALAR::Vec1"* %10, %"struct.hwy::N_SCALAR::Vec1"** %80, align 8
  %81 = getelementptr inbounds %class.anon.20, %class.anon.20* %14, i64 0, i32 8
  store %"struct.hwy::N_SCALAR::Vec1"* %9, %"struct.hwy::N_SCALAR::Vec1"** %81, align 8
  %82 = trunc i64 %71 to i32
  %83 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double* nonnull %6) #22
  %84 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %84, label %85, label %96

85:                                               ; preds = %65
  %86 = bitcast %"class.jxl::ThreadPool"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %86) #22
  %87 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %7, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %87, align 8
  %89 = bitcast i8** %88 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %7, %"class.jxl::ThreadPool"** %89, align 8
  %90 = icmp eq i32 %82, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %85
  %92 = bitcast %"class.jxl::ThreadPool::RunCallState.44"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %92) #22
  %93 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.44", %"class.jxl::ThreadPool::RunCallState.44"* %4, i64 0, i32 0
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.44", %"class.jxl::ThreadPool::RunCallState.44"* %4, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %93, align 8
  store %class.anon.20* %14, %class.anon.20** %94, align 8
  %95 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %86, i8* nonnull %92, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_14E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_14E12CallDataFuncEPvjm", i32 0, i32 %82) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #22
  br label %107

96:                                               ; preds = %65
  %97 = icmp eq i32 %82, 0
  br i1 %97, label %109, label %98

98:                                               ; preds = %96
  %99 = bitcast %"class.jxl::ThreadPool::RunCallState.44"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99) #22
  %100 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.44", %"class.jxl::ThreadPool::RunCallState.44"* %5, i64 0, i32 0
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.44", %"class.jxl::ThreadPool::RunCallState.44"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %100, align 8
  store %class.anon.20* %14, %class.anon.20** %101, align 8
  %102 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %103 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 %103(i8* %105, i8* nonnull %99, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_14E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_14E12CallDataFuncEPvjm", i32 0, i32 %82) #22
  br label %107

107:                                              ; preds = %85, %91, %98
  %108 = phi i8* [ %99, %98 ], [ %86, %91 ], [ %86, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #22
  br label %109

109:                                              ; preds = %107, %96
  %110 = load double, double* %6, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double %110) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #22
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %72) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #22
  br label %111

111:                                              ; preds = %43, %109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #22
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #22
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR10UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), i64, %"class.jxl::ThreadPool"* readonly) #10 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.45", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.45", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %"struct.hwy::N_SCALAR::Simd", align 1
  %13 = alloca %class.anon.21, align 8
  %14 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #22
  %15 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %9, align 8
  %18 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #22
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  store i64 %21, i64* %10, align 8
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %4
  %24 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 228, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0)) #22
  %25 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

26:                                               ; preds = %4
  %27 = icmp eq i32 %20, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %26
  %29 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 229, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0)) #22
  %30 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

31:                                               ; preds = %26
  %32 = add i64 %2, 1
  %33 = lshr i64 %32, 1
  %34 = icmp eq i64 %33, %17
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 230, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i64 0, i64 0)) #22
  %37 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  %40 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 -86, i64 32, i1 false)
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %39, i64 %2, i64 %21, i64 4) #22
  %41 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #22
  %42 = add nuw nsw i64 %17, 65535
  %43 = udiv i64 %42, %17
  store i64 %43, i64* %11, align 8
  %44 = add nsw i64 %43, -1
  %45 = add nsw i64 %44, %21
  %46 = udiv i64 %45, %43
  %47 = getelementptr inbounds %"struct.hwy::N_SCALAR::Simd", %"struct.hwy::N_SCALAR::Simd"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %47) #22
  store i8 -86, i8* %47, align 1
  %48 = bitcast %class.anon.21* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %48) #22
  %49 = getelementptr inbounds %class.anon.21, %class.anon.21* %13, i64 0, i32 0
  %50 = getelementptr inbounds %class.anon.21, %class.anon.21* %13, i64 0, i32 1
  %51 = getelementptr inbounds %class.anon.21, %class.anon.21* %13, i64 0, i32 2
  %52 = getelementptr inbounds %class.anon.21, %class.anon.21* %13, i64 0, i32 3
  %53 = getelementptr inbounds %class.anon.21, %class.anon.21* %13, i64 0, i32 4
  %54 = getelementptr inbounds %class.anon.21, %class.anon.21* %13, i64 0, i32 5
  store i64* %11, i64** %49, align 8
  store i64* %10, i64** %50, align 8
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %51, align 8
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %52, align 8
  store %"struct.hwy::N_SCALAR::Simd"* %12, %"struct.hwy::N_SCALAR::Simd"** %53, align 8
  store i64* %9, i64** %54, align 8
  %55 = trunc i64 %46 to i32
  %56 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #22
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), double* nonnull %7) #22
  %57 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %57, label %58, label %69

58:                                               ; preds = %38
  %59 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #22
  %60 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %61 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %60, align 8
  %62 = bitcast i8** %61 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %62, align 8
  %63 = icmp eq i32 %55, 0
  br i1 %63, label %80, label %64

64:                                               ; preds = %58
  %65 = bitcast %"class.jxl::ThreadPool::RunCallState.45"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %65) #22
  %66 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.45", %"class.jxl::ThreadPool::RunCallState.45"* %5, i64 0, i32 0
  %67 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.45", %"class.jxl::ThreadPool::RunCallState.45"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %66, align 8
  store %class.anon.21* %13, %class.anon.21** %67, align 8
  %68 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %59, i8* nonnull %65, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_15E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_15E12CallDataFuncEPvjm", i32 0, i32 %55) #22
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %65) #22
  br label %80

69:                                               ; preds = %38
  %70 = icmp eq i32 %55, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %69
  %72 = bitcast %"class.jxl::ThreadPool::RunCallState.45"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %72) #22
  %73 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.45", %"class.jxl::ThreadPool::RunCallState.45"* %6, i64 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.45", %"class.jxl::ThreadPool::RunCallState.45"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %73, align 8
  store %class.anon.21* %13, %class.anon.21** %74, align 8
  %75 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %76 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %75, align 8
  %77 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 %76(i8* %78, i8* nonnull %72, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_15E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_15E12CallDataFuncEPvjm", i32 0, i32 %55) #22
  br label %80

80:                                               ; preds = %58, %64, %71
  %81 = phi i8* [ %72, %71 ], [ %59, %64 ], [ %59, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #22
  br label %82

82:                                               ; preds = %80, %69
  %83 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), double %83) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %48) #22
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %47) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl20OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsE(%"class.jxl::Image3"* noalias, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"* dereferenceable(192)) local_unnamed_addr #10 {
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #22, !range !98
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)*]* @_ZN3jxlL40OpsinToLinearInplaceHighwayDispatchTableE, i64 0, i64 %7
  %9 = load void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)*, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)** %8, align 8
  tail call void %9(%"class.jxl::Image3"* %0, %"class.jxl::ThreadPool"* %1, %"struct.jxl::OpsinParams"* dereferenceable(192) %2) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl13OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS1_RKNS_11OpsinParamsE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"* noalias, %"struct.jxl::OpsinParams"* dereferenceable(192)) local_unnamed_addr #10 {
  %6 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %7 = and i32 %6, 2225
  %8 = tail call i32 @llvm.cttz.i32(i32 %7, i1 true) #22, !range !98
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)*]* @_ZN3jxlL33OpsinToLinearHighwayDispatchTableE, i64 0, i64 %9
  %11 = load void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)*, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)** %10, align 8
  tail call void %11(%"class.jxl::Image3"* dereferenceable(96) %0, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::ThreadPool"* %2, %"class.jxl::Image3"* %3, %"struct.jxl::OpsinParams"* dereferenceable(192) %4) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl10YcbcrToRgbERKNS_6Image3IfEEPS1_RKNS_4RectE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32)) local_unnamed_addr #10 {
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #22, !range !98
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*]* @_ZN3jxlL30YcbcrToRgbHighwayDispatchTableE, i64 0, i64 %7
  %9 = load void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)** %8, align 8
  tail call void %9(%"class.jxl::Image3"* dereferenceable(96) %0, %"class.jxl::Image3"* %1, %"class.jxl::Rect"* dereferenceable(32) %2) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl10UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::ThreadPool"*) local_unnamed_addr #10 {
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #22, !range !98
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*], [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*]* @_ZN3jxlL30UpsampleV2HighwayDispatchTableE, i64 0, i64 %7
  %9 = load void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)** %8, align 8
  tail call void %9(%"class.jxl::Plane"* sret %0, %"class.jxl::Plane"* dereferenceable(32) %1, %"class.jxl::ThreadPool"* %2) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl10UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), i64, %"class.jxl::ThreadPool"*) local_unnamed_addr #10 {
  %5 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %6 = and i32 %5, 2225
  %7 = tail call i32 @llvm.cttz.i32(i32 %6, i1 true) #22, !range !98
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)*], [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)*]* @_ZN3jxlL30UpsampleH2HighwayDispatchTableE, i64 0, i64 %8
  %10 = load void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)*, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)** %9, align 8
  tail call void %10(%"class.jxl::Plane"* sret %0, %"class.jxl::Plane"* dereferenceable(32) %1, i64 %2, %"class.jxl::ThreadPool"* %3) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3jxl17HasFastXYBTosRGB8Ev() local_unnamed_addr #10 {
  %1 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %2 = and i32 %1, 2225
  %3 = tail call i32 @llvm.cttz.i32(i32 %2, i1 true) #22, !range !98
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [12 x i1 ()*], [12 x i1 ()*]* @_ZN3jxlL37HasFastXYBTosRGB8HighwayDispatchTableE, i64 0, i64 %4
  %6 = load i1 ()*, i1 ()** %5, align 8
  %7 = tail call zeroext i1 %6() #22
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl14FastXYBTosRGB8ERKNS_6Image3IfEERKNS_4RectES6_PKNS_5PlaneIfEES6_bPhmm(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Plane"*, %"class.jxl::Rect"* dereferenceable(32), i1 zeroext, i8* noalias, i64, i64) local_unnamed_addr #10 {
  %10 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %11 = and i32 %10, 2225
  %12 = tail call i32 @llvm.cttz.i32(i32 %11, i1 true) #22, !range !98
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)*]* @_ZN3jxlL34FastXYBTosRGB8HighwayDispatchTableE, i64 0, i64 %13
  %15 = load void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)*, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)** %14, align 8
  tail call void %15(%"class.jxl::Image3"* dereferenceable(96) %0, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::Rect"* dereferenceable(32) %2, %"class.jxl::Plane"* %3, %"class.jxl::Rect"* dereferenceable(32) %4, i1 zeroext %5, i8* %6, i64 %7, i64 %8) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11OpsinParams4InitEf(%"struct.jxl::OpsinParams"*, float) local_unnamed_addr #10 align 2 {
  %3 = tail call float* @_ZN3jxl31GetOpsinAbsorbanceInverseMatrixEv() #22
  %4 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %0, i64 0, i32 0, i64 0
  tail call void @_ZN3jxl21InitSIMDInverseMatrixEPKfPff(float* %3, float* %4, float %1) #22
  %5 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %0, i64 0, i32 1
  %6 = bitcast [4 x float]* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 16 bitcast ([4 x float]* @_ZN3jxlL26kNegOpsinAbsorbanceBiasRGBE to i8*), i64 16, i1 false)
  %7 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %0, i64 0, i32 3, i64 0
  %8 = bitcast float* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 16 bitcast ([4 x float]* @_ZN3jxlL17kDefaultQuantBiasE to i8*), i64 16, i1 false)
  %9 = tail call float @cbrtf(float 0xBF6F12A6C0000000) #30
  %10 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %0, i64 0, i32 2, i64 0
  store float %9, float* %10, align 4
  %11 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %0, i64 0, i32 2, i64 1
  store float %9, float* %11, align 4
  %12 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %0, i64 0, i32 2, i64 2
  store float %9, float* %12, align 4
  %13 = tail call float @cbrtf(float 1.000000e+00) #30
  %14 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %0, i64 0, i32 2, i64 3
  store float %13, float* %14, align 4
  ret void
}

declare void @_ZN3jxl21InitSIMDInverseMatrixEPKfPff(float*, float*, float) local_unnamed_addr #2

declare float* @_ZN3jxl31GetOpsinAbsorbanceInverseMatrixEv() local_unnamed_addr #2

; Function Attrs: nofree nounwind readnone
declare float @cbrtf(float) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl18OutputEncodingInfo3SetERKNS_13ImageMetadataE(%"struct.jxl::OutputEncodingInfo"*, %"struct.jxl::ImageMetadata"* dereferenceable(1600)) local_unnamed_addr #10 align 2 {
  %3 = alloca [9 x float], align 16
  %4 = alloca [9 x float], align 16
  %5 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %6 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %7 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %8 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %9 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %10 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %11 = alloca [9 x float], align 16
  %12 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %13 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %14 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %15 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %16 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %17 = alloca %"struct.jxl::PrimariesCIExy", align 8
  %18 = alloca [9 x float], align 16
  %19 = bitcast [9 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %19) #22
  %20 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 0
  %21 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 18, i32 4, i32 3, i64 0
  %22 = bitcast float* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %19, i8* align 4 %22, i64 36, i1 false)
  %23 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 14, i32 3
  %24 = load float, float* %23, align 4
  %25 = fcmp une float %24, 0.000000e+00
  br i1 %25, label %29, label %26

26:                                               ; preds = %2
  %27 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.17, i64 0, i64 0), i32 250, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.18, i64 0, i64 0)) #22
  %28 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

29:                                               ; preds = %2
  %30 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 5
  %31 = load i8, i8* %30, align 1, !range !99
  %32 = icmp eq i8 %31, 0
  %33 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7
  br i1 %32, label %526, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 9
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 1
  %38 = tail call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %37) #22
  %39 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 1
  %40 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %38, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 12, i1 false) #22
  %41 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 4, i32 1
  %42 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %38, i64 0, i32 4, i32 1
  %43 = bitcast i32* %41 to i8*
  %44 = bitcast i32* %42 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false) #22
  %45 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 5
  %46 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %38, i64 0, i32 5
  %47 = bitcast i32* %45 to i8*
  %48 = bitcast i32* %46 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 6, i1 false) #22
  %49 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 8
  %50 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %38, i64 0, i32 8, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 8, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = icmp ult i64 %53, %51
  br i1 %54, label %55, label %56

55:                                               ; preds = %34
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %49, i64 %51) #22
  br label %56

56:                                               ; preds = %55, %34
  %57 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = icmp eq i8* %58, null
  %60 = select i1 %59, i64 0, i64 %51
  %61 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %49, i64 0, i32 0
  store i64 %60, i64* %61, align 8
  br i1 %59, label %65, label %62

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %38, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %58, i8* align 1 %64, i64 %60, i1 false) #22
  br label %65

65:                                               ; preds = %56, %62
  %66 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %38, i64 0, i32 9
  %67 = load i32, i32* %66, align 8
  %68 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 9
  store i32 %67, i32* %68, align 8
  %69 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 10, i32 1
  %70 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %38, i64 0, i32 10, i32 1
  %71 = bitcast i32* %70 to i64*
  %72 = bitcast i32* %69 to i64*
  %73 = load i64, i64* %71, align 8
  store i64 %73, i64* %72, align 8
  %74 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 11, i32 1
  %75 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %38, i64 0, i32 11, i32 1
  %76 = bitcast i32* %75 to i64*
  %77 = bitcast i32* %74 to i64*
  %78 = load i64, i64* %76, align 8
  store i64 %78, i64* %77, align 8
  %79 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 12, i32 1
  %80 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %38, i64 0, i32 12, i32 1
  %81 = bitcast i32* %80 to i64*
  %82 = bitcast i32* %79 to i64*
  %83 = load i64, i64* %81, align 8
  store i64 %83, i64* %82, align 8
  %84 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 13, i32 1
  %85 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %38, i64 0, i32 13, i32 1
  %86 = bitcast i32* %85 to i64*
  %87 = bitcast i32* %84 to i64*
  %88 = load i64, i64* %86, align 8
  store i64 %88, i64* %87, align 8
  %89 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 7
  %90 = load i8, i8* %89, align 1, !range !99
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %577, label %92

92:                                               ; preds = %65
  %93 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 4, i32 2
  %94 = load i8, i8* %93, align 4, !range !99
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %96, label %99

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 4, i32 4
  %98 = load i32, i32* %97, align 4
  switch i32 %98, label %577 [
    i32 16, label %108
    i32 13, label %108
    i32 8, label %108
    i32 18, label %108
    i32 17, label %108
    i32 1, label %108
  ]

99:                                               ; preds = %92
  %100 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 4, i32 3
  %101 = load i32, i32* %100, align 8
  %102 = uitofp i32 %101 to double
  %103 = fmul double %102, 0x3E7AD7F29ABCAF48
  %104 = fptrunc double %103 to float
  %105 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 1
  store float %104, float* %105, align 8
  %106 = load i8, i8* %93, align 4, !range !99
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %108, label %114

108:                                              ; preds = %96, %96, %96, %96, %96, %96, %99
  %109 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 4, i32 4
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %110, 17
  br i1 %111, label %112, label %114

112:                                              ; preds = %108
  %113 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 1
  store float 0x3FD89D89E0000000, float* %113, align 8
  br label %114

114:                                              ; preds = %99, %112, %108
  %115 = load i32, i32* %35, align 8
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %117, label %121

117:                                              ; preds = %114
  %118 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 2
  %119 = load i32, i32* %118, align 4
  %120 = icmp eq i32 %119, 1
  br i1 %120, label %121, label %577

121:                                              ; preds = %117, %114
  %122 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 3
  %123 = load i32, i32* %122, align 8
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %125, label %130

125:                                              ; preds = %121
  %126 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 2
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %127, 1
  %129 = or i1 %116, %128
  br i1 %129, label %483, label %131

130:                                              ; preds = %121
  br i1 %116, label %483, label %131

131:                                              ; preds = %125, %130
  %132 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 3
  store i8 0, i8* %132, align 4
  %133 = bitcast [9 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %133) #22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %133, i8 -1, i64 36, i1 false)
  %134 = tail call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext false) #22
  %135 = bitcast %"struct.jxl::PrimariesCIExy"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %135) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %5, %"struct.jxl::ColorEncoding"* %134) #22
  %136 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %5, i64 0, i32 0, i32 0
  %137 = load double, double* %136, align 8
  %138 = fptrunc double %137 to float
  %139 = bitcast %"struct.jxl::PrimariesCIExy"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %139) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %6, %"struct.jxl::ColorEncoding"* %134) #22
  %140 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %6, i64 0, i32 0, i32 1
  %141 = load double, double* %140, align 8
  %142 = fptrunc double %141 to float
  %143 = bitcast %"struct.jxl::PrimariesCIExy"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %143) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %7, %"struct.jxl::ColorEncoding"* %134) #22
  %144 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %7, i64 0, i32 1, i32 0
  %145 = load double, double* %144, align 8
  %146 = fptrunc double %145 to float
  %147 = bitcast %"struct.jxl::PrimariesCIExy"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %147) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %8, %"struct.jxl::ColorEncoding"* %134) #22
  %148 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %8, i64 0, i32 1, i32 1
  %149 = load double, double* %148, align 8
  %150 = fptrunc double %149 to float
  %151 = bitcast %"struct.jxl::PrimariesCIExy"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %151) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %9, %"struct.jxl::ColorEncoding"* %134) #22
  %152 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %9, i64 0, i32 2, i32 0
  %153 = load double, double* %152, align 8
  %154 = fptrunc double %153 to float
  %155 = bitcast %"struct.jxl::PrimariesCIExy"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %155) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %10, %"struct.jxl::ColorEncoding"* %134) #22
  %156 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %10, i64 0, i32 2, i32 1
  %157 = load double, double* %156, align 8
  %158 = fptrunc double %157 to float
  %159 = call { double, double } @_ZNK3jxl13ColorEncoding13GetWhitePointEv(%"struct.jxl::ColorEncoding"* %134) #22
  %160 = extractvalue { double, double } %159, 0
  %161 = fptrunc double %160 to float
  %162 = call { double, double } @_ZNK3jxl13ColorEncoding13GetWhitePointEv(%"struct.jxl::ColorEncoding"* %134) #22
  %163 = extractvalue { double, double } %162, 1
  %164 = fptrunc double %163 to float
  %165 = getelementptr inbounds [9 x float], [9 x float]* %4, i64 0, i64 0
  %166 = call i32 @_ZN3jxl17PrimariesToXYZD50EffffffffPf(float %138, float %142, float %146, float %150, float %154, float %158, float %161, float %164, float* nonnull %165) #22
  %167 = icmp eq i32 %166, 0
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %155) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %151) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %147) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %143) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %139) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %135) #22
  br i1 %167, label %171, label %168

168:                                              ; preds = %131
  %169 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 384, i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.11, i64 0, i64 0)) #22
  %170 = call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable

171:                                              ; preds = %131
  %172 = bitcast [9 x float]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %172) #22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %172, i8 -1, i64 36, i1 false)
  %173 = bitcast %"struct.jxl::PrimariesCIExy"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %173) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %12, %"struct.jxl::ColorEncoding"* %33) #22
  %174 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %12, i64 0, i32 0, i32 0
  %175 = load double, double* %174, align 8
  %176 = fptrunc double %175 to float
  %177 = bitcast %"struct.jxl::PrimariesCIExy"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %177) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %13, %"struct.jxl::ColorEncoding"* %33) #22
  %178 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %13, i64 0, i32 0, i32 1
  %179 = load double, double* %178, align 8
  %180 = fptrunc double %179 to float
  %181 = bitcast %"struct.jxl::PrimariesCIExy"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %181) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %14, %"struct.jxl::ColorEncoding"* %33) #22
  %182 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %14, i64 0, i32 1, i32 0
  %183 = load double, double* %182, align 8
  %184 = fptrunc double %183 to float
  %185 = bitcast %"struct.jxl::PrimariesCIExy"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %185) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %15, %"struct.jxl::ColorEncoding"* %33) #22
  %186 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %15, i64 0, i32 1, i32 1
  %187 = load double, double* %186, align 8
  %188 = fptrunc double %187 to float
  %189 = bitcast %"struct.jxl::PrimariesCIExy"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %189) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %16, %"struct.jxl::ColorEncoding"* %33) #22
  %190 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %16, i64 0, i32 2, i32 0
  %191 = load double, double* %190, align 8
  %192 = fptrunc double %191 to float
  %193 = bitcast %"struct.jxl::PrimariesCIExy"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %193) #22
  call void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* nonnull sret %17, %"struct.jxl::ColorEncoding"* %33) #22
  %194 = getelementptr inbounds %"struct.jxl::PrimariesCIExy", %"struct.jxl::PrimariesCIExy"* %17, i64 0, i32 2, i32 1
  %195 = load double, double* %194, align 8
  %196 = fptrunc double %195 to float
  %197 = call { double, double } @_ZNK3jxl13ColorEncoding13GetWhitePointEv(%"struct.jxl::ColorEncoding"* %33) #22
  %198 = extractvalue { double, double } %197, 0
  %199 = fptrunc double %198 to float
  %200 = call { double, double } @_ZNK3jxl13ColorEncoding13GetWhitePointEv(%"struct.jxl::ColorEncoding"* %33) #22
  %201 = extractvalue { double, double } %200, 1
  %202 = fptrunc double %201 to float
  %203 = getelementptr inbounds [9 x float], [9 x float]* %11, i64 0, i64 0
  %204 = call i32 @_ZN3jxl17PrimariesToXYZD50EffffffffPf(float %176, float %180, float %184, float %188, float %192, float %196, float %199, float %202, float* nonnull %203) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %193) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %189) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %185) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %181) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %177) #22
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %173) #22
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %524

206:                                              ; preds = %171
  %207 = call i32 @_ZN3jxl12Inv3x3MatrixIfEENS_6StatusEPT_(float* nonnull %203)
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %524

209:                                              ; preds = %206
  %210 = bitcast [9 x float]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %210) #22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %210, i8 -1, i64 36, i1 false)
  %211 = call i8* @_Znwm(i64 12) #31
  %212 = ptrtoint i8* %211 to i64
  %213 = getelementptr i8, i8* %211, i64 8
  %214 = ptrtoint i8* %213 to i64
  %215 = sub i64 4, %212
  %216 = add i64 %215, %214
  %217 = and i64 %216, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %211, i8 0, i64 %217, i1 false) #22
  %218 = getelementptr inbounds [9 x float], [9 x float]* %11, i64 0, i64 6
  %219 = load float, float* %203, align 16
  %220 = getelementptr inbounds [9 x float], [9 x float]* %11, i64 0, i64 1
  %221 = load float, float* %220, align 4
  %222 = getelementptr inbounds [9 x float], [9 x float]* %11, i64 0, i64 2
  %223 = load float, float* %222, align 8
  %224 = getelementptr inbounds [9 x float], [9 x float]* %11, i64 0, i64 3
  %225 = load float, float* %224, align 4
  %226 = getelementptr inbounds [9 x float], [9 x float]* %11, i64 0, i64 4
  %227 = load float, float* %226, align 16
  %228 = getelementptr inbounds [9 x float], [9 x float]* %11, i64 0, i64 5
  %229 = load float, float* %228, align 4
  %230 = load float, float* %218, align 8
  %231 = getelementptr inbounds [9 x float], [9 x float]* %11, i64 0, i64 7
  %232 = load float, float* %231, align 4
  %233 = getelementptr inbounds [9 x float], [9 x float]* %11, i64 0, i64 8
  %234 = load float, float* %233, align 16
  %235 = bitcast i8* %211 to i32*
  %236 = getelementptr inbounds i8, i8* %211, i64 4
  %237 = bitcast i8* %236 to i32*
  %238 = getelementptr inbounds i8, i8* %211, i64 8
  %239 = bitcast i8* %238 to i32*
  %240 = insertelement <2 x float> undef, float %234, i32 0
  %241 = shufflevector <2 x float> %240, <2 x float> undef, <2 x i32> zeroinitializer
  %242 = insertelement <2 x float> undef, float %232, i32 0
  %243 = shufflevector <2 x float> %242, <2 x float> undef, <2 x i32> zeroinitializer
  %244 = insertelement <2 x float> undef, float %230, i32 0
  %245 = shufflevector <2 x float> %244, <2 x float> undef, <2 x i32> zeroinitializer
  %246 = insertelement <2 x float> undef, float %229, i32 0
  %247 = shufflevector <2 x float> %246, <2 x float> undef, <2 x i32> zeroinitializer
  %248 = insertelement <2 x float> undef, float %227, i32 0
  %249 = shufflevector <2 x float> %248, <2 x float> undef, <2 x i32> zeroinitializer
  %250 = insertelement <2 x float> undef, float %225, i32 0
  %251 = shufflevector <2 x float> %250, <2 x float> undef, <2 x i32> zeroinitializer
  %252 = insertelement <2 x float> undef, float %223, i32 0
  %253 = shufflevector <2 x float> %252, <2 x float> undef, <2 x i32> zeroinitializer
  %254 = insertelement <2 x float> undef, float %221, i32 0
  %255 = shufflevector <2 x float> %254, <2 x float> undef, <2 x i32> zeroinitializer
  %256 = insertelement <2 x float> undef, float %219, i32 0
  %257 = shufflevector <2 x float> %256, <2 x float> undef, <2 x i32> zeroinitializer
  %258 = bitcast [9 x float]* %4 to <2 x float>*
  %259 = load <2 x float>, <2 x float>* %258, align 16
  %260 = getelementptr inbounds [9 x float], [9 x float]* %4, i64 0, i64 3
  %261 = bitcast float* %260 to <2 x float>*
  %262 = load <2 x float>, <2 x float>* %261, align 4
  %263 = getelementptr inbounds [9 x float], [9 x float]* %4, i64 0, i64 6
  %264 = bitcast float* %263 to <2 x float>*
  %265 = load <2 x float>, <2 x float>* %264, align 8
  %266 = fmul <2 x float> %257, %259
  %267 = fpext <2 x float> %266 to <2 x double>
  %268 = fadd <2 x double> %267, zeroinitializer
  %269 = fmul <2 x float> %255, %262
  %270 = fpext <2 x float> %269 to <2 x double>
  %271 = fadd <2 x double> %268, %270
  %272 = fmul <2 x float> %253, %265
  %273 = fpext <2 x float> %272 to <2 x double>
  %274 = fadd <2 x double> %271, %273
  %275 = fptrunc <2 x double> %274 to <2 x float>
  %276 = bitcast [9 x float]* %18 to <2 x float>*
  store <2 x float> %275, <2 x float>* %276, align 16
  %277 = fmul <2 x float> %251, %259
  %278 = fpext <2 x float> %277 to <2 x double>
  %279 = fadd <2 x double> %278, zeroinitializer
  %280 = fmul <2 x float> %249, %262
  %281 = fpext <2 x float> %280 to <2 x double>
  %282 = fadd <2 x double> %279, %281
  %283 = fmul <2 x float> %247, %265
  %284 = fpext <2 x float> %283 to <2 x double>
  %285 = fadd <2 x double> %282, %284
  %286 = fptrunc <2 x double> %285 to <2 x float>
  %287 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 3
  %288 = bitcast float* %287 to <2 x float>*
  store <2 x float> %286, <2 x float>* %288, align 4
  %289 = fmul <2 x float> %245, %259
  %290 = fpext <2 x float> %289 to <2 x double>
  %291 = fadd <2 x double> %290, zeroinitializer
  %292 = fmul <2 x float> %243, %262
  %293 = fpext <2 x float> %292 to <2 x double>
  %294 = fadd <2 x double> %291, %293
  %295 = fmul <2 x float> %241, %265
  %296 = fpext <2 x float> %295 to <2 x double>
  %297 = fadd <2 x double> %294, %296
  %298 = fptrunc <2 x double> %297 to <2 x float>
  %299 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 6
  %300 = bitcast float* %299 to <2 x float>*
  store <2 x float> %298, <2 x float>* %300, align 8
  %301 = getelementptr inbounds [9 x float], [9 x float]* %4, i64 0, i64 2
  %302 = bitcast float* %301 to i32*
  %303 = load i32, i32* %302, align 8
  %304 = getelementptr inbounds [9 x float], [9 x float]* %4, i64 0, i64 5
  %305 = bitcast float* %304 to i32*
  %306 = load i32, i32* %305, align 4
  %307 = getelementptr inbounds [9 x float], [9 x float]* %4, i64 0, i64 8
  %308 = bitcast float* %307 to i32*
  %309 = load i32, i32* %308, align 16
  %310 = bitcast i32 %303 to float
  %311 = fmul float %219, %310
  %312 = fpext float %311 to double
  %313 = fadd double %312, 0.000000e+00
  %314 = bitcast i32 %306 to float
  %315 = fmul float %221, %314
  %316 = fpext float %315 to double
  %317 = fadd double %313, %316
  %318 = bitcast i32 %309 to float
  %319 = fmul float %223, %318
  %320 = fpext float %319 to double
  %321 = fadd double %317, %320
  %322 = fptrunc double %321 to float
  %323 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 2
  store float %322, float* %323, align 8
  %324 = fmul float %225, %310
  %325 = fpext float %324 to double
  %326 = fadd double %325, 0.000000e+00
  %327 = fmul float %227, %314
  %328 = fpext float %327 to double
  %329 = fadd double %326, %328
  %330 = fmul float %229, %318
  %331 = fpext float %330 to double
  %332 = fadd double %329, %331
  %333 = fptrunc double %332 to float
  %334 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 5
  store float %333, float* %334, align 4
  %335 = fmul float %230, %310
  %336 = fpext float %335 to double
  %337 = fadd double %336, 0.000000e+00
  %338 = fmul float %232, %314
  %339 = fpext float %338 to double
  %340 = fadd double %337, %339
  %341 = fmul float %234, %318
  %342 = fpext float %341 to double
  %343 = fadd double %340, %342
  %344 = fptrunc double %343 to float
  %345 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 8
  store float %344, float* %345, align 16
  store i32 %303, i32* %235, align 4
  store i32 %306, i32* %237, align 4
  store i32 %309, i32* %239, align 4
  call void @_ZdlPv(i8* nonnull %211) #31
  %346 = call i8* @_Znwm(i64 12) #31
  %347 = ptrtoint i8* %346 to i64
  %348 = getelementptr i8, i8* %346, i64 8
  %349 = ptrtoint i8* %348 to i64
  %350 = sub i64 4, %347
  %351 = add i64 %350, %349
  %352 = and i64 %351, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %346, i8 0, i64 %352, i1 false) #22
  %353 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 6
  %354 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 0
  %355 = load float, float* %354, align 16
  %356 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 1
  %357 = load float, float* %356, align 4
  %358 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 2
  %359 = load float, float* %358, align 8
  %360 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 3
  %361 = load float, float* %360, align 4
  %362 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 4
  %363 = load float, float* %362, align 16
  %364 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 5
  %365 = load float, float* %364, align 4
  %366 = load float, float* %353, align 8
  %367 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 7
  %368 = load float, float* %367, align 4
  %369 = getelementptr inbounds [9 x float], [9 x float]* %18, i64 0, i64 8
  %370 = load float, float* %369, align 16
  %371 = bitcast i8* %346 to i32*
  %372 = getelementptr inbounds i8, i8* %346, i64 4
  %373 = bitcast i8* %372 to i32*
  %374 = getelementptr inbounds i8, i8* %346, i64 8
  %375 = bitcast i8* %374 to i32*
  %376 = insertelement <2 x float> undef, float %370, i32 0
  %377 = shufflevector <2 x float> %376, <2 x float> undef, <2 x i32> zeroinitializer
  %378 = insertelement <2 x float> undef, float %368, i32 0
  %379 = shufflevector <2 x float> %378, <2 x float> undef, <2 x i32> zeroinitializer
  %380 = insertelement <2 x float> undef, float %366, i32 0
  %381 = shufflevector <2 x float> %380, <2 x float> undef, <2 x i32> zeroinitializer
  %382 = insertelement <2 x float> undef, float %365, i32 0
  %383 = shufflevector <2 x float> %382, <2 x float> undef, <2 x i32> zeroinitializer
  %384 = insertelement <2 x float> undef, float %363, i32 0
  %385 = shufflevector <2 x float> %384, <2 x float> undef, <2 x i32> zeroinitializer
  %386 = insertelement <2 x float> undef, float %361, i32 0
  %387 = shufflevector <2 x float> %386, <2 x float> undef, <2 x i32> zeroinitializer
  %388 = insertelement <2 x float> undef, float %359, i32 0
  %389 = shufflevector <2 x float> %388, <2 x float> undef, <2 x i32> zeroinitializer
  %390 = insertelement <2 x float> undef, float %357, i32 0
  %391 = shufflevector <2 x float> %390, <2 x float> undef, <2 x i32> zeroinitializer
  %392 = insertelement <2 x float> undef, float %355, i32 0
  %393 = shufflevector <2 x float> %392, <2 x float> undef, <2 x i32> zeroinitializer
  %394 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 18, i32 4, i32 3, i64 0
  %395 = bitcast float* %394 to <2 x float>*
  %396 = load <2 x float>, <2 x float>* %395, align 4
  %397 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 18, i32 4, i32 3, i64 3
  %398 = bitcast float* %397 to <2 x float>*
  %399 = load <2 x float>, <2 x float>* %398, align 4
  %400 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 18, i32 4, i32 3, i64 6
  %401 = bitcast float* %400 to <2 x float>*
  %402 = load <2 x float>, <2 x float>* %401, align 4
  %403 = fmul <2 x float> %393, %396
  %404 = fpext <2 x float> %403 to <2 x double>
  %405 = fadd <2 x double> %404, zeroinitializer
  %406 = fmul <2 x float> %391, %399
  %407 = fpext <2 x float> %406 to <2 x double>
  %408 = fadd <2 x double> %405, %407
  %409 = fmul <2 x float> %389, %402
  %410 = fpext <2 x float> %409 to <2 x double>
  %411 = fadd <2 x double> %408, %410
  %412 = fptrunc <2 x double> %411 to <2 x float>
  %413 = bitcast [9 x float]* %3 to <2 x float>*
  store <2 x float> %412, <2 x float>* %413, align 16
  %414 = fmul <2 x float> %387, %396
  %415 = fpext <2 x float> %414 to <2 x double>
  %416 = fadd <2 x double> %415, zeroinitializer
  %417 = fmul <2 x float> %385, %399
  %418 = fpext <2 x float> %417 to <2 x double>
  %419 = fadd <2 x double> %416, %418
  %420 = fmul <2 x float> %383, %402
  %421 = fpext <2 x float> %420 to <2 x double>
  %422 = fadd <2 x double> %419, %421
  %423 = fptrunc <2 x double> %422 to <2 x float>
  %424 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 3
  %425 = bitcast float* %424 to <2 x float>*
  store <2 x float> %423, <2 x float>* %425, align 4
  %426 = fmul <2 x float> %381, %396
  %427 = fpext <2 x float> %426 to <2 x double>
  %428 = fadd <2 x double> %427, zeroinitializer
  %429 = fmul <2 x float> %379, %399
  %430 = fpext <2 x float> %429 to <2 x double>
  %431 = fadd <2 x double> %428, %430
  %432 = fmul <2 x float> %377, %402
  %433 = fpext <2 x float> %432 to <2 x double>
  %434 = fadd <2 x double> %431, %433
  %435 = fptrunc <2 x double> %434 to <2 x float>
  %436 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 6
  %437 = bitcast float* %436 to <2 x float>*
  store <2 x float> %435, <2 x float>* %437, align 8
  %438 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 18, i32 4, i32 3, i64 2
  %439 = bitcast float* %438 to i32*
  %440 = load i32, i32* %439, align 4
  %441 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 18, i32 4, i32 3, i64 5
  %442 = bitcast float* %441 to i32*
  %443 = load i32, i32* %442, align 4
  %444 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 18, i32 4, i32 3, i64 8
  %445 = bitcast float* %444 to i32*
  %446 = load i32, i32* %445, align 4
  %447 = bitcast i32 %440 to float
  %448 = fmul float %355, %447
  %449 = fpext float %448 to double
  %450 = fadd double %449, 0.000000e+00
  %451 = bitcast i32 %443 to float
  %452 = fmul float %357, %451
  %453 = fpext float %452 to double
  %454 = fadd double %450, %453
  %455 = bitcast i32 %446 to float
  %456 = fmul float %359, %455
  %457 = fpext float %456 to double
  %458 = fadd double %454, %457
  %459 = fptrunc double %458 to float
  %460 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 2
  store float %459, float* %460, align 8
  %461 = fmul float %361, %447
  %462 = fpext float %461 to double
  %463 = fadd double %462, 0.000000e+00
  %464 = fmul float %363, %451
  %465 = fpext float %464 to double
  %466 = fadd double %463, %465
  %467 = fmul float %365, %455
  %468 = fpext float %467 to double
  %469 = fadd double %466, %468
  %470 = fptrunc double %469 to float
  %471 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 5
  store float %470, float* %471, align 4
  %472 = fmul float %366, %447
  %473 = fpext float %472 to double
  %474 = fadd double %473, 0.000000e+00
  %475 = fmul float %368, %451
  %476 = fpext float %475 to double
  %477 = fadd double %474, %476
  %478 = fmul float %370, %455
  %479 = fpext float %478 to double
  %480 = fadd double %477, %479
  %481 = fptrunc double %480 to float
  %482 = getelementptr inbounds [9 x float], [9 x float]* %3, i64 0, i64 8
  store float %481, float* %482, align 16
  store i32 %440, i32* %371, align 4
  store i32 %443, i32* %373, align 4
  store i32 %446, i32* %375, align 4
  call void @_ZdlPv(i8* nonnull %346) #31
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %210) #22
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %172) #22
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %133) #22
  br label %483

483:                                              ; preds = %125, %209, %130
  %484 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %484, i64 12, i1 false) #22
  %485 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 4, i32 1
  %486 = bitcast i32* %485 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %486, i64 16, i1 false) #22
  %487 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 5
  %488 = bitcast i32* %487 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %488, i64 6, i1 false) #22
  %489 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 8, i32 0
  %490 = load i64, i64* %489, align 8
  %491 = load i64, i64* %52, align 8
  %492 = icmp ult i64 %491, %490
  br i1 %492, label %493, label %494

493:                                              ; preds = %483
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %49, i64 %490) #22
  br label %494

494:                                              ; preds = %493, %483
  %495 = load i8*, i8** %57, align 8
  %496 = icmp eq i8* %495, null
  %497 = select i1 %496, i64 0, i64 %490
  store i64 %497, i64* %61, align 8
  br i1 %496, label %501, label %498

498:                                              ; preds = %494
  %499 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %500 = load i8*, i8** %499, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %495, i8* align 1 %500, i64 %497, i1 false) #22
  br label %501

501:                                              ; preds = %494, %498
  %502 = load i32, i32* %35, align 8
  store i32 %502, i32* %68, align 8
  %503 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 10, i32 1
  %504 = bitcast i32* %503 to i64*
  %505 = load i64, i64* %504, align 8
  store i64 %505, i64* %72, align 8
  %506 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 11, i32 1
  %507 = bitcast i32* %506 to i64*
  %508 = load i64, i64* %507, align 8
  store i64 %508, i64* %77, align 8
  %509 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 12, i32 1
  %510 = bitcast i32* %509 to i64*
  %511 = load i64, i64* %510, align 8
  store i64 %511, i64* %82, align 8
  %512 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 13, i32 1
  %513 = bitcast i32* %512 to i64*
  %514 = load i64, i64* %513, align 8
  store i64 %514, i64* %87, align 8
  %515 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 4
  store i8 1, i8* %515, align 1
  %516 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 4, i32 2
  %517 = load i8, i8* %516, align 4, !range !99
  %518 = icmp eq i8 %517, 0
  br i1 %518, label %519, label %577

519:                                              ; preds = %501
  %520 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 4, i32 4
  %521 = load i32, i32* %520, align 4
  %522 = icmp eq i32 %521, 16
  %523 = select i1 %522, float 1.000000e+04, float %24
  br label %577

524:                                              ; preds = %171, %206
  %525 = phi i32 [ %207, %206 ], [ %204, %171 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %172) #22
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %133) #22
  br label %612

526:                                              ; preds = %29
  %527 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 1
  %528 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %527, i8* align 8 %528, i64 12, i1 false) #22
  %529 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 4, i32 1
  %530 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 4, i32 1
  %531 = bitcast i32* %529 to i8*
  %532 = bitcast i32* %530 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %531, i8* align 8 %532, i64 16, i1 false) #22
  %533 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 5
  %534 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 5
  %535 = bitcast i32* %533 to i8*
  %536 = bitcast i32* %534 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %535, i8* align 8 %536, i64 6, i1 false) #22
  %537 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 8
  %538 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 8, i32 0
  %539 = load i64, i64* %538, align 8
  %540 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 8, i32 1
  %541 = load i64, i64* %540, align 8
  %542 = icmp ult i64 %541, %539
  br i1 %542, label %543, label %544

543:                                              ; preds = %526
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %537, i64 %539) #22
  br label %544

544:                                              ; preds = %543, %526
  %545 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %546 = load i8*, i8** %545, align 8
  %547 = icmp eq i8* %546, null
  %548 = select i1 %547, i64 0, i64 %539
  %549 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %537, i64 0, i32 0
  store i64 %548, i64* %549, align 8
  br i1 %547, label %553, label %550

550:                                              ; preds = %544
  %551 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %552 = load i8*, i8** %551, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %546, i8* align 1 %552, i64 %548, i1 false) #22
  br label %553

553:                                              ; preds = %544, %550
  %554 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 9
  %555 = load i32, i32* %554, align 8
  %556 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 9
  store i32 %555, i32* %556, align 8
  %557 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 10, i32 1
  %558 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 10, i32 1
  %559 = bitcast i32* %558 to i64*
  %560 = bitcast i32* %557 to i64*
  %561 = load i64, i64* %559, align 8
  store i64 %561, i64* %560, align 8
  %562 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 11, i32 1
  %563 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 11, i32 1
  %564 = bitcast i32* %563 to i64*
  %565 = bitcast i32* %562 to i64*
  %566 = load i64, i64* %564, align 8
  store i64 %566, i64* %565, align 8
  %567 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 12, i32 1
  %568 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 12, i32 1
  %569 = bitcast i32* %568 to i64*
  %570 = bitcast i32* %567 to i64*
  %571 = load i64, i64* %569, align 8
  store i64 %571, i64* %570, align 8
  %572 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 0, i32 13, i32 1
  %573 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 7, i32 13, i32 1
  %574 = bitcast i32* %573 to i64*
  %575 = bitcast i32* %572 to i64*
  %576 = load i64, i64* %574, align 8
  store i64 %576, i64* %575, align 8
  br label %577

577:                                              ; preds = %96, %65, %519, %501, %117, %553
  %578 = phi float [ %24, %553 ], [ %24, %65 ], [ %24, %117 ], [ %24, %501 ], [ %523, %519 ], [ %24, %96 ]
  %579 = fpext float %578 to double
  %580 = fadd double %579, -2.550000e+02
  %581 = call double @llvm.fabs.f64(double %580) #22
  %582 = fcmp ogt double %581, 0x3FB99999A0000000
  br i1 %582, label %587, label %583

583:                                              ; preds = %577
  %584 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 18, i32 4, i32 1
  %585 = load i8, i8* %584, align 8, !range !99
  %586 = icmp eq i8 %585, 0
  br i1 %586, label %587, label %589

587:                                              ; preds = %583, %577
  %588 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 3
  store i8 0, i8* %588, align 4
  br label %589

589:                                              ; preds = %583, %587
  %590 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 2, i32 0, i64 0
  call void @_ZN3jxl21InitSIMDInverseMatrixEPKfPff(float* nonnull %20, float* %590, float %578) #22
  %591 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 18, i32 4, i32 4
  %592 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 2, i32 1, i64 0
  %593 = bitcast float* %592 to i8*
  %594 = bitcast [3 x float]* %591 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %593, i8* align 4 %594, i64 12, i1 false) #22
  %595 = load float, float* %592, align 4
  %596 = call float @cbrtf(float %595) #30
  %597 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 2, i32 2, i64 0
  store float %596, float* %597, align 4
  %598 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 2, i32 1, i64 1
  %599 = load float, float* %598, align 4
  %600 = call float @cbrtf(float %599) #30
  %601 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 2, i32 2, i64 1
  store float %600, float* %601, align 4
  %602 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 2, i32 1, i64 2
  %603 = load float, float* %602, align 4
  %604 = call float @cbrtf(float %603) #30
  %605 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 2, i32 2, i64 2
  store float %604, float* %605, align 4
  %606 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 2, i32 1, i64 3
  store float 1.000000e+00, float* %606, align 4
  %607 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 2, i32 2, i64 3
  store float 1.000000e+00, float* %607, align 4
  %608 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 18, i32 4, i32 5
  %609 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %0, i64 0, i32 2, i32 3, i64 0
  %610 = bitcast float* %609 to i8*
  %611 = bitcast [4 x float]* %608 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %610, i8* align 4 %611, i64 16, i1 false) #22
  br label %612

612:                                              ; preds = %524, %589
  %613 = phi i32 [ 0, %589 ], [ %525, %524 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %19) #22
  ret i32 %613
}

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext) local_unnamed_addr #2

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext) local_unnamed_addr #2

declare i32 @_ZN3jxl17PrimariesToXYZD50EffffffffPf(float, float, float, float, float, float, float, float, float*) local_unnamed_addr #2

declare void @_ZNK3jxl13ColorEncoding12GetPrimariesEv(%"struct.jxl::PrimariesCIExy"* sret, %"struct.jxl::ColorEncoding"*) local_unnamed_addr #2

declare { double, double } @_ZNK3jxl13ColorEncoding13GetWhitePointEv(%"struct.jxl::ColorEncoding"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl12Inv3x3MatrixIfEENS_6StatusEPT_(float*) local_unnamed_addr #10 comdat {
  %2 = getelementptr inbounds float, float* %0, i64 4
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds float, float* %0, i64 8
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds float, float* %0, i64 2
  %7 = load float, float* %6, align 4
  %8 = insertelement <2 x float> undef, float %5, i32 0
  %9 = insertelement <2 x float> %8, float %7, i32 1
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = extractelement <2 x double> %10, i32 0
  %12 = getelementptr inbounds float, float* %0, i64 5
  %13 = getelementptr inbounds float, float* %0, i64 7
  %14 = load float, float* %13, align 4
  %15 = insertelement <2 x float> undef, float %14, i32 0
  %16 = insertelement <2 x float> %15, float %3, i32 1
  %17 = fpext <2 x float> %16 to <2 x double>
  %18 = getelementptr inbounds float, float* %0, i64 1
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = bitcast float* %12 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = fpext <2 x float> %22 to <2 x double>
  %24 = extractelement <2 x double> %23, i32 0
  %25 = extractelement <2 x double> %23, i32 1
  %26 = fmul double %24, %25
  %27 = getelementptr inbounds float, float* %0, i64 3
  %28 = load float, float* %27, align 4
  %29 = load float, float* %0, align 4
  %30 = insertelement <2 x float> undef, float %29, i32 0
  %31 = insertelement <2 x float> %30, float %28, i32 1
  %32 = fpext <2 x float> %31 to <2 x double>
  %33 = extractelement <2 x double> %32, i32 1
  %34 = fmul double %11, %33
  %35 = fsub double %26, %34
  %36 = shufflevector <2 x double> %32, <2 x double> %10, <2 x i32> <i32 1, i32 2>
  %37 = fmul <2 x double> %36, %17
  %38 = extractelement <2 x double> %17, i32 1
  %39 = shufflevector <2 x double> %17, <2 x double> %23, <2 x i32> <i32 1, i32 2>
  %40 = shufflevector <2 x double> %23, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %41 = extractelement <2 x double> %17, i32 0
  %42 = shufflevector <2 x double> %40, <2 x double> %17, <2 x i32> <i32 0, i32 2>
  %43 = fmul <2 x double> %39, %42
  %44 = fsub <2 x double> %37, %43
  %45 = extractelement <2 x double> %32, i32 0
  %46 = fmul double %35, %20
  %47 = extractelement <2 x double> %10, i32 1
  %48 = shufflevector <2 x double> %10, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %49 = shufflevector <2 x double> %48, <2 x double> %32, <2 x i32> <i32 0, i32 2>
  %50 = fmul <2 x double> %44, %49
  %51 = extractelement <2 x double> %50, i32 1
  %52 = fadd double %51, %46
  %53 = extractelement <2 x double> %50, i32 0
  %54 = fadd double %53, %52
  %55 = tail call double @llvm.fabs.f64(double %54) #22
  %56 = fcmp olt double %55, 1.000000e-10
  br i1 %56, label %98, label %57

57:                                               ; preds = %1
  %58 = fmul double %38, %45
  %59 = fmul double %33, %20
  %60 = fsub double %58, %59
  %61 = fmul double %25, %20
  %62 = fmul double %41, %45
  %63 = fsub double %61, %62
  %64 = fmul <2 x double> %10, %32
  %65 = shufflevector <2 x double> %48, <2 x double> %23, <2 x i32> <i32 0, i32 2>
  %66 = shufflevector <2 x double> %40, <2 x double> %32, <2 x i32> <i32 0, i32 2>
  %67 = fmul <2 x double> %65, %66
  %68 = fsub <2 x double> %64, %67
  %69 = fmul double %24, %20
  %70 = fmul double %38, %47
  %71 = fsub double %69, %70
  %72 = fmul double %41, %47
  %73 = fmul double %11, %20
  %74 = fsub double %72, %73
  %75 = fdiv double 1.000000e+00, %54
  %76 = insertelement <4 x double> undef, double %75, i32 0
  %77 = shufflevector <4 x double> %76, <4 x double> undef, <4 x i32> zeroinitializer
  %78 = extractelement <2 x double> %44, i32 1
  %79 = insertelement <4 x double> undef, double %78, i32 0
  %80 = insertelement <4 x double> %79, double %74, i32 1
  %81 = insertelement <4 x double> %80, double %71, i32 2
  %82 = insertelement <4 x double> %81, double %35, i32 3
  %83 = fmul <4 x double> %77, %82
  %84 = fptrunc <4 x double> %83 to <4 x float>
  %85 = bitcast float* %0 to <4 x float>*
  store <4 x float> %84, <4 x float>* %85, align 4
  %86 = extractelement <2 x double> %68, i32 0
  %87 = insertelement <4 x double> undef, double %86, i32 0
  %88 = extractelement <2 x double> %68, i32 1
  %89 = insertelement <4 x double> %87, double %88, i32 1
  %90 = extractelement <2 x double> %44, i32 0
  %91 = insertelement <4 x double> %89, double %90, i32 2
  %92 = insertelement <4 x double> %91, double %63, i32 3
  %93 = fmul <4 x double> %77, %92
  %94 = fptrunc <4 x double> %93 to <4 x float>
  %95 = bitcast float* %2 to <4 x float>*
  store <4 x float> %94, <4 x float>* %95, align 4
  %96 = fmul double %75, %60
  %97 = fptrunc double %96 to float
  store float %97, float* %4, align 4
  br label %98

98:                                               ; preds = %57, %1
  %99 = phi i32 [ 1, %1 ], [ 0, %57 ]
  ret i32 %99
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJPN3jxl6Image3IfEEPNS1_10ThreadPoolERKNS1_11OpsinParamsEEE13ChooseAndCallIXadL_ZNS1_L40OpsinToLinearInplaceHighwayDispatchTableEEEEEvS4_S6_S9_(%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"* dereferenceable(192)) #10 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #22
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #22, !range !98
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)*]* @_ZN3jxlL40OpsinToLinearInplaceHighwayDispatchTableE, i64 0, i64 %7
  %9 = load void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)*, void (%"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::OpsinParams"*)** %8, align 8
  tail call void %9(%"class.jxl::Image3"* %0, %"class.jxl::ThreadPool"* %1, %"struct.jxl::OpsinParams"* dereferenceable(192) %2) #22
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #12

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJRKN3jxl6Image3IfEERKNS1_4RectEPNS1_10ThreadPoolEPS3_RKNS1_11OpsinParamsEEE13ChooseAndCallIXadL_ZNS1_L33OpsinToLinearHighwayDispatchTableEEEEEvS5_S8_SA_SB_SE_(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"* dereferenceable(192)) #10 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #22
  %6 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %7 = and i32 %6, 2225
  %8 = tail call i32 @llvm.cttz.i32(i32 %7, i1 true) #22, !range !98
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)*]* @_ZN3jxlL33OpsinToLinearHighwayDispatchTableE, i64 0, i64 %9
  %11 = load void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)*, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"struct.jxl::OpsinParams"*)** %10, align 8
  tail call void %11(%"class.jxl::Image3"* dereferenceable(96) %0, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::ThreadPool"* %2, %"class.jxl::Image3"* %3, %"struct.jxl::OpsinParams"* dereferenceable(192) %4) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJRKN3jxl6Image3IfEEPS3_RKNS1_4RectEEE13ChooseAndCallIXadL_ZNS1_L30YcbcrToRgbHighwayDispatchTableEEEEEvS5_S6_S9_(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32)) #10 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #22
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #22, !range !98
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*]* @_ZN3jxlL30YcbcrToRgbHighwayDispatchTableE, i64 0, i64 %7
  %9 = load void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*, void (%"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*)** %8, align 8
  tail call void %9(%"class.jxl::Image3"* dereferenceable(96) %0, %"class.jxl::Image3"* %1, %"class.jxl::Rect"* dereferenceable(32) %2) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIN3jxl5PlaneIfEEJRKS3_PNS1_10ThreadPoolEEE13ChooseAndCallIXadL_ZNS1_L30UpsampleV2HighwayDispatchTableEEEEES3_S5_S7_(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::ThreadPool"*) #10 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #22
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #22, !range !98
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*], [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*]* @_ZN3jxlL30UpsampleV2HighwayDispatchTableE, i64 0, i64 %7
  %9 = load void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)** %8, align 8
  tail call void %9(%"class.jxl::Plane"* sret %0, %"class.jxl::Plane"* dereferenceable(32) %1, %"class.jxl::ThreadPool"* %2) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIN3jxl5PlaneIfEEJRKS3_mPNS1_10ThreadPoolEEE13ChooseAndCallIXadL_ZNS1_L30UpsampleH2HighwayDispatchTableEEEEES3_S5_mS7_(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), i64, %"class.jxl::ThreadPool"*) #10 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #22
  %5 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %6 = and i32 %5, 2225
  %7 = tail call i32 @llvm.cttz.i32(i32 %6, i1 true) #22, !range !98
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)*], [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)*]* @_ZN3jxlL30UpsampleH2HighwayDispatchTableE, i64 0, i64 %8
  %10 = load void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)*, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, i64, %"class.jxl::ThreadPool"*)** %9, align 8
  tail call void %10(%"class.jxl::Plane"* sret %0, %"class.jxl::Plane"* dereferenceable(32) %1, i64 %2, %"class.jxl::ThreadPool"* %3) #22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN3hwy13FunctionCacheIbJEE13ChooseAndCallIXadL_ZN3jxlL37HasFastXYBTosRGB8HighwayDispatchTableEEEEEbv() #10 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #22
  %1 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %2 = and i32 %1, 2225
  %3 = tail call i32 @llvm.cttz.i32(i32 %2, i1 true) #22, !range !98
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [12 x i1 ()*], [12 x i1 ()*]* @_ZN3jxlL37HasFastXYBTosRGB8HighwayDispatchTableE, i64 0, i64 %4
  %6 = load i1 ()*, i1 ()** %5, align 8
  %7 = tail call zeroext i1 %6() #22
  ret i1 %7
}

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN3jxl6N_AVX312_GLOBAL__N_117HasFastXYBTosRGB8Ev() #13 {
  ret i1 false
}

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN3jxl6N_AVX212_GLOBAL__N_117HasFastXYBTosRGB8Ev() #14 {
  ret i1 false
}

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN3jxl6N_SSE412_GLOBAL__N_117HasFastXYBTosRGB8Ev() #15 {
  ret i1 false
}

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN3jxl8N_SCALAR12_GLOBAL__N_117HasFastXYBTosRGB8Ev() #16 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJRKN3jxl6Image3IfEERKNS1_4RectES8_PKNS1_5PlaneIfEES8_bPhmmEE13ChooseAndCallIXadL_ZNS1_L34FastXYBTosRGB8HighwayDispatchTableEEEEEvS5_S8_S8_SC_S8_bSD_mm(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Plane"*, %"class.jxl::Rect"* dereferenceable(32), i1 zeroext, i8*, i64, i64) #10 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #22
  %10 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %11 = and i32 %10, 2225
  %12 = tail call i32 @llvm.cttz.i32(i32 %11, i1 true) #22, !range !98
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)*]* @_ZN3jxlL34FastXYBTosRGB8HighwayDispatchTableE, i64 0, i64 %13
  %15 = load void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)*, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.jxl::Plane"*, %"class.jxl::Rect"*, i1, i8*, i64, i64)** %14, align 8
  tail call void %15(%"class.jxl::Image3"* dereferenceable(96) %0, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::Rect"* dereferenceable(32) %2, %"class.jxl::Plane"* %3, %"class.jxl::Rect"* dereferenceable(32) %4, i1 zeroext %5, i8* %6, i64 %7, i64 %8) #22
  ret void
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define internal void @_ZN3jxl6N_AVX312_GLOBAL__N_114FastXYBTosRGB8ERKNS_6Image3IfEERKNS_4RectES8_PKNS_5PlaneIfEES8_bPhmm(%"class.jxl::Image3"* nocapture readnone dereferenceable(96), %"class.jxl::Rect"* nocapture readnone dereferenceable(32), %"class.jxl::Rect"* nocapture readnone dereferenceable(32), %"class.jxl::Plane"* nocapture readnone, %"class.jxl::Rect"* nocapture readnone dereferenceable(32), i1 zeroext, i8* noalias nocapture readnone, i64, i64) #17 {
  %10 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.16, i64 0, i64 0), i32 350) #22
  %11 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define internal void @_ZN3jxl6N_AVX212_GLOBAL__N_114FastXYBTosRGB8ERKNS_6Image3IfEERKNS_4RectES8_PKNS_5PlaneIfEES8_bPhmm(%"class.jxl::Image3"* nocapture readnone dereferenceable(96), %"class.jxl::Rect"* nocapture readnone dereferenceable(32), %"class.jxl::Rect"* nocapture readnone dereferenceable(32), %"class.jxl::Plane"* nocapture readnone, %"class.jxl::Rect"* nocapture readnone dereferenceable(32), i1 zeroext, i8* noalias nocapture readnone, i64, i64) #18 {
  %10 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.16, i64 0, i64 0), i32 350) #22
  %11 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define internal void @_ZN3jxl6N_SSE412_GLOBAL__N_114FastXYBTosRGB8ERKNS_6Image3IfEERKNS_4RectES8_PKNS_5PlaneIfEES8_bPhmm(%"class.jxl::Image3"* nocapture readnone dereferenceable(96), %"class.jxl::Rect"* nocapture readnone dereferenceable(32), %"class.jxl::Rect"* nocapture readnone dereferenceable(32), %"class.jxl::Plane"* nocapture readnone, %"class.jxl::Rect"* nocapture readnone dereferenceable(32), i1 zeroext, i8* noalias nocapture readnone, i64, i64) #19 {
  %10 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.16, i64 0, i64 0), i32 350) #22
  %11 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define internal void @_ZN3jxl8N_SCALAR12_GLOBAL__N_114FastXYBTosRGB8ERKNS_6Image3IfEERKNS_4RectES8_PKNS_5PlaneIfEES8_bPhmm(%"class.jxl::Image3"* nocapture readnone dereferenceable(96), %"class.jxl::Rect"* nocapture readnone dereferenceable(32), %"class.jxl::Rect"* nocapture readnone dereferenceable(32), %"class.jxl::Plane"* nocapture readnone, %"class.jxl::Rect"* nocapture readnone dereferenceable(32), i1 zeroext, i8* noalias nocapture readnone, i64, i64) #20 {
  %10 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.16, i64 0, i64 0), i32 350) #22
  %11 = tail call zeroext i1 @_ZN3jxl5AbortEv() #29
  unreachable
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #12

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #2

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #2

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #10 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE420OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_0E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE420OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_0E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon**
  %6 = load %class.anon*, %class.anon** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_SSE420OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsEENK3$_0clEii"(%class.anon* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE420OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsEENK3$_0clEii"(%class.anon* nocapture readonly, i32) unnamed_addr #21 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %4, align 8
  %6 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %3
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #22
  %15 = getelementptr inbounds i8, i8* %11, i64 %9
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #22
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #22
  %25 = getelementptr inbounds i8, i8* %21, i64 %9
  %26 = ptrtoint i8* %25 to i64
  %27 = and i64 %26, 63
  %28 = icmp eq i64 %27, 0
  tail call void @llvm.assume(i1 %28) #22
  %29 = bitcast i8* %25 to float*
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #22
  %35 = getelementptr inbounds i8, i8* %31, i64 %9
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #22
  %39 = bitcast i8* %35 to float*
  %40 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 1
  %41 = load i64*, i64** %40, align 8
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %2
  %45 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 2
  br label %47

46:                                               ; preds = %47, %2
  ret void

47:                                               ; preds = %44, %47
  %48 = phi i64 [ 0, %44 ], [ %132, %47 ]
  %49 = getelementptr inbounds float, float* %19, i64 %48
  %50 = bitcast float* %49 to <4 x float>*
  %51 = load <4 x float>, <4 x float>* %50, align 16, !alias.scope !100
  %52 = getelementptr inbounds float, float* %29, i64 %48
  %53 = bitcast float* %52 to <4 x float>*
  %54 = load <4 x float>, <4 x float>* %53, align 16, !alias.scope !103
  %55 = getelementptr inbounds float, float* %39, i64 %48
  %56 = bitcast float* %55 to <4 x float>*
  %57 = load <4 x float>, <4 x float>* %56, align 16, !alias.scope !106
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #22, !srcloc !109
  %58 = load %"struct.jxl::OpsinParams"*, %"struct.jxl::OpsinParams"** %45, align 8
  %59 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 1, i64 0
  %60 = bitcast float* %59 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 1, !alias.scope !110, !noalias !115
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> zeroinitializer
  %63 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %64 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %65 = fadd <4 x float> %51, %54
  %66 = fsub <4 x float> %54, %51
  %67 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 0
  %68 = load float, float* %67, align 4, !noalias !115
  %69 = insertelement <4 x float> undef, float %68, i32 0
  %70 = shufflevector <4 x float> %69, <4 x float> undef, <4 x i32> zeroinitializer
  %71 = fsub <4 x float> %65, %70
  %72 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 1
  %73 = load float, float* %72, align 4, !noalias !115
  %74 = insertelement <4 x float> undef, float %73, i32 0
  %75 = shufflevector <4 x float> %74, <4 x float> undef, <4 x i32> zeroinitializer
  %76 = fsub <4 x float> %66, %75
  %77 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 2
  %78 = load float, float* %77, align 4, !noalias !115
  %79 = insertelement <4 x float> undef, float %78, i32 0
  %80 = shufflevector <4 x float> %79, <4 x float> undef, <4 x i32> zeroinitializer
  %81 = fsub <4 x float> %57, %80
  %82 = fmul <4 x float> %71, %71
  %83 = fmul <4 x float> %76, %76
  %84 = fmul <4 x float> %81, %81
  %85 = fmul <4 x float> %71, %82
  %86 = fadd <4 x float> %62, %85
  %87 = fmul <4 x float> %76, %83
  %88 = fadd <4 x float> %63, %87
  %89 = fmul <4 x float> %81, %84
  %90 = fadd <4 x float> %64, %89
  %91 = bitcast %"struct.jxl::OpsinParams"* %58 to <4 x float>*
  %92 = load <4 x float>, <4 x float>* %91, align 1, !alias.scope !120, !noalias !115
  %93 = fmul <4 x float> %92, %86
  %94 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 12
  %95 = bitcast float* %94 to <4 x float>*
  %96 = load <4 x float>, <4 x float>* %95, align 1, !alias.scope !125, !noalias !115
  %97 = fmul <4 x float> %96, %86
  %98 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 24
  %99 = bitcast float* %98 to <4 x float>*
  %100 = load <4 x float>, <4 x float>* %99, align 1, !alias.scope !130, !noalias !115
  %101 = fmul <4 x float> %100, %86
  %102 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 4
  %103 = bitcast float* %102 to <4 x float>*
  %104 = load <4 x float>, <4 x float>* %103, align 1, !alias.scope !135, !noalias !115
  %105 = fmul <4 x float> %104, %88
  %106 = fadd <4 x float> %93, %105
  %107 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 16
  %108 = bitcast float* %107 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 1, !alias.scope !140, !noalias !115
  %110 = fmul <4 x float> %88, %109
  %111 = fadd <4 x float> %97, %110
  %112 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 28
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 1, !alias.scope !145, !noalias !115
  %115 = fmul <4 x float> %88, %114
  %116 = fadd <4 x float> %101, %115
  %117 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 8
  %118 = bitcast float* %117 to <4 x float>*
  %119 = load <4 x float>, <4 x float>* %118, align 1, !alias.scope !150, !noalias !115
  %120 = fmul <4 x float> %90, %119
  %121 = fadd <4 x float> %106, %120
  %122 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 20
  %123 = bitcast float* %122 to <4 x float>*
  %124 = load <4 x float>, <4 x float>* %123, align 1, !alias.scope !155, !noalias !115
  %125 = fmul <4 x float> %90, %124
  %126 = fadd <4 x float> %111, %125
  %127 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 32
  %128 = bitcast float* %127 to <4 x float>*
  %129 = load <4 x float>, <4 x float>* %128, align 1, !alias.scope !160, !noalias !115
  %130 = fmul <4 x float> %90, %129
  %131 = fadd <4 x float> %116, %130
  store <4 x float> %121, <4 x float>* %50, align 16, !alias.scope !165
  store <4 x float> %126, <4 x float>* %53, align 16, !alias.scope !168
  store <4 x float> %131, <4 x float>* %56, align 16, !alias.scope !171
  %132 = add i64 %48, 4
  %133 = load i64*, i64** %40, align 8
  %134 = load i64, i64* %133, align 8
  %135 = icmp ult i64 %132, %134
  br i1 %135, label %47, label %46
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #22

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE413OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_1E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE413OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_1E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.1**
  %6 = load %class.anon.1*, %class.anon.1** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_SSE413OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsEENK3$_1clEii"(%class.anon.1* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE413OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsEENK3$_1clEii"(%class.anon.1* nocapture readonly, i32) unnamed_addr #21 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 0
  %5 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %4, align 8
  %6 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 1
  %7 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, %3
  %11 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %10
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #22
  %19 = getelementptr inbounds i8, i8* %15, i64 %13
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #22
  %23 = bitcast i8* %19 to float*
  %24 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds float, float* %23, i64 %25
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #22
  %32 = getelementptr inbounds i8, i8* %28, i64 %13
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #22
  %36 = bitcast i8* %32 to float*
  %37 = getelementptr inbounds float, float* %36, i64 %25
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #22
  %43 = getelementptr inbounds i8, i8* %39, i64 %13
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #22
  %47 = bitcast i8* %43 to float*
  %48 = getelementptr inbounds float, float* %47, i64 %25
  %49 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 2
  %50 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %49, align 8
  %51 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %50, align 8
  %52 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 0, i32 0, i32 4
  %53 = load i64, i64* %52, align 8
  %54 = mul i64 %53, %3
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #22
  %60 = getelementptr inbounds i8, i8* %56, i64 %54
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #22
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #22
  %70 = getelementptr inbounds i8, i8* %66, i64 %54
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #22
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = ptrtoint i8* %76 to i64
  %78 = and i64 %77, 63
  %79 = icmp eq i64 %78, 0
  tail call void @llvm.assume(i1 %79) #22
  %80 = getelementptr inbounds i8, i8* %76, i64 %54
  %81 = ptrtoint i8* %80 to i64
  %82 = and i64 %81, 63
  %83 = icmp eq i64 %82, 0
  tail call void @llvm.assume(i1 %83) #22
  %84 = bitcast i8* %80 to float*
  %85 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 2
  %86 = load i64, i64* %85, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %2
  %89 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 3
  br label %91

90:                                               ; preds = %91, %2
  ret void

91:                                               ; preds = %88, %91
  %92 = phi i64 [ 0, %88 ], [ %182, %91 ]
  %93 = getelementptr inbounds float, float* %26, i64 %92
  %94 = bitcast float* %93 to <4 x float>*
  %95 = load <4 x float>, <4 x float>* %94, align 16, !alias.scope !174
  %96 = getelementptr inbounds float, float* %37, i64 %92
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 16, !alias.scope !177
  %99 = getelementptr inbounds float, float* %48, i64 %92
  %100 = bitcast float* %99 to <4 x float>*
  %101 = load <4 x float>, <4 x float>* %100, align 16, !alias.scope !180
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #22, !srcloc !183
  %102 = load %"struct.jxl::OpsinParams"*, %"struct.jxl::OpsinParams"** %89, align 8
  %103 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 1, i64 0
  %104 = bitcast float* %103 to <4 x float>*
  %105 = load <4 x float>, <4 x float>* %104, align 1, !alias.scope !184, !noalias !189
  %106 = shufflevector <4 x float> %105, <4 x float> undef, <4 x i32> zeroinitializer
  %107 = shufflevector <4 x float> %105, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %108 = shufflevector <4 x float> %105, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %109 = fadd <4 x float> %95, %98
  %110 = fsub <4 x float> %98, %95
  %111 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 0
  %112 = load float, float* %111, align 4, !noalias !189
  %113 = insertelement <4 x float> undef, float %112, i32 0
  %114 = shufflevector <4 x float> %113, <4 x float> undef, <4 x i32> zeroinitializer
  %115 = fsub <4 x float> %109, %114
  %116 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 1
  %117 = load float, float* %116, align 4, !noalias !189
  %118 = insertelement <4 x float> undef, float %117, i32 0
  %119 = shufflevector <4 x float> %118, <4 x float> undef, <4 x i32> zeroinitializer
  %120 = fsub <4 x float> %110, %119
  %121 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 2
  %122 = load float, float* %121, align 4, !noalias !189
  %123 = insertelement <4 x float> undef, float %122, i32 0
  %124 = shufflevector <4 x float> %123, <4 x float> undef, <4 x i32> zeroinitializer
  %125 = fsub <4 x float> %101, %124
  %126 = fmul <4 x float> %115, %115
  %127 = fmul <4 x float> %120, %120
  %128 = fmul <4 x float> %125, %125
  %129 = fmul <4 x float> %115, %126
  %130 = fadd <4 x float> %106, %129
  %131 = fmul <4 x float> %120, %127
  %132 = fadd <4 x float> %107, %131
  %133 = fmul <4 x float> %125, %128
  %134 = fadd <4 x float> %108, %133
  %135 = bitcast %"struct.jxl::OpsinParams"* %102 to <4 x float>*
  %136 = load <4 x float>, <4 x float>* %135, align 1, !alias.scope !194, !noalias !189
  %137 = fmul <4 x float> %136, %130
  %138 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 12
  %139 = bitcast float* %138 to <4 x float>*
  %140 = load <4 x float>, <4 x float>* %139, align 1, !alias.scope !199, !noalias !189
  %141 = fmul <4 x float> %140, %130
  %142 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 24
  %143 = bitcast float* %142 to <4 x float>*
  %144 = load <4 x float>, <4 x float>* %143, align 1, !alias.scope !204, !noalias !189
  %145 = fmul <4 x float> %144, %130
  %146 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 4
  %147 = bitcast float* %146 to <4 x float>*
  %148 = load <4 x float>, <4 x float>* %147, align 1, !alias.scope !209, !noalias !189
  %149 = fmul <4 x float> %148, %132
  %150 = fadd <4 x float> %137, %149
  %151 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 16
  %152 = bitcast float* %151 to <4 x float>*
  %153 = load <4 x float>, <4 x float>* %152, align 1, !alias.scope !214, !noalias !189
  %154 = fmul <4 x float> %132, %153
  %155 = fadd <4 x float> %141, %154
  %156 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 28
  %157 = bitcast float* %156 to <4 x float>*
  %158 = load <4 x float>, <4 x float>* %157, align 1, !alias.scope !219, !noalias !189
  %159 = fmul <4 x float> %132, %158
  %160 = fadd <4 x float> %145, %159
  %161 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 8
  %162 = bitcast float* %161 to <4 x float>*
  %163 = load <4 x float>, <4 x float>* %162, align 1, !alias.scope !224, !noalias !189
  %164 = fmul <4 x float> %134, %163
  %165 = fadd <4 x float> %150, %164
  %166 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 20
  %167 = bitcast float* %166 to <4 x float>*
  %168 = load <4 x float>, <4 x float>* %167, align 1, !alias.scope !229, !noalias !189
  %169 = fmul <4 x float> %134, %168
  %170 = fadd <4 x float> %155, %169
  %171 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 32
  %172 = bitcast float* %171 to <4 x float>*
  %173 = load <4 x float>, <4 x float>* %172, align 1, !alias.scope !234, !noalias !189
  %174 = fmul <4 x float> %134, %173
  %175 = fadd <4 x float> %160, %174
  %176 = getelementptr inbounds float, float* %64, i64 %92
  %177 = bitcast float* %176 to <4 x float>*
  store <4 x float> %165, <4 x float>* %177, align 16, !alias.scope !239
  %178 = getelementptr inbounds float, float* %74, i64 %92
  %179 = bitcast float* %178 to <4 x float>*
  store <4 x float> %170, <4 x float>* %179, align 16, !alias.scope !242
  %180 = getelementptr inbounds float, float* %84, i64 %92
  %181 = bitcast float* %180 to <4 x float>*
  store <4 x float> %175, <4 x float>* %181, align 16, !alias.scope !245
  %182 = add i64 %92, 4
  %183 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %4, align 8
  %184 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %183, i64 0, i32 2
  %185 = load i64, i64* %184, align 8
  %186 = icmp ult i64 %182, %185
  br i1 %186, label %91, label %90
}

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_2E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_2E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.2**
  %6 = load %class.anon.2*, %class.anon.2** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEENK3$_2clEii"(%class.anon.2* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE410UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEENK3$_2clEii"(%class.anon.2* nocapture readonly, i32) unnamed_addr #21 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %3
  %8 = add i64 %7, %6
  %9 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, %8
  %13 = select i1 %12, i64 %11, i64 %8
  %14 = icmp ult i64 %7, %13
  br i1 %14, label %15, label %30

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 2
  %17 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 3
  %18 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 4
  %19 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 7
  %20 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 8
  %21 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 5
  %22 = load i64*, i64** %18, align 8
  %23 = load i64, i64* %22, align 8
  br label %31

24:                                               ; preds = %86, %31
  %25 = phi i64 [ 0, %31 ], [ %119, %86 ]
  %26 = icmp ult i64 %58, %13
  br i1 %26, label %27, label %30

27:                                               ; preds = %24
  %28 = load i64*, i64** %9, align 8
  %29 = load i64, i64* %28, align 8
  br label %31

30:                                               ; preds = %24, %2
  ret void

31:                                               ; preds = %27, %15
  %32 = phi i64 [ %23, %15 ], [ %25, %27 ]
  %33 = phi i64 [ %11, %15 ], [ %29, %27 ]
  %34 = phi i64 [ %7, %15 ], [ %58, %27 ]
  %35 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %16, align 8
  %36 = icmp eq i64 %34, 0
  %37 = add i64 %34, -1
  %38 = select i1 %36, i64 1, i64 %37
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 4
  %42 = load i64, i64* %41, align 8
  %43 = mul i64 %42, %38
  %44 = getelementptr inbounds i8, i8* %40, i64 %43
  %45 = ptrtoint i8* %44 to i64
  %46 = and i64 %45, 63
  %47 = icmp eq i64 %46, 0
  tail call void @llvm.assume(i1 %47) #22
  %48 = bitcast i8* %44 to float*
  %49 = mul i64 %42, %34
  %50 = getelementptr inbounds i8, i8* %40, i64 %49
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #22
  %54 = bitcast i8* %50 to float*
  %55 = add i64 %33, -1
  %56 = icmp eq i64 %34, %55
  %57 = add i64 %33, -2
  %58 = add nuw i64 %34, 1
  %59 = select i1 %56, i64 %57, i64 %58
  %60 = mul i64 %59, %42
  %61 = getelementptr inbounds i8, i8* %40, i64 %60
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #22
  %65 = bitcast i8* %61 to float*
  %66 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %17, align 8
  %67 = shl i64 %34, 1
  %68 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %66, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %66, i64 0, i32 0, i32 4
  %71 = load i64, i64* %70, align 8
  %72 = mul i64 %71, %67
  %73 = getelementptr inbounds i8, i8* %69, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = and i64 %74, 63
  %76 = icmp eq i64 %75, 0
  tail call void @llvm.assume(i1 %76) #22
  %77 = bitcast i8* %73 to float*
  %78 = or i64 %67, 1
  %79 = mul i64 %71, %78
  %80 = getelementptr inbounds i8, i8* %69, i64 %79
  %81 = ptrtoint i8* %80 to i64
  %82 = and i64 %81, 63
  %83 = icmp eq i64 %82, 0
  tail call void @llvm.assume(i1 %83) #22
  %84 = bitcast i8* %80 to float*
  %85 = icmp eq i64 %32, 0
  br i1 %85, label %24, label %86

86:                                               ; preds = %31, %86
  %87 = phi i64 [ %117, %86 ], [ 0, %31 ]
  %88 = getelementptr inbounds float, float* %54, i64 %87
  %89 = bitcast float* %88 to <4 x float>*
  %90 = load <4 x float>, <4 x float>* %89, align 16, !alias.scope !248
  %91 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %19, align 8
  %92 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %91, i64 0, i32 0
  %93 = load <4 x float>, <4 x float>* %92, align 16
  %94 = fmul <4 x float> %90, %93
  %95 = getelementptr inbounds float, float* %48, i64 %87
  %96 = bitcast float* %95 to <4 x float>*
  %97 = load <4 x float>, <4 x float>* %96, align 16, !alias.scope !251
  %98 = getelementptr inbounds float, float* %65, i64 %87
  %99 = bitcast float* %98 to <4 x float>*
  %100 = load <4 x float>, <4 x float>* %99, align 16, !alias.scope !254
  %101 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %20, align 8
  %102 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %101, i64 0, i32 0
  %103 = load <4 x float>, <4 x float>* %102, align 16
  %104 = fmul <4 x float> %97, %103
  %105 = fadd <4 x float> %94, %104
  %106 = getelementptr inbounds float, float* %77, i64 %87
  %107 = bitcast float* %106 to <4 x float>*
  store <4 x float> %105, <4 x float>* %107, align 16, !alias.scope !257
  %108 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %20, align 8
  %109 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %108, i64 0, i32 0
  %110 = load <4 x float>, <4 x float>* %109, align 16
  %111 = fmul <4 x float> %100, %110
  %112 = fadd <4 x float> %94, %111
  %113 = getelementptr inbounds float, float* %84, i64 %87
  %114 = bitcast float* %113 to <4 x float>*
  store <4 x float> %112, <4 x float>* %114, align 16, !alias.scope !260
  %115 = load i64*, i64** %21, align 8
  %116 = load i64, i64* %115, align 8
  %117 = add i64 %116, %87
  %118 = load i64*, i64** %18, align 8
  %119 = load i64, i64* %118, align 8
  %120 = icmp ult i64 %117, %119
  br i1 %120, label %86, label %24
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_3E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_3E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.3**
  %6 = load %class.anon.3*, %class.anon.3** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_SSE410UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolEENK3$_3clEii"(%class.anon.3* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE410UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolEENK3$_3clEii"(%class.anon.3* nocapture readonly, i32) unnamed_addr #21 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.3, %class.anon.3* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %3
  %8 = add i64 %7, %6
  %9 = getelementptr inbounds %class.anon.3, %class.anon.3* %0, i64 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, %8
  %13 = select i1 %12, i64 %11, i64 %8
  %14 = icmp ult i64 %7, %13
  br i1 %14, label %15, label %19

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.anon.3, %class.anon.3* %0, i64 0, i32 2
  %17 = getelementptr inbounds %class.anon.3, %class.anon.3* %0, i64 0, i32 3
  %18 = getelementptr inbounds %class.anon.3, %class.anon.3* %0, i64 0, i32 5
  br label %20

19:                                               ; preds = %114, %2
  ret void

20:                                               ; preds = %15, %114
  %21 = phi i64 [ %7, %15 ], [ %115, %114 ]
  %22 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %16, align 8
  %23 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %22, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %22, i64 0, i32 0, i32 4
  %26 = load i64, i64* %25, align 8
  %27 = mul i64 %26, %21
  %28 = getelementptr inbounds i8, i8* %24, i64 %27
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #22
  %32 = bitcast i8* %28 to float*
  %33 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %17, align 8
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %33, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %33, i64 0, i32 0, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = mul i64 %37, %21
  %39 = getelementptr inbounds i8, i8* %35, i64 %38
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #22
  %43 = bitcast i8* %39 to float*
  %44 = load i64*, i64** %18, align 8
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, -1
  %47 = icmp ugt i64 %46, 1
  br i1 %47, label %51, label %48

48:                                               ; preds = %51, %20
  %49 = phi i64 [ %45, %20 ], [ %76, %51 ]
  %50 = icmp eq i64 %49, 1
  br i1 %50, label %79, label %85

51:                                               ; preds = %20, %51
  %52 = phi i64 [ %74, %51 ], [ 1, %20 ]
  %53 = getelementptr inbounds float, float* %32, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 4, !alias.scope !263
  %56 = fmul <4 x float> %55, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %57 = getelementptr inbounds float, float* %53, i64 -1
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 16, !alias.scope !266
  %60 = getelementptr inbounds float, float* %53, i64 1
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 8, !alias.scope !269
  %63 = fmul <4 x float> %59, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %64 = fadd <4 x float> %56, %63
  %65 = fmul <4 x float> %62, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %66 = fadd <4 x float> %56, %65
  %67 = shufflevector <4 x float> %64, <4 x float> %66, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %68 = shl i64 %52, 1
  %69 = getelementptr inbounds float, float* %43, i64 %68
  %70 = bitcast float* %69 to <4 x float>*
  store <4 x float> %67, <4 x float>* %70, align 8, !alias.scope !272
  %71 = shufflevector <4 x float> %64, <4 x float> %66, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %72 = getelementptr inbounds float, float* %69, i64 4
  %73 = bitcast float* %72 to <4 x float>*
  store <4 x float> %71, <4 x float>* %73, align 8, !alias.scope !275
  %74 = add i64 %52, 4
  %75 = load i64*, i64** %18, align 8
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, -1
  %78 = icmp ult i64 %74, %77
  br i1 %78, label %51, label %48

79:                                               ; preds = %48
  %80 = bitcast i8* %28 to i32*
  %81 = load i32, i32* %80, align 64
  %82 = getelementptr inbounds i8, i8* %39, i64 4
  %83 = bitcast i8* %82 to i32*
  store i32 %81, i32* %83, align 4
  %84 = bitcast i8* %39 to i32*
  store i32 %81, i32* %84, align 64
  br label %114

85:                                               ; preds = %48
  %86 = load float, float* %32, align 64
  %87 = fmul float %86, 7.500000e-01
  %88 = getelementptr inbounds i8, i8* %28, i64 4
  %89 = bitcast i8* %88 to float*
  %90 = load float, float* %89, align 4
  %91 = fmul float %90, 2.500000e-01
  %92 = fadd float %87, %91
  %93 = getelementptr inbounds i8, i8* %39, i64 4
  %94 = bitcast i8* %93 to float*
  store float %92, float* %94, align 4
  store float %92, float* %43, align 64
  %95 = load i64*, i64** %18, align 8
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, -1
  %98 = getelementptr inbounds float, float* %32, i64 %97
  %99 = load float, float* %98, align 4
  %100 = fmul float %99, 7.500000e-01
  %101 = add i64 %96, -2
  %102 = getelementptr inbounds float, float* %32, i64 %101
  %103 = load float, float* %102, align 4
  %104 = fmul float %103, 2.500000e-01
  %105 = fadd float %100, %104
  %106 = shl i64 %96, 1
  %107 = add i64 %106, -1
  %108 = getelementptr inbounds float, float* %43, i64 %107
  store float %105, float* %108, align 4
  %109 = load i64*, i64** %18, align 8
  %110 = load i64, i64* %109, align 8
  %111 = shl i64 %110, 1
  %112 = add i64 %111, -2
  %113 = getelementptr inbounds float, float* %43, i64 %112
  store float %105, float* %113, align 8
  br label %114

114:                                              ; preds = %85, %79
  %115 = add nuw i64 %21, 1
  %116 = icmp ult i64 %115, %13
  br i1 %116, label %20, label %19
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX220OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_4E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX220OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_4E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.4**
  %6 = load %class.anon.4*, %class.anon.4** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX220OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsEENK3$_4clEii"(%class.anon.4* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX220OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsEENK3$_4clEii"(%class.anon.4* nocapture readonly, i32) unnamed_addr #23 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.4, %class.anon.4* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %4, align 8
  %6 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %3
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #22
  %15 = getelementptr inbounds i8, i8* %11, i64 %9
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #22
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #22
  %25 = getelementptr inbounds i8, i8* %21, i64 %9
  %26 = ptrtoint i8* %25 to i64
  %27 = and i64 %26, 63
  %28 = icmp eq i64 %27, 0
  tail call void @llvm.assume(i1 %28) #22
  %29 = bitcast i8* %25 to float*
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #22
  %35 = getelementptr inbounds i8, i8* %31, i64 %9
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #22
  %39 = bitcast i8* %35 to float*
  %40 = getelementptr inbounds %class.anon.4, %class.anon.4* %0, i64 0, i32 1
  %41 = load i64*, i64** %40, align 8
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %2
  %45 = getelementptr inbounds %class.anon.4, %class.anon.4* %0, i64 0, i32 2
  br label %47

46:                                               ; preds = %47, %2
  ret void

47:                                               ; preds = %44, %47
  %48 = phi i64 [ 0, %44 ], [ %132, %47 ]
  %49 = getelementptr inbounds float, float* %19, i64 %48
  %50 = bitcast float* %49 to <8 x float>*
  %51 = load <8 x float>, <8 x float>* %50, align 32, !alias.scope !278, !noalias !281
  %52 = getelementptr inbounds float, float* %29, i64 %48
  %53 = bitcast float* %52 to <8 x float>*
  %54 = load <8 x float>, <8 x float>* %53, align 32, !alias.scope !283, !noalias !286
  %55 = getelementptr inbounds float, float* %39, i64 %48
  %56 = bitcast float* %55 to <8 x float>*
  %57 = load <8 x float>, <8 x float>* %56, align 32, !alias.scope !288, !noalias !291
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #22, !srcloc !293
  %58 = load %"struct.jxl::OpsinParams"*, %"struct.jxl::OpsinParams"** %45, align 8
  %59 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 1, i64 0
  %60 = bitcast float* %59 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 1, !alias.scope !294, !noalias !297
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <8 x i32> zeroinitializer
  %63 = shufflevector <4 x float> %61, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %64 = shufflevector <4 x float> %61, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %65 = fadd <8 x float> %51, %54
  %66 = fsub <8 x float> %54, %51
  %67 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 0
  %68 = load float, float* %67, align 4, !noalias !303
  %69 = insertelement <8 x float> undef, float %68, i32 0
  %70 = shufflevector <8 x float> %69, <8 x float> undef, <8 x i32> zeroinitializer
  %71 = fsub <8 x float> %65, %70
  %72 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 1
  %73 = load float, float* %72, align 4, !noalias !303
  %74 = insertelement <8 x float> undef, float %73, i32 0
  %75 = shufflevector <8 x float> %74, <8 x float> undef, <8 x i32> zeroinitializer
  %76 = fsub <8 x float> %66, %75
  %77 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 2
  %78 = load float, float* %77, align 4, !noalias !303
  %79 = insertelement <8 x float> undef, float %78, i32 0
  %80 = shufflevector <8 x float> %79, <8 x float> undef, <8 x i32> zeroinitializer
  %81 = fsub <8 x float> %57, %80
  %82 = fmul <8 x float> %71, %71
  %83 = fmul <8 x float> %76, %76
  %84 = fmul <8 x float> %81, %81
  %85 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %82, <8 x float> %71, <8 x float> %62) #22
  %86 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %83, <8 x float> %76, <8 x float> %63) #22
  %87 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %84, <8 x float> %81, <8 x float> %64) #22
  %88 = bitcast %"struct.jxl::OpsinParams"* %58 to <4 x float>*
  %89 = load <4 x float>, <4 x float>* %88, align 1, !alias.scope !304, !noalias !307
  %90 = shufflevector <4 x float> %89, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %91 = fmul <8 x float> %90, %85
  %92 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 12
  %93 = bitcast float* %92 to <4 x float>*
  %94 = load <4 x float>, <4 x float>* %93, align 1, !alias.scope !309, !noalias !312
  %95 = shufflevector <4 x float> %94, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %96 = fmul <8 x float> %85, %95
  %97 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 24
  %98 = bitcast float* %97 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 1, !alias.scope !314, !noalias !317
  %100 = shufflevector <4 x float> %99, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %101 = fmul <8 x float> %85, %100
  %102 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 4
  %103 = bitcast float* %102 to <4 x float>*
  %104 = load <4 x float>, <4 x float>* %103, align 1, !alias.scope !319, !noalias !322
  %105 = shufflevector <4 x float> %104, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %106 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %105, <8 x float> %86, <8 x float> %91) #22
  %107 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 16
  %108 = bitcast float* %107 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 1, !alias.scope !324, !noalias !327
  %110 = shufflevector <4 x float> %109, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %111 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %110, <8 x float> %86, <8 x float> %96) #22
  %112 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 28
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 1, !alias.scope !329, !noalias !332
  %115 = shufflevector <4 x float> %114, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %116 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %115, <8 x float> %86, <8 x float> %101) #22
  %117 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 8
  %118 = bitcast float* %117 to <4 x float>*
  %119 = load <4 x float>, <4 x float>* %118, align 1, !alias.scope !334, !noalias !337
  %120 = shufflevector <4 x float> %119, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %121 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %120, <8 x float> %87, <8 x float> %106) #22
  %122 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 20
  %123 = bitcast float* %122 to <4 x float>*
  %124 = load <4 x float>, <4 x float>* %123, align 1, !alias.scope !339, !noalias !342
  %125 = shufflevector <4 x float> %124, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %126 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %125, <8 x float> %87, <8 x float> %111) #22
  %127 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 32
  %128 = bitcast float* %127 to <4 x float>*
  %129 = load <4 x float>, <4 x float>* %128, align 1, !alias.scope !344, !noalias !347
  %130 = shufflevector <4 x float> %129, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %131 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %130, <8 x float> %87, <8 x float> %116) #22
  store <8 x float> %121, <8 x float>* %50, align 32, !alias.scope !349
  store <8 x float> %126, <8 x float>* %53, align 32, !alias.scope !352
  store <8 x float> %131, <8 x float>* %56, align 32, !alias.scope !355
  %132 = add i64 %48, 8
  %133 = load i64*, i64** %40, align 8
  %134 = load i64, i64* %133, align 8
  %135 = icmp ult i64 %132, %134
  br i1 %135, label %47, label %46
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #12

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX213OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_5E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX213OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_5E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.5**
  %6 = load %class.anon.5*, %class.anon.5** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX213OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsEENK3$_5clEii"(%class.anon.5* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX213OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsEENK3$_5clEii"(%class.anon.5* nocapture readonly, i32) unnamed_addr #23 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.5, %class.anon.5* %0, i64 0, i32 0
  %5 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %4, align 8
  %6 = getelementptr inbounds %class.anon.5, %class.anon.5* %0, i64 0, i32 1
  %7 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, %3
  %11 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %10
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #22
  %19 = getelementptr inbounds i8, i8* %15, i64 %13
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #22
  %23 = bitcast i8* %19 to float*
  %24 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds float, float* %23, i64 %25
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #22
  %32 = getelementptr inbounds i8, i8* %28, i64 %13
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #22
  %36 = bitcast i8* %32 to float*
  %37 = getelementptr inbounds float, float* %36, i64 %25
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #22
  %43 = getelementptr inbounds i8, i8* %39, i64 %13
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #22
  %47 = bitcast i8* %43 to float*
  %48 = getelementptr inbounds float, float* %47, i64 %25
  %49 = getelementptr inbounds %class.anon.5, %class.anon.5* %0, i64 0, i32 2
  %50 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %49, align 8
  %51 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %50, align 8
  %52 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 0, i32 0, i32 4
  %53 = load i64, i64* %52, align 8
  %54 = mul i64 %53, %3
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #22
  %60 = getelementptr inbounds i8, i8* %56, i64 %54
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #22
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #22
  %70 = getelementptr inbounds i8, i8* %66, i64 %54
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #22
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = ptrtoint i8* %76 to i64
  %78 = and i64 %77, 63
  %79 = icmp eq i64 %78, 0
  tail call void @llvm.assume(i1 %79) #22
  %80 = getelementptr inbounds i8, i8* %76, i64 %54
  %81 = ptrtoint i8* %80 to i64
  %82 = and i64 %81, 63
  %83 = icmp eq i64 %82, 0
  tail call void @llvm.assume(i1 %83) #22
  %84 = bitcast i8* %80 to float*
  %85 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 2
  %86 = load i64, i64* %85, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %2
  %89 = getelementptr inbounds %class.anon.5, %class.anon.5* %0, i64 0, i32 3
  br label %91

90:                                               ; preds = %91, %2
  ret void

91:                                               ; preds = %88, %91
  %92 = phi i64 [ 0, %88 ], [ %182, %91 ]
  %93 = getelementptr inbounds float, float* %26, i64 %92
  %94 = bitcast float* %93 to <8 x float>*
  %95 = load <8 x float>, <8 x float>* %94, align 32, !alias.scope !358, !noalias !361
  %96 = getelementptr inbounds float, float* %37, i64 %92
  %97 = bitcast float* %96 to <8 x float>*
  %98 = load <8 x float>, <8 x float>* %97, align 32, !alias.scope !363, !noalias !366
  %99 = getelementptr inbounds float, float* %48, i64 %92
  %100 = bitcast float* %99 to <8 x float>*
  %101 = load <8 x float>, <8 x float>* %100, align 32, !alias.scope !368, !noalias !371
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #22, !srcloc !373
  %102 = load %"struct.jxl::OpsinParams"*, %"struct.jxl::OpsinParams"** %89, align 8
  %103 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 1, i64 0
  %104 = bitcast float* %103 to <4 x float>*
  %105 = load <4 x float>, <4 x float>* %104, align 1, !alias.scope !374, !noalias !377
  %106 = shufflevector <4 x float> %105, <4 x float> undef, <8 x i32> zeroinitializer
  %107 = shufflevector <4 x float> %105, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %108 = shufflevector <4 x float> %105, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %109 = fadd <8 x float> %95, %98
  %110 = fsub <8 x float> %98, %95
  %111 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 0
  %112 = load float, float* %111, align 4, !noalias !383
  %113 = insertelement <8 x float> undef, float %112, i32 0
  %114 = shufflevector <8 x float> %113, <8 x float> undef, <8 x i32> zeroinitializer
  %115 = fsub <8 x float> %109, %114
  %116 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 1
  %117 = load float, float* %116, align 4, !noalias !383
  %118 = insertelement <8 x float> undef, float %117, i32 0
  %119 = shufflevector <8 x float> %118, <8 x float> undef, <8 x i32> zeroinitializer
  %120 = fsub <8 x float> %110, %119
  %121 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 2
  %122 = load float, float* %121, align 4, !noalias !383
  %123 = insertelement <8 x float> undef, float %122, i32 0
  %124 = shufflevector <8 x float> %123, <8 x float> undef, <8 x i32> zeroinitializer
  %125 = fsub <8 x float> %101, %124
  %126 = fmul <8 x float> %115, %115
  %127 = fmul <8 x float> %120, %120
  %128 = fmul <8 x float> %125, %125
  %129 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %126, <8 x float> %115, <8 x float> %106) #22
  %130 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %127, <8 x float> %120, <8 x float> %107) #22
  %131 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %128, <8 x float> %125, <8 x float> %108) #22
  %132 = bitcast %"struct.jxl::OpsinParams"* %102 to <4 x float>*
  %133 = load <4 x float>, <4 x float>* %132, align 1, !alias.scope !384, !noalias !387
  %134 = shufflevector <4 x float> %133, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %135 = fmul <8 x float> %134, %129
  %136 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 12
  %137 = bitcast float* %136 to <4 x float>*
  %138 = load <4 x float>, <4 x float>* %137, align 1, !alias.scope !389, !noalias !392
  %139 = shufflevector <4 x float> %138, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %140 = fmul <8 x float> %129, %139
  %141 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 24
  %142 = bitcast float* %141 to <4 x float>*
  %143 = load <4 x float>, <4 x float>* %142, align 1, !alias.scope !394, !noalias !397
  %144 = shufflevector <4 x float> %143, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %145 = fmul <8 x float> %129, %144
  %146 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 4
  %147 = bitcast float* %146 to <4 x float>*
  %148 = load <4 x float>, <4 x float>* %147, align 1, !alias.scope !399, !noalias !402
  %149 = shufflevector <4 x float> %148, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %150 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %149, <8 x float> %130, <8 x float> %135) #22
  %151 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 16
  %152 = bitcast float* %151 to <4 x float>*
  %153 = load <4 x float>, <4 x float>* %152, align 1, !alias.scope !404, !noalias !407
  %154 = shufflevector <4 x float> %153, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %155 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %154, <8 x float> %130, <8 x float> %140) #22
  %156 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 28
  %157 = bitcast float* %156 to <4 x float>*
  %158 = load <4 x float>, <4 x float>* %157, align 1, !alias.scope !409, !noalias !412
  %159 = shufflevector <4 x float> %158, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %160 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %159, <8 x float> %130, <8 x float> %145) #22
  %161 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 8
  %162 = bitcast float* %161 to <4 x float>*
  %163 = load <4 x float>, <4 x float>* %162, align 1, !alias.scope !414, !noalias !417
  %164 = shufflevector <4 x float> %163, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %165 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %164, <8 x float> %131, <8 x float> %150) #22
  %166 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 20
  %167 = bitcast float* %166 to <4 x float>*
  %168 = load <4 x float>, <4 x float>* %167, align 1, !alias.scope !419, !noalias !422
  %169 = shufflevector <4 x float> %168, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %170 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %169, <8 x float> %131, <8 x float> %155) #22
  %171 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 32
  %172 = bitcast float* %171 to <4 x float>*
  %173 = load <4 x float>, <4 x float>* %172, align 1, !alias.scope !424, !noalias !427
  %174 = shufflevector <4 x float> %173, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %175 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %174, <8 x float> %131, <8 x float> %160) #22
  %176 = getelementptr inbounds float, float* %64, i64 %92
  %177 = bitcast float* %176 to <8 x float>*
  store <8 x float> %165, <8 x float>* %177, align 32, !alias.scope !429
  %178 = getelementptr inbounds float, float* %74, i64 %92
  %179 = bitcast float* %178 to <8 x float>*
  store <8 x float> %170, <8 x float>* %179, align 32, !alias.scope !432
  %180 = getelementptr inbounds float, float* %84, i64 %92
  %181 = bitcast float* %180 to <8 x float>*
  store <8 x float> %175, <8 x float>* %181, align 32, !alias.scope !435
  %182 = add i64 %92, 8
  %183 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %4, align 8
  %184 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %183, i64 0, i32 2
  %185 = load i64, i64* %184, align 8
  %186 = icmp ult i64 %182, %185
  br i1 %186, label %91, label %90
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_6E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPS0_E3$_6E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.6**
  %6 = load %class.anon.6*, %class.anon.6** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEENK3$_6clEii"(%class.anon.6* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX210UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEENK3$_6clEii"(%class.anon.6* nocapture readonly, i32) unnamed_addr #23 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.6, %class.anon.6* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %3
  %8 = add i64 %7, %6
  %9 = getelementptr inbounds %class.anon.6, %class.anon.6* %0, i64 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, %8
  %13 = select i1 %12, i64 %11, i64 %8
  %14 = icmp ult i64 %7, %13
  br i1 %14, label %15, label %32

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.anon.6, %class.anon.6* %0, i64 0, i32 2
  %17 = getelementptr inbounds %class.anon.6, %class.anon.6* %0, i64 0, i32 3
  %18 = getelementptr inbounds %class.anon.6, %class.anon.6* %0, i64 0, i32 4
  %19 = getelementptr inbounds %class.anon.6, %class.anon.6* %0, i64 0, i32 7
  %20 = bitcast %"class.hwy::N_AVX2::Vec256"** %19 to <8 x float>**
  %21 = getelementptr inbounds %class.anon.6, %class.anon.6* %0, i64 0, i32 8
  %22 = bitcast %"class.hwy::N_AVX2::Vec256"** %21 to <8 x float>**
  %23 = getelementptr inbounds %class.anon.6, %class.anon.6* %0, i64 0, i32 5
  %24 = load i64*, i64** %18, align 8
  %25 = load i64, i64* %24, align 8
  br label %33

26:                                               ; preds = %88, %33
  %27 = phi i64 [ 0, %33 ], [ %116, %88 ]
  %28 = icmp ult i64 %60, %13
  br i1 %28, label %29, label %32

29:                                               ; preds = %26
  %30 = load i64*, i64** %9, align 8
  %31 = load i64, i64* %30, align 8
  br label %33

32:                                               ; preds = %26, %2
  ret void

33:                                               ; preds = %29, %15
  %34 = phi i64 [ %25, %15 ], [ %27, %29 ]
  %35 = phi i64 [ %11, %15 ], [ %31, %29 ]
  %36 = phi i64 [ %7, %15 ], [ %60, %29 ]
  %37 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %16, align 8
  %38 = icmp eq i64 %36, 0
  %39 = add i64 %36, -1
  %40 = select i1 %38, i64 1, i64 %39
  %41 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 0, i32 0, i32 4
  %44 = load i64, i64* %43, align 8
  %45 = mul i64 %44, %40
  %46 = getelementptr inbounds i8, i8* %42, i64 %45
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #22
  %50 = bitcast i8* %46 to float*
  %51 = mul i64 %44, %36
  %52 = getelementptr inbounds i8, i8* %42, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #22
  %56 = bitcast i8* %52 to float*
  %57 = add i64 %35, -1
  %58 = icmp eq i64 %36, %57
  %59 = add i64 %35, -2
  %60 = add nuw i64 %36, 1
  %61 = select i1 %58, i64 %59, i64 %60
  %62 = mul i64 %61, %44
  %63 = getelementptr inbounds i8, i8* %42, i64 %62
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #22
  %67 = bitcast i8* %63 to float*
  %68 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %17, align 8
  %69 = shl i64 %36, 1
  %70 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %68, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %68, i64 0, i32 0, i32 4
  %73 = load i64, i64* %72, align 8
  %74 = mul i64 %73, %69
  %75 = getelementptr inbounds i8, i8* %71, i64 %74
  %76 = ptrtoint i8* %75 to i64
  %77 = and i64 %76, 63
  %78 = icmp eq i64 %77, 0
  tail call void @llvm.assume(i1 %78) #22
  %79 = bitcast i8* %75 to float*
  %80 = or i64 %69, 1
  %81 = mul i64 %73, %80
  %82 = getelementptr inbounds i8, i8* %71, i64 %81
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #22
  %86 = bitcast i8* %82 to float*
  %87 = icmp eq i64 %34, 0
  br i1 %87, label %26, label %88

88:                                               ; preds = %33, %88
  %89 = phi i64 [ %114, %88 ], [ 0, %33 ]
  %90 = getelementptr inbounds float, float* %56, i64 %89
  %91 = bitcast float* %90 to <8 x float>*
  %92 = load <8 x float>, <8 x float>* %91, align 32, !alias.scope !438, !noalias !441
  %93 = load <8 x float>*, <8 x float>** %20, align 8
  %94 = load <8 x float>, <8 x float>* %93, align 32
  %95 = fmul <8 x float> %92, %94
  %96 = getelementptr inbounds float, float* %50, i64 %89
  %97 = bitcast float* %96 to <8 x float>*
  %98 = load <8 x float>, <8 x float>* %97, align 32, !alias.scope !443, !noalias !446
  %99 = getelementptr inbounds float, float* %67, i64 %89
  %100 = bitcast float* %99 to <8 x float>*
  %101 = load <8 x float>, <8 x float>* %100, align 32, !alias.scope !448, !noalias !451
  %102 = load <8 x float>*, <8 x float>** %22, align 8
  %103 = load <8 x float>, <8 x float>* %102, align 32
  %104 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %98, <8 x float> %103, <8 x float> %95) #22
  %105 = getelementptr inbounds float, float* %79, i64 %89
  %106 = bitcast float* %105 to <8 x float>*
  store <8 x float> %104, <8 x float>* %106, align 32, !alias.scope !453
  %107 = load <8 x float>*, <8 x float>** %22, align 8
  %108 = load <8 x float>, <8 x float>* %107, align 32
  %109 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %101, <8 x float> %108, <8 x float> %95) #22
  %110 = getelementptr inbounds float, float* %86, i64 %89
  %111 = bitcast float* %110 to <8 x float>*
  store <8 x float> %109, <8 x float>* %111, align 32, !alias.scope !456
  %112 = load i64*, i64** %23, align 8
  %113 = load i64, i64* %112, align 8
  %114 = add i64 %113, %89
  %115 = load i64*, i64** %18, align 8
  %116 = load i64, i64* %115, align 8
  %117 = icmp ult i64 %114, %116
  br i1 %117, label %88, label %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_7E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210UpsampleH2ERKNS_5PlaneIfEEmPS0_E3$_7E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.9**
  %6 = load %class.anon.9*, %class.anon.9** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX210UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolEENK3$_7clEii"(%class.anon.9* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX210UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolEENK3$_7clEii"(%class.anon.9* nocapture readonly, i32) unnamed_addr #24 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.9, %class.anon.9* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %3
  %8 = add i64 %7, %6
  %9 = getelementptr inbounds %class.anon.9, %class.anon.9* %0, i64 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, %8
  %13 = select i1 %12, i64 %11, i64 %8
  %14 = icmp ult i64 %7, %13
  br i1 %14, label %15, label %19

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.anon.9, %class.anon.9* %0, i64 0, i32 2
  %17 = getelementptr inbounds %class.anon.9, %class.anon.9* %0, i64 0, i32 3
  %18 = getelementptr inbounds %class.anon.9, %class.anon.9* %0, i64 0, i32 5
  br label %20

19:                                               ; preds = %112, %2
  ret void

20:                                               ; preds = %15, %112
  %21 = phi i64 [ %7, %15 ], [ %113, %112 ]
  %22 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %16, align 8
  %23 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %22, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %22, i64 0, i32 0, i32 4
  %26 = load i64, i64* %25, align 8
  %27 = mul i64 %26, %21
  %28 = getelementptr inbounds i8, i8* %24, i64 %27
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #22
  %32 = bitcast i8* %28 to float*
  %33 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %17, align 8
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %33, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %33, i64 0, i32 0, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = mul i64 %37, %21
  %39 = getelementptr inbounds i8, i8* %35, i64 %38
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #22
  %43 = bitcast i8* %39 to float*
  %44 = load i64*, i64** %18, align 8
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, -1
  %47 = icmp ugt i64 %46, 1
  br i1 %47, label %51, label %48

48:                                               ; preds = %51, %20
  %49 = phi i64 [ %45, %20 ], [ %74, %51 ]
  %50 = icmp eq i64 %49, 1
  br i1 %50, label %77, label %83

51:                                               ; preds = %20, %51
  %52 = phi i64 [ %72, %51 ], [ 1, %20 ]
  %53 = getelementptr inbounds float, float* %32, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 4, !alias.scope !459
  %56 = fmul <4 x float> %55, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %57 = getelementptr inbounds float, float* %53, i64 -1
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 16, !alias.scope !462
  %60 = getelementptr inbounds float, float* %53, i64 1
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 8, !alias.scope !465
  %63 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %59, <4 x float> <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>, <4 x float> %56) #22
  %64 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %62, <4 x float> <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>, <4 x float> %56) #22
  %65 = shufflevector <4 x float> %63, <4 x float> %64, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %66 = shl i64 %52, 1
  %67 = getelementptr inbounds float, float* %43, i64 %66
  %68 = bitcast float* %67 to <4 x float>*
  store <4 x float> %65, <4 x float>* %68, align 8, !alias.scope !468
  %69 = shufflevector <4 x float> %63, <4 x float> %64, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %70 = getelementptr inbounds float, float* %67, i64 4
  %71 = bitcast float* %70 to <4 x float>*
  store <4 x float> %69, <4 x float>* %71, align 8, !alias.scope !471
  %72 = add i64 %52, 4
  %73 = load i64*, i64** %18, align 8
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %74, -1
  %76 = icmp ult i64 %72, %75
  br i1 %76, label %51, label %48

77:                                               ; preds = %48
  %78 = bitcast i8* %28 to i32*
  %79 = load i32, i32* %78, align 64
  %80 = getelementptr inbounds i8, i8* %39, i64 4
  %81 = bitcast i8* %80 to i32*
  store i32 %79, i32* %81, align 4
  %82 = bitcast i8* %39 to i32*
  store i32 %79, i32* %82, align 64
  br label %112

83:                                               ; preds = %48
  %84 = load float, float* %32, align 64
  %85 = fmul float %84, 7.500000e-01
  %86 = getelementptr inbounds i8, i8* %28, i64 4
  %87 = bitcast i8* %86 to float*
  %88 = load float, float* %87, align 4
  %89 = fmul float %88, 2.500000e-01
  %90 = fadd float %85, %89
  %91 = getelementptr inbounds i8, i8* %39, i64 4
  %92 = bitcast i8* %91 to float*
  store float %90, float* %92, align 4
  store float %90, float* %43, align 64
  %93 = load i64*, i64** %18, align 8
  %94 = load i64, i64* %93, align 8
  %95 = add i64 %94, -1
  %96 = getelementptr inbounds float, float* %32, i64 %95
  %97 = load float, float* %96, align 4
  %98 = fmul float %97, 7.500000e-01
  %99 = add i64 %94, -2
  %100 = getelementptr inbounds float, float* %32, i64 %99
  %101 = load float, float* %100, align 4
  %102 = fmul float %101, 2.500000e-01
  %103 = fadd float %98, %102
  %104 = shl i64 %94, 1
  %105 = add i64 %104, -1
  %106 = getelementptr inbounds float, float* %43, i64 %105
  store float %103, float* %106, align 4
  %107 = load i64*, i64** %18, align 8
  %108 = load i64, i64* %107, align 8
  %109 = shl i64 %108, 1
  %110 = add i64 %109, -2
  %111 = getelementptr inbounds float, float* %43, i64 %110
  store float %103, float* %111, align 8
  br label %112

112:                                              ; preds = %83, %77
  %113 = add nuw i64 %21, 1
  %114 = icmp ult i64 %113, %13
  br i1 %114, label %20, label %19
}

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.fma.v4f32(<4 x float>, <4 x float>, <4 x float>) #12

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX320OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_8E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX320OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE3$_8E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.10**
  %6 = load %class.anon.10*, %class.anon.10** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX320OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsEENK3$_8clEii"(%class.anon.10* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX320OpsinToLinearInplaceEPNS_6Image3IfEEPNS_10ThreadPoolERKNS_11OpsinParamsEENK3$_8clEii"(%class.anon.10* nocapture readonly, i32) unnamed_addr #25 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.10, %class.anon.10* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %4, align 8
  %6 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %3
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #22
  %15 = getelementptr inbounds i8, i8* %11, i64 %9
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #22
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #22
  %25 = getelementptr inbounds i8, i8* %21, i64 %9
  %26 = ptrtoint i8* %25 to i64
  %27 = and i64 %26, 63
  %28 = icmp eq i64 %27, 0
  tail call void @llvm.assume(i1 %28) #22
  %29 = bitcast i8* %25 to float*
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #22
  %35 = getelementptr inbounds i8, i8* %31, i64 %9
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #22
  %39 = bitcast i8* %35 to float*
  %40 = getelementptr inbounds %class.anon.10, %class.anon.10* %0, i64 0, i32 1
  %41 = load i64*, i64** %40, align 8
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %2
  %45 = getelementptr inbounds %class.anon.10, %class.anon.10* %0, i64 0, i32 2
  br label %47

46:                                               ; preds = %47, %2
  ret void

47:                                               ; preds = %44, %47
  %48 = phi i64 [ 0, %44 ], [ %132, %47 ]
  %49 = getelementptr inbounds float, float* %19, i64 %48
  %50 = bitcast float* %49 to <16 x float>*
  %51 = load <16 x float>, <16 x float>* %50, align 64, !alias.scope !474, !noalias !477
  %52 = getelementptr inbounds float, float* %29, i64 %48
  %53 = bitcast float* %52 to <16 x float>*
  %54 = load <16 x float>, <16 x float>* %53, align 64, !alias.scope !479, !noalias !482
  %55 = getelementptr inbounds float, float* %39, i64 %48
  %56 = bitcast float* %55 to <16 x float>*
  %57 = load <16 x float>, <16 x float>* %56, align 64, !alias.scope !484, !noalias !487
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #22, !srcloc !489
  %58 = load %"struct.jxl::OpsinParams"*, %"struct.jxl::OpsinParams"** %45, align 8
  %59 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 1, i64 0
  %60 = bitcast float* %59 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 1, !alias.scope !490, !noalias !493
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <16 x i32> zeroinitializer
  %63 = shufflevector <4 x float> %61, <4 x float> undef, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %64 = shufflevector <4 x float> %61, <4 x float> undef, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %65 = fadd <16 x float> %51, %54
  %66 = fsub <16 x float> %54, %51
  %67 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 0
  %68 = load float, float* %67, align 4, !noalias !499
  %69 = insertelement <16 x float> undef, float %68, i32 0
  %70 = shufflevector <16 x float> %69, <16 x float> undef, <16 x i32> zeroinitializer
  %71 = fsub <16 x float> %65, %70
  %72 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 1
  %73 = load float, float* %72, align 4, !noalias !499
  %74 = insertelement <16 x float> undef, float %73, i32 0
  %75 = shufflevector <16 x float> %74, <16 x float> undef, <16 x i32> zeroinitializer
  %76 = fsub <16 x float> %66, %75
  %77 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 2
  %78 = load float, float* %77, align 4, !noalias !499
  %79 = insertelement <16 x float> undef, float %78, i32 0
  %80 = shufflevector <16 x float> %79, <16 x float> undef, <16 x i32> zeroinitializer
  %81 = fsub <16 x float> %57, %80
  %82 = fmul <16 x float> %71, %71
  %83 = fmul <16 x float> %76, %76
  %84 = fmul <16 x float> %81, %81
  %85 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %82, <16 x float> %71, <16 x float> %62) #22
  %86 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %83, <16 x float> %76, <16 x float> %63) #22
  %87 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %84, <16 x float> %81, <16 x float> %64) #22
  %88 = bitcast %"struct.jxl::OpsinParams"* %58 to <4 x float>*
  %89 = load <4 x float>, <4 x float>* %88, align 1, !alias.scope !500, !noalias !503
  %90 = shufflevector <4 x float> %89, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %91 = fmul <16 x float> %90, %85
  %92 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 12
  %93 = bitcast float* %92 to <4 x float>*
  %94 = load <4 x float>, <4 x float>* %93, align 1, !alias.scope !505, !noalias !508
  %95 = shufflevector <4 x float> %94, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %96 = fmul <16 x float> %85, %95
  %97 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 24
  %98 = bitcast float* %97 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 1, !alias.scope !510, !noalias !513
  %100 = shufflevector <4 x float> %99, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %101 = fmul <16 x float> %85, %100
  %102 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 4
  %103 = bitcast float* %102 to <4 x float>*
  %104 = load <4 x float>, <4 x float>* %103, align 1, !alias.scope !515, !noalias !518
  %105 = shufflevector <4 x float> %104, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %106 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %105, <16 x float> %86, <16 x float> %91) #22
  %107 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 16
  %108 = bitcast float* %107 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 1, !alias.scope !520, !noalias !523
  %110 = shufflevector <4 x float> %109, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %111 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %110, <16 x float> %86, <16 x float> %96) #22
  %112 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 28
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 1, !alias.scope !525, !noalias !528
  %115 = shufflevector <4 x float> %114, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %116 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %115, <16 x float> %86, <16 x float> %101) #22
  %117 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 8
  %118 = bitcast float* %117 to <4 x float>*
  %119 = load <4 x float>, <4 x float>* %118, align 1, !alias.scope !530, !noalias !533
  %120 = shufflevector <4 x float> %119, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %121 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %120, <16 x float> %87, <16 x float> %106) #22
  %122 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 20
  %123 = bitcast float* %122 to <4 x float>*
  %124 = load <4 x float>, <4 x float>* %123, align 1, !alias.scope !535, !noalias !538
  %125 = shufflevector <4 x float> %124, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %126 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %125, <16 x float> %87, <16 x float> %111) #22
  %127 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 32
  %128 = bitcast float* %127 to <4 x float>*
  %129 = load <4 x float>, <4 x float>* %128, align 1, !alias.scope !540, !noalias !543
  %130 = shufflevector <4 x float> %129, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %131 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %130, <16 x float> %87, <16 x float> %116) #22
  store <16 x float> %121, <16 x float>* %50, align 64, !alias.scope !545
  store <16 x float> %126, <16 x float>* %53, align 64, !alias.scope !548
  store <16 x float> %131, <16 x float>* %56, align 64, !alias.scope !551
  %132 = add i64 %48, 16
  %133 = load i64*, i64** %40, align 8
  %134 = load i64, i64* %133, align 8
  %135 = icmp ult i64 %132, %134
  br i1 %135, label %47, label %46
}

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fma.v16f32(<16 x float>, <16 x float>, <16 x float>) #12

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX313OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_9E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX313OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE3$_9E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.11**
  %6 = load %class.anon.11*, %class.anon.11** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX313OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsEENK3$_9clEii"(%class.anon.11* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX313OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPNS_10ThreadPoolEPS2_RKNS_11OpsinParamsEENK3$_9clEii"(%class.anon.11* nocapture readonly, i32) unnamed_addr #25 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.11, %class.anon.11* %0, i64 0, i32 0
  %5 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %4, align 8
  %6 = getelementptr inbounds %class.anon.11, %class.anon.11* %0, i64 0, i32 1
  %7 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, %3
  %11 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %10
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #22
  %19 = getelementptr inbounds i8, i8* %15, i64 %13
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #22
  %23 = bitcast i8* %19 to float*
  %24 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds float, float* %23, i64 %25
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #22
  %32 = getelementptr inbounds i8, i8* %28, i64 %13
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #22
  %36 = bitcast i8* %32 to float*
  %37 = getelementptr inbounds float, float* %36, i64 %25
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #22
  %43 = getelementptr inbounds i8, i8* %39, i64 %13
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #22
  %47 = bitcast i8* %43 to float*
  %48 = getelementptr inbounds float, float* %47, i64 %25
  %49 = getelementptr inbounds %class.anon.11, %class.anon.11* %0, i64 0, i32 2
  %50 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %49, align 8
  %51 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %50, align 8
  %52 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 0, i32 0, i32 4
  %53 = load i64, i64* %52, align 8
  %54 = mul i64 %53, %3
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #22
  %60 = getelementptr inbounds i8, i8* %56, i64 %54
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #22
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #22
  %70 = getelementptr inbounds i8, i8* %66, i64 %54
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #22
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %51, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = ptrtoint i8* %76 to i64
  %78 = and i64 %77, 63
  %79 = icmp eq i64 %78, 0
  tail call void @llvm.assume(i1 %79) #22
  %80 = getelementptr inbounds i8, i8* %76, i64 %54
  %81 = ptrtoint i8* %80 to i64
  %82 = and i64 %81, 63
  %83 = icmp eq i64 %82, 0
  tail call void @llvm.assume(i1 %83) #22
  %84 = bitcast i8* %80 to float*
  %85 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 2
  %86 = load i64, i64* %85, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %2
  %89 = getelementptr inbounds %class.anon.11, %class.anon.11* %0, i64 0, i32 3
  br label %91

90:                                               ; preds = %91, %2
  ret void

91:                                               ; preds = %88, %91
  %92 = phi i64 [ 0, %88 ], [ %182, %91 ]
  %93 = getelementptr inbounds float, float* %26, i64 %92
  %94 = bitcast float* %93 to <16 x float>*
  %95 = load <16 x float>, <16 x float>* %94, align 64, !alias.scope !554, !noalias !557
  %96 = getelementptr inbounds float, float* %37, i64 %92
  %97 = bitcast float* %96 to <16 x float>*
  %98 = load <16 x float>, <16 x float>* %97, align 64, !alias.scope !559, !noalias !562
  %99 = getelementptr inbounds float, float* %48, i64 %92
  %100 = bitcast float* %99 to <16 x float>*
  %101 = load <16 x float>, <16 x float>* %100, align 64, !alias.scope !564, !noalias !567
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #22, !srcloc !569
  %102 = load %"struct.jxl::OpsinParams"*, %"struct.jxl::OpsinParams"** %89, align 8
  %103 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 1, i64 0
  %104 = bitcast float* %103 to <4 x float>*
  %105 = load <4 x float>, <4 x float>* %104, align 1, !alias.scope !570, !noalias !573
  %106 = shufflevector <4 x float> %105, <4 x float> undef, <16 x i32> zeroinitializer
  %107 = shufflevector <4 x float> %105, <4 x float> undef, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %108 = shufflevector <4 x float> %105, <4 x float> undef, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %109 = fadd <16 x float> %95, %98
  %110 = fsub <16 x float> %98, %95
  %111 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 0
  %112 = load float, float* %111, align 4, !noalias !579
  %113 = insertelement <16 x float> undef, float %112, i32 0
  %114 = shufflevector <16 x float> %113, <16 x float> undef, <16 x i32> zeroinitializer
  %115 = fsub <16 x float> %109, %114
  %116 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 1
  %117 = load float, float* %116, align 4, !noalias !579
  %118 = insertelement <16 x float> undef, float %117, i32 0
  %119 = shufflevector <16 x float> %118, <16 x float> undef, <16 x i32> zeroinitializer
  %120 = fsub <16 x float> %110, %119
  %121 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 2
  %122 = load float, float* %121, align 4, !noalias !579
  %123 = insertelement <16 x float> undef, float %122, i32 0
  %124 = shufflevector <16 x float> %123, <16 x float> undef, <16 x i32> zeroinitializer
  %125 = fsub <16 x float> %101, %124
  %126 = fmul <16 x float> %115, %115
  %127 = fmul <16 x float> %120, %120
  %128 = fmul <16 x float> %125, %125
  %129 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %126, <16 x float> %115, <16 x float> %106) #22
  %130 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %127, <16 x float> %120, <16 x float> %107) #22
  %131 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %128, <16 x float> %125, <16 x float> %108) #22
  %132 = bitcast %"struct.jxl::OpsinParams"* %102 to <4 x float>*
  %133 = load <4 x float>, <4 x float>* %132, align 1, !alias.scope !580, !noalias !583
  %134 = shufflevector <4 x float> %133, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %135 = fmul <16 x float> %134, %129
  %136 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 12
  %137 = bitcast float* %136 to <4 x float>*
  %138 = load <4 x float>, <4 x float>* %137, align 1, !alias.scope !585, !noalias !588
  %139 = shufflevector <4 x float> %138, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %140 = fmul <16 x float> %129, %139
  %141 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 24
  %142 = bitcast float* %141 to <4 x float>*
  %143 = load <4 x float>, <4 x float>* %142, align 1, !alias.scope !590, !noalias !593
  %144 = shufflevector <4 x float> %143, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %145 = fmul <16 x float> %129, %144
  %146 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 4
  %147 = bitcast float* %146 to <4 x float>*
  %148 = load <4 x float>, <4 x float>* %147, align 1, !alias.scope !595, !noalias !598
  %149 = shufflevector <4 x float> %148, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %150 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %149, <16 x float> %130, <16 x float> %135) #22
  %151 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 16
  %152 = bitcast float* %151 to <4 x float>*
  %153 = load <4 x float>, <4 x float>* %152, align 1, !alias.scope !600, !noalias !603
  %154 = shufflevector <4 x float> %153, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %155 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %154, <16 x float> %130, <16 x float> %140) #22
  %156 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 28
  %157 = bitcast float* %156 to <4 x float>*
  %158 = load <4 x float>, <4 x float>* %157, align 1, !alias.scope !605, !noalias !608
  %159 = shufflevector <4 x float> %158, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %160 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %159, <16 x float> %130, <16 x float> %145) #22
  %161 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 8
  %162 = bitcast float* %161 to <4 x float>*
  %163 = load <4 x float>, <4 x float>* %162, align 1, !alias.scope !610, !noalias !613
  %164 = shufflevector <4 x float> %163, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %165 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %164, <16 x float> %131, <16 x float> %150) #22
  %166 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 20
  %167 = bitcast float* %166 to <4 x float>*
  %168 = load <4 x float>, <4 x float>* %167, align 1, !alias.scope !615, !noalias !618
  %169 = shufflevector <4 x float> %168, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %170 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %169, <16 x float> %131, <16 x float> %155) #22
  %171 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 32
  %172 = bitcast float* %171 to <4 x float>*
  %173 = load <4 x float>, <4 x float>* %172, align 1, !alias.scope !620, !noalias !623
  %174 = shufflevector <4 x float> %173, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %175 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %174, <16 x float> %131, <16 x float> %160) #22
  %176 = getelementptr inbounds float, float* %64, i64 %92
  %177 = bitcast float* %176 to <16 x float>*
  store <16 x float> %165, <16 x float>* %177, align 64, !alias.scope !625
  %178 = getelementptr inbounds float, float* %74, i64 %92
  %179 = bitcast float* %178 to <16 x float>*
  store <16 x float> %170, <16 x float>* %179, align 64, !alias.scope !628
  %180 = getelementptr inbounds float, float* %84, i64 %92
  %181 = bitcast float* %180 to <16 x float>*
  store <16 x float> %175, <16 x float>* %181, align 64, !alias.scope !631
  %182 = add i64 %92, 16
  %183 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %4, align 8
  %184 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %183, i64 0, i32 2
  %185 = load i64, i64* %184, align 8
  %186 = icmp ult i64 %182, %185
  br i1 %186, label %91, label %90
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_10E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_10E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.14**
  %6 = load %class.anon.14*, %class.anon.14** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEENK4$_10clEii"(%class.anon.14* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX310UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolEENK4$_10clEii"(%class.anon.14* nocapture readonly, i32) unnamed_addr #25 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.14, %class.anon.14* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %3
  %8 = add i64 %7, %6
  %9 = getelementptr inbounds %class.anon.14, %class.anon.14* %0, i64 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, %8
  %13 = select i1 %12, i64 %11, i64 %8
  %14 = icmp ult i64 %7, %13
  br i1 %14, label %15, label %32

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.anon.14, %class.anon.14* %0, i64 0, i32 2
  %17 = getelementptr inbounds %class.anon.14, %class.anon.14* %0, i64 0, i32 3
  %18 = getelementptr inbounds %class.anon.14, %class.anon.14* %0, i64 0, i32 4
  %19 = getelementptr inbounds %class.anon.14, %class.anon.14* %0, i64 0, i32 7
  %20 = bitcast %"class.hwy::N_AVX3::Vec512"** %19 to <16 x float>**
  %21 = getelementptr inbounds %class.anon.14, %class.anon.14* %0, i64 0, i32 8
  %22 = bitcast %"class.hwy::N_AVX3::Vec512"** %21 to <16 x float>**
  %23 = getelementptr inbounds %class.anon.14, %class.anon.14* %0, i64 0, i32 5
  %24 = load i64*, i64** %18, align 8
  %25 = load i64, i64* %24, align 8
  br label %33

26:                                               ; preds = %88, %33
  %27 = phi i64 [ 0, %33 ], [ %116, %88 ]
  %28 = icmp ult i64 %60, %13
  br i1 %28, label %29, label %32

29:                                               ; preds = %26
  %30 = load i64*, i64** %9, align 8
  %31 = load i64, i64* %30, align 8
  br label %33

32:                                               ; preds = %26, %2
  ret void

33:                                               ; preds = %29, %15
  %34 = phi i64 [ %25, %15 ], [ %27, %29 ]
  %35 = phi i64 [ %11, %15 ], [ %31, %29 ]
  %36 = phi i64 [ %7, %15 ], [ %60, %29 ]
  %37 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %16, align 8
  %38 = icmp eq i64 %36, 0
  %39 = add i64 %36, -1
  %40 = select i1 %38, i64 1, i64 %39
  %41 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 0, i32 0, i32 4
  %44 = load i64, i64* %43, align 8
  %45 = mul i64 %44, %40
  %46 = getelementptr inbounds i8, i8* %42, i64 %45
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #22
  %50 = bitcast i8* %46 to float*
  %51 = mul i64 %44, %36
  %52 = getelementptr inbounds i8, i8* %42, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #22
  %56 = bitcast i8* %52 to float*
  %57 = add i64 %35, -1
  %58 = icmp eq i64 %36, %57
  %59 = add i64 %35, -2
  %60 = add nuw i64 %36, 1
  %61 = select i1 %58, i64 %59, i64 %60
  %62 = mul i64 %61, %44
  %63 = getelementptr inbounds i8, i8* %42, i64 %62
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #22
  %67 = bitcast i8* %63 to float*
  %68 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %17, align 8
  %69 = shl i64 %36, 1
  %70 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %68, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %68, i64 0, i32 0, i32 4
  %73 = load i64, i64* %72, align 8
  %74 = mul i64 %73, %69
  %75 = getelementptr inbounds i8, i8* %71, i64 %74
  %76 = ptrtoint i8* %75 to i64
  %77 = and i64 %76, 63
  %78 = icmp eq i64 %77, 0
  tail call void @llvm.assume(i1 %78) #22
  %79 = bitcast i8* %75 to float*
  %80 = or i64 %69, 1
  %81 = mul i64 %73, %80
  %82 = getelementptr inbounds i8, i8* %71, i64 %81
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #22
  %86 = bitcast i8* %82 to float*
  %87 = icmp eq i64 %34, 0
  br i1 %87, label %26, label %88

88:                                               ; preds = %33, %88
  %89 = phi i64 [ %114, %88 ], [ 0, %33 ]
  %90 = getelementptr inbounds float, float* %56, i64 %89
  %91 = bitcast float* %90 to <16 x float>*
  %92 = load <16 x float>, <16 x float>* %91, align 64, !alias.scope !634, !noalias !637
  %93 = load <16 x float>*, <16 x float>** %20, align 8
  %94 = load <16 x float>, <16 x float>* %93, align 64
  %95 = fmul <16 x float> %92, %94
  %96 = getelementptr inbounds float, float* %50, i64 %89
  %97 = bitcast float* %96 to <16 x float>*
  %98 = load <16 x float>, <16 x float>* %97, align 64, !alias.scope !639, !noalias !642
  %99 = getelementptr inbounds float, float* %67, i64 %89
  %100 = bitcast float* %99 to <16 x float>*
  %101 = load <16 x float>, <16 x float>* %100, align 64, !alias.scope !644, !noalias !647
  %102 = load <16 x float>*, <16 x float>** %22, align 8
  %103 = load <16 x float>, <16 x float>* %102, align 64
  %104 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %98, <16 x float> %103, <16 x float> %95) #22
  %105 = getelementptr inbounds float, float* %79, i64 %89
  %106 = bitcast float* %105 to <16 x float>*
  store <16 x float> %104, <16 x float>* %106, align 64, !alias.scope !649
  %107 = load <16 x float>*, <16 x float>** %22, align 8
  %108 = load <16 x float>, <16 x float>* %107, align 64
  %109 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %101, <16 x float> %108, <16 x float> %95) #22
  %110 = getelementptr inbounds float, float* %86, i64 %89
  %111 = bitcast float* %110 to <16 x float>*
  store <16 x float> %109, <16 x float>* %111, align 64, !alias.scope !652
  %112 = load i64*, i64** %23, align 8
  %113 = load i64, i64* %112, align 8
  %114 = add i64 %113, %89
  %115 = load i64*, i64** %18, align 8
  %116 = load i64, i64* %115, align 8
  %117 = icmp ult i64 %114, %116
  br i1 %117, label %88, label %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_11E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_11E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.17**
  %6 = load %class.anon.17*, %class.anon.17** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX310UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolEENK4$_11clEii"(%class.anon.17* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX310UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolEENK4$_11clEii"(%class.anon.17* nocapture readonly, i32) unnamed_addr #26 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.17, %class.anon.17* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %3
  %8 = add i64 %7, %6
  %9 = getelementptr inbounds %class.anon.17, %class.anon.17* %0, i64 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, %8
  %13 = select i1 %12, i64 %11, i64 %8
  %14 = icmp ult i64 %7, %13
  br i1 %14, label %15, label %19

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.anon.17, %class.anon.17* %0, i64 0, i32 2
  %17 = getelementptr inbounds %class.anon.17, %class.anon.17* %0, i64 0, i32 3
  %18 = getelementptr inbounds %class.anon.17, %class.anon.17* %0, i64 0, i32 5
  br label %20

19:                                               ; preds = %112, %2
  ret void

20:                                               ; preds = %15, %112
  %21 = phi i64 [ %7, %15 ], [ %113, %112 ]
  %22 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %16, align 8
  %23 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %22, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %22, i64 0, i32 0, i32 4
  %26 = load i64, i64* %25, align 8
  %27 = mul i64 %26, %21
  %28 = getelementptr inbounds i8, i8* %24, i64 %27
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #22
  %32 = bitcast i8* %28 to float*
  %33 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %17, align 8
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %33, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %33, i64 0, i32 0, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = mul i64 %37, %21
  %39 = getelementptr inbounds i8, i8* %35, i64 %38
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #22
  %43 = bitcast i8* %39 to float*
  %44 = load i64*, i64** %18, align 8
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, -1
  %47 = icmp ugt i64 %46, 1
  br i1 %47, label %51, label %48

48:                                               ; preds = %51, %20
  %49 = phi i64 [ %45, %20 ], [ %74, %51 ]
  %50 = icmp eq i64 %49, 1
  br i1 %50, label %77, label %83

51:                                               ; preds = %20, %51
  %52 = phi i64 [ %72, %51 ], [ 1, %20 ]
  %53 = getelementptr inbounds float, float* %32, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 4, !alias.scope !655
  %56 = fmul <4 x float> %55, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %57 = getelementptr inbounds float, float* %53, i64 -1
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 16, !alias.scope !658
  %60 = getelementptr inbounds float, float* %53, i64 1
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 8, !alias.scope !661
  %63 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %59, <4 x float> <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>, <4 x float> %56) #22
  %64 = tail call <4 x float> @llvm.fma.v4f32(<4 x float> %62, <4 x float> <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>, <4 x float> %56) #22
  %65 = shufflevector <4 x float> %63, <4 x float> %64, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %66 = shl i64 %52, 1
  %67 = getelementptr inbounds float, float* %43, i64 %66
  %68 = bitcast float* %67 to <4 x float>*
  store <4 x float> %65, <4 x float>* %68, align 8, !alias.scope !664
  %69 = shufflevector <4 x float> %63, <4 x float> %64, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %70 = getelementptr inbounds float, float* %67, i64 4
  %71 = bitcast float* %70 to <4 x float>*
  store <4 x float> %69, <4 x float>* %71, align 8, !alias.scope !667
  %72 = add i64 %52, 4
  %73 = load i64*, i64** %18, align 8
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %74, -1
  %76 = icmp ult i64 %72, %75
  br i1 %76, label %51, label %48

77:                                               ; preds = %48
  %78 = bitcast i8* %28 to i32*
  %79 = load i32, i32* %78, align 64
  %80 = getelementptr inbounds i8, i8* %39, i64 4
  %81 = bitcast i8* %80 to i32*
  store i32 %79, i32* %81, align 4
  %82 = bitcast i8* %39 to i32*
  store i32 %79, i32* %82, align 64
  br label %112

83:                                               ; preds = %48
  %84 = load float, float* %32, align 64
  %85 = fmul float %84, 7.500000e-01
  %86 = getelementptr inbounds i8, i8* %28, i64 4
  %87 = bitcast i8* %86 to float*
  %88 = load float, float* %87, align 4
  %89 = fmul float %88, 2.500000e-01
  %90 = fadd float %85, %89
  %91 = getelementptr inbounds i8, i8* %39, i64 4
  %92 = bitcast i8* %91 to float*
  store float %90, float* %92, align 4
  store float %90, float* %43, align 64
  %93 = load i64*, i64** %18, align 8
  %94 = load i64, i64* %93, align 8
  %95 = add i64 %94, -1
  %96 = getelementptr inbounds float, float* %32, i64 %95
  %97 = load float, float* %96, align 4
  %98 = fmul float %97, 7.500000e-01
  %99 = add i64 %94, -2
  %100 = getelementptr inbounds float, float* %32, i64 %99
  %101 = load float, float* %100, align 4
  %102 = fmul float %101, 2.500000e-01
  %103 = fadd float %98, %102
  %104 = shl i64 %94, 1
  %105 = add i64 %104, -1
  %106 = getelementptr inbounds float, float* %43, i64 %105
  store float %103, float* %106, align 4
  %107 = load i64*, i64** %18, align 8
  %108 = load i64, i64* %107, align 8
  %109 = shl i64 %108, 1
  %110 = add i64 %109, -2
  %111 = getelementptr inbounds float, float* %43, i64 %110
  store float %103, float* %111, align 8
  br label %112

112:                                              ; preds = %83, %77
  %113 = add nuw i64 %21, 1
  %114 = icmp ult i64 %113, %13
  br i1 %114, label %20, label %19
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR20OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE4$_12E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR20OpsinToLinearInplaceEPNS_6Image3IfEEPS0_RKNS_11OpsinParamsEE4$_12E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.18**
  %6 = load %class.anon.18*, %class.anon.18** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.18, %class.anon.18* %6, i64 0, i32 0
  %9 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %8, align 8
  %10 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %9, align 8
  %11 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 0, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %7
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #22
  %19 = getelementptr inbounds i8, i8* %15, i64 %13
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #22
  %23 = bitcast i8* %19 to float*
  %24 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = ptrtoint i8* %25 to i64
  %27 = and i64 %26, 63
  %28 = icmp eq i64 %27, 0
  tail call void @llvm.assume(i1 %28) #22
  %29 = getelementptr inbounds i8, i8* %25, i64 %13
  %30 = ptrtoint i8* %29 to i64
  %31 = and i64 %30, 63
  %32 = icmp eq i64 %31, 0
  tail call void @llvm.assume(i1 %32) #22
  %33 = bitcast i8* %29 to float*
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #22
  %39 = getelementptr inbounds i8, i8* %35, i64 %13
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #22
  %43 = bitcast i8* %39 to float*
  %44 = getelementptr inbounds %class.anon.18, %class.anon.18* %6, i64 0, i32 1
  %45 = load i64*, i64** %44, align 8
  %46 = load i64, i64* %45, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %122, label %48

48:                                               ; preds = %3
  %49 = getelementptr inbounds %class.anon.18, %class.anon.18* %6, i64 0, i32 2
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %118, %50 ]
  %52 = getelementptr inbounds float, float* %23, i64 %51
  %53 = load float, float* %52, align 4, !alias.scope !670
  %54 = getelementptr inbounds float, float* %33, i64 %51
  %55 = load float, float* %54, align 4, !alias.scope !673
  %56 = getelementptr inbounds float, float* %43, i64 %51
  %57 = load float, float* %56, align 4, !alias.scope !676
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #22, !srcloc !679
  %58 = load %"struct.jxl::OpsinParams"*, %"struct.jxl::OpsinParams"** %49, align 8
  %59 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 1, i64 0
  %60 = load float, float* %59, align 4, !noalias !680
  %61 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 1, i64 1
  %62 = load float, float* %61, align 4, !noalias !680
  %63 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 1, i64 2
  %64 = load float, float* %63, align 4, !noalias !680
  %65 = fadd float %53, %55
  %66 = fsub float %55, %53
  %67 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 0
  %68 = load float, float* %67, align 4, !noalias !680
  %69 = fsub float %65, %68
  %70 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 1
  %71 = load float, float* %70, align 4, !noalias !680
  %72 = fsub float %66, %71
  %73 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 2, i64 2
  %74 = load float, float* %73, align 4, !noalias !680
  %75 = fsub float %57, %74
  %76 = fmul float %69, %69
  %77 = fmul float %72, %72
  %78 = fmul float %75, %75
  %79 = fmul float %69, %76
  %80 = fadd float %60, %79
  %81 = fmul float %72, %77
  %82 = fadd float %62, %81
  %83 = fmul float %75, %78
  %84 = fadd float %64, %83
  %85 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 0
  %86 = load float, float* %85, align 4, !alias.scope !685, !noalias !680
  %87 = fmul float %86, %80
  %88 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 12
  %89 = load float, float* %88, align 4, !alias.scope !690, !noalias !680
  %90 = fmul float %80, %89
  %91 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 24
  %92 = load float, float* %91, align 4, !alias.scope !695, !noalias !680
  %93 = fmul float %80, %92
  %94 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 4
  %95 = load float, float* %94, align 4, !alias.scope !700, !noalias !680
  %96 = fmul float %82, %95
  %97 = fadd float %87, %96
  %98 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 16
  %99 = load float, float* %98, align 4, !alias.scope !705, !noalias !680
  %100 = fmul float %82, %99
  %101 = fadd float %90, %100
  %102 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 28
  %103 = load float, float* %102, align 4, !alias.scope !710, !noalias !680
  %104 = fmul float %82, %103
  %105 = fadd float %93, %104
  %106 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 8
  %107 = load float, float* %106, align 4, !alias.scope !715, !noalias !680
  %108 = fmul float %84, %107
  %109 = fadd float %97, %108
  %110 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 20
  %111 = load float, float* %110, align 4, !alias.scope !720, !noalias !680
  %112 = fmul float %84, %111
  %113 = fadd float %101, %112
  %114 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %58, i64 0, i32 0, i64 32
  %115 = load float, float* %114, align 4, !alias.scope !725, !noalias !680
  %116 = fmul float %84, %115
  %117 = fadd float %105, %116
  store float %109, float* %52, align 4, !alias.scope !730
  store float %113, float* %54, align 4, !alias.scope !733
  store float %117, float* %56, align 4, !alias.scope !736
  %118 = add nuw i64 %51, 1
  %119 = load i64*, i64** %44, align 8
  %120 = load i64, i64* %119, align 8
  %121 = icmp ult i64 %118, %120
  br i1 %121, label %50, label %122

122:                                              ; preds = %50, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR13OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE4$_13E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR13OpsinToLinearERKNS_6Image3IfEERKNS_4RectEPS0_PS6_RKNS_11OpsinParamsEE4$_13E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.19**
  %6 = load %class.anon.19*, %class.anon.19** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.19, %class.anon.19* %6, i64 0, i32 0
  %9 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %8, align 8
  %10 = getelementptr inbounds %class.anon.19, %class.anon.19* %6, i64 0, i32 1
  %11 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %9, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, %7
  %15 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 4
  %16 = load i64, i64* %15, align 8
  %17 = mul i64 %16, %14
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #22
  %23 = getelementptr inbounds i8, i8* %19, i64 %17
  %24 = ptrtoint i8* %23 to i64
  %25 = and i64 %24, 63
  %26 = icmp eq i64 %25, 0
  tail call void @llvm.assume(i1 %26) #22
  %27 = bitcast i8* %23 to float*
  %28 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %9, i64 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds float, float* %27, i64 %29
  %31 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #22
  %36 = getelementptr inbounds i8, i8* %32, i64 %17
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #22
  %40 = bitcast i8* %36 to float*
  %41 = getelementptr inbounds float, float* %40, i64 %29
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #22
  %47 = getelementptr inbounds i8, i8* %43, i64 %17
  %48 = ptrtoint i8* %47 to i64
  %49 = and i64 %48, 63
  %50 = icmp eq i64 %49, 0
  tail call void @llvm.assume(i1 %50) #22
  %51 = bitcast i8* %47 to float*
  %52 = getelementptr inbounds float, float* %51, i64 %29
  %53 = getelementptr inbounds %class.anon.19, %class.anon.19* %6, i64 0, i32 2
  %54 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %53, align 8
  %55 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %55, i64 0, i32 0, i64 0, i32 0, i32 4
  %57 = load i64, i64* %56, align 8
  %58 = mul i64 %57, %7
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %55, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #22
  %64 = getelementptr inbounds i8, i8* %60, i64 %58
  %65 = ptrtoint i8* %64 to i64
  %66 = and i64 %65, 63
  %67 = icmp eq i64 %66, 0
  tail call void @llvm.assume(i1 %67) #22
  %68 = bitcast i8* %64 to float*
  %69 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %55, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #22
  %74 = getelementptr inbounds i8, i8* %70, i64 %58
  %75 = ptrtoint i8* %74 to i64
  %76 = and i64 %75, 63
  %77 = icmp eq i64 %76, 0
  tail call void @llvm.assume(i1 %77) #22
  %78 = bitcast i8* %74 to float*
  %79 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %55, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = and i64 %81, 63
  %83 = icmp eq i64 %82, 0
  tail call void @llvm.assume(i1 %83) #22
  %84 = getelementptr inbounds i8, i8* %80, i64 %58
  %85 = ptrtoint i8* %84 to i64
  %86 = and i64 %85, 63
  %87 = icmp eq i64 %86, 0
  tail call void @llvm.assume(i1 %87) #22
  %88 = bitcast i8* %84 to float*
  %89 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %9, i64 0, i32 2
  %90 = load i64, i64* %89, align 8
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %170, label %92

92:                                               ; preds = %3
  %93 = getelementptr inbounds %class.anon.19, %class.anon.19* %6, i64 0, i32 3
  br label %94

94:                                               ; preds = %94, %92
  %95 = phi i64 [ 0, %92 ], [ %165, %94 ]
  %96 = getelementptr inbounds float, float* %30, i64 %95
  %97 = load float, float* %96, align 4, !alias.scope !739
  %98 = getelementptr inbounds float, float* %41, i64 %95
  %99 = load float, float* %98, align 4, !alias.scope !742
  %100 = getelementptr inbounds float, float* %52, i64 %95
  %101 = load float, float* %100, align 4, !alias.scope !745
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #22, !srcloc !748
  %102 = load %"struct.jxl::OpsinParams"*, %"struct.jxl::OpsinParams"** %93, align 8
  %103 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 1, i64 0
  %104 = load float, float* %103, align 4, !noalias !749
  %105 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 1, i64 1
  %106 = load float, float* %105, align 4, !noalias !749
  %107 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 1, i64 2
  %108 = load float, float* %107, align 4, !noalias !749
  %109 = fadd float %97, %99
  %110 = fsub float %99, %97
  %111 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 0
  %112 = load float, float* %111, align 4, !noalias !749
  %113 = fsub float %109, %112
  %114 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 1
  %115 = load float, float* %114, align 4, !noalias !749
  %116 = fsub float %110, %115
  %117 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 2, i64 2
  %118 = load float, float* %117, align 4, !noalias !749
  %119 = fsub float %101, %118
  %120 = fmul float %113, %113
  %121 = fmul float %116, %116
  %122 = fmul float %119, %119
  %123 = fmul float %113, %120
  %124 = fadd float %104, %123
  %125 = fmul float %116, %121
  %126 = fadd float %106, %125
  %127 = fmul float %119, %122
  %128 = fadd float %108, %127
  %129 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 0
  %130 = load float, float* %129, align 4, !alias.scope !754, !noalias !749
  %131 = fmul float %130, %124
  %132 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 12
  %133 = load float, float* %132, align 4, !alias.scope !759, !noalias !749
  %134 = fmul float %124, %133
  %135 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 24
  %136 = load float, float* %135, align 4, !alias.scope !764, !noalias !749
  %137 = fmul float %124, %136
  %138 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 4
  %139 = load float, float* %138, align 4, !alias.scope !769, !noalias !749
  %140 = fmul float %126, %139
  %141 = fadd float %131, %140
  %142 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 16
  %143 = load float, float* %142, align 4, !alias.scope !774, !noalias !749
  %144 = fmul float %126, %143
  %145 = fadd float %134, %144
  %146 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 28
  %147 = load float, float* %146, align 4, !alias.scope !779, !noalias !749
  %148 = fmul float %126, %147
  %149 = fadd float %137, %148
  %150 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 8
  %151 = load float, float* %150, align 4, !alias.scope !784, !noalias !749
  %152 = fmul float %128, %151
  %153 = fadd float %141, %152
  %154 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 20
  %155 = load float, float* %154, align 4, !alias.scope !789, !noalias !749
  %156 = fmul float %128, %155
  %157 = fadd float %145, %156
  %158 = getelementptr inbounds %"struct.jxl::OpsinParams", %"struct.jxl::OpsinParams"* %102, i64 0, i32 0, i64 32
  %159 = load float, float* %158, align 4, !alias.scope !794, !noalias !749
  %160 = fmul float %128, %159
  %161 = fadd float %149, %160
  %162 = getelementptr inbounds float, float* %68, i64 %95
  store float %153, float* %162, align 4, !alias.scope !799
  %163 = getelementptr inbounds float, float* %78, i64 %95
  store float %157, float* %163, align 4, !alias.scope !802
  %164 = getelementptr inbounds float, float* %88, i64 %95
  store float %161, float* %164, align 4, !alias.scope !805
  %165 = add nuw i64 %95, 1
  %166 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %8, align 8
  %167 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %166, i64 0, i32 2
  %168 = load i64, i64* %167, align 8
  %169 = icmp ult i64 %165, %168
  br i1 %169, label %94, label %170

170:                                              ; preds = %94, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_14E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleV2ERKNS_5PlaneIfEEPS0_E4$_14E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.20**
  %6 = load %class.anon.20*, %class.anon.20** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.20, %class.anon.20* %6, i64 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %7
  %12 = add i64 %11, %10
  %13 = getelementptr inbounds %class.anon.20, %class.anon.20* %6, i64 0, i32 1
  %14 = load i64*, i64** %13, align 8
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %15, %12
  %17 = select i1 %16, i64 %15, i64 %12
  %18 = icmp ult i64 %11, %17
  br i1 %18, label %19, label %119

19:                                               ; preds = %3
  %20 = getelementptr inbounds %class.anon.20, %class.anon.20* %6, i64 0, i32 2
  %21 = getelementptr inbounds %class.anon.20, %class.anon.20* %6, i64 0, i32 3
  %22 = getelementptr inbounds %class.anon.20, %class.anon.20* %6, i64 0, i32 4
  %23 = getelementptr inbounds %class.anon.20, %class.anon.20* %6, i64 0, i32 7
  %24 = getelementptr inbounds %class.anon.20, %class.anon.20* %6, i64 0, i32 8
  %25 = getelementptr inbounds %class.anon.20, %class.anon.20* %6, i64 0, i32 5
  %26 = load i64*, i64** %22, align 8
  %27 = load i64, i64* %26, align 8
  br label %34

28:                                               ; preds = %89, %34
  %29 = phi i64 [ 0, %34 ], [ %117, %89 ]
  %30 = icmp ult i64 %61, %17
  br i1 %30, label %31, label %119

31:                                               ; preds = %28
  %32 = load i64*, i64** %13, align 8
  %33 = load i64, i64* %32, align 8
  br label %34

34:                                               ; preds = %31, %19
  %35 = phi i64 [ %27, %19 ], [ %29, %31 ]
  %36 = phi i64 [ %15, %19 ], [ %33, %31 ]
  %37 = phi i64 [ %11, %19 ], [ %61, %31 ]
  %38 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %20, align 8
  %39 = icmp eq i64 %37, 0
  %40 = add i64 %37, -1
  %41 = select i1 %39, i64 1, i64 %40
  %42 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 0, i32 0, i32 4
  %45 = load i64, i64* %44, align 8
  %46 = mul i64 %45, %41
  %47 = getelementptr inbounds i8, i8* %43, i64 %46
  %48 = ptrtoint i8* %47 to i64
  %49 = and i64 %48, 63
  %50 = icmp eq i64 %49, 0
  tail call void @llvm.assume(i1 %50) #22
  %51 = bitcast i8* %47 to float*
  %52 = mul i64 %45, %37
  %53 = getelementptr inbounds i8, i8* %43, i64 %52
  %54 = ptrtoint i8* %53 to i64
  %55 = and i64 %54, 63
  %56 = icmp eq i64 %55, 0
  tail call void @llvm.assume(i1 %56) #22
  %57 = bitcast i8* %53 to float*
  %58 = add i64 %36, -1
  %59 = icmp eq i64 %37, %58
  %60 = add i64 %36, -2
  %61 = add nuw i64 %37, 1
  %62 = select i1 %59, i64 %60, i64 %61
  %63 = mul i64 %45, %62
  %64 = getelementptr inbounds i8, i8* %43, i64 %63
  %65 = ptrtoint i8* %64 to i64
  %66 = and i64 %65, 63
  %67 = icmp eq i64 %66, 0
  tail call void @llvm.assume(i1 %67) #22
  %68 = bitcast i8* %64 to float*
  %69 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %21, align 8
  %70 = shl i64 %37, 1
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %69, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %69, i64 0, i32 0, i32 4
  %74 = load i64, i64* %73, align 8
  %75 = mul i64 %74, %70
  %76 = getelementptr inbounds i8, i8* %72, i64 %75
  %77 = ptrtoint i8* %76 to i64
  %78 = and i64 %77, 63
  %79 = icmp eq i64 %78, 0
  tail call void @llvm.assume(i1 %79) #22
  %80 = bitcast i8* %76 to float*
  %81 = or i64 %70, 1
  %82 = mul i64 %74, %81
  %83 = getelementptr inbounds i8, i8* %72, i64 %82
  %84 = ptrtoint i8* %83 to i64
  %85 = and i64 %84, 63
  %86 = icmp eq i64 %85, 0
  tail call void @llvm.assume(i1 %86) #22
  %87 = bitcast i8* %83 to float*
  %88 = icmp eq i64 %35, 0
  br i1 %88, label %28, label %89

89:                                               ; preds = %34, %89
  %90 = phi i64 [ %115, %89 ], [ 0, %34 ]
  %91 = getelementptr inbounds float, float* %57, i64 %90
  %92 = load float, float* %91, align 4, !alias.scope !808
  %93 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %23, align 8
  %94 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %93, i64 0, i32 0
  %95 = load float, float* %94, align 4
  %96 = fmul float %92, %95
  %97 = getelementptr inbounds float, float* %51, i64 %90
  %98 = load float, float* %97, align 4, !alias.scope !811
  %99 = getelementptr inbounds float, float* %68, i64 %90
  %100 = load float, float* %99, align 4, !alias.scope !814
  %101 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %24, align 8
  %102 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %101, i64 0, i32 0
  %103 = load float, float* %102, align 4
  %104 = fmul float %98, %103
  %105 = fadd float %96, %104
  %106 = getelementptr inbounds float, float* %80, i64 %90
  store float %105, float* %106, align 4, !alias.scope !817
  %107 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %24, align 8
  %108 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %107, i64 0, i32 0
  %109 = load float, float* %108, align 4
  %110 = fmul float %100, %109
  %111 = fadd float %96, %110
  %112 = getelementptr inbounds float, float* %87, i64 %90
  store float %111, float* %112, align 4, !alias.scope !820
  %113 = load i64*, i64** %25, align 8
  %114 = load i64, i64* %113, align 8
  %115 = add i64 %114, %90
  %116 = load i64*, i64** %22, align 8
  %117 = load i64, i64* %116, align 8
  %118 = icmp ult i64 %115, %117
  br i1 %118, label %89, label %28

119:                                              ; preds = %28, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_15E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #10 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #22
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10UpsampleH2ERKNS_5PlaneIfEEmPS0_E4$_15E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #10 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.21**
  %6 = load %class.anon.21*, %class.anon.21** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.21, %class.anon.21* %6, i64 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %7
  %12 = add i64 %11, %10
  %13 = getelementptr inbounds %class.anon.21, %class.anon.21* %6, i64 0, i32 1
  %14 = load i64*, i64** %13, align 8
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %15, %12
  %17 = select i1 %16, i64 %15, i64 %12
  %18 = icmp ult i64 %11, %17
  br i1 %18, label %19, label %113

19:                                               ; preds = %3
  %20 = getelementptr inbounds %class.anon.21, %class.anon.21* %6, i64 0, i32 2
  %21 = getelementptr inbounds %class.anon.21, %class.anon.21* %6, i64 0, i32 3
  %22 = getelementptr inbounds %class.anon.21, %class.anon.21* %6, i64 0, i32 5
  br label %23

23:                                               ; preds = %110, %19
  %24 = phi i64 [ %11, %19 ], [ %111, %110 ]
  %25 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %20, align 8
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %25, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %25, i64 0, i32 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, %24
  %31 = getelementptr inbounds i8, i8* %27, i64 %30
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #22
  %35 = bitcast i8* %31 to float*
  %36 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %21, align 8
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 0, i32 0, i32 4
  %40 = load i64, i64* %39, align 8
  %41 = mul i64 %40, %24
  %42 = getelementptr inbounds i8, i8* %38, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #22
  %46 = bitcast i8* %42 to float*
  %47 = load i64*, i64** %22, align 8
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, -1
  %50 = icmp ugt i64 %49, 1
  br i1 %50, label %54, label %51

51:                                               ; preds = %54, %23
  %52 = phi i64 [ %48, %23 ], [ %72, %54 ]
  %53 = icmp eq i64 %52, 1
  br i1 %53, label %75, label %81

54:                                               ; preds = %23, %54
  %55 = phi i64 [ %70, %54 ], [ 1, %23 ]
  %56 = getelementptr inbounds float, float* %35, i64 %55
  %57 = load float, float* %56, align 4, !alias.scope !823
  %58 = fmul float %57, 7.500000e-01
  %59 = getelementptr inbounds float, float* %56, i64 -1
  %60 = load float, float* %59, align 4, !alias.scope !828
  %61 = getelementptr inbounds float, float* %56, i64 1
  %62 = load float, float* %61, align 4, !alias.scope !833
  %63 = fmul float %60, 2.500000e-01
  %64 = fadd float %58, %63
  %65 = fmul float %62, 2.500000e-01
  %66 = fadd float %58, %65
  %67 = shl i64 %55, 1
  %68 = getelementptr inbounds float, float* %46, i64 %67
  store float %64, float* %68, align 8, !alias.scope !838
  %69 = getelementptr inbounds float, float* %68, i64 1
  store float %66, float* %69, align 4, !alias.scope !843
  %70 = add nuw i64 %55, 1
  %71 = load i64*, i64** %22, align 8
  %72 = load i64, i64* %71, align 8
  %73 = add i64 %72, -1
  %74 = icmp ult i64 %70, %73
  br i1 %74, label %54, label %51

75:                                               ; preds = %51
  %76 = bitcast i8* %31 to i32*
  %77 = load i32, i32* %76, align 64
  %78 = getelementptr inbounds i8, i8* %42, i64 4
  %79 = bitcast i8* %78 to i32*
  store i32 %77, i32* %79, align 4
  %80 = bitcast i8* %42 to i32*
  store i32 %77, i32* %80, align 64
  br label %110

81:                                               ; preds = %51
  %82 = load float, float* %35, align 64
  %83 = fmul float %82, 7.500000e-01
  %84 = getelementptr inbounds i8, i8* %31, i64 4
  %85 = bitcast i8* %84 to float*
  %86 = load float, float* %85, align 4
  %87 = fmul float %86, 2.500000e-01
  %88 = fadd float %83, %87
  %89 = getelementptr inbounds i8, i8* %42, i64 4
  %90 = bitcast i8* %89 to float*
  store float %88, float* %90, align 4
  store float %88, float* %46, align 64
  %91 = load i64*, i64** %22, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, -1
  %94 = getelementptr inbounds float, float* %35, i64 %93
  %95 = load float, float* %94, align 4
  %96 = fmul float %95, 7.500000e-01
  %97 = add i64 %92, -2
  %98 = getelementptr inbounds float, float* %35, i64 %97
  %99 = load float, float* %98, align 4
  %100 = fmul float %99, 2.500000e-01
  %101 = fadd float %96, %100
  %102 = shl i64 %92, 1
  %103 = add i64 %102, -1
  %104 = getelementptr inbounds float, float* %46, i64 %103
  store float %101, float* %104, align 4
  %105 = load i64*, i64** %22, align 8
  %106 = load i64, i64* %105, align 8
  %107 = shl i64 %106, 1
  %108 = add i64 %107, -2
  %109 = getelementptr inbounds float, float* %46, i64 %108
  store float %101, float* %109, align 8
  br label %110

110:                                              ; preds = %81, %75
  %111 = add nuw i64 %24, 1
  %112 = icmp ult i64 %111, %17
  br i1 %112, label %23, label %113

113:                                              ; preds = %110, %3
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #27

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #28

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone speculatable }
attributes #13 = { inlinehint norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { inlinehint norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { inlinehint norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { inlinehint norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #19 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #20 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #21 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #22 = { nounwind }
attributes #23 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #24 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #25 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #26 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #27 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #28 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #29 = { noreturn nounwind }
attributes #30 = { nounwind readnone }
attributes #31 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!4 = distinct !{!4, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!7 = distinct !{!7, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!10 = distinct !{!10, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!13 = distinct !{!13, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!16 = distinct !{!16, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!19 = distinct !{!19, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!22 = distinct !{!22, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!23 = !{!24}
!24 = distinct !{!24, !22, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!27 = distinct !{!27, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!28 = !{!29}
!29 = distinct !{!29, !27, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!32 = distinct !{!32, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!33 = !{!34}
!34 = distinct !{!34, !32, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!37 = distinct !{!37, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!40 = distinct !{!40, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!43 = distinct !{!43, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!44 = !{!45}
!45 = distinct !{!45, !46, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf: argument 0"}
!46 = distinct !{!46, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf: argument 0"}
!49 = distinct !{!49, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf"}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!52 = distinct !{!52, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!53 = !{!54}
!54 = distinct !{!54, !52, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!57 = distinct !{!57, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!58 = !{!59}
!59 = distinct !{!59, !57, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!60 = !{!61}
!61 = distinct !{!61, !62, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!62 = distinct !{!62, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!63 = !{!64}
!64 = distinct !{!64, !62, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!67 = distinct !{!67, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!70 = distinct !{!70, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!73 = distinct !{!73, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf: argument 0"}
!76 = distinct !{!76, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf"}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf: argument 0"}
!79 = distinct !{!79, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!82 = distinct !{!82, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!85 = distinct !{!85, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!86 = !{!87}
!87 = distinct !{!87, !88, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!88 = distinct !{!88, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!91 = distinct !{!91, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!92 = !{!93}
!93 = distinct !{!93, !94, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!94 = distinct !{!94, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!95 = !{!96}
!96 = distinct !{!96, !97, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!97 = distinct !{!97, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!98 = !{i32 0, i32 33}
!99 = !{i8 0, i8 2}
!100 = !{!101}
!101 = distinct !{!101, !102, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!102 = distinct !{!102, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!103 = !{!104}
!104 = distinct !{!104, !105, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!105 = distinct !{!105, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!106 = !{!107}
!107 = distinct !{!107, !108, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!108 = distinct !{!108, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!109 = !{i32 -2141688413}
!110 = !{!111, !113}
!111 = distinct !{!111, !112, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!112 = distinct !{!112, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!113 = distinct !{!113, !114, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!114 = distinct !{!114, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!115 = !{!116, !118, !119}
!116 = distinct !{!116, !117, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!117 = distinct !{!117, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!118 = distinct !{!118, !117, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!119 = distinct !{!119, !117, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!120 = !{!121, !123}
!121 = distinct !{!121, !122, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!122 = distinct !{!122, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!123 = distinct !{!123, !124, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!124 = distinct !{!124, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!125 = !{!126, !128}
!126 = distinct !{!126, !127, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!127 = distinct !{!127, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!128 = distinct !{!128, !129, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!129 = distinct !{!129, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!130 = !{!131, !133}
!131 = distinct !{!131, !132, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!132 = distinct !{!132, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!133 = distinct !{!133, !134, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!134 = distinct !{!134, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!135 = !{!136, !138}
!136 = distinct !{!136, !137, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!137 = distinct !{!137, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!138 = distinct !{!138, !139, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!139 = distinct !{!139, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!140 = !{!141, !143}
!141 = distinct !{!141, !142, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!142 = distinct !{!142, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!143 = distinct !{!143, !144, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!144 = distinct !{!144, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!145 = !{!146, !148}
!146 = distinct !{!146, !147, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!147 = distinct !{!147, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!148 = distinct !{!148, !149, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!149 = distinct !{!149, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!150 = !{!151, !153}
!151 = distinct !{!151, !152, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!152 = distinct !{!152, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!153 = distinct !{!153, !154, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!154 = distinct !{!154, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!155 = !{!156, !158}
!156 = distinct !{!156, !157, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!157 = distinct !{!157, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!158 = distinct !{!158, !159, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!159 = distinct !{!159, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!160 = !{!161, !163}
!161 = distinct !{!161, !162, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!162 = distinct !{!162, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!163 = distinct !{!163, !164, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!164 = distinct !{!164, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!165 = !{!166}
!166 = distinct !{!166, !167, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!167 = distinct !{!167, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!168 = !{!169}
!169 = distinct !{!169, !170, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!170 = distinct !{!170, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!171 = !{!172}
!172 = distinct !{!172, !173, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!173 = distinct !{!173, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!174 = !{!175}
!175 = distinct !{!175, !176, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!176 = distinct !{!176, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!177 = !{!178}
!178 = distinct !{!178, !179, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!179 = distinct !{!179, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!180 = !{!181}
!181 = distinct !{!181, !182, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!182 = distinct !{!182, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!183 = !{i32 -2141687222}
!184 = !{!185, !187}
!185 = distinct !{!185, !186, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!186 = distinct !{!186, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!187 = distinct !{!187, !188, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!188 = distinct !{!188, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!189 = !{!190, !192, !193}
!190 = distinct !{!190, !191, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!191 = distinct !{!191, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!192 = distinct !{!192, !191, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!193 = distinct !{!193, !191, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!194 = !{!195, !197}
!195 = distinct !{!195, !196, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!196 = distinct !{!196, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!197 = distinct !{!197, !198, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!198 = distinct !{!198, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!199 = !{!200, !202}
!200 = distinct !{!200, !201, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!201 = distinct !{!201, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!202 = distinct !{!202, !203, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!203 = distinct !{!203, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!204 = !{!205, !207}
!205 = distinct !{!205, !206, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!206 = distinct !{!206, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!207 = distinct !{!207, !208, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!208 = distinct !{!208, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!209 = !{!210, !212}
!210 = distinct !{!210, !211, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!211 = distinct !{!211, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!212 = distinct !{!212, !213, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!213 = distinct !{!213, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!214 = !{!215, !217}
!215 = distinct !{!215, !216, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!216 = distinct !{!216, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!217 = distinct !{!217, !218, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!218 = distinct !{!218, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!219 = !{!220, !222}
!220 = distinct !{!220, !221, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!221 = distinct !{!221, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!222 = distinct !{!222, !223, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!223 = distinct !{!223, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!224 = !{!225, !227}
!225 = distinct !{!225, !226, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!226 = distinct !{!226, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!227 = distinct !{!227, !228, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!228 = distinct !{!228, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!229 = !{!230, !232}
!230 = distinct !{!230, !231, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!231 = distinct !{!231, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!232 = distinct !{!232, !233, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!233 = distinct !{!233, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!234 = !{!235, !237}
!235 = distinct !{!235, !236, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!236 = distinct !{!236, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!237 = distinct !{!237, !238, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!238 = distinct !{!238, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!239 = !{!240}
!240 = distinct !{!240, !241, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!241 = distinct !{!241, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!242 = !{!243}
!243 = distinct !{!243, !244, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!244 = distinct !{!244, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!245 = !{!246}
!246 = distinct !{!246, !247, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!247 = distinct !{!247, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!248 = !{!249}
!249 = distinct !{!249, !250, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!250 = distinct !{!250, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!251 = !{!252}
!252 = distinct !{!252, !253, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!253 = distinct !{!253, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!254 = !{!255}
!255 = distinct !{!255, !256, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!256 = distinct !{!256, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!257 = !{!258}
!258 = distinct !{!258, !259, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!259 = distinct !{!259, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!260 = !{!261}
!261 = distinct !{!261, !262, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!262 = distinct !{!262, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!263 = !{!264}
!264 = distinct !{!264, !265, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!265 = distinct !{!265, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!266 = !{!267}
!267 = distinct !{!267, !268, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!268 = distinct !{!268, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!269 = !{!270}
!270 = distinct !{!270, !271, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!271 = distinct !{!271, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!272 = !{!273}
!273 = distinct !{!273, !274, !"_ZN3hwy6N_SSE4L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!274 = distinct !{!274, !"_ZN3hwy6N_SSE4L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!275 = !{!276}
!276 = distinct !{!276, !277, !"_ZN3hwy6N_SSE4L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!277 = distinct !{!277, !"_ZN3hwy6N_SSE4L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!278 = !{!279}
!279 = distinct !{!279, !280, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!280 = distinct !{!280, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!281 = !{!282}
!282 = distinct !{!282, !280, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!283 = !{!284}
!284 = distinct !{!284, !285, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!285 = distinct !{!285, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!286 = !{!287}
!287 = distinct !{!287, !285, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!288 = !{!289}
!289 = distinct !{!289, !290, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!290 = distinct !{!290, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!291 = !{!292}
!292 = distinct !{!292, !290, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!293 = !{i32 -2139318581}
!294 = !{!295}
!295 = distinct !{!295, !296, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!296 = distinct !{!296, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!297 = !{!298, !299, !301, !302}
!298 = distinct !{!298, !296, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!299 = distinct !{!299, !300, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!300 = distinct !{!300, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!301 = distinct !{!301, !300, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!302 = distinct !{!302, !300, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!303 = !{!299, !301, !302}
!304 = !{!305}
!305 = distinct !{!305, !306, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!306 = distinct !{!306, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!307 = !{!308, !299, !301, !302}
!308 = distinct !{!308, !306, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!309 = !{!310}
!310 = distinct !{!310, !311, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!311 = distinct !{!311, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!312 = !{!313, !299, !301, !302}
!313 = distinct !{!313, !311, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!314 = !{!315}
!315 = distinct !{!315, !316, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!316 = distinct !{!316, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!317 = !{!318, !299, !301, !302}
!318 = distinct !{!318, !316, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!319 = !{!320}
!320 = distinct !{!320, !321, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!321 = distinct !{!321, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!322 = !{!323, !299, !301, !302}
!323 = distinct !{!323, !321, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!324 = !{!325}
!325 = distinct !{!325, !326, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!326 = distinct !{!326, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!327 = !{!328, !299, !301, !302}
!328 = distinct !{!328, !326, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!329 = !{!330}
!330 = distinct !{!330, !331, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!331 = distinct !{!331, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!332 = !{!333, !299, !301, !302}
!333 = distinct !{!333, !331, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!334 = !{!335}
!335 = distinct !{!335, !336, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!336 = distinct !{!336, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!337 = !{!338, !299, !301, !302}
!338 = distinct !{!338, !336, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!339 = !{!340}
!340 = distinct !{!340, !341, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!341 = distinct !{!341, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!342 = !{!343, !299, !301, !302}
!343 = distinct !{!343, !341, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!344 = !{!345}
!345 = distinct !{!345, !346, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!346 = distinct !{!346, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!347 = !{!348, !299, !301, !302}
!348 = distinct !{!348, !346, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!349 = !{!350}
!350 = distinct !{!350, !351, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!351 = distinct !{!351, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!352 = !{!353}
!353 = distinct !{!353, !354, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!354 = distinct !{!354, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!355 = !{!356}
!356 = distinct !{!356, !357, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!357 = distinct !{!357, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!358 = !{!359}
!359 = distinct !{!359, !360, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!360 = distinct !{!360, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!361 = !{!362}
!362 = distinct !{!362, !360, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!363 = !{!364}
!364 = distinct !{!364, !365, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!365 = distinct !{!365, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!366 = !{!367}
!367 = distinct !{!367, !365, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!368 = !{!369}
!369 = distinct !{!369, !370, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!370 = distinct !{!370, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!371 = !{!372}
!372 = distinct !{!372, !370, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!373 = !{i32 -2139317390}
!374 = !{!375}
!375 = distinct !{!375, !376, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!376 = distinct !{!376, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!377 = !{!378, !379, !381, !382}
!378 = distinct !{!378, !376, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!379 = distinct !{!379, !380, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!380 = distinct !{!380, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!381 = distinct !{!381, !380, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!382 = distinct !{!382, !380, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!383 = !{!379, !381, !382}
!384 = !{!385}
!385 = distinct !{!385, !386, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!386 = distinct !{!386, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!387 = !{!388, !379, !381, !382}
!388 = distinct !{!388, !386, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!389 = !{!390}
!390 = distinct !{!390, !391, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!391 = distinct !{!391, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!392 = !{!393, !379, !381, !382}
!393 = distinct !{!393, !391, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!394 = !{!395}
!395 = distinct !{!395, !396, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!396 = distinct !{!396, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!397 = !{!398, !379, !381, !382}
!398 = distinct !{!398, !396, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!399 = !{!400}
!400 = distinct !{!400, !401, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!401 = distinct !{!401, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!402 = !{!403, !379, !381, !382}
!403 = distinct !{!403, !401, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!404 = !{!405}
!405 = distinct !{!405, !406, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!406 = distinct !{!406, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!407 = !{!408, !379, !381, !382}
!408 = distinct !{!408, !406, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!409 = !{!410}
!410 = distinct !{!410, !411, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!411 = distinct !{!411, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!412 = !{!413, !379, !381, !382}
!413 = distinct !{!413, !411, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!414 = !{!415}
!415 = distinct !{!415, !416, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!416 = distinct !{!416, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!417 = !{!418, !379, !381, !382}
!418 = distinct !{!418, !416, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!419 = !{!420}
!420 = distinct !{!420, !421, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!421 = distinct !{!421, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!422 = !{!423, !379, !381, !382}
!423 = distinct !{!423, !421, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!424 = !{!425}
!425 = distinct !{!425, !426, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!426 = distinct !{!426, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!427 = !{!428, !379, !381, !382}
!428 = distinct !{!428, !426, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!429 = !{!430}
!430 = distinct !{!430, !431, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!431 = distinct !{!431, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!432 = !{!433}
!433 = distinct !{!433, !434, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!434 = distinct !{!434, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!435 = !{!436}
!436 = distinct !{!436, !437, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!437 = distinct !{!437, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!438 = !{!439}
!439 = distinct !{!439, !440, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!440 = distinct !{!440, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!441 = !{!442}
!442 = distinct !{!442, !440, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!443 = !{!444}
!444 = distinct !{!444, !445, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!445 = distinct !{!445, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!446 = !{!447}
!447 = distinct !{!447, !445, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!448 = !{!449}
!449 = distinct !{!449, !450, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!450 = distinct !{!450, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!451 = !{!452}
!452 = distinct !{!452, !450, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!453 = !{!454}
!454 = distinct !{!454, !455, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!455 = distinct !{!455, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!456 = !{!457}
!457 = distinct !{!457, !458, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!458 = distinct !{!458, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!459 = !{!460}
!460 = distinct !{!460, !461, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!461 = distinct !{!461, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm4EEEPKf"}
!462 = !{!463}
!463 = distinct !{!463, !464, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!464 = distinct !{!464, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm4EEEPKf"}
!465 = !{!466}
!466 = distinct !{!466, !467, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!467 = distinct !{!467, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm4EEEPKf"}
!468 = !{!469}
!469 = distinct !{!469, !470, !"_ZN3hwy6N_AVX2L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!470 = distinct !{!470, !"_ZN3hwy6N_AVX2L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!471 = !{!472}
!472 = distinct !{!472, !473, !"_ZN3hwy6N_AVX2L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!473 = distinct !{!473, !"_ZN3hwy6N_AVX2L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!474 = !{!475}
!475 = distinct !{!475, !476, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!476 = distinct !{!476, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!477 = !{!478}
!478 = distinct !{!478, !476, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!479 = !{!480}
!480 = distinct !{!480, !481, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!481 = distinct !{!481, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!482 = !{!483}
!483 = distinct !{!483, !481, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!484 = !{!485}
!485 = distinct !{!485, !486, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!486 = distinct !{!486, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!487 = !{!488}
!488 = distinct !{!488, !486, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!489 = !{i32 -2138632357}
!490 = !{!491}
!491 = distinct !{!491, !492, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!492 = distinct !{!492, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!493 = !{!494, !495, !497, !498}
!494 = distinct !{!494, !492, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!495 = distinct !{!495, !496, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm16EEENS4_6Vec512IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!496 = distinct !{!496, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm16EEENS4_6Vec512IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!497 = distinct !{!497, !496, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm16EEENS4_6Vec512IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!498 = distinct !{!498, !496, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm16EEENS4_6Vec512IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!499 = !{!495, !497, !498}
!500 = !{!501}
!501 = distinct !{!501, !502, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!502 = distinct !{!502, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!503 = !{!504, !495, !497, !498}
!504 = distinct !{!504, !502, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!505 = !{!506}
!506 = distinct !{!506, !507, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!507 = distinct !{!507, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!508 = !{!509, !495, !497, !498}
!509 = distinct !{!509, !507, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!510 = !{!511}
!511 = distinct !{!511, !512, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!512 = distinct !{!512, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!513 = !{!514, !495, !497, !498}
!514 = distinct !{!514, !512, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!515 = !{!516}
!516 = distinct !{!516, !517, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!517 = distinct !{!517, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!518 = !{!519, !495, !497, !498}
!519 = distinct !{!519, !517, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!520 = !{!521}
!521 = distinct !{!521, !522, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!522 = distinct !{!522, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!523 = !{!524, !495, !497, !498}
!524 = distinct !{!524, !522, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!525 = !{!526}
!526 = distinct !{!526, !527, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!527 = distinct !{!527, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!528 = !{!529, !495, !497, !498}
!529 = distinct !{!529, !527, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!530 = !{!531}
!531 = distinct !{!531, !532, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!532 = distinct !{!532, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!533 = !{!534, !495, !497, !498}
!534 = distinct !{!534, !532, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!535 = !{!536}
!536 = distinct !{!536, !537, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!537 = distinct !{!537, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!538 = !{!539, !495, !497, !498}
!539 = distinct !{!539, !537, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!540 = !{!541}
!541 = distinct !{!541, !542, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!542 = distinct !{!542, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!543 = !{!544, !495, !497, !498}
!544 = distinct !{!544, !542, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!545 = !{!546}
!546 = distinct !{!546, !547, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!547 = distinct !{!547, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!548 = !{!549}
!549 = distinct !{!549, !550, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!550 = distinct !{!550, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!551 = !{!552}
!552 = distinct !{!552, !553, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!553 = distinct !{!553, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!554 = !{!555}
!555 = distinct !{!555, !556, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!556 = distinct !{!556, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!557 = !{!558}
!558 = distinct !{!558, !556, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!559 = !{!560}
!560 = distinct !{!560, !561, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!561 = distinct !{!561, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!562 = !{!563}
!563 = distinct !{!563, !561, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!564 = !{!565}
!565 = distinct !{!565, !566, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!566 = distinct !{!566, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!567 = !{!568}
!568 = distinct !{!568, !566, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!569 = !{i32 -2138631166}
!570 = !{!571}
!571 = distinct !{!571, !572, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!572 = distinct !{!572, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!573 = !{!574, !575, !577, !578}
!574 = distinct !{!574, !572, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!575 = distinct !{!575, !576, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm16EEENS4_6Vec512IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!576 = distinct !{!576, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm16EEENS4_6Vec512IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!577 = distinct !{!577, !576, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm16EEENS4_6Vec512IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!578 = distinct !{!578, !576, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm16EEENS4_6Vec512IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!579 = !{!575, !577, !578}
!580 = !{!581}
!581 = distinct !{!581, !582, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!582 = distinct !{!582, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!583 = !{!584, !575, !577, !578}
!584 = distinct !{!584, !582, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!585 = !{!586}
!586 = distinct !{!586, !587, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!587 = distinct !{!587, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!588 = !{!589, !575, !577, !578}
!589 = distinct !{!589, !587, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!590 = !{!591}
!591 = distinct !{!591, !592, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!592 = distinct !{!592, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!593 = !{!594, !575, !577, !578}
!594 = distinct !{!594, !592, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!595 = !{!596}
!596 = distinct !{!596, !597, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!597 = distinct !{!597, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!598 = !{!599, !575, !577, !578}
!599 = distinct !{!599, !597, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!600 = !{!601}
!601 = distinct !{!601, !602, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!602 = distinct !{!602, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!603 = !{!604, !575, !577, !578}
!604 = distinct !{!604, !602, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!605 = !{!606}
!606 = distinct !{!606, !607, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!607 = distinct !{!607, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!608 = !{!609, !575, !577, !578}
!609 = distinct !{!609, !607, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!610 = !{!611}
!611 = distinct !{!611, !612, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!612 = distinct !{!612, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!613 = !{!614, !575, !577, !578}
!614 = distinct !{!614, !612, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!615 = !{!616}
!616 = distinct !{!616, !617, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!617 = distinct !{!617, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!618 = !{!619, !575, !577, !578}
!619 = distinct !{!619, !617, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!620 = !{!621}
!621 = distinct !{!621, !622, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 1"}
!622 = distinct !{!622, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf"}
!623 = !{!624, !575, !577, !578}
!624 = distinct !{!624, !622, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm16EEEPKf: argument 0"}
!625 = !{!626}
!626 = distinct !{!626, !627, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!627 = distinct !{!627, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!628 = !{!629}
!629 = distinct !{!629, !630, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!630 = distinct !{!630, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!631 = !{!632}
!632 = distinct !{!632, !633, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!633 = distinct !{!633, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!634 = !{!635}
!635 = distinct !{!635, !636, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!636 = distinct !{!636, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!637 = !{!638}
!638 = distinct !{!638, !636, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!639 = !{!640}
!640 = distinct !{!640, !641, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!641 = distinct !{!641, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!642 = !{!643}
!643 = distinct !{!643, !641, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!644 = !{!645}
!645 = distinct !{!645, !646, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!646 = distinct !{!646, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!647 = !{!648}
!648 = distinct !{!648, !646, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!649 = !{!650}
!650 = distinct !{!650, !651, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!651 = distinct !{!651, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!652 = !{!653}
!653 = distinct !{!653, !654, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!654 = distinct !{!654, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!655 = !{!656}
!656 = distinct !{!656, !657, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!657 = distinct !{!657, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm4EEEPKf"}
!658 = !{!659}
!659 = distinct !{!659, !660, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!660 = distinct !{!660, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm4EEEPKf"}
!661 = !{!662}
!662 = distinct !{!662, !663, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!663 = distinct !{!663, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm4EEEPKf"}
!664 = !{!665}
!665 = distinct !{!665, !666, !"_ZN3hwy6N_AVX3L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!666 = distinct !{!666, !"_ZN3hwy6N_AVX3L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!667 = !{!668}
!668 = distinct !{!668, !669, !"_ZN3hwy6N_AVX3L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!669 = distinct !{!669, !"_ZN3hwy6N_AVX3L6StoreUENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!670 = !{!671}
!671 = distinct !{!671, !672, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!672 = distinct !{!672, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!673 = !{!674}
!674 = distinct !{!674, !675, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!675 = distinct !{!675, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!676 = !{!677}
!677 = distinct !{!677, !678, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!678 = distinct !{!678, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!679 = !{i32 -2138499746}
!680 = !{!681, !683, !684}
!681 = distinct !{!681, !682, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!682 = distinct !{!682, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!683 = distinct !{!683, !682, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!684 = distinct !{!684, !682, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!685 = !{!686, !688}
!686 = distinct !{!686, !687, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!687 = distinct !{!687, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!688 = distinct !{!688, !689, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!689 = distinct !{!689, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!690 = !{!691, !693}
!691 = distinct !{!691, !692, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!692 = distinct !{!692, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!693 = distinct !{!693, !694, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!694 = distinct !{!694, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!695 = !{!696, !698}
!696 = distinct !{!696, !697, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!697 = distinct !{!697, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!698 = distinct !{!698, !699, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!699 = distinct !{!699, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!700 = !{!701, !703}
!701 = distinct !{!701, !702, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!702 = distinct !{!702, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!703 = distinct !{!703, !704, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!704 = distinct !{!704, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!705 = !{!706, !708}
!706 = distinct !{!706, !707, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!707 = distinct !{!707, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!708 = distinct !{!708, !709, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!709 = distinct !{!709, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!710 = !{!711, !713}
!711 = distinct !{!711, !712, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!712 = distinct !{!712, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!713 = distinct !{!713, !714, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!714 = distinct !{!714, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!715 = !{!716, !718}
!716 = distinct !{!716, !717, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!717 = distinct !{!717, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!718 = distinct !{!718, !719, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!719 = distinct !{!719, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!720 = !{!721, !723}
!721 = distinct !{!721, !722, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!722 = distinct !{!722, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!723 = distinct !{!723, !724, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!724 = distinct !{!724, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!725 = !{!726, !728}
!726 = distinct !{!726, !727, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!727 = distinct !{!727, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!728 = distinct !{!728, !729, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!729 = distinct !{!729, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!730 = !{!731}
!731 = distinct !{!731, !732, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!732 = distinct !{!732, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!733 = !{!734}
!734 = distinct !{!734, !735, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!735 = distinct !{!735, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!736 = !{!737}
!737 = distinct !{!737, !738, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!738 = distinct !{!738, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!739 = !{!740}
!740 = distinct !{!740, !741, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!741 = distinct !{!741, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!742 = !{!743}
!743 = distinct !{!743, !744, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!744 = distinct !{!744, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!745 = !{!746}
!746 = distinct !{!746, !747, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!747 = distinct !{!747, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!748 = !{i32 -2138498574}
!749 = !{!750, !752, !753}
!750 = distinct !{!750, !751, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!751 = distinct !{!751, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!752 = distinct !{!752, !751, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!753 = distinct !{!753, !751, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!754 = !{!755, !757}
!755 = distinct !{!755, !756, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!756 = distinct !{!756, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!757 = distinct !{!757, !758, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!758 = distinct !{!758, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!759 = !{!760, !762}
!760 = distinct !{!760, !761, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!761 = distinct !{!761, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!762 = distinct !{!762, !763, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!763 = distinct !{!763, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!764 = !{!765, !767}
!765 = distinct !{!765, !766, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!766 = distinct !{!766, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!767 = distinct !{!767, !768, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!768 = distinct !{!768, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!769 = !{!770, !772}
!770 = distinct !{!770, !771, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!771 = distinct !{!771, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!772 = distinct !{!772, !773, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!773 = distinct !{!773, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!774 = !{!775, !777}
!775 = distinct !{!775, !776, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!776 = distinct !{!776, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!777 = distinct !{!777, !778, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!778 = distinct !{!778, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!779 = !{!780, !782}
!780 = distinct !{!780, !781, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!781 = distinct !{!781, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!782 = distinct !{!782, !783, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!783 = distinct !{!783, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!784 = !{!785, !787}
!785 = distinct !{!785, !786, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!786 = distinct !{!786, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!787 = distinct !{!787, !788, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!788 = distinct !{!788, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!789 = !{!790, !792}
!790 = distinct !{!790, !791, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!791 = distinct !{!791, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!792 = distinct !{!792, !793, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!793 = distinct !{!793, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!794 = !{!795, !797}
!795 = distinct !{!795, !796, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!796 = distinct !{!796, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!797 = distinct !{!797, !798, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!798 = distinct !{!798, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!799 = !{!800}
!800 = distinct !{!800, !801, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!801 = distinct !{!801, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!802 = !{!803}
!803 = distinct !{!803, !804, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!804 = distinct !{!804, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!805 = !{!806}
!806 = distinct !{!806, !807, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!807 = distinct !{!807, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!808 = !{!809}
!809 = distinct !{!809, !810, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!810 = distinct !{!810, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!811 = !{!812}
!812 = distinct !{!812, !813, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!813 = distinct !{!813, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!814 = !{!815}
!815 = distinct !{!815, !816, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!816 = distinct !{!816, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!817 = !{!818}
!818 = distinct !{!818, !819, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!819 = distinct !{!819, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!820 = !{!821}
!821 = distinct !{!821, !822, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!822 = distinct !{!822, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!823 = !{!824, !826}
!824 = distinct !{!824, !825, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!825 = distinct !{!825, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!826 = distinct !{!826, !827, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!827 = distinct !{!827, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!828 = !{!829, !831}
!829 = distinct !{!829, !830, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!830 = distinct !{!830, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!831 = distinct !{!831, !832, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!832 = distinct !{!832, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!833 = !{!834, !836}
!834 = distinct !{!834, !835, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!835 = distinct !{!835, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!836 = distinct !{!836, !837, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!837 = distinct !{!837, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!838 = !{!839, !841}
!839 = distinct !{!839, !840, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!840 = distinct !{!840, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!841 = distinct !{!841, !842, !"_ZN3hwy8N_SCALAR6StoreUIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!842 = distinct !{!842, !"_ZN3hwy8N_SCALAR6StoreUIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!843 = !{!844, !846}
!844 = distinct !{!844, !845, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!845 = distinct !{!845, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!846 = distinct !{!846, !847, !"_ZN3hwy8N_SCALAR6StoreUIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!847 = distinct !{!847, !"_ZN3hwy8N_SCALAR6StoreUIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
