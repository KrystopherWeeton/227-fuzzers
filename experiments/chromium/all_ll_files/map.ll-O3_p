; ModuleID = '../../v8/src/objects/map.cc'
source_filename = "../../v8/src/objects/map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::SoleReadOnlyHeap" = type { %"class.v8::internal::ReadOnlyHeap", [587 x i64] }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.541" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.139", i64, i64, i8, i64, i64 }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.19", i64 }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.19", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.19", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.19", i64, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.29", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.146", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.161", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.19", i64, i8, %"struct.std::__1::atomic.19", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.165", %"class.std::__1::vector.165", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.178", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.359", %"class.std::__1::unique_ptr.398", %"class.std::__1::unique_ptr.428", %"class.std::__1::unique_ptr.434", %"class.std::__1::unique_ptr.444", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.456", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.468", %"class.std::__1::unique_ptr.474", %"class.std::__1::shared_ptr.480", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.503", %"class.std::__1::unique_ptr.529", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.535", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.548", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.330", i8, [7 x i8], %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.580", %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.604", %"class.std::__1::vector.632", i8, %"class.std::__1::unique_ptr.639", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.2", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.16", [4 x i8] }>
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.645", %"class.std::__1::unique_ptr.666", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.676", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.815", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.828", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.838", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.849", %"struct.std::__1::atomic.152", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.924", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.967"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.975", i32, i8, i8, i32, i32, %"class.std::__1::vector.981", %"class.std::__1::vector.981", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.988", i64, %"class.std::__1::unordered_map.989", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.541", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.160", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1045", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1083", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1117", %"class.std::__1::vector.1121", %"class.std::__1::vector.1121", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.645" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.139", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.646", %"class.std::__1::unique_ptr.660" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.649" }
%"class.std::__1::vector.649" = type { %"class.std::__1::__vector_base.650" }
%"class.std::__1::__vector_base.650" = type { %"class.std::__1::unique_ptr.651"*, %"class.std::__1::unique_ptr.651"*, %"class.std::__1::__compressed_pair.652" }
%"class.std::__1::unique_ptr.651" = type { %"class.std::__1::__compressed_pair.1165" }
%"class.std::__1::__compressed_pair.1165" = type { %"struct.std::__1::__compressed_pair_elem.1166" }
%"struct.std::__1::__compressed_pair_elem.1166" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"class.std::__1::unique_ptr.651"* }
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.669", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.669" = type { %"struct.std::__1::__atomic_base.670" }
%"struct.std::__1::__atomic_base.670" = type { %"struct.std::__1::__cxx_atomic_impl.671" }
%"struct.std::__1::__cxx_atomic_impl.671" = type { %"struct.std::__1::__cxx_atomic_base_impl.672" }
%"struct.std::__1::__cxx_atomic_base_impl.672" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.676" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.677", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.677" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.678", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.678" = type { %"class.std::__1::__vector_base.679" }
%"class.std::__1::__vector_base.679" = type { %"class.std::__1::unique_ptr.680"*, %"class.std::__1::unique_ptr.680"*, %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::unique_ptr.680" = type opaque
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"class.std::__1::unique_ptr.680"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.686", %"class.std::__1::unique_ptr.692", %"struct.std::__1::atomic.152", %"class.std::__1::unique_ptr.698", %"class.std::__1::unique_ptr.704", %"class.std::__1::unique_ptr.710", %"class.std::__1::unique_ptr.716", %"class.std::__1::unique_ptr.722", %"class.std::__1::set.728", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.686" = type { %"class.std::__1::__compressed_pair.687" }
%"class.std::__1::__compressed_pair.687" = type { %"struct.std::__1::__compressed_pair_elem.688" }
%"struct.std::__1::__compressed_pair_elem.688" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.698" = type { %"class.std::__1::__compressed_pair.699" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.700" }
%"struct.std::__1::__compressed_pair_elem.700" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.716" = type { %"class.std::__1::__compressed_pair.717" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.728" = type { %"class.std::__1::__tree.729" }
%"class.std::__1::__tree.729" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.730", %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.730" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.737" }
%"class.v8::internal::TaggedImpl.737" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.736" }
%"class.v8::internal::TaggedImpl.736" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.744", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.750", %"class.v8::internal::DetachableVector.751", %"class.v8::internal::DetachableVector.750", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.751" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.750" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.std::__1::unique_ptr.738", %"class.std::__1::unique_ptr.481" }
%"class.std::__1::unique_ptr.738" = type { %"class.std::__1::__compressed_pair.739" }
%"class.std::__1::__compressed_pair.739" = type { %"struct.std::__1::__compressed_pair_elem.740" }
%"struct.std::__1::__compressed_pair_elem.740" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.481" = type { %"class.std::__1::__compressed_pair.482" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.483" }
%"struct.std::__1::__compressed_pair_elem.483" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.484", %"class.std::__1::set.492" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.484" = type { %"class.std::__1::__tree.485" }
%"class.std::__1::__tree.485" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.490" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.490" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::set.492" = type { %"class.std::__1::__tree.493" }
%"class.std::__1::__tree.493" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.494" }
%"class.std::__1::__compressed_pair.494" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.752", %"class.std::__1::vector.758", %"class.std::__1::unique_ptr.765", %"class.std::__1::vector.772", %"class.std::__1::unique_ptr.779", i64, %"class.std::__1::vector.785", %"class.std::__1::vector.793", %"class.std::__1::vector.801", i8, i8, i32 }
%"class.std::__1::unique_ptr.752" = type { %"class.std::__1::__compressed_pair.753" }
%"class.std::__1::__compressed_pair.753" = type { %"struct.std::__1::__compressed_pair_elem.754" }
%"struct.std::__1::__compressed_pair_elem.754" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.758" = type { %"class.std::__1::__vector_base.759" }
%"class.std::__1::__vector_base.759" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.760" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.765" = type { %"class.std::__1::__compressed_pair.766" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::GlobalHandles::NodeSpace.768"* }
%"class.v8::internal::GlobalHandles::NodeSpace.768" = type opaque
%"class.std::__1::vector.772" = type { %"class.std::__1::__vector_base.773" }
%"class.std::__1::__vector_base.773" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.774" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.775" }
%"struct.std::__1::__compressed_pair_elem.775" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.785" = type { %"class.std::__1::__vector_base.786" }
%"class.std::__1::__vector_base.786" = type { %"struct.std::__1::pair.787"*, %"struct.std::__1::pair.787"*, %"class.std::__1::__compressed_pair.788" }
%"struct.std::__1::pair.787" = type opaque
%"class.std::__1::__compressed_pair.788" = type { %"struct.std::__1::__compressed_pair_elem.789" }
%"struct.std::__1::__compressed_pair_elem.789" = type { %"struct.std::__1::pair.787"* }
%"class.std::__1::vector.793" = type { %"class.std::__1::__vector_base.794" }
%"class.std::__1::__vector_base.794" = type { %"struct.std::__1::pair.795"*, %"struct.std::__1::pair.795"*, %"class.std::__1::__compressed_pair.796" }
%"struct.std::__1::pair.795" = type opaque
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { %"struct.std::__1::pair.795"* }
%"class.std::__1::vector.801" = type { %"class.std::__1::__vector_base.802" }
%"class.std::__1::__vector_base.802" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.803" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.808", %"class.std::__1::vector.815" }
%"class.std::__1::vector.808" = type { %"class.std::__1::__vector_base.809" }
%"class.std::__1::__vector_base.809" = type { i64**, i64**, %"class.std::__1::__compressed_pair.810" }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.822" }
%"class.std::__1::unique_ptr.822" = type { %"class.std::__1::__compressed_pair.823" }
%"class.std::__1::__compressed_pair.823" = type { %"struct.std::__1::__compressed_pair_elem.824" }
%"struct.std::__1::__compressed_pair_elem.824" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { i32*, i32*, %"class.std::__1::__compressed_pair.817" }
%"class.std::__1::__compressed_pair.817" = type { %"struct.std::__1::__compressed_pair_elem.818" }
%"struct.std::__1::__compressed_pair_elem.818" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.828" = type { %"struct.std::__1::__atomic_base.829" }
%"struct.std::__1::__atomic_base.829" = type { %"struct.std::__1::__cxx_atomic_impl.830" }
%"struct.std::__1::__cxx_atomic_impl.830" = type { %"struct.std::__1::__cxx_atomic_base_impl.831" }
%"struct.std::__1::__cxx_atomic_base_impl.831" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.838" = type { %"struct.std::__1::__atomic_base.839" }
%"struct.std::__1::__atomic_base.839" = type { %"struct.std::__1::__cxx_atomic_impl.840" }
%"struct.std::__1::__cxx_atomic_impl.840" = type { %"struct.std::__1::__cxx_atomic_base_impl.841" }
%"struct.std::__1::__cxx_atomic_base_impl.841" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.843" }
%"class.std::__1::__compressed_pair.843" = type { %"struct.std::__1::__compressed_pair_elem.844" }
%"struct.std::__1::__compressed_pair_elem.844" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.845 }
%union.anon.845 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.849" = type { %"class.std::__1::__hash_table.850" }
%"class.std::__1::__hash_table.850" = type <{ %"class.std::__1::unique_ptr.851", %"class.std::__1::__compressed_pair.861", %"class.std::__1::__compressed_pair.866", %"class.std::__1::__compressed_pair.869", [4 x i8] }>
%"class.std::__1::unique_ptr.851" = type { %"class.std::__1::__compressed_pair.852" }
%"class.std::__1::__compressed_pair.852" = type { %"struct.std::__1::__compressed_pair_elem.853", %"struct.std::__1::__compressed_pair_elem.855" }
%"struct.std::__1::__compressed_pair_elem.853" = type { %"struct.std::__1::__hash_node_base.854"** }
%"struct.std::__1::__hash_node_base.854" = type { %"struct.std::__1::__hash_node_base.854"* }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"class.std::__1::__bucket_list_deallocator.856" }
%"class.std::__1::__bucket_list_deallocator.856" = type { %"class.std::__1::__compressed_pair.857" }
%"class.std::__1::__compressed_pair.857" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.861" = type { %"struct.std::__1::__compressed_pair_elem.862" }
%"struct.std::__1::__compressed_pair_elem.862" = type { %"struct.std::__1::__hash_node_base.854" }
%"class.std::__1::__compressed_pair.866" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.152" = type { %"struct.std::__1::__atomic_base.153" }
%"struct.std::__1::__atomic_base.153" = type { %"struct.std::__1::__cxx_atomic_impl.154" }
%"struct.std::__1::__cxx_atomic_impl.154" = type { %"struct.std::__1::__cxx_atomic_base_impl.155" }
%"struct.std::__1::__cxx_atomic_base_impl.155" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.875", %"class.v8::internal::Handle.881", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.882", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.875" = type { %"class.std::__1::__compressed_pair.876" }
%"class.std::__1::__compressed_pair.876" = type { %"struct.std::__1::__compressed_pair_elem.877" }
%"struct.std::__1::__compressed_pair_elem.877" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.881" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.882" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.883", %"class.std::__1::vector.889", %"class.std::__1::unique_ptr.897", %"class.std::__1::unique_ptr.903", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.909", %"class.std::__1::vector.915", %"struct.std::__1::pair.923" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.889" = type { %"class.std::__1::__vector_base.890" }
%"class.std::__1::__vector_base.890" = type { %"class.std::__1::unique_ptr.891"*, %"class.std::__1::unique_ptr.891"*, %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::unique_ptr.891" = type opaque
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.std::__1::unique_ptr.891"* }
%"class.std::__1::unique_ptr.897" = type { %"class.std::__1::__compressed_pair.898" }
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.903" = type { %"class.std::__1::__compressed_pair.904" }
%"class.std::__1::__compressed_pair.904" = type { %"struct.std::__1::__compressed_pair_elem.905" }
%"struct.std::__1::__compressed_pair_elem.905" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.909" = type { %"class.std::__1::__compressed_pair.910" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.911" }
%"struct.std::__1::__compressed_pair_elem.911" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.915" = type { %"class.std::__1::__vector_base.916" }
%"class.std::__1::__vector_base.916" = type { %"struct.std::__1::pair.917"*, %"struct.std::__1::pair.917"*, %"class.std::__1::__compressed_pair.918" }
%"struct.std::__1::pair.917" = type opaque
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"struct.std::__1::pair.917"* }
%"struct.std::__1::pair.923" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.0"*, i16, i8*)*, i8* }
%"class.v8::Local.0" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.924" = type { %"class.std::__1::__compressed_pair.925" }
%"class.std::__1::__compressed_pair.925" = type { %"struct.std::__1::__compressed_pair_elem.926" }
%"struct.std::__1::__compressed_pair_elem.926" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.927", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.927" = type { %"class.std::__1::__hash_table.928" }
%"class.std::__1::__hash_table.928" = type <{ %"class.std::__1::unique_ptr.929", %"class.std::__1::__compressed_pair.939", %"class.std::__1::__compressed_pair.944", %"class.std::__1::__compressed_pair.948", [4 x i8] }>
%"class.std::__1::unique_ptr.929" = type { %"class.std::__1::__compressed_pair.930" }
%"class.std::__1::__compressed_pair.930" = type { %"struct.std::__1::__compressed_pair_elem.931", %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.931" = type { %"struct.std::__1::__hash_node_base.932"** }
%"struct.std::__1::__hash_node_base.932" = type { %"struct.std::__1::__hash_node_base.932"* }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.std::__1::__bucket_list_deallocator.934" }
%"class.std::__1::__bucket_list_deallocator.934" = type { %"class.std::__1::__compressed_pair.935" }
%"class.std::__1::__compressed_pair.935" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.939" = type { %"struct.std::__1::__compressed_pair_elem.940" }
%"struct.std::__1::__compressed_pair_elem.940" = type { %"struct.std::__1::__hash_node_base.932" }
%"class.std::__1::__compressed_pair.944" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.962" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"class.std::__1::__compressed_pair.957" }
%"struct.std::__1::pair.956" = type opaque
%"class.std::__1::__compressed_pair.957" = type { %"struct.std::__1::__compressed_pair_elem.958" }
%"struct.std::__1::__compressed_pair_elem.958" = type { %"struct.std::__1::pair.956"** }
%"class.std::__1::__compressed_pair.962" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.967" = type { %"class.std::__1::__vector_base.968" }
%"class.std::__1::__vector_base.968" = type { %"class.v8::internal::Handle.969"*, %"class.v8::internal::Handle.969"*, %"class.std::__1::__compressed_pair.970" }
%"class.v8::internal::Handle.969" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.971" }
%"struct.std::__1::__compressed_pair_elem.971" = type { %"class.v8::internal::Handle.969"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.833", i32, %"class.v8::Local.0" }
%"class.v8::Local.833" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.975" = type { %"class.std::__1::__compressed_pair.976" }
%"class.std::__1::__compressed_pair.976" = type { %"struct.std::__1::__compressed_pair_elem.977" }
%"struct.std::__1::__compressed_pair_elem.977" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.808", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.981" = type { %"class.std::__1::__vector_base.982" }
%"class.std::__1::__vector_base.982" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.983" }
%"class.std::__1::__compressed_pair.983" = type { %"struct.std::__1::__compressed_pair_elem.984" }
%"struct.std::__1::__compressed_pair_elem.984" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.988" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.989" = type { %"class.std::__1::__hash_table.990" }
%"class.std::__1::__hash_table.990" = type <{ %"class.std::__1::unique_ptr.991", %"class.std::__1::__compressed_pair.1001", %"class.std::__1::__compressed_pair.1006", %"class.std::__1::__compressed_pair.1009", [4 x i8] }>
%"class.std::__1::unique_ptr.991" = type { %"class.std::__1::__compressed_pair.992" }
%"class.std::__1::__compressed_pair.992" = type { %"struct.std::__1::__compressed_pair_elem.993", %"struct.std::__1::__compressed_pair_elem.995" }
%"struct.std::__1::__compressed_pair_elem.993" = type { %"struct.std::__1::__hash_node_base.994"** }
%"struct.std::__1::__hash_node_base.994" = type { %"struct.std::__1::__hash_node_base.994"* }
%"struct.std::__1::__compressed_pair_elem.995" = type { %"class.std::__1::__bucket_list_deallocator.996" }
%"class.std::__1::__bucket_list_deallocator.996" = type { %"class.std::__1::__compressed_pair.997" }
%"class.std::__1::__compressed_pair.997" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.1002" }
%"struct.std::__1::__compressed_pair_elem.1002" = type { %"struct.std::__1::__hash_node_base.994" }
%"class.std::__1::__compressed_pair.1006" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1009" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.160" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1013", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1042", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1043", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1013" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1038, %union.anon.1040, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1038 = type { i64 }
%union.anon.1040 = type { i64 }
%"class.std::__1::weak_ptr.1042" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.19", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.160" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1043" = type { %"class.v8::PersistentBase.1044" }
%"class.v8::PersistentBase.1044" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1014", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1014" = type { %"class.std::__1::__hash_table.1015" }
%"class.std::__1::__hash_table.1015" = type <{ %"class.std::__1::unique_ptr.1016", %"class.std::__1::__compressed_pair.1026", %"class.std::__1::__compressed_pair.1031", %"class.std::__1::__compressed_pair.1034", [4 x i8] }>
%"class.std::__1::unique_ptr.1016" = type { %"class.std::__1::__compressed_pair.1017" }
%"class.std::__1::__compressed_pair.1017" = type { %"struct.std::__1::__compressed_pair_elem.1018", %"struct.std::__1::__compressed_pair_elem.1020" }
%"struct.std::__1::__compressed_pair_elem.1018" = type { %"struct.std::__1::__hash_node_base.1019"** }
%"struct.std::__1::__hash_node_base.1019" = type { %"struct.std::__1::__hash_node_base.1019"* }
%"struct.std::__1::__compressed_pair_elem.1020" = type { %"class.std::__1::__bucket_list_deallocator.1021" }
%"class.std::__1::__bucket_list_deallocator.1021" = type { %"class.std::__1::__compressed_pair.1022" }
%"class.std::__1::__compressed_pair.1022" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.1027" }
%"struct.std::__1::__compressed_pair_elem.1027" = type { %"struct.std::__1::__hash_node_base.1019" }
%"class.std::__1::__compressed_pair.1031" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1034" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1045" = type { %"class.std::__1::__compressed_pair.1046" }
%"class.std::__1::__compressed_pair.1046" = type { %"struct.std::__1::__compressed_pair_elem.1047" }
%"struct.std::__1::__compressed_pair_elem.1047" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1074", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1050", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1054", %"class.std::__1::unique_ptr.1060", %"class.std::__1::unique_ptr.474", %"class.std::__1::vector.1066", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1050" = type { %"struct.std::__1::__atomic_base.1051" }
%"struct.std::__1::__atomic_base.1051" = type { %"struct.std::__1::__cxx_atomic_impl.1052" }
%"struct.std::__1::__cxx_atomic_impl.1052" = type { %"struct.std::__1::__cxx_atomic_base_impl.1053" }
%"struct.std::__1::__cxx_atomic_base_impl.1053" = type { i32 }
%"class.std::__1::unique_ptr.1054" = type { %"class.std::__1::__compressed_pair.1055" }
%"class.std::__1::__compressed_pair.1055" = type { %"struct.std::__1::__compressed_pair_elem.1056" }
%"struct.std::__1::__compressed_pair_elem.1056" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.808" }
%"class.std::__1::unique_ptr.1060" = type { %"class.std::__1::__compressed_pair.1061" }
%"class.std::__1::__compressed_pair.1061" = type { %"struct.std::__1::__compressed_pair_elem.1062" }
%"struct.std::__1::__compressed_pair_elem.1062" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1066" = type { %"class.std::__1::__vector_base.1067" }
%"class.std::__1::__vector_base.1067" = type { %"struct.std::__1::pair.1068"*, %"struct.std::__1::pair.1068"*, %"class.std::__1::__compressed_pair.1069" }
%"struct.std::__1::pair.1068" = type opaque
%"class.std::__1::__compressed_pair.1069" = type { %"struct.std::__1::__compressed_pair_elem.1070" }
%"struct.std::__1::__compressed_pair_elem.1070" = type { %"struct.std::__1::pair.1068"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.19"*, %"class.std::__1::unique_ptr.97" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.38", %"class.std::__1::vector.38", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.40" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.45" }
%"class.std::__1::__hash_table.45" = type <{ %"class.std::__1::unique_ptr.46", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.61", %"class.std::__1::__compressed_pair.63", [4 x i8] }>
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.49"** }
%"struct.std::__1::__hash_node_base.49" = type { %"struct.std::__1::__hash_node_base.49"* }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::__bucket_list_deallocator.51" }
%"class.std::__1::__bucket_list_deallocator.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.std::__1::__hash_node_base.49" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.24", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.86", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.19"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.24", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.68", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.68" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__cxx_atomic_impl.70" }
%"struct.std::__1::__cxx_atomic_impl.70" = type { %"struct.std::__1::__cxx_atomic_base_impl.71" }
%"struct.std::__1::__cxx_atomic_base_impl.71" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.72" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.74" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__cxx_atomic_impl.88" }
%"struct.std::__1::__cxx_atomic_impl.88" = type { %"struct.std::__1::__cxx_atomic_base_impl.89" }
%"struct.std::__1::__cxx_atomic_base_impl.89" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.90", i8, [7 x i8] }>
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { i64*, i64*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.19", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.std::__1::unique_ptr.1074" = type { %"class.std::__1::__compressed_pair.1075" }
%"class.std::__1::__compressed_pair.1075" = type { %"struct.std::__1::__compressed_pair_elem.1076" }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1083" = type { %"class.std::__1::__compressed_pair.1084" }
%"class.std::__1::__compressed_pair.1084" = type { %"struct.std::__1::__compressed_pair_elem.1085" }
%"struct.std::__1::__compressed_pair_elem.1085" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.834", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.834" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1091" }
%"class.std::__1::unordered_map.1091" = type { %"class.std::__1::__hash_table.1092" }
%"class.std::__1::__hash_table.1092" = type <{ %"class.std::__1::unique_ptr.1093", %"class.std::__1::__compressed_pair.1103", %"class.std::__1::__compressed_pair.1108", %"class.std::__1::__compressed_pair.1111", [4 x i8] }>
%"class.std::__1::unique_ptr.1093" = type { %"class.std::__1::__compressed_pair.1094" }
%"class.std::__1::__compressed_pair.1094" = type { %"struct.std::__1::__compressed_pair_elem.1095", %"struct.std::__1::__compressed_pair_elem.1097" }
%"struct.std::__1::__compressed_pair_elem.1095" = type { %"struct.std::__1::__hash_node_base.1096"** }
%"struct.std::__1::__hash_node_base.1096" = type { %"struct.std::__1::__hash_node_base.1096"* }
%"struct.std::__1::__compressed_pair_elem.1097" = type { %"class.std::__1::__bucket_list_deallocator.1098" }
%"class.std::__1::__bucket_list_deallocator.1098" = type { %"class.std::__1::__compressed_pair.1099" }
%"class.std::__1::__compressed_pair.1099" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1103" = type { %"struct.std::__1::__compressed_pair_elem.1104" }
%"struct.std::__1::__compressed_pair_elem.1104" = type { %"struct.std::__1::__hash_node_base.1096" }
%"class.std::__1::__compressed_pair.1108" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1111" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.1117" = type { %"struct.std::__1::__atomic_base.1118" }
%"struct.std::__1::__atomic_base.1118" = type { %"struct.std::__1::__cxx_atomic_impl.1119" }
%"struct.std::__1::__cxx_atomic_impl.1119" = type { %"struct.std::__1::__cxx_atomic_base_impl.1120" }
%"struct.std::__1::__cxx_atomic_base_impl.1120" = type { %"class.std::__1::vector.1121"* }
%"class.std::__1::vector.1121" = type { %"class.std::__1::__vector_base.1122" }
%"class.std::__1::__vector_base.1122" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1123" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1123" = type { %"struct.std::__1::__compressed_pair_elem.1124" }
%"struct.std::__1::__compressed_pair_elem.1124" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.29" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl.31" }
%"struct.std::__1::__cxx_atomic_impl.31" = type { %"struct.std::__1::__cxx_atomic_base_impl.32" }
%"struct.std::__1::__cxx_atomic_base_impl.32" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.33" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.103" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.std::__1::pair.105"*, %"struct.std::__1::pair.105"*, %"class.std::__1::__compressed_pair.106" }
%"struct.std::__1::pair.105" = type { i32, i64 }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::pair.105"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.19", i32, %"struct.std::__1::atomic.19", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.111" }
%"class.std::__1::unordered_map.111" = type { %"class.std::__1::__hash_table.112" }
%"class.std::__1::__hash_table.112" = type <{ %"class.std::__1::unique_ptr.113", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.133", [4 x i8] }>
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.116"** }
%"struct.std::__1::__hash_node_base.116" = type { %"struct.std::__1::__hash_node_base.116"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator.118" }
%"class.std::__1::__bucket_list_deallocator.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::__hash_node_base.116" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.152", %"struct.std::__1::atomic.156", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.19" }
%"struct.std::__1::atomic.156" = type { %"struct.std::__1::__atomic_base.157" }
%"struct.std::__1::__atomic_base.157" = type { %"struct.std::__1::__cxx_atomic_impl.158" }
%"struct.std::__1::__cxx_atomic_impl.158" = type { %"struct.std::__1::__cxx_atomic_base_impl.159" }
%"struct.std::__1::__cxx_atomic_base_impl.159" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::vector.165" = type { %"class.std::__1::__vector_base.166" }
%"class.std::__1::__vector_base.166" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.167" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.220", %"class.std::__1::unique_ptr.226", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.287", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.181", %"class.std::__1::vector.182", %"class.std::__1::vector.189", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.181" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.184" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { %"class.std::__1::unique_ptr.191"*, %"class.std::__1::unique_ptr.191"*, %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::unique_ptr.191" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.std::__1::unique_ptr.191"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.197", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.203", %"class.v8::internal::Worklist.205", %"class.v8::internal::Worklist.207", %"class.v8::internal::Worklist.209", %"class.v8::internal::Worklist.211" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.197" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.199" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.201" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.203" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.205" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.207" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.209" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.211" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.213", i8, i64 }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.229" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.181"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.229" = type { %"class.std::__1::__hash_table.230" }
%"class.std::__1::__hash_table.230" = type <{ %"class.std::__1::unique_ptr.231", %"class.std::__1::__compressed_pair.241", %"class.std::__1::__compressed_pair.246", %"class.std::__1::__compressed_pair.249", [4 x i8] }>
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233", %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::__hash_node_base.234"** }
%"struct.std::__1::__hash_node_base.234" = type { %"struct.std::__1::__hash_node_base.234"* }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.std::__1::__bucket_list_deallocator.236" }
%"class.std::__1::__bucket_list_deallocator.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.std::__1::__hash_node_base.234" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.256" }
%"class.std::__1::unordered_map.256" = type { %"class.std::__1::__hash_table.257" }
%"class.std::__1::__hash_table.257" = type <{ %"class.std::__1::unique_ptr.258", %"class.std::__1::__compressed_pair.268", %"class.std::__1::__compressed_pair.273", %"class.std::__1::__compressed_pair.276", [4 x i8] }>
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260", %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.std::__1::__hash_node_base.261"** }
%"struct.std::__1::__hash_node_base.261" = type { %"struct.std::__1::__hash_node_base.261"* }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.std::__1::__bucket_list_deallocator.263" }
%"class.std::__1::__bucket_list_deallocator.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"struct.std::__1::__hash_node_base.261" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.280" = type { %"class.std::__1::__vector_base.281" }
%"class.std::__1::__vector_base.281" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.std::__1::pair.289"*, %"struct.std::__1::pair.289"*, %"class.std::__1::__compressed_pair.290" }
%"struct.std::__1::pair.289" = type opaque
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.std::__1::pair.289"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.295", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.280"], [3 x %"class.std::__1::vector.280"], i8, %"struct.std::__1::atomic.152", [6 x i8], %"class.std::__1::vector.280", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.305"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.305" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.330", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.323"], %"class.std::__1::unique_ptr.295" }
%"class.std::__1::vector.323" = type { %"class.std::__1::__vector_base.324" }
%"class.std::__1::__vector_base.324" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.359" = type { %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.362", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.366", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.371" }
%"struct.std::__1::atomic.362" = type { %"struct.std::__1::__atomic_base.363" }
%"struct.std::__1::__atomic_base.363" = type { %"struct.std::__1::__cxx_atomic_impl.364" }
%"struct.std::__1::__cxx_atomic_impl.364" = type { %"struct.std::__1::__cxx_atomic_base_impl.365" }
%"struct.std::__1::__cxx_atomic_base_impl.365" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.366" = type { %"struct.std::__1::__atomic_base.367" }
%"struct.std::__1::__atomic_base.367" = type { %"struct.std::__1::__cxx_atomic_impl.368" }
%"struct.std::__1::__cxx_atomic_impl.368" = type { %"struct.std::__1::__cxx_atomic_base_impl.369" }
%"struct.std::__1::__cxx_atomic_base_impl.369" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.371" = type { %"class.std::__1::__hash_table.372" }
%"class.std::__1::__hash_table.372" = type <{ %"class.std::__1::unique_ptr.373", %"class.std::__1::__compressed_pair.383", %"class.std::__1::__compressed_pair.388", %"class.std::__1::__compressed_pair.391", [4 x i8] }>
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375", %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.std::__1::__hash_node_base.376"** }
%"struct.std::__1::__hash_node_base.376" = type { %"struct.std::__1::__hash_node_base.376"* }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"class.std::__1::__bucket_list_deallocator.378" }
%"class.std::__1::__bucket_list_deallocator.378" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.std::__1::__hash_node_base.376" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.295", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.152", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.401", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.401" = type { %"class.std::__1::__hash_table.402" }
%"class.std::__1::__hash_table.402" = type <{ %"class.std::__1::unique_ptr.403", %"class.std::__1::__compressed_pair.413", %"class.std::__1::__compressed_pair.418", %"class.std::__1::__compressed_pair.421", [4 x i8] }>
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405", %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"struct.std::__1::__hash_node_base.406"** }
%"struct.std::__1::__hash_node_base.406" = type { %"struct.std::__1::__hash_node_base.406"* }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.std::__1::__bucket_list_deallocator.408" }
%"class.std::__1::__bucket_list_deallocator.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"struct.std::__1::__hash_node_base.406" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.428" = type { %"class.std::__1::__compressed_pair.429" }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.434" = type { %"class.std::__1::__compressed_pair.435" }
%"class.std::__1::__compressed_pair.435" = type { %"struct.std::__1::__compressed_pair_elem.436" }
%"struct.std::__1::__compressed_pair_elem.436" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.437" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.456" = type { %"class.std::__1::__compressed_pair.457" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.458" }
%"struct.std::__1::__compressed_pair_elem.458" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.462" = type { %"class.std::__1::__compressed_pair.463" }
%"class.std::__1::__compressed_pair.463" = type { %"struct.std::__1::__compressed_pair_elem.464" }
%"struct.std::__1::__compressed_pair_elem.464" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.480" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.499", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.481", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.499" = type { %"struct.std::__1::__atomic_base.500" }
%"struct.std::__1::__atomic_base.500" = type { %"struct.std::__1::__cxx_atomic_impl.501" }
%"struct.std::__1::__cxx_atomic_impl.501" = type { %"struct.std::__1::__cxx_atomic_base_impl.502" }
%"struct.std::__1::__cxx_atomic_base_impl.502" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.503" = type { %"class.std::__1::__hash_table.504" }
%"class.std::__1::__hash_table.504" = type <{ %"class.std::__1::unique_ptr.505", %"class.std::__1::__compressed_pair.515", %"class.std::__1::__compressed_pair.520", %"class.std::__1::__compressed_pair.523", [4 x i8] }>
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507", %"struct.std::__1::__compressed_pair_elem.509" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"struct.std::__1::__hash_node_base.508"** }
%"struct.std::__1::__hash_node_base.508" = type { %"struct.std::__1::__hash_node_base.508"* }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"class.std::__1::__bucket_list_deallocator.510" }
%"class.std::__1::__bucket_list_deallocator.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"struct.std::__1::__hash_node_base.508" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.529" = type { %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.535" = type { %"class.std::__1::__compressed_pair.536" }
%"class.std::__1::__compressed_pair.536" = type { %"struct.std::__1::__compressed_pair_elem.537" }
%"struct.std::__1::__compressed_pair_elem.537" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.541", %"class.std::__1::vector.541" }
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set.330" = type { %"class.std::__1::__hash_table.331" }
%"class.std::__1::__hash_table.331" = type <{ %"class.std::__1::unique_ptr.332", %"class.std::__1::__compressed_pair.342", %"class.std::__1::__compressed_pair.347", %"class.std::__1::__compressed_pair.351", [4 x i8] }>
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334", %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"struct.std::__1::__hash_node_base.335"** }
%"struct.std::__1::__hash_node_base.335" = type { %"struct.std::__1::__hash_node_base.335"* }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.std::__1::__bucket_list_deallocator.337" }
%"class.std::__1::__bucket_list_deallocator.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.343" }
%"struct.std::__1::__compressed_pair_elem.343" = type { %"struct.std::__1::__hash_node_base.335" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.580" = type { %"class.std::__1::__hash_table.581" }
%"class.std::__1::__hash_table.581" = type <{ %"class.std::__1::unique_ptr.582", %"class.std::__1::__compressed_pair.592", %"class.std::__1::__compressed_pair.597", %"class.std::__1::__compressed_pair.600", [4 x i8] }>
%"class.std::__1::unique_ptr.582" = type { %"class.std::__1::__compressed_pair.583" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.584", %"struct.std::__1::__compressed_pair_elem.586" }
%"struct.std::__1::__compressed_pair_elem.584" = type { %"struct.std::__1::__hash_node_base.585"** }
%"struct.std::__1::__hash_node_base.585" = type { %"struct.std::__1::__hash_node_base.585"* }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"class.std::__1::__bucket_list_deallocator.587" }
%"class.std::__1::__bucket_list_deallocator.587" = type { %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.593" }
%"struct.std::__1::__compressed_pair_elem.593" = type { %"struct.std::__1::__hash_node_base.585" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.554" = type { %"class.std::__1::__hash_table.555" }
%"class.std::__1::__hash_table.555" = type <{ %"class.std::__1::unique_ptr.556", %"class.std::__1::__compressed_pair.566", %"class.std::__1::__compressed_pair.571", %"class.std::__1::__compressed_pair.574", [4 x i8] }>
%"class.std::__1::unique_ptr.556" = type { %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558", %"struct.std::__1::__compressed_pair_elem.560" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"struct.std::__1::__hash_node_base.559"** }
%"struct.std::__1::__hash_node_base.559" = type { %"struct.std::__1::__hash_node_base.559"* }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"class.std::__1::__bucket_list_deallocator.561" }
%"class.std::__1::__bucket_list_deallocator.561" = type { %"class.std::__1::__compressed_pair.562" }
%"class.std::__1::__compressed_pair.562" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.566" = type { %"struct.std::__1::__compressed_pair_elem.567" }
%"struct.std::__1::__compressed_pair_elem.567" = type { %"struct.std::__1::__hash_node_base.559" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.604" = type { %"class.std::__1::__hash_table.605" }
%"class.std::__1::__hash_table.605" = type <{ %"class.std::__1::unique_ptr.606", %"class.std::__1::__compressed_pair.616", %"class.std::__1::__compressed_pair.621", %"class.std::__1::__compressed_pair.626", [4 x i8] }>
%"class.std::__1::unique_ptr.606" = type { %"class.std::__1::__compressed_pair.607" }
%"class.std::__1::__compressed_pair.607" = type { %"struct.std::__1::__compressed_pair_elem.608", %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"struct.std::__1::__hash_node_base.609"** }
%"struct.std::__1::__hash_node_base.609" = type { %"struct.std::__1::__hash_node_base.609"* }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.std::__1::__bucket_list_deallocator.611" }
%"class.std::__1::__bucket_list_deallocator.611" = type { %"class.std::__1::__compressed_pair.612" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.617" }
%"struct.std::__1::__compressed_pair_elem.617" = type { %"struct.std::__1::__hash_node_base.609" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.632" = type { %"class.std::__1::__vector_base.633" }
%"class.std::__1::__vector_base.633" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.634" }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.639" = type { %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"struct.std::__1::atomic.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.19", i64, %"struct.std::__1::atomic.19" }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.141" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.std::__1::vector.541" = type { %"class.std::__1::__vector_base.542" }
%"class.std::__1::__vector_base.542" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.v8::internal::Object"* }
%"struct.std::__1::atomic.1194" = type { %"struct.std::__1::__atomic_base.1195" }
%"struct.std::__1::__atomic_base.1195" = type { %"struct.std::__1::__atomic_base.1196" }
%"struct.std::__1::__atomic_base.1196" = type { %"struct.std::__1::__cxx_atomic_impl.1197" }
%"struct.std::__1::__cxx_atomic_impl.1197" = type { %"struct.std::__1::__cxx_atomic_base_impl.1198" }
%"struct.std::__1::__cxx_atomic_base_impl.1198" = type { i32 }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef" = type { %"class.v8::internal::FieldType" }
%"class.v8::internal::FieldType" = type { %"class.v8::internal::Object" }
%"class.v8::internal::MaybeObjectHandle" = type { i32, %"class.v8::internal::MaybeHandle" }
%"class.v8::internal::MaybeHandle" = type { i64* }
%"class.v8::internal::Descriptor" = type <{ %"class.v8::internal::Handle.1141", %"class.v8::internal::MaybeObjectHandle", %"class.v8::internal::PropertyDetails", [4 x i8] }>
%"class.v8::internal::Handle.1141" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::PropertyDetails" = type { i32 }
%"class.v8::internal::TransitionsAccessor" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::internal::Handle.1140", %"class.v8::internal::Map", %"class.v8::internal::MaybeObject", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.1140" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::MaybeObject" = type { %"class.v8::internal::TaggedImpl.1138" }
%"class.v8::internal::TaggedImpl.1138" = type { i64 }
%"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef" = type { %"class.v8::internal::DescriptorArray" }
%"class.v8::internal::DescriptorArray" = type { %"class.v8::internal::TorqueGeneratedDescriptorArray" }
%"class.v8::internal::TorqueGeneratedDescriptorArray" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Handle<v8::internal::Object>::ObjectRef" = type { %"class.v8::internal::Object" }
%"class.v8::internal::DependentCode" = type { %"class.v8::internal::WeakFixedArray" }
%"class.v8::internal::WeakFixedArray" = type { %"class.v8::internal::TorqueGeneratedWeakFixedArray" }
%"class.v8::internal::TorqueGeneratedWeakFixedArray" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo" = type { i8, i32, %"class.v8::internal::Map", %"class.v8::internal::Symbol" }
%"class.v8::internal::Symbol" = type { %"class.v8::internal::TorqueGeneratedSymbol" }
%"class.v8::internal::TorqueGeneratedSymbol" = type { %"class.v8::internal::Name" }
%"class.v8::internal::MapUpdater" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::Handle.1140", %"class.v8::internal::Handle.1142", %"class.v8::internal::Handle.1140", %"class.v8::internal::Handle.1140", %"class.v8::internal::Handle.1140", i32, i8, i32, %"class.v8::internal::Handle.1143", %"class.v8::internal::Handle.1140", i32, i8, i8, %"class.v8::internal::InternalIndex", i32, i32, i32, i32, %"class.v8::internal::Representation", %"class.v8::internal::Handle.1136", %"class.v8::internal::Handle.1137" }
%"class.v8::internal::Handle.1142" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle.1143" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::InternalIndex" = type { i64 }
%"class.v8::internal::Representation" = type { i8 }
%"class.v8::internal::Handle.1136" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle.1137" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle<v8::internal::Map>::ObjectRef" = type { %"class.v8::internal::Map" }
%"class.v8::internal::Factory" = type { i8 }
%"class.v8::internal::RuntimeCallTimerScope" = type { %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallTimer" }
%"class.v8::internal::RuntimeCallTimer" = type { %"class.v8::internal::RuntimeCallCounter"*, %"class.v8::base::AtomicValue", %"class.v8::base::TimeTicks", %"class.v8::base::TimeDelta" }
%"class.std::__1::vector.1146" = type { %"class.std::__1::__vector_base.1147" }
%"class.std::__1::__vector_base.1147" = type { %"class.v8::internal::Handle.1140"*, %"class.v8::internal::Handle.1140"*, %"class.std::__1::__compressed_pair.1148" }
%"class.std::__1::__compressed_pair.1148" = type { %"struct.std::__1::__compressed_pair_elem.1149" }
%"struct.std::__1::__compressed_pair_elem.1149" = type { %"class.v8::internal::Handle.1140"* }
%"class.v8::internal::PrototypeIterator" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::internal::Object", %"class.v8::internal::Handle.969", i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef" = type { %"class.v8::internal::NormalizedMapCache" }
%"class.v8::internal::NormalizedMapCache" = type { %"class.v8::internal::WeakFixedArray" }
%"class.v8::internal::Handle<v8::internal::AccessorPair>::ObjectRef" = type { %"class.v8::internal::AccessorPair" }
%"class.v8::internal::AccessorPair" = type { %"class.v8::internal::TorqueGeneratedAccessorPair" }
%"class.v8::internal::TorqueGeneratedAccessorPair" = type { %"class.v8::internal::Struct" }
%"class.v8::internal::Struct" = type { %"class.v8::internal::TorqueGeneratedStruct" }
%"class.v8::internal::TorqueGeneratedStruct" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.v8::internal::CombinationAssertScope" = type { i8 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::Map"*)* }

$_ZN2v88internal17PrototypeIterator7AdvanceEv = comdat any

$_ZN2v88internal15DescriptorArray6AppendEPNS0_10DescriptorE = comdat any

$_ZNK2v88internal3Map21TooManyFastPropertiesENS0_11StoreOriginE = comdat any

$_ZN2v88internal12AccessorPair13SetComponentsENS0_6ObjectES2_ = comdat any

$_ZN2v88internal15DescriptorArray3SetENS0_13InternalIndexENS0_4NameENS0_11MaybeObjectENS0_15PropertyDetailsE = comdat any

$_ZN2v88internal12BinarySearchILNS0_10SearchModeE1ENS0_15DescriptorArrayEEEiPT0_NS0_4NameEiPi = comdat any

@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@_ZN2v88internal13FLAG_log_mapsE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal8FLAG_logE = external local_unnamed_addr global i8, align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"Deprecate\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"NormalizeCached\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"Normalize\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"ImmutablePrototype\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"Transition\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"prototype\00", align 1
@.str.7 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"ReplaceDescriptors\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"CopyAsElementsKind\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"MapCreate\00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c"TooManyFastProperties\00", align 1
@_ZN2v88internal27FLAG_feedback_normalizationE = external local_unnamed_addr global i8, align 1
@.str.12 = private unnamed_addr constant [32 x i8] c"TransitionToAccessorFromNonPair\00", align 1
@.str.13 = private unnamed_addr constant [30 x i8] c"TransitionToDifferentAccessor\00", align 1
@.str.14 = private unnamed_addr constant [28 x i8] c"AccessorsOverwritingNonLast\00", align 1
@.str.15 = private unnamed_addr constant [33 x i8] c"AccessorsOverwritingNonAccessors\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"AccessorsWithAttributes\00", align 1
@.str.17 = private unnamed_addr constant [28 x i8] c"AccessorsOverwritingNonPair\00", align 1
@.str.18 = private unnamed_addr constant [30 x i8] c"AccessorsOverwritingAccessors\00", align 1
@.str.19 = private unnamed_addr constant [17 x i8] c"TooManyAccessors\00", align 1
@.str.20 = private unnamed_addr constant [18 x i8] c"CopyAddDescriptor\00", align 1
@.str.21 = private unnamed_addr constant [22 x i8] c"CopyReplaceDescriptor\00", align 1
@.str.22 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.23 = private unnamed_addr constant [43 x i8] c"GetConstructor() == other.GetConstructor()\00", align 1
@.str.24 = private unnamed_addr constant [41 x i8] c"instance_type() == other.instance_type()\00", align 1
@.str.25 = private unnamed_addr constant [22 x i8] c"TransitionToPrototype\00", align 1
@.str.26 = private unnamed_addr constant [73 x i8] c"static_cast<unsigned>(unused_in_property_array) < JSObject::kFieldsAdded\00", align 1
@.str.27 = private unnamed_addr constant [36 x i8] c"static_cast<unsigned>(value) <= 255\00", align 1
@_ZN2v88internal17FLAG_track_fieldsE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal24FLAG_track_double_fieldsE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal26FLAG_track_computed_fieldsE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal29FLAG_track_heap_object_fieldsE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E = external local_unnamed_addr global %"class.v8::internal::SoleReadOnlyHeap"*, align 8
@.str.29 = private unnamed_addr constant [68 x i8] c"map.NumberOfOwnDescriptors() == source_map.NumberOfOwnDescriptors()\00", align 1
@.str.30 = private unnamed_addr constant [53 x i8] c"static_cast<int>(elements_kind) < kElementsKindCount\00", align 1
@.str.31 = private unnamed_addr constant [11 x i8] c"0 == value\00", align 1
@.str.32 = private unnamed_addr constant [11 x i8] c"0 <= value\00", align 1
@.str.33 = private unnamed_addr constant [15 x i8] c"0 <= max_slack\00", align 1
@.str.34 = private unnamed_addr constant [23 x i8] c"(location_) != nullptr\00", align 1
@.str.35 = private unnamed_addr constant [39 x i8] c"!constructor_or_back_pointer().IsMap()\00", align 1
@.str.37 = private unnamed_addr constant [35 x i8] c"static_cast<unsigned>(value) < 256\00", align 1
@.str.38 = private unnamed_addr constant [16 x i8] c"IsJSObjectMap()\00", align 1
@.str.39 = private unnamed_addr constant [32 x i8] c"static_cast<unsigned>(id) < 256\00", align 1
@_ZN2v88internal12TracingFlags13runtime_statsE = external local_unnamed_addr global %"struct.std::__1::atomic.1194", align 4
@.str.40 = private unnamed_addr constant [80 x i8] c"static_cast<unsigned>(number) <= static_cast<unsigned>(kMaxNumberOfDescriptors)\00", align 1
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal3Map21ComputeMinObjectSlackEPNS5_7IsolateEE3$_0FvS6_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal3Map29CompleteInobjectSlackTrackingEPNS5_7IsolateEE3$_1FvS6_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal3Map29CompleteInobjectSlackTrackingEPNS5_7IsolateEE3$_2FvS6_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal3Map24GetPrototypeChainRootMapEPNS0_7IsolateE(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 7
  %6 = inttoptr i64 %5 to i16*
  %7 = load atomic i16, i16* %6 monotonic, align 2
  %8 = icmp ugt i16 %7, 185
  br i1 %8, label %50, label %9

9:                                                ; preds = %2
  %10 = add i64 %4, 4
  %11 = inttoptr i64 %10 to i8*
  %12 = load atomic i8, i8* %11 monotonic, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %41, label %14

14:                                               ; preds = %9
  %15 = zext i8 %12 to i64
  %16 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = and i64 %17, -4294967296
  %19 = add i64 %17, -1
  %20 = inttoptr i64 %19 to i32*
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = zext i32 %21 to i64
  %23 = or i64 %18, %22
  %24 = add i64 %23, 19
  %25 = inttoptr i64 %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %18, %27
  %29 = shl nuw nsw i64 %15, 2
  %30 = add nuw nsw i64 %29, 7
  %31 = add i64 %30, %28
  %32 = inttoptr i64 %31 to i32*
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %18, %34
  %36 = add i64 %35, 27
  %37 = inttoptr i64 %36 to i32*
  %38 = load atomic i32, i32* %37 acquire, align 4
  %39 = zext i32 %38 to i64
  %40 = or i64 %18, %39
  br label %50

41:                                               ; preds = %9
  %42 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 6
  %43 = load i64, i64* %42, align 8
  %44 = and i64 %43, -4294967296
  %45 = add i64 %43, -1
  %46 = inttoptr i64 %45 to i32*
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = zext i32 %47 to i64
  %49 = or i64 %44, %48
  br label %50

50:                                               ; preds = %2, %14, %41
  %51 = phi i64 [ %40, %14 ], [ %49, %41 ], [ %4, %2 ]
  ret i64 %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden { i8, i64 } @_ZN2v88internal3Map22GetConstructorFunctionES1_NS0_7ContextE(i64, i64) local_unnamed_addr #0 align 2 {
  %3 = add i64 %0, 7
  %4 = inttoptr i64 %3 to i16*
  %5 = load atomic i16, i16* %4 monotonic, align 2
  %6 = icmp ult i16 %5, 68
  br i1 %6, label %7, label %22

7:                                                ; preds = %2
  %8 = add i64 %0, 4
  %9 = inttoptr i64 %8 to i8*
  %10 = load atomic i8, i8* %9 monotonic, align 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %22, label %12

12:                                               ; preds = %7
  %13 = zext i8 %10 to i64
  %14 = and i64 %1, -4294967296
  %15 = shl nuw nsw i64 %13, 2
  %16 = add i64 %1, 7
  %17 = add i64 %16, %15
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = zext i32 %19 to i64
  %21 = or i64 %14, %20
  br label %22

22:                                               ; preds = %2, %7, %12
  %23 = phi i64 [ %21, %12 ], [ 0, %7 ], [ 0, %2 ]
  %24 = phi i8 [ 1, %12 ], [ 0, %7 ], [ 0, %2 ]
  %25 = insertvalue { i8, i64 } undef, i8 %24, 0
  %26 = insertvalue { i8, i64 } %25, i64 %23, 1
  ret { i8, i64 } %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal3Map18GetInstanceTypeMapENS0_13ReadOnlyRootsENS0_12InstanceTypeE(i64*, i16 zeroext) local_unnamed_addr #0 align 2 {
  switch i16 %1, label %57 [
    i16 76, label %58
    i16 77, label %3
    i16 78, label %4
    i16 79, label %5
    i16 80, label %6
    i16 83, label %7
    i16 84, label %8
    i16 85, label %9
    i16 86, label %10
    i16 87, label %11
    i16 88, label %12
    i16 89, label %13
    i16 91, label %14
    i16 92, label %15
    i16 93, label %16
    i16 94, label %17
    i16 95, label %18
    i16 96, label %19
    i16 97, label %20
    i16 99, label %21
    i16 100, label %22
    i16 101, label %23
    i16 103, label %24
    i16 104, label %25
    i16 105, label %26
    i16 106, label %27
    i16 107, label %28
    i16 108, label %29
    i16 109, label %30
    i16 110, label %31
    i16 111, label %32
    i16 112, label %33
    i16 113, label %34
    i16 114, label %35
    i16 115, label %36
    i16 116, label %37
    i16 117, label %38
    i16 118, label %39
    i16 136, label %40
    i16 153, label %41
    i16 154, label %42
    i16 135, label %43
    i16 171, label %44
    i16 158, label %45
    i16 157, label %46
    i16 174, label %47
    i16 170, label %48
    i16 181, label %49
    i16 180, label %50
    i16 147, label %51
    i16 148, label %52
    i16 68, label %53
    i16 69, label %54
    i16 149, label %55
    i16 182, label %56
  ]

3:                                                ; preds = %2
  br label %58

4:                                                ; preds = %2
  br label %58

5:                                                ; preds = %2
  br label %58

6:                                                ; preds = %2
  br label %58

7:                                                ; preds = %2
  br label %58

8:                                                ; preds = %2
  br label %58

9:                                                ; preds = %2
  br label %58

10:                                               ; preds = %2
  br label %58

11:                                               ; preds = %2
  br label %58

12:                                               ; preds = %2
  br label %58

13:                                               ; preds = %2
  br label %58

14:                                               ; preds = %2
  br label %58

15:                                               ; preds = %2
  br label %58

16:                                               ; preds = %2
  br label %58

17:                                               ; preds = %2
  br label %58

18:                                               ; preds = %2
  br label %58

19:                                               ; preds = %2
  br label %58

20:                                               ; preds = %2
  br label %58

21:                                               ; preds = %2
  br label %58

22:                                               ; preds = %2
  br label %58

23:                                               ; preds = %2
  br label %58

24:                                               ; preds = %2
  br label %58

25:                                               ; preds = %2
  br label %58

26:                                               ; preds = %2
  br label %58

27:                                               ; preds = %2
  br label %58

28:                                               ; preds = %2
  br label %58

29:                                               ; preds = %2
  br label %58

30:                                               ; preds = %2
  br label %58

31:                                               ; preds = %2
  br label %58

32:                                               ; preds = %2
  br label %58

33:                                               ; preds = %2
  br label %58

34:                                               ; preds = %2
  br label %58

35:                                               ; preds = %2
  br label %58

36:                                               ; preds = %2
  br label %58

37:                                               ; preds = %2
  br label %58

38:                                               ; preds = %2
  br label %58

39:                                               ; preds = %2
  br label %58

40:                                               ; preds = %2
  br label %58

41:                                               ; preds = %2
  br label %58

42:                                               ; preds = %2
  br label %58

43:                                               ; preds = %2
  br label %58

44:                                               ; preds = %2
  br label %58

45:                                               ; preds = %2
  br label %58

46:                                               ; preds = %2
  br label %58

47:                                               ; preds = %2
  br label %58

48:                                               ; preds = %2
  br label %58

49:                                               ; preds = %2
  br label %58

50:                                               ; preds = %2
  br label %58

51:                                               ; preds = %2
  br label %58

52:                                               ; preds = %2
  br label %58

53:                                               ; preds = %2
  br label %58

54:                                               ; preds = %2
  br label %58

55:                                               ; preds = %2
  br label %58

56:                                               ; preds = %2
  br label %58

57:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

58:                                               ; preds = %2, %56, %55, %54, %53, %52, %51, %50, %49, %48, %47, %46, %45, %44, %43, %42, %41, %40, %39, %38, %37, %36, %35, %34, %33, %32, %31, %30, %29, %28, %27, %26, %25, %24, %23, %22, %21, %20, %19, %18, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4, %3
  %59 = phi i64 [ 577, %56 ], [ 576, %55 ], [ 573, %54 ], [ 572, %53 ], [ 571, %52 ], [ 570, %51 ], [ 569, %50 ], [ 568, %49 ], [ 567, %48 ], [ 566, %47 ], [ 565, %46 ], [ 564, %45 ], [ 575, %44 ], [ 574, %43 ], [ 563, %42 ], [ 562, %41 ], [ 561, %40 ], [ 560, %39 ], [ 559, %38 ], [ 558, %37 ], [ 557, %36 ], [ 556, %35 ], [ 555, %34 ], [ 554, %33 ], [ 553, %32 ], [ 552, %31 ], [ 551, %30 ], [ 550, %29 ], [ 549, %28 ], [ 548, %27 ], [ 547, %26 ], [ 546, %25 ], [ 545, %24 ], [ 544, %23 ], [ 543, %22 ], [ 542, %21 ], [ 541, %20 ], [ 540, %19 ], [ 539, %18 ], [ 538, %17 ], [ 537, %16 ], [ 536, %15 ], [ 535, %14 ], [ 534, %13 ], [ 533, %12 ], [ 532, %11 ], [ 531, %10 ], [ 530, %9 ], [ 529, %8 ], [ 528, %7 ], [ 527, %6 ], [ 526, %5 ], [ 525, %4 ], [ 524, %3 ], [ 523, %2 ]
  %60 = getelementptr inbounds i64, i64* %0, i64 %59
  %61 = load i64, i64* %60, align 8
  ret i64 %61
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal3Map12GetVisitorIdES1_(i64) local_unnamed_addr #0 align 2 {
  %2 = add i64 %0, 7
  %3 = inttoptr i64 %2 to i16*
  %4 = load atomic i16, i16* %3 monotonic, align 2
  %5 = zext i16 %4 to i32
  %6 = icmp ult i16 %4, 64
  br i1 %6, label %7, label %20

7:                                                ; preds = %1
  %8 = and i32 %5, 7
  switch i32 %8, label %19 [
    i32 0, label %9
    i32 1, label %13
    i32 3, label %129
    i32 2, label %17
    i32 5, label %18
  ]

9:                                                ; preds = %7
  %10 = and i32 %5, 8
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, i32 69, i32 68
  br label %129

13:                                               ; preds = %7
  %14 = and i32 %5, 65511
  %15 = icmp eq i32 %14, 33
  %16 = select i1 %15, i32 32, i32 67
  br label %129

17:                                               ; preds = %7
  br label %129

18:                                               ; preds = %7
  br label %129

19:                                               ; preds = %7
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

20:                                               ; preds = %1
  switch i16 %4, label %128 [
    i16 132, label %129
    i16 133, label %21
    i16 169, label %22
    i16 165, label %23
    i16 130, label %24
    i16 129, label %24
    i16 120, label %24
    i16 125, label %24
    i16 126, label %24
    i16 127, label %24
    i16 123, label %24
    i16 122, label %24
    i16 124, label %24
    i16 128, label %24
    i16 131, label %24
    i16 137, label %25
    i16 138, label %25
    i16 139, label %25
    i16 140, label %25
    i16 141, label %25
    i16 142, label %25
    i16 143, label %25
    i16 145, label %25
    i16 146, label %25
    i16 144, label %26
    i16 121, label %27
    i16 134, label %28
    i16 176, label %29
    i16 102, label %30
    i16 166, label %31
    i16 172, label %32
    i16 162, label %33
    i16 161, label %34
    i16 177, label %35
    i16 160, label %36
    i16 1083, label %37
    i16 1084, label %37
    i16 98, label %38
    i16 188, label %39
    i16 64, label %40
    i16 1086, label %41
    i16 1079, label %42
    i16 1059, label %43
    i16 1072, label %43
    i16 1073, label %43
    i16 1071, label %43
    i16 1070, label %43
    i16 1066, label %43
    i16 1067, label %43
    i16 1064, label %43
    i16 1068, label %43
    i16 1065, label %43
    i16 1062, label %43
    i16 1063, label %43
    i16 1069, label %43
    i16 1061, label %43
    i16 1060, label %43
    i16 1080, label %44
    i16 150, label %45
    i16 151, label %46
    i16 152, label %47
    i16 183, label %48
    i16 163, label %49
    i16 175, label %50
    i16 164, label %51
    i16 1055, label %52
    i16 1042, label %52
    i16 1087, label %52
    i16 1085, label %52
    i16 1088, label %52
    i16 1053, label %52
    i16 1054, label %52
    i16 1090, label %52
    i16 1091, label %52
    i16 1094, label %52
    i16 1095, label %52
    i16 1052, label %52
    i16 1043, label %52
    i16 1044, label %52
    i16 1074, label %52
    i16 1075, label %52
    i16 1081, label %52
    i16 1076, label %52
    i16 1098, label %52
    i16 191, label %52
    i16 1045, label %52
    i16 1057, label %52
    i16 1041, label %52
    i16 1046, label %52
    i16 1101, label %52
    i16 1047, label %52
    i16 1103, label %52
    i16 1102, label %52
    i16 1048, label %52
    i16 1077, label %52
    i16 1049, label %52
    i16 1082, label %52
    i16 1078, label %52
    i16 1050, label %52
    i16 1108, label %52
    i16 1051, label %52
    i16 1109, label %52
    i16 1089, label %52
    i16 1092, label %52
    i16 1093, label %52
    i16 1096, label %52
    i16 1097, label %52
    i16 1099, label %52
    i16 1100, label %52
    i16 1104, label %52
    i16 1105, label %52
    i16 1106, label %52
    i16 1107, label %52
    i16 1111, label %52
    i16 1112, label %52
    i16 1114, label %52
    i16 1115, label %52
    i16 1116, label %52
    i16 1117, label %52
    i16 1058, label %52
    i16 1056, label %82
    i16 190, label %82
    i16 189, label %82
    i16 1040, label %82
    i16 1110, label %83
    i16 185, label %84
    i16 168, label %85
    i16 70, label %85
    i16 66, label %85
    i16 65, label %86
    i16 90, label %87
    i16 76, label %88
    i16 77, label %88
    i16 78, label %88
    i16 79, label %88
    i16 80, label %88
    i16 83, label %88
    i16 84, label %88
    i16 85, label %88
    i16 86, label %88
    i16 87, label %88
    i16 88, label %88
    i16 89, label %88
    i16 91, label %88
    i16 92, label %88
    i16 93, label %88
    i16 94, label %88
    i16 95, label %88
    i16 96, label %88
    i16 97, label %88
    i16 99, label %88
    i16 100, label %88
    i16 101, label %88
    i16 103, label %88
    i16 104, label %88
    i16 105, label %88
    i16 106, label %88
    i16 107, label %88
    i16 108, label %88
    i16 109, label %88
    i16 110, label %88
    i16 111, label %88
    i16 112, label %88
    i16 113, label %88
    i16 114, label %88
    i16 115, label %88
    i16 116, label %88
    i16 117, label %88
    i16 118, label %88
    i16 81, label %93
    i16 82, label %93
    i16 155, label %94
    i16 156, label %95
    i16 1113, label %96
    i16 186, label %97
    i16 187, label %98
    i16 75, label %99
    i16 74, label %100
    i16 73, label %101
    i16 72, label %102
    i16 67, label %103
    i16 119, label %104
    i16 159, label %105
    i16 136, label %106
    i16 178, label %107
    i16 153, label %108
    i16 154, label %109
    i16 167, label %110
    i16 184, label %111
    i16 173, label %112
    i16 179, label %113
    i16 158, label %114
    i16 157, label %115
    i16 174, label %116
    i16 170, label %117
    i16 181, label %118
    i16 180, label %119
    i16 147, label %120
    i16 148, label %121
    i16 68, label %122
    i16 69, label %123
    i16 135, label %124
    i16 171, label %125
    i16 149, label %126
    i16 182, label %127
  ]

21:                                               ; preds = %20
  br label %129

22:                                               ; preds = %20
  br label %129

23:                                               ; preds = %20
  br label %129

24:                                               ; preds = %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20
  br label %129

25:                                               ; preds = %20, %20, %20, %20, %20, %20, %20, %20, %20
  br label %129

26:                                               ; preds = %20
  br label %129

27:                                               ; preds = %20
  br label %129

28:                                               ; preds = %20
  br label %129

29:                                               ; preds = %20
  br label %129

30:                                               ; preds = %20
  br label %129

31:                                               ; preds = %20
  br label %129

32:                                               ; preds = %20
  br label %129

33:                                               ; preds = %20
  br label %129

34:                                               ; preds = %20
  br label %129

35:                                               ; preds = %20
  br label %129

36:                                               ; preds = %20
  br label %129

37:                                               ; preds = %20, %20
  br label %129

38:                                               ; preds = %20
  br label %129

39:                                               ; preds = %20
  br label %129

40:                                               ; preds = %20
  br label %129

41:                                               ; preds = %20
  br label %129

42:                                               ; preds = %20
  br label %129

43:                                               ; preds = %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20
  br label %129

44:                                               ; preds = %20
  br label %129

45:                                               ; preds = %20
  br label %129

46:                                               ; preds = %20
  br label %129

47:                                               ; preds = %20
  br label %129

48:                                               ; preds = %20
  br label %129

49:                                               ; preds = %20
  br label %129

50:                                               ; preds = %20
  br label %129

51:                                               ; preds = %20
  br label %129

52:                                               ; preds = %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20
  %53 = add i64 %0, 3
  %54 = inttoptr i64 %53 to i8*
  %55 = load atomic i8, i8* %54 monotonic, align 1
  %56 = zext i8 %55 to i32
  %57 = shl nuw nsw i32 %56, 2
  %58 = icmp eq i8 %55, 0
  br i1 %58, label %129, label %59

59:                                               ; preds = %52
  %60 = load atomic i16, i16* %3 monotonic, align 2
  %61 = icmp eq i16 %60, 1057
  br i1 %61, label %68, label %62

62:                                               ; preds = %59
  %63 = add i64 %0, 9
  %64 = inttoptr i64 %63 to i8*
  %65 = load atomic i8, i8* %64 monotonic, align 1
  %66 = icmp slt i8 %65, 0
  %67 = tail call i32 @_ZN2v88internal8JSObject13GetHeaderSizeENS0_12InstanceTypeEb(i16 zeroext %60, i1 zeroext %66) #6
  br label %68

68:                                               ; preds = %59, %62
  %69 = phi i32 [ %67, %62 ], [ 12, %59 ]
  %70 = sub nsw i32 %57, %69
  %71 = ashr i32 %70, 2
  %72 = load atomic i8, i8* %54 monotonic, align 1
  %73 = zext i8 %72 to i32
  %74 = add i64 %0, 4
  %75 = inttoptr i64 %74 to i8*
  %76 = load atomic i8, i8* %75 monotonic, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %71, %73
  %79 = add nsw i32 %78, %77
  %80 = icmp sgt i32 %79, 1
  %81 = select i1 %80, i32 21, i32 22
  ret i32 %81

82:                                               ; preds = %20, %20, %20, %20
  br label %129

83:                                               ; preds = %20
  br label %129

84:                                               ; preds = %20
  br label %129

85:                                               ; preds = %20, %20, %20
  br label %129

86:                                               ; preds = %20
  br label %129

87:                                               ; preds = %20
  br label %129

88:                                               ; preds = %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20
  %89 = icmp eq i16 %4, 118
  %90 = select i1 %89, i32 46, i32 37
  %91 = icmp eq i16 %4, 110
  %92 = select i1 %91, i32 31, i32 %90
  br label %129

93:                                               ; preds = %20, %20
  br label %129

94:                                               ; preds = %20
  br label %129

95:                                               ; preds = %20
  br label %129

96:                                               ; preds = %20
  br label %129

97:                                               ; preds = %20
  br label %129

98:                                               ; preds = %20
  br label %129

99:                                               ; preds = %20
  br label %129

100:                                              ; preds = %20
  br label %129

101:                                              ; preds = %20
  br label %129

102:                                              ; preds = %20
  br label %129

103:                                              ; preds = %20
  br label %129

104:                                              ; preds = %20
  br label %129

105:                                              ; preds = %20
  br label %129

106:                                              ; preds = %20
  br label %129

107:                                              ; preds = %20
  br label %129

108:                                              ; preds = %20
  br label %129

109:                                              ; preds = %20
  br label %129

110:                                              ; preds = %20
  br label %129

111:                                              ; preds = %20
  br label %129

112:                                              ; preds = %20
  br label %129

113:                                              ; preds = %20
  br label %129

114:                                              ; preds = %20
  br label %129

115:                                              ; preds = %20
  br label %129

116:                                              ; preds = %20
  br label %129

117:                                              ; preds = %20
  br label %129

118:                                              ; preds = %20
  br label %129

119:                                              ; preds = %20
  br label %129

120:                                              ; preds = %20
  br label %129

121:                                              ; preds = %20
  br label %129

122:                                              ; preds = %20
  br label %129

123:                                              ; preds = %20
  br label %129

124:                                              ; preds = %20
  br label %129

125:                                              ; preds = %20
  br label %129

126:                                              ; preds = %20
  br label %129

127:                                              ; preds = %20
  br label %129

128:                                              ; preds = %20
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

129:                                              ; preds = %52, %88, %20, %7, %13, %9, %127, %126, %125, %124, %123, %122, %121, %120, %119, %118, %117, %116, %115, %114, %113, %112, %111, %110, %109, %108, %107, %106, %105, %104, %103, %102, %101, %100, %99, %98, %97, %96, %95, %94, %93, %87, %86, %85, %84, %83, %82, %51, %50, %49, %48, %47, %46, %45, %44, %43, %42, %41, %40, %39, %38, %37, %36, %35, %34, %33, %32, %31, %30, %29, %28, %27, %26, %25, %24, %23, %22, %21, %18, %17
  %130 = phi i32 [ 71, %18 ], [ 3, %17 ], [ 82, %127 ], [ 81, %126 ], [ 80, %125 ], [ 79, %124 ], [ 78, %123 ], [ 77, %122 ], [ 76, %121 ], [ 75, %120 ], [ 74, %119 ], [ 73, %118 ], [ 72, %117 ], [ 66, %116 ], [ 65, %115 ], [ 64, %114 ], [ 63, %113 ], [ 62, %112 ], [ 61, %111 ], [ 60, %110 ], [ 59, %109 ], [ 58, %108 ], [ 57, %107 ], [ 56, %106 ], [ 55, %105 ], [ 54, %104 ], [ 53, %103 ], [ 43, %102 ], [ 44, %101 ], [ 48, %100 ], [ 50, %99 ], [ 49, %98 ], [ 42, %97 ], [ 47, %96 ], [ 40, %95 ], [ 36, %94 ], [ 12, %93 ], [ 7, %87 ], [ 0, %86 ], [ 3, %85 ], [ 51, %84 ], [ 24, %83 ], [ 17, %82 ], [ 2, %51 ], [ 28, %50 ], [ 11, %49 ], [ 38, %48 ], [ 35, %47 ], [ 34, %46 ], [ 33, %45 ], [ 23, %44 ], [ 20, %43 ], [ 19, %42 ], [ 18, %41 ], [ 39, %40 ], [ 37, %39 ], [ 37, %38 ], [ 25, %37 ], [ 41, %36 ], [ 30, %35 ], [ 9, %34 ], [ 10, %33 ], [ 26, %32 ], [ 4, %31 ], [ 15, %30 ], [ 29, %29 ], [ 5, %28 ], [ 14, %27 ], [ 27, %26 ], [ 52, %25 ], [ 54, %24 ], [ 13, %23 ], [ 16, %22 ], [ 8, %21 ], [ %12, %9 ], [ %16, %13 ], [ 70, %7 ], [ 1, %20 ], [ %92, %88 ], [ 22, %52 ]
  ret i32 %130
}

; Function Attrs: nounwind ssp uwtable
define hidden { i32, i64* } @_ZN2v88internal3Map13WrapFieldTypeEPNS0_7IsolateENS0_6HandleINS0_9FieldTypeEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", align 8
  %4 = alloca %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", align 8
  %5 = bitcast %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = load i64, i64* %1, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %3, i64 0, i32 0
  %9 = call zeroext i1 @_ZNK2v88internal9FieldType7IsClassEv(%"class.v8::internal::FieldType"* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  br i1 %9, label %10, label %36

10:                                               ; preds = %2
  %11 = bitcast %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #6
  %12 = load i64, i64* %1, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %4, i64 0, i32 0
  %15 = call i64 @_ZNK2v88internal9FieldType7AsClassEv(%"class.v8::internal::FieldType"* nonnull %14) #6
  %16 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %17 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %16, align 8
  %18 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %10
  %20 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %17, i64 %15) #6
  br label %34

21:                                               ; preds = %10
  %22 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %23 = load i64*, i64** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %25 = load i64*, i64** %24, align 8
  %26 = icmp eq i64* %23, %25
  br i1 %26, label %27, label %29

27:                                               ; preds = %21
  %28 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %29

29:                                               ; preds = %27, %21
  %30 = phi i64* [ %28, %27 ], [ %23, %21 ]
  %31 = ptrtoint i64* %30 to i64
  %32 = add i64 %31, 8
  %33 = inttoptr i64 %32 to i64*
  store i64* %33, i64** %22, align 8
  store i64 %15, i64* %30, align 8
  br label %34

34:                                               ; preds = %19, %29
  %35 = phi i64* [ %20, %19 ], [ %30, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  br label %36

36:                                               ; preds = %2, %34
  %37 = phi i32 [ 0, %34 ], [ 1, %2 ]
  %38 = phi i64* [ %35, %34 ], [ %1, %2 ]
  %39 = insertvalue { i32, i64* } undef, i32 %37, 0
  %40 = insertvalue { i32, i64* } %39, i64* %38, 1
  ret { i32, i64* } %40
}

declare zeroext i1 @_ZNK2v88internal9FieldType7IsClassEv(%"class.v8::internal::FieldType"*) local_unnamed_addr #3

declare i64 @_ZNK2v88internal9FieldType7AsClassEv(%"class.v8::internal::FieldType"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal3Map15UnwrapFieldTypeENS0_11MaybeObjectE(i64) local_unnamed_addr #0 align 2 {
  %2 = trunc i64 %0 to i32
  %3 = icmp eq i32 %2, 3
  br i1 %3, label %4, label %6

4:                                                ; preds = %1
  %5 = tail call i64 @_ZN2v88internal9FieldType4NoneEv() #6
  br label %14

6:                                                ; preds = %1
  %7 = and i64 %0, 3
  %8 = icmp eq i64 %7, 3
  br i1 %8, label %9, label %12

9:                                                ; preds = %6
  %10 = and i64 %0, -3
  %11 = tail call i64 @_ZN2v88internal9FieldType4castENS0_6ObjectE(i64 %10) #6
  br label %14

12:                                               ; preds = %6
  %13 = tail call i64 @_ZN2v88internal9FieldType4castENS0_6ObjectE(i64 %0) #6
  br label %14

14:                                               ; preds = %9, %12, %4
  %15 = phi i64 [ %5, %4 ], [ %11, %9 ], [ %13, %12 ]
  ret i64 %15
}

declare i64 @_ZN2v88internal9FieldType4NoneEv() local_unnamed_addr #3

declare i64 @_ZN2v88internal9FieldType4castENS0_6ObjectE(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map13CopyWithFieldEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_4NameEEENS4_INS0_9FieldTypeEEENS0_18PropertyAttributesENS0_17PropertyConstnessENS0_14RepresentationENS0_14TransitionFlagE(%"class.v8::internal::Isolate"*, i64*, i64*, i64*, i32, i32, i8, i32) local_unnamed_addr #0 align 2 {
  %9 = alloca %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", align 8
  %10 = alloca %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", align 8
  %11 = alloca %"class.v8::internal::MaybeObjectHandle", align 8
  %12 = alloca %"class.v8::internal::Descriptor", align 8
  %13 = load i64, i64* %1, align 8
  %14 = add i64 %13, 11
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 acquire, align 4
  %17 = and i32 %16, 1044480
  %18 = icmp eq i32 %17, 1044480
  br i1 %18, label %133, label %19

19:                                               ; preds = %8
  %20 = load i64, i64* %1, align 8
  %21 = add i64 %20, 11
  %22 = inttoptr i64 %21 to i32*
  %23 = load atomic i32, i32* %22 acquire, align 4
  %24 = lshr i32 %23, 10
  %25 = and i64 %20, -4294967296
  %26 = add i64 %20, 23
  %27 = inttoptr i64 %26 to i32*
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = zext i32 %28 to i64
  %30 = or i64 %25, %29
  %31 = and i32 %24, 1023
  %32 = zext i32 %31 to i64
  br label %33

33:                                               ; preds = %37, %19
  %34 = phi i64 [ %35, %37 ], [ %32, %19 ]
  %35 = add nsw i64 %34, -1
  %36 = icmp sgt i64 %34, 0
  br i1 %36, label %37, label %51

37:                                               ; preds = %33
  %38 = mul nsw i64 %35, 51539607552
  %39 = add i64 %38, 68719476736
  %40 = ashr exact i64 %39, 32
  %41 = or i64 %40, 3
  %42 = add i64 %41, %30
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %33

47:                                               ; preds = %37
  %48 = lshr i32 %44, 20
  %49 = and i32 %48, 1023
  %50 = add nuw nsw i32 %49, 1
  br label %51

51:                                               ; preds = %33, %47
  %52 = phi i32 [ %50, %47 ], [ 0, %33 ]
  %53 = load i64, i64* %1, align 8
  %54 = add i64 %53, 7
  %55 = inttoptr i64 %54 to i16*
  %56 = load atomic i16, i16* %55 monotonic, align 2
  %57 = icmp eq i16 %56, 1090
  br i1 %57, label %60, label %58

58:                                               ; preds = %51
  %59 = load atomic i16, i16* %55 monotonic, align 2
  switch i16 %59, label %63 [
    i16 1085, label %60
    i16 1041, label %60
    i16 1055, label %60
  ]

60:                                               ; preds = %58, %58, %58, %51
  %61 = phi i32 [ 0, %51 ], [ %5, %58 ], [ %5, %58 ], [ %5, %58 ]
  %62 = tail call i64* @_ZN2v88internal9FieldType3AnyEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %63

63:                                               ; preds = %60, %58
  %64 = phi i8 [ %6, %58 ], [ 4, %60 ]
  %65 = phi i64* [ %3, %58 ], [ %62, %60 ]
  %66 = phi i32 [ %5, %58 ], [ %61, %60 ]
  %67 = bitcast %"class.v8::internal::MaybeObjectHandle"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #6
  %68 = bitcast %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #6
  %69 = load i64, i64* %65, align 8
  %70 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %69, i64* %70, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %9, i64 0, i32 0
  %72 = call zeroext i1 @_ZNK2v88internal9FieldType7IsClassEv(%"class.v8::internal::FieldType"* nonnull %71) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #6
  br i1 %72, label %73, label %99

73:                                               ; preds = %63
  %74 = bitcast %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #6
  %75 = load i64, i64* %65, align 8
  %76 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %10, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef", %"class.v8::internal::Handle<v8::internal::FieldType>::ObjectRef"* %10, i64 0, i32 0
  %78 = call i64 @_ZNK2v88internal9FieldType7AsClassEv(%"class.v8::internal::FieldType"* nonnull %77) #6
  %79 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %80 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %79, align 8
  %81 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %73
  %83 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %80, i64 %78) #6
  br label %97

84:                                               ; preds = %73
  %85 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %86 = load i64*, i64** %85, align 8
  %87 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %88 = load i64*, i64** %87, align 8
  %89 = icmp eq i64* %86, %88
  br i1 %89, label %90, label %92

90:                                               ; preds = %84
  %91 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %92

92:                                               ; preds = %90, %84
  %93 = phi i64* [ %91, %90 ], [ %86, %84 ]
  %94 = ptrtoint i64* %93 to i64
  %95 = add i64 %94, 8
  %96 = inttoptr i64 %95 to i64*
  store i64* %96, i64** %85, align 8
  store i64 %78, i64* %93, align 8
  br label %97

97:                                               ; preds = %92, %82
  %98 = phi i64* [ %83, %82 ], [ %93, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #6
  br label %99

99:                                               ; preds = %63, %97
  %100 = phi i32 [ 0, %97 ], [ 1, %63 ]
  %101 = phi i64* [ %98, %97 ], [ %65, %63 ]
  %102 = getelementptr inbounds %"class.v8::internal::MaybeObjectHandle", %"class.v8::internal::MaybeObjectHandle"* %11, i64 0, i32 0
  store i32 %100, i32* %102, align 8
  %103 = getelementptr inbounds %"class.v8::internal::MaybeObjectHandle", %"class.v8::internal::MaybeObjectHandle"* %11, i64 0, i32 1, i32 0
  store i64* %101, i64** %103, align 8
  %104 = bitcast %"class.v8::internal::Descriptor"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %104) #6
  call void @_ZN2v88internal10Descriptor9DataFieldENS0_6HandleINS0_4NameEEEiNS0_18PropertyAttributesENS0_17PropertyConstnessENS0_14RepresentationERKNS0_17MaybeObjectHandleE(%"class.v8::internal::Descriptor"* nonnull sret %12, i64* %2, i32 %52, i32 %4, i32 %66, i8 %64, %"class.v8::internal::MaybeObjectHandle"* nonnull dereferenceable(16) %11) #6
  %105 = call i64* @_ZN2v88internal3Map17CopyAddDescriptorEPNS0_7IsolateENS0_6HandleIS1_EEPNS0_10DescriptorENS0_14TransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, %"class.v8::internal::Descriptor"* nonnull %12, i32 %7)
  %106 = load i64, i64* %105, align 8
  %107 = add i64 %106, 5
  %108 = inttoptr i64 %107 to i8*
  %109 = load atomic i8, i8* %108 monotonic, align 1
  %110 = zext i8 %109 to i32
  %111 = icmp ugt i8 %109, 2
  br i1 %111, label %112, label %123

112:                                              ; preds = %99
  %113 = add i64 %106, 3
  %114 = inttoptr i64 %113 to i8*
  %115 = load atomic i8, i8* %114 monotonic, align 1
  %116 = icmp eq i8 %109, %115
  br i1 %116, label %131, label %117

117:                                              ; preds = %112
  %118 = add nuw nsw i32 %110, 1
  %119 = icmp ult i32 %118, 256
  br i1 %119, label %121, label %120, !prof !2

120:                                              ; preds = %117
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i64 0, i64 0)) #7
  unreachable

121:                                              ; preds = %117
  %122 = trunc i32 %118 to i8
  br label %131

123:                                              ; preds = %99
  %124 = icmp eq i8 %109, 0
  %125 = select i1 %124, i32 2, i32 -1
  %126 = add nsw i32 %125, %110
  %127 = icmp ult i32 %126, 3
  br i1 %127, label %129, label %128, !prof !2

128:                                              ; preds = %123
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.26, i64 0, i64 0)) #7
  unreachable

129:                                              ; preds = %123
  %130 = trunc i32 %126 to i8
  br label %131

131:                                              ; preds = %112, %121, %129
  %132 = phi i8 [ %122, %121 ], [ %130, %129 ], [ 2, %112 ]
  store atomic volatile i8 %132, i8* %108 monotonic, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %104) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #6
  br label %133

133:                                              ; preds = %8, %131
  %134 = phi i64* [ %105, %131 ], [ null, %8 ]
  ret i64* %134
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal3Map21NextFreePropertyIndexEv(%"class.v8::internal::Map"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 acquire, align 4
  %7 = lshr i32 %6, 10
  %8 = load i64, i64* %2, align 8
  %9 = and i64 %8, -4294967296
  %10 = add i64 %8, 23
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = zext i32 %12 to i64
  %14 = or i64 %9, %13
  %15 = and i32 %7, 1023
  %16 = zext i32 %15 to i64
  br label %17

17:                                               ; preds = %21, %1
  %18 = phi i64 [ %19, %21 ], [ %16, %1 ]
  %19 = add nsw i64 %18, -1
  %20 = icmp sgt i64 %18, 0
  br i1 %20, label %21, label %35

21:                                               ; preds = %17
  %22 = mul nsw i64 %19, 51539607552
  %23 = add i64 %22, 68719476736
  %24 = ashr exact i64 %23, 32
  %25 = or i64 %24, 3
  %26 = add i64 %25, %14
  %27 = inttoptr i64 %26 to i32*
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %17

31:                                               ; preds = %21
  %32 = lshr i32 %28, 20
  %33 = and i32 %32, 1023
  %34 = add nuw nsw i32 %33, 1
  br label %35

35:                                               ; preds = %17, %31
  %36 = phi i32 [ %34, %31 ], [ 0, %17 ]
  ret i32 %36
}

declare i64* @_ZN2v88internal9FieldType3AnyEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

declare void @_ZN2v88internal10Descriptor9DataFieldENS0_6HandleINS0_4NameEEEiNS0_18PropertyAttributesENS0_17PropertyConstnessENS0_14RepresentationERKNS0_17MaybeObjectHandleE(%"class.v8::internal::Descriptor"* sret, i64*, i32, i32, i32, i8, %"class.v8::internal::MaybeObjectHandle"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map17CopyAddDescriptorEPNS0_7IsolateENS0_6HandleIS1_EEPNS0_10DescriptorENS0_14TransitionFlagE(%"class.v8::internal::Isolate"*, i64*, %"class.v8::internal::Descriptor"*, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %6 = alloca %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", align 8
  %7 = load i64, i64* %1, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %7, 23
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = and i64 %9, 4294967295
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #6
  %15 = zext i32 %12 to i64
  %16 = or i64 %9, %15
  %17 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %18 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %17, align 8
  %19 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %4
  %21 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %18, i64 %16) #6
  br label %35

22:                                               ; preds = %4
  %23 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %24 = load i64*, i64** %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %26 = load i64*, i64** %25, align 8
  %27 = icmp eq i64* %24, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %30

30:                                               ; preds = %28, %22
  %31 = phi i64* [ %29, %28 ], [ %24, %22 ]
  %32 = ptrtoint i64* %31 to i64
  %33 = add i64 %32, 8
  %34 = inttoptr i64 %33 to i64*
  store i64* %34, i64** %23, align 8
  store i64 %16, i64* %31, align 8
  br label %35

35:                                               ; preds = %20, %30
  %36 = phi i64* [ %21, %20 ], [ %31, %30 ]
  %37 = icmp eq i32 %3, 0
  %38 = bitcast %"class.v8::internal::TransitionsAccessor"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %38) #6
  br i1 %37, label %39, label %165

39:                                               ; preds = %35
  %40 = load i64, i64* %1, align 8
  %41 = add i64 %40, 11
  %42 = inttoptr i64 %41 to i32*
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 4194304
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %165, label %46

46:                                               ; preds = %39
  %47 = and i64 %40, -4294967296
  %48 = add i64 %40, 19
  %49 = inttoptr i64 %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = or i64 %47, %51
  %53 = and i64 %51, 1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %46
  %56 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %83

57:                                               ; preds = %46
  %58 = add i64 %52, -1
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %62 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %61, null
  br i1 %62, label %69, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %61, i64 0, i32 0, i32 1
  %65 = load i8, i8* %64, align 8, !range !3
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %61, i64 0, i32 1, i64 0
  br label %77

69:                                               ; preds = %63, %57
  %70 = and i64 %40, -262144
  %71 = or i64 %70, 16
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72, align 16
  %74 = add i64 %73, -41416
  %75 = inttoptr i64 %74 to %"class.v8::internal::Isolate"*
  %76 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %75, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %77

77:                                               ; preds = %69, %67
  %78 = phi i64* [ %76, %69 ], [ %68, %67 ]
  %79 = getelementptr inbounds i64, i64* %78, i64 10
  %80 = load i64, i64* %79, align 8
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %60, %81
  br i1 %82, label %104, label %83

83:                                               ; preds = %77, %55
  %84 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %56, %55 ], [ %61, %77 ]
  %85 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %84, null
  br i1 %85, label %92, label %86

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %84, i64 0, i32 0, i32 1
  %88 = load i8, i8* %87, align 8, !range !3
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %84, i64 0, i32 1, i64 0
  br label %100

92:                                               ; preds = %86, %83
  %93 = and i64 %40, -262144
  %94 = or i64 %93, 16
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95, align 16
  %97 = add i64 %96, -41416
  %98 = inttoptr i64 %97 to %"class.v8::internal::Isolate"*
  %99 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %98, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %100

100:                                              ; preds = %92, %90
  %101 = phi i64* [ %99, %92 ], [ %91, %90 ]
  %102 = getelementptr inbounds i64, i64* %101, i64 4
  %103 = load i64, i64* %102, align 8
  br label %104

104:                                              ; preds = %77, %100
  %105 = phi i64 [ %103, %100 ], [ %52, %77 ]
  %106 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 4
  %107 = load i64, i64* %106, align 8
  %108 = trunc i64 %105 to i32
  %109 = trunc i64 %107 to i32
  %110 = icmp eq i32 %108, %109
  br i1 %110, label %165, label %111

111:                                              ; preds = %104
  %112 = ptrtoint i64* %1 to i64
  %113 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %113, align 8
  %114 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 1
  %115 = bitcast %"class.v8::internal::Handle.1140"* %114 to i64*
  store i64 %112, i64* %115, align 8
  %116 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %40, i64* %116, align 8
  %117 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %117, align 8
  %118 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 5
  store i8 0, i8* %118, align 4
  %119 = load i64, i64* %8, align 8
  %120 = add i64 %40, 35
  %121 = inttoptr i64 %120 to i32*
  %122 = load atomic i32, i32* %121 acquire, align 4
  %123 = and i64 %119, 4294967295
  %124 = icmp eq i64 %123, 0
  tail call void @llvm.assume(i1 %124) #6
  %125 = zext i32 %122 to i64
  %126 = or i64 %119, %125
  store i64 %126, i64* %117, align 8
  %127 = and i64 %125, 1
  %128 = icmp eq i64 %127, 0
  %129 = icmp eq i32 %122, 3
  %130 = or i1 %129, %128
  br i1 %130, label %131, label %133

131:                                              ; preds = %111
  %132 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 1, i32* %132, align 8
  br label %161

133:                                              ; preds = %111
  %134 = and i64 %125, 3
  switch i64 %134, label %160 [
    i64 3, label %135
    i64 1, label %137
  ]

135:                                              ; preds = %133
  %136 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 3, i32* %136, align 8
  br label %161

137:                                              ; preds = %133
  %138 = add i64 %126, -1
  %139 = inttoptr i64 %138 to i32*
  %140 = load atomic i32, i32* %139 monotonic, align 4
  %141 = zext i32 %140 to i64
  %142 = or i64 %119, %141
  %143 = add i64 %142, 7
  %144 = inttoptr i64 %143 to i16*
  %145 = load atomic i16, i16* %144 monotonic, align 2
  %146 = icmp eq i16 %145, 160
  br i1 %146, label %147, label %149

147:                                              ; preds = %137
  %148 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 4, i32* %148, align 8
  br label %161

149:                                              ; preds = %137
  %150 = load atomic i32, i32* %139 monotonic, align 4
  %151 = zext i32 %150 to i64
  %152 = or i64 %119, %151
  %153 = add i64 %152, 7
  %154 = inttoptr i64 %153 to i16*
  %155 = load atomic i16, i16* %154 monotonic, align 2
  %156 = icmp eq i16 %155, 110
  %157 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  br i1 %156, label %158, label %159

158:                                              ; preds = %149
  store i32 0, i32* %157, align 8
  br label %161

159:                                              ; preds = %149
  store i32 2, i32* %157, align 8
  br label %161

160:                                              ; preds = %133
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

161:                                              ; preds = %131, %135, %147, %158, %159
  %162 = call zeroext i1 @_ZN2v88internal19TransitionsAccessor22CanHaveMoreTransitionsEv(%"class.v8::internal::TransitionsAccessor"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %38) #6
  br i1 %162, label %163, label %166

163:                                              ; preds = %161
  %164 = call i64* @_ZN2v88internal3Map15ShareDescriptorEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEEPNS0_10DescriptorE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %36, %"class.v8::internal::Descriptor"* %2)
  br label %181

165:                                              ; preds = %35, %39, %104
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %38) #6
  br label %166

166:                                              ; preds = %165, %161
  %167 = load i64, i64* %1, align 8
  %168 = add i64 %167, 11
  %169 = inttoptr i64 %168 to i32*
  %170 = load atomic i32, i32* %169 acquire, align 4
  %171 = lshr i32 %170, 10
  %172 = and i32 %171, 1023
  %173 = call i64* @_ZN2v88internal15DescriptorArray8CopyUpToEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %36, i32 %172, i32 1) #6
  %174 = bitcast %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %174) #6
  %175 = load i64, i64* %173, align 8
  %176 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %175, i64* %176, align 8
  %177 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %6, i64 0, i32 0
  call void @_ZN2v88internal15DescriptorArray6AppendEPNS0_10DescriptorE(%"class.v8::internal::DescriptorArray"* nonnull %177, %"class.v8::internal::Descriptor"* %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %174) #6
  %178 = getelementptr inbounds %"class.v8::internal::Descriptor", %"class.v8::internal::Descriptor"* %2, i64 0, i32 0, i32 0, i32 0
  %179 = load i64*, i64** %178, align 8
  %180 = call i64* @_ZN2v88internal3Map22CopyReplaceDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEENS0_14TransitionFlagENS0_11MaybeHandleINS0_4NameEEEPKcNS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %173, i32 %3, i64* %179, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i64 0, i64 0), i32 0)
  br label %181

181:                                              ; preds = %166, %163
  %182 = phi i64* [ %180, %166 ], [ %164, %163 ]
  ret i64* %182
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map16CopyWithConstantEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_4NameEEENS4_INS0_6ObjectEEENS0_18PropertyAttributesENS0_14TransitionFlagE(%"class.v8::internal::Isolate"*, i64*, i64*, i64*, i32, i32) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", align 8
  %8 = load i64, i64* %1, align 8
  %9 = add i64 %8, 11
  %10 = inttoptr i64 %9 to i32*
  %11 = load atomic i32, i32* %10 acquire, align 4
  %12 = and i32 %11, 1044480
  %13 = icmp eq i32 %12, 1044480
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = load i64, i64* %3, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %17 = load i64, i64* %16, align 8
  %18 = load i8, i8* @_ZN2v88internal17FLAG_track_fieldsE, align 1, !range !3
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %69, label %20

20:                                               ; preds = %14
  %21 = and i64 %15, 1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %69, label %23

23:                                               ; preds = %20
  %24 = load i8, i8* @_ZN2v88internal24FLAG_track_double_fieldsE, align 1, !range !3
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %23
  %27 = add i64 %15, -1
  %28 = inttoptr i64 %27 to i32*
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i64 %17, 4294967295
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #6
  %32 = zext i32 %29 to i64
  %33 = or i64 %17, %32
  %34 = add i64 %33, 7
  %35 = inttoptr i64 %34 to i16*
  %36 = load atomic i16, i16* %35 monotonic, align 2
  %37 = icmp eq i16 %36, 66
  br i1 %37, label %69, label %38

38:                                               ; preds = %26, %23
  %39 = load i8, i8* @_ZN2v88internal26FLAG_track_computed_fieldsE, align 1, !range !3
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %65, label %41

41:                                               ; preds = %38
  %42 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %43 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %42, null
  br i1 %43, label %50, label %44

44:                                               ; preds = %41
  %45 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %42, i64 0, i32 0, i32 1
  %46 = load i8, i8* %45, align 8, !range !3
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %42, i64 0, i32 1, i64 0
  br label %58

50:                                               ; preds = %44, %41
  %51 = and i64 %15, -262144
  %52 = or i64 %51, 16
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53, align 16
  %55 = add i64 %54, -41416
  %56 = inttoptr i64 %55 to %"class.v8::internal::Isolate"*
  %57 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %56, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %58

58:                                               ; preds = %50, %48
  %59 = phi i64* [ %57, %50 ], [ %49, %48 ]
  %60 = getelementptr inbounds i64, i64* %59, i64 3
  %61 = load i64, i64* %60, align 8
  %62 = trunc i64 %15 to i32
  %63 = trunc i64 %61 to i32
  %64 = icmp eq i32 %62, %63
  br i1 %64, label %69, label %65

65:                                               ; preds = %58, %38
  %66 = load i8, i8* @_ZN2v88internal29FLAG_track_heap_object_fieldsE, align 1, !range !3
  %67 = icmp eq i8 %66, 0
  %68 = select i1 %67, i8 4, i8 3
  br label %69

69:                                               ; preds = %14, %20, %26, %58, %65
  %70 = phi i8 [ %68, %65 ], [ 4, %14 ], [ 1, %20 ], [ 2, %26 ], [ 0, %58 ]
  %71 = bitcast %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #6
  %72 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0
  store i64 %15, i64* %72, align 8
  %73 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %7, i64 0, i32 0
  %74 = call i64* @_ZN2v88internal6Object11OptimalTypeEPNS0_7IsolateENS0_14RepresentationE(%"class.v8::internal::Object"* nonnull %73, %"class.v8::internal::Isolate"* %0, i8 %70) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #6
  %75 = call i64* @_ZN2v88internal3Map13CopyWithFieldEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_4NameEEENS4_INS0_9FieldTypeEEENS0_18PropertyAttributesENS0_17PropertyConstnessENS0_14RepresentationENS0_14TransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i64* %74, i32 %4, i32 1, i8 %70, i32 %5)
  br label %76

76:                                               ; preds = %6, %69
  %77 = phi i64* [ %75, %69 ], [ null, %6 ]
  ret i64* %77
}

declare i64* @_ZN2v88internal6Object11OptimalTypeEPNS0_7IsolateENS0_14RepresentationE(%"class.v8::internal::Object"*, %"class.v8::internal::Isolate"*, i8) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal3Map22InstancesNeedRewritingES1_(%"class.v8::internal::Map"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = and i64 %1, -4294967296
  %5 = add i64 %1, 23
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %1, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = lshr i32 %12, 10
  %14 = and i32 %13, 1023
  %15 = zext i32 %14 to i64
  %16 = icmp eq i32 %14, 0
  br i1 %16, label %70, label %17

17:                                               ; preds = %2
  %18 = and i64 %15, 1
  %19 = icmp eq i32 %14, 1
  br i1 %19, label %57, label %20

20:                                               ; preds = %17
  %21 = sub nsw i64 %15, %18
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i32 [ 0, %20 ], [ %48, %22 ]
  %24 = phi i64 [ 0, %20 ], [ %49, %22 ]
  %25 = phi i64 [ %21, %20 ], [ %50, %22 ]
  %26 = mul nuw nsw i64 %24, 51539607552
  %27 = add nuw nsw i64 %26, 68719476736
  %28 = lshr exact i64 %27, 32
  %29 = or i64 %28, 3
  %30 = add i64 %29, %9
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = lshr i32 %32, 2
  %34 = and i32 %33, 1
  %35 = xor i32 %34, 1
  %36 = add nuw nsw i32 %35, %23
  %37 = or i64 %24, 1
  %38 = mul nuw nsw i64 %37, 51539607552
  %39 = add nuw nsw i64 %38, 68719476736
  %40 = lshr exact i64 %39, 32
  %41 = or i64 %40, 3
  %42 = add i64 %41, %9
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = lshr i32 %44, 2
  %46 = and i32 %45, 1
  %47 = xor i32 %46, 1
  %48 = add nuw nsw i32 %47, %36
  %49 = add nuw nsw i64 %24, 2
  %50 = add i64 %25, -2
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %22

52:                                               ; preds = %22
  %53 = mul i64 %49, 51539607552
  %54 = add i64 %53, 68719476736
  %55 = lshr exact i64 %54, 32
  %56 = or i64 %55, 3
  br label %57

57:                                               ; preds = %52, %17
  %58 = phi i32 [ undef, %17 ], [ %48, %52 ]
  %59 = phi i32 [ 0, %17 ], [ %48, %52 ]
  %60 = phi i64 [ 19, %17 ], [ %56, %52 ]
  %61 = icmp eq i64 %18, 0
  br i1 %61, label %70, label %62

62:                                               ; preds = %57
  %63 = add i64 %60, %9
  %64 = inttoptr i64 %63 to i32*
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = lshr i32 %65, 2
  %67 = and i32 %66, 1
  %68 = xor i32 %67, 1
  %69 = add nuw nsw i32 %68, %59
  br label %70

70:                                               ; preds = %62, %57, %2
  %71 = phi i32 [ 0, %2 ], [ %58, %57 ], [ %69, %62 ]
  %72 = add i64 %1, 3
  %73 = inttoptr i64 %72 to i8*
  %74 = load atomic i8, i8* %73 monotonic, align 1
  %75 = zext i8 %74 to i32
  %76 = add i64 %1, 4
  %77 = inttoptr i64 %76 to i8*
  %78 = load atomic i8, i8* %77 monotonic, align 1
  %79 = zext i8 %78 to i32
  %80 = sub nsw i32 %75, %79
  %81 = add i64 %1, 5
  %82 = inttoptr i64 %81 to i8*
  %83 = load atomic i8, i8* %82 monotonic, align 1
  %84 = icmp ugt i8 %83, 2
  br i1 %84, label %85, label %87

85:                                               ; preds = %70
  %86 = load atomic i8, i8* %73 monotonic, align 1
  br label %87

87:                                               ; preds = %70, %85
  %88 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %88) #6
  %89 = call zeroext i1 @_ZNK2v88internal3Map22InstancesNeedRewritingES1_iiiPi(%"class.v8::internal::Map"* %0, i64 %1, i32 %71, i32 %80, i32 undef, i32* nonnull %3)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %88) #6
  ret i1 %89
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal3Map14NumberOfFieldsEv(%"class.v8::internal::Map"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 23
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %3, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = lshr i32 %12, 10
  %14 = and i32 %13, 1023
  %15 = zext i32 %14 to i64
  %16 = icmp eq i32 %14, 0
  br i1 %16, label %40, label %17

17:                                               ; preds = %1
  %18 = and i64 %15, 1
  %19 = icmp eq i32 %14, 1
  br i1 %19, label %27, label %20

20:                                               ; preds = %17
  %21 = sub nsw i64 %15, %18
  br label %42

22:                                               ; preds = %42
  %23 = mul i64 %69, 51539607552
  %24 = add i64 %23, 68719476736
  %25 = lshr exact i64 %24, 32
  %26 = or i64 %25, 3
  br label %27

27:                                               ; preds = %22, %17
  %28 = phi i32 [ undef, %17 ], [ %68, %22 ]
  %29 = phi i32 [ 0, %17 ], [ %68, %22 ]
  %30 = phi i64 [ 19, %17 ], [ %26, %22 ]
  %31 = icmp eq i64 %18, 0
  br i1 %31, label %40, label %32

32:                                               ; preds = %27
  %33 = add i64 %30, %9
  %34 = inttoptr i64 %33 to i32*
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = lshr i32 %35, 2
  %37 = and i32 %36, 1
  %38 = xor i32 %37, 1
  %39 = add nuw nsw i32 %38, %29
  br label %40

40:                                               ; preds = %32, %27, %1
  %41 = phi i32 [ 0, %1 ], [ %28, %27 ], [ %39, %32 ]
  ret i32 %41

42:                                               ; preds = %42, %20
  %43 = phi i32 [ 0, %20 ], [ %68, %42 ]
  %44 = phi i64 [ 0, %20 ], [ %69, %42 ]
  %45 = phi i64 [ %21, %20 ], [ %70, %42 ]
  %46 = mul nuw nsw i64 %44, 51539607552
  %47 = add nuw nsw i64 %46, 68719476736
  %48 = lshr exact i64 %47, 32
  %49 = or i64 %48, 3
  %50 = add i64 %49, %9
  %51 = inttoptr i64 %50 to i32*
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = lshr i32 %52, 2
  %54 = and i32 %53, 1
  %55 = xor i32 %54, 1
  %56 = add nuw nsw i32 %55, %43
  %57 = or i64 %44, 1
  %58 = mul nuw nsw i64 %57, 51539607552
  %59 = add nuw nsw i64 %58, 68719476736
  %60 = lshr exact i64 %59, 32
  %61 = or i64 %60, 3
  %62 = add i64 %61, %9
  %63 = inttoptr i64 %62 to i32*
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = lshr i32 %64, 2
  %66 = and i32 %65, 1
  %67 = xor i32 %66, 1
  %68 = add nuw nsw i32 %67, %56
  %69 = add nuw nsw i64 %44, 2
  %70 = add i64 %45, -2
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %22, label %42
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal3Map22InstancesNeedRewritingES1_iiiPi(%"class.v8::internal::Map"* nocapture readonly, i64, i32, i32, i32, i32* nocapture) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, -4294967296
  %10 = add i64 %8, 23
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = or i64 %9, %13
  %15 = add i64 %8, 11
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 acquire, align 4
  %18 = lshr i32 %17, 10
  %19 = and i32 %18, 1023
  %20 = zext i32 %19 to i64
  %21 = icmp eq i32 %19, 0
  br i1 %21, label %75, label %22

22:                                               ; preds = %6
  %23 = and i64 %20, 1
  %24 = icmp eq i32 %19, 1
  br i1 %24, label %62, label %25

25:                                               ; preds = %22
  %26 = sub nsw i64 %20, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i32 [ 0, %25 ], [ %53, %27 ]
  %29 = phi i64 [ 0, %25 ], [ %54, %27 ]
  %30 = phi i64 [ %26, %25 ], [ %55, %27 ]
  %31 = mul nuw nsw i64 %29, 51539607552
  %32 = add nuw nsw i64 %31, 68719476736
  %33 = lshr exact i64 %32, 32
  %34 = or i64 %33, 3
  %35 = add i64 %34, %14
  %36 = inttoptr i64 %35 to i32*
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = lshr i32 %37, 2
  %39 = and i32 %38, 1
  %40 = xor i32 %39, 1
  %41 = add nuw nsw i32 %40, %28
  %42 = or i64 %29, 1
  %43 = mul nuw nsw i64 %42, 51539607552
  %44 = add nuw nsw i64 %43, 68719476736
  %45 = lshr exact i64 %44, 32
  %46 = or i64 %45, 3
  %47 = add i64 %46, %14
  %48 = inttoptr i64 %47 to i32*
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = lshr i32 %49, 2
  %51 = and i32 %50, 1
  %52 = xor i32 %51, 1
  %53 = add nuw nsw i32 %52, %41
  %54 = add nuw nsw i64 %29, 2
  %55 = add i64 %30, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %27

57:                                               ; preds = %27
  %58 = mul i64 %54, 51539607552
  %59 = add i64 %58, 68719476736
  %60 = lshr exact i64 %59, 32
  %61 = or i64 %60, 3
  br label %62

62:                                               ; preds = %57, %22
  %63 = phi i32 [ undef, %22 ], [ %53, %57 ]
  %64 = phi i32 [ 0, %22 ], [ %53, %57 ]
  %65 = phi i64 [ 19, %22 ], [ %61, %57 ]
  %66 = icmp eq i64 %23, 0
  br i1 %66, label %75, label %67

67:                                               ; preds = %62
  %68 = add i64 %65, %14
  %69 = inttoptr i64 %68 to i32*
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = lshr i32 %70, 2
  %72 = and i32 %71, 1
  %73 = xor i32 %72, 1
  %74 = add nuw nsw i32 %73, %64
  br label %75

75:                                               ; preds = %67, %62, %6
  %76 = phi i32 [ 0, %6 ], [ %63, %62 ], [ %74, %67 ]
  store i32 %76, i32* %5, align 4
  %77 = icmp eq i32 %76, %2
  br i1 %77, label %78, label %133

78:                                               ; preds = %75
  %79 = load i64, i64* %7, align 8
  %80 = and i64 %79, -4294967296
  %81 = add i64 %79, 23
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = zext i32 %83 to i64
  %85 = or i64 %80, %84
  %86 = and i64 %1, -4294967296
  %87 = add i64 %1, 23
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = or i64 %86, %90
  %92 = add i64 %79, 11
  %93 = inttoptr i64 %92 to i32*
  %94 = load atomic i32, i32* %93 acquire, align 4
  %95 = lshr i32 %94, 10
  %96 = and i32 %95, 1023
  %97 = zext i32 %96 to i64
  %98 = icmp eq i32 %96, 0
  br i1 %98, label %119, label %101

99:                                               ; preds = %101
  %100 = icmp eq i64 %118, %97
  br i1 %100, label %119, label %101

101:                                              ; preds = %78, %99
  %102 = phi i64 [ %118, %99 ], [ 0, %78 ]
  %103 = mul nuw nsw i64 %102, 51539607552
  %104 = add nuw nsw i64 %103, 68719476736
  %105 = lshr exact i64 %104, 32
  %106 = or i64 %105, 3
  %107 = add i64 %106, %91
  %108 = inttoptr i64 %107 to i32*
  %109 = load atomic i32, i32* %108 monotonic, align 4
  %110 = and i32 %109, 896
  %111 = icmp ne i32 %110, 256
  %112 = add i64 %106, %85
  %113 = inttoptr i64 %112 to i32*
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = and i32 %114, 896
  %116 = icmp eq i32 %115, 256
  %117 = xor i1 %111, %116
  %118 = add nuw nsw i64 %102, 1
  br i1 %117, label %99, label %133

119:                                              ; preds = %99, %78
  %120 = load i64, i64* %7, align 8
  %121 = add i64 %120, 3
  %122 = inttoptr i64 %121 to i8*
  %123 = load atomic i8, i8* %122 monotonic, align 1
  %124 = zext i8 %123 to i32
  %125 = add i64 %120, 4
  %126 = inttoptr i64 %125 to i8*
  %127 = load atomic i8, i8* %126 monotonic, align 1
  %128 = zext i8 %127 to i32
  %129 = sub nsw i32 %124, %128
  %130 = icmp ne i32 %129, %3
  %131 = icmp sgt i32 %2, %3
  %132 = and i1 %131, %130
  ret i1 %132

133:                                              ; preds = %101, %75
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal3Map14GetFieldCountsEv(%"class.v8::internal::Map"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 23
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %3, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = lshr i32 %12, 10
  %14 = and i32 %13, 1023
  %15 = zext i32 %14 to i64
  %16 = icmp eq i32 %14, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %44, %1
  %18 = phi i32 [ 0, %1 ], [ %45, %44 ]
  %19 = phi i32 [ 0, %1 ], [ %46, %44 ]
  %20 = zext i32 %18 to i64
  %21 = shl nuw i64 %20, 32
  %22 = zext i32 %19 to i64
  %23 = or i64 %21, %22
  ret i64 %23

24:                                               ; preds = %1, %44
  %25 = phi i32 [ %46, %44 ], [ 0, %1 ]
  %26 = phi i32 [ %45, %44 ], [ 0, %1 ]
  %27 = phi i64 [ %47, %44 ], [ 0, %1 ]
  %28 = mul nuw nsw i64 %27, 51539607552
  %29 = add nuw nsw i64 %28, 68719476736
  %30 = lshr exact i64 %29, 32
  %31 = or i64 %30, 3
  %32 = add i64 %31, %9
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %44

37:                                               ; preds = %24
  %38 = and i32 %34, 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %37
  %41 = add nsw i32 %25, 1
  br label %44

42:                                               ; preds = %37
  %43 = add nsw i32 %26, 1
  br label %44

44:                                               ; preds = %40, %42, %24
  %45 = phi i32 [ %43, %42 ], [ %26, %40 ], [ %26, %24 ]
  %46 = phi i32 [ %25, %42 ], [ %41, %40 ], [ %25, %24 ]
  %47 = add nuw nsw i64 %27, 1
  %48 = icmp eq i64 %47, %15
  br i1 %48, label %17, label %24
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal3Map24HasOutOfObjectPropertiesEv(%"class.v8::internal::Map"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i8*
  %6 = load atomic i8, i8* %5 monotonic, align 1
  %7 = zext i8 %6 to i32
  %8 = add i64 %3, 4
  %9 = inttoptr i64 %8 to i8*
  %10 = load atomic i8, i8* %9 monotonic, align 1
  %11 = zext i8 %10 to i32
  %12 = sub nsw i32 %7, %11
  %13 = and i64 %3, -4294967296
  %14 = add i64 %3, 23
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %13, %17
  %19 = add i64 %3, 11
  %20 = inttoptr i64 %19 to i32*
  %21 = load atomic i32, i32* %20 acquire, align 4
  %22 = lshr i32 %21, 10
  %23 = and i32 %22, 1023
  %24 = zext i32 %23 to i64
  %25 = icmp eq i32 %23, 0
  br i1 %25, label %79, label %26

26:                                               ; preds = %1
  %27 = and i64 %24, 1
  %28 = icmp eq i32 %23, 1
  br i1 %28, label %66, label %29

29:                                               ; preds = %26
  %30 = sub nsw i64 %24, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i32 [ 0, %29 ], [ %57, %31 ]
  %33 = phi i64 [ 0, %29 ], [ %58, %31 ]
  %34 = phi i64 [ %30, %29 ], [ %59, %31 ]
  %35 = mul nuw nsw i64 %33, 51539607552
  %36 = add nuw nsw i64 %35, 68719476736
  %37 = lshr exact i64 %36, 32
  %38 = or i64 %37, 3
  %39 = add i64 %38, %18
  %40 = inttoptr i64 %39 to i32*
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = lshr i32 %41, 2
  %43 = and i32 %42, 1
  %44 = xor i32 %43, 1
  %45 = add nuw nsw i32 %44, %32
  %46 = or i64 %33, 1
  %47 = mul nuw nsw i64 %46, 51539607552
  %48 = add nuw nsw i64 %47, 68719476736
  %49 = lshr exact i64 %48, 32
  %50 = or i64 %49, 3
  %51 = add i64 %50, %18
  %52 = inttoptr i64 %51 to i32*
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = lshr i32 %53, 2
  %55 = and i32 %54, 1
  %56 = xor i32 %55, 1
  %57 = add nuw nsw i32 %56, %45
  %58 = add nuw nsw i64 %33, 2
  %59 = add i64 %34, -2
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %31

61:                                               ; preds = %31
  %62 = mul i64 %58, 51539607552
  %63 = add i64 %62, 68719476736
  %64 = lshr exact i64 %63, 32
  %65 = or i64 %64, 3
  br label %66

66:                                               ; preds = %61, %26
  %67 = phi i32 [ undef, %26 ], [ %57, %61 ]
  %68 = phi i32 [ 0, %26 ], [ %57, %61 ]
  %69 = phi i64 [ 19, %26 ], [ %65, %61 ]
  %70 = icmp eq i64 %27, 0
  br i1 %70, label %79, label %71

71:                                               ; preds = %66
  %72 = add i64 %69, %18
  %73 = inttoptr i64 %72 to i32*
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = lshr i32 %74, 2
  %76 = and i32 %75, 1
  %77 = xor i32 %76, 1
  %78 = add nuw nsw i32 %77, %68
  br label %79

79:                                               ; preds = %71, %66, %1
  %80 = phi i32 [ 0, %1 ], [ %67, %66 ], [ %78, %71 ]
  %81 = icmp slt i32 %12, %80
  ret i1 %81
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal3Map23DeprecateTransitionTreeEPNS0_7IsolateE(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::DependentCode", align 8
  %4 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %5 = alloca %"class.v8::internal::Map", align 8
  %6 = alloca %"class.v8::internal::DependentCode", align 8
  %7 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, 11
  %10 = inttoptr i64 %9 to i32*
  %11 = load atomic i32, i32* %10 acquire, align 4
  %12 = and i32 %11, 16777216
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %169

14:                                               ; preds = %2
  %15 = bitcast %"class.v8::internal::TransitionsAccessor"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %15) #6
  %16 = load i64, i64* %7, align 8
  %17 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %1, %"class.v8::internal::Isolate"** %17, align 8
  %18 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 1, i32 0, i32 0
  store i64* null, i64** %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %16, i64* %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %20, align 8
  %21 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 5
  store i8 0, i8* %21, align 4
  %22 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 4
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %16, 35
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 acquire, align 4
  %27 = and i64 %23, 4294967295
  %28 = icmp eq i64 %27, 0
  tail call void @llvm.assume(i1 %28) #6
  %29 = zext i32 %26 to i64
  %30 = or i64 %23, %29
  store i64 %30, i64* %20, align 8
  %31 = and i64 %29, 1
  %32 = icmp eq i64 %31, 0
  %33 = icmp eq i32 %26, 3
  %34 = or i1 %33, %32
  br i1 %34, label %35, label %37

35:                                               ; preds = %14
  %36 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  store i32 1, i32* %36, align 8
  br label %65

37:                                               ; preds = %14
  %38 = and i64 %29, 3
  switch i64 %38, label %64 [
    i64 3, label %39
    i64 1, label %41
  ]

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  store i32 3, i32* %40, align 8
  br label %65

41:                                               ; preds = %37
  %42 = add i64 %30, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %23, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = icmp eq i16 %49, 160
  br i1 %50, label %51, label %53

51:                                               ; preds = %41
  %52 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  store i32 4, i32* %52, align 8
  br label %65

53:                                               ; preds = %41
  %54 = load atomic i32, i32* %43 monotonic, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %23, %55
  %57 = add i64 %56, 7
  %58 = inttoptr i64 %57 to i16*
  %59 = load atomic i16, i16* %58 monotonic, align 2
  %60 = icmp eq i16 %59, 110
  %61 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  br i1 %60, label %62, label %63

62:                                               ; preds = %53
  store i32 0, i32* %61, align 8
  br label %65

63:                                               ; preds = %53
  store i32 2, i32* %61, align 8
  br label %65

64:                                               ; preds = %37
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

65:                                               ; preds = %35, %39, %51, %62, %63
  %66 = call i32 @_ZN2v88internal19TransitionsAccessor19NumberOfTransitionsEv(%"class.v8::internal::TransitionsAccessor"* nonnull %4) #6
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %68, label %73

68:                                               ; preds = %65
  %69 = bitcast %"class.v8::internal::Map"* %5 to i8*
  %70 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  %71 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %72 = zext i32 %66 to i64
  br label %87

73:                                               ; preds = %109, %65
  %74 = load i64, i64* %7, align 8
  %75 = add i64 %74, 11
  %76 = inttoptr i64 %75 to i32*
  %77 = load atomic i32, i32* %76 acquire, align 4
  %78 = or i32 %77, 16777216
  %79 = load i64, i64* %7, align 8
  %80 = add i64 %79, 11
  %81 = inttoptr i64 %80 to i32*
  store atomic volatile i32 %78, i32* %81 release, align 4
  %82 = load i8, i8* @_ZN2v88internal13FLAG_log_mapsE, align 1, !range !3
  %83 = icmp eq i8 %82, 0
  %84 = load i8, i8* @_ZN2v88internal8FLAG_logE, align 1
  %85 = icmp eq i8 %84, 0
  %86 = or i1 %83, %85
  br i1 %86, label %137, label %113

87:                                               ; preds = %109, %68
  %88 = phi i64 [ 0, %68 ], [ %111, %109 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #6
  %89 = load i32, i32* %70, align 8
  switch i32 %89, label %108 [
    i32 0, label %90
    i32 1, label %90
    i32 2, label %90
    i32 3, label %91
    i32 4, label %94
  ]

90:                                               ; preds = %87, %87, %87
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

91:                                               ; preds = %87
  %92 = load i64, i64* %20, align 8
  %93 = and i64 %92, -3
  br label %109

94:                                               ; preds = %87
  %95 = load i64, i64* %20, align 8
  %96 = trunc i64 %88 to i32
  %97 = shl i32 %96, 3
  %98 = and i64 %95, -4294967296
  %99 = add i32 %97, 12
  %100 = sext i32 %99 to i64
  %101 = add nsw i64 %100, 7
  %102 = add i64 %101, %95
  %103 = inttoptr i64 %102 to i32*
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, -3
  %106 = zext i32 %105 to i64
  %107 = or i64 %98, %106
  br label %109

108:                                              ; preds = %87
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

109:                                              ; preds = %91, %94
  %110 = phi i64 [ %107, %94 ], [ %93, %91 ]
  store i64 %110, i64* %71, align 8
  call void @_ZN2v88internal3Map23DeprecateTransitionTreeEPNS0_7IsolateE(%"class.v8::internal::Map"* nonnull %5, %"class.v8::internal::Isolate"* %1)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #6
  %111 = add nuw nsw i64 %88, 1
  %112 = icmp eq i64 %111, %72
  br i1 %112, label %73, label %87

113:                                              ; preds = %73
  %114 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 21
  %115 = load %"class.v8::internal::Logger"*, %"class.v8::internal::Logger"** %114, align 8
  %116 = load i64, i64* %7, align 8
  %117 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %118 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %117, align 8
  %119 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %113
  %121 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %118, i64 %116) #6
  br label %135

122:                                              ; preds = %113
  %123 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %124 = load i64*, i64** %123, align 8
  %125 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %126 = load i64*, i64** %125, align 8
  %127 = icmp eq i64* %124, %126
  br i1 %127, label %128, label %130

128:                                              ; preds = %122
  %129 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #6
  br label %130

130:                                              ; preds = %128, %122
  %131 = phi i64* [ %129, %128 ], [ %124, %122 ]
  %132 = ptrtoint i64* %131 to i64
  %133 = add i64 %132, 8
  %134 = inttoptr i64 %133 to i64*
  store i64* %134, i64** %123, align 8
  store i64 %116, i64* %131, align 8
  br label %135

135:                                              ; preds = %120, %130
  %136 = phi i64* [ %121, %120 ], [ %131, %130 ]
  call void @_ZN2v88internal6Logger8MapEventEPKcNS0_6HandleINS0_3MapEEES6_S3_NS4_INS0_10HeapObjectEEE(%"class.v8::internal::Logger"* %115, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i64* %136, i64* null, i8* null, i64* null) #6
  br label %137

137:                                              ; preds = %73, %135
  %138 = bitcast %"class.v8::internal::DependentCode"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %138) #6
  %139 = load i64, i64* %7, align 8
  %140 = and i64 %139, -4294967296
  %141 = add i64 %139, 27
  %142 = inttoptr i64 %141 to i32*
  %143 = load i32, i32* %142, align 4
  %144 = zext i32 %143 to i64
  %145 = or i64 %140, %144
  %146 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %145, i64* %146, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %6, i32 0) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %138) #6
  %147 = load i64, i64* %7, align 8
  %148 = add i64 %147, 11
  %149 = inttoptr i64 %148 to i32*
  %150 = load atomic i32, i32* %149 acquire, align 4
  %151 = and i32 %150, 33554432
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %168

153:                                              ; preds = %137
  %154 = load i64, i64* %7, align 8
  %155 = add i64 %154, 11
  %156 = inttoptr i64 %155 to i32*
  %157 = load atomic i32, i32* %156 monotonic, align 4
  %158 = or i32 %157, 33554432
  store atomic volatile i32 %158, i32* %156 release, align 4
  %159 = bitcast %"class.v8::internal::DependentCode"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %159) #6
  %160 = load i64, i64* %7, align 8
  %161 = and i64 %160, -4294967296
  %162 = add i64 %160, 27
  %163 = inttoptr i64 %162 to i32*
  %164 = load i32, i32* %163, align 4
  %165 = zext i32 %164 to i64
  %166 = or i64 %161, %165
  %167 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %166, i64* %167, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %3, i32 1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %159) #6
  br label %168

168:                                              ; preds = %137, %153
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %15) #6
  br label %169

169:                                              ; preds = %2, %168
  ret void
}

declare i32 @_ZN2v88internal19TransitionsAccessor19NumberOfTransitionsEv(%"class.v8::internal::TransitionsAccessor"*) local_unnamed_addr #3

declare void @_ZN2v88internal6Logger8MapEventEPKcNS0_6HandleINS0_3MapEEES6_S3_NS4_INS0_10HeapObjectEEE(%"class.v8::internal::Logger"*, i8*, i64*, i64*, i8*, i64*) local_unnamed_addr #3

declare void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal3Map18ReplaceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayE(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::Map", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 11
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 acquire, align 4
  %10 = and i32 %9, 1047552
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %199, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 4
  %14 = load i64, i64* %13, align 8
  %15 = load i64, i64* %5, align 8
  %16 = add i64 %15, 19
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = and i64 %14, 4294967295
  %20 = icmp eq i64 %19, 0
  tail call void @llvm.assume(i1 %20) #6
  %21 = zext i32 %18 to i64
  %22 = or i64 %14, %21
  %23 = and i64 %21, 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %12
  %26 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %53

27:                                               ; preds = %12
  %28 = add i64 %22, -1
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %32 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %31, null
  br i1 %32, label %39, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %31, i64 0, i32 0, i32 1
  %35 = load i8, i8* %34, align 8, !range !3
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %31, i64 0, i32 1, i64 0
  br label %47

39:                                               ; preds = %33, %27
  %40 = and i64 %15, -262144
  %41 = or i64 %40, 16
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42, align 16
  %44 = add i64 %43, -41416
  %45 = inttoptr i64 %44 to %"class.v8::internal::Isolate"*
  %46 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %45, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %47

47:                                               ; preds = %39, %37
  %48 = phi i64* [ %46, %39 ], [ %38, %37 ]
  %49 = getelementptr inbounds i64, i64* %48, i64 10
  %50 = load i64, i64* %49, align 8
  %51 = trunc i64 %50 to i32
  %52 = icmp eq i32 %30, %51
  br i1 %52, label %74, label %53

53:                                               ; preds = %47, %25
  %54 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %26, %25 ], [ %31, %47 ]
  %55 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %54, null
  br i1 %55, label %62, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %54, i64 0, i32 0, i32 1
  %58 = load i8, i8* %57, align 8, !range !3
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %54, i64 0, i32 1, i64 0
  br label %70

62:                                               ; preds = %56, %53
  %63 = and i64 %15, -262144
  %64 = or i64 %63, 16
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65, align 16
  %67 = add i64 %66, -41416
  %68 = inttoptr i64 %67 to %"class.v8::internal::Isolate"*
  %69 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %68, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %70

70:                                               ; preds = %62, %60
  %71 = phi i64* [ %69, %62 ], [ %61, %60 ]
  %72 = getelementptr inbounds i64, i64* %71, i64 4
  %73 = load i64, i64* %72, align 8
  br label %74

74:                                               ; preds = %47, %70
  %75 = phi i64 [ %73, %70 ], [ %22, %47 ]
  %76 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 4
  %77 = load i64, i64* %76, align 8
  %78 = trunc i64 %75 to i32
  %79 = trunc i64 %77 to i32
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %199, label %81

81:                                               ; preds = %74
  %82 = add i64 %15, 23
  %83 = inttoptr i64 %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i64
  %86 = or i64 %14, %85
  %87 = bitcast %"class.v8::internal::Map"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %87) #6
  %88 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %15, i64* %88, align 8
  %89 = add i64 %86, 5
  %90 = inttoptr i64 %89 to i16*
  %91 = load atomic i16, i16* %90 monotonic, align 2
  %92 = and i64 %86, -262144
  %93 = or i64 %92, 8
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = and i64 %95, 262144
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %104, label %98

98:                                               ; preds = %81
  %99 = sext i16 %91 to i32
  %100 = or i64 %92, 16
  %101 = inttoptr i64 %100 to %"class.v8::internal::Heap"**
  %102 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %101, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_15DescriptorArrayEi(%"class.v8::internal::Heap"* %102, i64 %86, i32 %99) #6
  %103 = load i64, i64* %13, align 8
  br label %104

104:                                              ; preds = %81, %98
  %105 = phi i64 [ %14, %81 ], [ %103, %98 ]
  %106 = load i32, i32* %83, align 4
  %107 = and i64 %105, 4294967295
  %108 = icmp eq i64 %107, 0
  tail call void @llvm.assume(i1 %108) #6
  %109 = icmp eq i32 %106, %84
  br i1 %109, label %110, label %193

110:                                              ; preds = %104, %175
  %111 = phi i64 [ %170, %175 ], [ %15, %104 ]
  %112 = phi i64 [ %186, %175 ], [ %105, %104 ]
  %113 = add i64 %111, 19
  %114 = inttoptr i64 %113 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i64
  %117 = or i64 %112, %116
  %118 = and i64 %116, 1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %122

120:                                              ; preds = %110
  %121 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %148

122:                                              ; preds = %110
  %123 = add i64 %117, -1
  %124 = inttoptr i64 %123 to i32*
  %125 = load atomic i32, i32* %124 monotonic, align 4
  %126 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %127 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %126, null
  br i1 %127, label %134, label %128

128:                                              ; preds = %122
  %129 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %126, i64 0, i32 0, i32 1
  %130 = load i8, i8* %129, align 8, !range !3
  %131 = icmp eq i8 %130, 0
  br i1 %131, label %134, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %126, i64 0, i32 1, i64 0
  br label %142

134:                                              ; preds = %128, %122
  %135 = and i64 %111, -262144
  %136 = or i64 %135, 16
  %137 = inttoptr i64 %136 to i64*
  %138 = load i64, i64* %137, align 16
  %139 = add i64 %138, -41416
  %140 = inttoptr i64 %139 to %"class.v8::internal::Isolate"*
  %141 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %140, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %142

142:                                              ; preds = %134, %132
  %143 = phi i64* [ %141, %134 ], [ %133, %132 ]
  %144 = getelementptr inbounds i64, i64* %143, i64 10
  %145 = load i64, i64* %144, align 8
  %146 = trunc i64 %145 to i32
  %147 = icmp eq i32 %125, %146
  br i1 %147, label %169, label %148

148:                                              ; preds = %142, %120
  %149 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %121, %120 ], [ %126, %142 ]
  %150 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %149, null
  br i1 %150, label %157, label %151

151:                                              ; preds = %148
  %152 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %149, i64 0, i32 0, i32 1
  %153 = load i8, i8* %152, align 8, !range !3
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %157, label %155

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %149, i64 0, i32 1, i64 0
  br label %165

157:                                              ; preds = %151, %148
  %158 = and i64 %111, -262144
  %159 = or i64 %158, 16
  %160 = inttoptr i64 %159 to i64*
  %161 = load i64, i64* %160, align 16
  %162 = add i64 %161, -41416
  %163 = inttoptr i64 %162 to %"class.v8::internal::Isolate"*
  %164 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %163, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %165

165:                                              ; preds = %157, %155
  %166 = phi i64* [ %164, %157 ], [ %156, %155 ]
  %167 = getelementptr inbounds i64, i64* %166, i64 4
  %168 = load i64, i64* %167, align 8
  br label %169

169:                                              ; preds = %142, %165
  %170 = phi i64 [ %168, %165 ], [ %117, %142 ]
  %171 = load i64, i64* %76, align 8
  %172 = trunc i64 %170 to i32
  %173 = trunc i64 %171 to i32
  %174 = icmp eq i32 %172, %173
  br i1 %174, label %193, label %175

175:                                              ; preds = %169
  %176 = add i64 %111, 11
  %177 = inttoptr i64 %176 to i32*
  %178 = load atomic i32, i32* %177 monotonic, align 4
  %179 = or i32 %178, 1023
  store atomic volatile i32 %179, i32* %177 monotonic, align 4
  %180 = load i64, i64* %88, align 8
  %181 = add i64 %180, 11
  %182 = inttoptr i64 %181 to i32*
  %183 = load atomic i32, i32* %182 acquire, align 4
  %184 = lshr i32 %183, 10
  %185 = and i32 %184, 1023
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %4, %"class.v8::internal::Isolate"* undef, i64 %2, i32 %185) #6
  store i64 %170, i64* %88, align 8
  %186 = load i64, i64* %13, align 8
  %187 = add i64 %170, 23
  %188 = inttoptr i64 %187 to i32*
  %189 = load i32, i32* %188, align 4
  %190 = and i64 %186, 4294967295
  %191 = icmp eq i64 %190, 0
  tail call void @llvm.assume(i1 %191) #6
  %192 = icmp eq i32 %189, %84
  br i1 %192, label %110, label %193

193:                                              ; preds = %175, %169, %104
  %194 = load i64, i64* %5, align 8
  %195 = add i64 %194, 11
  %196 = inttoptr i64 %195 to i32*
  %197 = load atomic i32, i32* %196 monotonic, align 4
  %198 = and i32 %197, -4194305
  store atomic volatile i32 %198, i32* %196 monotonic, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %87) #6
  br label %199

199:                                              ; preds = %3, %74, %193
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal3Map11FindRootMapEPNS0_7IsolateE(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967295
  %8 = icmp eq i64 %7, 0
  tail call void @llvm.assume(i1 %8) #6
  %9 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %10 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %9, null
  %11 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %9, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %9, i64 0, i32 1, i64 0
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 4
  %14 = load i64, i64* %13, align 8
  %15 = trunc i64 %14 to i32
  br i1 %10, label %16, label %52

16:                                               ; preds = %2, %48
  %17 = phi i64 [ %49, %48 ], [ %4, %2 ]
  %18 = add i64 %17, 19
  %19 = inttoptr i64 %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %6, %21
  %23 = and i64 %21, 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %39, label %25

25:                                               ; preds = %16
  %26 = add i64 %22, -1
  %27 = inttoptr i64 %26 to i32*
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i64 %17, -262144
  %30 = or i64 %29, 16
  %31 = inttoptr i64 %30 to i64*
  %32 = load i64, i64* %31, align 16
  %33 = add i64 %32, -41416
  %34 = inttoptr i64 %33 to %"class.v8::internal::Isolate"*
  %35 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %34, i64 0, i32 0, i32 7, i32 0, i64 10
  %36 = load i64, i64* %35, align 8
  %37 = trunc i64 %36 to i32
  %38 = icmp eq i32 %28, %37
  br i1 %38, label %48, label %39

39:                                               ; preds = %25, %16
  %40 = and i64 %17, -262144
  %41 = or i64 %40, 16
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42, align 16
  %44 = add i64 %43, -41416
  %45 = inttoptr i64 %44 to %"class.v8::internal::Isolate"*
  %46 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %45, i64 0, i32 0, i32 7, i32 0, i64 4
  %47 = load i64, i64* %46, align 8
  br label %48

48:                                               ; preds = %39, %25
  %49 = phi i64 [ %47, %39 ], [ %22, %25 ]
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, %15
  br i1 %51, label %100, label %16

52:                                               ; preds = %2, %96
  %53 = phi i64 [ %97, %96 ], [ %4, %2 ]
  %54 = add i64 %53, 19
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i64
  %58 = or i64 %6, %57
  %59 = and i64 %57, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %81, label %61

61:                                               ; preds = %52
  %62 = add i64 %58, -1
  %63 = inttoptr i64 %62 to i32*
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = load i8, i8* %11, align 8, !range !3
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %67, label %75

67:                                               ; preds = %61
  %68 = and i64 %53, -262144
  %69 = or i64 %68, 16
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70, align 16
  %72 = add i64 %71, -41416
  %73 = inttoptr i64 %72 to %"class.v8::internal::Isolate"*
  %74 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %73, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %75

75:                                               ; preds = %61, %67
  %76 = phi i64* [ %74, %67 ], [ %12, %61 ]
  %77 = getelementptr inbounds i64, i64* %76, i64 10
  %78 = load i64, i64* %77, align 8
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %64, %79
  br i1 %80, label %96, label %81

81:                                               ; preds = %75, %52
  %82 = load i8, i8* %11, align 8, !range !3
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %84, label %92

84:                                               ; preds = %81
  %85 = and i64 %53, -262144
  %86 = or i64 %85, 16
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87, align 16
  %89 = add i64 %88, -41416
  %90 = inttoptr i64 %89 to %"class.v8::internal::Isolate"*
  %91 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %90, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %92

92:                                               ; preds = %81, %84
  %93 = phi i64* [ %91, %84 ], [ %12, %81 ]
  %94 = getelementptr inbounds i64, i64* %93, i64 4
  %95 = load i64, i64* %94, align 8
  br label %96

96:                                               ; preds = %75, %92
  %97 = phi i64 [ %95, %92 ], [ %58, %75 ]
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, %15
  br i1 %99, label %100, label %52

100:                                              ; preds = %96, %48
  %101 = phi i64 [ %17, %48 ], [ %53, %96 ]
  ret i64 %101
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal3Map14FindFieldOwnerEPNS0_7IsolateENS0_13InternalIndexE(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 4
  %7 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 4
  %8 = trunc i64 %2 to i32
  br label %9

9:                                                ; preds = %76, %3
  %10 = phi i64 [ %5, %3 ], [ %71, %76 ]
  %11 = load i64, i64* %6, align 8
  %12 = add i64 %10, 19
  %13 = inttoptr i64 %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = and i64 %11, 4294967295
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #6
  %17 = zext i32 %14 to i64
  %18 = or i64 %11, %17
  %19 = and i64 %17, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %9
  %22 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %49

23:                                               ; preds = %9
  %24 = add i64 %18, -1
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %28 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %27, null
  br i1 %28, label %35, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %27, i64 0, i32 0, i32 1
  %31 = load i8, i8* %30, align 8, !range !3
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %27, i64 0, i32 1, i64 0
  br label %43

35:                                               ; preds = %29, %23
  %36 = and i64 %10, -262144
  %37 = or i64 %36, 16
  %38 = inttoptr i64 %37 to i64*
  %39 = load i64, i64* %38, align 16
  %40 = add i64 %39, -41416
  %41 = inttoptr i64 %40 to %"class.v8::internal::Isolate"*
  %42 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %41, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %43

43:                                               ; preds = %35, %33
  %44 = phi i64* [ %42, %35 ], [ %34, %33 ]
  %45 = getelementptr inbounds i64, i64* %44, i64 10
  %46 = load i64, i64* %45, align 8
  %47 = trunc i64 %46 to i32
  %48 = icmp eq i32 %26, %47
  br i1 %48, label %70, label %49

49:                                               ; preds = %43, %21
  %50 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %22, %21 ], [ %27, %43 ]
  %51 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %50, null
  br i1 %51, label %58, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %50, i64 0, i32 0, i32 1
  %54 = load i8, i8* %53, align 8, !range !3
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %50, i64 0, i32 1, i64 0
  br label %66

58:                                               ; preds = %52, %49
  %59 = and i64 %10, -262144
  %60 = or i64 %59, 16
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61, align 16
  %63 = add i64 %62, -41416
  %64 = inttoptr i64 %63 to %"class.v8::internal::Isolate"*
  %65 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %66

66:                                               ; preds = %58, %56
  %67 = phi i64* [ %65, %58 ], [ %57, %56 ]
  %68 = getelementptr inbounds i64, i64* %67, i64 4
  %69 = load i64, i64* %68, align 8
  br label %70

70:                                               ; preds = %43, %66
  %71 = phi i64 [ %69, %66 ], [ %18, %43 ]
  %72 = load i64, i64* %7, align 8
  %73 = trunc i64 %71 to i32
  %74 = trunc i64 %72 to i32
  %75 = icmp eq i32 %73, %74
  br i1 %75, label %83, label %76

76:                                               ; preds = %70
  %77 = add i64 %71, 11
  %78 = inttoptr i64 %77 to i32*
  %79 = load atomic i32, i32* %78 acquire, align 4
  %80 = lshr i32 %79, 10
  %81 = and i32 %80, 1023
  %82 = icmp sgt i32 %81, %8
  br i1 %82, label %9, label %83

83:                                               ; preds = %70, %76
  ret i64 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map9TryUpdateEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 acquire, align 4
  %7 = and i32 %6, 16777216
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %2
  %10 = ptrtoint i64* %1 to i64
  br label %36

11:                                               ; preds = %2
  %12 = load i64, i64* %1, align 8
  %13 = tail call i64 @_ZN2v88internal3Map13TryUpdateSlowEPNS0_7IsolateES1_(%"class.v8::internal::Isolate"* %0, i64 %12)
  %14 = trunc i64 %13 to i32
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %36, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %18 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %17, align 8
  %19 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %18, i64 %13) #6
  %22 = ptrtoint i64* %21 to i64
  br label %36

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %27 = load i64*, i64** %26, align 8
  %28 = icmp eq i64* %25, %27
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %31

31:                                               ; preds = %29, %23
  %32 = phi i64* [ %30, %29 ], [ %25, %23 ]
  %33 = ptrtoint i64* %32 to i64
  %34 = add i64 %33, 8
  %35 = inttoptr i64 %34 to i64*
  store i64* %35, i64** %24, align 8
  store i64 %13, i64* %32, align 8
  br label %36

36:                                               ; preds = %31, %20, %11, %9
  %37 = phi i64 [ %10, %9 ], [ 0, %11 ], [ %22, %20 ], [ %33, %31 ]
  %38 = inttoptr i64 %37 to i64*
  ret i64* %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal3Map13TryUpdateSlowEPNS0_7IsolateES1_(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %4 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %5 = alloca %"class.v8::internal::Map", align 8
  %6 = alloca %"class.v8::internal::Map", align 8
  %7 = alloca %"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo", align 8
  %8 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %9 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %9, align 8
  %10 = bitcast %"class.v8::internal::Map"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #6
  %11 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, 4294967295
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #6
  %15 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %16 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %15, null
  %17 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %15, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %15, i64 0, i32 1, i64 0
  %19 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 4
  %20 = load i64, i64* %19, align 8
  %21 = trunc i64 %20 to i32
  br i1 %16, label %22, label %60

22:                                               ; preds = %2, %56
  %23 = phi i64 [ %57, %56 ], [ %1, %2 ]
  %24 = add i64 %23, 19
  %25 = inttoptr i64 %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %12, %27
  %29 = and i64 %27, 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %35

31:                                               ; preds = %22
  %32 = and i64 %23, -262144
  %33 = or i64 %32, 16
  %34 = inttoptr i64 %33 to i64*
  br label %49

35:                                               ; preds = %22
  %36 = add i64 %28, -1
  %37 = inttoptr i64 %36 to i32*
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i64 %23, -262144
  %40 = or i64 %39, 16
  %41 = inttoptr i64 %40 to i64*
  %42 = load i64, i64* %41, align 16
  %43 = add i64 %42, -41416
  %44 = inttoptr i64 %43 to %"class.v8::internal::Isolate"*
  %45 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %44, i64 0, i32 0, i32 7, i32 0, i64 10
  %46 = load i64, i64* %45, align 8
  %47 = trunc i64 %46 to i32
  %48 = icmp eq i32 %38, %47
  br i1 %48, label %56, label %49

49:                                               ; preds = %31, %35
  %50 = phi i64* [ %34, %31 ], [ %41, %35 ]
  %51 = load i64, i64* %50, align 16
  %52 = add i64 %51, -41416
  %53 = inttoptr i64 %52 to %"class.v8::internal::Isolate"*
  %54 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %53, i64 0, i32 0, i32 7, i32 0, i64 4
  %55 = load i64, i64* %54, align 8
  br label %56

56:                                               ; preds = %49, %35
  %57 = phi i64 [ %55, %49 ], [ %28, %35 ]
  %58 = trunc i64 %57 to i32
  %59 = icmp eq i32 %58, %21
  br i1 %59, label %110, label %22

60:                                               ; preds = %2, %106
  %61 = phi i64 [ %107, %106 ], [ %1, %2 ]
  %62 = add i64 %61, 19
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i64
  %66 = or i64 %12, %65
  %67 = and i64 %65, 1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %60
  %70 = load i8, i8* %17, align 8, !range !3
  br label %91

71:                                               ; preds = %60
  %72 = add i64 %66, -1
  %73 = inttoptr i64 %72 to i32*
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = load i8, i8* %17, align 8, !range !3
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %77, label %85

77:                                               ; preds = %71
  %78 = and i64 %61, -262144
  %79 = or i64 %78, 16
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80, align 16
  %82 = add i64 %81, -41416
  %83 = inttoptr i64 %82 to %"class.v8::internal::Isolate"*
  %84 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %83, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %85

85:                                               ; preds = %77, %71
  %86 = phi i64* [ %84, %77 ], [ %18, %71 ]
  %87 = getelementptr inbounds i64, i64* %86, i64 10
  %88 = load i64, i64* %87, align 8
  %89 = trunc i64 %88 to i32
  %90 = icmp eq i32 %74, %89
  br i1 %90, label %106, label %91

91:                                               ; preds = %69, %85
  %92 = phi i8 [ %70, %69 ], [ %75, %85 ]
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %102

94:                                               ; preds = %91
  %95 = and i64 %61, -262144
  %96 = or i64 %95, 16
  %97 = inttoptr i64 %96 to i64*
  %98 = load i64, i64* %97, align 16
  %99 = add i64 %98, -41416
  %100 = inttoptr i64 %99 to %"class.v8::internal::Isolate"*
  %101 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %100, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %102

102:                                              ; preds = %94, %91
  %103 = phi i64* [ %101, %94 ], [ %18, %91 ]
  %104 = getelementptr inbounds i64, i64* %103, i64 4
  %105 = load i64, i64* %104, align 8
  br label %106

106:                                              ; preds = %102, %85
  %107 = phi i64 [ %105, %102 ], [ %66, %85 ]
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, %21
  br i1 %109, label %110, label %60

110:                                              ; preds = %106, %56
  %111 = phi i64 [ %23, %56 ], [ %61, %106 ]
  %112 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %111, i64* %112, align 8
  %113 = add i64 %111, 11
  %114 = inttoptr i64 %113 to i32*
  %115 = load atomic i32, i32* %114 acquire, align 4
  %116 = and i32 %115, 16777216
  %117 = icmp eq i32 %116, 0
  %118 = load i64, i64* %112, align 8
  br i1 %117, label %219, label %119

119:                                              ; preds = %110
  %120 = and i64 %118, -4294967296
  %121 = add i64 %118, 19
  %122 = inttoptr i64 %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = zext i32 %123 to i64
  %125 = or i64 %120, %124
  %126 = and i64 %124, 1
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %198, label %128

128:                                              ; preds = %119
  %129 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %130 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %129, null
  %131 = and i64 %118, -262144
  %132 = or i64 %131, 16
  %133 = inttoptr i64 %132 to i64*
  br i1 %130, label %163, label %134

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %129, i64 0, i32 0, i32 1
  %136 = load i8, i8* %135, align 8, !range !3
  %137 = icmp eq i8 %136, 0
  br i1 %137, label %142, label %138

138:                                              ; preds = %134
  %139 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %129, i64 0, i32 1, i64 10
  %140 = load i64, i64* %139, align 8
  %141 = trunc i64 %140 to i32
  br label %184

142:                                              ; preds = %134
  %143 = load i64, i64* %133, align 16
  %144 = add i64 %143, -41416
  %145 = inttoptr i64 %144 to %"class.v8::internal::Isolate"*
  %146 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %145, i64 0, i32 0, i32 7, i32 0, i64 10
  %147 = load i64, i64* %146, align 8
  %148 = trunc i64 %147 to i32
  br label %149

149:                                              ; preds = %155, %142
  %150 = phi i64 [ %160, %155 ], [ %125, %142 ]
  %151 = add i64 %150, -1
  %152 = inttoptr i64 %151 to i32*
  %153 = load atomic i32, i32* %152 monotonic, align 4
  %154 = icmp eq i32 %153, %148
  br i1 %154, label %155, label %198

155:                                              ; preds = %149
  %156 = add i64 %150, 19
  %157 = inttoptr i64 %156 to i32*
  %158 = load i32, i32* %157, align 4
  %159 = zext i32 %158 to i64
  %160 = or i64 %120, %159
  %161 = and i64 %159, 1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %198, label %149

163:                                              ; preds = %128
  %164 = load i64, i64* %133, align 16
  %165 = add i64 %164, -41416
  %166 = inttoptr i64 %165 to %"class.v8::internal::Isolate"*
  %167 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %166, i64 0, i32 0, i32 7, i32 0, i64 10
  %168 = load i64, i64* %167, align 8
  %169 = trunc i64 %168 to i32
  br label %170

170:                                              ; preds = %176, %163
  %171 = phi i64 [ %181, %176 ], [ %125, %163 ]
  %172 = add i64 %171, -1
  %173 = inttoptr i64 %172 to i32*
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = icmp eq i32 %174, %169
  br i1 %175, label %176, label %198

176:                                              ; preds = %170
  %177 = add i64 %171, 19
  %178 = inttoptr i64 %177 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = zext i32 %179 to i64
  %181 = or i64 %120, %180
  %182 = and i64 %180, 1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %198, label %170

184:                                              ; preds = %190, %138
  %185 = phi i64 [ %195, %190 ], [ %125, %138 ]
  %186 = add i64 %185, -1
  %187 = inttoptr i64 %186 to i32*
  %188 = load atomic i32, i32* %187 monotonic, align 4
  %189 = icmp eq i32 %188, %141
  br i1 %189, label %190, label %198

190:                                              ; preds = %184
  %191 = add i64 %185, 19
  %192 = inttoptr i64 %191 to i32*
  %193 = load i32, i32* %192, align 4
  %194 = zext i32 %193 to i64
  %195 = or i64 %120, %194
  %196 = and i64 %194, 1
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %198, label %184

198:                                              ; preds = %184, %190, %149, %155, %170, %176, %119
  %199 = phi i64 [ %125, %119 ], [ %181, %176 ], [ %171, %170 ], [ %150, %149 ], [ %160, %155 ], [ %185, %184 ], [ %195, %190 ]
  %200 = and i64 %199, -4294967296
  %201 = add i64 %199, 27
  %202 = inttoptr i64 %201 to i32*
  %203 = load atomic i32, i32* %202 acquire, align 4
  %204 = zext i32 %203 to i64
  %205 = or i64 %200, %204
  %206 = add i64 %205, 10
  %207 = inttoptr i64 %206 to i8*
  %208 = load i8, i8* %207, align 1
  %209 = load i64, i64* %9, align 8
  %210 = add i64 %209, 10
  %211 = inttoptr i64 %210 to i8*
  %212 = load i8, i8* %211, align 1
  %213 = xor i8 %212, %208
  %214 = icmp ult i8 %213, 4
  br i1 %214, label %215, label %556

215:                                              ; preds = %198
  %216 = load atomic i32, i32* %202 acquire, align 4
  %217 = zext i32 %216 to i64
  %218 = or i64 %200, %217
  br label %556

219:                                              ; preds = %110
  %220 = call zeroext i1 @_ZNK2v88internal3Map25EquivalentToForTransitionES1_(%"class.v8::internal::Map"* nonnull %5, i64 %118)
  br i1 %220, label %221, label %556

221:                                              ; preds = %219
  %222 = add i64 %118, 10
  %223 = inttoptr i64 %222 to i8*
  %224 = load i8, i8* %223, align 1
  %225 = lshr i8 %224, 2
  %226 = load i64, i64* %9, align 8
  %227 = add i64 %226, 10
  %228 = inttoptr i64 %227 to i8*
  %229 = load i8, i8* %228, align 1
  %230 = add i64 %118, 11
  %231 = inttoptr i64 %230 to i32*
  %232 = load atomic i32, i32* %231 monotonic, align 4
  %233 = and i32 %232, 134217728
  %234 = icmp ne i32 %233, 0
  %235 = add i64 %226, 11
  %236 = inttoptr i64 %235 to i32*
  %237 = load atomic i32, i32* %236 monotonic, align 4
  %238 = and i32 %237, 134217728
  %239 = icmp ne i32 %238, 0
  %240 = xor i1 %234, %239
  br i1 %240, label %241, label %488

241:                                              ; preds = %221
  %242 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo", %"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %242) #6
  store i8 0, i8* %242, align 8, !alias.scope !4
  %243 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo", %"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo"* %7, i64 0, i32 1
  store i32 0, i32* %243, align 4, !alias.scope !4
  %244 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo", %"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %226, i64* %244, align 8, !alias.scope !4
  %245 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo", %"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo"* %7, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %245, align 8, !alias.scope !4
  %246 = load i64, i64* %11, align 8, !noalias !4
  %247 = add i64 %226, 19
  %248 = inttoptr i64 %247 to i32*
  %249 = load i32, i32* %248, align 4, !noalias !4
  %250 = and i64 %246, 4294967295
  %251 = icmp eq i64 %250, 0
  tail call void @llvm.assume(i1 %251) #6, !noalias !4
  %252 = zext i32 %249 to i64
  %253 = or i64 %246, %252
  %254 = and i64 %252, 1
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %256, label %258

256:                                              ; preds = %241
  %257 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %284

258:                                              ; preds = %241
  %259 = add i64 %253, -1
  %260 = inttoptr i64 %259 to i32*
  %261 = load atomic i32, i32* %260 monotonic, align 4
  %262 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %263 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %262, null
  br i1 %263, label %270, label %264

264:                                              ; preds = %258
  %265 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %262, i64 0, i32 0, i32 1
  %266 = load i8, i8* %265, align 8, !range !3
  %267 = icmp eq i8 %266, 0
  br i1 %267, label %270, label %268

268:                                              ; preds = %264
  %269 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %262, i64 0, i32 1, i64 0
  br label %278

270:                                              ; preds = %264, %258
  %271 = and i64 %226, -262144
  %272 = or i64 %271, 16
  %273 = inttoptr i64 %272 to i64*
  %274 = load i64, i64* %273, align 16
  %275 = add i64 %274, -41416
  %276 = inttoptr i64 %275 to %"class.v8::internal::Isolate"*
  %277 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %276, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %278

278:                                              ; preds = %270, %268
  %279 = phi i64* [ %277, %270 ], [ %269, %268 ]
  %280 = getelementptr inbounds i64, i64* %279, i64 10
  %281 = load i64, i64* %280, align 8
  %282 = trunc i64 %281 to i32
  %283 = icmp eq i32 %261, %282
  br i1 %283, label %305, label %284

284:                                              ; preds = %278, %256
  %285 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %257, %256 ], [ %262, %278 ]
  %286 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %285, null
  br i1 %286, label %293, label %287

287:                                              ; preds = %284
  %288 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %285, i64 0, i32 0, i32 1
  %289 = load i8, i8* %288, align 8, !range !3
  %290 = icmp eq i8 %289, 0
  br i1 %290, label %293, label %291

291:                                              ; preds = %287
  %292 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %285, i64 0, i32 1, i64 0
  br label %301

293:                                              ; preds = %287, %284
  %294 = and i64 %226, -262144
  %295 = or i64 %294, 16
  %296 = inttoptr i64 %295 to i64*
  %297 = load i64, i64* %296, align 16
  %298 = add i64 %297, -41416
  %299 = inttoptr i64 %298 to %"class.v8::internal::Isolate"*
  %300 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %299, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %301

301:                                              ; preds = %293, %291
  %302 = phi i64* [ %300, %293 ], [ %292, %291 ]
  %303 = getelementptr inbounds i64, i64* %302, i64 4
  %304 = load i64, i64* %303, align 8
  br label %305

305:                                              ; preds = %301, %278
  %306 = phi i64 [ %304, %301 ], [ %253, %278 ]
  %307 = bitcast %"class.v8::internal::TransitionsAccessor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %307) #6, !noalias !4
  %308 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %3, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %308, align 8, !noalias !4
  %309 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %3, i64 0, i32 1, i32 0, i32 0
  store i64* null, i64** %309, align 8, !noalias !4
  %310 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %306, i64* %310, align 8, !noalias !4
  %311 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %3, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %311, align 8, !noalias !4
  %312 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %3, i64 0, i32 5
  store i8 0, i8* %312, align 4, !noalias !4
  %313 = add i64 %306, 35
  %314 = inttoptr i64 %313 to i32*
  %315 = load atomic i32, i32* %314 acquire, align 4, !noalias !4
  %316 = zext i32 %315 to i64
  %317 = or i64 %246, %316
  store i64 %317, i64* %311, align 8, !noalias !4
  %318 = and i64 %316, 1
  %319 = icmp eq i64 %318, 0
  %320 = icmp eq i32 %315, 3
  %321 = or i1 %320, %319
  br i1 %321, label %322, label %324

322:                                              ; preds = %305
  %323 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %3, i64 0, i32 4
  store i32 1, i32* %323, align 8, !noalias !4
  br label %352

324:                                              ; preds = %305
  %325 = and i64 %316, 3
  switch i64 %325, label %351 [
    i64 3, label %326
    i64 1, label %328
  ]

326:                                              ; preds = %324
  %327 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %3, i64 0, i32 4
  store i32 3, i32* %327, align 8, !noalias !4
  br label %352

328:                                              ; preds = %324
  %329 = add i64 %317, -1
  %330 = inttoptr i64 %329 to i32*
  %331 = load atomic i32, i32* %330 monotonic, align 4
  %332 = zext i32 %331 to i64
  %333 = or i64 %246, %332
  %334 = add i64 %333, 7
  %335 = inttoptr i64 %334 to i16*
  %336 = load atomic i16, i16* %335 monotonic, align 2
  %337 = icmp eq i16 %336, 160
  br i1 %337, label %338, label %340

338:                                              ; preds = %328
  %339 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %3, i64 0, i32 4
  store i32 4, i32* %339, align 8, !noalias !4
  br label %352

340:                                              ; preds = %328
  %341 = load atomic i32, i32* %330 monotonic, align 4
  %342 = zext i32 %341 to i64
  %343 = or i64 %246, %342
  %344 = add i64 %343, 7
  %345 = inttoptr i64 %344 to i16*
  %346 = load atomic i16, i16* %345 monotonic, align 2
  %347 = icmp eq i16 %346, 110
  %348 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %3, i64 0, i32 4
  br i1 %347, label %349, label %350

349:                                              ; preds = %340
  store i32 0, i32* %348, align 8, !noalias !4
  br label %352

350:                                              ; preds = %340
  store i32 2, i32* %348, align 8, !noalias !4
  br label %352

351:                                              ; preds = %324
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

352:                                              ; preds = %350, %349, %338, %326, %322
  %353 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo", %"struct.v8::internal::(anonymous namespace)::IntegrityLevelTransitionInfo"* %7, i64 0, i32 3
  %354 = call zeroext i1 @_ZN2v88internal19TransitionsAccessor29HasIntegrityLevelTransitionToENS0_3MapEPNS0_6SymbolEPNS0_18PropertyAttributesE(%"class.v8::internal::TransitionsAccessor"* nonnull %3, i64 %226, %"class.v8::internal::Symbol"* %353, i32* %243) #6
  br i1 %354, label %355, label %476

355:                                              ; preds = %352
  %356 = bitcast %"class.v8::internal::TransitionsAccessor"* %4 to i8*
  %357 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 0
  %358 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 1, i32 0, i32 0
  %359 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %360 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 3, i32 0, i32 0
  %361 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 5
  %362 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  br label %363

363:                                              ; preds = %463, %355
  %364 = phi i64 [ %431, %463 ], [ %306, %355 ]
  %365 = add i64 %364, 11
  %366 = inttoptr i64 %365 to i32*
  %367 = load atomic i32, i32* %366 monotonic, align 4
  %368 = and i32 %367, 134217728
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %370, label %466

370:                                              ; preds = %363
  %371 = load i64, i64* %11, align 8, !noalias !4
  %372 = add i64 %364, 19
  %373 = inttoptr i64 %372 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = and i64 %371, 4294967295
  %376 = icmp eq i64 %375, 0
  call void @llvm.assume(i1 %376) #6
  %377 = zext i32 %374 to i64
  %378 = or i64 %371, %377
  %379 = and i64 %377, 1
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %381, label %383

381:                                              ; preds = %370
  %382 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %409

383:                                              ; preds = %370
  %384 = add i64 %378, -1
  %385 = inttoptr i64 %384 to i32*
  %386 = load atomic i32, i32* %385 monotonic, align 4
  %387 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %388 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %387, null
  br i1 %388, label %395, label %389

389:                                              ; preds = %383
  %390 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %387, i64 0, i32 0, i32 1
  %391 = load i8, i8* %390, align 8, !range !3
  %392 = icmp eq i8 %391, 0
  br i1 %392, label %395, label %393

393:                                              ; preds = %389
  %394 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %387, i64 0, i32 1, i64 0
  br label %403

395:                                              ; preds = %389, %383
  %396 = and i64 %364, -262144
  %397 = or i64 %396, 16
  %398 = inttoptr i64 %397 to i64*
  %399 = load i64, i64* %398, align 16
  %400 = add i64 %399, -41416
  %401 = inttoptr i64 %400 to %"class.v8::internal::Isolate"*
  %402 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %401, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %403

403:                                              ; preds = %395, %393
  %404 = phi i64* [ %402, %395 ], [ %394, %393 ]
  %405 = getelementptr inbounds i64, i64* %404, i64 10
  %406 = load i64, i64* %405, align 8
  %407 = trunc i64 %406 to i32
  %408 = icmp eq i32 %386, %407
  br i1 %408, label %430, label %409

409:                                              ; preds = %403, %381
  %410 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %382, %381 ], [ %387, %403 ]
  %411 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %410, null
  br i1 %411, label %418, label %412

412:                                              ; preds = %409
  %413 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %410, i64 0, i32 0, i32 1
  %414 = load i8, i8* %413, align 8, !range !3
  %415 = icmp eq i8 %414, 0
  br i1 %415, label %418, label %416

416:                                              ; preds = %412
  %417 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %410, i64 0, i32 1, i64 0
  br label %426

418:                                              ; preds = %412, %409
  %419 = and i64 %364, -262144
  %420 = or i64 %419, 16
  %421 = inttoptr i64 %420 to i64*
  %422 = load i64, i64* %421, align 16
  %423 = add i64 %422, -41416
  %424 = inttoptr i64 %423 to %"class.v8::internal::Isolate"*
  %425 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %424, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %426

426:                                              ; preds = %418, %416
  %427 = phi i64* [ %425, %418 ], [ %417, %416 ]
  %428 = getelementptr inbounds i64, i64* %427, i64 4
  %429 = load i64, i64* %428, align 8
  br label %430

430:                                              ; preds = %426, %403
  %431 = phi i64 [ %429, %426 ], [ %378, %403 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %356) #6, !noalias !4
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %357, align 8, !noalias !4
  store i64* null, i64** %358, align 8, !noalias !4
  store i64 %431, i64* %359, align 8, !noalias !4
  store i64 0, i64* %360, align 8, !noalias !4
  store i8 0, i8* %361, align 4, !noalias !4
  %432 = add i64 %431, 35
  %433 = inttoptr i64 %432 to i32*
  %434 = load atomic i32, i32* %433 acquire, align 4
  %435 = zext i32 %434 to i64
  %436 = or i64 %371, %435
  store i64 %436, i64* %360, align 8, !noalias !4
  %437 = and i64 %435, 1
  %438 = icmp eq i64 %437, 0
  %439 = icmp eq i32 %434, 3
  %440 = or i1 %439, %438
  br i1 %440, label %463, label %441

441:                                              ; preds = %430
  %442 = and i64 %435, 3
  switch i64 %442, label %462 [
    i64 3, label %463
    i64 1, label %443
  ]

443:                                              ; preds = %441
  %444 = add i64 %436, -1
  %445 = inttoptr i64 %444 to i32*
  %446 = load atomic i32, i32* %445 monotonic, align 4
  %447 = zext i32 %446 to i64
  %448 = or i64 %371, %447
  %449 = add i64 %448, 7
  %450 = inttoptr i64 %449 to i16*
  %451 = load atomic i16, i16* %450 monotonic, align 2
  %452 = icmp eq i16 %451, 160
  br i1 %452, label %463, label %453

453:                                              ; preds = %443
  %454 = load atomic i32, i32* %445 monotonic, align 4
  %455 = zext i32 %454 to i64
  %456 = or i64 %371, %455
  %457 = add i64 %456, 7
  %458 = inttoptr i64 %457 to i16*
  %459 = load atomic i16, i16* %458 monotonic, align 2
  %460 = icmp eq i16 %459, 110
  %461 = select i1 %460, i32 0, i32 2
  br label %463

462:                                              ; preds = %441
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

463:                                              ; preds = %453, %443, %441, %430
  %464 = phi i32 [ 1, %430 ], [ 3, %441 ], [ 4, %443 ], [ %461, %453 ]
  store i32 %464, i32* %362, align 8, !noalias !4
  %465 = call zeroext i1 @_ZN2v88internal19TransitionsAccessor29HasIntegrityLevelTransitionToENS0_3MapEPNS0_6SymbolEPNS0_18PropertyAttributesE(%"class.v8::internal::TransitionsAccessor"* nonnull %4, i64 %364, %"class.v8::internal::Symbol"* null, i32* null) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %356) #6, !noalias !4
  br i1 %465, label %363, label %476

466:                                              ; preds = %363
  %467 = inttoptr i64 %365 to i32*
  %468 = load atomic i32, i32* %236 acquire, align 4
  %469 = load atomic i32, i32* %467 acquire, align 4
  %470 = xor i32 %469, %468
  %471 = and i32 %470, 1047552
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %474, label %473, !prof !2

473:                                              ; preds = %466
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.29, i64 0, i64 0)) #7
  unreachable

474:                                              ; preds = %466
  store i8 1, i8* %242, align 8, !alias.scope !4
  store i64 %364, i64* %244, align 8, !alias.scope !4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %307) #6, !noalias !4
  %475 = load i64, i64* %245, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %242) #6
  br label %481

476:                                              ; preds = %463, %352
  %477 = load i8, i8* %242, align 8
  %478 = load i64, i64* %244, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %307) #6, !noalias !4
  %479 = load i64, i64* %245, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %242) #6
  %480 = icmp eq i8 %477, 0
  br i1 %480, label %556, label %481

481:                                              ; preds = %474, %476
  %482 = phi i64 [ %475, %474 ], [ %479, %476 ]
  %483 = phi i8 [ 1, %474 ], [ %477, %476 ]
  %484 = phi i64 [ %364, %474 ], [ %478, %476 ]
  %485 = add i64 %484, 10
  %486 = inttoptr i64 %485 to i8*
  %487 = load i8, i8* %486, align 1
  br label %488

488:                                              ; preds = %481, %221
  %489 = phi i64 [ %482, %481 ], [ 0, %221 ]
  %490 = phi i64 [ %484, %481 ], [ %226, %221 ]
  %491 = phi i8 [ %483, %481 ], [ 0, %221 ]
  %492 = phi i8 [ %487, %481 ], [ %229, %221 ]
  %493 = lshr i8 %492, 2
  %494 = icmp eq i8 %225, %493
  br i1 %494, label %499, label %495

495:                                              ; preds = %488
  %496 = call i64 @_ZN2v88internal3Map27LookupElementsTransitionMapEPNS0_7IsolateENS0_12ElementsKindE(%"class.v8::internal::Map"* nonnull %6, %"class.v8::internal::Isolate"* %0, i8 zeroext %493)
  store i64 %496, i64* %112, align 8
  %497 = trunc i64 %496 to i32
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %556, label %499

499:                                              ; preds = %488, %495
  %500 = call i64 @_ZN2v88internal3Map28TryReplayPropertyTransitionsEPNS0_7IsolateES1_(%"class.v8::internal::Map"* nonnull %6, %"class.v8::internal::Isolate"* %0, i64 %490)
  %501 = trunc i64 %500 to i32
  %502 = icmp eq i32 %501, 0
  br i1 %502, label %556, label %503

503:                                              ; preds = %499
  %504 = icmp eq i8 %491, 0
  br i1 %504, label %556, label %505

505:                                              ; preds = %503
  %506 = bitcast %"class.v8::internal::TransitionsAccessor"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %506) #6
  %507 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %8, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %507, align 8
  %508 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %8, i64 0, i32 1, i32 0, i32 0
  store i64* null, i64** %508, align 8
  %509 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %500, i64* %509, align 8
  %510 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %8, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %510, align 8
  %511 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %8, i64 0, i32 5
  store i8 0, i8* %511, align 4
  %512 = load i64, i64* %11, align 8
  %513 = add i64 %500, 35
  %514 = inttoptr i64 %513 to i32*
  %515 = load atomic i32, i32* %514 acquire, align 4
  %516 = and i64 %512, 4294967295
  %517 = icmp eq i64 %516, 0
  call void @llvm.assume(i1 %517) #6
  %518 = zext i32 %515 to i64
  %519 = or i64 %512, %518
  store i64 %519, i64* %510, align 8
  %520 = and i64 %518, 1
  %521 = icmp eq i64 %520, 0
  %522 = icmp eq i32 %515, 3
  %523 = or i1 %522, %521
  br i1 %523, label %524, label %526

524:                                              ; preds = %505
  %525 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %8, i64 0, i32 4
  store i32 1, i32* %525, align 8
  br label %554

526:                                              ; preds = %505
  %527 = and i64 %518, 3
  switch i64 %527, label %553 [
    i64 3, label %528
    i64 1, label %530
  ]

528:                                              ; preds = %526
  %529 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %8, i64 0, i32 4
  store i32 3, i32* %529, align 8
  br label %554

530:                                              ; preds = %526
  %531 = add i64 %519, -1
  %532 = inttoptr i64 %531 to i32*
  %533 = load atomic i32, i32* %532 monotonic, align 4
  %534 = zext i32 %533 to i64
  %535 = or i64 %512, %534
  %536 = add i64 %535, 7
  %537 = inttoptr i64 %536 to i16*
  %538 = load atomic i16, i16* %537 monotonic, align 2
  %539 = icmp eq i16 %538, 160
  br i1 %539, label %540, label %542

540:                                              ; preds = %530
  %541 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %8, i64 0, i32 4
  store i32 4, i32* %541, align 8
  br label %554

542:                                              ; preds = %530
  %543 = load atomic i32, i32* %532 monotonic, align 4
  %544 = zext i32 %543 to i64
  %545 = or i64 %512, %544
  %546 = add i64 %545, 7
  %547 = inttoptr i64 %546 to i16*
  %548 = load atomic i16, i16* %547 monotonic, align 2
  %549 = icmp eq i16 %548, 110
  %550 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %8, i64 0, i32 4
  br i1 %549, label %551, label %552

551:                                              ; preds = %542
  store i32 0, i32* %550, align 8
  br label %554

552:                                              ; preds = %542
  store i32 2, i32* %550, align 8
  br label %554

553:                                              ; preds = %526
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

554:                                              ; preds = %524, %528, %540, %551, %552
  %555 = call i64 @_ZN2v88internal19TransitionsAccessor13SearchSpecialENS0_6SymbolE(%"class.v8::internal::TransitionsAccessor"* nonnull %8, i64 %489) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %506) #6
  br label %556

556:                                              ; preds = %476, %495, %554, %503, %499, %219, %215, %198
  %557 = phi i64 [ %218, %215 ], [ 0, %198 ], [ 0, %219 ], [ 0, %476 ], [ 0, %495 ], [ 0, %499 ], [ %500, %503 ], [ %555, %554 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #6
  ret i64 %557
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal3Map25EquivalentToForTransitionES1_(%"class.v8::internal::Map"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::DescriptorArray", align 8
  %4 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, -4294967296
  %7 = add i64 %5, 19
  %8 = inttoptr i64 %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = or i64 %6, %10
  %12 = and i64 %10, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %84, label %14

14:                                               ; preds = %2
  %15 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %16 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %15, null
  %17 = and i64 %5, -262144
  %18 = or i64 %17, 16
  %19 = inttoptr i64 %18 to i64*
  br i1 %16, label %49, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %15, i64 0, i32 0, i32 1
  %22 = load i8, i8* %21, align 8, !range !3
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %15, i64 0, i32 1, i64 10
  %26 = load i64, i64* %25, align 8
  %27 = trunc i64 %26 to i32
  br label %70

28:                                               ; preds = %20
  %29 = load i64, i64* %19, align 16
  %30 = add i64 %29, -41416
  %31 = inttoptr i64 %30 to %"class.v8::internal::Isolate"*
  %32 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %31, i64 0, i32 0, i32 7, i32 0, i64 10
  %33 = load i64, i64* %32, align 8
  %34 = trunc i64 %33 to i32
  br label %35

35:                                               ; preds = %41, %28
  %36 = phi i64 [ %46, %41 ], [ %11, %28 ]
  %37 = add i64 %36, -1
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = icmp eq i32 %39, %34
  br i1 %40, label %41, label %84

41:                                               ; preds = %35
  %42 = add i64 %36, 19
  %43 = inttoptr i64 %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %6, %45
  %47 = and i64 %45, 1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %84, label %35

49:                                               ; preds = %14
  %50 = load i64, i64* %19, align 16
  %51 = add i64 %50, -41416
  %52 = inttoptr i64 %51 to %"class.v8::internal::Isolate"*
  %53 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %52, i64 0, i32 0, i32 7, i32 0, i64 10
  %54 = load i64, i64* %53, align 8
  %55 = trunc i64 %54 to i32
  br label %56

56:                                               ; preds = %62, %49
  %57 = phi i64 [ %67, %62 ], [ %11, %49 ]
  %58 = add i64 %57, -1
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = icmp eq i32 %60, %55
  br i1 %61, label %62, label %84

62:                                               ; preds = %56
  %63 = add i64 %57, 19
  %64 = inttoptr i64 %63 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %6, %66
  %68 = and i64 %66, 1
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %84, label %56

70:                                               ; preds = %76, %24
  %71 = phi i64 [ %81, %76 ], [ %11, %24 ]
  %72 = add i64 %71, -1
  %73 = inttoptr i64 %72 to i32*
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = icmp eq i32 %74, %27
  br i1 %75, label %76, label %84

76:                                               ; preds = %70
  %77 = add i64 %71, 19
  %78 = inttoptr i64 %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i64
  %81 = or i64 %6, %80
  %82 = and i64 %80, 1
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %70

84:                                               ; preds = %70, %76, %35, %41, %56, %62, %2
  %85 = phi i64 [ %11, %2 ], [ %67, %62 ], [ %57, %56 ], [ %36, %35 ], [ %46, %41 ], [ %71, %70 ], [ %81, %76 ]
  %86 = and i64 %1, -4294967296
  %87 = add i64 %1, 19
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = or i64 %86, %90
  %92 = and i64 %90, 1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %164, label %94

94:                                               ; preds = %84
  %95 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %96 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %95, null
  %97 = and i64 %1, -262144
  %98 = or i64 %97, 16
  %99 = inttoptr i64 %98 to i64*
  br i1 %96, label %129, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %95, i64 0, i32 0, i32 1
  %102 = load i8, i8* %101, align 8, !range !3
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %108, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %95, i64 0, i32 1, i64 10
  %106 = load i64, i64* %105, align 8
  %107 = trunc i64 %106 to i32
  br label %150

108:                                              ; preds = %100
  %109 = load i64, i64* %99, align 16
  %110 = add i64 %109, -41416
  %111 = inttoptr i64 %110 to %"class.v8::internal::Isolate"*
  %112 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %111, i64 0, i32 0, i32 7, i32 0, i64 10
  %113 = load i64, i64* %112, align 8
  %114 = trunc i64 %113 to i32
  br label %115

115:                                              ; preds = %121, %108
  %116 = phi i64 [ %126, %121 ], [ %91, %108 ]
  %117 = add i64 %116, -1
  %118 = inttoptr i64 %117 to i32*
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = icmp eq i32 %119, %114
  br i1 %120, label %121, label %164

121:                                              ; preds = %115
  %122 = add i64 %116, 19
  %123 = inttoptr i64 %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = zext i32 %124 to i64
  %126 = or i64 %86, %125
  %127 = and i64 %125, 1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %164, label %115

129:                                              ; preds = %94
  %130 = load i64, i64* %99, align 16
  %131 = add i64 %130, -41416
  %132 = inttoptr i64 %131 to %"class.v8::internal::Isolate"*
  %133 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %132, i64 0, i32 0, i32 7, i32 0, i64 10
  %134 = load i64, i64* %133, align 8
  %135 = trunc i64 %134 to i32
  br label %136

136:                                              ; preds = %142, %129
  %137 = phi i64 [ %147, %142 ], [ %91, %129 ]
  %138 = add i64 %137, -1
  %139 = inttoptr i64 %138 to i32*
  %140 = load atomic i32, i32* %139 monotonic, align 4
  %141 = icmp eq i32 %140, %135
  br i1 %141, label %142, label %164

142:                                              ; preds = %136
  %143 = add i64 %137, 19
  %144 = inttoptr i64 %143 to i32*
  %145 = load i32, i32* %144, align 4
  %146 = zext i32 %145 to i64
  %147 = or i64 %86, %146
  %148 = and i64 %146, 1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %164, label %136

150:                                              ; preds = %156, %104
  %151 = phi i64 [ %161, %156 ], [ %91, %104 ]
  %152 = add i64 %151, -1
  %153 = inttoptr i64 %152 to i32*
  %154 = load atomic i32, i32* %153 monotonic, align 4
  %155 = icmp eq i32 %154, %107
  br i1 %155, label %156, label %164

156:                                              ; preds = %150
  %157 = add i64 %151, 19
  %158 = inttoptr i64 %157 to i32*
  %159 = load i32, i32* %158, align 4
  %160 = zext i32 %159 to i64
  %161 = or i64 %86, %160
  %162 = and i64 %160, 1
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %150

164:                                              ; preds = %150, %156, %115, %121, %136, %142, %84
  %165 = phi i64 [ %91, %84 ], [ %147, %142 ], [ %137, %136 ], [ %116, %115 ], [ %126, %121 ], [ %151, %150 ], [ %161, %156 ]
  %166 = trunc i64 %85 to i32
  %167 = trunc i64 %165 to i32
  %168 = icmp eq i32 %166, %167
  br i1 %168, label %170, label %169, !prof !2

169:                                              ; preds = %164
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.23, i64 0, i64 0)) #7
  unreachable

170:                                              ; preds = %164
  %171 = add i64 %5, 7
  %172 = inttoptr i64 %171 to i16*
  %173 = load atomic i16, i16* %172 monotonic, align 2
  %174 = add i64 %1, 7
  %175 = inttoptr i64 %174 to i16*
  %176 = load atomic i16, i16* %175 monotonic, align 2
  %177 = icmp eq i16 %173, %176
  br i1 %177, label %179, label %178, !prof !2

178:                                              ; preds = %170
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.24, i64 0, i64 0)) #7
  unreachable

179:                                              ; preds = %170
  %180 = add i64 %5, 9
  %181 = inttoptr i64 %180 to i8*
  %182 = load i8, i8* %181, align 1
  %183 = add i64 %1, 9
  %184 = inttoptr i64 %183 to i8*
  %185 = load i8, i8* %184, align 1
  %186 = icmp eq i8 %182, %185
  br i1 %186, label %187, label %239

187:                                              ; preds = %179
  %188 = add i64 %5, 10
  %189 = inttoptr i64 %188 to i8*
  %190 = load i8, i8* %189, align 1
  %191 = and i8 %190, 1
  %192 = icmp ne i8 %191, 0
  %193 = add i64 %1, 10
  %194 = inttoptr i64 %193 to i8*
  %195 = load i8, i8* %194, align 1
  %196 = and i8 %195, 1
  %197 = icmp ne i8 %196, 0
  %198 = xor i1 %192, %197
  br i1 %198, label %239, label %199

199:                                              ; preds = %187
  %200 = add i64 %5, 15
  %201 = inttoptr i64 %200 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = add i64 %1, 15
  %204 = inttoptr i64 %203 to i32*
  %205 = load i32, i32* %204, align 4
  %206 = icmp eq i32 %202, %205
  br i1 %206, label %207, label %239

207:                                              ; preds = %199
  %208 = load atomic i16, i16* %172 monotonic, align 2
  %209 = add i16 %208, -1059
  %210 = icmp ult i16 %209, 15
  br i1 %210, label %211, label %239

211:                                              ; preds = %207
  %212 = add i64 %5, 11
  %213 = inttoptr i64 %212 to i32*
  %214 = load atomic i32, i32* %213 acquire, align 4
  %215 = lshr i32 %214, 10
  %216 = and i32 %215, 1023
  %217 = add i64 %1, 11
  %218 = inttoptr i64 %217 to i32*
  %219 = load atomic i32, i32* %218 acquire, align 4
  %220 = lshr i32 %219, 10
  %221 = and i32 %220, 1023
  %222 = icmp ult i32 %221, %216
  %223 = select i1 %222, i32 %221, i32 %216
  %224 = bitcast %"class.v8::internal::DescriptorArray"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #6
  %225 = load i64, i64* %4, align 8
  %226 = and i64 %225, -4294967296
  %227 = add i64 %225, 23
  %228 = inttoptr i64 %227 to i32*
  %229 = load i32, i32* %228, align 4
  %230 = zext i32 %229 to i64
  %231 = or i64 %226, %230
  %232 = getelementptr inbounds %"class.v8::internal::DescriptorArray", %"class.v8::internal::DescriptorArray"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %231, i64* %232, align 8
  %233 = add i64 %1, 23
  %234 = inttoptr i64 %233 to i32*
  %235 = load i32, i32* %234, align 4
  %236 = zext i32 %235 to i64
  %237 = or i64 %86, %236
  %238 = call zeroext i1 @_ZN2v88internal15DescriptorArray11IsEqualUpToES1_i(%"class.v8::internal::DescriptorArray"* nonnull %3, i64 %237, i32 %223) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #6
  br label %239

239:                                              ; preds = %199, %207, %187, %179, %211
  %240 = phi i1 [ %238, %211 ], [ false, %179 ], [ false, %187 ], [ false, %199 ], [ true, %207 ]
  ret i1 %240
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal3Map27LookupElementsTransitionMapEPNS0_7IsolateENS0_12ElementsKindE(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %5 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 10
  %8 = inttoptr i64 %7 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = lshr i8 %9, 2
  %11 = icmp eq i8 %10, %2
  br i1 %11, label %75, label %12

12:                                               ; preds = %3
  %13 = bitcast %"class.v8::internal::TransitionsAccessor"* %4 to i8*
  %14 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 1, i32 0, i32 0
  %16 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 3, i32 0, i32 0
  %18 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 5
  %19 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 4
  %20 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  %21 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 481
  br label %22

22:                                               ; preds = %12, %67
  %23 = phi i64 [ %61, %67 ], [ %6, %12 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %13) #6
  store %"class.v8::internal::Isolate"* %1, %"class.v8::internal::Isolate"** %14, align 8
  store i64* null, i64** %15, align 8
  store i64 %23, i64* %16, align 8
  store i64 0, i64* %17, align 8
  store i8 0, i8* %18, align 4
  %24 = load i64, i64* %19, align 8
  %25 = add i64 %23, 35
  %26 = inttoptr i64 %25 to i32*
  %27 = load atomic i32, i32* %26 acquire, align 4
  %28 = and i64 %24, 4294967295
  %29 = icmp eq i64 %28, 0
  call void @llvm.assume(i1 %29) #6
  %30 = zext i32 %27 to i64
  %31 = or i64 %24, %30
  store i64 %31, i64* %17, align 8
  %32 = and i64 %30, 1
  %33 = icmp eq i64 %32, 0
  %34 = icmp eq i32 %27, 3
  %35 = or i1 %34, %33
  br i1 %35, label %58, label %36

36:                                               ; preds = %22
  %37 = and i64 %30, 3
  switch i64 %37, label %57 [
    i64 3, label %58
    i64 1, label %38
  ]

38:                                               ; preds = %36
  %39 = add i64 %31, -1
  %40 = inttoptr i64 %39 to i32*
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = zext i32 %41 to i64
  %43 = or i64 %24, %42
  %44 = add i64 %43, 7
  %45 = inttoptr i64 %44 to i16*
  %46 = load atomic i16, i16* %45 monotonic, align 2
  %47 = icmp eq i16 %46, 160
  br i1 %47, label %58, label %48

48:                                               ; preds = %38
  %49 = load atomic i32, i32* %40 monotonic, align 4
  %50 = zext i32 %49 to i64
  %51 = or i64 %24, %50
  %52 = add i64 %51, 7
  %53 = inttoptr i64 %52 to i16*
  %54 = load atomic i16, i16* %53 monotonic, align 2
  %55 = icmp eq i16 %54, 110
  %56 = select i1 %55, i32 0, i32 2
  br label %58

57:                                               ; preds = %36
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

58:                                               ; preds = %48, %38, %36, %22
  %59 = phi i32 [ 1, %22 ], [ 3, %36 ], [ 4, %38 ], [ %56, %48 ]
  store i32 %59, i32* %20, align 8
  %60 = load i64, i64* %21, align 8
  %61 = call i64 @_ZN2v88internal19TransitionsAccessor13SearchSpecialENS0_6SymbolE(%"class.v8::internal::TransitionsAccessor"* nonnull %4, i64 %60) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %13) #6
  %62 = trunc i64 %61 to i32
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %67

64:                                               ; preds = %58
  %65 = add i64 %23, 10
  %66 = inttoptr i64 %65 to i8*
  br label %75

67:                                               ; preds = %58
  %68 = add i64 %61, 10
  %69 = inttoptr i64 %68 to i8*
  %70 = load i8, i8* %69, align 1
  %71 = lshr i8 %70, 2
  %72 = icmp eq i8 %71, %2
  br i1 %72, label %73, label %22

73:                                               ; preds = %67
  %74 = inttoptr i64 %68 to i8*
  br label %75

75:                                               ; preds = %73, %64, %3
  %76 = phi i8* [ %8, %3 ], [ %66, %64 ], [ %74, %73 ]
  %77 = phi i64 [ %6, %3 ], [ %23, %64 ], [ %61, %73 ]
  %78 = load i8, i8* %76, align 1
  %79 = lshr i8 %78, 2
  %80 = icmp eq i8 %79, %2
  %81 = select i1 %80, i64 %77, i64 0
  ret i64 %81
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal3Map28TryReplayPropertyTransitionsEPNS0_7IsolateES1_(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %5 = alloca %"class.v8::internal::FieldType", align 8
  %6 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 11
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 acquire, align 4
  %11 = lshr i32 %10, 10
  %12 = and i32 %11, 1023
  %13 = add i64 %2, 11
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 acquire, align 4
  %16 = lshr i32 %15, 10
  %17 = and i32 %16, 1023
  %18 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = add i64 %2, 23
  %21 = inttoptr i64 %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = and i64 %19, 4294967295
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #6
  %25 = zext i32 %22 to i64
  %26 = or i64 %19, %25
  %27 = load i64, i64* %6, align 8
  %28 = zext i32 %17 to i64
  %29 = icmp eq i32 %12, %17
  br i1 %29, label %208, label %30

30:                                               ; preds = %3
  %31 = zext i32 %12 to i64
  %32 = bitcast %"class.v8::internal::TransitionsAccessor"* %4 to i8*
  %33 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 0
  %34 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 1, i32 0, i32 0
  %35 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %36 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 3, i32 0, i32 0
  %37 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 5
  %38 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  %39 = add i64 %26, -1
  %40 = bitcast %"class.v8::internal::FieldType"* %5 to i8*
  %41 = getelementptr inbounds %"class.v8::internal::FieldType", %"class.v8::internal::FieldType"* %5, i64 0, i32 0, i32 0, i32 0
  br label %42

42:                                               ; preds = %206, %30
  %43 = phi i64 [ %19, %30 ], [ %207, %206 ]
  %44 = phi i64 [ %27, %30 ], [ %97, %206 ]
  %45 = phi i64 [ %31, %30 ], [ %204, %206 ]
  %46 = mul i64 %45, 51539607552
  %47 = add i64 %46, 68719476736
  %48 = ashr exact i64 %47, 32
  %49 = or i64 %48, 3
  %50 = add i64 %49, %26
  %51 = inttoptr i64 %50 to i32*
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = ashr i32 %52, 1
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %32) #6
  store %"class.v8::internal::Isolate"* %1, %"class.v8::internal::Isolate"** %33, align 8
  store i64* null, i64** %34, align 8
  store i64 %44, i64* %35, align 8
  store i64 0, i64* %36, align 8
  store i8 0, i8* %37, align 4
  %54 = add i64 %44, 35
  %55 = inttoptr i64 %54 to i32*
  %56 = load atomic i32, i32* %55 acquire, align 4
  %57 = and i64 %43, 4294967295
  %58 = icmp eq i64 %57, 0
  call void @llvm.assume(i1 %58) #6
  %59 = zext i32 %56 to i64
  %60 = or i64 %43, %59
  store i64 %60, i64* %36, align 8
  %61 = and i64 %59, 1
  %62 = icmp eq i64 %61, 0
  %63 = icmp eq i32 %56, 3
  %64 = or i1 %63, %62
  br i1 %64, label %87, label %65

65:                                               ; preds = %42
  %66 = and i64 %59, 3
  switch i64 %66, label %86 [
    i64 3, label %87
    i64 1, label %67
  ]

67:                                               ; preds = %65
  %68 = add i64 %60, -1
  %69 = inttoptr i64 %68 to i32*
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = zext i32 %70 to i64
  %72 = or i64 %43, %71
  %73 = add i64 %72, 7
  %74 = inttoptr i64 %73 to i16*
  %75 = load atomic i16, i16* %74 monotonic, align 2
  %76 = icmp eq i16 %75, 160
  br i1 %76, label %87, label %77

77:                                               ; preds = %67
  %78 = load atomic i32, i32* %69 monotonic, align 4
  %79 = zext i32 %78 to i64
  %80 = or i64 %43, %79
  %81 = add i64 %80, 7
  %82 = inttoptr i64 %81 to i16*
  %83 = load atomic i16, i16* %82 monotonic, align 2
  %84 = icmp eq i16 %83, 110
  %85 = select i1 %84, i32 0, i32 2
  br label %87

86:                                               ; preds = %65
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

87:                                               ; preds = %77, %67, %65, %42
  %88 = phi i32 [ 1, %42 ], [ 3, %65 ], [ 4, %67 ], [ %85, %77 ]
  store i32 %88, i32* %38, align 8
  %89 = add i64 %39, %48
  %90 = inttoptr i64 %89 to i32*
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = zext i32 %91 to i64
  %93 = or i64 %19, %92
  %94 = and i32 %53, 1
  %95 = lshr i32 %53, 3
  %96 = and i32 %95, 7
  %97 = call i64 @_ZN2v88internal19TransitionsAccessor16SearchTransitionENS0_4NameENS0_12PropertyKindENS0_18PropertyAttributesE(%"class.v8::internal::TransitionsAccessor"* nonnull %4, i64 %93, i32 %94, i32 %96) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %32) #6
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %217, label %100

100:                                              ; preds = %87
  %101 = load i64, i64* %18, align 8
  %102 = add i64 %97, 23
  %103 = inttoptr i64 %102 to i32*
  %104 = load i32, i32* %103, align 4
  %105 = and i64 %101, 4294967295
  %106 = icmp eq i64 %105, 0
  call void @llvm.assume(i1 %106) #6
  %107 = zext i32 %104 to i64
  %108 = or i64 %101, %107
  %109 = add i64 %108, %49
  %110 = inttoptr i64 %109 to i32*
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %52, 8
  %113 = and i32 %111, 8
  %114 = icmp eq i32 %113, 0
  %115 = icmp ne i32 %112, 0
  %116 = or i1 %115, %114
  br i1 %116, label %117, label %217

117:                                              ; preds = %100
  %118 = lshr i32 %111, 7
  %119 = lshr i32 %53, 6
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 7
  %122 = trunc i32 %118 to i8
  %123 = and i8 %122, 7
  switch i8 %123, label %125 [
    i8 5, label %127
    i8 3, label %124
  ]

124:                                              ; preds = %117
  switch i8 %121, label %217 [
    i8 3, label %129
    i8 0, label %129
  ]

125:                                              ; preds = %117
  %126 = icmp ult i8 %123, %121
  br i1 %126, label %217, label %129

127:                                              ; preds = %117
  %128 = icmp eq i8 %121, 5
  br i1 %128, label %129, label %217

129:                                              ; preds = %124, %124, %125, %127
  %130 = and i32 %111, 4
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %191

132:                                              ; preds = %129
  %133 = and i32 %111, 2
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %190

135:                                              ; preds = %132
  %136 = add nsw i64 %48, 7
  %137 = add i64 %108, %136
  %138 = inttoptr i64 %137 to i32*
  %139 = load atomic i32, i32* %138 monotonic, align 4
  %140 = zext i32 %139 to i64
  %141 = or i64 %101, %140
  %142 = icmp eq i32 %139, 3
  br i1 %142, label %143, label %145

143:                                              ; preds = %135
  %144 = call i64 @_ZN2v88internal9FieldType4NoneEv() #6
  br label %153

145:                                              ; preds = %135
  %146 = and i64 %140, 3
  %147 = icmp eq i64 %146, 3
  br i1 %147, label %148, label %151

148:                                              ; preds = %145
  %149 = and i64 %141, -3
  %150 = call i64 @_ZN2v88internal9FieldType4castENS0_6ObjectE(i64 %149) #6
  br label %153

151:                                              ; preds = %145
  %152 = call i64 @_ZN2v88internal9FieldType4castENS0_6ObjectE(i64 %141) #6
  br label %153

153:                                              ; preds = %143, %148, %151
  %154 = phi i64 [ %144, %143 ], [ %150, %148 ], [ %152, %151 ]
  %155 = call i64 @_ZN2v88internal9FieldType4NoneEv() #6
  %156 = trunc i64 %154 to i32
  %157 = trunc i64 %155 to i32
  %158 = icmp eq i32 %156, %157
  %159 = icmp eq i8 %123, 3
  %160 = and i1 %159, %158
  br i1 %160, label %217, label %161

161:                                              ; preds = %153
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #6
  %162 = add i64 %136, %26
  %163 = inttoptr i64 %162 to i32*
  %164 = load atomic i32, i32* %163 monotonic, align 4
  %165 = zext i32 %164 to i64
  %166 = or i64 %19, %165
  %167 = icmp eq i32 %164, 3
  br i1 %167, label %168, label %170

168:                                              ; preds = %161
  %169 = call i64 @_ZN2v88internal9FieldType4NoneEv() #6
  br label %178

170:                                              ; preds = %161
  %171 = and i64 %165, 3
  %172 = icmp eq i64 %171, 3
  br i1 %172, label %173, label %176

173:                                              ; preds = %170
  %174 = and i64 %166, -3
  %175 = call i64 @_ZN2v88internal9FieldType4castENS0_6ObjectE(i64 %174) #6
  br label %178

176:                                              ; preds = %170
  %177 = call i64 @_ZN2v88internal9FieldType4castENS0_6ObjectE(i64 %166) #6
  br label %178

178:                                              ; preds = %168, %173, %176
  %179 = phi i64 [ %169, %168 ], [ %175, %173 ], [ %177, %176 ]
  store i64 %179, i64* %41, align 8
  %180 = call i64 @_ZN2v88internal9FieldType4NoneEv() #6
  %181 = trunc i64 %179 to i32
  %182 = trunc i64 %180 to i32
  %183 = icmp eq i32 %181, %182
  %184 = icmp eq i8 %121, 3
  %185 = and i1 %184, %183
  br i1 %185, label %189, label %186

186:                                              ; preds = %178
  %187 = call zeroext i1 @_ZNK2v88internal9FieldType5NowIsES1_(%"class.v8::internal::FieldType"* nonnull %5, i64 %154) #6
  br i1 %187, label %188, label %189

188:                                              ; preds = %186
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #6
  br label %203

189:                                              ; preds = %178, %186
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #6
  br label %217

190:                                              ; preds = %132
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

191:                                              ; preds = %129
  %192 = and i32 %52, 4
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %217, label %194

194:                                              ; preds = %191
  %195 = add nsw i64 %48, 7
  %196 = add i64 %195, %26
  %197 = inttoptr i64 %196 to i32*
  %198 = load atomic i32, i32* %197 monotonic, align 4
  %199 = add i64 %108, %195
  %200 = inttoptr i64 %199 to i32*
  %201 = load atomic i32, i32* %200 monotonic, align 4
  %202 = icmp eq i32 %198, %201
  br i1 %202, label %203, label %217

203:                                              ; preds = %194, %188
  %204 = add i64 %45, 1
  %205 = icmp eq i64 %204, %28
  br i1 %205, label %208, label %206

206:                                              ; preds = %203
  %207 = load i64, i64* %18, align 8
  br label %42

208:                                              ; preds = %203, %3
  %209 = phi i64 [ %27, %3 ], [ %97, %203 ]
  %210 = add i64 %209, 11
  %211 = inttoptr i64 %210 to i32*
  %212 = load atomic i32, i32* %211 acquire, align 4
  %213 = lshr i32 %212, 10
  %214 = and i32 %213, 1023
  %215 = icmp eq i32 %214, %17
  %216 = select i1 %215, i64 %209, i64 0
  ret i64 %216

217:                                              ; preds = %125, %194, %153, %191, %127, %100, %87, %124, %189
  ret i64 0
}

declare i64 @_ZN2v88internal19TransitionsAccessor13SearchSpecialENS0_6SymbolE(%"class.v8::internal::TransitionsAccessor"*, i64) local_unnamed_addr #3

declare i64 @_ZN2v88internal19TransitionsAccessor16SearchTransitionENS0_4NameENS0_12PropertyKindENS0_18PropertyAttributesE(%"class.v8::internal::TransitionsAccessor"*, i64, i32, i32) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal9FieldType5NowIsES1_(%"class.v8::internal::FieldType"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map6UpdateEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::MapUpdater", align 8
  %4 = load i64, i64* %1, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 acquire, align 4
  %8 = and i32 %7, 16777216
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = bitcast %"class.v8::internal::MapUpdater"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %11) #6
  call void @_ZN2v88internal10MapUpdaterC1EPNS0_7IsolateENS0_6HandleINS0_3MapEEE(%"class.v8::internal::MapUpdater"* nonnull %3, %"class.v8::internal::Isolate"* %0, i64* %1) #6
  %12 = call i64* @_ZN2v88internal10MapUpdater6UpdateEv(%"class.v8::internal::MapUpdater"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %11) #6
  br label %13

13:                                               ; preds = %2, %10
  %14 = phi i64* [ %12, %10 ], [ %1, %2 ]
  ret i64* %14
}

declare void @_ZN2v88internal10MapUpdaterC1EPNS0_7IsolateENS0_6HandleINS0_3MapEEE(%"class.v8::internal::MapUpdater"*, %"class.v8::internal::Isolate"*, i64*) unnamed_addr #3

declare i64* @_ZN2v88internal10MapUpdater6UpdateEv(%"class.v8::internal::MapUpdater"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal3Map21EnsureDescriptorSlackEPNS0_7IsolateENS0_6HandleIS1_EEi(%"class.v8::internal::Isolate"*, i64*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %5 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %6 = alloca %"class.v8::internal::Map", align 8
  %7 = load i64, i64* %1, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %7, 23
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = and i64 %9, 4294967295
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #6
  %15 = zext i32 %12 to i64
  %16 = or i64 %9, %15
  %17 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %18 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %17, align 8
  %19 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %3
  %21 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %18, i64 %16) #6
  br label %35

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %24 = load i64*, i64** %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %26 = load i64*, i64** %25, align 8
  %27 = icmp eq i64* %24, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %30

30:                                               ; preds = %28, %22
  %31 = phi i64* [ %29, %28 ], [ %24, %22 ]
  %32 = ptrtoint i64* %31 to i64
  %33 = add i64 %32, 8
  %34 = inttoptr i64 %33 to i64*
  store i64* %34, i64** %23, align 8
  store i64 %16, i64* %31, align 8
  br label %35

35:                                               ; preds = %20, %30
  %36 = phi i64* [ %21, %20 ], [ %31, %30 ]
  %37 = load i64, i64* %1, align 8
  %38 = add i64 %37, 11
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 acquire, align 4
  %41 = lshr i32 %40, 10
  %42 = and i32 %41, 1023
  %43 = load i64, i64* %36, align 8
  %44 = add i64 %43, 3
  %45 = inttoptr i64 %44 to i16*
  %46 = load atomic i16, i16* %45 monotonic, align 2
  %47 = add i64 %43, 5
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = sub i16 %46, %49
  %51 = sext i16 %50 to i32
  %52 = icmp slt i32 %51, %2
  br i1 %52, label %53, label %292

53:                                               ; preds = %35
  %54 = tail call i64* @_ZN2v88internal15DescriptorArray8CopyUpToEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %36, i32 %42, i32 %2) #6
  %55 = icmp eq i32 %42, 0
  br i1 %55, label %56, label %67

56:                                               ; preds = %53
  %57 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #6
  %58 = load i64, i64* %1, align 8
  %59 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %58, i64* %59, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %4, i64 0, i32 0
  %61 = load i64, i64* %54, align 8
  %62 = add i64 %58, 11
  %63 = inttoptr i64 %62 to i32*
  %64 = load atomic i32, i32* %63 acquire, align 4
  %65 = lshr i32 %64, 10
  %66 = and i32 %65, 1023
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %60, %"class.v8::internal::Isolate"* undef, i64 %61, i32 %66) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #6
  br label %292

67:                                               ; preds = %53
  %68 = load i64, i64* %54, align 8
  %69 = load i64, i64* %36, align 8
  %70 = and i64 %69, -4294967296
  %71 = add i64 %69, 11
  %72 = inttoptr i64 %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = zext i32 %73 to i64
  %75 = or i64 %70, %74
  %76 = add i64 %68, 11
  %77 = inttoptr i64 %76 to i32*
  store atomic volatile i32 %73, i32* %77 monotonic, align 4
  %78 = and i64 %74, 1
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %91, label %80

80:                                               ; preds = %67
  %81 = and i64 %68, -262144
  %82 = or i64 %81, 8
  %83 = inttoptr i64 %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = and i64 %84, 262144
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %91, label %87

87:                                               ; preds = %80
  %88 = or i64 %81, 16
  %89 = inttoptr i64 %88 to %"class.v8::internal::Heap"**
  %90 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %89, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %90, i64 %68, i64 %76, i64 %75) #6
  br label %91

91:                                               ; preds = %87, %80, %67
  %92 = and i64 %75, -262144
  %93 = or i64 %92, 8
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = and i64 %95, 24
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %106, label %98

98:                                               ; preds = %91
  %99 = and i64 %68, -262144
  %100 = or i64 %99, 8
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = and i64 %102, 24
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %98
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %68, i64 %76, i64 %75) #6
  br label %106

106:                                              ; preds = %91, %98, %105
  %107 = load i64, i64* %36, align 8
  %108 = add i64 %107, 5
  %109 = inttoptr i64 %108 to i16*
  %110 = load atomic i16, i16* %109 monotonic, align 2
  %111 = and i64 %107, -262144
  %112 = or i64 %111, 8
  %113 = inttoptr i64 %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = and i64 %114, 262144
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %122, label %117

117:                                              ; preds = %106
  %118 = sext i16 %110 to i32
  %119 = or i64 %111, 16
  %120 = inttoptr i64 %119 to %"class.v8::internal::Heap"**
  %121 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %120, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_15DescriptorArrayEi(%"class.v8::internal::Heap"* %121, i64 %107, i32 %118) #6
  br label %122

122:                                              ; preds = %106, %117
  %123 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #6
  %124 = load i64, i64* %1, align 8
  %125 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %5, i64 0, i32 0
  %127 = load i64, i64* %54, align 8
  %128 = add i64 %124, 11
  %129 = inttoptr i64 %128 to i32*
  %130 = load atomic i32, i32* %129 acquire, align 4
  %131 = lshr i32 %130, 10
  %132 = and i32 %131, 1023
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %126, %"class.v8::internal::Isolate"* undef, i64 %127, i32 %132) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #6
  %133 = load i64, i64* %1, align 8
  %134 = and i64 %133, -4294967296
  %135 = add i64 %133, 19
  %136 = inttoptr i64 %135 to i32*
  %137 = load i32, i32* %136, align 4
  %138 = zext i32 %137 to i64
  %139 = or i64 %134, %138
  %140 = and i64 %138, 1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %144

142:                                              ; preds = %122
  %143 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %170

144:                                              ; preds = %122
  %145 = add i64 %139, -1
  %146 = inttoptr i64 %145 to i32*
  %147 = load atomic i32, i32* %146 monotonic, align 4
  %148 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %149 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %148, null
  br i1 %149, label %156, label %150

150:                                              ; preds = %144
  %151 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %148, i64 0, i32 0, i32 1
  %152 = load i8, i8* %151, align 8, !range !3
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %150
  %155 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %148, i64 0, i32 1, i64 0
  br label %164

156:                                              ; preds = %150, %144
  %157 = and i64 %133, -262144
  %158 = or i64 %157, 16
  %159 = inttoptr i64 %158 to i64*
  %160 = load i64, i64* %159, align 16
  %161 = add i64 %160, -41416
  %162 = inttoptr i64 %161 to %"class.v8::internal::Isolate"*
  %163 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %162, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %164

164:                                              ; preds = %156, %154
  %165 = phi i64* [ %163, %156 ], [ %155, %154 ]
  %166 = getelementptr inbounds i64, i64* %165, i64 10
  %167 = load i64, i64* %166, align 8
  %168 = trunc i64 %167 to i32
  %169 = icmp eq i32 %147, %168
  br i1 %169, label %191, label %170

170:                                              ; preds = %164, %142
  %171 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %143, %142 ], [ %148, %164 ]
  %172 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %171, null
  br i1 %172, label %179, label %173

173:                                              ; preds = %170
  %174 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %171, i64 0, i32 0, i32 1
  %175 = load i8, i8* %174, align 8, !range !3
  %176 = icmp eq i8 %175, 0
  br i1 %176, label %179, label %177

177:                                              ; preds = %173
  %178 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %171, i64 0, i32 1, i64 0
  br label %187

179:                                              ; preds = %173, %170
  %180 = and i64 %133, -262144
  %181 = or i64 %180, 16
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182, align 16
  %184 = add i64 %183, -41416
  %185 = inttoptr i64 %184 to %"class.v8::internal::Isolate"*
  %186 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %185, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %187

187:                                              ; preds = %179, %177
  %188 = phi i64* [ %186, %179 ], [ %178, %177 ]
  %189 = getelementptr inbounds i64, i64* %188, i64 4
  %190 = load i64, i64* %189, align 8
  br label %191

191:                                              ; preds = %164, %187
  %192 = phi i64 [ %190, %187 ], [ %139, %164 ]
  %193 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 4
  %194 = load i64, i64* %193, align 8
  %195 = trunc i64 %192 to i32
  %196 = trunc i64 %194 to i32
  %197 = icmp eq i32 %195, %196
  br i1 %197, label %292, label %198

198:                                              ; preds = %191
  %199 = bitcast %"class.v8::internal::Map"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %199) #6
  %200 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %192, i64* %200, align 8
  %201 = load i64, i64* %8, align 8
  %202 = add i64 %192, 23
  %203 = inttoptr i64 %202 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = and i64 %201, 4294967295
  %206 = icmp eq i64 %205, 0
  tail call void @llvm.assume(i1 %206) #6
  %207 = load i64, i64* %36, align 8
  %208 = trunc i64 %207 to i32
  %209 = icmp eq i32 %204, %208
  br i1 %209, label %210, label %291

210:                                              ; preds = %198, %275
  %211 = phi i64 [ %270, %275 ], [ %192, %198 ]
  %212 = and i64 %211, -4294967296
  %213 = add i64 %211, 19
  %214 = inttoptr i64 %213 to i32*
  %215 = load i32, i32* %214, align 4
  %216 = zext i32 %215 to i64
  %217 = or i64 %212, %216
  %218 = and i64 %216, 1
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %222

220:                                              ; preds = %210
  %221 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %248

222:                                              ; preds = %210
  %223 = add i64 %217, -1
  %224 = inttoptr i64 %223 to i32*
  %225 = load atomic i32, i32* %224 monotonic, align 4
  %226 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %227 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %226, null
  br i1 %227, label %234, label %228

228:                                              ; preds = %222
  %229 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %226, i64 0, i32 0, i32 1
  %230 = load i8, i8* %229, align 8, !range !3
  %231 = icmp eq i8 %230, 0
  br i1 %231, label %234, label %232

232:                                              ; preds = %228
  %233 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %226, i64 0, i32 1, i64 0
  br label %242

234:                                              ; preds = %228, %222
  %235 = and i64 %211, -262144
  %236 = or i64 %235, 16
  %237 = inttoptr i64 %236 to i64*
  %238 = load i64, i64* %237, align 16
  %239 = add i64 %238, -41416
  %240 = inttoptr i64 %239 to %"class.v8::internal::Isolate"*
  %241 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %240, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %242

242:                                              ; preds = %234, %232
  %243 = phi i64* [ %241, %234 ], [ %233, %232 ]
  %244 = getelementptr inbounds i64, i64* %243, i64 10
  %245 = load i64, i64* %244, align 8
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %225, %246
  br i1 %247, label %269, label %248

248:                                              ; preds = %242, %220
  %249 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %221, %220 ], [ %226, %242 ]
  %250 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %249, null
  br i1 %250, label %257, label %251

251:                                              ; preds = %248
  %252 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %249, i64 0, i32 0, i32 1
  %253 = load i8, i8* %252, align 8, !range !3
  %254 = icmp eq i8 %253, 0
  br i1 %254, label %257, label %255

255:                                              ; preds = %251
  %256 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %249, i64 0, i32 1, i64 0
  br label %265

257:                                              ; preds = %251, %248
  %258 = and i64 %211, -262144
  %259 = or i64 %258, 16
  %260 = inttoptr i64 %259 to i64*
  %261 = load i64, i64* %260, align 16
  %262 = add i64 %261, -41416
  %263 = inttoptr i64 %262 to %"class.v8::internal::Isolate"*
  %264 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %263, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %265

265:                                              ; preds = %257, %255
  %266 = phi i64* [ %264, %257 ], [ %256, %255 ]
  %267 = getelementptr inbounds i64, i64* %266, i64 4
  %268 = load i64, i64* %267, align 8
  br label %269

269:                                              ; preds = %242, %265
  %270 = phi i64 [ %268, %265 ], [ %217, %242 ]
  %271 = load i64, i64* %193, align 8
  %272 = trunc i64 %270 to i32
  %273 = trunc i64 %271 to i32
  %274 = icmp eq i32 %272, %273
  br i1 %274, label %291, label %275

275:                                              ; preds = %269
  %276 = load i64, i64* %54, align 8
  %277 = add i64 %211, 11
  %278 = inttoptr i64 %277 to i32*
  %279 = load atomic i32, i32* %278 acquire, align 4
  %280 = lshr i32 %279, 10
  %281 = and i32 %280, 1023
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %6, %"class.v8::internal::Isolate"* undef, i64 %276, i32 %281) #6
  store i64 %270, i64* %200, align 8
  %282 = load i64, i64* %8, align 8
  %283 = add i64 %270, 23
  %284 = inttoptr i64 %283 to i32*
  %285 = load i32, i32* %284, align 4
  %286 = and i64 %282, 4294967295
  %287 = icmp eq i64 %286, 0
  tail call void @llvm.assume(i1 %287) #6
  %288 = load i64, i64* %36, align 8
  %289 = trunc i64 %288 to i32
  %290 = icmp eq i32 %285, %289
  br i1 %290, label %210, label %291

291:                                              ; preds = %275, %269, %198
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %199) #6
  br label %292

292:                                              ; preds = %56, %191, %291, %35
  ret void
}

declare i64* @_ZN2v88internal15DescriptorArray8CopyUpToEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"*, i64*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map18GetObjectCreateMapEPNS0_7IsolateENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, 19
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %17 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %16, align 8
  %18 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %2
  %20 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %17, i64 %15) #6
  %21 = load i64, i64* %20, align 8
  br label %35

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %24 = load i64*, i64** %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %26 = load i64*, i64** %25, align 8
  %27 = icmp eq i64* %24, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %30

30:                                               ; preds = %28, %22
  %31 = phi i64* [ %29, %28 ], [ %24, %22 ]
  %32 = ptrtoint i64* %31 to i64
  %33 = add i64 %32, 8
  %34 = inttoptr i64 %33 to i64*
  store i64* %34, i64** %23, align 8
  store i64 %15, i64* %31, align 8
  br label %35

35:                                               ; preds = %19, %30
  %36 = phi i64 [ %21, %19 ], [ %15, %30 ]
  %37 = and i64 %36, -4294967296
  %38 = add i64 %36, 571
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %37, %41
  %43 = add i64 %42, 27
  %44 = inttoptr i64 %43 to i32*
  %45 = load atomic i32, i32* %44 acquire, align 4
  %46 = zext i32 %45 to i64
  %47 = or i64 %37, %46
  %48 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %16, align 8
  %49 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %35
  %51 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %48, i64 %47) #6
  %52 = load i64, i64* %51, align 8
  br label %66

53:                                               ; preds = %35
  %54 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %55 = load i64*, i64** %54, align 8
  %56 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %57 = load i64*, i64** %56, align 8
  %58 = icmp eq i64* %55, %57
  br i1 %58, label %59, label %61

59:                                               ; preds = %53
  %60 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %61

61:                                               ; preds = %59, %53
  %62 = phi i64* [ %60, %59 ], [ %55, %53 ]
  %63 = ptrtoint i64* %62 to i64
  %64 = add i64 %63, 8
  %65 = inttoptr i64 %64 to i64*
  store i64* %65, i64** %54, align 8
  store i64 %47, i64* %62, align 8
  br label %66

66:                                               ; preds = %50, %61
  %67 = phi i64 [ %52, %50 ], [ %47, %61 ]
  %68 = phi i64* [ %51, %50 ], [ %62, %61 ]
  %69 = add i64 %67, 15
  %70 = inttoptr i64 %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = load i64, i64* %1, align 8
  %73 = trunc i64 %72 to i32
  %74 = icmp eq i32 %71, %73
  br i1 %74, label %230, label %75

75:                                               ; preds = %66
  %76 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 6
  %77 = load i64, i64* %76, align 8
  %78 = trunc i64 %77 to i32
  %79 = icmp eq i32 %73, %78
  br i1 %79, label %80, label %115

80:                                               ; preds = %75
  %81 = load i64, i64* %3, align 8
  %82 = and i64 %81, -4294967296
  %83 = add i64 %81, -1
  %84 = inttoptr i64 %83 to i32*
  %85 = load atomic i32, i32* %84 monotonic, align 4
  %86 = zext i32 %85 to i64
  %87 = or i64 %82, %86
  %88 = add i64 %87, 19
  %89 = inttoptr i64 %88 to i32*
  %90 = load i32, i32* %89, align 4
  %91 = zext i32 %90 to i64
  %92 = or i64 %82, %91
  %93 = add i64 %92, 723
  %94 = inttoptr i64 %93 to i32*
  %95 = load atomic i32, i32* %94 monotonic, align 4
  %96 = zext i32 %95 to i64
  %97 = or i64 %82, %96
  %98 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %16, align 8
  %99 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %98, null
  br i1 %99, label %102, label %100

100:                                              ; preds = %80
  %101 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %98, i64 %97) #6
  br label %230

102:                                              ; preds = %80
  %103 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %104 = load i64*, i64** %103, align 8
  %105 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %106 = load i64*, i64** %105, align 8
  %107 = icmp eq i64* %104, %106
  br i1 %107, label %108, label %110

108:                                              ; preds = %102
  %109 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %110

110:                                              ; preds = %108, %102
  %111 = phi i64* [ %109, %108 ], [ %104, %102 ]
  %112 = ptrtoint i64* %111 to i64
  %113 = add i64 %112, 8
  %114 = inttoptr i64 %113 to i64*
  store i64* %114, i64** %103, align 8
  store i64 %97, i64* %111, align 8
  br label %230

115:                                              ; preds = %75
  %116 = and i64 %72, -4294967296
  %117 = add i64 %72, -1
  %118 = inttoptr i64 %117 to i32*
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = zext i32 %119 to i64
  %121 = or i64 %116, %120
  %122 = add i64 %121, 7
  %123 = inttoptr i64 %122 to i16*
  %124 = load atomic i16, i16* %123 monotonic, align 2
  %125 = icmp ugt i16 %124, 188
  br i1 %125, label %126, label %228

126:                                              ; preds = %115
  %127 = load atomic i32, i32* %118 monotonic, align 4
  %128 = zext i32 %127 to i64
  %129 = or i64 %116, %128
  %130 = add i64 %129, 11
  %131 = inttoptr i64 %130 to i32*
  %132 = load atomic i32, i32* %131 acquire, align 4
  %133 = and i32 %132, 1048576
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %136

135:                                              ; preds = %126
  tail call void @_ZN2v88internal8JSObject19OptimizeAsPrototypeENS0_6HandleIS1_EEb(i64* %1, i1 zeroext true) #6
  br label %136

136:                                              ; preds = %126, %135
  %137 = tail call i64* @_ZN2v88internal3Map24GetOrCreatePrototypeInfoENS0_6HandleINS0_8JSObjectEEEPNS0_7IsolateE(i64* %1, %"class.v8::internal::Isolate"* %0)
  %138 = load i64, i64* %137, align 8
  %139 = add i64 %138, 19
  %140 = inttoptr i64 %139 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = and i32 %141, 3
  %143 = icmp eq i32 %142, 3
  %144 = icmp ne i32 %141, 3
  %145 = and i1 %144, %143
  br i1 %145, label %146, label %168

146:                                              ; preds = %136
  %147 = and i64 %138, -4294967296
  %148 = and i32 %141, -3
  %149 = zext i32 %148 to i64
  %150 = or i64 %147, %149
  %151 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %16, align 8
  %152 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %151, null
  br i1 %152, label %155, label %153

153:                                              ; preds = %146
  %154 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %151, i64 %150) #6
  br label %230

155:                                              ; preds = %146
  %156 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %157 = load i64*, i64** %156, align 8
  %158 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %159 = load i64*, i64** %158, align 8
  %160 = icmp eq i64* %157, %159
  br i1 %160, label %161, label %163

161:                                              ; preds = %155
  %162 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %163

163:                                              ; preds = %161, %155
  %164 = phi i64* [ %162, %161 ], [ %157, %155 ]
  %165 = ptrtoint i64* %164 to i64
  %166 = add i64 %165, 8
  %167 = inttoptr i64 %166 to i64*
  store i64* %167, i64** %156, align 8
  store i64 %150, i64* %164, align 8
  br label %230

168:                                              ; preds = %136
  %169 = load i64, i64* %68, align 8
  %170 = add i64 %169, 3
  %171 = inttoptr i64 %170 to i8*
  %172 = load atomic i8, i8* %171 monotonic, align 1
  %173 = zext i8 %172 to i32
  %174 = shl nuw nsw i32 %173, 2
  %175 = load atomic i8, i8* %171 monotonic, align 1
  %176 = zext i8 %175 to i32
  %177 = add i64 %169, 4
  %178 = inttoptr i64 %177 to i8*
  %179 = load atomic i8, i8* %178 monotonic, align 1
  %180 = zext i8 %179 to i32
  %181 = sub nsw i32 %176, %180
  %182 = add i64 %169, 5
  %183 = inttoptr i64 %182 to i8*
  %184 = load atomic i8, i8* %183 monotonic, align 1
  %185 = zext i8 %184 to i32
  %186 = icmp ugt i8 %184, 2
  br i1 %186, label %187, label %191

187:                                              ; preds = %168
  %188 = load atomic i8, i8* %171 monotonic, align 1
  %189 = zext i8 %188 to i32
  %190 = sub nsw i32 %189, %185
  br label %191

191:                                              ; preds = %168, %187
  %192 = phi i32 [ %190, %187 ], [ %185, %168 ]
  %193 = tail call i64* @_ZN2v88internal3Map14CopyInitialMapEPNS0_7IsolateENS0_6HandleIS1_EEiii(%"class.v8::internal::Isolate"* %0, i64* %68, i32 %174, i32 %181, i32 %192) #6
  tail call void @_ZN2v88internal3Map12SetPrototypeEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10HeapObjectEEEb(%"class.v8::internal::Isolate"* %0, i64* %193, i64* %1, i1 zeroext true)
  %194 = load i64, i64* %137, align 8
  %195 = load i64, i64* %193, align 8
  %196 = add i64 %194, 19
  %197 = inttoptr i64 %196 to i32*
  %198 = trunc i64 %195 to i32
  %199 = or i32 %198, 2
  store atomic volatile i32 %199, i32* %197 release, align 4
  %200 = and i64 %195, 1
  %201 = icmp ne i64 %200, 0
  %202 = icmp ne i32 %199, 3
  %203 = and i1 %201, %202
  br i1 %203, label %204, label %230

204:                                              ; preds = %191
  %205 = and i64 %194, -262144
  %206 = or i64 %205, 8
  %207 = inttoptr i64 %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = and i64 %208, 262144
  %210 = icmp eq i64 %209, 0
  %211 = and i64 %195, -3
  br i1 %210, label %216, label %212

212:                                              ; preds = %204
  %213 = or i64 %205, 16
  %214 = inttoptr i64 %213 to %"class.v8::internal::Heap"**
  %215 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %214, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %215, i64 %194, i64 %196, i64 %211) #6
  br label %216

216:                                              ; preds = %204, %212
  %217 = and i64 %195, -262144
  %218 = or i64 %217, 8
  %219 = inttoptr i64 %218 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = and i64 %220, 24
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %230, label %223

223:                                              ; preds = %216
  %224 = load i64, i64* %207, align 8
  %225 = and i64 %224, 24
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %230

227:                                              ; preds = %223
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %194, i64 %196, i64 %211) #6
  br label %230

228:                                              ; preds = %115
  %229 = tail call i64* @_ZN2v88internal3Map21TransitionToPrototypeEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10HeapObjectEEE(%"class.v8::internal::Isolate"* %0, i64* %68, i64* %1)
  br label %230

230:                                              ; preds = %153, %163, %191, %216, %223, %227, %110, %100, %66, %228
  %231 = phi i64* [ %229, %228 ], [ %68, %66 ], [ %101, %100 ], [ %111, %110 ], [ %154, %153 ], [ %164, %163 ], [ %193, %191 ], [ %193, %216 ], [ %193, %223 ], [ %193, %227 ]
  ret i64* %231
}

declare void @_ZN2v88internal8JSObject19OptimizeAsPrototypeENS0_6HandleIS1_EEb(i64*, i1 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map24GetOrCreatePrototypeInfoENS0_6HandleINS0_8JSObjectEEEPNS0_7IsolateE(i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %0, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, -1
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %9, 35
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = or i64 %4, %13
  %15 = and i64 %13, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %46, label %17

17:                                               ; preds = %2
  %18 = add i64 %14, -1
  %19 = inttoptr i64 %18 to i32*
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %4, %21
  %23 = add i64 %22, 7
  %24 = inttoptr i64 %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = icmp eq i16 %25, 110
  br i1 %26, label %27, label %46

27:                                               ; preds = %17
  %28 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %29 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %28, align 8
  %30 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %29, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %29, i64 %14) #6
  br label %85

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %37 = load i64*, i64** %36, align 8
  %38 = icmp eq i64* %35, %37
  br i1 %38, label %39, label %41

39:                                               ; preds = %33
  %40 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #6
  br label %41

41:                                               ; preds = %39, %33
  %42 = phi i64* [ %40, %39 ], [ %35, %33 ]
  %43 = ptrtoint i64* %42 to i64
  %44 = add i64 %43, 8
  %45 = inttoptr i64 %44 to i64*
  store i64* %45, i64** %34, align 8
  store i64 %14, i64* %42, align 8
  br label %85

46:                                               ; preds = %2, %17
  %47 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::Factory"*
  %48 = tail call i64* @_ZN2v88internal7Factory16NewPrototypeInfoEv(%"class.v8::internal::Factory"* %47) #6
  %49 = load i64, i64* %0, align 8
  %50 = and i64 %49, -4294967296
  %51 = add i64 %49, -1
  %52 = inttoptr i64 %51 to i32*
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = zext i32 %53 to i64
  %55 = or i64 %50, %54
  %56 = load i64, i64* %48, align 8
  %57 = add i64 %55, 35
  %58 = inttoptr i64 %57 to i32*
  %59 = trunc i64 %56 to i32
  store atomic volatile i32 %59, i32* %58 release, align 4
  %60 = and i64 %56, 1
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %85, label %62

62:                                               ; preds = %46
  %63 = and i64 %55, -262144
  %64 = or i64 %63, 8
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = and i64 %66, 262144
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %62
  %70 = or i64 %63, 16
  %71 = inttoptr i64 %70 to %"class.v8::internal::Heap"**
  %72 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %71, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %72, i64 %55, i64 %57, i64 %56) #6
  br label %73

73:                                               ; preds = %69, %62
  %74 = and i64 %56, -262144
  %75 = or i64 %74, 8
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = and i64 %77, 24
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %85, label %80

80:                                               ; preds = %73
  %81 = load i64, i64* %65, align 8
  %82 = and i64 %81, 24
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %80
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %55, i64 %57, i64 %56) #6
  br label %85

85:                                               ; preds = %84, %80, %73, %46, %41, %31
  %86 = phi i64* [ %32, %31 ], [ %42, %41 ], [ %48, %46 ], [ %48, %73 ], [ %48, %80 ], [ %48, %84 ]
  ret i64* %86
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal3Map12SetPrototypeEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10HeapObjectEEEb(%"class.v8::internal::Isolate"* nocapture readonly, i64*, i64*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::internal::RuntimeCallTimerScope", align 8
  %6 = bitcast %"class.v8::internal::RuntimeCallTimerScope"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 40, i1 false) #6
  %7 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1194", %"struct.std::__1::atomic.1194"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %15, label %9, !prof !2

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 0
  %11 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 1
  %12 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 14, i32 0
  %13 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %13, i64 0, i32 757
  store %"class.v8::internal::RuntimeCallStats"* %14, %"class.v8::internal::RuntimeCallStats"** %10, align 8
  call void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"* %14, %"class.v8::internal::RuntimeCallTimer"* %11, i32 178) #6
  br label %15

15:                                               ; preds = %4, %9
  %16 = load i64, i64* %2, align 8
  %17 = and i64 %16, -4294967296
  %18 = add i64 %16, -1
  %19 = inttoptr i64 %18 to i32*
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %17, %21
  %23 = add i64 %22, 7
  %24 = inttoptr i64 %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = icmp ugt i16 %25, 188
  br i1 %26, label %27, label %29

27:                                               ; preds = %15
  call void @_ZN2v88internal8JSObject19OptimizeAsPrototypeENS0_6HandleIS1_EEb(i64* %2, i1 zeroext %3) #6
  %28 = load i64, i64* %2, align 8
  br label %29

29:                                               ; preds = %15, %27
  %30 = phi i64 [ %16, %15 ], [ %28, %27 ]
  %31 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 6
  %32 = load i64, i64* %31, align 8
  %33 = trunc i64 %30 to i32
  %34 = trunc i64 %32 to i32
  %35 = icmp eq i32 %33, %34
  %36 = load i64, i64* %1, align 8
  %37 = add i64 %36, 15
  %38 = inttoptr i64 %37 to i32*
  store atomic volatile i32 %33, i32* %38 monotonic, align 4
  br i1 %35, label %68, label %39

39:                                               ; preds = %29
  %40 = and i64 %30, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %53, label %42

42:                                               ; preds = %39
  %43 = and i64 %36, -262144
  %44 = or i64 %43, 8
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = and i64 %46, 262144
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %42
  %50 = or i64 %43, 16
  %51 = inttoptr i64 %50 to %"class.v8::internal::Heap"**
  %52 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %51, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %52, i64 %36, i64 %37, i64 %30) #6
  br label %53

53:                                               ; preds = %49, %42, %39
  %54 = and i64 %30, -262144
  %55 = or i64 %54, 8
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = and i64 %57, 24
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %53
  %61 = and i64 %36, -262144
  %62 = or i64 %61, 8
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = and i64 %64, 24
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %60
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %36, i64 %37, i64 %30) #6
  br label %68

68:                                               ; preds = %29, %53, %60, %67
  %69 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 0
  %70 = load %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallStats"** %69, align 8
  %71 = icmp eq %"class.v8::internal::RuntimeCallStats"* %70, null
  br i1 %71, label %74, label %72, !prof !2

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %5, i64 0, i32 1
  call void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"* nonnull %70, %"class.v8::internal::RuntimeCallTimer"* %73) #6
  br label %74

74:                                               ; preds = %68, %72
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map21TransitionToPrototypeEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10HeapObjectEEE(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %5 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %6 = bitcast %"class.v8::internal::TransitionsAccessor"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #6
  %7 = ptrtoint i64* %1 to i64
  %8 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 1
  %10 = bitcast %"class.v8::internal::Handle.1140"* %9 to i64*
  store i64 %7, i64* %10, align 8
  %11 = load i64, i64* %1, align 8
  %12 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 5
  store i8 0, i8* %14, align 4
  %15 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %11, 35
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 acquire, align 4
  %20 = and i64 %16, 4294967295
  %21 = icmp eq i64 %20, 0
  tail call void @llvm.assume(i1 %21) #6
  %22 = zext i32 %19 to i64
  %23 = or i64 %16, %22
  store i64 %23, i64* %13, align 8
  %24 = and i64 %22, 1
  %25 = icmp eq i64 %24, 0
  %26 = icmp eq i32 %19, 3
  %27 = or i1 %26, %25
  br i1 %27, label %28, label %30

28:                                               ; preds = %3
  %29 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  store i32 1, i32* %29, align 8
  br label %58

30:                                               ; preds = %3
  %31 = and i64 %22, 3
  switch i64 %31, label %57 [
    i64 3, label %32
    i64 1, label %34
  ]

32:                                               ; preds = %30
  %33 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  store i32 3, i32* %33, align 8
  br label %58

34:                                               ; preds = %30
  %35 = add i64 %23, -1
  %36 = inttoptr i64 %35 to i32*
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = zext i32 %37 to i64
  %39 = or i64 %16, %38
  %40 = add i64 %39, 7
  %41 = inttoptr i64 %40 to i16*
  %42 = load atomic i16, i16* %41 monotonic, align 2
  %43 = icmp eq i16 %42, 160
  br i1 %43, label %44, label %46

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  store i32 4, i32* %45, align 8
  br label %58

46:                                               ; preds = %34
  %47 = load atomic i32, i32* %36 monotonic, align 4
  %48 = zext i32 %47 to i64
  %49 = or i64 %16, %48
  %50 = add i64 %49, 7
  %51 = inttoptr i64 %50 to i16*
  %52 = load atomic i16, i16* %51 monotonic, align 2
  %53 = icmp eq i16 %52, 110
  %54 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  br i1 %53, label %55, label %56

55:                                               ; preds = %46
  store i32 0, i32* %54, align 8
  br label %58

56:                                               ; preds = %46
  store i32 2, i32* %54, align 8
  br label %58

57:                                               ; preds = %30
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

58:                                               ; preds = %28, %32, %44, %55, %56
  %59 = call i64* @_ZN2v88internal19TransitionsAccessor22GetPrototypeTransitionENS0_6HandleINS0_6ObjectEEE(%"class.v8::internal::TransitionsAccessor"* nonnull %4, i64* %2) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #6
  %60 = icmp eq i64* %59, null
  br i1 %60, label %61, label %150

61:                                               ; preds = %58
  %62 = load i64, i64* %1, align 8
  %63 = load i64, i64* %15, align 8
  %64 = add i64 %62, 23
  %65 = inttoptr i64 %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = and i64 %63, 4294967295
  %68 = icmp eq i64 %67, 0
  call void @llvm.assume(i1 %68) #6
  %69 = zext i32 %66 to i64
  %70 = or i64 %63, %69
  %71 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %72 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %71, align 8
  %73 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %72, null
  br i1 %73, label %76, label %74

74:                                               ; preds = %61
  %75 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %72, i64 %70) #6
  br label %89

76:                                               ; preds = %61
  %77 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %78 = load i64*, i64** %77, align 8
  %79 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %80 = load i64*, i64** %79, align 8
  %81 = icmp eq i64* %78, %80
  br i1 %81, label %82, label %84

82:                                               ; preds = %76
  %83 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i64* [ %83, %82 ], [ %78, %76 ]
  %86 = ptrtoint i64* %85 to i64
  %87 = add i64 %86, 8
  %88 = inttoptr i64 %87 to i64*
  store i64* %88, i64** %77, align 8
  store i64 %70, i64* %85, align 8
  br label %89

89:                                               ; preds = %74, %84
  %90 = phi i64* [ %75, %74 ], [ %85, %84 ]
  %91 = load i64, i64* %1, align 8
  %92 = add i64 %91, 11
  %93 = inttoptr i64 %92 to i32*
  %94 = load atomic i32, i32* %93 acquire, align 4
  %95 = lshr i32 %94, 10
  %96 = and i32 %95, 1023
  %97 = call i64* @_ZN2v88internal15DescriptorArray8CopyUpToEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %90, i32 %96, i32 0) #6
  %98 = call i64* @_ZN2v88internal3Map22CopyReplaceDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEENS0_14TransitionFlagENS0_11MaybeHandleINS0_4NameEEEPKcNS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %97, i32 1, i64* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.25, i64 0, i64 0), i32 2) #6
  %99 = bitcast %"class.v8::internal::TransitionsAccessor"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %99) #6
  %100 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %100, align 8
  %101 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 1
  %102 = bitcast %"class.v8::internal::Handle.1140"* %101 to i64*
  store i64 %7, i64* %102, align 8
  %103 = load i64, i64* %1, align 8
  %104 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %105, align 8
  %106 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 5
  store i8 0, i8* %106, align 4
  %107 = load i64, i64* %15, align 8
  %108 = add i64 %103, 35
  %109 = inttoptr i64 %108 to i32*
  %110 = load atomic i32, i32* %109 acquire, align 4
  %111 = and i64 %107, 4294967295
  %112 = icmp eq i64 %111, 0
  call void @llvm.assume(i1 %112) #6
  %113 = zext i32 %110 to i64
  %114 = or i64 %107, %113
  store i64 %114, i64* %105, align 8
  %115 = and i64 %113, 1
  %116 = icmp eq i64 %115, 0
  %117 = icmp eq i32 %110, 3
  %118 = or i1 %117, %116
  br i1 %118, label %119, label %121

119:                                              ; preds = %89
  %120 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 1, i32* %120, align 8
  br label %149

121:                                              ; preds = %89
  %122 = and i64 %113, 3
  switch i64 %122, label %148 [
    i64 3, label %123
    i64 1, label %125
  ]

123:                                              ; preds = %121
  %124 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 3, i32* %124, align 8
  br label %149

125:                                              ; preds = %121
  %126 = add i64 %114, -1
  %127 = inttoptr i64 %126 to i32*
  %128 = load atomic i32, i32* %127 monotonic, align 4
  %129 = zext i32 %128 to i64
  %130 = or i64 %107, %129
  %131 = add i64 %130, 7
  %132 = inttoptr i64 %131 to i16*
  %133 = load atomic i16, i16* %132 monotonic, align 2
  %134 = icmp eq i16 %133, 160
  br i1 %134, label %135, label %137

135:                                              ; preds = %125
  %136 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 4, i32* %136, align 8
  br label %149

137:                                              ; preds = %125
  %138 = load atomic i32, i32* %127 monotonic, align 4
  %139 = zext i32 %138 to i64
  %140 = or i64 %107, %139
  %141 = add i64 %140, 7
  %142 = inttoptr i64 %141 to i16*
  %143 = load atomic i16, i16* %142 monotonic, align 2
  %144 = icmp eq i16 %143, 110
  %145 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  br i1 %144, label %146, label %147

146:                                              ; preds = %137
  store i32 0, i32* %145, align 8
  br label %149

147:                                              ; preds = %137
  store i32 2, i32* %145, align 8
  br label %149

148:                                              ; preds = %121
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

149:                                              ; preds = %119, %123, %135, %146, %147
  call void @_ZN2v88internal19TransitionsAccessor22PutPrototypeTransitionENS0_6HandleINS0_6ObjectEEENS2_INS0_3MapEEE(%"class.v8::internal::TransitionsAccessor"* nonnull %5, i64* %2, i64* %98) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %99) #6
  call void @_ZN2v88internal3Map12SetPrototypeEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10HeapObjectEEEb(%"class.v8::internal::Isolate"* %0, i64* %98, i64* %2, i1 zeroext true)
  br label %150

150:                                              ; preds = %149, %58
  %151 = phi i64* [ %98, %149 ], [ %59, %58 ]
  ret i64* %151
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal3Map31FindElementsKindTransitionedMapEPNS0_7IsolateERKNSt3__16vectorINS0_6HandleIS1_EENS4_9allocatorIS7_EEEE(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"*, %"class.std::__1::vector.1146"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %5 = alloca i32, align 4
  %6 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %7 = alloca %"class.v8::internal::Map", align 8
  %8 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = and i32 %12, 1048576
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %474

15:                                               ; preds = %3
  %16 = load i64, i64* %8, align 8
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load atomic i16, i16* %18 monotonic, align 2
  %20 = icmp eq i16 %19, 1057
  br i1 %20, label %21, label %93

21:                                               ; preds = %15
  %22 = add i64 %16, 11
  %23 = inttoptr i64 %22 to i32*
  %24 = load atomic i32, i32* %23 acquire, align 4
  %25 = and i32 %24, 1047552
  %26 = icmp eq i32 %25, 0
  %27 = load i64, i64* %8, align 8
  br i1 %26, label %93, label %28

28:                                               ; preds = %21
  %29 = and i64 %27, -4294967296
  %30 = add i64 %27, 19
  %31 = inttoptr i64 %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = zext i32 %32 to i64
  %34 = or i64 %29, %33
  %35 = and i64 %33, 1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %28
  %38 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %65

39:                                               ; preds = %28
  %40 = add i64 %34, -1
  %41 = inttoptr i64 %40 to i32*
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %44 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %43, null
  br i1 %44, label %51, label %45

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %43, i64 0, i32 0, i32 1
  %47 = load i8, i8* %46, align 8, !range !3
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %43, i64 0, i32 1, i64 0
  br label %59

51:                                               ; preds = %45, %39
  %52 = and i64 %27, -262144
  %53 = or i64 %52, 16
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = add i64 %55, -41416
  %57 = inttoptr i64 %56 to %"class.v8::internal::Isolate"*
  %58 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %57, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %59

59:                                               ; preds = %51, %49
  %60 = phi i64* [ %58, %51 ], [ %50, %49 ]
  %61 = getelementptr inbounds i64, i64* %60, i64 10
  %62 = load i64, i64* %61, align 8
  %63 = trunc i64 %62 to i32
  %64 = icmp eq i32 %42, %63
  br i1 %64, label %86, label %65

65:                                               ; preds = %59, %37
  %66 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %38, %37 ], [ %43, %59 ]
  %67 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %66, null
  br i1 %67, label %74, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %66, i64 0, i32 0, i32 1
  %70 = load i8, i8* %69, align 8, !range !3
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %66, i64 0, i32 1, i64 0
  br label %82

74:                                               ; preds = %68, %65
  %75 = and i64 %27, -262144
  %76 = or i64 %75, 16
  %77 = inttoptr i64 %76 to i64*
  %78 = load i64, i64* %77, align 16
  %79 = add i64 %78, -41416
  %80 = inttoptr i64 %79 to %"class.v8::internal::Isolate"*
  %81 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %80, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %82

82:                                               ; preds = %74, %72
  %83 = phi i64* [ %81, %74 ], [ %73, %72 ]
  %84 = getelementptr inbounds i64, i64* %83, i64 4
  %85 = load i64, i64* %84, align 8
  br label %86

86:                                               ; preds = %59, %82
  %87 = phi i64 [ %85, %82 ], [ %34, %59 ]
  %88 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 4
  %89 = load i64, i64* %88, align 8
  %90 = trunc i64 %87 to i32
  %91 = trunc i64 %89 to i32
  %92 = icmp eq i32 %90, %91
  br i1 %92, label %474, label %93

93:                                               ; preds = %21, %15, %86
  %94 = phi i64 [ %16, %15 ], [ %27, %86 ], [ %27, %21 ]
  %95 = add i64 %94, 10
  %96 = inttoptr i64 %95 to i8*
  %97 = load i8, i8* %96, align 1
  %98 = lshr i8 %97, 2
  %99 = and i8 %97, 4
  %100 = icmp eq i8 %99, 0
  %101 = icmp ult i8 %97, 20
  %102 = and i1 %101, %100
  %103 = zext i1 %102 to i8
  %104 = icmp ult i8 %97, 24
  %105 = icmp ne i8 %98, 3
  %106 = and i1 %104, %105
  br i1 %106, label %107, label %474

107:                                              ; preds = %93
  %108 = bitcast %"class.v8::internal::Map"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %108) #6
  %109 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 4
  %110 = load i64, i64* %109, align 8
  %111 = and i64 %110, 4294967295
  %112 = icmp eq i64 %111, 0
  tail call void @llvm.assume(i1 %112) #6
  %113 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %114 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %113, null
  %115 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %113, i64 0, i32 0, i32 1
  %116 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %113, i64 0, i32 1, i64 0
  %117 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 4
  %118 = load i64, i64* %117, align 8
  %119 = trunc i64 %118 to i32
  br i1 %114, label %120, label %158

120:                                              ; preds = %107, %154
  %121 = phi i64 [ %155, %154 ], [ %94, %107 ]
  %122 = add i64 %121, 19
  %123 = inttoptr i64 %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = zext i32 %124 to i64
  %126 = or i64 %110, %125
  %127 = and i64 %125, 1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %133

129:                                              ; preds = %120
  %130 = and i64 %121, -262144
  %131 = or i64 %130, 16
  %132 = inttoptr i64 %131 to i64*
  br label %147

133:                                              ; preds = %120
  %134 = add i64 %126, -1
  %135 = inttoptr i64 %134 to i32*
  %136 = load atomic i32, i32* %135 monotonic, align 4
  %137 = and i64 %121, -262144
  %138 = or i64 %137, 16
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139, align 16
  %141 = add i64 %140, -41416
  %142 = inttoptr i64 %141 to %"class.v8::internal::Isolate"*
  %143 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %142, i64 0, i32 0, i32 7, i32 0, i64 10
  %144 = load i64, i64* %143, align 8
  %145 = trunc i64 %144 to i32
  %146 = icmp eq i32 %136, %145
  br i1 %146, label %154, label %147

147:                                              ; preds = %129, %133
  %148 = phi i64* [ %132, %129 ], [ %139, %133 ]
  %149 = load i64, i64* %148, align 16
  %150 = add i64 %149, -41416
  %151 = inttoptr i64 %150 to %"class.v8::internal::Isolate"*
  %152 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %151, i64 0, i32 0, i32 7, i32 0, i64 4
  %153 = load i64, i64* %152, align 8
  br label %154

154:                                              ; preds = %147, %133
  %155 = phi i64 [ %153, %147 ], [ %126, %133 ]
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, %119
  br i1 %157, label %208, label %120

158:                                              ; preds = %107, %204
  %159 = phi i64 [ %205, %204 ], [ %94, %107 ]
  %160 = add i64 %159, 19
  %161 = inttoptr i64 %160 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = zext i32 %162 to i64
  %164 = or i64 %110, %163
  %165 = and i64 %163, 1
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %169

167:                                              ; preds = %158
  %168 = load i8, i8* %115, align 8, !range !3
  br label %189

169:                                              ; preds = %158
  %170 = add i64 %164, -1
  %171 = inttoptr i64 %170 to i32*
  %172 = load atomic i32, i32* %171 monotonic, align 4
  %173 = load i8, i8* %115, align 8, !range !3
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %175, label %183

175:                                              ; preds = %169
  %176 = and i64 %159, -262144
  %177 = or i64 %176, 16
  %178 = inttoptr i64 %177 to i64*
  %179 = load i64, i64* %178, align 16
  %180 = add i64 %179, -41416
  %181 = inttoptr i64 %180 to %"class.v8::internal::Isolate"*
  %182 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %181, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %183

183:                                              ; preds = %175, %169
  %184 = phi i64* [ %182, %175 ], [ %116, %169 ]
  %185 = getelementptr inbounds i64, i64* %184, i64 10
  %186 = load i64, i64* %185, align 8
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %172, %187
  br i1 %188, label %204, label %189

189:                                              ; preds = %167, %183
  %190 = phi i8 [ %168, %167 ], [ %173, %183 ]
  %191 = icmp eq i8 %190, 0
  br i1 %191, label %192, label %200

192:                                              ; preds = %189
  %193 = and i64 %159, -262144
  %194 = or i64 %193, 16
  %195 = inttoptr i64 %194 to i64*
  %196 = load i64, i64* %195, align 16
  %197 = add i64 %196, -41416
  %198 = inttoptr i64 %197 to %"class.v8::internal::Isolate"*
  %199 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %198, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %200

200:                                              ; preds = %192, %189
  %201 = phi i64* [ %199, %192 ], [ %116, %189 ]
  %202 = getelementptr inbounds i64, i64* %201, i64 4
  %203 = load i64, i64* %202, align 8
  br label %204

204:                                              ; preds = %200, %183
  %205 = phi i64 [ %203, %200 ], [ %164, %183 ]
  %206 = trunc i64 %205 to i32
  %207 = icmp eq i32 %206, %119
  br i1 %207, label %208, label %158

208:                                              ; preds = %204, %154
  %209 = phi i64 [ %121, %154 ], [ %159, %204 ]
  %210 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %209, i64* %210, align 8
  %211 = tail call zeroext i1 @_ZNK2v88internal3Map25EquivalentToForTransitionES1_(%"class.v8::internal::Map"* %0, i64 %209) #6
  br i1 %211, label %213, label %212

212:                                              ; preds = %208
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %108) #6
  br label %474

213:                                              ; preds = %208
  %214 = call i64 @_ZN2v88internal3Map27LookupElementsTransitionMapEPNS0_7IsolateENS0_12ElementsKindE(%"class.v8::internal::Map"* nonnull %7, %"class.v8::internal::Isolate"* %1, i8 zeroext %98)
  store i64 %214, i64* %210, align 8
  %215 = bitcast %"class.v8::internal::TransitionsAccessor"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %215) #6
  %216 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %1, %"class.v8::internal::Isolate"** %216, align 8
  %217 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 1, i32 0, i32 0
  store i64* null, i64** %217, align 8
  %218 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %214, i64* %218, align 8
  %219 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %219, align 8
  %220 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 5
  store i8 0, i8* %220, align 4
  %221 = load i64, i64* %109, align 8
  %222 = add i64 %214, 35
  %223 = inttoptr i64 %222 to i32*
  %224 = load atomic i32, i32* %223 acquire, align 4
  %225 = and i64 %221, 4294967295
  %226 = icmp eq i64 %225, 0
  tail call void @llvm.assume(i1 %226) #6
  %227 = zext i32 %224 to i64
  %228 = or i64 %221, %227
  store i64 %228, i64* %219, align 8
  %229 = and i64 %227, 1
  %230 = icmp eq i64 %229, 0
  %231 = icmp eq i32 %224, 3
  %232 = or i1 %231, %230
  br i1 %232, label %233, label %235

233:                                              ; preds = %213
  %234 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  store i32 1, i32* %234, align 8
  br label %263

235:                                              ; preds = %213
  %236 = and i64 %227, 3
  switch i64 %236, label %262 [
    i64 3, label %237
    i64 1, label %239
  ]

237:                                              ; preds = %235
  %238 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  store i32 3, i32* %238, align 8
  br label %263

239:                                              ; preds = %235
  %240 = add i64 %228, -1
  %241 = inttoptr i64 %240 to i32*
  %242 = load atomic i32, i32* %241 monotonic, align 4
  %243 = zext i32 %242 to i64
  %244 = or i64 %221, %243
  %245 = add i64 %244, 7
  %246 = inttoptr i64 %245 to i16*
  %247 = load atomic i16, i16* %246 monotonic, align 2
  %248 = icmp eq i16 %247, 160
  br i1 %248, label %249, label %251

249:                                              ; preds = %239
  %250 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  store i32 4, i32* %250, align 8
  br label %263

251:                                              ; preds = %239
  %252 = load atomic i32, i32* %241 monotonic, align 4
  %253 = zext i32 %252 to i64
  %254 = or i64 %221, %253
  %255 = add i64 %254, 7
  %256 = inttoptr i64 %255 to i16*
  %257 = load atomic i16, i16* %256 monotonic, align 2
  %258 = icmp eq i16 %257, 110
  %259 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  br i1 %258, label %260, label %261

260:                                              ; preds = %251
  store i32 0, i32* %259, align 8
  br label %263

261:                                              ; preds = %251
  store i32 2, i32* %259, align 8
  br label %263

262:                                              ; preds = %235
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

263:                                              ; preds = %233, %237, %249, %260, %261
  %264 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 481
  %265 = load i64, i64* %264, align 8
  %266 = call i64 @_ZN2v88internal19TransitionsAccessor13SearchSpecialENS0_6SymbolE(%"class.v8::internal::TransitionsAccessor"* nonnull %4, i64 %265) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %215) #6
  store i64 %266, i64* %210, align 8
  %267 = trunc i64 %266 to i32
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %472, label %269

269:                                              ; preds = %263
  %270 = getelementptr %"class.std::__1::vector.1146", %"class.std::__1::vector.1146"* %2, i64 0, i32 0, i32 0
  %271 = getelementptr %"class.std::__1::vector.1146", %"class.std::__1::vector.1146"* %2, i64 0, i32 0, i32 1
  %272 = bitcast i32* %5 to i8*
  %273 = bitcast %"class.v8::internal::TransitionsAccessor"* %6 to i8*
  %274 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 0
  %275 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 1, i32 0, i32 0
  %276 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %277 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 3, i32 0, i32 0
  %278 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 5
  %279 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  br label %280

280:                                              ; preds = %269, %466
  %281 = phi i8 [ %103, %269 ], [ %430, %466 ]
  %282 = phi i64 [ %266, %269 ], [ %469, %466 ]
  %283 = phi i64 [ 0, %269 ], [ %429, %466 ]
  %284 = add i64 %282, 10
  %285 = inttoptr i64 %284 to i8*
  %286 = load i8, i8* %285, align 1
  %287 = icmp ult i8 %286, 24
  br i1 %287, label %288, label %472

288:                                              ; preds = %280
  %289 = load %"class.v8::internal::Handle.1140"*, %"class.v8::internal::Handle.1140"** %270, align 8
  %290 = load %"class.v8::internal::Handle.1140"*, %"class.v8::internal::Handle.1140"** %271, align 8
  %291 = icmp eq %"class.v8::internal::Handle.1140"* %289, %290
  br i1 %291, label %428, label %292

292:                                              ; preds = %288, %304
  %293 = phi %"class.v8::internal::Handle.1140"* [ %305, %304 ], [ %289, %288 ]
  %294 = getelementptr inbounds %"class.v8::internal::Handle.1140", %"class.v8::internal::Handle.1140"* %293, i64 0, i32 0, i32 0
  %295 = load i64*, i64** %294, align 8
  %296 = icmp eq i64* %295, null
  br i1 %296, label %304, label %297

297:                                              ; preds = %292
  %298 = load i64, i64* %295, align 8
  %299 = add i64 %298, 10
  %300 = inttoptr i64 %299 to i8*
  %301 = load i8, i8* %300, align 1
  %302 = xor i8 %301, %286
  %303 = icmp ult i8 %302, 4
  br i1 %303, label %307, label %304

304:                                              ; preds = %297, %292
  %305 = getelementptr inbounds %"class.v8::internal::Handle.1140", %"class.v8::internal::Handle.1140"* %293, i64 1
  %306 = icmp eq %"class.v8::internal::Handle.1140"* %305, %290
  br i1 %306, label %428, label %292

307:                                              ; preds = %297
  %308 = load i64, i64* %8, align 8
  %309 = call i64 @_ZN2v88internal3Map28TryReplayPropertyTransitionsEPNS0_7IsolateES1_(%"class.v8::internal::Map"* nonnull %7, %"class.v8::internal::Isolate"* %1, i64 %308)
  %310 = trunc i64 %309 to i32
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %428, label %312

312:                                              ; preds = %307
  %313 = and i64 %309, -4294967296
  %314 = add i64 %309, 23
  %315 = inttoptr i64 %314 to i32*
  %316 = load i32, i32* %315, align 4
  %317 = zext i32 %316 to i64
  %318 = or i64 %313, %317
  %319 = add i64 %309, 11
  %320 = inttoptr i64 %319 to i32*
  %321 = load atomic i32, i32* %320 acquire, align 4
  %322 = lshr i32 %321, 10
  %323 = and i32 %322, 1023
  %324 = zext i32 %323 to i64
  %325 = icmp eq i32 %323, 0
  br i1 %325, label %378, label %326

326:                                              ; preds = %312
  %327 = and i64 %324, 1
  %328 = icmp eq i32 %323, 1
  br i1 %328, label %361, label %329

329:                                              ; preds = %326
  %330 = sub nsw i64 %324, %327
  br label %331

331:                                              ; preds = %331, %329
  %332 = phi i32 [ 0, %329 ], [ %357, %331 ]
  %333 = phi i64 [ 0, %329 ], [ %358, %331 ]
  %334 = phi i64 [ %330, %329 ], [ %359, %331 ]
  %335 = mul nuw nsw i64 %333, 51539607552
  %336 = add nuw nsw i64 %335, 68719476736
  %337 = lshr exact i64 %336, 32
  %338 = or i64 %337, 3
  %339 = add i64 %338, %318
  %340 = inttoptr i64 %339 to i32*
  %341 = load atomic i32, i32* %340 monotonic, align 4
  %342 = lshr i32 %341, 2
  %343 = and i32 %342, 1
  %344 = xor i32 %343, 1
  %345 = add nuw nsw i32 %344, %332
  %346 = or i64 %333, 1
  %347 = mul nuw nsw i64 %346, 51539607552
  %348 = add nuw nsw i64 %347, 68719476736
  %349 = lshr exact i64 %348, 32
  %350 = or i64 %349, 3
  %351 = add i64 %350, %318
  %352 = inttoptr i64 %351 to i32*
  %353 = load atomic i32, i32* %352 monotonic, align 4
  %354 = lshr i32 %353, 2
  %355 = and i32 %354, 1
  %356 = xor i32 %355, 1
  %357 = add nuw nsw i32 %356, %345
  %358 = add nuw nsw i64 %333, 2
  %359 = add i64 %334, -2
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %361, label %331

361:                                              ; preds = %331, %326
  %362 = phi i32 [ undef, %326 ], [ %357, %331 ]
  %363 = phi i32 [ 0, %326 ], [ %357, %331 ]
  %364 = phi i64 [ 0, %326 ], [ %358, %331 ]
  %365 = icmp eq i64 %327, 0
  br i1 %365, label %378, label %366

366:                                              ; preds = %361
  %367 = mul nuw nsw i64 %364, 51539607552
  %368 = add nuw nsw i64 %367, 68719476736
  %369 = lshr exact i64 %368, 32
  %370 = or i64 %369, 3
  %371 = add i64 %370, %318
  %372 = inttoptr i64 %371 to i32*
  %373 = load atomic i32, i32* %372 monotonic, align 4
  %374 = lshr i32 %373, 2
  %375 = and i32 %374, 1
  %376 = xor i32 %375, 1
  %377 = add nuw nsw i32 %376, %363
  br label %378

378:                                              ; preds = %366, %361, %312
  %379 = phi i32 [ 0, %312 ], [ %362, %361 ], [ %377, %366 ]
  %380 = add i64 %309, 3
  %381 = inttoptr i64 %380 to i8*
  %382 = load atomic i8, i8* %381 monotonic, align 1
  %383 = zext i8 %382 to i32
  %384 = add i64 %309, 4
  %385 = inttoptr i64 %384 to i8*
  %386 = load atomic i8, i8* %385 monotonic, align 1
  %387 = zext i8 %386 to i32
  %388 = sub nsw i32 %383, %387
  %389 = add i64 %309, 5
  %390 = inttoptr i64 %389 to i8*
  %391 = load atomic i8, i8* %390 monotonic, align 1
  %392 = icmp ugt i8 %391, 2
  br i1 %392, label %393, label %395

393:                                              ; preds = %378
  %394 = load atomic i8, i8* %381 monotonic, align 1
  br label %395

395:                                              ; preds = %378, %393
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %272) #6
  %396 = call zeroext i1 @_ZNK2v88internal3Map22InstancesNeedRewritingES1_iiiPi(%"class.v8::internal::Map"* %0, i64 %309, i32 %379, i32 %388, i32 undef, i32* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %272) #6
  br i1 %396, label %428, label %397

397:                                              ; preds = %395
  %398 = load %"class.v8::internal::Handle.1140"*, %"class.v8::internal::Handle.1140"** %270, align 8
  %399 = load %"class.v8::internal::Handle.1140"*, %"class.v8::internal::Handle.1140"** %271, align 8
  %400 = icmp eq %"class.v8::internal::Handle.1140"* %398, %399
  br i1 %400, label %428, label %401

401:                                              ; preds = %397, %410
  %402 = phi %"class.v8::internal::Handle.1140"* [ %411, %410 ], [ %398, %397 ]
  %403 = getelementptr inbounds %"class.v8::internal::Handle.1140", %"class.v8::internal::Handle.1140"* %402, i64 0, i32 0, i32 0
  %404 = load i64*, i64** %403, align 8
  %405 = icmp eq i64* %404, null
  br i1 %405, label %410, label %406

406:                                              ; preds = %401
  %407 = load i64, i64* %404, align 8
  %408 = trunc i64 %407 to i32
  %409 = icmp eq i32 %408, %310
  br i1 %409, label %413, label %410

410:                                              ; preds = %406, %401
  %411 = getelementptr inbounds %"class.v8::internal::Handle.1140", %"class.v8::internal::Handle.1140"* %402, i64 1
  %412 = icmp eq %"class.v8::internal::Handle.1140"* %411, %399
  br i1 %412, label %428, label %401

413:                                              ; preds = %406
  %414 = and i8 %281, 1
  %415 = icmp ne i8 %414, 0
  %416 = add i64 %309, 10
  %417 = inttoptr i64 %416 to i8*
  %418 = load i8, i8* %417, align 1
  %419 = and i8 %418, 4
  %420 = icmp eq i8 %419, 0
  %421 = icmp ult i8 %418, 20
  %422 = and i1 %421, %420
  %423 = xor i1 %422, true
  %424 = or i1 %415, %423
  br i1 %424, label %425, label %428

425:                                              ; preds = %413
  %426 = and i1 %415, %422
  %427 = zext i1 %426 to i8
  br label %428

428:                                              ; preds = %304, %410, %413, %397, %288, %307, %395, %425
  %429 = phi i64 [ %283, %307 ], [ %283, %395 ], [ %309, %425 ], [ %283, %288 ], [ %283, %397 ], [ %283, %413 ], [ %283, %410 ], [ %283, %304 ]
  %430 = phi i8 [ %281, %307 ], [ %281, %395 ], [ %427, %425 ], [ %281, %288 ], [ %281, %397 ], [ %281, %413 ], [ %281, %410 ], [ %281, %304 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %273) #6
  %431 = load i64, i64* %210, align 8
  store %"class.v8::internal::Isolate"* %1, %"class.v8::internal::Isolate"** %274, align 8
  store i64* null, i64** %275, align 8
  store i64 %431, i64* %276, align 8
  store i64 0, i64* %277, align 8
  store i8 0, i8* %278, align 4
  %432 = load i64, i64* %109, align 8
  %433 = add i64 %431, 35
  %434 = inttoptr i64 %433 to i32*
  %435 = load atomic i32, i32* %434 acquire, align 4
  %436 = and i64 %432, 4294967295
  %437 = icmp eq i64 %436, 0
  call void @llvm.assume(i1 %437) #6
  %438 = zext i32 %435 to i64
  %439 = or i64 %432, %438
  store i64 %439, i64* %277, align 8
  %440 = and i64 %438, 1
  %441 = icmp eq i64 %440, 0
  %442 = icmp eq i32 %435, 3
  %443 = or i1 %442, %441
  br i1 %443, label %466, label %444

444:                                              ; preds = %428
  %445 = and i64 %438, 3
  switch i64 %445, label %465 [
    i64 3, label %466
    i64 1, label %446
  ]

446:                                              ; preds = %444
  %447 = add i64 %439, -1
  %448 = inttoptr i64 %447 to i32*
  %449 = load atomic i32, i32* %448 monotonic, align 4
  %450 = zext i32 %449 to i64
  %451 = or i64 %432, %450
  %452 = add i64 %451, 7
  %453 = inttoptr i64 %452 to i16*
  %454 = load atomic i16, i16* %453 monotonic, align 2
  %455 = icmp eq i16 %454, 160
  br i1 %455, label %466, label %456

456:                                              ; preds = %446
  %457 = load atomic i32, i32* %448 monotonic, align 4
  %458 = zext i32 %457 to i64
  %459 = or i64 %432, %458
  %460 = add i64 %459, 7
  %461 = inttoptr i64 %460 to i16*
  %462 = load atomic i16, i16* %461 monotonic, align 2
  %463 = icmp eq i16 %462, 110
  %464 = select i1 %463, i32 0, i32 2
  br label %466

465:                                              ; preds = %444
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

466:                                              ; preds = %456, %446, %444, %428
  %467 = phi i32 [ 1, %428 ], [ 3, %444 ], [ 4, %446 ], [ %464, %456 ]
  store i32 %467, i32* %279, align 8
  %468 = load i64, i64* %264, align 8
  %469 = call i64 @_ZN2v88internal19TransitionsAccessor13SearchSpecialENS0_6SymbolE(%"class.v8::internal::TransitionsAccessor"* nonnull %6, i64 %468) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %273) #6
  store i64 %469, i64* %210, align 8
  %470 = trunc i64 %469 to i32
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %472, label %280

472:                                              ; preds = %466, %280, %263
  %473 = phi i64 [ 0, %263 ], [ %283, %280 ], [ %429, %466 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %108) #6
  br label %474

474:                                              ; preds = %3, %212, %472, %93, %86
  %475 = phi i64 [ 0, %86 ], [ 0, %212 ], [ %473, %472 ], [ 0, %93 ], [ 0, %3 ]
  ret i64 %475
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal3Map37EquivalentToForElementsKindTransitionES1_(%"class.v8::internal::Map"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = tail call zeroext i1 @_ZNK2v88internal3Map25EquivalentToForTransitionES1_(%"class.v8::internal::Map"* %0, i64 %1)
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal3Map26IsMapInArrayPrototypeChainEPNS0_7IsolateE(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, 19
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = add i64 %15, 315
  %17 = inttoptr i64 %16 to i32*
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %5, %19
  %21 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %22 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %21, align 8
  %23 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %2
  %25 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %22, i64 %20) #6
  %26 = load i64, i64* %25, align 8
  br label %40

27:                                               ; preds = %2
  %28 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %31 = load i64*, i64** %30, align 8
  %32 = icmp eq i64* %29, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %27
  %34 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #6
  br label %35

35:                                               ; preds = %33, %27
  %36 = phi i64* [ %34, %33 ], [ %29, %27 ]
  %37 = ptrtoint i64* %36 to i64
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %38 to i64*
  store i64* %39, i64** %28, align 8
  store i64 %20, i64* %36, align 8
  br label %40

40:                                               ; preds = %24, %35
  %41 = phi i64 [ %26, %24 ], [ %20, %35 ]
  %42 = add i64 %41, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = trunc i64 %46 to i32
  %48 = icmp eq i32 %44, %47
  br i1 %48, label %93, label %49

49:                                               ; preds = %40
  %50 = load i64, i64* %3, align 8
  %51 = and i64 %50, -4294967296
  %52 = add i64 %50, -1
  %53 = inttoptr i64 %52 to i32*
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %51, %55
  %57 = add i64 %56, 19
  %58 = inttoptr i64 %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i64
  %61 = or i64 %51, %60
  %62 = add i64 %61, 347
  %63 = inttoptr i64 %62 to i32*
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = zext i32 %64 to i64
  %66 = or i64 %51, %65
  %67 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %21, align 8
  %68 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %67, null
  br i1 %68, label %72, label %69

69:                                               ; preds = %49
  %70 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %67, i64 %66) #6
  %71 = load i64, i64* %70, align 8
  br label %85

72:                                               ; preds = %49
  %73 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %74 = load i64*, i64** %73, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %76 = load i64*, i64** %75, align 8
  %77 = icmp eq i64* %74, %76
  br i1 %77, label %78, label %80

78:                                               ; preds = %72
  %79 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #6
  br label %80

80:                                               ; preds = %78, %72
  %81 = phi i64* [ %79, %78 ], [ %74, %72 ]
  %82 = ptrtoint i64* %81 to i64
  %83 = add i64 %82, 8
  %84 = inttoptr i64 %83 to i64*
  store i64* %84, i64** %73, align 8
  store i64 %66, i64* %81, align 8
  br label %85

85:                                               ; preds = %69, %80
  %86 = phi i64 [ %71, %69 ], [ %66, %80 ]
  %87 = add i64 %86, -1
  %88 = inttoptr i64 %87 to i32*
  %89 = load atomic i32, i32* %88 monotonic, align 4
  %90 = load i64, i64* %45, align 8
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %89, %91
  br label %93

93:                                               ; preds = %85, %40
  %94 = phi i1 [ true, %40 ], [ %92, %85 ]
  ret i1 %94
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map20TransitionElementsToEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindE(%"class.v8::internal::Isolate"*, i64*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::MapUpdater", align 8
  %5 = load i64, i64* %1, align 8
  %6 = add i64 %5, 10
  %7 = inttoptr i64 %6 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = lshr i8 %8, 2
  %10 = icmp eq i8 %9, %2
  br i1 %10, label %360, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = and i64 %13, -4294967296
  %15 = add i64 %13, -1
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = zext i32 %17 to i64
  %19 = or i64 %14, %18
  %20 = add i64 %19, 19
  %21 = inttoptr i64 %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i64
  %24 = or i64 %14, %23
  switch i8 %9, label %85 [
    i8 13, label %25
    i8 14, label %55
  ]

25:                                               ; preds = %11
  %26 = add i64 %24, 279
  %27 = inttoptr i64 %26 to i32*
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = trunc i64 %5 to i32
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %31, label %338

31:                                               ; preds = %25
  %32 = add i64 %24, 715
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = zext i32 %34 to i64
  %36 = or i64 %14, %35
  %37 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %38 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %37, align 8
  %39 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %31
  %41 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %38, i64 %36) #6
  br label %360

42:                                               ; preds = %31
  %43 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %44 = load i64*, i64** %43, align 8
  %45 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %46 = load i64*, i64** %45, align 8
  %47 = icmp eq i64* %44, %46
  br i1 %47, label %48, label %50

48:                                               ; preds = %42
  %49 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %50

50:                                               ; preds = %48, %42
  %51 = phi i64* [ %49, %48 ], [ %44, %42 ]
  %52 = ptrtoint i64* %51 to i64
  %53 = add i64 %52, 8
  %54 = inttoptr i64 %53 to i64*
  store i64* %54, i64** %43, align 8
  store i64 %36, i64* %51, align 8
  br label %360

55:                                               ; preds = %11
  %56 = add i64 %24, 715
  %57 = inttoptr i64 %56 to i32*
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = trunc i64 %5 to i32
  %60 = icmp eq i32 %58, %59
  br i1 %60, label %61, label %338

61:                                               ; preds = %55
  %62 = add i64 %24, 279
  %63 = inttoptr i64 %62 to i32*
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = zext i32 %64 to i64
  %66 = or i64 %14, %65
  %67 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %68 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %67, align 8
  %69 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %68, null
  br i1 %69, label %72, label %70

70:                                               ; preds = %61
  %71 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %68, i64 %66) #6
  br label %360

72:                                               ; preds = %61
  %73 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %74 = load i64*, i64** %73, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %76 = load i64*, i64** %75, align 8
  %77 = icmp eq i64* %74, %76
  br i1 %77, label %78, label %80

78:                                               ; preds = %72
  %79 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %80

80:                                               ; preds = %78, %72
  %81 = phi i64* [ %79, %78 ], [ %74, %72 ]
  %82 = ptrtoint i64* %81 to i64
  %83 = add i64 %82, 8
  %84 = inttoptr i64 %83 to i64*
  store i64* %84, i64** %73, align 8
  store i64 %66, i64* %81, align 8
  br label %360

85:                                               ; preds = %11
  %86 = icmp ult i8 %8, 24
  br i1 %86, label %87, label %338

87:                                               ; preds = %85
  %88 = icmp ult i8 %2, 6
  br i1 %88, label %89, label %137

89:                                               ; preds = %87
  %90 = and i8 %8, -4
  %91 = zext i8 %90 to i64
  %92 = add i64 %24, 431
  %93 = add i64 %92, %91
  %94 = inttoptr i64 %93 to i32*
  %95 = load atomic i32, i32* %94 monotonic, align 4
  %96 = trunc i64 %5 to i32
  %97 = icmp eq i32 %95, %96
  br i1 %97, label %98, label %137

98:                                               ; preds = %89
  %99 = zext i8 %2 to i64
  %100 = shl nuw nsw i64 %99, 2
  %101 = add i64 %92, %100
  %102 = inttoptr i64 %101 to i32*
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = zext i32 %103 to i64
  %105 = or i64 %14, %104
  %106 = and i64 %104, 1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %137, label %108

108:                                              ; preds = %98
  %109 = add i64 %105, -1
  %110 = inttoptr i64 %109 to i32*
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = zext i32 %111 to i64
  %113 = or i64 %14, %112
  %114 = add i64 %113, 7
  %115 = inttoptr i64 %114 to i16*
  %116 = load atomic i16, i16* %115 monotonic, align 2
  %117 = icmp eq i16 %116, 172
  br i1 %117, label %118, label %137

118:                                              ; preds = %108
  %119 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %120 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %119, align 8
  %121 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %120, null
  br i1 %121, label %124, label %122

122:                                              ; preds = %118
  %123 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %120, i64 %105) #6
  br label %360

124:                                              ; preds = %118
  %125 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %126 = load i64*, i64** %125, align 8
  %127 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %128 = load i64*, i64** %127, align 8
  %129 = icmp eq i64* %126, %128
  br i1 %129, label %130, label %132

130:                                              ; preds = %124
  %131 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %132

132:                                              ; preds = %130, %124
  %133 = phi i64* [ %131, %130 ], [ %126, %124 ]
  %134 = ptrtoint i64* %133 to i64
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %135 to i64*
  store i64* %136, i64** %125, align 8
  store i64 %105, i64* %133, align 8
  br label %360

137:                                              ; preds = %98, %108, %89, %87
  %138 = and i8 %8, 4
  %139 = icmp eq i8 %138, 0
  br i1 %139, label %344, label %140

140:                                              ; preds = %137
  switch i8 %9, label %143 [
    i8 1, label %144
    i8 5, label %141
    i8 3, label %142
  ]

141:                                              ; preds = %140
  br label %144

142:                                              ; preds = %140
  br label %144

143:                                              ; preds = %140
  br label %144

144:                                              ; preds = %140, %141, %142, %143
  %145 = phi i8 [ 4, %141 ], [ 2, %142 ], [ %9, %143 ], [ 0, %140 ]
  %146 = icmp eq i8 %145, %2
  br i1 %146, label %147, label %344

147:                                              ; preds = %144
  %148 = and i64 %5, -4294967296
  %149 = add i64 %5, 19
  %150 = inttoptr i64 %149 to i32*
  %151 = load i32, i32* %150, align 4
  %152 = zext i32 %151 to i64
  %153 = or i64 %148, %152
  %154 = and i64 %152, 1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %158

156:                                              ; preds = %147
  %157 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %184

158:                                              ; preds = %147
  %159 = add i64 %153, -1
  %160 = inttoptr i64 %159 to i32*
  %161 = load atomic i32, i32* %160 monotonic, align 4
  %162 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %163 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %162, null
  br i1 %163, label %170, label %164

164:                                              ; preds = %158
  %165 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %162, i64 0, i32 0, i32 1
  %166 = load i8, i8* %165, align 8, !range !3
  %167 = icmp eq i8 %166, 0
  br i1 %167, label %170, label %168

168:                                              ; preds = %164
  %169 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %162, i64 0, i32 1, i64 0
  br label %178

170:                                              ; preds = %164, %158
  %171 = and i64 %5, -262144
  %172 = or i64 %171, 16
  %173 = inttoptr i64 %172 to i64*
  %174 = load i64, i64* %173, align 16
  %175 = add i64 %174, -41416
  %176 = inttoptr i64 %175 to %"class.v8::internal::Isolate"*
  %177 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %176, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %178

178:                                              ; preds = %170, %168
  %179 = phi i64* [ %177, %170 ], [ %169, %168 ]
  %180 = getelementptr inbounds i64, i64* %179, i64 10
  %181 = load i64, i64* %180, align 8
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %161, %182
  br i1 %183, label %207, label %184

184:                                              ; preds = %178, %156
  %185 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %157, %156 ], [ %162, %178 ]
  %186 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %185, null
  br i1 %186, label %193, label %187

187:                                              ; preds = %184
  %188 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %185, i64 0, i32 0, i32 1
  %189 = load i8, i8* %188, align 8, !range !3
  %190 = icmp eq i8 %189, 0
  br i1 %190, label %193, label %191

191:                                              ; preds = %187
  %192 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %185, i64 0, i32 1, i64 0
  br label %201

193:                                              ; preds = %187, %184
  %194 = and i64 %5, -262144
  %195 = or i64 %194, 16
  %196 = inttoptr i64 %195 to i64*
  %197 = load i64, i64* %196, align 16
  %198 = add i64 %197, -41416
  %199 = inttoptr i64 %198 to %"class.v8::internal::Isolate"*
  %200 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %199, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %201

201:                                              ; preds = %193, %191
  %202 = phi i64* [ %200, %193 ], [ %192, %191 ]
  %203 = getelementptr inbounds i64, i64* %202, i64 4
  %204 = load i64, i64* %203, align 8
  %205 = add i64 %204, -1
  %206 = inttoptr i64 %205 to i32*
  br label %207

207:                                              ; preds = %178, %201
  %208 = phi i32* [ %160, %178 ], [ %206, %201 ]
  %209 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %162, %178 ], [ %185, %201 ]
  %210 = phi i64 [ %153, %178 ], [ %204, %201 ]
  %211 = and i64 %210, -4294967296
  %212 = load atomic i32, i32* %208 monotonic, align 4
  %213 = zext i32 %212 to i64
  %214 = or i64 %211, %213
  %215 = add i64 %214, 7
  %216 = inttoptr i64 %215 to i16*
  %217 = load atomic i16, i16* %216 monotonic, align 2
  %218 = icmp eq i16 %217, 172
  br i1 %218, label %219, label %344

219:                                              ; preds = %207
  br i1 %155, label %245, label %220

220:                                              ; preds = %219
  %221 = add i64 %153, -1
  %222 = inttoptr i64 %221 to i32*
  %223 = load atomic i32, i32* %222 monotonic, align 4
  %224 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %209, null
  br i1 %224, label %231, label %225

225:                                              ; preds = %220
  %226 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %209, i64 0, i32 0, i32 1
  %227 = load i8, i8* %226, align 8, !range !3
  %228 = icmp eq i8 %227, 0
  br i1 %228, label %231, label %229

229:                                              ; preds = %225
  %230 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %209, i64 0, i32 1, i64 0
  br label %239

231:                                              ; preds = %225, %220
  %232 = and i64 %5, -262144
  %233 = or i64 %232, 16
  %234 = inttoptr i64 %233 to i64*
  %235 = load i64, i64* %234, align 16
  %236 = add i64 %235, -41416
  %237 = inttoptr i64 %236 to %"class.v8::internal::Isolate"*
  %238 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %237, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %239

239:                                              ; preds = %231, %229
  %240 = phi i64* [ %238, %231 ], [ %230, %229 ]
  %241 = getelementptr inbounds i64, i64* %240, i64 10
  %242 = load i64, i64* %241, align 8
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %223, %243
  br i1 %244, label %265, label %245

245:                                              ; preds = %219, %239
  %246 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %209, null
  br i1 %246, label %253, label %247

247:                                              ; preds = %245
  %248 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %209, i64 0, i32 0, i32 1
  %249 = load i8, i8* %248, align 8, !range !3
  %250 = icmp eq i8 %249, 0
  br i1 %250, label %253, label %251

251:                                              ; preds = %247
  %252 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %209, i64 0, i32 1, i64 0
  br label %261

253:                                              ; preds = %247, %245
  %254 = and i64 %5, -262144
  %255 = or i64 %254, 16
  %256 = inttoptr i64 %255 to i64*
  %257 = load i64, i64* %256, align 16
  %258 = add i64 %257, -41416
  %259 = inttoptr i64 %258 to %"class.v8::internal::Isolate"*
  %260 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %259, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %261

261:                                              ; preds = %253, %251
  %262 = phi i64* [ %260, %253 ], [ %252, %251 ]
  %263 = getelementptr inbounds i64, i64* %262, i64 4
  %264 = load i64, i64* %263, align 8
  br label %265

265:                                              ; preds = %239, %261
  %266 = phi i64 [ %264, %261 ], [ %153, %239 ]
  %267 = add i64 %266, 10
  %268 = inttoptr i64 %267 to i8*
  %269 = load i8, i8* %268, align 1
  %270 = lshr i8 %269, 2
  %271 = icmp eq i8 %270, %2
  br i1 %271, label %272, label %344

272:                                              ; preds = %265
  br i1 %155, label %298, label %273

273:                                              ; preds = %272
  %274 = add i64 %153, -1
  %275 = inttoptr i64 %274 to i32*
  %276 = load atomic i32, i32* %275 monotonic, align 4
  %277 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %209, null
  br i1 %277, label %284, label %278

278:                                              ; preds = %273
  %279 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %209, i64 0, i32 0, i32 1
  %280 = load i8, i8* %279, align 8, !range !3
  %281 = icmp eq i8 %280, 0
  br i1 %281, label %284, label %282

282:                                              ; preds = %278
  %283 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %209, i64 0, i32 1, i64 0
  br label %292

284:                                              ; preds = %278, %273
  %285 = and i64 %5, -262144
  %286 = or i64 %285, 16
  %287 = inttoptr i64 %286 to i64*
  %288 = load i64, i64* %287, align 16
  %289 = add i64 %288, -41416
  %290 = inttoptr i64 %289 to %"class.v8::internal::Isolate"*
  %291 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %290, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %292

292:                                              ; preds = %284, %282
  %293 = phi i64* [ %291, %284 ], [ %283, %282 ]
  %294 = getelementptr inbounds i64, i64* %293, i64 10
  %295 = load i64, i64* %294, align 8
  %296 = trunc i64 %295 to i32
  %297 = icmp eq i32 %276, %296
  br i1 %297, label %318, label %298

298:                                              ; preds = %272, %292
  %299 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %209, null
  br i1 %299, label %306, label %300

300:                                              ; preds = %298
  %301 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %209, i64 0, i32 0, i32 1
  %302 = load i8, i8* %301, align 8, !range !3
  %303 = icmp eq i8 %302, 0
  br i1 %303, label %306, label %304

304:                                              ; preds = %300
  %305 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %209, i64 0, i32 1, i64 0
  br label %314

306:                                              ; preds = %300, %298
  %307 = and i64 %5, -262144
  %308 = or i64 %307, 16
  %309 = inttoptr i64 %308 to i64*
  %310 = load i64, i64* %309, align 16
  %311 = add i64 %310, -41416
  %312 = inttoptr i64 %311 to %"class.v8::internal::Isolate"*
  %313 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %312, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %314

314:                                              ; preds = %306, %304
  %315 = phi i64* [ %313, %306 ], [ %305, %304 ]
  %316 = getelementptr inbounds i64, i64* %315, i64 4
  %317 = load i64, i64* %316, align 8
  br label %318

318:                                              ; preds = %292, %314
  %319 = phi i64 [ %317, %314 ], [ %153, %292 ]
  %320 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %321 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %320, align 8
  %322 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %321, null
  br i1 %322, label %325, label %323

323:                                              ; preds = %318
  %324 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %321, i64 %319) #6
  br label %360

325:                                              ; preds = %318
  %326 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %327 = load i64*, i64** %326, align 8
  %328 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %329 = load i64*, i64** %328, align 8
  %330 = icmp eq i64* %327, %329
  br i1 %330, label %331, label %333

331:                                              ; preds = %325
  %332 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %333

333:                                              ; preds = %331, %325
  %334 = phi i64* [ %332, %331 ], [ %327, %325 ]
  %335 = ptrtoint i64* %334 to i64
  %336 = add i64 %335, 8
  %337 = inttoptr i64 %336 to i64*
  store i64* %337, i64** %326, align 8
  store i64 %319, i64* %334, align 8
  br label %360

338:                                              ; preds = %25, %85, %55
  %339 = add nsw i8 %9, -17
  %340 = icmp ult i8 %339, 11
  %341 = or i8 %9, 2
  %342 = icmp eq i8 %341, 15
  %343 = or i1 %342, %340
  br label %344

344:                                              ; preds = %137, %265, %207, %144, %338
  %345 = phi i1 [ false, %338 ], [ true, %137 ], [ true, %144 ], [ true, %207 ], [ true, %265 ]
  %346 = phi i1 [ %343, %338 ], [ true, %137 ], [ true, %144 ], [ true, %207 ], [ true, %265 ]
  %347 = icmp ult i8 %2, 6
  br i1 %347, label %348, label %354

348:                                              ; preds = %344
  %349 = icmp ne i8 %9, 3
  %350 = and i1 %349, %345
  %351 = and i1 %346, %350
  br i1 %351, label %352, label %355

352:                                              ; preds = %348
  %353 = tail call zeroext i1 @_ZN2v88internal35IsMoreGeneralElementsKindTransitionENS0_12ElementsKindES1_(i8 zeroext %9, i8 zeroext %2) #6
  br i1 %353, label %357, label %355

354:                                              ; preds = %344
  br i1 %346, label %357, label %355

355:                                              ; preds = %352, %348, %354
  %356 = tail call i64* @_ZN2v88internal3Map18CopyAsElementsKindEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_14TransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i8 zeroext %2, i32 1)
  br label %360

357:                                              ; preds = %352, %354
  %358 = bitcast %"class.v8::internal::MapUpdater"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %358) #6
  call void @_ZN2v88internal10MapUpdaterC1EPNS0_7IsolateENS0_6HandleINS0_3MapEEE(%"class.v8::internal::MapUpdater"* nonnull %4, %"class.v8::internal::Isolate"* %0, i64* %1) #6
  %359 = call i64* @_ZN2v88internal10MapUpdater23ReconfigureElementsKindENS0_12ElementsKindE(%"class.v8::internal::MapUpdater"* nonnull %4, i8 zeroext %2) #6
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %358) #6
  br label %360

360:                                              ; preds = %357, %355, %40, %50, %70, %80, %122, %132, %323, %333, %3
  %361 = phi i64* [ %1, %3 ], [ %359, %357 ], [ %356, %355 ], [ %41, %40 ], [ %51, %50 ], [ %71, %70 ], [ %81, %80 ], [ %123, %122 ], [ %133, %132 ], [ %324, %323 ], [ %334, %333 ]
  ret i64* %361
}

declare zeroext i1 @_ZN2v88internal35IsMoreGeneralElementsKindTransitionENS0_12ElementsKindES1_(i8 zeroext, i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map18CopyAsElementsKindEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_14TransitionFlagE(%"class.v8::internal::Isolate"*, i64*, i8 zeroext, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %6 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %7 = icmp eq i32 %3, 0
  br i1 %7, label %8, label %132

8:                                                ; preds = %4
  %9 = load i64, i64* %1, align 8
  %10 = bitcast %"class.v8::internal::TransitionsAccessor"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #6
  %11 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 1, i32 0, i32 0
  store i64* null, i64** %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %9, i64* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 5
  store i8 0, i8* %15, align 4
  %16 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %9, 35
  %19 = inttoptr i64 %18 to i32*
  %20 = load atomic i32, i32* %19 acquire, align 4
  %21 = and i64 %17, 4294967295
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #6
  %23 = zext i32 %20 to i64
  %24 = or i64 %17, %23
  store i64 %24, i64* %14, align 8
  %25 = and i64 %23, 1
  %26 = icmp eq i64 %25, 0
  %27 = icmp eq i32 %20, 3
  %28 = or i1 %27, %26
  br i1 %28, label %29, label %31

29:                                               ; preds = %8
  %30 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 1, i32* %30, align 8
  br label %59

31:                                               ; preds = %8
  %32 = and i64 %23, 3
  switch i64 %32, label %58 [
    i64 3, label %33
    i64 1, label %35
  ]

33:                                               ; preds = %31
  %34 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 3, i32* %34, align 8
  br label %59

35:                                               ; preds = %31
  %36 = add i64 %24, -1
  %37 = inttoptr i64 %36 to i32*
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = zext i32 %38 to i64
  %40 = or i64 %17, %39
  %41 = add i64 %40, 7
  %42 = inttoptr i64 %41 to i16*
  %43 = load atomic i16, i16* %42 monotonic, align 2
  %44 = icmp eq i16 %43, 160
  br i1 %44, label %45, label %47

45:                                               ; preds = %35
  %46 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 4, i32* %46, align 8
  br label %59

47:                                               ; preds = %35
  %48 = load atomic i32, i32* %37 monotonic, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %17, %49
  %51 = add i64 %50, 7
  %52 = inttoptr i64 %51 to i16*
  %53 = load atomic i16, i16* %52 monotonic, align 2
  %54 = icmp eq i16 %53, 110
  %55 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  br i1 %54, label %56, label %57

56:                                               ; preds = %47
  store i32 0, i32* %55, align 8
  br label %59

57:                                               ; preds = %47
  store i32 2, i32* %55, align 8
  br label %59

58:                                               ; preds = %31
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

59:                                               ; preds = %57, %56, %45, %33, %29
  %60 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 481
  %61 = load i64, i64* %60, align 8
  %62 = call i64 @_ZN2v88internal19TransitionsAccessor13SearchSpecialENS0_6SymbolE(%"class.v8::internal::TransitionsAccessor"* nonnull %5, i64 %61) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #6
  %63 = bitcast %"class.v8::internal::TransitionsAccessor"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %63) #6
  %64 = ptrtoint i64* %1 to i64
  %65 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %65, align 8
  %66 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 1
  %67 = bitcast %"class.v8::internal::Handle.1140"* %66 to i64*
  store i64 %64, i64* %67, align 8
  %68 = load i64, i64* %1, align 8
  %69 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %68, i64* %69, align 8
  %70 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %70, align 8
  %71 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 5
  store i8 0, i8* %71, align 4
  %72 = load i64, i64* %16, align 8
  %73 = add i64 %68, 35
  %74 = inttoptr i64 %73 to i32*
  %75 = load atomic i32, i32* %74 acquire, align 4
  %76 = and i64 %72, 4294967295
  %77 = icmp eq i64 %76, 0
  call void @llvm.assume(i1 %77) #6
  %78 = zext i32 %75 to i64
  %79 = or i64 %72, %78
  store i64 %79, i64* %70, align 8
  %80 = and i64 %78, 1
  %81 = icmp eq i64 %80, 0
  %82 = icmp eq i32 %75, 3
  %83 = or i1 %82, %81
  br i1 %83, label %84, label %86

84:                                               ; preds = %59
  %85 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 1, i32* %85, align 8
  br label %114

86:                                               ; preds = %59
  %87 = and i64 %78, 3
  switch i64 %87, label %113 [
    i64 3, label %88
    i64 1, label %90
  ]

88:                                               ; preds = %86
  %89 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 3, i32* %89, align 8
  br label %114

90:                                               ; preds = %86
  %91 = add i64 %79, -1
  %92 = inttoptr i64 %91 to i32*
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = zext i32 %93 to i64
  %95 = or i64 %72, %94
  %96 = add i64 %95, 7
  %97 = inttoptr i64 %96 to i16*
  %98 = load atomic i16, i16* %97 monotonic, align 2
  %99 = icmp eq i16 %98, 160
  br i1 %99, label %100, label %102

100:                                              ; preds = %90
  %101 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 4, i32* %101, align 8
  br label %114

102:                                              ; preds = %90
  %103 = load atomic i32, i32* %92 monotonic, align 4
  %104 = zext i32 %103 to i64
  %105 = or i64 %72, %104
  %106 = add i64 %105, 7
  %107 = inttoptr i64 %106 to i16*
  %108 = load atomic i16, i16* %107 monotonic, align 2
  %109 = icmp eq i16 %108, 110
  %110 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  br i1 %109, label %111, label %112

111:                                              ; preds = %102
  store i32 0, i32* %110, align 8
  br label %114

112:                                              ; preds = %102
  store i32 2, i32* %110, align 8
  br label %114

113:                                              ; preds = %86
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

114:                                              ; preds = %84, %88, %100, %111, %112
  %115 = call zeroext i1 @_ZN2v88internal19TransitionsAccessor22CanHaveMoreTransitionsEv(%"class.v8::internal::TransitionsAccessor"* nonnull %6) #6
  br i1 %115, label %116, label %131

116:                                              ; preds = %114
  %117 = trunc i64 %62 to i32
  %118 = icmp eq i32 %117, 0
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %63) #6
  br i1 %118, label %119, label %132

119:                                              ; preds = %116
  %120 = call i64* @_ZN2v88internal3Map25CopyForElementsTransitionEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %0, i64* %1)
  %121 = icmp ult i8 %2, 39
  br i1 %121, label %123, label %122, !prof !2

122:                                              ; preds = %119
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.30, i64 0, i64 0)) #7
  unreachable

123:                                              ; preds = %119
  %124 = load i64, i64* %120, align 8
  %125 = add i64 %124, 10
  %126 = inttoptr i64 %125 to i8*
  %127 = load i8, i8* %126, align 1
  %128 = and i8 %127, 3
  %129 = shl i8 %2, 2
  %130 = or i8 %128, %129
  store i8 %130, i8* %126, align 1
  call void @_ZN2v88internal3Map17ConnectTransitionEPNS0_7IsolateENS0_6HandleIS1_EES5_NS4_INS0_4NameEEENS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %120, i64* %60, i32 2)
  br label %181

131:                                              ; preds = %114
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %63) #6
  br label %132

132:                                              ; preds = %4, %131, %116
  %133 = load i64, i64* %1, align 8
  %134 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %135 = load i64, i64* %134, align 8
  %136 = add i64 %133, 23
  %137 = inttoptr i64 %136 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = and i64 %135, 4294967295
  %140 = icmp eq i64 %139, 0
  call void @llvm.assume(i1 %140) #6
  %141 = zext i32 %138 to i64
  %142 = or i64 %135, %141
  %143 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %144 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %143, align 8
  %145 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %144, null
  br i1 %145, label %148, label %146

146:                                              ; preds = %132
  %147 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %144, i64 %142) #6
  br label %161

148:                                              ; preds = %132
  %149 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %150 = load i64*, i64** %149, align 8
  %151 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %152 = load i64*, i64** %151, align 8
  %153 = icmp eq i64* %150, %152
  br i1 %153, label %154, label %156

154:                                              ; preds = %148
  %155 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %156

156:                                              ; preds = %154, %148
  %157 = phi i64* [ %155, %154 ], [ %150, %148 ]
  %158 = ptrtoint i64* %157 to i64
  %159 = add i64 %158, 8
  %160 = inttoptr i64 %159 to i64*
  store i64* %160, i64** %149, align 8
  store i64 %142, i64* %157, align 8
  br label %161

161:                                              ; preds = %146, %156
  %162 = phi i64* [ %147, %146 ], [ %157, %156 ]
  %163 = load i64, i64* %1, align 8
  %164 = add i64 %163, 11
  %165 = inttoptr i64 %164 to i32*
  %166 = load atomic i32, i32* %165 acquire, align 4
  %167 = lshr i32 %166, 10
  %168 = and i32 %167, 1023
  %169 = call i64* @_ZN2v88internal15DescriptorArray8CopyUpToEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %162, i32 %168, i32 0) #6
  %170 = call i64* @_ZN2v88internal3Map22CopyReplaceDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEENS0_14TransitionFlagENS0_11MaybeHandleINS0_4NameEEEPKcNS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %169, i32 1, i64* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0), i32 2) #6
  %171 = icmp ult i8 %2, 39
  br i1 %171, label %173, label %172, !prof !2

172:                                              ; preds = %161
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.30, i64 0, i64 0)) #7
  unreachable

173:                                              ; preds = %161
  %174 = load i64, i64* %170, align 8
  %175 = add i64 %174, 10
  %176 = inttoptr i64 %175 to i8*
  %177 = load i8, i8* %176, align 1
  %178 = and i8 %177, 3
  %179 = shl i8 %2, 2
  %180 = or i8 %178, %179
  store i8 %180, i8* %176, align 1
  br label %181

181:                                              ; preds = %173, %123
  %182 = phi i64* [ %120, %123 ], [ %170, %173 ]
  ret i64* %182
}

declare i64* @_ZN2v88internal10MapUpdater23ReconfigureElementsKindENS0_12ElementsKindE(%"class.v8::internal::MapUpdater"*, i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map14AsElementsKindEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindE(%"class.v8::internal::Isolate"*, i64*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %5 = load i64, i64* %1, align 8
  %6 = add i64 %5, 10
  %7 = inttoptr i64 %6 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = lshr i8 %8, 2
  %10 = icmp eq i8 %9, %2
  br i1 %10, label %69, label %11

11:                                               ; preds = %3
  %12 = bitcast %"class.v8::internal::TransitionsAccessor"* %4 to i8*
  %13 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 0
  %14 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 1, i32 0, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 3, i32 0, i32 0
  %17 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 5
  %18 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %19 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %4, i64 0, i32 4
  %20 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 481
  br label %21

21:                                               ; preds = %11, %63
  %22 = phi i64 [ %60, %63 ], [ %5, %11 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %12) #6
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %13, align 8
  store i64* null, i64** %14, align 8
  store i64 %22, i64* %15, align 8
  store i64 0, i64* %16, align 8
  store i8 0, i8* %17, align 4
  %23 = load i64, i64* %18, align 8
  %24 = add i64 %22, 35
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 acquire, align 4
  %27 = and i64 %23, 4294967295
  %28 = icmp eq i64 %27, 0
  call void @llvm.assume(i1 %28) #6
  %29 = zext i32 %26 to i64
  %30 = or i64 %23, %29
  store i64 %30, i64* %16, align 8
  %31 = and i64 %29, 1
  %32 = icmp eq i64 %31, 0
  %33 = icmp eq i32 %26, 3
  %34 = or i1 %33, %32
  br i1 %34, label %57, label %35

35:                                               ; preds = %21
  %36 = and i64 %29, 3
  switch i64 %36, label %56 [
    i64 3, label %57
    i64 1, label %37
  ]

37:                                               ; preds = %35
  %38 = add i64 %30, -1
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %23, %41
  %43 = add i64 %42, 7
  %44 = inttoptr i64 %43 to i16*
  %45 = load atomic i16, i16* %44 monotonic, align 2
  %46 = icmp eq i16 %45, 160
  br i1 %46, label %57, label %47

47:                                               ; preds = %37
  %48 = load atomic i32, i32* %39 monotonic, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %23, %49
  %51 = add i64 %50, 7
  %52 = inttoptr i64 %51 to i16*
  %53 = load atomic i16, i16* %52 monotonic, align 2
  %54 = icmp eq i16 %53, 110
  %55 = select i1 %54, i32 0, i32 2
  br label %57

56:                                               ; preds = %35
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

57:                                               ; preds = %47, %37, %35, %21
  %58 = phi i32 [ 1, %21 ], [ 3, %35 ], [ 4, %37 ], [ %55, %47 ]
  store i32 %58, i32* %19, align 8
  %59 = load i64, i64* %20, align 8
  %60 = call i64 @_ZN2v88internal19TransitionsAccessor13SearchSpecialENS0_6SymbolE(%"class.v8::internal::TransitionsAccessor"* nonnull %4, i64 %59) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #6
  %61 = trunc i64 %60 to i32
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %69, label %63

63:                                               ; preds = %57
  %64 = add i64 %60, 10
  %65 = inttoptr i64 %64 to i8*
  %66 = load i8, i8* %65, align 1
  %67 = lshr i8 %66, 2
  %68 = icmp eq i8 %67, %2
  br i1 %68, label %69, label %21

69:                                               ; preds = %57, %63, %3
  %70 = phi i64 [ %5, %3 ], [ %22, %57 ], [ %60, %63 ]
  %71 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %72 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %71, align 8
  %73 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %72, null
  br i1 %73, label %77, label %74

74:                                               ; preds = %69
  %75 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %72, i64 %70) #6
  %76 = load i64, i64* %75, align 8
  br label %90

77:                                               ; preds = %69
  %78 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %79 = load i64*, i64** %78, align 8
  %80 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %81 = load i64*, i64** %80, align 8
  %82 = icmp eq i64* %79, %81
  br i1 %82, label %83, label %85

83:                                               ; preds = %77
  %84 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %85

85:                                               ; preds = %83, %77
  %86 = phi i64* [ %84, %83 ], [ %79, %77 ]
  %87 = ptrtoint i64* %86 to i64
  %88 = add i64 %87, 8
  %89 = inttoptr i64 %88 to i64*
  store i64* %89, i64** %78, align 8
  store i64 %70, i64* %86, align 8
  br label %90

90:                                               ; preds = %74, %85
  %91 = phi i64 [ %76, %74 ], [ %70, %85 ]
  %92 = phi i64* [ %75, %74 ], [ %86, %85 ]
  %93 = add i64 %91, 10
  %94 = inttoptr i64 %93 to i8*
  %95 = load i8, i8* %94, align 1
  %96 = lshr i8 %95, 2
  %97 = icmp eq i8 %96, %2
  br i1 %97, label %201, label %98

98:                                               ; preds = %90
  %99 = add i64 %91, 11
  %100 = inttoptr i64 %99 to i32*
  %101 = load atomic i32, i32* %100 acquire, align 4
  %102 = and i32 %101, 1048576
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %194

104:                                              ; preds = %98
  %105 = add i64 %91, 7
  %106 = inttoptr i64 %105 to i16*
  %107 = load atomic i16, i16* %106 monotonic, align 2
  %108 = icmp eq i16 %107, 1057
  br i1 %108, label %109, label %178

109:                                              ; preds = %104
  %110 = load atomic i32, i32* %100 acquire, align 4
  %111 = and i32 %110, 1047552
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %178, label %113

113:                                              ; preds = %109
  %114 = and i64 %91, -4294967296
  %115 = add i64 %91, 19
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = or i64 %114, %118
  %120 = and i64 %118, 1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %124

122:                                              ; preds = %113
  %123 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %150

124:                                              ; preds = %113
  %125 = add i64 %119, -1
  %126 = inttoptr i64 %125 to i32*
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %129 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %128, null
  br i1 %129, label %136, label %130

130:                                              ; preds = %124
  %131 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %128, i64 0, i32 0, i32 1
  %132 = load i8, i8* %131, align 8, !range !3
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %136, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %128, i64 0, i32 1, i64 0
  br label %144

136:                                              ; preds = %130, %124
  %137 = and i64 %91, -262144
  %138 = or i64 %137, 16
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139, align 16
  %141 = add i64 %140, -41416
  %142 = inttoptr i64 %141 to %"class.v8::internal::Isolate"*
  %143 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %142, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %144

144:                                              ; preds = %136, %134
  %145 = phi i64* [ %143, %136 ], [ %135, %134 ]
  %146 = getelementptr inbounds i64, i64* %145, i64 10
  %147 = load i64, i64* %146, align 8
  %148 = trunc i64 %147 to i32
  %149 = icmp eq i32 %127, %148
  br i1 %149, label %171, label %150

150:                                              ; preds = %144, %122
  %151 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %123, %122 ], [ %128, %144 ]
  %152 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %151, null
  br i1 %152, label %159, label %153

153:                                              ; preds = %150
  %154 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %151, i64 0, i32 0, i32 1
  %155 = load i8, i8* %154, align 8, !range !3
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %159, label %157

157:                                              ; preds = %153
  %158 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %151, i64 0, i32 1, i64 0
  br label %167

159:                                              ; preds = %153, %150
  %160 = and i64 %91, -262144
  %161 = or i64 %160, 16
  %162 = inttoptr i64 %161 to i64*
  %163 = load i64, i64* %162, align 16
  %164 = add i64 %163, -41416
  %165 = inttoptr i64 %164 to %"class.v8::internal::Isolate"*
  %166 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %165, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %167

167:                                              ; preds = %159, %157
  %168 = phi i64* [ %166, %159 ], [ %158, %157 ]
  %169 = getelementptr inbounds i64, i64* %168, i64 4
  %170 = load i64, i64* %169, align 8
  br label %171

171:                                              ; preds = %167, %144
  %172 = phi i64 [ %170, %167 ], [ %119, %144 ]
  %173 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 4
  %174 = load i64, i64* %173, align 8
  %175 = trunc i64 %172 to i32
  %176 = trunc i64 %174 to i32
  %177 = icmp eq i32 %175, %176
  br i1 %177, label %194, label %178

178:                                              ; preds = %171, %109, %104
  %179 = icmp ugt i8 %95, 23
  br i1 %179, label %194, label %180

180:                                              ; preds = %178, %190
  %181 = phi i64* [ %192, %190 ], [ %92, %178 ]
  %182 = phi i8 [ %191, %190 ], [ %96, %178 ]
  %183 = icmp eq i8 %182, 3
  %184 = add i8 %182, -17
  %185 = icmp ult i8 %184, 11
  %186 = or i1 %183, %185
  %187 = add i8 %182, -28
  %188 = icmp ult i8 %187, 11
  %189 = or i1 %188, %186
  br i1 %189, label %194, label %190

190:                                              ; preds = %180
  %191 = call zeroext i8 @_ZN2v88internal29GetNextTransitionElementsKindENS0_12ElementsKindE(i8 zeroext %182) #6
  %192 = call i64* @_ZN2v88internal3Map18CopyAsElementsKindEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_14TransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %181, i8 zeroext %191, i32 0) #6
  %193 = icmp eq i8 %191, %2
  br i1 %193, label %201, label %180

194:                                              ; preds = %180, %178, %171, %98
  %195 = phi i32 [ 0, %178 ], [ 1, %171 ], [ 1, %98 ], [ 0, %180 ]
  %196 = phi i8 [ %96, %178 ], [ %96, %171 ], [ %96, %98 ], [ %182, %180 ]
  %197 = phi i64* [ %92, %178 ], [ %92, %171 ], [ %92, %98 ], [ %181, %180 ]
  %198 = icmp eq i8 %196, %2
  br i1 %198, label %201, label %199

199:                                              ; preds = %194
  %200 = call i64* @_ZN2v88internal3Map18CopyAsElementsKindEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_14TransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %197, i8 zeroext %2, i32 %195) #6
  br label %201

201:                                              ; preds = %190, %199, %194, %90
  %202 = phi i64* [ %92, %90 ], [ %200, %199 ], [ %197, %194 ], [ %192, %190 ]
  ret i64* %202
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal3Map28NumberOfEnumerablePropertiesEv(%"class.v8::internal::Map"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 23
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %3, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = lshr i32 %12, 10
  %14 = and i32 %13, 1023
  %15 = zext i32 %14 to i64
  %16 = icmp eq i32 %14, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %1
  %18 = add i64 %9, -1
  br label %21

19:                                               ; preds = %53, %1
  %20 = phi i32 [ 0, %1 ], [ %54, %53 ]
  ret i32 %20

21:                                               ; preds = %17, %53
  %22 = phi i32 [ 0, %17 ], [ %54, %53 ]
  %23 = phi i64 [ 0, %17 ], [ %55, %53 ]
  %24 = mul nuw nsw i64 %23, 51539607552
  %25 = add nuw nsw i64 %24, 68719476736
  %26 = lshr exact i64 %25, 32
  %27 = or i64 %26, 3
  %28 = add i64 %27, %9
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 32
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %53

33:                                               ; preds = %21
  %34 = add i64 %18, %26
  %35 = inttoptr i64 %34 to i32*
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = zext i32 %36 to i64
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %33
  %41 = or i64 %4, %37
  %42 = add i64 %41, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %4, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = icmp eq i16 %49, 64
  br i1 %50, label %53, label %51

51:                                               ; preds = %33, %40
  %52 = add nsw i32 %22, 1
  br label %53

53:                                               ; preds = %21, %51, %40
  %54 = phi i32 [ %52, %51 ], [ %22, %40 ], [ %22, %21 ]
  %55 = add nuw nsw i64 %23, 1
  %56 = icmp eq i64 %55, %15
  br i1 %56, label %19, label %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal3Map23OnlyHasSimplePropertiesEv(%"class.v8::internal::Map"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 10
  %5 = inttoptr i64 %4 to i8*
  %6 = load i8, i8* %5, align 1
  %7 = lshr i8 %6, 2
  %8 = add nsw i8 %7, -15
  %9 = icmp ult i8 %8, 2
  br i1 %9, label %21, label %10

10:                                               ; preds = %1
  %11 = add i64 %3, 7
  %12 = inttoptr i64 %11 to i16*
  %13 = load atomic i16, i16* %12 monotonic, align 2
  %14 = icmp ult i16 %13, 1041
  br i1 %14, label %21, label %15

15:                                               ; preds = %10
  %16 = add i64 %3, 11
  %17 = inttoptr i64 %16 to i32*
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 2097152
  %20 = icmp eq i32 %19, 0
  br label %21

21:                                               ; preds = %15, %10, %1
  %22 = phi i1 [ false, %10 ], [ false, %1 ], [ %20, %15 ]
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal3Map39MayHaveReadOnlyElementsInPrototypeChainEPNS0_7IsolateE(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::PrototypeIterator", align 8
  %4 = bitcast %"class.v8::internal::PrototypeIterator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #6
  %5 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %3, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %1, %"class.v8::internal::Isolate"** %7, align 8
  %8 = add i64 %6, 7
  %9 = inttoptr i64 %8 to i16*
  %10 = load atomic i16, i16* %9 monotonic, align 2
  %11 = icmp ugt i16 %10, 185
  br i1 %11, label %54, label %12

12:                                               ; preds = %2
  %13 = add i64 %6, 4
  %14 = inttoptr i64 %13 to i8*
  %15 = load atomic i8, i8* %14 monotonic, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %45, label %17

17:                                               ; preds = %12
  %18 = zext i8 %15 to i64
  %19 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = and i64 %20, -4294967296
  %22 = add i64 %20, -1
  %23 = inttoptr i64 %22 to i32*
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = zext i32 %24 to i64
  %26 = or i64 %21, %25
  %27 = add i64 %26, 19
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %21, %30
  %32 = shl nuw nsw i64 %18, 2
  %33 = add nuw nsw i64 %32, 7
  %34 = add i64 %33, %31
  %35 = inttoptr i64 %34 to i32*
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %21, %37
  %39 = add i64 %38, 27
  %40 = inttoptr i64 %39 to i32*
  %41 = load atomic i32, i32* %40 acquire, align 4
  %42 = zext i32 %41 to i64
  %43 = or i64 %21, %42
  %44 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %7, align 8
  br label %54

45:                                               ; preds = %12
  %46 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 6
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, -4294967296
  %49 = add i64 %47, -1
  %50 = inttoptr i64 %49 to i32*
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = zext i32 %51 to i64
  %53 = or i64 %48, %52
  br label %54

54:                                               ; preds = %2, %17, %45
  %55 = phi %"class.v8::internal::Isolate"* [ %44, %17 ], [ %1, %45 ], [ %1, %2 ]
  %56 = phi i64 [ %43, %17 ], [ %53, %45 ], [ %6, %2 ]
  %57 = and i64 %56, -4294967296
  %58 = add i64 %56, 15
  %59 = inttoptr i64 %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %57, %61
  %63 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %3, i64 0, i32 1, i32 0, i32 0
  store i64 %62, i64* %63, align 8
  %64 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %3, i64 0, i32 2, i32 0, i32 0
  store i64* null, i64** %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %3, i64 0, i32 3
  store i32 0, i32* %65, align 8
  %66 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %3, i64 0, i32 4
  %67 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %55, i64 0, i32 0, i32 7, i32 0, i64 6
  %68 = load i64, i64* %67, align 8
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %60, %69
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %66, align 4
  %72 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %3, i64 0, i32 6
  store i32 0, i32* %72, align 8
  br i1 %70, label %142, label %73

73:                                               ; preds = %54
  %74 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 4
  %75 = add i64 %62, -1
  %76 = inttoptr i64 %75 to i32*
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = zext i32 %77 to i64
  %79 = or i64 %57, %78
  %80 = add i64 %79, 7
  %81 = inttoptr i64 %80 to i16*
  %82 = load atomic i16, i16* %81 monotonic, align 2
  %83 = icmp ult i16 %82, 1042
  br i1 %83, label %142, label %84

84:                                               ; preds = %73, %130
  %85 = phi i32* [ %134, %130 ], [ %76, %73 ]
  %86 = phi i64 [ %131, %130 ], [ %62, %73 ]
  %87 = load i64, i64* %74, align 8
  %88 = load atomic i32, i32* %85 monotonic, align 4
  %89 = and i64 %87, 4294967295
  %90 = icmp eq i64 %89, 0
  call void @llvm.assume(i1 %90) #6
  %91 = zext i32 %88 to i64
  %92 = or i64 %87, %91
  %93 = add i64 %92, 10
  %94 = inttoptr i64 %93 to i8*
  %95 = load i8, i8* %94, align 1
  %96 = and i8 %95, -8
  %97 = icmp eq i8 %96, 40
  br i1 %97, label %142, label %98

98:                                               ; preds = %84
  %99 = lshr i8 %95, 2
  switch i8 %99, label %127 [
    i8 12, label %100
    i8 14, label %111
  ]

100:                                              ; preds = %98
  %101 = add i64 %86, 7
  %102 = inttoptr i64 %101 to i32*
  %103 = load i32, i32* %102, align 4
  %104 = zext i32 %103 to i64
  %105 = or i64 %87, %104
  %106 = add i64 %105, 19
  %107 = inttoptr i64 %106 to i32*
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = and i32 %108, 3
  %110 = icmp eq i32 %109, 2
  br i1 %110, label %142, label %127

111:                                              ; preds = %98
  %112 = add i64 %86, 7
  %113 = inttoptr i64 %112 to i32*
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i64
  %116 = or i64 %87, %115
  %117 = add i64 %116, 11
  %118 = inttoptr i64 %117 to i32*
  %119 = load i32, i32* %118, align 4
  %120 = zext i32 %119 to i64
  %121 = or i64 %87, %120
  %122 = add i64 %121, 19
  %123 = inttoptr i64 %122 to i32*
  %124 = load atomic i32, i32* %123 monotonic, align 4
  %125 = and i32 %124, 3
  %126 = icmp eq i32 %125, 2
  br i1 %126, label %142, label %127

127:                                              ; preds = %111, %98, %100
  call void @_ZN2v88internal17PrototypeIterator7AdvanceEv(%"class.v8::internal::PrototypeIterator"* nonnull %3)
  %128 = load i8, i8* %66, align 4
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %127
  %131 = load i64, i64* %63, align 8
  %132 = and i64 %131, -4294967296
  %133 = add i64 %131, -1
  %134 = inttoptr i64 %133 to i32*
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = zext i32 %135 to i64
  %137 = or i64 %132, %136
  %138 = add i64 %137, 7
  %139 = inttoptr i64 %138 to i16*
  %140 = load atomic i16, i16* %139 monotonic, align 2
  %141 = icmp ult i16 %140, 1042
  br i1 %141, label %142, label %84

142:                                              ; preds = %127, %111, %130, %84, %100, %54, %73
  %143 = phi i1 [ true, %73 ], [ false, %54 ], [ false, %127 ], [ true, %111 ], [ true, %130 ], [ true, %84 ], [ true, %100 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #6
  ret i1 %143
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17PrototypeIterator7AdvanceEv(%"class.v8::internal::PrototypeIterator"*) local_unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.v8::internal::Handle.969", %"class.v8::internal::Handle.969"* %2, i64 0, i32 0, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = icmp eq i64* %4, null
  br i1 %5, label %6, label %28

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, 1
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %6
  %12 = and i64 %8, -4294967296
  %13 = add i64 %8, -1
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = zext i32 %15 to i64
  %17 = or i64 %12, %16
  %18 = add i64 %17, 7
  %19 = inttoptr i64 %18 to i16*
  %20 = load atomic i16, i16* %19 monotonic, align 2
  %21 = icmp eq i16 %20, 188
  br i1 %21, label %22, label %47

22:                                               ; preds = %11
  %23 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 4
  store i8 1, i8* %23, align 4
  %24 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 0
  %25 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %25, i64 0, i32 0, i32 7, i32 0, i64 6
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %7, align 8
  br label %104

28:                                               ; preds = %1
  %29 = load i64, i64* %4, align 8
  %30 = and i64 %29, -4294967296
  %31 = add i64 %29, -1
  %32 = inttoptr i64 %31 to i32*
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %30, %34
  %36 = add i64 %35, 7
  %37 = inttoptr i64 %36 to i16*
  %38 = load atomic i16, i16* %37 monotonic, align 2
  %39 = icmp eq i16 %38, 188
  br i1 %39, label %40, label %47

40:                                               ; preds = %28
  %41 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 4
  store i8 1, i8* %41, align 4
  %42 = bitcast %"class.v8::internal::PrototypeIterator"* %0 to %"class.v8::internal::Factory"**
  %43 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %43, i64 176
  %45 = ptrtoint %"class.v8::internal::Factory"* %44 to i64
  %46 = bitcast %"class.v8::internal::Handle.969"* %2 to i64*
  store i64 %45, i64* %46, align 8
  br label %104

47:                                               ; preds = %6, %11, %28
  %48 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 2, i32 0, i32 0
  %49 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 1, i32 0, i32 0
  %50 = select i1 %5, i64* %49, i64* %4
  %51 = load i64, i64* %50, align 8
  %52 = and i64 %51, -4294967296
  %53 = add i64 %51, -1
  %54 = inttoptr i64 %53 to i32*
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = zext i32 %55 to i64
  %57 = or i64 %52, %56
  %58 = add i64 %57, 15
  %59 = inttoptr i64 %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %52, %61
  %63 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 0
  %64 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 0, i32 7, i32 0, i64 6
  %66 = load i64, i64* %65, align 8
  %67 = trunc i64 %66 to i32
  %68 = icmp eq i32 %60, %67
  br i1 %68, label %79, label %69

69:                                               ; preds = %47
  %70 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 3
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %73, label %79

73:                                               ; preds = %69
  %74 = add i64 %57, 7
  %75 = inttoptr i64 %74 to i16*
  %76 = load atomic i16, i16* %75 monotonic, align 2
  %77 = icmp ne i16 %76, 190
  %78 = zext i1 %77 to i8
  br label %79

79:                                               ; preds = %73, %69, %47
  %80 = phi i8 [ 1, %47 ], [ 0, %69 ], [ %78, %73 ]
  %81 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 4
  store i8 %80, i8* %81, align 4
  br i1 %5, label %82, label %83

82:                                               ; preds = %79
  store i64 %62, i64* %49, align 8
  br label %104

83:                                               ; preds = %79
  %84 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 31, i32 4
  %85 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %84, align 8
  %86 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %85, null
  br i1 %86, label %89, label %87

87:                                               ; preds = %83
  %88 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %85, i64 %62) #6
  br label %102

89:                                               ; preds = %83
  %90 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 31, i32 0
  %91 = load i64*, i64** %90, align 8
  %92 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 31, i32 1
  %93 = load i64*, i64** %92, align 8
  %94 = icmp eq i64* %91, %93
  br i1 %94, label %95, label %97

95:                                               ; preds = %89
  %96 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %64) #6
  br label %97

97:                                               ; preds = %95, %89
  %98 = phi i64* [ %96, %95 ], [ %91, %89 ]
  %99 = ptrtoint i64* %98 to i64
  %100 = add i64 %99, 8
  %101 = inttoptr i64 %100 to i64*
  store i64* %101, i64** %90, align 8
  store i64 %62, i64* %98, align 8
  br label %102

102:                                              ; preds = %97, %87
  %103 = phi i64* [ %88, %87 ], [ %98, %97 ]
  store i64* %103, i64** %48, align 8
  br label %104

104:                                              ; preds = %102, %82, %40, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map7RawCopyEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"*, i64*, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %6 = load i64, i64* %1, align 8
  %7 = add i64 %6, 7
  %8 = inttoptr i64 %7 to i16*
  %9 = load atomic i16, i16* %8 monotonic, align 2
  %10 = tail call i64* @_ZN2v88internal7Factory6NewMapENS0_12InstanceTypeEiNS0_12ElementsKindEi(%"class.v8::internal::Factory"* %5, i16 zeroext %9, i32 %2, i8 zeroext 3, i32 %3) #6
  %11 = load i64, i64* %1, align 8
  %12 = and i64 %11, -4294967296
  %13 = add i64 %11, 15
  %14 = inttoptr i64 %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = or i64 %12, %16
  %18 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %19 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %18, align 8
  %20 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %4
  %22 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %19, i64 %17) #6
  br label %36

23:                                               ; preds = %4
  %24 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %27 = load i64*, i64** %26, align 8
  %28 = icmp eq i64* %25, %27
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %31

31:                                               ; preds = %29, %23
  %32 = phi i64* [ %30, %29 ], [ %25, %23 ]
  %33 = ptrtoint i64* %32 to i64
  %34 = add i64 %33, 8
  %35 = inttoptr i64 %34 to i64*
  store i64* %35, i64** %24, align 8
  store i64 %17, i64* %32, align 8
  br label %36

36:                                               ; preds = %21, %31
  %37 = phi i64* [ %22, %21 ], [ %32, %31 ]
  tail call void @_ZN2v88internal3Map12SetPrototypeEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10HeapObjectEEEb(%"class.v8::internal::Isolate"* %0, i64* %10, i64* %37, i1 zeroext true)
  %38 = load i64, i64* %10, align 8
  %39 = load i64, i64* %1, align 8
  %40 = and i64 %39, -4294967296
  %41 = add i64 %39, 19
  %42 = inttoptr i64 %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i64
  %45 = or i64 %40, %44
  %46 = and i64 %44, 1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %118, label %48

48:                                               ; preds = %36
  %49 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %50 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %49, null
  %51 = and i64 %39, -262144
  %52 = or i64 %51, 16
  %53 = inttoptr i64 %52 to i64*
  br i1 %50, label %83, label %54

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %49, i64 0, i32 0, i32 1
  %56 = load i8, i8* %55, align 8, !range !3
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %49, i64 0, i32 1, i64 10
  %60 = load i64, i64* %59, align 8
  %61 = trunc i64 %60 to i32
  br label %104

62:                                               ; preds = %54
  %63 = load i64, i64* %53, align 16
  %64 = add i64 %63, -41416
  %65 = inttoptr i64 %64 to %"class.v8::internal::Isolate"*
  %66 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %65, i64 0, i32 0, i32 7, i32 0, i64 10
  %67 = load i64, i64* %66, align 8
  %68 = trunc i64 %67 to i32
  br label %69

69:                                               ; preds = %75, %62
  %70 = phi i64 [ %80, %75 ], [ %45, %62 ]
  %71 = add i64 %70, -1
  %72 = inttoptr i64 %71 to i32*
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = icmp eq i32 %73, %68
  br i1 %74, label %75, label %118

75:                                               ; preds = %69
  %76 = add i64 %70, 19
  %77 = inttoptr i64 %76 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = or i64 %40, %79
  %81 = and i64 %79, 1
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %118, label %69

83:                                               ; preds = %48
  %84 = load i64, i64* %53, align 16
  %85 = add i64 %84, -41416
  %86 = inttoptr i64 %85 to %"class.v8::internal::Isolate"*
  %87 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %86, i64 0, i32 0, i32 7, i32 0, i64 10
  %88 = load i64, i64* %87, align 8
  %89 = trunc i64 %88 to i32
  br label %90

90:                                               ; preds = %96, %83
  %91 = phi i64 [ %101, %96 ], [ %45, %83 ]
  %92 = add i64 %91, -1
  %93 = inttoptr i64 %92 to i32*
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = icmp eq i32 %94, %89
  br i1 %95, label %96, label %118

96:                                               ; preds = %90
  %97 = add i64 %91, 19
  %98 = inttoptr i64 %97 to i32*
  %99 = load i32, i32* %98, align 4
  %100 = zext i32 %99 to i64
  %101 = or i64 %40, %100
  %102 = and i64 %100, 1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %118, label %90

104:                                              ; preds = %110, %58
  %105 = phi i64 [ %115, %110 ], [ %45, %58 ]
  %106 = add i64 %105, -1
  %107 = inttoptr i64 %106 to i32*
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = icmp eq i32 %108, %61
  br i1 %109, label %110, label %118

110:                                              ; preds = %104
  %111 = add i64 %105, 19
  %112 = inttoptr i64 %111 to i32*
  %113 = load i32, i32* %112, align 4
  %114 = zext i32 %113 to i64
  %115 = or i64 %40, %114
  %116 = and i64 %114, 1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %104

118:                                              ; preds = %104, %110, %69, %75, %90, %96, %36
  %119 = phi i64 [ %45, %36 ], [ %101, %96 ], [ %91, %90 ], [ %70, %69 ], [ %80, %75 ], [ %105, %104 ], [ %115, %110 ]
  %120 = add i64 %38, 19
  %121 = inttoptr i64 %120 to i32*
  %122 = trunc i64 %119 to i32
  store atomic volatile i32 %122, i32* %121 monotonic, align 4
  %123 = and i64 %119, 1
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %148, label %125

125:                                              ; preds = %118
  %126 = and i64 %38, -262144
  %127 = or i64 %126, 8
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = and i64 %129, 262144
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %136, label %132

132:                                              ; preds = %125
  %133 = or i64 %126, 16
  %134 = inttoptr i64 %133 to %"class.v8::internal::Heap"**
  %135 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %134, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %135, i64 %38, i64 %120, i64 %119) #6
  br label %136

136:                                              ; preds = %132, %125
  %137 = and i64 %119, -262144
  %138 = or i64 %137, 8
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = and i64 %140, 24
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %148, label %143

143:                                              ; preds = %136
  %144 = load i64, i64* %128, align 8
  %145 = and i64 %144, 24
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %143
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %38, i64 %120, i64 %119) #6
  br label %148

148:                                              ; preds = %118, %136, %143, %147
  %149 = load i64, i64* %10, align 8
  %150 = load i64, i64* %1, align 8
  %151 = add i64 %150, 9
  %152 = inttoptr i64 %151 to i8*
  %153 = load i8, i8* %152, align 1
  %154 = add i64 %149, 9
  %155 = inttoptr i64 %154 to i8*
  store atomic volatile i8 %153, i8* %155 monotonic, align 1
  %156 = load i64, i64* %10, align 8
  %157 = load i64, i64* %1, align 8
  %158 = add i64 %157, 10
  %159 = inttoptr i64 %158 to i8*
  %160 = load i8, i8* %159, align 1
  %161 = add i64 %156, 10
  %162 = inttoptr i64 %161 to i8*
  store i8 %160, i8* %162, align 1
  %163 = load i64, i64* %1, align 8
  %164 = add i64 %163, 11
  %165 = inttoptr i64 %164 to i32*
  %166 = load atomic i32, i32* %165 monotonic, align 4
  %167 = and i32 %166, -30408704
  %168 = or i32 %167, 4195327
  %169 = load atomic i32, i32* %165 monotonic, align 4
  %170 = and i32 %169, 2097152
  %171 = icmp eq i32 %170, 0
  %172 = and i32 %168, -59767809
  %173 = select i1 %171, i32 %172, i32 %168
  %174 = load i64, i64* %10, align 8
  %175 = add i64 %174, 11
  %176 = inttoptr i64 %175 to i32*
  store atomic volatile i32 %173, i32* %176 monotonic, align 4
  ret i64* %10
}

declare i64* @_ZN2v88internal7Factory6NewMapENS0_12InstanceTypeEiNS0_12ElementsKindEi(%"class.v8::internal::Factory"*, i16 zeroext, i32, i8 zeroext, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"*, i64*, i8 zeroext, i32, i8*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::DependentCode", align 8
  %7 = alloca %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef", align 8
  %8 = alloca %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef", align 8
  %9 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, -4294967296
  %12 = add i64 %10, -1
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = zext i32 %14 to i64
  %16 = or i64 %11, %15
  %17 = add i64 %16, 19
  %18 = inttoptr i64 %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i64
  %21 = or i64 %11, %20
  %22 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %23 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %22, align 8
  %24 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %5
  %26 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %23, i64 %21) #6
  %27 = load i64, i64* %26, align 8
  br label %41

28:                                               ; preds = %5
  %29 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %30 = load i64*, i64** %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %32 = load i64*, i64** %31, align 8
  %33 = icmp eq i64* %30, %32
  br i1 %33, label %34, label %36

34:                                               ; preds = %28
  %35 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %36

36:                                               ; preds = %34, %28
  %37 = phi i64* [ %35, %34 ], [ %30, %28 ]
  %38 = ptrtoint i64* %37 to i64
  %39 = add i64 %38, 8
  %40 = inttoptr i64 %39 to i64*
  store i64* %40, i64** %29, align 8
  store i64 %21, i64* %37, align 8
  br label %41

41:                                               ; preds = %25, %36
  %42 = phi i64 [ %27, %25 ], [ %21, %36 ]
  %43 = and i64 %42, -4294967296
  %44 = add i64 %42, 563
  %45 = inttoptr i64 %44 to i32*
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = zext i32 %46 to i64
  %48 = or i64 %43, %47
  %49 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %22, align 8
  %50 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %49, null
  br i1 %50, label %53, label %51

51:                                               ; preds = %41
  %52 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %49, i64 %48) #6
  br label %66

53:                                               ; preds = %41
  %54 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %55 = load i64*, i64** %54, align 8
  %56 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %57 = load i64*, i64** %56, align 8
  %58 = icmp eq i64* %55, %57
  br i1 %58, label %59, label %61

59:                                               ; preds = %53
  %60 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %61

61:                                               ; preds = %59, %53
  %62 = phi i64* [ %60, %59 ], [ %55, %53 ]
  %63 = ptrtoint i64* %62 to i64
  %64 = add i64 %63, 8
  %65 = inttoptr i64 %64 to i64*
  store i64* %65, i64** %54, align 8
  store i64 %48, i64* %62, align 8
  br label %66

66:                                               ; preds = %51, %61
  %67 = phi i64* [ %52, %51 ], [ %62, %61 ]
  %68 = load i64, i64* %1, align 8
  %69 = add i64 %68, 11
  %70 = inttoptr i64 %69 to i32*
  %71 = load atomic i32, i32* %70 acquire, align 4
  %72 = and i32 %71, 1048576
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %98

74:                                               ; preds = %66
  %75 = load i64, i64* %67, align 8
  %76 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 4
  %77 = load i64, i64* %76, align 8
  %78 = trunc i64 %75 to i32
  %79 = trunc i64 %77 to i32
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %98, label %81

81:                                               ; preds = %74
  %82 = bitcast %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #6
  %83 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef", %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %75, i64* %83, align 8
  %84 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef", %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef"* %7, i64 0, i32 0
  %85 = call i64* @_ZN2v88internal18NormalizedMapCache3GetENS0_6HandleINS0_3MapEEENS0_12ElementsKindENS0_25PropertyNormalizationModeE(%"class.v8::internal::NormalizedMapCache"* nonnull %84, i64* %1, i8 zeroext %2, i32 %3)
  %86 = icmp eq i64* %85, null
  br i1 %86, label %87, label %88

87:                                               ; preds = %81
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #6
  br label %98

88:                                               ; preds = %81
  %89 = ptrtoint i64* %85 to i64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #6
  %90 = load i8, i8* @_ZN2v88internal13FLAG_log_mapsE, align 1, !range !3
  %91 = icmp eq i8 %90, 0
  %92 = load i8, i8* @_ZN2v88internal8FLAG_logE, align 1
  %93 = icmp eq i8 %92, 0
  %94 = or i1 %91, %93
  br i1 %94, label %145, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 21
  %97 = load %"class.v8::internal::Logger"*, %"class.v8::internal::Logger"** %96, align 8
  tail call void @_ZN2v88internal6Logger8MapEventEPKcNS0_6HandleINS0_3MapEEES6_S3_NS4_INS0_10HeapObjectEEE(%"class.v8::internal::Logger"* %97, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64* %1, i64* nonnull %85, i8* %4, i64* null) #6
  br label %145

98:                                               ; preds = %66, %74, %87
  %99 = phi i64* [ %67, %87 ], [ null, %74 ], [ null, %66 ]
  %100 = phi i1 [ true, %87 ], [ false, %74 ], [ false, %66 ]
  %101 = tail call i64* @_ZN2v88internal3Map14CopyNormalizedEPNS0_7IsolateENS0_6HandleIS1_EENS0_25PropertyNormalizationModeE(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %3)
  %102 = ptrtoint i64* %101 to i64
  %103 = icmp ult i8 %2, 39
  br i1 %103, label %105, label %104, !prof !2

104:                                              ; preds = %98
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.30, i64 0, i64 0)) #7
  unreachable

105:                                              ; preds = %98
  %106 = load i64, i64* %101, align 8
  %107 = add i64 %106, 10
  %108 = inttoptr i64 %107 to i8*
  %109 = load i8, i8* %108, align 1
  %110 = and i8 %109, 3
  %111 = shl i8 %2, 2
  %112 = or i8 %110, %111
  store i8 %112, i8* %108, align 1
  br i1 %100, label %113, label %136

113:                                              ; preds = %105
  %114 = bitcast %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %114) #6
  %115 = load i64, i64* %99, align 8
  %116 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef", %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %115, i64* %116, align 8
  %117 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef", %"class.v8::internal::Handle<v8::internal::NormalizedMapCache>::ObjectRef"* %8, i64 0, i32 0
  call void @_ZN2v88internal18NormalizedMapCache3SetENS0_6HandleINS0_3MapEEES4_(%"class.v8::internal::NormalizedMapCache"* nonnull %117, i64* %1, i64* %101)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %114) #6
  %118 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 14, i32 0
  %119 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %118, align 8
  %120 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %119, i64 0, i32 132, i32 1
  %121 = load i8, i8* %120, align 8, !range !3
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %126, label %123

123:                                              ; preds = %113
  %124 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %119, i64 0, i32 132, i32 0, i32 2
  %125 = load i32*, i32** %124, align 8
  br label %130

126:                                              ; preds = %113
  store i8 1, i8* %120, align 8
  %127 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %119, i64 0, i32 132, i32 0
  %128 = tail call i32* @_ZNK2v88internal16StatsCounterBase24FindLocationInStatsTableEv(%"class.v8::internal::StatsCounterBase"* %127) #6
  %129 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %119, i64 0, i32 132, i32 0, i32 2
  store i32* %128, i32** %129, align 8
  br label %130

130:                                              ; preds = %126, %123
  %131 = phi i32* [ %125, %123 ], [ %128, %126 ]
  %132 = icmp eq i32* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %130
  %134 = load i32, i32* %131, align 4
  %135 = add nsw i32 %134, 1
  store i32 %135, i32* %131, align 4
  br label %136

136:                                              ; preds = %133, %130, %105
  %137 = load i8, i8* @_ZN2v88internal13FLAG_log_mapsE, align 1, !range !3
  %138 = icmp eq i8 %137, 0
  %139 = load i8, i8* @_ZN2v88internal8FLAG_logE, align 1
  %140 = icmp eq i8 %139, 0
  %141 = or i1 %138, %140
  br i1 %141, label %145, label %142

142:                                              ; preds = %136
  %143 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 21
  %144 = load %"class.v8::internal::Logger"*, %"class.v8::internal::Logger"** %143, align 8
  tail call void @_ZN2v88internal6Logger8MapEventEPKcNS0_6HandleINS0_3MapEEES6_S3_NS4_INS0_10HeapObjectEEE(%"class.v8::internal::Logger"* %144, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64* %1, i64* %101, i8* %4, i64* null) #6
  br label %145

145:                                              ; preds = %88, %136, %142, %95
  %146 = phi i64 [ %89, %88 ], [ %89, %95 ], [ %102, %136 ], [ %102, %142 ]
  %147 = load i64, i64* %1, align 8
  %148 = add i64 %147, 11
  %149 = inttoptr i64 %148 to i32*
  %150 = load atomic i32, i32* %149 acquire, align 4
  %151 = and i32 %150, 33554432
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %164

153:                                              ; preds = %145
  %154 = load atomic i32, i32* %149 monotonic, align 4
  %155 = or i32 %154, 33554432
  store atomic volatile i32 %155, i32* %149 release, align 4
  %156 = bitcast %"class.v8::internal::DependentCode"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %156) #6
  %157 = and i64 %147, -4294967296
  %158 = add i64 %147, 27
  %159 = inttoptr i64 %158 to i32*
  %160 = load i32, i32* %159, align 4
  %161 = zext i32 %160 to i64
  %162 = or i64 %157, %161
  %163 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %162, i64* %163, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %6, i32 1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %156) #6
  br label %164

164:                                              ; preds = %145, %153
  %165 = inttoptr i64 %146 to i64*
  ret i64* %165
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal18NormalizedMapCache3GetENS0_6HandleINS0_3MapEEENS0_12ElementsKindENS0_25PropertyNormalizationModeE(%"class.v8::internal::NormalizedMapCache"* nocapture readonly, i64*, i8 zeroext, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::internal::Map", align 8
  %6 = load i64, i64* %1, align 8
  %7 = and i64 %6, -4294967296
  %8 = add i64 %6, 15
  %9 = inttoptr i64 %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = or i64 %7, %11
  %13 = add i64 %12, -1
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = add i64 %6, 10
  %17 = inttoptr i64 %16 to i8*
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds %"class.v8::internal::NormalizedMapCache", %"class.v8::internal::NormalizedMapCache"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = shl nuw nsw i32 %19, 2
  %23 = xor i32 %22, %15
  %24 = and i32 %23, 252
  %25 = add nuw nsw i32 %24, 7
  %26 = zext i32 %25 to i64
  %27 = add i64 %21, %26
  %28 = inttoptr i64 %27 to i32*
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = zext i32 %29 to i64
  %31 = and i64 %30, 3
  %32 = icmp eq i64 %31, 3
  %33 = icmp ne i32 %29, 3
  %34 = and i1 %33, %32
  br i1 %34, label %35, label %71

35:                                               ; preds = %4
  %36 = and i64 %21, -4294967296
  %37 = and i64 %30, 4294967293
  %38 = or i64 %37, %36
  %39 = bitcast %"class.v8::internal::Map"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #6
  %40 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %38, i64* %40, align 8
  %41 = call zeroext i1 @_ZNK2v88internal3Map28EquivalentToForNormalizationES1_NS0_12ElementsKindENS0_25PropertyNormalizationModeE(%"class.v8::internal::Map"* nonnull %5, i64 %6, i8 zeroext %2, i32 %3)
  br i1 %41, label %42, label %69

42:                                               ; preds = %35
  %43 = load i64, i64* %20, align 8
  %44 = and i64 %43, -262144
  %45 = or i64 %44, 16
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46, align 16
  %48 = add i64 %47, -41416
  %49 = inttoptr i64 %48 to %"class.v8::internal::Isolate"*
  %50 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %49, i64 0, i32 31, i32 4
  %51 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %50, align 8
  %52 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %51, null
  br i1 %52, label %56, label %53

53:                                               ; preds = %42
  %54 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %51, i64 %38) #6
  %55 = ptrtoint i64* %54 to i64
  br label %69

56:                                               ; preds = %42
  %57 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %49, i64 0, i32 31, i32 0
  %58 = load i64*, i64** %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %49, i64 0, i32 31, i32 1
  %60 = load i64*, i64** %59, align 8
  %61 = icmp eq i64* %58, %60
  br i1 %61, label %62, label %64

62:                                               ; preds = %56
  %63 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %49) #6
  br label %64

64:                                               ; preds = %62, %56
  %65 = phi i64* [ %63, %62 ], [ %58, %56 ]
  %66 = ptrtoint i64* %65 to i64
  %67 = add i64 %66, 8
  %68 = inttoptr i64 %67 to i64*
  store i64* %68, i64** %57, align 8
  store i64 %38, i64* %65, align 8
  br label %69

69:                                               ; preds = %64, %53, %35
  %70 = phi i64 [ 0, %35 ], [ %55, %53 ], [ %66, %64 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #6
  br label %71

71:                                               ; preds = %4, %69
  %72 = phi i64 [ %70, %69 ], [ 0, %4 ]
  %73 = inttoptr i64 %72 to i64*
  ret i64* %73
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map14CopyNormalizedEPNS0_7IsolateENS0_6HandleIS1_EENS0_25PropertyNormalizationModeE(%"class.v8::internal::Isolate"*, i64*, i32) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i8*
  %7 = load atomic i8, i8* %6 monotonic, align 1
  %8 = zext i8 %7 to i32
  %9 = shl nuw nsw i32 %8, 2
  %10 = icmp eq i32 %2, 0
  %11 = load atomic i8, i8* %6 monotonic, align 1
  %12 = zext i8 %11 to i32
  %13 = add i64 %4, 4
  %14 = inttoptr i64 %13 to i8*
  %15 = load atomic i8, i8* %14 monotonic, align 1
  %16 = zext i8 %15 to i32
  %17 = sub nsw i32 %12, %16
  %18 = shl nsw i32 %17, 2
  %19 = select i1 %10, i32 %18, i32 0
  %20 = sub nsw i32 %9, %19
  %21 = select i1 %10, i32 0, i32 %17
  %22 = tail call i64* @_ZN2v88internal3Map7RawCopyEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %20, i32 %21)
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, 7
  %25 = inttoptr i64 %24 to i16*
  %26 = load atomic i16, i16* %25 monotonic, align 2
  %27 = icmp ugt i16 %26, 188
  br i1 %27, label %31, label %28

28:                                               ; preds = %3
  %29 = add i64 %23, 5
  %30 = inttoptr i64 %29 to i8*
  store atomic volatile i8 0, i8* %30 monotonic, align 1
  br label %50

31:                                               ; preds = %3
  %32 = add i64 %23, 3
  %33 = inttoptr i64 %32 to i8*
  %34 = load atomic i8, i8* %33 monotonic, align 1
  %35 = zext i8 %34 to i32
  %36 = add i64 %23, 4
  %37 = inttoptr i64 %36 to i8*
  %38 = load atomic i8, i8* %37 monotonic, align 1
  %39 = zext i8 %38 to i32
  %40 = load atomic i8, i8* %37 monotonic, align 1
  %41 = zext i8 %40 to i32
  %42 = sub nsw i32 %35, %39
  %43 = add nsw i32 %42, %41
  %44 = icmp ult i32 %43, 256
  br i1 %44, label %46, label %45, !prof !2

45:                                               ; preds = %31
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i64 0, i64 0)) #7
  unreachable

46:                                               ; preds = %31
  %47 = add i64 %23, 5
  %48 = inttoptr i64 %47 to i8*
  %49 = trunc i32 %43 to i8
  store atomic volatile i8 %49, i8* %48 monotonic, align 1
  br label %50

50:                                               ; preds = %28, %46
  %51 = load i64, i64* %22, align 8
  %52 = add i64 %51, 11
  %53 = inttoptr i64 %52 to i32*
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = or i32 %54, 35651584
  store atomic volatile i32 %55, i32* %53 monotonic, align 4
  %56 = load i64, i64* %22, align 8
  %57 = add i64 %56, 11
  %58 = inttoptr i64 %57 to i32*
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, -67108865
  store atomic volatile i32 %60, i32* %58 monotonic, align 4
  %61 = load i64, i64* %22, align 8
  %62 = add i64 %61, 11
  %63 = inttoptr i64 %62 to i32*
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = or i32 %64, 268435456
  store atomic volatile i32 %65, i32* %63 monotonic, align 4
  %66 = load i64, i64* %22, align 8
  %67 = add i64 %66, 11
  %68 = inttoptr i64 %67 to i32*
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 536870911
  store atomic volatile i32 %70, i32* %68 monotonic, align 4
  ret i64* %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18NormalizedMapCache3SetENS0_6HandleINS0_3MapEEES4_(%"class.v8::internal::NormalizedMapCache"* nocapture readonly, i64* nocapture readonly, i64*) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = add i64 %4, 10
  %15 = inttoptr i64 %14 to i8*
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = load i64, i64* %2, align 8
  %19 = shl nuw nsw i32 %17, 2
  %20 = xor i32 %19, %13
  %21 = and i32 %20, 252
  %22 = getelementptr inbounds %"class.v8::internal::NormalizedMapCache", %"class.v8::internal::NormalizedMapCache"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = add nuw nsw i32 %21, 7
  %25 = zext i32 %24 to i64
  %26 = add i64 %23, %25
  %27 = inttoptr i64 %26 to i32*
  %28 = trunc i64 %18 to i32
  %29 = or i32 %28, 2
  store atomic volatile i32 %29, i32* %27 monotonic, align 4
  %30 = load i64, i64* %22, align 8
  %31 = add i64 %30, %25
  %32 = and i64 %18, 1
  %33 = icmp ne i64 %32, 0
  %34 = icmp ne i32 %29, 3
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %68

36:                                               ; preds = %3
  %37 = and i64 %30, -262144
  %38 = or i64 %37, 8
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = and i64 %40, 262144
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %50, label %43

43:                                               ; preds = %36
  %44 = and i64 %18, -3
  %45 = or i64 %37, 16
  %46 = inttoptr i64 %45 to %"class.v8::internal::Heap"**
  %47 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %46, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %47, i64 %30, i64 %31, i64 %44) #6
  %48 = load i64, i64* %22, align 8
  %49 = add i64 %48, %25
  br label %50

50:                                               ; preds = %43, %36
  %51 = phi i64 [ %31, %36 ], [ %49, %43 ]
  %52 = phi i64 [ %30, %36 ], [ %48, %43 ]
  %53 = and i64 %18, -3
  %54 = and i64 %18, -262144
  %55 = or i64 %54, 8
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = and i64 %57, 24
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %50
  %61 = and i64 %52, -262144
  %62 = or i64 %61, 8
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = and i64 %64, 24
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %60
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %52, i64 %51, i64 %53) #6
  br label %68

68:                                               ; preds = %3, %50, %60, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map26TransitionToImmutableProtoEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %3, 23
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = and i64 %5, 4294967295
  %10 = icmp eq i64 %9, 0
  tail call void @llvm.assume(i1 %10) #6
  %11 = zext i32 %8 to i64
  %12 = or i64 %5, %11
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %14 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %13, align 8
  %15 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %2
  %17 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %14, i64 %12) #6
  br label %31

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %20 = load i64*, i64** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %22 = load i64*, i64** %21, align 8
  %23 = icmp eq i64* %20, %22
  br i1 %23, label %24, label %26

24:                                               ; preds = %18
  %25 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %26

26:                                               ; preds = %24, %18
  %27 = phi i64* [ %25, %24 ], [ %20, %18 ]
  %28 = ptrtoint i64* %27 to i64
  %29 = add i64 %28, 8
  %30 = inttoptr i64 %29 to i64*
  store i64* %30, i64** %19, align 8
  store i64 %12, i64* %27, align 8
  br label %31

31:                                               ; preds = %16, %26
  %32 = phi i64* [ %17, %16 ], [ %27, %26 ]
  %33 = load i64, i64* %1, align 8
  %34 = add i64 %33, 11
  %35 = inttoptr i64 %34 to i32*
  %36 = load atomic i32, i32* %35 acquire, align 4
  %37 = lshr i32 %36, 10
  %38 = and i32 %37, 1023
  %39 = tail call i64* @_ZN2v88internal15DescriptorArray8CopyUpToEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %32, i32 %38, i32 0) #6
  %40 = tail call i64* @_ZN2v88internal3Map22CopyReplaceDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEENS0_14TransitionFlagENS0_11MaybeHandleINS0_4NameEEEPKcNS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %39, i32 1, i64* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i32 2) #6
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %41, 10
  %43 = inttoptr i64 %42 to i8*
  %44 = load i8, i8* %43, align 1
  %45 = or i8 %44, 2
  store i8 %45, i8* %43, align 1
  ret i64* %40
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map4CopyEPNS0_7IsolateENS0_6HandleIS1_EEPKc(%"class.v8::internal::Isolate"*, i64*, i8*) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %4, 23
  %8 = inttoptr i64 %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = and i64 %6, 4294967295
  %11 = icmp eq i64 %10, 0
  tail call void @llvm.assume(i1 %11) #6
  %12 = zext i32 %9 to i64
  %13 = or i64 %6, %12
  %14 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %15 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %14, align 8
  %16 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %3
  %18 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %15, i64 %13) #6
  br label %32

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %21 = load i64*, i64** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %23 = load i64*, i64** %22, align 8
  %24 = icmp eq i64* %21, %23
  br i1 %24, label %25, label %27

25:                                               ; preds = %19
  %26 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %27

27:                                               ; preds = %25, %19
  %28 = phi i64* [ %26, %25 ], [ %21, %19 ]
  %29 = ptrtoint i64* %28 to i64
  %30 = add i64 %29, 8
  %31 = inttoptr i64 %30 to i64*
  store i64* %31, i64** %20, align 8
  store i64 %13, i64* %28, align 8
  br label %32

32:                                               ; preds = %17, %27
  %33 = phi i64* [ %18, %17 ], [ %28, %27 ]
  %34 = load i64, i64* %1, align 8
  %35 = add i64 %34, 11
  %36 = inttoptr i64 %35 to i32*
  %37 = load atomic i32, i32* %36 acquire, align 4
  %38 = lshr i32 %37, 10
  %39 = and i32 %38, 1023
  %40 = tail call i64* @_ZN2v88internal15DescriptorArray8CopyUpToEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %33, i32 %39, i32 0) #6
  %41 = tail call i64* @_ZN2v88internal3Map22CopyReplaceDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEENS0_14TransitionFlagENS0_11MaybeHandleINS0_4NameEEEPKcNS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %40, i32 1, i64* null, i8* %2, i32 2)
  ret i64* %41
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map24CopyInitialMapNormalizedEPNS0_7IsolateENS0_6HandleIS1_EENS0_25PropertyNormalizationModeE(%"class.v8::internal::Isolate"*, i64*, i32) local_unnamed_addr #0 align 2 {
  %4 = tail call i64* @_ZN2v88internal3Map14CopyNormalizedEPNS0_7IsolateENS0_6HandleIS1_EENS0_25PropertyNormalizationModeE(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %2)
  ret i64* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map14CopyInitialMapEPNS0_7IsolateENS0_6HandleIS1_EEiii(%"class.v8::internal::Isolate"*, i64*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %7 = tail call i64* @_ZN2v88internal3Map7RawCopyEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %2, i32 %3)
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, 7
  %10 = inttoptr i64 %9 to i16*
  %11 = load atomic i16, i16* %10 monotonic, align 2
  %12 = icmp ugt i16 %11, 188
  br i1 %12, label %19, label %13

13:                                               ; preds = %5
  %14 = icmp eq i32 %4, 0
  br i1 %14, label %16, label %15, !prof !2

15:                                               ; preds = %13
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0)) #7
  unreachable

16:                                               ; preds = %13
  %17 = add i64 %8, 5
  %18 = inttoptr i64 %17 to i8*
  store atomic volatile i8 0, i8* %18 monotonic, align 1
  br label %42

19:                                               ; preds = %5
  %20 = icmp sgt i32 %4, -1
  br i1 %20, label %22, label %21, !prof !2

21:                                               ; preds = %19
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.32, i64 0, i64 0)) #7
  unreachable

22:                                               ; preds = %19
  %23 = add i64 %8, 3
  %24 = inttoptr i64 %23 to i8*
  %25 = load atomic i8, i8* %24 monotonic, align 1
  %26 = zext i8 %25 to i32
  %27 = add i64 %8, 4
  %28 = inttoptr i64 %27 to i8*
  %29 = load atomic i8, i8* %28 monotonic, align 1
  %30 = zext i8 %29 to i32
  %31 = load atomic i8, i8* %28 monotonic, align 1
  %32 = zext i8 %31 to i32
  %33 = sub nsw i32 %26, %4
  %34 = sub i32 %33, %30
  %35 = add i32 %34, %32
  %36 = icmp ult i32 %35, 256
  br i1 %36, label %38, label %37, !prof !2

37:                                               ; preds = %22
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i64 0, i64 0)) #7
  unreachable

38:                                               ; preds = %22
  %39 = add i64 %8, 5
  %40 = inttoptr i64 %39 to i8*
  %41 = trunc i32 %35 to i8
  store atomic volatile i8 %41, i8* %40 monotonic, align 1
  br label %42

42:                                               ; preds = %16, %38
  %43 = load i64, i64* %1, align 8
  %44 = add i64 %43, 11
  %45 = inttoptr i64 %44 to i32*
  %46 = load atomic i32, i32* %45 acquire, align 4
  %47 = lshr i32 %46, 10
  %48 = and i32 %47, 1023
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %70, label %50

50:                                               ; preds = %42
  %51 = load i64, i64* %1, align 8
  %52 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %53 = load i64, i64* %52, align 8
  %54 = add i64 %51, 23
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = and i64 %53, 4294967295
  %58 = icmp eq i64 %57, 0
  tail call void @llvm.assume(i1 %58) #6
  %59 = zext i32 %56 to i64
  %60 = or i64 %53, %59
  %61 = load i64, i64* %7, align 8
  %62 = add i64 %61, 11
  %63 = inttoptr i64 %62 to i32*
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, -4194305
  store atomic volatile i32 %65, i32* %63 monotonic, align 4
  %66 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #6
  %67 = load i64, i64* %7, align 8
  %68 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %6, i64 0, i32 0
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %69, %"class.v8::internal::Isolate"* undef, i64 %60, i32 %48) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #6
  br label %70

70:                                               ; preds = %42, %50
  ret i64* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map19CopyDropDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::DependentCode", align 8
  %4 = load i64, i64* %1, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i8*
  %7 = load atomic i8, i8* %6 monotonic, align 1
  %8 = zext i8 %7 to i32
  %9 = shl nuw nsw i32 %8, 2
  %10 = add i64 %4, 7
  %11 = inttoptr i64 %10 to i16*
  %12 = load atomic i16, i16* %11 monotonic, align 2
  %13 = icmp ugt i16 %12, 188
  br i1 %13, label %14, label %22

14:                                               ; preds = %2
  %15 = load atomic i8, i8* %6 monotonic, align 1
  %16 = zext i8 %15 to i32
  %17 = add i64 %4, 4
  %18 = inttoptr i64 %17 to i8*
  %19 = load atomic i8, i8* %18 monotonic, align 1
  %20 = zext i8 %19 to i32
  %21 = sub nsw i32 %16, %20
  br label %22

22:                                               ; preds = %2, %14
  %23 = phi i32 [ %21, %14 ], [ 0, %2 ]
  %24 = tail call i64* @_ZN2v88internal3Map7RawCopyEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %9, i32 %23)
  %25 = load i64, i64* %1, align 8
  %26 = add i64 %25, 7
  %27 = inttoptr i64 %26 to i16*
  %28 = load atomic i16, i16* %27 monotonic, align 2
  %29 = icmp ugt i16 %28, 188
  br i1 %29, label %30, label %38

30:                                               ; preds = %22
  %31 = load i64, i64* %24, align 8
  %32 = add i64 %25, 5
  %33 = inttoptr i64 %32 to i8*
  %34 = load atomic i8, i8* %33 monotonic, align 1
  %35 = add i64 %31, 5
  %36 = inttoptr i64 %35 to i8*
  store atomic volatile i8 %34, i8* %36 monotonic, align 1
  %37 = load i64, i64* %1, align 8
  br label %38

38:                                               ; preds = %30, %22
  %39 = phi i64 [ %37, %30 ], [ %25, %22 ]
  %40 = add i64 %39, 11
  %41 = inttoptr i64 %40 to i32*
  %42 = load atomic i32, i32* %41 acquire, align 4
  %43 = and i32 %42, 33554432
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %56

45:                                               ; preds = %38
  %46 = load atomic i32, i32* %41 monotonic, align 4
  %47 = or i32 %46, 33554432
  store atomic volatile i32 %47, i32* %41 release, align 4
  %48 = bitcast %"class.v8::internal::DependentCode"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #6
  %49 = and i64 %39, -4294967296
  %50 = add i64 %39, 27
  %51 = inttoptr i64 %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  %54 = or i64 %49, %53
  %55 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %54, i64* %55, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %3, i32 1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #6
  br label %56

56:                                               ; preds = %38, %45
  ret i64* %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map15ShareDescriptorEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEEPNS0_10DescriptorE(%"class.v8::internal::Isolate"*, i64*, i64*, %"class.v8::internal::Descriptor"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::internal::DependentCode", align 8
  %6 = alloca %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", align 8
  %7 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %8 = load i64, i64* %1, align 8
  %9 = add i64 %8, 3
  %10 = inttoptr i64 %9 to i8*
  %11 = load atomic i8, i8* %10 monotonic, align 1
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 2
  %14 = add i64 %8, 7
  %15 = inttoptr i64 %14 to i16*
  %16 = load atomic i16, i16* %15 monotonic, align 2
  %17 = icmp ugt i16 %16, 188
  br i1 %17, label %18, label %26

18:                                               ; preds = %4
  %19 = load atomic i8, i8* %10 monotonic, align 1
  %20 = zext i8 %19 to i32
  %21 = add i64 %8, 4
  %22 = inttoptr i64 %21 to i8*
  %23 = load atomic i8, i8* %22 monotonic, align 1
  %24 = zext i8 %23 to i32
  %25 = sub nsw i32 %20, %24
  br label %26

26:                                               ; preds = %18, %4
  %27 = phi i32 [ %25, %18 ], [ 0, %4 ]
  %28 = tail call i64* @_ZN2v88internal3Map7RawCopyEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %13, i32 %27) #6
  %29 = load i64, i64* %1, align 8
  %30 = add i64 %29, 7
  %31 = inttoptr i64 %30 to i16*
  %32 = load atomic i16, i16* %31 monotonic, align 2
  %33 = icmp ugt i16 %32, 188
  br i1 %33, label %34, label %42

34:                                               ; preds = %26
  %35 = load i64, i64* %28, align 8
  %36 = add i64 %29, 5
  %37 = inttoptr i64 %36 to i8*
  %38 = load atomic i8, i8* %37 monotonic, align 1
  %39 = add i64 %35, 5
  %40 = inttoptr i64 %39 to i8*
  store atomic volatile i8 %38, i8* %40 monotonic, align 1
  %41 = load i64, i64* %1, align 8
  br label %42

42:                                               ; preds = %34, %26
  %43 = phi i64 [ %41, %34 ], [ %29, %26 ]
  %44 = add i64 %43, 11
  %45 = inttoptr i64 %44 to i32*
  %46 = load atomic i32, i32* %45 acquire, align 4
  %47 = and i32 %46, 33554432
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %60

49:                                               ; preds = %42
  %50 = load atomic i32, i32* %45 monotonic, align 4
  %51 = or i32 %50, 33554432
  store atomic volatile i32 %51, i32* %45 release, align 4
  %52 = bitcast %"class.v8::internal::DependentCode"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #6
  %53 = and i64 %43, -4294967296
  %54 = add i64 %43, 27
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i64
  %58 = or i64 %53, %57
  %59 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %58, i64* %59, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %5, i32 1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #6
  br label %60

60:                                               ; preds = %42, %49
  %61 = getelementptr inbounds %"class.v8::internal::Descriptor", %"class.v8::internal::Descriptor"* %3, i64 0, i32 0, i32 0, i32 0
  %62 = load i64*, i64** %61, align 8
  %63 = load i64, i64* %62, align 8
  %64 = and i64 %63, -4294967296
  %65 = add i64 %63, -1
  %66 = inttoptr i64 %65 to i32*
  %67 = load atomic i32, i32* %66 monotonic, align 4
  %68 = zext i32 %67 to i64
  %69 = or i64 %64, %68
  %70 = add i64 %69, 7
  %71 = inttoptr i64 %70 to i16*
  %72 = load atomic i16, i16* %71 monotonic, align 2
  %73 = icmp eq i16 %72, 64
  br i1 %73, label %74, label %86

74:                                               ; preds = %60
  %75 = add i64 %63, 7
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = and i32 %77, 8
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %86, label %80

80:                                               ; preds = %74
  %81 = load i64, i64* %28, align 8
  %82 = add i64 %81, 11
  %83 = inttoptr i64 %82 to i32*
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = or i32 %84, 268435456
  store atomic volatile i32 %85, i32* %83 monotonic, align 4
  br label %86

86:                                               ; preds = %74, %60, %80
  %87 = load i64, i64* %2, align 8
  %88 = add i64 %87, 3
  %89 = inttoptr i64 %88 to i16*
  %90 = load atomic i16, i16* %89 monotonic, align 2
  %91 = add i64 %87, 5
  %92 = inttoptr i64 %91 to i16*
  %93 = load atomic i16, i16* %92 monotonic, align 2
  %94 = icmp eq i16 %90, %93
  br i1 %94, label %95, label %141

95:                                               ; preds = %86
  %96 = load atomic i16, i16* %92 monotonic, align 2
  %97 = icmp eq i16 %96, 0
  br i1 %97, label %98, label %100

98:                                               ; preds = %95
  %99 = call i64* @_ZN2v88internal15DescriptorArray8AllocateINS0_7IsolateEEENS0_6HandleIS1_EEPT_iiNS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i32 0, i32 1, i8 zeroext 0) #6
  br label %141

100:                                              ; preds = %95
  %101 = sext i16 %96 to i32
  %102 = sub nsw i32 1020, %101
  %103 = icmp slt i16 %96, 1021
  br i1 %103, label %105, label %104, !prof !2

104:                                              ; preds = %100
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i64 0, i64 0)) #7
  unreachable

105:                                              ; preds = %100
  %106 = icmp slt i16 %96, 4
  br i1 %106, label %111, label %107

107:                                              ; preds = %105
  %108 = lshr i32 %101, 2
  %109 = icmp slt i32 %108, %102
  %110 = select i1 %109, i32 %108, i32 %102
  br label %111

111:                                              ; preds = %105, %107
  %112 = phi i32 [ %110, %107 ], [ 1, %105 ]
  call void @_ZN2v88internal3Map21EnsureDescriptorSlackEPNS0_7IsolateENS0_6HandleIS1_EEi(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %112)
  %113 = load i64, i64* %1, align 8
  %114 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %115 = load i64, i64* %114, align 8
  %116 = add i64 %113, 23
  %117 = inttoptr i64 %116 to i32*
  %118 = load i32, i32* %117, align 4
  %119 = and i64 %115, 4294967295
  %120 = icmp eq i64 %119, 0
  call void @llvm.assume(i1 %120) #6
  %121 = zext i32 %118 to i64
  %122 = or i64 %115, %121
  %123 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %124 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %123, align 8
  %125 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %124, null
  br i1 %125, label %128, label %126

126:                                              ; preds = %111
  %127 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %124, i64 %122) #6
  br label %141

128:                                              ; preds = %111
  %129 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %130 = load i64*, i64** %129, align 8
  %131 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %132 = load i64*, i64** %131, align 8
  %133 = icmp eq i64* %130, %132
  br i1 %133, label %134, label %136

134:                                              ; preds = %128
  %135 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %136

136:                                              ; preds = %134, %128
  %137 = phi i64* [ %135, %134 ], [ %130, %128 ]
  %138 = ptrtoint i64* %137 to i64
  %139 = add i64 %138, 8
  %140 = inttoptr i64 %139 to i64*
  store i64* %140, i64** %129, align 8
  store i64 %122, i64* %137, align 8
  br label %141

141:                                              ; preds = %136, %126, %98, %86
  %142 = phi i64* [ %99, %98 ], [ %2, %86 ], [ %127, %126 ], [ %137, %136 ]
  %143 = bitcast %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %143) #6
  %144 = load i64, i64* %142, align 8
  %145 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %6, i64 0, i32 0
  call void @_ZN2v88internal15DescriptorArray6AppendEPNS0_10DescriptorE(%"class.v8::internal::DescriptorArray"* nonnull %146, %"class.v8::internal::Descriptor"* %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %143) #6
  %147 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %147) #6
  %148 = load i64, i64* %28, align 8
  %149 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %148, i64* %149, align 8
  %150 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %7, i64 0, i32 0
  %151 = load i64, i64* %142, align 8
  %152 = add i64 %151, 5
  %153 = inttoptr i64 %152 to i16*
  %154 = load atomic i16, i16* %153 monotonic, align 2
  %155 = sext i16 %154 to i32
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %150, %"class.v8::internal::Isolate"* undef, i64 %151, i32 %155) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %147) #6
  call void @_ZN2v88internal3Map17ConnectTransitionEPNS0_7IsolateENS0_6HandleIS1_EES5_NS4_INS0_4NameEEENS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %28, i64* %62, i32 0)
  ret i64* %28
}

declare i64* @_ZN2v88internal15DescriptorArray8AllocateINS0_7IsolateEEENS0_6HandleIS1_EEPT_iiNS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i32, i32, i8 zeroext) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal15DescriptorArray6AppendEPNS0_10DescriptorE(%"class.v8::internal::DescriptorArray"*, %"class.v8::internal::Descriptor"*) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::DescriptorArray", %"class.v8::internal::DescriptorArray"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 5
  %6 = inttoptr i64 %5 to i16*
  %7 = load atomic i16, i16* %6 monotonic, align 2
  %8 = sext i16 %7 to i32
  %9 = add i16 %7, 1
  store atomic volatile i16 %9, i16* %6 monotonic, align 2
  %10 = sext i16 %7 to i64
  %11 = getelementptr inbounds %"class.v8::internal::Descriptor", %"class.v8::internal::Descriptor"* %1, i64 0, i32 0, i32 0, i32 0
  %12 = load i64*, i64** %11, align 8
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Descriptor", %"class.v8::internal::Descriptor"* %1, i64 0, i32 1, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Descriptor", %"class.v8::internal::Descriptor"* %1, i64 0, i32 1, i32 1, i32 0
  %17 = load i64*, i64** %16, align 8
  %18 = icmp eq i32 %15, 0
  %19 = icmp eq i64* %17, null
  br i1 %18, label %20, label %25

20:                                               ; preds = %2
  br i1 %19, label %21, label %22, !prof !7

21:                                               ; preds = %20
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.34, i64 0, i64 0)) #7
  unreachable

22:                                               ; preds = %20
  %23 = load i64, i64* %17, align 8
  %24 = or i64 %23, 2
  br label %29

25:                                               ; preds = %2
  br i1 %19, label %26, label %27, !prof !7

26:                                               ; preds = %25
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.34, i64 0, i64 0)) #7
  unreachable

27:                                               ; preds = %25
  %28 = load i64, i64* %17, align 8
  br label %29

29:                                               ; preds = %22, %27
  %30 = phi i64 [ %24, %22 ], [ %28, %27 ]
  %31 = getelementptr inbounds %"class.v8::internal::Descriptor", %"class.v8::internal::Descriptor"* %1, i64 0, i32 2, i32 0
  %32 = load i32, i32* %31, align 8
  tail call void @_ZN2v88internal15DescriptorArray3SetENS0_13InternalIndexENS0_4NameENS0_11MaybeObjectENS0_15PropertyDetailsE(%"class.v8::internal::DescriptorArray"* %0, i64 %10, i64 %13, i64 %30, i32 %32) #6
  %33 = load i64*, i64** %11, align 8
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %34, 3
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = lshr i32 %37, 2
  %39 = icmp sgt i16 %7, 0
  br i1 %39, label %40, label %86

40:                                               ; preds = %29, %71
  %41 = phi i64 [ %43, %71 ], [ %10, %29 ]
  %42 = phi i32 [ %44, %71 ], [ %8, %29 ]
  %43 = add nsw i64 %41, -1
  %44 = add nsw i32 %42, -1
  %45 = load i64, i64* %3, align 8
  %46 = and i64 %45, -4294967296
  %47 = mul i64 %43, 51539607552
  %48 = add i64 %47, 68719476736
  %49 = ashr exact i64 %48, 32
  %50 = or i64 %49, 3
  %51 = add i64 %45, %50
  %52 = inttoptr i64 %51 to i32*
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = lshr i32 %53, 10
  %55 = and i32 %54, 1023
  %56 = zext i32 %55 to i64
  %57 = mul nuw nsw i64 %56, 51539607552
  %58 = add nuw nsw i64 %57, 68719476736
  %59 = lshr exact i64 %58, 32
  %60 = add i64 %45, -1
  %61 = add i64 %60, %59
  %62 = inttoptr i64 %61 to i32*
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = zext i32 %63 to i64
  %65 = or i64 %46, %64
  %66 = add i64 %65, 3
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = lshr i32 %68, 2
  %70 = icmp ugt i32 %69, %38
  br i1 %70, label %71, label %84

71:                                               ; preds = %40
  %72 = load atomic i32, i32* %52 monotonic, align 4
  %73 = and i32 %72, 1047552
  %74 = mul i64 %41, 51539607552
  %75 = add nsw i64 %74, 68719476736
  %76 = ashr exact i64 %75, 32
  %77 = or i64 %76, 3
  %78 = add i64 %45, %77
  %79 = inttoptr i64 %78 to i32*
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = and i32 %80, -1047554
  %82 = or i32 %81, %73
  store atomic volatile i32 %82, i32* %79 monotonic, align 4
  %83 = icmp sgt i64 %43, 0
  br i1 %83, label %40, label %86

84:                                               ; preds = %40
  %85 = trunc i64 %41 to i32
  br label %86

86:                                               ; preds = %71, %84, %29
  %87 = phi i32 [ %8, %29 ], [ %85, %84 ], [ %44, %71 ]
  %88 = sext i32 %87 to i64
  %89 = load i64, i64* %3, align 8
  %90 = mul i64 %88, 51539607552
  %91 = add i64 %90, 68719476736
  %92 = ashr exact i64 %91, 32
  %93 = or i64 %92, 3
  %94 = add i64 %89, %93
  %95 = inttoptr i64 %94 to i32*
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = and i32 %96, -1047554
  %98 = shl nsw i32 %8, 10
  %99 = or i32 %97, %98
  store atomic volatile i32 %99, i32* %95 monotonic, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal3Map17ConnectTransitionEPNS0_7IsolateENS0_6HandleIS1_EES5_NS4_INS0_4NameEEENS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"*, i64*, i64*, i64*, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %7 = load i64, i64* %1, align 8
  %8 = and i64 %7, -4294967296
  %9 = add i64 %7, 19
  %10 = inttoptr i64 %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = or i64 %8, %12
  %14 = and i64 %12, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %5
  %17 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %44

18:                                               ; preds = %5
  %19 = add i64 %13, -1
  %20 = inttoptr i64 %19 to i32*
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %23 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %22, null
  br i1 %23, label %30, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %22, i64 0, i32 0, i32 1
  %26 = load i8, i8* %25, align 8, !range !3
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %22, i64 0, i32 1, i64 0
  br label %38

30:                                               ; preds = %24, %18
  %31 = and i64 %7, -262144
  %32 = or i64 %31, 16
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33, align 16
  %35 = add i64 %34, -41416
  %36 = inttoptr i64 %35 to %"class.v8::internal::Isolate"*
  %37 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %36, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %38

38:                                               ; preds = %30, %28
  %39 = phi i64* [ %37, %30 ], [ %29, %28 ]
  %40 = getelementptr inbounds i64, i64* %39, i64 10
  %41 = load i64, i64* %40, align 8
  %42 = trunc i64 %41 to i32
  %43 = icmp eq i32 %21, %42
  br i1 %43, label %65, label %44

44:                                               ; preds = %38, %16
  %45 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %17, %16 ], [ %22, %38 ]
  %46 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %45, null
  br i1 %46, label %53, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %45, i64 0, i32 0, i32 1
  %49 = load i8, i8* %48, align 8, !range !3
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %45, i64 0, i32 1, i64 0
  br label %61

53:                                               ; preds = %47, %44
  %54 = and i64 %7, -262144
  %55 = or i64 %54, 16
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56, align 16
  %58 = add i64 %57, -41416
  %59 = inttoptr i64 %58 to %"class.v8::internal::Isolate"*
  %60 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %59, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %61

61:                                               ; preds = %53, %51
  %62 = phi i64* [ %60, %53 ], [ %52, %51 ]
  %63 = getelementptr inbounds i64, i64* %62, i64 4
  %64 = load i64, i64* %63, align 8
  br label %65

65:                                               ; preds = %38, %61
  %66 = phi i64 [ %64, %61 ], [ %13, %38 ]
  %67 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 4
  %68 = load i64, i64* %67, align 8
  %69 = trunc i64 %66 to i32
  %70 = trunc i64 %68 to i32
  %71 = icmp eq i32 %69, %70
  %72 = add i64 %7, 11
  %73 = inttoptr i64 %72 to i32*
  br i1 %71, label %77, label %74

74:                                               ; preds = %65
  %75 = load atomic i32, i32* %73 monotonic, align 4
  %76 = and i32 %75, -4194305
  store atomic volatile i32 %76, i32* %73 monotonic, align 4
  br label %100

77:                                               ; preds = %65
  %78 = load atomic i32, i32* %73 acquire, align 4
  %79 = and i32 %78, 1048576
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %100

81:                                               ; preds = %77
  %82 = add i64 %7, 7
  %83 = inttoptr i64 %82 to i16*
  %84 = load atomic i16, i16* %83 monotonic, align 2
  %85 = icmp eq i16 %84, 1057
  br i1 %85, label %86, label %100

86:                                               ; preds = %81
  %87 = load atomic i32, i32* %73 acquire, align 4
  %88 = and i32 %87, 1047552
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %100, label %90

90:                                               ; preds = %86
  %91 = load i32, i32* %10, align 4
  %92 = zext i32 %91 to i64
  %93 = and i64 %92, 1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %100, label %95

95:                                               ; preds = %90
  %96 = or i64 %8, %92
  %97 = add i64 %96, -1
  %98 = inttoptr i64 %97 to i32*
  %99 = load atomic i32, i32* %98 monotonic, align 4
  br label %100

100:                                              ; preds = %95, %90, %86, %81, %77, %74
  %101 = load i64, i64* %1, align 8
  %102 = add i64 %101, 11
  %103 = inttoptr i64 %102 to i32*
  %104 = load atomic i32, i32* %103 acquire, align 4
  %105 = and i32 %104, 1048576
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %180

107:                                              ; preds = %100
  %108 = add i64 %101, 7
  %109 = inttoptr i64 %108 to i16*
  %110 = load atomic i16, i16* %109 monotonic, align 2
  %111 = icmp eq i16 %110, 1057
  br i1 %111, label %112, label %189

112:                                              ; preds = %107
  %113 = load atomic i32, i32* %103 acquire, align 4
  %114 = and i32 %113, 1047552
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %189, label %116

116:                                              ; preds = %112
  %117 = and i64 %101, -4294967296
  %118 = add i64 %101, 19
  %119 = inttoptr i64 %118 to i32*
  %120 = load i32, i32* %119, align 4
  %121 = zext i32 %120 to i64
  %122 = or i64 %117, %121
  %123 = and i64 %121, 1
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %127

125:                                              ; preds = %116
  %126 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %153

127:                                              ; preds = %116
  %128 = add i64 %122, -1
  %129 = inttoptr i64 %128 to i32*
  %130 = load atomic i32, i32* %129 monotonic, align 4
  %131 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %132 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %131, null
  br i1 %132, label %139, label %133

133:                                              ; preds = %127
  %134 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %131, i64 0, i32 0, i32 1
  %135 = load i8, i8* %134, align 8, !range !3
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %139, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %131, i64 0, i32 1, i64 0
  br label %147

139:                                              ; preds = %133, %127
  %140 = and i64 %101, -262144
  %141 = or i64 %140, 16
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142, align 16
  %144 = add i64 %143, -41416
  %145 = inttoptr i64 %144 to %"class.v8::internal::Isolate"*
  %146 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %145, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %147

147:                                              ; preds = %139, %137
  %148 = phi i64* [ %146, %139 ], [ %138, %137 ]
  %149 = getelementptr inbounds i64, i64* %148, i64 10
  %150 = load i64, i64* %149, align 8
  %151 = trunc i64 %150 to i32
  %152 = icmp eq i32 %130, %151
  br i1 %152, label %174, label %153

153:                                              ; preds = %147, %125
  %154 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %126, %125 ], [ %131, %147 ]
  %155 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %154, null
  br i1 %155, label %162, label %156

156:                                              ; preds = %153
  %157 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %154, i64 0, i32 0, i32 1
  %158 = load i8, i8* %157, align 8, !range !3
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %162, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %154, i64 0, i32 1, i64 0
  br label %170

162:                                              ; preds = %156, %153
  %163 = and i64 %101, -262144
  %164 = or i64 %163, 16
  %165 = inttoptr i64 %164 to i64*
  %166 = load i64, i64* %165, align 16
  %167 = add i64 %166, -41416
  %168 = inttoptr i64 %167 to %"class.v8::internal::Isolate"*
  %169 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %168, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %170

170:                                              ; preds = %162, %160
  %171 = phi i64* [ %169, %162 ], [ %161, %160 ]
  %172 = getelementptr inbounds i64, i64* %171, i64 4
  %173 = load i64, i64* %172, align 8
  br label %174

174:                                              ; preds = %147, %170
  %175 = phi i64 [ %173, %170 ], [ %122, %147 ]
  %176 = load i64, i64* %67, align 8
  %177 = trunc i64 %175 to i32
  %178 = trunc i64 %176 to i32
  %179 = icmp eq i32 %177, %178
  br i1 %179, label %180, label %189

180:                                              ; preds = %100, %174
  %181 = load i8, i8* @_ZN2v88internal13FLAG_log_mapsE, align 1, !range !3
  %182 = icmp eq i8 %181, 0
  %183 = load i8, i8* @_ZN2v88internal8FLAG_logE, align 1
  %184 = icmp eq i8 %183, 0
  %185 = or i1 %182, %184
  br i1 %185, label %251, label %186

186:                                              ; preds = %180
  %187 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 21
  %188 = load %"class.v8::internal::Logger"*, %"class.v8::internal::Logger"** %187, align 8
  tail call void @_ZN2v88internal6Logger8MapEventEPKcNS0_6HandleINS0_3MapEEES6_S3_NS4_INS0_10HeapObjectEEE(%"class.v8::internal::Logger"* %188, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i64* %1, i64* %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i64* %3) #6
  br label %251

189:                                              ; preds = %107, %112, %174
  %190 = bitcast %"class.v8::internal::TransitionsAccessor"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %190) #6
  %191 = ptrtoint i64* %1 to i64
  %192 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %192, align 8
  %193 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 1
  %194 = bitcast %"class.v8::internal::Handle.1140"* %193 to i64*
  store i64 %191, i64* %194, align 8
  %195 = load i64, i64* %1, align 8
  %196 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %195, i64* %196, align 8
  %197 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %197, align 8
  %198 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 5
  store i8 0, i8* %198, align 4
  %199 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %200 = load i64, i64* %199, align 8
  %201 = add i64 %195, 35
  %202 = inttoptr i64 %201 to i32*
  %203 = load atomic i32, i32* %202 acquire, align 4
  %204 = and i64 %200, 4294967295
  %205 = icmp eq i64 %204, 0
  tail call void @llvm.assume(i1 %205) #6
  %206 = zext i32 %203 to i64
  %207 = or i64 %200, %206
  store i64 %207, i64* %197, align 8
  %208 = and i64 %206, 1
  %209 = icmp eq i64 %208, 0
  %210 = icmp eq i32 %203, 3
  %211 = or i1 %210, %209
  br i1 %211, label %212, label %214

212:                                              ; preds = %189
  %213 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 1, i32* %213, align 8
  br label %242

214:                                              ; preds = %189
  %215 = and i64 %206, 3
  switch i64 %215, label %241 [
    i64 3, label %216
    i64 1, label %218
  ]

216:                                              ; preds = %214
  %217 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 3, i32* %217, align 8
  br label %242

218:                                              ; preds = %214
  %219 = add i64 %207, -1
  %220 = inttoptr i64 %219 to i32*
  %221 = load atomic i32, i32* %220 monotonic, align 4
  %222 = zext i32 %221 to i64
  %223 = or i64 %200, %222
  %224 = add i64 %223, 7
  %225 = inttoptr i64 %224 to i16*
  %226 = load atomic i16, i16* %225 monotonic, align 2
  %227 = icmp eq i16 %226, 160
  br i1 %227, label %228, label %230

228:                                              ; preds = %218
  %229 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 4, i32* %229, align 8
  br label %242

230:                                              ; preds = %218
  %231 = load atomic i32, i32* %220 monotonic, align 4
  %232 = zext i32 %231 to i64
  %233 = or i64 %200, %232
  %234 = add i64 %233, 7
  %235 = inttoptr i64 %234 to i16*
  %236 = load atomic i16, i16* %235 monotonic, align 2
  %237 = icmp eq i16 %236, 110
  %238 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  br i1 %237, label %239, label %240

239:                                              ; preds = %230
  store i32 0, i32* %238, align 8
  br label %242

240:                                              ; preds = %230
  store i32 2, i32* %238, align 8
  br label %242

241:                                              ; preds = %214
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

242:                                              ; preds = %212, %216, %228, %239, %240
  call void @_ZN2v88internal19TransitionsAccessor6InsertENS0_6HandleINS0_4NameEEENS2_INS0_3MapEEENS0_20SimpleTransitionFlagE(%"class.v8::internal::TransitionsAccessor"* nonnull %6, i64* %3, i64* %2, i32 %4) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %190) #6
  %243 = load i8, i8* @_ZN2v88internal13FLAG_log_mapsE, align 1, !range !3
  %244 = icmp eq i8 %243, 0
  %245 = load i8, i8* @_ZN2v88internal8FLAG_logE, align 1
  %246 = icmp eq i8 %245, 0
  %247 = or i1 %244, %246
  br i1 %247, label %251, label %248

248:                                              ; preds = %242
  %249 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 21
  %250 = load %"class.v8::internal::Logger"*, %"class.v8::internal::Logger"** %249, align 8
  call void @_ZN2v88internal6Logger8MapEventEPKcNS0_6HandleINS0_3MapEEES6_S3_NS4_INS0_10HeapObjectEEE(%"class.v8::internal::Logger"* %250, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i64* %1, i64* %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.7, i64 0, i64 0), i64* %3) #6
  br label %251

251:                                              ; preds = %180, %242, %248, %186
  ret void
}

declare void @_ZN2v88internal19TransitionsAccessor6InsertENS0_6HandleINS0_4NameEEENS2_INS0_3MapEEENS0_20SimpleTransitionFlagE(%"class.v8::internal::TransitionsAccessor"*, i64*, i64*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map22CopyReplaceDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEENS0_14TransitionFlagENS0_11MaybeHandleINS0_4NameEEEPKcNS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"*, i64*, i64*, i32, i64*, i8*, i32) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.v8::internal::DependentCode", align 8
  %9 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %10 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %11 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %12 = alloca %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", align 8
  %13 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %14 = load i64, i64* %1, align 8
  %15 = add i64 %14, 3
  %16 = inttoptr i64 %15 to i8*
  %17 = load atomic i8, i8* %16 monotonic, align 1
  %18 = zext i8 %17 to i32
  %19 = shl nuw nsw i32 %18, 2
  %20 = add i64 %14, 7
  %21 = inttoptr i64 %20 to i16*
  %22 = load atomic i16, i16* %21 monotonic, align 2
  %23 = icmp ugt i16 %22, 188
  br i1 %23, label %24, label %32

24:                                               ; preds = %7
  %25 = load atomic i8, i8* %16 monotonic, align 1
  %26 = zext i8 %25 to i32
  %27 = add i64 %14, 4
  %28 = inttoptr i64 %27 to i8*
  %29 = load atomic i8, i8* %28 monotonic, align 1
  %30 = zext i8 %29 to i32
  %31 = sub nsw i32 %26, %30
  br label %32

32:                                               ; preds = %24, %7
  %33 = phi i32 [ %31, %24 ], [ 0, %7 ]
  %34 = tail call i64* @_ZN2v88internal3Map7RawCopyEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %19, i32 %33) #6
  %35 = load i64, i64* %1, align 8
  %36 = add i64 %35, 7
  %37 = inttoptr i64 %36 to i16*
  %38 = load atomic i16, i16* %37 monotonic, align 2
  %39 = icmp ugt i16 %38, 188
  br i1 %39, label %40, label %48

40:                                               ; preds = %32
  %41 = load i64, i64* %34, align 8
  %42 = add i64 %35, 5
  %43 = inttoptr i64 %42 to i8*
  %44 = load atomic i8, i8* %43 monotonic, align 1
  %45 = add i64 %41, 5
  %46 = inttoptr i64 %45 to i8*
  store atomic volatile i8 %44, i8* %46 monotonic, align 1
  %47 = load i64, i64* %1, align 8
  br label %48

48:                                               ; preds = %40, %32
  %49 = phi i64 [ %47, %40 ], [ %35, %32 ]
  %50 = add i64 %49, 11
  %51 = inttoptr i64 %50 to i32*
  %52 = load atomic i32, i32* %51 acquire, align 4
  %53 = and i32 %52, 33554432
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %66

55:                                               ; preds = %48
  %56 = load atomic i32, i32* %51 monotonic, align 4
  %57 = or i32 %56, 33554432
  store atomic volatile i32 %57, i32* %51 release, align 4
  %58 = bitcast %"class.v8::internal::DependentCode"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #6
  %59 = and i64 %49, -4294967296
  %60 = add i64 %49, 27
  %61 = inttoptr i64 %60 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  %64 = or i64 %59, %63
  %65 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %64, i64* %65, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %8, i32 1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #6
  br label %66

66:                                               ; preds = %48, %55
  %67 = icmp eq i64* %4, null
  br i1 %67, label %93, label %68

68:                                               ; preds = %66
  %69 = ptrtoint i64* %4 to i64
  %70 = load i64, i64* %4, align 8
  %71 = and i64 %70, -4294967296
  %72 = add i64 %70, -1
  %73 = inttoptr i64 %72 to i32*
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = zext i32 %74 to i64
  %76 = or i64 %71, %75
  %77 = add i64 %76, 7
  %78 = inttoptr i64 %77 to i16*
  %79 = load atomic i16, i16* %78 monotonic, align 2
  %80 = icmp eq i16 %79, 64
  br i1 %80, label %81, label %93

81:                                               ; preds = %68
  %82 = add i64 %70, 7
  %83 = inttoptr i64 %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = and i32 %84, 8
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %93, label %87

87:                                               ; preds = %81
  %88 = load i64, i64* %34, align 8
  %89 = add i64 %88, 11
  %90 = inttoptr i64 %89 to i32*
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = or i32 %91, 268435456
  store atomic volatile i32 %92, i32* %90 monotonic, align 4
  br label %93

93:                                               ; preds = %81, %68, %66, %87
  %94 = phi i64 [ %69, %87 ], [ %69, %81 ], [ 0, %66 ], [ %69, %68 ]
  %95 = load i64, i64* %1, align 8
  %96 = add i64 %95, 11
  %97 = inttoptr i64 %96 to i32*
  %98 = load atomic i32, i32* %97 acquire, align 4
  %99 = and i32 %98, 1048576
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %111, label %101

101:                                              ; preds = %93
  %102 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #6
  %103 = load i64, i64* %34, align 8
  %104 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %9, i64 0, i32 0
  %106 = load i64, i64* %2, align 8
  %107 = add i64 %106, 5
  %108 = inttoptr i64 %107 to i16*
  %109 = load atomic i16, i16* %108 monotonic, align 2
  %110 = sext i16 %109 to i32
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %105, %"class.v8::internal::Isolate"* undef, i64 %106, i32 %110) #6
  br label %194

111:                                              ; preds = %93
  %112 = icmp eq i32 %3, 0
  %113 = bitcast %"class.v8::internal::TransitionsAccessor"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %113) #6
  br i1 %112, label %114, label %179

114:                                              ; preds = %111
  %115 = ptrtoint i64* %1 to i64
  %116 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %116, align 8
  %117 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 1
  %118 = bitcast %"class.v8::internal::Handle.1140"* %117 to i64*
  store i64 %115, i64* %118, align 8
  %119 = load i64, i64* %1, align 8
  %120 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %121, align 8
  %122 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 5
  store i8 0, i8* %122, align 4
  %123 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %124 = load i64, i64* %123, align 8
  %125 = add i64 %119, 35
  %126 = inttoptr i64 %125 to i32*
  %127 = load atomic i32, i32* %126 acquire, align 4
  %128 = and i64 %124, 4294967295
  %129 = icmp eq i64 %128, 0
  call void @llvm.assume(i1 %129) #6
  %130 = zext i32 %127 to i64
  %131 = or i64 %124, %130
  store i64 %131, i64* %121, align 8
  %132 = and i64 %130, 1
  %133 = icmp eq i64 %132, 0
  %134 = icmp eq i32 %127, 3
  %135 = or i1 %134, %133
  br i1 %135, label %136, label %138

136:                                              ; preds = %114
  %137 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  store i32 1, i32* %137, align 8
  br label %166

138:                                              ; preds = %114
  %139 = and i64 %130, 3
  switch i64 %139, label %165 [
    i64 3, label %140
    i64 1, label %142
  ]

140:                                              ; preds = %138
  %141 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  store i32 3, i32* %141, align 8
  br label %166

142:                                              ; preds = %138
  %143 = add i64 %131, -1
  %144 = inttoptr i64 %143 to i32*
  %145 = load atomic i32, i32* %144 monotonic, align 4
  %146 = zext i32 %145 to i64
  %147 = or i64 %124, %146
  %148 = add i64 %147, 7
  %149 = inttoptr i64 %148 to i16*
  %150 = load atomic i16, i16* %149 monotonic, align 2
  %151 = icmp eq i16 %150, 160
  br i1 %151, label %152, label %154

152:                                              ; preds = %142
  %153 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  store i32 4, i32* %153, align 8
  br label %166

154:                                              ; preds = %142
  %155 = load atomic i32, i32* %144 monotonic, align 4
  %156 = zext i32 %155 to i64
  %157 = or i64 %124, %156
  %158 = add i64 %157, 7
  %159 = inttoptr i64 %158 to i16*
  %160 = load atomic i16, i16* %159 monotonic, align 2
  %161 = icmp eq i16 %160, 110
  %162 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  br i1 %161, label %163, label %164

163:                                              ; preds = %154
  store i32 0, i32* %162, align 8
  br label %166

164:                                              ; preds = %154
  store i32 2, i32* %162, align 8
  br label %166

165:                                              ; preds = %138
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

166:                                              ; preds = %136, %140, %152, %163, %164
  %167 = call zeroext i1 @_ZN2v88internal19TransitionsAccessor22CanHaveMoreTransitionsEv(%"class.v8::internal::TransitionsAccessor"* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %113) #6
  br i1 %167, label %168, label %180

168:                                              ; preds = %166
  %169 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %169) #6
  %170 = load i64, i64* %34, align 8
  %171 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %170, i64* %171, align 8
  %172 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %11, i64 0, i32 0
  %173 = load i64, i64* %2, align 8
  %174 = add i64 %173, 5
  %175 = inttoptr i64 %174 to i16*
  %176 = load atomic i16, i16* %175 monotonic, align 2
  %177 = sext i16 %176 to i32
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %172, %"class.v8::internal::Isolate"* undef, i64 %173, i32 %177) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #6
  %178 = inttoptr i64 %94 to i64*
  call void @_ZN2v88internal3Map17ConnectTransitionEPNS0_7IsolateENS0_6HandleIS1_EES5_NS4_INS0_4NameEEENS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %34, i64* %178, i32 %6)
  br label %206

179:                                              ; preds = %111
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %113) #6
  br label %180

180:                                              ; preds = %179, %166
  %181 = bitcast %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %181) #6
  %182 = load i64, i64* %2, align 8
  %183 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %182, i64* %183, align 8
  %184 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %12, i64 0, i32 0
  call void @_ZN2v88internal15DescriptorArray19GeneralizeAllFieldsEv(%"class.v8::internal::DescriptorArray"* nonnull %184) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %181) #6
  %185 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #6
  %186 = load i64, i64* %34, align 8
  %187 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %186, i64* %187, align 8
  %188 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %13, i64 0, i32 0
  %189 = load i64, i64* %2, align 8
  %190 = add i64 %189, 5
  %191 = inttoptr i64 %190 to i16*
  %192 = load atomic i16, i16* %191 monotonic, align 2
  %193 = sext i16 %192 to i32
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %188, %"class.v8::internal::Isolate"* undef, i64 %189, i32 %193) #6
  br label %194

194:                                              ; preds = %180, %101
  %195 = phi i8* [ %185, %180 ], [ %102, %101 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %195) #6
  %196 = load i8, i8* @_ZN2v88internal13FLAG_log_mapsE, align 1, !range !3
  %197 = icmp eq i8 %196, 0
  %198 = load i8, i8* @_ZN2v88internal8FLAG_logE, align 1
  %199 = icmp eq i8 %198, 0
  %200 = or i1 %197, %199
  br i1 %200, label %206, label %201

201:                                              ; preds = %194
  %202 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 21
  %203 = load %"class.v8::internal::Logger"*, %"class.v8::internal::Logger"** %202, align 8
  %204 = inttoptr i64 %94 to i64*
  %205 = select i1 %67, i64* null, i64* %204
  call void @_ZN2v88internal6Logger8MapEventEPKcNS0_6HandleINS0_3MapEEES6_S3_NS4_INS0_10HeapObjectEEE(%"class.v8::internal::Logger"* %203, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0), i64* %1, i64* %34, i8* %5, i64* %205) #6
  br label %206

206:                                              ; preds = %168, %194, %201
  ret i64* %34
}

declare zeroext i1 @_ZN2v88internal19TransitionsAccessor22CanHaveMoreTransitionsEv(%"class.v8::internal::TransitionsAccessor"*) local_unnamed_addr #3

declare void @_ZN2v88internal15DescriptorArray19GeneralizeAllFieldsEv(%"class.v8::internal::DescriptorArray"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map21AddMissingTransitionsEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEE(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::DependentCode", align 8
  %5 = alloca %"class.v8::internal::DependentCode", align 8
  %6 = alloca %"class.v8::internal::DependentCode", align 8
  %7 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %8 = load i64, i64* %1, align 8
  %9 = add i64 %8, 11
  %10 = inttoptr i64 %9 to i32*
  %11 = load atomic i32, i32* %10 acquire, align 4
  %12 = lshr i32 %11, 10
  %13 = and i32 %12, 1023
  %14 = load i64, i64* %2, align 8
  %15 = add i64 %14, 5
  %16 = inttoptr i64 %15 to i16*
  %17 = load atomic i16, i16* %16 monotonic, align 2
  %18 = sext i16 %17 to i64
  %19 = load i64, i64* %1, align 8
  %20 = add i64 %19, 3
  %21 = inttoptr i64 %20 to i8*
  %22 = load atomic i8, i8* %21 monotonic, align 1
  %23 = zext i8 %22 to i32
  %24 = shl nuw nsw i32 %23, 2
  %25 = add i64 %19, 7
  %26 = inttoptr i64 %25 to i16*
  %27 = load atomic i16, i16* %26 monotonic, align 2
  %28 = icmp ugt i16 %27, 188
  br i1 %28, label %29, label %37

29:                                               ; preds = %3
  %30 = load atomic i8, i8* %21 monotonic, align 1
  %31 = zext i8 %30 to i32
  %32 = add i64 %19, 4
  %33 = inttoptr i64 %32 to i8*
  %34 = load atomic i8, i8* %33 monotonic, align 1
  %35 = zext i8 %34 to i32
  %36 = sub nsw i32 %31, %35
  br label %37

37:                                               ; preds = %29, %3
  %38 = phi i32 [ %36, %29 ], [ 0, %3 ]
  %39 = tail call i64* @_ZN2v88internal3Map7RawCopyEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %24, i32 %38) #6
  %40 = load i64, i64* %1, align 8
  %41 = add i64 %40, 7
  %42 = inttoptr i64 %41 to i16*
  %43 = load atomic i16, i16* %42 monotonic, align 2
  %44 = icmp ugt i16 %43, 188
  br i1 %44, label %45, label %53

45:                                               ; preds = %37
  %46 = load i64, i64* %39, align 8
  %47 = add i64 %40, 5
  %48 = inttoptr i64 %47 to i8*
  %49 = load atomic i8, i8* %48 monotonic, align 1
  %50 = add i64 %46, 5
  %51 = inttoptr i64 %50 to i8*
  store atomic volatile i8 %49, i8* %51 monotonic, align 1
  %52 = load i64, i64* %1, align 8
  br label %53

53:                                               ; preds = %45, %37
  %54 = phi i64 [ %52, %45 ], [ %40, %37 ]
  %55 = add i64 %54, 11
  %56 = inttoptr i64 %55 to i32*
  %57 = load atomic i32, i32* %56 acquire, align 4
  %58 = and i32 %57, 33554432
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %71

60:                                               ; preds = %53
  %61 = load atomic i32, i32* %56 monotonic, align 4
  %62 = or i32 %61, 33554432
  store atomic volatile i32 %62, i32* %56 release, align 4
  %63 = bitcast %"class.v8::internal::DependentCode"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %63) #6
  %64 = and i64 %54, -4294967296
  %65 = add i64 %54, 27
  %66 = inttoptr i64 %65 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  %69 = or i64 %64, %68
  %70 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %69, i64* %70, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %4, i32 1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %63) #6
  br label %71

71:                                               ; preds = %53, %60
  %72 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #6
  %73 = load i64, i64* %39, align 8
  %74 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %7, i64 0, i32 0
  %76 = load i64, i64* %2, align 8
  %77 = add i64 %76, 5
  %78 = inttoptr i64 %77 to i16*
  %79 = load atomic i16, i16* %78 monotonic, align 2
  %80 = sext i16 %79 to i32
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %75, %"class.v8::internal::Isolate"* undef, i64 %76, i32 %80) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #6
  %81 = load i64, i64* %39, align 8
  %82 = add i64 %81, 7
  %83 = inttoptr i64 %82 to i16*
  %84 = load atomic i16, i16* %83 monotonic, align 2
  %85 = icmp ugt i16 %84, 188
  br i1 %85, label %89, label %86

86:                                               ; preds = %71
  %87 = add i64 %81, 5
  %88 = inttoptr i64 %87 to i8*
  store atomic volatile i8 0, i8* %88 monotonic, align 1
  br label %108

89:                                               ; preds = %71
  %90 = add i64 %81, 3
  %91 = inttoptr i64 %90 to i8*
  %92 = load atomic i8, i8* %91 monotonic, align 1
  %93 = zext i8 %92 to i32
  %94 = add i64 %81, 4
  %95 = inttoptr i64 %94 to i8*
  %96 = load atomic i8, i8* %95 monotonic, align 1
  %97 = zext i8 %96 to i32
  %98 = load atomic i8, i8* %95 monotonic, align 1
  %99 = zext i8 %98 to i32
  %100 = sub nsw i32 %93, %97
  %101 = add nsw i32 %100, %99
  %102 = icmp ult i32 %101, 256
  br i1 %102, label %104, label %103, !prof !2

103:                                              ; preds = %89
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i64 0, i64 0)) #7
  unreachable

104:                                              ; preds = %89
  %105 = add i64 %81, 5
  %106 = inttoptr i64 %105 to i8*
  %107 = trunc i32 %101 to i8
  store atomic volatile i8 %107, i8* %106 monotonic, align 1
  br label %108

108:                                              ; preds = %86, %104
  %109 = load i64, i64* %39, align 8
  %110 = add i64 %109, 11
  %111 = inttoptr i64 %110 to i32*
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = or i32 %112, 268435456
  store atomic volatile i32 %113, i32* %111 monotonic, align 4
  %114 = zext i32 %13 to i64
  %115 = add nsw i64 %18, -1
  %116 = icmp eq i64 %115, %114
  %117 = load i64, i64* %1, align 8
  br i1 %116, label %121, label %118

118:                                              ; preds = %108
  %119 = bitcast %"class.v8::internal::DependentCode"* %6 to i8*
  %120 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %146

121:                                              ; preds = %199, %108
  %122 = phi i64* [ %1, %108 ], [ %169, %199 ]
  %123 = phi i64 [ %117, %108 ], [ %202, %199 ]
  %124 = add i64 %123, 11
  %125 = inttoptr i64 %124 to i32*
  %126 = load atomic i32, i32* %125 acquire, align 4
  %127 = and i32 %126, 33554432
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %140

129:                                              ; preds = %121
  %130 = load atomic i32, i32* %125 monotonic, align 4
  %131 = or i32 %130, 33554432
  store atomic volatile i32 %131, i32* %125 release, align 4
  %132 = bitcast %"class.v8::internal::DependentCode"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %132) #6
  %133 = and i64 %123, -4294967296
  %134 = add i64 %123, 27
  %135 = inttoptr i64 %134 to i32*
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i64
  %138 = or i64 %133, %137
  %139 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %138, i64* %139, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %5, i32 1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %132) #6
  br label %140

140:                                              ; preds = %121, %129
  %141 = load i64, i64* %39, align 8
  %142 = add i64 %141, 11
  %143 = inttoptr i64 %142 to i32*
  %144 = load atomic i32, i32* %143 monotonic, align 4
  %145 = and i32 %144, -268435457
  store atomic volatile i32 %145, i32* %143 monotonic, align 4
  call void @_ZN2v88internal3Map18InstallDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EES5_NS0_13InternalIndexENS4_INS0_15DescriptorArrayEEE(%"class.v8::internal::Isolate"* %0, i64* %122, i64* %39, i64 %115, i64* %2)
  ret i64* %39

146:                                              ; preds = %118, %199
  %147 = phi i64 [ %117, %118 ], [ %202, %199 ]
  %148 = phi i64* [ %1, %118 ], [ %169, %199 ]
  %149 = phi i64 [ %114, %118 ], [ %200, %199 ]
  %150 = add i64 %147, 3
  %151 = inttoptr i64 %150 to i8*
  %152 = load atomic i8, i8* %151 monotonic, align 1
  %153 = zext i8 %152 to i32
  %154 = shl nuw nsw i32 %153, 2
  %155 = add i64 %147, 7
  %156 = inttoptr i64 %155 to i16*
  %157 = load atomic i16, i16* %156 monotonic, align 2
  %158 = icmp ugt i16 %157, 188
  br i1 %158, label %159, label %167

159:                                              ; preds = %146
  %160 = load atomic i8, i8* %151 monotonic, align 1
  %161 = zext i8 %160 to i32
  %162 = add i64 %147, 4
  %163 = inttoptr i64 %162 to i8*
  %164 = load atomic i8, i8* %163 monotonic, align 1
  %165 = zext i8 %164 to i32
  %166 = sub nsw i32 %161, %165
  br label %167

167:                                              ; preds = %159, %146
  %168 = phi i32 [ %166, %159 ], [ 0, %146 ]
  %169 = call i64* @_ZN2v88internal3Map7RawCopyEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %148, i32 %154, i32 %168) #6
  %170 = load i64, i64* %148, align 8
  %171 = add i64 %170, 7
  %172 = inttoptr i64 %171 to i16*
  %173 = load atomic i16, i16* %172 monotonic, align 2
  %174 = icmp ugt i16 %173, 188
  br i1 %174, label %175, label %183

175:                                              ; preds = %167
  %176 = load i64, i64* %169, align 8
  %177 = add i64 %170, 5
  %178 = inttoptr i64 %177 to i8*
  %179 = load atomic i8, i8* %178 monotonic, align 1
  %180 = add i64 %176, 5
  %181 = inttoptr i64 %180 to i8*
  store atomic volatile i8 %179, i8* %181 monotonic, align 1
  %182 = load i64, i64* %148, align 8
  br label %183

183:                                              ; preds = %175, %167
  %184 = phi i64 [ %182, %175 ], [ %170, %167 ]
  %185 = add i64 %184, 11
  %186 = inttoptr i64 %185 to i32*
  %187 = load atomic i32, i32* %186 acquire, align 4
  %188 = and i32 %187, 33554432
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %199

190:                                              ; preds = %183
  %191 = load atomic i32, i32* %186 monotonic, align 4
  %192 = or i32 %191, 33554432
  store atomic volatile i32 %192, i32* %186 release, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %119) #6
  %193 = and i64 %184, -4294967296
  %194 = add i64 %184, 27
  %195 = inttoptr i64 %194 to i32*
  %196 = load i32, i32* %195, align 4
  %197 = zext i32 %196 to i64
  %198 = or i64 %193, %197
  store i64 %198, i64* %120, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %6, i32 1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %119) #6
  br label %199

199:                                              ; preds = %183, %190
  call void @_ZN2v88internal3Map18InstallDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EES5_NS0_13InternalIndexENS4_INS0_15DescriptorArrayEEE(%"class.v8::internal::Isolate"* %0, i64* %148, i64* %169, i64 %149, i64* %2)
  %200 = add i64 %149, 1
  %201 = icmp eq i64 %200, %115
  %202 = load i64, i64* %169, align 8
  br i1 %201, label %121, label %146
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal3Map18InstallDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EES5_NS0_13InternalIndexENS4_INS0_15DescriptorArrayEEE(%"class.v8::internal::Isolate"*, i64*, i64*, i64, i64*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %7 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #6
  %8 = load i64, i64* %2, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %6, i64 0, i32 0
  %11 = load i64, i64* %4, align 8
  %12 = trunc i64 %3 to i32
  %13 = add nsw i32 %12, 1
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %10, %"class.v8::internal::Isolate"* undef, i64 %11, i32 %13)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #6
  %14 = load i64, i64* %2, align 8
  %15 = load i64, i64* %1, align 8
  %16 = add i64 %15, 5
  %17 = inttoptr i64 %16 to i8*
  %18 = load atomic i8, i8* %17 monotonic, align 1
  %19 = add i64 %14, 5
  %20 = inttoptr i64 %19 to i8*
  store atomic volatile i8 %18, i8* %20 monotonic, align 1
  %21 = load i64, i64* %4, align 8
  %22 = mul i64 %3, 51539607552
  %23 = add i64 %22, 68719476736
  %24 = ashr exact i64 %23, 32
  %25 = or i64 %24, 3
  %26 = add i64 %21, %25
  %27 = inttoptr i64 %26 to i32*
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %59

31:                                               ; preds = %5
  %32 = load i64, i64* %2, align 8
  %33 = add i64 %32, 5
  %34 = inttoptr i64 %33 to i8*
  %35 = load atomic i8, i8* %34 monotonic, align 1
  %36 = zext i8 %35 to i32
  %37 = icmp ugt i8 %35, 2
  br i1 %37, label %38, label %49

38:                                               ; preds = %31
  %39 = add i64 %32, 3
  %40 = inttoptr i64 %39 to i8*
  %41 = load atomic i8, i8* %40 monotonic, align 1
  %42 = icmp eq i8 %35, %41
  br i1 %42, label %57, label %43

43:                                               ; preds = %38
  %44 = add nuw nsw i32 %36, 1
  %45 = icmp ult i32 %44, 256
  br i1 %45, label %47, label %46, !prof !2

46:                                               ; preds = %43
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i64 0, i64 0)) #7
  unreachable

47:                                               ; preds = %43
  %48 = trunc i32 %44 to i8
  br label %57

49:                                               ; preds = %31
  %50 = icmp eq i8 %35, 0
  %51 = select i1 %50, i32 2, i32 -1
  %52 = add nsw i32 %51, %36
  %53 = icmp ult i32 %52, 3
  br i1 %53, label %55, label %54, !prof !2

54:                                               ; preds = %49
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.26, i64 0, i64 0)) #7
  unreachable

55:                                               ; preds = %49
  %56 = trunc i32 %52 to i8
  br label %57

57:                                               ; preds = %38, %47, %55
  %58 = phi i8 [ %56, %55 ], [ %48, %47 ], [ 2, %38 ]
  store atomic volatile i8 %58, i8* %34 monotonic, align 1
  br label %59

59:                                               ; preds = %57, %5
  %60 = load i64, i64* %4, align 8
  %61 = and i64 %60, -4294967296
  %62 = add nsw i64 %24, -1
  %63 = add i64 %62, %60
  %64 = inttoptr i64 %63 to i32*
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %61, %66
  %68 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %69 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %68, align 8
  %70 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %69, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %59
  %72 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %69, i64 %67) #6
  br label %86

73:                                               ; preds = %59
  %74 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %77 = load i64*, i64** %76, align 8
  %78 = icmp eq i64* %75, %77
  br i1 %78, label %79, label %81

79:                                               ; preds = %73
  %80 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %81

81:                                               ; preds = %79, %73
  %82 = phi i64* [ %80, %79 ], [ %75, %73 ]
  %83 = ptrtoint i64* %82 to i64
  %84 = add i64 %83, 8
  %85 = inttoptr i64 %84 to i64*
  store i64* %85, i64** %74, align 8
  store i64 %67, i64* %82, align 8
  br label %86

86:                                               ; preds = %71, %81
  %87 = phi i64* [ %72, %71 ], [ %82, %81 ]
  %88 = load i64, i64* %1, align 8
  %89 = add i64 %88, 11
  %90 = inttoptr i64 %89 to i32*
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = and i32 %91, 268435456
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %112

94:                                               ; preds = %86
  %95 = load i64, i64* %87, align 8
  %96 = and i64 %95, -4294967296
  %97 = add i64 %95, -1
  %98 = inttoptr i64 %97 to i32*
  %99 = load atomic i32, i32* %98 monotonic, align 4
  %100 = zext i32 %99 to i64
  %101 = or i64 %96, %100
  %102 = add i64 %101, 7
  %103 = inttoptr i64 %102 to i16*
  %104 = load atomic i16, i16* %103 monotonic, align 2
  %105 = icmp eq i16 %104, 64
  br i1 %105, label %106, label %118

106:                                              ; preds = %94
  %107 = add i64 %95, 7
  %108 = inttoptr i64 %107 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = and i32 %109, 8
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %118, label %112

112:                                              ; preds = %106, %86
  %113 = load i64, i64* %2, align 8
  %114 = add i64 %113, 11
  %115 = inttoptr i64 %114 to i32*
  %116 = load atomic i32, i32* %115 monotonic, align 4
  %117 = or i32 %116, 268435456
  store atomic volatile i32 %117, i32* %115 monotonic, align 4
  br label %118

118:                                              ; preds = %106, %94, %112
  tail call void @_ZN2v88internal3Map17ConnectTransitionEPNS0_7IsolateENS0_6HandleIS1_EES5_NS4_INS0_4NameEEENS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i64* %87, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"* nocapture readnone, i64, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 23
  %8 = inttoptr i64 %7 to i32*
  %9 = trunc i64 %2 to i32
  store atomic volatile i32 %9, i32* %8 release, align 4
  %10 = load i64, i64* %5, align 8
  %11 = add i64 %10, 23
  %12 = and i64 %2, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %27, label %14

14:                                               ; preds = %4
  %15 = and i64 %10, -262144
  %16 = or i64 %15, 8
  %17 = inttoptr i64 %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, 262144
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %27, label %21

21:                                               ; preds = %14
  %22 = or i64 %15, 16
  %23 = inttoptr i64 %22 to %"class.v8::internal::Heap"**
  %24 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %23, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %24, i64 %10, i64 %11, i64 %2) #6
  %25 = load i64, i64* %5, align 8
  %26 = add i64 %25, 23
  br label %27

27:                                               ; preds = %21, %14, %4
  %28 = phi i64 [ %26, %21 ], [ %11, %14 ], [ %11, %4 ]
  %29 = phi i64 [ %25, %21 ], [ %10, %14 ], [ %10, %4 ]
  %30 = and i64 %2, -262144
  %31 = or i64 %30, 8
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 24
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %27
  %37 = and i64 %29, -262144
  %38 = or i64 %37, 8
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = and i64 %40, 24
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %36
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %29, i64 %28, i64 %2) #6
  br label %44

44:                                               ; preds = %27, %36, %43
  %45 = icmp ult i32 %3, 1021
  br i1 %45, label %47, label %46, !prof !2

46:                                               ; preds = %44
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.40, i64 0, i64 0)) #7
  unreachable

47:                                               ; preds = %44
  %48 = load i64, i64* %5, align 8
  %49 = add i64 %48, 11
  %50 = inttoptr i64 %49 to i32*
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, -1047553
  %53 = shl i32 %3, 10
  %54 = or i32 %52, %53
  store atomic volatile i32 %54, i32* %50 release, align 4
  %55 = load i64, i64* %32, align 8
  %56 = and i64 %55, 262144
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %47
  %59 = or i64 %30, 16
  %60 = inttoptr i64 %59 to %"class.v8::internal::Heap"**
  %61 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %60, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_15DescriptorArrayEi(%"class.v8::internal::Heap"* %61, i64 %2, i32 %3) #6
  br label %62

62:                                               ; preds = %47, %58
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map25CopyForElementsTransitionEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::DependentCode", align 8
  %4 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %5 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %6 = load i64, i64* %1, align 8
  %7 = add i64 %6, 3
  %8 = inttoptr i64 %7 to i8*
  %9 = load atomic i8, i8* %8 monotonic, align 1
  %10 = zext i8 %9 to i32
  %11 = shl nuw nsw i32 %10, 2
  %12 = add i64 %6, 7
  %13 = inttoptr i64 %12 to i16*
  %14 = load atomic i16, i16* %13 monotonic, align 2
  %15 = icmp ugt i16 %14, 188
  br i1 %15, label %16, label %24

16:                                               ; preds = %2
  %17 = load atomic i8, i8* %8 monotonic, align 1
  %18 = zext i8 %17 to i32
  %19 = add i64 %6, 4
  %20 = inttoptr i64 %19 to i8*
  %21 = load atomic i8, i8* %20 monotonic, align 1
  %22 = zext i8 %21 to i32
  %23 = sub nsw i32 %18, %22
  br label %24

24:                                               ; preds = %16, %2
  %25 = phi i32 [ %23, %16 ], [ 0, %2 ]
  %26 = tail call i64* @_ZN2v88internal3Map7RawCopyEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %11, i32 %25) #6
  %27 = load i64, i64* %1, align 8
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = icmp ugt i16 %30, 188
  br i1 %31, label %32, label %40

32:                                               ; preds = %24
  %33 = load i64, i64* %26, align 8
  %34 = add i64 %27, 5
  %35 = inttoptr i64 %34 to i8*
  %36 = load atomic i8, i8* %35 monotonic, align 1
  %37 = add i64 %33, 5
  %38 = inttoptr i64 %37 to i8*
  store atomic volatile i8 %36, i8* %38 monotonic, align 1
  %39 = load i64, i64* %1, align 8
  br label %40

40:                                               ; preds = %32, %24
  %41 = phi i64 [ %39, %32 ], [ %27, %24 ]
  %42 = add i64 %41, 11
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 acquire, align 4
  %45 = and i32 %44, 33554432
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %58

47:                                               ; preds = %40
  %48 = load atomic i32, i32* %43 monotonic, align 4
  %49 = or i32 %48, 33554432
  store atomic volatile i32 %49, i32* %43 release, align 4
  %50 = bitcast %"class.v8::internal::DependentCode"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #6
  %51 = and i64 %41, -4294967296
  %52 = add i64 %41, 27
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %51, %55
  %57 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %56, i64* %57, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %3, i32 1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #6
  br label %58

58:                                               ; preds = %40, %47
  %59 = load i64, i64* %1, align 8
  %60 = add i64 %59, 11
  %61 = inttoptr i64 %60 to i32*
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 4194304
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %86, label %65

65:                                               ; preds = %58
  %66 = load atomic i32, i32* %61 monotonic, align 4
  %67 = and i32 %66, -4194305
  store atomic volatile i32 %67, i32* %61 monotonic, align 4
  %68 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #6
  %69 = load i64, i64* %26, align 8
  %70 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %69, i64* %70, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %4, i64 0, i32 0
  %72 = load i64, i64* %1, align 8
  %73 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %72, 23
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = and i64 %74, 4294967295
  %79 = icmp eq i64 %78, 0
  call void @llvm.assume(i1 %79) #6
  %80 = zext i32 %77 to i64
  %81 = or i64 %74, %80
  %82 = add i64 %81, 5
  %83 = inttoptr i64 %82 to i16*
  %84 = load atomic i16, i16* %83 monotonic, align 2
  %85 = sext i16 %84 to i32
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %71, %"class.v8::internal::Isolate"* undef, i64 %81, i32 %85) #6
  br label %132

86:                                               ; preds = %58
  %87 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %88 = load i64, i64* %87, align 8
  %89 = add i64 %59, 23
  %90 = inttoptr i64 %89 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = and i64 %88, 4294967295
  %93 = icmp eq i64 %92, 0
  call void @llvm.assume(i1 %93) #6
  %94 = zext i32 %91 to i64
  %95 = or i64 %88, %94
  %96 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %97 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %96, align 8
  %98 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %86
  %100 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %97, i64 %95) #6
  br label %114

101:                                              ; preds = %86
  %102 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %103 = load i64*, i64** %102, align 8
  %104 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %105 = load i64*, i64** %104, align 8
  %106 = icmp eq i64* %103, %105
  br i1 %106, label %107, label %109

107:                                              ; preds = %101
  %108 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %109

109:                                              ; preds = %107, %101
  %110 = phi i64* [ %108, %107 ], [ %103, %101 ]
  %111 = ptrtoint i64* %110 to i64
  %112 = add i64 %111, 8
  %113 = inttoptr i64 %112 to i64*
  store i64* %113, i64** %102, align 8
  store i64 %95, i64* %110, align 8
  br label %114

114:                                              ; preds = %99, %109
  %115 = phi i64* [ %100, %99 ], [ %110, %109 ]
  %116 = load i64, i64* %1, align 8
  %117 = add i64 %116, 11
  %118 = inttoptr i64 %117 to i32*
  %119 = load atomic i32, i32* %118 acquire, align 4
  %120 = lshr i32 %119, 10
  %121 = and i32 %120, 1023
  %122 = call i64* @_ZN2v88internal15DescriptorArray8CopyUpToEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %115, i32 %121, i32 0) #6
  %123 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #6
  %124 = load i64, i64* %26, align 8
  %125 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %5, i64 0, i32 0
  %127 = load i64, i64* %122, align 8
  %128 = add i64 %127, 5
  %129 = inttoptr i64 %128 to i16*
  %130 = load atomic i16, i16* %129 monotonic, align 2
  %131 = sext i16 %130 to i32
  call void @_ZN2v88internal3Map22SetInstanceDescriptorsEPNS0_7IsolateENS0_15DescriptorArrayEi(%"class.v8::internal::Map"* nonnull %126, %"class.v8::internal::Isolate"* undef, i64 %127, i32 %131) #6
  br label %132

132:                                              ; preds = %114, %65
  %133 = phi i8* [ %123, %114 ], [ %68, %65 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %133) #6
  ret i64* %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map14AsLanguageModeEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_18SharedFunctionInfoEEE(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::DependentCode", align 8
  %5 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %6 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %7 = load i64, i64* %2, align 8
  %8 = add i64 %7, 27
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 64
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %433, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, -4294967296
  %17 = add i64 %15, -1
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = zext i32 %19 to i64
  %21 = or i64 %16, %20
  %22 = add i64 %21, 19
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = or i64 %16, %25
  %27 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %28 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %27, align 8
  %29 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %13
  %31 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %28, i64 %26) #6
  %32 = load i64, i64* %31, align 8
  br label %46

33:                                               ; preds = %13
  %34 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %37 = load i64*, i64** %36, align 8
  %38 = icmp eq i64* %35, %37
  br i1 %38, label %39, label %41

39:                                               ; preds = %33
  %40 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %41

41:                                               ; preds = %39, %33
  %42 = phi i64* [ %40, %39 ], [ %35, %33 ]
  %43 = ptrtoint i64* %42 to i64
  %44 = add i64 %43, 8
  %45 = inttoptr i64 %44 to i64*
  store i64* %45, i64** %34, align 8
  store i64 %26, i64* %42, align 8
  br label %46

46:                                               ; preds = %30, %41
  %47 = phi i64 [ %32, %30 ], [ %26, %41 ]
  %48 = load i64, i64* %2, align 8
  %49 = add i64 %48, 27
  %50 = inttoptr i64 %49 to i32*
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i64 %47, -4294967296
  %53 = lshr i32 %51, 12
  %54 = and i32 %53, 124
  %55 = add nuw nsw i32 %54, 747
  %56 = zext i32 %55 to i64
  %57 = add i64 %47, %56
  %58 = inttoptr i64 %57 to i32*
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = zext i32 %59 to i64
  %61 = or i64 %52, %60
  %62 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %27, align 8
  %63 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %62, null
  br i1 %63, label %66, label %64

64:                                               ; preds = %46
  %65 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %62, i64 %61) #6
  br label %79

66:                                               ; preds = %46
  %67 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %68 = load i64*, i64** %67, align 8
  %69 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %70 = load i64*, i64** %69, align 8
  %71 = icmp eq i64* %68, %70
  br i1 %71, label %72, label %74

72:                                               ; preds = %66
  %73 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %74

74:                                               ; preds = %72, %66
  %75 = phi i64* [ %73, %72 ], [ %68, %66 ]
  %76 = ptrtoint i64* %75 to i64
  %77 = add i64 %76, 8
  %78 = inttoptr i64 %77 to i64*
  store i64* %78, i64** %67, align 8
  store i64 %61, i64* %75, align 8
  br label %79

79:                                               ; preds = %64, %74
  %80 = phi i64* [ %65, %64 ], [ %75, %74 ]
  %81 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 501
  %82 = bitcast %"class.v8::internal::TransitionsAccessor"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %82) #6
  %83 = ptrtoint i64* %1 to i64
  %84 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %84, align 8
  %85 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 1
  %86 = bitcast %"class.v8::internal::Handle.1140"* %85 to i64*
  store i64 %83, i64* %86, align 8
  %87 = load i64, i64* %1, align 8
  %88 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %87, i64* %88, align 8
  %89 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %89, align 8
  %90 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 5
  store i8 0, i8* %90, align 4
  %91 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %87, 35
  %94 = inttoptr i64 %93 to i32*
  %95 = load atomic i32, i32* %94 acquire, align 4
  %96 = and i64 %92, 4294967295
  %97 = icmp eq i64 %96, 0
  tail call void @llvm.assume(i1 %97) #6
  %98 = zext i32 %95 to i64
  %99 = or i64 %92, %98
  store i64 %99, i64* %89, align 8
  %100 = and i64 %98, 1
  %101 = icmp eq i64 %100, 0
  %102 = icmp eq i32 %95, 3
  %103 = or i1 %102, %101
  br i1 %103, label %104, label %106

104:                                              ; preds = %79
  %105 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 1, i32* %105, align 8
  br label %134

106:                                              ; preds = %79
  %107 = and i64 %98, 3
  switch i64 %107, label %133 [
    i64 3, label %108
    i64 1, label %110
  ]

108:                                              ; preds = %106
  %109 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 3, i32* %109, align 8
  br label %134

110:                                              ; preds = %106
  %111 = add i64 %99, -1
  %112 = inttoptr i64 %111 to i32*
  %113 = load atomic i32, i32* %112 monotonic, align 4
  %114 = zext i32 %113 to i64
  %115 = or i64 %92, %114
  %116 = add i64 %115, 7
  %117 = inttoptr i64 %116 to i16*
  %118 = load atomic i16, i16* %117 monotonic, align 2
  %119 = icmp eq i16 %118, 160
  br i1 %119, label %120, label %122

120:                                              ; preds = %110
  %121 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  store i32 4, i32* %121, align 8
  br label %134

122:                                              ; preds = %110
  %123 = load atomic i32, i32* %112 monotonic, align 4
  %124 = zext i32 %123 to i64
  %125 = or i64 %92, %124
  %126 = add i64 %125, 7
  %127 = inttoptr i64 %126 to i16*
  %128 = load atomic i16, i16* %127 monotonic, align 2
  %129 = icmp eq i16 %128, 110
  %130 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %5, i64 0, i32 4
  br i1 %129, label %131, label %132

131:                                              ; preds = %122
  store i32 0, i32* %130, align 8
  br label %134

132:                                              ; preds = %122
  store i32 2, i32* %130, align 8
  br label %134

133:                                              ; preds = %106
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

134:                                              ; preds = %104, %108, %120, %131, %132
  %135 = load i64, i64* %81, align 8
  %136 = call i64 @_ZN2v88internal19TransitionsAccessor13SearchSpecialENS0_6SymbolE(%"class.v8::internal::TransitionsAccessor"* nonnull %5, i64 %135) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %82) #6
  %137 = trunc i64 %136 to i32
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %157, label %139

139:                                              ; preds = %134
  %140 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %27, align 8
  %141 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %140, null
  br i1 %141, label %144, label %142

142:                                              ; preds = %139
  %143 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %140, i64 %136) #6
  br label %433

144:                                              ; preds = %139
  %145 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %146 = load i64*, i64** %145, align 8
  %147 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %148 = load i64*, i64** %147, align 8
  %149 = icmp eq i64* %146, %148
  br i1 %149, label %150, label %152

150:                                              ; preds = %144
  %151 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %152

152:                                              ; preds = %150, %144
  %153 = phi i64* [ %151, %150 ], [ %146, %144 ]
  %154 = ptrtoint i64* %153 to i64
  %155 = add i64 %154, 8
  %156 = inttoptr i64 %155 to i64*
  store i64* %156, i64** %145, align 8
  store i64 %136, i64* %153, align 8
  br label %433

157:                                              ; preds = %134
  %158 = load i64, i64* %1, align 8
  %159 = add i64 %158, 11
  %160 = inttoptr i64 %159 to i32*
  %161 = load atomic i32, i32* %160 acquire, align 4
  %162 = and i32 %161, 33554432
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %175

164:                                              ; preds = %157
  %165 = load atomic i32, i32* %160 monotonic, align 4
  %166 = or i32 %165, 33554432
  store atomic volatile i32 %166, i32* %160 release, align 4
  %167 = bitcast %"class.v8::internal::DependentCode"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %167) #6
  %168 = and i64 %158, -4294967296
  %169 = add i64 %158, 27
  %170 = inttoptr i64 %169 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = zext i32 %171 to i64
  %173 = or i64 %168, %172
  %174 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %173, i64* %174, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %4, i32 1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %167) #6
  br label %175

175:                                              ; preds = %157, %164
  %176 = load i64, i64* %1, align 8
  %177 = add i64 %176, 3
  %178 = inttoptr i64 %177 to i8*
  %179 = load atomic i8, i8* %178 monotonic, align 1
  %180 = zext i8 %179 to i32
  %181 = shl nuw nsw i32 %180, 2
  %182 = load atomic i8, i8* %178 monotonic, align 1
  %183 = zext i8 %182 to i32
  %184 = add i64 %176, 4
  %185 = inttoptr i64 %184 to i8*
  %186 = load atomic i8, i8* %185 monotonic, align 1
  %187 = zext i8 %186 to i32
  %188 = sub nsw i32 %183, %187
  %189 = add i64 %176, 5
  %190 = inttoptr i64 %189 to i8*
  %191 = load atomic i8, i8* %190 monotonic, align 1
  %192 = zext i8 %191 to i32
  %193 = icmp ugt i8 %191, 2
  br i1 %193, label %194, label %198

194:                                              ; preds = %175
  %195 = load atomic i8, i8* %178 monotonic, align 1
  %196 = zext i8 %195 to i32
  %197 = sub nsw i32 %196, %192
  br label %198

198:                                              ; preds = %175, %194
  %199 = phi i32 [ %197, %194 ], [ %192, %175 ]
  %200 = call i64* @_ZN2v88internal3Map14CopyInitialMapEPNS0_7IsolateENS0_6HandleIS1_EEiii(%"class.v8::internal::Isolate"* %0, i64* %80, i32 %181, i32 %188, i32 %199)
  %201 = load i64, i64* %200, align 8
  %202 = load i64, i64* %1, align 8
  %203 = and i64 %202, -4294967296
  %204 = add i64 %202, 19
  %205 = inttoptr i64 %204 to i32*
  %206 = load i32, i32* %205, align 4
  %207 = zext i32 %206 to i64
  %208 = or i64 %203, %207
  %209 = and i64 %207, 1
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %281, label %211

211:                                              ; preds = %198
  %212 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %213 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %212, null
  %214 = and i64 %202, -262144
  %215 = or i64 %214, 16
  %216 = inttoptr i64 %215 to i64*
  br i1 %213, label %246, label %217

217:                                              ; preds = %211
  %218 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %212, i64 0, i32 0, i32 1
  %219 = load i8, i8* %218, align 8, !range !3
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %225, label %221

221:                                              ; preds = %217
  %222 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %212, i64 0, i32 1, i64 10
  %223 = load i64, i64* %222, align 8
  %224 = trunc i64 %223 to i32
  br label %267

225:                                              ; preds = %217
  %226 = load i64, i64* %216, align 16
  %227 = add i64 %226, -41416
  %228 = inttoptr i64 %227 to %"class.v8::internal::Isolate"*
  %229 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %228, i64 0, i32 0, i32 7, i32 0, i64 10
  %230 = load i64, i64* %229, align 8
  %231 = trunc i64 %230 to i32
  br label %232

232:                                              ; preds = %238, %225
  %233 = phi i64 [ %243, %238 ], [ %208, %225 ]
  %234 = add i64 %233, -1
  %235 = inttoptr i64 %234 to i32*
  %236 = load atomic i32, i32* %235 monotonic, align 4
  %237 = icmp eq i32 %236, %231
  br i1 %237, label %238, label %281

238:                                              ; preds = %232
  %239 = add i64 %233, 19
  %240 = inttoptr i64 %239 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = zext i32 %241 to i64
  %243 = or i64 %203, %242
  %244 = and i64 %242, 1
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %281, label %232

246:                                              ; preds = %211
  %247 = load i64, i64* %216, align 16
  %248 = add i64 %247, -41416
  %249 = inttoptr i64 %248 to %"class.v8::internal::Isolate"*
  %250 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %249, i64 0, i32 0, i32 7, i32 0, i64 10
  %251 = load i64, i64* %250, align 8
  %252 = trunc i64 %251 to i32
  br label %253

253:                                              ; preds = %259, %246
  %254 = phi i64 [ %264, %259 ], [ %208, %246 ]
  %255 = add i64 %254, -1
  %256 = inttoptr i64 %255 to i32*
  %257 = load atomic i32, i32* %256 monotonic, align 4
  %258 = icmp eq i32 %257, %252
  br i1 %258, label %259, label %281

259:                                              ; preds = %253
  %260 = add i64 %254, 19
  %261 = inttoptr i64 %260 to i32*
  %262 = load i32, i32* %261, align 4
  %263 = zext i32 %262 to i64
  %264 = or i64 %203, %263
  %265 = and i64 %263, 1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %281, label %253

267:                                              ; preds = %273, %221
  %268 = phi i64 [ %278, %273 ], [ %208, %221 ]
  %269 = add i64 %268, -1
  %270 = inttoptr i64 %269 to i32*
  %271 = load atomic i32, i32* %270 monotonic, align 4
  %272 = icmp eq i32 %271, %224
  br i1 %272, label %273, label %281

273:                                              ; preds = %267
  %274 = add i64 %268, 19
  %275 = inttoptr i64 %274 to i32*
  %276 = load i32, i32* %275, align 4
  %277 = zext i32 %276 to i64
  %278 = or i64 %203, %277
  %279 = and i64 %277, 1
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %267

281:                                              ; preds = %267, %273, %232, %238, %253, %259, %198
  %282 = phi i64 [ %208, %198 ], [ %264, %259 ], [ %254, %253 ], [ %233, %232 ], [ %243, %238 ], [ %268, %267 ], [ %278, %273 ]
  %283 = and i64 %201, -4294967296
  %284 = add i64 %201, 19
  %285 = inttoptr i64 %284 to i32*
  %286 = load i32, i32* %285, align 4
  %287 = zext i32 %286 to i64
  %288 = and i64 %287, 1
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %302, label %290

290:                                              ; preds = %281
  %291 = or i64 %283, %287
  %292 = add i64 %291, -1
  %293 = inttoptr i64 %292 to i32*
  %294 = load atomic i32, i32* %293 monotonic, align 4
  %295 = zext i32 %294 to i64
  %296 = or i64 %283, %295
  %297 = add i64 %296, 7
  %298 = inttoptr i64 %297 to i16*
  %299 = load atomic i16, i16* %298 monotonic, align 2
  %300 = icmp eq i16 %299, 172
  br i1 %300, label %301, label %302, !prof !7

301:                                              ; preds = %290
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.35, i64 0, i64 0)) #7
  unreachable

302:                                              ; preds = %281, %290
  %303 = trunc i64 %282 to i32
  store atomic volatile i32 %303, i32* %285 monotonic, align 4
  %304 = and i64 %282, 1
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %329, label %306

306:                                              ; preds = %302
  %307 = and i64 %201, -262144
  %308 = or i64 %307, 8
  %309 = inttoptr i64 %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = and i64 %310, 262144
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %317, label %313

313:                                              ; preds = %306
  %314 = or i64 %307, 16
  %315 = inttoptr i64 %314 to %"class.v8::internal::Heap"**
  %316 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %315, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %316, i64 %201, i64 %284, i64 %282) #6
  br label %317

317:                                              ; preds = %313, %306
  %318 = and i64 %282, -262144
  %319 = or i64 %318, 8
  %320 = inttoptr i64 %319 to i64*
  %321 = load i64, i64* %320, align 8
  %322 = and i64 %321, 24
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %329, label %324

324:                                              ; preds = %317
  %325 = load i64, i64* %309, align 8
  %326 = and i64 %325, 24
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %328, label %329

328:                                              ; preds = %324
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %201, i64 %284, i64 %282) #6
  br label %329

329:                                              ; preds = %302, %317, %324, %328
  %330 = load i64, i64* %200, align 8
  %331 = load i64, i64* %1, align 8
  %332 = and i64 %331, -4294967296
  %333 = add i64 %331, 15
  %334 = inttoptr i64 %333 to i32*
  %335 = load i32, i32* %334, align 4
  %336 = zext i32 %335 to i64
  %337 = or i64 %332, %336
  %338 = add i64 %330, 15
  %339 = inttoptr i64 %338 to i32*
  store atomic volatile i32 %335, i32* %339 monotonic, align 4
  %340 = and i64 %336, 1
  %341 = icmp eq i64 %340, 0
  br i1 %341, label %353, label %342

342:                                              ; preds = %329
  %343 = and i64 %330, -262144
  %344 = or i64 %343, 8
  %345 = inttoptr i64 %344 to i64*
  %346 = load i64, i64* %345, align 8
  %347 = and i64 %346, 262144
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %353, label %349

349:                                              ; preds = %342
  %350 = or i64 %343, 16
  %351 = inttoptr i64 %350 to %"class.v8::internal::Heap"**
  %352 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %351, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %352, i64 %330, i64 %338, i64 %337) #6
  br label %353

353:                                              ; preds = %349, %342, %329
  %354 = and i64 %337, -262144
  %355 = or i64 %354, 8
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = and i64 %357, 24
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %368, label %360

360:                                              ; preds = %353
  %361 = and i64 %330, -262144
  %362 = or i64 %361, 8
  %363 = inttoptr i64 %362 to i64*
  %364 = load i64, i64* %363, align 8
  %365 = and i64 %364, 24
  %366 = icmp eq i64 %365, 0
  br i1 %366, label %367, label %368

367:                                              ; preds = %360
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %330, i64 %338, i64 %337) #6
  br label %368

368:                                              ; preds = %353, %360, %367
  %369 = load i64, i64* %200, align 8
  %370 = load i64, i64* %1, align 8
  %371 = add i64 %370, 11
  %372 = inttoptr i64 %371 to i32*
  %373 = load atomic i32, i32* %372 monotonic, align 4
  %374 = and i32 %373, -536870912
  %375 = add i64 %369, 11
  %376 = inttoptr i64 %375 to i32*
  %377 = load atomic i32, i32* %376 monotonic, align 4
  %378 = and i32 %377, 536870911
  %379 = or i32 %378, %374
  store atomic volatile i32 %379, i32* %376 monotonic, align 4
  %380 = bitcast %"class.v8::internal::TransitionsAccessor"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %380) #6
  %381 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %381, align 8
  %382 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 1
  %383 = bitcast %"class.v8::internal::Handle.1140"* %382 to i64*
  store i64 %83, i64* %383, align 8
  %384 = load i64, i64* %1, align 8
  %385 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %384, i64* %385, align 8
  %386 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %386, align 8
  %387 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 5
  store i8 0, i8* %387, align 4
  %388 = load i64, i64* %91, align 8
  %389 = add i64 %384, 35
  %390 = inttoptr i64 %389 to i32*
  %391 = load atomic i32, i32* %390 acquire, align 4
  %392 = and i64 %388, 4294967295
  %393 = icmp eq i64 %392, 0
  call void @llvm.assume(i1 %393) #6
  %394 = zext i32 %391 to i64
  %395 = or i64 %388, %394
  store i64 %395, i64* %386, align 8
  %396 = and i64 %394, 1
  %397 = icmp eq i64 %396, 0
  %398 = icmp eq i32 %391, 3
  %399 = or i1 %398, %397
  br i1 %399, label %400, label %402

400:                                              ; preds = %368
  %401 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 1, i32* %401, align 8
  br label %430

402:                                              ; preds = %368
  %403 = and i64 %394, 3
  switch i64 %403, label %429 [
    i64 3, label %404
    i64 1, label %406
  ]

404:                                              ; preds = %402
  %405 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 3, i32* %405, align 8
  br label %430

406:                                              ; preds = %402
  %407 = add i64 %395, -1
  %408 = inttoptr i64 %407 to i32*
  %409 = load atomic i32, i32* %408 monotonic, align 4
  %410 = zext i32 %409 to i64
  %411 = or i64 %388, %410
  %412 = add i64 %411, 7
  %413 = inttoptr i64 %412 to i16*
  %414 = load atomic i16, i16* %413 monotonic, align 2
  %415 = icmp eq i16 %414, 160
  br i1 %415, label %416, label %418

416:                                              ; preds = %406
  %417 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 4, i32* %417, align 8
  br label %430

418:                                              ; preds = %406
  %419 = load atomic i32, i32* %408 monotonic, align 4
  %420 = zext i32 %419 to i64
  %421 = or i64 %388, %420
  %422 = add i64 %421, 7
  %423 = inttoptr i64 %422 to i16*
  %424 = load atomic i16, i16* %423 monotonic, align 2
  %425 = icmp eq i16 %424, 110
  %426 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  br i1 %425, label %427, label %428

427:                                              ; preds = %418
  store i32 0, i32* %426, align 8
  br label %430

428:                                              ; preds = %418
  store i32 2, i32* %426, align 8
  br label %430

429:                                              ; preds = %402
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

430:                                              ; preds = %400, %404, %416, %427, %428
  %431 = call zeroext i1 @_ZN2v88internal19TransitionsAccessor22CanHaveMoreTransitionsEv(%"class.v8::internal::TransitionsAccessor"* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %380) #6
  br i1 %431, label %432, label %433

432:                                              ; preds = %430
  call void @_ZN2v88internal3Map17ConnectTransitionEPNS0_7IsolateENS0_6HandleIS1_EES5_NS4_INS0_4NameEEENS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %200, i64* %81, i32 2)
  br label %433

433:                                              ; preds = %142, %152, %432, %430, %3
  %434 = phi i64* [ %1, %3 ], [ %143, %142 ], [ %153, %152 ], [ %200, %432 ], [ %200, %430 ]
  ret i64* %434
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map6CreateEPNS0_7IsolateEi(%"class.v8::internal::Isolate"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, 19
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = add i64 %15, 571
  %17 = inttoptr i64 %16 to i32*
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %5, %19
  %21 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %22 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %21, align 8
  %23 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %2
  %25 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %22, i64 %20) #6
  %26 = load i64, i64* %25, align 8
  br label %40

27:                                               ; preds = %2
  %28 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %31 = load i64*, i64** %30, align 8
  %32 = icmp eq i64* %29, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %27
  %34 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %35

35:                                               ; preds = %33, %27
  %36 = phi i64* [ %34, %33 ], [ %29, %27 ]
  %37 = ptrtoint i64* %36 to i64
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %38 to i64*
  store i64* %39, i64** %28, align 8
  store i64 %20, i64* %36, align 8
  br label %40

40:                                               ; preds = %24, %35
  %41 = phi i64 [ %26, %24 ], [ %20, %35 ]
  %42 = and i64 %41, -4294967296
  %43 = add i64 %41, 27
  %44 = inttoptr i64 %43 to i32*
  %45 = load atomic i32, i32* %44 acquire, align 4
  %46 = zext i32 %45 to i64
  %47 = or i64 %42, %46
  %48 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %21, align 8
  %49 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %40
  %51 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %48, i64 %47) #6
  %52 = load i64, i64* %51, align 8
  br label %66

53:                                               ; preds = %40
  %54 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %55 = load i64*, i64** %54, align 8
  %56 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %57 = load i64*, i64** %56, align 8
  %58 = icmp eq i64* %55, %57
  br i1 %58, label %59, label %61

59:                                               ; preds = %53
  %60 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %61

61:                                               ; preds = %59, %53
  %62 = phi i64* [ %60, %59 ], [ %55, %53 ]
  %63 = ptrtoint i64* %62 to i64
  %64 = add i64 %63, 8
  %65 = inttoptr i64 %64 to i64*
  store i64* %65, i64** %54, align 8
  store i64 %47, i64* %62, align 8
  br label %66

66:                                               ; preds = %50, %61
  %67 = phi i64 [ %52, %50 ], [ %47, %61 ]
  %68 = phi i64* [ %51, %50 ], [ %62, %61 ]
  %69 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %70 = load i64, i64* %69, align 8
  %71 = add i64 %67, 23
  %72 = inttoptr i64 %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = and i64 %70, 4294967295
  %75 = icmp eq i64 %74, 0
  tail call void @llvm.assume(i1 %75) #6
  %76 = zext i32 %73 to i64
  %77 = or i64 %70, %76
  %78 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %21, align 8
  %79 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %78, null
  br i1 %79, label %82, label %80

80:                                               ; preds = %66
  %81 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %78, i64 %77) #6
  br label %95

82:                                               ; preds = %66
  %83 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %84 = load i64*, i64** %83, align 8
  %85 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %86 = load i64*, i64** %85, align 8
  %87 = icmp eq i64* %84, %86
  br i1 %87, label %88, label %90

88:                                               ; preds = %82
  %89 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %90

90:                                               ; preds = %88, %82
  %91 = phi i64* [ %89, %88 ], [ %84, %82 ]
  %92 = ptrtoint i64* %91 to i64
  %93 = add i64 %92, 8
  %94 = inttoptr i64 %93 to i64*
  store i64* %94, i64** %83, align 8
  store i64 %77, i64* %91, align 8
  br label %95

95:                                               ; preds = %80, %90
  %96 = phi i64* [ %81, %80 ], [ %91, %90 ]
  %97 = load i64, i64* %68, align 8
  %98 = add i64 %97, 11
  %99 = inttoptr i64 %98 to i32*
  %100 = load atomic i32, i32* %99 acquire, align 4
  %101 = lshr i32 %100, 10
  %102 = and i32 %101, 1023
  %103 = tail call i64* @_ZN2v88internal15DescriptorArray8CopyUpToEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %96, i32 %102, i32 0) #6
  %104 = tail call i64* @_ZN2v88internal3Map22CopyReplaceDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEENS0_14TransitionFlagENS0_11MaybeHandleINS0_4NameEEEPKcNS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %68, i64* %103, i32 1, i64* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i32 2) #6
  %105 = icmp slt i32 %1, 252
  %106 = select i1 %105, i32 %1, i32 252
  %107 = shl i32 %106, 2
  %108 = add nsw i32 %107, 12
  %109 = ashr exact i32 %108, 2
  %110 = icmp ult i32 %109, 256
  br i1 %110, label %112, label %111, !prof !2

111:                                              ; preds = %95
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.37, i64 0, i64 0)) #7
  unreachable

112:                                              ; preds = %95
  %113 = load i64, i64* %104, align 8
  %114 = add i64 %113, 3
  %115 = inttoptr i64 %114 to i8*
  %116 = trunc i32 %109 to i8
  store atomic volatile i8 %116, i8* %115 monotonic, align 1
  %117 = load i64, i64* %104, align 8
  %118 = add i64 %117, 7
  %119 = inttoptr i64 %118 to i16*
  %120 = load atomic i16, i16* %119 monotonic, align 2
  %121 = icmp ugt i16 %120, 188
  br i1 %121, label %123, label %122, !prof !2

122:                                              ; preds = %112
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.38, i64 0, i64 0)) #7
  unreachable

123:                                              ; preds = %112
  %124 = add i64 %117, 4
  %125 = inttoptr i64 %124 to i8*
  store atomic volatile i8 3, i8* %125 monotonic, align 1
  %126 = load i64, i64* %104, align 8
  %127 = add i64 %126, 7
  %128 = inttoptr i64 %127 to i16*
  %129 = load atomic i16, i16* %128 monotonic, align 2
  %130 = icmp ugt i16 %129, 188
  br i1 %130, label %137, label %131

131:                                              ; preds = %123
  %132 = icmp eq i32 %106, 0
  br i1 %132, label %134, label %133, !prof !2

133:                                              ; preds = %131
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0)) #7
  unreachable

134:                                              ; preds = %131
  %135 = add i64 %126, 5
  %136 = inttoptr i64 %135 to i8*
  store atomic volatile i8 0, i8* %136 monotonic, align 1
  br label %160

137:                                              ; preds = %123
  %138 = icmp sgt i32 %106, -1
  br i1 %138, label %140, label %139, !prof !2

139:                                              ; preds = %137
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.32, i64 0, i64 0)) #7
  unreachable

140:                                              ; preds = %137
  %141 = add i64 %126, 3
  %142 = inttoptr i64 %141 to i8*
  %143 = load atomic i8, i8* %142 monotonic, align 1
  %144 = zext i8 %143 to i32
  %145 = add i64 %126, 4
  %146 = inttoptr i64 %145 to i8*
  %147 = load atomic i8, i8* %146 monotonic, align 1
  %148 = zext i8 %147 to i32
  %149 = load atomic i8, i8* %146 monotonic, align 1
  %150 = zext i8 %149 to i32
  %151 = sub nsw i32 %144, %106
  %152 = sub i32 %151, %148
  %153 = add i32 %152, %150
  %154 = icmp ult i32 %153, 256
  br i1 %154, label %156, label %155, !prof !2

155:                                              ; preds = %140
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i64 0, i64 0)) #7
  unreachable

156:                                              ; preds = %140
  %157 = add i64 %126, 5
  %158 = inttoptr i64 %157 to i8*
  %159 = trunc i32 %153 to i8
  store atomic volatile i8 %159, i8* %158 monotonic, align 1
  br label %160

160:                                              ; preds = %134, %156
  %161 = load i64, i64* %104, align 8
  %162 = tail call i32 @_ZN2v88internal3Map12GetVisitorIdES1_(i64 %161)
  %163 = icmp ult i32 %162, 256
  br i1 %163, label %165, label %164, !prof !2

164:                                              ; preds = %160
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.39, i64 0, i64 0)) #7
  unreachable

165:                                              ; preds = %160
  %166 = add i64 %161, 6
  %167 = inttoptr i64 %166 to i8*
  %168 = trunc i32 %162 to i8
  store atomic volatile i8 %168, i8* %167 monotonic, align 1
  ret i64* %104
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map24CopyForPreventExtensionsEPNS0_7IsolateENS0_6HandleIS1_EENS0_18PropertyAttributesENS4_INS0_6SymbolEEEPKcb(%"class.v8::internal::Isolate"*, i64*, i32, i64*, i8*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %7 = load i64, i64* %1, align 8
  %8 = add i64 %7, 11
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 acquire, align 4
  %11 = lshr i32 %10, 10
  %12 = and i32 %11, 1023
  %13 = load i64, i64* %1, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %13, 23
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = and i64 %15, 4294967295
  %20 = icmp eq i64 %19, 0
  tail call void @llvm.assume(i1 %20) #6
  %21 = zext i32 %18 to i64
  %22 = or i64 %15, %21
  %23 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %24 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %23, align 8
  %25 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %6
  %27 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %24, i64 %22) #6
  br label %41

28:                                               ; preds = %6
  %29 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %30 = load i64*, i64** %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %32 = load i64*, i64** %31, align 8
  %33 = icmp eq i64* %30, %32
  br i1 %33, label %34, label %36

34:                                               ; preds = %28
  %35 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %36

36:                                               ; preds = %34, %28
  %37 = phi i64* [ %35, %34 ], [ %30, %28 ]
  %38 = ptrtoint i64* %37 to i64
  %39 = add i64 %38, 8
  %40 = inttoptr i64 %39 to i64*
  store i64* %40, i64** %29, align 8
  store i64 %22, i64* %37, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i64* [ %27, %26 ], [ %37, %36 ]
  %43 = tail call i64* @_ZN2v88internal15DescriptorArray21CopyUpToAddAttributesEPNS0_7IsolateENS0_6HandleIS1_EEiNS0_18PropertyAttributesEi(%"class.v8::internal::Isolate"* %0, i64* %42, i32 %12, i32 %2, i32 0) #6
  %44 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 11
  %45 = load %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::Bootstrapper"** %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Bootstrapper", %"class.v8::internal::Bootstrapper"* %45, i64 0, i32 1
  %47 = load i32, i32* %46, align 8
  %48 = icmp ne i32 %47, 0
  %49 = zext i1 %48 to i32
  %50 = tail call i64* @_ZN2v88internal3Map22CopyReplaceDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEENS0_14TransitionFlagENS0_11MaybeHandleINS0_4NameEEEPKcNS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %43, i32 %49, i64* %3, i8* %4, i32 2)
  %51 = load i64, i64* %50, align 8
  %52 = add i64 %51, 11
  %53 = inttoptr i64 %52 to i32*
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = and i32 %54, -134217729
  store atomic volatile i32 %55, i32* %53 monotonic, align 4
  %56 = load i64, i64* %1, align 8
  %57 = add i64 %56, 10
  %58 = inttoptr i64 %57 to i8*
  %59 = load i8, i8* %58, align 1
  %60 = lshr i8 %59, 2
  %61 = add nsw i8 %60, -17
  %62 = icmp ult i8 %61, 11
  br i1 %62, label %99, label %63

63:                                               ; preds = %41
  %64 = add nsw i8 %60, -15
  %65 = icmp ult i8 %64, 2
  %66 = select i1 %65, i8 16, i8 12
  br i1 %5, label %90, label %67

67:                                               ; preds = %63
  switch i8 %60, label %90 [
    i8 2, label %68
    i8 6, label %73
    i8 8, label %75
    i8 3, label %78
    i8 7, label %83
    i8 9, label %85
  ]

68:                                               ; preds = %67
  %69 = icmp eq i32 %2, 5
  %70 = select i1 %69, i8 10, i8 6
  %71 = icmp eq i32 %2, 4
  %72 = select i1 %71, i8 8, i8 %70
  br label %90

73:                                               ; preds = %67
  switch i32 %2, label %88 [
    i32 4, label %90
    i32 5, label %74
  ]

74:                                               ; preds = %73
  br label %90

75:                                               ; preds = %67
  %76 = icmp eq i32 %2, 5
  %77 = select i1 %76, i8 10, i8 %66
  br label %90

78:                                               ; preds = %67
  %79 = icmp eq i32 %2, 5
  %80 = select i1 %79, i8 11, i8 7
  %81 = icmp eq i32 %2, 4
  %82 = select i1 %81, i8 9, i8 %80
  br label %90

83:                                               ; preds = %67
  switch i32 %2, label %89 [
    i32 4, label %90
    i32 5, label %84
  ]

84:                                               ; preds = %83
  br label %90

85:                                               ; preds = %67
  %86 = icmp eq i32 %2, 5
  %87 = select i1 %86, i8 11, i8 %66
  br label %90

88:                                               ; preds = %73
  br label %90

89:                                               ; preds = %83
  br label %90

90:                                               ; preds = %85, %78, %75, %68, %83, %89, %73, %88, %74, %84, %67, %63
  %91 = phi i8 [ %66, %63 ], [ %66, %67 ], [ 11, %84 ], [ 10, %74 ], [ 8, %73 ], [ %66, %88 ], [ %77, %75 ], [ 9, %83 ], [ %66, %89 ], [ %87, %85 ], [ %72, %68 ], [ %82, %78 ]
  %92 = load i64, i64* %50, align 8
  %93 = add i64 %92, 10
  %94 = inttoptr i64 %93 to i8*
  %95 = load i8, i8* %94, align 1
  %96 = and i8 %95, 3
  %97 = shl i8 %91, 2
  %98 = or i8 %96, %97
  store i8 %98, i8* %94, align 1
  br label %99

99:                                               ; preds = %41, %90
  ret i64* %50
}

declare i64* @_ZN2v88internal15DescriptorArray21CopyUpToAddAttributesEPNS0_7IsolateENS0_6HandleIS1_EEiNS0_18PropertyAttributesEi(%"class.v8::internal::Isolate"*, i64*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map22PrepareForDataPropertyEPNS0_7IsolateENS0_6HandleIS1_EENS0_13InternalIndexENS0_17PropertyConstnessENS4_INS0_6ObjectEEE(%"class.v8::internal::Isolate"*, i64*, i64, i32, i64*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::MapUpdater", align 8
  %7 = load i64, i64* %1, align 8
  %8 = add i64 %7, 11
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 acquire, align 4
  %11 = and i32 %10, 16777216
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %5
  %14 = bitcast %"class.v8::internal::MapUpdater"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %14) #6
  call void @_ZN2v88internal10MapUpdaterC1EPNS0_7IsolateENS0_6HandleINS0_3MapEEE(%"class.v8::internal::MapUpdater"* nonnull %6, %"class.v8::internal::Isolate"* %0, i64* %1) #6
  %15 = call i64* @_ZN2v88internal10MapUpdater6UpdateEv(%"class.v8::internal::MapUpdater"* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %14) #6
  br label %16

16:                                               ; preds = %5, %13
  %17 = phi i64* [ %15, %13 ], [ %1, %5 ]
  %18 = call fastcc i64* @_ZN2v88internal12_GLOBAL__N_124UpdateDescriptorForValueEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS0_13InternalIndexENS0_17PropertyConstnessENS4_INS0_6ObjectEEE(%"class.v8::internal::Isolate"* %0, i64* %17, i64 %2, i32 %3, i64* %4)
  ret i64* %18
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64* @_ZN2v88internal12_GLOBAL__N_124UpdateDescriptorForValueEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS0_13InternalIndexENS0_17PropertyConstnessENS4_INS0_6ObjectEEE(%"class.v8::internal::Isolate"*, i64*, i64, i32, i64*) unnamed_addr #0 {
  %6 = alloca %"class.v8::internal::FieldType", align 8
  %7 = alloca %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", align 8
  %8 = alloca %"class.v8::internal::MapUpdater", align 8
  %9 = load i64, i64* %1, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %9, 23
  %13 = inttoptr i64 %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = and i64 %11, 4294967295
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #6
  %17 = zext i32 %14 to i64
  %18 = or i64 %11, %17
  %19 = load i64, i64* %4, align 8
  %20 = mul i64 %2, 51539607552
  %21 = add i64 %20, 68719476736
  %22 = ashr exact i64 %21, 32
  %23 = or i64 %22, 3
  %24 = add i64 %18, %23
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = lshr i32 %26, 7
  %28 = and i32 %26, 6
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %106

30:                                               ; preds = %5
  %31 = and i32 %26, 8
  %32 = icmp eq i32 %31, 0
  %33 = icmp eq i32 %3, 1
  %34 = or i1 %33, %32
  %35 = bitcast %"class.v8::internal::FieldType"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #6
  br i1 %34, label %36, label %95

36:                                               ; preds = %30
  %37 = trunc i32 %27 to i8
  %38 = and i8 %37, 7
  %39 = load i8, i8* @_ZN2v88internal17FLAG_track_fieldsE, align 1, !range !3
  %40 = icmp eq i8 %39, 0
  %41 = xor i1 %40, true
  %42 = icmp eq i8 %38, 1
  %43 = and i1 %42, %41
  br i1 %43, label %44, label %47

44:                                               ; preds = %36
  %45 = and i64 %19, 1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %77, label %95

47:                                               ; preds = %36
  %48 = load i8, i8* @_ZN2v88internal24FLAG_track_double_fieldsE, align 1, !range !3
  %49 = icmp ne i8 %48, 0
  %50 = icmp eq i8 %38, 2
  %51 = and i1 %50, %49
  br i1 %51, label %52, label %55

52:                                               ; preds = %47
  %53 = and i64 %19, 1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %77, label %66

55:                                               ; preds = %47
  %56 = load i8, i8* @_ZN2v88internal29FLAG_track_heap_object_fieldsE, align 1, !range !3
  %57 = icmp ne i8 %56, 0
  %58 = icmp eq i8 %38, 3
  %59 = and i1 %58, %57
  br i1 %59, label %60, label %63

60:                                               ; preds = %55
  %61 = and i64 %19, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %95, label %77

63:                                               ; preds = %55
  %64 = icmp ne i8 %38, 0
  %65 = or i1 %64, %40
  br i1 %65, label %77, label %95

66:                                               ; preds = %52
  %67 = and i64 %19, -4294967296
  %68 = add i64 %19, -1
  %69 = inttoptr i64 %68 to i32*
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = zext i32 %70 to i64
  %72 = or i64 %67, %71
  %73 = add i64 %72, 7
  %74 = inttoptr i64 %73 to i16*
  %75 = load atomic i16, i16* %74 monotonic, align 2
  %76 = icmp eq i16 %75, 66
  br i1 %76, label %77, label %95

77:                                               ; preds = %66, %63, %60, %52, %44
  %78 = add nsw i64 %22, 7
  %79 = add i64 %78, %18
  %80 = inttoptr i64 %79 to i32*
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = zext i32 %81 to i64
  %83 = or i64 %11, %82
  %84 = icmp eq i32 %81, 3
  br i1 %84, label %85, label %87

85:                                               ; preds = %77
  %86 = tail call i64 @_ZN2v88internal9FieldType4NoneEv() #6
  br label %96

87:                                               ; preds = %77
  %88 = and i64 %82, 3
  %89 = icmp eq i64 %88, 3
  br i1 %89, label %90, label %93

90:                                               ; preds = %87
  %91 = and i64 %83, -3
  %92 = tail call i64 @_ZN2v88internal9FieldType4castENS0_6ObjectE(i64 %91) #6
  br label %96

93:                                               ; preds = %87
  %94 = tail call i64 @_ZN2v88internal9FieldType4castENS0_6ObjectE(i64 %83) #6
  br label %96

95:                                               ; preds = %66, %30, %63, %44, %60
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #6
  br label %106

96:                                               ; preds = %85, %90, %93
  %97 = phi i64 [ %86, %85 ], [ %92, %90 ], [ %94, %93 ]
  %98 = getelementptr inbounds %"class.v8::internal::FieldType", %"class.v8::internal::FieldType"* %6, i64 0, i32 0, i32 0, i32 0
  store i64 %97, i64* %98, align 8
  %99 = call zeroext i1 @_ZNK2v88internal9FieldType11NowContainsENS0_6ObjectE(%"class.v8::internal::FieldType"* nonnull %6, i64 %19) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #6
  br i1 %99, label %177, label %100

100:                                              ; preds = %96
  %101 = load i64, i64* %1, align 8
  %102 = load i64, i64* %10, align 8
  %103 = load i64, i64* %4, align 8
  %104 = add i64 %101, 23
  %105 = inttoptr i64 %104 to i32*
  br label %106

106:                                              ; preds = %100, %5, %95
  %107 = phi i32* [ %105, %100 ], [ %13, %5 ], [ %13, %95 ]
  %108 = phi i64 [ %103, %100 ], [ %19, %5 ], [ %19, %95 ]
  %109 = phi i64 [ %102, %100 ], [ %11, %5 ], [ %11, %95 ]
  %110 = load i32, i32* %107, align 4
  %111 = and i64 %109, 4294967295
  %112 = icmp eq i64 %111, 0
  call void @llvm.assume(i1 %112) #6
  %113 = zext i32 %110 to i64
  %114 = or i64 %109, %113
  %115 = add i64 %114, %23
  %116 = inttoptr i64 %115 to i32*
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = lshr i32 %117, 4
  %119 = and i32 %118, 7
  %120 = load i8, i8* @_ZN2v88internal17FLAG_track_fieldsE, align 1, !range !3
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %169, label %122

122:                                              ; preds = %106
  %123 = and i64 %108, 1
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %169, label %125

125:                                              ; preds = %122
  %126 = load i8, i8* @_ZN2v88internal24FLAG_track_double_fieldsE, align 1, !range !3
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %125
  %129 = add i64 %108, -1
  %130 = inttoptr i64 %129 to i32*
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = zext i32 %131 to i64
  %133 = or i64 %109, %132
  %134 = add i64 %133, 7
  %135 = inttoptr i64 %134 to i16*
  %136 = load atomic i16, i16* %135 monotonic, align 2
  %137 = icmp eq i16 %136, 66
  br i1 %137, label %169, label %138

138:                                              ; preds = %128, %125
  %139 = load i8, i8* @_ZN2v88internal26FLAG_track_computed_fieldsE, align 1, !range !3
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %165, label %141

141:                                              ; preds = %138
  %142 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %143 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %142, null
  br i1 %143, label %150, label %144

144:                                              ; preds = %141
  %145 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %142, i64 0, i32 0, i32 1
  %146 = load i8, i8* %145, align 8, !range !3
  %147 = icmp eq i8 %146, 0
  br i1 %147, label %150, label %148

148:                                              ; preds = %144
  %149 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %142, i64 0, i32 1, i64 0
  br label %158

150:                                              ; preds = %144, %141
  %151 = and i64 %108, -262144
  %152 = or i64 %151, 16
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153, align 16
  %155 = add i64 %154, -41416
  %156 = inttoptr i64 %155 to %"class.v8::internal::Isolate"*
  %157 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %156, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %158

158:                                              ; preds = %150, %148
  %159 = phi i64* [ %157, %150 ], [ %149, %148 ]
  %160 = getelementptr inbounds i64, i64* %159, i64 3
  %161 = load i64, i64* %160, align 8
  %162 = trunc i64 %108 to i32
  %163 = trunc i64 %161 to i32
  %164 = icmp eq i32 %162, %163
  br i1 %164, label %169, label %165

165:                                              ; preds = %158, %138
  %166 = load i8, i8* @_ZN2v88internal29FLAG_track_heap_object_fieldsE, align 1, !range !3
  %167 = icmp eq i8 %166, 0
  %168 = select i1 %167, i8 4, i8 3
  br label %169

169:                                              ; preds = %106, %122, %128, %158, %165
  %170 = phi i8 [ %168, %165 ], [ 4, %106 ], [ 1, %122 ], [ 2, %128 ], [ 0, %158 ]
  %171 = bitcast %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %171) #6
  %172 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0
  store i64 %108, i64* %172, align 8
  %173 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %7, i64 0, i32 0
  %174 = call i64* @_ZN2v88internal6Object11OptimalTypeEPNS0_7IsolateENS0_14RepresentationE(%"class.v8::internal::Object"* nonnull %173, %"class.v8::internal::Isolate"* %0, i8 %170) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %171) #6
  %175 = bitcast %"class.v8::internal::MapUpdater"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %175) #6
  call void @_ZN2v88internal10MapUpdaterC1EPNS0_7IsolateENS0_6HandleINS0_3MapEEE(%"class.v8::internal::MapUpdater"* nonnull %8, %"class.v8::internal::Isolate"* %0, i64* %1) #6
  %176 = call i64* @_ZN2v88internal10MapUpdater22ReconfigureToDataFieldENS0_13InternalIndexENS0_18PropertyAttributesENS0_17PropertyConstnessENS0_14RepresentationENS0_6HandleINS0_9FieldTypeEEE(%"class.v8::internal::MapUpdater"* nonnull %8, i64 %2, i32 %119, i32 %3, i8 %170, i64* %174) #6
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %175) #6
  br label %177

177:                                              ; preds = %96, %169
  %178 = phi i64* [ %176, %169 ], [ %1, %96 ]
  ret i64* %178
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map24TransitionToDataPropertyEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_4NameEEENS4_INS0_6ObjectEEENS0_18PropertyAttributesENS0_17PropertyConstnessENS0_11StoreOriginE(%"class.v8::internal::Isolate"*, i64*, i64*, i64*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.v8::internal::MapUpdater", align 8
  %9 = alloca %"class.v8::internal::RuntimeCallTimerScope", align 8
  %10 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %11 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %12 = alloca %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", align 8
  %13 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %14 = alloca %"class.v8::internal::DependentCode", align 8
  %15 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %16 = bitcast %"class.v8::internal::RuntimeCallTimerScope"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %16) #6
  %17 = load i64, i64* %1, align 8
  %18 = add i64 %17, 11
  %19 = inttoptr i64 %18 to i32*
  %20 = load atomic i32, i32* %19 acquire, align 4
  %21 = and i32 %20, 1048576
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %97

23:                                               ; preds = %7
  %24 = add i64 %17, 7
  %25 = inttoptr i64 %24 to i16*
  %26 = load atomic i16, i16* %25 monotonic, align 2
  %27 = icmp eq i16 %26, 1057
  br i1 %27, label %28, label %98

28:                                               ; preds = %23
  %29 = load atomic i32, i32* %19 acquire, align 4
  %30 = and i32 %29, 1047552
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %98, label %32

32:                                               ; preds = %28
  %33 = and i64 %17, -4294967296
  %34 = add i64 %17, 19
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %33, %37
  %39 = and i64 %37, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %32
  %42 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %69

43:                                               ; preds = %32
  %44 = add i64 %38, -1
  %45 = inttoptr i64 %44 to i32*
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %48 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %47, null
  br i1 %48, label %55, label %49

49:                                               ; preds = %43
  %50 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %47, i64 0, i32 0, i32 1
  %51 = load i8, i8* %50, align 8, !range !3
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %47, i64 0, i32 1, i64 0
  br label %63

55:                                               ; preds = %49, %43
  %56 = and i64 %17, -262144
  %57 = or i64 %56, 16
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58, align 16
  %60 = add i64 %59, -41416
  %61 = inttoptr i64 %60 to %"class.v8::internal::Isolate"*
  %62 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %61, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %63

63:                                               ; preds = %55, %53
  %64 = phi i64* [ %62, %55 ], [ %54, %53 ]
  %65 = getelementptr inbounds i64, i64* %64, i64 10
  %66 = load i64, i64* %65, align 8
  %67 = trunc i64 %66 to i32
  %68 = icmp eq i32 %46, %67
  br i1 %68, label %90, label %69

69:                                               ; preds = %63, %41
  %70 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %42, %41 ], [ %47, %63 ]
  %71 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %70, null
  br i1 %71, label %78, label %72

72:                                               ; preds = %69
  %73 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %70, i64 0, i32 0, i32 1
  %74 = load i8, i8* %73, align 8, !range !3
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %78, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %70, i64 0, i32 1, i64 0
  br label %86

78:                                               ; preds = %72, %69
  %79 = and i64 %17, -262144
  %80 = or i64 %79, 16
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81, align 16
  %83 = add i64 %82, -41416
  %84 = inttoptr i64 %83 to %"class.v8::internal::Isolate"*
  %85 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %84, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %86

86:                                               ; preds = %78, %76
  %87 = phi i64* [ %85, %78 ], [ %77, %76 ]
  %88 = getelementptr inbounds i64, i64* %87, i64 4
  %89 = load i64, i64* %88, align 8
  br label %90

90:                                               ; preds = %63, %86
  %91 = phi i64 [ %89, %86 ], [ %38, %63 ]
  %92 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 4
  %93 = load i64, i64* %92, align 8
  %94 = trunc i64 %91 to i32
  %95 = trunc i64 %93 to i32
  %96 = icmp eq i32 %94, %95
  br i1 %96, label %97, label %98

97:                                               ; preds = %7, %90
  br label %98

98:                                               ; preds = %23, %28, %90, %97
  %99 = phi i32 [ 204, %97 ], [ 180, %90 ], [ 180, %28 ], [ 180, %23 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 40, i1 false) #6
  %100 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1194", %"struct.std::__1::atomic.1194"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %108, label %102, !prof !2

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %9, i64 0, i32 0
  %104 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %9, i64 0, i32 1
  %105 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 14, i32 0
  %106 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %105, align 8
  %107 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %106, i64 0, i32 757
  store %"class.v8::internal::RuntimeCallStats"* %107, %"class.v8::internal::RuntimeCallStats"** %103, align 8
  call void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"* %107, %"class.v8::internal::RuntimeCallTimer"* %104, i32 %99) #6
  br label %108

108:                                              ; preds = %98, %102
  %109 = load i64, i64* %1, align 8
  %110 = add i64 %109, 11
  %111 = inttoptr i64 %110 to i32*
  %112 = load atomic i32, i32* %111 acquire, align 4
  %113 = and i32 %112, 16777216
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %118, label %115

115:                                              ; preds = %108
  %116 = bitcast %"class.v8::internal::MapUpdater"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %116) #6
  call void @_ZN2v88internal10MapUpdaterC1EPNS0_7IsolateENS0_6HandleINS0_3MapEEE(%"class.v8::internal::MapUpdater"* nonnull %8, %"class.v8::internal::Isolate"* %0, i64* %1) #6
  %117 = call i64* @_ZN2v88internal10MapUpdater6UpdateEv(%"class.v8::internal::MapUpdater"* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %116) #6
  br label %118

118:                                              ; preds = %108, %115
  %119 = phi i64* [ %117, %115 ], [ %1, %108 ]
  %120 = bitcast %"class.v8::internal::TransitionsAccessor"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %120) #6
  %121 = ptrtoint i64* %119 to i64
  %122 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %122, align 8
  %123 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 1
  %124 = bitcast %"class.v8::internal::Handle.1140"* %123 to i64*
  store i64 %121, i64* %124, align 8
  %125 = load i64, i64* %119, align 8
  %126 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %125, i64* %126, align 8
  %127 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %127, align 8
  %128 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 5
  store i8 0, i8* %128, align 4
  %129 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %130 = load i64, i64* %129, align 8
  %131 = add i64 %125, 35
  %132 = inttoptr i64 %131 to i32*
  %133 = load atomic i32, i32* %132 acquire, align 4
  %134 = and i64 %130, 4294967295
  %135 = icmp eq i64 %134, 0
  call void @llvm.assume(i1 %135) #6
  %136 = zext i32 %133 to i64
  %137 = or i64 %130, %136
  store i64 %137, i64* %127, align 8
  %138 = and i64 %136, 1
  %139 = icmp eq i64 %138, 0
  %140 = icmp eq i32 %133, 3
  %141 = or i1 %140, %139
  br i1 %141, label %142, label %144

142:                                              ; preds = %118
  %143 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  store i32 1, i32* %143, align 8
  br label %172

144:                                              ; preds = %118
  %145 = and i64 %136, 3
  switch i64 %145, label %171 [
    i64 3, label %146
    i64 1, label %148
  ]

146:                                              ; preds = %144
  %147 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  store i32 3, i32* %147, align 8
  br label %172

148:                                              ; preds = %144
  %149 = add i64 %137, -1
  %150 = inttoptr i64 %149 to i32*
  %151 = load atomic i32, i32* %150 monotonic, align 4
  %152 = zext i32 %151 to i64
  %153 = or i64 %130, %152
  %154 = add i64 %153, 7
  %155 = inttoptr i64 %154 to i16*
  %156 = load atomic i16, i16* %155 monotonic, align 2
  %157 = icmp eq i16 %156, 160
  br i1 %157, label %158, label %160

158:                                              ; preds = %148
  %159 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  store i32 4, i32* %159, align 8
  br label %172

160:                                              ; preds = %148
  %161 = load atomic i32, i32* %150 monotonic, align 4
  %162 = zext i32 %161 to i64
  %163 = or i64 %130, %162
  %164 = add i64 %163, 7
  %165 = inttoptr i64 %164 to i16*
  %166 = load atomic i16, i16* %165 monotonic, align 2
  %167 = icmp eq i16 %166, 110
  %168 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  br i1 %167, label %169, label %170

169:                                              ; preds = %160
  store i32 0, i32* %168, align 8
  br label %172

170:                                              ; preds = %160
  store i32 2, i32* %168, align 8
  br label %172

171:                                              ; preds = %144
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

172:                                              ; preds = %142, %146, %158, %169, %170
  %173 = load i64, i64* %2, align 8
  %174 = call i64 @_ZN2v88internal19TransitionsAccessor16SearchTransitionENS0_4NameENS0_12PropertyKindENS0_18PropertyAttributesE(%"class.v8::internal::TransitionsAccessor"* nonnull %10, i64 %173, i32 0, i32 %4) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %120) #6
  %175 = trunc i64 %174 to i32
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %208, label %177

177:                                              ; preds = %172
  %178 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %179 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %178, align 8
  %180 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %179, null
  br i1 %180, label %184, label %181

181:                                              ; preds = %177
  %182 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %179, i64 %174) #6
  %183 = load i64, i64* %182, align 8
  br label %197

184:                                              ; preds = %177
  %185 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %186 = load i64*, i64** %185, align 8
  %187 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %188 = load i64*, i64** %187, align 8
  %189 = icmp eq i64* %186, %188
  br i1 %189, label %190, label %192

190:                                              ; preds = %184
  %191 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %192

192:                                              ; preds = %190, %184
  %193 = phi i64* [ %191, %190 ], [ %186, %184 ]
  %194 = ptrtoint i64* %193 to i64
  %195 = add i64 %194, 8
  %196 = inttoptr i64 %195 to i64*
  store i64* %196, i64** %185, align 8
  store i64 %174, i64* %193, align 8
  br label %197

197:                                              ; preds = %181, %192
  %198 = phi i64 [ %183, %181 ], [ %174, %192 ]
  %199 = phi i64* [ %182, %181 ], [ %193, %192 ]
  %200 = add i64 %198, 11
  %201 = inttoptr i64 %200 to i32*
  %202 = load atomic i32, i32* %201 acquire, align 4
  %203 = lshr i32 %202, 10
  %204 = and i32 %203, 1023
  %205 = add nsw i32 %204, -1
  %206 = sext i32 %205 to i64
  %207 = call fastcc i64* @_ZN2v88internal12_GLOBAL__N_124UpdateDescriptorForValueEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS0_13InternalIndexENS0_17PropertyConstnessENS4_INS0_6ObjectEEE(%"class.v8::internal::Isolate"* %0, i64* %199, i64 %206, i32 %5, i64* %3)
  br label %512

208:                                              ; preds = %172
  %209 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 11
  %210 = load %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::Bootstrapper"** %209, align 8
  %211 = getelementptr inbounds %"class.v8::internal::Bootstrapper", %"class.v8::internal::Bootstrapper"* %210, i64 0, i32 1
  %212 = load i32, i32* %211, align 8
  %213 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %213) #6
  %214 = load i64, i64* %119, align 8
  %215 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %214, i64* %215, align 8
  %216 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %11, i64 0, i32 0
  %217 = call zeroext i1 @_ZNK2v88internal3Map21TooManyFastPropertiesENS0_11StoreOriginE(%"class.v8::internal::Map"* nonnull %216, i32 %6)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %213) #6
  br i1 %217, label %282, label %218

218:                                              ; preds = %208
  %219 = icmp ne i32 %212, 0
  %220 = zext i1 %219 to i32
  %221 = load i64, i64* %3, align 8
  %222 = load i64, i64* %129, align 8
  %223 = load i8, i8* @_ZN2v88internal17FLAG_track_fieldsE, align 1, !range !3
  %224 = icmp eq i8 %223, 0
  br i1 %224, label %274, label %225

225:                                              ; preds = %218
  %226 = and i64 %221, 1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %274, label %228

228:                                              ; preds = %225
  %229 = load i8, i8* @_ZN2v88internal24FLAG_track_double_fieldsE, align 1, !range !3
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %243, label %231

231:                                              ; preds = %228
  %232 = add i64 %221, -1
  %233 = inttoptr i64 %232 to i32*
  %234 = load atomic i32, i32* %233 monotonic, align 4
  %235 = and i64 %222, 4294967295
  %236 = icmp eq i64 %235, 0
  call void @llvm.assume(i1 %236) #6
  %237 = zext i32 %234 to i64
  %238 = or i64 %222, %237
  %239 = add i64 %238, 7
  %240 = inttoptr i64 %239 to i16*
  %241 = load atomic i16, i16* %240 monotonic, align 2
  %242 = icmp eq i16 %241, 66
  br i1 %242, label %274, label %243

243:                                              ; preds = %231, %228
  %244 = load i8, i8* @_ZN2v88internal26FLAG_track_computed_fieldsE, align 1, !range !3
  %245 = icmp eq i8 %244, 0
  br i1 %245, label %270, label %246

246:                                              ; preds = %243
  %247 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %248 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %247, null
  br i1 %248, label %255, label %249

249:                                              ; preds = %246
  %250 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %247, i64 0, i32 0, i32 1
  %251 = load i8, i8* %250, align 8, !range !3
  %252 = icmp eq i8 %251, 0
  br i1 %252, label %255, label %253

253:                                              ; preds = %249
  %254 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %247, i64 0, i32 1, i64 0
  br label %263

255:                                              ; preds = %249, %246
  %256 = and i64 %221, -262144
  %257 = or i64 %256, 16
  %258 = inttoptr i64 %257 to i64*
  %259 = load i64, i64* %258, align 16
  %260 = add i64 %259, -41416
  %261 = inttoptr i64 %260 to %"class.v8::internal::Isolate"*
  %262 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %261, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %263

263:                                              ; preds = %255, %253
  %264 = phi i64* [ %262, %255 ], [ %254, %253 ]
  %265 = getelementptr inbounds i64, i64* %264, i64 3
  %266 = load i64, i64* %265, align 8
  %267 = trunc i64 %221 to i32
  %268 = trunc i64 %266 to i32
  %269 = icmp eq i32 %267, %268
  br i1 %269, label %274, label %270

270:                                              ; preds = %263, %243
  %271 = load i8, i8* @_ZN2v88internal29FLAG_track_heap_object_fieldsE, align 1, !range !3
  %272 = icmp eq i8 %271, 0
  %273 = select i1 %272, i8 4, i8 3
  br label %274

274:                                              ; preds = %270, %263, %231, %225, %218
  %275 = phi i8 [ %273, %270 ], [ 4, %218 ], [ 1, %225 ], [ 2, %231 ], [ 0, %263 ]
  %276 = bitcast %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %276) #6
  %277 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %12, i64 0, i32 0, i32 0, i32 0
  store i64 %221, i64* %277, align 8
  %278 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %12, i64 0, i32 0
  %279 = call i64* @_ZN2v88internal6Object11OptimalTypeEPNS0_7IsolateENS0_14RepresentationE(%"class.v8::internal::Object"* nonnull %278, %"class.v8::internal::Isolate"* %0, i8 %275) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %276) #6
  %280 = call i64* @_ZN2v88internal3Map13CopyWithFieldEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_4NameEEENS4_INS0_9FieldTypeEEENS0_18PropertyAttributesENS0_17PropertyConstnessENS0_14RepresentationENS0_14TransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %119, i64* %2, i64* %279, i32 %4, i32 %5, i8 %275, i32 %220)
  %281 = icmp eq i64* %280, null
  br i1 %281, label %282, label %512

282:                                              ; preds = %208, %274
  %283 = load i64, i64* %119, align 8
  %284 = and i64 %283, -4294967296
  %285 = add i64 %283, 19
  %286 = inttoptr i64 %285 to i32*
  %287 = load i32, i32* %286, align 4
  %288 = zext i32 %287 to i64
  %289 = or i64 %284, %288
  %290 = and i64 %288, 1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %362, label %292

292:                                              ; preds = %282
  %293 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %294 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %293, null
  %295 = and i64 %283, -262144
  %296 = or i64 %295, 16
  %297 = inttoptr i64 %296 to i64*
  br i1 %294, label %327, label %298

298:                                              ; preds = %292
  %299 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %293, i64 0, i32 0, i32 1
  %300 = load i8, i8* %299, align 8, !range !3
  %301 = icmp eq i8 %300, 0
  br i1 %301, label %306, label %302

302:                                              ; preds = %298
  %303 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %293, i64 0, i32 1, i64 10
  %304 = load i64, i64* %303, align 8
  %305 = trunc i64 %304 to i32
  br label %348

306:                                              ; preds = %298
  %307 = load i64, i64* %297, align 16
  %308 = add i64 %307, -41416
  %309 = inttoptr i64 %308 to %"class.v8::internal::Isolate"*
  %310 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %309, i64 0, i32 0, i32 7, i32 0, i64 10
  %311 = load i64, i64* %310, align 8
  %312 = trunc i64 %311 to i32
  br label %313

313:                                              ; preds = %319, %306
  %314 = phi i64 [ %324, %319 ], [ %289, %306 ]
  %315 = add i64 %314, -1
  %316 = inttoptr i64 %315 to i32*
  %317 = load atomic i32, i32* %316 monotonic, align 4
  %318 = icmp eq i32 %317, %312
  br i1 %318, label %319, label %362

319:                                              ; preds = %313
  %320 = add i64 %314, 19
  %321 = inttoptr i64 %320 to i32*
  %322 = load i32, i32* %321, align 4
  %323 = zext i32 %322 to i64
  %324 = or i64 %284, %323
  %325 = and i64 %323, 1
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %362, label %313

327:                                              ; preds = %292
  %328 = load i64, i64* %297, align 16
  %329 = add i64 %328, -41416
  %330 = inttoptr i64 %329 to %"class.v8::internal::Isolate"*
  %331 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %330, i64 0, i32 0, i32 7, i32 0, i64 10
  %332 = load i64, i64* %331, align 8
  %333 = trunc i64 %332 to i32
  br label %334

334:                                              ; preds = %340, %327
  %335 = phi i64 [ %345, %340 ], [ %289, %327 ]
  %336 = add i64 %335, -1
  %337 = inttoptr i64 %336 to i32*
  %338 = load atomic i32, i32* %337 monotonic, align 4
  %339 = icmp eq i32 %338, %333
  br i1 %339, label %340, label %362

340:                                              ; preds = %334
  %341 = add i64 %335, 19
  %342 = inttoptr i64 %341 to i32*
  %343 = load i32, i32* %342, align 4
  %344 = zext i32 %343 to i64
  %345 = or i64 %284, %344
  %346 = and i64 %344, 1
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %362, label %334

348:                                              ; preds = %354, %302
  %349 = phi i64 [ %359, %354 ], [ %289, %302 ]
  %350 = add i64 %349, -1
  %351 = inttoptr i64 %350 to i32*
  %352 = load atomic i32, i32* %351 monotonic, align 4
  %353 = icmp eq i32 %352, %305
  br i1 %353, label %354, label %362

354:                                              ; preds = %348
  %355 = add i64 %349, 19
  %356 = inttoptr i64 %355 to i32*
  %357 = load i32, i32* %356, align 4
  %358 = zext i32 %357 to i64
  %359 = or i64 %284, %358
  %360 = and i64 %358, 1
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %362, label %348

362:                                              ; preds = %348, %354, %313, %319, %334, %340, %282
  %363 = phi i64 [ %289, %282 ], [ %345, %340 ], [ %335, %334 ], [ %314, %313 ], [ %324, %319 ], [ %349, %348 ], [ %359, %354 ]
  %364 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %365 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %364, align 8
  %366 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %365, null
  br i1 %366, label %369, label %367

367:                                              ; preds = %362
  %368 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %365, i64 %363) #6
  br label %382

369:                                              ; preds = %362
  %370 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %371 = load i64*, i64** %370, align 8
  %372 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %373 = load i64*, i64** %372, align 8
  %374 = icmp eq i64* %371, %373
  br i1 %374, label %375, label %377

375:                                              ; preds = %369
  %376 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %377

377:                                              ; preds = %375, %369
  %378 = phi i64* [ %376, %375 ], [ %371, %369 ]
  %379 = ptrtoint i64* %378 to i64
  %380 = add i64 %379, 8
  %381 = inttoptr i64 %380 to i64*
  store i64* %381, i64** %370, align 8
  store i64 %363, i64* %378, align 8
  br label %382

382:                                              ; preds = %367, %377
  %383 = phi i64* [ %368, %367 ], [ %378, %377 ]
  %384 = load i8, i8* @_ZN2v88internal27FLAG_feedback_normalizationE, align 1, !range !3
  %385 = icmp eq i8 %384, 0
  %386 = load i64, i64* %119, align 8
  %387 = add i64 %386, 10
  %388 = inttoptr i64 %387 to i8*
  br i1 %385, label %508, label %389

389:                                              ; preds = %382
  %390 = load i8, i8* %388, align 1
  %391 = and i8 %390, 1
  %392 = icmp eq i8 %391, 0
  br i1 %392, label %508, label %393

393:                                              ; preds = %389
  %394 = load i64, i64* %383, align 8
  %395 = and i64 %394, 1
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %508, label %397

397:                                              ; preds = %393
  %398 = and i64 %394, -4294967296
  %399 = add i64 %394, -1
  %400 = inttoptr i64 %399 to i32*
  %401 = load atomic i32, i32* %400 monotonic, align 4
  %402 = zext i32 %401 to i64
  %403 = or i64 %398, %402
  %404 = add i64 %403, 7
  %405 = inttoptr i64 %404 to i16*
  %406 = load atomic i16, i16* %405 monotonic, align 2
  %407 = add i16 %406, -1059
  %408 = icmp ult i16 %407, 15
  br i1 %408, label %409, label %508

409:                                              ; preds = %397
  %410 = add i64 %394, 11
  %411 = inttoptr i64 %410 to i32*
  %412 = load atomic i32, i32* %411 monotonic, align 4
  %413 = zext i32 %412 to i64
  %414 = or i64 %398, %413
  %415 = add i64 %414, 27
  %416 = inttoptr i64 %415 to i32*
  %417 = load atomic i32, i32* %416 monotonic, align 4
  %418 = and i32 %417, 32
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %420, label %508

420:                                              ; preds = %409
  %421 = add i64 %394, 27
  %422 = inttoptr i64 %421 to i32*
  %423 = load atomic i32, i32* %422 acquire, align 4
  %424 = zext i32 %423 to i64
  %425 = or i64 %398, %424
  %426 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %364, align 8
  %427 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %426, null
  br i1 %427, label %431, label %428

428:                                              ; preds = %420
  %429 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %426, i64 %425) #6
  %430 = load i64, i64* %429, align 8
  br label %444

431:                                              ; preds = %420
  %432 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %433 = load i64*, i64** %432, align 8
  %434 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %435 = load i64*, i64** %434, align 8
  %436 = icmp eq i64* %433, %435
  br i1 %436, label %437, label %439

437:                                              ; preds = %431
  %438 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %439

439:                                              ; preds = %437, %431
  %440 = phi i64* [ %438, %437 ], [ %433, %431 ]
  %441 = ptrtoint i64* %440 to i64
  %442 = add i64 %441, 8
  %443 = inttoptr i64 %442 to i64*
  store i64* %443, i64** %432, align 8
  store i64 %425, i64* %440, align 8
  br label %444

444:                                              ; preds = %428, %439
  %445 = phi i64 [ %430, %428 ], [ %425, %439 ]
  %446 = phi i64* [ %429, %428 ], [ %440, %439 ]
  %447 = add i64 %445, 10
  %448 = inttoptr i64 %447 to i8*
  %449 = load i8, i8* %448, align 1
  %450 = lshr i8 %449, 2
  %451 = call i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"* %0, i64* %446, i8 zeroext %450, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i64 0, i64 0)) #6
  %452 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %452) #6
  %453 = load i64, i64* %446, align 8
  %454 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %453, i64* %454, align 8
  %455 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %13, i64 0, i32 0
  call void @_ZN2v88internal3Map23DeprecateTransitionTreeEPNS0_7IsolateE(%"class.v8::internal::Map"* nonnull %455, %"class.v8::internal::Isolate"* %0)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %452) #6
  %456 = load i64, i64* %451, align 8
  %457 = and i64 %456, -4294967296
  %458 = add i64 %456, 15
  %459 = inttoptr i64 %458 to i32*
  %460 = load i32, i32* %459, align 4
  %461 = zext i32 %460 to i64
  %462 = or i64 %457, %461
  %463 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %364, align 8
  %464 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %463, null
  br i1 %464, label %467, label %465

465:                                              ; preds = %444
  %466 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %463, i64 %462) #6
  br label %480

467:                                              ; preds = %444
  %468 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %469 = load i64*, i64** %468, align 8
  %470 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %471 = load i64*, i64** %470, align 8
  %472 = icmp eq i64* %469, %471
  br i1 %472, label %473, label %475

473:                                              ; preds = %467
  %474 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %475

475:                                              ; preds = %473, %467
  %476 = phi i64* [ %474, %473 ], [ %469, %467 ]
  %477 = ptrtoint i64* %476 to i64
  %478 = add i64 %477, 8
  %479 = inttoptr i64 %478 to i64*
  store i64* %479, i64** %468, align 8
  store i64 %462, i64* %476, align 8
  br label %480

480:                                              ; preds = %465, %475
  %481 = phi i64* [ %466, %465 ], [ %476, %475 ]
  call void @_ZN2v88internal10JSFunction13SetInitialMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_3MapEEENS4_INS0_10HeapObjectEEE(%"class.v8::internal::Isolate"* %0, i64* %383, i64* %451, i64* %481) #6
  %482 = bitcast %"class.v8::internal::DependentCode"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %482) #6
  %483 = load i64, i64* %446, align 8
  %484 = and i64 %483, -4294967296
  %485 = add i64 %483, 27
  %486 = inttoptr i64 %485 to i32*
  %487 = load i32, i32* %486, align 4
  %488 = zext i32 %487 to i64
  %489 = or i64 %484, %488
  %490 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %489, i64* %490, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %14, i32 6) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %482) #6
  %491 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %491) #6
  %492 = load i64, i64* %451, align 8
  %493 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %492, i64* %493, align 8
  %494 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %15, i64 0, i32 0
  %495 = load i64, i64* %119, align 8
  %496 = add i64 %492, 10
  %497 = inttoptr i64 %496 to i8*
  %498 = load i8, i8* %497, align 1
  %499 = lshr i8 %498, 2
  %500 = call zeroext i1 @_ZNK2v88internal3Map28EquivalentToForNormalizationES1_NS0_12ElementsKindENS0_25PropertyNormalizationModeE(%"class.v8::internal::Map"* nonnull %494, i64 %495, i8 zeroext %499, i32 0) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %491) #6
  br i1 %500, label %512, label %501

501:                                              ; preds = %480
  %502 = load i64, i64* %119, align 8
  %503 = add i64 %502, 10
  %504 = inttoptr i64 %503 to i8*
  %505 = load i8, i8* %504, align 1
  %506 = lshr i8 %505, 2
  %507 = call i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"* %0, i64* %119, i8 zeroext %506, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i64 0, i64 0)) #6
  br label %512

508:                                              ; preds = %382, %409, %389, %393, %397
  %509 = load i8, i8* %388, align 1
  %510 = lshr i8 %509, 2
  %511 = call i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"* %0, i64* %119, i8 zeroext %510, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i64 0, i64 0)) #6
  br label %512

512:                                              ; preds = %501, %480, %508, %274, %197
  %513 = phi i64* [ %207, %197 ], [ %511, %508 ], [ %451, %480 ], [ %507, %501 ], [ %280, %274 ]
  %514 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %9, i64 0, i32 0
  %515 = load %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallStats"** %514, align 8
  %516 = icmp eq %"class.v8::internal::RuntimeCallStats"* %515, null
  br i1 %516, label %519, label %517, !prof !2

517:                                              ; preds = %512
  %518 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %9, i64 0, i32 1
  call void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"* nonnull %515, %"class.v8::internal::RuntimeCallTimer"* %518) #6
  br label %519

519:                                              ; preds = %512, %517
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %16) #6
  ret i64* %513
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK2v88internal3Map21TooManyFastPropertiesENS0_11StoreOriginE(%"class.v8::internal::Map"*, i32) local_unnamed_addr #5 comdat align 2 {
  %3 = alloca [2 x i32], align 4
  %4 = alloca [2 x i32], align 4
  %5 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 5
  %8 = inttoptr i64 %7 to i8*
  %9 = load atomic i8, i8* %8 monotonic, align 1
  %10 = zext i8 %9 to i32
  %11 = icmp ugt i8 %9, 2
  br i1 %11, label %12, label %18

12:                                               ; preds = %2
  %13 = add i64 %6, 3
  %14 = inttoptr i64 %13 to i8*
  %15 = load atomic i8, i8* %14 monotonic, align 1
  %16 = zext i8 %15 to i32
  %17 = sub nsw i32 %16, %10
  br label %18

18:                                               ; preds = %2, %12
  %19 = phi i32 [ %17, %12 ], [ %10, %2 ]
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %199

21:                                               ; preds = %18
  %22 = add i64 %6, 11
  %23 = inttoptr i64 %22 to i32*
  %24 = load atomic i32, i32* %23 acquire, align 4
  %25 = and i32 %24, 1048576
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %199

27:                                               ; preds = %21
  %28 = icmp eq i32 %1, 1
  br i1 %28, label %29, label %102

29:                                               ; preds = %27
  %30 = bitcast [2 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #6
  %31 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0
  store i32 128, i32* %31, align 4
  %32 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %33 = load i64, i64* %5, align 8
  %34 = add i64 %33, 3
  %35 = inttoptr i64 %34 to i8*
  %36 = load atomic i8, i8* %35 monotonic, align 1
  %37 = zext i8 %36 to i32
  %38 = add i64 %33, 4
  %39 = inttoptr i64 %38 to i8*
  %40 = load atomic i8, i8* %39 monotonic, align 1
  %41 = zext i8 %40 to i32
  %42 = sub nsw i32 %37, %41
  store i32 %42, i32* %32, align 4
  %43 = icmp sgt i32 %42, 128
  %44 = load i32, i32* %31, align 4
  %45 = select i1 %43, i32 %42, i32 %44
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #6
  %46 = and i64 %33, -4294967296
  %47 = add i64 %33, 23
  %48 = inttoptr i64 %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  %51 = or i64 %46, %50
  %52 = add i64 %33, 11
  %53 = inttoptr i64 %52 to i32*
  %54 = load atomic i32, i32* %53 acquire, align 4
  %55 = lshr i32 %54, 10
  %56 = and i32 %55, 1023
  %57 = zext i32 %56 to i64
  %58 = icmp eq i32 %56, 0
  br i1 %58, label %84, label %59

59:                                               ; preds = %29, %79
  %60 = phi i32 [ %81, %79 ], [ 0, %29 ]
  %61 = phi i32 [ %80, %79 ], [ 0, %29 ]
  %62 = phi i64 [ %82, %79 ], [ 0, %29 ]
  %63 = mul nuw nsw i64 %62, 51539607552
  %64 = add nuw nsw i64 %63, 68719476736
  %65 = lshr exact i64 %64, 32
  %66 = or i64 %65, 3
  %67 = add i64 %66, %51
  %68 = inttoptr i64 %67 to i32*
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %79

72:                                               ; preds = %59
  %73 = and i32 %69, 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %72
  %76 = add nsw i32 %60, 1
  br label %79

77:                                               ; preds = %72
  %78 = add nsw i32 %61, 1
  br label %79

79:                                               ; preds = %77, %75, %59
  %80 = phi i32 [ %78, %77 ], [ %61, %75 ], [ %61, %59 ]
  %81 = phi i32 [ %60, %77 ], [ %76, %75 ], [ %60, %59 ]
  %82 = add nuw nsw i64 %62, 1
  %83 = icmp eq i64 %82, %57
  br i1 %83, label %84, label %59

84:                                               ; preds = %79, %29
  %85 = phi i32 [ 0, %29 ], [ %80, %79 ]
  %86 = phi i32 [ 0, %29 ], [ %81, %79 ]
  %87 = load i64, i64* %5, align 8
  %88 = add i64 %87, 3
  %89 = inttoptr i64 %88 to i8*
  %90 = load atomic i8, i8* %89 monotonic, align 1
  %91 = zext i8 %90 to i32
  %92 = add i64 %87, 4
  %93 = inttoptr i64 %92 to i8*
  %94 = load atomic i8, i8* %93 monotonic, align 1
  %95 = zext i8 %94 to i32
  %96 = sub i32 %86, %91
  %97 = add i32 %96, %95
  %98 = icmp sgt i32 %97, %45
  br i1 %98, label %199, label %99

99:                                               ; preds = %84
  %100 = add nsw i32 %86, %85
  %101 = icmp sgt i32 %100, 1020
  br label %199

102:                                              ; preds = %27
  %103 = bitcast [2 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %103) #6
  %104 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 0
  store i32 12, i32* %104, align 4
  %105 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 1
  %106 = load i64, i64* %5, align 8
  %107 = add i64 %106, 3
  %108 = inttoptr i64 %107 to i8*
  %109 = load atomic i8, i8* %108 monotonic, align 1
  %110 = zext i8 %109 to i32
  %111 = add i64 %106, 4
  %112 = inttoptr i64 %111 to i8*
  %113 = load atomic i8, i8* %112 monotonic, align 1
  %114 = zext i8 %113 to i32
  %115 = sub nsw i32 %110, %114
  store i32 %115, i32* %105, align 4
  %116 = icmp sgt i32 %115, 12
  %117 = load i32, i32* %104, align 4
  %118 = select i1 %116, i32 %115, i32 %117
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %103) #6
  %119 = and i64 %106, -4294967296
  %120 = add i64 %106, 23
  %121 = inttoptr i64 %120 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  %124 = or i64 %119, %123
  %125 = add i64 %106, 11
  %126 = inttoptr i64 %125 to i32*
  %127 = load atomic i32, i32* %126 acquire, align 4
  %128 = lshr i32 %127, 10
  %129 = and i32 %128, 1023
  %130 = zext i32 %129 to i64
  %131 = icmp eq i32 %129, 0
  br i1 %131, label %185, label %132

132:                                              ; preds = %102
  %133 = and i64 %130, 1
  %134 = icmp eq i32 %129, 1
  br i1 %134, label %172, label %135

135:                                              ; preds = %132
  %136 = sub nsw i64 %130, %133
  br label %137

137:                                              ; preds = %137, %135
  %138 = phi i32 [ 0, %135 ], [ %163, %137 ]
  %139 = phi i64 [ 0, %135 ], [ %164, %137 ]
  %140 = phi i64 [ %136, %135 ], [ %165, %137 ]
  %141 = mul nuw nsw i64 %139, 51539607552
  %142 = add nuw nsw i64 %141, 68719476736
  %143 = lshr exact i64 %142, 32
  %144 = or i64 %143, 3
  %145 = add i64 %144, %124
  %146 = inttoptr i64 %145 to i32*
  %147 = load atomic i32, i32* %146 monotonic, align 4
  %148 = lshr i32 %147, 2
  %149 = and i32 %148, 1
  %150 = xor i32 %149, 1
  %151 = add nuw nsw i32 %150, %138
  %152 = or i64 %139, 1
  %153 = mul nuw nsw i64 %152, 51539607552
  %154 = add nuw nsw i64 %153, 68719476736
  %155 = lshr exact i64 %154, 32
  %156 = or i64 %155, 3
  %157 = add i64 %156, %124
  %158 = inttoptr i64 %157 to i32*
  %159 = load atomic i32, i32* %158 monotonic, align 4
  %160 = lshr i32 %159, 2
  %161 = and i32 %160, 1
  %162 = xor i32 %161, 1
  %163 = add nuw nsw i32 %162, %151
  %164 = add nuw nsw i64 %139, 2
  %165 = add i64 %140, -2
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %137

167:                                              ; preds = %137
  %168 = mul i64 %164, 51539607552
  %169 = add i64 %168, 68719476736
  %170 = lshr exact i64 %169, 32
  %171 = or i64 %170, 3
  br label %172

172:                                              ; preds = %167, %132
  %173 = phi i32 [ undef, %132 ], [ %163, %167 ]
  %174 = phi i32 [ 0, %132 ], [ %163, %167 ]
  %175 = phi i64 [ 19, %132 ], [ %171, %167 ]
  %176 = icmp eq i64 %133, 0
  br i1 %176, label %185, label %177

177:                                              ; preds = %172
  %178 = add i64 %175, %124
  %179 = inttoptr i64 %178 to i32*
  %180 = load atomic i32, i32* %179 monotonic, align 4
  %181 = lshr i32 %180, 2
  %182 = and i32 %181, 1
  %183 = xor i32 %182, 1
  %184 = add nuw nsw i32 %183, %174
  br label %185

185:                                              ; preds = %177, %172, %102
  %186 = phi i32 [ 0, %102 ], [ %173, %172 ], [ %184, %177 ]
  %187 = load i64, i64* %5, align 8
  %188 = add i64 %187, 3
  %189 = inttoptr i64 %188 to i8*
  %190 = load atomic i8, i8* %189 monotonic, align 1
  %191 = zext i8 %190 to i32
  %192 = add i64 %187, 4
  %193 = inttoptr i64 %192 to i8*
  %194 = load atomic i8, i8* %193 monotonic, align 1
  %195 = zext i8 %194 to i32
  %196 = sub i32 %186, %191
  %197 = add i32 %196, %195
  %198 = icmp sgt i32 %197, %118
  br label %199

199:                                              ; preds = %21, %84, %99, %18, %185
  %200 = phi i1 [ %198, %185 ], [ false, %18 ], [ false, %21 ], [ true, %84 ], [ %101, %99 ]
  ret i1 %200
}

declare void @_ZN2v88internal10JSFunction13SetInitialMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_3MapEEENS4_INS0_10HeapObjectEEE(%"class.v8::internal::Isolate"*, i64*, i64*, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map28TransitionToAccessorPropertyEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_4NameEEENS0_13InternalIndexENS4_INS0_6ObjectEEESA_NS0_18PropertyAttributesE(%"class.v8::internal::Isolate"*, i64*, i64*, i64, i64*, i64*, i32) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.v8::internal::MapUpdater", align 8
  %9 = alloca %"class.v8::internal::RuntimeCallTimerScope", align 8
  %10 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %11 = alloca %"class.v8::internal::Handle<v8::internal::AccessorPair>::ObjectRef", align 8
  %12 = alloca %"class.v8::internal::Descriptor", align 8
  %13 = bitcast %"class.v8::internal::RuntimeCallTimerScope"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %13) #6
  %14 = load i64, i64* %1, align 8
  %15 = add i64 %14, 11
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 acquire, align 4
  %18 = and i32 %17, 1048576
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %94

20:                                               ; preds = %7
  %21 = add i64 %14, 7
  %22 = inttoptr i64 %21 to i16*
  %23 = load atomic i16, i16* %22 monotonic, align 2
  %24 = icmp eq i16 %23, 1057
  br i1 %24, label %25, label %95

25:                                               ; preds = %20
  %26 = load atomic i32, i32* %16 acquire, align 4
  %27 = and i32 %26, 1047552
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %95, label %29

29:                                               ; preds = %25
  %30 = and i64 %14, -4294967296
  %31 = add i64 %14, 19
  %32 = inttoptr i64 %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %30, %34
  %36 = and i64 %34, 1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %29
  %39 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br label %66

40:                                               ; preds = %29
  %41 = add i64 %35, -1
  %42 = inttoptr i64 %41 to i32*
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %45 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %44, null
  br i1 %45, label %52, label %46

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %44, i64 0, i32 0, i32 1
  %48 = load i8, i8* %47, align 8, !range !3
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %44, i64 0, i32 1, i64 0
  br label %60

52:                                               ; preds = %46, %40
  %53 = and i64 %14, -262144
  %54 = or i64 %53, 16
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55, align 16
  %57 = add i64 %56, -41416
  %58 = inttoptr i64 %57 to %"class.v8::internal::Isolate"*
  %59 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %58, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %60

60:                                               ; preds = %52, %50
  %61 = phi i64* [ %59, %52 ], [ %51, %50 ]
  %62 = getelementptr inbounds i64, i64* %61, i64 10
  %63 = load i64, i64* %62, align 8
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %43, %64
  br i1 %65, label %87, label %66

66:                                               ; preds = %60, %38
  %67 = phi %"class.v8::internal::SoleReadOnlyHeap"* [ %39, %38 ], [ %44, %60 ]
  %68 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %67, null
  br i1 %68, label %75, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %67, i64 0, i32 0, i32 1
  %71 = load i8, i8* %70, align 8, !range !3
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %75, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %67, i64 0, i32 1, i64 0
  br label %83

75:                                               ; preds = %69, %66
  %76 = and i64 %14, -262144
  %77 = or i64 %76, 16
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78, align 16
  %80 = add i64 %79, -41416
  %81 = inttoptr i64 %80 to %"class.v8::internal::Isolate"*
  %82 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %81, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %83

83:                                               ; preds = %75, %73
  %84 = phi i64* [ %82, %75 ], [ %74, %73 ]
  %85 = getelementptr inbounds i64, i64* %84, i64 4
  %86 = load i64, i64* %85, align 8
  br label %87

87:                                               ; preds = %60, %83
  %88 = phi i64 [ %86, %83 ], [ %35, %60 ]
  %89 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 4
  %90 = load i64, i64* %89, align 8
  %91 = trunc i64 %88 to i32
  %92 = trunc i64 %90 to i32
  %93 = icmp eq i32 %91, %92
  br i1 %93, label %94, label %95

94:                                               ; preds = %7, %87
  br label %95

95:                                               ; preds = %20, %25, %87, %94
  %96 = phi i32 [ 203, %94 ], [ 179, %87 ], [ 179, %25 ], [ 179, %20 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 40, i1 false) #6
  %97 = load atomic i32, i32* getelementptr inbounds (%"struct.std::__1::atomic.1194", %"struct.std::__1::atomic.1194"* @_ZN2v88internal12TracingFlags13runtime_statsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %105, label %99, !prof !2

99:                                               ; preds = %95
  %100 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %9, i64 0, i32 0
  %101 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %9, i64 0, i32 1
  %102 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 14, i32 0
  %103 = load %"class.v8::internal::Counters"*, %"class.v8::internal::Counters"** %102, align 8
  %104 = getelementptr inbounds %"class.v8::internal::Counters", %"class.v8::internal::Counters"* %103, i64 0, i32 757
  store %"class.v8::internal::RuntimeCallStats"* %104, %"class.v8::internal::RuntimeCallStats"** %100, align 8
  call void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"* %104, %"class.v8::internal::RuntimeCallTimer"* %101, i32 %96) #6
  br label %105

105:                                              ; preds = %95, %99
  %106 = load i64, i64* %1, align 8
  %107 = add i64 %106, 11
  %108 = inttoptr i64 %107 to i32*
  %109 = load atomic i32, i32* %108 acquire, align 4
  %110 = and i32 %109, 16777216
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %115, label %112

112:                                              ; preds = %105
  %113 = bitcast %"class.v8::internal::MapUpdater"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %113) #6
  call void @_ZN2v88internal10MapUpdaterC1EPNS0_7IsolateENS0_6HandleINS0_3MapEEE(%"class.v8::internal::MapUpdater"* nonnull %8, %"class.v8::internal::Isolate"* %0, i64* %1) #6
  %114 = call i64* @_ZN2v88internal10MapUpdater6UpdateEv(%"class.v8::internal::MapUpdater"* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %113) #6
  br label %115

115:                                              ; preds = %105, %112
  %116 = phi i64* [ %114, %112 ], [ %1, %105 ]
  %117 = load i64, i64* %116, align 8
  %118 = add i64 %117, 11
  %119 = inttoptr i64 %118 to i32*
  %120 = load atomic i32, i32* %119 monotonic, align 4
  %121 = and i32 %120, 2097152
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %552

123:                                              ; preds = %115
  %124 = load atomic i32, i32* %119 acquire, align 4
  %125 = lshr i32 %124, 20
  %126 = and i32 %125, 1
  %127 = bitcast %"class.v8::internal::TransitionsAccessor"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %127) #6
  %128 = ptrtoint i64* %116 to i64
  %129 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %129, align 8
  %130 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 1
  %131 = bitcast %"class.v8::internal::Handle.1140"* %130 to i64*
  store i64 %128, i64* %131, align 8
  %132 = load i64, i64* %116, align 8
  %133 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %132, i64* %133, align 8
  %134 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %134, align 8
  %135 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 5
  store i8 0, i8* %135, align 4
  %136 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %137 = load i64, i64* %136, align 8
  %138 = add i64 %132, 35
  %139 = inttoptr i64 %138 to i32*
  %140 = load atomic i32, i32* %139 acquire, align 4
  %141 = and i64 %137, 4294967295
  %142 = icmp eq i64 %141, 0
  call void @llvm.assume(i1 %142) #6
  %143 = zext i32 %140 to i64
  %144 = or i64 %137, %143
  store i64 %144, i64* %134, align 8
  %145 = and i64 %143, 1
  %146 = icmp eq i64 %145, 0
  %147 = icmp eq i32 %140, 3
  %148 = or i1 %147, %146
  br i1 %148, label %149, label %151

149:                                              ; preds = %123
  %150 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  store i32 1, i32* %150, align 8
  br label %179

151:                                              ; preds = %123
  %152 = and i64 %143, 3
  switch i64 %152, label %178 [
    i64 3, label %153
    i64 1, label %155
  ]

153:                                              ; preds = %151
  %154 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  store i32 3, i32* %154, align 8
  br label %179

155:                                              ; preds = %151
  %156 = add i64 %144, -1
  %157 = inttoptr i64 %156 to i32*
  %158 = load atomic i32, i32* %157 monotonic, align 4
  %159 = zext i32 %158 to i64
  %160 = or i64 %137, %159
  %161 = add i64 %160, 7
  %162 = inttoptr i64 %161 to i16*
  %163 = load atomic i16, i16* %162 monotonic, align 2
  %164 = icmp eq i16 %163, 160
  br i1 %164, label %165, label %167

165:                                              ; preds = %155
  %166 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  store i32 4, i32* %166, align 8
  br label %179

167:                                              ; preds = %155
  %168 = load atomic i32, i32* %157 monotonic, align 4
  %169 = zext i32 %168 to i64
  %170 = or i64 %137, %169
  %171 = add i64 %170, 7
  %172 = inttoptr i64 %171 to i16*
  %173 = load atomic i16, i16* %172 monotonic, align 2
  %174 = icmp eq i16 %173, 110
  %175 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %10, i64 0, i32 4
  br i1 %174, label %176, label %177

176:                                              ; preds = %167
  store i32 0, i32* %175, align 8
  br label %179

177:                                              ; preds = %167
  store i32 2, i32* %175, align 8
  br label %179

178:                                              ; preds = %151
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

179:                                              ; preds = %149, %153, %165, %176, %177
  %180 = load i64, i64* %2, align 8
  %181 = call i64 @_ZN2v88internal19TransitionsAccessor16SearchTransitionENS0_4NameENS0_12PropertyKindENS0_18PropertyAttributesE(%"class.v8::internal::TransitionsAccessor"* nonnull %10, i64 %180, i32 1, i32 %6) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %127) #6
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %292, label %184

184:                                              ; preds = %179
  %185 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %186 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %185, align 8
  %187 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %186, null
  br i1 %187, label %191, label %188

188:                                              ; preds = %184
  %189 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %186, i64 %181) #6
  %190 = load i64, i64* %189, align 8
  br label %204

191:                                              ; preds = %184
  %192 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %193 = load i64*, i64** %192, align 8
  %194 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %195 = load i64*, i64** %194, align 8
  %196 = icmp eq i64* %193, %195
  br i1 %196, label %197, label %199

197:                                              ; preds = %191
  %198 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %199

199:                                              ; preds = %197, %191
  %200 = phi i64* [ %198, %197 ], [ %193, %191 ]
  %201 = ptrtoint i64* %200 to i64
  %202 = add i64 %201, 8
  %203 = inttoptr i64 %202 to i64*
  store i64* %203, i64** %192, align 8
  store i64 %181, i64* %200, align 8
  br label %204

204:                                              ; preds = %188, %199
  %205 = phi i64 [ %190, %188 ], [ %181, %199 ]
  %206 = phi i64* [ %189, %188 ], [ %200, %199 ]
  %207 = load i64, i64* %136, align 8
  %208 = add i64 %205, 23
  %209 = inttoptr i64 %208 to i32*
  %210 = load i32, i32* %209, align 4
  %211 = and i64 %207, 4294967295
  %212 = icmp eq i64 %211, 0
  call void @llvm.assume(i1 %212) #6
  %213 = zext i32 %210 to i64
  %214 = or i64 %207, %213
  %215 = add i64 %205, 11
  %216 = inttoptr i64 %215 to i32*
  %217 = load atomic i32, i32* %216 acquire, align 4
  %218 = lshr i32 %217, 10
  %219 = and i32 %218, 1023
  %220 = add nsw i32 %219, -1
  %221 = sext i32 %220 to i64
  %222 = mul nsw i64 %221, 51539607552
  %223 = add nsw i64 %222, 68719476736
  %224 = ashr exact i64 %223, 32
  %225 = add i64 %214, 7
  %226 = add i64 %225, %224
  %227 = inttoptr i64 %226 to i32*
  %228 = load atomic i32, i32* %227 monotonic, align 4
  %229 = zext i32 %228 to i64
  %230 = or i64 %207, %229
  %231 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %185, align 8
  %232 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %231, null
  br i1 %232, label %236, label %233

233:                                              ; preds = %204
  %234 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %231, i64 %230) #6
  %235 = load i64, i64* %234, align 8
  br label %249

236:                                              ; preds = %204
  %237 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %238 = load i64*, i64** %237, align 8
  %239 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %240 = load i64*, i64** %239, align 8
  %241 = icmp eq i64* %238, %240
  br i1 %241, label %242, label %244

242:                                              ; preds = %236
  %243 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %244

244:                                              ; preds = %242, %236
  %245 = phi i64* [ %243, %242 ], [ %238, %236 ]
  %246 = ptrtoint i64* %245 to i64
  %247 = add i64 %246, 8
  %248 = inttoptr i64 %247 to i64*
  store i64* %248, i64** %237, align 8
  store i64 %230, i64* %245, align 8
  br label %249

249:                                              ; preds = %233, %244
  %250 = phi i64 [ %235, %233 ], [ %230, %244 ]
  %251 = and i64 %250, 1
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %264, label %253

253:                                              ; preds = %249
  %254 = and i64 %250, -4294967296
  %255 = add i64 %250, -1
  %256 = inttoptr i64 %255 to i32*
  %257 = load atomic i32, i32* %256 monotonic, align 4
  %258 = zext i32 %257 to i64
  %259 = or i64 %254, %258
  %260 = add i64 %259, 7
  %261 = inttoptr i64 %260 to i16*
  %262 = load atomic i16, i16* %261 monotonic, align 2
  %263 = icmp eq i16 %262, 87
  br i1 %263, label %271, label %264

264:                                              ; preds = %249, %253
  %265 = load i64, i64* %116, align 8
  %266 = add i64 %265, 10
  %267 = inttoptr i64 %266 to i8*
  %268 = load i8, i8* %267, align 1
  %269 = lshr i8 %268, 2
  %270 = call i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"* %0, i64* %116, i8 zeroext %269, i32 %126, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i64 0, i64 0)) #6
  br label %552

271:                                              ; preds = %253
  %272 = load i64, i64* %4, align 8
  %273 = add i64 %250, 3
  %274 = inttoptr i64 %273 to i32*
  %275 = load i32, i32* %274, align 4
  %276 = trunc i64 %272 to i32
  %277 = icmp eq i32 %275, %276
  br i1 %277, label %278, label %285

278:                                              ; preds = %271
  %279 = load i64, i64* %5, align 8
  %280 = add i64 %250, 7
  %281 = inttoptr i64 %280 to i32*
  %282 = load i32, i32* %281, align 4
  %283 = trunc i64 %279 to i32
  %284 = icmp eq i32 %282, %283
  br i1 %284, label %552, label %285

285:                                              ; preds = %271, %278
  %286 = load i64, i64* %116, align 8
  %287 = add i64 %286, 10
  %288 = inttoptr i64 %287 to i8*
  %289 = load i8, i8* %288, align 1
  %290 = lshr i8 %289, 2
  %291 = call i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"* %0, i64* %116, i8 zeroext %290, i32 %126, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0)) #6
  br label %552

292:                                              ; preds = %179
  %293 = load i64, i64* %116, align 8
  %294 = load i64, i64* %136, align 8
  %295 = add i64 %293, 23
  %296 = inttoptr i64 %295 to i32*
  %297 = load i32, i32* %296, align 4
  %298 = and i64 %294, 4294967295
  %299 = icmp eq i64 %298, 0
  call void @llvm.assume(i1 %299) #6
  %300 = zext i32 %297 to i64
  %301 = or i64 %294, %300
  %302 = icmp eq i64 %3, -1
  %303 = add i64 %293, 11
  %304 = inttoptr i64 %303 to i32*
  %305 = load atomic i32, i32* %304 acquire, align 4
  %306 = lshr i32 %305, 10
  %307 = and i32 %306, 1023
  br i1 %302, label %441, label %308

308:                                              ; preds = %292
  %309 = add nsw i32 %307, -1
  %310 = sext i32 %309 to i64
  %311 = icmp eq i64 %310, %3
  br i1 %311, label %319, label %312

312:                                              ; preds = %308
  %313 = load i64, i64* %116, align 8
  %314 = add i64 %313, 10
  %315 = inttoptr i64 %314 to i8*
  %316 = load i8, i8* %315, align 1
  %317 = lshr i8 %316, 2
  %318 = call i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"* %0, i64* %116, i8 zeroext %317, i32 %126, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i64 0, i64 0)) #6
  br label %552

319:                                              ; preds = %308
  %320 = mul i64 %3, 51539607552
  %321 = add i64 %320, 68719476736
  %322 = ashr exact i64 %321, 32
  %323 = or i64 %322, 3
  %324 = add i64 %301, %323
  %325 = inttoptr i64 %324 to i32*
  %326 = load atomic i32, i32* %325 monotonic, align 4
  %327 = and i32 %326, 2
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %329, label %336

329:                                              ; preds = %319
  %330 = load i64, i64* %116, align 8
  %331 = add i64 %330, 10
  %332 = inttoptr i64 %331 to i8*
  %333 = load i8, i8* %332, align 1
  %334 = lshr i8 %333, 2
  %335 = call i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"* %0, i64* %116, i8 zeroext %334, i32 %126, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i64 0, i64 0)) #6
  br label %552

336:                                              ; preds = %319
  %337 = lshr i32 %326, 4
  %338 = and i32 %337, 7
  %339 = icmp eq i32 %338, %6
  br i1 %339, label %347, label %340

340:                                              ; preds = %336
  %341 = load i64, i64* %116, align 8
  %342 = add i64 %341, 10
  %343 = inttoptr i64 %342 to i8*
  %344 = load i8, i8* %343, align 1
  %345 = lshr i8 %344, 2
  %346 = call i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"* %0, i64* %116, i8 zeroext %345, i32 %126, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #6
  br label %552

347:                                              ; preds = %336
  %348 = add nsw i64 %322, 7
  %349 = add i64 %348, %301
  %350 = inttoptr i64 %349 to i32*
  %351 = load atomic i32, i32* %350 monotonic, align 4
  %352 = zext i32 %351 to i64
  %353 = or i64 %294, %352
  %354 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %355 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %354, align 8
  %356 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %355, null
  br i1 %356, label %360, label %357

357:                                              ; preds = %347
  %358 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %355, i64 %353) #6
  %359 = load i64, i64* %358, align 8
  br label %373

360:                                              ; preds = %347
  %361 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %362 = load i64*, i64** %361, align 8
  %363 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %364 = load i64*, i64** %363, align 8
  %365 = icmp eq i64* %362, %364
  br i1 %365, label %366, label %368

366:                                              ; preds = %360
  %367 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %368

368:                                              ; preds = %366, %360
  %369 = phi i64* [ %367, %366 ], [ %362, %360 ]
  %370 = ptrtoint i64* %369 to i64
  %371 = add i64 %370, 8
  %372 = inttoptr i64 %371 to i64*
  store i64* %372, i64** %361, align 8
  store i64 %353, i64* %369, align 8
  br label %373

373:                                              ; preds = %357, %368
  %374 = phi i64 [ %359, %357 ], [ %353, %368 ]
  %375 = phi i64* [ %358, %357 ], [ %369, %368 ]
  %376 = and i64 %374, 1
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %389, label %378

378:                                              ; preds = %373
  %379 = and i64 %374, -4294967296
  %380 = add i64 %374, -1
  %381 = inttoptr i64 %380 to i32*
  %382 = load atomic i32, i32* %381 monotonic, align 4
  %383 = zext i32 %382 to i64
  %384 = or i64 %379, %383
  %385 = add i64 %384, 7
  %386 = inttoptr i64 %385 to i16*
  %387 = load atomic i16, i16* %386 monotonic, align 2
  %388 = icmp eq i16 %387, 87
  br i1 %388, label %396, label %389

389:                                              ; preds = %373, %378
  %390 = load i64, i64* %116, align 8
  %391 = add i64 %390, 10
  %392 = inttoptr i64 %391 to i8*
  %393 = load i8, i8* %392, align 1
  %394 = lshr i8 %393, 2
  %395 = call i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"* %0, i64* %116, i8 zeroext %394, i32 %126, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17, i64 0, i64 0)) #6
  br label %552

396:                                              ; preds = %378
  %397 = load i64, i64* %4, align 8
  %398 = load i64, i64* %5, align 8
  %399 = add i64 %374, 3
  %400 = inttoptr i64 %399 to i32*
  %401 = load i32, i32* %400, align 4
  %402 = trunc i64 %397 to i32
  %403 = icmp eq i32 %401, %402
  br i1 %403, label %404, label %410

404:                                              ; preds = %396
  %405 = add i64 %374, 7
  %406 = inttoptr i64 %405 to i32*
  %407 = load i32, i32* %406, align 4
  %408 = trunc i64 %398 to i32
  %409 = icmp eq i32 %407, %408
  br i1 %409, label %552, label %410

410:                                              ; preds = %396, %404
  %411 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 6
  %412 = load i64, i64* %411, align 8
  %413 = trunc i64 %412 to i32
  %414 = icmp eq i32 %402, %413
  br i1 %414, label %419, label %415

415:                                              ; preds = %410
  %416 = icmp ne i32 %401, %413
  %417 = icmp ne i32 %401, %402
  %418 = and i1 %417, %416
  br label %419

419:                                              ; preds = %415, %410
  %420 = phi i1 [ false, %410 ], [ %418, %415 ]
  %421 = trunc i64 %398 to i32
  %422 = icmp eq i32 %421, %413
  br i1 %422, label %428, label %423

423:                                              ; preds = %419
  %424 = add i64 %374, 7
  %425 = inttoptr i64 %424 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = icmp eq i32 %426, %413
  br i1 %427, label %428, label %429

428:                                              ; preds = %423, %419
  br i1 %420, label %432, label %439

429:                                              ; preds = %423
  %430 = icmp ne i32 %426, %421
  %431 = or i1 %420, %430
  br i1 %431, label %432, label %439

432:                                              ; preds = %429, %428
  %433 = load i64, i64* %116, align 8
  %434 = add i64 %433, 10
  %435 = inttoptr i64 %434 to i8*
  %436 = load i8, i8* %435, align 1
  %437 = lshr i8 %436, 2
  %438 = call i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"* %0, i64* %116, i8 zeroext %437, i32 %126, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.18, i64 0, i64 0)) #6
  br label %552

439:                                              ; preds = %429, %428
  %440 = call i64* @_ZN2v88internal12AccessorPair4CopyEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %0, i64* %375) #6
  br label %536

441:                                              ; preds = %292
  %442 = icmp ugt i32 %307, 1019
  br i1 %442, label %526, label %443

443:                                              ; preds = %441
  %444 = load i64, i64* %116, align 8
  %445 = add i64 %444, 5
  %446 = inttoptr i64 %445 to i8*
  %447 = load atomic i8, i8* %446 monotonic, align 1
  %448 = zext i8 %447 to i32
  %449 = icmp ugt i8 %447, 2
  br i1 %449, label %450, label %456

450:                                              ; preds = %443
  %451 = add i64 %444, 3
  %452 = inttoptr i64 %451 to i8*
  %453 = load atomic i8, i8* %452 monotonic, align 1
  %454 = zext i8 %453 to i32
  %455 = sub nsw i32 %454, %448
  br label %456

456:                                              ; preds = %450, %443
  %457 = phi i32 [ %455, %450 ], [ %448, %443 ]
  %458 = icmp eq i32 %457, 0
  br i1 %458, label %459, label %533

459:                                              ; preds = %456
  %460 = add i64 %444, 11
  %461 = inttoptr i64 %460 to i32*
  %462 = load atomic i32, i32* %461 acquire, align 4
  %463 = and i32 %462, 1048576
  %464 = icmp eq i32 %463, 0
  br i1 %464, label %465, label %533

465:                                              ; preds = %459
  %466 = add i64 %444, 3
  %467 = inttoptr i64 %466 to i8*
  %468 = load atomic i8, i8* %467 monotonic, align 1
  %469 = zext i8 %468 to i32
  %470 = add i64 %444, 4
  %471 = inttoptr i64 %470 to i8*
  %472 = load atomic i8, i8* %471 monotonic, align 1
  %473 = zext i8 %472 to i32
  %474 = sub nsw i32 %469, %473
  %475 = icmp sgt i32 %474, 128
  %476 = select i1 %475, i32 %474, i32 128
  %477 = and i64 %444, -4294967296
  %478 = add i64 %444, 23
  %479 = inttoptr i64 %478 to i32*
  %480 = load i32, i32* %479, align 4
  %481 = zext i32 %480 to i64
  %482 = or i64 %477, %481
  %483 = load atomic i32, i32* %461 acquire, align 4
  %484 = lshr i32 %483, 10
  %485 = and i32 %484, 1023
  %486 = zext i32 %485 to i64
  %487 = icmp eq i32 %485, 0
  br i1 %487, label %513, label %488

488:                                              ; preds = %465, %508
  %489 = phi i32 [ %510, %508 ], [ 0, %465 ]
  %490 = phi i32 [ %509, %508 ], [ 0, %465 ]
  %491 = phi i64 [ %511, %508 ], [ 0, %465 ]
  %492 = mul nuw nsw i64 %491, 51539607552
  %493 = add nuw nsw i64 %492, 68719476736
  %494 = lshr exact i64 %493, 32
  %495 = or i64 %494, 3
  %496 = add i64 %495, %482
  %497 = inttoptr i64 %496 to i32*
  %498 = load atomic i32, i32* %497 monotonic, align 4
  %499 = and i32 %498, 4
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %501, label %508

501:                                              ; preds = %488
  %502 = and i32 %498, 8
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %504, label %506

504:                                              ; preds = %501
  %505 = add nsw i32 %489, 1
  br label %508

506:                                              ; preds = %501
  %507 = add nsw i32 %490, 1
  br label %508

508:                                              ; preds = %506, %504, %488
  %509 = phi i32 [ %507, %506 ], [ %490, %504 ], [ %490, %488 ]
  %510 = phi i32 [ %489, %506 ], [ %505, %504 ], [ %489, %488 ]
  %511 = add nuw nsw i64 %491, 1
  %512 = icmp eq i64 %511, %486
  br i1 %512, label %513, label %488

513:                                              ; preds = %508, %465
  %514 = phi i32 [ 0, %465 ], [ %509, %508 ]
  %515 = phi i32 [ 0, %465 ], [ %510, %508 ]
  %516 = load atomic i8, i8* %467 monotonic, align 1
  %517 = zext i8 %516 to i32
  %518 = load atomic i8, i8* %471 monotonic, align 1
  %519 = zext i8 %518 to i32
  %520 = sub i32 %515, %517
  %521 = add i32 %520, %519
  %522 = icmp sgt i32 %521, %476
  %523 = add nsw i32 %515, %514
  %524 = icmp sgt i32 %523, 1020
  %525 = or i1 %524, %522
  br i1 %525, label %526, label %533

526:                                              ; preds = %513, %441
  %527 = load i64, i64* %116, align 8
  %528 = add i64 %527, 10
  %529 = inttoptr i64 %528 to i8*
  %530 = load i8, i8* %529, align 1
  %531 = lshr i8 %530, 2
  %532 = call i64* @_ZN2v88internal3Map9NormalizeEPNS0_7IsolateENS0_6HandleIS1_EENS0_12ElementsKindENS0_25PropertyNormalizationModeEPKc(%"class.v8::internal::Isolate"* %0, i64* %116, i8 zeroext %531, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0)) #6
  br label %552

533:                                              ; preds = %513, %459, %456
  %534 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %535 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE15NewAccessorPairEv(%"class.v8::internal::FactoryBase"* %534) #6
  br label %536

536:                                              ; preds = %439, %533
  %537 = phi i64* [ %440, %439 ], [ %535, %533 ]
  %538 = bitcast %"class.v8::internal::Handle<v8::internal::AccessorPair>::ObjectRef"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %538) #6
  %539 = load i64, i64* %537, align 8
  %540 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::AccessorPair>::ObjectRef", %"class.v8::internal::Handle<v8::internal::AccessorPair>::ObjectRef"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %539, i64* %540, align 8
  %541 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::AccessorPair>::ObjectRef", %"class.v8::internal::Handle<v8::internal::AccessorPair>::ObjectRef"* %11, i64 0, i32 0
  %542 = load i64, i64* %4, align 8
  %543 = load i64, i64* %5, align 8
  call void @_ZN2v88internal12AccessorPair13SetComponentsENS0_6ObjectES2_(%"class.v8::internal::AccessorPair"* nonnull %541, i64 %542, i64 %543)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %538) #6
  %544 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 11
  %545 = load %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::Bootstrapper"** %544, align 8
  %546 = getelementptr inbounds %"class.v8::internal::Bootstrapper", %"class.v8::internal::Bootstrapper"* %545, i64 0, i32 1
  %547 = load i32, i32* %546, align 8
  %548 = icmp ne i32 %547, 0
  %549 = zext i1 %548 to i32
  %550 = bitcast %"class.v8::internal::Descriptor"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %550) #6
  call void @_ZN2v88internal10Descriptor16AccessorConstantENS0_6HandleINS0_4NameEEENS2_INS0_6ObjectEEENS0_18PropertyAttributesE(%"class.v8::internal::Descriptor"* nonnull sret %12, i64* %2, i64* %537, i32 %6) #6
  %551 = call i64* @_ZN2v88internal3Map20CopyInsertDescriptorEPNS0_7IsolateENS0_6HandleIS1_EEPNS0_10DescriptorENS0_14TransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %116, %"class.v8::internal::Descriptor"* nonnull %12, i32 %549)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %550) #6
  br label %552

552:                                              ; preds = %115, %404, %432, %389, %340, %329, %285, %278, %264, %536, %526, %312
  %553 = phi i64* [ %116, %115 ], [ %270, %264 ], [ %291, %285 ], [ %206, %278 ], [ %318, %312 ], [ %551, %536 ], [ %532, %526 ], [ %116, %404 ], [ %438, %432 ], [ %395, %389 ], [ %346, %340 ], [ %335, %329 ]
  %554 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %9, i64 0, i32 0
  %555 = load %"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallStats"** %554, align 8
  %556 = icmp eq %"class.v8::internal::RuntimeCallStats"* %555, null
  br i1 %556, label %559, label %557, !prof !2

557:                                              ; preds = %552
  %558 = getelementptr inbounds %"class.v8::internal::RuntimeCallTimerScope", %"class.v8::internal::RuntimeCallTimerScope"* %9, i64 0, i32 1
  call void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"* nonnull %555, %"class.v8::internal::RuntimeCallTimer"* %558) #6
  br label %559

559:                                              ; preds = %552, %557
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %13) #6
  ret i64* %553
}

declare i64* @_ZN2v88internal12AccessorPair4CopyEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #3

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE15NewAccessorPairEv(%"class.v8::internal::FactoryBase"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal12AccessorPair13SetComponentsENS0_6ObjectES2_(%"class.v8::internal::AccessorPair"*, i64, i64) local_unnamed_addr #5 comdat align 2 {
  %4 = and i64 %1, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %3
  %7 = trunc i64 %1 to i32
  br label %32

8:                                                ; preds = %3
  %9 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %10 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %9, null
  br i1 %10, label %17, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %9, i64 0, i32 0, i32 1
  %13 = load i8, i8* %12, align 8, !range !3
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %9, i64 0, i32 1, i64 0
  br label %25

17:                                               ; preds = %11, %8
  %18 = and i64 %1, -262144
  %19 = or i64 %18, 16
  %20 = inttoptr i64 %19 to i64*
  %21 = load i64, i64* %20, align 16
  %22 = add i64 %21, -41416
  %23 = inttoptr i64 %22 to %"class.v8::internal::Isolate"*
  %24 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %25

25:                                               ; preds = %15, %17
  %26 = phi i64* [ %24, %17 ], [ %16, %15 ]
  %27 = getelementptr inbounds i64, i64* %26, i64 6
  %28 = load i64, i64* %27, align 8
  %29 = trunc i64 %1 to i32
  %30 = trunc i64 %28 to i32
  %31 = icmp eq i32 %29, %30
  br i1 %31, label %70, label %32

32:                                               ; preds = %6, %25
  %33 = phi i32 [ %7, %6 ], [ %29, %25 ]
  %34 = getelementptr inbounds %"class.v8::internal::AccessorPair", %"class.v8::internal::AccessorPair"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, 3
  %37 = inttoptr i64 %36 to i32*
  store atomic volatile i32 %33, i32* %37 monotonic, align 4
  %38 = load i64, i64* %34, align 8
  %39 = add i64 %38, 3
  br i1 %5, label %70, label %40

40:                                               ; preds = %32
  %41 = and i64 %38, -262144
  %42 = or i64 %41, 8
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = and i64 %44, 262144
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %40
  %48 = or i64 %41, 16
  %49 = inttoptr i64 %48 to %"class.v8::internal::Heap"**
  %50 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %49, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %50, i64 %38, i64 %39, i64 %1) #6
  %51 = load i64, i64* %34, align 8
  %52 = add i64 %51, 3
  br label %53

53:                                               ; preds = %47, %40
  %54 = phi i64 [ %52, %47 ], [ %39, %40 ]
  %55 = phi i64 [ %51, %47 ], [ %38, %40 ]
  %56 = and i64 %1, -262144
  %57 = or i64 %56, 8
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = and i64 %59, 24
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %70, label %62

62:                                               ; preds = %53
  %63 = and i64 %55, -262144
  %64 = or i64 %63, 8
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = and i64 %66, 24
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %62
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %55, i64 %54, i64 %1) #6
  br label %70

70:                                               ; preds = %69, %62, %53, %32, %25
  %71 = and i64 %2, 1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %70
  %74 = trunc i64 %2 to i32
  br label %99

75:                                               ; preds = %70
  %76 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %77 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %76, null
  br i1 %77, label %84, label %78

78:                                               ; preds = %75
  %79 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %76, i64 0, i32 0, i32 1
  %80 = load i8, i8* %79, align 8, !range !3
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %84, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %76, i64 0, i32 1, i64 0
  br label %92

84:                                               ; preds = %78, %75
  %85 = and i64 %2, -262144
  %86 = or i64 %85, 16
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87, align 16
  %89 = add i64 %88, -41416
  %90 = inttoptr i64 %89 to %"class.v8::internal::Isolate"*
  %91 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %90, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %92

92:                                               ; preds = %82, %84
  %93 = phi i64* [ %91, %84 ], [ %83, %82 ]
  %94 = getelementptr inbounds i64, i64* %93, i64 6
  %95 = load i64, i64* %94, align 8
  %96 = trunc i64 %2 to i32
  %97 = trunc i64 %95 to i32
  %98 = icmp eq i32 %96, %97
  br i1 %98, label %137, label %99

99:                                               ; preds = %73, %92
  %100 = phi i32 [ %74, %73 ], [ %96, %92 ]
  %101 = getelementptr inbounds %"class.v8::internal::AccessorPair", %"class.v8::internal::AccessorPair"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %102, 7
  %104 = inttoptr i64 %103 to i32*
  store atomic volatile i32 %100, i32* %104 monotonic, align 4
  %105 = load i64, i64* %101, align 8
  %106 = add i64 %105, 7
  br i1 %72, label %137, label %107

107:                                              ; preds = %99
  %108 = and i64 %105, -262144
  %109 = or i64 %108, 8
  %110 = inttoptr i64 %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = and i64 %111, 262144
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %120, label %114

114:                                              ; preds = %107
  %115 = or i64 %108, 16
  %116 = inttoptr i64 %115 to %"class.v8::internal::Heap"**
  %117 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %116, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %117, i64 %105, i64 %106, i64 %2) #6
  %118 = load i64, i64* %101, align 8
  %119 = add i64 %118, 7
  br label %120

120:                                              ; preds = %114, %107
  %121 = phi i64 [ %119, %114 ], [ %106, %107 ]
  %122 = phi i64 [ %118, %114 ], [ %105, %107 ]
  %123 = and i64 %2, -262144
  %124 = or i64 %123, 8
  %125 = inttoptr i64 %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = and i64 %126, 24
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %137, label %129

129:                                              ; preds = %120
  %130 = and i64 %122, -262144
  %131 = or i64 %130, 8
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = and i64 %133, 24
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %137

136:                                              ; preds = %129
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %122, i64 %121, i64 %2) #6
  br label %137

137:                                              ; preds = %136, %129, %120, %99, %92
  ret void
}

declare void @_ZN2v88internal10Descriptor16AccessorConstantENS0_6HandleINS0_4NameEEENS2_INS0_6ObjectEEENS0_18PropertyAttributesE(%"class.v8::internal::Descriptor"* sret, i64*, i64*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map20CopyInsertDescriptorEPNS0_7IsolateENS0_6HandleIS1_EEPNS0_10DescriptorENS0_14TransitionFlagE(%"class.v8::internal::Isolate"*, i64*, %"class.v8::internal::Descriptor"*, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", align 8
  %6 = alloca %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", align 8
  %7 = load i64, i64* %1, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %7, 23
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = and i64 %9, 4294967295
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #6
  %15 = zext i32 %12 to i64
  %16 = or i64 %9, %15
  %17 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %18 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %17, align 8
  %19 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %4
  %21 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %18, i64 %16) #6
  %22 = load i64, i64* %21, align 8
  br label %36

23:                                               ; preds = %4
  %24 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %27 = load i64*, i64** %26, align 8
  %28 = icmp eq i64* %25, %27
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %31

31:                                               ; preds = %29, %23
  %32 = phi i64* [ %30, %29 ], [ %25, %23 ]
  %33 = ptrtoint i64* %32 to i64
  %34 = add i64 %33, 8
  %35 = inttoptr i64 %34 to i64*
  store i64* %35, i64** %24, align 8
  store i64 %16, i64* %32, align 8
  br label %36

36:                                               ; preds = %20, %31
  %37 = phi i64 [ %22, %20 ], [ %16, %31 ]
  %38 = phi i64* [ %21, %20 ], [ %32, %31 ]
  %39 = bitcast %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #6
  %40 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %37, i64* %40, align 8
  %41 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %6, i64 0, i32 0
  %42 = getelementptr inbounds %"class.v8::internal::Descriptor", %"class.v8::internal::Descriptor"* %2, i64 0, i32 0, i32 0, i32 0
  %43 = load i64*, i64** %42, align 8
  %44 = load i64, i64* %43, align 8
  %45 = load i64, i64* %1, align 8
  %46 = add i64 %45, 11
  %47 = inttoptr i64 %46 to i32*
  %48 = load atomic i32, i32* %47 acquire, align 4
  %49 = lshr i32 %48, 10
  %50 = and i32 %49, 1023
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #6
  br label %138

53:                                               ; preds = %36
  %54 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 30
  %55 = load %"class.v8::internal::DescriptorLookupCache"*, %"class.v8::internal::DescriptorLookupCache"** %54, align 8
  %56 = trunc i64 %45 to i32
  %57 = add i64 %44, 3
  %58 = inttoptr i64 %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = xor i32 %59, %56
  %61 = lshr i32 %60, 2
  %62 = and i32 %61, 63
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %"class.v8::internal::DescriptorLookupCache", %"class.v8::internal::DescriptorLookupCache"* %55, i64 0, i32 0, i64 %63, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load i64, i64* %64, align 8
  %66 = trunc i64 %65 to i32
  %67 = icmp eq i32 %66, %56
  br i1 %67, label %68, label %78

68:                                               ; preds = %53
  %69 = getelementptr inbounds %"class.v8::internal::DescriptorLookupCache", %"class.v8::internal::DescriptorLookupCache"* %55, i64 0, i32 0, i64 %63, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = trunc i64 %70 to i32
  %72 = trunc i64 %44 to i32
  %73 = icmp eq i32 %71, %72
  br i1 %73, label %74, label %78

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.v8::internal::DescriptorLookupCache", %"class.v8::internal::DescriptorLookupCache"* %55, i64 0, i32 1, i64 %63
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %76, -2
  br i1 %77, label %78, label %112

78:                                               ; preds = %74, %68, %53
  %79 = icmp ult i32 %50, 9
  br i1 %79, label %80, label %99

80:                                               ; preds = %78
  %81 = load i64, i64* %40, align 8
  %82 = trunc i64 %44 to i32
  %83 = zext i32 %50 to i64
  %84 = add i64 %81, -1
  br label %85

85:                                               ; preds = %94, %80
  %86 = phi i64 [ 0, %80 ], [ %95, %94 ]
  %87 = mul i64 %86, 51539607552
  %88 = add i64 %87, 68719476736
  %89 = ashr exact i64 %88, 32
  %90 = add i64 %84, %89
  %91 = inttoptr i64 %90 to i32*
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = icmp eq i32 %92, %82
  br i1 %93, label %97, label %94

94:                                               ; preds = %85
  %95 = add nuw nsw i64 %86, 1
  %96 = icmp eq i64 %95, %83
  br i1 %96, label %106, label %85

97:                                               ; preds = %85
  %98 = trunc i64 %86 to i32
  br label %106

99:                                               ; preds = %78
  %100 = call i32 @_ZN2v88internal12BinarySearchILNS0_10SearchModeE1ENS0_15DescriptorArrayEEEiPT0_NS0_4NameEiPi(%"class.v8::internal::DescriptorArray"* nonnull %41, i64 %44, i32 %50, i32* null) #6
  %101 = load i32, i32* %58, align 4
  %102 = xor i32 %101, %56
  %103 = lshr i32 %102, 2
  %104 = and i32 %103, 63
  %105 = zext i32 %104 to i64
  br label %106

106:                                              ; preds = %94, %99, %97
  %107 = phi i64 [ %105, %99 ], [ %63, %97 ], [ %63, %94 ]
  %108 = phi i32 [ %100, %99 ], [ %98, %97 ], [ -1, %94 ]
  %109 = getelementptr inbounds %"class.v8::internal::DescriptorLookupCache", %"class.v8::internal::DescriptorLookupCache"* %55, i64 0, i32 0, i64 %107, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %45, i64* %109, align 8
  %110 = getelementptr inbounds %"class.v8::internal::DescriptorLookupCache", %"class.v8::internal::DescriptorLookupCache"* %55, i64 0, i32 0, i64 %107, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %44, i64* %110, align 8
  %111 = getelementptr inbounds %"class.v8::internal::DescriptorLookupCache", %"class.v8::internal::DescriptorLookupCache"* %55, i64 0, i32 1, i64 %107
  store i32 %108, i32* %111, align 4
  br label %112

112:                                              ; preds = %74, %106
  %113 = phi i32 [ %108, %106 ], [ %76, %74 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #6
  %114 = icmp eq i32 %113, -1
  br i1 %114, label %138, label %115

115:                                              ; preds = %112
  %116 = sext i32 %113 to i64
  %117 = load i64*, i64** %42, align 8
  %118 = load i64, i64* %1, align 8
  %119 = add i64 %118, 11
  %120 = inttoptr i64 %119 to i32*
  %121 = load atomic i32, i32* %120 acquire, align 4
  %122 = lshr i32 %121, 10
  %123 = and i32 %122, 1023
  %124 = call i64* @_ZN2v88internal15DescriptorArray8CopyUpToEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %38, i32 %123, i32 0) #6
  %125 = bitcast %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %125) #6
  %126 = load i64, i64* %124, align 8
  %127 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %126, i64* %127, align 8
  %128 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %5, i64 0, i32 0
  call void @_ZN2v88internal15DescriptorArray7ReplaceENS0_13InternalIndexEPNS0_10DescriptorE(%"class.v8::internal::DescriptorArray"* nonnull %128, i64 %116, %"class.v8::internal::Descriptor"* %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %125) #6
  %129 = load i64, i64* %38, align 8
  %130 = add i64 %129, 5
  %131 = inttoptr i64 %130 to i16*
  %132 = load atomic i16, i16* %131 monotonic, align 2
  %133 = sext i16 %132 to i32
  %134 = add nsw i32 %133, -1
  %135 = icmp ne i32 %134, %113
  %136 = zext i1 %135 to i32
  %137 = call i64* @_ZN2v88internal3Map22CopyReplaceDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEENS0_14TransitionFlagENS0_11MaybeHandleINS0_4NameEEEPKcNS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %124, i32 %3, i64* %117, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.21, i64 0, i64 0), i32 %136) #6
  br label %140

138:                                              ; preds = %112, %52
  %139 = call i64* @_ZN2v88internal3Map17CopyAddDescriptorEPNS0_7IsolateENS0_6HandleIS1_EEPNS0_10DescriptorENS0_14TransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, %"class.v8::internal::Descriptor"* %2, i32 %3)
  br label %140

140:                                              ; preds = %138, %115
  %141 = phi i64* [ %137, %115 ], [ %139, %138 ]
  ret i64* %141
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map21CopyReplaceDescriptorEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEEPNS0_10DescriptorENS0_13InternalIndexENS0_14TransitionFlagE(%"class.v8::internal::Isolate"*, i64*, i64*, %"class.v8::internal::Descriptor"*, i64, i32) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", align 8
  %8 = getelementptr inbounds %"class.v8::internal::Descriptor", %"class.v8::internal::Descriptor"* %3, i64 0, i32 0, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = load i64, i64* %1, align 8
  %11 = add i64 %10, 11
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 acquire, align 4
  %14 = lshr i32 %13, 10
  %15 = and i32 %14, 1023
  %16 = tail call i64* @_ZN2v88internal15DescriptorArray8CopyUpToEPNS0_7IsolateENS0_6HandleIS1_EEii(%"class.v8::internal::Isolate"* %0, i64* %2, i32 %15, i32 0) #6
  %17 = bitcast %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  %18 = load i64, i64* %16, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef", %"class.v8::internal::Handle<v8::internal::DescriptorArray>::ObjectRef"* %7, i64 0, i32 0
  call void @_ZN2v88internal15DescriptorArray7ReplaceENS0_13InternalIndexEPNS0_10DescriptorE(%"class.v8::internal::DescriptorArray"* nonnull %20, i64 %4, %"class.v8::internal::Descriptor"* %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  %21 = trunc i64 %4 to i32
  %22 = load i64, i64* %2, align 8
  %23 = add i64 %22, 5
  %24 = inttoptr i64 %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = sext i16 %25 to i32
  %27 = add nsw i32 %26, -1
  %28 = icmp ne i32 %27, %21
  %29 = zext i1 %28 to i32
  %30 = call i64* @_ZN2v88internal3Map22CopyReplaceDescriptorsEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_15DescriptorArrayEEENS0_14TransitionFlagENS0_11MaybeHandleINS0_4NameEEEPKcNS0_20SimpleTransitionFlagE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %16, i32 %5, i64* %9, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.21, i64 0, i64 0), i32 %29)
  ret i64* %30
}

declare void @_ZN2v88internal15DescriptorArray7ReplaceENS0_13InternalIndexEPNS0_10DescriptorE(%"class.v8::internal::DescriptorArray"*, i64, %"class.v8::internal::Descriptor"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal3Map4HashEv(%"class.v8::internal::Map"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 15
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %9, -1
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 2
  %14 = and i32 %13, 65535
  %15 = add i64 %3, 10
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = xor i32 %14, %18
  ret i32 %19
}

declare zeroext i1 @_ZN2v88internal15DescriptorArray11IsEqualUpToES1_i(%"class.v8::internal::DescriptorArray"*, i64, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal3Map28EquivalentToForNormalizationES1_NS0_12ElementsKindENS0_25PropertyNormalizationModeE(%"class.v8::internal::Map"* nocapture readonly, i64, i8 zeroext, i32) local_unnamed_addr #0 align 2 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %4
  %7 = add i64 %1, 3
  %8 = inttoptr i64 %7 to i8*
  %9 = load atomic i8, i8* %8 monotonic, align 1
  %10 = zext i8 %9 to i32
  %11 = add i64 %1, 4
  %12 = inttoptr i64 %11 to i8*
  %13 = load atomic i8, i8* %12 monotonic, align 1
  %14 = zext i8 %13 to i32
  %15 = sub nsw i32 %10, %14
  br label %16

16:                                               ; preds = %4, %6
  %17 = phi i32 [ %15, %6 ], [ 0, %4 ]
  %18 = add i64 %1, 10
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19, align 1
  %21 = and i8 %20, 3
  %22 = shl i8 %2, 2
  %23 = or i8 %21, %22
  %24 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = and i64 %25, -4294967296
  %27 = add i64 %25, 19
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %26, %30
  %32 = and i64 %30, 1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %104, label %34

34:                                               ; preds = %16
  %35 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %36 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %35, null
  %37 = and i64 %25, -262144
  %38 = or i64 %37, 16
  %39 = inttoptr i64 %38 to i64*
  br i1 %36, label %69, label %40

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %35, i64 0, i32 0, i32 1
  %42 = load i8, i8* %41, align 8, !range !3
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %35, i64 0, i32 1, i64 10
  %46 = load i64, i64* %45, align 8
  %47 = trunc i64 %46 to i32
  br label %90

48:                                               ; preds = %40
  %49 = load i64, i64* %39, align 16
  %50 = add i64 %49, -41416
  %51 = inttoptr i64 %50 to %"class.v8::internal::Isolate"*
  %52 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %51, i64 0, i32 0, i32 7, i32 0, i64 10
  %53 = load i64, i64* %52, align 8
  %54 = trunc i64 %53 to i32
  br label %55

55:                                               ; preds = %61, %48
  %56 = phi i64 [ %66, %61 ], [ %31, %48 ]
  %57 = add i64 %56, -1
  %58 = inttoptr i64 %57 to i32*
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = icmp eq i32 %59, %54
  br i1 %60, label %61, label %104

61:                                               ; preds = %55
  %62 = add i64 %56, 19
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i64
  %66 = or i64 %26, %65
  %67 = and i64 %65, 1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %104, label %55

69:                                               ; preds = %34
  %70 = load i64, i64* %39, align 16
  %71 = add i64 %70, -41416
  %72 = inttoptr i64 %71 to %"class.v8::internal::Isolate"*
  %73 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %72, i64 0, i32 0, i32 7, i32 0, i64 10
  %74 = load i64, i64* %73, align 8
  %75 = trunc i64 %74 to i32
  br label %76

76:                                               ; preds = %82, %69
  %77 = phi i64 [ %87, %82 ], [ %31, %69 ]
  %78 = add i64 %77, -1
  %79 = inttoptr i64 %78 to i32*
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = icmp eq i32 %80, %75
  br i1 %81, label %82, label %104

82:                                               ; preds = %76
  %83 = add i64 %77, 19
  %84 = inttoptr i64 %83 to i32*
  %85 = load i32, i32* %84, align 4
  %86 = zext i32 %85 to i64
  %87 = or i64 %26, %86
  %88 = and i64 %86, 1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %104, label %76

90:                                               ; preds = %96, %44
  %91 = phi i64 [ %101, %96 ], [ %31, %44 ]
  %92 = add i64 %91, -1
  %93 = inttoptr i64 %92 to i32*
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = icmp eq i32 %94, %47
  br i1 %95, label %96, label %104

96:                                               ; preds = %90
  %97 = add i64 %91, 19
  %98 = inttoptr i64 %97 to i32*
  %99 = load i32, i32* %98, align 4
  %100 = zext i32 %99 to i64
  %101 = or i64 %26, %100
  %102 = and i64 %100, 1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %90

104:                                              ; preds = %96, %90, %61, %55, %82, %76, %16
  %105 = phi i64 [ %31, %16 ], [ %77, %76 ], [ %87, %82 ], [ %66, %61 ], [ %56, %55 ], [ %101, %96 ], [ %91, %90 ]
  %106 = and i64 %1, -4294967296
  %107 = add i64 %1, 19
  %108 = inttoptr i64 %107 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  %111 = or i64 %106, %110
  %112 = and i64 %110, 1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %184, label %114

114:                                              ; preds = %104
  %115 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %116 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %115, null
  %117 = and i64 %1, -262144
  %118 = or i64 %117, 16
  %119 = inttoptr i64 %118 to i64*
  br i1 %116, label %149, label %120

120:                                              ; preds = %114
  %121 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %115, i64 0, i32 0, i32 1
  %122 = load i8, i8* %121, align 8, !range !3
  %123 = icmp eq i8 %122, 0
  br i1 %123, label %128, label %124

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %115, i64 0, i32 1, i64 10
  %126 = load i64, i64* %125, align 8
  %127 = trunc i64 %126 to i32
  br label %170

128:                                              ; preds = %120
  %129 = load i64, i64* %119, align 16
  %130 = add i64 %129, -41416
  %131 = inttoptr i64 %130 to %"class.v8::internal::Isolate"*
  %132 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %131, i64 0, i32 0, i32 7, i32 0, i64 10
  %133 = load i64, i64* %132, align 8
  %134 = trunc i64 %133 to i32
  br label %135

135:                                              ; preds = %141, %128
  %136 = phi i64 [ %146, %141 ], [ %111, %128 ]
  %137 = add i64 %136, -1
  %138 = inttoptr i64 %137 to i32*
  %139 = load atomic i32, i32* %138 monotonic, align 4
  %140 = icmp eq i32 %139, %134
  br i1 %140, label %141, label %184

141:                                              ; preds = %135
  %142 = add i64 %136, 19
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143, align 4
  %145 = zext i32 %144 to i64
  %146 = or i64 %106, %145
  %147 = and i64 %145, 1
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %184, label %135

149:                                              ; preds = %114
  %150 = load i64, i64* %119, align 16
  %151 = add i64 %150, -41416
  %152 = inttoptr i64 %151 to %"class.v8::internal::Isolate"*
  %153 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %152, i64 0, i32 0, i32 7, i32 0, i64 10
  %154 = load i64, i64* %153, align 8
  %155 = trunc i64 %154 to i32
  br label %156

156:                                              ; preds = %162, %149
  %157 = phi i64 [ %167, %162 ], [ %111, %149 ]
  %158 = add i64 %157, -1
  %159 = inttoptr i64 %158 to i32*
  %160 = load atomic i32, i32* %159 monotonic, align 4
  %161 = icmp eq i32 %160, %155
  br i1 %161, label %162, label %184

162:                                              ; preds = %156
  %163 = add i64 %157, 19
  %164 = inttoptr i64 %163 to i32*
  %165 = load i32, i32* %164, align 4
  %166 = zext i32 %165 to i64
  %167 = or i64 %106, %166
  %168 = and i64 %166, 1
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %184, label %156

170:                                              ; preds = %176, %124
  %171 = phi i64 [ %181, %176 ], [ %111, %124 ]
  %172 = add i64 %171, -1
  %173 = inttoptr i64 %172 to i32*
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = icmp eq i32 %174, %127
  br i1 %175, label %176, label %184

176:                                              ; preds = %170
  %177 = add i64 %171, 19
  %178 = inttoptr i64 %177 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = zext i32 %179 to i64
  %181 = or i64 %106, %180
  %182 = and i64 %180, 1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %170

184:                                              ; preds = %176, %170, %141, %135, %162, %156, %104
  %185 = phi i64 [ %111, %104 ], [ %157, %156 ], [ %167, %162 ], [ %146, %141 ], [ %136, %135 ], [ %181, %176 ], [ %171, %170 ]
  %186 = trunc i64 %105 to i32
  %187 = trunc i64 %185 to i32
  %188 = icmp eq i32 %186, %187
  br i1 %188, label %189, label %301

189:                                              ; preds = %184
  %190 = add i64 %25, 15
  %191 = inttoptr i64 %190 to i32*
  %192 = load i32, i32* %191, align 4
  %193 = add i64 %1, 15
  %194 = inttoptr i64 %193 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = icmp eq i32 %192, %195
  br i1 %196, label %197, label %301

197:                                              ; preds = %189
  %198 = add i64 %25, 7
  %199 = inttoptr i64 %198 to i16*
  %200 = load atomic i16, i16* %199 monotonic, align 2
  %201 = add i64 %1, 7
  %202 = inttoptr i64 %201 to i16*
  %203 = load atomic i16, i16* %202 monotonic, align 2
  %204 = icmp eq i16 %200, %203
  br i1 %204, label %205, label %301

205:                                              ; preds = %197
  %206 = add i64 %25, 9
  %207 = inttoptr i64 %206 to i8*
  %208 = load i8, i8* %207, align 1
  %209 = add i64 %1, 9
  %210 = inttoptr i64 %209 to i8*
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %208, %211
  br i1 %212, label %213, label %301

213:                                              ; preds = %205
  %214 = add i64 %25, 11
  %215 = inttoptr i64 %214 to i32*
  %216 = load atomic i32, i32* %215 monotonic, align 4
  %217 = and i32 %216, 134217728
  %218 = icmp ne i32 %217, 0
  %219 = add i64 %1, 11
  %220 = inttoptr i64 %219 to i32*
  %221 = load atomic i32, i32* %220 monotonic, align 4
  %222 = and i32 %221, 134217728
  %223 = icmp ne i32 %222, 0
  %224 = xor i1 %218, %223
  br i1 %224, label %301, label %225

225:                                              ; preds = %213
  %226 = add i64 %25, 10
  %227 = inttoptr i64 %226 to i8*
  %228 = load i8, i8* %227, align 1
  %229 = and i8 %228, 1
  %230 = icmp eq i8 %229, 0
  %231 = and i8 %20, 1
  %232 = icmp ne i8 %231, 0
  %233 = xor i1 %232, %230
  %234 = icmp eq i8 %228, %23
  %235 = and i1 %233, %234
  br i1 %235, label %236, label %301

236:                                              ; preds = %225
  %237 = add i64 %25, 3
  %238 = inttoptr i64 %237 to i8*
  %239 = load atomic i8, i8* %238 monotonic, align 1
  %240 = zext i8 %239 to i32
  %241 = add i64 %25, 4
  %242 = inttoptr i64 %241 to i8*
  %243 = load atomic i8, i8* %242 monotonic, align 1
  %244 = zext i8 %243 to i32
  %245 = sub nsw i32 %240, %244
  %246 = icmp eq i32 %245, %17
  br i1 %246, label %247, label %301

247:                                              ; preds = %236
  %248 = load atomic i8, i8* %238 monotonic, align 1
  %249 = zext i8 %248 to i32
  %250 = shl nuw nsw i32 %249, 2
  %251 = icmp eq i8 %248, 0
  br i1 %251, label %270, label %252

252:                                              ; preds = %247
  %253 = load atomic i16, i16* %199 monotonic, align 2
  %254 = icmp eq i16 %253, 1057
  br i1 %254, label %259, label %255

255:                                              ; preds = %252
  %256 = load atomic i8, i8* %207 monotonic, align 1
  %257 = icmp slt i8 %256, 0
  %258 = tail call i32 @_ZN2v88internal8JSObject13GetHeaderSizeENS0_12InstanceTypeEb(i16 zeroext %253, i1 zeroext %257) #6
  br label %259

259:                                              ; preds = %255, %252
  %260 = phi i32 [ %258, %255 ], [ 12, %252 ]
  %261 = sub nsw i32 %250, %260
  %262 = ashr i32 %261, 2
  %263 = load atomic i8, i8* %238 monotonic, align 1
  %264 = zext i8 %263 to i32
  %265 = load atomic i8, i8* %242 monotonic, align 1
  %266 = zext i8 %265 to i32
  %267 = sub nsw i32 %262, %264
  %268 = add nsw i32 %267, %266
  %269 = sdiv i32 %268, 2
  br label %270

270:                                              ; preds = %247, %259
  %271 = phi i32 [ %269, %259 ], [ 0, %247 ]
  %272 = add i64 %1, 3
  %273 = inttoptr i64 %272 to i8*
  %274 = load atomic i8, i8* %273 monotonic, align 1
  %275 = zext i8 %274 to i32
  %276 = shl nuw nsw i32 %275, 2
  %277 = icmp eq i8 %274, 0
  br i1 %277, label %298, label %278

278:                                              ; preds = %270
  %279 = load atomic i16, i16* %202 monotonic, align 2
  %280 = icmp eq i16 %279, 1057
  br i1 %280, label %285, label %281

281:                                              ; preds = %278
  %282 = load atomic i8, i8* %210 monotonic, align 1
  %283 = icmp slt i8 %282, 0
  %284 = tail call i32 @_ZN2v88internal8JSObject13GetHeaderSizeENS0_12InstanceTypeEb(i16 zeroext %279, i1 zeroext %283) #6
  br label %285

285:                                              ; preds = %281, %278
  %286 = phi i32 [ %284, %281 ], [ 12, %278 ]
  %287 = sub nsw i32 %276, %286
  %288 = ashr i32 %287, 2
  %289 = load atomic i8, i8* %273 monotonic, align 1
  %290 = zext i8 %289 to i32
  %291 = add i64 %1, 4
  %292 = inttoptr i64 %291 to i8*
  %293 = load atomic i8, i8* %292 monotonic, align 1
  %294 = zext i8 %293 to i32
  %295 = sub nsw i32 %288, %290
  %296 = add nsw i32 %295, %294
  %297 = sdiv i32 %296, 2
  br label %298

298:                                              ; preds = %270, %285
  %299 = phi i32 [ %297, %285 ], [ 0, %270 ]
  %300 = icmp eq i32 %271, %299
  br label %301

301:                                              ; preds = %184, %189, %197, %205, %213, %298, %236, %225
  %302 = phi i1 [ false, %236 ], [ false, %225 ], [ %300, %298 ], [ false, %213 ], [ false, %205 ], [ false, %197 ], [ false, %189 ], [ false, %184 ]
  ret i1 %302
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal3Map21ComputeMinObjectSlackEPNS0_7IsolateE(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %4 = alloca %"class.std::__1::function", align 8
  %5 = alloca i32, align 4
  %6 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #6
  %8 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 5
  %11 = inttoptr i64 %10 to i8*
  %12 = load atomic i8, i8* %11 monotonic, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp ugt i8 %12, 2
  br i1 %14, label %15, label %21

15:                                               ; preds = %2
  %16 = add i64 %9, 3
  %17 = inttoptr i64 %16 to i8*
  %18 = load atomic i8, i8* %17 monotonic, align 1
  %19 = zext i8 %18 to i32
  %20 = sub nsw i32 %19, %13
  br label %21

21:                                               ; preds = %2, %15
  %22 = phi i32 [ %20, %15 ], [ %13, %2 ]
  store i32 %22, i32* %5, align 4
  %23 = bitcast %"class.v8::internal::TransitionsAccessor"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %23) #6
  %24 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %1, %"class.v8::internal::Isolate"** %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 1, i32 0, i32 0
  store i64* null, i64** %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %9, i64* %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %27, align 8
  %28 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 5
  store i8 0, i8* %28, align 4
  %29 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 4
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %9, 35
  %32 = inttoptr i64 %31 to i32*
  %33 = load atomic i32, i32* %32 acquire, align 4
  %34 = and i64 %30, 4294967295
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #6
  %36 = zext i32 %33 to i64
  %37 = or i64 %30, %36
  store i64 %37, i64* %27, align 8
  %38 = and i64 %36, 1
  %39 = icmp eq i64 %38, 0
  %40 = icmp eq i32 %33, 3
  %41 = or i1 %40, %39
  br i1 %41, label %42, label %44

42:                                               ; preds = %21
  %43 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 1, i32* %43, align 8
  br label %72

44:                                               ; preds = %21
  %45 = and i64 %36, 3
  switch i64 %45, label %71 [
    i64 3, label %46
    i64 1, label %48
  ]

46:                                               ; preds = %44
  %47 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 3, i32* %47, align 8
  br label %72

48:                                               ; preds = %44
  %49 = add i64 %37, -1
  %50 = inttoptr i64 %49 to i32*
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = zext i32 %51 to i64
  %53 = or i64 %30, %52
  %54 = add i64 %53, 7
  %55 = inttoptr i64 %54 to i16*
  %56 = load atomic i16, i16* %55 monotonic, align 2
  %57 = icmp eq i16 %56, 160
  br i1 %57, label %58, label %60

58:                                               ; preds = %48
  %59 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  store i32 4, i32* %59, align 8
  br label %72

60:                                               ; preds = %48
  %61 = load atomic i32, i32* %50 monotonic, align 4
  %62 = zext i32 %61 to i64
  %63 = or i64 %30, %62
  %64 = add i64 %63, 7
  %65 = inttoptr i64 %64 to i16*
  %66 = load atomic i16, i16* %65 monotonic, align 2
  %67 = icmp eq i16 %66, 110
  %68 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %6, i64 0, i32 4
  br i1 %67, label %69, label %70

69:                                               ; preds = %60
  store i32 0, i32* %68, align 8
  br label %72

70:                                               ; preds = %60
  store i32 2, i32* %68, align 8
  br label %72

71:                                               ; preds = %44
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

72:                                               ; preds = %42, %46, %58, %69, %70
  %73 = bitcast %"class.std::__1::function"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %73)
  %74 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %74) #6
  %75 = bitcast %"class.std::__1::function"* %4 to i32**
  store i32* %5, i32** %75, align 8
  %76 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 1
  %77 = bitcast %"struct.std::__1::__function::__policy_invoker"* %76 to i64*
  store i64 ptrtoint (void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::Map"*)* @"_ZNSt3__110__function16__policy_invokerIFvN2v88internal3MapEEE11__call_implINS0_20__default_alloc_funcIZNS4_21ComputeMinObjectSlackEPNS3_7IsolateEE3$_0S5_EEEEvPKNS0_16__policy_storageEOS4_" to i64), i64* %77, align 8
  %78 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal3Map21ComputeMinObjectSlackEPNS5_7IsolateEE3$_0FvS6_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %78, align 8
  call void @_ZN2v88internal19TransitionsAccessor30TraverseTransitionTreeInternalENSt3__18functionIFvNS0_3MapEEEEPNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS8_ILS9_1ELb0EEEEEE(%"class.v8::internal::TransitionsAccessor"* nonnull %6, %"class.std::__1::function"* nonnull %4, %"class.v8::internal::CombinationAssertScope"* nonnull %3) #6
  %79 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %78, align 8
  %80 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %79, i64 0, i32 1
  %81 = load void (i8*)*, void (i8*)** %80, align 8
  %82 = icmp eq void (i8*)* %81, null
  br i1 %82, label %86, label %83

83:                                               ; preds = %72
  %84 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  call void %81(i8* %85) #6
  br label %86

86:                                               ; preds = %72, %83
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %74) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %73)
  %87 = load i32, i32* %5, align 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #6
  ret i32 %87
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal3Map29CompleteInobjectSlackTrackingEPNS0_7IsolateE(%"class.v8::internal::Map"* nocapture readonly, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %4 = alloca %"class.std::__1::function", align 8
  %5 = alloca %"class.v8::internal::Isolate"*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %"class.v8::internal::TransitionsAccessor", align 8
  store %"class.v8::internal::Isolate"* %1, %"class.v8::internal::Isolate"** %5, align 8
  %8 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #6
  %9 = tail call i32 @_ZN2v88internal3Map21ComputeMinObjectSlackEPNS0_7IsolateE(%"class.v8::internal::Map"* %0, %"class.v8::internal::Isolate"* %1)
  store i32 %9, i32* %6, align 4
  %10 = bitcast %"class.v8::internal::TransitionsAccessor"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #6
  %11 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %7, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %1, %"class.v8::internal::Isolate"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %7, i64 0, i32 1, i32 0, i32 0
  store i64* null, i64** %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i64 %12, i64* %15, align 8
  %16 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %7, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %7, i64 0, i32 5
  store i8 0, i8* %17, align 4
  %18 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = add i64 %12, 35
  %21 = inttoptr i64 %20 to i32*
  %22 = load atomic i32, i32* %21 acquire, align 4
  %23 = and i64 %19, 4294967295
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #6
  %25 = zext i32 %22 to i64
  %26 = or i64 %19, %25
  store i64 %26, i64* %16, align 8
  %27 = and i64 %25, 1
  %28 = icmp eq i64 %27, 0
  %29 = icmp eq i32 %22, 3
  %30 = or i1 %29, %28
  br i1 %30, label %31, label %33

31:                                               ; preds = %2
  %32 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %7, i64 0, i32 4
  store i32 1, i32* %32, align 8
  br label %61

33:                                               ; preds = %2
  %34 = and i64 %25, 3
  switch i64 %34, label %60 [
    i64 3, label %35
    i64 1, label %37
  ]

35:                                               ; preds = %33
  %36 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %7, i64 0, i32 4
  store i32 3, i32* %36, align 8
  br label %61

37:                                               ; preds = %33
  %38 = add i64 %26, -1
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %19, %41
  %43 = add i64 %42, 7
  %44 = inttoptr i64 %43 to i16*
  %45 = load atomic i16, i16* %44 monotonic, align 2
  %46 = icmp eq i16 %45, 160
  br i1 %46, label %47, label %49

47:                                               ; preds = %37
  %48 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %7, i64 0, i32 4
  store i32 4, i32* %48, align 8
  br label %61

49:                                               ; preds = %37
  %50 = load atomic i32, i32* %39 monotonic, align 4
  %51 = zext i32 %50 to i64
  %52 = or i64 %19, %51
  %53 = add i64 %52, 7
  %54 = inttoptr i64 %53 to i16*
  %55 = load atomic i16, i16* %54 monotonic, align 2
  %56 = icmp eq i16 %55, 110
  %57 = getelementptr inbounds %"class.v8::internal::TransitionsAccessor", %"class.v8::internal::TransitionsAccessor"* %7, i64 0, i32 4
  br i1 %56, label %58, label %59

58:                                               ; preds = %49
  store i32 0, i32* %57, align 8
  br label %61

59:                                               ; preds = %49
  store i32 2, i32* %57, align 8
  br label %61

60:                                               ; preds = %33
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

61:                                               ; preds = %31, %35, %47, %58, %59
  %62 = load i32, i32* %6, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %67, label %64

64:                                               ; preds = %61
  %65 = bitcast %"class.v8::internal::Isolate"** %5 to i8*
  %66 = ptrtoint i32* %6 to i64
  br label %67

67:                                               ; preds = %61, %64
  %68 = phi i8* [ %65, %64 ], [ undef, %61 ]
  %69 = phi i64 [ %66, %64 ], [ undef, %61 ]
  %70 = phi i64 [ ptrtoint (void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::Map"*)* @"_ZNSt3__110__function16__policy_invokerIFvN2v88internal3MapEEE11__call_implINS0_20__default_alloc_funcIZNS4_29CompleteInobjectSlackTrackingEPNS3_7IsolateEE3$_1S5_EEEEvPKNS0_16__policy_storageEOS4_" to i64), %64 ], [ ptrtoint (void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::Map"*)* @"_ZNSt3__110__function16__policy_invokerIFvN2v88internal3MapEEE11__call_implINS0_20__default_alloc_funcIZNS4_29CompleteInobjectSlackTrackingEPNS3_7IsolateEE3$_2S5_EEEEvPKNS0_16__policy_storageEOS4_" to i64), %61 ]
  %71 = phi i64 [ ptrtoint (%"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal3Map29CompleteInobjectSlackTrackingEPNS5_7IsolateEE3$_1FvS6_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" to i64), %64 ], [ ptrtoint (%"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal3Map29CompleteInobjectSlackTrackingEPNS5_7IsolateEE3$_2FvS6_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" to i64), %61 ]
  %72 = inttoptr i64 %71 to %"struct.std::__1::__function::__policy"*
  %73 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %72, i64 0, i32 0
  %74 = load i8* (i8*)*, i8* (i8*)** %73, align 8
  %75 = icmp eq i8* (i8*)* %74, null
  br i1 %75, label %78, label %76

76:                                               ; preds = %67
  %77 = call i8* %74(i8* nonnull %68) #6
  br label %78

78:                                               ; preds = %67, %76
  %79 = phi i8* [ %68, %67 ], [ %77, %76 ]
  %80 = bitcast %"class.std::__1::function"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %80)
  %81 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %81) #6
  %82 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 0, i32 0
  store i8* %79, i8** %82, align 8
  %83 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 0, i32 1
  %84 = bitcast [8 x i8]* %83 to i64*
  store i64 %69, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 1
  %86 = bitcast %"struct.std::__1::__function::__policy_invoker"* %85 to i64*
  store i64 %70, i64* %86, align 8
  %87 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* %72, %"struct.std::__1::__function::__policy"** %87, align 8
  %88 = load i8* (i8*)*, i8* (i8*)** %73, align 8
  %89 = icmp eq i8* (i8*)* %88, null
  br i1 %89, label %92, label %90

90:                                               ; preds = %78
  %91 = call i8* %88(i8* %79) #6
  store i8* %91, i8** %82, align 8
  br label %92

92:                                               ; preds = %90, %78
  call void @_ZN2v88internal19TransitionsAccessor30TraverseTransitionTreeInternalENSt3__18functionIFvNS0_3MapEEEEPNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS8_ILS9_1ELb0EEEEEE(%"class.v8::internal::TransitionsAccessor"* nonnull %7, %"class.std::__1::function"* nonnull %4, %"class.v8::internal::CombinationAssertScope"* nonnull %3) #6
  %93 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %87, align 8
  %94 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %93, i64 0, i32 1
  %95 = load void (i8*)*, void (i8*)** %94, align 8
  %96 = icmp eq void (i8*)* %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %92
  %98 = load i8*, i8** %82, align 8
  call void %95(i8* %98) #6
  br label %99

99:                                               ; preds = %92, %97
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %81) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %80)
  %100 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %72, i64 0, i32 1
  %101 = load void (i8*)*, void (i8*)** %100, align 8
  %102 = icmp eq void (i8*)* %101, null
  br i1 %102, label %107, label %103

103:                                              ; preds = %99
  call void %101(i8* %79) #6
  %104 = load void (i8*)*, void (i8*)** %100, align 8
  %105 = icmp eq void (i8*)* %104, null
  br i1 %105, label %107, label %106

106:                                              ; preds = %103
  call void %104(i8* nonnull %68) #6
  br label %107

107:                                              ; preds = %99, %103, %106
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #6
  ret void
}

declare i64* @_ZN2v88internal7Factory16NewPrototypeInfoEv(%"class.v8::internal::Factory"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map24GetOrCreatePrototypeInfoENS0_6HandleIS1_EEPNS0_7IsolateE(i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %0, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 35
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = and i64 %8, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %41, label %12

12:                                               ; preds = %2
  %13 = add i64 %9, -1
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = zext i32 %15 to i64
  %17 = or i64 %4, %16
  %18 = add i64 %17, 7
  %19 = inttoptr i64 %18 to i16*
  %20 = load atomic i16, i16* %19 monotonic, align 2
  %21 = icmp eq i16 %20, 110
  br i1 %21, label %22, label %41

22:                                               ; preds = %12
  %23 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %24 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %23, align 8
  %25 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %24, i64 %9) #6
  br label %74

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %30 = load i64*, i64** %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %32 = load i64*, i64** %31, align 8
  %33 = icmp eq i64* %30, %32
  br i1 %33, label %34, label %36

34:                                               ; preds = %28
  %35 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #6
  br label %36

36:                                               ; preds = %34, %28
  %37 = phi i64* [ %35, %34 ], [ %30, %28 ]
  %38 = ptrtoint i64* %37 to i64
  %39 = add i64 %38, 8
  %40 = inttoptr i64 %39 to i64*
  store i64* %40, i64** %29, align 8
  store i64 %9, i64* %37, align 8
  br label %74

41:                                               ; preds = %2, %12
  %42 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::Factory"*
  %43 = tail call i64* @_ZN2v88internal7Factory16NewPrototypeInfoEv(%"class.v8::internal::Factory"* %42) #6
  %44 = load i64, i64* %0, align 8
  %45 = load i64, i64* %43, align 8
  %46 = add i64 %44, 35
  %47 = inttoptr i64 %46 to i32*
  %48 = trunc i64 %45 to i32
  store atomic volatile i32 %48, i32* %47 release, align 4
  %49 = and i64 %45, 1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %74, label %51

51:                                               ; preds = %41
  %52 = and i64 %44, -262144
  %53 = or i64 %52, 8
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = and i64 %55, 262144
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %51
  %59 = or i64 %52, 16
  %60 = inttoptr i64 %59 to %"class.v8::internal::Heap"**
  %61 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %60, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %61, i64 %44, i64 %46, i64 %45) #6
  br label %62

62:                                               ; preds = %58, %51
  %63 = and i64 %45, -262144
  %64 = or i64 %63, 8
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = and i64 %66, 24
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i64, i64* %54, align 8
  %71 = and i64 %70, 24
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %69
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %44, i64 %46, i64 %45) #6
  br label %74

74:                                               ; preds = %73, %69, %62, %41, %36, %26
  %75 = phi i64* [ %27, %26 ], [ %37, %36 ], [ %43, %41 ], [ %43, %62 ], [ %43, %69 ], [ %43, %73 ]
  ret i64* %75
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal3Map27SetShouldBeFastPrototypeMapENS0_6HandleIS1_EEbPNS0_7IsolateE(i64*, i1 zeroext, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  br i1 %1, label %24, label %4

4:                                                ; preds = %3
  %5 = load i64, i64* %0, align 8
  %6 = and i64 %5, -4294967296
  %7 = add i64 %5, 35
  %8 = inttoptr i64 %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %35, label %13

13:                                               ; preds = %4
  %14 = or i64 %6, %10
  %15 = add i64 %14, -1
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = zext i32 %17 to i64
  %19 = or i64 %6, %18
  %20 = add i64 %19, 7
  %21 = inttoptr i64 %20 to i16*
  %22 = load atomic i16, i16* %21 monotonic, align 2
  %23 = icmp eq i16 %22, 110
  br i1 %23, label %24, label %35

24:                                               ; preds = %3, %13
  %25 = tail call i64* @_ZN2v88internal3Map24GetOrCreatePrototypeInfoENS0_6HandleIS1_EEPNS0_7IsolateE(i64* %0, %"class.v8::internal::Isolate"* %2)
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, 23
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = ashr i32 %29, 1
  %31 = or i32 %30, 1
  %32 = and i32 %30, 2147483646
  %33 = select i1 %1, i32 %31, i32 %32
  %34 = shl i32 %33, 1
  store atomic volatile i32 %34, i32* %28 monotonic, align 4
  br label %35

35:                                               ; preds = %4, %13, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal3Map37GetOrCreatePrototypeChainValidityCellENS0_6HandleIS1_EEPNS0_7IsolateE(i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Context", align 8
  %4 = load i64, i64* %0, align 8
  %5 = add i64 %4, 7
  %6 = inttoptr i64 %5 to i16*
  %7 = load atomic i16, i16* %6 monotonic, align 2
  %8 = icmp eq i16 %7, 189
  br i1 %8, label %9, label %35

9:                                                ; preds = %2
  %10 = bitcast %"class.v8::internal::Context"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #6
  %11 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Context", %"class.v8::internal::Context"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %12, i64* %13, align 8
  %14 = call i64 @_ZN2v88internal7Context13global_objectEv(%"class.v8::internal::Context"* nonnull %3) #6
  %15 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %16 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %15, align 8
  %17 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %9
  %19 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %16, i64 %14) #6
  br label %33

20:                                               ; preds = %9
  %21 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %22 = load i64*, i64** %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %24 = load i64*, i64** %23, align 8
  %25 = icmp eq i64* %22, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %20
  %27 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #6
  br label %28

28:                                               ; preds = %26, %20
  %29 = phi i64* [ %27, %26 ], [ %22, %20 ]
  %30 = ptrtoint i64* %29 to i64
  %31 = add i64 %30, 8
  %32 = inttoptr i64 %31 to i64*
  store i64* %32, i64** %21, align 8
  store i64 %14, i64* %29, align 8
  br label %33

33:                                               ; preds = %18, %28
  %34 = phi i64* [ %19, %18 ], [ %29, %28 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #6
  br label %105

35:                                               ; preds = %2
  %36 = load atomic i16, i16* %6 monotonic, align 2
  %37 = icmp ugt i16 %36, 185
  br i1 %37, label %79, label %38

38:                                               ; preds = %35
  %39 = add i64 %4, 4
  %40 = inttoptr i64 %39 to i8*
  %41 = load atomic i8, i8* %40 monotonic, align 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %70, label %43

43:                                               ; preds = %38
  %44 = zext i8 %41 to i64
  %45 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = and i64 %46, -4294967296
  %48 = add i64 %46, -1
  %49 = inttoptr i64 %48 to i32*
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = zext i32 %50 to i64
  %52 = or i64 %47, %51
  %53 = add i64 %52, 19
  %54 = inttoptr i64 %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  %57 = or i64 %47, %56
  %58 = shl nuw nsw i64 %44, 2
  %59 = add nuw nsw i64 %58, 7
  %60 = add i64 %59, %57
  %61 = inttoptr i64 %60 to i32*
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = zext i32 %62 to i64
  %64 = or i64 %47, %63
  %65 = add i64 %64, 27
  %66 = inttoptr i64 %65 to i32*
  %67 = load atomic i32, i32* %66 acquire, align 4
  %68 = zext i32 %67 to i64
  %69 = or i64 %47, %68
  br label %79

70:                                               ; preds = %38
  %71 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 6
  %72 = load i64, i64* %71, align 8
  %73 = and i64 %72, -4294967296
  %74 = add i64 %72, -1
  %75 = inttoptr i64 %74 to i32*
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = zext i32 %76 to i64
  %78 = or i64 %73, %77
  br label %79

79:                                               ; preds = %35, %43, %70
  %80 = phi i64 [ %69, %43 ], [ %78, %70 ], [ %4, %35 ]
  %81 = and i64 %80, -4294967296
  %82 = add i64 %80, 15
  %83 = inttoptr i64 %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i64
  %86 = or i64 %81, %85
  %87 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %88 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %87, align 8
  %89 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %88, null
  br i1 %89, label %92, label %90

90:                                               ; preds = %79
  %91 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %88, i64 %86) #6
  br label %105

92:                                               ; preds = %79
  %93 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %94 = load i64*, i64** %93, align 8
  %95 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %96 = load i64*, i64** %95, align 8
  %97 = icmp eq i64* %94, %96
  br i1 %97, label %98, label %100

98:                                               ; preds = %92
  %99 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #6
  br label %100

100:                                              ; preds = %98, %92
  %101 = phi i64* [ %99, %98 ], [ %94, %92 ]
  %102 = ptrtoint i64* %101 to i64
  %103 = add i64 %102, 8
  %104 = inttoptr i64 %103 to i64*
  store i64* %104, i64** %93, align 8
  store i64 %86, i64* %101, align 8
  br label %105

105:                                              ; preds = %100, %90, %33
  %106 = phi i64* [ %34, %33 ], [ %91, %90 ], [ %101, %100 ]
  %107 = load i64, i64* %106, align 8
  %108 = and i64 %107, 1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %121, label %110

110:                                              ; preds = %105
  %111 = and i64 %107, -4294967296
  %112 = add i64 %107, -1
  %113 = inttoptr i64 %112 to i32*
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = zext i32 %114 to i64
  %116 = or i64 %111, %115
  %117 = add i64 %116, 7
  %118 = inttoptr i64 %117 to i16*
  %119 = load atomic i16, i16* %118 monotonic, align 2
  %120 = icmp ugt i16 %119, 188
  br i1 %120, label %140, label %121

121:                                              ; preds = %105, %110
  %122 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %123 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %122, align 8
  %124 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %123, null
  br i1 %124, label %127, label %125

125:                                              ; preds = %121
  %126 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %123, i64 0) #6
  br label %272

127:                                              ; preds = %121
  %128 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %129 = load i64*, i64** %128, align 8
  %130 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %131 = load i64*, i64** %130, align 8
  %132 = icmp eq i64* %129, %131
  br i1 %132, label %133, label %135

133:                                              ; preds = %127
  %134 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #6
  br label %135

135:                                              ; preds = %133, %127
  %136 = phi i64* [ %134, %133 ], [ %129, %127 ]
  %137 = ptrtoint i64* %136 to i64
  %138 = add i64 %137, 8
  %139 = inttoptr i64 %138 to i64*
  store i64* %139, i64** %128, align 8
  store i64 0, i64* %136, align 8
  br label %272

140:                                              ; preds = %110
  %141 = load atomic i32, i32* %113 monotonic, align 4
  %142 = zext i32 %141 to i64
  %143 = or i64 %111, %142
  %144 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %145 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %144, align 8
  %146 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %145, null
  br i1 %146, label %149, label %147

147:                                              ; preds = %140
  %148 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %145, i64 %143) #6
  br label %162

149:                                              ; preds = %140
  %150 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %151 = load i64*, i64** %150, align 8
  %152 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %153 = load i64*, i64** %152, align 8
  %154 = icmp eq i64* %151, %153
  br i1 %154, label %155, label %157

155:                                              ; preds = %149
  %156 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #6
  br label %157

157:                                              ; preds = %155, %149
  %158 = phi i64* [ %156, %155 ], [ %151, %149 ]
  %159 = ptrtoint i64* %158 to i64
  %160 = add i64 %159, 8
  %161 = inttoptr i64 %160 to i64*
  store i64* %161, i64** %150, align 8
  store i64 %143, i64* %158, align 8
  br label %162

162:                                              ; preds = %147, %157
  %163 = phi i64* [ %148, %147 ], [ %158, %157 ]
  call void @_ZN2v88internal8JSObject25LazyRegisterPrototypeUserENS0_6HandleINS0_3MapEEEPNS0_7IsolateE(i64* %163, %"class.v8::internal::Isolate"* %1) #6
  %164 = load i64, i64* %106, align 8
  %165 = and i64 %164, -4294967296
  %166 = add i64 %164, -1
  %167 = inttoptr i64 %166 to i32*
  %168 = load atomic i32, i32* %167 monotonic, align 4
  %169 = zext i32 %168 to i64
  %170 = or i64 %165, %169
  %171 = add i64 %170, 31
  %172 = inttoptr i64 %171 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = zext i32 %173 to i64
  %175 = or i64 %165, %174
  %176 = and i64 %174, 1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %214, label %178

178:                                              ; preds = %162
  %179 = add i64 %175, -1
  %180 = inttoptr i64 %179 to i32*
  %181 = load atomic i32, i32* %180 monotonic, align 4
  %182 = zext i32 %181 to i64
  %183 = or i64 %165, %182
  %184 = add i64 %183, 7
  %185 = inttoptr i64 %184 to i16*
  %186 = load atomic i16, i16* %185 monotonic, align 2
  %187 = icmp eq i16 %186, 161
  br i1 %187, label %188, label %214

188:                                              ; preds = %178
  %189 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %144, align 8
  %190 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %189, null
  br i1 %190, label %194, label %191

191:                                              ; preds = %188
  %192 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %189, i64 %175) #6
  %193 = load i64, i64* %192, align 8
  br label %207

194:                                              ; preds = %188
  %195 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %196 = load i64*, i64** %195, align 8
  %197 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %198 = load i64*, i64** %197, align 8
  %199 = icmp eq i64* %196, %198
  br i1 %199, label %200, label %202

200:                                              ; preds = %194
  %201 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #6
  br label %202

202:                                              ; preds = %200, %194
  %203 = phi i64* [ %201, %200 ], [ %196, %194 ]
  %204 = ptrtoint i64* %203 to i64
  %205 = add i64 %204, 8
  %206 = inttoptr i64 %205 to i64*
  store i64* %206, i64** %195, align 8
  store i64 %175, i64* %203, align 8
  br label %207

207:                                              ; preds = %191, %202
  %208 = phi i64 [ %193, %191 ], [ %175, %202 ]
  %209 = phi i64* [ %192, %191 ], [ %203, %202 ]
  %210 = add i64 %208, 3
  %211 = inttoptr i64 %210 to i32*
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %272, label %214

214:                                              ; preds = %162, %207, %178
  %215 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::Factory"*
  %216 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %144, align 8
  %217 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %216, null
  br i1 %217, label %220, label %218

218:                                              ; preds = %214
  %219 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %216, i64 0) #6
  br label %233

220:                                              ; preds = %214
  %221 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %222 = load i64*, i64** %221, align 8
  %223 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %224 = load i64*, i64** %223, align 8
  %225 = icmp eq i64* %222, %224
  br i1 %225, label %226, label %228

226:                                              ; preds = %220
  %227 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #6
  br label %228

228:                                              ; preds = %226, %220
  %229 = phi i64* [ %227, %226 ], [ %222, %220 ]
  %230 = ptrtoint i64* %229 to i64
  %231 = add i64 %230, 8
  %232 = inttoptr i64 %231 to i64*
  store i64* %232, i64** %221, align 8
  store i64 0, i64* %229, align 8
  br label %233

233:                                              ; preds = %218, %228
  %234 = phi i64* [ %219, %218 ], [ %229, %228 ]
  %235 = call i64* @_ZN2v88internal7Factory7NewCellENS0_6HandleINS0_6ObjectEEE(%"class.v8::internal::Factory"* %215, i64* %234) #6
  %236 = load i64, i64* %106, align 8
  %237 = and i64 %236, -4294967296
  %238 = add i64 %236, -1
  %239 = inttoptr i64 %238 to i32*
  %240 = load atomic i32, i32* %239 monotonic, align 4
  %241 = zext i32 %240 to i64
  %242 = or i64 %237, %241
  %243 = load i64, i64* %235, align 8
  %244 = add i64 %242, 31
  %245 = inttoptr i64 %244 to i32*
  %246 = trunc i64 %243 to i32
  store atomic volatile i32 %246, i32* %245 monotonic, align 4
  %247 = and i64 %243, 1
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %272, label %249

249:                                              ; preds = %233
  %250 = and i64 %242, -262144
  %251 = or i64 %250, 8
  %252 = inttoptr i64 %251 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = and i64 %253, 262144
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %260, label %256

256:                                              ; preds = %249
  %257 = or i64 %250, 16
  %258 = inttoptr i64 %257 to %"class.v8::internal::Heap"**
  %259 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %258, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %259, i64 %242, i64 %244, i64 %243) #6
  br label %260

260:                                              ; preds = %256, %249
  %261 = and i64 %243, -262144
  %262 = or i64 %261, 8
  %263 = inttoptr i64 %262 to i64*
  %264 = load i64, i64* %263, align 8
  %265 = and i64 %264, 24
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %272, label %267

267:                                              ; preds = %260
  %268 = load i64, i64* %252, align 8
  %269 = and i64 %268, 24
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %271, label %272

271:                                              ; preds = %267
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %242, i64 %244, i64 %243) #6
  br label %272

272:                                              ; preds = %207, %233, %260, %267, %271, %135, %125
  %273 = phi i64* [ %126, %125 ], [ %136, %135 ], [ %209, %207 ], [ %235, %233 ], [ %235, %260 ], [ %235, %267 ], [ %235, %271 ]
  ret i64* %273
}

declare void @_ZN2v88internal8JSObject25LazyRegisterPrototypeUserENS0_6HandleINS0_3MapEEEPNS0_7IsolateE(i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #3

declare i64* @_ZN2v88internal7Factory7NewCellENS0_6HandleINS0_6ObjectEEE(%"class.v8::internal::Factory"*, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal3Map27IsPrototypeChainInvalidatedES1_(i64) local_unnamed_addr #0 align 2 {
  %2 = and i64 %0, -4294967296
  %3 = add i64 %0, 31
  %4 = inttoptr i64 %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = or i64 %2, %6
  %8 = and i64 %6, 1
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %25, label %10

10:                                               ; preds = %1
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %2, %14
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = icmp eq i16 %18, 161
  br i1 %19, label %20, label %25

20:                                               ; preds = %10
  %21 = add i64 %7, 3
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = icmp ne i32 %23, 0
  br label %25

25:                                               ; preds = %1, %10, %20
  %26 = phi i1 [ %24, %20 ], [ true, %10 ], [ true, %1 ]
  ret i1 %26
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal3Map26StartInobjectSlackTrackingEv(%"class.v8::internal::Map"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 5
  %5 = inttoptr i64 %4 to i8*
  %6 = load atomic i8, i8* %5 monotonic, align 1
  %7 = zext i8 %6 to i32
  %8 = icmp ugt i8 %6, 2
  br i1 %8, label %9, label %15

9:                                                ; preds = %1
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i8*
  %12 = load atomic i8, i8* %11 monotonic, align 1
  %13 = zext i8 %12 to i32
  %14 = sub nsw i32 %13, %7
  br label %15

15:                                               ; preds = %1, %9
  %16 = phi i32 [ %14, %9 ], [ %7, %1 ]
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %15
  %19 = add i64 %3, 11
  %20 = inttoptr i64 %19 to i32*
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = or i32 %21, -536870912
  store atomic volatile i32 %22, i32* %20 monotonic, align 4
  br label %23

23:                                               ; preds = %15, %18
  ret void
}

declare i64* @_ZN2v88internal19TransitionsAccessor22GetPrototypeTransitionENS0_6HandleINS0_6ObjectEEE(%"class.v8::internal::TransitionsAccessor"*, i64*) local_unnamed_addr #3

declare void @_ZN2v88internal19TransitionsAccessor22PutPrototypeTransitionENS0_6HandleINS0_6ObjectEEENS2_INS0_3MapEEE(%"class.v8::internal::TransitionsAccessor"*, i64*, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal18NormalizedMapCache3NewEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %3 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE17NewWeakFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %2, i32 64, i8 zeroext 1) #6
  ret i64* %3
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE17NewWeakFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @llvm.assume(i1) #6

declare i32 @_ZN2v88internal8JSObject13GetHeaderSizeENS0_12InstanceTypeEb(i16 zeroext, i1 zeroext) local_unnamed_addr #3

declare void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_15DescriptorArrayEi(%"class.v8::internal::Heap"*, i64, i32) local_unnamed_addr #3

declare zeroext i1 @_ZN2v88internal19TransitionsAccessor29HasIntegrityLevelTransitionToENS0_3MapEPNS0_6SymbolEPNS0_18PropertyAttributesE(%"class.v8::internal::TransitionsAccessor"*, i64, %"class.v8::internal::Symbol"*, i32*) local_unnamed_addr #3

declare void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"*, i64, i64, i64) local_unnamed_addr #3

declare void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64, i64, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

declare zeroext i8 @_ZN2v88internal29GetNextTransitionElementsKindENS0_12ElementsKindE(i8 zeroext) local_unnamed_addr #3

declare i32* @_ZNK2v88internal16StatsCounterBase24FindLocationInStatsTableEv(%"class.v8::internal::StatsCounterBase"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal15DescriptorArray3SetENS0_13InternalIndexENS0_4NameENS0_11MaybeObjectENS0_15PropertyDetailsE(%"class.v8::internal::DescriptorArray"*, i64, i64, i64, i32) local_unnamed_addr #5 comdat align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::DescriptorArray", %"class.v8::internal::DescriptorArray"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = mul i64 %1, 51539607552
  %9 = add i64 %8, 68719476736
  %10 = ashr exact i64 %9, 32
  %11 = add nsw i64 %10, -1
  %12 = add i64 %7, %11
  %13 = inttoptr i64 %12 to i32*
  %14 = trunc i64 %2 to i32
  store atomic volatile i32 %14, i32* %13 monotonic, align 4
  %15 = load i64, i64* %6, align 8
  %16 = add i64 %15, %11
  %17 = and i64 %2, 1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %32, label %19

19:                                               ; preds = %5
  %20 = and i64 %15, -262144
  %21 = or i64 %20, 8
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = and i64 %23, 262144
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %19
  %27 = or i64 %20, 16
  %28 = inttoptr i64 %27 to %"class.v8::internal::Heap"**
  %29 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %28, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %29, i64 %15, i64 %16, i64 %2) #6
  %30 = load i64, i64* %6, align 8
  %31 = add i64 %30, %11
  br label %32

32:                                               ; preds = %26, %19, %5
  %33 = phi i64 [ %16, %5 ], [ %16, %19 ], [ %31, %26 ]
  %34 = phi i64 [ %15, %5 ], [ %15, %19 ], [ %30, %26 ]
  %35 = and i64 %2, -262144
  %36 = or i64 %35, 8
  %37 = inttoptr i64 %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = and i64 %38, 24
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %50, label %41

41:                                               ; preds = %32
  %42 = and i64 %34, -262144
  %43 = or i64 %42, 8
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = and i64 %45, 24
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %41
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %34, i64 %33, i64 %2) #6
  %49 = load i64, i64* %6, align 8
  br label %50

50:                                               ; preds = %32, %41, %48
  %51 = phi i64 [ %34, %32 ], [ %34, %41 ], [ %49, %48 ]
  %52 = shl i32 %4, 1
  %53 = or i64 %10, 3
  %54 = add i64 %51, %53
  %55 = inttoptr i64 %54 to i32*
  store atomic volatile i32 %52, i32* %55 monotonic, align 4
  %56 = load i64, i64* %6, align 8
  %57 = ashr exact i64 %8, 32
  %58 = add nsw i64 %57, 23
  %59 = add i64 %56, %58
  %60 = inttoptr i64 %59 to i32*
  %61 = trunc i64 %3 to i32
  store atomic volatile i32 %61, i32* %60 monotonic, align 4
  %62 = load i64, i64* %6, align 8
  %63 = add i64 %62, %58
  %64 = and i64 %3, 1
  %65 = icmp ne i64 %64, 0
  %66 = icmp ne i32 %61, 3
  %67 = and i1 %66, %65
  br i1 %67, label %68, label %99

68:                                               ; preds = %50
  %69 = and i64 %62, -262144
  %70 = or i64 %69, 8
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = and i64 %72, 262144
  %74 = icmp eq i64 %73, 0
  %75 = and i64 %3, -3
  br i1 %74, label %82, label %76

76:                                               ; preds = %68
  %77 = or i64 %69, 16
  %78 = inttoptr i64 %77 to %"class.v8::internal::Heap"**
  %79 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %78, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %79, i64 %62, i64 %63, i64 %75) #6
  %80 = load i64, i64* %6, align 8
  %81 = add i64 %80, %58
  br label %82

82:                                               ; preds = %76, %68
  %83 = phi i64 [ %81, %76 ], [ %63, %68 ]
  %84 = phi i64 [ %80, %76 ], [ %62, %68 ]
  %85 = and i64 %3, -262144
  %86 = or i64 %85, 8
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = and i64 %88, 24
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %99, label %91

91:                                               ; preds = %82
  %92 = and i64 %84, -262144
  %93 = or i64 %92, 8
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = and i64 %95, 24
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %91
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %84, i64 %83, i64 %75) #6
  br label %99

99:                                               ; preds = %50, %82, %91, %98
  ret void
}

declare i64* @_ZN2v88internal10MapUpdater22ReconfigureToDataFieldENS0_13InternalIndexENS0_18PropertyAttributesENS0_17PropertyConstnessENS0_14RepresentationENS0_6HandleINS0_9FieldTypeEEE(%"class.v8::internal::MapUpdater"*, i64, i32, i32, i8, i64*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal9FieldType11NowContainsENS0_6ObjectE(%"class.v8::internal::FieldType"*, i64) local_unnamed_addr #3

declare void @_ZN2v88internal16RuntimeCallStats5EnterEPNS0_16RuntimeCallTimerENS0_20RuntimeCallCounterIdE(%"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallTimer"*, i32) local_unnamed_addr #3

declare void @_ZN2v88internal16RuntimeCallStats5LeaveEPNS0_16RuntimeCallTimerE(%"class.v8::internal::RuntimeCallStats"*, %"class.v8::internal::RuntimeCallTimer"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2v88internal12BinarySearchILNS0_10SearchModeE1ENS0_15DescriptorArrayEEEiPT0_NS0_4NameEiPi(%"class.v8::internal::DescriptorArray"*, i64, i32, i32*) local_unnamed_addr #0 comdat {
  %5 = getelementptr inbounds %"class.v8::internal::DescriptorArray", %"class.v8::internal::DescriptorArray"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 5
  %8 = inttoptr i64 %7 to i16*
  %9 = load atomic i16, i16* %8 monotonic, align 2
  %10 = sext i16 %9 to i32
  %11 = add nsw i32 %10, -1
  %12 = add i64 %1, 3
  %13 = inttoptr i64 %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = lshr i32 %14, 2
  %16 = icmp eq i32 %11, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %4
  %18 = and i64 %6, -4294967296
  %19 = add i64 %6, -1
  br label %28

20:                                               ; preds = %28, %4
  %21 = phi i32 [ 0, %4 ], [ %59, %28 ]
  %22 = icmp slt i32 %21, %10
  br i1 %22, label %23, label %96

23:                                               ; preds = %20
  %24 = and i64 %6, -4294967296
  %25 = add i64 %6, -1
  %26 = trunc i64 %1 to i32
  %27 = sext i32 %21 to i64
  br label %65

28:                                               ; preds = %17, %28
  %29 = phi i32 [ 0, %17 ], [ %60, %28 ]
  %30 = phi i32 [ %11, %17 ], [ %59, %28 ]
  %31 = sub nsw i32 %30, %29
  %32 = sdiv i32 %31, 2
  %33 = add nsw i32 %32, %29
  %34 = sext i32 %33 to i64
  %35 = mul i64 %34, 51539607552
  %36 = add i64 %35, 68719476736
  %37 = ashr exact i64 %36, 32
  %38 = or i64 %37, 3
  %39 = add i64 %38, %6
  %40 = inttoptr i64 %39 to i32*
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = lshr i32 %41, 10
  %43 = and i32 %42, 1023
  %44 = zext i32 %43 to i64
  %45 = mul nuw nsw i64 %44, 51539607552
  %46 = add nuw nsw i64 %45, 68719476736
  %47 = lshr exact i64 %46, 32
  %48 = add i64 %19, %47
  %49 = inttoptr i64 %48 to i32*
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = zext i32 %50 to i64
  %52 = or i64 %18, %51
  %53 = add i64 %52, 3
  %54 = inttoptr i64 %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = lshr i32 %55, 2
  %57 = icmp ult i32 %56, %15
  %58 = add nsw i32 %33, 1
  %59 = select i1 %57, i32 %30, i32 %33
  %60 = select i1 %57, i32 %58, i32 %29
  %61 = icmp eq i32 %59, %60
  br i1 %61, label %20, label %28

62:                                               ; preds = %90
  %63 = trunc i64 %92 to i32
  %64 = icmp eq i32 %63, %10
  br i1 %64, label %96, label %65

65:                                               ; preds = %62, %23
  %66 = phi i64 [ %27, %23 ], [ %92, %62 ]
  %67 = mul i64 %66, 51539607552
  %68 = add i64 %67, 68719476736
  %69 = ashr exact i64 %68, 32
  %70 = or i64 %69, 3
  %71 = add i64 %70, %6
  %72 = inttoptr i64 %71 to i32*
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = lshr i32 %73, 10
  %75 = and i32 %74, 1023
  %76 = zext i32 %75 to i64
  %77 = mul nuw nsw i64 %76, 51539607552
  %78 = add nuw nsw i64 %77, 68719476736
  %79 = lshr exact i64 %78, 32
  %80 = add i64 %25, %79
  %81 = inttoptr i64 %80 to i32*
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = zext i32 %82 to i64
  %84 = or i64 %24, %83
  %85 = add i64 %84, 3
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = lshr i32 %87, 2
  %89 = icmp eq i32 %88, %15
  br i1 %89, label %90, label %96

90:                                               ; preds = %65
  %91 = icmp eq i32 %82, %26
  %92 = add nsw i64 %66, 1
  br i1 %91, label %93, label %62

93:                                               ; preds = %90
  %94 = icmp slt i32 %75, %2
  %95 = select i1 %94, i32 %75, i32 -1
  br label %96

96:                                               ; preds = %65, %62, %20, %93
  %97 = phi i32 [ %95, %93 ], [ -1, %20 ], [ -1, %62 ], [ -1, %65 ]
  ret i32 %97
}

declare void @_ZN2v88internal19TransitionsAccessor30TraverseTransitionTreeInternalENSt3__18functionIFvNS0_3MapEEEEPNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS8_ILS9_1ELb0EEEEEE(%"class.v8::internal::TransitionsAccessor"*, %"class.std::__1::function"*, %"class.v8::internal::CombinationAssertScope"*) local_unnamed_addr #3

declare i64 @_ZN2v88internal7Context13global_objectEv(%"class.v8::internal::Context"*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @"_ZNSt3__110__function16__policy_invokerIFvN2v88internal3MapEEE11__call_implINS0_20__default_alloc_funcIZNS4_21ComputeMinObjectSlackEPNS3_7IsolateEE3$_0S5_EEEEvPKNS0_16__policy_storageEOS4_"(%"union.std::__1::__function::__policy_storage"* nocapture readonly, %"class.v8::internal::Map"* nocapture readonly dereferenceable(8)) #4 align 2 {
  %3 = getelementptr %"class.v8::internal::Map", %"class.v8::internal::Map"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"union.std::__1::__function::__policy_storage"* %0 to i32**
  %6 = load i32*, i32** %5, align 8
  %7 = add i64 %4, 5
  %8 = inttoptr i64 %7 to i8*
  %9 = load atomic i8, i8* %8 monotonic, align 1
  %10 = zext i8 %9 to i32
  %11 = icmp ugt i8 %9, 2
  br i1 %11, label %12, label %18

12:                                               ; preds = %2
  %13 = add i64 %4, 3
  %14 = inttoptr i64 %13 to i8*
  %15 = load atomic i8, i8* %14 monotonic, align 1
  %16 = zext i8 %15 to i32
  %17 = sub nsw i32 %16, %10
  br label %18

18:                                               ; preds = %2, %12
  %19 = phi i32 [ %17, %12 ], [ %10, %2 ]
  %20 = load i32, i32* %6, align 4
  %21 = icmp slt i32 %19, %20
  %22 = select i1 %21, i32 %19, i32 %20
  store i32 %22, i32* %6, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZNSt3__110__function16__policy_invokerIFvN2v88internal3MapEEE11__call_implINS0_20__default_alloc_funcIZNS4_29CompleteInobjectSlackTrackingEPNS3_7IsolateEE3$_1S5_EEEEvPKNS0_16__policy_storageEOS4_"(%"union.std::__1::__function::__policy_storage"* nocapture readonly, %"class.v8::internal::Map"* nocapture readonly dereferenceable(8)) #0 align 2 {
  %3 = getelementptr %"class.v8::internal::Map", %"class.v8::internal::Map"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"union.std::__1::__function::__policy_storage"* %0 to %"class.v8::internal::Isolate"***
  %6 = load %"class.v8::internal::Isolate"**, %"class.v8::internal::Isolate"*** %5, align 8
  %7 = getelementptr %"union.std::__1::__function::__policy_storage", %"union.std::__1::__function::__policy_storage"* %0, i64 0, i32 1
  %8 = bitcast [8 x i8]* %7 to i32**
  %9 = load i32*, i32** %8, align 8
  %10 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %6, align 8
  %11 = load i32, i32* %9, align 4
  %12 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 20
  tail call void @_ZN2v88internal10MapUpdater18ShrinkInstanceSizeEPNS_4base11SharedMutexENS0_3MapEi(%"class.v8::base::SharedMutex"* %12, i64 %4, i32 %11) #6
  ret void
}

declare void @_ZN2v88internal10MapUpdater18ShrinkInstanceSizeEPNS_4base11SharedMutexENS0_3MapEi(%"class.v8::base::SharedMutex"*, i64, i32) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @"_ZNSt3__110__function16__policy_invokerIFvN2v88internal3MapEEE11__call_implINS0_20__default_alloc_funcIZNS4_29CompleteInobjectSlackTrackingEPNS3_7IsolateEE3$_2S5_EEEEvPKNS0_16__policy_storageEOS4_"(%"union.std::__1::__function::__policy_storage"* nocapture readnone, %"class.v8::internal::Map"* nocapture readonly dereferenceable(8)) #4 align 2 {
  %3 = getelementptr %"class.v8::internal::Map", %"class.v8::internal::Map"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 536870911
  store atomic volatile i32 %8, i32* %6 monotonic, align 4
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN2v88internal12_GLOBAL__N_131DetectIntegrityLevelTransitionsENS0_3MapEPNS0_7IsolateEPNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS6_ILS7_1ELb0EEEEEE: argument 0"}
!6 = distinct !{!6, !"_ZN2v88internal12_GLOBAL__N_131DetectIntegrityLevelTransitionsENS0_3MapEPNS0_7IsolateEPNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS6_ILS7_1ELb0EEEEEE"}
!7 = !{!"branch_weights", i32 1, i32 2000}
