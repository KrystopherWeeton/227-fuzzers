; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_context_map.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_context_map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"class.std::__1::vector.5"*, %"class.std::__1::vector.5"*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.7" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.jxl::Token"* }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::vector.5"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.17", i8, %"class.std::__1::vector.25", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"class.std::__1::vector.19"*, %"class.std::__1::vector.19"*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.159" }
%"class.std::__1::__vector_base.159" = type { %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"*, %"class.std::__1::__compressed_pair.167" }
%"struct.jxl::ANSEncSymbolInfo" = type <{ i16, [6 x i8], %"class.std::__1::vector.160", i64, i8, i8, i16, [4 x i8] }>
%"class.std::__1::vector.160" = type { %"class.std::__1::__vector_base.161" }
%"class.std::__1::__vector_base.161" = type { i16*, i16*, %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { i16* }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.jxl::ANSEncSymbolInfo"* }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::vector.19"* }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.27" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::HistogramParams" = type <{ i32, i32, i32, i32, %"class.std::__1::vector.32", i64, i8, [7 x i8] }>
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { i64*, i64*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { i64* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.39", %"struct.std::__1::array.39", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.45" }
%"struct.std::__1::array" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.39" = type { [8 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.45" = type { %"class.std::__1::__function::__policy_func.49" }
%"class.std::__1::__function::__policy_func.49" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.50", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.50" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.143", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.51" }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.53" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.58", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.60" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.65", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.136", i64 }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.68", %"class.std::__1::vector.75", %"class.std::__1::vector.68", %"class.std::__1::vector.82", %"class.std::__1::vector.90", %"class.std::__1::vector.99", %"class.std::__1::vector.113", %"class.std::__1::vector", %"class.std::__1::vector.68", %"class.std::__1::vector", i32, i8, %"class.std::__1::vector" }
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { i32*, i32*, %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { i32* }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.85" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.84", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.84" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.94" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.92", %"struct.std::__1::array.93", i32, i8, [3 x i8] }>
%"struct.std::__1::array.92" = type { [17 x i32] }
%"struct.std::__1::array.93" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.99" = type { %"class.std::__1::__vector_base.100" }
%"class.std::__1::__vector_base.100" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.108" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.101" }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { i16*, i16*, %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { i16* }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.113" = type { %"class.std::__1::__vector_base.114" }
%"class.std::__1::__vector_base.114" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.130" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.115", i32, %"class.std::__1::vector.116", %"class.std::__1::vector.123" }
%"struct.std::__1::array.115" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.116" = type { %"class.std::__1::__vector_base.117" }
%"class.std::__1::__vector_base.117" = type { i32*, i32*, %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { i32* }
%"class.std::__1::vector.123" = type { %"class.std::__1::__vector_base.124" }
%"class.std::__1::__vector_base.124" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.125" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.68" = type { %"class.std::__1::__vector_base.69" }
%"class.std::__1::__vector_base.69" = type { %"class.std::__1::vector"*, %"class.std::__1::vector"*, %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.std::__1::vector"* }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::vector.136" = type { %"class.std::__1::__vector_base.137" }
%"class.std::__1::__vector_base.137" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.143" = type { %"class.std::__1::__vector_base.144" }
%"class.std::__1::__vector_base.144" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.jxl::ImageBundle"* }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.150"], %"class.std::__1::vector.116", %"class.std::__1::vector", i64, i64 }
%"class.std::__1::vector.150" = type { %"class.std::__1::__vector_base.151" }
%"class.std::__1::__vector_base.151" = type { i32*, i32*, %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { i32* }

@_ZN3jxl11BlockCtxMap14kDefaultCtxMapE = external local_unnamed_addr constant [39 x i8], align 16
@.str = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [56 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_context_map.cc\00", align 1
@.str.2 = private unnamed_addr constant [57 x i8] c"U32Coder::Write(kDCThresholdDist, PackSigned(i), writer)\00", align 1
@.str.3 = private unnamed_addr constant [49 x i8] c"U32Coder::Write(kQFThresholdDist, i - 1, writer)\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"index < mtf.size()\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl16EncodeContextMapERKNSt3__16vectorIhNS0_9allocatorIhEEEEmPNS_9BitWriterE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), i64, %"struct.jxl::BitWriter"*) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector", align 16
  %5 = alloca %"class.std::__1::vector", align 16
  %6 = alloca %"class.std::__1::vector.3", align 8
  %7 = alloca %"class.std::__1::vector.3", align 8
  %8 = alloca %"struct.jxl::EntropyEncodingData", align 8
  %9 = alloca %"class.std::__1::vector", align 8
  %10 = alloca %"struct.jxl::HistogramParams", align 8
  %11 = icmp eq i64 %1, 1
  br i1 %11, label %12, label %13

12:                                               ; preds = %3
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %2, i64 1, i64 1) #9
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %2, i64 2, i64 0) #9
  br label %718

13:                                               ; preds = %3
  %14 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #9
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %19 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 24, i1 false)
  %20 = load i8*, i8** %18, align 8, !noalias !2
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %22 = load i8*, i8** %21, align 8, !noalias !2
  %23 = icmp eq i8* %20, %22
  %24 = ptrtoint i8* %22 to i64
  %25 = ptrtoint i8* %20 to i64
  br i1 %23, label %26, label %38

26:                                               ; preds = %13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 0, i64 24, i1 false) #9, !alias.scope !2
  %27 = sub i64 %24, %25
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %231, label %29

29:                                               ; preds = %26
  %30 = icmp slt i64 %27, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %29
  %32 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %32) #10
  unreachable

33:                                               ; preds = %29
  %34 = tail call i8* @_Znwm(i64 %27) #11
  store i8* %34, i8** %15, align 16, !alias.scope !2
  %35 = getelementptr inbounds i8, i8* %34, i64 %27
  store i8* %35, i8** %17, align 16, !alias.scope !2
  %36 = bitcast i8** %16 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* align 1 %20, i64 %27, i1 false) #9
  %37 = ptrtoint i8* %35 to i64
  store i64 %37, i64* %36, align 8, !alias.scope !2
  br label %231

38:                                               ; preds = %13
  %39 = getelementptr inbounds i8, i8* %20, i64 1
  %40 = icmp eq i8* %39, %22
  br i1 %40, label %52, label %41

41:                                               ; preds = %38, %41
  %42 = phi i8* [ %50, %41 ], [ %39, %38 ]
  %43 = phi i64 [ %49, %41 ], [ %25, %38 ]
  %44 = ptrtoint i8* %42 to i64
  %45 = inttoptr i64 %43 to i8*
  %46 = load i8, i8* %45, align 1
  %47 = load i8, i8* %42, align 1
  %48 = icmp ult i8 %46, %47
  %49 = select i1 %48, i64 %44, i64 %43
  %50 = getelementptr inbounds i8, i8* %42, i64 1
  %51 = icmp eq i8* %50, %22
  br i1 %51, label %52, label %41

52:                                               ; preds = %41, %38
  %53 = phi i64 [ %25, %38 ], [ %49, %41 ]
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = add nuw nsw i64 %56, 1
  %58 = tail call i8* @_Znwm(i64 %57) #11
  %59 = ptrtoint i8* %58 to i64
  %60 = sub i64 %57, %59
  %61 = getelementptr i8, i8* %58, i64 %60
  %62 = ptrtoint i8* %61 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %58, i8 0, i64 %62, i1 false) #9, !noalias !2
  %63 = icmp ult i64 %57, 32
  br i1 %63, label %64, label %66

64:                                               ; preds = %126, %52
  %65 = phi i64 [ 0, %52 ], [ %67, %126 ]
  br label %151

66:                                               ; preds = %52
  %67 = and i64 %57, 480
  %68 = add nsw i64 %67, -32
  %69 = lshr exact i64 %68, 5
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp ult i64 %68, 96
  br i1 %72, label %109, label %73

73:                                               ; preds = %66
  %74 = sub nsw i64 %70, %71
  br label %75

75:                                               ; preds = %75, %73
  %76 = phi i64 [ 0, %73 ], [ %105, %75 ]
  %77 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %73 ], [ %106, %75 ]
  %78 = phi i64 [ %74, %73 ], [ %107, %75 ]
  %79 = add <16 x i8> %77, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %80 = getelementptr inbounds i8, i8* %58, i64 %76
  %81 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> %77, <16 x i8>* %81, align 1, !noalias !2
  %82 = getelementptr inbounds i8, i8* %80, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %83, align 1, !noalias !2
  %84 = or i64 %76, 32
  %85 = add <16 x i8> %77, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  %86 = add <16 x i8> %77, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %87 = getelementptr inbounds i8, i8* %58, i64 %84
  %88 = bitcast i8* %87 to <16 x i8>*
  store <16 x i8> %85, <16 x i8>* %88, align 1, !noalias !2
  %89 = getelementptr inbounds i8, i8* %87, i64 16
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %86, <16 x i8>* %90, align 1, !noalias !2
  %91 = or i64 %76, 64
  %92 = add <16 x i8> %77, <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>
  %93 = add <16 x i8> %77, <i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80>
  %94 = getelementptr inbounds i8, i8* %58, i64 %91
  %95 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %95, align 1, !noalias !2
  %96 = getelementptr inbounds i8, i8* %94, i64 16
  %97 = bitcast i8* %96 to <16 x i8>*
  store <16 x i8> %93, <16 x i8>* %97, align 1, !noalias !2
  %98 = or i64 %76, 96
  %99 = add <16 x i8> %77, <i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96>
  %100 = add <16 x i8> %77, <i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112>
  %101 = getelementptr inbounds i8, i8* %58, i64 %98
  %102 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %99, <16 x i8>* %102, align 1, !noalias !2
  %103 = getelementptr inbounds i8, i8* %101, i64 16
  %104 = bitcast i8* %103 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %104, align 1, !noalias !2
  %105 = add i64 %76, 128
  %106 = xor <16 x i8> %77, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %107 = add i64 %78, -4
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %75, !llvm.loop !5

109:                                              ; preds = %75, %66
  %110 = phi i64 [ 0, %66 ], [ %105, %75 ]
  %111 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %66 ], [ %106, %75 ]
  %112 = icmp eq i64 %71, 0
  br i1 %112, label %126, label %113

113:                                              ; preds = %109, %113
  %114 = phi i64 [ %122, %113 ], [ %110, %109 ]
  %115 = phi <16 x i8> [ %123, %113 ], [ %111, %109 ]
  %116 = phi i64 [ %124, %113 ], [ %71, %109 ]
  %117 = add <16 x i8> %115, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %118 = getelementptr inbounds i8, i8* %58, i64 %114
  %119 = bitcast i8* %118 to <16 x i8>*
  store <16 x i8> %115, <16 x i8>* %119, align 1, !noalias !2
  %120 = getelementptr inbounds i8, i8* %118, i64 16
  %121 = bitcast i8* %120 to <16 x i8>*
  store <16 x i8> %117, <16 x i8>* %121, align 1, !noalias !2
  %122 = add i64 %114, 32
  %123 = add <16 x i8> %115, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  %124 = add i64 %116, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %113, !llvm.loop !7

126:                                              ; preds = %113, %109
  %127 = icmp eq i64 %57, %67
  br i1 %127, label %128, label %64

128:                                              ; preds = %151, %126
  %129 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %129) #9, !noalias !2
  %130 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %131 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %132 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %133 = bitcast i8** %21 to i64*
  %134 = bitcast %"class.std::__1::vector"* %0 to i64*
  %135 = sub i64 %24, %25
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %129, i8 0, i64 24, i1 false) #9, !noalias !2
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %142, %128
  br label %164

138:                                              ; preds = %128
  %139 = icmp slt i64 %135, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %138
  %141 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %141) #10
  unreachable

142:                                              ; preds = %138
  %143 = tail call i8* @_Znwm(i64 %135) #11
  store i8* %143, i8** %130, align 16, !noalias !2
  %144 = getelementptr inbounds i8, i8* %143, i64 %135
  store i8* %144, i8** %132, align 16, !noalias !2
  %145 = bitcast i8** %131 to i64*
  %146 = ptrtoint i8* %143 to i64
  %147 = sub i64 %135, %146
  %148 = getelementptr i8, i8* %143, i64 %147
  %149 = ptrtoint i8* %148 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %143, i8 0, i64 %149, i1 false) #9, !noalias !2
  %150 = ptrtoint i8* %144 to i64
  store i64 %150, i64* %145, align 8, !noalias !2
  br label %137

151:                                              ; preds = %64, %151
  %152 = phi i64 [ %155, %151 ], [ %65, %64 ]
  %153 = trunc i64 %152 to i8
  %154 = getelementptr inbounds i8, i8* %58, i64 %152
  store i8 %153, i8* %154, align 1, !noalias !2
  %155 = add nuw nsw i64 %152, 1
  %156 = icmp eq i64 %155, %57
  br i1 %156, label %128, label %151, !llvm.loop !9

157:                                              ; preds = %224
  %158 = bitcast %"class.std::__1::vector"* %4 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 16, !noalias !2
  %160 = bitcast i8** %132 to i64*
  %161 = load i64, i64* %160, align 16, !noalias !2
  %162 = bitcast %"class.std::__1::vector"* %5 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %162, align 16, !alias.scope !2
  %163 = bitcast i8** %17 to i64*
  store i64 %161, i64* %163, align 16, !alias.scope !2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %129) #9, !noalias !2
  tail call void @_ZdlPv(i8* nonnull %58) #11
  br label %231

164:                                              ; preds = %137, %224
  %165 = phi i8* [ %230, %224 ], [ %20, %137 ]
  %166 = phi i64 [ %225, %224 ], [ 0, %137 ]
  %167 = getelementptr inbounds i8, i8* %165, i64 %166
  %168 = load i8, i8* %167, align 1
  br label %169

169:                                              ; preds = %174, %164
  %170 = phi i64 [ 0, %164 ], [ %175, %174 ]
  %171 = getelementptr inbounds i8, i8* %58, i64 %170
  %172 = load i8, i8* %171, align 1, !noalias !2
  %173 = icmp eq i8 %172, %168
  br i1 %173, label %177, label %174

174:                                              ; preds = %169
  %175 = add nuw nsw i64 %170, 1
  %176 = icmp eq i64 %175, %57
  br i1 %176, label %179, label %169

177:                                              ; preds = %169
  %178 = icmp ugt i64 %170, %56
  br i1 %178, label %179, label %182

179:                                              ; preds = %177, %174
  %180 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 58, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #9
  %181 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

182:                                              ; preds = %177
  %183 = getelementptr inbounds i8, i8* %58, i64 %170
  %184 = trunc i64 %170 to i8
  %185 = load i8*, i8** %130, align 16, !noalias !2
  %186 = getelementptr inbounds i8, i8* %185, i64 %166
  store i8 %184, i8* %186, align 1
  %187 = load i8, i8* %183, align 1, !noalias !2
  %188 = icmp eq i64 %170, 0
  br i1 %188, label %224, label %189

189:                                              ; preds = %182
  %190 = add nsw i64 %170, -1
  %191 = and i64 %170, 3
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %202, label %193

193:                                              ; preds = %189, %193
  %194 = phi i64 [ %196, %193 ], [ %170, %189 ]
  %195 = phi i64 [ %200, %193 ], [ %191, %189 ]
  %196 = add nsw i64 %194, -1
  %197 = getelementptr inbounds i8, i8* %58, i64 %196
  %198 = load i8, i8* %197, align 1, !noalias !2
  %199 = getelementptr inbounds i8, i8* %58, i64 %194
  store i8 %198, i8* %199, align 1, !noalias !2
  %200 = add i64 %195, -1
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %202, label %193, !llvm.loop !11

202:                                              ; preds = %193, %189
  %203 = phi i64 [ %170, %189 ], [ %196, %193 ]
  %204 = icmp ult i64 %190, 3
  br i1 %204, label %224, label %205

205:                                              ; preds = %202, %205
  %206 = phi i64 [ %219, %205 ], [ %203, %202 ]
  %207 = add nsw i64 %206, -1
  %208 = getelementptr inbounds i8, i8* %58, i64 %207
  %209 = load i8, i8* %208, align 1, !noalias !2
  %210 = getelementptr inbounds i8, i8* %58, i64 %206
  store i8 %209, i8* %210, align 1, !noalias !2
  %211 = add nsw i64 %206, -2
  %212 = getelementptr inbounds i8, i8* %58, i64 %211
  %213 = load i8, i8* %212, align 1, !noalias !2
  %214 = getelementptr inbounds i8, i8* %58, i64 %207
  store i8 %213, i8* %214, align 1, !noalias !2
  %215 = add nsw i64 %206, -3
  %216 = getelementptr inbounds i8, i8* %58, i64 %215
  %217 = load i8, i8* %216, align 1, !noalias !2
  %218 = getelementptr inbounds i8, i8* %58, i64 %211
  store i8 %217, i8* %218, align 1, !noalias !2
  %219 = add nsw i64 %206, -4
  %220 = getelementptr inbounds i8, i8* %58, i64 %219
  %221 = load i8, i8* %220, align 1, !noalias !2
  %222 = getelementptr inbounds i8, i8* %58, i64 %215
  store i8 %221, i8* %222, align 1, !noalias !2
  %223 = icmp eq i64 %219, 0
  br i1 %223, label %224, label %205

224:                                              ; preds = %202, %205, %182
  store i8 %187, i8* %58, align 1, !noalias !2
  %225 = add nuw i64 %166, 1
  %226 = load i64, i64* %133, align 8, !noalias !2
  %227 = load i64, i64* %134, align 8, !noalias !2
  %228 = sub i64 %226, %227
  %229 = icmp ult i64 %225, %228
  %230 = inttoptr i64 %227 to i8*
  br i1 %229, label %164, label %157

231:                                              ; preds = %26, %33, %157
  %232 = bitcast %"class.std::__1::vector.3"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %232) #9
  %233 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %6, i64 0, i32 0, i32 0
  %234 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %6, i64 0, i32 0, i32 1
  %235 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %236 = tail call i8* @_Znwm(i64 24) #11
  %237 = bitcast %"class.std::__1::vector.3"* %6 to i8**
  store i8* %236, i8** %237, align 8
  %238 = getelementptr inbounds i8, i8* %236, i64 24
  %239 = bitcast %"class.std::__1::vector.5"** %235 to i8**
  store i8* %238, i8** %239, align 8
  %240 = bitcast %"class.std::__1::vector.5"** %234 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %236, i8 0, i64 24, i1 false) #9
  %241 = ptrtoint i8* %238 to i64
  store i64 %241, i64* %240, align 8
  %242 = bitcast %"class.std::__1::vector.3"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %242) #9
  %243 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %7, i64 0, i32 0, i32 0
  %244 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %7, i64 0, i32 0, i32 1
  %245 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %246 = tail call i8* @_Znwm(i64 24) #11
  %247 = bitcast %"class.std::__1::vector.3"* %7 to i8**
  store i8* %246, i8** %247, align 8
  %248 = getelementptr inbounds i8, i8* %246, i64 24
  %249 = bitcast %"class.std::__1::vector.5"** %245 to i8**
  store i8* %248, i8** %249, align 8
  %250 = bitcast %"class.std::__1::vector.5"** %244 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %246, i8 0, i64 24, i1 false) #9
  %251 = ptrtoint i8* %248 to i64
  store i64 %251, i64* %250, align 8
  %252 = bitcast %"struct.jxl::EntropyEncodingData"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %252) #9
  %253 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %253, i8 -86, i64 80, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %252, i8 0, i64 24, i1 false) #9
  %254 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 2
  %255 = bitcast %"class.std::__1::vector.25"* %254 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %255, i8 0, i64 24, i1 false) #9
  %256 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 3
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %256) #9
  %257 = bitcast %"class.std::__1::vector"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %257) #9
  %258 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  %259 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %257, i8 0, i64 24, i1 false) #9
  %260 = bitcast i8** %21 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = bitcast %"class.std::__1::vector"* %0 to i64*
  %263 = load i64, i64* %262, align 8
  %264 = icmp eq i64 %261, %263
  br i1 %264, label %265, label %271

265:                                              ; preds = %351, %231
  %266 = bitcast i8** %16 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = bitcast %"class.std::__1::vector"* %5 to i64*
  %269 = load i64, i64* %268, align 16
  %270 = icmp eq i64 %267, %269
  br i1 %270, label %357, label %380

271:                                              ; preds = %231, %351
  %272 = phi i64 [ %354, %351 ], [ %263, %231 ]
  %273 = phi i64 [ %352, %351 ], [ 0, %231 ]
  %274 = inttoptr i64 %272 to i8*
  %275 = load %"class.std::__1::vector.5"*, %"class.std::__1::vector.5"** %233, align 8
  %276 = getelementptr inbounds i8, i8* %274, i64 %273
  %277 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %275, i64 0, i32 0, i32 1
  %278 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %277, align 8
  %279 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %275, i64 0, i32 0, i32 2, i32 0, i32 0
  %280 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %279, align 8
  %281 = icmp ult %"struct.jxl::Token"* %278, %280
  %282 = ptrtoint %"struct.jxl::Token"* %280 to i64
  br i1 %281, label %283, label %291

283:                                              ; preds = %271
  %284 = load i8, i8* %276, align 1
  %285 = zext i8 %284 to i32
  %286 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %278, i64 0, i32 0
  store i32 0, i32* %286, align 4
  %287 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %278, i64 0, i32 1
  store i32 %285, i32* %287, align 4
  %288 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %278, i64 1
  %289 = ptrtoint %"struct.jxl::Token"* %288 to i64
  %290 = bitcast %"struct.jxl::Token"** %277 to i64*
  store i64 %289, i64* %290, align 8
  br label %351

291:                                              ; preds = %271
  %292 = ptrtoint %"struct.jxl::Token"* %278 to i64
  %293 = bitcast %"struct.jxl::Token"** %277 to i64*
  %294 = bitcast %"class.std::__1::vector.5"* %275 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = sub i64 %292, %295
  %297 = ashr exact i64 %296, 3
  %298 = add nsw i64 %297, 1
  %299 = icmp ugt i64 %298, 2305843009213693951
  br i1 %299, label %300, label %302

300:                                              ; preds = %291
  %301 = bitcast %"class.std::__1::vector.5"* %275 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %301) #10
  unreachable

302:                                              ; preds = %291
  %303 = bitcast %"struct.jxl::Token"** %279 to i64*
  %304 = sub i64 %282, %295
  %305 = ashr exact i64 %304, 3
  %306 = icmp ult i64 %305, 1152921504606846975
  br i1 %306, label %307, label %315

307:                                              ; preds = %302
  %308 = ashr exact i64 %304, 2
  %309 = icmp ult i64 %308, %298
  %310 = select i1 %309, i64 %298, i64 %308
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %320, label %312

312:                                              ; preds = %307
  %313 = icmp ugt i64 %310, 2305843009213693951
  br i1 %313, label %314, label %315

314:                                              ; preds = %312
  call void @abort() #10
  unreachable

315:                                              ; preds = %312, %302
  %316 = phi i64 [ %310, %312 ], [ 2305843009213693951, %302 ]
  %317 = shl i64 %316, 3
  %318 = call i8* @_Znwm(i64 %317) #11
  %319 = bitcast i8* %318 to %"struct.jxl::Token"*
  br label %320

320:                                              ; preds = %315, %307
  %321 = phi i64 [ %316, %315 ], [ 0, %307 ]
  %322 = phi %"struct.jxl::Token"* [ %319, %315 ], [ null, %307 ]
  %323 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %322, i64 %297
  %324 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %322, i64 %321
  %325 = ptrtoint %"struct.jxl::Token"* %324 to i64
  %326 = load i8, i8* %276, align 1
  %327 = zext i8 %326 to i32
  %328 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %323, i64 0, i32 0
  store i32 0, i32* %328, align 4
  %329 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %322, i64 %297, i32 1
  store i32 %327, i32* %329, align 4
  %330 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %323, i64 1
  %331 = ptrtoint %"struct.jxl::Token"* %330 to i64
  %332 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %275, i64 0, i32 0, i32 0
  %333 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %332, align 8
  %334 = load i64, i64* %293, align 8
  %335 = ptrtoint %"struct.jxl::Token"* %333 to i64
  %336 = sub i64 %334, %335
  %337 = ashr exact i64 %336, 3
  %338 = sub nsw i64 0, %337
  %339 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %323, i64 %338
  %340 = ptrtoint %"struct.jxl::Token"* %339 to i64
  %341 = icmp sgt i64 %336, 0
  br i1 %341, label %342, label %346

342:                                              ; preds = %320
  %343 = bitcast %"struct.jxl::Token"* %339 to i8*
  %344 = bitcast %"struct.jxl::Token"* %333 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %343, i8* align 4 %344, i64 %336, i1 false) #9
  %345 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %332, align 8
  br label %346

346:                                              ; preds = %342, %320
  %347 = phi %"struct.jxl::Token"* [ %333, %320 ], [ %345, %342 ]
  store i64 %340, i64* %294, align 8
  store i64 %331, i64* %293, align 8
  store i64 %325, i64* %303, align 8
  %348 = icmp eq %"struct.jxl::Token"* %347, null
  br i1 %348, label %351, label %349

349:                                              ; preds = %346
  %350 = bitcast %"struct.jxl::Token"* %347 to i8*
  call void @_ZdlPv(i8* %350) #11
  br label %351

351:                                              ; preds = %349, %346, %283
  %352 = add nuw i64 %273, 1
  %353 = load i64, i64* %260, align 8
  %354 = load i64, i64* %262, align 8
  %355 = sub i64 %353, %354
  %356 = icmp ult i64 %352, %355
  br i1 %356, label %271, label %265

357:                                              ; preds = %460, %265
  %358 = bitcast %"struct.jxl::HistogramParams"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %358) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %358, i8 -86, i64 56, i1 false)
  %359 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 0
  store i32 2, i32* %359, align 8
  %360 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 1
  %361 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 2
  store i32 1, i32* %361, align 8
  %362 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 3
  store i32 2, i32* %362, align 4
  %363 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 4
  %364 = bitcast %"class.std::__1::vector.32"* %363 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %364, i8 0, i64 24, i1 false) #9
  %365 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 5
  store i64 -1, i64* %365, align 8
  %366 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 6
  store i8 0, i8* %366, align 8
  store i32 2, i32* %360, align 4
  %367 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %10, i64 1, %"class.std::__1::vector.3"* nonnull dereferenceable(24) %6, %"struct.jxl::EntropyEncodingData"* nonnull %8, %"class.std::__1::vector"* nonnull %9, %"struct.jxl::BitWriter"* null, i64 0, %"struct.jxl::AuxOut"* null) #9
  %368 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %10, i64 1, %"class.std::__1::vector.3"* nonnull dereferenceable(24) %7, %"struct.jxl::EntropyEncodingData"* nonnull %8, %"class.std::__1::vector"* nonnull %9, %"struct.jxl::BitWriter"* null, i64 0, %"struct.jxl::AuxOut"* null) #9
  %369 = icmp ult i64 %368, %367
  %370 = load %"class.std::__1::vector.5"*, %"class.std::__1::vector.5"** %233, align 8
  %371 = bitcast %"class.std::__1::vector.5"* %370 to i64*
  %372 = load i64, i64* %371, align 8
  %373 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %370, i64 0, i32 0, i32 1
  %374 = bitcast %"struct.jxl::Token"** %373 to i64*
  store i64 %372, i64* %374, align 8
  %375 = load i64, i64* %266, align 8
  %376 = load i64, i64* %268, align 16
  %377 = icmp eq i64 %375, %376
  br i1 %377, label %466, label %378

378:                                              ; preds = %357
  %379 = inttoptr i64 %372 to %"struct.jxl::Token"*
  br label %482

380:                                              ; preds = %265, %460
  %381 = phi i64 [ %463, %460 ], [ %269, %265 ]
  %382 = phi i64 [ %461, %460 ], [ 0, %265 ]
  %383 = inttoptr i64 %381 to i8*
  %384 = load %"class.std::__1::vector.5"*, %"class.std::__1::vector.5"** %243, align 8
  %385 = getelementptr inbounds i8, i8* %383, i64 %382
  %386 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %384, i64 0, i32 0, i32 1
  %387 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %386, align 8
  %388 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %384, i64 0, i32 0, i32 2, i32 0, i32 0
  %389 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %388, align 8
  %390 = icmp ult %"struct.jxl::Token"* %387, %389
  %391 = ptrtoint %"struct.jxl::Token"* %389 to i64
  br i1 %390, label %392, label %400

392:                                              ; preds = %380
  %393 = load i8, i8* %385, align 1
  %394 = zext i8 %393 to i32
  %395 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %387, i64 0, i32 0
  store i32 0, i32* %395, align 4
  %396 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %387, i64 0, i32 1
  store i32 %394, i32* %396, align 4
  %397 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %387, i64 1
  %398 = ptrtoint %"struct.jxl::Token"* %397 to i64
  %399 = bitcast %"struct.jxl::Token"** %386 to i64*
  store i64 %398, i64* %399, align 8
  br label %460

400:                                              ; preds = %380
  %401 = ptrtoint %"struct.jxl::Token"* %387 to i64
  %402 = bitcast %"struct.jxl::Token"** %386 to i64*
  %403 = bitcast %"class.std::__1::vector.5"* %384 to i64*
  %404 = load i64, i64* %403, align 8
  %405 = sub i64 %401, %404
  %406 = ashr exact i64 %405, 3
  %407 = add nsw i64 %406, 1
  %408 = icmp ugt i64 %407, 2305843009213693951
  br i1 %408, label %409, label %411

409:                                              ; preds = %400
  %410 = bitcast %"class.std::__1::vector.5"* %384 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %410) #10
  unreachable

411:                                              ; preds = %400
  %412 = bitcast %"struct.jxl::Token"** %388 to i64*
  %413 = sub i64 %391, %404
  %414 = ashr exact i64 %413, 3
  %415 = icmp ult i64 %414, 1152921504606846975
  br i1 %415, label %416, label %424

416:                                              ; preds = %411
  %417 = ashr exact i64 %413, 2
  %418 = icmp ult i64 %417, %407
  %419 = select i1 %418, i64 %407, i64 %417
  %420 = icmp eq i64 %419, 0
  br i1 %420, label %429, label %421

421:                                              ; preds = %416
  %422 = icmp ugt i64 %419, 2305843009213693951
  br i1 %422, label %423, label %424

423:                                              ; preds = %421
  call void @abort() #10
  unreachable

424:                                              ; preds = %421, %411
  %425 = phi i64 [ %419, %421 ], [ 2305843009213693951, %411 ]
  %426 = shl i64 %425, 3
  %427 = call i8* @_Znwm(i64 %426) #11
  %428 = bitcast i8* %427 to %"struct.jxl::Token"*
  br label %429

429:                                              ; preds = %424, %416
  %430 = phi i64 [ %425, %424 ], [ 0, %416 ]
  %431 = phi %"struct.jxl::Token"* [ %428, %424 ], [ null, %416 ]
  %432 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %431, i64 %406
  %433 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %431, i64 %430
  %434 = ptrtoint %"struct.jxl::Token"* %433 to i64
  %435 = load i8, i8* %385, align 1
  %436 = zext i8 %435 to i32
  %437 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %432, i64 0, i32 0
  store i32 0, i32* %437, align 4
  %438 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %431, i64 %406, i32 1
  store i32 %436, i32* %438, align 4
  %439 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %432, i64 1
  %440 = ptrtoint %"struct.jxl::Token"* %439 to i64
  %441 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %384, i64 0, i32 0, i32 0
  %442 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %441, align 8
  %443 = load i64, i64* %402, align 8
  %444 = ptrtoint %"struct.jxl::Token"* %442 to i64
  %445 = sub i64 %443, %444
  %446 = ashr exact i64 %445, 3
  %447 = sub nsw i64 0, %446
  %448 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %432, i64 %447
  %449 = ptrtoint %"struct.jxl::Token"* %448 to i64
  %450 = icmp sgt i64 %445, 0
  br i1 %450, label %451, label %455

451:                                              ; preds = %429
  %452 = bitcast %"struct.jxl::Token"* %448 to i8*
  %453 = bitcast %"struct.jxl::Token"* %442 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %452, i8* align 4 %453, i64 %445, i1 false) #9
  %454 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %441, align 8
  br label %455

455:                                              ; preds = %451, %429
  %456 = phi %"struct.jxl::Token"* [ %442, %429 ], [ %454, %451 ]
  store i64 %449, i64* %403, align 8
  store i64 %440, i64* %402, align 8
  store i64 %434, i64* %412, align 8
  %457 = icmp eq %"struct.jxl::Token"* %456, null
  br i1 %457, label %460, label %458

458:                                              ; preds = %455
  %459 = bitcast %"struct.jxl::Token"* %456 to i8*
  call void @_ZdlPv(i8* %459) #11
  br label %460

460:                                              ; preds = %458, %455, %392
  %461 = add nuw i64 %382, 1
  %462 = load i64, i64* %266, align 8
  %463 = load i64, i64* %268, align 16
  %464 = sub i64 %462, %463
  %465 = icmp ult i64 %461, %464
  br i1 %465, label %380, label %357

466:                                              ; preds = %564, %357
  %467 = call i64 @llvm.ctlz.i64(i64 %1, i1 true) #9, !range !12
  %468 = xor i64 %467, 63
  %469 = call i64 @llvm.ctpop.i64(i64 %1) #9, !range !12
  %470 = icmp ugt i64 %469, 1
  %471 = zext i1 %470 to i64
  %472 = add nuw nsw i64 %468, %471
  %473 = load i64, i64* %260, align 8
  %474 = load i64, i64* %262, align 8
  %475 = sub i64 %473, %474
  %476 = mul i64 %475, %472
  %477 = icmp ult i64 %472, 4
  %478 = icmp ult i64 %476, %367
  %479 = and i1 %477, %478
  %480 = icmp ult i64 %476, %368
  %481 = and i1 %480, %479
  br i1 %481, label %574, label %590

482:                                              ; preds = %570, %378
  %483 = phi %"struct.jxl::Token"* [ %573, %570 ], [ %379, %378 ]
  %484 = phi i64 [ %567, %570 ], [ %376, %378 ]
  %485 = phi %"class.std::__1::vector.5"* [ %571, %570 ], [ %370, %378 ]
  %486 = phi i64 [ %565, %570 ], [ 0, %378 ]
  %487 = inttoptr i64 %484 to i8*
  %488 = load i8*, i8** %18, align 8
  %489 = select i1 %369, i8* %487, i8* %488
  %490 = getelementptr inbounds i8, i8* %489, i64 %486
  %491 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %485, i64 0, i32 0, i32 1
  %492 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %485, i64 0, i32 0, i32 2, i32 0, i32 0
  %493 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %492, align 8
  %494 = icmp ult %"struct.jxl::Token"* %483, %493
  %495 = ptrtoint %"struct.jxl::Token"* %493 to i64
  br i1 %494, label %496, label %504

496:                                              ; preds = %482
  %497 = load i8, i8* %490, align 1
  %498 = zext i8 %497 to i32
  %499 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %483, i64 0, i32 0
  store i32 0, i32* %499, align 4
  %500 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %483, i64 0, i32 1
  store i32 %498, i32* %500, align 4
  %501 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %483, i64 1
  %502 = ptrtoint %"struct.jxl::Token"* %501 to i64
  %503 = bitcast %"struct.jxl::Token"** %491 to i64*
  store i64 %502, i64* %503, align 8
  br label %564

504:                                              ; preds = %482
  %505 = bitcast %"struct.jxl::Token"** %491 to i64*
  %506 = load i64, i64* %505, align 8
  %507 = bitcast %"class.std::__1::vector.5"* %485 to i64*
  %508 = load i64, i64* %507, align 8
  %509 = sub i64 %506, %508
  %510 = ashr exact i64 %509, 3
  %511 = add nsw i64 %510, 1
  %512 = icmp ugt i64 %511, 2305843009213693951
  br i1 %512, label %513, label %515

513:                                              ; preds = %504
  %514 = bitcast %"class.std::__1::vector.5"* %485 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %514) #10
  unreachable

515:                                              ; preds = %504
  %516 = bitcast %"struct.jxl::Token"** %492 to i64*
  %517 = sub i64 %495, %508
  %518 = ashr exact i64 %517, 3
  %519 = icmp ult i64 %518, 1152921504606846975
  br i1 %519, label %520, label %528

520:                                              ; preds = %515
  %521 = ashr exact i64 %517, 2
  %522 = icmp ult i64 %521, %511
  %523 = select i1 %522, i64 %511, i64 %521
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %533, label %525

525:                                              ; preds = %520
  %526 = icmp ugt i64 %523, 2305843009213693951
  br i1 %526, label %527, label %528

527:                                              ; preds = %525
  call void @abort() #10
  unreachable

528:                                              ; preds = %525, %515
  %529 = phi i64 [ %523, %525 ], [ 2305843009213693951, %515 ]
  %530 = shl i64 %529, 3
  %531 = call i8* @_Znwm(i64 %530) #11
  %532 = bitcast i8* %531 to %"struct.jxl::Token"*
  br label %533

533:                                              ; preds = %528, %520
  %534 = phi i64 [ %529, %528 ], [ 0, %520 ]
  %535 = phi %"struct.jxl::Token"* [ %532, %528 ], [ null, %520 ]
  %536 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %535, i64 %510
  %537 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %535, i64 %534
  %538 = ptrtoint %"struct.jxl::Token"* %537 to i64
  %539 = load i8, i8* %490, align 1
  %540 = zext i8 %539 to i32
  %541 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %536, i64 0, i32 0
  store i32 0, i32* %541, align 4
  %542 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %535, i64 %510, i32 1
  store i32 %540, i32* %542, align 4
  %543 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %536, i64 1
  %544 = ptrtoint %"struct.jxl::Token"* %543 to i64
  %545 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %485, i64 0, i32 0, i32 0
  %546 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %545, align 8
  %547 = load i64, i64* %505, align 8
  %548 = ptrtoint %"struct.jxl::Token"* %546 to i64
  %549 = sub i64 %547, %548
  %550 = ashr exact i64 %549, 3
  %551 = sub nsw i64 0, %550
  %552 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %536, i64 %551
  %553 = ptrtoint %"struct.jxl::Token"* %552 to i64
  %554 = icmp sgt i64 %549, 0
  br i1 %554, label %555, label %559

555:                                              ; preds = %533
  %556 = bitcast %"struct.jxl::Token"* %552 to i8*
  %557 = bitcast %"struct.jxl::Token"* %546 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %556, i8* align 4 %557, i64 %549, i1 false) #9
  %558 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %545, align 8
  br label %559

559:                                              ; preds = %555, %533
  %560 = phi %"struct.jxl::Token"* [ %546, %533 ], [ %558, %555 ]
  store i64 %553, i64* %507, align 8
  store i64 %544, i64* %505, align 8
  store i64 %538, i64* %516, align 8
  %561 = icmp eq %"struct.jxl::Token"* %560, null
  br i1 %561, label %564, label %562

562:                                              ; preds = %559
  %563 = bitcast %"struct.jxl::Token"* %560 to i8*
  call void @_ZdlPv(i8* %563) #11
  br label %564

564:                                              ; preds = %562, %559, %496
  %565 = add nuw i64 %486, 1
  %566 = load i64, i64* %266, align 8
  %567 = load i64, i64* %268, align 16
  %568 = sub i64 %566, %567
  %569 = icmp ult i64 %565, %568
  br i1 %569, label %570, label %466

570:                                              ; preds = %564
  %571 = load %"class.std::__1::vector.5"*, %"class.std::__1::vector.5"** %233, align 8
  %572 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %571, i64 0, i32 0, i32 1
  %573 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %572, align 8
  br label %482

574:                                              ; preds = %466
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %2, i64 1, i64 1) #9
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %2, i64 2, i64 %472) #9
  %575 = load i64, i64* %260, align 8
  %576 = load i64, i64* %262, align 8
  %577 = icmp eq i64 %575, %576
  br i1 %577, label %595, label %578

578:                                              ; preds = %574, %578
  %579 = phi i64 [ %587, %578 ], [ %576, %574 ]
  %580 = phi i64 [ %585, %578 ], [ 0, %574 ]
  %581 = inttoptr i64 %579 to i8*
  %582 = getelementptr inbounds i8, i8* %581, i64 %580
  %583 = load i8, i8* %582, align 1
  %584 = zext i8 %583 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %2, i64 %472, i64 %584) #9
  %585 = add nuw i64 %580, 1
  %586 = load i64, i64* %260, align 8
  %587 = load i64, i64* %262, align 8
  %588 = sub i64 %586, %587
  %589 = icmp ult i64 %585, %588
  br i1 %589, label %578, label %595

590:                                              ; preds = %466
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %2, i64 1, i64 0) #9
  %591 = zext i1 %369 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %2, i64 1, i64 %591) #9
  %592 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %10, i64 1, %"class.std::__1::vector.3"* nonnull dereferenceable(24) %6, %"struct.jxl::EntropyEncodingData"* nonnull %8, %"class.std::__1::vector"* nonnull %9, %"struct.jxl::BitWriter"* %2, i64 0, %"struct.jxl::AuxOut"* null) #9
  %593 = load %"class.std::__1::vector.5"*, %"class.std::__1::vector.5"** %233, align 8
  %594 = call i64 @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterE(%"class.std::__1::vector.5"* dereferenceable(24) %593, %"struct.jxl::EntropyEncodingData"* nonnull dereferenceable(104) %8, %"class.std::__1::vector"* nonnull dereferenceable(24) %9, %"struct.jxl::BitWriter"* %2) #9
  br label %595

595:                                              ; preds = %578, %574, %590
  %596 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 4, i32 0, i32 0
  %597 = load i64*, i64** %596, align 8
  %598 = icmp eq i64* %597, null
  br i1 %598, label %604, label %599

599:                                              ; preds = %595
  %600 = ptrtoint i64* %597 to i64
  %601 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 4, i32 0, i32 1
  %602 = bitcast i64** %601 to i64*
  store i64 %600, i64* %602, align 8
  %603 = bitcast i64* %597 to i8*
  call void @_ZdlPv(i8* %603) #11
  br label %604

604:                                              ; preds = %595, %599
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %358) #9
  %605 = load i8*, i8** %258, align 8
  %606 = icmp eq i8* %605, null
  br i1 %606, label %610, label %607

607:                                              ; preds = %604
  %608 = ptrtoint i8* %605 to i64
  %609 = bitcast i8** %259 to i64*
  store i64 %608, i64* %609, align 8
  call void @_ZdlPv(i8* nonnull %605) #11
  br label %610

610:                                              ; preds = %604, %607
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %257) #9
  %611 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 2, i32 0, i32 0
  %612 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %611, align 8
  %613 = icmp eq %"struct.jxl::HybridUintConfig"* %612, null
  br i1 %613, label %619, label %614

614:                                              ; preds = %610
  %615 = ptrtoint %"struct.jxl::HybridUintConfig"* %612 to i64
  %616 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 2, i32 0, i32 1
  %617 = bitcast %"struct.jxl::HybridUintConfig"** %616 to i64*
  store i64 %615, i64* %617, align 8
  %618 = bitcast %"struct.jxl::HybridUintConfig"* %612 to i8*
  call void @_ZdlPv(i8* %618) #11
  br label %619

619:                                              ; preds = %614, %610
  %620 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 0, i32 0, i32 0
  %621 = load %"class.std::__1::vector.19"*, %"class.std::__1::vector.19"** %620, align 8
  %622 = icmp eq %"class.std::__1::vector.19"* %621, null
  br i1 %622, label %664, label %623

623:                                              ; preds = %619
  %624 = bitcast %"class.std::__1::vector.19"* %621 to i8*
  %625 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 0, i32 0, i32 1
  %626 = load %"class.std::__1::vector.19"*, %"class.std::__1::vector.19"** %625, align 8
  %627 = icmp eq %"class.std::__1::vector.19"* %626, %621
  br i1 %627, label %662, label %628

628:                                              ; preds = %623, %657
  %629 = phi %"class.std::__1::vector.19"* [ %630, %657 ], [ %626, %623 ]
  %630 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %629, i64 -1
  %631 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %630, i64 0, i32 0, i32 0
  %632 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %631, align 8
  %633 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %632, null
  br i1 %633, label %657, label %634

634:                                              ; preds = %628
  %635 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %632 to i8*
  %636 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %629, i64 -1, i32 0, i32 1
  %637 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %636, align 8
  %638 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %637, %632
  br i1 %638, label %655, label %639

639:                                              ; preds = %634, %650
  %640 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %641, %650 ], [ %637, %634 ]
  %641 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %640, i64 -1
  %642 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %640, i64 -1, i32 2, i32 0, i32 0
  %643 = load i16*, i16** %642, align 8
  %644 = icmp eq i16* %643, null
  br i1 %644, label %650, label %645

645:                                              ; preds = %639
  %646 = ptrtoint i16* %643 to i64
  %647 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %640, i64 -1, i32 2, i32 0, i32 1
  %648 = bitcast i16** %647 to i64*
  store i64 %646, i64* %648, align 8
  %649 = bitcast i16* %643 to i8*
  call void @_ZdlPv(i8* %649) #11
  br label %650

650:                                              ; preds = %645, %639
  %651 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %641, %632
  br i1 %651, label %652, label %639

652:                                              ; preds = %650
  %653 = bitcast %"class.std::__1::vector.19"* %630 to i8**
  %654 = load i8*, i8** %653, align 8
  br label %655

655:                                              ; preds = %652, %634
  %656 = phi i8* [ %654, %652 ], [ %635, %634 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %632, %"struct.jxl::ANSEncSymbolInfo"** %636, align 8
  call void @_ZdlPv(i8* %656) #11
  br label %657

657:                                              ; preds = %655, %628
  %658 = icmp eq %"class.std::__1::vector.19"* %630, %621
  br i1 %658, label %659, label %628

659:                                              ; preds = %657
  %660 = bitcast %"struct.jxl::EntropyEncodingData"* %8 to i8**
  %661 = load i8*, i8** %660, align 8
  br label %662

662:                                              ; preds = %659, %623
  %663 = phi i8* [ %661, %659 ], [ %624, %623 ]
  store %"class.std::__1::vector.19"* %621, %"class.std::__1::vector.19"** %625, align 8
  call void @_ZdlPv(i8* %663) #11
  br label %664

664:                                              ; preds = %619, %662
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %252) #9
  %665 = load %"class.std::__1::vector.5"*, %"class.std::__1::vector.5"** %243, align 8
  %666 = icmp eq %"class.std::__1::vector.5"* %665, null
  br i1 %666, label %688, label %667

667:                                              ; preds = %664
  %668 = bitcast %"class.std::__1::vector.5"* %665 to i8*
  %669 = load %"class.std::__1::vector.5"*, %"class.std::__1::vector.5"** %244, align 8
  %670 = icmp eq %"class.std::__1::vector.5"* %669, %665
  br i1 %670, label %686, label %671

671:                                              ; preds = %667, %682
  %672 = phi %"class.std::__1::vector.5"* [ %673, %682 ], [ %669, %667 ]
  %673 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %672, i64 -1
  %674 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %673, i64 0, i32 0, i32 0
  %675 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %674, align 8
  %676 = icmp eq %"struct.jxl::Token"* %675, null
  br i1 %676, label %682, label %677

677:                                              ; preds = %671
  %678 = ptrtoint %"struct.jxl::Token"* %675 to i64
  %679 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %672, i64 -1, i32 0, i32 1
  %680 = bitcast %"struct.jxl::Token"** %679 to i64*
  store i64 %678, i64* %680, align 8
  %681 = bitcast %"struct.jxl::Token"* %675 to i8*
  call void @_ZdlPv(i8* %681) #11
  br label %682

682:                                              ; preds = %677, %671
  %683 = icmp eq %"class.std::__1::vector.5"* %673, %665
  br i1 %683, label %684, label %671

684:                                              ; preds = %682
  %685 = load i8*, i8** %247, align 8
  br label %686

686:                                              ; preds = %684, %667
  %687 = phi i8* [ %685, %684 ], [ %668, %667 ]
  store %"class.std::__1::vector.5"* %665, %"class.std::__1::vector.5"** %244, align 8
  call void @_ZdlPv(i8* %687) #11
  br label %688

688:                                              ; preds = %664, %686
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %242) #9
  %689 = load %"class.std::__1::vector.5"*, %"class.std::__1::vector.5"** %233, align 8
  %690 = icmp eq %"class.std::__1::vector.5"* %689, null
  br i1 %690, label %712, label %691

691:                                              ; preds = %688
  %692 = bitcast %"class.std::__1::vector.5"* %689 to i8*
  %693 = load %"class.std::__1::vector.5"*, %"class.std::__1::vector.5"** %234, align 8
  %694 = icmp eq %"class.std::__1::vector.5"* %693, %689
  br i1 %694, label %710, label %695

695:                                              ; preds = %691, %706
  %696 = phi %"class.std::__1::vector.5"* [ %697, %706 ], [ %693, %691 ]
  %697 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %696, i64 -1
  %698 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %697, i64 0, i32 0, i32 0
  %699 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %698, align 8
  %700 = icmp eq %"struct.jxl::Token"* %699, null
  br i1 %700, label %706, label %701

701:                                              ; preds = %695
  %702 = ptrtoint %"struct.jxl::Token"* %699 to i64
  %703 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %696, i64 -1, i32 0, i32 1
  %704 = bitcast %"struct.jxl::Token"** %703 to i64*
  store i64 %702, i64* %704, align 8
  %705 = bitcast %"struct.jxl::Token"* %699 to i8*
  call void @_ZdlPv(i8* %705) #11
  br label %706

706:                                              ; preds = %701, %695
  %707 = icmp eq %"class.std::__1::vector.5"* %697, %689
  br i1 %707, label %708, label %695

708:                                              ; preds = %706
  %709 = load i8*, i8** %237, align 8
  br label %710

710:                                              ; preds = %708, %691
  %711 = phi i8* [ %709, %708 ], [ %692, %691 ]
  store %"class.std::__1::vector.5"* %689, %"class.std::__1::vector.5"** %234, align 8
  call void @_ZdlPv(i8* %711) #11
  br label %712

712:                                              ; preds = %688, %710
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %232) #9
  %713 = load i8*, i8** %15, align 16
  %714 = icmp eq i8* %713, null
  br i1 %714, label %717, label %715

715:                                              ; preds = %712
  %716 = ptrtoint i8* %713 to i64
  store i64 %716, i64* %266, align 8
  call void @_ZdlPv(i8* nonnull %713) #11
  br label %717

717:                                              ; preds = %712, %715
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #9
  br label %718

718:                                              ; preds = %717, %12
  ret void
}

declare void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"*, i64, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* dereferenceable(56), i64, %"class.std::__1::vector.3"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"*, %"class.std::__1::vector"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare i64 @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterE(%"class.std::__1::vector.5"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"* dereferenceable(104), %"class.std::__1::vector"* dereferenceable(24), %"struct.jxl::BitWriter"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl17EncodeBlockCtxMapERKNS_11BlockCtxMapEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::BlockCtxMap"* nocapture readonly dereferenceable(136), %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %4 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %5 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 2
  %7 = bitcast %"class.jxl::BitWriter::Allotment"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 40, i1 false)
  %8 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"struct.jxl::BlockCtxMap"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 1
  %16 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 1, i32 0, i32 1
  %17 = bitcast i32** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.std::__1::vector.150"* %15 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %18, %20
  %22 = ashr exact i64 %21, 2
  %23 = add nsw i64 %22, %14
  %24 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 2
  %25 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 2, i32 0, i32 1
  %26 = bitcast i32** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.std::__1::vector.150"* %24 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %27, %29
  %31 = ashr exact i64 %30, 2
  %32 = add nsw i64 %23, %31
  %33 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 1, i32 0, i32 1
  %34 = bitcast i32** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.std::__1::vector.116"* %5 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = ashr exact i64 %38, 2
  %40 = add nsw i64 %32, %39
  %41 = mul i64 %40, 34
  %42 = or i64 %41, 1
  %43 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 2, i32 0, i32 1
  %44 = bitcast i8** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast %"class.std::__1::vector"* %6 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %45, %47
  %49 = mul i64 %48, 10
  %50 = add i64 %49, 1032
  %51 = add i64 %50, %42
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %4, %"struct.jxl::BitWriter"* %1, i64 %51) #9
  %52 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %53 = load i32*, i32** %52, align 8
  %54 = load i32*, i32** %8, align 8
  %55 = icmp eq i32* %53, %54
  br i1 %55, label %56, label %91

56:                                               ; preds = %3
  %57 = getelementptr inbounds %"class.std::__1::vector.150", %"class.std::__1::vector.150"* %15, i64 0, i32 0, i32 0
  %58 = load i32*, i32** %57, align 8
  %59 = load i32*, i32** %16, align 8
  %60 = icmp eq i32* %58, %59
  br i1 %60, label %61, label %91

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.std::__1::vector.150", %"class.std::__1::vector.150"* %24, i64 0, i32 0, i32 0
  %63 = load i32*, i32** %62, align 8
  %64 = load i32*, i32** %25, align 8
  %65 = icmp eq i32* %63, %64
  br i1 %65, label %66, label %91

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.std::__1::vector.116", %"class.std::__1::vector.116"* %5, i64 0, i32 0, i32 0
  %68 = load i32*, i32** %67, align 8
  %69 = load i32*, i32** %33, align 8
  %70 = icmp eq i32* %68, %69
  br i1 %70, label %71, label %91

71:                                               ; preds = %66
  %72 = load i64, i64* %44, align 8
  %73 = load i64, i64* %46, align 8
  %74 = sub i64 %72, %73
  %75 = icmp eq i64 %74, 21
  %76 = inttoptr i64 %73 to i8*
  %77 = inttoptr i64 %72 to i8*
  br i1 %75, label %78, label %91

78:                                               ; preds = %71
  %79 = icmp eq i8* %76, %77
  br i1 %79, label %90, label %80

80:                                               ; preds = %78, %86
  %81 = phi i8* [ %88, %86 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @_ZN3jxl11BlockCtxMap14kDefaultCtxMapE, i64 0, i64 0), %78 ]
  %82 = phi i8* [ %87, %86 ], [ %76, %78 ]
  %83 = load i8, i8* %82, align 1
  %84 = load i8, i8* %81, align 1
  %85 = icmp eq i8 %83, %84
  br i1 %85, label %86, label %91

86:                                               ; preds = %80
  %87 = getelementptr inbounds i8, i8* %82, i64 1
  %88 = getelementptr inbounds i8, i8* %81, i64 1
  %89 = icmp eq i8* %87, %77
  br i1 %89, label %90, label %80

90:                                               ; preds = %86, %78
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 1, i64 1) #9
  br label %139

91:                                               ; preds = %80, %3, %56, %61, %66, %71
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 1, i64 0) #9
  %92 = load i64, i64* %9, align 8
  %93 = bitcast %"struct.jxl::BlockCtxMap"* %0 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %92, %94
  %96 = ashr exact i64 %95, 2
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 4, i64 %96) #9
  %97 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %98 = load i32*, i32** %97, align 8
  %99 = load i32*, i32** %8, align 8
  %100 = icmp eq i32* %98, %99
  br i1 %100, label %103, label %112

101:                                              ; preds = %112
  %102 = icmp eq i32* %120, %99
  br i1 %102, label %103, label %112

103:                                              ; preds = %101, %91
  %104 = load i64, i64* %17, align 8
  %105 = load i64, i64* %19, align 8
  %106 = sub i64 %104, %105
  %107 = ashr exact i64 %106, 2
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 4, i64 %107) #9
  %108 = getelementptr inbounds %"class.std::__1::vector.150", %"class.std::__1::vector.150"* %15, i64 0, i32 0, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = load i32*, i32** %16, align 8
  %111 = icmp eq i32* %109, %110
  br i1 %111, label %151, label %140

112:                                              ; preds = %91, %101
  %113 = phi i32* [ %120, %101 ], [ %98, %91 ]
  %114 = load i32, i32* %113, align 4
  %115 = shl i32 %114, 1
  %116 = ashr i32 %114, 31
  %117 = xor i32 %115, %116
  %118 = call i32 @_ZN3jxl8U32Coder5WriteENS_6U32EncEjPNS_9BitWriterE(i64 2229088026627, i64 9044715794080271, i32 %117, %"struct.jxl::BitWriter"* %1) #9
  %119 = icmp eq i32 %118, 0
  %120 = getelementptr inbounds i32, i32* %113, i64 1
  br i1 %119, label %101, label %121

121:                                              ; preds = %112, %140, %160
  %122 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 137, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.2, i64 0, i64 0)) #9
  %123 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

124:                                              ; preds = %129
  %125 = icmp eq i32* %135, %178
  br i1 %125, label %126, label %129

126:                                              ; preds = %124, %171
  %127 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 3
  %128 = load i64, i64* %127, align 8
  call void @_ZN3jxl16EncodeContextMapERKNSt3__16vectorIhNS0_9allocatorIhEEEEmPNS_9BitWriterE(%"class.std::__1::vector"* dereferenceable(24) %6, i64 %128, %"struct.jxl::BitWriter"* %1)
  br label %139

129:                                              ; preds = %171, %124
  %130 = phi i32* [ %135, %124 ], [ %177, %171 ]
  %131 = load i32, i32* %130, align 4
  %132 = add i32 %131, -1
  %133 = call i32 @_ZN3jxl8U32Coder5WriteENS_6U32EncEjPNS_9BitWriterE(i64 558345748481, i64 6077378724228, i32 %132, %"struct.jxl::BitWriter"* %1) #9
  %134 = icmp eq i32 %133, 0
  %135 = getelementptr inbounds i32, i32* %130, i64 1
  br i1 %134, label %124, label %136

136:                                              ; preds = %129
  %137 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 142, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0)) #9
  %138 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

139:                                              ; preds = %126, %90
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %1, %"class.jxl::BitWriter::Allotment"* nonnull %4, i64 8, %"struct.jxl::AuxOut"* %2) #9
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #9
  ret void

140:                                              ; preds = %103, %149
  %141 = phi i32* [ %148, %149 ], [ %109, %103 ]
  %142 = load i32, i32* %141, align 4
  %143 = shl i32 %142, 1
  %144 = ashr i32 %142, 31
  %145 = xor i32 %143, %144
  %146 = call i32 @_ZN3jxl8U32Coder5WriteENS_6U32EncEjPNS_9BitWriterE(i64 2229088026627, i64 9044715794080271, i32 %145, %"struct.jxl::BitWriter"* %1) #9
  %147 = icmp eq i32 %146, 0
  %148 = getelementptr inbounds i32, i32* %141, i64 1
  br i1 %147, label %149, label %121

149:                                              ; preds = %140
  %150 = icmp eq i32* %148, %110
  br i1 %150, label %151, label %140

151:                                              ; preds = %149, %103
  %152 = load i64, i64* %26, align 8
  %153 = load i64, i64* %28, align 8
  %154 = sub i64 %152, %153
  %155 = ashr exact i64 %154, 2
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 4, i64 %155) #9
  %156 = getelementptr inbounds %"class.std::__1::vector.150", %"class.std::__1::vector.150"* %24, i64 0, i32 0, i32 0
  %157 = load i32*, i32** %156, align 8
  %158 = load i32*, i32** %25, align 8
  %159 = icmp eq i32* %157, %158
  br i1 %159, label %171, label %160

160:                                              ; preds = %151, %169
  %161 = phi i32* [ %168, %169 ], [ %157, %151 ]
  %162 = load i32, i32* %161, align 4
  %163 = shl i32 %162, 1
  %164 = ashr i32 %162, 31
  %165 = xor i32 %163, %164
  %166 = call i32 @_ZN3jxl8U32Coder5WriteENS_6U32EncEjPNS_9BitWriterE(i64 2229088026627, i64 9044715794080271, i32 %165, %"struct.jxl::BitWriter"* %1) #9
  %167 = icmp eq i32 %166, 0
  %168 = getelementptr inbounds i32, i32* %161, i64 1
  br i1 %167, label %169, label %121

169:                                              ; preds = %160
  %170 = icmp eq i32* %168, %158
  br i1 %170, label %171, label %160

171:                                              ; preds = %169, %151
  %172 = load i64, i64* %34, align 8
  %173 = load i64, i64* %36, align 8
  %174 = sub i64 %172, %173
  %175 = ashr exact i64 %174, 2
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 4, i64 %175) #9
  %176 = getelementptr inbounds %"class.std::__1::vector.116", %"class.std::__1::vector.116"* %5, i64 0, i32 0, i32 0
  %177 = load i32*, i32** %176, align 8
  %178 = load i32*, i32** %33, align 8
  %179 = icmp eq i32* %177, %178
  br i1 %179, label %126, label %129
}

declare void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"*, %"struct.jxl::BitWriter"*, i64) unnamed_addr #1

declare void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"*, %"class.jxl::BitWriter::Allotment"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

declare i32 @_ZN3jxl8U32Coder5WriteENS_6U32EncEjPNS_9BitWriterE(i64, i64, i32, %"struct.jxl::BitWriter"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"*) unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #8

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3jxl12_GLOBAL__N_120MoveToFrontTransformERKNSt3__16vectorIhNS1_9allocatorIhEEEE: argument 0"}
!4 = distinct !{!4, !"_ZN3jxl12_GLOBAL__N_120MoveToFrontTransformERKNSt3__16vectorIhNS1_9allocatorIhEEEE"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !10, !6}
!10 = !{!"llvm.loop.unroll.runtime.disable"}
!11 = distinct !{!11, !8}
!12 = !{i64 0, i64 65}
