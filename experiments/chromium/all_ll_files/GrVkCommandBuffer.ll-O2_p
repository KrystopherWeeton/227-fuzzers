; ModuleID = '../../third_party/skia/src/gpu/vk/GrVkCommandBuffer.cpp'
source_filename = "../../third_party/skia/src/gpu/vk/GrVkCommandBuffer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrVkPrimaryCommandBuffer = type { %class.GrVkCommandBuffer.base, %class.SkTArray.449, %struct.VkFence_T*, %class.SkTArray.456 }
%class.GrVkCommandBuffer.base = type <{ i32 (...)**, %class.SkSTArray, %class.SkSTArray.1, %class.SkSTArray.4, %class.SkSTArray.8, i8, i8, [6 x i8], %class.GrVkRenderPass*, %struct.VkCommandBuffer_T*, [2 x %struct.VkBuffer_T*], %struct.VkBuffer_T*, %struct.VkViewport, %struct.VkRect2D, [4 x float], %class.SkSTArray.443, %class.SkSTArray.446, i8, [3 x i8], i32, i32, i8 }>
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [256 x i8] }
%class.SkTArray = type { %class.sk_sp*, i64 }
%class.sk_sp = type { %class.GrManagedResource* }
%class.GrManagedResource = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkSTArray.1 = type { %class.SkAlignedSTStorage.2, %class.SkTArray.3 }
%class.SkAlignedSTStorage.2 = type { [256 x i8] }
%class.SkTArray.3 = type { %class.gr_sp*, i64 }
%class.gr_sp = type { %class.GrRecycledResource* }
%class.GrRecycledResource = type { %class.GrManagedResource.base, [4 x i8] }
%class.GrManagedResource.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.SkSTArray.4 = type { %class.SkAlignedSTStorage.5, %class.SkTArray.6 }
%class.SkAlignedSTStorage.5 = type { [128 x i8] }
%class.SkTArray.6 = type { %class.sk_sp.7*, i64 }
%class.sk_sp.7 = type { %class.GrBuffer* }
%class.GrBuffer = type { i32 (...)** }
%class.SkSTArray.8 = type { %class.SkAlignedSTStorage.9, %class.SkTArray.10 }
%class.SkAlignedSTStorage.9 = type { [128 x i8] }
%class.SkTArray.10 = type { %class.gr_sp.11*, i64 }
%class.gr_sp.11 = type { %class.GrSurface* }
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.206 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon, [4 x i8] }>
%union.anon = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.12, i8* }
%class.sk_sp.12 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.GrGpu = type { %class.SkRefCnt.base, %"class.GrGpu::Stats", %class.sk_sp.13, %"class.std::__1::unique_ptr", i32, %class.GrDirectContext*, %class.SkSTArray.203, i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.GrGpu::Stats" = type { i8 }
%class.sk_sp.13 = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.14, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.14 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Compiler"* }
%"class.SkSL::Compiler" = type { %"class.SkSL::ErrorReporter", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr.55", %"class.std::__1::shared_ptr.55", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"class.SkSL::ModifiersPool", %"class.SkSL::Inliner", %"class.std::__1::unique_ptr.57", %"class.SkSL::String"*, i32, %"class.SkSL::String", %"class.std::__1::vector.63" }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%"class.std::__1::shared_ptr" = type { %"class.SkSL::Context"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15" }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.SkSL::Type"* }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.27", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.29" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.SkSL::Type::Field"* }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.54"* }
%"class.std::__1::vector.54" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::shared_ptr.55" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr.55", %"class.std::__1::vector.465", i8, %"class.std::__1::vector.473", %"class.std::__1::forward_list", %class.SkTHashMap.486, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::vector.465" = type { %"class.std::__1::__vector_base.466" }
%"class.std::__1::__vector_base.466" = type { %"class.std::__1::unique_ptr.467"*, %"class.std::__1::unique_ptr.467"*, %"class.std::__1::__compressed_pair.468" }
%"class.std::__1::unique_ptr.467" = type { %"class.std::__1::__compressed_pair.533" }
%"class.std::__1::__compressed_pair.533" = type { %"struct.std::__1::__compressed_pair_elem.534" }
%"struct.std::__1::__compressed_pair_elem.534" = type { %"class.SkSL::Symbol"* }
%"class.std::__1::__compressed_pair.468" = type { %"struct.std::__1::__compressed_pair_elem.469" }
%"struct.std::__1::__compressed_pair_elem.469" = type { %"class.std::__1::unique_ptr.467"* }
%"class.std::__1::vector.473" = type { %"class.std::__1::__vector_base.474" }
%"class.std::__1::__vector_base.474" = type { %"class.std::__1::unique_ptr.475"*, %"class.std::__1::unique_ptr.475"*, %"class.std::__1::__compressed_pair.476" }
%"class.std::__1::unique_ptr.475" = type { %"class.std::__1::__compressed_pair.538" }
%"class.std::__1::__compressed_pair.538" = type { %"struct.std::__1::__compressed_pair_elem.539" }
%"struct.std::__1::__compressed_pair_elem.539" = type { %"class.SkSL::IRNode"* }
%"class.std::__1::__compressed_pair.476" = type { %"struct.std::__1::__compressed_pair_elem.477" }
%"struct.std::__1::__compressed_pair_elem.477" = type { %"class.std::__1::unique_ptr.475"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.481" }
%"class.std::__1::__compressed_pair.481" = type { %"struct.std::__1::__compressed_pair_elem.482" }
%"struct.std::__1::__compressed_pair_elem.482" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%class.SkTHashMap.486 = type { %class.SkTHashTable.487 }
%class.SkTHashTable.487 = type { i32, i32, %class.SkAutoTArray.488 }
%class.SkAutoTArray.488 = type { %"class.std::__1::unique_ptr.489" }
%"class.std::__1::unique_ptr.489" = type { %"class.std::__1::__compressed_pair.490" }
%"class.std::__1::__compressed_pair.490" = type { %"struct.std::__1::__compressed_pair_elem.491" }
%"struct.std::__1::__compressed_pair_elem.491" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair.543" }
%"struct.std::__1::pair.543" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"struct.SkSL::ParsedModule" = type { %"class.std::__1::shared_ptr.55", %"class.std::__1::shared_ptr.56" }
%"class.std::__1::shared_ptr.56" = type { %"class.SkSL::IRIntrinsicMap"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::IRIntrinsicMap" = type opaque
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.35", %"class.std::__1::__compressed_pair.44", %"class.std::__1::__compressed_pair.49", %"class.std::__1::__compressed_pair.51", [4 x i8] }>
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37", %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { i64 }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { float }
%"class.SkSL::Inliner" = type { %"class.SkSL::Context"*, %"class.SkSL::Mangler", i32 }
%"class.SkSL::Mangler" = type { i32 }
%"class.std::__1::unique_ptr.57" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.SkSL::IRGenerator"* }
%"class.SkSL::IRGenerator" = type opaque
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.20 }
%union.anon.20 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { i64*, i64*, %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { i64* }
%class.GrDirectContext = type { %class.GrRecordingContext, %"class.GrDirectContext::DirectContextID", %"class.std::__1::unique_ptr.126", %"class.std::__1::unique_ptr.132", %class.sk_sp.138, %"class.std::__1::unique_ptr.139", %"class.std::__1::unique_ptr.178", i8, i8, %"class.GrContextOptions::PersistentCache"*, %"class.GrContextOptions::ShaderErrorHandler"*, %"class.std::__1::unique_ptr.185", %"class.std::__1::unique_ptr.191", %"class.std::__1::unique_ptr.197" }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.74", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.114", %"class.std::__1::unique_ptr.120" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.73 }
%class.sk_sp.73 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray.77, %class.SkTHashMap, %class.SkTHashMap.85, %class.SkTArray.94, %class.SkTArray.96, i32, i8, [3 x i8] }>
%class.SkTArray.77 = type { %"class.std::__1::unique_ptr.78"*, i64 }
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.521" }
%"class.std::__1::__compressed_pair.521" = type { %"struct.std::__1::__compressed_pair_elem.522" }
%"struct.std::__1::__compressed_pair_elem.522" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.96, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.97 }
%class.sk_sp.97 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.79" }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, i32 }
%class.SkTHashMap.85 = type { %class.SkTHashTable.86 }
%class.SkTHashTable.86 = type { i32, i32, %class.SkAutoTArray.87 }
%class.SkAutoTArray.87 = type { %"class.std::__1::unique_ptr.88" }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.526" }
%"struct.std::__1::pair.526" = type { i32, %class.SkTArray.527* }
%class.SkTArray.527 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.94 = type { %"class.std::__1::unique_ptr.95"*, i64 }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.528" }
%"class.std::__1::__compressed_pair.528" = type { %"struct.std::__1::__compressed_pair_elem.529" }
%"struct.std::__1::__compressed_pair_elem.529" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.527, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%class.SkTArray.96 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.101", %"class.std::__1::unique_ptr.107" }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.110 }
%class.SkFibBlockSizes.110 = type { i32 }
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%"class.std::__1::unique_ptr.126" = type { %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %class.SkTaskGroup* }
%class.SkTaskGroup = type opaque
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %class.GrStrikeCache* }
%class.GrStrikeCache = type opaque
%class.sk_sp.138 = type { %class.GrGpu* }
%"class.std::__1::unique_ptr.139" = type { %"class.std::__1::__compressed_pair.140" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %class.GrResourceCache* }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.150, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap.166, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable.142 }
%class.SkTHashTable.142 = type { i32, i32, %class.SkAutoTArray.143 }
%class.SkAutoTArray.143 = type { %"class.std::__1::unique_ptr.144" }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.150 = type { %class.SkTHashTable.151 }
%class.SkTHashTable.151 = type { i32, i32, %class.SkAutoTArray.152 }
%class.SkAutoTArray.152 = type { %"class.std::__1::unique_ptr.153" }
%"class.std::__1::unique_ptr.153" = type { %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.159, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.159 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.160" }
%"struct.std::__1::atomic.160" = type { %"struct.std::__1::__atomic_base.161" }
%"struct.std::__1::__atomic_base.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.165, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.165 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.SkTHashMap.166 = type { %class.SkTHashTable.167 }
%class.SkTHashTable.167 = type { i32, i32, %class.SkAutoTArray.168 }
%class.SkAutoTArray.168 = type { %"class.std::__1::unique_ptr.169" }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %class.GrResourceProvider* }
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.13, %class.sk_sp.181, %class.sk_sp.181 }
%class.sk_sp.181 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%"class.GrContextOptions::PersistentCache" = type { i32 (...)** }
%"class.GrContextOptions::ShaderErrorHandler" = type { i32 (...)** }
%"class.std::__1::unique_ptr.185" = type { %"class.std::__1::__compressed_pair.186" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %class.GrClientMappedBufferManager* }
%class.GrClientMappedBufferManager = type opaque
%"class.std::__1::unique_ptr.191" = type { %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %class.GrAtlasManager* }
%class.GrAtlasManager = type opaque
%"class.std::__1::unique_ptr.197" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %class.GrSmallPathAtlasMgr* }
%class.GrSmallPathAtlasMgr = type opaque
%class.SkSTArray.203 = type { %class.SkAlignedSTStorage.204, %class.SkTArray.205 }
%class.SkAlignedSTStorage.204 = type { [64 x i8] }
%class.SkTArray.205 = type { %"struct.GrGpu::SubmittedProc"*, i64 }
%"struct.GrGpu::SubmittedProc" = type { void (i8*, i1)*, i8* }
%"class.GrGpuResource::UniqueID" = type { i32 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.206 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.207, void (i8*)*, i8* }
%class.SkNVRefCnt.207 = type { %"struct.std::__1::atomic" }
%class.GrVkRenderPass = type <{ %class.GrVkManagedResource, %struct.VkRenderPass_T*, i32, %"struct.GrVkRenderPass::AttachmentsDescriptor", i32, i32, %struct.VkExtent2D, i32, i32, i32, [4 x i8] }>
%class.GrVkManagedResource = type { %class.GrManagedResource.base, %class.GrVkGpu* }
%class.GrVkGpu = type { %class.GrGpu, %class.sk_sp.208, %class.sk_sp.352, %class.sk_sp.353, i8, %struct.VkPhysicalDevice_T*, %struct.VkDevice_T*, %struct.VkQueue_T*, i32, %class.GrVkResourceProvider, %class.GrStagingBufferManager, %class.GrVkMSAALoadManager, %class.GrVkCommandPool*, %class.GrVkPrimaryCommandBuffer*, %class.SkSTArray.427, %class.SkSTArray.427, %class.SkTArray.430, %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceMemoryProperties, i8, i8, %"class.std::__1::unique_ptr.437" }
%class.sk_sp.208 = type { %struct.GrVkInterface* }
%struct.GrVkInterface = type { %class.SkRefCnt.base, %"struct.GrVkInterface::Functions" }
%"struct.GrVkInterface::Functions" = type { %"class.GrVkInterface::VkPtr", %"class.GrVkInterface::VkPtr.209", %"class.GrVkInterface::VkPtr.210", %"class.GrVkInterface::VkPtr.211", %"class.GrVkInterface::VkPtr.212", %"class.GrVkInterface::VkPtr.213", %"class.GrVkInterface::VkPtr.214", %"class.GrVkInterface::VkPtr.215", %"class.GrVkInterface::VkPtr.216", %"class.GrVkInterface::VkPtr.217", %"class.GrVkInterface::VkPtr.218", %"class.GrVkInterface::VkPtr.219", %"class.GrVkInterface::VkPtr.220", %"class.GrVkInterface::VkPtr.221", %"class.GrVkInterface::VkPtr.222", %"class.GrVkInterface::VkPtr.223", %"class.GrVkInterface::VkPtr.224", %"class.GrVkInterface::VkPtr.225", %"class.GrVkInterface::VkPtr.226", %"class.GrVkInterface::VkPtr.227", %"class.GrVkInterface::VkPtr.228", %"class.GrVkInterface::VkPtr.229", %"class.GrVkInterface::VkPtr.230", %"class.GrVkInterface::VkPtr.231", %"class.GrVkInterface::VkPtr.231", %"class.GrVkInterface::VkPtr.232", %"class.GrVkInterface::VkPtr.233", %"class.GrVkInterface::VkPtr.234", %"class.GrVkInterface::VkPtr.235", %"class.GrVkInterface::VkPtr.236", %"class.GrVkInterface::VkPtr.237", %"class.GrVkInterface::VkPtr.238", %"class.GrVkInterface::VkPtr.239", %"class.GrVkInterface::VkPtr.240", %"class.GrVkInterface::VkPtr.241", %"class.GrVkInterface::VkPtr.242", %"class.GrVkInterface::VkPtr.243", %"class.GrVkInterface::VkPtr.244", %"class.GrVkInterface::VkPtr.245", %"class.GrVkInterface::VkPtr.246", %"class.GrVkInterface::VkPtr.247", %"class.GrVkInterface::VkPtr.248", %"class.GrVkInterface::VkPtr.249", %"class.GrVkInterface::VkPtr.249", %"class.GrVkInterface::VkPtr.249", %"class.GrVkInterface::VkPtr.250", %"class.GrVkInterface::VkPtr.251", %"class.GrVkInterface::VkPtr.252", %"class.GrVkInterface::VkPtr.253", %"class.GrVkInterface::VkPtr.254", %"class.GrVkInterface::VkPtr.255", %"class.GrVkInterface::VkPtr.256", %"class.GrVkInterface::VkPtr.257", %"class.GrVkInterface::VkPtr.258", %"class.GrVkInterface::VkPtr.259", %"class.GrVkInterface::VkPtr.260", %"class.GrVkInterface::VkPtr.261", %"class.GrVkInterface::VkPtr.262", %"class.GrVkInterface::VkPtr.263", %"class.GrVkInterface::VkPtr.264", %"class.GrVkInterface::VkPtr.265", %"class.GrVkInterface::VkPtr.266", %"class.GrVkInterface::VkPtr.267", %"class.GrVkInterface::VkPtr.268", %"class.GrVkInterface::VkPtr.269", %"class.GrVkInterface::VkPtr.270", %"class.GrVkInterface::VkPtr.271", %"class.GrVkInterface::VkPtr.272", %"class.GrVkInterface::VkPtr.273", %"class.GrVkInterface::VkPtr.274", %"class.GrVkInterface::VkPtr.275", %"class.GrVkInterface::VkPtr.276", %"class.GrVkInterface::VkPtr.277", %"class.GrVkInterface::VkPtr.278", %"class.GrVkInterface::VkPtr.279", %"class.GrVkInterface::VkPtr.280", %"class.GrVkInterface::VkPtr.281", %"class.GrVkInterface::VkPtr.282", %"class.GrVkInterface::VkPtr.283", %"class.GrVkInterface::VkPtr.284", %"class.GrVkInterface::VkPtr.285", %"class.GrVkInterface::VkPtr.286", %"class.GrVkInterface::VkPtr.287", %"class.GrVkInterface::VkPtr.288", %"class.GrVkInterface::VkPtr.289", %"class.GrVkInterface::VkPtr.290", %"class.GrVkInterface::VkPtr.291", %"class.GrVkInterface::VkPtr.292", %"class.GrVkInterface::VkPtr.293", %"class.GrVkInterface::VkPtr.294", %"class.GrVkInterface::VkPtr.295", %"class.GrVkInterface::VkPtr.296", %"class.GrVkInterface::VkPtr.297", %"class.GrVkInterface::VkPtr.298", %"class.GrVkInterface::VkPtr.299", %"class.GrVkInterface::VkPtr.300", %"class.GrVkInterface::VkPtr.301", %"class.GrVkInterface::VkPtr.302", %"class.GrVkInterface::VkPtr.303", %"class.GrVkInterface::VkPtr.303", %"class.GrVkInterface::VkPtr.303", %"class.GrVkInterface::VkPtr.304", %"class.GrVkInterface::VkPtr.305", %"class.GrVkInterface::VkPtr.306", %"class.GrVkInterface::VkPtr.307", %"class.GrVkInterface::VkPtr.308", %"class.GrVkInterface::VkPtr.309", %"class.GrVkInterface::VkPtr.309", %"class.GrVkInterface::VkPtr.310", %"class.GrVkInterface::VkPtr.311", %"class.GrVkInterface::VkPtr.312", %"class.GrVkInterface::VkPtr.313", %"class.GrVkInterface::VkPtr.314", %"class.GrVkInterface::VkPtr.315", %"class.GrVkInterface::VkPtr.316", %"class.GrVkInterface::VkPtr.317", %"class.GrVkInterface::VkPtr.318", %"class.GrVkInterface::VkPtr.319", %"class.GrVkInterface::VkPtr.320", %"class.GrVkInterface::VkPtr.321", %"class.GrVkInterface::VkPtr.322", %"class.GrVkInterface::VkPtr.323", %"class.GrVkInterface::VkPtr.323", %"class.GrVkInterface::VkPtr.324", %"class.GrVkInterface::VkPtr.325", %"class.GrVkInterface::VkPtr.326", %"class.GrVkInterface::VkPtr.327", %"class.GrVkInterface::VkPtr.326", %"class.GrVkInterface::VkPtr.328", %"class.GrVkInterface::VkPtr.329", %"class.GrVkInterface::VkPtr.330", %"class.GrVkInterface::VkPtr.331", %"class.GrVkInterface::VkPtr.332", %"class.GrVkInterface::VkPtr.333", %"class.GrVkInterface::VkPtr.334", %"class.GrVkInterface::VkPtr.335", %"class.GrVkInterface::VkPtr.336", %"class.GrVkInterface::VkPtr.337", %"class.GrVkInterface::VkPtr.338", %"class.GrVkInterface::VkPtr.339", %"class.GrVkInterface::VkPtr.340", %"class.GrVkInterface::VkPtr.341", %"class.GrVkInterface::VkPtr.342", %"class.GrVkInterface::VkPtr.343", %"class.GrVkInterface::VkPtr.344", %"class.GrVkInterface::VkPtr.345", %"class.GrVkInterface::VkPtr.346", %"class.GrVkInterface::VkPtr.347", %"class.GrVkInterface::VkPtr.348", %"class.GrVkInterface::VkPtr.349", %"class.GrVkInterface::VkPtr.350", %"class.GrVkInterface::VkPtr.351" }
%"class.GrVkInterface::VkPtr" = type { i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)* }
%struct.VkInstanceCreateInfo = type { i32, i8*, i32, %struct.VkApplicationInfo*, i32, i8**, i32, i8** }
%struct.VkApplicationInfo = type { i32, i8*, i8*, i32, i8*, i32, i32 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkInstance_T = type opaque
%"class.GrVkInterface::VkPtr.209" = type { void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.210" = type { i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)* }
%"class.GrVkInterface::VkPtr.211" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)* }
%struct.VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.212" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)* }
%struct.VkFormatProperties = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.213" = type { i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)* }
%struct.VkImageFormatProperties = type { %struct.VkExtent3D, i32, i32, i32, i64 }
%struct.VkExtent3D = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.214" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)* }
%"class.GrVkInterface::VkPtr.215" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)* }
%struct.VkQueueFamilyProperties = type { i32, i32, i32, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.216" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)* }
%"class.GrVkInterface::VkPtr.217" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)* }
%struct.VkDeviceCreateInfo = type { i32, i8*, i32, i32, %struct.VkDeviceQueueCreateInfo*, i32, i8**, i32, i8**, %struct.VkPhysicalDeviceFeatures* }
%struct.VkDeviceQueueCreateInfo = type { i32, i8*, i32, i32, i32, float* }
%"class.GrVkInterface::VkPtr.218" = type { void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.219" = type { i32 (i8*, i32*, %struct.VkExtensionProperties*)* }
%struct.VkExtensionProperties = type { [256 x i8], i32 }
%"class.GrVkInterface::VkPtr.220" = type { i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)* }
%"class.GrVkInterface::VkPtr.221" = type { i32 (i32*, %struct.VkLayerProperties*)* }
%struct.VkLayerProperties = type { [256 x i8], i32, i32, [256 x i8] }
%"class.GrVkInterface::VkPtr.222" = type { i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkLayerProperties*)* }
%"class.GrVkInterface::VkPtr.223" = type { void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)* }
%"class.GrVkInterface::VkPtr.224" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)* }
%struct.VkSubmitInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32*, i32, %struct.VkCommandBuffer_T**, i32, %struct.VkSemaphore_T** }
%struct.VkSemaphore_T = type opaque
%"class.GrVkInterface::VkPtr.225" = type { i32 (%struct.VkQueue_T*)* }
%"class.GrVkInterface::VkPtr.226" = type { i32 (%struct.VkDevice_T*)* }
%"class.GrVkInterface::VkPtr.227" = type { i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)* }
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%struct.VkDeviceMemory_T = type opaque
%"class.GrVkInterface::VkPtr.228" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.229" = type { i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)* }
%"class.GrVkInterface::VkPtr.230" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)* }
%"class.GrVkInterface::VkPtr.231" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* }
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%"class.GrVkInterface::VkPtr.232" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*)* }
%"class.GrVkInterface::VkPtr.233" = type { i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)* }
%"class.GrVkInterface::VkPtr.234" = type { i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkImage_T = type opaque
%"class.GrVkInterface::VkPtr.235" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)* }
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%"class.GrVkInterface::VkPtr.236" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)* }
%"class.GrVkInterface::VkPtr.237" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*)* }
%struct.VkSparseImageMemoryRequirements = type { %struct.VkSparseImageFormatProperties, i32, i64, i64, i64 }
%struct.VkSparseImageFormatProperties = type { i32, %struct.VkExtent3D, i32 }
%"class.GrVkInterface::VkPtr.238" = type { void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)* }
%"class.GrVkInterface::VkPtr.239" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*)* }
%struct.VkBindSparseInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSparseBufferMemoryBindInfo*, i32, %struct.VkSparseImageOpaqueMemoryBindInfo*, i32, %struct.VkSparseImageMemoryBindInfo*, i32, %struct.VkSemaphore_T** }
%struct.VkSparseBufferMemoryBindInfo = type { %struct.VkBuffer_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseMemoryBind = type { i64, i64, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkSparseImageOpaqueMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseImageMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseImageMemoryBind* }
%struct.VkSparseImageMemoryBind = type { %struct.VkImageSubresource, %struct.VkOffset3D, %struct.VkExtent3D, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkImageSubresource = type { i32, i32, i32 }
%struct.VkOffset3D = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.240" = type { i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)* }
%struct.VkFenceCreateInfo = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.241" = type { void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.242" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)* }
%"class.GrVkInterface::VkPtr.243" = type { i32 (%struct.VkDevice_T*, %struct.VkFence_T*)* }
%"class.GrVkInterface::VkPtr.244" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)* }
%"class.GrVkInterface::VkPtr.245" = type { i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)* }
%struct.VkSemaphoreCreateInfo = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.246" = type { void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.247" = type { i32 (%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**)* }
%struct.VkEventCreateInfo = type { i32, i8*, i32 }
%struct.VkEvent_T = type opaque
%"class.GrVkInterface::VkPtr.248" = type { void (%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.249" = type { i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)* }
%"class.GrVkInterface::VkPtr.250" = type { i32 (%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**)* }
%struct.VkQueryPoolCreateInfo = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkQueryPool_T = type opaque
%"class.GrVkInterface::VkPtr.251" = type { void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.252" = type { i32 (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32)* }
%"class.GrVkInterface::VkPtr.253" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)* }
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%"class.GrVkInterface::VkPtr.254" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.255" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**)* }
%struct.VkBufferViewCreateInfo = type { i32, i8*, i32, %struct.VkBuffer_T*, i32, i64, i64 }
%struct.VkBufferView_T = type opaque
%"class.GrVkInterface::VkPtr.256" = type { void (%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.257" = type { i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)* }
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%"class.GrVkInterface::VkPtr.258" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.259" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)* }
%struct.VkSubresourceLayout = type { i64, i64, i64, i64, i64 }
%"class.GrVkInterface::VkPtr.260" = type { i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)* }
%struct.VkImageViewCreateInfo = type { i32, i8*, i32, %struct.VkImage_T*, i32, i32, %struct.VkComponentMapping, %struct.VkImageSubresourceRange }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%struct.VkImageView_T = type opaque
%"class.GrVkInterface::VkPtr.261" = type { void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.262" = type { i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)* }
%struct.VkShaderModuleCreateInfo = type { i32, i8*, i32, i64, i32* }
%struct.VkShaderModule_T = type opaque
%"class.GrVkInterface::VkPtr.263" = type { void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.264" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**)* }
%struct.VkPipelineCacheCreateInfo = type { i32, i8*, i32, i64, i8* }
%struct.VkPipelineCache_T = type opaque
%"class.GrVkInterface::VkPtr.265" = type { void (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.266" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*)* }
%"class.GrVkInterface::VkPtr.267" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**)* }
%"class.GrVkInterface::VkPtr.268" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkGraphicsPipelineCreateInfo = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, %struct.VkPipelineVertexInputStateCreateInfo*, %struct.VkPipelineInputAssemblyStateCreateInfo*, %struct.VkPipelineTessellationStateCreateInfo*, %struct.VkPipelineViewportStateCreateInfo*, %struct.VkPipelineRasterizationStateCreateInfo*, %struct.VkPipelineMultisampleStateCreateInfo*, %struct.VkPipelineDepthStencilStateCreateInfo*, %struct.VkPipelineColorBlendStateCreateInfo*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkRenderPass_T*, i32, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineShaderStageCreateInfo = type { i32, i8*, i32, i32, %struct.VkShaderModule_T*, i8*, %struct.VkSpecializationInfo* }
%struct.VkSpecializationInfo = type { i32, %struct.VkSpecializationMapEntry*, i64, i8* }
%struct.VkSpecializationMapEntry = type { i32, i32, i64 }
%struct.VkPipelineVertexInputStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkVertexInputBindingDescription*, i32, %struct.VkVertexInputAttributeDescription* }
%struct.VkVertexInputBindingDescription = type { i32, i32, i32 }
%struct.VkVertexInputAttributeDescription = type { i32, i32, i32, i32 }
%struct.VkPipelineInputAssemblyStateCreateInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkPipelineTessellationStateCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkPipelineViewportStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkViewport*, i32, %struct.VkRect2D* }
%struct.VkPipelineRasterizationStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, float, float, float }
%struct.VkPipelineMultisampleStateCreateInfo = type { i32, i8*, i32, i32, i32, float, i32*, i32, i32 }
%struct.VkPipelineDepthStencilStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkStencilOpState, %struct.VkStencilOpState, float, float }
%struct.VkStencilOpState = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineColorBlendStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, %struct.VkPipelineColorBlendAttachmentState*, [4 x float] }
%struct.VkPipelineColorBlendAttachmentState = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineDynamicStateCreateInfo = type { i32, i8*, i32, i32, i32* }
%struct.VkPipelineLayout_T = type opaque
%struct.VkPipeline_T = type opaque
%"class.GrVkInterface::VkPtr.269" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkComputePipelineCreateInfo = type { i32, i8*, i32, %struct.VkPipelineShaderStageCreateInfo, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%"class.GrVkInterface::VkPtr.270" = type { void (%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.271" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**)* }
%struct.VkPipelineLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayout_T**, i32, %struct.VkPushConstantRange* }
%struct.VkDescriptorSetLayout_T = type opaque
%struct.VkPushConstantRange = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.272" = type { void (%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.273" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)* }
%struct.VkSamplerCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32 }
%struct.VkSampler_T = type opaque
%"class.GrVkInterface::VkPtr.274" = type { void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.275" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)* }
%struct.VkDescriptorSetLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayoutBinding* }
%struct.VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, %struct.VkSampler_T** }
%"class.GrVkInterface::VkPtr.276" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.277" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)* }
%struct.VkDescriptorPoolCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkDescriptorPoolSize* }
%struct.VkDescriptorPoolSize = type { i32, i32 }
%struct.VkDescriptorPool_T = type opaque
%"class.GrVkInterface::VkPtr.278" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.279" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.280" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)* }
%struct.VkDescriptorSetAllocateInfo = type { i32, i8*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSetLayout_T** }
%struct.VkDescriptorSet_T = type opaque
%"class.GrVkInterface::VkPtr.281" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)* }
%"class.GrVkInterface::VkPtr.282" = type { void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)* }
%struct.VkWriteDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %struct.VkBufferView_T** }
%struct.VkDescriptorImageInfo = type { %struct.VkSampler_T*, %struct.VkImageView_T*, i32 }
%struct.VkDescriptorBufferInfo = type { %struct.VkBuffer_T*, i64, i64 }
%struct.VkCopyDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, %struct.VkDescriptorSet_T*, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.283" = type { i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)* }
%struct.VkFramebufferCreateInfo = type { i32, i8*, i32, %struct.VkRenderPass_T*, i32, %struct.VkImageView_T**, i32, i32, i32 }
%struct.VkFramebuffer_T = type opaque
%"class.GrVkInterface::VkPtr.284" = type { void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.285" = type { i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)* }
%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.286" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.287" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)* }
%"class.GrVkInterface::VkPtr.288" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)* }
%struct.VkCommandPoolCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkCommandPool_T = type opaque
%"class.GrVkInterface::VkPtr.289" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.290" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.291" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)* }
%struct.VkCommandBufferAllocateInfo = type { i32, i8*, %struct.VkCommandPool_T*, i32, i32 }
%"class.GrVkInterface::VkPtr.292" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.GrVkInterface::VkPtr.293" = type { i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)* }
%struct.VkCommandBufferBeginInfo = type { i32, i8*, i32, %struct.VkCommandBufferInheritanceInfo* }
%struct.VkCommandBufferInheritanceInfo = type { i32, i8*, %struct.VkRenderPass_T*, i32, %struct.VkFramebuffer_T*, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.294" = type { i32 (%struct.VkCommandBuffer_T*)* }
%"class.GrVkInterface::VkPtr.295" = type { i32 (%struct.VkCommandBuffer_T*, i32)* }
%"class.GrVkInterface::VkPtr.296" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)* }
%"class.GrVkInterface::VkPtr.297" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)* }
%"class.GrVkInterface::VkPtr.298" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)* }
%"class.GrVkInterface::VkPtr.299" = type { void (%struct.VkCommandBuffer_T*, float)* }
%"class.GrVkInterface::VkPtr.300" = type { void (%struct.VkCommandBuffer_T*, float, float, float)* }
%"class.GrVkInterface::VkPtr.301" = type { void (%struct.VkCommandBuffer_T*, float*)* }
%"class.GrVkInterface::VkPtr.302" = type { void (%struct.VkCommandBuffer_T*, float, float)* }
%"class.GrVkInterface::VkPtr.303" = type { void (%struct.VkCommandBuffer_T*, i32, i32)* }
%"class.GrVkInterface::VkPtr.304" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)* }
%"class.GrVkInterface::VkPtr.305" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)* }
%"class.GrVkInterface::VkPtr.306" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)* }
%"class.GrVkInterface::VkPtr.307" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.308" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.309" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)* }
%"class.GrVkInterface::VkPtr.310" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.311" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64)* }
%"class.GrVkInterface::VkPtr.312" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)* }
%struct.VkBufferCopy = type { i64, i64, i64 }
%"class.GrVkInterface::VkPtr.313" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)* }
%struct.VkImageCopy = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkImageSubresourceLayers = type { i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.314" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)* }
%struct.VkImageBlit = type { %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D], %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D] }
%"class.GrVkInterface::VkPtr.315" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)* }
%struct.VkBufferImageCopy = type { i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.316" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)* }
%"class.GrVkInterface::VkPtr.317" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)* }
%"class.GrVkInterface::VkPtr.318" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32)* }
%"class.GrVkInterface::VkPtr.319" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)* }
%union.VkClearColorValue = type { [4 x float] }
%"class.GrVkInterface::VkPtr.320" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)* }
%struct.VkClearDepthStencilValue = type { float, i32 }
%"class.GrVkInterface::VkPtr.321" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)* }
%struct.VkClearAttachment = type { i32, i32, %union.VkClearValue }
%union.VkClearValue = type { %union.VkClearColorValue }
%struct.VkClearRect = type { %struct.VkRect2D, i32, i32 }
%"class.GrVkInterface::VkPtr.322" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)* }
%struct.VkImageResolve = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.323" = type { void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)* }
%"class.GrVkInterface::VkPtr.324" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%struct.VkMemoryBarrier = type { i32, i8*, i32, i32 }
%struct.VkBufferMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%"class.GrVkInterface::VkPtr.325" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%"class.GrVkInterface::VkPtr.327" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.326" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)* }
%"class.GrVkInterface::VkPtr.328" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.329" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32)* }
%"class.GrVkInterface::VkPtr.330" = type { void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)* }
%"class.GrVkInterface::VkPtr.331" = type { void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)* }
%struct.VkRenderPassBeginInfo = type { i32, i8*, %struct.VkRenderPass_T*, %struct.VkFramebuffer_T*, %struct.VkRect2D, i32, %union.VkClearValue* }
%"class.GrVkInterface::VkPtr.332" = type { void (%struct.VkCommandBuffer_T*, i32)* }
%"class.GrVkInterface::VkPtr.333" = type { void (%struct.VkCommandBuffer_T*)* }
%"class.GrVkInterface::VkPtr.334" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.GrVkInterface::VkPtr.335" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)* }
%struct.VkPhysicalDeviceFeatures2 = type { i32, i8*, %struct.VkPhysicalDeviceFeatures }
%"class.GrVkInterface::VkPtr.336" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)* }
%struct.VkPhysicalDeviceProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceProperties }
%"class.GrVkInterface::VkPtr.337" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)* }
%struct.VkFormatProperties2 = type { i32, i8*, %struct.VkFormatProperties }
%"class.GrVkInterface::VkPtr.338" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)* }
%struct.VkPhysicalDeviceImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkImageFormatProperties2 = type { i32, i8*, %struct.VkImageFormatProperties }
%"class.GrVkInterface::VkPtr.339" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)* }
%struct.VkQueueFamilyProperties2 = type { i32, i8*, %struct.VkQueueFamilyProperties }
%"class.GrVkInterface::VkPtr.340" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%"class.GrVkInterface::VkPtr.341" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)* }
%struct.VkPhysicalDeviceSparseImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkSparseImageFormatProperties2 = type { i32, i8*, %struct.VkSparseImageFormatProperties }
%"class.GrVkInterface::VkPtr.342" = type { void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkImageMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkMemoryRequirements2 = type { i32, i8*, %struct.VkMemoryRequirements }
%"class.GrVkInterface::VkPtr.343" = type { void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkBufferMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkBuffer_T* }
%"class.GrVkInterface::VkPtr.344" = type { void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)* }
%struct.VkImageSparseMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkSparseImageMemoryRequirements2 = type { i32, i8*, %struct.VkSparseImageMemoryRequirements }
%"class.GrVkInterface::VkPtr.345" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* }
%struct.VkBindBufferMemoryInfo = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.GrVkInterface::VkPtr.346" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* }
%struct.VkBindImageMemoryInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.GrVkInterface::VkPtr.347" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.348" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)* }
%struct.VkDescriptorSetLayoutSupport = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.349" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)* }
%struct.VkPhysicalDeviceExternalBufferInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkExternalBufferProperties = type { i32, i8*, %struct.VkExternalMemoryProperties }
%struct.VkExternalMemoryProperties = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.350" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)* }
%struct.VkSamplerYcbcrConversionCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkComponentMapping, i32, i32, i32, i32 }
%struct.VkSamplerYcbcrConversion_T = type opaque
%"class.GrVkInterface::VkPtr.351" = type { void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)* }
%class.sk_sp.352 = type { %class.GrVkMemoryAllocator* }
%class.GrVkMemoryAllocator = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.353 = type { %class.GrVkCaps* }
%class.GrVkCaps = type <{ %class.GrCaps.base, i8, [22 x %"struct.GrVkCaps::FormatInfo"], [31 x i32], i32, %class.SkSTArray.361, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8, i8, [2 x i8], i32, [4 x i8] }>
%class.GrCaps.base = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.14, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8 }>
%"struct.GrVkCaps::FormatInfo" = type <{ i16, i16, [4 x i8], %class.SkTDArray.354, %"class.std::__1::unique_ptr.355", i32, [4 x i8] }>
%class.SkTDArray.354 = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.355" = type { %"class.std::__1::__compressed_pair.356" }
%"class.std::__1::__compressed_pair.356" = type { %"struct.std::__1::__compressed_pair_elem.357" }
%"struct.std::__1::__compressed_pair_elem.357" = type { %"struct.GrVkCaps::ColorTypeInfo"* }
%"struct.GrVkCaps::ColorTypeInfo" = type { i32, i32, i32, %class.GrSwizzle, %class.GrSwizzle }
%class.GrSwizzle = type { i16 }
%class.SkSTArray.361 = type { %class.SkAlignedSTStorage.362, %class.SkTArray.363 }
%class.SkAlignedSTStorage.362 = type { [48 x i8] }
%class.SkTArray.363 = type { %struct.GrVkYcbcrConversionInfo*, i64 }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%struct.VkPhysicalDevice_T = type opaque
%struct.VkDevice_T = type opaque
%struct.VkQueue_T = type opaque
%class.GrVkResourceProvider = type { %class.GrVkGpu*, %struct.VkPipelineCache_T*, %class.SkTArray.364, %class.SkSTArray.366, %class.SkTArray.372, %class.SkSTArray.373, %class.SkMutex, %class.SkSTArray.373, %class.SkTDynamicHash.376, %class.SkTDynamicHash.385, %class.sk_sp.394, %class.SkSTArray.403, %class.GrResourceHandle, %class.GrResourceHandle }
%class.SkTArray.364 = type { %"struct.GrVkResourceProvider::MSAALoadPipeline"*, i64 }
%"struct.GrVkResourceProvider::MSAALoadPipeline" = type { %class.sk_sp.365, %class.GrVkRenderPass* }
%class.sk_sp.365 = type { %class.GrVkPipeline* }
%class.GrVkPipeline = type { %class.GrVkManagedResource, %struct.VkPipeline_T*, %struct.VkPipelineLayout_T* }
%class.SkSTArray.366 = type { %class.SkAlignedSTStorage.367, %class.SkTArray.368 }
%class.SkAlignedSTStorage.367 = type { [224 x i8] }
%class.SkTArray.368 = type { %"class.GrVkResourceProvider::CompatibleRenderPassSet"*, i64 }
%"class.GrVkResourceProvider::CompatibleRenderPassSet" = type <{ %class.SkSTArray.369, i32, [4 x i8] }>
%class.SkSTArray.369 = type { %class.SkAlignedSTStorage.370, %class.SkTArray.371 }
%class.SkAlignedSTStorage.370 = type { [32 x i8] }
%class.SkTArray.371 = type { %class.GrVkRenderPass**, i64 }
%class.SkTArray.372 = type { %class.GrVkRenderPass**, i64 }
%class.SkSTArray.373 = type { %class.SkAlignedSTStorage.374, %class.SkTArray.375 }
%class.SkAlignedSTStorage.374 = type { [32 x i8] }
%class.SkTArray.375 = type { %class.GrVkCommandPool**, i64 }
%class.SkTDynamicHash.376 = type { %class.SkTHashTable.377 }
%class.SkTHashTable.377 = type { i32, i32, %class.SkAutoTArray.378 }
%class.SkAutoTArray.378 = type { %"class.std::__1::unique_ptr.379" }
%"class.std::__1::unique_ptr.379" = type { %"class.std::__1::__compressed_pair.380" }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.381" }
%"struct.std::__1::__compressed_pair_elem.381" = type { %"struct.SkTHashTable<GrVkSampler *, GrVkSampler::Key, SkTDynamicHash<GrVkSampler, GrVkSampler::Key, GrVkSampler>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrVkSampler *, GrVkSampler::Key, SkTDynamicHash<GrVkSampler, GrVkSampler::Key, GrVkSampler>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.385 = type { %class.SkTHashTable.386 }
%class.SkTHashTable.386 = type { i32, i32, %class.SkAutoTArray.387 }
%class.SkAutoTArray.387 = type { %"class.std::__1::unique_ptr.388" }
%"class.std::__1::unique_ptr.388" = type { %"class.std::__1::__compressed_pair.389" }
%"class.std::__1::__compressed_pair.389" = type { %"struct.std::__1::__compressed_pair_elem.390" }
%"struct.std::__1::__compressed_pair_elem.390" = type { %"struct.SkTHashTable<GrVkSamplerYcbcrConversion *, GrVkSamplerYcbcrConversion::Key, SkTDynamicHash<GrVkSamplerYcbcrConversion, GrVkSamplerYcbcrConversion::Key, GrVkSamplerYcbcrConversion>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrVkSamplerYcbcrConversion *, GrVkSamplerYcbcrConversion::Key, SkTDynamicHash<GrVkSamplerYcbcrConversion, GrVkSamplerYcbcrConversion::Key, GrVkSamplerYcbcrConversion>::AdaptedTraits>::Slot" = type opaque
%class.sk_sp.394 = type { %"class.GrVkResourceProvider::PipelineStateCache"* }
%"class.GrVkResourceProvider::PipelineStateCache" = type { %class.GrThreadSafePipelineBuilder.base, %class.SkLRUCache, %class.GrVkGpu* }
%class.GrThreadSafePipelineBuilder.base = type { %class.SkRefCnt.base, %"class.GrThreadSafePipelineBuilder::Stats" }
%"class.GrThreadSafePipelineBuilder::Stats" = type { i8 }
%class.SkLRUCache = type { i32, %class.SkTHashTable.395, %class.SkTInternalLList }
%class.SkTHashTable.395 = type { i32, i32, %class.SkAutoTArray.396 }
%class.SkAutoTArray.396 = type { %"class.std::__1::unique_ptr.397" }
%"class.std::__1::unique_ptr.397" = type { %"class.std::__1::__compressed_pair.398" }
%"class.std::__1::__compressed_pair.398" = type { %"struct.std::__1::__compressed_pair_elem.399" }
%"struct.std::__1::__compressed_pair_elem.399" = type { %"struct.SkTHashTable<SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry *, const GrProgramDesc, SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Traits>::Slot"* }
%"struct.SkTHashTable<SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry *, const GrProgramDesc, SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Traits>::Slot" = type opaque
%class.SkTInternalLList = type { %"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry"*, %"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry"* }
%"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry" = type opaque
%class.SkSTArray.403 = type { %class.SkAlignedSTStorage.404, %class.SkTArray.405 }
%class.SkAlignedSTStorage.404 = type { [32 x i8] }
%class.SkTArray.405 = type { %"class.std::__1::unique_ptr.406"*, i64 }
%"class.std::__1::unique_ptr.406" = type { %"class.std::__1::__compressed_pair.407" }
%"class.std::__1::__compressed_pair.407" = type { %"struct.std::__1::__compressed_pair_elem.408" }
%"struct.std::__1::__compressed_pair_elem.408" = type { %class.GrVkDescriptorSetManager* }
%class.GrVkDescriptorSetManager = type { %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %class.SkTArray.409, %class.SkSTArray.410, %class.SkSTArray.413 }
%"struct.GrVkDescriptorSetManager::DescriptorPoolManager" = type { %struct.VkDescriptorSetLayout_T*, i32, i32, i32, i32, %class.GrVkDescriptorPool* }
%class.GrVkDescriptorPool = type { %class.GrVkManagedResource, i32, i32, %struct.VkDescriptorPool_T* }
%class.SkTArray.409 = type { %class.GrVkDescriptorSet**, i64 }
%class.GrVkDescriptorSet = type <{ %class.GrVkRecycledResource, %struct.VkDescriptorSet_T*, %class.GrVkDescriptorPool*, %class.GrResourceHandle, [4 x i8] }>
%class.GrVkRecycledResource = type { %class.GrRecycledResource.base, %class.GrVkGpu* }
%class.GrRecycledResource.base = type { %class.GrManagedResource.base }
%class.SkSTArray.410 = type { %class.SkAlignedSTStorage.411, %class.SkTArray.412 }
%class.SkAlignedSTStorage.411 = type { [16 x i8] }
%class.SkTArray.412 = type { i32*, i64 }
%class.SkSTArray.413 = type { %class.SkAlignedSTStorage.414, %class.SkTArray.415 }
%class.SkAlignedSTStorage.414 = type { [32 x i8] }
%class.SkTArray.415 = type { %class.GrVkSampler**, i64 }
%class.GrVkSampler = type <{ %class.GrVkManagedResource, %struct.VkSampler_T*, %class.GrVkSamplerYcbcrConversion*, %"struct.GrVkSampler::Key", i32, [4 x i8] }>
%class.GrVkSamplerYcbcrConversion = type { %class.GrVkManagedResource, %struct.VkSamplerYcbcrConversion_T*, %"struct.GrVkSamplerYcbcrConversion::Key" }
%"struct.GrVkSamplerYcbcrConversion::Key" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.GrVkSampler::Key" = type { i8, [7 x i8], %"struct.GrVkSamplerYcbcrConversion::Key" }
%class.GrResourceHandle = type { i32 }
%class.GrStagingBufferManager = type { %"class.std::__1::vector.419", %class.GrGpu* }
%"class.std::__1::vector.419" = type { %"class.std::__1::__vector_base.420" }
%"class.std::__1::__vector_base.420" = type { %"struct.GrStagingBufferManager::StagingBuffer"*, %"struct.GrStagingBufferManager::StagingBuffer"*, %"class.std::__1::__compressed_pair.422" }
%"struct.GrStagingBufferManager::StagingBuffer" = type { %class.sk_sp.421, i8*, i64 }
%class.sk_sp.421 = type { %class.GrGpuBuffer* }
%"class.std::__1::__compressed_pair.422" = type { %"struct.std::__1::__compressed_pair_elem.423" }
%"struct.std::__1::__compressed_pair_elem.423" = type { %"struct.GrStagingBufferManager::StagingBuffer"* }
%class.GrVkMSAALoadManager = type { %struct.VkShaderModule_T*, %struct.VkShaderModule_T*, [2 x %struct.VkPipelineShaderStageCreateInfo], %struct.VkPipelineLayout_T* }
%class.GrVkCommandPool = type <{ %class.GrVkManagedResource, i8, [7 x i8], %struct.VkCommandPool_T*, %"class.std::__1::unique_ptr.457", %class.SkSTArray.463, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.457" = type { %"class.std::__1::__compressed_pair.458" }
%"class.std::__1::__compressed_pair.458" = type { %"struct.std::__1::__compressed_pair_elem.459" }
%"struct.std::__1::__compressed_pair_elem.459" = type { %class.GrVkPrimaryCommandBuffer* }
%class.SkSTArray.463 = type { %class.SkAlignedSTStorage.464, %class.SkTArray.449 }
%class.SkAlignedSTStorage.464 = type { [32 x i8] }
%class.SkSTArray.427 = type { %class.SkAlignedSTStorage.428, %class.SkTArray.429 }
%class.SkAlignedSTStorage.428 = type { [8 x i8] }
%class.SkTArray.429 = type { %"class.GrVkSemaphore::Resource"**, i64 }
%"class.GrVkSemaphore::Resource" = type <{ %class.GrVkManagedResource, %struct.VkSemaphore_T*, i8, i8, i8, [5 x i8] }>
%class.SkTArray.430 = type { %"class.std::__1::unique_ptr.431"*, i64 }
%"class.std::__1::unique_ptr.431" = type { %"class.std::__1::__compressed_pair.432" }
%"class.std::__1::__compressed_pair.432" = type { %"struct.std::__1::__compressed_pair_elem.433" }
%"struct.std::__1::__compressed_pair_elem.433" = type { %"class.SkDrawable::GpuDrawHandler"* }
%"class.SkDrawable::GpuDrawHandler" = type { i32 (...)** }
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%"class.std::__1::unique_ptr.437" = type { %"class.std::__1::__compressed_pair.438" }
%"class.std::__1::__compressed_pair.438" = type { %"struct.std::__1::__compressed_pair_elem.439" }
%"struct.std::__1::__compressed_pair_elem.439" = type { %class.GrVkOpsRenderPass* }
%class.GrVkOpsRenderPass = type opaque
%struct.VkRenderPass_T = type opaque
%"struct.GrVkRenderPass::AttachmentsDescriptor" = type { %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", i32 }
%"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc" = type { i32, i32, %"struct.GrVkRenderPass::LoadStoreOps" }
%"struct.GrVkRenderPass::LoadStoreOps" = type { i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%struct.VkCommandBuffer_T = type opaque
%struct.VkBuffer_T = type opaque
%struct.VkViewport = type { float, float, float, float, float, float }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%class.SkSTArray.443 = type { %class.SkAlignedSTStorage.444, %class.SkTArray.445 }
%class.SkAlignedSTStorage.444 = type { [56 x i8] }
%class.SkTArray.445 = type { %struct.VkBufferMemoryBarrier*, i64 }
%class.SkSTArray.446 = type { %class.SkAlignedSTStorage.447, %class.SkTArray.448 }
%class.SkAlignedSTStorage.447 = type { [144 x i8] }
%class.SkTArray.448 = type { %struct.VkImageMemoryBarrier*, i64 }
%class.SkTArray.449 = type { %"class.std::__1::unique_ptr.450"*, i64 }
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %class.GrVkSecondaryCommandBuffer* }
%class.GrVkSecondaryCommandBuffer = type { %class.GrVkCommandBuffer.base, [3 x i8] }
%struct.VkFence_T = type opaque
%class.SkTArray.456 = type { %class.sk_sp.206*, i64 }
%class.GrVkCommandBuffer = type <{ i32 (...)**, %class.SkSTArray, %class.SkSTArray.1, %class.SkSTArray.4, %class.SkSTArray.8, i8, i8, [6 x i8], %class.GrVkRenderPass*, %struct.VkCommandBuffer_T*, [2 x %struct.VkBuffer_T*], %struct.VkBuffer_T*, %struct.VkViewport, %struct.VkRect2D, [4 x float], %class.SkSTArray.443, %class.SkSTArray.446, i8, [3 x i8], i32, i32, i8, [3 x i8] }>
%"class.skia::tracing_internals::ScopedTracer" = type { %"struct.skia::tracing_internals::ScopedTracer::Data"*, %"struct.skia::tracing_internals::ScopedTracer::Data" }
%"struct.skia::tracing_internals::ScopedTracer::Data" = type { i8*, i8*, i64 }
%class.SkEventTracer = type { i32 (...)** }
%class.GrVkBuffer = type { %class.GrGpuBuffer, %struct.VkBuffer_T*, %struct.GrVkAlloc, %class.GrVkDescriptorSet* }
%struct.GrVkAlloc = type <{ %struct.VkDeviceMemory_T*, i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%class.sk_sp.500 = type { %class.GrVkFramebuffer* }
%class.GrVkFramebuffer = type { %class.GrVkManagedResource, %struct.VkFramebuffer_T*, %class.sk_sp.501, %class.sk_sp.501, %class.sk_sp.501, %class.sk_sp.515, %class.GrResourceHandle.516, %class.sk_sp.515, %"class.std::__1::unique_ptr.450" }
%class.sk_sp.501 = type { %class.GrVkAttachment* }
%class.GrVkAttachment = type { %class.GrAttachment.base, %class.GrVkImage, %class.sk_sp.513, %class.sk_sp.513, %class.gr_sp.514, %class.gr_sp.514 }
%class.GrAttachment.base = type <{ %class.GrSurface, i8, [3 x i8], i32, i8, i8 }>
%class.GrVkImage = type { i32 (...)**, %struct.GrVkImageInfo, i32, %class.sk_sp.502, i8, %"class.GrVkImage::Resource"* }
%struct.GrVkImageInfo = type <{ %struct.VkImage_T*, %struct.GrVkAlloc, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8], %struct.GrVkYcbcrConversionInfo, i32, [4 x i8] }>
%class.sk_sp.502 = type { %class.GrBackendSurfaceMutableStateImpl* }
%class.GrBackendSurfaceMutableStateImpl = type { %class.SkRefCnt.base, %class.GrBackendSurfaceMutableState, [4 x i8] }
%class.GrBackendSurfaceMutableState = type <{ %union.anon.503, i32, i8, [3 x i8] }>
%union.anon.503 = type { %class.GrVkSharedImageInfo }
%class.GrVkSharedImageInfo = type { %"struct.std::__1::atomic.504", %"struct.std::__1::atomic.508" }
%"struct.std::__1::atomic.504" = type { %"struct.std::__1::__atomic_base.505" }
%"struct.std::__1::__atomic_base.505" = type { %"struct.std::__1::__cxx_atomic_impl.506" }
%"struct.std::__1::__cxx_atomic_impl.506" = type { %"struct.std::__1::__cxx_atomic_base_impl.507" }
%"struct.std::__1::__cxx_atomic_base_impl.507" = type { i32 }
%"struct.std::__1::atomic.508" = type { %"struct.std::__1::__atomic_base.509" }
%"struct.std::__1::__atomic_base.509" = type { %"struct.std::__1::__atomic_base.510" }
%"struct.std::__1::__atomic_base.510" = type { %"struct.std::__1::__cxx_atomic_impl.511" }
%"struct.std::__1::__cxx_atomic_impl.511" = type { %"struct.std::__1::__cxx_atomic_base_impl.512" }
%"struct.std::__1::__cxx_atomic_base_impl.512" = type { i32 }
%"class.GrVkImage::Resource" = type <{ %class.GrTextureResource, %class.GrVkGpu*, %struct.VkImage_T*, %struct.GrVkAlloc, i32, [4 x i8] }>
%class.GrTextureResource = type { %class.GrManagedResource.base, %class.sk_sp.206 }
%class.sk_sp.513 = type { %class.GrVkImageView* }
%class.GrVkImageView = type { %class.GrVkManagedResource, %struct.VkImageView_T*, %class.GrVkSamplerYcbcrConversion* }
%class.gr_sp.514 = type { %class.GrVkDescriptorSet* }
%class.GrResourceHandle.516 = type { i32 }
%class.sk_sp.515 = type { %class.GrVkRenderPass* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.VkProtectedSubmitInfo = type { i32, i8*, i32 }
%class.SkTArray.519 = type { %struct.VkSemaphore_T**, i64 }
%class.sk_sp.520 = type { %class.GrVkBuffer* }

$_ZN8SkTArrayI5sk_spIK8GrBufferELb0EE12checkReallocEiNS4_11ReallocTypeE = comdat any

$_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE = comdat any

$_ZN17GrVkCommandBufferD0Ev = comdat any

$_ZN17GrVkCommandBuffer18onReleaseResourcesEv = comdat any

$_ZN8SkTArrayI5gr_spIK9GrSurfaceXadL_ZNK7GrIORefI13GrGpuResourceE21addCommandBufferUsageEvEEXadL_ZNKS5_24removeCommandBufferUsageEvEEELb0EE12checkReallocEiNS7_11ReallocTypeE = comdat any

$_ZN8SkTArrayI5sk_spI18GrRefCntedCallbackELb0EE12checkReallocEiNS3_11ReallocTypeE = comdat any

$_ZN17GrVkCommandBufferD2Ev = comdat any

$_ZN26GrVkSecondaryCommandBufferD0Ev = comdat any

$_ZNK26GrVkSecondaryCommandBuffer13onFreeGPUDataEPK7GrVkGpu = comdat any

$_ZN8SkTArrayI5gr_spIK18GrRecycledResourceXadL_ZNK17GrManagedResource3refEvEEXadL_ZNKS1_7recycleEvEEELb0EE12checkReallocEiNS5_11ReallocTypeE = comdat any

$_ZN8SkTArrayI21VkBufferMemoryBarrierLb0EE12checkReallocEiNS1_11ReallocTypeE = comdat any

$_ZN8SkTArrayI20VkImageMemoryBarrierLb0EE12checkReallocEiNS1_11ReallocTypeE = comdat any

$_ZN8SkTArrayINSt3__110unique_ptrI26GrVkSecondaryCommandBufferNS0_14default_deleteIS2_EEEELb1EE12checkReallocEiNS6_11ReallocTypeE = comdat any

$_ZN8SkTArrayIP13VkSemaphore_TLb0EE12checkReallocEiNS2_11ReallocTypeE = comdat any

$_ZN8SkTArrayIjLb0EE12checkReallocEiNS0_11ReallocTypeE = comdat any

$_ZTV17GrVkCommandBuffer = comdat any

$_ZTV26GrVkSecondaryCommandBuffer = comdat any

@.str = private unnamed_addr constant [29 x i8] c"disabled-by-default-skia.gpu\00", align 1
@__PRETTY_FUNCTION__._ZNK17GrVkCommandBuffer11freeGPUDataEPK5GrGpuP15VkCommandPool_T = private unnamed_addr constant [72 x i8] c"void GrVkCommandBuffer::freeGPUData(const GrGpu *, VkCommandPool) const\00", align 1
@__PRETTY_FUNCTION__._ZN17GrVkCommandBuffer16releaseResourcesEv = private unnamed_addr constant [43 x i8] c"void GrVkCommandBuffer::releaseResources()\00", align 1
@_ZTV24GrVkPrimaryCommandBuffer = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrVkPrimaryCommandBuffer*)* @_ZN24GrVkPrimaryCommandBufferD2Ev to i8*), i8* bitcast (void (%class.GrVkPrimaryCommandBuffer*)* @_ZN24GrVkPrimaryCommandBufferD0Ev to i8*), i8* bitcast (void (%class.GrVkPrimaryCommandBuffer*)* @_ZN24GrVkPrimaryCommandBuffer18onReleaseResourcesEv to i8*), i8* bitcast (void (%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu*)* @_ZNK24GrVkPrimaryCommandBuffer13onFreeGPUDataEPK7GrVkGpu to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [56 x i8] c"../../third_party/skia/src/gpu/vk/GrVkCommandBuffer.cpp\00", align 1
@.str.2 = private unnamed_addr constant [91 x i8] c"Failed vulkan call. Error: %d,AllocateCommandBuffers(gpu->device(), &cmdInfo, &cmdBuffer)\0A\00", align 1
@.str.3 = private unnamed_addr constant [83 x i8] c"Failed vulkan call. Error: %d,BeginCommandBuffer(fCmdBuffer, &cmdBufferBeginInfo)\0A\00", align 1
@.str.4 = private unnamed_addr constant [60 x i8] c"Failed vulkan call. Error: %d,EndCommandBuffer(fCmdBuffer)\0A\00", align 1
@.str.5 = private unnamed_addr constant [94 x i8] c"Failed vulkan call. Error: %d,CreateFence(gpu->device(), &fenceInfo, nullptr, &fSubmitFence)\0A\00", align 1
@.str.6 = private unnamed_addr constant [76 x i8] c"Failed vulkan call. Error: %d,ResetFences(gpu->device(), 1, &fSubmitFence)\0A\00", align 1
@.str.7 = private unnamed_addr constant [110 x i8] c"Failed vulkan call. Error: %d,WaitForFences(gpu->device(), 1, &fSubmitFence, true, (18446744073709551615UL))\0A\00", align 1
@.str.8 = private unnamed_addr constant [32 x i8] c"Error getting fence status: %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"Got an invalid fence status\00", align 1
@_ZTV17GrVkCommandBuffer = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrVkCommandBuffer*)* @_ZN17GrVkCommandBufferD2Ev to i8*), i8* bitcast (void (%class.GrVkCommandBuffer*)* @_ZN17GrVkCommandBufferD0Ev to i8*), i8* bitcast (void (%class.GrVkCommandBuffer*)* @_ZN17GrVkCommandBuffer18onReleaseResourcesEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@.str.10 = private unnamed_addr constant [73 x i8] c"Failed vulkan call. Error: %d,QueueSubmit(queue, 1, &submitInfo, fence)\0A\00", align 1
@_ZTV26GrVkSecondaryCommandBuffer = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrVkCommandBuffer*)* @_ZN17GrVkCommandBufferD2Ev to i8*), i8* bitcast (void (%class.GrVkSecondaryCommandBuffer*)* @_ZN26GrVkSecondaryCommandBufferD0Ev to i8*), i8* bitcast (void (%class.GrVkCommandBuffer*)* @_ZN17GrVkCommandBuffer18onReleaseResourcesEv to i8*), i8* bitcast (void (%class.GrVkSecondaryCommandBuffer*, %class.GrVkGpu*)* @_ZNK26GrVkSecondaryCommandBuffer13onFreeGPUDataEPK7GrVkGpu to i8*)] }, comdat, align 8
@_ZZNK17GrVkCommandBuffer11freeGPUDataEPK5GrGpuP15VkCommandPool_TE27trace_event_unique_atomic42.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN17GrVkCommandBuffer16releaseResourcesEvE27trace_event_unique_atomic58.0.0 = internal unnamed_addr global i64 0, align 8

@_ZN24GrVkPrimaryCommandBufferD1Ev = hidden unnamed_addr alias void (%class.GrVkPrimaryCommandBuffer*), void (%class.GrVkPrimaryCommandBuffer*)* @_ZN24GrVkPrimaryCommandBufferD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer15invalidateStateEv(%class.GrVkCommandBuffer*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 10, i64 0
  %3 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 12, i32 2
  %4 = bitcast %struct.VkBuffer_T** %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 48, i1 false)
  store float -1.000000e+00, float* %3, align 8
  %5 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 13
  %6 = bitcast %struct.VkRect2D* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false)
  %7 = getelementptr inbounds %struct.VkRect2D, %struct.VkRect2D* %5, i64 0, i32 0, i32 0
  store i32 -1, i32* %7, align 8
  %8 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 14, i64 0
  %9 = bitcast float* %8 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float>* %9, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK17GrVkCommandBuffer11freeGPUDataEPK5GrGpuP15VkCommandPool_T(%class.GrVkCommandBuffer*, %class.GrGpu*, %struct.VkCommandPool_T*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.skia::tracing_internals::ScopedTracer", align 8
  %5 = load atomic i64, i64* @_ZZNK17GrVkCommandBuffer11freeGPUDataEPK5GrGpuP15VkCommandPool_TE27trace_event_unique_atomic42.0.0 monotonic, align 8
  %6 = inttoptr i64 %5 to i8*
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %3
  %9 = tail call %class.SkEventTracer* @_ZN13SkEventTracer11GetInstanceEv() #9
  %10 = bitcast %class.SkEventTracer* %9 to i8* (%class.SkEventTracer*, i8*)***
  %11 = load i8* (%class.SkEventTracer*, i8*)**, i8* (%class.SkEventTracer*, i8*)*** %10, align 8
  %12 = getelementptr inbounds i8* (%class.SkEventTracer*, i8*)*, i8* (%class.SkEventTracer*, i8*)** %11, i64 2
  %13 = load i8* (%class.SkEventTracer*, i8*)*, i8* (%class.SkEventTracer*, i8*)** %12, align 8
  %14 = tail call i8* %13(%class.SkEventTracer* %9, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0)) #9
  %15 = ptrtoint i8* %14 to i64
  store atomic i64 %15, i64* @_ZZNK17GrVkCommandBuffer11freeGPUDataEPK5GrGpuP15VkCommandPool_TE27trace_event_unique_atomic42.0.0 monotonic, align 8
  br label %16

16:                                               ; preds = %3, %8
  %17 = phi i8* [ %6, %3 ], [ %14, %8 ]
  %18 = bitcast %"class.skia::tracing_internals::ScopedTracer"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #9
  %19 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %4, i64 0, i32 0
  %20 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %4, i64 0, i32 1, i32 0
  %21 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %4, i64 0, i32 1, i32 1
  %22 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %4, i64 0, i32 1, i32 2
  %23 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %4, i64 0, i32 1
  %24 = bitcast %"struct.skia::tracing_internals::ScopedTracer::Data"* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 24, i1 false)
  store %"struct.skia::tracing_internals::ScopedTracer::Data"* null, %"struct.skia::tracing_internals::ScopedTracer::Data"** %19, align 8
  %25 = load i8, i8* %17, align 1
  %26 = and i8 %25, 5
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %37, label %28

28:                                               ; preds = %16
  %29 = tail call %class.SkEventTracer* @_ZN13SkEventTracer11GetInstanceEv() #9
  %30 = bitcast %class.SkEventTracer* %29 to i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)***
  %31 = load i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)**, i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)*** %30, align 8
  %32 = getelementptr inbounds i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)*, i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)** %31, i64 4
  %33 = load i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)*, i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)** %32, align 8
  %34 = tail call i64 %33(%class.SkEventTracer* %29, i8 signext 88, i8* %17, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZNK17GrVkCommandBuffer11freeGPUDataEPK5GrGpuP15VkCommandPool_T, i64 0, i64 0), i64 0, i32 0, i8** null, i8* null, i64* null, i8 zeroext 0) #9
  %35 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %4, i64 0, i32 1
  %36 = getelementptr inbounds %"struct.skia::tracing_internals::ScopedTracer::Data", %"struct.skia::tracing_internals::ScopedTracer::Data"* %35, i64 0, i32 0
  store i8* %17, i8** %36, align 8
  store i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZNK17GrVkCommandBuffer11freeGPUDataEPK5GrGpuP15VkCommandPool_T, i64 0, i64 0), i8** %21, align 8
  store i64 %34, i64* %22, align 8
  store %"struct.skia::tracing_internals::ScopedTracer::Data"* %35, %"struct.skia::tracing_internals::ScopedTracer::Data"** %19, align 8
  br label %37

37:                                               ; preds = %16, %28
  %38 = bitcast %class.GrGpu* %1 to %class.GrVkGpu*
  %39 = getelementptr inbounds %class.GrGpu, %class.GrGpu* %1, i64 1
  %40 = bitcast %class.GrGpu* %39 to %struct.GrVkInterface**
  %41 = load %struct.GrVkInterface*, %struct.GrVkInterface** %40, align 8
  %42 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %41, i64 0, i32 1, i32 87, i32 0
  %43 = load void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)** %42, align 8
  %44 = getelementptr inbounds %class.GrGpu, %class.GrGpu* %1, i64 1, i32 5
  %45 = bitcast %class.GrDirectContext** %44 to %struct.VkDevice_T**
  %46 = load %struct.VkDevice_T*, %struct.VkDevice_T** %45, align 8
  %47 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  call void %43(%struct.VkDevice_T* %46, %struct.VkCommandPool_T* %2, i32 1, %struct.VkCommandBuffer_T** %47) #9
  %48 = bitcast %class.GrVkCommandBuffer* %0 to void (%class.GrVkCommandBuffer*, %class.GrVkGpu*)***
  %49 = load void (%class.GrVkCommandBuffer*, %class.GrVkGpu*)**, void (%class.GrVkCommandBuffer*, %class.GrVkGpu*)*** %48, align 8
  %50 = getelementptr inbounds void (%class.GrVkCommandBuffer*, %class.GrVkGpu*)*, void (%class.GrVkCommandBuffer*, %class.GrVkGpu*)** %49, i64 3
  %51 = load void (%class.GrVkCommandBuffer*, %class.GrVkGpu*)*, void (%class.GrVkCommandBuffer*, %class.GrVkGpu*)** %50, align 8
  call void %51(%class.GrVkCommandBuffer* %0, %class.GrVkGpu* %38) #9
  %52 = load %"struct.skia::tracing_internals::ScopedTracer::Data"*, %"struct.skia::tracing_internals::ScopedTracer::Data"** %19, align 8
  %53 = icmp eq %"struct.skia::tracing_internals::ScopedTracer::Data"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %37
  %55 = load i8*, i8** %20, align 8
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %67, label %58

58:                                               ; preds = %54
  %59 = call %class.SkEventTracer* @_ZN13SkEventTracer11GetInstanceEv() #9
  %60 = load i8*, i8** %20, align 8
  %61 = load i8*, i8** %21, align 8
  %62 = load i64, i64* %22, align 8
  %63 = bitcast %class.SkEventTracer* %59 to void (%class.SkEventTracer*, i8*, i8*, i64)***
  %64 = load void (%class.SkEventTracer*, i8*, i8*, i64)**, void (%class.SkEventTracer*, i8*, i8*, i64)*** %63, align 8
  %65 = getelementptr inbounds void (%class.SkEventTracer*, i8*, i8*, i64)*, void (%class.SkEventTracer*, i8*, i8*, i64)** %64, i64 5
  %66 = load void (%class.SkEventTracer*, i8*, i8*, i64)*, void (%class.SkEventTracer*, i8*, i8*, i64)** %65, align 8
  call void %66(%class.SkEventTracer* %59, i8* %60, i8* %61, i64 %62) #9
  br label %67

67:                                               ; preds = %37, %54, %58
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #9
  ret void
}

declare %class.SkEventTracer* @_ZN13SkEventTracer11GetInstanceEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer16releaseResourcesEv(%class.GrVkCommandBuffer*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.skia::tracing_internals::ScopedTracer", align 8
  %3 = load atomic i64, i64* @_ZZN17GrVkCommandBuffer16releaseResourcesEvE27trace_event_unique_atomic58.0.0 monotonic, align 8
  %4 = inttoptr i64 %3 to i8*
  %5 = icmp eq i64 %3, 0
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = tail call %class.SkEventTracer* @_ZN13SkEventTracer11GetInstanceEv() #9
  %8 = bitcast %class.SkEventTracer* %7 to i8* (%class.SkEventTracer*, i8*)***
  %9 = load i8* (%class.SkEventTracer*, i8*)**, i8* (%class.SkEventTracer*, i8*)*** %8, align 8
  %10 = getelementptr inbounds i8* (%class.SkEventTracer*, i8*)*, i8* (%class.SkEventTracer*, i8*)** %9, i64 2
  %11 = load i8* (%class.SkEventTracer*, i8*)*, i8* (%class.SkEventTracer*, i8*)** %10, align 8
  %12 = tail call i8* %11(%class.SkEventTracer* %7, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0)) #9
  %13 = ptrtoint i8* %12 to i64
  store atomic i64 %13, i64* @_ZZN17GrVkCommandBuffer16releaseResourcesEvE27trace_event_unique_atomic58.0.0 monotonic, align 8
  br label %14

14:                                               ; preds = %1, %6
  %15 = phi i8* [ %4, %1 ], [ %12, %6 ]
  %16 = bitcast %"class.skia::tracing_internals::ScopedTracer"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %2, i64 0, i32 0
  %18 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %2, i64 0, i32 1, i32 0
  %19 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %2, i64 0, i32 1, i32 1
  %20 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %2, i64 0, i32 1, i32 2
  %21 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %2, i64 0, i32 1
  %22 = bitcast %"struct.skia::tracing_internals::ScopedTracer::Data"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 24, i1 false)
  store %"struct.skia::tracing_internals::ScopedTracer::Data"* null, %"struct.skia::tracing_internals::ScopedTracer::Data"** %17, align 8
  %23 = load i8, i8* %15, align 1
  %24 = and i8 %23, 5
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %14
  %27 = tail call %class.SkEventTracer* @_ZN13SkEventTracer11GetInstanceEv() #9
  %28 = bitcast %class.SkEventTracer* %27 to i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)***
  %29 = load i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)**, i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)*** %28, align 8
  %30 = getelementptr inbounds i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)*, i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)** %29, i64 4
  %31 = load i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)*, i64 (%class.SkEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)** %30, align 8
  %32 = tail call i64 %31(%class.SkEventTracer* %27, i8 signext 88, i8* %15, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @__PRETTY_FUNCTION__._ZN17GrVkCommandBuffer16releaseResourcesEv, i64 0, i64 0), i64 0, i32 0, i8** null, i8* null, i64* null, i8 zeroext 0) #9
  %33 = getelementptr inbounds %"class.skia::tracing_internals::ScopedTracer", %"class.skia::tracing_internals::ScopedTracer"* %2, i64 0, i32 1
  %34 = getelementptr inbounds %"struct.skia::tracing_internals::ScopedTracer::Data", %"struct.skia::tracing_internals::ScopedTracer::Data"* %33, i64 0, i32 0
  store i8* %15, i8** %34, align 8
  store i8* getelementptr inbounds ([43 x i8], [43 x i8]* @__PRETTY_FUNCTION__._ZN17GrVkCommandBuffer16releaseResourcesEv, i64 0, i64 0), i8** %19, align 8
  store i64 %32, i64* %20, align 8
  store %"struct.skia::tracing_internals::ScopedTracer::Data"* %33, %"struct.skia::tracing_internals::ScopedTracer::Data"** %17, align 8
  br label %35

35:                                               ; preds = %14, %26
  %36 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 1, i32 0, i32 0, i64 256
  %37 = bitcast i8* %36 to %class.SkTArray*
  %38 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 1, i32 0, i32 0, i64 264
  %39 = bitcast i8* %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = and i64 %40, 4294967294
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %35
  %44 = and i64 %40, -4294967295
  store i64 %44, i64* %39, align 8
  br label %81

45:                                               ; preds = %35
  %46 = bitcast i8* %36 to %class.sk_sp**
  br label %95

47:                                               ; preds = %95
  %48 = and i64 %105, -4294967295
  store i64 %48, i64* %39, align 8
  %49 = icmp eq i32 %108, 0
  br i1 %49, label %81, label %50

50:                                               ; preds = %47
  %51 = bitcast i8* %36 to %class.sk_sp**
  br label %52

52:                                               ; preds = %79, %50
  %53 = phi i64 [ %48, %50 ], [ %80, %79 ]
  %54 = phi i32 [ 0, %50 ], [ %77, %79 ]
  %55 = load %class.sk_sp*, %class.sk_sp** %51, align 8
  %56 = lshr i64 %53, 1
  %57 = trunc i64 %56 to i32
  %58 = and i32 %57, 2147483647
  %59 = add nuw nsw i32 %58, %54
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %55, i64 %60, i32 0
  %62 = load %class.GrManagedResource*, %class.GrManagedResource** %61, align 8
  %63 = icmp eq %class.GrManagedResource* %62, null
  br i1 %63, label %76, label %64

64:                                               ; preds = %52
  %65 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %62, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw add i32* %65, i32 -1 acq_rel
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %76

68:                                               ; preds = %64
  %69 = bitcast %class.GrManagedResource* %62 to void (%class.GrManagedResource*)***
  %70 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %69, align 8
  %71 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %70, i64 4
  %72 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %71, align 8
  call void %72(%class.GrManagedResource* nonnull %62) #9
  %73 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %69, align 8
  %74 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %73, i64 1
  %75 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %74, align 8
  call void %75(%class.GrManagedResource* nonnull %62) #9
  br label %76

76:                                               ; preds = %68, %64, %52
  %77 = add nuw nsw i32 %54, 1
  %78 = icmp eq i32 %77, %108
  br i1 %78, label %81, label %79

79:                                               ; preds = %76
  %80 = load i64, i64* %39, align 8
  br label %52

81:                                               ; preds = %76, %43, %47
  call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %37, i32 0, i32 2) #9
  %82 = load i64, i64* %39, align 8
  %83 = and i64 %82, -4294967297
  store i64 %83, i64* %39, align 8
  %84 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 2, i32 0, i32 0, i64 256
  %85 = bitcast i8* %84 to %class.SkTArray.3*
  %86 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 2, i32 0, i32 0, i64 264
  %87 = bitcast i8* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = and i64 %88, 4294967294
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %81
  %92 = and i64 %88, -4294967295
  store i64 %92, i64* %87, align 8
  br label %154

93:                                               ; preds = %81
  %94 = bitcast i8* %84 to %class.gr_sp**
  br label %262

95:                                               ; preds = %45, %95
  %96 = phi i64 [ 0, %45 ], [ %104, %95 ]
  %97 = load %class.sk_sp*, %class.sk_sp** %46, align 8
  %98 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %97, i64 %96, i32 0
  %99 = load %class.GrManagedResource*, %class.GrManagedResource** %98, align 8
  %100 = bitcast %class.GrManagedResource* %99 to void (%class.GrManagedResource*)***
  %101 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %100, align 8
  %102 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %101, i64 3
  %103 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %102, align 8
  call void %103(%class.GrManagedResource* %99) #9
  %104 = add nuw nsw i64 %96, 1
  %105 = load i64, i64* %39, align 8
  %106 = lshr i64 %105, 1
  %107 = trunc i64 %106 to i32
  %108 = and i32 %107, 2147483647
  %109 = zext i32 %108 to i64
  %110 = icmp ult i64 %104, %109
  br i1 %110, label %95, label %47

111:                                              ; preds = %262
  %112 = and i64 %273, -4294967295
  store i64 %112, i64* %87, align 8
  %113 = icmp eq i32 %276, 0
  br i1 %113, label %154, label %114

114:                                              ; preds = %111
  %115 = bitcast i8* %84 to %class.gr_sp**
  br label %116

116:                                              ; preds = %152, %114
  %117 = phi i64 [ %112, %114 ], [ %153, %152 ]
  %118 = phi i32 [ 0, %114 ], [ %150, %152 ]
  %119 = load %class.gr_sp*, %class.gr_sp** %115, align 8
  %120 = lshr i64 %117, 1
  %121 = trunc i64 %120 to i32
  %122 = and i32 %121, 2147483647
  %123 = add nuw nsw i32 %122, %118
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds %class.gr_sp, %class.gr_sp* %119, i64 %124, i32 0
  %126 = load %class.GrRecycledResource*, %class.GrRecycledResource** %125, align 8
  %127 = icmp eq %class.GrRecycledResource* %126, null
  br i1 %127, label %149, label %128

128:                                              ; preds = %116
  %129 = bitcast %class.GrRecycledResource* %126 to %class.GrManagedResource*
  %130 = getelementptr inbounds %class.GrRecycledResource, %class.GrRecycledResource* %126, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 acquire, align 4
  %132 = icmp eq i32 %131, 1
  br i1 %132, label %133, label %138

133:                                              ; preds = %128
  %134 = bitcast %class.GrRecycledResource* %126 to void (%class.GrRecycledResource*)***
  %135 = load void (%class.GrRecycledResource*)**, void (%class.GrRecycledResource*)*** %134, align 8
  %136 = getelementptr inbounds void (%class.GrRecycledResource*)*, void (%class.GrRecycledResource*)** %135, i64 5
  %137 = load void (%class.GrRecycledResource*)*, void (%class.GrRecycledResource*)** %136, align 8
  call void %137(%class.GrRecycledResource* nonnull %126) #9
  br label %149

138:                                              ; preds = %128
  %139 = atomicrmw add i32* %130, i32 -1 acq_rel
  %140 = icmp eq i32 %139, 1
  br i1 %140, label %141, label %149

141:                                              ; preds = %138
  %142 = bitcast %class.GrRecycledResource* %126 to void (%class.GrManagedResource*)***
  %143 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %142, align 8
  %144 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %143, i64 4
  %145 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %144, align 8
  call void %145(%class.GrManagedResource* nonnull %129) #9
  %146 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %142, align 8
  %147 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %146, i64 1
  %148 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %147, align 8
  call void %148(%class.GrManagedResource* nonnull %129) #9
  br label %149

149:                                              ; preds = %141, %138, %133, %116
  %150 = add nuw nsw i32 %118, 1
  %151 = icmp eq i32 %150, %276
  br i1 %151, label %154, label %152

152:                                              ; preds = %149
  %153 = load i64, i64* %87, align 8
  br label %116

154:                                              ; preds = %149, %91, %111
  call void @_ZN8SkTArrayI5gr_spIK18GrRecycledResourceXadL_ZNK17GrManagedResource3refEvEEXadL_ZNKS1_7recycleEvEEELb0EE12checkReallocEiNS5_11ReallocTypeE(%class.SkTArray.3* %85, i32 0, i32 2) #9
  %155 = load i64, i64* %87, align 8
  %156 = and i64 %155, -4294967297
  store i64 %156, i64* %87, align 8
  %157 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 128
  %158 = bitcast i8* %157 to %class.SkTArray.6*
  %159 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 136
  %160 = bitcast i8* %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = lshr i64 %161, 1
  %163 = trunc i64 %162 to i32
  %164 = and i32 %163, 2147483647
  %165 = and i64 %161, -4294967295
  store i64 %165, i64* %160, align 8
  %166 = icmp eq i32 %164, 0
  br i1 %166, label %191, label %167

167:                                              ; preds = %154
  %168 = bitcast i8* %157 to %class.sk_sp.7**
  br label %169

169:                                              ; preds = %189, %167
  %170 = phi i64 [ %165, %167 ], [ %190, %189 ]
  %171 = phi i32 [ 0, %167 ], [ %187, %189 ]
  %172 = load %class.sk_sp.7*, %class.sk_sp.7** %168, align 8
  %173 = lshr i64 %170, 1
  %174 = trunc i64 %173 to i32
  %175 = and i32 %174, 2147483647
  %176 = add nuw nsw i32 %175, %171
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %172, i64 %177, i32 0
  %179 = load %class.GrBuffer*, %class.GrBuffer** %178, align 8
  %180 = icmp eq %class.GrBuffer* %179, null
  br i1 %180, label %186, label %181

181:                                              ; preds = %169
  %182 = bitcast %class.GrBuffer* %179 to void (%class.GrBuffer*)***
  %183 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %182, align 8
  %184 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %183, i64 3
  %185 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %184, align 8
  call void %185(%class.GrBuffer* nonnull %179) #9
  br label %186

186:                                              ; preds = %181, %169
  %187 = add nuw nsw i32 %171, 1
  %188 = icmp eq i32 %187, %164
  br i1 %188, label %191, label %189

189:                                              ; preds = %186
  %190 = load i64, i64* %160, align 8
  br label %169

191:                                              ; preds = %186, %154
  call void @_ZN8SkTArrayI5sk_spIK8GrBufferELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray.6* %158, i32 0, i32 2) #9
  %192 = load i64, i64* %160, align 8
  %193 = and i64 %192, -4294967297
  store i64 %193, i64* %160, align 8
  %194 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 4, i32 0, i32 0, i64 128
  %195 = bitcast i8* %194 to %class.SkTArray.10*
  %196 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 4, i32 0, i32 0, i64 136
  %197 = bitcast i8* %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = lshr i64 %198, 1
  %200 = trunc i64 %199 to i32
  %201 = and i32 %200, 2147483647
  %202 = and i64 %198, -4294967295
  store i64 %202, i64* %197, align 8
  %203 = icmp eq i32 %201, 0
  br i1 %203, label %231, label %204

204:                                              ; preds = %191
  %205 = bitcast i8* %194 to %class.gr_sp.11**
  br label %206

206:                                              ; preds = %229, %204
  %207 = phi i64 [ %202, %204 ], [ %230, %229 ]
  %208 = phi i32 [ 0, %204 ], [ %227, %229 ]
  %209 = load %class.gr_sp.11*, %class.gr_sp.11** %205, align 8
  %210 = lshr i64 %207, 1
  %211 = trunc i64 %210 to i32
  %212 = and i32 %211, 2147483647
  %213 = add nuw nsw i32 %212, %208
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds %class.gr_sp.11, %class.gr_sp.11* %209, i64 %214, i32 0
  %216 = load %class.GrSurface*, %class.GrSurface** %215, align 8
  %217 = icmp eq %class.GrSurface* %216, null
  br i1 %217, label %226, label %218

218:                                              ; preds = %206
  %219 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %216, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %220 = atomicrmw add i32* %219, i32 -1 acq_rel
  %221 = icmp eq i32 %220, 1
  br i1 %221, label %222, label %226

222:                                              ; preds = %218
  %223 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %216, i64 0, i32 0, i32 1
  %224 = getelementptr inbounds %class.GrIORef, %class.GrIORef* %223, i64 -1
  %225 = bitcast %class.GrIORef* %224 to %class.GrGpuResource*
  call void @_ZNK13GrGpuResource19notifyARefCntIsZeroEN7GrIORefIS_E14LastRemovedRefE(%class.GrGpuResource* %225, i32 1) #9
  br label %226

226:                                              ; preds = %222, %218, %206
  %227 = add nuw nsw i32 %208, 1
  %228 = icmp eq i32 %227, %201
  br i1 %228, label %231, label %229

229:                                              ; preds = %226
  %230 = load i64, i64* %197, align 8
  br label %206

231:                                              ; preds = %226, %191
  call void @_ZN8SkTArrayI5gr_spIK9GrSurfaceXadL_ZNK7GrIORefI13GrGpuResourceE21addCommandBufferUsageEvEEXadL_ZNKS5_24removeCommandBufferUsageEvEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray.10* %195, i32 0, i32 2) #9
  %232 = load i64, i64* %197, align 8
  %233 = and i64 %232, -4294967297
  store i64 %233, i64* %197, align 8
  %234 = getelementptr %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 10, i64 0
  %235 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 12, i32 2
  %236 = bitcast %struct.VkBuffer_T** %234 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %236, i8 0, i64 48, i1 false) #9
  store float -1.000000e+00, float* %235, align 8
  %237 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 13
  %238 = bitcast %struct.VkRect2D* %237 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %238, i8 0, i64 16, i1 false) #9
  %239 = getelementptr inbounds %struct.VkRect2D, %struct.VkRect2D* %237, i64 0, i32 0, i32 0
  store i32 -1, i32* %239, align 8
  %240 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 14, i64 0
  %241 = bitcast float* %240 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float>* %241, align 4
  %242 = bitcast %class.GrVkCommandBuffer* %0 to void (%class.GrVkCommandBuffer*)***
  %243 = load void (%class.GrVkCommandBuffer*)**, void (%class.GrVkCommandBuffer*)*** %242, align 8
  %244 = getelementptr inbounds void (%class.GrVkCommandBuffer*)*, void (%class.GrVkCommandBuffer*)** %243, i64 2
  %245 = load void (%class.GrVkCommandBuffer*)*, void (%class.GrVkCommandBuffer*)** %244, align 8
  call void %245(%class.GrVkCommandBuffer* %0) #9
  %246 = load %"struct.skia::tracing_internals::ScopedTracer::Data"*, %"struct.skia::tracing_internals::ScopedTracer::Data"** %17, align 8
  %247 = icmp eq %"struct.skia::tracing_internals::ScopedTracer::Data"* %246, null
  br i1 %247, label %261, label %248

248:                                              ; preds = %231
  %249 = load i8*, i8** %18, align 8
  %250 = load i8, i8* %249, align 1
  %251 = icmp eq i8 %250, 0
  br i1 %251, label %261, label %252

252:                                              ; preds = %248
  %253 = call %class.SkEventTracer* @_ZN13SkEventTracer11GetInstanceEv() #9
  %254 = load i8*, i8** %18, align 8
  %255 = load i8*, i8** %19, align 8
  %256 = load i64, i64* %20, align 8
  %257 = bitcast %class.SkEventTracer* %253 to void (%class.SkEventTracer*, i8*, i8*, i64)***
  %258 = load void (%class.SkEventTracer*, i8*, i8*, i64)**, void (%class.SkEventTracer*, i8*, i8*, i64)*** %257, align 8
  %259 = getelementptr inbounds void (%class.SkEventTracer*, i8*, i8*, i64)*, void (%class.SkEventTracer*, i8*, i8*, i64)** %258, i64 5
  %260 = load void (%class.SkEventTracer*, i8*, i8*, i64)*, void (%class.SkEventTracer*, i8*, i8*, i64)** %259, align 8
  call void %260(%class.SkEventTracer* %253, i8* %254, i8* %255, i64 %256) #9
  br label %261

261:                                              ; preds = %231, %248, %252
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #9
  ret void

262:                                              ; preds = %93, %262
  %263 = phi i64 [ 0, %93 ], [ %272, %262 ]
  %264 = load %class.gr_sp*, %class.gr_sp** %94, align 8
  %265 = getelementptr inbounds %class.gr_sp, %class.gr_sp* %264, i64 %263, i32 0
  %266 = load %class.GrRecycledResource*, %class.GrRecycledResource** %265, align 8
  %267 = bitcast %class.GrRecycledResource* %266 to %class.GrManagedResource*
  %268 = bitcast %class.GrRecycledResource* %266 to void (%class.GrManagedResource*)***
  %269 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %268, align 8
  %270 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %269, i64 3
  %271 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %270, align 8
  call void %271(%class.GrManagedResource* %267) #9
  %272 = add nuw nsw i64 %263, 1
  %273 = load i64, i64* %87, align 8
  %274 = lshr i64 %273, 1
  %275 = trunc i64 %274 to i32
  %276 = and i32 %275, 2147483647
  %277 = zext i32 %276 to i64
  %278 = icmp ult i64 %272, %277
  br i1 %278, label %262, label %111
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer15pipelineBarrierEPK7GrVkGpuPK17GrManagedResourcejjbNS_11BarrierTypeEPv(%class.GrVkCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.GrManagedResource*, i32, i32, i1 zeroext, i32, i8* nocapture readonly) local_unnamed_addr #0 align 2 {
  %9 = icmp eq i32 %6, 0
  br i1 %9, label %30, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 16, i32 0, i32 0, i64 144
  %12 = bitcast i8* %11 to %class.SkTArray.448*
  %13 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 16, i32 0, i32 0, i64 152
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, 4294967294
  %17 = icmp eq i64 %16, 0
  %18 = bitcast i8* %11 to %struct.VkImageMemoryBarrier**
  br i1 %17, label %71, label %19

19:                                               ; preds = %10
  %20 = load %struct.VkImageMemoryBarrier*, %struct.VkImageMemoryBarrier** %18, align 8
  %21 = getelementptr inbounds i8, i8* %7, i64 40
  %22 = bitcast i8* %21 to %struct.VkImage_T**
  %23 = load %struct.VkImage_T*, %struct.VkImage_T** %22, align 8
  %24 = getelementptr inbounds i8, i8* %7, i64 52
  %25 = bitcast i8* %24 to i32*
  %26 = getelementptr inbounds i8, i8* %7, i64 56
  %27 = bitcast i8* %26 to i32*
  %28 = lshr i64 %15, 1
  %29 = and i64 %28, 2147483647
  br label %46

30:                                               ; preds = %8
  %31 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 15, i32 0, i32 0, i64 56
  %32 = bitcast i8* %31 to %class.SkTArray.445*
  tail call void @_ZN8SkTArrayI21VkBufferMemoryBarrierLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.445* %32, i32 1, i32 1) #9
  %33 = bitcast i8* %31 to %struct.VkBufferMemoryBarrier**
  %34 = load %struct.VkBufferMemoryBarrier*, %struct.VkBufferMemoryBarrier** %33, align 8
  %35 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 15, i32 0, i32 0, i64 64
  %36 = bitcast i8* %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = lshr i64 %37, 1
  %39 = and i64 %38, 2147483647
  %40 = getelementptr inbounds %struct.VkBufferMemoryBarrier, %struct.VkBufferMemoryBarrier* %34, i64 %39
  %41 = bitcast %struct.VkBufferMemoryBarrier* %40 to i8*
  %42 = add i64 %37, 2
  %43 = and i64 %42, 4294967294
  %44 = and i64 %37, -4294967295
  %45 = or i64 %43, %44
  store i64 %45, i64* %36, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %7, i64 56, i1 false) #9
  br label %82

46:                                               ; preds = %19, %68
  %47 = phi i64 [ 0, %19 ], [ %69, %68 ]
  %48 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %20, i64 %47, i32 8
  %49 = load %struct.VkImage_T*, %struct.VkImage_T** %48, align 8
  %50 = icmp eq %struct.VkImage_T* %23, %49
  br i1 %50, label %51, label %68

51:                                               ; preds = %46
  %52 = load i32, i32* %25, align 4
  %53 = load i32, i32* %27, align 8
  %54 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %20, i64 %47, i32 9, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %20, i64 %47, i32 9, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = add i32 %52, -1
  %59 = add i32 %58, %53
  %60 = add i32 %55, -1
  %61 = add i32 %60, %57
  %62 = icmp ult i32 %52, %55
  %63 = select i1 %62, i32 %55, i32 %52
  %64 = icmp ult i32 %61, %59
  %65 = select i1 %64, i32 %61, i32 %59
  %66 = icmp ugt i32 %63, %65
  br i1 %66, label %68, label %67

67:                                               ; preds = %51
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %0, %class.GrVkGpu* %1, i1 zeroext undef)
  br label %71

68:                                               ; preds = %51, %46
  %69 = add nuw nsw i64 %47, 1
  %70 = icmp ult i64 %69, %29
  br i1 %70, label %46, label %71

71:                                               ; preds = %68, %10, %67
  tail call void @_ZN8SkTArrayI20VkImageMemoryBarrierLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.448* %12, i32 1, i32 1) #9
  %72 = load %struct.VkImageMemoryBarrier*, %struct.VkImageMemoryBarrier** %18, align 8
  %73 = load i64, i64* %14, align 8
  %74 = lshr i64 %73, 1
  %75 = and i64 %74, 2147483647
  %76 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %72, i64 %75
  %77 = bitcast %struct.VkImageMemoryBarrier* %76 to i8*
  %78 = add i64 %73, 2
  %79 = and i64 %78, 4294967294
  %80 = and i64 %73, -4294967295
  %81 = or i64 %79, %80
  store i64 %81, i64* %14, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %7, i64 72, i1 false) #9
  br label %82

82:                                               ; preds = %71, %30
  %83 = zext i1 %5 to i8
  %84 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 17
  %85 = load i8, i8* %84, align 8, !range !2
  %86 = or i8 %85, %83
  store i8 %86, i8* %84, align 8
  %87 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 19
  %88 = load i32, i32* %87, align 4
  %89 = or i32 %88, %3
  store i32 %89, i32* %87, align 4
  %90 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 20
  %91 = load i32, i32* %90, align 8
  %92 = or i32 %91, %4
  store i32 %92, i32* %90, align 8
  %93 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 6
  store i8 1, i8* %93, align 1
  %94 = icmp eq %class.GrManagedResource* %2, null
  br i1 %94, label %118, label %95

95:                                               ; preds = %82
  %96 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %2, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = atomicrmw add i32* %96, i32 1 monotonic, !noalias !3
  %98 = ptrtoint %class.GrManagedResource* %2 to i64
  %99 = bitcast %class.GrManagedResource* %2 to void (%class.GrManagedResource*)***
  %100 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %99, align 8
  %101 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %100, i64 2
  %102 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %101, align 8
  tail call void %102(%class.GrManagedResource* nonnull %2) #9
  %103 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 1, i32 0, i32 0, i64 256
  %104 = bitcast i8* %103 to %class.SkTArray*
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %104, i32 1, i32 1) #9
  %105 = bitcast i8* %103 to %class.sk_sp**
  %106 = load %class.sk_sp*, %class.sk_sp** %105, align 8
  %107 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 1, i32 0, i32 0, i64 264
  %108 = bitcast i8* %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = lshr i64 %109, 1
  %111 = and i64 %110, 2147483647
  %112 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %106, i64 %111
  %113 = add i64 %109, 2
  %114 = and i64 %113, 4294967294
  %115 = and i64 %109, -4294967295
  %116 = or i64 %114, %115
  store i64 %116, i64* %108, align 8
  %117 = bitcast %class.sk_sp* %112 to i64*
  store i64 %98, i64* %117, align 8
  br label %118

118:                                              ; preds = %82, %95
  %119 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 8
  %120 = load %class.GrVkRenderPass*, %class.GrVkRenderPass** %119, align 8
  %121 = icmp eq %class.GrVkRenderPass* %120, null
  br i1 %121, label %123, label %122

122:                                              ; preds = %118
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %0, %class.GrVkGpu* %1, i1 zeroext undef)
  br label %123

123:                                              ; preds = %118, %122
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer*, %class.GrVkGpu* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 15, i32 0, i32 0, i64 56
  %5 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 15, i32 0, i32 0, i64 64
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 2147483647
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 16, i32 0, i32 0, i64 152
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = and i64 %14, 4294967294
  %16 = icmp eq i64 %15, 0
  %17 = and i1 %11, %16
  br i1 %17, label %50, label %18

18:                                               ; preds = %3
  %19 = bitcast i8* %4 to %class.SkTArray.445*
  %20 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 17
  %21 = load i8, i8* %20, align 8, !range !2
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %24 = load %struct.GrVkInterface*, %struct.GrVkInterface** %23, align 8
  %25 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %24, i64 0, i32 1, i32 124, i32 0
  %26 = load void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)** %25, align 8
  %27 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %28 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %27, align 8
  %29 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 19
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 20
  %32 = load i32, i32* %31, align 8
  %33 = bitcast i8* %4 to %struct.VkBufferMemoryBarrier**
  %34 = load %struct.VkBufferMemoryBarrier*, %struct.VkBufferMemoryBarrier** %33, align 8
  %35 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 16, i32 0, i32 0, i64 144
  %36 = bitcast i8* %35 to %class.SkTArray.448*
  %37 = lshr i64 %14, 1
  %38 = trunc i64 %37 to i32
  %39 = and i32 %38, 2147483647
  %40 = bitcast i8* %35 to %struct.VkImageMemoryBarrier**
  %41 = load %struct.VkImageMemoryBarrier*, %struct.VkImageMemoryBarrier** %40, align 8
  tail call void %26(%struct.VkCommandBuffer_T* %28, i32 %30, i32 %32, i32 %22, i32 0, %struct.VkMemoryBarrier* null, i32 %10, %struct.VkBufferMemoryBarrier* %34, i32 %39, %struct.VkImageMemoryBarrier* %41) #9
  %42 = load i64, i64* %6, align 8
  %43 = and i64 %42, -4294967295
  store i64 %43, i64* %6, align 8
  tail call void @_ZN8SkTArrayI21VkBufferMemoryBarrierLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.445* %19, i32 0, i32 2) #9
  %44 = load i64, i64* %6, align 8
  %45 = and i64 %44, -4294967297
  store i64 %45, i64* %6, align 8
  %46 = load i64, i64* %13, align 8
  %47 = and i64 %46, -4294967295
  store i64 %47, i64* %13, align 8
  tail call void @_ZN8SkTArrayI20VkImageMemoryBarrierLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.448* %36, i32 0, i32 2) #9
  %48 = load i64, i64* %13, align 8
  %49 = and i64 %48, -4294967297
  store i64 %49, i64* %13, align 8
  store i8 0, i8* %20, align 8
  store i32 0, i32* %29, align 4
  store i32 0, i32* %31, align 8
  br label %50

50:                                               ; preds = %3, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer15bindInputBufferEP7GrVkGpuj5sk_spIK8GrBufferE(%class.GrVkCommandBuffer*, %class.GrVkGpu* nocapture readonly, i32, %class.sk_sp.7* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.VkBuffer_T*, align 8
  %6 = alloca i64, align 8
  %7 = bitcast %struct.VkBuffer_T** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #9
  %8 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %3, i64 0, i32 0
  %9 = load %class.GrBuffer*, %class.GrBuffer** %8, align 8
  %10 = icmp eq %class.GrBuffer* %9, null
  %11 = getelementptr inbounds %class.GrBuffer, %class.GrBuffer* %9, i64 -19
  %12 = bitcast %class.GrBuffer* %11 to %class.GrVkBuffer*
  %13 = select i1 %10, %class.GrVkBuffer* null, %class.GrVkBuffer* %12
  %14 = getelementptr inbounds %class.GrVkBuffer, %class.GrVkBuffer* %13, i64 0, i32 1
  %15 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %14, align 8
  store %struct.VkBuffer_T* %15, %struct.VkBuffer_T** %5, align 8
  %16 = zext i32 %2 to i64
  %17 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 10, i64 %16
  %18 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %17, align 8
  %19 = icmp eq %struct.VkBuffer_T* %15, %18
  br i1 %19, label %48, label %20

20:                                               ; preds = %4
  %21 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #9
  store i64 0, i64* %6, align 8
  %22 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %23 = load %struct.GrVkInterface*, %struct.GrVkInterface** %22, align 8
  %24 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %23, i64 0, i32 1, i32 103, i32 0
  %25 = load void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)** %24, align 8
  %26 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %27 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %26, align 8
  call void %25(%struct.VkCommandBuffer_T* %27, i32 %2, i32 1, %struct.VkBuffer_T** nonnull %5, i64* nonnull %6) #9
  %28 = bitcast %struct.VkBuffer_T** %5 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %struct.VkBuffer_T** %17 to i64*
  store i64 %29, i64* %30, align 8
  %31 = bitcast %class.sk_sp.7* %3 to i64*
  %32 = load i64, i64* %31, align 8
  store %class.GrBuffer* null, %class.GrBuffer** %8, align 8
  %33 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 128
  %34 = bitcast i8* %33 to %class.SkTArray.6*
  call void @_ZN8SkTArrayI5sk_spIK8GrBufferELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray.6* %34, i32 1, i32 1) #9
  %35 = bitcast i8* %33 to %class.sk_sp.7**
  %36 = load %class.sk_sp.7*, %class.sk_sp.7** %35, align 8
  %37 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 136
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = lshr i64 %39, 1
  %41 = and i64 %40, 2147483647
  %42 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %36, i64 %41
  %43 = add i64 %39, 2
  %44 = and i64 %43, 4294967294
  %45 = and i64 %39, -4294967295
  %46 = or i64 %44, %45
  store i64 %46, i64* %38, align 8
  %47 = bitcast %class.sk_sp.7* %42 to i64*
  store i64 %32, i64* %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #9
  br label %48

48:                                               ; preds = %4, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer15bindIndexBufferEP7GrVkGpu5sk_spIK8GrBufferE(%class.GrVkCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.sk_sp.7* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %2, i64 0, i32 0
  %5 = load %class.GrBuffer*, %class.GrBuffer** %4, align 8
  %6 = icmp eq %class.GrBuffer* %5, null
  %7 = getelementptr inbounds %class.GrBuffer, %class.GrBuffer* %5, i64 -19
  %8 = bitcast %class.GrBuffer* %7 to %class.GrVkBuffer*
  %9 = select i1 %6, %class.GrVkBuffer* null, %class.GrVkBuffer* %8
  %10 = getelementptr inbounds %class.GrVkBuffer, %class.GrVkBuffer* %9, i64 0, i32 1
  %11 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %10, align 8
  %12 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 11
  %13 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %12, align 8
  %14 = icmp eq %struct.VkBuffer_T* %11, %13
  br i1 %14, label %39, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %17 = load %struct.GrVkInterface*, %struct.GrVkInterface** %16, align 8
  %18 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %17, i64 0, i32 1, i32 102, i32 0
  %19 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)** %18, align 8
  %20 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %21 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %20, align 8
  tail call void %19(%struct.VkCommandBuffer_T* %21, %struct.VkBuffer_T* %11, i64 0, i32 0) #9
  store %struct.VkBuffer_T* %11, %struct.VkBuffer_T** %12, align 8
  %22 = bitcast %class.sk_sp.7* %2 to i64*
  %23 = load i64, i64* %22, align 8
  store %class.GrBuffer* null, %class.GrBuffer** %4, align 8
  %24 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 128
  %25 = bitcast i8* %24 to %class.SkTArray.6*
  tail call void @_ZN8SkTArrayI5sk_spIK8GrBufferELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray.6* %25, i32 1, i32 1) #9
  %26 = bitcast i8* %24 to %class.sk_sp.7**
  %27 = load %class.sk_sp.7*, %class.sk_sp.7** %26, align 8
  %28 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 136
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = lshr i64 %30, 1
  %32 = and i64 %31, 2147483647
  %33 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %27, i64 %32
  %34 = add i64 %30, 2
  %35 = and i64 %34, 4294967294
  %36 = and i64 %30, -4294967295
  %37 = or i64 %35, %36
  store i64 %37, i64* %29, align 8
  %38 = bitcast %class.sk_sp.7* %33 to i64*
  store i64 %23, i64* %38, align 8
  br label %39

39:                                               ; preds = %3, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer16clearAttachmentsEPK7GrVkGpuiPK17VkClearAttachmentiPK11VkClearRect(%class.GrVkCommandBuffer*, %class.GrVkGpu* nocapture readonly, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %0, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %7 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 6
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %9 = load %struct.GrVkInterface*, %struct.GrVkInterface** %8, align 8
  %10 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %9, i64 0, i32 1, i32 119, i32 0
  %11 = load void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)** %10, align 8
  %12 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %13 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %12, align 8
  tail call void %11(%struct.VkCommandBuffer_T* %13, i32 %2, %struct.VkClearAttachment* %3, i32 %4, %struct.VkClearRect* %5) #9
  %14 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 3, i32 0
  %15 = load %class.GrVkCaps*, %class.GrVkCaps** %14, align 8
  %16 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %15, i64 0, i32 22
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %28, label %19

19:                                               ; preds = %6
  %20 = getelementptr %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 10, i64 0
  %21 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 12, i32 2
  %22 = bitcast %struct.VkBuffer_T** %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 48, i1 false) #9
  store float -1.000000e+00, float* %21, align 8
  %23 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 13
  %24 = bitcast %struct.VkRect2D* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #9
  %25 = getelementptr inbounds %struct.VkRect2D, %struct.VkRect2D* %23, i64 0, i32 0, i32 0
  store i32 -1, i32* %25, align 8
  %26 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 14, i64 0
  %27 = bitcast float* %26 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float>* %27, align 4
  br label %28

28:                                               ; preds = %6, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer10addingWorkEPK7GrVkGpu(%class.GrVkCommandBuffer*, %class.GrVkGpu* nocapture readonly) local_unnamed_addr #0 align 2 {
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %0, %class.GrVkGpu* %1, i1 zeroext undef)
  %3 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 6
  store i8 1, i8* %3, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer18bindDescriptorSetsEPK7GrVkGpuP18VkPipelineLayout_TjjPKP17VkDescriptorSet_TjPKj(%class.GrVkCommandBuffer* nocapture readonly, %class.GrVkGpu* nocapture readonly, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*) local_unnamed_addr #0 align 2 {
  %9 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %10 = load %struct.GrVkInterface*, %struct.GrVkInterface** %9, align 8
  %11 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %10, i64 0, i32 1, i32 101, i32 0
  %12 = load void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)** %11, align 8
  %13 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %14 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %13, align 8
  tail call void %12(%struct.VkCommandBuffer_T* %14, i32 0, %struct.VkPipelineLayout_T* %2, i32 %3, i32 %4, %struct.VkDescriptorSet_T** %5, i32 %6, i32* %7) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer12bindPipelineEPK7GrVkGpu5sk_spIK12GrVkPipelineE(%class.GrVkCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.sk_sp.365* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %5 = load %struct.GrVkInterface*, %struct.GrVkInterface** %4, align 8
  %6 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %5, i64 0, i32 1, i32 91, i32 0
  %7 = load void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)** %6, align 8
  %8 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %9 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %8, align 8
  %10 = getelementptr inbounds %class.sk_sp.365, %class.sk_sp.365* %2, i64 0, i32 0
  %11 = load %class.GrVkPipeline*, %class.GrVkPipeline** %10, align 8
  %12 = getelementptr inbounds %class.GrVkPipeline, %class.GrVkPipeline* %11, i64 0, i32 1
  %13 = load %struct.VkPipeline_T*, %struct.VkPipeline_T** %12, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %9, i32 0, %struct.VkPipeline_T* %13) #9
  %14 = bitcast %class.sk_sp.365* %2 to i64*
  %15 = load i64, i64* %14, align 8
  store %class.GrVkPipeline* null, %class.GrVkPipeline** %10, align 8
  %16 = inttoptr i64 %15 to %class.GrManagedResource*
  %17 = inttoptr i64 %15 to void (%class.GrManagedResource*)***
  %18 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %17, align 8
  %19 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %18, i64 2
  %20 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %19, align 8
  tail call void %20(%class.GrManagedResource* %16) #9
  %21 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 1, i32 0, i32 0, i64 256
  %22 = bitcast i8* %21 to %class.SkTArray*
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %22, i32 1, i32 1) #9
  %23 = bitcast i8* %21 to %class.sk_sp**
  %24 = load %class.sk_sp*, %class.sk_sp** %23, align 8
  %25 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 1, i32 0, i32 0, i64 264
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  %29 = and i64 %28, 2147483647
  %30 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %24, i64 %29
  %31 = add i64 %27, 2
  %32 = and i64 %31, 4294967294
  %33 = and i64 %27, -4294967295
  %34 = or i64 %32, %33
  store i64 %34, i64* %26, align 8
  %35 = bitcast %class.sk_sp* %30 to i64*
  store i64 %15, i64* %35, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer13pushConstantsEPK7GrVkGpuP18VkPipelineLayout_TjjjPKv(%class.GrVkCommandBuffer* nocapture readonly, %class.GrVkGpu* nocapture readonly, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*) local_unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %9 = load %struct.GrVkInterface*, %struct.GrVkInterface** %8, align 8
  %10 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %9, i64 0, i32 1, i32 130, i32 0
  %11 = load void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)** %10, align 8
  %12 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %13 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %12, align 8
  tail call void %11(%struct.VkCommandBuffer_T* %13, %struct.VkPipelineLayout_T* %2, i32 %3, i32 %4, i32 %5, i8* %6) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer11drawIndexedEPK7GrVkGpujjjij(%class.GrVkCommandBuffer*, %class.GrVkGpu* nocapture readonly, i32, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %0, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %8 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 6
  store i8 1, i8* %8, align 1
  %9 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %10 = load %struct.GrVkInterface*, %struct.GrVkInterface** %9, align 8
  %11 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %10, i64 0, i32 1, i32 105, i32 0
  %12 = load void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)** %11, align 8
  %13 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %14 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %13, align 8
  tail call void %12(%struct.VkCommandBuffer_T* %14, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer4drawEPK7GrVkGpujjjj(%class.GrVkCommandBuffer*, %class.GrVkGpu* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %0, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %7 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 6
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %9 = load %struct.GrVkInterface*, %struct.GrVkInterface** %8, align 8
  %10 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %9, i64 0, i32 1, i32 104, i32 0
  %11 = load void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)** %10, align 8
  %12 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %13 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %12, align 8
  tail call void %11(%struct.VkCommandBuffer_T* %13, i32 %2, i32 %3, i32 %4, i32 %5) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer12drawIndirectEPK7GrVkGpu5sk_spIK8GrBufferEmjj(%class.GrVkCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.sk_sp.7* nocapture, i64, i32, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %0, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %7 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 6
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %2, i64 0, i32 0
  %9 = load %class.GrBuffer*, %class.GrBuffer** %8, align 8
  %10 = icmp eq %class.GrBuffer* %9, null
  %11 = getelementptr inbounds %class.GrBuffer, %class.GrBuffer* %9, i64 -19
  %12 = bitcast %class.GrBuffer* %11 to %class.GrVkBuffer*
  %13 = select i1 %10, %class.GrVkBuffer* null, %class.GrVkBuffer* %12
  %14 = getelementptr inbounds %class.GrVkBuffer, %class.GrVkBuffer* %13, i64 0, i32 1
  %15 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %14, align 8
  %16 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %17 = load %struct.GrVkInterface*, %struct.GrVkInterface** %16, align 8
  %18 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %17, i64 0, i32 1, i32 106, i32 0
  %19 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)** %18, align 8
  %20 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %21 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %20, align 8
  tail call void %19(%struct.VkCommandBuffer_T* %21, %struct.VkBuffer_T* %15, i64 %3, i32 %4, i32 %5) #9
  %22 = bitcast %class.sk_sp.7* %2 to i64*
  %23 = load i64, i64* %22, align 8
  store %class.GrBuffer* null, %class.GrBuffer** %8, align 8
  %24 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 128
  %25 = bitcast i8* %24 to %class.SkTArray.6*
  tail call void @_ZN8SkTArrayI5sk_spIK8GrBufferELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray.6* %25, i32 1, i32 1) #9
  %26 = bitcast i8* %24 to %class.sk_sp.7**
  %27 = load %class.sk_sp.7*, %class.sk_sp.7** %26, align 8
  %28 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 136
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = lshr i64 %30, 1
  %32 = and i64 %31, 2147483647
  %33 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %27, i64 %32
  %34 = add i64 %30, 2
  %35 = and i64 %34, 4294967294
  %36 = and i64 %30, -4294967295
  %37 = or i64 %35, %36
  store i64 %37, i64* %29, align 8
  %38 = bitcast %class.sk_sp.7* %33 to i64*
  store i64 %23, i64* %38, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer19drawIndexedIndirectEPK7GrVkGpu5sk_spIK8GrBufferEmjj(%class.GrVkCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.sk_sp.7* nocapture, i64, i32, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %0, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %7 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 6
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %2, i64 0, i32 0
  %9 = load %class.GrBuffer*, %class.GrBuffer** %8, align 8
  %10 = icmp eq %class.GrBuffer* %9, null
  %11 = getelementptr inbounds %class.GrBuffer, %class.GrBuffer* %9, i64 -19
  %12 = bitcast %class.GrBuffer* %11 to %class.GrVkBuffer*
  %13 = select i1 %10, %class.GrVkBuffer* null, %class.GrVkBuffer* %12
  %14 = getelementptr inbounds %class.GrVkBuffer, %class.GrVkBuffer* %13, i64 0, i32 1
  %15 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %14, align 8
  %16 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %17 = load %struct.GrVkInterface*, %struct.GrVkInterface** %16, align 8
  %18 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %17, i64 0, i32 1, i32 107, i32 0
  %19 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)** %18, align 8
  %20 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %21 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %20, align 8
  tail call void %19(%struct.VkCommandBuffer_T* %21, %struct.VkBuffer_T* %15, i64 %3, i32 %4, i32 %5) #9
  %22 = bitcast %class.sk_sp.7* %2 to i64*
  %23 = load i64, i64* %22, align 8
  store %class.GrBuffer* null, %class.GrBuffer** %8, align 8
  %24 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 128
  %25 = bitcast i8* %24 to %class.SkTArray.6*
  tail call void @_ZN8SkTArrayI5sk_spIK8GrBufferELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray.6* %25, i32 1, i32 1) #9
  %26 = bitcast i8* %24 to %class.sk_sp.7**
  %27 = load %class.sk_sp.7*, %class.sk_sp.7** %26, align 8
  %28 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 136
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = lshr i64 %30, 1
  %32 = and i64 %31, 2147483647
  %33 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %27, i64 %32
  %34 = add i64 %30, 2
  %35 = and i64 %34, 4294967294
  %36 = and i64 %30, -4294967295
  %37 = or i64 %35, %36
  store i64 %37, i64* %29, align 8
  %38 = bitcast %class.sk_sp.7* %33 to i64*
  store i64 %23, i64* %38, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer11setViewportEPK7GrVkGpujjPK10VkViewport(%class.GrVkCommandBuffer* nocapture, %class.GrVkGpu* nocapture readonly, i32, i32, %struct.VkViewport*) local_unnamed_addr #0 align 2 {
  %6 = bitcast %struct.VkViewport* %4 to i8*
  %7 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 12
  %8 = bitcast %struct.VkViewport* %7 to i8*
  %9 = tail call i32 @bcmp(i8* %6, i8* %8, i64 24)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %13 = load %struct.GrVkInterface*, %struct.GrVkInterface** %12, align 8
  %14 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %13, i64 0, i32 1, i32 92, i32 0
  %15 = load void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)** %14, align 8
  %16 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %17 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %16, align 8
  tail call void %15(%struct.VkCommandBuffer_T* %17, i32 %2, i32 %3, %struct.VkViewport* %4) #9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 4 %6, i64 24, i1 false)
  br label %18

18:                                               ; preds = %5, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer10setScissorEPK7GrVkGpujjPK8VkRect2D(%class.GrVkCommandBuffer* nocapture, %class.GrVkGpu* nocapture readonly, i32, i32, %struct.VkRect2D*) local_unnamed_addr #0 align 2 {
  %6 = bitcast %struct.VkRect2D* %4 to i8*
  %7 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 13
  %8 = bitcast %struct.VkRect2D* %7 to i8*
  %9 = tail call i32 @bcmp(i8* %6, i8* %8, i64 16)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %13 = load %struct.GrVkInterface*, %struct.GrVkInterface** %12, align 8
  %14 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %13, i64 0, i32 1, i32 93, i32 0
  %15 = load void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)** %14, align 8
  %16 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %17 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %16, align 8
  tail call void %15(%struct.VkCommandBuffer_T* %17, i32 %2, i32 %3, %struct.VkRect2D* %4) #9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 4 %6, i64 16, i1 false)
  br label %18

18:                                               ; preds = %5, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17GrVkCommandBuffer17setBlendConstantsEPK7GrVkGpuPKf(%class.GrVkCommandBuffer* nocapture, %class.GrVkGpu* nocapture readonly, float*) local_unnamed_addr #0 align 2 {
  %4 = bitcast float* %2 to i8*
  %5 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 14, i64 0
  %6 = bitcast float* %5 to i8*
  %7 = tail call i32 @bcmp(i8* %4, i8* %6, i64 16)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %11 = load %struct.GrVkInterface*, %struct.GrVkInterface** %10, align 8
  %12 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %11, i64 0, i32 1, i32 96, i32 0
  %13 = load void (%struct.VkCommandBuffer_T*, float*)*, void (%struct.VkCommandBuffer_T*, float*)** %12, align 8
  %14 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 9
  %15 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %14, align 8
  tail call void %13(%struct.VkCommandBuffer_T* %15, float* %2) #9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 4 %4, i64 16, i1 false)
  br label %16

16:                                               ; preds = %3, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBufferD2Ev(%class.GrVkPrimaryCommandBuffer*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV24GrVkPrimaryCommandBuffer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 3
  %4 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 3, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 4294967294
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkTArray.456, %class.SkTArray.456* %3, i64 0, i32 0
  br label %14

10:                                               ; preds = %33, %1
  %11 = phi i64 [ %5, %1 ], [ %35, %33 ]
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %42, label %39

14:                                               ; preds = %33, %8
  %15 = phi i64 [ 0, %8 ], [ %34, %33 ]
  %16 = load %class.sk_sp.206*, %class.sk_sp.206** %9, align 8
  %17 = getelementptr inbounds %class.sk_sp.206, %class.sk_sp.206* %16, i64 %15, i32 0
  %18 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %17, align 8
  %19 = icmp eq %class.GrRefCntedCallback* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %18, i64 0, i32 0
  %22 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw add i32* %22, i32 -1 acq_rel
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %33

25:                                               ; preds = %20
  %26 = getelementptr inbounds %class.SkNVRefCnt.207, %class.SkNVRefCnt.207* %21, i64 2
  %27 = bitcast %class.SkNVRefCnt.207* %26 to void (i8*)**
  %28 = load void (i8*)*, void (i8*)** %27, align 8
  %29 = getelementptr inbounds %class.SkNVRefCnt.207, %class.SkNVRefCnt.207* %21, i64 4
  %30 = bitcast %class.SkNVRefCnt.207* %29 to i8**
  %31 = load i8*, i8** %30, align 8
  tail call void %28(i8* %31) #9
  %32 = bitcast %class.GrRefCntedCallback* %18 to i8*
  tail call void @_ZdlPv(i8* %32) #10
  br label %33

33:                                               ; preds = %25, %20, %14
  %34 = add nuw nsw i64 %15, 1
  %35 = load i64, i64* %4, align 8
  %36 = lshr i64 %35, 1
  %37 = and i64 %36, 2147483647
  %38 = icmp ult i64 %34, %37
  br i1 %38, label %14, label %10

39:                                               ; preds = %10
  %40 = bitcast %class.SkTArray.456* %3 to i8**
  %41 = load i8*, i8** %40, align 8
  tail call void @_Z7sk_freePv(i8* %41) #9
  br label %42

42:                                               ; preds = %10, %39
  %43 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 1
  %44 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 1, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %42
  %49 = getelementptr inbounds %class.SkTArray.449, %class.SkTArray.449* %43, i64 0, i32 0
  br label %54

50:                                               ; preds = %65, %42
  %51 = phi i64 [ %45, %42 ], [ %67, %65 ]
  %52 = and i64 %51, 1
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %74, label %71

54:                                               ; preds = %65, %48
  %55 = phi i64 [ 0, %48 ], [ %66, %65 ]
  %56 = load %"class.std::__1::unique_ptr.450"*, %"class.std::__1::unique_ptr.450"** %49, align 8
  %57 = getelementptr inbounds %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450"* %56, i64 %55, i32 0, i32 0, i32 0
  %58 = load %class.GrVkSecondaryCommandBuffer*, %class.GrVkSecondaryCommandBuffer** %57, align 8
  store %class.GrVkSecondaryCommandBuffer* null, %class.GrVkSecondaryCommandBuffer** %57, align 8
  %59 = icmp eq %class.GrVkSecondaryCommandBuffer* %58, null
  br i1 %59, label %65, label %60

60:                                               ; preds = %54
  %61 = bitcast %class.GrVkSecondaryCommandBuffer* %58 to void (%class.GrVkSecondaryCommandBuffer*)***
  %62 = load void (%class.GrVkSecondaryCommandBuffer*)**, void (%class.GrVkSecondaryCommandBuffer*)*** %61, align 8
  %63 = getelementptr inbounds void (%class.GrVkSecondaryCommandBuffer*)*, void (%class.GrVkSecondaryCommandBuffer*)** %62, i64 1
  %64 = load void (%class.GrVkSecondaryCommandBuffer*)*, void (%class.GrVkSecondaryCommandBuffer*)** %63, align 8
  tail call void %64(%class.GrVkSecondaryCommandBuffer* nonnull %58) #9
  br label %65

65:                                               ; preds = %60, %54
  %66 = add nuw nsw i64 %55, 1
  %67 = load i64, i64* %44, align 8
  %68 = lshr i64 %67, 1
  %69 = and i64 %68, 2147483647
  %70 = icmp ult i64 %66, %69
  br i1 %70, label %54, label %50

71:                                               ; preds = %50
  %72 = bitcast %class.SkTArray.449* %43 to i8**
  %73 = load i8*, i8** %72, align 8
  tail call void @_Z7sk_freePv(i8* %73) #9
  br label %74

74:                                               ; preds = %50, %71
  %75 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBufferD2Ev(%class.GrVkCommandBuffer* %75) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBufferD0Ev(%class.GrVkPrimaryCommandBuffer*) unnamed_addr #0 align 2 {
  tail call void @_ZN24GrVkPrimaryCommandBufferD2Ev(%class.GrVkPrimaryCommandBuffer* %0) #9
  %2 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrVkPrimaryCommandBuffer* @_ZN24GrVkPrimaryCommandBuffer6CreateEP7GrVkGpuP15VkCommandPool_T(%class.GrVkGpu*, %struct.VkCommandPool_T*) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.VkCommandBufferAllocateInfo, align 8
  %4 = alloca %struct.VkCommandBuffer_T*, align 8
  %5 = bitcast %struct.VkCommandBufferAllocateInfo* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #9
  %6 = bitcast %struct.VkCommandBufferAllocateInfo* %3 to i64*
  store i64 -6148914691236517206, i64* %6, align 8
  %7 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %3, i64 0, i32 0
  store i32 40, i32* %7, align 8
  %8 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %3, i64 0, i32 1
  store i8* null, i8** %8, align 8
  %9 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %3, i64 0, i32 2
  store %struct.VkCommandPool_T* %1, %struct.VkCommandPool_T** %9, align 8
  %10 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %3, i64 0, i32 3
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %3, i64 0, i32 4
  store i32 1, i32* %11, align 4
  %12 = bitcast %struct.VkCommandBuffer_T** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #9
  store %struct.VkCommandBuffer_T* inttoptr (i64 -6148914691236517206 to %struct.VkCommandBuffer_T*), %struct.VkCommandBuffer_T** %4, align 8
  %13 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 1, i32 0
  %14 = load %struct.GrVkInterface*, %struct.GrVkInterface** %13, align 8
  %15 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %14, i64 0, i32 1, i32 86, i32 0
  %16 = load i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)** %15, align 8
  %17 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 6
  %18 = load %struct.VkDevice_T*, %struct.VkDevice_T** %17, align 8
  %19 = call i32 %16(%struct.VkDevice_T* %18, %struct.VkCommandBufferAllocateInfo* nonnull %3, %struct.VkCommandBuffer_T** nonnull %4) #9
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %30, label %21

21:                                               ; preds = %2
  %22 = bitcast %class.GrVkGpu* %0 to i1 (%class.GrVkGpu*)***
  %23 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %22, align 8
  %24 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %23, i64 8
  %25 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %24, align 8
  %26 = call zeroext i1 %25(%class.GrVkGpu* %0) #9
  br i1 %26, label %28, label %27

27:                                               ; preds = %21
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 419, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.2, i64 0, i64 0), i32 %19) #9
  br label %28

28:                                               ; preds = %27, %21
  %29 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 %19) #9
  br label %89

30:                                               ; preds = %2
  %31 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 0) #9
  %32 = call i8* @_Znwm(i64 1232) #10
  %33 = bitcast i8* %32 to %class.GrVkPrimaryCommandBuffer*
  %34 = bitcast %struct.VkCommandBuffer_T** %4 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast i8* %32 to i32 (...)***
  %37 = getelementptr inbounds i8, i8* %32, i64 264
  %38 = getelementptr inbounds i8, i8* %32, i64 8
  %39 = getelementptr inbounds i8, i8* %32, i64 272
  %40 = bitcast i8* %39 to i64*
  %41 = bitcast i8* %37 to i8**
  store i8* %38, i8** %41, align 8
  store i64 274877906944, i64* %40, align 8
  %42 = getelementptr inbounds i8, i8* %32, i64 536
  %43 = getelementptr inbounds i8, i8* %32, i64 280
  %44 = getelementptr inbounds i8, i8* %32, i64 544
  %45 = bitcast i8* %44 to i64*
  %46 = bitcast i8* %42 to i8**
  store i8* %43, i8** %46, align 8
  store i64 274877906944, i64* %45, align 8
  %47 = getelementptr inbounds i8, i8* %32, i64 680
  %48 = getelementptr inbounds i8, i8* %32, i64 552
  %49 = getelementptr inbounds i8, i8* %32, i64 688
  %50 = bitcast i8* %49 to i64*
  %51 = bitcast i8* %47 to i8**
  store i8* %48, i8** %51, align 8
  store i64 137438953472, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %32, i64 824
  %53 = getelementptr inbounds i8, i8* %32, i64 696
  %54 = getelementptr inbounds i8, i8* %32, i64 832
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i8* %52 to i8**
  store i8* %53, i8** %56, align 8
  store i64 137438953472, i64* %55, align 8
  %57 = getelementptr inbounds i8, i8* %32, i64 840
  store i8 0, i8* %57, align 8
  %58 = getelementptr inbounds i8, i8* %32, i64 841
  store i8 0, i8* %58, align 1
  %59 = getelementptr inbounds i8, i8* %32, i64 848
  %60 = bitcast i8* %59 to %class.GrVkRenderPass**
  store %class.GrVkRenderPass* null, %class.GrVkRenderPass** %60, align 8
  %61 = getelementptr inbounds i8, i8* %32, i64 856
  %62 = bitcast i8* %61 to i64*
  store i64 %35, i64* %62, align 8
  %63 = getelementptr inbounds i8, i8* %32, i64 1000
  %64 = getelementptr inbounds i8, i8* %32, i64 944
  %65 = getelementptr inbounds i8, i8* %32, i64 1008
  %66 = bitcast i8* %65 to i64*
  %67 = bitcast i8* %63 to i8**
  store i8* %64, i8** %67, align 8
  store i64 8589934592, i64* %66, align 8
  %68 = getelementptr inbounds i8, i8* %32, i64 1160
  %69 = getelementptr inbounds i8, i8* %32, i64 1016
  %70 = getelementptr inbounds i8, i8* %32, i64 1168
  %71 = bitcast i8* %70 to i64*
  %72 = bitcast i8* %68 to i8**
  store i8* %69, i8** %72, align 8
  store i64 17179869184, i64* %71, align 8
  %73 = getelementptr inbounds i8, i8* %32, i64 1176
  store i8 0, i8* %73, align 8
  %74 = getelementptr inbounds i8, i8* %32, i64 1180
  %75 = getelementptr i8, i8* %32, i64 864
  %76 = getelementptr inbounds i8, i8* %32, i64 896
  %77 = bitcast i8* %76 to float*
  call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 0, i64 48, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* align 4 %74, i8 0, i64 9, i1 false) #9
  store float -1.000000e+00, float* %77, align 8
  %78 = getelementptr inbounds i8, i8* %32, i64 912
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 16, i1 false) #9
  %79 = bitcast i8* %78 to i32*
  store i32 -1, i32* %79, align 8
  %80 = getelementptr inbounds i8, i8* %32, i64 928
  %81 = bitcast i8* %80 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float>* %81, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV24GrVkPrimaryCommandBuffer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %36, align 8
  %82 = getelementptr inbounds i8, i8* %32, i64 1200
  %83 = bitcast i8* %82 to i64*
  %84 = getelementptr inbounds i8, i8* %32, i64 1192
  %85 = bitcast i8* %84 to %"class.std::__1::unique_ptr.450"**
  store %"class.std::__1::unique_ptr.450"* null, %"class.std::__1::unique_ptr.450"** %85, align 8
  store i64 1, i64* %83, align 8
  %86 = getelementptr inbounds i8, i8* %32, i64 1208
  %87 = getelementptr inbounds i8, i8* %32, i64 1224
  %88 = bitcast i8* %87 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 16, i1 false) #9
  store i64 1, i64* %88, align 8
  br label %89

89:                                               ; preds = %28, %30
  %90 = phi %class.GrVkPrimaryCommandBuffer* [ %33, %30 ], [ null, %28 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #9
  ret %class.GrVkPrimaryCommandBuffer* %90
}

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #2

declare zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu*, i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer5beginEP7GrVkGpu(%class.GrVkPrimaryCommandBuffer* nocapture, %class.GrVkGpu*) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.VkCommandBufferBeginInfo, align 8
  %4 = bitcast %struct.VkCommandBufferBeginInfo* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false)
  %5 = getelementptr inbounds %struct.VkCommandBufferBeginInfo, %struct.VkCommandBufferBeginInfo* %3, i64 0, i32 0
  store i32 42, i32* %5, align 8
  %6 = getelementptr inbounds %struct.VkCommandBufferBeginInfo, %struct.VkCommandBufferBeginInfo* %3, i64 0, i32 1
  store i8* null, i8** %6, align 8
  %7 = getelementptr inbounds %struct.VkCommandBufferBeginInfo, %struct.VkCommandBufferBeginInfo* %3, i64 0, i32 2
  store i32 1, i32* %7, align 8
  %8 = getelementptr inbounds %struct.VkCommandBufferBeginInfo, %struct.VkCommandBufferBeginInfo* %3, i64 0, i32 3
  store %struct.VkCommandBufferInheritanceInfo* null, %struct.VkCommandBufferInheritanceInfo** %8, align 8
  %9 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %10 = load %struct.GrVkInterface*, %struct.GrVkInterface** %9, align 8
  %11 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %10, i64 0, i32 1, i32 88, i32 0
  %12 = load i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)** %11, align 8
  %13 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %14 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %13, align 8
  %15 = call i32 %12(%struct.VkCommandBuffer_T* %14, %struct.VkCommandBufferBeginInfo* nonnull %3) #9
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %2
  %18 = bitcast %class.GrVkGpu* %1 to i1 (%class.GrVkGpu*)***
  %19 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %18, align 8
  %20 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %19, i64 8
  %21 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %20, align 8
  %22 = call zeroext i1 %21(%class.GrVkGpu* %1) #9
  br i1 %22, label %24, label %23

23:                                               ; preds = %17
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 435, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.3, i64 0, i64 0), i32 %15) #9
  br label %24

24:                                               ; preds = %2, %23, %17
  %25 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 %15) #9
  %26 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 5
  store i8 1, i8* %26, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer3endEP7GrVkGpub(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu*, i1 zeroext) local_unnamed_addr #0 align 2 {
  br i1 %2, label %23, label %4

4:                                                ; preds = %3
  %5 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %5, %class.GrVkGpu* %1, i1 zeroext undef)
  %6 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %7 = load %struct.GrVkInterface*, %struct.GrVkInterface** %6, align 8
  %8 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %7, i64 0, i32 1, i32 89, i32 0
  %9 = load i32 (%struct.VkCommandBuffer_T*)*, i32 (%struct.VkCommandBuffer_T*)** %8, align 8
  %10 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %11 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %10, align 8
  %12 = tail call i32 %9(%struct.VkCommandBuffer_T* %11) #9
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %4
  %15 = bitcast %class.GrVkGpu* %1 to i1 (%class.GrVkGpu*)***
  %16 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %15, align 8
  %17 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %16, i64 8
  %18 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %17, align 8
  %19 = tail call zeroext i1 %18(%class.GrVkGpu* %1) #9
  br i1 %19, label %21, label %20

20:                                               ; preds = %14
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 452, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4, i64 0, i64 0), i32 %12) #9
  br label %21

21:                                               ; preds = %4, %20, %14
  %22 = tail call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 %12) #9
  br label %23

23:                                               ; preds = %21, %3
  %24 = getelementptr %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 10, i64 0
  %25 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 12, i32 2
  %26 = bitcast %struct.VkBuffer_T** %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 48, i1 false) #9
  store float -1.000000e+00, float* %25, align 8
  %27 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 13
  %28 = bitcast %struct.VkRect2D* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 16, i1 false) #9
  %29 = getelementptr inbounds %struct.VkRect2D, %struct.VkRect2D* %27, i64 0, i32 0, i32 0
  store i32 -1, i32* %29, align 8
  %30 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 14, i64 0
  %31 = bitcast float* %30 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float>* %31, align 4
  %32 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 5
  store i8 0, i8* %32, align 8
  %33 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 0, i8* %33, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN24GrVkPrimaryCommandBuffer15beginRenderPassEP7GrVkGpuPK14GrVkRenderPass5sk_spIK15GrVkFramebufferEPK12VkClearValuePK9GrSurfaceRK7SkIRectb(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.GrVkRenderPass*, %class.sk_sp.500* nocapture, %union.VkClearValue*, %class.GrSurface*, %struct.SkIRect* nocapture readonly dereferenceable(16), i1 zeroext) local_unnamed_addr #0 align 2 {
  %9 = alloca %struct.VkRenderPassBeginInfo, align 8
  %10 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %10, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %11 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %11, align 1
  %12 = bitcast %struct.VkRenderPassBeginInfo* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %12) #9
  %13 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = sub i32 %18, %14
  %20 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = sub i32 %21, %16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 64, i1 false)
  %23 = getelementptr inbounds %struct.VkRenderPassBeginInfo, %struct.VkRenderPassBeginInfo* %9, i64 0, i32 0
  store i32 43, i32* %23, align 8
  %24 = getelementptr inbounds %struct.VkRenderPassBeginInfo, %struct.VkRenderPassBeginInfo* %9, i64 0, i32 1
  store i8* null, i8** %24, align 8
  %25 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %2, i64 0, i32 1
  %26 = bitcast %struct.VkRenderPass_T** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.VkRenderPassBeginInfo, %struct.VkRenderPassBeginInfo* %9, i64 0, i32 2
  %29 = bitcast %struct.VkRenderPass_T** %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = getelementptr inbounds %class.sk_sp.500, %class.sk_sp.500* %3, i64 0, i32 0
  %31 = load %class.GrVkFramebuffer*, %class.GrVkFramebuffer** %30, align 8
  %32 = getelementptr inbounds %class.GrVkFramebuffer, %class.GrVkFramebuffer* %31, i64 0, i32 1
  %33 = bitcast %struct.VkFramebuffer_T** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.VkRenderPassBeginInfo, %struct.VkRenderPassBeginInfo* %9, i64 0, i32 3
  %36 = bitcast %struct.VkFramebuffer_T** %35 to i64*
  store i64 %34, i64* %36, align 8
  %37 = getelementptr inbounds %struct.VkRenderPassBeginInfo, %struct.VkRenderPassBeginInfo* %9, i64 0, i32 4, i32 0, i32 0
  store i32 %14, i32* %37, align 8
  %38 = getelementptr inbounds %struct.VkRenderPassBeginInfo, %struct.VkRenderPassBeginInfo* %9, i64 0, i32 4, i32 0, i32 1
  store i32 %16, i32* %38, align 4
  %39 = getelementptr inbounds %struct.VkRenderPassBeginInfo, %struct.VkRenderPassBeginInfo* %9, i64 0, i32 4, i32 1, i32 0
  store i32 %19, i32* %39, align 8
  %40 = getelementptr inbounds %struct.VkRenderPassBeginInfo, %struct.VkRenderPassBeginInfo* %9, i64 0, i32 4, i32 1, i32 1
  store i32 %22, i32* %40, align 4
  %41 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %2, i64 0, i32 7
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %struct.VkRenderPassBeginInfo, %struct.VkRenderPassBeginInfo* %9, i64 0, i32 5
  store i32 %42, i32* %43, align 8
  %44 = getelementptr inbounds %struct.VkRenderPassBeginInfo, %struct.VkRenderPassBeginInfo* %9, i64 0, i32 6
  store %union.VkClearValue* %4, %union.VkClearValue** %44, align 8
  %45 = zext i1 %7 to i32
  %46 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %47 = load %struct.GrVkInterface*, %struct.GrVkInterface** %46, align 8
  %48 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %47, i64 0, i32 1, i32 131, i32 0
  %49 = load void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)** %48, align 8
  %50 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %51 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %50, align 8
  call void %49(%struct.VkCommandBuffer_T* %51, %struct.VkRenderPassBeginInfo* nonnull %9, i32 %45) #9
  %52 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 8
  store %class.GrVkRenderPass* %2, %class.GrVkRenderPass** %52, align 8
  %53 = bitcast %class.GrVkRenderPass* %2 to %class.GrManagedResource*
  %54 = icmp eq %class.GrVkRenderPass* %2, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %8
  %56 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = atomicrmw add i32* %56, i32 1 monotonic, !noalias !6
  br label %58

58:                                               ; preds = %55, %8
  %59 = ptrtoint %class.GrVkRenderPass* %2 to i64
  %60 = bitcast %class.GrVkRenderPass* %2 to void (%class.GrManagedResource*)***
  %61 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %60, align 8
  %62 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %61, i64 2
  %63 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %62, align 8
  call void %63(%class.GrManagedResource* %53) #9
  %64 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1
  call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %64, i32 1, i32 1) #9
  %65 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %64, i64 0, i32 0
  %66 = load %class.sk_sp*, %class.sk_sp** %65, align 8
  %67 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = lshr i64 %68, 1
  %70 = and i64 %69, 2147483647
  %71 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %66, i64 %70
  %72 = add i64 %68, 2
  %73 = and i64 %72, 4294967294
  %74 = and i64 %68, -4294967295
  %75 = or i64 %73, %74
  store i64 %75, i64* %67, align 8
  %76 = bitcast %class.sk_sp* %71 to i64*
  store i64 %59, i64* %76, align 8
  %77 = bitcast %class.sk_sp.500* %3 to i64*
  %78 = load i64, i64* %77, align 8
  store %class.GrVkFramebuffer* null, %class.GrVkFramebuffer** %30, align 8
  %79 = inttoptr i64 %78 to %class.GrManagedResource*
  %80 = inttoptr i64 %78 to void (%class.GrManagedResource*)***
  %81 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %80, align 8
  %82 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %81, i64 2
  %83 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %82, align 8
  call void %83(%class.GrManagedResource* %79) #9
  call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %64, i32 1, i32 1) #9
  %84 = load %class.sk_sp*, %class.sk_sp** %65, align 8
  %85 = load i64, i64* %67, align 8
  %86 = lshr i64 %85, 1
  %87 = and i64 %86, 2147483647
  %88 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %84, i64 %87
  %89 = add i64 %85, 2
  %90 = and i64 %89, 4294967294
  %91 = and i64 %85, -4294967295
  %92 = or i64 %90, %91
  store i64 %92, i64* %67, align 8
  %93 = bitcast %class.sk_sp* %88 to i64*
  store i64 %78, i64* %93, align 8
  %94 = icmp eq %class.GrSurface* %5, null
  br i1 %94, label %100, label %95

95:                                               ; preds = %58
  %96 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = atomicrmw add i32* %96, i32 1 monotonic, !noalias !9
  %98 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %5, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = atomicrmw add i32* %98, i32 1 monotonic
  br label %100

100:                                              ; preds = %58, %95
  %101 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 4, i32 1
  %102 = ptrtoint %class.GrSurface* %5 to i64
  call void @_ZN8SkTArrayI5gr_spIK9GrSurfaceXadL_ZNK7GrIORefI13GrGpuResourceE21addCommandBufferUsageEvEEXadL_ZNKS5_24removeCommandBufferUsageEvEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray.10* %101, i32 1, i32 1) #9
  %103 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 4, i32 1, i32 0
  %104 = load %class.gr_sp.11*, %class.gr_sp.11** %103, align 8
  %105 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 4, i32 1, i32 1
  %106 = load i64, i64* %105, align 8
  %107 = lshr i64 %106, 1
  %108 = and i64 %107, 2147483647
  %109 = getelementptr inbounds %class.gr_sp.11, %class.gr_sp.11* %104, i64 %108
  %110 = add i64 %106, 2
  %111 = and i64 %110, 4294967294
  %112 = and i64 %106, -4294967295
  %113 = or i64 %111, %112
  store i64 %113, i64* %105, align 8
  %114 = bitcast %class.gr_sp.11* %109 to i64*
  store i64 %102, i64* %114, align 8
  br i1 %94, label %123, label %115

115:                                              ; preds = %100
  %116 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %5, i64 0, i32 0, i32 1
  %117 = getelementptr inbounds %class.GrIORef, %class.GrIORef* %116, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = atomicrmw add i32* %117, i32 -1 acq_rel
  %119 = icmp eq i32 %118, 1
  br i1 %119, label %120, label %123

120:                                              ; preds = %115
  %121 = getelementptr inbounds %class.GrIORef, %class.GrIORef* %116, i64 -1
  %122 = bitcast %class.GrIORef* %121 to %class.GrGpuResource*
  call void @_ZNK13GrGpuResource19notifyARefCntIsZeroEN7GrIORefIS_E14LastRemovedRefE(%class.GrGpuResource* %122, i32 0) #9
  br label %123

123:                                              ; preds = %120, %115, %100
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #9
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer13endRenderPassEPK7GrVkGpu(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %3, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %4 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %4, align 1
  %5 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %6 = load %struct.GrVkInterface*, %struct.GrVkInterface** %5, align 8
  %7 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %6, i64 0, i32 1, i32 133, i32 0
  %8 = load void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*)** %7, align 8
  %9 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %10 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %9, align 8
  tail call void %8(%struct.VkCommandBuffer_T* %10) #9
  %11 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 8
  store %class.GrVkRenderPass* null, %class.GrVkRenderPass** %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer10nexSubpassEP7GrVkGpub(%class.GrVkPrimaryCommandBuffer* nocapture readonly, %class.GrVkGpu* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = zext i1 %2 to i32
  %5 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %6 = load %struct.GrVkInterface*, %struct.GrVkInterface** %5, align 8
  %7 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %6, i64 0, i32 1, i32 132, i32 0
  %8 = load void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)** %7, align 8
  %9 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %10 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %9, align 8
  tail call void %8(%struct.VkCommandBuffer_T* %10, i32 %4) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer15executeCommandsEPK7GrVkGpuNSt3__110unique_ptrI26GrVkSecondaryCommandBufferNS3_14default_deleteIS5_EEEE(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.GrVkSecondaryCommandBuffer*) local_unnamed_addr #0 align 2 {
  %4 = ptrtoint %class.GrVkSecondaryCommandBuffer* %2 to i64
  %5 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %5, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %6 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %8 = load %struct.GrVkInterface*, %struct.GrVkInterface** %7, align 8
  %9 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %8, i64 0, i32 1, i32 134, i32 0
  %10 = load void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)** %9, align 8
  %11 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %12 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %11, align 8
  %13 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %2, i64 0, i32 0, i32 9
  tail call void %10(%struct.VkCommandBuffer_T* %12, i32 1, %struct.VkCommandBuffer_T** %13) #9
  %14 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 1
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrI26GrVkSecondaryCommandBufferNS0_14default_deleteIS2_EEEELb1EE12checkReallocEiNS6_11ReallocTypeE(%class.SkTArray.449* %14, i32 1, i32 1) #9
  %15 = getelementptr inbounds %class.SkTArray.449, %class.SkTArray.449* %14, i64 0, i32 0
  %16 = load %"class.std::__1::unique_ptr.450"*, %"class.std::__1::unique_ptr.450"** %15, align 8
  %17 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 1, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = lshr i64 %18, 1
  %20 = and i64 %19, 2147483647
  %21 = getelementptr inbounds %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450"* %16, i64 %20
  %22 = add i64 %18, 2
  %23 = and i64 %22, 4294967294
  %24 = and i64 %18, -4294967295
  %25 = or i64 %23, %24
  store i64 %25, i64* %17, align 8
  %26 = bitcast %"class.std::__1::unique_ptr.450"* %21 to i64*
  store i64 %4, i64* %26, align 8
  %27 = getelementptr %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 10, i64 0
  %28 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 12, i32 2
  %29 = bitcast %struct.VkBuffer_T** %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 48, i1 false) #9
  store float -1.000000e+00, float* %28, align 8
  %30 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 13
  %31 = bitcast %struct.VkRect2D* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 16, i1 false) #9
  %32 = getelementptr inbounds %struct.VkRect2D, %struct.VkRect2D* %30, i64 0, i32 0, i32 0
  store i32 -1, i32* %32, align 8
  %33 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 14, i64 0
  %34 = bitcast float* %33 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float>* %34, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN24GrVkPrimaryCommandBuffer13submitToQueueEP7GrVkGpuP9VkQueue_TR8SkTArrayIPN13GrVkSemaphore8ResourceELb0EES9_(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu*, %struct.VkQueue_T*, %class.SkTArray.429* nocapture readonly dereferenceable(16), %class.SkTArray.429* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.VkProtectedSubmitInfo, align 8
  %7 = alloca %struct.VkSubmitInfo, align 8
  %8 = alloca %struct.VkProtectedSubmitInfo, align 8
  %9 = alloca %struct.VkSubmitInfo, align 8
  %10 = alloca %struct.VkFenceCreateInfo, align 8
  %11 = alloca %class.SkTArray.519, align 8
  %12 = alloca %class.SkTArray.519, align 8
  %13 = alloca %class.SkTArray.412, align 8
  %14 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 2
  %15 = load %struct.VkFence_T*, %struct.VkFence_T** %14, align 8
  %16 = icmp eq %struct.VkFence_T* %15, null
  br i1 %16, label %17, label %39

17:                                               ; preds = %5
  %18 = bitcast %struct.VkFenceCreateInfo* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false)
  %19 = getelementptr inbounds %struct.VkFenceCreateInfo, %struct.VkFenceCreateInfo* %10, i64 0, i32 0
  store i32 8, i32* %19, align 8
  %20 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %21 = load %struct.GrVkInterface*, %struct.GrVkInterface** %20, align 8
  %22 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %21, i64 0, i32 1, i32 33, i32 0
  %23 = load i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)** %22, align 8
  %24 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 6
  %25 = load %struct.VkDevice_T*, %struct.VkDevice_T** %24, align 8
  %26 = call i32 %23(%struct.VkDevice_T* %25, %struct.VkFenceCreateInfo* nonnull %10, %struct.VkAllocationCallbacks* null, %struct.VkFence_T** %14) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %37, label %28

28:                                               ; preds = %17
  %29 = bitcast %class.GrVkGpu* %1 to i1 (%class.GrVkGpu*)***
  %30 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %29, align 8
  %31 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %30, i64 8
  %32 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %31, align 8
  %33 = call zeroext i1 %32(%class.GrVkGpu* %1) #9
  br i1 %33, label %35, label %34

34:                                               ; preds = %28
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 582, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.5, i64 0, i64 0), i32 %26) #9
  br label %35

35:                                               ; preds = %28, %34
  %36 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 %26) #9
  store %struct.VkFence_T* null, %struct.VkFence_T** %14, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #9
  br label %443

37:                                               ; preds = %17
  %38 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 0) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #9
  br label %57

39:                                               ; preds = %5
  %40 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %41 = load %struct.GrVkInterface*, %struct.GrVkInterface** %40, align 8
  %42 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %41, i64 0, i32 1, i32 35, i32 0
  %43 = load i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)** %42, align 8
  %44 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 6
  %45 = load %struct.VkDevice_T*, %struct.VkDevice_T** %44, align 8
  %46 = tail call i32 %43(%struct.VkDevice_T* %45, i32 1, %struct.VkFence_T** %14) #9
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %55, label %48

48:                                               ; preds = %39
  %49 = bitcast %class.GrVkGpu* %1 to i1 (%class.GrVkGpu*)***
  %50 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %49, align 8
  %51 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %50, i64 8
  %52 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %51, align 8
  %53 = tail call zeroext i1 %52(%class.GrVkGpu* %1) #9
  br i1 %53, label %55, label %54

54:                                               ; preds = %48
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 589, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.6, i64 0, i64 0), i32 %46) #9
  br label %55

55:                                               ; preds = %39, %54, %48
  %56 = tail call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 %46) #9
  br label %57

57:                                               ; preds = %37, %55
  %58 = getelementptr inbounds %class.SkTArray.429, %class.SkTArray.429* %3, i64 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = lshr i64 %59, 1
  %61 = trunc i64 %60 to i32
  %62 = and i32 %61, 2147483647
  %63 = getelementptr inbounds %class.SkTArray.429, %class.SkTArray.429* %4, i64 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = lshr i64 %64, 1
  %66 = trunc i64 %65 to i32
  %67 = and i32 %66, 2147483647
  %68 = or i32 %67, %62
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %108

70:                                               ; preds = %57
  %71 = load %struct.VkFence_T*, %struct.VkFence_T** %14, align 8
  %72 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %73 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 20
  %74 = load i8, i8* %73, align 1, !range !2
  %75 = icmp ne i8 %74, 0
  %76 = bitcast %struct.VkProtectedSubmitInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %76) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %76, i8 -86, i64 24, i1 false) #9
  br i1 %75, label %77, label %81

77:                                               ; preds = %70
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %76, i8 0, i64 24, i1 false) #9
  %78 = getelementptr inbounds %struct.VkProtectedSubmitInfo, %struct.VkProtectedSubmitInfo* %6, i64 0, i32 0
  store i32 1000145000, i32* %78, align 8
  %79 = getelementptr inbounds %struct.VkProtectedSubmitInfo, %struct.VkProtectedSubmitInfo* %6, i64 0, i32 1
  store i8* null, i8** %79, align 8
  %80 = getelementptr inbounds %struct.VkProtectedSubmitInfo, %struct.VkProtectedSubmitInfo* %6, i64 0, i32 2
  store i32 1, i32* %80, align 8
  br label %81

81:                                               ; preds = %77, %70
  %82 = bitcast %struct.VkSubmitInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %82) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %82, i8 0, i64 64, i1 false) #9
  %83 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %7, i64 0, i32 0
  store i32 4, i32* %83, align 8
  %84 = select i1 %75, i8* %76, i8* null
  %85 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %7, i64 0, i32 1
  store i8* %84, i8** %85, align 8
  %86 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %7, i64 0, i32 2
  store i32 0, i32* %86, align 8
  %87 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %7, i64 0, i32 3
  %88 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %7, i64 0, i32 5
  %89 = bitcast %struct.VkSemaphore_T*** %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 16, i1 false)
  store i32 1, i32* %88, align 8
  %90 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %7, i64 0, i32 6
  store %struct.VkCommandBuffer_T** %72, %struct.VkCommandBuffer_T*** %90, align 8
  %91 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %7, i64 0, i32 7
  store i32 0, i32* %91, align 8
  %92 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %7, i64 0, i32 8
  store %struct.VkSemaphore_T** null, %struct.VkSemaphore_T*** %92, align 8
  %93 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %94 = load %struct.GrVkInterface*, %struct.GrVkInterface** %93, align 8
  %95 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %94, i64 0, i32 1, i32 16, i32 0
  %96 = load i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)*, i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)** %95, align 8
  %97 = call i32 %96(%struct.VkQueue_T* %2, i32 1, %struct.VkSubmitInfo* nonnull %7, %struct.VkFence_T* %71) #9
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %441, label %99

99:                                               ; preds = %81
  %100 = bitcast %class.GrVkGpu* %1 to i1 (%class.GrVkGpu*)***
  %101 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %100, align 8
  %102 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %101, i64 8
  %103 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %102, align 8
  %104 = call zeroext i1 %103(%class.GrVkGpu* %1) #9
  br i1 %104, label %106, label %105

105:                                              ; preds = %99
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 565, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.10, i64 0, i64 0), i32 %97) #9
  br label %106

106:                                              ; preds = %99, %105
  %107 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 %97) #9
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %82) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %76) #9
  br label %433

108:                                              ; preds = %57
  %109 = bitcast %class.SkTArray.519* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %109) #9
  %110 = getelementptr inbounds %class.SkTArray.519, %class.SkTArray.519* %11, i64 0, i32 0
  %111 = getelementptr inbounds %class.SkTArray.519, %class.SkTArray.519* %11, i64 0, i32 1
  store %struct.VkSemaphore_T** null, %struct.VkSemaphore_T*** %110, align 8
  store i64 1, i64* %111, align 8
  %112 = icmp eq i32 %62, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %108
  store i64 1, i64* %111, align 8
  br label %125

114:                                              ; preds = %108
  call void @_ZN8SkTArrayIP13VkSemaphore_TLb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray.519* nonnull %11, i32 %62, i32 0) #9
  %115 = load i64, i64* %111, align 8
  %116 = shl i64 %115, 32
  %117 = and i64 %116, 4294967296
  %118 = and i64 %115, -4294967297
  %119 = or i64 %117, %118
  store i64 %119, i64* %111, align 8
  %120 = getelementptr inbounds %class.SkTArray.429, %class.SkTArray.429* %3, i64 0, i32 0
  %121 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1
  %122 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %121, i64 0, i32 0
  %123 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %124 = zext i32 %62 to i64
  br label %153

125:                                              ; preds = %199, %113
  %126 = bitcast %class.SkTArray.519* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %126) #9
  %127 = getelementptr inbounds %class.SkTArray.519, %class.SkTArray.519* %12, i64 0, i32 0
  %128 = getelementptr inbounds %class.SkTArray.519, %class.SkTArray.519* %12, i64 0, i32 1
  store %struct.VkSemaphore_T** null, %struct.VkSemaphore_T*** %127, align 8
  store i64 1, i64* %128, align 8
  %129 = icmp ne i32 %67, 0
  br i1 %129, label %130, label %136

130:                                              ; preds = %125
  call void @_ZN8SkTArrayIP13VkSemaphore_TLb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray.519* nonnull %12, i32 %67, i32 0) #9
  %131 = load i64, i64* %128, align 8
  %132 = shl i64 %131, 32
  %133 = and i64 %132, 4294967296
  %134 = and i64 %131, -4294967297
  %135 = or i64 %133, %134
  br label %136

136:                                              ; preds = %125, %130
  %137 = phi i64 [ %135, %130 ], [ 1, %125 ]
  store i64 %137, i64* %128, align 8
  %138 = bitcast %class.SkTArray.412* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %138) #9
  %139 = getelementptr inbounds %class.SkTArray.412, %class.SkTArray.412* %13, i64 0, i32 0
  %140 = getelementptr inbounds %class.SkTArray.412, %class.SkTArray.412* %13, i64 0, i32 1
  store i32* null, i32** %139, align 8
  store i64 1, i64* %140, align 8
  br i1 %129, label %142, label %141

141:                                              ; preds = %136
  store i64 1, i64* %140, align 8
  br label %202

142:                                              ; preds = %136
  call void @_ZN8SkTArrayIjLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.412* nonnull %13, i32 %67, i32 0) #9
  %143 = load i64, i64* %140, align 8
  %144 = shl i64 %143, 32
  %145 = and i64 %144, 4294967296
  %146 = and i64 %143, -4294967297
  %147 = or i64 %145, %146
  store i64 %147, i64* %140, align 8
  %148 = getelementptr inbounds %class.SkTArray.429, %class.SkTArray.429* %4, i64 0, i32 0
  %149 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1
  %150 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %149, i64 0, i32 0
  %151 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %152 = zext i32 %67 to i64
  br label %258

153:                                              ; preds = %199, %114
  %154 = phi i64 [ 0, %114 ], [ %200, %199 ]
  %155 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %120, align 8
  %156 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %155, i64 %154
  %157 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %156, align 8
  %158 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %157, i64 0, i32 2
  %159 = load i8, i8* %158, align 8, !range !2
  %160 = icmp eq i8 %159, 0
  %161 = bitcast %"class.GrVkSemaphore::Resource"* %157 to %class.GrManagedResource*
  br i1 %160, label %162, label %199

162:                                              ; preds = %153
  %163 = icmp eq %"class.GrVkSemaphore::Resource"* %157, null
  br i1 %163, label %167, label %164

164:                                              ; preds = %162
  %165 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %157, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %166 = atomicrmw add i32* %165, i32 1 monotonic, !noalias !12
  br label %167

167:                                              ; preds = %162, %164
  %168 = ptrtoint %"class.GrVkSemaphore::Resource"* %157 to i64
  %169 = bitcast %"class.GrVkSemaphore::Resource"* %157 to void (%class.GrManagedResource*)***
  %170 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %169, align 8
  %171 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %170, i64 2
  %172 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %171, align 8
  call void %172(%class.GrManagedResource* %161) #9
  call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %121, i32 1, i32 1) #9
  %173 = load %class.sk_sp*, %class.sk_sp** %122, align 8
  %174 = load i64, i64* %123, align 8
  %175 = lshr i64 %174, 1
  %176 = and i64 %175, 2147483647
  %177 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %173, i64 %176
  %178 = add i64 %174, 2
  %179 = and i64 %178, 4294967294
  %180 = and i64 %174, -4294967295
  %181 = or i64 %179, %180
  store i64 %181, i64* %123, align 8
  %182 = bitcast %class.sk_sp* %177 to i64*
  store i64 %168, i64* %182, align 8
  %183 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %120, align 8
  %184 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %183, i64 %154
  %185 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %184, align 8
  %186 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %185, i64 0, i32 1
  %187 = bitcast %struct.VkSemaphore_T** %186 to i64*
  %188 = load i64, i64* %187, align 8
  call void @_ZN8SkTArrayIP13VkSemaphore_TLb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray.519* nonnull %11, i32 1, i32 1) #9
  %189 = load %struct.VkSemaphore_T**, %struct.VkSemaphore_T*** %110, align 8
  %190 = load i64, i64* %111, align 8
  %191 = lshr i64 %190, 1
  %192 = and i64 %191, 2147483647
  %193 = getelementptr inbounds %struct.VkSemaphore_T*, %struct.VkSemaphore_T** %189, i64 %192
  %194 = add i64 %190, 2
  %195 = and i64 %194, 4294967294
  %196 = and i64 %190, -4294967295
  %197 = or i64 %195, %196
  store i64 %197, i64* %111, align 8
  %198 = bitcast %struct.VkSemaphore_T** %193 to i64*
  store i64 %188, i64* %198, align 8
  br label %199

199:                                              ; preds = %153, %167
  %200 = add nuw nsw i64 %154, 1
  %201 = icmp eq i64 %200, %124
  br i1 %201, label %125, label %153

202:                                              ; preds = %313, %141
  %203 = phi i1 [ true, %141 ], [ false, %313 ]
  %204 = load %struct.VkFence_T*, %struct.VkFence_T** %14, align 8
  %205 = load i64, i64* %128, align 8
  %206 = lshr i64 %205, 1
  %207 = trunc i64 %206 to i32
  %208 = and i32 %207, 2147483647
  %209 = bitcast %class.SkTArray.519* %12 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = bitcast %class.SkTArray.412* %13 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %214 = load i64, i64* %111, align 8
  %215 = lshr i64 %214, 1
  %216 = trunc i64 %215 to i32
  %217 = and i32 %216, 2147483647
  %218 = bitcast %class.SkTArray.519* %11 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 20
  %221 = load i8, i8* %220, align 1, !range !2
  %222 = icmp ne i8 %221, 0
  %223 = bitcast %struct.VkProtectedSubmitInfo* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %223) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %223, i8 -86, i64 24, i1 false) #9
  br i1 %222, label %224, label %228

224:                                              ; preds = %202
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %223, i8 0, i64 24, i1 false) #9
  %225 = getelementptr inbounds %struct.VkProtectedSubmitInfo, %struct.VkProtectedSubmitInfo* %8, i64 0, i32 0
  store i32 1000145000, i32* %225, align 8
  %226 = getelementptr inbounds %struct.VkProtectedSubmitInfo, %struct.VkProtectedSubmitInfo* %8, i64 0, i32 1
  store i8* null, i8** %226, align 8
  %227 = getelementptr inbounds %struct.VkProtectedSubmitInfo, %struct.VkProtectedSubmitInfo* %8, i64 0, i32 2
  store i32 1, i32* %227, align 8
  br label %228

228:                                              ; preds = %224, %202
  %229 = bitcast %struct.VkSubmitInfo* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %229) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %229, i8 0, i64 64, i1 false) #9
  %230 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %9, i64 0, i32 0
  store i32 4, i32* %230, align 8
  %231 = select i1 %222, i8* %223, i8* null
  %232 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %9, i64 0, i32 1
  store i8* %231, i8** %232, align 8
  %233 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %9, i64 0, i32 2
  store i32 %208, i32* %233, align 8
  %234 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %9, i64 0, i32 3
  %235 = bitcast %struct.VkSemaphore_T*** %234 to i64*
  store i64 %210, i64* %235, align 8
  %236 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %9, i64 0, i32 4
  %237 = bitcast i32** %236 to i64*
  store i64 %212, i64* %237, align 8
  %238 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %9, i64 0, i32 5
  store i32 1, i32* %238, align 8
  %239 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %9, i64 0, i32 6
  store %struct.VkCommandBuffer_T** %213, %struct.VkCommandBuffer_T*** %239, align 8
  %240 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %9, i64 0, i32 7
  store i32 %217, i32* %240, align 8
  %241 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %9, i64 0, i32 8
  %242 = bitcast %struct.VkSemaphore_T*** %241 to i64*
  store i64 %219, i64* %242, align 8
  %243 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %244 = load %struct.GrVkInterface*, %struct.GrVkInterface** %243, align 8
  %245 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %244, i64 0, i32 1, i32 16, i32 0
  %246 = load i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)*, i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)** %245, align 8
  %247 = call i32 %246(%struct.VkQueue_T* %2, i32 1, %struct.VkSubmitInfo* nonnull %9, %struct.VkFence_T* %204) #9
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %316, label %249

249:                                              ; preds = %228
  %250 = bitcast %class.GrVkGpu* %1 to i1 (%class.GrVkGpu*)***
  %251 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %250, align 8
  %252 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %251, i64 8
  %253 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %252, align 8
  %254 = call zeroext i1 %253(%class.GrVkGpu* %1) #9
  br i1 %254, label %256, label %255

255:                                              ; preds = %249
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 565, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.10, i64 0, i64 0), i32 %247) #9
  br label %256

256:                                              ; preds = %249, %255
  %257 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 %247) #9
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %229) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %223) #9
  br label %411

258:                                              ; preds = %313, %142
  %259 = phi i64 [ 0, %142 ], [ %314, %313 ]
  %260 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %148, align 8
  %261 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %260, i64 %259
  %262 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %261, align 8
  %263 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %262, i64 0, i32 3
  %264 = load i8, i8* %263, align 1, !range !2
  %265 = icmp eq i8 %264, 0
  %266 = bitcast %"class.GrVkSemaphore::Resource"* %262 to %class.GrManagedResource*
  br i1 %265, label %267, label %313

267:                                              ; preds = %258
  %268 = icmp eq %"class.GrVkSemaphore::Resource"* %262, null
  br i1 %268, label %272, label %269

269:                                              ; preds = %267
  %270 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %262, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %271 = atomicrmw add i32* %270, i32 1 monotonic, !noalias !15
  br label %272

272:                                              ; preds = %267, %269
  %273 = ptrtoint %"class.GrVkSemaphore::Resource"* %262 to i64
  %274 = bitcast %"class.GrVkSemaphore::Resource"* %262 to void (%class.GrManagedResource*)***
  %275 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %274, align 8
  %276 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %275, i64 2
  %277 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %276, align 8
  call void %277(%class.GrManagedResource* %266) #9
  call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %149, i32 1, i32 1) #9
  %278 = load %class.sk_sp*, %class.sk_sp** %150, align 8
  %279 = load i64, i64* %151, align 8
  %280 = lshr i64 %279, 1
  %281 = and i64 %280, 2147483647
  %282 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %278, i64 %281
  %283 = add i64 %279, 2
  %284 = and i64 %283, 4294967294
  %285 = and i64 %279, -4294967295
  %286 = or i64 %284, %285
  store i64 %286, i64* %151, align 8
  %287 = bitcast %class.sk_sp* %282 to i64*
  store i64 %273, i64* %287, align 8
  %288 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %148, align 8
  %289 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %288, i64 %259
  %290 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %289, align 8
  %291 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %290, i64 0, i32 1
  %292 = bitcast %struct.VkSemaphore_T** %291 to i64*
  %293 = load i64, i64* %292, align 8
  call void @_ZN8SkTArrayIP13VkSemaphore_TLb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray.519* nonnull %12, i32 1, i32 1) #9
  %294 = load %struct.VkSemaphore_T**, %struct.VkSemaphore_T*** %127, align 8
  %295 = load i64, i64* %128, align 8
  %296 = lshr i64 %295, 1
  %297 = and i64 %296, 2147483647
  %298 = getelementptr inbounds %struct.VkSemaphore_T*, %struct.VkSemaphore_T** %294, i64 %297
  %299 = add i64 %295, 2
  %300 = and i64 %299, 4294967294
  %301 = and i64 %295, -4294967295
  %302 = or i64 %300, %301
  store i64 %302, i64* %128, align 8
  %303 = bitcast %struct.VkSemaphore_T** %298 to i64*
  store i64 %293, i64* %303, align 8
  call void @_ZN8SkTArrayIjLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.412* nonnull %13, i32 1, i32 1) #9
  %304 = load i32*, i32** %139, align 8
  %305 = load i64, i64* %140, align 8
  %306 = lshr i64 %305, 1
  %307 = and i64 %306, 2147483647
  %308 = getelementptr inbounds i32, i32* %304, i64 %307
  %309 = add i64 %305, 2
  %310 = and i64 %309, 4294967294
  %311 = and i64 %305, -4294967295
  %312 = or i64 %310, %311
  store i64 %312, i64* %140, align 8
  store i32 65536, i32* %308, align 4
  br label %313

313:                                              ; preds = %258, %272
  %314 = add nuw nsw i64 %259, 1
  %315 = icmp eq i64 %314, %152
  br i1 %315, label %202, label %258

316:                                              ; preds = %228
  %317 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 0) #9
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %229) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %223) #9
  br i1 %112, label %339, label %318

318:                                              ; preds = %316
  %319 = getelementptr inbounds %class.SkTArray.429, %class.SkTArray.429* %3, i64 0, i32 0
  %320 = zext i32 %62 to i64
  %321 = add nsw i64 %320, -1
  %322 = and i64 %320, 3
  %323 = icmp ult i64 %321, 3
  br i1 %323, label %326, label %324

324:                                              ; preds = %318
  %325 = sub nsw i64 %320, %322
  br label %348

326:                                              ; preds = %348, %318
  %327 = phi i64 [ 0, %318 ], [ %370, %348 ]
  %328 = icmp eq i64 %322, 0
  br i1 %328, label %339, label %329

329:                                              ; preds = %326, %329
  %330 = phi i64 [ %336, %329 ], [ %327, %326 ]
  %331 = phi i64 [ %337, %329 ], [ %322, %326 ]
  %332 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %319, align 8
  %333 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %332, i64 %330
  %334 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %333, align 8
  %335 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %334, i64 0, i32 2
  store i8 1, i8* %335, align 8
  %336 = add nuw nsw i64 %330, 1
  %337 = add i64 %331, -1
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %329, !llvm.loop !18

339:                                              ; preds = %326, %329, %316
  br i1 %203, label %411, label %340

340:                                              ; preds = %339
  %341 = getelementptr inbounds %class.SkTArray.429, %class.SkTArray.429* %4, i64 0, i32 0
  %342 = zext i32 %67 to i64
  %343 = add nsw i64 %342, -1
  %344 = and i64 %342, 3
  %345 = icmp ult i64 %343, 3
  br i1 %345, label %398, label %346

346:                                              ; preds = %340
  %347 = sub nsw i64 %342, %344
  br label %373

348:                                              ; preds = %348, %324
  %349 = phi i64 [ 0, %324 ], [ %370, %348 ]
  %350 = phi i64 [ %325, %324 ], [ %371, %348 ]
  %351 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %319, align 8
  %352 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %351, i64 %349
  %353 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %352, align 8
  %354 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %353, i64 0, i32 2
  store i8 1, i8* %354, align 8
  %355 = or i64 %349, 1
  %356 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %319, align 8
  %357 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %356, i64 %355
  %358 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %357, align 8
  %359 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %358, i64 0, i32 2
  store i8 1, i8* %359, align 8
  %360 = or i64 %349, 2
  %361 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %319, align 8
  %362 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %361, i64 %360
  %363 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %362, align 8
  %364 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %363, i64 0, i32 2
  store i8 1, i8* %364, align 8
  %365 = or i64 %349, 3
  %366 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %319, align 8
  %367 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %366, i64 %365
  %368 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %367, align 8
  %369 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %368, i64 0, i32 2
  store i8 1, i8* %369, align 8
  %370 = add nuw nsw i64 %349, 4
  %371 = add i64 %350, -4
  %372 = icmp eq i64 %371, 0
  br i1 %372, label %326, label %348

373:                                              ; preds = %373, %346
  %374 = phi i64 [ 0, %346 ], [ %395, %373 ]
  %375 = phi i64 [ %347, %346 ], [ %396, %373 ]
  %376 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %341, align 8
  %377 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %376, i64 %374
  %378 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %377, align 8
  %379 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %378, i64 0, i32 3
  store i8 1, i8* %379, align 1
  %380 = or i64 %374, 1
  %381 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %341, align 8
  %382 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %381, i64 %380
  %383 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %382, align 8
  %384 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %383, i64 0, i32 3
  store i8 1, i8* %384, align 1
  %385 = or i64 %374, 2
  %386 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %341, align 8
  %387 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %386, i64 %385
  %388 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %387, align 8
  %389 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %388, i64 0, i32 3
  store i8 1, i8* %389, align 1
  %390 = or i64 %374, 3
  %391 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %341, align 8
  %392 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %391, i64 %390
  %393 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %392, align 8
  %394 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %393, i64 0, i32 3
  store i8 1, i8* %394, align 1
  %395 = add nuw nsw i64 %374, 4
  %396 = add i64 %375, -4
  %397 = icmp eq i64 %396, 0
  br i1 %397, label %398, label %373

398:                                              ; preds = %373, %340
  %399 = phi i64 [ 0, %340 ], [ %395, %373 ]
  %400 = icmp eq i64 %344, 0
  br i1 %400, label %411, label %401

401:                                              ; preds = %398, %401
  %402 = phi i64 [ %408, %401 ], [ %399, %398 ]
  %403 = phi i64 [ %409, %401 ], [ %344, %398 ]
  %404 = load %"class.GrVkSemaphore::Resource"**, %"class.GrVkSemaphore::Resource"*** %341, align 8
  %405 = getelementptr inbounds %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %404, i64 %402
  %406 = load %"class.GrVkSemaphore::Resource"*, %"class.GrVkSemaphore::Resource"** %405, align 8
  %407 = getelementptr inbounds %"class.GrVkSemaphore::Resource", %"class.GrVkSemaphore::Resource"* %406, i64 0, i32 3
  store i8 1, i8* %407, align 1
  %408 = add nuw nsw i64 %402, 1
  %409 = add i64 %403, -1
  %410 = icmp eq i64 %409, 0
  br i1 %410, label %411, label %401, !llvm.loop !20

411:                                              ; preds = %398, %401, %256, %339
  %412 = load i64, i64* %140, align 8
  %413 = and i64 %412, 1
  %414 = icmp eq i64 %413, 0
  br i1 %414, label %418, label %415

415:                                              ; preds = %411
  %416 = bitcast %class.SkTArray.412* %13 to i8**
  %417 = load i8*, i8** %416, align 8
  call void @_Z7sk_freePv(i8* %417) #9
  br label %418

418:                                              ; preds = %411, %415
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %138) #9
  %419 = load i64, i64* %128, align 8
  %420 = and i64 %419, 1
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %425, label %422

422:                                              ; preds = %418
  %423 = bitcast %class.SkTArray.519* %12 to i8**
  %424 = load i8*, i8** %423, align 8
  call void @_Z7sk_freePv(i8* %424) #9
  br label %425

425:                                              ; preds = %418, %422
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %126) #9
  %426 = load i64, i64* %111, align 8
  %427 = and i64 %426, 1
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %432, label %429

429:                                              ; preds = %425
  %430 = bitcast %class.SkTArray.519* %11 to i8**
  %431 = load i8*, i8** %430, align 8
  call void @_Z7sk_freePv(i8* %431) #9
  br label %432

432:                                              ; preds = %429, %425
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %109) #9
  br i1 %248, label %443, label %433

433:                                              ; preds = %106, %432
  %434 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %435 = load %struct.GrVkInterface*, %struct.GrVkInterface** %434, align 8
  %436 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %435, i64 0, i32 1, i32 34, i32 0
  %437 = load void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)** %436, align 8
  %438 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 6
  %439 = load %struct.VkDevice_T*, %struct.VkDevice_T** %438, align 8
  %440 = load %struct.VkFence_T*, %struct.VkFence_T** %14, align 8
  call void %437(%struct.VkDevice_T* %439, %struct.VkFence_T* %440, %struct.VkAllocationCallbacks* null) #9
  store %struct.VkFence_T* null, %struct.VkFence_T** %14, align 8
  br label %443

441:                                              ; preds = %81
  %442 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 0) #9
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %82) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %76) #9
  br label %443

443:                                              ; preds = %441, %433, %432, %35
  %444 = phi i1 [ false, %35 ], [ false, %433 ], [ true, %432 ], [ true, %441 ]
  ret i1 %444
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer9forceSyncEP7GrVkGpu(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 2
  %4 = load %struct.VkFence_T*, %struct.VkFence_T** %3, align 8
  %5 = icmp eq %struct.VkFence_T* %4, null
  br i1 %5, label %24, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %8 = load %struct.GrVkInterface*, %struct.GrVkInterface** %7, align 8
  %9 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %8, i64 0, i32 1, i32 37, i32 0
  %10 = load i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)*, i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)** %9, align 8
  %11 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 6
  %12 = load %struct.VkDevice_T*, %struct.VkDevice_T** %11, align 8
  %13 = tail call i32 %10(%struct.VkDevice_T* %12, i32 1, %struct.VkFence_T** %3, i32 1, i64 -1) #9
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %6
  %16 = bitcast %class.GrVkGpu* %1 to i1 (%class.GrVkGpu*)***
  %17 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %16, align 8
  %18 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %17, i64 8
  %19 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %18, align 8
  %20 = tail call zeroext i1 %19(%class.GrVkGpu* %1) #9
  br i1 %20, label %22, label %21

21:                                               ; preds = %15
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 649, i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str.7, i64 0, i64 0), i32 %13) #9
  br label %22

22:                                               ; preds = %6, %21, %15
  %23 = tail call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 %13) #9
  br label %24

24:                                               ; preds = %2, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN24GrVkPrimaryCommandBuffer8finishedEP7GrVkGpu(%class.GrVkPrimaryCommandBuffer* nocapture readonly, %class.GrVkGpu*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 2
  %4 = load %struct.VkFence_T*, %struct.VkFence_T** %3, align 8
  %5 = icmp eq %struct.VkFence_T* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %8 = load %struct.GrVkInterface*, %struct.GrVkInterface** %7, align 8
  %9 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %8, i64 0, i32 1, i32 36, i32 0
  %10 = load i32 (%struct.VkDevice_T*, %struct.VkFence_T*)*, i32 (%struct.VkDevice_T*, %struct.VkFence_T*)** %9, align 8
  %11 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 6
  %12 = load %struct.VkDevice_T*, %struct.VkDevice_T** %11, align 8
  %13 = tail call i32 %10(%struct.VkDevice_T* %12, %struct.VkFence_T* nonnull %4) #9
  %14 = tail call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 %13) #9
  switch i32 %13, label %16 [
    i32 0, label %17
    i32 -4, label %17
    i32 1, label %15
  ]

15:                                               ; preds = %6
  br label %17

16:                                               ; preds = %6
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 669, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.8, i64 0, i64 0), i32 %13) #9
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 670, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0)) #11
  unreachable

17:                                               ; preds = %15, %6, %6, %2
  %18 = phi i1 [ true, %2 ], [ false, %15 ], [ true, %6 ], [ true, %6 ]
  ret i1 %18
}

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer15addFinishedProcE5sk_spI18GrRefCntedCallbackE(%class.GrVkPrimaryCommandBuffer*, %class.sk_sp.206* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 3
  tail call void @_ZN8SkTArrayI5sk_spI18GrRefCntedCallbackELb0EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.456* %3, i32 1, i32 1) #9
  %4 = getelementptr inbounds %class.SkTArray.456, %class.SkTArray.456* %3, i64 0, i32 0
  %5 = load %class.sk_sp.206*, %class.sk_sp.206** %4, align 8
  %6 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 3, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = lshr i64 %7, 1
  %9 = and i64 %8, 2147483647
  %10 = getelementptr inbounds %class.sk_sp.206, %class.sk_sp.206* %5, i64 %9
  %11 = add i64 %7, 2
  %12 = and i64 %11, 4294967294
  %13 = and i64 %7, -4294967295
  %14 = or i64 %12, %13
  store i64 %14, i64* %6, align 8
  %15 = getelementptr inbounds %class.sk_sp.206, %class.sk_sp.206* %1, i64 0, i32 0
  %16 = bitcast %class.sk_sp.206* %1 to i64*
  %17 = load i64, i64* %16, align 8
  store %class.GrRefCntedCallback* null, %class.GrRefCntedCallback** %15, align 8
  %18 = bitcast %class.sk_sp.206* %10 to i64*
  store i64 %17, i64* %18, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer18onReleaseResourcesEv(%class.GrVkPrimaryCommandBuffer*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 1, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 4294967294
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 1, i32 0
  br label %52

8:                                                ; preds = %52, %1
  %9 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 3
  %10 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 3, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = lshr i64 %11, 1
  %13 = trunc i64 %12 to i32
  %14 = and i32 %13, 2147483647
  %15 = and i64 %11, -4294967295
  store i64 %15, i64* %10, align 8
  %16 = icmp eq i32 %14, 0
  br i1 %16, label %49, label %17

17:                                               ; preds = %8
  %18 = getelementptr inbounds %class.SkTArray.456, %class.SkTArray.456* %9, i64 0, i32 0
  br label %19

19:                                               ; preds = %47, %17
  %20 = phi i64 [ %15, %17 ], [ %48, %47 ]
  %21 = phi i32 [ 0, %17 ], [ %45, %47 ]
  %22 = load %class.sk_sp.206*, %class.sk_sp.206** %18, align 8
  %23 = lshr i64 %20, 1
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 2147483647
  %26 = add nuw nsw i32 %25, %21
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %class.sk_sp.206, %class.sk_sp.206* %22, i64 %27, i32 0
  %29 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %28, align 8
  %30 = icmp eq %class.GrRefCntedCallback* %29, null
  br i1 %30, label %44, label %31

31:                                               ; preds = %19
  %32 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %29, i64 0, i32 0
  %33 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = atomicrmw add i32* %33, i32 -1 acq_rel
  %35 = icmp eq i32 %34, 1
  br i1 %35, label %36, label %44

36:                                               ; preds = %31
  %37 = getelementptr inbounds %class.SkNVRefCnt.207, %class.SkNVRefCnt.207* %32, i64 2
  %38 = bitcast %class.SkNVRefCnt.207* %37 to void (i8*)**
  %39 = load void (i8*)*, void (i8*)** %38, align 8
  %40 = getelementptr inbounds %class.SkNVRefCnt.207, %class.SkNVRefCnt.207* %32, i64 4
  %41 = bitcast %class.SkNVRefCnt.207* %40 to i8**
  %42 = load i8*, i8** %41, align 8
  tail call void %39(i8* %42) #9
  %43 = bitcast %class.GrRefCntedCallback* %29 to i8*
  tail call void @_ZdlPv(i8* %43) #10
  br label %44

44:                                               ; preds = %36, %31, %19
  %45 = add nuw nsw i32 %21, 1
  %46 = icmp eq i32 %45, %14
  br i1 %46, label %49, label %47

47:                                               ; preds = %44
  %48 = load i64, i64* %10, align 8
  br label %19

49:                                               ; preds = %44, %8
  tail call void @_ZN8SkTArrayI5sk_spI18GrRefCntedCallbackELb0EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.456* %9, i32 0, i32 2) #9
  %50 = load i64, i64* %10, align 8
  %51 = and i64 %50, -4294967297
  store i64 %51, i64* %10, align 8
  ret void

52:                                               ; preds = %6, %52
  %53 = phi i64 [ 0, %6 ], [ %58, %52 ]
  %54 = load %"class.std::__1::unique_ptr.450"*, %"class.std::__1::unique_ptr.450"** %7, align 8
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450"* %54, i64 %53, i32 0, i32 0, i32 0
  %56 = bitcast %class.GrVkSecondaryCommandBuffer** %55 to %class.GrVkCommandBuffer**
  %57 = load %class.GrVkCommandBuffer*, %class.GrVkCommandBuffer** %56, align 8
  tail call void @_ZN17GrVkCommandBuffer16releaseResourcesEv(%class.GrVkCommandBuffer* %57)
  %58 = add nuw nsw i64 %53, 1
  %59 = load i64, i64* %2, align 8
  %60 = lshr i64 %59, 1
  %61 = and i64 %60, 2147483647
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %52, label %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer30recycleSecondaryCommandBuffersEP15GrVkCommandPool(%class.GrVkPrimaryCommandBuffer*, %class.GrVkCommandPool*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 1, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 4294967294
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = and i64 %5, -4294967295
  store i64 %9, i64* %4, align 8
  br label %39

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.SkTArray.449, %class.SkTArray.449* %3, i64 0, i32 0
  br label %42

12:                                               ; preds = %58
  %13 = and i64 %60, -4294967295
  store i64 %13, i64* %4, align 8
  %14 = icmp eq i32 %63, 0
  br i1 %14, label %39, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %class.SkTArray.449, %class.SkTArray.449* %3, i64 0, i32 0
  br label %17

17:                                               ; preds = %37, %15
  %18 = phi i64 [ %13, %15 ], [ %38, %37 ]
  %19 = phi i32 [ 0, %15 ], [ %35, %37 ]
  %20 = load %"class.std::__1::unique_ptr.450"*, %"class.std::__1::unique_ptr.450"** %16, align 8
  %21 = lshr i64 %18, 1
  %22 = trunc i64 %21 to i32
  %23 = and i32 %22, 2147483647
  %24 = add nuw nsw i32 %23, %19
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450"* %20, i64 %25, i32 0, i32 0, i32 0
  %27 = load %class.GrVkSecondaryCommandBuffer*, %class.GrVkSecondaryCommandBuffer** %26, align 8
  store %class.GrVkSecondaryCommandBuffer* null, %class.GrVkSecondaryCommandBuffer** %26, align 8
  %28 = icmp eq %class.GrVkSecondaryCommandBuffer* %27, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %17
  %30 = bitcast %class.GrVkSecondaryCommandBuffer* %27 to void (%class.GrVkSecondaryCommandBuffer*)***
  %31 = load void (%class.GrVkSecondaryCommandBuffer*)**, void (%class.GrVkSecondaryCommandBuffer*)*** %30, align 8
  %32 = getelementptr inbounds void (%class.GrVkSecondaryCommandBuffer*)*, void (%class.GrVkSecondaryCommandBuffer*)** %31, i64 1
  %33 = load void (%class.GrVkSecondaryCommandBuffer*)*, void (%class.GrVkSecondaryCommandBuffer*)** %32, align 8
  tail call void %33(%class.GrVkSecondaryCommandBuffer* nonnull %27) #9
  br label %34

34:                                               ; preds = %29, %17
  %35 = add nuw nsw i32 %19, 1
  %36 = icmp eq i32 %35, %63
  br i1 %36, label %39, label %37

37:                                               ; preds = %34
  %38 = load i64, i64* %4, align 8
  br label %17

39:                                               ; preds = %34, %8, %12
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrI26GrVkSecondaryCommandBufferNS0_14default_deleteIS2_EEEELb1EE12checkReallocEiNS6_11ReallocTypeE(%class.SkTArray.449* %3, i32 0, i32 2) #9
  %40 = load i64, i64* %4, align 8
  %41 = and i64 %40, -4294967297
  store i64 %41, i64* %4, align 8
  ret void

42:                                               ; preds = %10, %58
  %43 = phi i64 [ 0, %10 ], [ %59, %58 ]
  %44 = load %"class.std::__1::unique_ptr.450"*, %"class.std::__1::unique_ptr.450"** %11, align 8
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450"* %44, i64 %43, i32 0, i32 0, i32 0
  %46 = load %class.GrVkSecondaryCommandBuffer*, %class.GrVkSecondaryCommandBuffer** %45, align 8
  store %class.GrVkSecondaryCommandBuffer* null, %class.GrVkSecondaryCommandBuffer** %45, align 8
  %47 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %46, i64 0, i32 0, i32 21
  %48 = load i8, i8* %47, align 4, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %57, label %50

50:                                               ; preds = %42
  %51 = icmp eq %class.GrVkSecondaryCommandBuffer* %46, null
  br i1 %51, label %58, label %52

52:                                               ; preds = %50
  %53 = bitcast %class.GrVkSecondaryCommandBuffer* %46 to void (%class.GrVkSecondaryCommandBuffer*)***
  %54 = load void (%class.GrVkSecondaryCommandBuffer*)**, void (%class.GrVkSecondaryCommandBuffer*)*** %53, align 8
  %55 = getelementptr inbounds void (%class.GrVkSecondaryCommandBuffer*)*, void (%class.GrVkSecondaryCommandBuffer*)** %54, i64 1
  %56 = load void (%class.GrVkSecondaryCommandBuffer*)*, void (%class.GrVkSecondaryCommandBuffer*)** %55, align 8
  tail call void %56(%class.GrVkSecondaryCommandBuffer* nonnull %46) #9
  br label %58

57:                                               ; preds = %42
  tail call void @_ZN15GrVkCommandPool29recycleSecondaryCommandBufferEP26GrVkSecondaryCommandBuffer(%class.GrVkCommandPool* %1, %class.GrVkSecondaryCommandBuffer* %46) #9
  br label %58

58:                                               ; preds = %50, %52, %57
  %59 = add nuw nsw i64 %43, 1
  %60 = load i64, i64* %4, align 8
  %61 = lshr i64 %60, 1
  %62 = trunc i64 %61 to i32
  %63 = and i32 %62, 2147483647
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %59, %64
  br i1 %65, label %42, label %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN26GrVkSecondaryCommandBuffer7recycleEP15GrVkCommandPool(%class.GrVkSecondaryCommandBuffer*, %class.GrVkCommandPool*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %0, i64 0, i32 0, i32 21
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = icmp eq %class.GrVkSecondaryCommandBuffer* %0, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %6
  %9 = bitcast %class.GrVkSecondaryCommandBuffer* %0 to void (%class.GrVkSecondaryCommandBuffer*)***
  %10 = load void (%class.GrVkSecondaryCommandBuffer*)**, void (%class.GrVkSecondaryCommandBuffer*)*** %9, align 8
  %11 = getelementptr inbounds void (%class.GrVkSecondaryCommandBuffer*)*, void (%class.GrVkSecondaryCommandBuffer*)** %10, i64 1
  %12 = load void (%class.GrVkSecondaryCommandBuffer*)*, void (%class.GrVkSecondaryCommandBuffer*)** %11, align 8
  tail call void %12(%class.GrVkSecondaryCommandBuffer* nonnull %0) #9
  br label %14

13:                                               ; preds = %2
  tail call void @_ZN15GrVkCommandPool29recycleSecondaryCommandBufferEP26GrVkSecondaryCommandBuffer(%class.GrVkCommandPool* %1, %class.GrVkSecondaryCommandBuffer* %0) #9
  br label %14

14:                                               ; preds = %6, %8, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer9copyImageEPK7GrVkGpuP9GrVkImage13VkImageLayoutS4_S5_jPK11VkImageCopy(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.GrVkImage* nocapture readonly, i32, %class.GrVkImage* nocapture readonly, i32, i32, %struct.VkImageCopy*) local_unnamed_addr #0 align 2 {
  %9 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %9, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %10 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %10, align 1
  %11 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 5
  %12 = bitcast %"class.GrVkImage::Resource"** %11 to %class.GrManagedResource**
  %13 = load %class.GrManagedResource*, %class.GrManagedResource** %12, align 8
  %14 = icmp eq %class.GrManagedResource* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %13, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 1 monotonic, !noalias !21
  br label %18

18:                                               ; preds = %8, %15
  %19 = ptrtoint %class.GrManagedResource* %13 to i64
  %20 = bitcast %class.GrManagedResource* %13 to void (%class.GrManagedResource*)***
  %21 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %20, align 8
  %22 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %21, i64 2
  %23 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %22, align 8
  tail call void %23(%class.GrManagedResource* %13) #9
  %24 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %24, i32 1, i32 1) #9
  %25 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %24, i64 0, i32 0
  %26 = load %class.sk_sp*, %class.sk_sp** %25, align 8
  %27 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = lshr i64 %28, 1
  %30 = and i64 %29, 2147483647
  %31 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %26, i64 %30
  %32 = add i64 %28, 2
  %33 = and i64 %32, 4294967294
  %34 = and i64 %28, -4294967295
  %35 = or i64 %33, %34
  store i64 %35, i64* %27, align 8
  %36 = bitcast %class.sk_sp* %31 to i64*
  store i64 %19, i64* %36, align 8
  %37 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %4, i64 0, i32 5
  %38 = bitcast %"class.GrVkImage::Resource"** %37 to %class.GrManagedResource**
  %39 = load %class.GrManagedResource*, %class.GrManagedResource** %38, align 8
  %40 = icmp eq %class.GrManagedResource* %39, null
  br i1 %40, label %44, label %41

41:                                               ; preds = %18
  %42 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %39, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw add i32* %42, i32 1 monotonic, !noalias !24
  br label %44

44:                                               ; preds = %18, %41
  %45 = ptrtoint %class.GrManagedResource* %39 to i64
  %46 = bitcast %class.GrManagedResource* %39 to void (%class.GrManagedResource*)***
  %47 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %46, align 8
  %48 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %47, i64 2
  %49 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %48, align 8
  tail call void %49(%class.GrManagedResource* %39) #9
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %24, i32 1, i32 1) #9
  %50 = load %class.sk_sp*, %class.sk_sp** %25, align 8
  %51 = load i64, i64* %27, align 8
  %52 = lshr i64 %51, 1
  %53 = and i64 %52, 2147483647
  %54 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %50, i64 %53
  %55 = add i64 %51, 2
  %56 = and i64 %55, 4294967294
  %57 = and i64 %51, -4294967295
  %58 = or i64 %56, %57
  store i64 %58, i64* %27, align 8
  %59 = bitcast %class.sk_sp* %54 to i64*
  store i64 %45, i64* %59, align 8
  %60 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %61 = load %struct.GrVkInterface*, %struct.GrVkInterface** %60, align 8
  %62 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %61, i64 0, i32 1, i32 111, i32 0
  %63 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)** %62, align 8
  %64 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %65 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %64, align 8
  %66 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 1, i32 0
  %67 = load %struct.VkImage_T*, %struct.VkImage_T** %66, align 8
  %68 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %4, i64 0, i32 1, i32 0
  %69 = load %struct.VkImage_T*, %struct.VkImage_T** %68, align 8
  tail call void %63(%struct.VkCommandBuffer_T* %65, %struct.VkImage_T* %67, i32 %3, %struct.VkImage_T* %69, i32 %5, i32 %6, %struct.VkImageCopy* %7) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer9blitImageEPK7GrVkGpuPK17GrManagedResourceP9VkImage_T13VkImageLayoutS5_S7_S8_jPK11VkImageBlit8VkFilter(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.GrManagedResource*, %struct.VkImage_T*, i32, %class.GrManagedResource*, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32) local_unnamed_addr #0 align 2 {
  %12 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %12, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %13 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %13, align 1
  %14 = icmp eq %class.GrManagedResource* %2, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %2, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 1 monotonic, !noalias !27
  br label %18

18:                                               ; preds = %11, %15
  %19 = ptrtoint %class.GrManagedResource* %2 to i64
  %20 = bitcast %class.GrManagedResource* %2 to void (%class.GrManagedResource*)***
  %21 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %20, align 8
  %22 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %21, i64 2
  %23 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %22, align 8
  tail call void %23(%class.GrManagedResource* %2) #9
  %24 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %24, i32 1, i32 1) #9
  %25 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %24, i64 0, i32 0
  %26 = load %class.sk_sp*, %class.sk_sp** %25, align 8
  %27 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = lshr i64 %28, 1
  %30 = and i64 %29, 2147483647
  %31 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %26, i64 %30
  %32 = add i64 %28, 2
  %33 = and i64 %32, 4294967294
  %34 = and i64 %28, -4294967295
  %35 = or i64 %33, %34
  store i64 %35, i64* %27, align 8
  %36 = bitcast %class.sk_sp* %31 to i64*
  store i64 %19, i64* %36, align 8
  %37 = icmp eq %class.GrManagedResource* %5, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %18
  %39 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %5, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = atomicrmw add i32* %39, i32 1 monotonic, !noalias !30
  br label %41

41:                                               ; preds = %18, %38
  %42 = ptrtoint %class.GrManagedResource* %5 to i64
  %43 = bitcast %class.GrManagedResource* %5 to void (%class.GrManagedResource*)***
  %44 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %43, align 8
  %45 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %44, i64 2
  %46 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %45, align 8
  tail call void %46(%class.GrManagedResource* %5) #9
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %24, i32 1, i32 1) #9
  %47 = load %class.sk_sp*, %class.sk_sp** %25, align 8
  %48 = load i64, i64* %27, align 8
  %49 = lshr i64 %48, 1
  %50 = and i64 %49, 2147483647
  %51 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %47, i64 %50
  %52 = add i64 %48, 2
  %53 = and i64 %52, 4294967294
  %54 = and i64 %48, -4294967295
  %55 = or i64 %53, %54
  store i64 %55, i64* %27, align 8
  %56 = bitcast %class.sk_sp* %51 to i64*
  store i64 %42, i64* %56, align 8
  %57 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %58 = load %struct.GrVkInterface*, %struct.GrVkInterface** %57, align 8
  %59 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %58, i64 0, i32 1, i32 112, i32 0
  %60 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)** %59, align 8
  %61 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %62 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %61, align 8
  tail call void %60(%struct.VkCommandBuffer_T* %62, %struct.VkImage_T* %3, i32 %4, %struct.VkImage_T* %6, i32 %7, i32 %8, %struct.VkImageBlit* %9, i32 %10) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer9blitImageEPK7GrVkGpuRK9GrVkImageS5_jPK11VkImageBlit8VkFilter(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.GrVkImage* nocapture readonly dereferenceable(184), %class.GrVkImage* nocapture readonly dereferenceable(184), i32, %struct.VkImageBlit*, i32) local_unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 5
  %9 = bitcast %"class.GrVkImage::Resource"** %8 to %class.GrManagedResource**
  %10 = load %class.GrManagedResource*, %class.GrManagedResource** %9, align 8
  %11 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 1, i32 0
  %12 = load %struct.VkImage_T*, %struct.VkImage_T** %11, align 8
  %13 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 3, i32 0
  %14 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %13, align 8
  %15 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %14, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 seq_cst, align 4
  %17 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %3, i64 0, i32 5
  %18 = bitcast %"class.GrVkImage::Resource"** %17 to %class.GrManagedResource**
  %19 = load %class.GrManagedResource*, %class.GrManagedResource** %18, align 8
  %20 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %3, i64 0, i32 1, i32 0
  %21 = load %struct.VkImage_T*, %struct.VkImage_T** %20, align 8
  %22 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %3, i64 0, i32 3, i32 0
  %23 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %22, align 8
  %24 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %23, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 seq_cst, align 4
  tail call void @_ZN24GrVkPrimaryCommandBuffer9blitImageEPK7GrVkGpuPK17GrManagedResourceP9VkImage_T13VkImageLayoutS5_S7_S8_jPK11VkImageBlit8VkFilter(%class.GrVkPrimaryCommandBuffer* %0, %class.GrVkGpu* %1, %class.GrManagedResource* %10, %struct.VkImage_T* %12, i32 %16, %class.GrManagedResource* %19, %struct.VkImage_T* %21, i32 %25, i32 %4, %struct.VkImageBlit* %5, i32 %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer17copyImageToBufferEPK7GrVkGpuP9GrVkImage13VkImageLayout5sk_spI11GrGpuBufferEjPK17VkBufferImageCopy(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.GrVkImage* nocapture readonly, i32, %class.sk_sp.421* nocapture, i32, %struct.VkBufferImageCopy*) local_unnamed_addr #0 align 2 {
  %8 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %8, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %9 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %9, align 1
  %10 = getelementptr inbounds %class.sk_sp.421, %class.sk_sp.421* %4, i64 0, i32 0
  %11 = bitcast %class.sk_sp.421* %4 to %class.GrVkBuffer**
  %12 = load %class.GrVkBuffer*, %class.GrVkBuffer** %11, align 8
  %13 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %14 = load %struct.GrVkInterface*, %struct.GrVkInterface** %13, align 8
  %15 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %14, i64 0, i32 1, i32 114, i32 0
  %16 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)** %15, align 8
  %17 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %18 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %17, align 8
  %19 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 1, i32 0
  %20 = load %struct.VkImage_T*, %struct.VkImage_T** %19, align 8
  %21 = getelementptr inbounds %class.GrVkBuffer, %class.GrVkBuffer* %12, i64 0, i32 1
  %22 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %21, align 8
  tail call void %16(%struct.VkCommandBuffer_T* %18, %struct.VkImage_T* %20, i32 %3, %struct.VkBuffer_T* %22, i32 %5, %struct.VkBufferImageCopy* %6) #9
  %23 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 5
  %24 = bitcast %"class.GrVkImage::Resource"** %23 to %class.GrManagedResource**
  %25 = load %class.GrManagedResource*, %class.GrManagedResource** %24, align 8
  %26 = icmp eq %class.GrManagedResource* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %7
  %28 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %25, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = atomicrmw add i32* %28, i32 1 monotonic, !noalias !33
  br label %30

30:                                               ; preds = %27, %7
  %31 = ptrtoint %class.GrManagedResource* %25 to i64
  %32 = bitcast %class.GrManagedResource* %25 to void (%class.GrManagedResource*)***
  %33 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %32, align 8
  %34 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %33, i64 2
  %35 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %34, align 8
  tail call void %35(%class.GrManagedResource* %25) #9
  %36 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %36, i32 1, i32 1) #9
  %37 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %36, i64 0, i32 0
  %38 = load %class.sk_sp*, %class.sk_sp** %37, align 8
  %39 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = lshr i64 %40, 1
  %42 = and i64 %41, 2147483647
  %43 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %38, i64 %42
  %44 = add i64 %40, 2
  %45 = and i64 %44, 4294967294
  %46 = and i64 %40, -4294967295
  %47 = or i64 %45, %46
  store i64 %47, i64* %39, align 8
  %48 = bitcast %class.sk_sp* %43 to i64*
  store i64 %31, i64* %48, align 8
  %49 = load %class.GrGpuBuffer*, %class.GrGpuBuffer** %10, align 8
  store %class.GrGpuBuffer* null, %class.GrGpuBuffer** %10, align 8
  %50 = icmp eq %class.GrGpuBuffer* %49, null
  %51 = getelementptr inbounds %class.GrGpuBuffer, %class.GrGpuBuffer* %49, i64 0, i32 1
  %52 = ptrtoint %class.GrBuffer* %51 to i64
  %53 = select i1 %50, i64 0, i64 %52
  %54 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 3, i32 1
  tail call void @_ZN8SkTArrayI5sk_spIK8GrBufferELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray.6* %54, i32 1, i32 1) #9
  %55 = getelementptr inbounds %class.SkTArray.6, %class.SkTArray.6* %54, i64 0, i32 0
  %56 = load %class.sk_sp.7*, %class.sk_sp.7** %55, align 8
  %57 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 3, i32 1, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = lshr i64 %58, 1
  %60 = and i64 %59, 2147483647
  %61 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %56, i64 %60
  %62 = add i64 %58, 2
  %63 = and i64 %62, 4294967294
  %64 = and i64 %58, -4294967295
  %65 = or i64 %63, %64
  store i64 %65, i64* %57, align 8
  %66 = bitcast %class.sk_sp.7* %61 to i64*
  store i64 %53, i64* %66, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer17copyBufferToImageEPK7GrVkGpuP10VkBuffer_TP9GrVkImage13VkImageLayoutjPK17VkBufferImageCopy(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %struct.VkBuffer_T*, %class.GrVkImage* nocapture readonly, i32, i32, %struct.VkBufferImageCopy*) local_unnamed_addr #0 align 2 {
  %8 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %8, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %9 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %9, align 1
  %10 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %11 = load %struct.GrVkInterface*, %struct.GrVkInterface** %10, align 8
  %12 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %11, i64 0, i32 1, i32 113, i32 0
  %13 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)** %12, align 8
  %14 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %15 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %14, align 8
  %16 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %3, i64 0, i32 1, i32 0
  %17 = load %struct.VkImage_T*, %struct.VkImage_T** %16, align 8
  tail call void %13(%struct.VkCommandBuffer_T* %15, %struct.VkBuffer_T* %2, %struct.VkImage_T* %17, i32 %4, i32 %5, %struct.VkBufferImageCopy* %6) #9
  %18 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %3, i64 0, i32 5
  %19 = bitcast %"class.GrVkImage::Resource"** %18 to %class.GrManagedResource**
  %20 = load %class.GrManagedResource*, %class.GrManagedResource** %19, align 8
  %21 = icmp eq %class.GrManagedResource* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %7
  %23 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %20, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw add i32* %23, i32 1 monotonic, !noalias !36
  br label %25

25:                                               ; preds = %7, %22
  %26 = ptrtoint %class.GrManagedResource* %20 to i64
  %27 = bitcast %class.GrManagedResource* %20 to void (%class.GrManagedResource*)***
  %28 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %27, align 8
  %29 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %28, i64 2
  %30 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %29, align 8
  tail call void %30(%class.GrManagedResource* %20) #9
  %31 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %31, i32 1, i32 1) #9
  %32 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %31, i64 0, i32 0
  %33 = load %class.sk_sp*, %class.sk_sp** %32, align 8
  %34 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = lshr i64 %35, 1
  %37 = and i64 %36, 2147483647
  %38 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %33, i64 %37
  %39 = add i64 %35, 2
  %40 = and i64 %39, 4294967294
  %41 = and i64 %35, -4294967295
  %42 = or i64 %40, %41
  store i64 %42, i64* %34, align 8
  %43 = bitcast %class.sk_sp* %38 to i64*
  store i64 %26, i64* %43, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer10copyBufferEP7GrVkGpu5sk_spI11GrGpuBufferES4_jPK12VkBufferCopy(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.sk_sp.421* nocapture, %class.sk_sp.421* nocapture, i32, %struct.VkBufferCopy*) local_unnamed_addr #0 align 2 {
  %7 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %7, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %8 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %8, align 1
  %9 = getelementptr inbounds %class.sk_sp.421, %class.sk_sp.421* %2, i64 0, i32 0
  %10 = bitcast %class.sk_sp.421* %2 to %class.GrVkBuffer**
  %11 = load %class.GrVkBuffer*, %class.GrVkBuffer** %10, align 8
  %12 = getelementptr inbounds %class.sk_sp.421, %class.sk_sp.421* %3, i64 0, i32 0
  %13 = bitcast %class.sk_sp.421* %3 to %class.GrVkBuffer**
  %14 = load %class.GrVkBuffer*, %class.GrVkBuffer** %13, align 8
  %15 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %16 = load %struct.GrVkInterface*, %struct.GrVkInterface** %15, align 8
  %17 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %16, i64 0, i32 1, i32 110, i32 0
  %18 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)** %17, align 8
  %19 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %20 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %19, align 8
  %21 = getelementptr inbounds %class.GrVkBuffer, %class.GrVkBuffer* %11, i64 0, i32 1
  %22 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %21, align 8
  %23 = getelementptr inbounds %class.GrVkBuffer, %class.GrVkBuffer* %14, i64 0, i32 1
  %24 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %23, align 8
  tail call void %18(%struct.VkCommandBuffer_T* %20, %struct.VkBuffer_T* %22, %struct.VkBuffer_T* %24, i32 %4, %struct.VkBufferCopy* %5) #9
  %25 = load %class.GrGpuBuffer*, %class.GrGpuBuffer** %9, align 8
  store %class.GrGpuBuffer* null, %class.GrGpuBuffer** %9, align 8
  %26 = icmp eq %class.GrGpuBuffer* %25, null
  %27 = getelementptr inbounds %class.GrGpuBuffer, %class.GrGpuBuffer* %25, i64 0, i32 1
  %28 = ptrtoint %class.GrBuffer* %27 to i64
  %29 = select i1 %26, i64 0, i64 %28
  %30 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 3, i32 1
  tail call void @_ZN8SkTArrayI5sk_spIK8GrBufferELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray.6* %30, i32 1, i32 1) #9
  %31 = getelementptr inbounds %class.SkTArray.6, %class.SkTArray.6* %30, i64 0, i32 0
  %32 = load %class.sk_sp.7*, %class.sk_sp.7** %31, align 8
  %33 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 3, i32 1, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = lshr i64 %34, 1
  %36 = and i64 %35, 2147483647
  %37 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %32, i64 %36
  %38 = add i64 %34, 2
  %39 = and i64 %38, 4294967294
  %40 = and i64 %34, -4294967295
  %41 = or i64 %39, %40
  store i64 %41, i64* %33, align 8
  %42 = bitcast %class.sk_sp.7* %37 to i64*
  store i64 %29, i64* %42, align 8
  %43 = load %class.GrGpuBuffer*, %class.GrGpuBuffer** %12, align 8
  store %class.GrGpuBuffer* null, %class.GrGpuBuffer** %12, align 8
  %44 = icmp eq %class.GrGpuBuffer* %43, null
  %45 = getelementptr inbounds %class.GrGpuBuffer, %class.GrGpuBuffer* %43, i64 0, i32 1
  %46 = ptrtoint %class.GrBuffer* %45 to i64
  %47 = select i1 %44, i64 0, i64 %46
  tail call void @_ZN8SkTArrayI5sk_spIK8GrBufferELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray.6* %30, i32 1, i32 1) #9
  %48 = load %class.sk_sp.7*, %class.sk_sp.7** %31, align 8
  %49 = load i64, i64* %33, align 8
  %50 = lshr i64 %49, 1
  %51 = and i64 %50, 2147483647
  %52 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %48, i64 %51
  %53 = add i64 %49, 2
  %54 = and i64 %53, 4294967294
  %55 = and i64 %49, -4294967295
  %56 = or i64 %54, %55
  store i64 %56, i64* %33, align 8
  %57 = bitcast %class.sk_sp.7* %52 to i64*
  store i64 %47, i64* %57, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer12updateBufferEP7GrVkGpu5sk_spI10GrVkBufferEmmPKv(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.sk_sp.520* nocapture, i64, i64, i8*) local_unnamed_addr #0 align 2 {
  %7 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %7, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %8 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %8, align 1
  %9 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %10 = load %struct.GrVkInterface*, %struct.GrVkInterface** %9, align 8
  %11 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %10, i64 0, i32 1, i32 115, i32 0
  %12 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)** %11, align 8
  %13 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %14 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %13, align 8
  %15 = getelementptr inbounds %class.sk_sp.520, %class.sk_sp.520* %2, i64 0, i32 0
  %16 = load %class.GrVkBuffer*, %class.GrVkBuffer** %15, align 8
  %17 = getelementptr inbounds %class.GrVkBuffer, %class.GrVkBuffer* %16, i64 0, i32 1
  %18 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %17, align 8
  tail call void %12(%struct.VkCommandBuffer_T* %14, %struct.VkBuffer_T* %18, i64 %3, i64 %4, i8* %5) #9
  %19 = load %class.GrVkBuffer*, %class.GrVkBuffer** %15, align 8
  store %class.GrVkBuffer* null, %class.GrVkBuffer** %15, align 8
  %20 = icmp eq %class.GrVkBuffer* %19, null
  %21 = getelementptr inbounds %class.GrVkBuffer, %class.GrVkBuffer* %19, i64 0, i32 0, i32 1
  %22 = ptrtoint %class.GrBuffer* %21 to i64
  %23 = select i1 %20, i64 0, i64 %22
  %24 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 3, i32 1
  tail call void @_ZN8SkTArrayI5sk_spIK8GrBufferELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray.6* %24, i32 1, i32 1) #9
  %25 = getelementptr inbounds %class.SkTArray.6, %class.SkTArray.6* %24, i64 0, i32 0
  %26 = load %class.sk_sp.7*, %class.sk_sp.7** %25, align 8
  %27 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 3, i32 1, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = lshr i64 %28, 1
  %30 = and i64 %29, 2147483647
  %31 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %26, i64 %30
  %32 = add i64 %28, 2
  %33 = and i64 %32, 4294967294
  %34 = and i64 %28, -4294967295
  %35 = or i64 %33, %34
  store i64 %35, i64* %27, align 8
  %36 = bitcast %class.sk_sp.7* %31 to i64*
  store i64 %23, i64* %36, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer15clearColorImageEPK7GrVkGpuP9GrVkImagePK17VkClearColorValuejPK23VkImageSubresourceRange(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.GrVkImage* nocapture readonly, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*) local_unnamed_addr #0 align 2 {
  %7 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %7, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %8 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %8, align 1
  %9 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 5
  %10 = bitcast %"class.GrVkImage::Resource"** %9 to %class.GrManagedResource**
  %11 = load %class.GrManagedResource*, %class.GrManagedResource** %10, align 8
  %12 = icmp eq %class.GrManagedResource* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %11, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 1 monotonic, !noalias !39
  br label %16

16:                                               ; preds = %6, %13
  %17 = ptrtoint %class.GrManagedResource* %11 to i64
  %18 = bitcast %class.GrManagedResource* %11 to void (%class.GrManagedResource*)***
  %19 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %18, align 8
  %20 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %19, i64 2
  %21 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %20, align 8
  tail call void %21(%class.GrManagedResource* %11) #9
  %22 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %22, i32 1, i32 1) #9
  %23 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %22, i64 0, i32 0
  %24 = load %class.sk_sp*, %class.sk_sp** %23, align 8
  %25 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = lshr i64 %26, 1
  %28 = and i64 %27, 2147483647
  %29 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %24, i64 %28
  %30 = add i64 %26, 2
  %31 = and i64 %30, 4294967294
  %32 = and i64 %26, -4294967295
  %33 = or i64 %31, %32
  store i64 %33, i64* %25, align 8
  %34 = bitcast %class.sk_sp* %29 to i64*
  store i64 %17, i64* %34, align 8
  %35 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %36 = load %struct.GrVkInterface*, %struct.GrVkInterface** %35, align 8
  %37 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %36, i64 0, i32 1, i32 117, i32 0
  %38 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)** %37, align 8
  %39 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %40 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %39, align 8
  %41 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 1, i32 0
  %42 = load %struct.VkImage_T*, %struct.VkImage_T** %41, align 8
  %43 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 3, i32 0
  %44 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %43, align 8
  %45 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %44, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 seq_cst, align 4
  tail call void %38(%struct.VkCommandBuffer_T* %40, %struct.VkImage_T* %42, i32 %46, %union.VkClearColorValue* %3, i32 %4, %struct.VkImageSubresourceRange* %5) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer22clearDepthStencilImageEPK7GrVkGpuP9GrVkImagePK24VkClearDepthStencilValuejPK23VkImageSubresourceRange(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.GrVkImage* nocapture readonly, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*) local_unnamed_addr #0 align 2 {
  %7 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %7, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %8 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %8, align 1
  %9 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 5
  %10 = bitcast %"class.GrVkImage::Resource"** %9 to %class.GrManagedResource**
  %11 = load %class.GrManagedResource*, %class.GrManagedResource** %10, align 8
  %12 = icmp eq %class.GrManagedResource* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %11, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 1 monotonic, !noalias !42
  br label %16

16:                                               ; preds = %6, %13
  %17 = ptrtoint %class.GrManagedResource* %11 to i64
  %18 = bitcast %class.GrManagedResource* %11 to void (%class.GrManagedResource*)***
  %19 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %18, align 8
  %20 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %19, i64 2
  %21 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %20, align 8
  tail call void %21(%class.GrManagedResource* %11) #9
  %22 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %22, i32 1, i32 1) #9
  %23 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %22, i64 0, i32 0
  %24 = load %class.sk_sp*, %class.sk_sp** %23, align 8
  %25 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = lshr i64 %26, 1
  %28 = and i64 %27, 2147483647
  %29 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %24, i64 %28
  %30 = add i64 %26, 2
  %31 = and i64 %30, 4294967294
  %32 = and i64 %26, -4294967295
  %33 = or i64 %31, %32
  store i64 %33, i64* %25, align 8
  %34 = bitcast %class.sk_sp* %29 to i64*
  store i64 %17, i64* %34, align 8
  %35 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %36 = load %struct.GrVkInterface*, %struct.GrVkInterface** %35, align 8
  %37 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %36, i64 0, i32 1, i32 118, i32 0
  %38 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)** %37, align 8
  %39 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %40 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %39, align 8
  %41 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 1, i32 0
  %42 = load %struct.VkImage_T*, %struct.VkImage_T** %41, align 8
  %43 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 3, i32 0
  %44 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %43, align 8
  %45 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %44, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 seq_cst, align 4
  tail call void %38(%struct.VkCommandBuffer_T* %40, %struct.VkImage_T* %42, i32 %46, %struct.VkClearDepthStencilValue* %3, i32 %4, %struct.VkImageSubresourceRange* %5) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkPrimaryCommandBuffer12resolveImageEP7GrVkGpuRK9GrVkImageS4_jPK14VkImageResolve(%class.GrVkPrimaryCommandBuffer*, %class.GrVkGpu* nocapture readonly, %class.GrVkImage* nocapture readonly dereferenceable(184), %class.GrVkImage* nocapture readonly dereferenceable(184), i32, %struct.VkImageResolve*) local_unnamed_addr #0 align 2 {
  %7 = bitcast %class.GrVkPrimaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBuffer22submitPipelineBarriersEPK7GrVkGpub(%class.GrVkCommandBuffer* %7, %class.GrVkGpu* %1, i1 zeroext undef) #9
  %8 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 1, i8* %8, align 1
  %9 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 5
  %10 = bitcast %"class.GrVkImage::Resource"** %9 to %class.GrManagedResource**
  %11 = load %class.GrManagedResource*, %class.GrManagedResource** %10, align 8
  %12 = icmp eq %class.GrManagedResource* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %11, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 1 monotonic, !noalias !45
  br label %16

16:                                               ; preds = %6, %13
  %17 = ptrtoint %class.GrManagedResource* %11 to i64
  %18 = bitcast %class.GrManagedResource* %11 to void (%class.GrManagedResource*)***
  %19 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %18, align 8
  %20 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %19, i64 2
  %21 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %20, align 8
  tail call void %21(%class.GrManagedResource* %11) #9
  %22 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %22, i32 1, i32 1) #9
  %23 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %22, i64 0, i32 0
  %24 = load %class.sk_sp*, %class.sk_sp** %23, align 8
  %25 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = lshr i64 %26, 1
  %28 = and i64 %27, 2147483647
  %29 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %24, i64 %28
  %30 = add i64 %26, 2
  %31 = and i64 %30, 4294967294
  %32 = and i64 %26, -4294967295
  %33 = or i64 %31, %32
  store i64 %33, i64* %25, align 8
  %34 = bitcast %class.sk_sp* %29 to i64*
  store i64 %17, i64* %34, align 8
  %35 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %3, i64 0, i32 5
  %36 = bitcast %"class.GrVkImage::Resource"** %35 to %class.GrManagedResource**
  %37 = load %class.GrManagedResource*, %class.GrManagedResource** %36, align 8
  %38 = icmp eq %class.GrManagedResource* %37, null
  br i1 %38, label %42, label %39

39:                                               ; preds = %16
  %40 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %37, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = atomicrmw add i32* %40, i32 1 monotonic, !noalias !48
  br label %42

42:                                               ; preds = %16, %39
  %43 = ptrtoint %class.GrManagedResource* %37 to i64
  %44 = bitcast %class.GrManagedResource* %37 to void (%class.GrManagedResource*)***
  %45 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %44, align 8
  %46 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %45, i64 2
  %47 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %46, align 8
  tail call void %47(%class.GrManagedResource* %37) #9
  tail call void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray* %22, i32 1, i32 1) #9
  %48 = load %class.sk_sp*, %class.sk_sp** %23, align 8
  %49 = load i64, i64* %25, align 8
  %50 = lshr i64 %49, 1
  %51 = and i64 %50, 2147483647
  %52 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %48, i64 %51
  %53 = add i64 %49, 2
  %54 = and i64 %53, 4294967294
  %55 = and i64 %49, -4294967295
  %56 = or i64 %54, %55
  store i64 %56, i64* %25, align 8
  %57 = bitcast %class.sk_sp* %52 to i64*
  store i64 %43, i64* %57, align 8
  %58 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %59 = load %struct.GrVkInterface*, %struct.GrVkInterface** %58, align 8
  %60 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %59, i64 0, i32 1, i32 120, i32 0
  %61 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)** %60, align 8
  %62 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %63 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %62, align 8
  %64 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 1, i32 0
  %65 = load %struct.VkImage_T*, %struct.VkImage_T** %64, align 8
  %66 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %2, i64 0, i32 3, i32 0
  %67 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %66, align 8
  %68 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %67, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 seq_cst, align 4
  %70 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %3, i64 0, i32 1, i32 0
  %71 = load %struct.VkImage_T*, %struct.VkImage_T** %70, align 8
  %72 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %3, i64 0, i32 3, i32 0
  %73 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %72, align 8
  %74 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %73, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 seq_cst, align 4
  tail call void %61(%struct.VkCommandBuffer_T* %63, %struct.VkImage_T* %65, i32 %69, %struct.VkImage_T* %71, i32 %75, i32 %4, %struct.VkImageResolve* %5) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK24GrVkPrimaryCommandBuffer13onFreeGPUDataEPK7GrVkGpu(%class.GrVkPrimaryCommandBuffer* nocapture readonly, %class.GrVkGpu* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkPrimaryCommandBuffer, %class.GrVkPrimaryCommandBuffer* %0, i64 0, i32 2
  %4 = load %struct.VkFence_T*, %struct.VkFence_T** %3, align 8
  %5 = icmp eq %struct.VkFence_T* %4, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %8 = load %struct.GrVkInterface*, %struct.GrVkInterface** %7, align 8
  %9 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %8, i64 0, i32 1, i32 34, i32 0
  %10 = load void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)** %9, align 8
  %11 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 6
  %12 = load %struct.VkDevice_T*, %struct.VkDevice_T** %11, align 8
  tail call void %10(%struct.VkDevice_T* %12, %struct.VkFence_T* nonnull %4, %struct.VkAllocationCallbacks* null) #9
  br label %13

13:                                               ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrVkSecondaryCommandBuffer* @_ZN26GrVkSecondaryCommandBuffer6CreateEP7GrVkGpuP15GrVkCommandPool(%class.GrVkGpu*, %class.GrVkCommandPool* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.VkCommandBufferAllocateInfo, align 8
  %4 = alloca %struct.VkCommandBuffer_T*, align 8
  %5 = bitcast %struct.VkCommandBufferAllocateInfo* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #9
  %6 = bitcast %struct.VkCommandBufferAllocateInfo* %3 to i64*
  store i64 -6148914691236517206, i64* %6, align 8
  %7 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %3, i64 0, i32 0
  store i32 40, i32* %7, align 8
  %8 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %3, i64 0, i32 1
  store i8* null, i8** %8, align 8
  %9 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %3, i64 0, i32 2
  %10 = getelementptr inbounds %class.GrVkCommandPool, %class.GrVkCommandPool* %1, i64 0, i32 3
  %11 = bitcast %struct.VkCommandPool_T** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.VkCommandPool_T** %9 to i64*
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %3, i64 0, i32 3
  store i32 1, i32* %14, align 8
  %15 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %3, i64 0, i32 4
  store i32 1, i32* %15, align 4
  %16 = bitcast %struct.VkCommandBuffer_T** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  store %struct.VkCommandBuffer_T* inttoptr (i64 -6148914691236517206 to %struct.VkCommandBuffer_T*), %struct.VkCommandBuffer_T** %4, align 8
  %17 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 1, i32 0
  %18 = load %struct.GrVkInterface*, %struct.GrVkInterface** %17, align 8
  %19 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %18, i64 0, i32 1, i32 86, i32 0
  %20 = load i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)** %19, align 8
  %21 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 6
  %22 = load %struct.VkDevice_T*, %struct.VkDevice_T** %21, align 8
  %23 = call i32 %20(%struct.VkDevice_T* %22, %struct.VkCommandBufferAllocateInfo* nonnull %3, %struct.VkCommandBuffer_T** nonnull %4) #9
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %34, label %25

25:                                               ; preds = %2
  %26 = bitcast %class.GrVkGpu* %0 to i1 (%class.GrVkGpu*)***
  %27 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %26, align 8
  %28 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %27, i64 8
  %29 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %28, align 8
  %30 = call zeroext i1 %29(%class.GrVkGpu* %0) #9
  br i1 %30, label %32, label %31

31:                                               ; preds = %25
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 928, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.2, i64 0, i64 0), i32 %23) #9
  br label %32

32:                                               ; preds = %31, %25
  %33 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 %23) #9
  br label %86

34:                                               ; preds = %2
  %35 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 0) #9
  %36 = call i8* @_Znwm(i64 1192) #10
  %37 = bitcast i8* %36 to %class.GrVkSecondaryCommandBuffer*
  %38 = bitcast %struct.VkCommandBuffer_T** %4 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast i8* %36 to i32 (...)***
  %41 = getelementptr inbounds i8, i8* %36, i64 264
  %42 = getelementptr inbounds i8, i8* %36, i64 8
  %43 = getelementptr inbounds i8, i8* %36, i64 272
  %44 = bitcast i8* %43 to i64*
  %45 = bitcast i8* %41 to i8**
  store i8* %42, i8** %45, align 8
  store i64 274877906944, i64* %44, align 8
  %46 = getelementptr inbounds i8, i8* %36, i64 536
  %47 = getelementptr inbounds i8, i8* %36, i64 280
  %48 = getelementptr inbounds i8, i8* %36, i64 544
  %49 = bitcast i8* %48 to i64*
  %50 = bitcast i8* %46 to i8**
  store i8* %47, i8** %50, align 8
  store i64 274877906944, i64* %49, align 8
  %51 = getelementptr inbounds i8, i8* %36, i64 680
  %52 = getelementptr inbounds i8, i8* %36, i64 552
  %53 = getelementptr inbounds i8, i8* %36, i64 688
  %54 = bitcast i8* %53 to i64*
  %55 = bitcast i8* %51 to i8**
  store i8* %52, i8** %55, align 8
  store i64 137438953472, i64* %54, align 8
  %56 = getelementptr inbounds i8, i8* %36, i64 824
  %57 = getelementptr inbounds i8, i8* %36, i64 696
  %58 = getelementptr inbounds i8, i8* %36, i64 832
  %59 = bitcast i8* %58 to i64*
  %60 = bitcast i8* %56 to i8**
  store i8* %57, i8** %60, align 8
  store i64 137438953472, i64* %59, align 8
  %61 = getelementptr inbounds i8, i8* %36, i64 840
  store i8 0, i8* %61, align 8
  %62 = getelementptr inbounds i8, i8* %36, i64 841
  store i8 0, i8* %62, align 1
  %63 = getelementptr inbounds i8, i8* %36, i64 848
  %64 = getelementptr inbounds i8, i8* %36, i64 856
  %65 = bitcast i8* %64 to i64*
  store i64 %39, i64* %65, align 8
  %66 = getelementptr inbounds i8, i8* %36, i64 1000
  %67 = getelementptr inbounds i8, i8* %36, i64 944
  %68 = getelementptr inbounds i8, i8* %36, i64 1008
  %69 = bitcast i8* %68 to i64*
  %70 = bitcast i8* %66 to i8**
  store i8* %67, i8** %70, align 8
  store i64 8589934592, i64* %69, align 8
  %71 = getelementptr inbounds i8, i8* %36, i64 1160
  %72 = getelementptr inbounds i8, i8* %36, i64 1016
  %73 = getelementptr inbounds i8, i8* %36, i64 1168
  %74 = bitcast i8* %73 to i64*
  %75 = bitcast i8* %71 to i8**
  store i8* %72, i8** %75, align 8
  store i64 17179869184, i64* %74, align 8
  %76 = getelementptr inbounds i8, i8* %36, i64 1176
  store i8 0, i8* %76, align 8
  %77 = getelementptr inbounds i8, i8* %36, i64 1180
  %78 = getelementptr i8, i8* %36, i64 864
  %79 = getelementptr inbounds i8, i8* %36, i64 896
  %80 = bitcast i8* %79 to float*
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 48, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* align 4 %77, i8 0, i64 9, i1 false)
  store float -1.000000e+00, float* %80, align 8
  %81 = getelementptr inbounds i8, i8* %36, i64 912
  call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 16, i1 false) #9
  %82 = bitcast i8* %81 to i32*
  store i32 -1, i32* %82, align 8
  %83 = getelementptr inbounds i8, i8* %36, i64 928
  %84 = bitcast i8* %83 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float>* %84, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV26GrVkSecondaryCommandBuffer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %40, align 8
  %85 = bitcast i8* %63 to i64*
  store i64 0, i64* %85, align 8
  br label %86

86:                                               ; preds = %32, %34
  %87 = phi %class.GrVkSecondaryCommandBuffer* [ %37, %34 ], [ null, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #9
  ret %class.GrVkSecondaryCommandBuffer* %87
}

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %class.GrVkSecondaryCommandBuffer* @_ZN26GrVkSecondaryCommandBuffer6CreateEP17VkCommandBuffer_TPK14GrVkRenderPass(%struct.VkCommandBuffer_T*, %class.GrVkRenderPass*) local_unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 1192) #10
  %4 = bitcast i8* %3 to %class.GrVkSecondaryCommandBuffer*
  %5 = ptrtoint %class.GrVkRenderPass* %1 to i64
  %6 = icmp ne %class.GrVkRenderPass* %1, null
  %7 = zext i1 %6 to i8
  %8 = bitcast i8* %3 to i32 (...)***
  %9 = getelementptr inbounds i8, i8* %3, i64 264
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = getelementptr inbounds i8, i8* %3, i64 272
  %12 = bitcast i8* %11 to i64*
  %13 = bitcast i8* %9 to i8**
  store i8* %10, i8** %13, align 8
  store i64 274877906944, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* %3, i64 536
  %15 = getelementptr inbounds i8, i8* %3, i64 280
  %16 = getelementptr inbounds i8, i8* %3, i64 544
  %17 = bitcast i8* %16 to i64*
  %18 = bitcast i8* %14 to i8**
  store i8* %15, i8** %18, align 8
  store i64 274877906944, i64* %17, align 8
  %19 = getelementptr inbounds i8, i8* %3, i64 680
  %20 = getelementptr inbounds i8, i8* %3, i64 552
  %21 = getelementptr inbounds i8, i8* %3, i64 688
  %22 = bitcast i8* %21 to i64*
  %23 = bitcast i8* %19 to i8**
  store i8* %20, i8** %23, align 8
  store i64 137438953472, i64* %22, align 8
  %24 = getelementptr inbounds i8, i8* %3, i64 824
  %25 = getelementptr inbounds i8, i8* %3, i64 696
  %26 = getelementptr inbounds i8, i8* %3, i64 832
  %27 = bitcast i8* %26 to i64*
  %28 = bitcast i8* %24 to i8**
  store i8* %25, i8** %28, align 8
  store i64 137438953472, i64* %27, align 8
  %29 = getelementptr inbounds i8, i8* %3, i64 840
  store i8 %7, i8* %29, align 8
  %30 = getelementptr inbounds i8, i8* %3, i64 841
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %3, i64 848
  %32 = getelementptr inbounds i8, i8* %3, i64 856
  %33 = bitcast i8* %32 to %struct.VkCommandBuffer_T**
  store %struct.VkCommandBuffer_T* %0, %struct.VkCommandBuffer_T** %33, align 8
  %34 = getelementptr inbounds i8, i8* %3, i64 1000
  %35 = getelementptr inbounds i8, i8* %3, i64 944
  %36 = getelementptr inbounds i8, i8* %3, i64 1008
  %37 = bitcast i8* %36 to i64*
  %38 = bitcast i8* %34 to i8**
  store i8* %35, i8** %38, align 8
  store i64 8589934592, i64* %37, align 8
  %39 = getelementptr inbounds i8, i8* %3, i64 1160
  %40 = getelementptr inbounds i8, i8* %3, i64 1016
  %41 = getelementptr inbounds i8, i8* %3, i64 1168
  %42 = bitcast i8* %41 to i64*
  %43 = bitcast i8* %39 to i8**
  store i8* %40, i8** %43, align 8
  store i64 17179869184, i64* %42, align 8
  %44 = getelementptr inbounds i8, i8* %3, i64 1176
  store i8 0, i8* %44, align 8
  %45 = getelementptr inbounds i8, i8* %3, i64 1180
  %46 = bitcast i8* %45 to i32*
  store i32 0, i32* %46, align 4
  %47 = getelementptr inbounds i8, i8* %3, i64 1184
  %48 = bitcast i8* %47 to i32*
  store i32 0, i32* %48, align 8
  %49 = getelementptr inbounds i8, i8* %3, i64 1188
  store i8 %7, i8* %49, align 4
  %50 = getelementptr i8, i8* %3, i64 864
  %51 = getelementptr inbounds i8, i8* %3, i64 896
  %52 = bitcast i8* %51 to float*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 48, i1 false) #9
  store float -1.000000e+00, float* %52, align 8
  %53 = getelementptr inbounds i8, i8* %3, i64 912
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 16, i1 false) #9
  %54 = bitcast i8* %53 to i32*
  store i32 -1, i32* %54, align 8
  %55 = getelementptr inbounds i8, i8* %3, i64 928
  %56 = bitcast i8* %55 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float>* %56, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV26GrVkSecondaryCommandBuffer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %57 = bitcast i8* %31 to i64*
  store i64 %5, i64* %57, align 8
  ret %class.GrVkSecondaryCommandBuffer* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN26GrVkSecondaryCommandBuffer5beginEP7GrVkGpuPK15GrVkFramebufferPK14GrVkRenderPass(%class.GrVkSecondaryCommandBuffer* nocapture, %class.GrVkGpu*, %class.GrVkFramebuffer* readonly, %class.GrVkRenderPass*) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.VkCommandBufferInheritanceInfo, align 8
  %6 = alloca %struct.VkCommandBufferBeginInfo, align 8
  %7 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %0, i64 0, i32 0, i32 8
  store %class.GrVkRenderPass* %3, %class.GrVkRenderPass** %7, align 8
  %8 = bitcast %struct.VkCommandBufferInheritanceInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %8) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 56, i1 false)
  %9 = getelementptr inbounds %struct.VkCommandBufferInheritanceInfo, %struct.VkCommandBufferInheritanceInfo* %5, i64 0, i32 0
  store i32 41, i32* %9, align 8
  %10 = getelementptr inbounds %struct.VkCommandBufferInheritanceInfo, %struct.VkCommandBufferInheritanceInfo* %5, i64 0, i32 1
  store i8* null, i8** %10, align 8
  %11 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %3, i64 0, i32 1
  %12 = bitcast %struct.VkRenderPass_T** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.VkCommandBufferInheritanceInfo, %struct.VkCommandBufferInheritanceInfo* %5, i64 0, i32 2
  %15 = bitcast %struct.VkRenderPass_T** %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = getelementptr inbounds %struct.VkCommandBufferInheritanceInfo, %struct.VkCommandBufferInheritanceInfo* %5, i64 0, i32 3
  store i32 0, i32* %16, align 8
  %17 = icmp eq %class.GrVkFramebuffer* %2, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %4
  %19 = getelementptr inbounds %class.GrVkFramebuffer, %class.GrVkFramebuffer* %2, i64 0, i32 1
  %20 = load %struct.VkFramebuffer_T*, %struct.VkFramebuffer_T** %19, align 8
  br label %21

21:                                               ; preds = %4, %18
  %22 = phi %struct.VkFramebuffer_T* [ %20, %18 ], [ null, %4 ]
  %23 = getelementptr inbounds %struct.VkCommandBufferInheritanceInfo, %struct.VkCommandBufferInheritanceInfo* %5, i64 0, i32 4
  store %struct.VkFramebuffer_T* %22, %struct.VkFramebuffer_T** %23, align 8
  %24 = getelementptr inbounds %struct.VkCommandBufferInheritanceInfo, %struct.VkCommandBufferInheritanceInfo* %5, i64 0, i32 5
  store i32 0, i32* %24, align 8
  %25 = getelementptr inbounds %struct.VkCommandBufferInheritanceInfo, %struct.VkCommandBufferInheritanceInfo* %5, i64 0, i32 6
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds %struct.VkCommandBufferInheritanceInfo, %struct.VkCommandBufferInheritanceInfo* %5, i64 0, i32 7
  store i32 0, i32* %26, align 8
  %27 = bitcast %struct.VkCommandBufferBeginInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %27) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 24, i1 false)
  %28 = getelementptr inbounds %struct.VkCommandBufferBeginInfo, %struct.VkCommandBufferBeginInfo* %6, i64 0, i32 0
  store i32 42, i32* %28, align 8
  %29 = getelementptr inbounds %struct.VkCommandBufferBeginInfo, %struct.VkCommandBufferBeginInfo* %6, i64 0, i32 1
  store i8* null, i8** %29, align 8
  %30 = getelementptr inbounds %struct.VkCommandBufferBeginInfo, %struct.VkCommandBufferBeginInfo* %6, i64 0, i32 2
  store i32 3, i32* %30, align 8
  %31 = getelementptr inbounds %struct.VkCommandBufferBeginInfo, %struct.VkCommandBufferBeginInfo* %6, i64 0, i32 3
  store %struct.VkCommandBufferInheritanceInfo* %5, %struct.VkCommandBufferInheritanceInfo** %31, align 8
  %32 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %33 = load %struct.GrVkInterface*, %struct.GrVkInterface** %32, align 8
  %34 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %33, i64 0, i32 1, i32 88, i32 0
  %35 = load i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)** %34, align 8
  %36 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %37 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %36, align 8
  %38 = call i32 %35(%struct.VkCommandBuffer_T* %37, %struct.VkCommandBufferBeginInfo* nonnull %6) #9
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %21
  %41 = bitcast %class.GrVkGpu* %1 to i1 (%class.GrVkGpu*)***
  %42 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %41, align 8
  %43 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %42, i64 8
  %44 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %43, align 8
  %45 = call zeroext i1 %44(%class.GrVkGpu* %1) #9
  br i1 %45, label %47, label %46

46:                                               ; preds = %40
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 966, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.3, i64 0, i64 0), i32 %38) #9
  br label %47

47:                                               ; preds = %21, %46, %40
  %48 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 %38) #9
  %49 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %0, i64 0, i32 0, i32 5
  store i8 1, i8* %49, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %27) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %8) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN26GrVkSecondaryCommandBuffer3endEP7GrVkGpu(%class.GrVkSecondaryCommandBuffer* nocapture, %class.GrVkGpu*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %4 = load %struct.GrVkInterface*, %struct.GrVkInterface** %3, align 8
  %5 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %4, i64 0, i32 1, i32 89, i32 0
  %6 = load i32 (%struct.VkCommandBuffer_T*)*, i32 (%struct.VkCommandBuffer_T*)** %5, align 8
  %7 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %0, i64 0, i32 0, i32 9
  %8 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %7, align 8
  %9 = tail call i32 %6(%struct.VkCommandBuffer_T* %8) #9
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %2
  %12 = bitcast %class.GrVkGpu* %1 to i1 (%class.GrVkGpu*)***
  %13 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %12, align 8
  %14 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %13, i64 8
  %15 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %14, align 8
  %16 = tail call zeroext i1 %15(%class.GrVkGpu* %1) #9
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 974, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4, i64 0, i64 0), i32 %9) #9
  br label %18

18:                                               ; preds = %2, %17, %11
  %19 = tail call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 %9) #9
  %20 = getelementptr %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %0, i64 0, i32 0, i32 10, i64 0
  %21 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %0, i64 0, i32 0, i32 12, i32 2
  %22 = bitcast %struct.VkBuffer_T** %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 48, i1 false) #9
  store float -1.000000e+00, float* %21, align 8
  %23 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %0, i64 0, i32 0, i32 13
  %24 = bitcast %struct.VkRect2D* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #9
  %25 = getelementptr inbounds %struct.VkRect2D, %struct.VkRect2D* %23, i64 0, i32 0, i32 0
  store i32 -1, i32* %25, align 8
  %26 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %0, i64 0, i32 0, i32 14, i64 0
  %27 = bitcast float* %26 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float>* %27, align 4
  %28 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %0, i64 0, i32 0, i32 6
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %class.GrVkSecondaryCommandBuffer, %class.GrVkSecondaryCommandBuffer* %0, i64 0, i32 0, i32 5
  store i8 0, i8* %29, align 8
  ret void
}

declare void @_ZN15GrVkCommandPool29recycleSecondaryCommandBufferEP26GrVkSecondaryCommandBuffer(%class.GrVkCommandPool*, %class.GrVkSecondaryCommandBuffer*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI5sk_spIK8GrBufferELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray.6*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.6, %class.SkTArray.6* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %87

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %87, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %75, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.6, %class.SkTArray.6* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %69, %48
  %51 = phi i64 [ 0, %48 ], [ %70, %69 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %class.sk_sp.7*, %class.sk_sp.7** %49, align 8
  %55 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %54, i64 %51
  %56 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %55, i64 0, i32 0
  %57 = bitcast %class.sk_sp.7* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %class.GrBuffer* null, %class.GrBuffer** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %class.sk_sp.7*, %class.sk_sp.7** %49, align 8
  %61 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %60, i64 %51, i32 0
  %62 = load %class.GrBuffer*, %class.GrBuffer** %61, align 8
  %63 = icmp eq %class.GrBuffer* %62, null
  br i1 %63, label %69, label %64

64:                                               ; preds = %50
  %65 = bitcast %class.GrBuffer* %62 to void (%class.GrBuffer*)***
  %66 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %65, align 8
  %67 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %66, i64 3
  %68 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %67, align 8
  tail call void %68(%class.GrBuffer* nonnull %62) #9
  br label %69

69:                                               ; preds = %64, %50
  %70 = add nuw nsw i64 %51, 1
  %71 = load i64, i64* %4, align 8
  %72 = lshr i64 %71, 1
  %73 = and i64 %72, 2147483647
  %74 = icmp ult i64 %70, %73
  br i1 %74, label %50, label %75

75:                                               ; preds = %69, %35
  %76 = phi i64 [ %45, %35 ], [ %71, %69 ]
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  %79 = bitcast %class.SkTArray.6* %0 to i8**
  br i1 %78, label %83, label %80

80:                                               ; preds = %75
  %81 = load i8*, i8** %79, align 8
  tail call void @_Z7sk_freePv(i8* %81) #9
  %82 = load i64, i64* %4, align 8
  br label %83

83:                                               ; preds = %75, %80
  %84 = phi i64 [ %82, %80 ], [ %76, %75 ]
  store i8* %44, i8** %79, align 8
  %85 = and i64 %84, -4294967298
  %86 = or i64 %85, 1
  store i64 %86, i64* %4, align 8
  br label %87

87:                                               ; preds = %83, %32, %21
  ret void
}

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI5sk_spIK17GrManagedResourceELb0EE12checkReallocEiNS4_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %94

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %94, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %82, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %76, %48
  %51 = phi i64 [ 0, %48 ], [ %77, %76 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %class.sk_sp*, %class.sk_sp** %49, align 8
  %55 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %54, i64 %51
  %56 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %55, i64 0, i32 0
  %57 = bitcast %class.sk_sp* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %class.GrManagedResource* null, %class.GrManagedResource** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %class.sk_sp*, %class.sk_sp** %49, align 8
  %61 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %60, i64 %51, i32 0
  %62 = load %class.GrManagedResource*, %class.GrManagedResource** %61, align 8
  %63 = icmp eq %class.GrManagedResource* %62, null
  br i1 %63, label %76, label %64

64:                                               ; preds = %50
  %65 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %62, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw add i32* %65, i32 -1 acq_rel
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %76

68:                                               ; preds = %64
  %69 = bitcast %class.GrManagedResource* %62 to void (%class.GrManagedResource*)***
  %70 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %69, align 8
  %71 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %70, i64 4
  %72 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %71, align 8
  tail call void %72(%class.GrManagedResource* nonnull %62) #9
  %73 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %69, align 8
  %74 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %73, i64 1
  %75 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %74, align 8
  tail call void %75(%class.GrManagedResource* nonnull %62) #9
  br label %76

76:                                               ; preds = %68, %64, %50
  %77 = add nuw nsw i64 %51, 1
  %78 = load i64, i64* %4, align 8
  %79 = lshr i64 %78, 1
  %80 = and i64 %79, 2147483647
  %81 = icmp ult i64 %77, %80
  br i1 %81, label %50, label %82

82:                                               ; preds = %76, %35
  %83 = phi i64 [ %45, %35 ], [ %78, %76 ]
  %84 = and i64 %83, 1
  %85 = icmp eq i64 %84, 0
  %86 = bitcast %class.SkTArray* %0 to i8**
  br i1 %85, label %90, label %87

87:                                               ; preds = %82
  %88 = load i8*, i8** %86, align 8
  tail call void @_Z7sk_freePv(i8* %88) #9
  %89 = load i64, i64* %4, align 8
  br label %90

90:                                               ; preds = %82, %87
  %91 = phi i64 [ %89, %87 ], [ %83, %82 ]
  store i8* %44, i8** %86, align 8
  %92 = and i64 %91, -4294967298
  %93 = or i64 %92, 1
  store i64 %93, i64* %4, align 8
  br label %94

94:                                               ; preds = %90, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN17GrVkCommandBufferD0Ev(%class.GrVkCommandBuffer*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN17GrVkCommandBuffer18onReleaseResourcesEv(%class.GrVkCommandBuffer*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZNK13GrGpuResource19notifyARefCntIsZeroEN7GrIORefIS_E14LastRemovedRefE(%class.GrGpuResource*, i32) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI5gr_spIK9GrSurfaceXadL_ZNK7GrIORefI13GrGpuResourceE21addCommandBufferUsageEvEEXadL_ZNKS5_24removeCommandBufferUsageEvEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray.10*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.10, %class.SkTArray.10* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %90

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %90, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %78, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.10, %class.SkTArray.10* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %72, %48
  %51 = phi i64 [ 0, %48 ], [ %73, %72 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %class.gr_sp.11*, %class.gr_sp.11** %49, align 8
  %55 = getelementptr inbounds %class.gr_sp.11, %class.gr_sp.11* %54, i64 %51
  %56 = getelementptr inbounds %class.gr_sp.11, %class.gr_sp.11* %55, i64 0, i32 0
  %57 = bitcast %class.gr_sp.11* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %class.GrSurface* null, %class.GrSurface** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %class.gr_sp.11*, %class.gr_sp.11** %49, align 8
  %61 = getelementptr inbounds %class.gr_sp.11, %class.gr_sp.11* %60, i64 %51, i32 0
  %62 = load %class.GrSurface*, %class.GrSurface** %61, align 8
  %63 = icmp eq %class.GrSurface* %62, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %50
  %65 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %62, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw add i32* %65, i32 -1 acq_rel
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %72

68:                                               ; preds = %64
  %69 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %62, i64 0, i32 0, i32 1
  %70 = getelementptr inbounds %class.GrIORef, %class.GrIORef* %69, i64 -1
  %71 = bitcast %class.GrIORef* %70 to %class.GrGpuResource*
  tail call void @_ZNK13GrGpuResource19notifyARefCntIsZeroEN7GrIORefIS_E14LastRemovedRefE(%class.GrGpuResource* %71, i32 1) #9
  br label %72

72:                                               ; preds = %68, %64, %50
  %73 = add nuw nsw i64 %51, 1
  %74 = load i64, i64* %4, align 8
  %75 = lshr i64 %74, 1
  %76 = and i64 %75, 2147483647
  %77 = icmp ult i64 %73, %76
  br i1 %77, label %50, label %78

78:                                               ; preds = %72, %35
  %79 = phi i64 [ %45, %35 ], [ %74, %72 ]
  %80 = and i64 %79, 1
  %81 = icmp eq i64 %80, 0
  %82 = bitcast %class.SkTArray.10* %0 to i8**
  br i1 %81, label %86, label %83

83:                                               ; preds = %78
  %84 = load i8*, i8** %82, align 8
  tail call void @_Z7sk_freePv(i8* %84) #9
  %85 = load i64, i64* %4, align 8
  br label %86

86:                                               ; preds = %78, %83
  %87 = phi i64 [ %85, %83 ], [ %79, %78 ]
  store i8* %44, i8** %82, align 8
  %88 = and i64 %87, -4294967298
  %89 = or i64 %88, 1
  store i64 %89, i64* %4, align 8
  br label %90

90:                                               ; preds = %86, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI5sk_spI18GrRefCntedCallbackELb0EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.456*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.456, %class.SkTArray.456* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %95

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %95, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %83, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.456, %class.SkTArray.456* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %77, %48
  %51 = phi i64 [ 0, %48 ], [ %78, %77 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %class.sk_sp.206*, %class.sk_sp.206** %49, align 8
  %55 = getelementptr inbounds %class.sk_sp.206, %class.sk_sp.206* %54, i64 %51
  %56 = getelementptr inbounds %class.sk_sp.206, %class.sk_sp.206* %55, i64 0, i32 0
  %57 = bitcast %class.sk_sp.206* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %class.GrRefCntedCallback* null, %class.GrRefCntedCallback** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %class.sk_sp.206*, %class.sk_sp.206** %49, align 8
  %61 = getelementptr inbounds %class.sk_sp.206, %class.sk_sp.206* %60, i64 %51, i32 0
  %62 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %61, align 8
  %63 = icmp eq %class.GrRefCntedCallback* %62, null
  br i1 %63, label %77, label %64

64:                                               ; preds = %50
  %65 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %62, i64 0, i32 0
  %66 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %62, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = atomicrmw add i32* %66, i32 -1 acq_rel
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %77

69:                                               ; preds = %64
  %70 = getelementptr inbounds %class.SkNVRefCnt.207, %class.SkNVRefCnt.207* %65, i64 2
  %71 = bitcast %class.SkNVRefCnt.207* %70 to void (i8*)**
  %72 = load void (i8*)*, void (i8*)** %71, align 8
  %73 = getelementptr inbounds %class.SkNVRefCnt.207, %class.SkNVRefCnt.207* %65, i64 4
  %74 = bitcast %class.SkNVRefCnt.207* %73 to i8**
  %75 = load i8*, i8** %74, align 8
  tail call void %72(i8* %75) #9
  %76 = bitcast %class.GrRefCntedCallback* %62 to i8*
  tail call void @_ZdlPv(i8* %76) #10
  br label %77

77:                                               ; preds = %69, %64, %50
  %78 = add nuw nsw i64 %51, 1
  %79 = load i64, i64* %4, align 8
  %80 = lshr i64 %79, 1
  %81 = and i64 %80, 2147483647
  %82 = icmp ult i64 %78, %81
  br i1 %82, label %50, label %83

83:                                               ; preds = %77, %35
  %84 = phi i64 [ %45, %35 ], [ %79, %77 ]
  %85 = and i64 %84, 1
  %86 = icmp eq i64 %85, 0
  %87 = bitcast %class.SkTArray.456* %0 to i8**
  br i1 %86, label %91, label %88

88:                                               ; preds = %83
  %89 = load i8*, i8** %87, align 8
  tail call void @_Z7sk_freePv(i8* %89) #9
  %90 = load i64, i64* %4, align 8
  br label %91

91:                                               ; preds = %83, %88
  %92 = phi i64 [ %90, %88 ], [ %84, %83 ]
  store i8* %44, i8** %87, align 8
  %93 = and i64 %92, -4294967298
  %94 = or i64 %93, 1
  store i64 %94, i64* %4, align 8
  br label %95

95:                                               ; preds = %91, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN17GrVkCommandBufferD2Ev(%class.GrVkCommandBuffer*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV17GrVkCommandBuffer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 16, i32 0, i32 0, i64 152
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 16, i32 0, i32 0, i64 144
  %10 = bitcast i8* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_Z7sk_freePv(i8* %11) #9
  br label %12

12:                                               ; preds = %1, %8
  %13 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 15, i32 0, i32 0, i64 64
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 15, i32 0, i32 0, i64 56
  %20 = bitcast i8* %19 to i8**
  %21 = load i8*, i8** %20, align 8
  tail call void @_Z7sk_freePv(i8* %21) #9
  br label %22

22:                                               ; preds = %12, %18
  %23 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 4, i32 0, i32 0, i64 128
  %24 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 4, i32 0, i32 0, i64 136
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, 4294967294
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %22
  %30 = bitcast i8* %23 to %class.gr_sp.11**
  br label %35

31:                                               ; preds = %49, %22
  %32 = phi i64 [ %26, %22 ], [ %51, %49 ]
  %33 = and i64 %32, 1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %58, label %55

35:                                               ; preds = %49, %29
  %36 = phi i64 [ 0, %29 ], [ %50, %49 ]
  %37 = load %class.gr_sp.11*, %class.gr_sp.11** %30, align 8
  %38 = getelementptr inbounds %class.gr_sp.11, %class.gr_sp.11* %37, i64 %36, i32 0
  %39 = load %class.GrSurface*, %class.GrSurface** %38, align 8
  %40 = icmp eq %class.GrSurface* %39, null
  br i1 %40, label %49, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %39, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw add i32* %42, i32 -1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %49

45:                                               ; preds = %41
  %46 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %39, i64 0, i32 0, i32 1
  %47 = getelementptr inbounds %class.GrIORef, %class.GrIORef* %46, i64 -1
  %48 = bitcast %class.GrIORef* %47 to %class.GrGpuResource*
  tail call void @_ZNK13GrGpuResource19notifyARefCntIsZeroEN7GrIORefIS_E14LastRemovedRefE(%class.GrGpuResource* %48, i32 1) #9
  br label %49

49:                                               ; preds = %45, %41, %35
  %50 = add nuw nsw i64 %36, 1
  %51 = load i64, i64* %25, align 8
  %52 = lshr i64 %51, 1
  %53 = and i64 %52, 2147483647
  %54 = icmp ult i64 %50, %53
  br i1 %54, label %35, label %31

55:                                               ; preds = %31
  %56 = bitcast i8* %23 to i8**
  %57 = load i8*, i8** %56, align 8
  tail call void @_Z7sk_freePv(i8* %57) #9
  br label %58

58:                                               ; preds = %31, %55
  %59 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 128
  %60 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 3, i32 0, i32 0, i64 136
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = and i64 %62, 4294967294
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %58
  %66 = bitcast i8* %59 to %class.sk_sp.7**
  br label %71

67:                                               ; preds = %84, %58
  %68 = phi i64 [ %62, %58 ], [ %85, %84 ]
  %69 = and i64 %68, 1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %93, label %90

71:                                               ; preds = %84, %65
  %72 = phi i64 [ %62, %65 ], [ %85, %84 ]
  %73 = phi i64 [ 0, %65 ], [ %86, %84 ]
  %74 = load %class.sk_sp.7*, %class.sk_sp.7** %66, align 8
  %75 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %74, i64 %73, i32 0
  %76 = load %class.GrBuffer*, %class.GrBuffer** %75, align 8
  %77 = icmp eq %class.GrBuffer* %76, null
  br i1 %77, label %84, label %78

78:                                               ; preds = %71
  %79 = bitcast %class.GrBuffer* %76 to void (%class.GrBuffer*)***
  %80 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %79, align 8
  %81 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %80, i64 3
  %82 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %81, align 8
  tail call void %82(%class.GrBuffer* nonnull %76) #9
  %83 = load i64, i64* %61, align 8
  br label %84

84:                                               ; preds = %78, %71
  %85 = phi i64 [ %72, %71 ], [ %83, %78 ]
  %86 = add nuw nsw i64 %73, 1
  %87 = lshr i64 %85, 1
  %88 = and i64 %87, 2147483647
  %89 = icmp ult i64 %86, %88
  br i1 %89, label %71, label %67

90:                                               ; preds = %67
  %91 = bitcast i8* %59 to i8**
  %92 = load i8*, i8** %91, align 8
  tail call void @_Z7sk_freePv(i8* %92) #9
  br label %93

93:                                               ; preds = %67, %90
  %94 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 2, i32 0, i32 0, i64 256
  %95 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 2, i32 0, i32 0, i64 264
  %96 = bitcast i8* %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = and i64 %97, 4294967294
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %102, label %100

100:                                              ; preds = %93
  %101 = bitcast i8* %94 to %class.gr_sp**
  br label %106

102:                                              ; preds = %133, %93
  %103 = phi i64 [ %97, %93 ], [ %135, %133 ]
  %104 = and i64 %103, 1
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %142, label %139

106:                                              ; preds = %133, %100
  %107 = phi i64 [ 0, %100 ], [ %134, %133 ]
  %108 = load %class.gr_sp*, %class.gr_sp** %101, align 8
  %109 = getelementptr inbounds %class.gr_sp, %class.gr_sp* %108, i64 %107, i32 0
  %110 = load %class.GrRecycledResource*, %class.GrRecycledResource** %109, align 8
  %111 = icmp eq %class.GrRecycledResource* %110, null
  br i1 %111, label %133, label %112

112:                                              ; preds = %106
  %113 = bitcast %class.GrRecycledResource* %110 to %class.GrManagedResource*
  %114 = getelementptr inbounds %class.GrRecycledResource, %class.GrRecycledResource* %110, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load atomic i32, i32* %114 acquire, align 4
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %117, label %122

117:                                              ; preds = %112
  %118 = bitcast %class.GrRecycledResource* %110 to void (%class.GrRecycledResource*)***
  %119 = load void (%class.GrRecycledResource*)**, void (%class.GrRecycledResource*)*** %118, align 8
  %120 = getelementptr inbounds void (%class.GrRecycledResource*)*, void (%class.GrRecycledResource*)** %119, i64 5
  %121 = load void (%class.GrRecycledResource*)*, void (%class.GrRecycledResource*)** %120, align 8
  tail call void %121(%class.GrRecycledResource* nonnull %110) #9
  br label %133

122:                                              ; preds = %112
  %123 = atomicrmw add i32* %114, i32 -1 acq_rel
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %125, label %133

125:                                              ; preds = %122
  %126 = bitcast %class.GrRecycledResource* %110 to void (%class.GrManagedResource*)***
  %127 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %126, align 8
  %128 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %127, i64 4
  %129 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %128, align 8
  tail call void %129(%class.GrManagedResource* nonnull %113) #9
  %130 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %126, align 8
  %131 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %130, i64 1
  %132 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %131, align 8
  tail call void %132(%class.GrManagedResource* nonnull %113) #9
  br label %133

133:                                              ; preds = %125, %122, %117, %106
  %134 = add nuw nsw i64 %107, 1
  %135 = load i64, i64* %96, align 8
  %136 = lshr i64 %135, 1
  %137 = and i64 %136, 2147483647
  %138 = icmp ult i64 %134, %137
  br i1 %138, label %106, label %102

139:                                              ; preds = %102
  %140 = bitcast i8* %94 to i8**
  %141 = load i8*, i8** %140, align 8
  tail call void @_Z7sk_freePv(i8* %141) #9
  br label %142

142:                                              ; preds = %102, %139
  %143 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 1, i32 0, i32 0, i64 256
  %144 = getelementptr inbounds %class.GrVkCommandBuffer, %class.GrVkCommandBuffer* %0, i64 0, i32 1, i32 0, i32 0, i64 264
  %145 = bitcast i8* %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = and i64 %146, 4294967294
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %151, label %149

149:                                              ; preds = %142
  %150 = bitcast i8* %143 to %class.sk_sp**
  br label %155

151:                                              ; preds = %173, %142
  %152 = phi i64 [ %146, %142 ], [ %175, %173 ]
  %153 = and i64 %152, 1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %182, label %179

155:                                              ; preds = %173, %149
  %156 = phi i64 [ 0, %149 ], [ %174, %173 ]
  %157 = load %class.sk_sp*, %class.sk_sp** %150, align 8
  %158 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %157, i64 %156, i32 0
  %159 = load %class.GrManagedResource*, %class.GrManagedResource** %158, align 8
  %160 = icmp eq %class.GrManagedResource* %159, null
  br i1 %160, label %173, label %161

161:                                              ; preds = %155
  %162 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %159, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %163 = atomicrmw add i32* %162, i32 -1 acq_rel
  %164 = icmp eq i32 %163, 1
  br i1 %164, label %165, label %173

165:                                              ; preds = %161
  %166 = bitcast %class.GrManagedResource* %159 to void (%class.GrManagedResource*)***
  %167 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %166, align 8
  %168 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %167, i64 4
  %169 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %168, align 8
  tail call void %169(%class.GrManagedResource* nonnull %159) #9
  %170 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %166, align 8
  %171 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %170, i64 1
  %172 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %171, align 8
  tail call void %172(%class.GrManagedResource* nonnull %159) #9
  br label %173

173:                                              ; preds = %165, %161, %155
  %174 = add nuw nsw i64 %156, 1
  %175 = load i64, i64* %145, align 8
  %176 = lshr i64 %175, 1
  %177 = and i64 %176, 2147483647
  %178 = icmp ult i64 %174, %177
  br i1 %178, label %155, label %151

179:                                              ; preds = %151
  %180 = bitcast i8* %143 to i8**
  %181 = load i8*, i8** %180, align 8
  tail call void @_Z7sk_freePv(i8* %181) #9
  br label %182

182:                                              ; preds = %151, %179
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN26GrVkSecondaryCommandBufferD0Ev(%class.GrVkSecondaryCommandBuffer*) unnamed_addr #7 comdat align 2 {
  %2 = bitcast %class.GrVkSecondaryCommandBuffer* %0 to %class.GrVkCommandBuffer*
  tail call void @_ZN17GrVkCommandBufferD2Ev(%class.GrVkCommandBuffer* %2) #9
  %3 = bitcast %class.GrVkSecondaryCommandBuffer* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK26GrVkSecondaryCommandBuffer13onFreeGPUDataEPK7GrVkGpu(%class.GrVkSecondaryCommandBuffer*, %class.GrVkGpu*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI5gr_spIK18GrRecycledResourceXadL_ZNK17GrManagedResource3refEvEEXadL_ZNKS1_7recycleEvEEELb0EE12checkReallocEiNS5_11ReallocTypeE(%class.SkTArray.3*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.3, %class.SkTArray.3* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %103

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %103, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %91, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.3, %class.SkTArray.3* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %85, %48
  %51 = phi i64 [ 0, %48 ], [ %86, %85 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %class.gr_sp*, %class.gr_sp** %49, align 8
  %55 = getelementptr inbounds %class.gr_sp, %class.gr_sp* %54, i64 %51
  %56 = getelementptr inbounds %class.gr_sp, %class.gr_sp* %55, i64 0, i32 0
  %57 = bitcast %class.gr_sp* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %class.GrRecycledResource* null, %class.GrRecycledResource** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %class.gr_sp*, %class.gr_sp** %49, align 8
  %61 = getelementptr inbounds %class.gr_sp, %class.gr_sp* %60, i64 %51, i32 0
  %62 = load %class.GrRecycledResource*, %class.GrRecycledResource** %61, align 8
  %63 = icmp eq %class.GrRecycledResource* %62, null
  br i1 %63, label %85, label %64

64:                                               ; preds = %50
  %65 = bitcast %class.GrRecycledResource* %62 to %class.GrManagedResource*
  %66 = getelementptr inbounds %class.GrRecycledResource, %class.GrRecycledResource* %62, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load atomic i32, i32* %66 acquire, align 4
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %74

69:                                               ; preds = %64
  %70 = bitcast %class.GrRecycledResource* %62 to void (%class.GrRecycledResource*)***
  %71 = load void (%class.GrRecycledResource*)**, void (%class.GrRecycledResource*)*** %70, align 8
  %72 = getelementptr inbounds void (%class.GrRecycledResource*)*, void (%class.GrRecycledResource*)** %71, i64 5
  %73 = load void (%class.GrRecycledResource*)*, void (%class.GrRecycledResource*)** %72, align 8
  tail call void %73(%class.GrRecycledResource* nonnull %62) #9
  br label %85

74:                                               ; preds = %64
  %75 = atomicrmw add i32* %66, i32 -1 acq_rel
  %76 = icmp eq i32 %75, 1
  br i1 %76, label %77, label %85

77:                                               ; preds = %74
  %78 = bitcast %class.GrRecycledResource* %62 to void (%class.GrManagedResource*)***
  %79 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %78, align 8
  %80 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %79, i64 4
  %81 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %80, align 8
  tail call void %81(%class.GrManagedResource* nonnull %65) #9
  %82 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %78, align 8
  %83 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %82, i64 1
  %84 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %83, align 8
  tail call void %84(%class.GrManagedResource* nonnull %65) #9
  br label %85

85:                                               ; preds = %77, %74, %69, %50
  %86 = add nuw nsw i64 %51, 1
  %87 = load i64, i64* %4, align 8
  %88 = lshr i64 %87, 1
  %89 = and i64 %88, 2147483647
  %90 = icmp ult i64 %86, %89
  br i1 %90, label %50, label %91

91:                                               ; preds = %85, %35
  %92 = phi i64 [ %45, %35 ], [ %87, %85 ]
  %93 = and i64 %92, 1
  %94 = icmp eq i64 %93, 0
  %95 = bitcast %class.SkTArray.3* %0 to i8**
  br i1 %94, label %99, label %96

96:                                               ; preds = %91
  %97 = load i8*, i8** %95, align 8
  tail call void @_Z7sk_freePv(i8* %97) #9
  %98 = load i64, i64* %4, align 8
  br label %99

99:                                               ; preds = %91, %96
  %100 = phi i64 [ %98, %96 ], [ %92, %91 ]
  store i8* %44, i8** %95, align 8
  %101 = and i64 %100, -4294967298
  %102 = or i64 %101, 1
  store i64 %102, i64* %4, align 8
  br label %103

103:                                              ; preds = %99, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI21VkBufferMemoryBarrierLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.445*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.445, %class.SkTArray.445* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %74

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %74, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 56) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %62, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.445, %class.SkTArray.445* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %57, %50 ]
  %52 = mul nuw nsw i64 %51, 56
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %struct.VkBufferMemoryBarrier*, %struct.VkBufferMemoryBarrier** %49, align 8
  %55 = getelementptr inbounds %struct.VkBufferMemoryBarrier, %struct.VkBufferMemoryBarrier* %54, i64 %51
  %56 = bitcast %struct.VkBufferMemoryBarrier* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %56, i64 56, i1 false) #9
  %57 = add nuw nsw i64 %51, 1
  %58 = load i64, i64* %4, align 8
  %59 = lshr i64 %58, 1
  %60 = and i64 %59, 2147483647
  %61 = icmp ult i64 %57, %60
  br i1 %61, label %50, label %62

62:                                               ; preds = %50, %35
  %63 = phi i64 [ %45, %35 ], [ %58, %50 ]
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %64, 0
  %66 = bitcast %class.SkTArray.445* %0 to i8**
  br i1 %65, label %70, label %67

67:                                               ; preds = %62
  %68 = load i8*, i8** %66, align 8
  tail call void @_Z7sk_freePv(i8* %68) #9
  %69 = load i64, i64* %4, align 8
  br label %70

70:                                               ; preds = %62, %67
  %71 = phi i64 [ %69, %67 ], [ %63, %62 ]
  store i8* %44, i8** %66, align 8
  %72 = and i64 %71, -4294967298
  %73 = or i64 %72, 1
  store i64 %73, i64* %4, align 8
  br label %74

74:                                               ; preds = %70, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI20VkImageMemoryBarrierLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.448*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.448, %class.SkTArray.448* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %74

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %74, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 72) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %62, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.448, %class.SkTArray.448* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %57, %50 ]
  %52 = mul nuw nsw i64 %51, 72
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %struct.VkImageMemoryBarrier*, %struct.VkImageMemoryBarrier** %49, align 8
  %55 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %54, i64 %51
  %56 = bitcast %struct.VkImageMemoryBarrier* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %56, i64 72, i1 false) #9
  %57 = add nuw nsw i64 %51, 1
  %58 = load i64, i64* %4, align 8
  %59 = lshr i64 %58, 1
  %60 = and i64 %59, 2147483647
  %61 = icmp ult i64 %57, %60
  br i1 %61, label %50, label %62

62:                                               ; preds = %50, %35
  %63 = phi i64 [ %45, %35 ], [ %58, %50 ]
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %64, 0
  %66 = bitcast %class.SkTArray.448* %0 to i8**
  br i1 %65, label %70, label %67

67:                                               ; preds = %62
  %68 = load i8*, i8** %66, align 8
  tail call void @_Z7sk_freePv(i8* %68) #9
  %69 = load i64, i64* %4, align 8
  br label %70

70:                                               ; preds = %62, %67
  %71 = phi i64 [ %69, %67 ], [ %63, %62 ]
  store i8* %44, i8** %66, align 8
  %72 = and i64 %71, -4294967298
  %73 = or i64 %72, 1
  store i64 %73, i64* %4, align 8
  br label %74

74:                                               ; preds = %70, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayINSt3__110unique_ptrI26GrVkSecondaryCommandBufferNS0_14default_deleteIS2_EEEELb1EE12checkReallocEiNS6_11ReallocTypeE(%class.SkTArray.449*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.449, %class.SkTArray.449* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 2
  %47 = and i64 %46, 17179869176
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray.449* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #9
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray.449* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #9
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIP13VkSemaphore_TLb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray.519*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.519, %class.SkTArray.519* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %76

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %76, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %64, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.519, %class.SkTArray.519* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %59, %50 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %struct.VkSemaphore_T**, %struct.VkSemaphore_T*** %49, align 8
  %55 = getelementptr inbounds %struct.VkSemaphore_T*, %struct.VkSemaphore_T** %54, i64 %51
  %56 = bitcast %struct.VkSemaphore_T** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast i8* %53 to i64*
  store i64 %57, i64* %58, align 8
  %59 = add nuw nsw i64 %51, 1
  %60 = load i64, i64* %4, align 8
  %61 = lshr i64 %60, 1
  %62 = and i64 %61, 2147483647
  %63 = icmp ult i64 %59, %62
  br i1 %63, label %50, label %64

64:                                               ; preds = %50, %35
  %65 = phi i64 [ %45, %35 ], [ %60, %50 ]
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  %68 = bitcast %class.SkTArray.519* %0 to i8**
  br i1 %67, label %72, label %69

69:                                               ; preds = %64
  %70 = load i8*, i8** %68, align 8
  tail call void @_Z7sk_freePv(i8* %70) #9
  %71 = load i64, i64* %4, align 8
  br label %72

72:                                               ; preds = %64, %69
  %73 = phi i64 [ %71, %69 ], [ %65, %64 ]
  store i8* %44, i8** %68, align 8
  %74 = and i64 %73, -4294967298
  %75 = or i64 %74, 1
  store i64 %75, i64* %4, align 8
  br label %76

76:                                               ; preds = %72, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIjLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.412*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.412, %class.SkTArray.412* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %75

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %75, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 4) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %63, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.412, %class.SkTArray.412* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %58, %50 ]
  %52 = shl nuw nsw i64 %51, 2
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = bitcast i8* %53 to i32*
  %55 = load i32*, i32** %49, align 8
  %56 = getelementptr inbounds i32, i32* %55, i64 %51
  %57 = load i32, i32* %56, align 4
  store i32 %57, i32* %54, align 4
  %58 = add nuw nsw i64 %51, 1
  %59 = load i64, i64* %4, align 8
  %60 = lshr i64 %59, 1
  %61 = and i64 %60, 2147483647
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %50, label %63

63:                                               ; preds = %50, %35
  %64 = phi i64 [ %45, %35 ], [ %59, %50 ]
  %65 = and i64 %64, 1
  %66 = icmp eq i64 %65, 0
  %67 = bitcast %class.SkTArray.412* %0 to i8**
  br i1 %66, label %71, label %68

68:                                               ; preds = %63
  %69 = load i8*, i8** %67, align 8
  tail call void @_Z7sk_freePv(i8* %69) #9
  %70 = load i64, i64* %4, align 8
  br label %71

71:                                               ; preds = %63, %68
  %72 = phi i64 [ %70, %68 ], [ %64, %63 ]
  store i8* %44, i8** %67, align 8
  %73 = and i64 %72, -4294967298
  %74 = or i64 %73, 1
  store i64 %74, i64* %4, align 8
  br label %75

75:                                               ; preds = %71, %32, %21
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!5 = distinct !{!5, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!8 = distinct !{!8, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_Z9sk_ref_spI9GrSurfaceE5sk_spIT_EPKS2_: argument 0"}
!11 = distinct !{!11, !"_Z9sk_ref_spI9GrSurfaceE5sk_spIT_EPKS2_"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!14 = distinct !{!14, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!17 = distinct !{!17, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.unroll.disable"}
!20 = distinct !{!20, !19}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!23 = distinct !{!23, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!26 = distinct !{!26, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!29 = distinct !{!29, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!32 = distinct !{!32, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!35 = distinct !{!35, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!38 = distinct !{!38, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!41 = distinct !{!41, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!44 = distinct !{!44, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!47 = distinct !{!47, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_: argument 0"}
!50 = distinct !{!50, !"_Z9sk_ref_spI17GrManagedResourceE5sk_spIT_EPKS2_"}
