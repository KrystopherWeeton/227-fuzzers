; ModuleID = '../../crypto/signature_creator.cc'
source_filename = "../../crypto/signature_creator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crypto::SignatureCreator" = type { %struct.env_md_ctx_st* }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.crypto::RSAPrivateKey" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %struct.evp_pkey_st* }
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%"class.crypto::OpenSSLErrStackTracer" = type { %"class.base::Location" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%struct.engine_st = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i8* }
%struct.rsa_st = type { %struct.rsa_meth_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.crypto_ex_data_st, i32, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %struct.bn_blinding_st**, i8*, i64, i8 }
%struct.rsa_meth_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.rsa_st*)*, i32 (%struct.rsa_st*)*, i64 (%struct.rsa_st*)*, i32 (i32, i8*, i32, i8*, i32*, %struct.rsa_st*)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i8*, i8*, i64)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.bn_mont_ctx_st = type opaque
%struct.bignum_st = type opaque
%struct.bn_blinding_st = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [7 x i8] c"Create\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"../../crypto/signature_creator.cc\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Update\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Final\00", align 1

@_ZN6crypto16SignatureCreatorD1Ev = hidden unnamed_addr alias void (%"class.crypto::SignatureCreator"*), void (%"class.crypto::SignatureCreator"*)* @_ZN6crypto16SignatureCreatorD2Ev
@_ZN6crypto16SignatureCreatorC1Ev = hidden unnamed_addr alias void (%"class.crypto::SignatureCreator"*), void (%"class.crypto::SignatureCreator"*)* @_ZN6crypto16SignatureCreatorC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6crypto16SignatureCreatorD2Ev(%"class.crypto::SignatureCreator"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.crypto::SignatureCreator", %"class.crypto::SignatureCreator"* %0, i64 0, i32 0
  %3 = load %struct.env_md_ctx_st*, %struct.env_md_ctx_st** %2, align 8
  tail call void @EVP_MD_CTX_destroy(%struct.env_md_ctx_st* %3) #6
  ret void
}

declare void @EVP_MD_CTX_destroy(%struct.env_md_ctx_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::SignatureCreator"* @_ZN6crypto16SignatureCreator6CreateEPNS_13RSAPrivateKeyENS0_13HashAlgorithmE(%"class.crypto::RSAPrivateKey"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 32, i1 false)
  %6 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #6
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i32 50) #6
  %7 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %3, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %7, %"class.base::Location"* nonnull dereferenceable(32) %4) #6
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #6
  %8 = call i8* @_Znwm(i64 8) #7
  %9 = bitcast i8* %8 to %struct.env_md_ctx_st**
  %10 = call %struct.env_md_ctx_st* @EVP_MD_CTX_create() #6
  store %struct.env_md_ctx_st* %10, %struct.env_md_ctx_st** %9, align 8
  %11 = ptrtoint i8* %8 to i64
  switch i32 %1, label %25 [
    i32 0, label %12
    i32 1, label %14
  ]

12:                                               ; preds = %2
  %13 = call %struct.env_md_st* @EVP_sha1() #6
  br label %16

14:                                               ; preds = %2
  %15 = call %struct.env_md_st* @EVP_sha256() #6
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi %struct.env_md_st* [ %15, %14 ], [ %13, %12 ]
  %18 = icmp eq %struct.env_md_st* %17, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %16
  %20 = load %struct.env_md_ctx_st*, %struct.env_md_ctx_st** %9, align 8
  %21 = getelementptr inbounds %"class.crypto::RSAPrivateKey", %"class.crypto::RSAPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %21, align 8
  %23 = call i32 @EVP_DigestSignInit(%struct.env_md_ctx_st* %20, %struct.evp_pkey_ctx_st** null, %struct.env_md_st* nonnull %17, %struct.engine_st* null, %struct.evp_pkey_st* %22) #6
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %16, %19, %2
  %26 = load %struct.env_md_ctx_st*, %struct.env_md_ctx_st** %9, align 8
  call void @EVP_MD_CTX_destroy(%struct.env_md_ctx_st* %26) #6
  call void @_ZdlPv(i8* nonnull %8) #7
  br label %27

27:                                               ; preds = %19, %25
  %28 = phi i64 [ 0, %25 ], [ %11, %19 ]
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %7) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #6
  %29 = inttoptr i64 %28 to %"class.crypto::SignatureCreator"*
  ret %"class.crypto::SignatureCreator"* %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare i32 @EVP_DigestSignInit(%struct.env_md_ctx_st*, %struct.evp_pkey_ctx_st**, %struct.env_md_st*, %struct.engine_st*, %struct.evp_pkey_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6crypto16SignatureCreator4SignEPNS_13RSAPrivateKeyENS0_13HashAlgorithmEPKhiPNSt3__16vectorIhNS6_9allocatorIhEEEE(%"class.crypto::RSAPrivateKey"* nocapture readonly, i32, i8*, i32, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.crypto::RSAPrivateKey", %"class.crypto::RSAPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %7, align 8
  %9 = tail call %struct.rsa_st* @EVP_PKEY_get1_RSA(%struct.evp_pkey_st* %8) #6
  %10 = icmp eq %struct.rsa_st* %9, null
  br i1 %10, label %57, label %11

11:                                               ; preds = %5
  %12 = tail call i32 @RSA_size(%struct.rsa_st* nonnull %9) #6
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector"* %4 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = icmp ult i64 %19, %13
  %21 = inttoptr i64 %18 to i8*
  br i1 %20, label %22, label %26

22:                                               ; preds = %11
  %23 = sub i64 %13, %19
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %4, i64 %23) #6
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  br label %30

26:                                               ; preds = %11
  %27 = icmp ugt i64 %19, %13
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = getelementptr inbounds i8, i8* %21, i64 %13
  store i8* %29, i8** %14, align 8
  br label %30

30:                                               ; preds = %22, %26, %28
  %31 = phi i8* [ %25, %22 ], [ %21, %26 ], [ %21, %28 ]
  %32 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #6
  store i32 0, i32* %6, align 4
  %33 = icmp eq i32 %1, 1
  %34 = select i1 %33, i32 672, i32 0
  %35 = icmp eq i32 %1, 0
  %36 = select i1 %35, i32 64, i32 %34
  %37 = call i32 @RSA_sign(i32 %36, i8* %2, i32 %3, i8* %31, i32* nonnull %6, %struct.rsa_st* nonnull %9) #6
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  %40 = load i64, i64* %17, align 8
  store i64 %40, i64* %15, align 8
  br label %55

41:                                               ; preds = %30
  %42 = load i32, i32* %6, align 4
  %43 = zext i32 %42 to i64
  %44 = load i64, i64* %15, align 8
  %45 = load i64, i64* %17, align 8
  %46 = sub i64 %44, %45
  %47 = icmp ult i64 %46, %43
  %48 = inttoptr i64 %45 to i8*
  br i1 %47, label %49, label %51

49:                                               ; preds = %41
  %50 = sub i64 %43, %46
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %4, i64 %50) #6
  br label %55

51:                                               ; preds = %41
  %52 = icmp ugt i64 %46, %43
  br i1 %52, label %53, label %55

53:                                               ; preds = %51
  %54 = getelementptr inbounds i8, i8* %48, i64 %43
  store i8* %54, i8** %14, align 8
  br label %55

55:                                               ; preds = %53, %51, %49, %39
  %56 = phi i1 [ false, %39 ], [ true, %49 ], [ true, %51 ], [ true, %53 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #6
  call void @RSA_free(%struct.rsa_st* nonnull %9) #6
  br label %57

57:                                               ; preds = %5, %55
  %58 = phi i1 [ %56, %55 ], [ false, %5 ]
  ret i1 %58
}

declare %struct.rsa_st* @EVP_PKEY_get1_RSA(%struct.evp_pkey_st*) local_unnamed_addr #1

declare i32 @RSA_size(%struct.rsa_st*) local_unnamed_addr #1

declare i32 @RSA_sign(i32, i8*, i32, i8*, i32*, %struct.rsa_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6crypto16SignatureCreator6UpdateEPKhi(%"class.crypto::SignatureCreator"* nocapture readonly, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %5 = alloca %"class.base::Location", align 8
  %6 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = bitcast %"class.base::Location"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #6
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i32 86) #6
  %8 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %4, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %8, %"class.base::Location"* nonnull dereferenceable(32) %5) #6
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #6
  %9 = getelementptr inbounds %"class.crypto::SignatureCreator", %"class.crypto::SignatureCreator"* %0, i64 0, i32 0
  %10 = load %struct.env_md_ctx_st*, %struct.env_md_ctx_st** %9, align 8
  %11 = sext i32 %2 to i64
  %12 = call i32 @EVP_DigestSignUpdate(%struct.env_md_ctx_st* %10, i8* %1, i64 %11) #6
  %13 = icmp ne i32 %12, 0
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %8) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #6
  ret i1 %13
}

declare i32 @EVP_DigestSignUpdate(%struct.env_md_ctx_st*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6crypto16SignatureCreator5FinalEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::SignatureCreator"* nocapture readonly, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca i64, align 8
  %6 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #6
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i32 91) #6
  %8 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %3, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %8, %"class.base::Location"* nonnull dereferenceable(32) %4) #6
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #6
  %9 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #6
  store i64 0, i64* %5, align 8
  %10 = getelementptr inbounds %"class.crypto::SignatureCreator", %"class.crypto::SignatureCreator"* %0, i64 0, i32 0
  %11 = load %struct.env_md_ctx_st*, %struct.env_md_ctx_st** %10, align 8
  %12 = call i32 @EVP_DigestSignFinal(%struct.env_md_ctx_st* %11, i8* null, i64* nonnull %5) #6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = bitcast %"class.std::__1::vector"* %1 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %18 = bitcast i8** %17 to i64*
  store i64 %16, i64* %18, align 8
  br label %57

19:                                               ; preds = %2
  %20 = load i64, i64* %5, align 8
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %22 = bitcast i8** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"class.std::__1::vector"* %1 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %23, %25
  %27 = icmp ugt i64 %20, %26
  %28 = inttoptr i64 %25 to i8*
  br i1 %27, label %29, label %33

29:                                               ; preds = %19
  %30 = sub i64 %20, %26
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %1, i64 %30) #6
  %31 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  br label %37

33:                                               ; preds = %19
  %34 = icmp ult i64 %20, %26
  br i1 %34, label %35, label %37

35:                                               ; preds = %33
  %36 = getelementptr inbounds i8, i8* %28, i64 %20
  store i8* %36, i8** %21, align 8
  br label %37

37:                                               ; preds = %29, %33, %35
  %38 = phi i8* [ %32, %29 ], [ %28, %33 ], [ %28, %35 ]
  %39 = load %struct.env_md_ctx_st*, %struct.env_md_ctx_st** %10, align 8
  %40 = call i32 @EVP_DigestSignFinal(%struct.env_md_ctx_st* %39, i8* %38, i64* nonnull %5) #6
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  %43 = load i64, i64* %24, align 8
  store i64 %43, i64* %22, align 8
  br label %57

44:                                               ; preds = %37
  %45 = load i64, i64* %5, align 8
  %46 = load i64, i64* %22, align 8
  %47 = load i64, i64* %24, align 8
  %48 = sub i64 %46, %47
  %49 = icmp ugt i64 %45, %48
  %50 = inttoptr i64 %47 to i8*
  br i1 %49, label %51, label %53

51:                                               ; preds = %44
  %52 = sub i64 %45, %48
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %1, i64 %52) #6
  br label %57

53:                                               ; preds = %44
  %54 = icmp ult i64 %45, %48
  br i1 %54, label %55, label %57

55:                                               ; preds = %53
  %56 = getelementptr inbounds i8, i8* %50, i64 %45
  store i8* %56, i8** %21, align 8
  br label %57

57:                                               ; preds = %55, %53, %51, %42, %14
  %58 = phi i1 [ false, %42 ], [ false, %14 ], [ true, %51 ], [ true, %53 ], [ true, %55 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #6
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %8) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #6
  ret i1 %58
}

declare i32 @EVP_DigestSignFinal(%struct.env_md_ctx_st*, i8*, i64*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6crypto16SignatureCreatorC2Ev(%"class.crypto::SignatureCreator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.crypto::SignatureCreator", %"class.crypto::SignatureCreator"* %0, i64 0, i32 0
  %3 = tail call %struct.env_md_ctx_st* @EVP_MD_CTX_create() #6
  store %struct.env_md_ctx_st* %3, %struct.env_md_ctx_st** %2, align 8
  ret void
}

declare %struct.env_md_ctx_st* @EVP_MD_CTX_create() local_unnamed_addr #1

declare void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"*, %"class.base::Location"* dereferenceable(32)) unnamed_addr #1

declare void @_ZN6crypto17EnsureOpenSSLInitEv() local_unnamed_addr #1

declare %struct.env_md_st* @EVP_sha1() local_unnamed_addr #1

declare %struct.env_md_st* @EVP_sha256() local_unnamed_addr #1

declare void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* dereferenceable(32)) local_unnamed_addr #1

declare void @RSA_free(%struct.rsa_st*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #6
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #8
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #7
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #6
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #6
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #7
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
