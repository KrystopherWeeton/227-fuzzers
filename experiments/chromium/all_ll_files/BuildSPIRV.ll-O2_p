; ModuleID = '../../third_party/angle/src/compiler/translator/BuildSPIRV.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/BuildSPIRV.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array.118" }
%"struct.std::__1::array.118" = type { [6 x i32] }
%"struct.sh::SpirvType" = type <{ %"class.sh::TFieldListCollection"*, i32, i32, i8, i8, [2 x i8], i32, %"class.sh::TSpan", i32, i8, [3 x i8] }>
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.0"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TVector.0" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::SPIRVBuilder" = type <{ i8, [7 x i8], %"class.std::__1::set", %"class.std::__1::set.13", %"class.angle::FastVector", %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32", %"class.absl::flat_hash_map", %"class.std::__1::vector.32", %"class.std::__1::vector.32", %"class.std::__1::vector.32", %"class.std::__1::vector.32", %"class.std::__1::vector.32", %"class.std::__1::vector.32", %"class.std::__1::vector.32", [2 x %"class.angle::spirv::BoxedUint32"], %"class.absl::flat_hash_map.39", %"class.absl::flat_hash_map.39", %"class.absl::flat_hash_map.39", %"class.absl::flat_hash_map.54", %"class.absl::flat_hash_map.71", %"class.absl::flat_hash_map.54", i64 (i8*, i64)*, %"class.std::__1::map"*, i32, i32, i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.7", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i64 }
%"class.std::__1::set.13" = type { %"class.std::__1::__tree.14" }
%"class.std::__1::__tree.14" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.15", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"class.angle::FastVector" = type { %"struct.std::__1::array", %"class.angle::spirv::BoxedUint32"*, i64, i64 }
%"struct.std::__1::array" = type { [8 x %"class.angle::spirv::BoxedUint32"] }
%"class.angle::spirv::BoxedUint32" = type { %"struct.angle::spirv::IdRefHelper" }
%"struct.angle::spirv::IdRefHelper" = type { i32 }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"struct.sh::SpirvType", %"struct.sh::SpirvTypeData", [4 x i8] }
%"struct.sh::SpirvTypeData" = type { %"class.angle::spirv::BoxedUint32", i32, i32 }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { i32*, i32*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { i32* }
%"class.absl::flat_hash_map.39" = type { %"class.absl::container_internal::raw_hash_map.40" }
%"class.absl::container_internal::raw_hash_map.40" = type { %"class.absl::container_internal::raw_hash_set.41" }
%"class.absl::container_internal::raw_hash_set.41" = type { i8*, %"union.absl::container_internal::map_slot_type.42"*, i64, i64, %"class.absl::container_internal::CompressedTuple.45" }
%"union.absl::container_internal::map_slot_type.42" = type { %"struct.std::__1::pair.43" }
%"struct.std::__1::pair.43" = type { i32, %"class.angle::spirv::BoxedUint32" }
%"class.absl::container_internal::CompressedTuple.45" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.46" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.46" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.absl::flat_hash_map.71" = type { %"class.absl::container_internal::raw_hash_map.72" }
%"class.absl::container_internal::raw_hash_map.72" = type { %"class.absl::container_internal::raw_hash_set.73" }
%"class.absl::container_internal::raw_hash_set.73" = type { i8*, %"union.absl::container_internal::map_slot_type.74"*, i64, i64, %"class.absl::container_internal::CompressedTuple.77" }
%"union.absl::container_internal::map_slot_type.74" = type { %"struct.std::__1::pair.75" }
%"struct.std::__1::pair.75" = type { %"struct.sh::SpirvIdAndStorageClass", %"class.angle::spirv::BoxedUint32" }
%"struct.sh::SpirvIdAndStorageClass" = type { %"class.angle::spirv::BoxedUint32", i32 }
%"class.absl::container_internal::CompressedTuple.77" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.78" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.78" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.absl::flat_hash_map.54" = type { %"class.absl::container_internal::raw_hash_map.55" }
%"class.absl::container_internal::raw_hash_map.55" = type { %"class.absl::container_internal::raw_hash_set.56" }
%"class.absl::container_internal::raw_hash_set.56" = type { i8*, %"union.absl::container_internal::map_slot_type.57"*, i64, i64, %"class.absl::container_internal::CompressedTuple.62" }
%"union.absl::container_internal::map_slot_type.57" = type { %"struct.sh::SpirvIdAndIdList", [8 x i8] }
%"struct.sh::SpirvIdAndIdList" = type { %"class.angle::spirv::BoxedUint32", %"class.angle::FastVector" }
%"class.absl::container_internal::CompressedTuple.62" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.63" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.63" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.86" }
%"class.std::__1::__tree.86" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.87", %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"struct.std::__1::pair.23" = type { %"struct.sh::SpirvType", %"struct.sh::SpirvTypeData", [4 x i8] }
%"struct.sh::SpirvTypeHash" = type { i8 }
%"class.angle::spirv::BoxedUint32.104" = type { %"struct.angle::spirv::LiteralIntegerHelper" }
%"struct.angle::spirv::LiteralIntegerHelper" = type { i32 }
%"class.angle::FastVector.105" = type { %"struct.std::__1::array.106", %"class.angle::spirv::BoxedUint32.104"*, i64, i64 }
%"struct.std::__1::array.106" = type { [8 x %"class.angle::spirv::BoxedUint32.104"] }
%"struct.std::__1::pair.60" = type <{ %"struct.sh::SpirvIdAndIdList", %"class.angle::spirv::BoxedUint32", [4 x i8] }>
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", i32 }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.std::__1::__tree_node.203" = type { %"class.std::__1::__tree_node_base.base", i32 }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.116"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.116" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.117, i32 }
%union.anon.117 = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN2sh15IsShaderIoBlockENS_10TQualifierE = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE4findIS4_EENSK_8iteratorERSH_ = comdat any

$_ZN2sh10IsShaderInENS_10TQualifierE = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_ = comdat any

$_ZNK2sh13SpirvTypeHashclERKNS_9SpirvTypeE = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE22find_or_prepare_insertIS4_EENSC_ImbEERKT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE27drop_deletes_without_resizeEv = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE27drop_deletes_without_resizeEv = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE22find_or_prepare_insertIS4_EENSG_ImbEERKT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE27drop_deletes_without_resizeEv = comdat any

$_ZN5angle10FastVectorINS_5spirv11BoxedUint32INS1_11IdRefHelperEEELm8ENSt3__15arrayIS4_Lm8EEEE4swapERS8_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE27drop_deletes_without_resizeEv = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"GLSL.std.450\00", align 1
@_ZZN2sh12SPIRVBuilder8getSpirvEvE16kExecutionModels = internal unnamed_addr constant %"class.angle::PackedEnumMap" { %"struct.std::__1::array.118" { [6 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5] } }, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8
@switch.table._ZN2sh12SPIRVBuilder14getImageFormatENS_26TLayoutImageInternalFormatE = private unnamed_addr constant [13 x i32] [i32 1, i32 2, i32 3, i32 30, i32 31, i32 32, i32 33, i32 21, i32 22, i32 23, i32 24, i32 4, i32 5], align 4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2sheqERKNS_9SpirvTypeES2_(%"struct.sh::SpirvType"* nocapture readonly dereferenceable(48), %"struct.sh::SpirvType"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %0, i64 0, i32 0
  %4 = load %"class.sh::TFieldListCollection"*, %"class.sh::TFieldListCollection"** %3, align 8
  %5 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 0
  %6 = load %"class.sh::TFieldListCollection"*, %"class.sh::TFieldListCollection"** %5, align 8
  %7 = icmp eq %"class.sh::TFieldListCollection"* %4, %6
  br i1 %7, label %8, label %84

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %0, i64 0, i32 7, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 7, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %10, %12
  br i1 %13, label %14, label %84

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %0, i64 0, i32 7, i32 0
  %16 = load i32*, i32** %15, align 8
  %17 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 7, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = icmp ne i32* %16, %18
  %20 = icmp ne i64 %10, 0
  %21 = and i1 %20, %19
  br i1 %21, label %24, label %32

22:                                               ; preds = %24
  %23 = icmp eq i64 %31, %10
  br i1 %23, label %32, label %24

24:                                               ; preds = %14, %22
  %25 = phi i64 [ %31, %22 ], [ 0, %14 ]
  %26 = getelementptr inbounds i32, i32* %16, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds i32, i32* %18, i64 %25
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %27, %29
  %31 = add nuw i64 %25, 1
  br i1 %30, label %22, label %84

32:                                               ; preds = %22, %14
  %33 = icmp eq %"class.sh::TFieldListCollection"* %4, null
  br i1 %33, label %40, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %0, i64 0, i32 1
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 1
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %36, %38
  br label %84

40:                                               ; preds = %32
  %41 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %0, i64 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %42, %44
  br i1 %45, label %46, label %84

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %0, i64 0, i32 3
  %48 = load i8, i8* %47, align 8
  %49 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 3
  %50 = load i8, i8* %49, align 8
  %51 = icmp eq i8 %48, %50
  br i1 %51, label %52, label %84

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %0, i64 0, i32 4
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 4
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %54, %56
  br i1 %57, label %58, label %84

58:                                               ; preds = %52
  %59 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %0, i64 0, i32 6
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 6
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %60, %62
  br i1 %63, label %64, label %84

64:                                               ; preds = %58
  %65 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %0, i64 0, i32 8
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 8
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %66, %68
  br i1 %69, label %70, label %84

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %0, i64 0, i32 9
  %72 = load i8, i8* %71, align 4, !range !2
  %73 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 9
  %74 = load i8, i8* %73, align 4, !range !2
  %75 = icmp eq i8 %72, %74
  br i1 %75, label %76, label %84

76:                                               ; preds = %70
  %77 = icmp eq i64 %10, 0
  br i1 %77, label %84, label %78

78:                                               ; preds = %76
  %79 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %0, i64 0, i32 1
  %80 = load i32, i32* %79, align 8
  %81 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 1
  %82 = load i32, i32* %81, align 8
  %83 = icmp eq i32 %80, %82
  br label %84

84:                                               ; preds = %24, %8, %40, %46, %52, %58, %64, %70, %78, %76, %2, %34
  %85 = phi i1 [ %39, %34 ], [ false, %2 ], [ false, %70 ], [ false, %64 ], [ false, %58 ], [ false, %52 ], [ false, %46 ], [ false, %40 ], [ true, %76 ], [ %83, %78 ], [ false, %8 ], [ false, %24 ]
  ret i1 %85
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder8getNewIdEv(%"class.sh::SPIRVBuilder"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder11getTypeDataERKNS_5TTypeENS_19TLayoutBlockStorageE(%"class.sh::SPIRVBuilder"*, %"class.sh::TType"* nocapture readonly dereferenceable(184), i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"struct.sh::SpirvType", align 8
  %5 = bitcast %"struct.sh::SpirvType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 48, i1 false)
  %6 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 0
  store %"class.sh::TFieldListCollection"* null, %"class.sh::TFieldListCollection"** %6, align 8
  %7 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 2
  %9 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 3
  %10 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 4
  %11 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 6
  %12 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 7
  %13 = bitcast %"class.sh::TSpan"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 21, i1 false) #12
  %14 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  store i32 %15, i32* %8, align 4
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 8
  %17 = load i8, i8* %16, align 8
  store i8 %17, i8* %9, align 8
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 9
  %19 = load i8, i8* %18, align 1
  store i8 %19, i8* %10, align 1
  %20 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 7, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 7, i32 3
  store i32 %21, i32* %11, align 4
  %23 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 10
  %24 = bitcast %"class.sh::TSpan"* %23 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 8
  %26 = bitcast %"class.sh::TSpan"* %12 to <2 x i64>*
  store <2 x i64> %25, <2 x i64>* %26, align 8
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 7, i32 7
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 8
  store i32 %28, i32* %29, align 8
  store i32 %2, i32* %7, align 8
  %30 = icmp eq i32 %21, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %3
  store i32 2, i32* %11, align 4
  br label %32

32:                                               ; preds = %31, %3
  %33 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 13
  %34 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %33, align 8
  %35 = icmp eq %"class.sh::TStructure"* %34, null
  br i1 %35, label %43, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %34, i64 0, i32 2
  store %"class.sh::TFieldListCollection"* %37, %"class.sh::TFieldListCollection"** %6, align 8
  %38 = bitcast %"class.sh::TStructure"* %34 to %"class.sh::TSymbol"*
  %39 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* nonnull %38) #12
  %40 = extractvalue { i8*, i64 } %39, 0
  %41 = icmp eq i8* %40, null
  %42 = select i1 %41, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %40
  br label %67

43:                                               ; preds = %32
  %44 = icmp eq i32 %15, 91
  br i1 %44, label %45, label %63

45:                                               ; preds = %43
  %46 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 12
  %47 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %46, align 8
  %48 = icmp eq %"class.sh::TInterfaceBlock"* %47, null
  %49 = getelementptr inbounds %"class.sh::TInterfaceBlock", %"class.sh::TInterfaceBlock"* %47, i64 0, i32 1
  %50 = select i1 %48, %"class.sh::TFieldListCollection"* null, %"class.sh::TFieldListCollection"* %49
  store %"class.sh::TFieldListCollection"* %50, %"class.sh::TFieldListCollection"** %6, align 8
  %51 = bitcast %"class.sh::TInterfaceBlock"* %47 to %"class.sh::TSymbol"*
  %52 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %51) #12
  %53 = extractvalue { i8*, i64 } %52, 0
  %54 = icmp eq i8* %53, null
  %55 = select i1 %54, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %53
  %56 = load i32, i32* %22, align 4
  store i32 %56, i32* %7, align 8
  %57 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 2
  %58 = load i32, i32* %57, align 8
  %59 = tail call zeroext i1 @_ZN2sh15IsShaderIoBlockENS_10TQualifierE(i32 %58)
  %60 = icmp eq i32 %56, 4
  %61 = or i1 %59, %60
  br i1 %61, label %67, label %62

62:                                               ; preds = %45
  store i32 3, i32* %7, align 8
  br label %67

63:                                               ; preds = %43
  %64 = extractelement <2 x i64> %25, i32 1
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  store i32 0, i32* %7, align 8
  br label %67

67:                                               ; preds = %62, %45, %66, %63, %36
  %68 = phi i8* [ %42, %36 ], [ %55, %45 ], [ %55, %62 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), %66 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), %63 ]
  %69 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %4, i8* %68)
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #12
  ret %"struct.sh::SpirvTypeData"* %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh15IsShaderIoBlockENS_10TQualifierE(i32) local_unnamed_addr #4 comdat {
  switch i32 %0, label %2 [
    i32 74, label %3
    i32 84, label %3
    i32 11, label %3
    i32 82, label %3
    i32 83, label %3
    i32 88, label %3
    i32 89, label %3
    i32 72, label %3
    i32 73, label %3
    i32 12, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %4 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"*, %"struct.sh::SpirvType"* dereferenceable(48), i8*) local_unnamed_addr #5 align 2 {
  %4 = alloca %"struct.std::__1::pair.23", align 8
  %5 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 7, i32 0, i32 0, i32 4
  %7 = bitcast %"class.absl::container_internal::CompressedTuple"* %6 to %"struct.sh::SpirvTypeHash"*
  %8 = tail call i64 @_ZNK2sh13SpirvTypeHashclERKNS_9SpirvTypeE(%"struct.sh::SpirvTypeHash"* %7, %"struct.sh::SpirvType"* dereferenceable(48) %1) #12
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %5, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 7, i32 0, i32 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = lshr i64 %8, 7
  %14 = ptrtoint i8* %10 to i64
  %15 = lshr i64 %14, 12
  %16 = xor i64 %15, %13
  %17 = trunc i64 %8 to i8
  %18 = and i8 %17, 127
  %19 = insertelement <16 x i8> undef, i8 %18, i32 0
  %20 = shufflevector <16 x i8> %19, <16 x i8> undef, <16 x i32> zeroinitializer
  %21 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 7, i32 0, i32 0, i32 1
  br label %22

22:                                               ; preds = %52, %3
  %23 = phi i64 [ %16, %3 ], [ %54, %52 ]
  %24 = phi i64 [ 0, %3 ], [ %53, %52 ]
  %25 = and i64 %23, %12
  %26 = getelementptr inbounds i8, i8* %10, i64 %25
  %27 = bitcast i8* %26 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = icmp eq <16 x i8> %20, %28
  %30 = bitcast <16 x i1> %29 to i16
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %48, label %32

32:                                               ; preds = %22
  %33 = zext i16 %30 to i32
  %34 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %21, align 8
  br label %35

35:                                               ; preds = %44, %32
  %36 = phi i32 [ %33, %32 ], [ %46, %44 ]
  %37 = tail call i32 @llvm.cttz.i32(i32 %36, i1 false) #12, !range !3
  %38 = zext i32 %37 to i64
  %39 = add i64 %25, %38
  %40 = and i64 %39, %12
  %41 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %34, i64 %40
  %42 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %41, i64 0, i32 0, i32 0
  %43 = tail call zeroext i1 @_ZN2sheqERKNS_9SpirvTypeES2_(%"struct.sh::SpirvType"* dereferenceable(48) %42, %"struct.sh::SpirvType"* dereferenceable(48) %1) #12
  br i1 %43, label %55, label %44, !prof !4

44:                                               ; preds = %35
  %45 = add i32 %36, -1
  %46 = and i32 %45, %36
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %35

48:                                               ; preds = %44, %22
  %49 = icmp eq <16 x i8> %28, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %50 = bitcast <16 x i1> %49 to i16
  %51 = icmp eq i16 %50, 0
  br i1 %51, label %52, label %61, !prof !5

52:                                               ; preds = %48
  %53 = add i64 %24, 16
  %54 = add i64 %53, %25
  br label %22

55:                                               ; preds = %35
  %56 = getelementptr inbounds i8, i8* %10, i64 %40
  %57 = icmp ne i8* %56, null
  tail call void @llvm.assume(i1 %57) #12
  %58 = load i8, i8* %56, align 1
  %59 = icmp sgt i8 %58, -1
  br i1 %59, label %110, label %60, !prof !4

60:                                               ; preds = %55
  tail call void @llvm.trap() #12
  unreachable

61:                                               ; preds = %48
  %62 = tail call { i64, i32 } @_ZN2sh12SPIRVBuilder11declareTypeERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* dereferenceable(48) %1, i8* %2)
  %63 = extractvalue { i64, i32 } %62, 0
  %64 = extractvalue { i64, i32 } %62, 1
  %65 = bitcast %"struct.std::__1::pair.23"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %65) #12
  %66 = bitcast %"struct.sh::SpirvType"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %65, i8* align 8 %66, i64 24, i1 false) #12
  %67 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %4, i64 0, i32 0, i32 7
  %68 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 7
  %69 = bitcast %"class.sh::TSpan"* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8
  %71 = bitcast %"class.sh::TSpan"* %67 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %71, align 8
  %72 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %4, i64 0, i32 0, i32 8
  %73 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 8
  %74 = bitcast i32* %72 to i8*
  %75 = bitcast i32* %73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 5, i1 false) #12
  %76 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %4, i64 0, i32 1
  %77 = bitcast %"struct.sh::SpirvTypeData"* %76 to i64*
  store i64 %63, i64* %77, align 8
  %78 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %4, i64 0, i32 1, i32 2
  store i32 %64, i32* %78, align 8
  %79 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %4, i64 0, i32 0
  %80 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE22find_or_prepare_insertIS4_EENSC_ImbEERKT_(%"class.absl::container_internal::raw_hash_set"* %5, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %79) #12, !noalias !6
  %81 = extractvalue { i64, i8 } %80, 0
  %82 = extractvalue { i64, i8 } %80, 1
  %83 = and i8 %82, 1
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %101, label %85

85:                                               ; preds = %61
  %86 = bitcast %"class.sh::TSpan"* %67 to i64*
  %87 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %4, i64 0, i32 0, i32 7, i32 1
  %88 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %21, align 8, !noalias !6
  %89 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %88, i64 %81
  %90 = bitcast %"struct.sh::SpirvTypeData"* %76 to i8*
  %91 = bitcast %"union.absl::container_internal::map_slot_type"* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* nonnull align 8 %65, i64 24, i1 false) #12, !noalias !6
  %92 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %88, i64 %81, i32 0, i32 0, i32 7
  %93 = load i64, i64* %86, align 8, !noalias !6
  %94 = bitcast %"class.sh::TSpan"* %92 to i64*
  store i64 %93, i64* %94, align 8, !noalias !6
  %95 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %88, i64 %81, i32 0, i32 0, i32 7, i32 1
  %96 = load i64, i64* %87, align 8, !noalias !6
  store i64 %96, i64* %95, align 8, !noalias !6
  %97 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %88, i64 %81, i32 0, i32 0, i32 8
  %98 = bitcast i32* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %74, i64 5, i1 false) #12, !noalias !6
  %99 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %88, i64 %81, i32 0, i32 1
  %100 = bitcast %"struct.sh::SpirvTypeData"* %99 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %90, i64 12, i1 false) #12, !noalias !6
  br label %101

101:                                              ; preds = %85, %61
  %102 = load i8*, i8** %9, align 8, !noalias !6
  %103 = getelementptr inbounds i8, i8* %102, i64 %81
  %104 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %21, align 8, !noalias !6
  %105 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %104, i64 %81
  %106 = icmp ne i8* %103, null
  call void @llvm.assume(i1 %106) #12, !noalias !6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %65) #12
  %107 = load i8, i8* %103, align 1
  %108 = icmp sgt i8 %107, -1
  br i1 %108, label %110, label %109, !prof !4

109:                                              ; preds = %101
  call void @llvm.trap() #12
  unreachable

110:                                              ; preds = %55, %101
  %111 = phi %"union.absl::container_internal::map_slot_type"* [ %105, %101 ], [ %41, %55 ]
  %112 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %111, i64 0, i32 0, i32 1
  ret %"struct.sh::SpirvTypeData"* %112
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i32 } @_ZN2sh12SPIRVBuilder11declareTypeERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"*, %"struct.sh::SpirvType"* dereferenceable(48), i8*) local_unnamed_addr #1 align 2 {
  %4 = alloca %"struct.sh::SpirvType", align 8
  %5 = alloca %"class.angle::FastVector", align 8
  %6 = alloca %"struct.sh::SpirvType", align 8
  %7 = alloca %"class.angle::spirv::BoxedUint32", align 4
  %8 = alloca i32, align 4
  %9 = alloca %"class.angle::spirv::BoxedUint32.104", align 4
  %10 = alloca %"class.angle::spirv::BoxedUint32.104", align 4
  %11 = alloca %"class.angle::spirv::BoxedUint32.104", align 4
  %12 = alloca %"class.angle::spirv::BoxedUint32.104", align 4
  %13 = alloca %"struct.sh::SpirvType", align 8
  %14 = alloca %"struct.sh::SpirvType", align 8
  %15 = alloca i32, align 4
  %16 = alloca %"class.angle::FastVector.105", align 8
  %17 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 7
  %18 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 7, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %61, label %21

21:                                               ; preds = %3
  %22 = bitcast %"struct.sh::SpirvType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %22) #12
  %23 = bitcast %"struct.sh::SpirvType"* %1 to i8*
  %24 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 7
  %25 = bitcast %"class.sh::TSpan"* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 %23, i64 24, i1 false) #12
  %26 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 7
  %27 = bitcast %"class.sh::TSpan"* %17 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.sh::TSpan"* %26 to i64*
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 7, i32 1
  store i64 %19, i64* %30, align 8
  %31 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 8
  %32 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 8
  %33 = bitcast i32* %31 to i8*
  %34 = bitcast i32* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 5, i1 false) #12
  %35 = add i64 %19, -1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %38, label %37

37:                                               ; preds = %21
  store i64 %28, i64* %29, align 8
  store i64 %35, i64* %30, align 8
  br label %45

38:                                               ; preds = %21
  %39 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 0
  %40 = bitcast %"class.sh::TSpan"* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 16, i1 false)
  %41 = load %"class.sh::TFieldListCollection"*, %"class.sh::TFieldListCollection"** %39, align 8
  %42 = icmp eq %"class.sh::TFieldListCollection"* %41, null
  br i1 %42, label %43, label %45

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 1
  store i32 0, i32* %44, align 8
  br label %45

45:                                               ; preds = %37, %43, %38
  %46 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %47 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %46, i64 0, i32 0, i32 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"class.sh::TSpan", %"class.sh::TSpan"* %17, i64 0, i32 0
  %50 = load i32*, i32** %49, align 8
  %51 = load i64, i64* %18, align 8
  %52 = add i64 %51, -1
  %53 = getelementptr inbounds i32, i32* %50, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 16
  %56 = call i32 @_ZN2sh12SPIRVBuilder22getBasicConstantHelperEjNS_10TBasicTypeEPN4absl13flat_hash_mapIjN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEENS2_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS8_EEEEEE(%"class.sh::SPIRVBuilder"* %0, i32 %54, i32 4, %"class.absl::flat_hash_map.39"* %55) #12
  %57 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %58, 1
  store i32 %59, i32* %57, align 4
  %60 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  call void @_ZN5angle5spirv14WriteTypeArrayEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_S9_(%"class.std::__1::vector.32"* %60, i32 %58, i32 %48, i32 %56) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %22) #12
  br label %298

61:                                               ; preds = %3
  %62 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 0
  %63 = load %"class.sh::TFieldListCollection"*, %"class.sh::TFieldListCollection"** %62, align 8
  %64 = icmp eq %"class.sh::TFieldListCollection"* %63, null
  br i1 %64, label %151, label %65

65:                                               ; preds = %61
  %66 = bitcast %"class.angle::FastVector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %66) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %66, i8 0, i64 32, i1 false) #12
  %67 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 1
  %68 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %68, %"class.angle::spirv::BoxedUint32"** %67, align 8
  %69 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 2
  %70 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 3
  %71 = bitcast i64* %69 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %71, align 8
  %72 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %63, i64 0, i32 0
  %73 = load %"class.sh::TVector"*, %"class.sh::TVector"** %72, align 8
  %74 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %73, i64 0, i32 0, i32 0, i32 0
  %75 = load %"class.sh::TField"**, %"class.sh::TField"*** %74, align 8
  %76 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %73, i64 0, i32 0, i32 0, i32 1
  %77 = load %"class.sh::TField"**, %"class.sh::TField"*** %76, align 8
  %78 = icmp eq %"class.sh::TField"** %75, %77
  br i1 %78, label %82, label %79

79:                                               ; preds = %65
  %80 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 1
  %81 = bitcast %"class.angle::spirv::BoxedUint32"** %67 to i8**
  br label %94

82:                                               ; preds = %144, %65
  %83 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = add i32 %84, 1
  store i32 %85, i32* %83, align 4
  %86 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  call void @_ZN5angle5spirv15WriteTypeStructEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEERKNS_10FastVectorIS9_Lm8ENS1_5arrayIS9_Lm8EEEEE(%"class.std::__1::vector.32"* %86, i32 %84, %"class.angle::FastVector"* nonnull dereferenceable(56) %5) #12
  store i64 0, i64* %69, align 8
  %87 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %67, align 8
  %88 = icmp eq %"class.angle::spirv::BoxedUint32"* %87, %68
  %89 = icmp eq %"class.angle::spirv::BoxedUint32"* %87, null
  %90 = or i1 %88, %89
  br i1 %90, label %93, label %91

91:                                               ; preds = %82
  %92 = bitcast %"class.angle::spirv::BoxedUint32"* %87 to i8*
  call void @_ZdaPv(i8* %92) #17
  br label %93

93:                                               ; preds = %82, %91
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %66) #12
  br label %298

94:                                               ; preds = %79, %144
  %95 = phi %"class.sh::TField"** [ %75, %79 ], [ %149, %144 ]
  %96 = load %"class.sh::TField"*, %"class.sh::TField"** %95, align 8
  %97 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %96, i64 0, i32 0
  %98 = load %"class.sh::TType"*, %"class.sh::TType"** %97, align 8
  %99 = load i32, i32* %80, align 8
  %100 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder11getTypeDataERKNS_5TTypeENS_19TLayoutBlockStorageE(%"class.sh::SPIRVBuilder"* %0, %"class.sh::TType"* dereferenceable(184) %98, i32 %99)
  %101 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %100, i64 0, i32 0, i32 0, i32 0
  %102 = load i32, i32* %101, align 4
  %103 = load i64, i64* %69, align 8
  %104 = load i64, i64* %70, align 8
  %105 = icmp eq i64 %103, %104
  br i1 %105, label %106, label %144

106:                                              ; preds = %94
  %107 = add i64 %103, 1
  %108 = icmp eq i64 %103, -1
  br i1 %108, label %144, label %109

109:                                              ; preds = %106
  %110 = icmp ugt i64 %103, 8
  %111 = select i1 %110, i64 %103, i64 8
  br label %112

112:                                              ; preds = %112, %109
  %113 = phi i64 [ %111, %109 ], [ %115, %112 ]
  %114 = icmp ult i64 %113, %107
  %115 = shl i64 %113, 1
  br i1 %114, label %112, label %116

116:                                              ; preds = %112
  %117 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %113, i64 4) #12
  %118 = extractvalue { i64, i1 } %117, 1
  %119 = extractvalue { i64, i1 } %117, 0
  %120 = select i1 %118, i64 -1, i64 %119
  %121 = call i8* @_Znam(i64 %120) #17
  %122 = icmp eq i64 %113, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %116
  %124 = shl nsw i64 %113, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %121, i8 0, i64 %124, i1 false) #12
  br label %125

125:                                              ; preds = %123, %116
  %126 = icmp eq i64 %103, 0
  br i1 %126, label %127, label %130

127:                                              ; preds = %125
  %128 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %67, align 8
  %129 = bitcast %"class.angle::spirv::BoxedUint32"* %128 to i8*
  br label %134

130:                                              ; preds = %125
  %131 = shl nuw i64 %103, 2
  %132 = load i8*, i8** %81, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %121, i8* align 4 %132, i64 %131, i1 false) #12
  %133 = bitcast i8* %132 to %"class.angle::spirv::BoxedUint32"*
  br label %134

134:                                              ; preds = %130, %127
  %135 = phi i8* [ %129, %127 ], [ %132, %130 ]
  %136 = phi %"class.angle::spirv::BoxedUint32"* [ %128, %127 ], [ %133, %130 ]
  %137 = icmp eq %"class.angle::spirv::BoxedUint32"* %136, %68
  %138 = icmp eq %"class.angle::spirv::BoxedUint32"* %136, null
  %139 = or i1 %137, %138
  br i1 %139, label %142, label %140

140:                                              ; preds = %134
  call void @_ZdaPv(i8* %135) #17
  %141 = load i64, i64* %69, align 8
  br label %142

142:                                              ; preds = %140, %134
  %143 = phi i64 [ %141, %140 ], [ %103, %134 ]
  store i8* %121, i8** %81, align 8
  store i64 %113, i64* %70, align 8
  br label %144

144:                                              ; preds = %94, %106, %142
  %145 = phi i64 [ %143, %142 ], [ -1, %106 ], [ %103, %94 ]
  %146 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %67, align 8
  %147 = add i64 %145, 1
  store i64 %147, i64* %69, align 8
  %148 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %146, i64 %145, i32 0, i32 0
  store i32 %102, i32* %148, align 4
  %149 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %95, i64 1
  %150 = icmp eq %"class.sh::TField"** %149, %77
  br i1 %150, label %82, label %94

151:                                              ; preds = %61
  %152 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 2
  %153 = load i32, i32* %152, align 4
  %154 = add i32 %153, -8
  %155 = icmp ult i32 %154, 43
  br i1 %155, label %156, label %183

156:                                              ; preds = %151
  %157 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 9
  %158 = load i8, i8* %157, align 4, !range !2
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %160, label %190

160:                                              ; preds = %156
  %161 = bitcast %"struct.sh::SpirvType"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %161) #12
  %162 = bitcast %"struct.sh::SpirvType"* %1 to i8*
  %163 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %6, i64 0, i32 7
  %164 = bitcast %"class.sh::TSpan"* %163 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %164, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %161, i8* align 8 %162, i64 24, i1 false) #12
  %165 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %6, i64 0, i32 7
  %166 = bitcast %"class.sh::TSpan"* %17 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = bitcast %"class.sh::TSpan"* %165 to i64*
  store i64 %167, i64* %168, align 8
  %169 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %6, i64 0, i32 7, i32 1
  store i64 0, i64* %169, align 8
  %170 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %6, i64 0, i32 8
  %171 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 8
  %172 = bitcast i32* %170 to i8*
  %173 = bitcast i32* %171 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 5, i1 false) #12
  %174 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %6, i64 0, i32 9
  store i8 1, i8* %174, align 4
  %175 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %6, i64 0, i32 1
  store i32 0, i32* %175, align 8
  %176 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %177 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %176, i64 0, i32 0, i32 0, i32 0
  %178 = load i32, i32* %177, align 4
  %179 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %180 = load i32, i32* %179, align 4
  %181 = add i32 %180, 1
  store i32 %181, i32* %179, align 4
  %182 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  call void @_ZN5angle5spirv21WriteTypeSampledImageEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_(%"class.std::__1::vector.32"* %182, i32 %180, i32 %178) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %161) #12
  br label %298

183:                                              ; preds = %151
  %184 = add i32 %153, -51
  %185 = icmp ult i32 %184, 33
  br i1 %185, label %190, label %186

186:                                              ; preds = %183
  %187 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 9
  %188 = load i8, i8* %187, align 4, !range !2
  %189 = icmp eq i8 %188, 0
  br i1 %189, label %222, label %190

190:                                              ; preds = %156, %186, %183
  %191 = bitcast %"class.angle::spirv::BoxedUint32"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %191) #12
  %192 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %7, i64 0, i32 0, i32 0
  store i32 0, i32* %192, align 4
  %193 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %193) #12
  store i32 -1431655766, i32* %8, align 4
  %194 = bitcast %"class.angle::spirv::BoxedUint32.104"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %194) #12
  %195 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.104", %"class.angle::spirv::BoxedUint32.104"* %9, i64 0, i32 0, i32 0
  store i32 0, i32* %195, align 4
  %196 = bitcast %"class.angle::spirv::BoxedUint32.104"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %196) #12
  %197 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.104", %"class.angle::spirv::BoxedUint32.104"* %10, i64 0, i32 0, i32 0
  store i32 0, i32* %197, align 4
  %198 = bitcast %"class.angle::spirv::BoxedUint32.104"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %198) #12
  %199 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.104", %"class.angle::spirv::BoxedUint32.104"* %11, i64 0, i32 0, i32 0
  store i32 0, i32* %199, align 4
  %200 = bitcast %"class.angle::spirv::BoxedUint32.104"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %200) #12
  %201 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.104", %"class.angle::spirv::BoxedUint32.104"* %12, i64 0, i32 0, i32 0
  store i32 0, i32* %201, align 4
  call void @_ZN2sh12SPIRVBuilder22getImageTypeParametersENS_10TBasicTypeEPN5angle5spirv11BoxedUint32INS3_11IdRefHelperEEEPN3spv3DimEPNS4_INS3_20LiteralIntegerHelperEEESD_SD_SD_(%"class.sh::SPIRVBuilder"* %0, i32 %153, %"class.angle::spirv::BoxedUint32"* nonnull %7, i32* nonnull %8, %"class.angle::spirv::BoxedUint32.104"* nonnull %9, %"class.angle::spirv::BoxedUint32.104"* nonnull %10, %"class.angle::spirv::BoxedUint32.104"* nonnull %11, %"class.angle::spirv::BoxedUint32.104"* nonnull %12)
  %202 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 8
  %203 = load i32, i32* %202, align 8
  %204 = add i32 %203, -1
  %205 = icmp ult i32 %204, 13
  br i1 %205, label %206, label %210

206:                                              ; preds = %190
  %207 = sext i32 %204 to i64
  %208 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZN2sh12SPIRVBuilder14getImageFormatENS_26TLayoutImageInternalFormatE, i64 0, i64 %207
  %209 = load i32, i32* %208, align 4
  br label %210

210:                                              ; preds = %206, %190
  %211 = phi i32 [ 0, %190 ], [ %209, %206 ]
  %212 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %213 = load i32, i32* %212, align 4
  %214 = add i32 %213, 1
  store i32 %214, i32* %212, align 4
  %215 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  %216 = load i32, i32* %192, align 4
  %217 = load i32, i32* %8, align 4
  %218 = load i32, i32* %195, align 4
  %219 = load i32, i32* %197, align 4
  %220 = load i32, i32* %199, align 4
  %221 = load i32, i32* %201, align 4
  call void @_ZN5angle5spirv14WriteTypeImageEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_N3spv3DimENS7_INS0_20LiteralIntegerHelperEEESD_SD_SD_NSA_11ImageFormatEPKNSA_15AccessQualifierE(%"class.std::__1::vector.32"* %215, i32 %213, i32 %216, i32 %217, i32 %218, i32 %219, i32 %220, i32 %221, i32 %211, i32* null) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %200) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %198) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %196) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %194) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %193) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %191) #12
  br label %298

222:                                              ; preds = %186
  %223 = add i32 %153, -84
  %224 = icmp ult i32 %223, 6
  br i1 %224, label %298, label %225

225:                                              ; preds = %222
  %226 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 4
  %227 = load i8, i8* %226, align 1
  %228 = icmp ugt i8 %227, 1
  br i1 %228, label %229, label %254

229:                                              ; preds = %225
  %230 = bitcast %"struct.sh::SpirvType"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %230) #12
  %231 = bitcast %"struct.sh::SpirvType"* %1 to i8*
  %232 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %13, i64 0, i32 7
  %233 = bitcast %"class.sh::TSpan"* %232 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %233, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %230, i8* align 8 %231, i64 24, i1 false) #12
  %234 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %13, i64 0, i32 7
  %235 = bitcast %"class.sh::TSpan"* %17 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = bitcast %"class.sh::TSpan"* %234 to i64*
  store i64 %236, i64* %237, align 8
  %238 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %13, i64 0, i32 7, i32 1
  store i64 0, i64* %238, align 8
  %239 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %13, i64 0, i32 8
  %240 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 8
  %241 = bitcast i32* %239 to i8*
  %242 = bitcast i32* %240 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %241, i8* align 8 %242, i64 5, i1 false) #12
  %243 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %13, i64 0, i32 4
  store i8 1, i8* %243, align 1
  %244 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %13, i64 0, i32 1
  store i32 0, i32* %244, align 8
  %245 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %246 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %245, i64 0, i32 0, i32 0, i32 0
  %247 = load i32, i32* %246, align 4
  %248 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %249 = load i32, i32* %248, align 4
  %250 = add i32 %249, 1
  store i32 %250, i32* %248, align 4
  %251 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  %252 = load i8, i8* %226, align 1
  %253 = zext i8 %252 to i32
  call void @_ZN5angle5spirv15WriteTypeMatrixEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_NS7_INS0_20LiteralIntegerHelperEEE(%"class.std::__1::vector.32"* %251, i32 %249, i32 %247, i32 %253) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %230) #12
  br label %298

254:                                              ; preds = %225
  %255 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 3
  %256 = load i8, i8* %255, align 8
  %257 = icmp ugt i8 %256, 1
  br i1 %257, label %258, label %283

258:                                              ; preds = %254
  %259 = bitcast %"struct.sh::SpirvType"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %259) #12
  %260 = bitcast %"struct.sh::SpirvType"* %1 to i8*
  %261 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %14, i64 0, i32 7
  %262 = bitcast %"class.sh::TSpan"* %261 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %262, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %259, i8* align 8 %260, i64 24, i1 false) #12
  %263 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %14, i64 0, i32 7
  %264 = bitcast %"class.sh::TSpan"* %17 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast %"class.sh::TSpan"* %263 to i64*
  store i64 %265, i64* %266, align 8
  %267 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %14, i64 0, i32 7, i32 1
  store i64 0, i64* %267, align 8
  %268 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %14, i64 0, i32 8
  %269 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 8
  %270 = bitcast i32* %268 to i8*
  %271 = bitcast i32* %269 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %270, i8* align 8 %271, i64 5, i1 false) #12
  %272 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %14, i64 0, i32 3
  store i8 1, i8* %272, align 8
  %273 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %14, i64 0, i32 1
  store i32 0, i32* %273, align 8
  %274 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %14, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %275 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %274, i64 0, i32 0, i32 0, i32 0
  %276 = load i32, i32* %275, align 4
  %277 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %278 = load i32, i32* %277, align 4
  %279 = add i32 %278, 1
  store i32 %279, i32* %277, align 4
  %280 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  %281 = load i8, i8* %255, align 8
  %282 = zext i8 %281 to i32
  call void @_ZN5angle5spirv15WriteTypeVectorEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_NS7_INS0_20LiteralIntegerHelperEEE(%"class.std::__1::vector.32"* %280, i32 %278, i32 %276, i32 %282) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %259) #12
  br label %298

283:                                              ; preds = %254
  %284 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %285 = load i32, i32* %284, align 4
  %286 = add i32 %285, 1
  store i32 %286, i32* %284, align 4
  %287 = load i32, i32* %152, align 4
  switch i32 %287, label %298 [
    i32 0, label %288
    i32 1, label %290
    i32 5, label %296
    i32 3, label %292
    i32 4, label %294
  ]

288:                                              ; preds = %283
  %289 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  tail call void @_ZN5angle5spirv13WriteTypeVoidEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEE(%"class.std::__1::vector.32"* %289, i32 %285) #12
  br label %298

290:                                              ; preds = %283
  %291 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  tail call void @_ZN5angle5spirv14WriteTypeFloatEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEENS7_INS0_20LiteralIntegerHelperEEE(%"class.std::__1::vector.32"* %291, i32 %285, i32 32) #12
  br label %298

292:                                              ; preds = %283
  %293 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  tail call void @_ZN5angle5spirv12WriteTypeIntEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEENS7_INS0_20LiteralIntegerHelperEEESB_(%"class.std::__1::vector.32"* %293, i32 %285, i32 32, i32 1) #12
  br label %298

294:                                              ; preds = %283
  %295 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  tail call void @_ZN5angle5spirv12WriteTypeIntEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEENS7_INS0_20LiteralIntegerHelperEEESB_(%"class.std::__1::vector.32"* %295, i32 %285, i32 32, i32 0) #12
  br label %298

296:                                              ; preds = %283
  %297 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  tail call void @_ZN5angle5spirv13WriteTypeBoolEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEE(%"class.std::__1::vector.32"* %297, i32 %285) #12
  br label %298

298:                                              ; preds = %93, %210, %229, %288, %290, %292, %294, %296, %283, %258, %222, %160, %45
  %299 = phi i32 [ %180, %160 ], [ %213, %210 ], [ 0, %222 ], [ %249, %229 ], [ %278, %258 ], [ %285, %283 ], [ %285, %294 ], [ %285, %292 ], [ %285, %296 ], [ %285, %290 ], [ %285, %288 ], [ %84, %93 ], [ %58, %45 ]
  %300 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 0
  %301 = load %"class.sh::TFieldListCollection"*, %"class.sh::TFieldListCollection"** %300, align 8
  %302 = icmp eq %"class.sh::TFieldListCollection"* %301, null
  br i1 %302, label %324, label %303

303:                                              ; preds = %298
  %304 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 9
  call void @_ZN5angle5spirv9WriteNameEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEPKc(%"class.std::__1::vector.32"* %304, i32 %299, i8* %2) #12
  %305 = load %"class.sh::TFieldListCollection"*, %"class.sh::TFieldListCollection"** %300, align 8
  %306 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %305, i64 0, i32 0
  %307 = load %"class.sh::TVector"*, %"class.sh::TVector"** %306, align 8
  %308 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %307, i64 0, i32 0, i32 0, i32 0
  %309 = load %"class.sh::TField"**, %"class.sh::TField"*** %308, align 8
  %310 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %307, i64 0, i32 0, i32 0, i32 1
  %311 = load %"class.sh::TField"**, %"class.sh::TField"*** %310, align 8
  %312 = icmp eq %"class.sh::TField"** %309, %311
  br i1 %312, label %324, label %313

313:                                              ; preds = %303, %313
  %314 = phi i32 [ %317, %313 ], [ 0, %303 ]
  %315 = phi %"class.sh::TField"** [ %322, %313 ], [ %309, %303 ]
  %316 = load %"class.sh::TField"*, %"class.sh::TField"** %315, align 8
  %317 = add i32 %314, 1
  %318 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %316, i64 0, i32 1, i32 0
  %319 = load i8*, i8** %318, align 8
  %320 = icmp eq i8* %319, null
  %321 = select i1 %320, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %319
  call void @_ZN5angle5spirv15WriteMemberNameEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEENS7_INS0_20LiteralIntegerHelperEEEPKc(%"class.std::__1::vector.32"* %304, i32 %299, i32 %314, i8* %321) #12
  %322 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %315, i64 1
  %323 = icmp eq %"class.sh::TField"** %322, %311
  br i1 %323, label %324, label %313

324:                                              ; preds = %313, %303, %298
  %325 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %325) #12
  store i32 0, i32* %15, align 4
  %326 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 2
  %327 = load i32, i32* %326, align 4
  %328 = add i32 %327, -8
  %329 = icmp ult i32 %328, 43
  %330 = add i32 %327, -51
  %331 = icmp ult i32 %330, 33
  %332 = or i1 %329, %331
  %333 = icmp eq i32 %327, 6
  %334 = or i1 %333, %332
  %335 = add i32 %327, -84
  %336 = icmp ult i32 %335, 6
  %337 = or i1 %336, %334
  br i1 %337, label %342, label %338

338:                                              ; preds = %324
  %339 = call i32 @_ZN2sh12SPIRVBuilder29calculateBaseAlignmentAndSizeERKNS_9SpirvTypeEPj(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* dereferenceable(48) %1, i32* nonnull %15)
  %340 = zext i32 %339 to i64
  %341 = shl nuw i64 %340, 32
  br label %342

342:                                              ; preds = %324, %338
  %343 = phi i1 [ false, %338 ], [ true, %324 ]
  %344 = phi i64 [ %341, %338 ], [ 17179869184, %324 ]
  %345 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 1
  %346 = load i32, i32* %345, align 8
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %374, label %348

348:                                              ; preds = %342
  %349 = load i64, i64* %18, align 8
  %350 = icmp eq i64 %349, 0
  br i1 %343, label %368, label %351

351:                                              ; preds = %348
  br i1 %350, label %369, label %352

352:                                              ; preds = %351
  %353 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 10
  %354 = bitcast %"class.angle::FastVector.105"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %354) #12
  %355 = load i32, i32* %15, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %354, i8 0, i64 32, i1 false) #12
  %356 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %16, i64 0, i32 1
  %357 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %16, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32.104"* %357, %"class.angle::spirv::BoxedUint32.104"** %356, align 8
  %358 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %16, i64 0, i32 2
  %359 = bitcast i64* %358 to <2 x i64>*
  store <2 x i64> <i64 1, i64 8>, <2 x i64>* %359, align 8
  %360 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %16, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  store i32 %355, i32* %360, align 8
  call void @_ZN5angle5spirv13WriteDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv10DecorationERKNS_10FastVectorINS7_INS0_20LiteralIntegerHelperEEELm8ENS1_5arrayISE_Lm8EEEEE(%"class.std::__1::vector.32"* %353, i32 %299, i32 6, %"class.angle::FastVector.105"* nonnull dereferenceable(56) %16) #12
  store i64 0, i64* %358, align 8
  %361 = load %"class.angle::spirv::BoxedUint32.104"*, %"class.angle::spirv::BoxedUint32.104"** %356, align 8
  %362 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %361, %357
  %363 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %361, null
  %364 = or i1 %362, %363
  br i1 %364, label %367, label %365

365:                                              ; preds = %352
  %366 = bitcast %"class.angle::spirv::BoxedUint32.104"* %361 to i8*
  call void @_ZdaPv(i8* %366) #17
  br label %367

367:                                              ; preds = %352, %365
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %354) #12
  br label %374

368:                                              ; preds = %348
  br i1 %350, label %369, label %374

369:                                              ; preds = %351, %368
  %370 = load %"class.sh::TFieldListCollection"*, %"class.sh::TFieldListCollection"** %300, align 8
  %371 = icmp eq %"class.sh::TFieldListCollection"* %370, null
  br i1 %371, label %374, label %372

372:                                              ; preds = %369
  %373 = call i32 @_ZN2sh12SPIRVBuilder38calculateSizeAndWriteOffsetDecorationsERKNS_9SpirvTypeEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* dereferenceable(48) %1, i32 %299)
  store i32 %373, i32* %15, align 4
  br label %374

374:                                              ; preds = %369, %342, %367, %372, %368
  %375 = load i32, i32* %15, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %325) #12
  %376 = zext i32 %299 to i64
  %377 = or i64 %344, %376
  %378 = insertvalue { i64, i32 } undef, i64 %377, 0
  %379 = insertvalue { i64, i32 } %378, i32 %375, 1
  ret { i64, i32 } %379
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder16getTypePointerIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEEN3spv12StorageClassE(%"class.sh::SPIRVBuilder"*, i32, i32) local_unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 20, i32 0, i32 0
  %5 = shl i32 %1, 4
  %6 = or i32 %5, %2
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %4, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 20, i32 0, i32 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = lshr i32 %6, 7
  %12 = zext i32 %11 to i64
  %13 = ptrtoint i8* %8 to i64
  %14 = lshr i64 %13, 12
  %15 = xor i64 %14, %12
  %16 = trunc i32 %6 to i8
  %17 = and i8 %16, 127
  %18 = insertelement <16 x i8> undef, i8 %17, i32 0
  %19 = shufflevector <16 x i8> %18, <16 x i8> undef, <16 x i32> zeroinitializer
  %20 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 20, i32 0, i32 0, i32 1
  br label %21

21:                                               ; preds = %56, %3
  %22 = phi i64 [ %15, %3 ], [ %58, %56 ]
  %23 = phi i64 [ 0, %3 ], [ %57, %56 ]
  %24 = and i64 %22, %10
  %25 = getelementptr inbounds i8, i8* %8, i64 %24
  %26 = bitcast i8* %25 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = icmp eq <16 x i8> %19, %27
  %29 = bitcast <16 x i1> %28 to i16
  %30 = icmp eq i16 %29, 0
  br i1 %30, label %52, label %31

31:                                               ; preds = %21
  %32 = zext i16 %29 to i32
  %33 = load %"union.absl::container_internal::map_slot_type.74"*, %"union.absl::container_internal::map_slot_type.74"** %20, align 8
  br label %34

34:                                               ; preds = %48, %31
  %35 = phi i32 [ %32, %31 ], [ %50, %48 ]
  %36 = tail call i32 @llvm.cttz.i32(i32 %35, i1 false) #12, !range !3
  %37 = zext i32 %36 to i64
  %38 = add i64 %24, %37
  %39 = and i64 %38, %10
  %40 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %33, i64 %39
  %41 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, %1
  br i1 %43, label %44, label %48, !prof !21

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %33, i64 %39, i32 0, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, %2
  br i1 %47, label %59, label %48, !prof !4

48:                                               ; preds = %44, %34
  %49 = add i32 %35, -1
  %50 = and i32 %49, %35
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %34

52:                                               ; preds = %48, %21
  %53 = icmp eq <16 x i8> %27, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %54 = bitcast <16 x i1> %53 to i16
  %55 = icmp eq i16 %54, 0
  br i1 %55, label %56, label %65, !prof !5

56:                                               ; preds = %52
  %57 = add i64 %23, 16
  %58 = add i64 %57, %24
  br label %21

59:                                               ; preds = %44
  %60 = getelementptr inbounds i8, i8* %8, i64 %39
  %61 = icmp ne i8* %60, null
  tail call void @llvm.assume(i1 %61) #12
  %62 = load i8, i8* %60, align 1
  %63 = icmp sgt i8 %62, -1
  br i1 %63, label %136, label %64, !prof !4

64:                                               ; preds = %59
  tail call void @llvm.trap() #12
  unreachable

65:                                               ; preds = %52
  %66 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = add i32 %67, 1
  store i32 %68, i32* %66, align 4
  %69 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 12
  tail call void @_ZN5angle5spirv16WriteTypePointerEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv12StorageClassES9_(%"class.std::__1::vector.32"* %69, i32 %67, i32 %2, i32 %1) #12
  %70 = zext i32 %6 to i64
  %71 = load i8*, i8** %7, align 8, !noalias !22
  %72 = load i64, i64* %9, align 8, !noalias !22
  %73 = lshr i64 %70, 7
  %74 = ptrtoint i8* %71 to i64
  %75 = lshr i64 %74, 12
  %76 = xor i64 %75, %73
  br label %77

77:                                               ; preds = %111, %65
  %78 = phi i64 [ %76, %65 ], [ %113, %111 ]
  %79 = phi i64 [ 0, %65 ], [ %112, %111 ]
  %80 = and i64 %78, %72
  %81 = getelementptr inbounds i8, i8* %71, i64 %80
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1, !noalias !22
  %84 = icmp eq <16 x i8> %19, %83
  %85 = bitcast <16 x i1> %84 to i16
  %86 = icmp eq i16 %85, 0
  br i1 %86, label %107, label %87

87:                                               ; preds = %77
  %88 = zext i16 %85 to i32
  %89 = load %"union.absl::container_internal::map_slot_type.74"*, %"union.absl::container_internal::map_slot_type.74"** %20, align 8, !noalias !22
  br label %90

90:                                               ; preds = %103, %87
  %91 = phi i32 [ %88, %87 ], [ %105, %103 ]
  %92 = tail call i32 @llvm.cttz.i32(i32 %91, i1 false) #12, !range !3
  %93 = zext i32 %92 to i64
  %94 = add i64 %80, %93
  %95 = and i64 %94, %72
  %96 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %89, i64 %95, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = load i32, i32* %96, align 4, !noalias !22
  %98 = icmp eq i32 %97, %1
  br i1 %98, label %99, label %103, !prof !21

99:                                               ; preds = %90
  %100 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %89, i64 %95, i32 0, i32 0, i32 1
  %101 = load i32, i32* %100, align 4, !noalias !22
  %102 = icmp eq i32 %101, %2
  br i1 %102, label %126, label %103, !prof !4

103:                                              ; preds = %99, %90
  %104 = add i32 %91, -1
  %105 = and i32 %104, %91
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %90

107:                                              ; preds = %103, %77
  %108 = icmp eq <16 x i8> %83, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %109 = bitcast <16 x i1> %108 to i16
  %110 = icmp eq i16 %109, 0
  br i1 %110, label %111, label %114, !prof !5

111:                                              ; preds = %107
  %112 = add i64 %79, 16
  %113 = add i64 %112, %80
  br label %77

114:                                              ; preds = %107
  %115 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.73"* %4, i64 %70) #12, !noalias !22
  %116 = load %"union.absl::container_internal::map_slot_type.74"*, %"union.absl::container_internal::map_slot_type.74"** %20, align 8, !noalias !22
  %117 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %116, i64 %115
  %118 = bitcast %"union.absl::container_internal::map_slot_type.74"* %117 to i64*
  %119 = zext i32 %2 to i64
  %120 = shl nuw i64 %119, 32
  %121 = zext i32 %1 to i64
  %122 = or i64 %120, %121
  store i64 %122, i64* %118, align 4, !noalias !22
  %123 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %116, i64 %115, i32 0, i32 1, i32 0, i32 0
  store i32 %67, i32* %123, align 4, !noalias !22
  %124 = load i8*, i8** %7, align 8, !noalias !22
  %125 = load %"union.absl::container_internal::map_slot_type.74"*, %"union.absl::container_internal::map_slot_type.74"** %20, align 8, !noalias !22
  br label %126

126:                                              ; preds = %99, %114
  %127 = phi %"union.absl::container_internal::map_slot_type.74"* [ %125, %114 ], [ %89, %99 ]
  %128 = phi i8* [ %124, %114 ], [ %71, %99 ]
  %129 = phi i64 [ %115, %114 ], [ %95, %99 ]
  %130 = getelementptr inbounds i8, i8* %128, i64 %129
  %131 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %127, i64 %129
  %132 = icmp ne i8* %130, null
  tail call void @llvm.assume(i1 %132) #12, !noalias !22
  %133 = load i8, i8* %130, align 1
  %134 = icmp sgt i8 %133, -1
  br i1 %134, label %136, label %135, !prof !4

135:                                              ; preds = %126
  tail call void @llvm.trap() #12
  unreachable

136:                                              ; preds = %59, %126
  %137 = phi %"union.absl::container_internal::map_slot_type.74"* [ %131, %126 ], [ %40, %59 ]
  %138 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %137, i64 0, i32 0, i32 1, i32 0, i32 0
  %139 = load i32, i32* %138, align 4
  ret i32 %139
}

declare void @_ZN5angle5spirv16WriteTypePointerEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv12StorageClassES9_(%"class.std::__1::vector.32"*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder17getFunctionTypeIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEERKNS1_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(%"class.sh::SPIRVBuilder"*, i32, %"class.angle::FastVector"* dereferenceable(56)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"struct.sh::SpirvIdAndIdList", align 8
  %5 = alloca %"struct.std::__1::pair.60", align 8
  %6 = bitcast %"struct.sh::SpirvIdAndIdList"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #12
  %7 = bitcast %"struct.sh::SpirvIdAndIdList"* %4 to i64*
  store i64 -6148914691236517206, i64* %7, align 8
  %8 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 0, i32 0, i32 0
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 1
  %10 = bitcast %"class.angle::FastVector"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #12
  %11 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 1, i32 1
  %12 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %9, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %12, %"class.angle::spirv::BoxedUint32"** %11, align 8
  %13 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 1, i32 2
  %14 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 1, i32 3
  %15 = bitcast i64* %13 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %15, align 8
  %16 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %17, 8
  br i1 %18, label %19, label %34

19:                                               ; preds = %3, %19
  %20 = phi i64 [ %22, %19 ], [ 8, %3 ]
  %21 = icmp ult i64 %20, %17
  %22 = shl i64 %20, 1
  br i1 %21, label %19, label %23

23:                                               ; preds = %19
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %20, i64 4) #12
  %25 = extractvalue { i64, i1 } %24, 1
  %26 = extractvalue { i64, i1 } %24, 0
  %27 = select i1 %25, i64 -1, i64 %26
  %28 = call i8* @_Znam(i64 %27) #17
  %29 = icmp eq i64 %20, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %23
  %31 = shl nsw i64 %20, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %28, i8 0, i64 %31, i1 false) #12
  br label %32

32:                                               ; preds = %23, %30
  %33 = bitcast %"class.angle::spirv::BoxedUint32"** %11 to i8**
  store i8* %28, i8** %33, align 8
  store i64 %20, i64* %14, align 8
  store i64 %17, i64* %13, align 8
  br label %36

34:                                               ; preds = %3
  store i64 %17, i64* %13, align 8
  %35 = icmp eq i64 %17, 0
  br i1 %35, label %42, label %36

36:                                               ; preds = %32, %34
  %37 = phi i8* [ %28, %32 ], [ %10, %34 ]
  %38 = shl nuw i64 %17, 2
  %39 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 1
  %40 = bitcast %"class.angle::spirv::BoxedUint32"** %39 to i8**
  %41 = load i8*, i8** %40, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %41, i64 %38, i1 false) #12
  br label %42

42:                                               ; preds = %34, %36
  %43 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 21, i32 0, i32 0
  %44 = call { i8*, %"union.absl::container_internal::map_slot_type.57"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE4findIS4_EENSK_8iteratorERSH_(%"class.absl::container_internal::raw_hash_set.56"* %43, %"struct.sh::SpirvIdAndIdList"* nonnull dereferenceable(64) %4)
  %45 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.57"* } %44, 0
  %46 = icmp eq i8* %45, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %42
  %48 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.57"* } %44, 1
  %49 = load i8, i8* %45, align 1
  %50 = icmp sgt i8 %49, -1
  br i1 %50, label %185, label %51, !prof !4

51:                                               ; preds = %47
  call void @llvm.trap() #12
  unreachable

52:                                               ; preds = %42
  %53 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = add i32 %54, 1
  store i32 %55, i32* %53, align 4
  %56 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  call void @_ZN5angle5spirv17WriteTypeFunctionEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_RKNS_10FastVectorIS9_Lm8ENS1_5arrayIS9_Lm8EEEEE(%"class.std::__1::vector.32"* %56, i32 %54, i32 %1, %"class.angle::FastVector"* dereferenceable(56) %2) #12
  %57 = bitcast %"struct.std::__1::pair.60"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %57) #12
  %58 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %59 = load i32, i32* %8, align 8
  store i32 %59, i32* %58, align 8
  %60 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1
  %61 = bitcast %"class.angle::FastVector"* %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 32, i1 false) #12
  %62 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 1
  %63 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %60, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %63, %"class.angle::spirv::BoxedUint32"** %62, align 8
  %64 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 2
  %65 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 3
  %66 = bitcast i64* %64 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %66, align 8
  %67 = load i64, i64* %13, align 8
  %68 = icmp ugt i64 %67, 8
  br i1 %68, label %69, label %84

69:                                               ; preds = %52, %69
  %70 = phi i64 [ %72, %69 ], [ 8, %52 ]
  %71 = icmp ult i64 %70, %67
  %72 = shl i64 %70, 1
  br i1 %71, label %69, label %73

73:                                               ; preds = %69
  %74 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4) #12
  %75 = extractvalue { i64, i1 } %74, 1
  %76 = extractvalue { i64, i1 } %74, 0
  %77 = select i1 %75, i64 -1, i64 %76
  %78 = call i8* @_Znam(i64 %77) #17
  %79 = icmp eq i64 %70, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %73
  %81 = shl nsw i64 %70, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %78, i8 0, i64 %81, i1 false) #12
  br label %82

82:                                               ; preds = %73, %80
  %83 = bitcast %"class.angle::spirv::BoxedUint32"** %62 to i8**
  store i8* %78, i8** %83, align 8
  store i64 %70, i64* %65, align 8
  store i64 %67, i64* %64, align 8
  br label %86

84:                                               ; preds = %52
  store i64 %67, i64* %64, align 8
  %85 = icmp eq i64 %67, 0
  br i1 %85, label %91, label %86

86:                                               ; preds = %82, %84
  %87 = phi i8* [ %78, %82 ], [ %61, %84 ]
  %88 = shl nuw i64 %67, 2
  %89 = bitcast %"class.angle::spirv::BoxedUint32"** %11 to i8**
  %90 = load i8*, i8** %89, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %87, i8* align 4 %90, i64 %88, i1 false) #12
  br label %91

91:                                               ; preds = %84, %86
  %92 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 1, i32 0, i32 0
  store i32 %54, i32* %92, align 8
  %93 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0
  %94 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE22find_or_prepare_insertIS4_EENSG_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.56"* %43, %"struct.sh::SpirvIdAndIdList"* nonnull dereferenceable(64) %93) #12, !noalias !25
  %95 = extractvalue { i64, i8 } %94, 0
  %96 = extractvalue { i64, i8 } %94, 1
  %97 = and i8 %96, 1
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %166, label %99

99:                                               ; preds = %91
  %100 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 21, i32 0, i32 0, i32 1
  %101 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %100, align 8, !noalias !25
  %102 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 0, i32 0, i32 0
  %103 = load i32, i32* %58, align 8, !noalias !25
  store i32 %103, i32* %102, align 8, !noalias !25
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1
  %105 = bitcast %"class.angle::FastVector"* %104 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %105, i8 0, i64 32, i1 false) #12, !noalias !25
  %106 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 1
  %107 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %104, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %107, %"class.angle::spirv::BoxedUint32"** %106, align 8, !noalias !25
  %108 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 2
  %109 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 3
  %110 = bitcast i64* %108 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %110, align 8, !noalias !25
  %111 = load i64, i64* %64, align 8
  store i64 %111, i64* %108, align 8
  store i64 0, i64* %64, align 8
  %112 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %62, align 8
  %113 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %106, align 8
  %114 = icmp eq %"class.angle::spirv::BoxedUint32"* %113, %107
  br i1 %114, label %115, label %116

115:                                              ; preds = %99
  store %"class.angle::spirv::BoxedUint32"* %63, %"class.angle::spirv::BoxedUint32"** %62, align 8
  br label %119

116:                                              ; preds = %99
  %117 = ptrtoint %"class.angle::spirv::BoxedUint32"* %113 to i64
  %118 = bitcast %"class.angle::spirv::BoxedUint32"** %62 to i64*
  store i64 %117, i64* %118, align 8
  br label %119

119:                                              ; preds = %116, %115
  %120 = icmp eq %"class.angle::spirv::BoxedUint32"* %112, %63
  %121 = select i1 %120, %"class.angle::spirv::BoxedUint32"* %107, %"class.angle::spirv::BoxedUint32"* %112
  store %"class.angle::spirv::BoxedUint32"* %121, %"class.angle::spirv::BoxedUint32"** %106, align 8
  %122 = load i64, i64* %109, align 8
  %123 = load i64, i64* %65, align 8
  store i64 %123, i64* %109, align 8
  store i64 %122, i64* %65, align 8
  %124 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %106, align 8
  %125 = icmp eq %"class.angle::spirv::BoxedUint32"* %124, %107
  %126 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %62, align 8
  %127 = icmp eq %"class.angle::spirv::BoxedUint32"* %126, %63
  %128 = or i1 %125, %127
  br i1 %128, label %129, label %162

129:                                              ; preds = %119
  %130 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %104, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %60, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %133 = load i32, i32* %132, align 8
  store i32 %133, i32* %130, align 4
  store i32 %131, i32* %132, align 8
  %134 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 1, i32 0, i32 0
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 1, i32 0, i32 0
  %137 = load i32, i32* %136, align 4
  store i32 %137, i32* %134, align 4
  store i32 %135, i32* %136, align 4
  %138 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 2, i32 0, i32 0
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 2, i32 0, i32 0
  %141 = load i32, i32* %140, align 8
  store i32 %141, i32* %138, align 4
  store i32 %139, i32* %140, align 8
  %142 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 3, i32 0, i32 0
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 3, i32 0, i32 0
  %145 = load i32, i32* %144, align 4
  store i32 %145, i32* %142, align 4
  store i32 %143, i32* %144, align 4
  %146 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 4, i32 0, i32 0
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 4, i32 0, i32 0
  %149 = load i32, i32* %148, align 8
  store i32 %149, i32* %146, align 4
  store i32 %147, i32* %148, align 8
  %150 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 5, i32 0, i32 0
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 5, i32 0, i32 0
  %153 = load i32, i32* %152, align 4
  store i32 %153, i32* %150, align 4
  store i32 %151, i32* %152, align 4
  %154 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 6, i32 0, i32 0
  %155 = load i32, i32* %154, align 4
  %156 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 6, i32 0, i32 0
  %157 = load i32, i32* %156, align 8
  store i32 %157, i32* %154, align 4
  store i32 %155, i32* %156, align 8
  %158 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 7, i32 0, i32 0
  %159 = load i32, i32* %158, align 4
  %160 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 7, i32 0, i32 0
  %161 = load i32, i32* %160, align 4
  store i32 %161, i32* %158, align 4
  store i32 %159, i32* %160, align 4
  br label %162

162:                                              ; preds = %119, %129
  %163 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 1
  %164 = bitcast [8 x i8]* %163 to i32*
  %165 = load i32, i32* %92, align 8, !noalias !25
  store i32 %165, i32* %164, align 8, !noalias !25
  br label %166

166:                                              ; preds = %91, %162
  %167 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %43, i64 0, i32 0
  %168 = load i8*, i8** %167, align 8, !noalias !25
  %169 = getelementptr inbounds i8, i8* %168, i64 %95
  %170 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 21, i32 0, i32 0, i32 1
  %171 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %170, align 8, !noalias !25
  %172 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %171, i64 %95
  %173 = icmp ne i8* %169, null
  call void @llvm.assume(i1 %173) #12, !noalias !25
  store i64 0, i64* %64, align 8
  %174 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %62, align 8
  %175 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %176 = icmp eq %"class.angle::spirv::BoxedUint32"* %174, %175
  %177 = icmp eq %"class.angle::spirv::BoxedUint32"* %174, null
  %178 = or i1 %176, %177
  br i1 %178, label %181, label %179

179:                                              ; preds = %166
  %180 = bitcast %"class.angle::spirv::BoxedUint32"* %174 to i8*
  call void @_ZdaPv(i8* %180) #17
  br label %181

181:                                              ; preds = %179, %166
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %57) #12
  %182 = load i8, i8* %169, align 1
  %183 = icmp sgt i8 %182, -1
  br i1 %183, label %185, label %184, !prof !4

184:                                              ; preds = %181
  call void @llvm.trap() #12
  unreachable

185:                                              ; preds = %47, %181
  %186 = phi %"union.absl::container_internal::map_slot_type.57"* [ %172, %181 ], [ %48, %47 ]
  %187 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %186, i64 0, i32 1
  %188 = bitcast [8 x i8]* %187 to i32*
  %189 = load i32, i32* %188, align 8
  store i64 0, i64* %13, align 8
  %190 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %11, align 8
  %191 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 1, i32 0, i32 0, i64 0
  %192 = icmp eq %"class.angle::spirv::BoxedUint32"* %190, %191
  %193 = icmp eq %"class.angle::spirv::BoxedUint32"* %190, null
  %194 = or i1 %192, %193
  br i1 %194, label %197, label %195

195:                                              ; preds = %185
  %196 = bitcast %"class.angle::spirv::BoxedUint32"* %190 to i8*
  call void @_ZdaPv(i8* %196) #17
  br label %197

197:                                              ; preds = %185, %195
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #12
  ret i32 %189
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, %"union.absl::container_internal::map_slot_type.57"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE4findIS4_EENSK_8iteratorERSH_(%"class.absl::container_internal::raw_hash_set.56"*, %"struct.sh::SpirvIdAndIdList"* dereferenceable(64)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %1, i64 0, i32 1, i32 1
  %4 = bitcast %"class.angle::spirv::BoxedUint32"** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %1, i64 0, i32 1, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = shl i64 %7, 2
  %9 = tail call i64 @XXH64(i8* %5, i64 %8, i64 2882400152) #12
  %10 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %1, i64 0, i32 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = xor i64 %9, %12
  %14 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = lshr i64 %13, 7
  %19 = ptrtoint i8* %15 to i64
  %20 = lshr i64 %19, 12
  %21 = xor i64 %20, %18
  %22 = trunc i64 %13 to i8
  %23 = and i8 %22, 127
  %24 = insertelement <16 x i8> undef, i8 %23, i32 0
  %25 = shufflevector <16 x i8> %24, <16 x i8> undef, <16 x i32> zeroinitializer
  %26 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 1
  %27 = load i64, i64* %6, align 8
  %28 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %3, align 8
  %29 = icmp eq i64 %27, 0
  br label %30

30:                                               ; preds = %84, %2
  %31 = phi i64 [ %21, %2 ], [ %86, %84 ]
  %32 = phi i64 [ 0, %2 ], [ %85, %84 ]
  %33 = and i64 %31, %17
  %34 = getelementptr inbounds i8, i8* %15, i64 %33
  %35 = bitcast i8* %34 to <16 x i8>*
  %36 = load <16 x i8>, <16 x i8>* %35, align 1
  %37 = icmp eq <16 x i8> %25, %36
  %38 = bitcast <16 x i1> %37 to i16
  %39 = icmp eq i16 %38, 0
  br i1 %39, label %80, label %40

40:                                               ; preds = %30
  %41 = zext i16 %38 to i32
  %42 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %26, align 8
  br label %43

43:                                               ; preds = %73, %40
  %44 = phi i32 [ %41, %40 ], [ %75, %73 ]
  %45 = tail call i32 @llvm.cttz.i32(i32 %44, i1 false) #12, !range !3
  %46 = zext i32 %45 to i64
  %47 = add i64 %33, %46
  %48 = and i64 %47, %17
  %49 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %42, i64 %48
  %50 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, %11
  br i1 %52, label %53, label %73, !prof !21

53:                                               ; preds = %43
  %54 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %42, i64 %48, i32 0, i32 1, i32 2
  %55 = load i64, i64* %54, align 8
  %56 = icmp eq i64 %55, %27
  br i1 %56, label %57, label %73, !prof !21

57:                                               ; preds = %53
  %58 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %42, i64 %48, i32 0, i32 1, i32 1
  %59 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %58, align 8
  %60 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %59, i64 %27
  br i1 %29, label %77, label %61

61:                                               ; preds = %57, %69
  %62 = phi %"class.angle::spirv::BoxedUint32"* [ %71, %69 ], [ %28, %57 ]
  %63 = phi %"class.angle::spirv::BoxedUint32"* [ %70, %69 ], [ %59, %57 ]
  %64 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %63, i64 0, i32 0, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %62, i64 0, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %65, %67
  br i1 %68, label %69, label %73, !prof !21

69:                                               ; preds = %61
  %70 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %63, i64 1
  %71 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %62, i64 1
  %72 = icmp eq %"class.angle::spirv::BoxedUint32"* %70, %60
  br i1 %72, label %77, label %61

73:                                               ; preds = %61, %53, %43
  %74 = add i32 %44, -1
  %75 = and i32 %74, %44
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %80, label %43

77:                                               ; preds = %57, %69
  %78 = getelementptr inbounds i8, i8* %15, i64 %48
  %79 = icmp ne i8* %78, null
  tail call void @llvm.assume(i1 %79) #12
  br label %87

80:                                               ; preds = %73, %30
  %81 = icmp eq <16 x i8> %36, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %84, label %87, !prof !5

84:                                               ; preds = %80
  %85 = add i64 %32, 16
  %86 = add i64 %85, %33
  br label %30

87:                                               ; preds = %80, %77
  %88 = phi %"union.absl::container_internal::map_slot_type.57"* [ %49, %77 ], [ undef, %80 ]
  %89 = phi i8* [ %78, %77 ], [ null, %80 ]
  %90 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.57"* } undef, i8* %89, 0
  %91 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.57"* } %90, %"union.absl::container_internal::map_slot_type.57"* %88, 1
  ret { i8*, %"union.absl::container_internal::map_slot_type.57"* } %91
}

declare void @_ZN5angle5spirv17WriteTypeFunctionEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_RKNS_10FastVectorIS9_Lm8ENS1_5arrayIS9_Lm8EEEEE(%"class.std::__1::vector.32"*, i32, i32, %"class.angle::FastVector"* dereferenceable(56)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder15getUintConstantEj(%"class.sh::SPIRVBuilder"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 16
  %4 = tail call i32 @_ZN2sh12SPIRVBuilder22getBasicConstantHelperEjNS_10TBasicTypeEPN4absl13flat_hash_mapIjN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEENS2_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS8_EEEEEE(%"class.sh::SPIRVBuilder"* %0, i32 %1, i32 4, %"class.absl::flat_hash_map.39"* %3)
  ret i32 %4
}

declare void @_ZN5angle5spirv14WriteTypeArrayEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_S9_(%"class.std::__1::vector.32"*, i32, i32, i32) local_unnamed_addr #3

declare void @_ZN5angle5spirv15WriteTypeStructEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEERKNS_10FastVectorIS9_Lm8ENS1_5arrayIS9_Lm8EEEEE(%"class.std::__1::vector.32"*, i32, %"class.angle::FastVector"* dereferenceable(56)) local_unnamed_addr #3

declare void @_ZN5angle5spirv21WriteTypeSampledImageEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_(%"class.std::__1::vector.32"*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12SPIRVBuilder22getImageTypeParametersENS_10TBasicTypeEPN5angle5spirv11BoxedUint32INS3_11IdRefHelperEEEPN3spv3DimEPNS4_INS3_20LiteralIntegerHelperEEESD_SD_SD_(%"class.sh::SPIRVBuilder"*, i32, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::spirv::BoxedUint32.104"* nocapture, %"class.angle::spirv::BoxedUint32.104"* nocapture, %"class.angle::spirv::BoxedUint32.104"* nocapture, %"class.angle::spirv::BoxedUint32.104"* nocapture) local_unnamed_addr #1 align 2 {
  %9 = alloca %"struct.sh::SpirvType", align 8
  store i32 1, i32* %3, align 4
  switch i32 %1, label %49 [
    i32 83, label %48
    i32 48, label %48
    i32 82, label %47
    i32 43, label %47
    i32 81, label %46
    i32 11, label %10
    i32 57, label %10
    i32 15, label %11
    i32 69, label %11
    i32 16, label %12
    i32 72, label %12
    i32 29, label %13
    i32 31, label %14
    i32 17, label %15
    i32 52, label %15
    i32 20, label %16
    i32 58, label %16
    i32 21, label %17
    i32 70, label %17
    i32 22, label %18
    i32 73, label %18
    i32 23, label %19
    i32 53, label %19
    i32 26, label %20
    i32 59, label %20
    i32 27, label %21
    i32 71, label %21
    i32 28, label %22
    i32 74, label %22
    i32 9, label %23
    i32 54, label %23
    i32 18, label %24
    i32 55, label %24
    i32 24, label %25
    i32 56, label %25
    i32 10, label %26
    i32 60, label %26
    i32 36, label %27
    i32 75, label %27
    i32 37, label %28
    i32 30, label %29
    i32 19, label %30
    i32 61, label %30
    i32 44, label %31
    i32 76, label %31
    i32 25, label %32
    i32 62, label %32
    i32 49, label %33
    i32 77, label %33
    i32 32, label %34
    i32 63, label %34
    i32 33, label %35
    i32 66, label %35
    i32 38, label %36
    i32 34, label %37
    i32 40, label %38
    i32 64, label %38
    i32 41, label %39
    i32 67, label %39
    i32 45, label %40
    i32 65, label %40
    i32 46, label %41
    i32 68, label %41
    i32 14, label %42
    i32 78, label %42
    i32 39, label %43
    i32 42, label %44
    i32 79, label %44
    i32 47, label %45
    i32 80, label %45
    i32 35, label %46
  ]

10:                                               ; preds = %8, %8
  br label %49

11:                                               ; preds = %8, %8
  br label %49

12:                                               ; preds = %8, %8
  br label %49

13:                                               ; preds = %8
  br label %49

14:                                               ; preds = %8
  br label %49

15:                                               ; preds = %8, %8
  br label %49

16:                                               ; preds = %8, %8
  br label %49

17:                                               ; preds = %8, %8
  br label %49

18:                                               ; preds = %8, %8
  br label %49

19:                                               ; preds = %8, %8
  br label %49

20:                                               ; preds = %8, %8
  br label %49

21:                                               ; preds = %8, %8
  br label %49

22:                                               ; preds = %8, %8
  br label %49

23:                                               ; preds = %8, %8
  store i32 2, i32* %3, align 4
  br label %49

24:                                               ; preds = %8, %8
  store i32 2, i32* %3, align 4
  br label %49

25:                                               ; preds = %8, %8
  store i32 2, i32* %3, align 4
  br label %49

26:                                               ; preds = %8, %8
  store i32 3, i32* %3, align 4
  br label %49

27:                                               ; preds = %8, %8
  store i32 3, i32* %3, align 4
  br label %49

28:                                               ; preds = %8
  store i32 3, i32* %3, align 4
  br label %49

29:                                               ; preds = %8
  store i32 3, i32* %3, align 4
  br label %49

30:                                               ; preds = %8, %8
  store i32 3, i32* %3, align 4
  br label %49

31:                                               ; preds = %8, %8
  store i32 3, i32* %3, align 4
  br label %49

32:                                               ; preds = %8, %8
  store i32 3, i32* %3, align 4
  br label %49

33:                                               ; preds = %8, %8
  store i32 3, i32* %3, align 4
  br label %49

34:                                               ; preds = %8, %8
  store i32 0, i32* %3, align 4
  br label %49

35:                                               ; preds = %8, %8
  store i32 0, i32* %3, align 4
  br label %49

36:                                               ; preds = %8
  store i32 0, i32* %3, align 4
  br label %49

37:                                               ; preds = %8
  store i32 0, i32* %3, align 4
  br label %49

38:                                               ; preds = %8, %8
  store i32 0, i32* %3, align 4
  br label %49

39:                                               ; preds = %8, %8
  store i32 0, i32* %3, align 4
  br label %49

40:                                               ; preds = %8, %8
  store i32 0, i32* %3, align 4
  br label %49

41:                                               ; preds = %8, %8
  store i32 0, i32* %3, align 4
  br label %49

42:                                               ; preds = %8, %8
  store i32 4, i32* %3, align 4
  br label %49

43:                                               ; preds = %8
  store i32 4, i32* %3, align 4
  br label %49

44:                                               ; preds = %8, %8
  store i32 4, i32* %3, align 4
  br label %49

45:                                               ; preds = %8, %8
  store i32 4, i32* %3, align 4
  br label %49

46:                                               ; preds = %8, %8
  store i32 5, i32* %3, align 4
  br label %49

47:                                               ; preds = %8, %8
  store i32 5, i32* %3, align 4
  br label %49

48:                                               ; preds = %8, %8
  store i32 5, i32* %3, align 4
  br label %49

49:                                               ; preds = %8, %48, %47, %46, %45, %44, %43, %42, %41, %40, %39, %38, %37, %36, %35, %34, %33, %32, %31, %30, %29, %28, %27, %26, %25, %24, %23, %22, %21, %20, %19, %18, %17, %16, %15, %14, %13, %12, %11, %10
  %50 = phi i32 [ 1, %8 ], [ 4, %45 ], [ 3, %44 ], [ 1, %43 ], [ 1, %42 ], [ 4, %41 ], [ 4, %40 ], [ 3, %39 ], [ 3, %38 ], [ 1, %37 ], [ 1, %36 ], [ 1, %35 ], [ 1, %34 ], [ 4, %33 ], [ 4, %32 ], [ 3, %31 ], [ 3, %30 ], [ 1, %29 ], [ 1, %28 ], [ 1, %27 ], [ 1, %26 ], [ 4, %25 ], [ 3, %24 ], [ 1, %23 ], [ 4, %22 ], [ 4, %21 ], [ 4, %20 ], [ 4, %19 ], [ 3, %18 ], [ 3, %17 ], [ 3, %16 ], [ 3, %15 ], [ 1, %14 ], [ 1, %13 ], [ 1, %12 ], [ 1, %11 ], [ 1, %10 ], [ 1, %46 ], [ 3, %47 ], [ 4, %48 ]
  %51 = phi i32 [ 0, %8 ], [ 0, %45 ], [ 0, %44 ], [ 1, %43 ], [ 0, %42 ], [ 0, %41 ], [ 0, %40 ], [ 0, %39 ], [ 0, %38 ], [ 1, %37 ], [ 1, %36 ], [ 0, %35 ], [ 0, %34 ], [ 0, %33 ], [ 0, %32 ], [ 0, %31 ], [ 0, %30 ], [ 1, %29 ], [ 1, %28 ], [ 0, %27 ], [ 0, %26 ], [ 0, %25 ], [ 0, %24 ], [ 0, %23 ], [ 0, %22 ], [ 0, %21 ], [ 0, %20 ], [ 0, %19 ], [ 0, %18 ], [ 0, %17 ], [ 0, %16 ], [ 0, %15 ], [ 1, %14 ], [ 1, %13 ], [ 0, %12 ], [ 0, %11 ], [ 0, %10 ], [ 0, %46 ], [ 0, %47 ], [ 0, %48 ]
  %52 = phi i1 [ false, %8 ], [ false, %45 ], [ false, %44 ], [ false, %43 ], [ false, %42 ], [ true, %41 ], [ false, %40 ], [ true, %39 ], [ false, %38 ], [ true, %37 ], [ false, %36 ], [ true, %35 ], [ false, %34 ], [ true, %33 ], [ false, %32 ], [ true, %31 ], [ false, %30 ], [ false, %29 ], [ true, %28 ], [ true, %27 ], [ false, %26 ], [ false, %25 ], [ false, %24 ], [ false, %23 ], [ true, %22 ], [ false, %21 ], [ true, %20 ], [ false, %19 ], [ true, %18 ], [ false, %17 ], [ true, %16 ], [ false, %15 ], [ true, %14 ], [ false, %13 ], [ true, %12 ], [ false, %11 ], [ true, %10 ], [ false, %46 ], [ false, %47 ], [ false, %48 ]
  %53 = phi i1 [ false, %8 ], [ false, %45 ], [ false, %44 ], [ false, %43 ], [ false, %42 ], [ false, %41 ], [ false, %40 ], [ false, %39 ], [ false, %38 ], [ false, %37 ], [ false, %36 ], [ false, %35 ], [ false, %34 ], [ false, %33 ], [ false, %32 ], [ false, %31 ], [ false, %30 ], [ false, %29 ], [ false, %28 ], [ false, %27 ], [ false, %26 ], [ false, %25 ], [ false, %24 ], [ false, %23 ], [ true, %22 ], [ true, %21 ], [ false, %20 ], [ false, %19 ], [ true, %18 ], [ true, %17 ], [ false, %16 ], [ false, %15 ], [ false, %14 ], [ false, %13 ], [ true, %12 ], [ true, %11 ], [ false, %10 ], [ false, %46 ], [ false, %47 ], [ false, %48 ]
  %54 = bitcast %"struct.sh::SpirvType"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %54) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -86, i64 48, i1 false)
  %55 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %9, i64 0, i32 0
  store %"class.sh::TFieldListCollection"* null, %"class.sh::TFieldListCollection"** %55, align 8
  %56 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %9, i64 0, i32 1
  store i32 0, i32* %56, align 8
  %57 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %9, i64 0, i32 2
  %58 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %9, i64 0, i32 3
  store i8 1, i8* %58, align 8
  %59 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %9, i64 0, i32 4
  store i8 1, i8* %59, align 1
  %60 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %9, i64 0, i32 6
  store i32 2, i32* %60, align 4
  %61 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %9, i64 0, i32 7
  %62 = bitcast %"class.sh::TSpan"* %61 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 21, i1 false) #12
  store i32 %50, i32* %57, align 4
  %63 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %64 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  %66 = load i32, i32* %64, align 4
  store i32 %66, i32* %65, align 4
  %67 = add i32 %1, -8
  %68 = icmp ult i32 %67, 43
  %69 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.104", %"class.angle::spirv::BoxedUint32.104"* %4, i64 0, i32 0, i32 0
  store i32 %51, i32* %69, align 4
  %70 = zext i1 %52 to i32
  %71 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.104", %"class.angle::spirv::BoxedUint32.104"* %5, i64 0, i32 0, i32 0
  store i32 %70, i32* %71, align 4
  %72 = zext i1 %53 to i32
  %73 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.104", %"class.angle::spirv::BoxedUint32.104"* %6, i64 0, i32 0, i32 0
  store i32 %72, i32* %73, align 4
  %74 = select i1 %68, i32 1, i32 2
  %75 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.104", %"class.angle::spirv::BoxedUint32.104"* %7, i64 0, i32 0, i32 0
  store i32 %74, i32* %75, align 4
  %76 = load i32, i32* %3, align 4
  switch i32 %76, label %420 [
    i32 0, label %77
    i32 1, label %144
    i32 5, label %353
    i32 3, label %215
    i32 4, label %286
  ]

77:                                               ; preds = %49
  %78 = select i1 %68, i32 43, i32 44
  %79 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2
  %80 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %81 = bitcast %"class.std::__1::__tree_end_node"* %80 to %"class.std::__1::__tree_node"**
  %82 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node"* %82, null
  br i1 %83, label %112, label %84

84:                                               ; preds = %77
  %85 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %86

86:                                               ; preds = %108, %84
  %87 = phi %"class.std::__1::__tree_node"* [ %111, %108 ], [ %82, %84 ]
  %88 = phi %"class.std::__1::__tree_node_base"** [ %110, %108 ], [ %85, %84 ]
  %89 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %87, i64 0, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = icmp sgt i32 %90, %78
  br i1 %91, label %92, label %98

92:                                               ; preds = %86
  %93 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %87, i64 0, i32 0, i32 0, i32 0
  %94 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %93, align 8
  %95 = icmp eq %"class.std::__1::__tree_node_base"* %94, null
  br i1 %95, label %96, label %108

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %87, i64 0, i32 0, i32 0
  br label %114

98:                                               ; preds = %86
  %99 = icmp slt i32 %90, %78
  br i1 %99, label %100, label %106

100:                                              ; preds = %98
  %101 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %87, i64 0, i32 0, i32 1
  %102 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %101, align 8
  %103 = icmp eq %"class.std::__1::__tree_node_base"* %102, null
  br i1 %103, label %104, label %108

104:                                              ; preds = %100
  %105 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %87, i64 0, i32 0, i32 0
  br label %114

106:                                              ; preds = %98
  %107 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %87, i64 0, i32 0, i32 0
  br label %114

108:                                              ; preds = %100, %92
  %109 = phi %"class.std::__1::__tree_node_base"* [ %94, %92 ], [ %102, %100 ]
  %110 = phi %"class.std::__1::__tree_node_base"** [ %93, %92 ], [ %101, %100 ]
  %111 = bitcast %"class.std::__1::__tree_node_base"* %109 to %"class.std::__1::__tree_node"*
  br label %86

112:                                              ; preds = %77
  %113 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  br label %114

114:                                              ; preds = %112, %106, %104, %96
  %115 = phi %"class.std::__1::__tree_end_node"* [ %80, %112 ], [ %97, %96 ], [ %105, %104 ], [ %107, %106 ]
  %116 = phi %"class.std::__1::__tree_node_base"** [ %113, %112 ], [ %93, %96 ], [ %101, %104 ], [ %88, %106 ]
  %117 = bitcast %"class.std::__1::__tree_node_base"** %116 to %"class.std::__1::__tree_node"**
  %118 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %117, align 8
  %119 = icmp eq %"class.std::__1::__tree_node"* %118, null
  br i1 %119, label %120, label %420

120:                                              ; preds = %114
  %121 = call i8* @_Znwm(i64 32) #17, !noalias !40
  %122 = getelementptr inbounds i8, i8* %121, i64 28
  %123 = bitcast i8* %122 to i32*
  store i32 %78, i32* %123, align 4, !noalias !40
  %124 = bitcast i8* %121 to %"class.std::__1::__tree_node_base"*
  %125 = getelementptr inbounds i8, i8* %121, i64 16
  %126 = bitcast i8* %125 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %121, i8 0, i64 16, i1 false) #12
  store %"class.std::__1::__tree_end_node"* %115, %"class.std::__1::__tree_end_node"** %126, align 8
  %127 = bitcast %"class.std::__1::__tree_node_base"** %116 to i8**
  store i8* %121, i8** %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %79, i64 0, i32 0, i32 0
  %129 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %129, i64 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %137, label %133

133:                                              ; preds = %120
  %134 = ptrtoint %"class.std::__1::__tree_node_base"* %131 to i64
  %135 = bitcast %"class.std::__1::set"* %79 to i64*
  store i64 %134, i64* %135, align 8
  %136 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %116, align 8
  br label %137

137:                                              ; preds = %133, %120
  %138 = phi %"class.std::__1::__tree_node_base"* [ %124, %120 ], [ %136, %133 ]
  %139 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %140 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %139, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %140, %"class.std::__1::__tree_node_base"* %138) #12
  %141 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %142 = load i64, i64* %141, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %141, align 8
  br label %420

144:                                              ; preds = %49
  %145 = xor i1 %52, true
  %146 = or i1 %68, %145
  %147 = xor i1 %53, true
  %148 = or i1 %146, %147
  br i1 %148, label %420, label %149

149:                                              ; preds = %144
  %150 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2
  %151 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %152 = bitcast %"class.std::__1::__tree_end_node"* %151 to %"class.std::__1::__tree_node"**
  %153 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %152, align 8
  %154 = icmp eq %"class.std::__1::__tree_node"* %153, null
  br i1 %154, label %183, label %155

155:                                              ; preds = %149
  %156 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %157

157:                                              ; preds = %179, %155
  %158 = phi %"class.std::__1::__tree_node"* [ %182, %179 ], [ %153, %155 ]
  %159 = phi %"class.std::__1::__tree_node_base"** [ %181, %179 ], [ %156, %155 ]
  %160 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %158, i64 0, i32 1
  %161 = load i32, i32* %160, align 4
  %162 = icmp sgt i32 %161, 48
  br i1 %162, label %163, label %169

163:                                              ; preds = %157
  %164 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %158, i64 0, i32 0, i32 0, i32 0
  %165 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %164, align 8
  %166 = icmp eq %"class.std::__1::__tree_node_base"* %165, null
  br i1 %166, label %167, label %179

167:                                              ; preds = %163
  %168 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %158, i64 0, i32 0, i32 0
  br label %185

169:                                              ; preds = %157
  %170 = icmp eq i32 %161, 48
  br i1 %170, label %177, label %171

171:                                              ; preds = %169
  %172 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %158, i64 0, i32 0, i32 1
  %173 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %172, align 8
  %174 = icmp eq %"class.std::__1::__tree_node_base"* %173, null
  br i1 %174, label %175, label %179

175:                                              ; preds = %171
  %176 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %158, i64 0, i32 0, i32 0
  br label %185

177:                                              ; preds = %169
  %178 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %158, i64 0, i32 0, i32 0
  br label %185

179:                                              ; preds = %171, %163
  %180 = phi %"class.std::__1::__tree_node_base"* [ %165, %163 ], [ %173, %171 ]
  %181 = phi %"class.std::__1::__tree_node_base"** [ %164, %163 ], [ %172, %171 ]
  %182 = bitcast %"class.std::__1::__tree_node_base"* %180 to %"class.std::__1::__tree_node"*
  br label %157

183:                                              ; preds = %149
  %184 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %151, i64 0, i32 0
  br label %185

185:                                              ; preds = %183, %177, %175, %167
  %186 = phi %"class.std::__1::__tree_end_node"* [ %151, %183 ], [ %168, %167 ], [ %176, %175 ], [ %178, %177 ]
  %187 = phi %"class.std::__1::__tree_node_base"** [ %184, %183 ], [ %164, %167 ], [ %172, %175 ], [ %159, %177 ]
  %188 = bitcast %"class.std::__1::__tree_node_base"** %187 to %"class.std::__1::__tree_node"**
  %189 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %188, align 8
  %190 = icmp eq %"class.std::__1::__tree_node"* %189, null
  br i1 %190, label %191, label %420

191:                                              ; preds = %185
  %192 = call i8* @_Znwm(i64 32) #17, !noalias !43
  %193 = getelementptr inbounds i8, i8* %192, i64 28
  %194 = bitcast i8* %193 to i32*
  store i32 48, i32* %194, align 4, !noalias !43
  %195 = bitcast i8* %192 to %"class.std::__1::__tree_node_base"*
  %196 = getelementptr inbounds i8, i8* %192, i64 16
  %197 = bitcast i8* %196 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %192, i8 0, i64 16, i1 false) #12
  store %"class.std::__1::__tree_end_node"* %186, %"class.std::__1::__tree_end_node"** %197, align 8
  %198 = bitcast %"class.std::__1::__tree_node_base"** %187 to i8**
  store i8* %192, i8** %198, align 8
  %199 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %150, i64 0, i32 0, i32 0
  %200 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %199, align 8
  %201 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %200, i64 0, i32 0
  %202 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %201, align 8
  %203 = icmp eq %"class.std::__1::__tree_node_base"* %202, null
  br i1 %203, label %208, label %204

204:                                              ; preds = %191
  %205 = ptrtoint %"class.std::__1::__tree_node_base"* %202 to i64
  %206 = bitcast %"class.std::__1::set"* %150 to i64*
  store i64 %205, i64* %206, align 8
  %207 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %187, align 8
  br label %208

208:                                              ; preds = %204, %191
  %209 = phi %"class.std::__1::__tree_node_base"* [ %195, %191 ], [ %207, %204 ]
  %210 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %211 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %210, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %211, %"class.std::__1::__tree_node_base"* %209) #12
  %212 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %213 = load i64, i64* %212, align 8
  %214 = add i64 %213, 1
  store i64 %214, i64* %212, align 8
  br label %420

215:                                              ; preds = %49
  %216 = xor i1 %52, true
  %217 = or i1 %68, %216
  %218 = xor i1 %53, true
  %219 = or i1 %217, %218
  br i1 %219, label %420, label %220

220:                                              ; preds = %215
  %221 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2
  %222 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %223 = bitcast %"class.std::__1::__tree_end_node"* %222 to %"class.std::__1::__tree_node"**
  %224 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %223, align 8
  %225 = icmp eq %"class.std::__1::__tree_node"* %224, null
  br i1 %225, label %254, label %226

226:                                              ; preds = %220
  %227 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %228

228:                                              ; preds = %250, %226
  %229 = phi %"class.std::__1::__tree_node"* [ %253, %250 ], [ %224, %226 ]
  %230 = phi %"class.std::__1::__tree_node_base"** [ %252, %250 ], [ %227, %226 ]
  %231 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %229, i64 0, i32 1
  %232 = load i32, i32* %231, align 4
  %233 = icmp sgt i32 %232, 34
  br i1 %233, label %234, label %240

234:                                              ; preds = %228
  %235 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %229, i64 0, i32 0, i32 0, i32 0
  %236 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %235, align 8
  %237 = icmp eq %"class.std::__1::__tree_node_base"* %236, null
  br i1 %237, label %238, label %250

238:                                              ; preds = %234
  %239 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %229, i64 0, i32 0, i32 0
  br label %256

240:                                              ; preds = %228
  %241 = icmp eq i32 %232, 34
  br i1 %241, label %248, label %242

242:                                              ; preds = %240
  %243 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %229, i64 0, i32 0, i32 1
  %244 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %243, align 8
  %245 = icmp eq %"class.std::__1::__tree_node_base"* %244, null
  br i1 %245, label %246, label %250

246:                                              ; preds = %242
  %247 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %229, i64 0, i32 0, i32 0
  br label %256

248:                                              ; preds = %240
  %249 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %229, i64 0, i32 0, i32 0
  br label %256

250:                                              ; preds = %242, %234
  %251 = phi %"class.std::__1::__tree_node_base"* [ %236, %234 ], [ %244, %242 ]
  %252 = phi %"class.std::__1::__tree_node_base"** [ %235, %234 ], [ %243, %242 ]
  %253 = bitcast %"class.std::__1::__tree_node_base"* %251 to %"class.std::__1::__tree_node"*
  br label %228

254:                                              ; preds = %220
  %255 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %222, i64 0, i32 0
  br label %256

256:                                              ; preds = %254, %248, %246, %238
  %257 = phi %"class.std::__1::__tree_end_node"* [ %222, %254 ], [ %239, %238 ], [ %247, %246 ], [ %249, %248 ]
  %258 = phi %"class.std::__1::__tree_node_base"** [ %255, %254 ], [ %235, %238 ], [ %243, %246 ], [ %230, %248 ]
  %259 = bitcast %"class.std::__1::__tree_node_base"** %258 to %"class.std::__1::__tree_node"**
  %260 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %259, align 8
  %261 = icmp eq %"class.std::__1::__tree_node"* %260, null
  br i1 %261, label %262, label %420

262:                                              ; preds = %256
  %263 = call i8* @_Znwm(i64 32) #17, !noalias !46
  %264 = getelementptr inbounds i8, i8* %263, i64 28
  %265 = bitcast i8* %264 to i32*
  store i32 34, i32* %265, align 4, !noalias !46
  %266 = bitcast i8* %263 to %"class.std::__1::__tree_node_base"*
  %267 = getelementptr inbounds i8, i8* %263, i64 16
  %268 = bitcast i8* %267 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %263, i8 0, i64 16, i1 false) #12
  store %"class.std::__1::__tree_end_node"* %257, %"class.std::__1::__tree_end_node"** %268, align 8
  %269 = bitcast %"class.std::__1::__tree_node_base"** %258 to i8**
  store i8* %263, i8** %269, align 8
  %270 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %221, i64 0, i32 0, i32 0
  %271 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %270, align 8
  %272 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %271, i64 0, i32 0
  %273 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %272, align 8
  %274 = icmp eq %"class.std::__1::__tree_node_base"* %273, null
  br i1 %274, label %279, label %275

275:                                              ; preds = %262
  %276 = ptrtoint %"class.std::__1::__tree_node_base"* %273 to i64
  %277 = bitcast %"class.std::__1::set"* %221 to i64*
  store i64 %276, i64* %277, align 8
  %278 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %258, align 8
  br label %279

279:                                              ; preds = %275, %262
  %280 = phi %"class.std::__1::__tree_node_base"* [ %266, %262 ], [ %278, %275 ]
  %281 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %282 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %281, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %282, %"class.std::__1::__tree_node_base"* %280) #12
  %283 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %284 = load i64, i64* %283, align 8
  %285 = add i64 %284, 1
  store i64 %285, i64* %283, align 8
  br label %420

286:                                              ; preds = %49
  %287 = select i1 %68, i32 37, i32 36
  %288 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2
  %289 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %290 = bitcast %"class.std::__1::__tree_end_node"* %289 to %"class.std::__1::__tree_node"**
  %291 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %290, align 8
  %292 = icmp eq %"class.std::__1::__tree_node"* %291, null
  br i1 %292, label %321, label %293

293:                                              ; preds = %286
  %294 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %295

295:                                              ; preds = %317, %293
  %296 = phi %"class.std::__1::__tree_node"* [ %320, %317 ], [ %291, %293 ]
  %297 = phi %"class.std::__1::__tree_node_base"** [ %319, %317 ], [ %294, %293 ]
  %298 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %296, i64 0, i32 1
  %299 = load i32, i32* %298, align 4
  %300 = icmp sgt i32 %299, %287
  br i1 %300, label %301, label %307

301:                                              ; preds = %295
  %302 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %296, i64 0, i32 0, i32 0, i32 0
  %303 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %302, align 8
  %304 = icmp eq %"class.std::__1::__tree_node_base"* %303, null
  br i1 %304, label %305, label %317

305:                                              ; preds = %301
  %306 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %296, i64 0, i32 0, i32 0
  br label %323

307:                                              ; preds = %295
  %308 = icmp slt i32 %299, %287
  br i1 %308, label %309, label %315

309:                                              ; preds = %307
  %310 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %296, i64 0, i32 0, i32 1
  %311 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %310, align 8
  %312 = icmp eq %"class.std::__1::__tree_node_base"* %311, null
  br i1 %312, label %313, label %317

313:                                              ; preds = %309
  %314 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %296, i64 0, i32 0, i32 0
  br label %323

315:                                              ; preds = %307
  %316 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %296, i64 0, i32 0, i32 0
  br label %323

317:                                              ; preds = %309, %301
  %318 = phi %"class.std::__1::__tree_node_base"* [ %303, %301 ], [ %311, %309 ]
  %319 = phi %"class.std::__1::__tree_node_base"** [ %302, %301 ], [ %310, %309 ]
  %320 = bitcast %"class.std::__1::__tree_node_base"* %318 to %"class.std::__1::__tree_node"*
  br label %295

321:                                              ; preds = %286
  %322 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %289, i64 0, i32 0
  br label %323

323:                                              ; preds = %321, %315, %313, %305
  %324 = phi %"class.std::__1::__tree_end_node"* [ %289, %321 ], [ %306, %305 ], [ %314, %313 ], [ %316, %315 ]
  %325 = phi %"class.std::__1::__tree_node_base"** [ %322, %321 ], [ %302, %305 ], [ %310, %313 ], [ %297, %315 ]
  %326 = bitcast %"class.std::__1::__tree_node_base"** %325 to %"class.std::__1::__tree_node"**
  %327 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %326, align 8
  %328 = icmp eq %"class.std::__1::__tree_node"* %327, null
  br i1 %328, label %329, label %420

329:                                              ; preds = %323
  %330 = call i8* @_Znwm(i64 32) #17, !noalias !49
  %331 = getelementptr inbounds i8, i8* %330, i64 28
  %332 = bitcast i8* %331 to i32*
  store i32 %287, i32* %332, align 4, !noalias !49
  %333 = bitcast i8* %330 to %"class.std::__1::__tree_node_base"*
  %334 = getelementptr inbounds i8, i8* %330, i64 16
  %335 = bitcast i8* %334 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %330, i8 0, i64 16, i1 false) #12
  store %"class.std::__1::__tree_end_node"* %324, %"class.std::__1::__tree_end_node"** %335, align 8
  %336 = bitcast %"class.std::__1::__tree_node_base"** %325 to i8**
  store i8* %330, i8** %336, align 8
  %337 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %288, i64 0, i32 0, i32 0
  %338 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %337, align 8
  %339 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %338, i64 0, i32 0
  %340 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %339, align 8
  %341 = icmp eq %"class.std::__1::__tree_node_base"* %340, null
  br i1 %341, label %346, label %342

342:                                              ; preds = %329
  %343 = ptrtoint %"class.std::__1::__tree_node_base"* %340 to i64
  %344 = bitcast %"class.std::__1::set"* %288 to i64*
  store i64 %343, i64* %344, align 8
  %345 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %325, align 8
  br label %346

346:                                              ; preds = %342, %329
  %347 = phi %"class.std::__1::__tree_node_base"* [ %333, %329 ], [ %345, %342 ]
  %348 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %349 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %348, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %349, %"class.std::__1::__tree_node_base"* %347) #12
  %350 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %351 = load i64, i64* %350, align 8
  %352 = add i64 %351, 1
  store i64 %352, i64* %350, align 8
  br label %420

353:                                              ; preds = %49
  %354 = select i1 %68, i32 46, i32 47
  %355 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2
  %356 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %357 = bitcast %"class.std::__1::__tree_end_node"* %356 to %"class.std::__1::__tree_node"**
  %358 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %357, align 8
  %359 = icmp eq %"class.std::__1::__tree_node"* %358, null
  br i1 %359, label %388, label %360

360:                                              ; preds = %353
  %361 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %362

362:                                              ; preds = %384, %360
  %363 = phi %"class.std::__1::__tree_node"* [ %387, %384 ], [ %358, %360 ]
  %364 = phi %"class.std::__1::__tree_node_base"** [ %386, %384 ], [ %361, %360 ]
  %365 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %363, i64 0, i32 1
  %366 = load i32, i32* %365, align 4
  %367 = icmp sgt i32 %366, %354
  br i1 %367, label %368, label %374

368:                                              ; preds = %362
  %369 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %363, i64 0, i32 0, i32 0, i32 0
  %370 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %369, align 8
  %371 = icmp eq %"class.std::__1::__tree_node_base"* %370, null
  br i1 %371, label %372, label %384

372:                                              ; preds = %368
  %373 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %363, i64 0, i32 0, i32 0
  br label %390

374:                                              ; preds = %362
  %375 = icmp slt i32 %366, %354
  br i1 %375, label %376, label %382

376:                                              ; preds = %374
  %377 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %363, i64 0, i32 0, i32 1
  %378 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %377, align 8
  %379 = icmp eq %"class.std::__1::__tree_node_base"* %378, null
  br i1 %379, label %380, label %384

380:                                              ; preds = %376
  %381 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %363, i64 0, i32 0, i32 0
  br label %390

382:                                              ; preds = %374
  %383 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %363, i64 0, i32 0, i32 0
  br label %390

384:                                              ; preds = %376, %368
  %385 = phi %"class.std::__1::__tree_node_base"* [ %370, %368 ], [ %378, %376 ]
  %386 = phi %"class.std::__1::__tree_node_base"** [ %369, %368 ], [ %377, %376 ]
  %387 = bitcast %"class.std::__1::__tree_node_base"* %385 to %"class.std::__1::__tree_node"*
  br label %362

388:                                              ; preds = %353
  %389 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %356, i64 0, i32 0
  br label %390

390:                                              ; preds = %388, %382, %380, %372
  %391 = phi %"class.std::__1::__tree_end_node"* [ %356, %388 ], [ %373, %372 ], [ %381, %380 ], [ %383, %382 ]
  %392 = phi %"class.std::__1::__tree_node_base"** [ %389, %388 ], [ %369, %372 ], [ %377, %380 ], [ %364, %382 ]
  %393 = bitcast %"class.std::__1::__tree_node_base"** %392 to %"class.std::__1::__tree_node"**
  %394 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %393, align 8
  %395 = icmp eq %"class.std::__1::__tree_node"* %394, null
  br i1 %395, label %396, label %420

396:                                              ; preds = %390
  %397 = call i8* @_Znwm(i64 32) #17, !noalias !52
  %398 = getelementptr inbounds i8, i8* %397, i64 28
  %399 = bitcast i8* %398 to i32*
  store i32 %354, i32* %399, align 4, !noalias !52
  %400 = bitcast i8* %397 to %"class.std::__1::__tree_node_base"*
  %401 = getelementptr inbounds i8, i8* %397, i64 16
  %402 = bitcast i8* %401 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %397, i8 0, i64 16, i1 false) #12
  store %"class.std::__1::__tree_end_node"* %391, %"class.std::__1::__tree_end_node"** %402, align 8
  %403 = bitcast %"class.std::__1::__tree_node_base"** %392 to i8**
  store i8* %397, i8** %403, align 8
  %404 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %355, i64 0, i32 0, i32 0
  %405 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %404, align 8
  %406 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %405, i64 0, i32 0
  %407 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %406, align 8
  %408 = icmp eq %"class.std::__1::__tree_node_base"* %407, null
  br i1 %408, label %413, label %409

409:                                              ; preds = %396
  %410 = ptrtoint %"class.std::__1::__tree_node_base"* %407 to i64
  %411 = bitcast %"class.std::__1::set"* %355 to i64*
  store i64 %410, i64* %411, align 8
  %412 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %392, align 8
  br label %413

413:                                              ; preds = %409, %396
  %414 = phi %"class.std::__1::__tree_node_base"* [ %400, %396 ], [ %412, %409 ]
  %415 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %416 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %415, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %416, %"class.std::__1::__tree_node_base"* %414) #12
  %417 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %418 = load i64, i64* %417, align 8
  %419 = add i64 %418, 1
  store i64 %419, i64* %417, align 8
  br label %420

420:                                              ; preds = %413, %390, %346, %323, %279, %256, %208, %185, %137, %114, %215, %144, %49
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %54) #12
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder14getImageFormatENS_26TLayoutImageInternalFormatE(%"class.sh::SPIRVBuilder"* nocapture readnone, i32) local_unnamed_addr #6 align 2 {
  %3 = add i32 %1, -1
  %4 = icmp ult i32 %3, 13
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZN2sh12SPIRVBuilder14getImageFormatENS_26TLayoutImageInternalFormatE, i64 0, i64 %6
  %8 = load i32, i32* %7, align 4
  ret i32 %8

9:                                                ; preds = %2
  ret i32 0
}

declare void @_ZN5angle5spirv14WriteTypeImageEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_N3spv3DimENS7_INS0_20LiteralIntegerHelperEEESD_SD_SD_NSA_11ImageFormatEPKNSA_15AccessQualifierE(%"class.std::__1::vector.32"*, i32, i32, i32, i32, i32, i32, i32, i32, i32*) local_unnamed_addr #3

declare void @_ZN5angle5spirv15WriteTypeMatrixEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_NS7_INS0_20LiteralIntegerHelperEEE(%"class.std::__1::vector.32"*, i32, i32, i32) local_unnamed_addr #3

declare void @_ZN5angle5spirv15WriteTypeVectorEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_NS7_INS0_20LiteralIntegerHelperEEE(%"class.std::__1::vector.32"*, i32, i32, i32) local_unnamed_addr #3

declare void @_ZN5angle5spirv13WriteTypeVoidEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEE(%"class.std::__1::vector.32"*, i32) local_unnamed_addr #3

declare void @_ZN5angle5spirv14WriteTypeFloatEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEENS7_INS0_20LiteralIntegerHelperEEE(%"class.std::__1::vector.32"*, i32, i32) local_unnamed_addr #3

declare void @_ZN5angle5spirv12WriteTypeIntEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEENS7_INS0_20LiteralIntegerHelperEEESB_(%"class.std::__1::vector.32"*, i32, i32, i32) local_unnamed_addr #3

declare void @_ZN5angle5spirv13WriteTypeBoolEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEE(%"class.std::__1::vector.32"*, i32) local_unnamed_addr #3

declare void @_ZN5angle5spirv9WriteNameEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEPKc(%"class.std::__1::vector.32"*, i32, i8*) local_unnamed_addr #3

declare void @_ZN5angle5spirv15WriteMemberNameEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEENS7_INS0_20LiteralIntegerHelperEEEPKc(%"class.std::__1::vector.32"*, i32, i32, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder29calculateBaseAlignmentAndSizeERKNS_9SpirvTypeEPj(%"class.sh::SPIRVBuilder"*, %"struct.sh::SpirvType"* readonly dereferenceable(48), i32* nocapture) local_unnamed_addr #1 align 2 {
  %4 = alloca %"struct.sh::SpirvType", align 8
  %5 = alloca %"struct.sh::SpirvType", align 8
  %6 = alloca %"struct.sh::SpirvType", align 8
  %7 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 7
  %8 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 7, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %143, label %11

11:                                               ; preds = %3
  %12 = bitcast %"struct.sh::SpirvType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %12) #12
  %13 = bitcast %"struct.sh::SpirvType"* %1 to i8*
  %14 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 7
  %15 = bitcast %"class.sh::TSpan"* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %13, i64 24, i1 false) #12
  %16 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 7
  %17 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %4, i64 0, i32 8
  %18 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 8
  %19 = bitcast i32* %17 to i8*
  %20 = bitcast i32* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 5, i1 false) #12
  %21 = bitcast %"class.sh::TSpan"* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 16, i1 false)
  %22 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %23 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %22, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 4
  %28 = icmp ugt i32 %24, 16
  %29 = or i1 %28, %27
  %30 = select i1 %29, i32 %24, i32 16
  %31 = getelementptr inbounds %"class.sh::TSpan", %"class.sh::TSpan"* %7, i64 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = load i64, i64* %8, align 8
  %34 = getelementptr inbounds i32, i32* %32, i64 %33
  %35 = icmp eq i64 %33, 0
  br i1 %35, label %131, label %36

36:                                               ; preds = %11
  %37 = shl nsw i64 %33, 2
  %38 = add i64 %37, -4
  %39 = lshr exact i64 %38, 2
  %40 = add nuw nsw i64 %39, 1
  %41 = icmp ult i64 %40, 8
  br i1 %41, label %42, label %45

42:                                               ; preds = %121, %36
  %43 = phi i32 [ 1, %36 ], [ %129, %121 ]
  %44 = phi i32* [ %32, %36 ], [ %47, %121 ]
  br label %136

45:                                               ; preds = %36
  %46 = and i64 %40, 9223372036854775800
  %47 = getelementptr i32, i32* %32, i64 %46
  %48 = add nsw i64 %46, -8
  %49 = lshr exact i64 %48, 3
  %50 = add nuw nsw i64 %49, 1
  %51 = and i64 %50, 3
  %52 = icmp ult i64 %48, 24
  br i1 %52, label %98, label %53

53:                                               ; preds = %45
  %54 = sub nsw i64 %50, %51
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %95, %55 ]
  %57 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %53 ], [ %93, %55 ]
  %58 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %53 ], [ %94, %55 ]
  %59 = phi i64 [ %54, %53 ], [ %96, %55 ]
  %60 = getelementptr i32, i32* %32, i64 %56
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 4
  %63 = getelementptr i32, i32* %60, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4
  %66 = mul <4 x i32> %62, %57
  %67 = mul <4 x i32> %65, %58
  %68 = or i64 %56, 8
  %69 = getelementptr i32, i32* %32, i64 %68
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4
  %72 = getelementptr i32, i32* %69, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4
  %75 = mul <4 x i32> %71, %66
  %76 = mul <4 x i32> %74, %67
  %77 = or i64 %56, 16
  %78 = getelementptr i32, i32* %32, i64 %77
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4
  %81 = getelementptr i32, i32* %78, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4
  %84 = mul <4 x i32> %80, %75
  %85 = mul <4 x i32> %83, %76
  %86 = or i64 %56, 24
  %87 = getelementptr i32, i32* %32, i64 %86
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4
  %90 = getelementptr i32, i32* %87, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4
  %93 = mul <4 x i32> %89, %84
  %94 = mul <4 x i32> %92, %85
  %95 = add i64 %56, 32
  %96 = add i64 %59, -4
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %55, !llvm.loop !55

98:                                               ; preds = %55, %45
  %99 = phi <4 x i32> [ undef, %45 ], [ %93, %55 ]
  %100 = phi <4 x i32> [ undef, %45 ], [ %94, %55 ]
  %101 = phi i64 [ 0, %45 ], [ %95, %55 ]
  %102 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %45 ], [ %93, %55 ]
  %103 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %45 ], [ %94, %55 ]
  %104 = icmp eq i64 %51, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %98, %105
  %106 = phi i64 [ %118, %105 ], [ %101, %98 ]
  %107 = phi <4 x i32> [ %116, %105 ], [ %102, %98 ]
  %108 = phi <4 x i32> [ %117, %105 ], [ %103, %98 ]
  %109 = phi i64 [ %119, %105 ], [ %51, %98 ]
  %110 = getelementptr i32, i32* %32, i64 %106
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4
  %113 = getelementptr i32, i32* %110, i64 4
  %114 = bitcast i32* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 4
  %116 = mul <4 x i32> %112, %107
  %117 = mul <4 x i32> %115, %108
  %118 = add i64 %106, 8
  %119 = add i64 %109, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !57

121:                                              ; preds = %105, %98
  %122 = phi <4 x i32> [ %99, %98 ], [ %116, %105 ]
  %123 = phi <4 x i32> [ %100, %98 ], [ %117, %105 ]
  %124 = mul <4 x i32> %123, %122
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %126 = mul <4 x i32> %124, %125
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %128 = mul <4 x i32> %126, %127
  %129 = extractelement <4 x i32> %128, i32 0
  %130 = icmp eq i64 %40, %46
  br i1 %130, label %131, label %42

131:                                              ; preds = %136, %121, %11
  %132 = phi i32 [ 1, %11 ], [ %129, %121 ], [ %140, %136 ]
  %133 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %22, i64 0, i32 2
  %134 = load i32, i32* %133, align 4
  %135 = mul i32 %134, %132
  store i32 %135, i32* %2, align 4
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %12) #12
  br label %256

136:                                              ; preds = %42, %136
  %137 = phi i32 [ %140, %136 ], [ %43, %42 ]
  %138 = phi i32* [ %141, %136 ], [ %44, %42 ]
  %139 = load i32, i32* %138, align 4
  %140 = mul i32 %139, %137
  %141 = getelementptr inbounds i32, i32* %138, i64 1
  %142 = icmp eq i32* %141, %34
  br i1 %142, label %131, label %136, !llvm.loop !59

143:                                              ; preds = %3
  %144 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 0
  %145 = load %"class.sh::TFieldListCollection"*, %"class.sh::TFieldListCollection"** %144, align 8
  %146 = icmp eq %"class.sh::TFieldListCollection"* %145, null
  br i1 %146, label %179, label %147

147:                                              ; preds = %143
  %148 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %145, i64 0, i32 0
  %149 = load %"class.sh::TVector"*, %"class.sh::TVector"** %148, align 8
  %150 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %149, i64 0, i32 0, i32 0, i32 0
  %151 = load %"class.sh::TField"**, %"class.sh::TField"*** %150, align 8
  %152 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %149, i64 0, i32 0, i32 0, i32 1
  %153 = load %"class.sh::TField"**, %"class.sh::TField"*** %152, align 8
  %154 = icmp eq %"class.sh::TField"** %151, %153
  br i1 %154, label %157, label %155

155:                                              ; preds = %147
  %156 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 1
  br label %165

157:                                              ; preds = %165, %147
  %158 = phi i32 [ 4, %147 ], [ %176, %165 ]
  %159 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 1
  %160 = load i32, i32* %159, align 8
  %161 = icmp eq i32 %160, 4
  %162 = icmp ugt i32 %158, 16
  %163 = or i1 %162, %161
  %164 = select i1 %163, i32 %158, i32 16
  store i32 0, i32* %2, align 4
  br label %256

165:                                              ; preds = %155, %165
  %166 = phi i32 [ 4, %155 ], [ %176, %165 ]
  %167 = phi %"class.sh::TField"** [ %151, %155 ], [ %177, %165 ]
  %168 = load %"class.sh::TField"*, %"class.sh::TField"** %167, align 8
  %169 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %168, i64 0, i32 0
  %170 = load %"class.sh::TType"*, %"class.sh::TType"** %169, align 8
  %171 = load i32, i32* %156, align 8
  %172 = tail call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder11getTypeDataERKNS_5TTypeENS_19TLayoutBlockStorageE(%"class.sh::SPIRVBuilder"* %0, %"class.sh::TType"* dereferenceable(184) %170, i32 %171)
  %173 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %172, i64 0, i32 1
  %174 = load i32, i32* %173, align 4
  %175 = icmp ult i32 %166, %174
  %176 = select i1 %175, i32 %174, i32 %166
  %177 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %167, i64 1
  %178 = icmp eq %"class.sh::TField"** %177, %153
  br i1 %178, label %157, label %165

179:                                              ; preds = %143
  %180 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 4
  %181 = load i8, i8* %180, align 1
  %182 = icmp ugt i8 %181, 1
  br i1 %182, label %183, label %228

183:                                              ; preds = %179
  %184 = bitcast %"struct.sh::SpirvType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %184) #12
  %185 = bitcast %"struct.sh::SpirvType"* %1 to i8*
  %186 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 7
  %187 = bitcast %"class.sh::TSpan"* %186 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %187, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %184, i8* align 8 %185, i64 24, i1 false) #12
  %188 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 7
  %189 = bitcast %"class.sh::TSpan"* %7 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast %"class.sh::TSpan"* %188 to i64*
  store i64 %190, i64* %191, align 8
  %192 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 7, i32 1
  store i64 0, i64* %192, align 8
  %193 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 8
  %194 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 8
  %195 = bitcast i32* %193 to i8*
  %196 = bitcast i32* %194 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %195, i8* align 8 %196, i64 5, i1 false) #12
  %197 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 6
  %198 = load i32, i32* %197, align 4
  %199 = icmp eq i32 %198, 1
  br i1 %199, label %204, label %200

200:                                              ; preds = %183
  %201 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 4
  %202 = load i8, i8* %201, align 1
  %203 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 3
  store i8 %202, i8* %203, align 8
  br label %204

204:                                              ; preds = %183, %200
  %205 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 4
  store i8 1, i8* %205, align 1
  %206 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %207 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %206, i64 0, i32 1
  %208 = load i32, i32* %207, align 4
  %209 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 1
  %210 = load i32, i32* %209, align 8
  %211 = icmp eq i32 %210, 4
  %212 = icmp ugt i32 %208, 16
  %213 = or i1 %212, %211
  %214 = select i1 %213, i32 %208, i32 16
  %215 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %206, i64 0, i32 2
  %216 = load i32, i32* %215, align 4
  %217 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 3
  %218 = load i8, i8* %217, align 8
  %219 = zext i8 %218 to i32
  %220 = mul i32 %216, %219
  %221 = load i8, i8* %180, align 1
  %222 = zext i8 %221 to i32
  %223 = mul i32 %220, %222
  %224 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 3
  %225 = load i8, i8* %224, align 8
  %226 = zext i8 %225 to i32
  %227 = udiv i32 %223, %226
  store i32 %227, i32* %2, align 4
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %184) #12
  br label %256

228:                                              ; preds = %179
  %229 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 3
  %230 = load i8, i8* %229, align 8
  %231 = icmp ugt i8 %230, 1
  br i1 %231, label %232, label %255

232:                                              ; preds = %228
  %233 = bitcast %"struct.sh::SpirvType"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %233) #12
  %234 = bitcast %"struct.sh::SpirvType"* %1 to i8*
  %235 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %6, i64 0, i32 7
  %236 = bitcast %"class.sh::TSpan"* %235 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %236, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %233, i8* align 8 %234, i64 24, i1 false) #12
  %237 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %6, i64 0, i32 7
  %238 = bitcast %"class.sh::TSpan"* %7 to i64*
  %239 = load i64, i64* %238, align 8
  %240 = bitcast %"class.sh::TSpan"* %237 to i64*
  store i64 %239, i64* %240, align 8
  %241 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %6, i64 0, i32 7, i32 1
  store i64 0, i64* %241, align 8
  %242 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %6, i64 0, i32 8
  %243 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 8
  %244 = bitcast i32* %242 to i8*
  %245 = bitcast i32* %243 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %244, i8* align 8 %245, i64 5, i1 false) #12
  %246 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %6, i64 0, i32 3
  store i8 1, i8* %246, align 8
  %247 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %248 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %247, i64 0, i32 1
  %249 = load i32, i32* %248, align 4
  %250 = load i8, i8* %229, align 8
  %251 = icmp eq i8 %250, 3
  %252 = select i1 %251, i8 4, i8 %250
  %253 = zext i8 %252 to i32
  %254 = mul i32 %249, %253
  store i32 %254, i32* %2, align 4
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %233) #12
  br label %256

255:                                              ; preds = %228
  store i32 4, i32* %2, align 4
  br label %256

256:                                              ; preds = %255, %232, %204, %157, %131
  %257 = phi i32 [ %164, %157 ], [ %214, %204 ], [ %254, %232 ], [ 4, %255 ], [ %30, %131 ]
  ret i32 %257
}

declare void @_ZN5angle5spirv13WriteDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv10DecorationERKNS_10FastVectorINS7_INS0_20LiteralIntegerHelperEEELm8ENS1_5arrayISE_Lm8EEEEE(%"class.std::__1::vector.32"*, i32, i32, %"class.angle::FastVector.105"* dereferenceable(56)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder38calculateSizeAndWriteOffsetDecorationsERKNS_9SpirvTypeEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"*, %"struct.sh::SpirvType"* nocapture readonly dereferenceable(48), i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.angle::FastVector.105", align 8
  %5 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 0
  %6 = load %"class.sh::TFieldListCollection"*, %"class.sh::TFieldListCollection"** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %6, i64 0, i32 0
  %8 = load %"class.sh::TVector"*, %"class.sh::TVector"** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.sh::TField"**, %"class.sh::TField"*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %8, i64 0, i32 0, i32 0, i32 1
  %12 = load %"class.sh::TField"**, %"class.sh::TField"*** %11, align 8
  %13 = icmp eq %"class.sh::TField"** %10, %12
  br i1 %13, label %23, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 1
  %16 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 10
  %17 = bitcast %"class.angle::FastVector.105"* %4 to i8*
  %18 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 1
  %19 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 0, i32 0, i64 0
  %20 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 2
  %21 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %22 = bitcast i64* %20 to <2 x i64>*
  br label %25

23:                                               ; preds = %47, %3
  %24 = phi i32 [ 0, %3 ], [ %55, %47 ]
  ret i32 %24

25:                                               ; preds = %14, %47
  %26 = phi i32 [ 0, %14 ], [ %40, %47 ]
  %27 = phi i32 [ 0, %14 ], [ %55, %47 ]
  %28 = phi %"class.sh::TField"** [ %10, %14 ], [ %56, %47 ]
  %29 = load %"class.sh::TField"*, %"class.sh::TField"** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %29, i64 0, i32 0
  %31 = load %"class.sh::TType"*, %"class.sh::TType"** %30, align 8
  %32 = load i32, i32* %15, align 8
  %33 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder11getTypeDataERKNS_5TTypeENS_19TLayoutBlockStorageE(%"class.sh::SPIRVBuilder"* %0, %"class.sh::TType"* dereferenceable(184) %31, i32 %32)
  %34 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %33, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %27, -1
  %37 = add i32 %36, %35
  %38 = urem i32 %37, %35
  %39 = sub i32 %37, %38
  %40 = add i32 %26, 1
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %17) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 32, i1 false) #12
  store %"class.angle::spirv::BoxedUint32.104"* %19, %"class.angle::spirv::BoxedUint32.104"** %18, align 8
  store <2 x i64> <i64 1, i64 8>, <2 x i64>* %22, align 8
  store i32 %39, i32* %21, align 8
  call void @_ZN5angle5spirv19WriteMemberDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEENS7_INS0_20LiteralIntegerHelperEEEN3spv10DecorationERKNS_10FastVectorISB_Lm8ENS1_5arrayISB_Lm8EEEEE(%"class.std::__1::vector.32"* %16, i32 %2, i32 %26, i32 35, %"class.angle::FastVector.105"* nonnull dereferenceable(56) %4) #12
  store i64 0, i64* %20, align 8
  %41 = load %"class.angle::spirv::BoxedUint32.104"*, %"class.angle::spirv::BoxedUint32.104"** %18, align 8
  %42 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %41, %19
  %43 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %41, null
  %44 = or i1 %42, %43
  br i1 %44, label %47, label %45

45:                                               ; preds = %25
  %46 = bitcast %"class.angle::spirv::BoxedUint32.104"* %41 to i8*
  call void @_ZdaPv(i8* %46) #17
  br label %47

47:                                               ; preds = %25, %45
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %17) #12
  %48 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %33, i64 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = load i32, i32* %34, align 4
  %51 = add i32 %39, -1
  %52 = add i32 %51, %49
  %53 = add i32 %52, %50
  %54 = urem i32 %53, %50
  %55 = sub i32 %53, %54
  %56 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %28, i64 1
  %57 = icmp eq %"class.sh::TField"** %56, %12
  br i1 %57, label %23, label %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12SPIRVBuilder13addCapabilityEN3spv10CapabilityE(%"class.sh::SPIRVBuilder"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  %7 = icmp eq %"class.std::__1::__tree_node"* %6, null
  br i1 %7, label %36, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %10

10:                                               ; preds = %32, %8
  %11 = phi %"class.std::__1::__tree_node"* [ %35, %32 ], [ %6, %8 ]
  %12 = phi %"class.std::__1::__tree_node_base"** [ %34, %32 ], [ %9, %8 ]
  %13 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %14, %1
  br i1 %15, label %16, label %22

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %19, label %20, label %32

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0
  br label %38

22:                                               ; preds = %10
  %23 = icmp slt i32 %14, %1
  br i1 %23, label %24, label %30

24:                                               ; preds = %22
  %25 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 1
  %26 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %25, align 8
  %27 = icmp eq %"class.std::__1::__tree_node_base"* %26, null
  br i1 %27, label %28, label %32

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0
  br label %38

30:                                               ; preds = %22
  %31 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0
  br label %38

32:                                               ; preds = %24, %16
  %33 = phi %"class.std::__1::__tree_node_base"* [ %18, %16 ], [ %26, %24 ]
  %34 = phi %"class.std::__1::__tree_node_base"** [ %17, %16 ], [ %25, %24 ]
  %35 = bitcast %"class.std::__1::__tree_node_base"* %33 to %"class.std::__1::__tree_node"*
  br label %10

36:                                               ; preds = %2
  %37 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %4, i64 0, i32 0
  br label %38

38:                                               ; preds = %36, %30, %28, %20
  %39 = phi %"class.std::__1::__tree_end_node"* [ %4, %36 ], [ %21, %20 ], [ %29, %28 ], [ %31, %30 ]
  %40 = phi %"class.std::__1::__tree_node_base"** [ %37, %36 ], [ %17, %20 ], [ %25, %28 ], [ %12, %30 ]
  %41 = bitcast %"class.std::__1::__tree_node_base"** %40 to %"class.std::__1::__tree_node"**
  %42 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %41, align 8
  %43 = icmp eq %"class.std::__1::__tree_node"* %42, null
  br i1 %43, label %44, label %68

44:                                               ; preds = %38
  %45 = tail call i8* @_Znwm(i64 32) #17, !noalias !61
  %46 = getelementptr inbounds i8, i8* %45, i64 28
  %47 = bitcast i8* %46 to i32*
  store i32 %1, i32* %47, align 4, !noalias !61
  %48 = bitcast i8* %45 to %"class.std::__1::__tree_node_base"*
  %49 = getelementptr inbounds i8, i8* %45, i64 16
  %50 = bitcast i8* %49 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 0, i64 16, i1 false) #12
  store %"class.std::__1::__tree_end_node"* %39, %"class.std::__1::__tree_end_node"** %50, align 8
  %51 = bitcast %"class.std::__1::__tree_node_base"** %40 to i8**
  store i8* %45, i8** %51, align 8
  %52 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %3, i64 0, i32 0, i32 0
  %53 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %52, align 8
  %54 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %53, i64 0, i32 0
  %55 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %54, align 8
  %56 = icmp eq %"class.std::__1::__tree_node_base"* %55, null
  br i1 %56, label %61, label %57

57:                                               ; preds = %44
  %58 = ptrtoint %"class.std::__1::__tree_node_base"* %55 to i64
  %59 = bitcast %"class.std::__1::set"* %3 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %40, align 8
  br label %61

61:                                               ; preds = %57, %44
  %62 = phi %"class.std::__1::__tree_node_base"* [ %48, %44 ], [ %60, %57 ]
  %63 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %64 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %63, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %64, %"class.std::__1::__tree_node_base"* %62) #12
  %65 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %65, align 8
  br label %68

68:                                               ; preds = %38, %61
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder15getBoolConstantEb(%"class.sh::SPIRVBuilder"*, i1 zeroext) local_unnamed_addr #1 align 2 {
  %3 = alloca %"struct.sh::SpirvType", align 8
  %4 = zext i1 %1 to i64
  %5 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 15, i64 %4, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %28

8:                                                ; preds = %2
  %9 = bitcast %"struct.sh::SpirvType"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %9) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 48, i1 false)
  %10 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %3, i64 0, i32 0
  store %"class.sh::TFieldListCollection"* null, %"class.sh::TFieldListCollection"** %10, align 8
  %11 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %3, i64 0, i32 1
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %3, i64 0, i32 2
  %13 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %3, i64 0, i32 3
  store i8 1, i8* %13, align 8
  %14 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %3, i64 0, i32 4
  store i8 1, i8* %14, align 1
  %15 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %3, i64 0, i32 6
  store i32 2, i32* %15, align 4
  %16 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %3, i64 0, i32 7
  %17 = bitcast %"class.sh::TSpan"* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 21, i1 false) #12
  store i32 5, i32* %12, align 4
  %18 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %19 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %18, i64 0, i32 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = add i32 %22, 1
  store i32 %23, i32* %21, align 4
  store i32 %22, i32* %5, align 4
  %24 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  br i1 %1, label %25, label %26

25:                                               ; preds = %8
  call void @_ZN5angle5spirv17WriteConstantTrueEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_(%"class.std::__1::vector.32"* %24, i32 %20, i32 %22) #12
  br label %27

26:                                               ; preds = %8
  call void @_ZN5angle5spirv18WriteConstantFalseEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_(%"class.std::__1::vector.32"* %24, i32 %20, i32 %22) #12
  br label %27

27:                                               ; preds = %26, %25
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %9) #12
  br label %28

28:                                               ; preds = %2, %27
  %29 = phi i32 [ %6, %2 ], [ %22, %27 ]
  ret i32 %29
}

declare void @_ZN5angle5spirv17WriteConstantTrueEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_(%"class.std::__1::vector.32"*, i32, i32) local_unnamed_addr #3

declare void @_ZN5angle5spirv18WriteConstantFalseEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_(%"class.std::__1::vector.32"*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder22getBasicConstantHelperEjNS_10TBasicTypeEPN4absl13flat_hash_mapIjN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEENS2_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS8_EEEEEE(%"class.sh::SPIRVBuilder"*, i32, i32, %"class.absl::flat_hash_map.39"*) local_unnamed_addr #5 align 2 {
  %5 = alloca %"struct.sh::SpirvType", align 8
  %6 = getelementptr inbounds %"class.absl::flat_hash_map.39", %"class.absl::flat_hash_map.39"* %3, i64 0, i32 0, i32 0
  %7 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %8 = zext i32 %1 to i64
  %9 = add i64 %7, %8
  %10 = zext i64 %9 to i128
  %11 = mul nuw i128 %10, 11376068507788127593
  %12 = lshr i128 %11, 64
  %13 = xor i128 %12, %11
  %14 = trunc i128 %13 to i64
  %15 = getelementptr inbounds %"class.absl::flat_hash_map.39", %"class.absl::flat_hash_map.39"* %3, i64 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.absl::flat_hash_map.39", %"class.absl::flat_hash_map.39"* %3, i64 0, i32 0, i32 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = lshr i64 %14, 7
  %20 = ptrtoint i8* %16 to i64
  %21 = lshr i64 %20, 12
  %22 = xor i64 %19, %21
  %23 = trunc i128 %13 to i8
  %24 = and i8 %23, 127
  %25 = insertelement <16 x i8> undef, i8 %24, i32 0
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> zeroinitializer
  %27 = getelementptr inbounds %"class.absl::flat_hash_map.39", %"class.absl::flat_hash_map.39"* %3, i64 0, i32 0, i32 0, i32 1
  br label %28

28:                                               ; preds = %59, %4
  %29 = phi i64 [ %22, %4 ], [ %61, %59 ]
  %30 = phi i64 [ 0, %4 ], [ %60, %59 ]
  %31 = and i64 %29, %18
  %32 = getelementptr inbounds i8, i8* %16, i64 %31
  %33 = bitcast i8* %32 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1
  %35 = icmp eq <16 x i8> %26, %34
  %36 = bitcast <16 x i1> %35 to i16
  %37 = icmp eq i16 %36, 0
  br i1 %37, label %55, label %38

38:                                               ; preds = %28
  %39 = zext i16 %36 to i32
  %40 = load %"union.absl::container_internal::map_slot_type.42"*, %"union.absl::container_internal::map_slot_type.42"** %27, align 8
  br label %41

41:                                               ; preds = %51, %38
  %42 = phi i32 [ %39, %38 ], [ %53, %51 ]
  %43 = tail call i32 @llvm.cttz.i32(i32 %42, i1 false) #12, !range !3
  %44 = zext i32 %43 to i64
  %45 = add i64 %31, %44
  %46 = and i64 %45, %18
  %47 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %40, i64 %46
  %48 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %47, i64 0, i32 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, %1
  br i1 %50, label %62, label %51, !prof !4

51:                                               ; preds = %41
  %52 = add i32 %42, -1
  %53 = and i32 %52, %42
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %41

55:                                               ; preds = %51, %28
  %56 = icmp eq <16 x i8> %34, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %57 = bitcast <16 x i1> %56 to i16
  %58 = icmp eq i16 %57, 0
  br i1 %58, label %59, label %68, !prof !5

59:                                               ; preds = %55
  %60 = add i64 %30, 16
  %61 = add i64 %60, %31
  br label %28

62:                                               ; preds = %41
  %63 = getelementptr inbounds i8, i8* %16, i64 %46
  %64 = icmp ne i8* %63, null
  tail call void @llvm.assume(i1 %64) #12
  %65 = load i8, i8* %63, align 1
  %66 = icmp sgt i8 %65, -1
  br i1 %66, label %140, label %67, !prof !4

67:                                               ; preds = %62
  tail call void @llvm.trap() #12
  unreachable

68:                                               ; preds = %55
  %69 = bitcast %"struct.sh::SpirvType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %69) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 -86, i64 48, i1 false)
  %70 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 0
  store %"class.sh::TFieldListCollection"* null, %"class.sh::TFieldListCollection"** %70, align 8
  %71 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 1
  store i32 0, i32* %71, align 8
  %72 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 2
  %73 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 3
  store i8 1, i8* %73, align 8
  %74 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 4
  store i8 1, i8* %74, align 1
  %75 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 6
  store i32 2, i32* %75, align 4
  %76 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %5, i64 0, i32 7
  %77 = bitcast %"class.sh::TSpan"* %76 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 21, i1 false) #12
  store i32 %2, i32* %72, align 4
  %78 = call dereferenceable(12) %"struct.sh::SpirvTypeData"* @_ZN2sh12SPIRVBuilder16getSpirvTypeDataERKNS_9SpirvTypeEPKc(%"class.sh::SPIRVBuilder"* %0, %"struct.sh::SpirvType"* nonnull dereferenceable(48) %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %79 = getelementptr inbounds %"struct.sh::SpirvTypeData", %"struct.sh::SpirvTypeData"* %78, i64 0, i32 0, i32 0, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = add i32 %82, 1
  store i32 %83, i32* %81, align 4
  %84 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  call void @_ZN5angle5spirv13WriteConstantEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_NS7_INS0_20LiteralIntegerHelperEEE(%"class.std::__1::vector.32"* %84, i32 %80, i32 %82, i32 %1) #12
  %85 = load i8*, i8** %15, align 8, !noalias !64
  %86 = load i64, i64* %17, align 8, !noalias !64
  %87 = ptrtoint i8* %85 to i64
  %88 = lshr i64 %87, 12
  %89 = xor i64 %88, %19
  br label %90

90:                                               ; preds = %120, %68
  %91 = phi i64 [ %89, %68 ], [ %122, %120 ]
  %92 = phi i64 [ 0, %68 ], [ %121, %120 ]
  %93 = and i64 %91, %86
  %94 = getelementptr inbounds i8, i8* %85, i64 %93
  %95 = bitcast i8* %94 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 1, !noalias !64
  %97 = icmp eq <16 x i8> %26, %96
  %98 = bitcast <16 x i1> %97 to i16
  %99 = icmp eq i16 %98, 0
  br i1 %99, label %116, label %100

100:                                              ; preds = %90
  %101 = zext i16 %98 to i32
  %102 = load %"union.absl::container_internal::map_slot_type.42"*, %"union.absl::container_internal::map_slot_type.42"** %27, align 8, !noalias !64
  br label %103

103:                                              ; preds = %112, %100
  %104 = phi i32 [ %101, %100 ], [ %114, %112 ]
  %105 = call i32 @llvm.cttz.i32(i32 %104, i1 false) #12, !range !3
  %106 = zext i32 %105 to i64
  %107 = add i64 %93, %106
  %108 = and i64 %107, %86
  %109 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %102, i64 %108, i32 0, i32 0
  %110 = load i32, i32* %109, align 4, !noalias !64
  %111 = icmp eq i32 %110, %1
  br i1 %111, label %130, label %112, !prof !4

112:                                              ; preds = %103
  %113 = add i32 %104, -1
  %114 = and i32 %113, %104
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %103

116:                                              ; preds = %112, %90
  %117 = icmp eq <16 x i8> %96, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %118 = bitcast <16 x i1> %117 to i16
  %119 = icmp eq i16 %118, 0
  br i1 %119, label %120, label %123, !prof !5

120:                                              ; preds = %116
  %121 = add i64 %92, 16
  %122 = add i64 %121, %93
  br label %90

123:                                              ; preds = %116
  %124 = call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.41"* %6, i64 %14) #12, !noalias !64
  %125 = load %"union.absl::container_internal::map_slot_type.42"*, %"union.absl::container_internal::map_slot_type.42"** %27, align 8, !noalias !64
  %126 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %125, i64 %124, i32 0, i32 0
  store i32 %1, i32* %126, align 4, !noalias !64
  %127 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %125, i64 %124, i32 0, i32 1, i32 0, i32 0
  store i32 %82, i32* %127, align 4, !noalias !64
  %128 = load i8*, i8** %15, align 8, !noalias !64
  %129 = load %"union.absl::container_internal::map_slot_type.42"*, %"union.absl::container_internal::map_slot_type.42"** %27, align 8, !noalias !64
  br label %130

130:                                              ; preds = %103, %123
  %131 = phi %"union.absl::container_internal::map_slot_type.42"* [ %129, %123 ], [ %102, %103 ]
  %132 = phi i8* [ %128, %123 ], [ %85, %103 ]
  %133 = phi i64 [ %124, %123 ], [ %108, %103 ]
  %134 = getelementptr inbounds i8, i8* %132, i64 %133
  %135 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %131, i64 %133
  %136 = icmp ne i8* %134, null
  call void @llvm.assume(i1 %136) #12, !noalias !64
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %69) #12
  %137 = load i8, i8* %134, align 1
  %138 = icmp sgt i8 %137, -1
  br i1 %138, label %140, label %139, !prof !4

139:                                              ; preds = %130
  call void @llvm.trap() #12
  unreachable

140:                                              ; preds = %62, %130
  %141 = phi %"union.absl::container_internal::map_slot_type.42"* [ %135, %130 ], [ %47, %62 ]
  %142 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %141, i64 0, i32 0, i32 1, i32 0, i32 0
  %143 = load i32, i32* %142, align 4
  ret i32 %143
}

declare void @_ZN5angle5spirv13WriteConstantEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_NS7_INS0_20LiteralIntegerHelperEEE(%"class.std::__1::vector.32"*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder14getIntConstantEi(%"class.sh::SPIRVBuilder"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 17
  %4 = tail call i32 @_ZN2sh12SPIRVBuilder22getBasicConstantHelperEjNS_10TBasicTypeEPN4absl13flat_hash_mapIjN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEENS2_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS8_EEEEEE(%"class.sh::SPIRVBuilder"* %0, i32 %1, i32 3, %"class.absl::flat_hash_map.39"* %3)
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder16getFloatConstantEf(%"class.sh::SPIRVBuilder"*, float) local_unnamed_addr #1 align 2 {
  %3 = bitcast float %1 to i32
  %4 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 18
  %5 = tail call i32 @_ZN2sh12SPIRVBuilder22getBasicConstantHelperEjNS_10TBasicTypeEPN4absl13flat_hash_mapIjN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEENS2_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS8_EEEEEE(%"class.sh::SPIRVBuilder"* %0, i32 %3, i32 1, %"class.absl::flat_hash_map.39"* %4)
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder20getCompositeConstantEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEERKNS1_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(%"class.sh::SPIRVBuilder"*, i32, %"class.angle::FastVector"* dereferenceable(56)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"struct.sh::SpirvIdAndIdList", align 8
  %5 = alloca %"struct.std::__1::pair.60", align 8
  %6 = bitcast %"struct.sh::SpirvIdAndIdList"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #12
  %7 = bitcast %"struct.sh::SpirvIdAndIdList"* %4 to i64*
  store i64 -6148914691236517206, i64* %7, align 8
  %8 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 0, i32 0, i32 0
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 1
  %10 = bitcast %"class.angle::FastVector"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #12
  %11 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 1, i32 1
  %12 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %9, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %12, %"class.angle::spirv::BoxedUint32"** %11, align 8
  %13 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 1, i32 2
  %14 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 1, i32 3
  %15 = bitcast i64* %13 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %15, align 8
  %16 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %17, 8
  br i1 %18, label %19, label %34

19:                                               ; preds = %3, %19
  %20 = phi i64 [ %22, %19 ], [ 8, %3 ]
  %21 = icmp ult i64 %20, %17
  %22 = shl i64 %20, 1
  br i1 %21, label %19, label %23

23:                                               ; preds = %19
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %20, i64 4) #12
  %25 = extractvalue { i64, i1 } %24, 1
  %26 = extractvalue { i64, i1 } %24, 0
  %27 = select i1 %25, i64 -1, i64 %26
  %28 = call i8* @_Znam(i64 %27) #17
  %29 = icmp eq i64 %20, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %23
  %31 = shl nsw i64 %20, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %28, i8 0, i64 %31, i1 false) #12
  br label %32

32:                                               ; preds = %23, %30
  %33 = bitcast %"class.angle::spirv::BoxedUint32"** %11 to i8**
  store i8* %28, i8** %33, align 8
  store i64 %20, i64* %14, align 8
  store i64 %17, i64* %13, align 8
  br label %36

34:                                               ; preds = %3
  store i64 %17, i64* %13, align 8
  %35 = icmp eq i64 %17, 0
  br i1 %35, label %42, label %36

36:                                               ; preds = %32, %34
  %37 = phi i8* [ %28, %32 ], [ %10, %34 ]
  %38 = shl nuw i64 %17, 2
  %39 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 1
  %40 = bitcast %"class.angle::spirv::BoxedUint32"** %39 to i8**
  %41 = load i8*, i8** %40, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %41, i64 %38, i1 false) #12
  br label %42

42:                                               ; preds = %34, %36
  %43 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 19, i32 0, i32 0
  %44 = call { i8*, %"union.absl::container_internal::map_slot_type.57"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE4findIS4_EENSK_8iteratorERSH_(%"class.absl::container_internal::raw_hash_set.56"* %43, %"struct.sh::SpirvIdAndIdList"* nonnull dereferenceable(64) %4)
  %45 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.57"* } %44, 0
  %46 = icmp eq i8* %45, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %42
  %48 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.57"* } %44, 1
  %49 = load i8, i8* %45, align 1
  %50 = icmp sgt i8 %49, -1
  br i1 %50, label %185, label %51, !prof !4

51:                                               ; preds = %47
  call void @llvm.trap() #12
  unreachable

52:                                               ; preds = %42
  %53 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 6, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = add i32 %54, 1
  store i32 %55, i32* %53, align 4
  %56 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 11
  call void @_ZN5angle5spirv22WriteConstantCompositeEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_RKNS_10FastVectorIS9_Lm8ENS1_5arrayIS9_Lm8EEEEE(%"class.std::__1::vector.32"* %56, i32 %1, i32 %54, %"class.angle::FastVector"* dereferenceable(56) %2) #12
  %57 = bitcast %"struct.std::__1::pair.60"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %57) #12
  %58 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %59 = load i32, i32* %8, align 8
  store i32 %59, i32* %58, align 8
  %60 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1
  %61 = bitcast %"class.angle::FastVector"* %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 32, i1 false) #12
  %62 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 1
  %63 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %60, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %63, %"class.angle::spirv::BoxedUint32"** %62, align 8
  %64 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 2
  %65 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 3
  %66 = bitcast i64* %64 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %66, align 8
  %67 = load i64, i64* %13, align 8
  %68 = icmp ugt i64 %67, 8
  br i1 %68, label %69, label %84

69:                                               ; preds = %52, %69
  %70 = phi i64 [ %72, %69 ], [ 8, %52 ]
  %71 = icmp ult i64 %70, %67
  %72 = shl i64 %70, 1
  br i1 %71, label %69, label %73

73:                                               ; preds = %69
  %74 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %70, i64 4) #12
  %75 = extractvalue { i64, i1 } %74, 1
  %76 = extractvalue { i64, i1 } %74, 0
  %77 = select i1 %75, i64 -1, i64 %76
  %78 = call i8* @_Znam(i64 %77) #17
  %79 = icmp eq i64 %70, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %73
  %81 = shl nsw i64 %70, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %78, i8 0, i64 %81, i1 false) #12
  br label %82

82:                                               ; preds = %73, %80
  %83 = bitcast %"class.angle::spirv::BoxedUint32"** %62 to i8**
  store i8* %78, i8** %83, align 8
  store i64 %70, i64* %65, align 8
  store i64 %67, i64* %64, align 8
  br label %86

84:                                               ; preds = %52
  store i64 %67, i64* %64, align 8
  %85 = icmp eq i64 %67, 0
  br i1 %85, label %91, label %86

86:                                               ; preds = %82, %84
  %87 = phi i8* [ %78, %82 ], [ %61, %84 ]
  %88 = shl nuw i64 %67, 2
  %89 = bitcast %"class.angle::spirv::BoxedUint32"** %11 to i8**
  %90 = load i8*, i8** %89, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %87, i8* align 4 %90, i64 %88, i1 false) #12
  br label %91

91:                                               ; preds = %84, %86
  %92 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 1, i32 0, i32 0
  store i32 %54, i32* %92, align 8
  %93 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0
  %94 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE22find_or_prepare_insertIS4_EENSG_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.56"* %43, %"struct.sh::SpirvIdAndIdList"* nonnull dereferenceable(64) %93) #12, !noalias !69
  %95 = extractvalue { i64, i8 } %94, 0
  %96 = extractvalue { i64, i8 } %94, 1
  %97 = and i8 %96, 1
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %166, label %99

99:                                               ; preds = %91
  %100 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 19, i32 0, i32 0, i32 1
  %101 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %100, align 8, !noalias !69
  %102 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 0, i32 0, i32 0
  %103 = load i32, i32* %58, align 8, !noalias !69
  store i32 %103, i32* %102, align 8, !noalias !69
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1
  %105 = bitcast %"class.angle::FastVector"* %104 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %105, i8 0, i64 32, i1 false) #12, !noalias !69
  %106 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 1
  %107 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %104, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %107, %"class.angle::spirv::BoxedUint32"** %106, align 8, !noalias !69
  %108 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 2
  %109 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 3
  %110 = bitcast i64* %108 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %110, align 8, !noalias !69
  %111 = load i64, i64* %64, align 8
  store i64 %111, i64* %108, align 8
  store i64 0, i64* %64, align 8
  %112 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %62, align 8
  %113 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %106, align 8
  %114 = icmp eq %"class.angle::spirv::BoxedUint32"* %113, %107
  br i1 %114, label %115, label %116

115:                                              ; preds = %99
  store %"class.angle::spirv::BoxedUint32"* %63, %"class.angle::spirv::BoxedUint32"** %62, align 8
  br label %119

116:                                              ; preds = %99
  %117 = ptrtoint %"class.angle::spirv::BoxedUint32"* %113 to i64
  %118 = bitcast %"class.angle::spirv::BoxedUint32"** %62 to i64*
  store i64 %117, i64* %118, align 8
  br label %119

119:                                              ; preds = %116, %115
  %120 = icmp eq %"class.angle::spirv::BoxedUint32"* %112, %63
  %121 = select i1 %120, %"class.angle::spirv::BoxedUint32"* %107, %"class.angle::spirv::BoxedUint32"* %112
  store %"class.angle::spirv::BoxedUint32"* %121, %"class.angle::spirv::BoxedUint32"** %106, align 8
  %122 = load i64, i64* %109, align 8
  %123 = load i64, i64* %65, align 8
  store i64 %123, i64* %109, align 8
  store i64 %122, i64* %65, align 8
  %124 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %106, align 8
  %125 = icmp eq %"class.angle::spirv::BoxedUint32"* %124, %107
  %126 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %62, align 8
  %127 = icmp eq %"class.angle::spirv::BoxedUint32"* %126, %63
  %128 = or i1 %125, %127
  br i1 %128, label %129, label %162

129:                                              ; preds = %119
  %130 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %104, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %60, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %133 = load i32, i32* %132, align 8
  store i32 %133, i32* %130, align 4
  store i32 %131, i32* %132, align 8
  %134 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 1, i32 0, i32 0
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 1, i32 0, i32 0
  %137 = load i32, i32* %136, align 4
  store i32 %137, i32* %134, align 4
  store i32 %135, i32* %136, align 4
  %138 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 2, i32 0, i32 0
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 2, i32 0, i32 0
  %141 = load i32, i32* %140, align 8
  store i32 %141, i32* %138, align 4
  store i32 %139, i32* %140, align 8
  %142 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 3, i32 0, i32 0
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 3, i32 0, i32 0
  %145 = load i32, i32* %144, align 4
  store i32 %145, i32* %142, align 4
  store i32 %143, i32* %144, align 4
  %146 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 4, i32 0, i32 0
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 4, i32 0, i32 0
  %149 = load i32, i32* %148, align 8
  store i32 %149, i32* %146, align 4
  store i32 %147, i32* %148, align 8
  %150 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 5, i32 0, i32 0
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 5, i32 0, i32 0
  %153 = load i32, i32* %152, align 4
  store i32 %153, i32* %150, align 4
  store i32 %151, i32* %152, align 4
  %154 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 6, i32 0, i32 0
  %155 = load i32, i32* %154, align 4
  %156 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 6, i32 0, i32 0
  %157 = load i32, i32* %156, align 8
  store i32 %157, i32* %154, align 4
  store i32 %155, i32* %156, align 8
  %158 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 0, i32 1, i32 0, i32 0, i64 7, i32 0, i32 0
  %159 = load i32, i32* %158, align 4
  %160 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 7, i32 0, i32 0
  %161 = load i32, i32* %160, align 4
  store i32 %161, i32* %158, align 4
  store i32 %159, i32* %160, align 4
  br label %162

162:                                              ; preds = %119, %129
  %163 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %101, i64 %95, i32 1
  %164 = bitcast [8 x i8]* %163 to i32*
  %165 = load i32, i32* %92, align 8, !noalias !69
  store i32 %165, i32* %164, align 8, !noalias !69
  br label %166

166:                                              ; preds = %91, %162
  %167 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %43, i64 0, i32 0
  %168 = load i8*, i8** %167, align 8, !noalias !69
  %169 = getelementptr inbounds i8, i8* %168, i64 %95
  %170 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 19, i32 0, i32 0, i32 1
  %171 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %170, align 8, !noalias !69
  %172 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %171, i64 %95
  %173 = icmp ne i8* %169, null
  call void @llvm.assume(i1 %173) #12, !noalias !69
  store i64 0, i64* %64, align 8
  %174 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %62, align 8
  %175 = getelementptr inbounds %"struct.std::__1::pair.60", %"struct.std::__1::pair.60"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %176 = icmp eq %"class.angle::spirv::BoxedUint32"* %174, %175
  %177 = icmp eq %"class.angle::spirv::BoxedUint32"* %174, null
  %178 = or i1 %176, %177
  br i1 %178, label %181, label %179

179:                                              ; preds = %166
  %180 = bitcast %"class.angle::spirv::BoxedUint32"* %174 to i8*
  call void @_ZdaPv(i8* %180) #17
  br label %181

181:                                              ; preds = %179, %166
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %57) #12
  %182 = load i8, i8* %169, align 1
  %183 = icmp sgt i8 %182, -1
  br i1 %183, label %185, label %184, !prof !4

184:                                              ; preds = %181
  call void @llvm.trap() #12
  unreachable

185:                                              ; preds = %47, %181
  %186 = phi %"union.absl::container_internal::map_slot_type.57"* [ %172, %181 ], [ %48, %47 ]
  %187 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %186, i64 0, i32 1
  %188 = bitcast [8 x i8]* %187 to i32*
  %189 = load i32, i32* %188, align 8
  store i64 0, i64* %13, align 8
  %190 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %11, align 8
  %191 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %4, i64 0, i32 1, i32 0, i32 0, i64 0
  %192 = icmp eq %"class.angle::spirv::BoxedUint32"* %190, %191
  %193 = icmp eq %"class.angle::spirv::BoxedUint32"* %190, null
  %194 = or i1 %192, %193
  br i1 %194, label %197, label %195

195:                                              ; preds = %185
  %196 = bitcast %"class.angle::spirv::BoxedUint32"* %190 to i8*
  call void @_ZdaPv(i8* %196) #17
  br label %197

197:                                              ; preds = %185, %195
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #12
  ret i32 %189
}

declare void @_ZN5angle5spirv22WriteConstantCompositeEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEES9_RKNS_10FastVectorIS9_Lm8ENS1_5arrayIS9_Lm8EEEEE(%"class.std::__1::vector.32"*, i32, i32, %"class.angle::FastVector"* dereferenceable(56)) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder17nextUnusedBindingEv(%"class.sh::SPIRVBuilder"* nocapture) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 24
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, 1
  store i32 %4, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder23nextUnusedInputLocationEj(%"class.sh::SPIRVBuilder"* nocapture, i32) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 25
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, %1
  store i32 %5, i32* %3, align 4
  ret i32 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN2sh12SPIRVBuilder24nextUnusedOutputLocationEj(%"class.sh::SPIRVBuilder"* nocapture, i32) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 26
  %4 = load i32, i32* %3, align 8
  %5 = add i32 %4, %1
  store i32 %5, i32* %3, align 8
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12SPIRVBuilder16addExecutionModeEN3spv13ExecutionModeE(%"class.sh::SPIRVBuilder"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node.203"**
  %6 = load %"class.std::__1::__tree_node.203"*, %"class.std::__1::__tree_node.203"** %5, align 8
  %7 = icmp eq %"class.std::__1::__tree_node.203"* %6, null
  br i1 %7, label %36, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %10

10:                                               ; preds = %32, %8
  %11 = phi %"class.std::__1::__tree_node.203"* [ %35, %32 ], [ %6, %8 ]
  %12 = phi %"class.std::__1::__tree_node_base"** [ %34, %32 ], [ %9, %8 ]
  %13 = getelementptr inbounds %"class.std::__1::__tree_node.203", %"class.std::__1::__tree_node.203"* %11, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %14, %1
  br i1 %15, label %16, label %22

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.std::__1::__tree_node.203", %"class.std::__1::__tree_node.203"* %11, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %19, label %20, label %32

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.std::__1::__tree_node.203", %"class.std::__1::__tree_node.203"* %11, i64 0, i32 0, i32 0
  br label %38

22:                                               ; preds = %10
  %23 = icmp slt i32 %14, %1
  br i1 %23, label %24, label %30

24:                                               ; preds = %22
  %25 = getelementptr inbounds %"class.std::__1::__tree_node.203", %"class.std::__1::__tree_node.203"* %11, i64 0, i32 0, i32 1
  %26 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %25, align 8
  %27 = icmp eq %"class.std::__1::__tree_node_base"* %26, null
  br i1 %27, label %28, label %32

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.std::__1::__tree_node.203", %"class.std::__1::__tree_node.203"* %11, i64 0, i32 0, i32 0
  br label %38

30:                                               ; preds = %22
  %31 = getelementptr inbounds %"class.std::__1::__tree_node.203", %"class.std::__1::__tree_node.203"* %11, i64 0, i32 0, i32 0
  br label %38

32:                                               ; preds = %24, %16
  %33 = phi %"class.std::__1::__tree_node_base"* [ %18, %16 ], [ %26, %24 ]
  %34 = phi %"class.std::__1::__tree_node_base"** [ %17, %16 ], [ %25, %24 ]
  %35 = bitcast %"class.std::__1::__tree_node_base"* %33 to %"class.std::__1::__tree_node.203"*
  br label %10

36:                                               ; preds = %2
  %37 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %4, i64 0, i32 0
  br label %38

38:                                               ; preds = %36, %30, %28, %20
  %39 = phi %"class.std::__1::__tree_end_node"* [ %4, %36 ], [ %21, %20 ], [ %29, %28 ], [ %31, %30 ]
  %40 = phi %"class.std::__1::__tree_node_base"** [ %37, %36 ], [ %17, %20 ], [ %25, %28 ], [ %12, %30 ]
  %41 = bitcast %"class.std::__1::__tree_node_base"** %40 to %"class.std::__1::__tree_node.203"**
  %42 = load %"class.std::__1::__tree_node.203"*, %"class.std::__1::__tree_node.203"** %41, align 8
  %43 = icmp eq %"class.std::__1::__tree_node.203"* %42, null
  br i1 %43, label %44, label %68

44:                                               ; preds = %38
  %45 = tail call i8* @_Znwm(i64 32) #17, !noalias !84
  %46 = getelementptr inbounds i8, i8* %45, i64 28
  %47 = bitcast i8* %46 to i32*
  store i32 %1, i32* %47, align 4, !noalias !84
  %48 = bitcast i8* %45 to %"class.std::__1::__tree_node_base"*
  %49 = getelementptr inbounds i8, i8* %45, i64 16
  %50 = bitcast i8* %49 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 0, i64 16, i1 false) #12
  store %"class.std::__1::__tree_end_node"* %39, %"class.std::__1::__tree_end_node"** %50, align 8
  %51 = bitcast %"class.std::__1::__tree_node_base"** %40 to i8**
  store i8* %45, i8** %51, align 8
  %52 = getelementptr inbounds %"class.std::__1::set.13", %"class.std::__1::set.13"* %3, i64 0, i32 0, i32 0
  %53 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %52, align 8
  %54 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %53, i64 0, i32 0
  %55 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %54, align 8
  %56 = icmp eq %"class.std::__1::__tree_node_base"* %55, null
  br i1 %56, label %61, label %57

57:                                               ; preds = %44
  %58 = ptrtoint %"class.std::__1::__tree_node_base"* %55 to i64
  %59 = bitcast %"class.std::__1::set.13"* %3 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %40, align 8
  br label %61

61:                                               ; preds = %57, %44
  %62 = phi %"class.std::__1::__tree_node_base"* [ %48, %44 ], [ %60, %57 ]
  %63 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 0
  %64 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %63, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %64, %"class.std::__1::__tree_node_base"* %62) #12
  %65 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %65, align 8
  br label %68

68:                                               ; preds = %38, %61
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2sh12SPIRVBuilder15setEntryPointIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"* nocapture, i32) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 5, i32 0, i32 0
  store i32 %1, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12SPIRVBuilder32addEntryPointInterfaceVariableIdEN5angle5spirv11BoxedUint32INS2_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"*, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 4, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 4, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  br i1 %7, label %8, label %52

8:                                                ; preds = %2
  %9 = add i64 %4, 1
  %10 = icmp eq i64 %4, -1
  br i1 %10, label %52, label %11

11:                                               ; preds = %8
  %12 = icmp ugt i64 %4, 8
  %13 = select i1 %12, i64 %4, i64 8
  br label %14

14:                                               ; preds = %14, %11
  %15 = phi i64 [ %13, %11 ], [ %17, %14 ]
  %16 = icmp ult i64 %15, %9
  %17 = shl i64 %15, 1
  br i1 %16, label %14, label %18

18:                                               ; preds = %14
  %19 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %15, i64 4) #12
  %20 = extractvalue { i64, i1 } %19, 1
  %21 = extractvalue { i64, i1 } %19, 0
  %22 = select i1 %20, i64 -1, i64 %21
  %23 = tail call i8* @_Znam(i64 %22) #17
  %24 = icmp eq i64 %15, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %18
  %26 = shl nsw i64 %15, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %23, i8 0, i64 %26, i1 false) #12
  br label %27

27:                                               ; preds = %25, %18
  %28 = icmp eq i64 %4, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %27
  %30 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 4, i32 1
  %31 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %30, align 8
  %32 = bitcast %"class.angle::spirv::BoxedUint32"* %31 to i8*
  br label %39

33:                                               ; preds = %27
  %34 = shl nuw i64 %4, 2
  %35 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 4, i32 1
  %36 = bitcast %"class.angle::spirv::BoxedUint32"** %35 to i8**
  %37 = load i8*, i8** %36, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %23, i8* align 4 %37, i64 %34, i1 false) #12
  %38 = bitcast i8* %37 to %"class.angle::spirv::BoxedUint32"*
  br label %39

39:                                               ; preds = %33, %29
  %40 = phi i8* [ %32, %29 ], [ %37, %33 ]
  %41 = phi %"class.angle::spirv::BoxedUint32"* [ %31, %29 ], [ %38, %33 ]
  %42 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 4, i32 1
  %43 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 4, i32 0, i32 0, i64 0
  %44 = icmp eq %"class.angle::spirv::BoxedUint32"* %41, %43
  %45 = icmp eq %"class.angle::spirv::BoxedUint32"* %41, null
  %46 = or i1 %44, %45
  br i1 %46, label %49, label %47

47:                                               ; preds = %39
  tail call void @_ZdaPv(i8* %40) #17
  %48 = load i64, i64* %3, align 8
  br label %49

49:                                               ; preds = %47, %39
  %50 = phi i64 [ %48, %47 ], [ %4, %39 ]
  %51 = bitcast %"class.angle::spirv::BoxedUint32"** %42 to i8**
  store i8* %23, i8** %51, align 8
  store i64 %15, i64* %5, align 8
  br label %52

52:                                               ; preds = %2, %8, %49
  %53 = phi i64 [ %50, %49 ], [ -1, %8 ], [ %4, %2 ]
  %54 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 4, i32 1
  %55 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %54, align 8
  %56 = add i64 %53, 1
  store i64 %56, i64* %3, align 8
  %57 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %55, i64 %53, i32 0, i32 0
  store i32 %1, i32* %57, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12SPIRVBuilder22writePerVertexBuiltInsERKNS_5TTypeEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"*, %"class.sh::TType"* nocapture readonly dereferenceable(184), i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.angle::FastVector.105", align 8
  %5 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 12
  %6 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TInterfaceBlock", %"class.sh::TInterfaceBlock"* %6, i64 0, i32 1, i32 0
  %8 = load %"class.sh::TVector"*, %"class.sh::TVector"** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.sh::TField"**, %"class.sh::TField"*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %8, i64 0, i32 0, i32 0, i32 1
  %12 = load %"class.sh::TField"**, %"class.sh::TField"*** %11, align 8
  %13 = icmp eq %"class.sh::TField"** %10, %12
  br i1 %13, label %22, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 10
  %16 = bitcast %"class.angle::FastVector.105"* %4 to i8*
  %17 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 1
  %18 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 0, i32 0, i64 0
  %19 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 2
  %20 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %21 = bitcast i64* %19 to <2 x i64>*
  br label %23

22:                                               ; preds = %43, %3
  ret void

23:                                               ; preds = %14, %43
  %24 = phi i32 [ 0, %14 ], [ %36, %43 ]
  %25 = phi %"class.sh::TField"** [ %10, %14 ], [ %44, %43 ]
  %26 = load %"class.sh::TField"*, %"class.sh::TField"** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %26, i64 0, i32 0
  %28 = load %"class.sh::TType"*, %"class.sh::TType"** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %28, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  switch i32 %30, label %34 [
    i32 36, label %33
    i32 21, label %31
    i32 35, label %32
  ]

31:                                               ; preds = %23
  br label %34

32:                                               ; preds = %23
  br label %34

33:                                               ; preds = %23
  br label %34

34:                                               ; preds = %23, %33, %32, %31
  %35 = phi i32 [ 4, %33 ], [ 3, %32 ], [ 1, %31 ], [ 0, %23 ]
  %36 = add i32 %24, 1
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %16) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 32, i1 false) #12
  store %"class.angle::spirv::BoxedUint32.104"* %18, %"class.angle::spirv::BoxedUint32.104"** %17, align 8
  store <2 x i64> <i64 1, i64 8>, <2 x i64>* %21, align 8
  store i32 %35, i32* %20, align 8
  call void @_ZN5angle5spirv19WriteMemberDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEENS7_INS0_20LiteralIntegerHelperEEEN3spv10DecorationERKNS_10FastVectorISB_Lm8ENS1_5arrayISB_Lm8EEEEE(%"class.std::__1::vector.32"* %15, i32 %2, i32 %24, i32 11, %"class.angle::FastVector.105"* nonnull dereferenceable(56) %4) #12
  store i64 0, i64* %19, align 8
  %37 = load %"class.angle::spirv::BoxedUint32.104"*, %"class.angle::spirv::BoxedUint32.104"** %17, align 8
  %38 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %37, %18
  %39 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %37, null
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %34
  %42 = bitcast %"class.angle::spirv::BoxedUint32.104"* %37 to i8*
  call void @_ZdaPv(i8* %42) #17
  br label %43

43:                                               ; preds = %34, %41
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %16) #12
  %44 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %25, i64 1
  %45 = icmp eq %"class.sh::TField"** %44, %12
  br i1 %45, label %22, label %23
}

declare void @_ZN5angle5spirv19WriteMemberDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEENS7_INS0_20LiteralIntegerHelperEEEN3spv10DecorationERKNS_10FastVectorISB_Lm8ENS1_5arrayISB_Lm8EEEEE(%"class.std::__1::vector.32"*, i32, i32, i32, %"class.angle::FastVector.105"* dereferenceable(56)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12SPIRVBuilder33writeInterfaceVariableDecorationsERKNS_5TTypeEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEE(%"class.sh::SPIRVBuilder"*, %"class.sh::TType"* dereferenceable(184), i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.angle::FastVector.105", align 8
  %5 = alloca %"class.angle::FastVector.105", align 8
  %6 = alloca %"class.angle::FastVector.105", align 8
  %7 = alloca %"class.angle::FastVector.105", align 8
  %8 = alloca %"class.angle::FastVector.105", align 8
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 7, i32 20
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 7, i32 21
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, -8
  %16 = icmp ult i32 %15, 43
  br i1 %16, label %30, label %17

17:                                               ; preds = %3
  %18 = icmp eq i32 %14, 91
  br i1 %18, label %19, label %24

19:                                               ; preds = %17
  %20 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, -2
  %23 = icmp eq i32 %22, 6
  br i1 %23, label %30, label %27

24:                                               ; preds = %17
  %25 = add i32 %14, -51
  %26 = icmp ult i32 %25, 33
  br i1 %26, label %30, label %27

27:                                               ; preds = %19, %24
  %28 = add i32 %14, -84
  %29 = icmp ult i32 %28, 6
  br label %30

30:                                               ; preds = %19, %27, %24, %3
  %31 = phi i1 [ true, %24 ], [ true, %3 ], [ %29, %27 ], [ true, %19 ]
  %32 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  switch i32 %33, label %34 [
    i32 3, label %38
    i32 9, label %38
    i32 10, label %38
  ]

34:                                               ; preds = %30
  %35 = tail call zeroext i1 @_ZN2sh9IsVaryingENS_10TQualifierE(i32 %33) #12
  %36 = load i32, i32* %13, align 8
  %37 = load i32, i32* %32, align 8
  br label %38

38:                                               ; preds = %30, %30, %30, %34
  %39 = phi i32 [ %33, %30 ], [ %37, %34 ], [ %33, %30 ], [ %33, %30 ]
  %40 = phi i32 [ %14, %30 ], [ %36, %34 ], [ %14, %30 ], [ %14, %30 ]
  %41 = phi i1 [ true, %30 ], [ %35, %34 ], [ true, %30 ], [ true, %30 ]
  %42 = add i32 %40, -84
  %43 = icmp ult i32 %42, 6
  %44 = icmp eq i32 %39, 10
  %45 = icmp sgt i32 %10, -1
  %46 = and i1 %45, %44
  br i1 %31, label %47, label %78

47:                                               ; preds = %38
  %48 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 10
  %49 = bitcast %"class.angle::FastVector.105"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %49) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 0, i64 32, i1 false) #12
  %50 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 1
  %51 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32.104"* %51, %"class.angle::spirv::BoxedUint32.104"** %50, align 8
  %52 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 2
  %53 = bitcast i64* %52 to <2 x i64>*
  store <2 x i64> <i64 1, i64 8>, <2 x i64>* %53, align 8
  %54 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %4, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  store i32 0, i32* %54, align 8
  call void @_ZN5angle5spirv13WriteDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv10DecorationERKNS_10FastVectorINS7_INS0_20LiteralIntegerHelperEEELm8ENS1_5arrayISE_Lm8EEEEE(%"class.std::__1::vector.32"* %48, i32 %2, i32 34, %"class.angle::FastVector.105"* nonnull dereferenceable(56) %4) #12
  store i64 0, i64* %52, align 8
  %55 = load %"class.angle::spirv::BoxedUint32.104"*, %"class.angle::spirv::BoxedUint32.104"** %50, align 8
  %56 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %55, %51
  %57 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %55, null
  %58 = or i1 %56, %57
  br i1 %58, label %61, label %59

59:                                               ; preds = %47
  %60 = bitcast %"class.angle::spirv::BoxedUint32.104"* %55 to i8*
  call void @_ZdaPv(i8* %60) #17
  br label %61

61:                                               ; preds = %47, %59
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %49) #12
  %62 = bitcast %"class.angle::FastVector.105"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %62) #12
  %63 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 24
  %64 = load i32, i32* %63, align 8
  %65 = add i32 %64, 1
  store i32 %65, i32* %63, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 0, i64 32, i1 false) #12
  %66 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %5, i64 0, i32 1
  %67 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %5, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32.104"* %67, %"class.angle::spirv::BoxedUint32.104"** %66, align 8
  %68 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %5, i64 0, i32 2
  %69 = bitcast i64* %68 to <2 x i64>*
  store <2 x i64> <i64 1, i64 8>, <2 x i64>* %69, align 8
  %70 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %5, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  store i32 %64, i32* %70, align 8
  call void @_ZN5angle5spirv13WriteDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv10DecorationERKNS_10FastVectorINS7_INS0_20LiteralIntegerHelperEEELm8ENS1_5arrayISE_Lm8EEEEE(%"class.std::__1::vector.32"* %48, i32 %2, i32 33, %"class.angle::FastVector.105"* nonnull dereferenceable(56) %5) #12
  store i64 0, i64* %68, align 8
  %71 = load %"class.angle::spirv::BoxedUint32.104"*, %"class.angle::spirv::BoxedUint32.104"** %66, align 8
  %72 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %71, %67
  %73 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %71, null
  %74 = or i1 %72, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %61
  %76 = bitcast %"class.angle::spirv::BoxedUint32.104"* %71 to i8*
  call void @_ZdaPv(i8* %76) #17
  br label %77

77:                                               ; preds = %61, %75
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %62) #12
  br label %78

78:                                               ; preds = %77, %38
  br i1 %41, label %79, label %110

79:                                               ; preds = %78
  %80 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 0
  %81 = load i8, i8* %80, align 8
  %82 = call i32 @_ZN2gl8ToGLenumENS_10ShaderTypeE(i8 zeroext %81) #12
  %83 = call i32 @_ZN2sh29CalculateVaryingLocationCountERKNS_5TTypeEj(%"class.sh::TType"* dereferenceable(184) %1, i32 %82) #12
  %84 = load i32, i32* %32, align 8
  %85 = call zeroext i1 @_ZN2sh10IsShaderInENS_10TQualifierE(i32 %84)
  br i1 %85, label %86, label %90

86:                                               ; preds = %79
  %87 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 25
  %88 = load i32, i32* %87, align 4
  %89 = add i32 %88, %83
  store i32 %89, i32* %87, align 4
  br label %94

90:                                               ; preds = %79
  %91 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 26
  %92 = load i32, i32* %91, align 8
  %93 = add i32 %92, %83
  store i32 %93, i32* %91, align 8
  br label %94

94:                                               ; preds = %90, %86
  %95 = phi i32 [ %88, %86 ], [ %92, %90 ]
  %96 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 10
  %97 = bitcast %"class.angle::FastVector.105"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %97) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %97, i8 0, i64 32, i1 false) #12
  %98 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %6, i64 0, i32 1
  %99 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %6, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32.104"* %99, %"class.angle::spirv::BoxedUint32.104"** %98, align 8
  %100 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %6, i64 0, i32 2
  %101 = bitcast i64* %100 to <2 x i64>*
  store <2 x i64> <i64 1, i64 8>, <2 x i64>* %101, align 8
  %102 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %6, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  store i32 %95, i32* %102, align 8
  call void @_ZN5angle5spirv13WriteDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv10DecorationERKNS_10FastVectorINS7_INS0_20LiteralIntegerHelperEEELm8ENS1_5arrayISE_Lm8EEEEE(%"class.std::__1::vector.32"* %96, i32 %2, i32 30, %"class.angle::FastVector.105"* nonnull dereferenceable(56) %6) #12
  store i64 0, i64* %100, align 8
  %103 = load %"class.angle::spirv::BoxedUint32.104"*, %"class.angle::spirv::BoxedUint32.104"** %98, align 8
  %104 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %103, %99
  %105 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %103, null
  %106 = or i1 %104, %105
  br i1 %106, label %109, label %107

107:                                              ; preds = %94
  %108 = bitcast %"class.angle::spirv::BoxedUint32.104"* %103 to i8*
  call void @_ZdaPv(i8* %108) #17
  br label %109

109:                                              ; preds = %94, %107
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %97) #12
  br label %110

110:                                              ; preds = %109, %78
  br i1 %43, label %111, label %126

111:                                              ; preds = %110
  %112 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 10
  %113 = bitcast %"class.angle::FastVector.105"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %113) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %113, i8 0, i64 32, i1 false) #12
  %114 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %7, i64 0, i32 1
  %115 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %7, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32.104"* %115, %"class.angle::spirv::BoxedUint32.104"** %114, align 8
  %116 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %7, i64 0, i32 2
  %117 = bitcast i64* %116 to <2 x i64>*
  store <2 x i64> <i64 1, i64 8>, <2 x i64>* %117, align 8
  %118 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %7, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  store i32 %12, i32* %118, align 8
  call void @_ZN5angle5spirv13WriteDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv10DecorationERKNS_10FastVectorINS7_INS0_20LiteralIntegerHelperEEELm8ENS1_5arrayISE_Lm8EEEEE(%"class.std::__1::vector.32"* %112, i32 %2, i32 43, %"class.angle::FastVector.105"* nonnull dereferenceable(56) %7) #12
  store i64 0, i64* %116, align 8
  %119 = load %"class.angle::spirv::BoxedUint32.104"*, %"class.angle::spirv::BoxedUint32.104"** %114, align 8
  %120 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %119, %115
  %121 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %119, null
  %122 = or i1 %120, %121
  br i1 %122, label %125, label %123

123:                                              ; preds = %111
  %124 = bitcast %"class.angle::spirv::BoxedUint32.104"* %119 to i8*
  call void @_ZdaPv(i8* %124) #17
  br label %125

125:                                              ; preds = %111, %123
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %113) #12
  br label %126

126:                                              ; preds = %125, %110
  br i1 %46, label %127, label %142

127:                                              ; preds = %126
  %128 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 10
  %129 = bitcast %"class.angle::FastVector.105"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %129) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %129, i8 0, i64 32, i1 false) #12
  %130 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %8, i64 0, i32 1
  %131 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %8, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32.104"* %131, %"class.angle::spirv::BoxedUint32.104"** %130, align 8
  %132 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %8, i64 0, i32 2
  %133 = bitcast i64* %132 to <2 x i64>*
  store <2 x i64> <i64 1, i64 8>, <2 x i64>* %133, align 8
  %134 = getelementptr inbounds %"class.angle::FastVector.105", %"class.angle::FastVector.105"* %8, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  store i32 %10, i32* %134, align 8
  call void @_ZN5angle5spirv13WriteDecorateEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv10DecorationERKNS_10FastVectorINS7_INS0_20LiteralIntegerHelperEEELm8ENS1_5arrayISE_Lm8EEEEE(%"class.std::__1::vector.32"* %128, i32 %2, i32 32, %"class.angle::FastVector.105"* nonnull dereferenceable(56) %8) #12
  store i64 0, i64* %132, align 8
  %135 = load %"class.angle::spirv::BoxedUint32.104"*, %"class.angle::spirv::BoxedUint32.104"** %130, align 8
  %136 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %135, %131
  %137 = icmp eq %"class.angle::spirv::BoxedUint32.104"* %135, null
  %138 = or i1 %136, %137
  br i1 %138, label %141, label %139

139:                                              ; preds = %127
  %140 = bitcast %"class.angle::spirv::BoxedUint32.104"* %135 to i8*
  call void @_ZdaPv(i8* %140) #17
  br label %141

141:                                              ; preds = %127, %139
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %129) #12
  br label %142

142:                                              ; preds = %141, %126
  ret void
}

declare zeroext i1 @_ZN2sh9IsVaryingENS_10TQualifierE(i32) local_unnamed_addr #3

declare i32 @_ZN2sh29CalculateVaryingLocationCountERKNS_5TTypeEj(%"class.sh::TType"* dereferenceable(184), i32) local_unnamed_addr #3

declare i32 @_ZN2gl8ToGLenumENS_10ShaderTypeE(i8 zeroext) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh10IsShaderInENS_10TQualifierE(i32) local_unnamed_addr #4 comdat {
  switch i32 %0, label %2 [
    i32 9, label %3
    i32 82, label %3
    i32 88, label %3
    i32 72, label %3
    i32 12, label %3
    i32 74, label %3
    i32 3, label %3
    i32 4, label %3
    i32 49, label %3
    i32 50, label %3
    i32 51, label %3
    i32 52, label %3
    i32 53, label %3
    i32 80, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %4 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZN2sh12SPIRVBuilder8hashNameEPKNS_7TSymbolE(%"class.sh::SPIRVBuilder"* nocapture readonly, %"class.sh::TSymbol"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 22
  %4 = load i64 (i8*, i64)*, i64 (i8*, i64)** %3, align 8
  %5 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 23
  %6 = load %"class.std::__1::map"*, %"class.std::__1::map"** %5, align 8
  %7 = tail call { i8*, i64 } @_ZN2sh8HashNameEPKNS_7TSymbolEPFmPKcmEPNSt3__13mapINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESE_NS7_4lessISE_EENSC_INS7_4pairIKSE_SE_EEEEEE(%"class.sh::TSymbol"* %1, i64 (i8*, i64)* %4, %"class.std::__1::map"* %6) #12
  ret { i8*, i64 } %7
}

declare { i8*, i64 } @_ZN2sh8HashNameEPKNS_7TSymbolEPFmPKcmEPNSt3__13mapINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESE_NS7_4lessISE_EENSC_INS7_4pairIKSE_SE_EEEEEE(%"class.sh::TSymbol"*, i64 (i8*, i64)*, %"class.std::__1::map"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZN2sh12SPIRVBuilder12hashTypeNameERKNS_5TTypeE(%"class.sh::SPIRVBuilder"* nocapture readonly, %"class.sh::TType"* dereferenceable(184)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 22
  %4 = load i64 (i8*, i64)*, i64 (i8*, i64)** %3, align 8
  %5 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 23
  %6 = load %"class.std::__1::map"*, %"class.std::__1::map"** %5, align 8
  %7 = tail call { i8*, i64 } @_ZN2sh11GetTypeNameERKNS_5TTypeEPFmPKcmEPNSt3__13mapINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESE_NS7_4lessISE_EENSC_INS7_4pairIKSE_SE_EEEEEE(%"class.sh::TType"* dereferenceable(184) %1, i64 (i8*, i64)* %4, %"class.std::__1::map"* %6) #12
  ret { i8*, i64 } %7
}

declare { i8*, i64 } @_ZN2sh11GetTypeNameERKNS_5TTypeEPFmPKcmEPNSt3__13mapINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESE_NS7_4lessISE_EENSC_INS7_4pairIKSE_SE_EEEEEE(%"class.sh::TType"* dereferenceable(184), i64 (i8*, i64)*, %"class.std::__1::map"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZN2sh12SPIRVBuilder13hashFieldNameEPKNS_6TFieldE(%"class.sh::SPIRVBuilder"* nocapture readonly, %"class.sh::TField"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %1, i64 0, i32 3
  %4 = load i8, i8* %3, align 8
  %5 = icmp eq i8 %4, 1
  %6 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %1, i64 0, i32 1
  br i1 %5, label %7, label %15

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 22
  %9 = load i64 (i8*, i64)*, i64 (i8*, i64)** %8, align 8
  %10 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 23
  %11 = load %"class.std::__1::map"*, %"class.std::__1::map"** %10, align 8
  %12 = tail call { i8*, i64 } @_ZN2sh8HashNameERKNS_15ImmutableStringEPFmPKcmEPNSt3__13mapINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESE_NS7_4lessISE_EENSC_INS7_4pairIKSE_SE_EEEEEE(%"class.sh::ImmutableString"* dereferenceable(16) %6, i64 (i8*, i64)* %9, %"class.std::__1::map"* %11) #12
  %13 = extractvalue { i8*, i64 } %12, 0
  %14 = extractvalue { i8*, i64 } %12, 1
  br label %20

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %1, i64 0, i32 1, i32 1
  %19 = load i64, i64* %18, align 8
  br label %20

20:                                               ; preds = %15, %7
  %21 = phi i8* [ %13, %7 ], [ %17, %15 ]
  %22 = phi i64 [ %14, %7 ], [ %19, %15 ]
  %23 = insertvalue { i8*, i64 } undef, i8* %21, 0
  %24 = insertvalue { i8*, i64 } %23, i64 %22, 1
  ret { i8*, i64 } %24
}

declare { i8*, i64 } @_ZN2sh8HashNameERKNS_15ImmutableStringEPFmPKcmEPNSt3__13mapINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESE_NS7_4lessISE_EENSC_INS7_4pairIKSE_SE_EEEEEE(%"class.sh::ImmutableString"* dereferenceable(16), i64 (i8*, i64)*, %"class.std::__1::map"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZN2sh12SPIRVBuilder16hashFunctionNameEPKNS_9TFunctionE(%"class.sh::SPIRVBuilder"* nocapture readonly, %"class.sh::TFunction"*) local_unnamed_addr #1 align 2 {
  %3 = tail call zeroext i1 @_ZNK2sh9TFunction6isMainEv(%"class.sh::TFunction"* %1) #12
  %4 = bitcast %"class.sh::TFunction"* %1 to %"class.sh::TSymbol"*
  br i1 %3, label %5, label %7

5:                                                ; preds = %2
  %6 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %4) #12
  br label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 22
  %9 = load i64 (i8*, i64)*, i64 (i8*, i64)** %8, align 8
  %10 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %0, i64 0, i32 23
  %11 = load %"class.std::__1::map"*, %"class.std::__1::map"** %10, align 8
  %12 = tail call { i8*, i64 } @_ZN2sh8HashNameEPKNS_7TSymbolEPFmPKcmEPNSt3__13mapINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESE_NS7_4lessISE_EENSC_INS7_4pairIKSE_SE_EEEEEE(%"class.sh::TSymbol"* %4, i64 (i8*, i64)* %9, %"class.std::__1::map"* %11) #12
  br label %13

13:                                               ; preds = %7, %5
  %14 = phi { i8*, i64 } [ %12, %7 ], [ %6, %5 ]
  ret { i8*, i64 } %14
}

declare zeroext i1 @_ZNK2sh9TFunction6isMainEv(%"class.sh::TFunction"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12SPIRVBuilder8getSpirvEv(%"class.std::__1::vector.32"* noalias sret, %"class.sh::SPIRVBuilder"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.std::__1::vector.32"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #12
  %6 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = shl i64 %7, 1
  %9 = add i64 %8, 5
  %10 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = mul i64 %11, 3
  %13 = add i64 %9, %12
  %14 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 9
  %15 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 9, i32 0, i32 1
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector.32"* %14 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = ashr exact i64 %20, 2
  %22 = add i64 %13, %21
  %23 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 10
  %24 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 10, i32 0, i32 1
  %25 = bitcast i32** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.std::__1::vector.32"* %23 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %26, %28
  %30 = ashr exact i64 %29, 2
  %31 = add i64 %22, %30
  %32 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 11
  %33 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 11, i32 0, i32 1
  %34 = bitcast i32** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.std::__1::vector.32"* %32 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = ashr exact i64 %38, 2
  %40 = add i64 %31, %39
  %41 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 12
  %42 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 12, i32 0, i32 1
  %43 = bitcast i32** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %"class.std::__1::vector.32"* %41 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %44, %46
  %48 = ashr exact i64 %47, 2
  %49 = add i64 %40, %48
  %50 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 13
  %51 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 13, i32 0, i32 1
  %52 = bitcast i32** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"class.std::__1::vector.32"* %50 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %53, %55
  %57 = ashr exact i64 %56, 2
  %58 = add i64 %49, %57
  %59 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 14
  %60 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 14, i32 0, i32 1
  %61 = bitcast i32** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = bitcast %"class.std::__1::vector.32"* %59 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = sub i64 %62, %64
  %66 = ashr exact i64 %65, 2
  %67 = add i64 %58, %66
  %68 = bitcast i32** %4 to i64*
  %69 = bitcast %"class.std::__1::vector.32"* %0 to i64*
  %70 = icmp eq i64 %67, 0
  br i1 %70, label %84, label %71

71:                                               ; preds = %2
  %72 = icmp ugt i64 %67, 4611686018427387903
  br i1 %72, label %73, label %74

73:                                               ; preds = %71
  tail call void @abort() #18
  unreachable

74:                                               ; preds = %71
  %75 = shl i64 %67, 2
  %76 = tail call i8* @_Znwm(i64 %75) #17
  %77 = bitcast i8* %76 to i32*
  %78 = getelementptr inbounds i32, i32* %77, i64 %67
  %79 = ptrtoint i32* %78 to i64
  %80 = insertelement <2 x i8*> undef, i8* %76, i32 0
  %81 = shufflevector <2 x i8*> %80, <2 x i8*> undef, <2 x i32> zeroinitializer
  %82 = ptrtoint <2 x i8*> %81 to <2 x i64>
  %83 = bitcast %"class.std::__1::vector.32"* %0 to <2 x i64>*
  store <2 x i64> %82, <2 x i64>* %83, align 8
  store i64 %79, i64* %68, align 8
  br label %84

84:                                               ; preds = %74, %2
  %85 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 6, i32 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = add i32 %86, 1
  store i32 %87, i32* %85, align 4
  tail call void @_ZN5angle5spirv16WriteSpirvHeaderEPNSt3__16vectorIjNS1_9allocatorIjEEEEj(%"class.std::__1::vector.32"* %0, i32 %87) #12
  tail call void @_ZN5angle5spirv15WriteCapabilityEPNSt3__16vectorIjNS1_9allocatorIjEEEEN3spv10CapabilityE(%"class.std::__1::vector.32"* %0, i32 1) #12
  %88 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 2, i32 0, i32 0
  %89 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %88, align 8
  %90 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %91 = icmp eq %"class.std::__1::__tree_end_node"* %89, %90
  br i1 %91, label %92, label %105

92:                                               ; preds = %137, %84
  tail call void @_ZN5angle5spirv18WriteExtInstImportEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEPKc(%"class.std::__1::vector.32"* %0, i32 %86, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)) #12
  tail call void @_ZN5angle5spirv16WriteMemoryModelEPNSt3__16vectorIjNS1_9allocatorIjEEEEN3spv15AddressingModelENS7_11MemoryModelE(%"class.std::__1::vector.32"* %0, i32 0, i32 1) #12
  %93 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 0
  %94 = load i8, i8* %93, align 8
  %95 = zext i8 %94 to i64
  %96 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* @_ZZN2sh12SPIRVBuilder8getSpirvEvE16kExecutionModels, i64 0, i32 0, i32 0, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 5, i32 0, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 4
  tail call void @_ZN5angle5spirv15WriteEntryPointEPNSt3__16vectorIjNS1_9allocatorIjEEEEN3spv14ExecutionModelENS0_11BoxedUint32INS0_11IdRefHelperEEEPKcRKNS_10FastVectorISB_Lm8ENS1_5arrayISB_Lm8EEEEE(%"class.std::__1::vector.32"* %0, i32 %97, i32 %99, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), %"class.angle::FastVector"* dereferenceable(56) %100) #12
  %101 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 3, i32 0, i32 0
  %102 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %101, align 8
  %103 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %104 = icmp eq %"class.std::__1::__tree_end_node"* %102, %103
  br i1 %104, label %140, label %210

105:                                              ; preds = %84, %137
  %106 = phi %"class.std::__1::__tree_end_node"* [ %138, %137 ], [ %89, %84 ]
  %107 = bitcast %"class.std::__1::__tree_end_node"* %106 to %"class.std::__1::__tree_node"*
  %108 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %107, i64 0, i32 1
  %109 = load i32, i32* %108, align 4
  tail call void @_ZN5angle5spirv15WriteCapabilityEPNSt3__16vectorIjNS1_9allocatorIjEEEEN3spv10CapabilityE(%"class.std::__1::vector.32"* %0, i32 %109) #12
  %110 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %106, i64 1, i32 0
  %111 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %110, align 8
  %112 = icmp eq %"class.std::__1::__tree_node_base"* %111, null
  br i1 %112, label %113, label %121

113:                                              ; preds = %105
  %114 = bitcast %"class.std::__1::__tree_end_node"* %106 to %"class.std::__1::__tree_node_base"*
  %115 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %106, i64 2
  %116 = bitcast %"class.std::__1::__tree_end_node"* %115 to %"class.std::__1::__tree_end_node"**
  %117 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %116, align 8
  %118 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %117, i64 0, i32 0
  %119 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %118, align 8
  %120 = icmp eq %"class.std::__1::__tree_node_base"* %119, %114
  br i1 %120, label %137, label %128

121:                                              ; preds = %105, %121
  %122 = phi %"class.std::__1::__tree_node_base"* [ %124, %121 ], [ %111, %105 ]
  %123 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %122, i64 0, i32 0, i32 0
  %124 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %123, align 8
  %125 = icmp eq %"class.std::__1::__tree_node_base"* %124, null
  br i1 %125, label %126, label %121

126:                                              ; preds = %121
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %122, i64 0, i32 0
  br label %137

128:                                              ; preds = %113, %128
  %129 = phi %"class.std::__1::__tree_end_node"** [ %132, %128 ], [ %116, %113 ]
  %130 = bitcast %"class.std::__1::__tree_end_node"** %129 to %"class.std::__1::__tree_node_base"**
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  %132 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  %133 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %132, align 8
  %134 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %133, i64 0, i32 0
  %135 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %134, align 8
  %136 = icmp eq %"class.std::__1::__tree_node_base"* %135, %131
  br i1 %136, label %137, label %128

137:                                              ; preds = %128, %113, %126
  %138 = phi %"class.std::__1::__tree_end_node"* [ %127, %126 ], [ %117, %113 ], [ %133, %128 ]
  %139 = icmp eq %"class.std::__1::__tree_end_node"* %138, %90
  br i1 %139, label %92, label %105

140:                                              ; preds = %243, %92
  %141 = load i32*, i32** %3, align 8
  %142 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 8, i32 0, i32 0
  %143 = load i32*, i32** %142, align 8
  %144 = getelementptr inbounds %"class.sh::SPIRVBuilder", %"class.sh::SPIRVBuilder"* %1, i64 0, i32 8, i32 0, i32 1
  %145 = load i32*, i32** %144, align 8
  %146 = tail call i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector.32"* %0, i32* %141, i32* %143, i32* %145)
  %147 = load i32*, i32** %3, align 8
  %148 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %14, i64 0, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8
  %150 = load i32*, i32** %15, align 8
  %151 = tail call i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector.32"* %0, i32* %147, i32* %149, i32* %150)
  %152 = load i32*, i32** %3, align 8
  %153 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %23, i64 0, i32 0, i32 0
  %154 = load i32*, i32** %153, align 8
  %155 = load i32*, i32** %24, align 8
  %156 = tail call i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector.32"* %0, i32* %152, i32* %154, i32* %155)
  %157 = load i32*, i32** %3, align 8
  %158 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %32, i64 0, i32 0, i32 0
  %159 = load i32*, i32** %158, align 8
  %160 = load i32*, i32** %33, align 8
  %161 = tail call i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector.32"* %0, i32* %157, i32* %159, i32* %160)
  %162 = load i32*, i32** %3, align 8
  %163 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %41, i64 0, i32 0, i32 0
  %164 = load i32*, i32** %163, align 8
  %165 = load i32*, i32** %42, align 8
  %166 = tail call i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector.32"* %0, i32* %162, i32* %164, i32* %165)
  %167 = load i32*, i32** %3, align 8
  %168 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %50, i64 0, i32 0, i32 0
  %169 = load i32*, i32** %168, align 8
  %170 = load i32*, i32** %51, align 8
  %171 = tail call i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector.32"* %0, i32* %167, i32* %169, i32* %170)
  %172 = load i32*, i32** %3, align 8
  %173 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %59, i64 0, i32 0, i32 0
  %174 = load i32*, i32** %173, align 8
  %175 = load i32*, i32** %60, align 8
  %176 = tail call i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector.32"* %0, i32* %172, i32* %174, i32* %175)
  %177 = load i64, i64* %68, align 8
  %178 = load i64, i64* %69, align 8
  %179 = sub i64 %177, %178
  %180 = ashr exact i64 %179, 2
  %181 = bitcast i32** %3 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = sub i64 %182, %178
  %184 = ashr exact i64 %183, 2
  %185 = icmp ugt i64 %180, %184
  br i1 %185, label %186, label %209

186:                                              ; preds = %140
  %187 = icmp eq i64 %183, 0
  br i1 %187, label %188, label %191

188:                                              ; preds = %186
  %189 = getelementptr inbounds i32, i32* null, i64 %184
  %190 = ptrtoint i32* %189 to i64
  br label %203

191:                                              ; preds = %186
  %192 = icmp ugt i64 %184, 4611686018427387903
  br i1 %192, label %193, label %194

193:                                              ; preds = %191
  tail call void @abort() #18
  unreachable

194:                                              ; preds = %191
  %195 = tail call i8* @_Znwm(i64 %183) #17
  %196 = bitcast i8* %195 to i32*
  %197 = getelementptr inbounds i32, i32* %196, i64 %184
  %198 = ptrtoint i32* %197 to i64
  %199 = ptrtoint i8* %195 to i64
  %200 = icmp sgt i64 %183, 0
  br i1 %200, label %201, label %203

201:                                              ; preds = %194
  %202 = inttoptr i64 %178 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %195, i8* align 4 %202, i64 %183, i1 false) #12
  br label %203

203:                                              ; preds = %201, %194, %188
  %204 = phi i64 [ %199, %194 ], [ %199, %201 ], [ 0, %188 ]
  %205 = phi i64 [ %198, %194 ], [ %198, %201 ], [ %190, %188 ]
  store i64 %204, i64* %69, align 8
  store i64 %205, i64* %181, align 8
  store i64 %205, i64* %68, align 8
  %206 = icmp eq i64 %178, 0
  br i1 %206, label %209, label %207

207:                                              ; preds = %203
  %208 = inttoptr i64 %178 to i8*
  tail call void @_ZdlPv(i8* %208) #17
  br label %209

209:                                              ; preds = %140, %203, %207
  ret void

210:                                              ; preds = %92, %243
  %211 = phi %"class.std::__1::__tree_end_node"* [ %244, %243 ], [ %102, %92 ]
  %212 = bitcast %"class.std::__1::__tree_end_node"* %211 to %"class.std::__1::__tree_node.203"*
  %213 = getelementptr inbounds %"class.std::__1::__tree_node.203", %"class.std::__1::__tree_node.203"* %212, i64 0, i32 1
  %214 = load i32, i32* %213, align 4
  %215 = load i32, i32* %98, align 8
  tail call void @_ZN5angle5spirv18WriteExecutionModeEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv13ExecutionModeE(%"class.std::__1::vector.32"* %0, i32 %215, i32 %214) #12
  %216 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %211, i64 1, i32 0
  %217 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %216, align 8
  %218 = icmp eq %"class.std::__1::__tree_node_base"* %217, null
  br i1 %218, label %219, label %227

219:                                              ; preds = %210
  %220 = bitcast %"class.std::__1::__tree_end_node"* %211 to %"class.std::__1::__tree_node_base"*
  %221 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %211, i64 2
  %222 = bitcast %"class.std::__1::__tree_end_node"* %221 to %"class.std::__1::__tree_end_node"**
  %223 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %222, align 8
  %224 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %223, i64 0, i32 0
  %225 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %224, align 8
  %226 = icmp eq %"class.std::__1::__tree_node_base"* %225, %220
  br i1 %226, label %243, label %234

227:                                              ; preds = %210, %227
  %228 = phi %"class.std::__1::__tree_node_base"* [ %230, %227 ], [ %217, %210 ]
  %229 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %228, i64 0, i32 0, i32 0
  %230 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %229, align 8
  %231 = icmp eq %"class.std::__1::__tree_node_base"* %230, null
  br i1 %231, label %232, label %227

232:                                              ; preds = %227
  %233 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %228, i64 0, i32 0
  br label %243

234:                                              ; preds = %219, %234
  %235 = phi %"class.std::__1::__tree_end_node"** [ %238, %234 ], [ %222, %219 ]
  %236 = bitcast %"class.std::__1::__tree_end_node"** %235 to %"class.std::__1::__tree_node_base"**
  %237 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %236, align 8
  %238 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %237, i64 0, i32 2
  %239 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %238, align 8
  %240 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %239, i64 0, i32 0
  %241 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %240, align 8
  %242 = icmp eq %"class.std::__1::__tree_node_base"* %241, %237
  br i1 %242, label %243, label %234

243:                                              ; preds = %234, %219, %232
  %244 = phi %"class.std::__1::__tree_end_node"* [ %233, %232 ], [ %223, %219 ], [ %239, %234 ]
  %245 = icmp eq %"class.std::__1::__tree_end_node"* %244, %103
  br i1 %245, label %140, label %210
}

declare void @_ZN5angle5spirv16WriteSpirvHeaderEPNSt3__16vectorIjNS1_9allocatorIjEEEEj(%"class.std::__1::vector.32"*, i32) local_unnamed_addr #3

declare void @_ZN5angle5spirv15WriteCapabilityEPNSt3__16vectorIjNS1_9allocatorIjEEEEN3spv10CapabilityE(%"class.std::__1::vector.32"*, i32) local_unnamed_addr #3

declare void @_ZN5angle5spirv18WriteExtInstImportEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEPKc(%"class.std::__1::vector.32"*, i32, i8*) local_unnamed_addr #3

declare void @_ZN5angle5spirv16WriteMemoryModelEPNSt3__16vectorIjNS1_9allocatorIjEEEEN3spv15AddressingModelENS7_11MemoryModelE(%"class.std::__1::vector.32"*, i32, i32) local_unnamed_addr #3

declare void @_ZN5angle5spirv15WriteEntryPointEPNSt3__16vectorIjNS1_9allocatorIjEEEEN3spv14ExecutionModelENS0_11BoxedUint32INS0_11IdRefHelperEEEPKcRKNS_10FastVectorISB_Lm8ENS1_5arrayISB_Lm8EEEEE(%"class.std::__1::vector.32"*, i32, i32, i8*, %"class.angle::FastVector"* dereferenceable(56)) local_unnamed_addr #3

declare void @_ZN5angle5spirv18WriteExecutionModeEPNSt3__16vectorIjNS1_9allocatorIjEEEENS0_11BoxedUint32INS0_11IdRefHelperEEEN3spv13ExecutionModeE(%"class.std::__1::vector.32"*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector.32"*, i32*, i32*, i32*) local_unnamed_addr #1 comdat align 2 {
  %5 = bitcast i32* %2 to i8*
  %6 = bitcast i32* %1 to i8*
  %7 = ptrtoint i32* %1 to i64
  %8 = ptrtoint i32* %2 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 0
  %10 = ptrtoint i32* %3 to i64
  %11 = sub i64 %10, %8
  %12 = ashr exact i64 %11, 2
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %706

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %19 = load i32*, i32** %18, align 8
  %20 = ptrtoint i32* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast i32** %18 to i64*
  br i1 %23, label %339, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 2
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %196

29:                                               ; preds = %25
  %30 = getelementptr inbounds i32, i32* %2, i64 %27
  %31 = icmp eq i32* %30, %3
  br i1 %31, label %191, label %32

32:                                               ; preds = %29
  %33 = xor i64 %27, -1
  %34 = getelementptr i32, i32* %3, i64 %33
  %35 = ptrtoint i32* %34 to i64
  %36 = sub i64 %35, %8
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 8
  br i1 %39, label %135, label %40

40:                                               ; preds = %32
  %41 = xor i64 %27, -1
  %42 = getelementptr i32, i32* %3, i64 %41
  %43 = ptrtoint i32* %42 to i64
  %44 = sub i64 %43, %8
  %45 = lshr i64 %44, 2
  %46 = add nuw nsw i64 %45, 1
  %47 = getelementptr i32, i32* %19, i64 %46
  %48 = add nsw i64 %27, %45
  %49 = add i64 %48, 1
  %50 = getelementptr i32, i32* %2, i64 %49
  %51 = icmp ult i32* %19, %50
  %52 = icmp ult i32* %30, %47
  %53 = and i1 %51, %52
  br i1 %53, label %135, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 9223372036854775800
  %56 = getelementptr i32, i32* %19, i64 %55
  %57 = getelementptr i32, i32* %30, i64 %55
  %58 = add nsw i64 %55, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 24
  br i1 %62, label %114, label %63

63:                                               ; preds = %54
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i32, i32* %19, i64 %66
  %69 = getelementptr i32, i32* %30, i64 %66
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4, !alias.scope !87
  %72 = getelementptr i32, i32* %69, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !alias.scope !87
  %75 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %75, align 4, !alias.scope !90, !noalias !87
  %76 = getelementptr i32, i32* %68, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %77, align 4, !alias.scope !90, !noalias !87
  %78 = or i64 %66, 8
  %79 = getelementptr i32, i32* %19, i64 %78
  %80 = getelementptr i32, i32* %30, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !87
  %83 = getelementptr i32, i32* %80, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4, !alias.scope !87
  %86 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %86, align 4, !alias.scope !90, !noalias !87
  %87 = getelementptr i32, i32* %79, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %88, align 4, !alias.scope !90, !noalias !87
  %89 = or i64 %66, 16
  %90 = getelementptr i32, i32* %19, i64 %89
  %91 = getelementptr i32, i32* %30, i64 %89
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !87
  %94 = getelementptr i32, i32* %91, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !87
  %97 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %97, align 4, !alias.scope !90, !noalias !87
  %98 = getelementptr i32, i32* %90, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %99, align 4, !alias.scope !90, !noalias !87
  %100 = or i64 %66, 24
  %101 = getelementptr i32, i32* %19, i64 %100
  %102 = getelementptr i32, i32* %30, i64 %100
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !87
  %105 = getelementptr i32, i32* %102, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4, !alias.scope !87
  %108 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %108, align 4, !alias.scope !90, !noalias !87
  %109 = getelementptr i32, i32* %101, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %110, align 4, !alias.scope !90, !noalias !87
  %111 = add i64 %66, 32
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !92

114:                                              ; preds = %65, %54
  %115 = phi i64 [ 0, %54 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i32, i32* %19, i64 %118
  %121 = getelementptr i32, i32* %30, i64 %118
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !87
  %124 = getelementptr i32, i32* %121, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !87
  %127 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %127, align 4, !alias.scope !90, !noalias !87
  %128 = getelementptr i32, i32* %120, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !90, !noalias !87
  %130 = add i64 %118, 8
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !93

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %38, %55
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %40, %32
  %136 = phi i32* [ %19, %40 ], [ %19, %32 ], [ %56, %133 ]
  %137 = phi i32* [ %30, %40 ], [ %30, %32 ], [ %57, %133 ]
  %138 = ptrtoint i32* %137 to i64
  %139 = getelementptr i32, i32* %3, i64 -1
  %140 = ptrtoint i32* %139 to i64
  %141 = sub i64 %140, %138
  %142 = lshr i64 %141, 2
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %155, label %146

146:                                              ; preds = %135, %146
  %147 = phi i32* [ %152, %146 ], [ %136, %135 ]
  %148 = phi i32* [ %151, %146 ], [ %137, %135 ]
  %149 = phi i64 [ %153, %146 ], [ %144, %135 ]
  %150 = load i32, i32* %148, align 4
  store i32 %150, i32* %147, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 1
  %152 = getelementptr inbounds i32, i32* %147, i64 1
  %153 = add i64 %149, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %146, !llvm.loop !94

155:                                              ; preds = %146, %135
  %156 = phi i32* [ undef, %135 ], [ %152, %146 ]
  %157 = phi i32* [ %136, %135 ], [ %152, %146 ]
  %158 = phi i32* [ %137, %135 ], [ %151, %146 ]
  %159 = icmp ult i64 %141, 28
  br i1 %159, label %188, label %160

160:                                              ; preds = %155, %160
  %161 = phi i32* [ %186, %160 ], [ %157, %155 ]
  %162 = phi i32* [ %185, %160 ], [ %158, %155 ]
  %163 = load i32, i32* %162, align 4
  store i32 %163, i32* %161, align 4
  %164 = getelementptr inbounds i32, i32* %162, i64 1
  %165 = getelementptr inbounds i32, i32* %161, i64 1
  %166 = load i32, i32* %164, align 4
  store i32 %166, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %162, i64 2
  %168 = getelementptr inbounds i32, i32* %161, i64 2
  %169 = load i32, i32* %167, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %162, i64 3
  %171 = getelementptr inbounds i32, i32* %161, i64 3
  %172 = load i32, i32* %170, align 4
  store i32 %172, i32* %171, align 4
  %173 = getelementptr inbounds i32, i32* %162, i64 4
  %174 = getelementptr inbounds i32, i32* %161, i64 4
  %175 = load i32, i32* %173, align 4
  store i32 %175, i32* %174, align 4
  %176 = getelementptr inbounds i32, i32* %162, i64 5
  %177 = getelementptr inbounds i32, i32* %161, i64 5
  %178 = load i32, i32* %176, align 4
  store i32 %178, i32* %177, align 4
  %179 = getelementptr inbounds i32, i32* %162, i64 6
  %180 = getelementptr inbounds i32, i32* %161, i64 6
  %181 = load i32, i32* %179, align 4
  store i32 %181, i32* %180, align 4
  %182 = getelementptr inbounds i32, i32* %162, i64 7
  %183 = getelementptr inbounds i32, i32* %161, i64 7
  %184 = load i32, i32* %182, align 4
  store i32 %184, i32* %183, align 4
  %185 = getelementptr inbounds i32, i32* %162, i64 8
  %186 = getelementptr inbounds i32, i32* %161, i64 8
  %187 = icmp eq i32* %185, %3
  br i1 %187, label %188, label %160, !llvm.loop !95

188:                                              ; preds = %155, %160, %133
  %189 = phi i32* [ %56, %133 ], [ %156, %155 ], [ %186, %160 ]
  %190 = ptrtoint i32* %189 to i64
  br label %191

191:                                              ; preds = %188, %29
  %192 = phi i64 [ %20, %29 ], [ %190, %188 ]
  store i64 %192, i64* %24, align 8
  %193 = icmp sgt i64 %26, 0
  br i1 %193, label %194, label %706

194:                                              ; preds = %191
  %195 = inttoptr i64 %192 to i32*
  br label %196

196:                                              ; preds = %194, %25
  %197 = phi i64 [ %192, %194 ], [ %20, %25 ]
  %198 = phi i32* [ %195, %194 ], [ %19, %25 ]
  %199 = phi i32* [ %30, %194 ], [ %3, %25 ]
  %200 = getelementptr inbounds i32, i32* %1, i64 %12
  %201 = ptrtoint i32* %200 to i64
  %202 = sub i64 %197, %201
  %203 = ashr exact i64 %202, 2
  %204 = getelementptr inbounds i32, i32* %1, i64 %203
  %205 = icmp ult i32* %204, %19
  br i1 %205, label %206, label %319

206:                                              ; preds = %196
  %207 = sub nsw i64 0, %203
  %208 = getelementptr i32, i32* %19, i64 %207
  %209 = bitcast i32* %208 to i8*
  %210 = xor i64 %7, -1
  %211 = getelementptr i8, i8* %209, i64 %210
  %212 = ptrtoint i8* %211 to i64
  %213 = lshr i64 %212, 2
  %214 = add nuw nsw i64 %213, 1
  %215 = icmp ult i64 %214, 8
  br i1 %215, label %216, label %219

216:                                              ; preds = %314, %219, %206
  %217 = phi i32* [ %198, %219 ], [ %198, %206 ], [ %237, %314 ]
  %218 = phi i32* [ %204, %219 ], [ %204, %206 ], [ %238, %314 ]
  br label %327

219:                                              ; preds = %206
  %220 = sub nsw i64 0, %203
  %221 = getelementptr i32, i32* %19, i64 %220
  %222 = bitcast i32* %221 to i8*
  %223 = xor i64 %7, -1
  %224 = getelementptr i8, i8* %222, i64 %223
  %225 = ptrtoint i8* %224 to i64
  %226 = lshr i64 %225, 2
  %227 = add nuw nsw i64 %226, 1
  %228 = getelementptr i32, i32* %198, i64 %227
  %229 = add nsw i64 %203, %226
  %230 = add i64 %229, 1
  %231 = getelementptr i32, i32* %1, i64 %230
  %232 = icmp ult i32* %198, %231
  %233 = icmp ult i32* %204, %228
  %234 = and i1 %232, %233
  br i1 %234, label %216, label %235

235:                                              ; preds = %219
  %236 = and i64 %214, 9223372036854775800
  %237 = getelementptr i32, i32* %198, i64 %236
  %238 = getelementptr i32, i32* %204, i64 %236
  %239 = add nsw i64 %236, -8
  %240 = lshr exact i64 %239, 3
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 24
  br i1 %243, label %295, label %244

244:                                              ; preds = %235
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %292, %246 ]
  %248 = phi i64 [ %245, %244 ], [ %293, %246 ]
  %249 = getelementptr i32, i32* %198, i64 %247
  %250 = getelementptr i32, i32* %204, i64 %247
  %251 = bitcast i32* %250 to <4 x i32>*
  %252 = load <4 x i32>, <4 x i32>* %251, align 4, !alias.scope !96
  %253 = getelementptr i32, i32* %250, i64 4
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4, !alias.scope !96
  %256 = bitcast i32* %249 to <4 x i32>*
  store <4 x i32> %252, <4 x i32>* %256, align 4, !alias.scope !99, !noalias !96
  %257 = getelementptr i32, i32* %249, i64 4
  %258 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %258, align 4, !alias.scope !99, !noalias !96
  %259 = or i64 %247, 8
  %260 = getelementptr i32, i32* %198, i64 %259
  %261 = getelementptr i32, i32* %204, i64 %259
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4, !alias.scope !96
  %264 = getelementptr i32, i32* %261, i64 4
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4, !alias.scope !96
  %267 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %267, align 4, !alias.scope !99, !noalias !96
  %268 = getelementptr i32, i32* %260, i64 4
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %266, <4 x i32>* %269, align 4, !alias.scope !99, !noalias !96
  %270 = or i64 %247, 16
  %271 = getelementptr i32, i32* %198, i64 %270
  %272 = getelementptr i32, i32* %204, i64 %270
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4, !alias.scope !96
  %275 = getelementptr i32, i32* %272, i64 4
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4, !alias.scope !96
  %278 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %278, align 4, !alias.scope !99, !noalias !96
  %279 = getelementptr i32, i32* %271, i64 4
  %280 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %280, align 4, !alias.scope !99, !noalias !96
  %281 = or i64 %247, 24
  %282 = getelementptr i32, i32* %198, i64 %281
  %283 = getelementptr i32, i32* %204, i64 %281
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !alias.scope !96
  %286 = getelementptr i32, i32* %283, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4, !alias.scope !96
  %289 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %285, <4 x i32>* %289, align 4, !alias.scope !99, !noalias !96
  %290 = getelementptr i32, i32* %282, i64 4
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> %288, <4 x i32>* %291, align 4, !alias.scope !99, !noalias !96
  %292 = add i64 %247, 32
  %293 = add i64 %248, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %246, !llvm.loop !101

295:                                              ; preds = %246, %235
  %296 = phi i64 [ 0, %235 ], [ %292, %246 ]
  %297 = icmp eq i64 %242, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %311, %298 ], [ %296, %295 ]
  %300 = phi i64 [ %312, %298 ], [ %242, %295 ]
  %301 = getelementptr i32, i32* %198, i64 %299
  %302 = getelementptr i32, i32* %204, i64 %299
  %303 = bitcast i32* %302 to <4 x i32>*
  %304 = load <4 x i32>, <4 x i32>* %303, align 4, !alias.scope !96
  %305 = getelementptr i32, i32* %302, i64 4
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 4, !alias.scope !96
  %308 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %308, align 4, !alias.scope !99, !noalias !96
  %309 = getelementptr i32, i32* %301, i64 4
  %310 = bitcast i32* %309 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %310, align 4, !alias.scope !99, !noalias !96
  %311 = add i64 %299, 8
  %312 = add i64 %300, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !102

314:                                              ; preds = %298, %295
  %315 = icmp eq i64 %214, %236
  br i1 %315, label %316, label %216

316:                                              ; preds = %327, %314
  %317 = phi i32* [ %237, %314 ], [ %332, %327 ]
  %318 = ptrtoint i32* %317 to i64
  br label %319

319:                                              ; preds = %316, %196
  %320 = phi i64 [ %318, %316 ], [ %197, %196 ]
  store i64 %320, i64* %24, align 8
  %321 = icmp eq i64 %202, 0
  br i1 %321, label %334, label %322

322:                                              ; preds = %319
  %323 = sub nsw i64 0, %203
  %324 = getelementptr inbounds i32, i32* %198, i64 %323
  %325 = bitcast i32* %324 to i8*
  %326 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %325, i8* align 4 %326, i64 %202, i1 false) #12
  br label %334

327:                                              ; preds = %216, %327
  %328 = phi i32* [ %332, %327 ], [ %217, %216 ]
  %329 = phi i32* [ %331, %327 ], [ %218, %216 ]
  %330 = load i32, i32* %329, align 4
  store i32 %330, i32* %328, align 4
  %331 = getelementptr inbounds i32, i32* %329, i64 1
  %332 = getelementptr inbounds i32, i32* %328, i64 1
  %333 = icmp ult i32* %331, %19
  br i1 %333, label %327, label %316, !llvm.loop !103

334:                                              ; preds = %319, %322
  %335 = ptrtoint i32* %199 to i64
  %336 = sub i64 %335, %8
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %706, label %338

338:                                              ; preds = %334
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %5, i64 %336, i1 false) #12
  br label %706

339:                                              ; preds = %14
  %340 = bitcast %"class.std::__1::vector.32"* %0 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = sub i64 %20, %341
  %343 = ashr exact i64 %342, 2
  %344 = add nsw i64 %343, %12
  %345 = icmp ugt i64 %344, 4611686018427387903
  br i1 %345, label %346, label %348

346:                                              ; preds = %339
  %347 = bitcast %"class.std::__1::vector.32"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %347) #18
  unreachable

348:                                              ; preds = %339
  %349 = sub i64 %17, %341
  %350 = ashr exact i64 %349, 2
  %351 = icmp ult i64 %350, 2305843009213693951
  br i1 %351, label %355, label %352

352:                                              ; preds = %348
  %353 = sub i64 %7, %341
  %354 = ashr exact i64 %353, 2
  br label %365

355:                                              ; preds = %348
  %356 = ashr exact i64 %349, 1
  %357 = icmp ult i64 %356, %344
  %358 = select i1 %357, i64 %344, i64 %356
  %359 = sub i64 %7, %341
  %360 = ashr exact i64 %359, 2
  %361 = icmp eq i64 %358, 0
  br i1 %361, label %371, label %362

362:                                              ; preds = %355
  %363 = icmp ugt i64 %358, 4611686018427387903
  br i1 %363, label %364, label %365

364:                                              ; preds = %362
  tail call void @abort() #18
  unreachable

365:                                              ; preds = %352, %362
  %366 = phi i64 [ 4611686018427387903, %352 ], [ %358, %362 ]
  %367 = phi i64 [ %354, %352 ], [ %360, %362 ]
  %368 = shl i64 %366, 2
  %369 = tail call i8* @_Znwm(i64 %368) #17
  %370 = bitcast i8* %369 to i32*
  br label %371

371:                                              ; preds = %365, %355
  %372 = phi i64 [ %367, %365 ], [ %360, %355 ]
  %373 = phi i64 [ %366, %365 ], [ 0, %355 ]
  %374 = phi i32* [ %370, %365 ], [ null, %355 ]
  %375 = getelementptr inbounds i32, i32* %374, i64 %372
  %376 = getelementptr inbounds i32, i32* %374, i64 %373
  %377 = ptrtoint i32* %376 to i64
  %378 = getelementptr inbounds i32, i32* %375, i64 %12
  %379 = add i64 %11, -4
  %380 = lshr i64 %379, 2
  %381 = add nuw nsw i64 %380, 1
  %382 = icmp ult i64 %381, 8
  br i1 %382, label %475, label %383

383:                                              ; preds = %371
  %384 = add i64 %11, -4
  %385 = lshr i64 %384, 2
  %386 = add nsw i64 %372, %385
  %387 = add i64 %386, 1
  %388 = getelementptr i32, i32* %374, i64 %387
  %389 = add nuw nsw i64 %385, 1
  %390 = getelementptr i32, i32* %2, i64 %389
  %391 = icmp ult i32* %375, %390
  %392 = icmp ugt i32* %388, %2
  %393 = and i1 %391, %392
  br i1 %393, label %475, label %394

394:                                              ; preds = %383
  %395 = and i64 %381, 9223372036854775800
  %396 = getelementptr i32, i32* %375, i64 %395
  %397 = getelementptr i32, i32* %2, i64 %395
  %398 = add nsw i64 %395, -8
  %399 = lshr exact i64 %398, 3
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 3
  %402 = icmp ult i64 %398, 24
  br i1 %402, label %454, label %403

403:                                              ; preds = %394
  %404 = sub nsw i64 %400, %401
  br label %405

405:                                              ; preds = %405, %403
  %406 = phi i64 [ 0, %403 ], [ %451, %405 ]
  %407 = phi i64 [ %404, %403 ], [ %452, %405 ]
  %408 = getelementptr i32, i32* %375, i64 %406
  %409 = getelementptr i32, i32* %2, i64 %406
  %410 = bitcast i32* %409 to <4 x i32>*
  %411 = load <4 x i32>, <4 x i32>* %410, align 4, !alias.scope !104
  %412 = getelementptr i32, i32* %409, i64 4
  %413 = bitcast i32* %412 to <4 x i32>*
  %414 = load <4 x i32>, <4 x i32>* %413, align 4, !alias.scope !104
  %415 = bitcast i32* %408 to <4 x i32>*
  store <4 x i32> %411, <4 x i32>* %415, align 4, !alias.scope !107, !noalias !104
  %416 = getelementptr i32, i32* %408, i64 4
  %417 = bitcast i32* %416 to <4 x i32>*
  store <4 x i32> %414, <4 x i32>* %417, align 4, !alias.scope !107, !noalias !104
  %418 = or i64 %406, 8
  %419 = getelementptr i32, i32* %375, i64 %418
  %420 = getelementptr i32, i32* %2, i64 %418
  %421 = bitcast i32* %420 to <4 x i32>*
  %422 = load <4 x i32>, <4 x i32>* %421, align 4, !alias.scope !104
  %423 = getelementptr i32, i32* %420, i64 4
  %424 = bitcast i32* %423 to <4 x i32>*
  %425 = load <4 x i32>, <4 x i32>* %424, align 4, !alias.scope !104
  %426 = bitcast i32* %419 to <4 x i32>*
  store <4 x i32> %422, <4 x i32>* %426, align 4, !alias.scope !107, !noalias !104
  %427 = getelementptr i32, i32* %419, i64 4
  %428 = bitcast i32* %427 to <4 x i32>*
  store <4 x i32> %425, <4 x i32>* %428, align 4, !alias.scope !107, !noalias !104
  %429 = or i64 %406, 16
  %430 = getelementptr i32, i32* %375, i64 %429
  %431 = getelementptr i32, i32* %2, i64 %429
  %432 = bitcast i32* %431 to <4 x i32>*
  %433 = load <4 x i32>, <4 x i32>* %432, align 4, !alias.scope !104
  %434 = getelementptr i32, i32* %431, i64 4
  %435 = bitcast i32* %434 to <4 x i32>*
  %436 = load <4 x i32>, <4 x i32>* %435, align 4, !alias.scope !104
  %437 = bitcast i32* %430 to <4 x i32>*
  store <4 x i32> %433, <4 x i32>* %437, align 4, !alias.scope !107, !noalias !104
  %438 = getelementptr i32, i32* %430, i64 4
  %439 = bitcast i32* %438 to <4 x i32>*
  store <4 x i32> %436, <4 x i32>* %439, align 4, !alias.scope !107, !noalias !104
  %440 = or i64 %406, 24
  %441 = getelementptr i32, i32* %375, i64 %440
  %442 = getelementptr i32, i32* %2, i64 %440
  %443 = bitcast i32* %442 to <4 x i32>*
  %444 = load <4 x i32>, <4 x i32>* %443, align 4, !alias.scope !104
  %445 = getelementptr i32, i32* %442, i64 4
  %446 = bitcast i32* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 4, !alias.scope !104
  %448 = bitcast i32* %441 to <4 x i32>*
  store <4 x i32> %444, <4 x i32>* %448, align 4, !alias.scope !107, !noalias !104
  %449 = getelementptr i32, i32* %441, i64 4
  %450 = bitcast i32* %449 to <4 x i32>*
  store <4 x i32> %447, <4 x i32>* %450, align 4, !alias.scope !107, !noalias !104
  %451 = add i64 %406, 32
  %452 = add i64 %407, -4
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %454, label %405, !llvm.loop !109

454:                                              ; preds = %405, %394
  %455 = phi i64 [ 0, %394 ], [ %451, %405 ]
  %456 = icmp eq i64 %401, 0
  br i1 %456, label %473, label %457

457:                                              ; preds = %454, %457
  %458 = phi i64 [ %470, %457 ], [ %455, %454 ]
  %459 = phi i64 [ %471, %457 ], [ %401, %454 ]
  %460 = getelementptr i32, i32* %375, i64 %458
  %461 = getelementptr i32, i32* %2, i64 %458
  %462 = bitcast i32* %461 to <4 x i32>*
  %463 = load <4 x i32>, <4 x i32>* %462, align 4, !alias.scope !104
  %464 = getelementptr i32, i32* %461, i64 4
  %465 = bitcast i32* %464 to <4 x i32>*
  %466 = load <4 x i32>, <4 x i32>* %465, align 4, !alias.scope !104
  %467 = bitcast i32* %460 to <4 x i32>*
  store <4 x i32> %463, <4 x i32>* %467, align 4, !alias.scope !107, !noalias !104
  %468 = getelementptr i32, i32* %460, i64 4
  %469 = bitcast i32* %468 to <4 x i32>*
  store <4 x i32> %466, <4 x i32>* %469, align 4, !alias.scope !107, !noalias !104
  %470 = add i64 %458, 8
  %471 = add i64 %459, -1
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %473, label %457, !llvm.loop !110

473:                                              ; preds = %457, %454
  %474 = icmp eq i64 %381, %395
  br i1 %474, label %529, label %475

475:                                              ; preds = %473, %383, %371
  %476 = phi i32* [ %375, %383 ], [ %375, %371 ], [ %396, %473 ]
  %477 = phi i32* [ %2, %383 ], [ %2, %371 ], [ %397, %473 ]
  %478 = ptrtoint i32* %476 to i64
  %479 = add nsw i64 %372, %12
  %480 = add nsw i64 %479, -1
  %481 = getelementptr i32, i32* %374, i64 %480
  %482 = ptrtoint i32* %481 to i64
  %483 = sub i64 %482, %478
  %484 = lshr i64 %483, 2
  %485 = add nuw nsw i64 %484, 1
  %486 = and i64 %485, 7
  %487 = icmp eq i64 %486, 0
  br i1 %487, label %497, label %488

488:                                              ; preds = %475, %488
  %489 = phi i32* [ %493, %488 ], [ %476, %475 ]
  %490 = phi i32* [ %494, %488 ], [ %477, %475 ]
  %491 = phi i64 [ %495, %488 ], [ %486, %475 ]
  %492 = load i32, i32* %490, align 4
  store i32 %492, i32* %489, align 4
  %493 = getelementptr inbounds i32, i32* %489, i64 1
  %494 = getelementptr inbounds i32, i32* %490, i64 1
  %495 = add i64 %491, -1
  %496 = icmp eq i64 %495, 0
  br i1 %496, label %497, label %488, !llvm.loop !111

497:                                              ; preds = %488, %475
  %498 = phi i32* [ %476, %475 ], [ %493, %488 ]
  %499 = phi i32* [ %477, %475 ], [ %494, %488 ]
  %500 = icmp ult i64 %483, 28
  br i1 %500, label %529, label %501

501:                                              ; preds = %497, %501
  %502 = phi i32* [ %526, %501 ], [ %498, %497 ]
  %503 = phi i32* [ %527, %501 ], [ %499, %497 ]
  %504 = load i32, i32* %503, align 4
  store i32 %504, i32* %502, align 4
  %505 = getelementptr inbounds i32, i32* %502, i64 1
  %506 = getelementptr inbounds i32, i32* %503, i64 1
  %507 = load i32, i32* %506, align 4
  store i32 %507, i32* %505, align 4
  %508 = getelementptr inbounds i32, i32* %502, i64 2
  %509 = getelementptr inbounds i32, i32* %503, i64 2
  %510 = load i32, i32* %509, align 4
  store i32 %510, i32* %508, align 4
  %511 = getelementptr inbounds i32, i32* %502, i64 3
  %512 = getelementptr inbounds i32, i32* %503, i64 3
  %513 = load i32, i32* %512, align 4
  store i32 %513, i32* %511, align 4
  %514 = getelementptr inbounds i32, i32* %502, i64 4
  %515 = getelementptr inbounds i32, i32* %503, i64 4
  %516 = load i32, i32* %515, align 4
  store i32 %516, i32* %514, align 4
  %517 = getelementptr inbounds i32, i32* %502, i64 5
  %518 = getelementptr inbounds i32, i32* %503, i64 5
  %519 = load i32, i32* %518, align 4
  store i32 %519, i32* %517, align 4
  %520 = getelementptr inbounds i32, i32* %502, i64 6
  %521 = getelementptr inbounds i32, i32* %503, i64 6
  %522 = load i32, i32* %521, align 4
  store i32 %522, i32* %520, align 4
  %523 = getelementptr inbounds i32, i32* %502, i64 7
  %524 = getelementptr inbounds i32, i32* %503, i64 7
  %525 = load i32, i32* %524, align 4
  store i32 %525, i32* %523, align 4
  %526 = getelementptr inbounds i32, i32* %502, i64 8
  %527 = getelementptr inbounds i32, i32* %503, i64 8
  %528 = icmp eq i32* %378, %526
  br i1 %528, label %529, label %501, !llvm.loop !112

529:                                              ; preds = %497, %501, %473
  %530 = load i32*, i32** %9, align 8
  %531 = ptrtoint i32* %530 to i64
  %532 = sub i64 %7, %531
  %533 = ashr exact i64 %532, 2
  %534 = sub nsw i64 0, %533
  %535 = getelementptr inbounds i32, i32* %375, i64 %534
  %536 = ptrtoint i32* %535 to i64
  %537 = icmp sgt i64 %532, 0
  br i1 %537, label %538, label %541

538:                                              ; preds = %529
  %539 = bitcast i32* %535 to i8*
  %540 = bitcast i32* %530 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %539, i8* align 4 %540, i64 %532, i1 false) #12
  br label %541

541:                                              ; preds = %538, %529
  %542 = load i32*, i32** %18, align 8
  %543 = icmp eq i32* %542, %1
  br i1 %543, label %699, label %544

544:                                              ; preds = %541
  %545 = getelementptr i32, i32* %542, i64 -1
  %546 = ptrtoint i32* %545 to i64
  %547 = sub i64 %546, %7
  %548 = lshr i64 %547, 2
  %549 = add nuw nsw i64 %548, 1
  %550 = icmp ult i64 %549, 8
  br i1 %550, label %646, label %551

551:                                              ; preds = %544
  %552 = add nsw i64 %372, %12
  %553 = getelementptr i32, i32* %542, i64 -1
  %554 = ptrtoint i32* %553 to i64
  %555 = sub i64 %554, %7
  %556 = lshr i64 %555, 2
  %557 = add nsw i64 %552, %556
  %558 = add i64 %557, 1
  %559 = getelementptr i32, i32* %374, i64 %558
  %560 = add nuw nsw i64 %556, 1
  %561 = getelementptr i32, i32* %1, i64 %560
  %562 = icmp ult i32* %378, %561
  %563 = icmp ugt i32* %559, %1
  %564 = and i1 %562, %563
  br i1 %564, label %646, label %565

565:                                              ; preds = %551
  %566 = and i64 %549, 9223372036854775800
  %567 = getelementptr i32, i32* %378, i64 %566
  %568 = getelementptr i32, i32* %1, i64 %566
  %569 = add nsw i64 %566, -8
  %570 = lshr exact i64 %569, 3
  %571 = add nuw nsw i64 %570, 1
  %572 = and i64 %571, 3
  %573 = icmp ult i64 %569, 24
  br i1 %573, label %625, label %574

574:                                              ; preds = %565
  %575 = sub nsw i64 %571, %572
  br label %576

576:                                              ; preds = %576, %574
  %577 = phi i64 [ 0, %574 ], [ %622, %576 ]
  %578 = phi i64 [ %575, %574 ], [ %623, %576 ]
  %579 = getelementptr i32, i32* %378, i64 %577
  %580 = getelementptr i32, i32* %1, i64 %577
  %581 = bitcast i32* %580 to <4 x i32>*
  %582 = load <4 x i32>, <4 x i32>* %581, align 4, !alias.scope !113
  %583 = getelementptr i32, i32* %580, i64 4
  %584 = bitcast i32* %583 to <4 x i32>*
  %585 = load <4 x i32>, <4 x i32>* %584, align 4, !alias.scope !113
  %586 = bitcast i32* %579 to <4 x i32>*
  store <4 x i32> %582, <4 x i32>* %586, align 4, !alias.scope !116, !noalias !113
  %587 = getelementptr i32, i32* %579, i64 4
  %588 = bitcast i32* %587 to <4 x i32>*
  store <4 x i32> %585, <4 x i32>* %588, align 4, !alias.scope !116, !noalias !113
  %589 = or i64 %577, 8
  %590 = getelementptr i32, i32* %378, i64 %589
  %591 = getelementptr i32, i32* %1, i64 %589
  %592 = bitcast i32* %591 to <4 x i32>*
  %593 = load <4 x i32>, <4 x i32>* %592, align 4, !alias.scope !113
  %594 = getelementptr i32, i32* %591, i64 4
  %595 = bitcast i32* %594 to <4 x i32>*
  %596 = load <4 x i32>, <4 x i32>* %595, align 4, !alias.scope !113
  %597 = bitcast i32* %590 to <4 x i32>*
  store <4 x i32> %593, <4 x i32>* %597, align 4, !alias.scope !116, !noalias !113
  %598 = getelementptr i32, i32* %590, i64 4
  %599 = bitcast i32* %598 to <4 x i32>*
  store <4 x i32> %596, <4 x i32>* %599, align 4, !alias.scope !116, !noalias !113
  %600 = or i64 %577, 16
  %601 = getelementptr i32, i32* %378, i64 %600
  %602 = getelementptr i32, i32* %1, i64 %600
  %603 = bitcast i32* %602 to <4 x i32>*
  %604 = load <4 x i32>, <4 x i32>* %603, align 4, !alias.scope !113
  %605 = getelementptr i32, i32* %602, i64 4
  %606 = bitcast i32* %605 to <4 x i32>*
  %607 = load <4 x i32>, <4 x i32>* %606, align 4, !alias.scope !113
  %608 = bitcast i32* %601 to <4 x i32>*
  store <4 x i32> %604, <4 x i32>* %608, align 4, !alias.scope !116, !noalias !113
  %609 = getelementptr i32, i32* %601, i64 4
  %610 = bitcast i32* %609 to <4 x i32>*
  store <4 x i32> %607, <4 x i32>* %610, align 4, !alias.scope !116, !noalias !113
  %611 = or i64 %577, 24
  %612 = getelementptr i32, i32* %378, i64 %611
  %613 = getelementptr i32, i32* %1, i64 %611
  %614 = bitcast i32* %613 to <4 x i32>*
  %615 = load <4 x i32>, <4 x i32>* %614, align 4, !alias.scope !113
  %616 = getelementptr i32, i32* %613, i64 4
  %617 = bitcast i32* %616 to <4 x i32>*
  %618 = load <4 x i32>, <4 x i32>* %617, align 4, !alias.scope !113
  %619 = bitcast i32* %612 to <4 x i32>*
  store <4 x i32> %615, <4 x i32>* %619, align 4, !alias.scope !116, !noalias !113
  %620 = getelementptr i32, i32* %612, i64 4
  %621 = bitcast i32* %620 to <4 x i32>*
  store <4 x i32> %618, <4 x i32>* %621, align 4, !alias.scope !116, !noalias !113
  %622 = add i64 %577, 32
  %623 = add i64 %578, -4
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %625, label %576, !llvm.loop !118

625:                                              ; preds = %576, %565
  %626 = phi i64 [ 0, %565 ], [ %622, %576 ]
  %627 = icmp eq i64 %572, 0
  br i1 %627, label %644, label %628

628:                                              ; preds = %625, %628
  %629 = phi i64 [ %641, %628 ], [ %626, %625 ]
  %630 = phi i64 [ %642, %628 ], [ %572, %625 ]
  %631 = getelementptr i32, i32* %378, i64 %629
  %632 = getelementptr i32, i32* %1, i64 %629
  %633 = bitcast i32* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 4, !alias.scope !113
  %635 = getelementptr i32, i32* %632, i64 4
  %636 = bitcast i32* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 4, !alias.scope !113
  %638 = bitcast i32* %631 to <4 x i32>*
  store <4 x i32> %634, <4 x i32>* %638, align 4, !alias.scope !116, !noalias !113
  %639 = getelementptr i32, i32* %631, i64 4
  %640 = bitcast i32* %639 to <4 x i32>*
  store <4 x i32> %637, <4 x i32>* %640, align 4, !alias.scope !116, !noalias !113
  %641 = add i64 %629, 8
  %642 = add i64 %630, -1
  %643 = icmp eq i64 %642, 0
  br i1 %643, label %644, label %628, !llvm.loop !119

644:                                              ; preds = %628, %625
  %645 = icmp eq i64 %549, %566
  br i1 %645, label %699, label %646

646:                                              ; preds = %644, %551, %544
  %647 = phi i32* [ %378, %551 ], [ %378, %544 ], [ %567, %644 ]
  %648 = phi i32* [ %1, %551 ], [ %1, %544 ], [ %568, %644 ]
  %649 = ptrtoint i32* %648 to i64
  %650 = getelementptr i32, i32* %542, i64 -1
  %651 = ptrtoint i32* %650 to i64
  %652 = sub i64 %651, %649
  %653 = lshr i64 %652, 2
  %654 = add nuw nsw i64 %653, 1
  %655 = and i64 %654, 7
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %666, label %657

657:                                              ; preds = %646, %657
  %658 = phi i32* [ %663, %657 ], [ %647, %646 ]
  %659 = phi i32* [ %662, %657 ], [ %648, %646 ]
  %660 = phi i64 [ %664, %657 ], [ %655, %646 ]
  %661 = load i32, i32* %659, align 4
  store i32 %661, i32* %658, align 4
  %662 = getelementptr inbounds i32, i32* %659, i64 1
  %663 = getelementptr inbounds i32, i32* %658, i64 1
  %664 = add i64 %660, -1
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %657, !llvm.loop !120

666:                                              ; preds = %657, %646
  %667 = phi i32* [ undef, %646 ], [ %663, %657 ]
  %668 = phi i32* [ %647, %646 ], [ %663, %657 ]
  %669 = phi i32* [ %648, %646 ], [ %662, %657 ]
  %670 = icmp ult i64 %652, 28
  br i1 %670, label %699, label %671

671:                                              ; preds = %666, %671
  %672 = phi i32* [ %697, %671 ], [ %668, %666 ]
  %673 = phi i32* [ %696, %671 ], [ %669, %666 ]
  %674 = load i32, i32* %673, align 4
  store i32 %674, i32* %672, align 4
  %675 = getelementptr inbounds i32, i32* %673, i64 1
  %676 = getelementptr inbounds i32, i32* %672, i64 1
  %677 = load i32, i32* %675, align 4
  store i32 %677, i32* %676, align 4
  %678 = getelementptr inbounds i32, i32* %673, i64 2
  %679 = getelementptr inbounds i32, i32* %672, i64 2
  %680 = load i32, i32* %678, align 4
  store i32 %680, i32* %679, align 4
  %681 = getelementptr inbounds i32, i32* %673, i64 3
  %682 = getelementptr inbounds i32, i32* %672, i64 3
  %683 = load i32, i32* %681, align 4
  store i32 %683, i32* %682, align 4
  %684 = getelementptr inbounds i32, i32* %673, i64 4
  %685 = getelementptr inbounds i32, i32* %672, i64 4
  %686 = load i32, i32* %684, align 4
  store i32 %686, i32* %685, align 4
  %687 = getelementptr inbounds i32, i32* %673, i64 5
  %688 = getelementptr inbounds i32, i32* %672, i64 5
  %689 = load i32, i32* %687, align 4
  store i32 %689, i32* %688, align 4
  %690 = getelementptr inbounds i32, i32* %673, i64 6
  %691 = getelementptr inbounds i32, i32* %672, i64 6
  %692 = load i32, i32* %690, align 4
  store i32 %692, i32* %691, align 4
  %693 = getelementptr inbounds i32, i32* %673, i64 7
  %694 = getelementptr inbounds i32, i32* %672, i64 7
  %695 = load i32, i32* %693, align 4
  store i32 %695, i32* %694, align 4
  %696 = getelementptr inbounds i32, i32* %673, i64 8
  %697 = getelementptr inbounds i32, i32* %672, i64 8
  %698 = icmp eq i32* %696, %542
  br i1 %698, label %699, label %671, !llvm.loop !121

699:                                              ; preds = %666, %671, %644, %541
  %700 = phi i32* [ %378, %541 ], [ %567, %644 ], [ %667, %666 ], [ %697, %671 ]
  %701 = ptrtoint i32* %700 to i64
  %702 = load i32*, i32** %9, align 8
  store i64 %536, i64* %340, align 8
  store i64 %701, i64* %24, align 8
  store i64 %377, i64* %16, align 8
  %703 = icmp eq i32* %702, null
  br i1 %703, label %706, label %704

704:                                              ; preds = %699
  %705 = bitcast i32* %702 to i8*
  tail call void @_ZdlPv(i8* %705) #17
  br label %706

706:                                              ; preds = %704, %699, %191, %334, %338, %4
  %707 = phi i32* [ %1, %4 ], [ %1, %338 ], [ %1, %334 ], [ %1, %191 ], [ %375, %699 ], [ %375, %704 ]
  ret i32* %707
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #11

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK2sh13SpirvTypeHashclERKNS_9SpirvTypeE(%"struct.sh::SpirvTypeHash"*, %"struct.sh::SpirvType"* dereferenceable(48)) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to [4 x i8]*
  %5 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 7, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 7, i32 0
  %10 = bitcast i32** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = shl i64 %6, 2
  %13 = tail call i64 @XXH64(i8* %11, i64 %12, i64 2882400152) #12
  br label %14

14:                                               ; preds = %8, %2
  %15 = phi i64 [ 0, %2 ], [ %13, %8 ]
  %16 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 0
  %17 = load %"class.sh::TFieldListCollection"*, %"class.sh::TFieldListCollection"** %16, align 8
  %18 = icmp eq %"class.sh::TFieldListCollection"* %17, null
  br i1 %18, label %27, label %19

19:                                               ; preds = %14
  %20 = bitcast %"struct.sh::SpirvType"* %1 to i8*
  %21 = tail call i64 @XXH64(i8* %20, i64 8, i64 2882400152) #12
  %22 = xor i64 %21, %15
  %23 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = zext i32 %24 to i64
  %26 = xor i64 %22, %25
  br label %64

27:                                               ; preds = %14
  %28 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #12
  %29 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  %30 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 3
  %32 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %28, align 4
  %35 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 3
  %36 = load i8, i8* %35, align 8
  %37 = zext i8 %36 to i32
  %38 = add nuw nsw i32 %37, 255
  %39 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 4
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw nsw i32 %41, 2
  %43 = add nuw nsw i32 %42, 252
  %44 = or i32 %43, %38
  %45 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 9
  %46 = load i8, i8* %45, align 4, !range !2
  %47 = shl nuw nsw i8 %46, 4
  %48 = zext i8 %47 to i32
  %49 = or i32 %44, %48
  %50 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 6
  %51 = load i32, i32* %50, align 4
  %52 = shl i32 %51, 5
  %53 = or i32 %49, %52
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %29, align 1
  %55 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 1
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %"struct.sh::SpirvType", %"struct.sh::SpirvType"* %1, i64 0, i32 8
  %58 = load i32, i32* %57, align 8
  %59 = shl i32 %58, 3
  %60 = or i32 %59, %56
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %30, align 2
  store i8 0, i8* %31, align 1
  %62 = call i64 @XXH64(i8* nonnull %28, i64 4, i64 2882400152) #12
  %63 = xor i64 %62, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #12
  br label %64

64:                                               ; preds = %27, %19
  %65 = phi i64 [ %26, %19 ], [ %63, %27 ]
  ret i64 %65
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #12

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #10

declare i64 @XXH64(i8*, i64, i64) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE22find_or_prepare_insertIS4_EENSC_ImbEERKT_(%"class.absl::container_internal::raw_hash_set"*, %"struct.sh::SpirvType"* dereferenceable(48)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4
  %4 = bitcast %"class.absl::container_internal::CompressedTuple"* %3 to %"struct.sh::SpirvTypeHash"*
  %5 = tail call i64 @_ZNK2sh13SpirvTypeHashclERKNS_9SpirvTypeE(%"struct.sh::SpirvTypeHash"* %4, %"struct.sh::SpirvType"* dereferenceable(48) %1)
  %6 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = lshr i64 %5, 7
  %11 = ptrtoint i8* %7 to i64
  %12 = lshr i64 %11, 12
  %13 = xor i64 %12, %10
  %14 = trunc i64 %5 to i8
  %15 = and i8 %14, 127
  %16 = insertelement <16 x i8> undef, i8 %15, i32 0
  %17 = shufflevector <16 x i8> %16, <16 x i8> undef, <16 x i32> zeroinitializer
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  br label %19

19:                                               ; preds = %48, %2
  %20 = phi i64 [ %13, %2 ], [ %50, %48 ]
  %21 = phi i64 [ 0, %2 ], [ %49, %48 ]
  %22 = and i64 %20, %9
  %23 = getelementptr inbounds i8, i8* %7, i64 %22
  %24 = bitcast i8* %23 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = icmp eq <16 x i8> %17, %25
  %27 = bitcast <16 x i1> %26 to i16
  %28 = icmp eq i16 %27, 0
  br i1 %28, label %44, label %29

29:                                               ; preds = %19
  %30 = zext i16 %27 to i32
  %31 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %18, align 8
  br label %32

32:                                               ; preds = %29, %40
  %33 = phi i32 [ %30, %29 ], [ %42, %40 ]
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #12, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %22, %35
  %37 = and i64 %36, %9
  %38 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %31, i64 %37, i32 0, i32 0
  %39 = tail call zeroext i1 @_ZN2sheqERKNS_9SpirvTypeES2_(%"struct.sh::SpirvType"* dereferenceable(48) %38, %"struct.sh::SpirvType"* dereferenceable(48) %1) #12
  br i1 %39, label %53, label %40, !prof !4

40:                                               ; preds = %32
  %41 = add i32 %33, -1
  %42 = and i32 %41, %33
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %32

44:                                               ; preds = %40, %19
  %45 = icmp eq <16 x i8> %25, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %46 = bitcast <16 x i1> %45 to i16
  %47 = icmp eq i16 %46, 0
  br i1 %47, label %48, label %51, !prof !5

48:                                               ; preds = %44
  %49 = add i64 %21, 16
  %50 = add i64 %49, %22
  br label %19

51:                                               ; preds = %44
  %52 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %5)
  br label %53

53:                                               ; preds = %32, %51
  %54 = phi i64 [ %52, %51 ], [ %37, %32 ]
  %55 = phi i8 [ 1, %51 ], [ 0, %32 ]
  %56 = insertvalue { i64, i8 } undef, i64 %54, 0
  %57 = insertvalue { i64, i8 } %56, i8 %55, 1
  ret { i64, i8 } %57
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #14 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #12, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !4

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #12
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #12
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #12
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #12, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = shl i64 %1, 6
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #17
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #12
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %105, label %25

25:                                               ; preds = %2
  %26 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4
  %27 = bitcast %"class.absl::container_internal::CompressedTuple"* %26 to %"struct.sh::SpirvTypeHash"*
  br label %29

28:                                               ; preds = %101
  br i1 %24, label %105, label %104

29:                                               ; preds = %25, %101
  %30 = phi i64 [ 0, %25 ], [ %102, %101 ]
  %31 = getelementptr inbounds i8, i8* %4, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = icmp sgt i8 %32, -1
  br i1 %33, label %34, label %101

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %30
  %36 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %35, i64 0, i32 0, i32 0
  %37 = tail call i64 @_ZNK2sh13SpirvTypeHashclERKNS_9SpirvTypeE(%"struct.sh::SpirvTypeHash"* %27, %"struct.sh::SpirvType"* dereferenceable(48) %36) #12
  %38 = load i8*, i8** %3, align 8
  %39 = load i64, i64* %7, align 8
  %40 = lshr i64 %37, 7
  %41 = ptrtoint i8* %38 to i64
  %42 = lshr i64 %41, 12
  %43 = xor i64 %42, %40
  %44 = and i64 %43, %39
  %45 = getelementptr inbounds i8, i8* %38, i64 %44
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = icmp slt <16 x i8> %47, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %49 = bitcast <16 x i1> %48 to i16
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %51, label %63

51:                                               ; preds = %34, %51
  %52 = phi i64 [ %56, %51 ], [ %44, %34 ]
  %53 = phi i64 [ %54, %51 ], [ 0, %34 ]
  %54 = add i64 %53, 16
  %55 = add i64 %54, %52
  %56 = and i64 %55, %39
  %57 = getelementptr inbounds i8, i8* %38, i64 %56
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = icmp slt <16 x i8> %59, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %61 = bitcast <16 x i1> %60 to i16
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %51, label %63

63:                                               ; preds = %51, %34
  %64 = phi i64 [ %44, %34 ], [ %56, %51 ]
  %65 = phi i16 [ %49, %34 ], [ %61, %51 ]
  %66 = zext i16 %65 to i32
  %67 = tail call i32 @llvm.cttz.i32(i32 %66, i1 false) #12, !range !3
  %68 = zext i32 %67 to i64
  %69 = add i64 %64, %68
  %70 = and i64 %69, %39
  %71 = trunc i64 %37 to i8
  %72 = and i8 %71, 127
  %73 = getelementptr inbounds i8, i8* %38, i64 %70
  store i8 %72, i8* %73, align 1
  %74 = load i8*, i8** %3, align 8
  %75 = add i64 %70, -15
  %76 = load i64, i64* %7, align 8
  %77 = and i64 %75, %76
  %78 = and i64 %76, 15
  %79 = add i64 %77, %78
  %80 = getelementptr inbounds i8, i8* %74, i64 %79
  store i8 %72, i8* %80, align 1
  %81 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %82 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %81, i64 %70
  %83 = bitcast %"union.absl::container_internal::map_slot_type"* %82 to i8*
  %84 = bitcast %"union.absl::container_internal::map_slot_type"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* align 8 %84, i64 24, i1 false) #12
  %85 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %81, i64 %70, i32 0, i32 0, i32 7
  %86 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %30, i32 0, i32 0, i32 7
  %87 = bitcast %"class.sh::TSpan"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = bitcast %"class.sh::TSpan"* %85 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %81, i64 %70, i32 0, i32 0, i32 7, i32 1
  %91 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %30, i32 0, i32 0, i32 7, i32 1
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %90, align 8
  %93 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %81, i64 %70, i32 0, i32 0, i32 8
  %94 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %30, i32 0, i32 0, i32 8
  %95 = bitcast i32* %93 to i8*
  %96 = bitcast i32* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 5, i1 false) #12
  %97 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %81, i64 %70, i32 0, i32 1
  %98 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %30, i32 0, i32 1
  %99 = bitcast %"struct.sh::SpirvTypeData"* %97 to i8*
  %100 = bitcast %"struct.sh::SpirvTypeData"* %98 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 12, i1 false) #12
  br label %101

101:                                              ; preds = %29, %63
  %102 = add nuw i64 %30, 1
  %103 = icmp eq i64 %102, %8
  br i1 %103, label %28, label %29

104:                                              ; preds = %28
  tail call void @_ZdlPv(i8* %4) #17
  br label %105

105:                                              ; preds = %2, %28, %104
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) local_unnamed_addr #14 comdat align 2 {
  %2 = alloca [24 x i8], align 8
  %3 = alloca [5 x i8], align 8
  %4 = alloca [15 x i8], align 1
  %5 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 0
  %6 = getelementptr inbounds [24 x i8], [24 x i8]* %2, i64 0, i64 0
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %8, i64 %10) #12
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6)
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %5)
  %11 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %11)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 5, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %11, i8 -86, i64 15, i1 false)
  %12 = load i64, i64* %9, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4
  %16 = bitcast %"class.absl::container_internal::CompressedTuple"* %15 to %"struct.sh::SpirvTypeHash"*
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %18 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 3
  br label %27

19:                                               ; preds = %157, %1
  %20 = phi i64 [ 0, %1 ], [ %159, %157 ]
  %21 = lshr i64 %20, 3
  %22 = sub i64 %20, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %25, i64* %26, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6)
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %11)
  ret void

27:                                               ; preds = %14, %157
  %28 = phi i64 [ 0, %14 ], [ %159, %157 ]
  %29 = load i8*, i8** %7, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 %28
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, -2
  br i1 %32, label %33, label %157

33:                                               ; preds = %27
  %34 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %17, align 8
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %34, i64 %28, i32 0, i32 0
  %36 = tail call i64 @_ZNK2sh13SpirvTypeHashclERKNS_9SpirvTypeE(%"struct.sh::SpirvTypeHash"* %16, %"struct.sh::SpirvType"* dereferenceable(48) %35) #12
  %37 = load i8*, i8** %7, align 8
  %38 = load i64, i64* %9, align 8
  %39 = lshr i64 %36, 7
  %40 = ptrtoint i8* %37 to i64
  %41 = lshr i64 %40, 12
  %42 = xor i64 %41, %39
  %43 = and i64 %42, %38
  %44 = getelementptr inbounds i8, i8* %37, i64 %43
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = icmp slt <16 x i8> %46, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %48 = bitcast <16 x i1> %47 to i16
  %49 = icmp eq i16 %48, 0
  br i1 %49, label %50, label %62

50:                                               ; preds = %33, %50
  %51 = phi i64 [ %55, %50 ], [ %43, %33 ]
  %52 = phi i64 [ %53, %50 ], [ 0, %33 ]
  %53 = add i64 %52, 16
  %54 = add i64 %53, %51
  %55 = and i64 %54, %38
  %56 = getelementptr inbounds i8, i8* %37, i64 %55
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = icmp slt <16 x i8> %58, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %50, label %62

62:                                               ; preds = %50, %33
  %63 = phi i64 [ %43, %33 ], [ %55, %50 ]
  %64 = phi i16 [ %48, %33 ], [ %60, %50 ]
  %65 = zext i16 %64 to i32
  %66 = tail call i32 @llvm.cttz.i32(i32 %65, i1 false) #12, !range !3
  %67 = zext i32 %66 to i64
  %68 = add i64 %63, %67
  %69 = and i64 %68, %38
  %70 = sub i64 %69, %43
  %71 = sub i64 %28, %43
  %72 = xor i64 %70, %71
  %73 = and i64 %72, %38
  %74 = icmp ult i64 %73, 16
  br i1 %74, label %75, label %86, !prof !4

75:                                               ; preds = %62
  %76 = trunc i64 %36 to i8
  %77 = and i8 %76, 127
  %78 = getelementptr inbounds i8, i8* %37, i64 %28
  store i8 %77, i8* %78, align 1
  %79 = load i8*, i8** %7, align 8
  %80 = add i64 %28, -15
  %81 = load i64, i64* %9, align 8
  %82 = and i64 %81, %80
  %83 = and i64 %81, 15
  %84 = add i64 %82, %83
  %85 = getelementptr inbounds i8, i8* %79, i64 %84
  store i8 %77, i8* %85, align 1
  br label %157

86:                                               ; preds = %62
  %87 = getelementptr inbounds i8, i8* %37, i64 %69
  %88 = load i8, i8* %87, align 1
  %89 = icmp eq i8 %88, -128
  %90 = trunc i64 %36 to i8
  %91 = and i8 %90, 127
  store i8 %91, i8* %87, align 1
  %92 = load i8*, i8** %7, align 8
  %93 = add i64 %69, -15
  %94 = load i64, i64* %9, align 8
  %95 = and i64 %94, %93
  %96 = and i64 %94, 15
  %97 = add i64 %95, %96
  %98 = getelementptr inbounds i8, i8* %92, i64 %97
  store i8 %91, i8* %98, align 1
  %99 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %17, align 8
  br i1 %89, label %100, label %127

100:                                              ; preds = %86
  %101 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %69
  %102 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %28
  %103 = bitcast %"union.absl::container_internal::map_slot_type"* %101 to i8*
  %104 = bitcast %"union.absl::container_internal::map_slot_type"* %102 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %103, i8* align 8 %104, i64 24, i1 false) #12
  %105 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %69, i32 0, i32 0, i32 7
  %106 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %28, i32 0, i32 0, i32 7
  %107 = bitcast %"class.sh::TSpan"* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 8
  %109 = bitcast %"class.sh::TSpan"* %105 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %109, align 8
  %110 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %69, i32 0, i32 0, i32 8
  %111 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %28, i32 0, i32 0, i32 8
  %112 = bitcast i32* %110 to i8*
  %113 = bitcast i32* %111 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 8 %113, i64 5, i1 false) #12
  %114 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %69, i32 0, i32 1
  %115 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %28, i32 0, i32 1
  %116 = bitcast %"struct.sh::SpirvTypeData"* %114 to i8*
  %117 = bitcast %"struct.sh::SpirvTypeData"* %115 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 12, i1 false) #12
  %118 = load i8*, i8** %7, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 %28
  store i8 -128, i8* %119, align 1
  %120 = load i8*, i8** %7, align 8
  %121 = add i64 %28, -15
  %122 = load i64, i64* %9, align 8
  %123 = and i64 %122, %121
  %124 = and i64 %122, 15
  %125 = add i64 %123, %124
  %126 = getelementptr inbounds i8, i8* %120, i64 %125
  store i8 -128, i8* %126, align 1
  br label %157

127:                                              ; preds = %86
  %128 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %28
  %129 = bitcast %"union.absl::container_internal::map_slot_type"* %128 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 %129, i64 24, i1 false)
  %130 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %28, i32 0, i32 0, i32 7
  %131 = bitcast %"class.sh::TSpan"* %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8
  %133 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %28, i32 0, i32 0, i32 8
  %134 = bitcast i32* %133 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 %134, i64 5, i1 false)
  %135 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %28, i32 0, i32 1
  %136 = bitcast %"struct.sh::SpirvTypeData"* %135 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 8 %136, i64 12, i1 false)
  %137 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %69
  %138 = bitcast %"union.absl::container_internal::map_slot_type"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %129, i8* align 8 %138, i64 24, i1 false) #12
  %139 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %69, i32 0, i32 0, i32 7
  %140 = bitcast %"class.sh::TSpan"* %139 to <2 x i64>*
  %141 = load <2 x i64>, <2 x i64>* %140, align 8
  %142 = bitcast %"class.sh::TSpan"* %130 to <2 x i64>*
  store <2 x i64> %141, <2 x i64>* %142, align 8
  %143 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %69, i32 0, i32 0, i32 8
  %144 = bitcast i32* %143 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %144, i64 5, i1 false) #12
  %145 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %99, i64 %69, i32 0, i32 1
  %146 = bitcast %"struct.sh::SpirvTypeData"* %145 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %136, i8* align 8 %146, i64 12, i1 false) #12
  %147 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %17, align 8
  %148 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %147, i64 %69
  %149 = bitcast %"union.absl::container_internal::map_slot_type"* %148 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* nonnull align 8 %6, i64 24, i1 false)
  %150 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %147, i64 %69, i32 0, i32 0, i32 7
  %151 = bitcast %"class.sh::TSpan"* %150 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %151, align 8
  %152 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %147, i64 %69, i32 0, i32 0, i32 8
  %153 = bitcast i32* %152 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %153, i8* nonnull align 8 %5, i64 5, i1 false)
  %154 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %147, i64 %69, i32 0, i32 1
  %155 = bitcast %"struct.sh::SpirvTypeData"* %154 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %155, i8* align 1 %18, i64 12, i1 false)
  %156 = add i64 %28, -1
  br label %157

157:                                              ; preds = %75, %127, %100, %27
  %158 = phi i64 [ %28, %27 ], [ %28, %75 ], [ %28, %100 ], [ %156, %127 ]
  %159 = add i64 %158, 1
  %160 = load i64, i64* %9, align 8
  %161 = icmp eq i64 %159, %160
  br i1 %161, label %19, label %27
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #15

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.73"*, i64) local_unnamed_addr #14 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #12, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !4

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.73"* %0, i64 1) #12
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.73"* %0) #12
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.73"* %0, i64 %58) #12
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #12, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.73"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type.74"*, %"union.absl::container_internal::map_slot_type.74"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 19
  %11 = and i64 %10, -4
  %12 = mul i64 %1, 12
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #17
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type.74"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #12
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %91, label %26

25:                                               ; preds = %87
  br i1 %24, label %91, label %90

26:                                               ; preds = %2, %87
  %27 = phi i64 [ %88, %87 ], [ 0, %2 ]
  %28 = getelementptr inbounds i8, i8* %4, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = icmp sgt i8 %29, -1
  br i1 %30, label %31, label %87

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %6, i64 %27
  %33 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %6, i64 %27, i32 0, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = shl i32 %36, 4
  %38 = or i32 %37, %34
  %39 = load i8*, i8** %3, align 8
  %40 = load i64, i64* %7, align 8
  %41 = lshr i32 %38, 7
  %42 = zext i32 %41 to i64
  %43 = ptrtoint i8* %39 to i64
  %44 = lshr i64 %43, 12
  %45 = xor i64 %44, %42
  %46 = and i64 %45, %40
  %47 = getelementptr inbounds i8, i8* %39, i64 %46
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1
  %50 = icmp slt <16 x i8> %49, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %51 = bitcast <16 x i1> %50 to i16
  %52 = icmp eq i16 %51, 0
  br i1 %52, label %53, label %65

53:                                               ; preds = %31, %53
  %54 = phi i64 [ %58, %53 ], [ %46, %31 ]
  %55 = phi i64 [ %56, %53 ], [ 0, %31 ]
  %56 = add i64 %55, 16
  %57 = add i64 %56, %54
  %58 = and i64 %57, %40
  %59 = getelementptr inbounds i8, i8* %39, i64 %58
  %60 = bitcast i8* %59 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1
  %62 = icmp slt <16 x i8> %61, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %63 = bitcast <16 x i1> %62 to i16
  %64 = icmp eq i16 %63, 0
  br i1 %64, label %53, label %65

65:                                               ; preds = %53, %31
  %66 = phi i64 [ %46, %31 ], [ %58, %53 ]
  %67 = phi i16 [ %51, %31 ], [ %63, %53 ]
  %68 = zext i16 %67 to i32
  %69 = tail call i32 @llvm.cttz.i32(i32 %68, i1 false) #12, !range !3
  %70 = zext i32 %69 to i64
  %71 = add i64 %66, %70
  %72 = and i64 %71, %40
  %73 = trunc i32 %38 to i8
  %74 = and i8 %73, 127
  %75 = getelementptr inbounds i8, i8* %39, i64 %72
  store i8 %74, i8* %75, align 1
  %76 = load i8*, i8** %3, align 8
  %77 = add i64 %72, -15
  %78 = load i64, i64* %7, align 8
  %79 = and i64 %77, %78
  %80 = and i64 %78, 15
  %81 = add i64 %79, %80
  %82 = getelementptr inbounds i8, i8* %76, i64 %81
  store i8 %74, i8* %82, align 1
  %83 = load %"union.absl::container_internal::map_slot_type.74"*, %"union.absl::container_internal::map_slot_type.74"** %5, align 8
  %84 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %83, i64 %72
  %85 = bitcast %"union.absl::container_internal::map_slot_type.74"* %84 to i8*
  %86 = bitcast %"union.absl::container_internal::map_slot_type.74"* %32 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %85, i8* align 4 %86, i64 12, i1 false) #12
  br label %87

87:                                               ; preds = %26, %65
  %88 = add nuw i64 %27, 1
  %89 = icmp eq i64 %88, %8
  br i1 %89, label %25, label %26

90:                                               ; preds = %25
  tail call void @_ZdlPv(i8* %4) #17
  br label %91

91:                                               ; preds = %2, %25, %90
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.73"*) local_unnamed_addr #14 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #12
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 1
  br label %18

10:                                               ; preds = %155, %1
  %11 = phi i64 [ 0, %1 ], [ %157, %155 ]
  %12 = lshr i64 %11, 3
  %13 = sub i64 %11, %12
  %14 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.73", %"class.absl::container_internal::raw_hash_set.73"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %16, i64* %17, align 8
  ret void

18:                                               ; preds = %8, %155
  %19 = phi i64 [ %6, %8 ], [ %158, %155 ]
  %20 = phi i64 [ 0, %8 ], [ %157, %155 ]
  %21 = load i8*, i8** %2, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 %20
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, -2
  br i1 %24, label %25, label %155

25:                                               ; preds = %18
  %26 = ptrtoint i8* %21 to i64
  %27 = load %"union.absl::container_internal::map_slot_type.74"*, %"union.absl::container_internal::map_slot_type.74"** %9, align 8
  %28 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %27, i64 %20, i32 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %27, i64 %20, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = shl i32 %31, 4
  %33 = or i32 %32, %29
  %34 = lshr i32 %33, 7
  %35 = zext i32 %34 to i64
  %36 = lshr i64 %26, 12
  %37 = xor i64 %36, %35
  %38 = and i64 %37, %19
  %39 = getelementptr inbounds i8, i8* %21, i64 %38
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1
  %42 = icmp slt <16 x i8> %41, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %43 = bitcast <16 x i1> %42 to i16
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %45, label %57

45:                                               ; preds = %25, %45
  %46 = phi i64 [ %50, %45 ], [ %38, %25 ]
  %47 = phi i64 [ %48, %45 ], [ 0, %25 ]
  %48 = add i64 %47, 16
  %49 = add i64 %48, %46
  %50 = and i64 %49, %19
  %51 = getelementptr inbounds i8, i8* %21, i64 %50
  %52 = bitcast i8* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1
  %54 = icmp slt <16 x i8> %53, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %55 = bitcast <16 x i1> %54 to i16
  %56 = icmp eq i16 %55, 0
  br i1 %56, label %45, label %57

57:                                               ; preds = %45, %25
  %58 = phi i64 [ %38, %25 ], [ %50, %45 ]
  %59 = phi i16 [ %43, %25 ], [ %55, %45 ]
  %60 = zext i16 %59 to i32
  %61 = tail call i32 @llvm.cttz.i32(i32 %60, i1 false) #12, !range !3
  %62 = zext i32 %61 to i64
  %63 = add i64 %58, %62
  %64 = and i64 %63, %19
  %65 = sub i64 %64, %38
  %66 = sub i64 %20, %38
  %67 = xor i64 %65, %66
  %68 = and i64 %67, %19
  %69 = icmp ult i64 %68, 16
  br i1 %69, label %70, label %80, !prof !4

70:                                               ; preds = %57
  %71 = trunc i32 %33 to i8
  %72 = and i8 %71, 127
  store i8 %72, i8* %22, align 1
  %73 = load i8*, i8** %2, align 8
  %74 = add i64 %20, -15
  %75 = load i64, i64* %4, align 8
  %76 = and i64 %75, %74
  %77 = and i64 %75, 15
  %78 = add i64 %76, %77
  %79 = getelementptr inbounds i8, i8* %73, i64 %78
  store i8 %72, i8* %79, align 1
  br label %155

80:                                               ; preds = %57
  %81 = getelementptr inbounds i8, i8* %21, i64 %64
  %82 = load i8, i8* %81, align 1
  %83 = icmp eq i8 %82, -128
  %84 = trunc i32 %33 to i8
  %85 = and i8 %84, 127
  store i8 %85, i8* %81, align 1
  %86 = load i8*, i8** %2, align 8
  %87 = add i64 %64, -15
  %88 = load i64, i64* %4, align 8
  %89 = and i64 %88, %87
  %90 = and i64 %88, 15
  %91 = add i64 %89, %90
  %92 = getelementptr inbounds i8, i8* %86, i64 %91
  store i8 %85, i8* %92, align 1
  %93 = load %"union.absl::container_internal::map_slot_type.74"*, %"union.absl::container_internal::map_slot_type.74"** %9, align 8
  br i1 %83, label %94, label %108

94:                                               ; preds = %80
  %95 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %93, i64 %64
  %96 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %93, i64 %20
  %97 = bitcast %"union.absl::container_internal::map_slot_type.74"* %95 to i8*
  %98 = bitcast %"union.absl::container_internal::map_slot_type.74"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 12, i1 false) #12
  %99 = load i8*, i8** %2, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 %20
  store i8 -128, i8* %100, align 1
  %101 = load i8*, i8** %2, align 8
  %102 = add i64 %20, -15
  %103 = load i64, i64* %4, align 8
  %104 = and i64 %103, %102
  %105 = and i64 %103, 15
  %106 = add i64 %104, %105
  %107 = getelementptr inbounds i8, i8* %101, i64 %106
  store i8 -128, i8* %107, align 1
  br label %155

108:                                              ; preds = %80
  %109 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %93, i64 %20
  %110 = bitcast %"union.absl::container_internal::map_slot_type.74"* %109 to i8*
  %111 = load i8, i8* %110, align 4
  %112 = getelementptr inbounds i8, i8* %110, i64 1
  %113 = load i8, i8* %112, align 1
  %114 = getelementptr inbounds i8, i8* %110, i64 2
  %115 = load i8, i8* %114, align 2
  %116 = getelementptr inbounds i8, i8* %110, i64 3
  %117 = load i8, i8* %116, align 1
  %118 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %93, i64 %20, i32 0, i32 0, i32 1
  %119 = bitcast i32* %118 to i8*
  %120 = load i8, i8* %119, align 4
  %121 = getelementptr inbounds i8, i8* %110, i64 5
  %122 = load i8, i8* %121, align 1
  %123 = getelementptr inbounds i8, i8* %110, i64 6
  %124 = load i8, i8* %123, align 2
  %125 = getelementptr inbounds i8, i8* %110, i64 7
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %93, i64 %20, i32 0, i32 1
  %128 = bitcast %"class.angle::spirv::BoxedUint32"* %127 to i8*
  %129 = load i8, i8* %128, align 4
  %130 = getelementptr inbounds i8, i8* %110, i64 9
  %131 = load i8, i8* %130, align 1
  %132 = getelementptr inbounds i8, i8* %110, i64 10
  %133 = load i8, i8* %132, align 2
  %134 = getelementptr inbounds i8, i8* %110, i64 11
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %93, i64 %64
  %137 = bitcast %"union.absl::container_internal::map_slot_type.74"* %136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %110, i8* align 4 %137, i64 12, i1 false) #12
  %138 = load %"union.absl::container_internal::map_slot_type.74"*, %"union.absl::container_internal::map_slot_type.74"** %9, align 8
  %139 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %138, i64 %64
  %140 = bitcast %"union.absl::container_internal::map_slot_type.74"* %139 to i8*
  store i8 %111, i8* %140, align 4
  %141 = getelementptr inbounds i8, i8* %140, i64 1
  store i8 %113, i8* %141, align 1
  %142 = getelementptr inbounds i8, i8* %140, i64 2
  store i8 %115, i8* %142, align 2
  %143 = getelementptr inbounds i8, i8* %140, i64 3
  store i8 %117, i8* %143, align 1
  %144 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %138, i64 %64, i32 0, i32 0, i32 1
  %145 = bitcast i32* %144 to i8*
  store i8 %120, i8* %145, align 4
  %146 = getelementptr inbounds i8, i8* %140, i64 5
  store i8 %122, i8* %146, align 1
  %147 = getelementptr inbounds i8, i8* %140, i64 6
  store i8 %124, i8* %147, align 2
  %148 = getelementptr inbounds i8, i8* %140, i64 7
  store i8 %126, i8* %148, align 1
  %149 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.74", %"union.absl::container_internal::map_slot_type.74"* %138, i64 %64, i32 0, i32 1
  %150 = bitcast %"class.angle::spirv::BoxedUint32"* %149 to i8*
  store i8 %129, i8* %150, align 4
  %151 = getelementptr inbounds i8, i8* %140, i64 9
  store i8 %131, i8* %151, align 1
  %152 = getelementptr inbounds i8, i8* %140, i64 10
  store i8 %133, i8* %152, align 2
  %153 = getelementptr inbounds i8, i8* %140, i64 11
  store i8 %135, i8* %153, align 1
  %154 = add i64 %20, -1
  br label %155

155:                                              ; preds = %70, %108, %94, %18
  %156 = phi i64 [ %20, %18 ], [ %20, %70 ], [ %20, %94 ], [ %154, %108 ]
  %157 = add i64 %156, 1
  %158 = load i64, i64* %4, align 8
  %159 = icmp eq i64 %157, %158
  br i1 %159, label %10, label %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE22find_or_prepare_insertIS4_EENSG_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.56"*, %"struct.sh::SpirvIdAndIdList"* dereferenceable(64)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %1, i64 0, i32 1, i32 1
  %4 = bitcast %"class.angle::spirv::BoxedUint32"** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %1, i64 0, i32 1, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = shl i64 %7, 2
  %9 = tail call i64 @XXH64(i8* %5, i64 %8, i64 2882400152) #12
  %10 = getelementptr inbounds %"struct.sh::SpirvIdAndIdList", %"struct.sh::SpirvIdAndIdList"* %1, i64 0, i32 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = xor i64 %9, %12
  %14 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = lshr i64 %13, 7
  %19 = ptrtoint i8* %15 to i64
  %20 = lshr i64 %19, 12
  %21 = xor i64 %20, %18
  %22 = trunc i64 %13 to i8
  %23 = and i8 %22, 127
  %24 = insertelement <16 x i8> undef, i8 %23, i32 0
  %25 = shufflevector <16 x i8> %24, <16 x i8> undef, <16 x i32> zeroinitializer
  %26 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 1
  %27 = load i64, i64* %6, align 8
  %28 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %3, align 8
  %29 = icmp eq i64 %27, 0
  br label %30

30:                                               ; preds = %80, %2
  %31 = phi i64 [ %21, %2 ], [ %82, %80 ]
  %32 = phi i64 [ 0, %2 ], [ %81, %80 ]
  %33 = and i64 %31, %17
  %34 = getelementptr inbounds i8, i8* %15, i64 %33
  %35 = bitcast i8* %34 to <16 x i8>*
  %36 = load <16 x i8>, <16 x i8>* %35, align 1
  %37 = icmp eq <16 x i8> %25, %36
  %38 = bitcast <16 x i1> %37 to i16
  %39 = icmp eq i16 %38, 0
  br i1 %39, label %76, label %40

40:                                               ; preds = %30
  %41 = zext i16 %38 to i32
  %42 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %26, align 8
  br label %43

43:                                               ; preds = %40, %72
  %44 = phi i32 [ %41, %40 ], [ %74, %72 ]
  %45 = tail call i32 @llvm.cttz.i32(i32 %44, i1 false) #12, !range !3
  %46 = zext i32 %45 to i64
  %47 = add i64 %33, %46
  %48 = and i64 %47, %17
  %49 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %42, i64 %48, i32 0, i32 0, i32 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, %11
  br i1 %51, label %52, label %72, !prof !21

52:                                               ; preds = %43
  %53 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %42, i64 %48, i32 0, i32 1, i32 2
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %54, %27
  br i1 %55, label %56, label %72, !prof !21

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %42, i64 %48, i32 0, i32 1, i32 1
  %58 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %57, align 8
  %59 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %58, i64 %27
  br i1 %29, label %85, label %60

60:                                               ; preds = %56, %68
  %61 = phi %"class.angle::spirv::BoxedUint32"* [ %70, %68 ], [ %28, %56 ]
  %62 = phi %"class.angle::spirv::BoxedUint32"* [ %69, %68 ], [ %58, %56 ]
  %63 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %62, i64 0, i32 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %61, i64 0, i32 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %64, %66
  br i1 %67, label %68, label %72, !prof !21

68:                                               ; preds = %60
  %69 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %62, i64 1
  %70 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %61, i64 1
  %71 = icmp eq %"class.angle::spirv::BoxedUint32"* %69, %59
  br i1 %71, label %85, label %60

72:                                               ; preds = %60, %52, %43
  %73 = add i32 %44, -1
  %74 = and i32 %73, %44
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %43

76:                                               ; preds = %72, %30
  %77 = icmp eq <16 x i8> %36, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %78 = bitcast <16 x i1> %77 to i16
  %79 = icmp eq i16 %78, 0
  br i1 %79, label %80, label %83, !prof !5

80:                                               ; preds = %76
  %81 = add i64 %32, 16
  %82 = add i64 %81, %33
  br label %30

83:                                               ; preds = %76
  %84 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.56"* %0, i64 %13)
  br label %85

85:                                               ; preds = %56, %68, %83
  %86 = phi i64 [ %84, %83 ], [ %48, %68 ], [ %48, %56 ]
  %87 = phi i8 [ 1, %83 ], [ 0, %68 ], [ 0, %56 ]
  %88 = insertvalue { i64, i8 } undef, i64 %86, 0
  %89 = insertvalue { i64, i8 } %88, i8 %87, 1
  ret { i64, i8 } %89
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.56"*, i64) local_unnamed_addr #14 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #12, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !4

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.56"* %0, i64 1) #12
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.56"* %0) #12
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.56"* %0, i64 %58) #12
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #12, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.56"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = mul i64 %1, 72
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #17
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type.57"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #12
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %112, label %26

25:                                               ; preds = %108
  br i1 %24, label %112, label %111

26:                                               ; preds = %2, %108
  %27 = phi i64 [ %109, %108 ], [ 0, %2 ]
  %28 = getelementptr inbounds i8, i8* %4, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = icmp sgt i8 %29, -1
  br i1 %30, label %31, label %108

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %6, i64 %27, i32 0, i32 1, i32 1
  %33 = bitcast %"class.angle::spirv::BoxedUint32"** %32 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %6, i64 %27, i32 0, i32 1, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = shl i64 %36, 2
  %38 = tail call i64 @XXH64(i8* %34, i64 %37, i64 2882400152) #12
  %39 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %6, i64 %27, i32 0, i32 0, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = xor i64 %38, %41
  %43 = load i8*, i8** %3, align 8
  %44 = load i64, i64* %7, align 8
  %45 = lshr i64 %42, 7
  %46 = ptrtoint i8* %43 to i64
  %47 = lshr i64 %46, 12
  %48 = xor i64 %47, %45
  %49 = and i64 %48, %44
  %50 = getelementptr inbounds i8, i8* %43, i64 %49
  %51 = bitcast i8* %50 to <16 x i8>*
  %52 = load <16 x i8>, <16 x i8>* %51, align 1
  %53 = icmp slt <16 x i8> %52, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %54 = bitcast <16 x i1> %53 to i16
  %55 = icmp eq i16 %54, 0
  br i1 %55, label %56, label %68

56:                                               ; preds = %31, %56
  %57 = phi i64 [ %61, %56 ], [ %49, %31 ]
  %58 = phi i64 [ %59, %56 ], [ 0, %31 ]
  %59 = add i64 %58, 16
  %60 = add i64 %59, %57
  %61 = and i64 %60, %44
  %62 = getelementptr inbounds i8, i8* %43, i64 %61
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = icmp slt <16 x i8> %64, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %66 = bitcast <16 x i1> %65 to i16
  %67 = icmp eq i16 %66, 0
  br i1 %67, label %56, label %68

68:                                               ; preds = %56, %31
  %69 = phi i64 [ %49, %31 ], [ %61, %56 ]
  %70 = phi i16 [ %54, %31 ], [ %66, %56 ]
  %71 = zext i16 %70 to i32
  %72 = tail call i32 @llvm.cttz.i32(i32 %71, i1 false) #12, !range !3
  %73 = zext i32 %72 to i64
  %74 = add i64 %69, %73
  %75 = and i64 %74, %44
  %76 = trunc i64 %42 to i8
  %77 = and i8 %76, 127
  %78 = getelementptr inbounds i8, i8* %43, i64 %75
  store i8 %77, i8* %78, align 1
  %79 = load i8*, i8** %3, align 8
  %80 = add i64 %75, -15
  %81 = load i64, i64* %7, align 8
  %82 = and i64 %80, %81
  %83 = and i64 %81, 15
  %84 = add i64 %82, %83
  %85 = getelementptr inbounds i8, i8* %79, i64 %84
  store i8 %77, i8* %85, align 1
  %86 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %5, align 8
  %87 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %86, i64 %75, i32 0, i32 0, i32 0, i32 0
  %88 = load i32, i32* %39, align 8
  store i32 %88, i32* %87, align 8
  %89 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %86, i64 %75, i32 0, i32 1
  %90 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %6, i64 %27, i32 0, i32 1
  %91 = bitcast %"class.angle::FastVector"* %89 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %91, i8 0, i64 32, i1 false) #12
  %92 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %86, i64 %75, i32 0, i32 1, i32 1
  %93 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %89, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %93, %"class.angle::spirv::BoxedUint32"** %92, align 8
  %94 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %86, i64 %75, i32 0, i32 1, i32 2
  %95 = bitcast i64* %94 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %95, align 8
  tail call void @_ZN5angle10FastVectorINS_5spirv11BoxedUint32INS1_11IdRefHelperEEELm8ENSt3__15arrayIS4_Lm8EEEE4swapERS8_(%"class.angle::FastVector"* %89, %"class.angle::FastVector"* dereferenceable(56) %90) #12
  %96 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %6, i64 %27, i32 1
  %97 = bitcast [8 x i8]* %96 to i32*
  %98 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %86, i64 %75, i32 1
  %99 = bitcast [8 x i8]* %98 to i32*
  %100 = load i32, i32* %97, align 8
  store i32 %100, i32* %99, align 8
  store i64 0, i64* %35, align 8
  %101 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %32, align 8
  %102 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %6, i64 %27, i32 0, i32 1, i32 0, i32 0, i64 0
  %103 = icmp eq %"class.angle::spirv::BoxedUint32"* %101, %102
  %104 = icmp eq %"class.angle::spirv::BoxedUint32"* %101, null
  %105 = or i1 %103, %104
  br i1 %105, label %108, label %106

106:                                              ; preds = %68
  %107 = bitcast %"class.angle::spirv::BoxedUint32"* %101 to i8*
  tail call void @_ZdaPv(i8* %107) #17
  br label %108

108:                                              ; preds = %106, %68, %26
  %109 = add nuw i64 %27, 1
  %110 = icmp eq i64 %109, %8
  br i1 %110, label %25, label %26

111:                                              ; preds = %25
  tail call void @_ZdlPv(i8* %4) #17
  br label %112

112:                                              ; preds = %2, %25, %111
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.56"*) local_unnamed_addr #14 comdat align 2 {
  %2 = alloca %"union.absl::container_internal::map_slot_type.57", align 8
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %4, i64 %6) #12
  %7 = bitcast %"union.absl::container_internal::map_slot_type.57"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %7) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 72, i1 false)
  %8 = load i64, i64* %5, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %32, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1
  %14 = bitcast %"class.angle::FastVector"* %13 to i8*
  %15 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1, i32 1
  %16 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %13, i64 0, i32 0, i32 0, i64 0
  %17 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1, i32 2
  %18 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1, i32 3
  %19 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 1
  %20 = bitcast [8 x i8]* %19 to i32*
  %21 = bitcast %"class.angle::spirv::BoxedUint32"** %15 to i64*
  %22 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %13, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %23 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1, i32 0, i32 0, i64 1, i32 0, i32 0
  %24 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1, i32 0, i32 0, i64 2, i32 0, i32 0
  %25 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1, i32 0, i32 0, i64 3, i32 0, i32 0
  %26 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1, i32 0, i32 0, i64 4, i32 0, i32 0
  %27 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1, i32 0, i32 0, i64 5, i32 0, i32 0
  %28 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1, i32 0, i32 0, i64 6, i32 0, i32 0
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1, i32 0, i32 0, i64 7, i32 0, i32 0
  %30 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %2, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %31 = bitcast i64* %17 to <2 x i64>*
  br label %40

32:                                               ; preds = %263, %1
  %33 = phi i64 [ 0, %1 ], [ %265, %263 ]
  %34 = lshr i64 %33, 3
  %35 = sub i64 %33, %34
  %36 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.56", %"class.absl::container_internal::raw_hash_set.56"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %38, i64* %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %7) #12
  ret void

40:                                               ; preds = %10, %263
  %41 = phi i64 [ 0, %10 ], [ %265, %263 ]
  %42 = load i8*, i8** %3, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %41
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, -2
  br i1 %45, label %46, label %263

46:                                               ; preds = %40
  %47 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %11, align 8
  %48 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %47, i64 %41, i32 0, i32 1, i32 1
  %49 = bitcast %"class.angle::spirv::BoxedUint32"** %48 to i8**
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %47, i64 %41, i32 0, i32 1, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = shl i64 %52, 2
  %54 = call i64 @XXH64(i8* %50, i64 %53, i64 2882400152) #12
  %55 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %47, i64 %41, i32 0, i32 0, i32 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i64
  %58 = xor i64 %54, %57
  %59 = load i8*, i8** %3, align 8
  %60 = load i64, i64* %5, align 8
  %61 = lshr i64 %58, 7
  %62 = ptrtoint i8* %59 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %61
  %65 = and i64 %64, %60
  %66 = getelementptr inbounds i8, i8* %59, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %46, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %46 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %46 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %60
  %78 = getelementptr inbounds i8, i8* %59, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %46
  %85 = phi i64 [ %65, %46 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %46 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = call i32 @llvm.cttz.i32(i32 %87, i1 false) #12, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %60
  %92 = sub i64 %91, %65
  %93 = sub i64 %41, %65
  %94 = xor i64 %92, %93
  %95 = and i64 %94, %60
  %96 = icmp ult i64 %95, 16
  br i1 %96, label %97, label %108, !prof !4

97:                                               ; preds = %84
  %98 = trunc i64 %58 to i8
  %99 = and i8 %98, 127
  %100 = getelementptr inbounds i8, i8* %59, i64 %41
  store i8 %99, i8* %100, align 1
  %101 = load i8*, i8** %3, align 8
  %102 = add i64 %41, -15
  %103 = load i64, i64* %5, align 8
  %104 = and i64 %103, %102
  %105 = and i64 %103, 15
  %106 = add i64 %104, %105
  %107 = getelementptr inbounds i8, i8* %101, i64 %106
  store i8 %99, i8* %107, align 1
  br label %263

108:                                              ; preds = %84
  %109 = getelementptr inbounds i8, i8* %59, i64 %91
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, -128
  %112 = trunc i64 %58 to i8
  %113 = and i8 %112, 127
  store i8 %113, i8* %109, align 1
  %114 = load i8*, i8** %3, align 8
  %115 = add i64 %91, -15
  %116 = load i64, i64* %5, align 8
  %117 = and i64 %116, %115
  %118 = and i64 %116, 15
  %119 = add i64 %117, %118
  %120 = getelementptr inbounds i8, i8* %114, i64 %119
  store i8 %113, i8* %120, align 1
  %121 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %11, align 8
  %122 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %41, i32 0, i32 0, i32 0, i32 0
  br i1 %111, label %123, label %157

123:                                              ; preds = %108
  %124 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %91, i32 0, i32 0, i32 0, i32 0
  %125 = load i32, i32* %122, align 8
  store i32 %125, i32* %124, align 8
  %126 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %91, i32 0, i32 1
  %127 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %41, i32 0, i32 1
  %128 = bitcast %"class.angle::FastVector"* %126 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %128, i8 0, i64 32, i1 false) #12
  %129 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %91, i32 0, i32 1, i32 1
  %130 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %126, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %130, %"class.angle::spirv::BoxedUint32"** %129, align 8
  %131 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %91, i32 0, i32 1, i32 2
  %132 = bitcast i64* %131 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %132, align 8
  call void @_ZN5angle10FastVectorINS_5spirv11BoxedUint32INS1_11IdRefHelperEEELm8ENSt3__15arrayIS4_Lm8EEEE4swapERS8_(%"class.angle::FastVector"* %126, %"class.angle::FastVector"* dereferenceable(56) %127) #12
  %133 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %41, i32 1
  %134 = bitcast [8 x i8]* %133 to i32*
  %135 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %91, i32 1
  %136 = bitcast [8 x i8]* %135 to i32*
  %137 = load i32, i32* %134, align 8
  store i32 %137, i32* %136, align 8
  %138 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %41, i32 0, i32 1, i32 2
  store i64 0, i64* %138, align 8
  %139 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %41, i32 0, i32 1, i32 1
  %140 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %139, align 8
  %141 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %41, i32 0, i32 1, i32 0, i32 0, i64 0
  %142 = icmp eq %"class.angle::spirv::BoxedUint32"* %140, %141
  %143 = icmp eq %"class.angle::spirv::BoxedUint32"* %140, null
  %144 = or i1 %142, %143
  br i1 %144, label %147, label %145

145:                                              ; preds = %123
  %146 = bitcast %"class.angle::spirv::BoxedUint32"* %140 to i8*
  call void @_ZdaPv(i8* %146) #17
  br label %147

147:                                              ; preds = %123, %145
  %148 = load i8*, i8** %3, align 8
  %149 = getelementptr inbounds i8, i8* %148, i64 %41
  store i8 -128, i8* %149, align 1
  %150 = load i8*, i8** %3, align 8
  %151 = add i64 %41, -15
  %152 = load i64, i64* %5, align 8
  %153 = and i64 %152, %151
  %154 = and i64 %152, 15
  %155 = add i64 %153, %154
  %156 = getelementptr inbounds i8, i8* %150, i64 %155
  store i8 -128, i8* %156, align 1
  br label %263

157:                                              ; preds = %108
  %158 = load i32, i32* %122, align 8
  store i32 %158, i32* %12, align 8
  %159 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %41, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 32, i1 false) #12
  store %"class.angle::spirv::BoxedUint32"* %16, %"class.angle::spirv::BoxedUint32"** %15, align 8
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %31, align 8
  call void @_ZN5angle10FastVectorINS_5spirv11BoxedUint32INS1_11IdRefHelperEEELm8ENSt3__15arrayIS4_Lm8EEEE4swapERS8_(%"class.angle::FastVector"* %13, %"class.angle::FastVector"* dereferenceable(56) %159) #12
  %160 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %41, i32 1
  %161 = bitcast [8 x i8]* %160 to i32*
  %162 = load i32, i32* %161, align 8
  store i32 %162, i32* %20, align 8
  %163 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %41, i32 0, i32 1, i32 2
  store i64 0, i64* %163, align 8
  %164 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %41, i32 0, i32 1, i32 1
  %165 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %164, align 8
  %166 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %121, i64 %41, i32 0, i32 1, i32 0, i32 0, i64 0
  %167 = icmp eq %"class.angle::spirv::BoxedUint32"* %165, %166
  %168 = icmp eq %"class.angle::spirv::BoxedUint32"* %165, null
  %169 = or i1 %167, %168
  br i1 %169, label %172, label %170

170:                                              ; preds = %157
  %171 = bitcast %"class.angle::spirv::BoxedUint32"* %165 to i8*
  call void @_ZdaPv(i8* %171) #17
  br label %172

172:                                              ; preds = %157, %170
  %173 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %11, align 8
  %174 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %173, i64 %91, i32 0, i32 0, i32 0, i32 0
  %175 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %173, i64 %41, i32 0, i32 0, i32 0, i32 0
  %176 = load i32, i32* %174, align 8
  store i32 %176, i32* %175, align 8
  %177 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %173, i64 %41, i32 0, i32 1
  %178 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %173, i64 %91, i32 0, i32 1
  %179 = bitcast %"class.angle::FastVector"* %177 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %179, i8 0, i64 32, i1 false) #12
  %180 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %173, i64 %41, i32 0, i32 1, i32 1
  %181 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %177, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %181, %"class.angle::spirv::BoxedUint32"** %180, align 8
  %182 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %173, i64 %41, i32 0, i32 1, i32 2
  %183 = bitcast i64* %182 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %183, align 8
  call void @_ZN5angle10FastVectorINS_5spirv11BoxedUint32INS1_11IdRefHelperEEELm8ENSt3__15arrayIS4_Lm8EEEE4swapERS8_(%"class.angle::FastVector"* %177, %"class.angle::FastVector"* dereferenceable(56) %178) #12
  %184 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %173, i64 %91, i32 1
  %185 = bitcast [8 x i8]* %184 to i32*
  %186 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %173, i64 %41, i32 1
  %187 = bitcast [8 x i8]* %186 to i32*
  %188 = load i32, i32* %185, align 8
  store i32 %188, i32* %187, align 8
  %189 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %173, i64 %91, i32 0, i32 1, i32 2
  store i64 0, i64* %189, align 8
  %190 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %173, i64 %91, i32 0, i32 1, i32 1
  %191 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %190, align 8
  %192 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %173, i64 %91, i32 0, i32 1, i32 0, i32 0, i64 0
  %193 = icmp eq %"class.angle::spirv::BoxedUint32"* %191, %192
  %194 = icmp eq %"class.angle::spirv::BoxedUint32"* %191, null
  %195 = or i1 %193, %194
  br i1 %195, label %198, label %196

196:                                              ; preds = %172
  %197 = bitcast %"class.angle::spirv::BoxedUint32"* %191 to i8*
  call void @_ZdaPv(i8* %197) #17
  br label %198

198:                                              ; preds = %172, %196
  %199 = load %"union.absl::container_internal::map_slot_type.57"*, %"union.absl::container_internal::map_slot_type.57"** %11, align 8
  %200 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 0, i32 0, i32 0
  %201 = load i32, i32* %12, align 8
  store i32 %201, i32* %200, align 8
  %202 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 1
  %203 = bitcast %"class.angle::FastVector"* %202 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %203, i8 0, i64 32, i1 false) #12
  %204 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 1, i32 1
  %205 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %202, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %205, %"class.angle::spirv::BoxedUint32"** %204, align 8
  %206 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 1, i32 2
  %207 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 1, i32 3
  %208 = bitcast i64* %206 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %208, align 8
  %209 = load i64, i64* %17, align 8
  store i64 %209, i64* %206, align 8
  store i64 0, i64* %17, align 8
  %210 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %15, align 8
  %211 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %204, align 8
  %212 = icmp eq %"class.angle::spirv::BoxedUint32"* %211, %205
  br i1 %212, label %213, label %214

213:                                              ; preds = %198
  store %"class.angle::spirv::BoxedUint32"* %16, %"class.angle::spirv::BoxedUint32"** %15, align 8
  br label %216

214:                                              ; preds = %198
  %215 = ptrtoint %"class.angle::spirv::BoxedUint32"* %211 to i64
  store i64 %215, i64* %21, align 8
  br label %216

216:                                              ; preds = %214, %213
  %217 = icmp eq %"class.angle::spirv::BoxedUint32"* %210, %16
  %218 = select i1 %217, %"class.angle::spirv::BoxedUint32"* %205, %"class.angle::spirv::BoxedUint32"* %210
  store %"class.angle::spirv::BoxedUint32"* %218, %"class.angle::spirv::BoxedUint32"** %204, align 8
  %219 = load i64, i64* %207, align 8
  %220 = load i64, i64* %18, align 8
  store i64 %220, i64* %207, align 8
  store i64 %219, i64* %18, align 8
  %221 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %204, align 8
  %222 = icmp eq %"class.angle::spirv::BoxedUint32"* %221, %205
  %223 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %15, align 8
  %224 = icmp eq %"class.angle::spirv::BoxedUint32"* %223, %16
  %225 = or i1 %222, %224
  br i1 %225, label %226, label %251

226:                                              ; preds = %216
  %227 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %202, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %228 = load i32, i32* %227, align 4
  %229 = load i32, i32* %22, align 8
  store i32 %229, i32* %227, align 4
  store i32 %228, i32* %22, align 8
  %230 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 1, i32 0, i32 0, i64 1, i32 0, i32 0
  %231 = load i32, i32* %230, align 4
  %232 = load i32, i32* %23, align 4
  store i32 %232, i32* %230, align 4
  store i32 %231, i32* %23, align 4
  %233 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 1, i32 0, i32 0, i64 2, i32 0, i32 0
  %234 = load i32, i32* %233, align 4
  %235 = load i32, i32* %24, align 8
  store i32 %235, i32* %233, align 4
  store i32 %234, i32* %24, align 8
  %236 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 1, i32 0, i32 0, i64 3, i32 0, i32 0
  %237 = load i32, i32* %236, align 4
  %238 = load i32, i32* %25, align 4
  store i32 %238, i32* %236, align 4
  store i32 %237, i32* %25, align 4
  %239 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 1, i32 0, i32 0, i64 4, i32 0, i32 0
  %240 = load i32, i32* %239, align 4
  %241 = load i32, i32* %26, align 8
  store i32 %241, i32* %239, align 4
  store i32 %240, i32* %26, align 8
  %242 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 1, i32 0, i32 0, i64 5, i32 0, i32 0
  %243 = load i32, i32* %242, align 4
  %244 = load i32, i32* %27, align 4
  store i32 %244, i32* %242, align 4
  store i32 %243, i32* %27, align 4
  %245 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 1, i32 0, i32 0, i64 6, i32 0, i32 0
  %246 = load i32, i32* %245, align 4
  %247 = load i32, i32* %28, align 8
  store i32 %247, i32* %245, align 4
  store i32 %246, i32* %28, align 8
  %248 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 0, i32 1, i32 0, i32 0, i64 7, i32 0, i32 0
  %249 = load i32, i32* %248, align 4
  %250 = load i32, i32* %29, align 4
  store i32 %250, i32* %248, align 4
  store i32 %249, i32* %29, align 4
  br label %251

251:                                              ; preds = %216, %226
  %252 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.57", %"union.absl::container_internal::map_slot_type.57"* %199, i64 %91, i32 1
  %253 = bitcast [8 x i8]* %252 to i32*
  %254 = load i32, i32* %20, align 8
  store i32 %254, i32* %253, align 8
  store i64 0, i64* %17, align 8
  %255 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %15, align 8
  %256 = icmp eq %"class.angle::spirv::BoxedUint32"* %255, %30
  %257 = icmp eq %"class.angle::spirv::BoxedUint32"* %255, null
  %258 = or i1 %256, %257
  br i1 %258, label %261, label %259

259:                                              ; preds = %251
  %260 = bitcast %"class.angle::spirv::BoxedUint32"* %255 to i8*
  call void @_ZdaPv(i8* %260) #17
  br label %261

261:                                              ; preds = %251, %259
  %262 = add i64 %41, -1
  br label %263

263:                                              ; preds = %97, %261, %147, %40
  %264 = phi i64 [ %41, %40 ], [ %41, %97 ], [ %41, %147 ], [ %262, %261 ]
  %265 = add i64 %264, 1
  %266 = load i64, i64* %5, align 8
  %267 = icmp eq i64 %265, %266
  br i1 %267, label %32, label %40
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle10FastVectorINS_5spirv11BoxedUint32INS1_11IdRefHelperEEELm8ENSt3__15arrayIS4_Lm8EEEE4swapERS8_(%"class.angle::FastVector"*, %"class.angle::FastVector"* dereferenceable(56)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 2
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %4, align 8
  store i64 %6, i64* %3, align 8
  store i64 %5, i64* %4, align 8
  %7 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 1
  %8 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %7, align 8
  %9 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 1
  %10 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %9, align 8
  %11 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 0, i32 0, i64 0
  %12 = icmp eq %"class.angle::spirv::BoxedUint32"* %10, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 0, i32 0, i64 0
  store %"class.angle::spirv::BoxedUint32"* %14, %"class.angle::spirv::BoxedUint32"** %7, align 8
  br label %18

15:                                               ; preds = %2
  %16 = ptrtoint %"class.angle::spirv::BoxedUint32"* %10 to i64
  %17 = bitcast %"class.angle::spirv::BoxedUint32"** %7 to i64*
  store i64 %16, i64* %17, align 8
  br label %18

18:                                               ; preds = %15, %13
  %19 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 0, i32 0, i64 0
  %20 = icmp eq %"class.angle::spirv::BoxedUint32"* %8, %19
  %21 = select i1 %20, %"class.angle::spirv::BoxedUint32"* %11, %"class.angle::spirv::BoxedUint32"* %8
  store %"class.angle::spirv::BoxedUint32"* %21, %"class.angle::spirv::BoxedUint32"** %9, align 8
  %22 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 3
  %23 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 3
  %24 = load i64, i64* %22, align 8
  %25 = load i64, i64* %23, align 8
  store i64 %25, i64* %22, align 8
  store i64 %24, i64* %23, align 8
  %26 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %9, align 8
  %27 = icmp eq %"class.angle::spirv::BoxedUint32"* %26, %11
  %28 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %7, align 8
  %29 = icmp eq %"class.angle::spirv::BoxedUint32"* %28, %19
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %64

31:                                               ; preds = %18
  %32 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %35 = load i32, i32* %34, align 4
  store i32 %35, i32* %32, align 4
  store i32 %33, i32* %34, align 4
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 0, i32 0, i64 1, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 0, i32 0, i64 1, i32 0, i32 0
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %36, align 4
  store i32 %37, i32* %38, align 4
  %40 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 0, i32 0, i64 2, i32 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 0, i32 0, i64 2, i32 0, i32 0
  %43 = load i32, i32* %42, align 4
  store i32 %43, i32* %40, align 4
  store i32 %41, i32* %42, align 4
  %44 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 0, i32 0, i64 3, i32 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 0, i32 0, i64 3, i32 0, i32 0
  %47 = load i32, i32* %46, align 4
  store i32 %47, i32* %44, align 4
  store i32 %45, i32* %46, align 4
  %48 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 0, i32 0, i64 4, i32 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 0, i32 0, i64 4, i32 0, i32 0
  %51 = load i32, i32* %50, align 4
  store i32 %51, i32* %48, align 4
  store i32 %49, i32* %50, align 4
  %52 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 0, i32 0, i64 5, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 0, i32 0, i64 5, i32 0, i32 0
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %52, align 4
  store i32 %53, i32* %54, align 4
  %56 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 0, i32 0, i64 6, i32 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 0, i32 0, i64 6, i32 0, i32 0
  %59 = load i32, i32* %58, align 4
  store i32 %59, i32* %56, align 4
  store i32 %57, i32* %58, align 4
  %60 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %0, i64 0, i32 0, i32 0, i64 7, i32 0, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %1, i64 0, i32 0, i32 0, i64 7, i32 0, i32 0
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %60, align 4
  store i32 %61, i32* %62, align 4
  br label %64

64:                                               ; preds = %18, %31
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.41"*, i64) local_unnamed_addr #14 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #12, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !4

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.41"* %0, i64 1) #12
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.41"* %0) #12
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.41"* %0, i64 %58) #12
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #12, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.41"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type.42"*, %"union.absl::container_internal::map_slot_type.42"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 19
  %11 = and i64 %10, -4
  %12 = shl i64 %1, 3
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #17
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type.42"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #12
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %96, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %92
  br i1 %24, label %96, label %95

28:                                               ; preds = %25, %92
  %29 = phi i64 [ 0, %25 ], [ %93, %92 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %92

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %6, i64 %29
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %34, i64 0, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = add i64 %26, %37
  %39 = zext i64 %38 to i128
  %40 = mul nuw i128 %39, 11376068507788127593
  %41 = lshr i128 %40, 64
  %42 = xor i128 %41, %40
  %43 = trunc i128 %42 to i64
  %44 = load i8*, i8** %3, align 8
  %45 = load i64, i64* %7, align 8
  %46 = lshr i64 %43, 7
  %47 = ptrtoint i8* %44 to i64
  %48 = lshr i64 %47, 12
  %49 = xor i64 %46, %48
  %50 = and i64 %49, %45
  %51 = getelementptr inbounds i8, i8* %44, i64 %50
  %52 = bitcast i8* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1
  %54 = icmp slt <16 x i8> %53, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %55 = bitcast <16 x i1> %54 to i16
  %56 = icmp eq i16 %55, 0
  br i1 %56, label %57, label %69

57:                                               ; preds = %33, %57
  %58 = phi i64 [ %62, %57 ], [ %50, %33 ]
  %59 = phi i64 [ %60, %57 ], [ 0, %33 ]
  %60 = add i64 %59, 16
  %61 = add i64 %60, %58
  %62 = and i64 %61, %45
  %63 = getelementptr inbounds i8, i8* %44, i64 %62
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = icmp slt <16 x i8> %65, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %67 = bitcast <16 x i1> %66 to i16
  %68 = icmp eq i16 %67, 0
  br i1 %68, label %57, label %69

69:                                               ; preds = %57, %33
  %70 = phi i64 [ %50, %33 ], [ %62, %57 ]
  %71 = phi i16 [ %55, %33 ], [ %67, %57 ]
  %72 = zext i16 %71 to i32
  %73 = tail call i32 @llvm.cttz.i32(i32 %72, i1 false) #12, !range !3
  %74 = zext i32 %73 to i64
  %75 = add i64 %70, %74
  %76 = and i64 %75, %45
  %77 = trunc i128 %42 to i8
  %78 = and i8 %77, 127
  %79 = getelementptr inbounds i8, i8* %44, i64 %76
  store i8 %78, i8* %79, align 1
  %80 = load i8*, i8** %3, align 8
  %81 = add i64 %76, -15
  %82 = load i64, i64* %7, align 8
  %83 = and i64 %81, %82
  %84 = and i64 %82, 15
  %85 = add i64 %83, %84
  %86 = getelementptr inbounds i8, i8* %80, i64 %85
  store i8 %78, i8* %86, align 1
  %87 = load %"union.absl::container_internal::map_slot_type.42"*, %"union.absl::container_internal::map_slot_type.42"** %5, align 8
  %88 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %87, i64 %76
  %89 = bitcast %"union.absl::container_internal::map_slot_type.42"* %88 to i64*
  %90 = bitcast %"union.absl::container_internal::map_slot_type.42"* %34 to i64*
  %91 = load i64, i64* %90, align 4
  store i64 %91, i64* %89, align 4
  br label %92

92:                                               ; preds = %28, %69
  %93 = add nuw i64 %29, 1
  %94 = icmp eq i64 %93, %8
  br i1 %94, label %27, label %28

95:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #17
  br label %96

96:                                               ; preds = %2, %27, %95
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.41"*) local_unnamed_addr #14 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #12
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %123, %1
  %12 = phi i64 [ 0, %1 ], [ %125, %123 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.41", %"class.absl::container_internal::raw_hash_set.41"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %123
  %20 = phi i64 [ %6, %8 ], [ %126, %123 ]
  %21 = phi i64 [ 0, %8 ], [ %125, %123 ]
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -2
  br i1 %25, label %26, label %123

26:                                               ; preds = %19
  %27 = ptrtoint i8* %22 to i64
  %28 = load %"union.absl::container_internal::map_slot_type.42"*, %"union.absl::container_internal::map_slot_type.42"** %9, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %28, i64 %21, i32 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = add i64 %10, %31
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = lshr i64 %37, 7
  %39 = lshr i64 %27, 12
  %40 = xor i64 %38, %39
  %41 = and i64 %40, %20
  %42 = getelementptr inbounds i8, i8* %22, i64 %41
  %43 = bitcast i8* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 1
  %45 = icmp slt <16 x i8> %44, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %46 = bitcast <16 x i1> %45 to i16
  %47 = icmp eq i16 %46, 0
  br i1 %47, label %48, label %60

48:                                               ; preds = %26, %48
  %49 = phi i64 [ %53, %48 ], [ %41, %26 ]
  %50 = phi i64 [ %51, %48 ], [ 0, %26 ]
  %51 = add i64 %50, 16
  %52 = add i64 %51, %49
  %53 = and i64 %52, %20
  %54 = getelementptr inbounds i8, i8* %22, i64 %53
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1
  %57 = icmp slt <16 x i8> %56, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %58 = bitcast <16 x i1> %57 to i16
  %59 = icmp eq i16 %58, 0
  br i1 %59, label %48, label %60

60:                                               ; preds = %48, %26
  %61 = phi i64 [ %41, %26 ], [ %53, %48 ]
  %62 = phi i16 [ %46, %26 ], [ %58, %48 ]
  %63 = zext i16 %62 to i32
  %64 = tail call i32 @llvm.cttz.i32(i32 %63, i1 false) #12, !range !3
  %65 = zext i32 %64 to i64
  %66 = add i64 %61, %65
  %67 = and i64 %66, %20
  %68 = sub i64 %67, %41
  %69 = sub i64 %21, %41
  %70 = xor i64 %68, %69
  %71 = and i64 %70, %20
  %72 = icmp ult i64 %71, 16
  br i1 %72, label %73, label %83, !prof !4

73:                                               ; preds = %60
  %74 = trunc i128 %36 to i8
  %75 = and i8 %74, 127
  store i8 %75, i8* %23, align 1
  %76 = load i8*, i8** %2, align 8
  %77 = add i64 %21, -15
  %78 = load i64, i64* %4, align 8
  %79 = and i64 %78, %77
  %80 = and i64 %78, 15
  %81 = add i64 %79, %80
  %82 = getelementptr inbounds i8, i8* %76, i64 %81
  store i8 %75, i8* %82, align 1
  br label %123

83:                                               ; preds = %60
  %84 = getelementptr inbounds i8, i8* %22, i64 %67
  %85 = load i8, i8* %84, align 1
  %86 = icmp eq i8 %85, -128
  %87 = trunc i128 %36 to i8
  %88 = and i8 %87, 127
  store i8 %88, i8* %84, align 1
  %89 = load i8*, i8** %2, align 8
  %90 = add i64 %67, -15
  %91 = load i64, i64* %4, align 8
  %92 = and i64 %91, %90
  %93 = and i64 %91, 15
  %94 = add i64 %92, %93
  %95 = getelementptr inbounds i8, i8* %89, i64 %94
  store i8 %88, i8* %95, align 1
  %96 = load %"union.absl::container_internal::map_slot_type.42"*, %"union.absl::container_internal::map_slot_type.42"** %9, align 8
  br i1 %86, label %97, label %112

97:                                               ; preds = %83
  %98 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %96, i64 %67
  %99 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %96, i64 %21
  %100 = bitcast %"union.absl::container_internal::map_slot_type.42"* %98 to i64*
  %101 = bitcast %"union.absl::container_internal::map_slot_type.42"* %99 to i64*
  %102 = load i64, i64* %101, align 4
  store i64 %102, i64* %100, align 4
  %103 = load i8*, i8** %2, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 %21
  store i8 -128, i8* %104, align 1
  %105 = load i8*, i8** %2, align 8
  %106 = add i64 %21, -15
  %107 = load i64, i64* %4, align 8
  %108 = and i64 %107, %106
  %109 = and i64 %107, 15
  %110 = add i64 %108, %109
  %111 = getelementptr inbounds i8, i8* %105, i64 %110
  store i8 -128, i8* %111, align 1
  br label %123

112:                                              ; preds = %83
  %113 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %96, i64 %21
  %114 = bitcast %"union.absl::container_internal::map_slot_type.42"* %113 to i64*
  %115 = load i64, i64* %114, align 4
  %116 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %96, i64 %67
  %117 = bitcast %"union.absl::container_internal::map_slot_type.42"* %116 to i64*
  %118 = load i64, i64* %117, align 4
  store i64 %118, i64* %114, align 4
  %119 = load %"union.absl::container_internal::map_slot_type.42"*, %"union.absl::container_internal::map_slot_type.42"** %9, align 8
  %120 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.42", %"union.absl::container_internal::map_slot_type.42"* %119, i64 %67
  %121 = bitcast %"union.absl::container_internal::map_slot_type.42"* %120 to i64*
  store i64 %115, i64* %121, align 4
  %122 = add i64 %21, -1
  br label %123

123:                                              ; preds = %73, %112, %97, %19
  %124 = phi i64 [ %21, %19 ], [ %21, %73 ], [ %21, %97 ], [ %122, %112 ]
  %125 = add i64 %124, 1
  %126 = load i64, i64* %4, align 8
  %127 = icmp eq i64 %125, %126
  br i1 %127, label %11, label %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #1 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #16

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { cold noreturn nounwind }
attributes #14 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { builtin nounwind }
attributes #18 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 0, i32 33}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!7, !9, !11, !13, !15, !17, !19}
!7 = distinct !{!7, !8, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE19EmplaceDecomposableclIS4_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS4_EEENSM_IJOS5_EEEEEENSC_INSG_8iteratorEbEERKT_DpOT0_: argument 0"}
!8 = distinct !{!8, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE19EmplaceDecomposableclIS4_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS4_EEENSM_IJOS5_EEEEEENSC_INSG_8iteratorEbEERKT_DpOT0_"}
!9 = distinct !{!9, !10, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS5_13SpirvTypeDataEEENS5_13SpirvTypeHashENSt3__18equal_toIS6_EENSA_9allocatorINSA_4pairIKS6_S7_EEEEE19EmplaceDecomposableEOS6_NSA_5tupleIJOS7_EEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSL_IJSP_EEEEEclsr3stdE7declvalIT1_EEEEOSO_NSE_ISS_ST_EE: argument 0"}
!10 = distinct !{!10, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS5_13SpirvTypeDataEEENS5_13SpirvTypeHashENSt3__18equal_toIS6_EENSA_9allocatorINSA_4pairIKS6_S7_EEEEE19EmplaceDecomposableEOS6_NSA_5tupleIJOS7_EEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSL_IJSP_EEEEEclsr3stdE7declvalIT1_EEEEOSO_NSE_ISS_ST_EE"}
!11 = distinct !{!11, !12, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS4_13SpirvTypeDataEEENS4_13SpirvTypeHashENSt3__18equal_toIS5_EENS9_9allocatorINS9_4pairIKS5_S6_EEEEE19EmplaceDecomposableEJNSD_IS5_S6_EEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSK_DpOSL_: argument 0"}
!12 = distinct !{!12, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS4_13SpirvTypeDataEEENS4_13SpirvTypeHashENSt3__18equal_toIS5_EENS9_9allocatorINS9_4pairIKS5_S6_EEEEE19EmplaceDecomposableEJNSD_IS5_S6_EEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSK_DpOSL_"}
!13 = distinct !{!13, !14, !"_ZN4absl18container_internal17FlatHashMapPolicyIN2sh9SpirvTypeENS2_13SpirvTypeDataEE5applyINS0_12raw_hash_setIS5_NS2_13SpirvTypeHashENSt3__18equal_toIS3_EENS9_9allocatorINS9_4pairIKS3_S4_EEEEE19EmplaceDecomposableEJNSD_IS3_S4_EEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSL_: argument 0"}
!14 = distinct !{!14, !"_ZN4absl18container_internal17FlatHashMapPolicyIN2sh9SpirvTypeENS2_13SpirvTypeDataEE5applyINS0_12raw_hash_setIS5_NS2_13SpirvTypeHashENSt3__18equal_toIS3_EENS9_9allocatorINS9_4pairIKS3_S4_EEEEE19EmplaceDecomposableEJNSD_IS3_S4_EEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSL_"}
!15 = distinct !{!15, !16, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEEvE5applyINS0_12raw_hash_setIS6_NS3_13SpirvTypeHashENSt3__18equal_toIS4_EENSB_9allocatorINSB_4pairIKS4_S5_EEEEE19EmplaceDecomposableEJNSF_IS4_S5_EEES6_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSN_DpOSO_: argument 0"}
!16 = distinct !{!16, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEEvE5applyINS0_12raw_hash_setIS6_NS3_13SpirvTypeHashENSt3__18equal_toIS4_EENSB_9allocatorINSB_4pairIKS4_S5_EEEEE19EmplaceDecomposableEJNSF_IS4_S5_EEES6_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSN_DpOSO_"}
!17 = distinct !{!17, !18, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE7emplaceIJNSC_IS4_S5_EEELi0EEENSC_INSG_8iteratorEbEEDpOT_: argument 0"}
!18 = distinct !{!18, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE7emplaceIJNSC_IS4_S5_EEELi0EEENSC_INSG_8iteratorEbEEDpOT_"}
!19 = distinct !{!19, !20, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE6insertEONSC_IS4_S5_EE: argument 0"}
!20 = distinct !{!20, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh9SpirvTypeENS3_13SpirvTypeDataEEENS3_13SpirvTypeHashENSt3__18equal_toIS4_EENS8_9allocatorINS8_4pairIKS4_S5_EEEEE6insertEONSC_IS4_S5_EE"}
!21 = !{!"branch_weights", i32 2146410443, i32 1073205}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE19EmplaceDecomposableclIS4_JRKNSC_21piecewise_construct_tENSC_5tupleIJOS4_EEENSQ_IJOS9_EEEEEENSG_INSK_8iteratorEbEERKT_DpOT0_: argument 0"}
!24 = distinct !{!24, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh22SpirvIdAndStorageClassEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_26SpirvIdAndStorageClassHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE19EmplaceDecomposableclIS4_JRKNSC_21piecewise_construct_tENSC_5tupleIJOS4_EEENSQ_IJOS9_EEEEEENSG_INSK_8iteratorEbEERKT_DpOT0_"}
!25 = !{!26, !28, !30, !32, !34, !36, !38}
!26 = distinct !{!26, !27, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE19EmplaceDecomposableclIS4_JRKNSC_21piecewise_construct_tENSC_5tupleIJOS4_EEENSQ_IJOS9_EEEEEENSG_INSK_8iteratorEbEERKT_DpOT0_: argument 0"}
!27 = distinct !{!27, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE19EmplaceDecomposableclIS4_JRKNSC_21piecewise_construct_tENSC_5tupleIJOS4_EEENSQ_IJOS9_EEEEEENSG_INSK_8iteratorEbEERKT_DpOT0_"}
!28 = distinct !{!28, !29, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS8_11IdRefHelperEEEEENS5_20SpirvIdAndIdListHashENSt3__18equal_toIS6_EENSE_9allocatorINSE_4pairIKS6_SB_EEEEE19EmplaceDecomposableEOS6_NSE_5tupleIJOSB_EEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSE_L19piecewise_constructEEclsr3stdE7declvalINSP_IJST_EEEEEclsr3stdE7declvalIT1_EEEEOSS_NSI_ISW_SX_EE: argument 0"}
!29 = distinct !{!29, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS8_11IdRefHelperEEEEENS5_20SpirvIdAndIdListHashENSt3__18equal_toIS6_EENSE_9allocatorINSE_4pairIKS6_SB_EEEEE19EmplaceDecomposableEOS6_NSE_5tupleIJOSB_EEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSE_L19piecewise_constructEEclsr3stdE7declvalINSP_IJST_EEEEEclsr3stdE7declvalIT1_EEEEOSS_NSI_ISW_SX_EE"}
!30 = distinct !{!30, !31, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS7_11IdRefHelperEEEEENS4_20SpirvIdAndIdListHashENSt3__18equal_toIS5_EENSD_9allocatorINSD_4pairIKS5_SA_EEEEE19EmplaceDecomposableEJNSH_IS5_SA_EEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSO_DpOSP_: argument 0"}
!31 = distinct !{!31, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS7_11IdRefHelperEEEEENS4_20SpirvIdAndIdListHashENSt3__18equal_toIS5_EENSD_9allocatorINSD_4pairIKS5_SA_EEEEE19EmplaceDecomposableEJNSH_IS5_SA_EEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSO_DpOSP_"}
!32 = distinct !{!32, !33, !"_ZN4absl18container_internal17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEEE5applyINS0_12raw_hash_setIS9_NS2_20SpirvIdAndIdListHashENSt3__18equal_toIS3_EENSD_9allocatorINSD_4pairIKS3_S8_EEEEE19EmplaceDecomposableEJNSH_IS3_S8_EEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSO_DpOSP_: argument 0"}
!33 = distinct !{!33, !"_ZN4absl18container_internal17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEEE5applyINS0_12raw_hash_setIS9_NS2_20SpirvIdAndIdListHashENSt3__18equal_toIS3_EENSD_9allocatorINSD_4pairIKS3_S8_EEEEE19EmplaceDecomposableEJNSH_IS3_S8_EEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSO_DpOSP_"}
!34 = distinct !{!34, !35, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEEvE5applyINS0_12raw_hash_setISA_NS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSF_9allocatorINSF_4pairIKS4_S9_EEEEE19EmplaceDecomposableEJNSJ_IS4_S9_EEESA_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSR_DpOSS_: argument 0"}
!35 = distinct !{!35, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEEvE5applyINS0_12raw_hash_setISA_NS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSF_9allocatorINSF_4pairIKS4_S9_EEEEE19EmplaceDecomposableEJNSJ_IS4_S9_EEESA_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSR_DpOSS_"}
!36 = distinct !{!36, !37, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE7emplaceIJNSG_IS4_S9_EEELi0EEENSG_INSK_8iteratorEbEEDpOT_: argument 0"}
!37 = distinct !{!37, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE7emplaceIJNSG_IS4_S9_EEELi0EEENSG_INSK_8iteratorEbEEDpOT_"}
!38 = distinct !{!38, !39, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6insertEONSG_IS4_S9_EE: argument 0"}
!39 = distinct !{!39, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6insertEONSG_IS4_S9_EE"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_: argument 0"}
!42 = distinct !{!42, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_"}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_: argument 0"}
!45 = distinct !{!45, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_: argument 0"}
!48 = distinct !{!48, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_: argument 0"}
!51 = distinct !{!51, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_"}
!52 = !{!53}
!53 = distinct !{!53, !54, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_: argument 0"}
!54 = distinct !{!54, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_"}
!55 = distinct !{!55, !56}
!56 = !{!"llvm.loop.isvectorized", i32 1}
!57 = distinct !{!57, !58}
!58 = !{!"llvm.loop.unroll.disable"}
!59 = distinct !{!59, !60, !56}
!60 = !{!"llvm.loop.unroll.runtime.disable"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_: argument 0"}
!63 = distinct !{!63, !"_ZNSt3__16__treeIN3spv10CapabilityENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_"}
!64 = !{!65, !67}
!65 = distinct !{!65, !66, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE19EmplaceDecomposableclIjJRKNSC_21piecewise_construct_tENSC_5tupleIJOjEEENSQ_IJOS7_EEEEEENSG_INSK_8iteratorEbEERKT_DpOT0_: argument 0"}
!66 = distinct !{!66, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE19EmplaceDecomposableclIjJRKNSC_21piecewise_construct_tENSC_5tupleIJOjEEENSQ_IJOS7_EEEEEENSG_INSK_8iteratorEbEERKT_DpOT0_"}
!67 = distinct !{!67, !68, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE7emplaceIJNSG_IjS7_EEELi0EEENSG_INSK_8iteratorEbEEDpOT_: argument 0"}
!68 = distinct !{!68, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIjN5angle5spirv11BoxedUint32INS4_11IdRefHelperEEEEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENSC_9allocatorINSC_4pairIKjS7_EEEEE7emplaceIJNSG_IjS7_EEELi0EEENSG_INSK_8iteratorEbEEDpOT_"}
!69 = !{!70, !72, !74, !76, !78, !80, !82}
!70 = distinct !{!70, !71, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE19EmplaceDecomposableclIS4_JRKNSC_21piecewise_construct_tENSC_5tupleIJOS4_EEENSQ_IJOS9_EEEEEENSG_INSK_8iteratorEbEERKT_DpOT0_: argument 0"}
!71 = distinct !{!71, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE19EmplaceDecomposableclIS4_JRKNSC_21piecewise_construct_tENSC_5tupleIJOS4_EEENSQ_IJOS9_EEEEEENSG_INSK_8iteratorEbEERKT_DpOT0_"}
!72 = distinct !{!72, !73, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS8_11IdRefHelperEEEEENS5_20SpirvIdAndIdListHashENSt3__18equal_toIS6_EENSE_9allocatorINSE_4pairIKS6_SB_EEEEE19EmplaceDecomposableEOS6_NSE_5tupleIJOSB_EEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSE_L19piecewise_constructEEclsr3stdE7declvalINSP_IJST_EEEEEclsr3stdE7declvalIT1_EEEEOSS_NSI_ISW_SX_EE: argument 0"}
!73 = distinct !{!73, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS8_11IdRefHelperEEEEENS5_20SpirvIdAndIdListHashENSt3__18equal_toIS6_EENSE_9allocatorINSE_4pairIKS6_SB_EEEEE19EmplaceDecomposableEOS6_NSE_5tupleIJOSB_EEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSE_L19piecewise_constructEEclsr3stdE7declvalINSP_IJST_EEEEEclsr3stdE7declvalIT1_EEEEOSS_NSI_ISW_SX_EE"}
!74 = distinct !{!74, !75, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS7_11IdRefHelperEEEEENS4_20SpirvIdAndIdListHashENSt3__18equal_toIS5_EENSD_9allocatorINSD_4pairIKS5_SA_EEEEE19EmplaceDecomposableEJNSH_IS5_SA_EEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSO_DpOSP_: argument 0"}
!75 = distinct !{!75, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS7_11IdRefHelperEEEEENS4_20SpirvIdAndIdListHashENSt3__18equal_toIS5_EENSD_9allocatorINSD_4pairIKS5_SA_EEEEE19EmplaceDecomposableEJNSH_IS5_SA_EEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSO_DpOSP_"}
!76 = distinct !{!76, !77, !"_ZN4absl18container_internal17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEEE5applyINS0_12raw_hash_setIS9_NS2_20SpirvIdAndIdListHashENSt3__18equal_toIS3_EENSD_9allocatorINSD_4pairIKS3_S8_EEEEE19EmplaceDecomposableEJNSH_IS3_S8_EEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSO_DpOSP_: argument 0"}
!77 = distinct !{!77, !"_ZN4absl18container_internal17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS5_11IdRefHelperEEEE5applyINS0_12raw_hash_setIS9_NS2_20SpirvIdAndIdListHashENSt3__18equal_toIS3_EENSD_9allocatorINSD_4pairIKS3_S8_EEEEE19EmplaceDecomposableEJNSH_IS3_S8_EEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSO_DpOSP_"}
!78 = distinct !{!78, !79, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEEvE5applyINS0_12raw_hash_setISA_NS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSF_9allocatorINSF_4pairIKS4_S9_EEEEE19EmplaceDecomposableEJNSJ_IS4_S9_EEESA_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSR_DpOSS_: argument 0"}
!79 = distinct !{!79, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEEvE5applyINS0_12raw_hash_setISA_NS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSF_9allocatorINSF_4pairIKS4_S9_EEEEE19EmplaceDecomposableEJNSJ_IS4_S9_EEESA_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSR_DpOSS_"}
!80 = distinct !{!80, !81, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE7emplaceIJNSG_IS4_S9_EEELi0EEENSG_INSK_8iteratorEbEEDpOT_: argument 0"}
!81 = distinct !{!81, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE7emplaceIJNSG_IS4_S9_EEELi0EEENSG_INSK_8iteratorEbEEDpOT_"}
!82 = distinct !{!82, !83, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6insertEONSG_IS4_S9_EE: argument 0"}
!83 = distinct !{!83, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN2sh16SpirvIdAndIdListEN5angle5spirv11BoxedUint32INS6_11IdRefHelperEEEEENS3_20SpirvIdAndIdListHashENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_S9_EEEEE6insertEONSG_IS4_S9_EE"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"_ZNSt3__16__treeIN3spv13ExecutionModeENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_: argument 0"}
!86 = distinct !{!86, !"_ZNSt3__16__treeIN3spv13ExecutionModeENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_"}
!87 = !{!88}
!88 = distinct !{!88, !89}
!89 = distinct !{!89, !"LVerDomain"}
!90 = !{!91}
!91 = distinct !{!91, !89}
!92 = distinct !{!92, !56}
!93 = distinct !{!93, !58}
!94 = distinct !{!94, !58}
!95 = distinct !{!95, !56}
!96 = !{!97}
!97 = distinct !{!97, !98}
!98 = distinct !{!98, !"LVerDomain"}
!99 = !{!100}
!100 = distinct !{!100, !98}
!101 = distinct !{!101, !56}
!102 = distinct !{!102, !58}
!103 = distinct !{!103, !56}
!104 = !{!105}
!105 = distinct !{!105, !106}
!106 = distinct !{!106, !"LVerDomain"}
!107 = !{!108}
!108 = distinct !{!108, !106}
!109 = distinct !{!109, !56}
!110 = distinct !{!110, !58}
!111 = distinct !{!111, !58}
!112 = distinct !{!112, !56}
!113 = !{!114}
!114 = distinct !{!114, !115}
!115 = distinct !{!115, !"LVerDomain"}
!116 = !{!117}
!117 = distinct !{!117, !115}
!118 = distinct !{!118, !56}
!119 = distinct !{!119, !58}
!120 = distinct !{!120, !58}
!121 = distinct !{!121, !56}
