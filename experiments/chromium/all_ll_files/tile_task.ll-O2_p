; ModuleID = '../../cc/raster/tile_task.cc'
source_filename = "../../cc/raster/tile_task.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::TileTask" = type <{ %"class.cc::Task", i32, i32, %"class.std::__1::vector", i8, [7 x i8] }>
%"class.cc::Task" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", %"class.cc::TaskState", i64 }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.cc::TaskState" = type { i16 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.scoped_refptr*, %class.scoped_refptr*, %"class.std::__1::__compressed_pair" }
%class.scoped_refptr = type { %"class.cc::TileTask"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.scoped_refptr* }

@_ZTVN2cc8TileTaskE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.cc::TileTask"*)* @_ZN2cc8TileTaskD2Ev to i8*), i8* bitcast (void (%"class.cc::TileTask"*)* @_ZN2cc8TileTaskD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN2cc8TileTaskD1Ev = hidden unnamed_addr alias void (%"class.cc::TileTask"*), void (%"class.cc::TileTask"*)* @_ZN2cc8TileTaskD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8TileTaskC2ENS0_27SupportsConcurrentExecutionENS0_32SupportsBackgroundThreadPriorityEPNSt3__16vectorI13scoped_refptrIS0_ENS3_9allocatorIS6_EEEE(%"class.cc::TileTask"*, i32, i32, %"class.std::__1::vector"*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 0
  tail call void @_ZN2cc4TaskC2Ev(%"class.cc::Task"* %5) #9
  %6 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2cc8TileTaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 1
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 2
  store i32 %2, i32* %8, align 4
  %9 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 3
  %10 = icmp eq %"class.std::__1::vector"* %3, null
  %11 = bitcast %"class.std::__1::vector"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #9
  br i1 %10, label %27, label %12

12:                                               ; preds = %4
  %13 = bitcast %"class.std::__1::vector"* %3 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector"* %9 to i64*
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %17 = bitcast %class.scoped_refptr** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 3, i32 0, i32 1
  %20 = bitcast %class.scoped_refptr** %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast %class.scoped_refptr** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast %class.scoped_refptr** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = bitcast %"class.std::__1::vector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 24, i1 false) #9
  br label %27

27:                                               ; preds = %4, %12
  %28 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 4
  store i8 0, i8* %28, align 8
  ret void
}

declare void @_ZN2cc4TaskC2Ev(%"class.cc::Task"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8TileTaskD2Ev(%"class.cc::TileTask"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2cc8TileTaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %class.scoped_refptr*, %class.scoped_refptr** %4, align 8
  %6 = icmp eq %class.scoped_refptr* %5, null
  br i1 %6, label %37, label %7

7:                                                ; preds = %1
  %8 = bitcast %class.scoped_refptr* %5 to i8*
  %9 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 3, i32 0, i32 1
  %10 = load %class.scoped_refptr*, %class.scoped_refptr** %9, align 8
  %11 = icmp eq %class.scoped_refptr* %10, %5
  br i1 %11, label %35, label %12

12:                                               ; preds = %7, %30
  %13 = phi %class.scoped_refptr* [ %14, %30 ], [ %10, %7 ]
  %14 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %13, i64 -1
  %15 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %14, i64 0, i32 0
  %16 = load %"class.cc::TileTask"*, %"class.cc::TileTask"** %15, align 8
  %17 = icmp eq %"class.cc::TileTask"* %16, null
  br i1 %17, label %30, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %16, i64 0, i32 0, i32 1
  %20 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw sub i32* %20, i32 1 acq_rel
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %30

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %19, i64 -2
  %25 = bitcast %"class.base::RefCountedThreadSafe"* %24 to %"class.cc::Task"*
  %26 = bitcast %"class.base::RefCountedThreadSafe"* %24 to void (%"class.cc::Task"*)***
  %27 = load void (%"class.cc::Task"*)**, void (%"class.cc::Task"*)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.cc::Task"*)*, void (%"class.cc::Task"*)** %27, i64 2
  %29 = load void (%"class.cc::Task"*)*, void (%"class.cc::Task"*)** %28, align 8
  tail call void %29(%"class.cc::Task"* nonnull %25) #9
  br label %30

30:                                               ; preds = %23, %18, %12
  %31 = icmp eq %class.scoped_refptr* %14, %5
  br i1 %31, label %32, label %12

32:                                               ; preds = %30
  %33 = bitcast %"class.std::__1::vector"* %3 to i8**
  %34 = load i8*, i8** %33, align 8
  br label %35

35:                                               ; preds = %32, %7
  %36 = phi i8* [ %34, %32 ], [ %8, %7 ]
  store %class.scoped_refptr* %5, %class.scoped_refptr** %9, align 8
  tail call void @_ZdlPv(i8* %36) #10
  br label %37

37:                                               ; preds = %1, %35
  %38 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 0
  tail call void @_ZN2cc4TaskD2Ev(%"class.cc::Task"* %38) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2cc4TaskD2Ev(%"class.cc::Task"*) unnamed_addr #2

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN2cc8TileTaskD0Ev(%"class.cc::TileTask"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2cc8TileTask11DidCompleteEv(%"class.cc::TileTask"* nocapture) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 4
  store i8 1, i8* %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc8TileTask12HasCompletedEv(%"class.cc::TileTask"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.cc::TileTask", %"class.cc::TileTask"* %0, i64 0, i32 4
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
