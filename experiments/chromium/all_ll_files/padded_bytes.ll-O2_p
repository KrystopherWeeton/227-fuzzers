; ModuleID = '../../third_party/libjxl/src/lib/jxl/base/padded_bytes.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/base/padded_bytes.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"../../third_party/libjxl/src/lib/jxl/base/padded_bytes.cc\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"capacity > capacity_\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"new_size <= capacity_\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, %1
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 20, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0)) #4
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #5
  unreachable

9:                                                ; preds = %2
  %10 = mul i64 %4, 3
  %11 = lshr i64 %10, 1
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  %14 = icmp ugt i64 %13, 64
  %15 = select i1 %14, i64 %13, i64 64
  %16 = add i64 %15, 8
  %17 = tail call i64 @_ZN3jxl12CacheAligned10NextOffsetEv() #4
  %18 = tail call i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64 %16, i64 %17) #4
  %19 = ptrtoint i8* %18 to i64
  %20 = icmp eq i8* %18, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %9
  %22 = bitcast %"class.jxl::PaddedBytes"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 16, i1 false)
  br label %37

23:                                               ; preds = %9
  %24 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 2
  %25 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %24, i64 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  %30 = load i64, i64* %29, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %18, i8* nonnull align 1 %26, i64 %30, i1 false)
  %31 = load i64, i64* %29, align 8
  %32 = getelementptr inbounds i8, i8* %18, i64 %31
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i8* [ %32, %28 ], [ %18, %23 ]
  store i8 0, i8* %34, align 1
  store i64 %15, i64* %3, align 8
  %35 = bitcast %"class.std::__1::unique_ptr"* %24 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %19, i64* %35, align 8
  br label %37

37:                                               ; preds = %33, %21
  %38 = phi i64 [ %19, %21 ], [ %36, %33 ]
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %37
  %41 = inttoptr i64 %38 to i8*
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %41) #4
  br label %42

42:                                               ; preds = %37, %40
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11PaddedBytes6assignEPKhS2_(%"class.jxl::PaddedBytes"* nocapture, i8*, i8*) local_unnamed_addr #0 align 2 {
  %4 = ptrtoint i8* %2 to i64
  %5 = ptrtoint i8* %1 to i64
  %6 = sub i64 %4, %5
  %7 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = icmp uge i8* %8, %2
  %12 = getelementptr inbounds i8, i8* %8, i64 %10
  %13 = icmp ule i8* %12, %1
  %14 = or i1 %11, %13
  br i1 %14, label %15, label %24

15:                                               ; preds = %3
  %16 = icmp ult i64 %10, %6
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %0, i64 %6) #4
  %18 = load i8*, i8** %7, align 8
  br label %19

19:                                               ; preds = %15, %17
  %20 = phi i8* [ %8, %15 ], [ %18, %17 ]
  %21 = icmp eq i8* %20, null
  %22 = select i1 %21, i64 0, i64 %6
  %23 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  store i64 %22, i64* %23, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %1, i64 %6, i1 false)
  br label %31

24:                                               ; preds = %3
  %25 = icmp ugt i64 %6, %10
  br i1 %25, label %26, label %29

26:                                               ; preds = %24
  %27 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #4
  %28 = tail call zeroext i1 @_ZN3jxl5AbortEv() #5
  unreachable

29:                                               ; preds = %24
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %1, i64 %6, i1 false)
  %30 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  store i64 %6, i64* %30, align 8
  br label %31

31:                                               ; preds = %29, %19
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

declare i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64, i64) local_unnamed_addr #1

declare i64 @_ZN3jxl12CacheAligned10NextOffsetEv() local_unnamed_addr #1

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
