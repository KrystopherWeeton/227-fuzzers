; ModuleID = '../../third_party/vulkan-deps/vulkan-loader/src/loader/wsi.c'
source_filename = "../../third_party/vulkan-deps/vulkan-loader/src/loader/wsi.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.loader_instance = type { %struct.loader_instance_dispatch_table*, i16, i16, i32, i32, %struct.loader_physical_device_term**, i32, %struct.loader_physical_device_tramp**, i32, %struct.VkPhysicalDeviceGroupProperties**, i32, %struct.VkPhysicalDeviceGroupProperties**, %struct.loader_instance*, i32, %struct.loader_icd_term*, %struct.loader_icd_tramp_list, [250 x %struct.loader_dispatch_hash_entry], [250 x %struct.loader_dispatch_hash_entry], %struct.loader_msg_callback_map_entry*, %struct.loader_layer_list, i8, %struct.loader_layer_list, %struct.loader_layer_list, %struct.VkInstance_T*, %struct.loader_extension_list, %union.loader_instance_extension_enables, %struct.VkLayerDbgFunctionNode_*, i32, %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkDebugReportCallbackEXT_T**, i32, %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkDebugUtilsMessengerEXT_T**, %struct.VkAllocationCallbacks, i8, i8, i8, i8, i8 }
%struct.loader_instance_dispatch_table = type { %struct.VkLayerInstanceDispatchTable_, [250 x i32 (%struct.VkPhysicalDevice_T*)*] }
%struct.VkLayerInstanceDispatchTable_ = type { void ()* (%struct.VkInstance_T*, i8*)*, i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)*, void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, void ()* (%struct.VkInstance_T*, i8*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)*, i32 (i8*, i32*, %struct.VkExtensionProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)*, i32 (i32*, %struct.VkLayerProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkLayerProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)*, i32 (i32*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)*, void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)*, i32 (%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkVideoProfileKHR*, %struct.VkVideoCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceVideoFormatInfoKHR*, i32*, %struct.VkVideoFormatPropertiesKHR*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkPerformanceCounterKHR*, %struct.VkPerformanceCounterDescriptionKHR*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkQueryPoolPerformanceCreateInfoKHR*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlaneProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkPhysicalDeviceFragmentShadingRateKHR*)*, i32 (%struct.VkInstance_T*, %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkDebugReportCallbackEXT_T**)*, void (%struct.VkInstance_T*, %struct.VkDebugReportCallbackEXT_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, i32, i32, i64, i64, i32, i8*, i8*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32, %struct.VkExternalImageFormatPropertiesNV*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilities2EXT*)*, i32 (%struct.VkInstance_T*, %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkDebugUtilsMessengerEXT_T**)*, void (%struct.VkInstance_T*, %struct.VkDebugUtilsMessengerEXT_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, i32, i32, %struct.VkDebugUtilsMessengerCallbackDataEXT*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkMultisamplePropertiesEXT*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkPhysicalDeviceToolPropertiesEXT*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkCooperativeMatrixPropertiesNV*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkFramebufferMixedSamplesCombinationNV*)*, i32 (%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* }
%struct.VkPhysicalDevice_T = type opaque
%struct.VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkFormatProperties = type { i32, i32, i32 }
%struct.VkImageFormatProperties = type { %struct.VkExtent3D, i32, i32, i32, i64 }
%struct.VkExtent3D = type { i32, i32, i32 }
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkQueueFamilyProperties = type { i32, i32, i32, %struct.VkExtent3D }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%struct.VkDeviceCreateInfo = type { i32, i8*, i32, i32, %struct.VkDeviceQueueCreateInfo*, i32, i8**, i32, i8**, %struct.VkPhysicalDeviceFeatures* }
%struct.VkDeviceQueueCreateInfo = type { i32, i8*, i32, i32, i32, float* }
%struct.VkDevice_T = type opaque
%struct.VkExtensionProperties = type { [256 x i8], i32 }
%struct.VkLayerProperties = type { [256 x i8], i32, i32, [256 x i8] }
%struct.VkSparseImageFormatProperties = type { i32, %struct.VkExtent3D, i32 }
%struct.VkSurfaceKHR_T = type opaque
%struct.VkSurfaceCapabilitiesKHR = type { i32, i32, %struct.VkExtent2D, %struct.VkExtent2D, %struct.VkExtent2D, i32, i32, i32, i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%struct.VkSurfaceFormatKHR = type { i32, i32 }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%struct.VkDisplayPropertiesKHR = type { %struct.VkDisplayKHR_T*, i8*, %struct.VkExtent2D, %struct.VkExtent2D, i32, i32, i32 }
%struct.VkDisplayKHR_T = type opaque
%struct.VkDisplayPlanePropertiesKHR = type { %struct.VkDisplayKHR_T*, i32 }
%struct.VkDisplayModePropertiesKHR = type { %struct.VkDisplayModeKHR_T*, %struct.VkDisplayModeParametersKHR }
%struct.VkDisplayModeKHR_T = type opaque
%struct.VkDisplayModeParametersKHR = type { %struct.VkExtent2D, i32 }
%struct.VkDisplayModeCreateInfoKHR = type { i32, i8*, i32, %struct.VkDisplayModeParametersKHR }
%struct.VkDisplayPlaneCapabilitiesKHR = type { i32, %struct.VkOffset2D, %struct.VkOffset2D, %struct.VkExtent2D, %struct.VkExtent2D, %struct.VkOffset2D, %struct.VkOffset2D, %struct.VkExtent2D, %struct.VkExtent2D }
%struct.VkDisplaySurfaceCreateInfoKHR = type { i32, i8*, i32, %struct.VkDisplayModeKHR_T*, i32, i32, i32, float, i32, %struct.VkExtent2D }
%struct.VkXcbSurfaceCreateInfoKHR = type { i32, i8*, i32, %struct.xcb_connection_t*, i32 }
%struct.xcb_connection_t = type opaque
%struct.VkVideoProfileKHR = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkVideoCapabilitiesKHR = type { i32, i8*, i32, i64, i64, %struct.VkExtent2D, %struct.VkExtent2D, %struct.VkExtent2D, i32, i32 }
%struct.VkPhysicalDeviceVideoFormatInfoKHR = type { i32, i8*, i32, %struct.VkVideoProfilesKHR* }
%struct.VkVideoProfilesKHR = type { i32, i8*, i32, %struct.VkVideoProfileKHR* }
%struct.VkVideoFormatPropertiesKHR = type { i32, i8*, i32 }
%struct.VkPhysicalDeviceFeatures2 = type { i32, i8*, %struct.VkPhysicalDeviceFeatures }
%struct.VkPhysicalDeviceProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceProperties }
%struct.VkFormatProperties2 = type { i32, i8*, %struct.VkFormatProperties }
%struct.VkPhysicalDeviceImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkImageFormatProperties2 = type { i32, i8*, %struct.VkImageFormatProperties }
%struct.VkQueueFamilyProperties2 = type { i32, i8*, %struct.VkQueueFamilyProperties }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%struct.VkPhysicalDeviceSparseImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkSparseImageFormatProperties2 = type { i32, i8*, %struct.VkSparseImageFormatProperties }
%struct.VkPhysicalDeviceGroupProperties = type { i32, i8*, i32, [32 x %struct.VkPhysicalDevice_T*], i32 }
%struct.VkPhysicalDeviceExternalBufferInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkExternalBufferProperties = type { i32, i8*, %struct.VkExternalMemoryProperties }
%struct.VkExternalMemoryProperties = type { i32, i32, i32 }
%struct.VkPhysicalDeviceExternalSemaphoreInfo = type { i32, i8*, i32 }
%struct.VkExternalSemaphoreProperties = type { i32, i8*, i32, i32, i32 }
%struct.VkPhysicalDeviceExternalFenceInfo = type { i32, i8*, i32 }
%struct.VkExternalFenceProperties = type { i32, i8*, i32, i32, i32 }
%struct.VkPerformanceCounterKHR = type { i32, i8*, i32, i32, i32, [16 x i8] }
%struct.VkPerformanceCounterDescriptionKHR = type { i32, i8*, i32, [256 x i8], [256 x i8], [256 x i8] }
%struct.VkQueryPoolPerformanceCreateInfoKHR = type { i32, i8*, i32, i32, i32* }
%struct.VkPhysicalDeviceSurfaceInfo2KHR = type { i32, i8*, %struct.VkSurfaceKHR_T* }
%struct.VkSurfaceCapabilities2KHR = type { i32, i8*, %struct.VkSurfaceCapabilitiesKHR }
%struct.VkSurfaceFormat2KHR = type { i32, i8*, %struct.VkSurfaceFormatKHR }
%struct.VkDisplayProperties2KHR = type { i32, i8*, %struct.VkDisplayPropertiesKHR }
%struct.VkDisplayPlaneProperties2KHR = type { i32, i8*, %struct.VkDisplayPlanePropertiesKHR }
%struct.VkDisplayModeProperties2KHR = type { i32, i8*, %struct.VkDisplayModePropertiesKHR }
%struct.VkDisplayPlaneInfo2KHR = type { i32, i8*, %struct.VkDisplayModeKHR_T*, i32 }
%struct.VkDisplayPlaneCapabilities2KHR = type { i32, i8*, %struct.VkDisplayPlaneCapabilitiesKHR }
%struct.VkPhysicalDeviceFragmentShadingRateKHR = type { i32, i8*, i32, %struct.VkExtent2D }
%struct.VkDebugReportCallbackEXT_T = type opaque
%struct.VkExternalImageFormatPropertiesNV = type { %struct.VkImageFormatProperties, i32, i32, i32 }
%struct.VkSurfaceCapabilities2EXT = type { i32, i8*, i32, i32, %struct.VkExtent2D, %struct.VkExtent2D, %struct.VkExtent2D, i32, i32, i32, i32, i32, i32 }
%struct.VkDebugUtilsMessengerEXT_T = type opaque
%struct.VkDebugUtilsMessengerCallbackDataEXT = type { i32, i8*, i32, i8*, i32, i8*, i32, %struct.VkDebugUtilsLabelEXT*, i32, %struct.VkDebugUtilsLabelEXT*, i32, %struct.VkDebugUtilsObjectNameInfoEXT* }
%struct.VkDebugUtilsLabelEXT = type { i32, i8*, i8*, [4 x float] }
%struct.VkDebugUtilsObjectNameInfoEXT = type { i32, i8*, i32, i64, i8* }
%struct.VkMultisamplePropertiesEXT = type { i32, i8*, %struct.VkExtent2D }
%struct.VkPhysicalDeviceToolPropertiesEXT = type { i32, i8*, [256 x i8], [256 x i8], i32, [256 x i8], [256 x i8] }
%struct.VkCooperativeMatrixPropertiesNV = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkFramebufferMixedSamplesCombinationNV = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkHeadlessSurfaceCreateInfoEXT = type { i32, i8*, i32 }
%struct.loader_physical_device_term = type { %struct.loader_instance_dispatch_table*, %struct.loader_icd_term*, i8, %struct.VkPhysicalDevice_T* }
%struct.loader_physical_device_tramp = type { %struct.loader_instance_dispatch_table*, %struct.loader_instance*, %struct.VkPhysicalDevice_T* }
%struct.loader_icd_term = type { %struct.loader_scanned_icd*, %struct.loader_instance*, %struct.loader_device*, %struct.VkInstance_T*, %struct.loader_icd_term_dispatch, %struct.loader_icd_term*, [250 x i32 (%struct.VkPhysicalDevice_T*)*] }
%struct.loader_scanned_icd = type { i8*, i8*, i32, i32, void ()* (%struct.VkInstance_T*, i8*)*, void ()* (%struct.VkInstance_T*, i8*)*, i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)*, i32 (i8*, i32*, %struct.VkExtensionProperties*)* }
%struct.loader_device = type { %struct.loader_dev_dispatch_table, %struct.VkDevice_T*, %struct.VkDevice_T*, %struct.loader_physical_device_term*, %struct.loader_layer_list, %struct.loader_layer_list, %struct.VkAllocationCallbacks, %struct.anon.0, %struct.loader_device* }
%struct.loader_dev_dispatch_table = type { %struct.VkLayerDispatchTable_, %struct.loader_dev_ext_dispatch_table }
%struct.VkLayerDispatchTable_ = type { void ()* (%struct.VkDevice_T*, i8*)*, void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)*, i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)*, i32 (%struct.VkQueue_T*)*, i32 (%struct.VkDevice_T*)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*)*, i32 (%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*)*, i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)*, void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, %struct.VkFence_T*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)*, void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**)*, void (%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, i32 (%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**)*, void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**)*, void (%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)*, i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)*, void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)*, void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**)*, void (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, void (%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**)*, void (%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)*, void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)*, void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)*, void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)*, i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)*, void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)*, void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)*, i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)*, i32 (%struct.VkCommandBuffer_T*)*, i32 (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)*, void (%struct.VkCommandBuffer_T*, float)*, void (%struct.VkCommandBuffer_T*, float, float, float)*, void (%struct.VkCommandBuffer_T*, float*)*, void (%struct.VkCommandBuffer_T*, float, float)*, void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, void (%struct.VkDevice_T*, i32, i32, i32, i32*)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32, i32)*, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)*, void (%struct.VkDevice_T*, %struct.VkDeviceQueueInfo2*, %struct.VkQueue_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)*, void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplateCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorUpdateTemplate_T**)*, void (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplate_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSet_T*, %struct.VkDescriptorUpdateTemplate_T*, i8*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo2*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)*, void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, %struct.VkSubpassBeginInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSubpassBeginInfo*, %struct.VkSubpassEndInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSubpassEndInfo*)*, void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphore_T*, i64*)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreWaitInfo*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreSignalInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkDeviceMemoryOpaqueCaptureAddressInfo*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, void (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32*, %struct.VkImage_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i64, %struct.VkSemaphore_T*, %struct.VkFence_T*, i32*)*, i32 (%struct.VkQueue_T*, %struct.VkPresentInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceGroupPresentCapabilitiesKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkAcquireNextImageInfoKHR*, i32*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, i32 (%struct.VkDevice_T*, %struct.VkVideoSessionCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkVideoSessionKHR_T**)*, void (%struct.VkDevice_T*, %struct.VkVideoSessionKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkVideoSessionKHR_T*, i32*, %struct.VkVideoGetMemoryPropertiesKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkVideoSessionKHR_T*, i32, %struct.VkVideoBindMemoryKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkVideoSessionParametersCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkVideoSessionParametersKHR_T**)*, i32 (%struct.VkDevice_T*, %struct.VkVideoSessionParametersKHR_T*, %struct.VkVideoSessionParametersUpdateInfoKHR*)*, void (%struct.VkDevice_T*, %struct.VkVideoSessionParametersKHR_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkCommandBuffer_T*, %struct.VkVideoBeginCodingInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkVideoEndCodingInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkVideoCodingControlInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkVideoDecodeInfoKHR*)*, void (%struct.VkDevice_T*, i32, i32, i32, i32*)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32, i32)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryGetFdInfoKHR*, i32*)*, i32 (%struct.VkDevice_T*, i32, i32, %struct.VkMemoryFdPropertiesKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkImportSemaphoreFdInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreGetFdInfoKHR*, i32*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkWriteDescriptorSet*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDescriptorUpdateTemplate_T*, %struct.VkPipelineLayout_T*, i32, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplateCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorUpdateTemplate_T**)*, void (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplate_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSet_T*, %struct.VkDescriptorUpdateTemplate_T*, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo2*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)*, void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, %struct.VkSubpassBeginInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSubpassBeginInfo*, %struct.VkSubpassEndInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSubpassEndInfo*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*)*, i32 (%struct.VkDevice_T*, %struct.VkImportFenceFdInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkFenceGetFdInfoKHR*, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkAcquireProfilingLockInfoKHR*)*, void (%struct.VkDevice_T*)*, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)*, i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)*, void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphore_T*, i64*)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreWaitInfo*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreSignalInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkExtent2D*, i32*)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkDeviceMemoryOpaqueCaptureAddressInfo*)*, i32 (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*, %struct.VkDeferredOperationKHR_T**)*, void (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineInfoKHR*, i32*, %struct.VkPipelineExecutablePropertiesKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineExecutableInfoKHR*, i32*, %struct.VkPipelineExecutableStatisticKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineExecutableInfoKHR*, i32*, %struct.VkPipelineExecutableInternalRepresentationKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkVideoEncodeInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, %struct.VkDependencyInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i64)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, %struct.VkDependencyInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDependencyInfoKHR*)*, void (%struct.VkCommandBuffer_T*, i64, %struct.VkQueryPool_T*, i32)*, i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo2KHR*, %struct.VkFence_T*)*, void (%struct.VkCommandBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32)*, void (%struct.VkQueue_T*, i32*, %struct.VkCheckpointData2NV*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyBufferInfo2KHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyImageInfo2KHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyBufferToImageInfo2KHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyImageToBufferInfo2KHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBlitImageInfo2KHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkResolveImageInfo2KHR*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugMarkerObjectTagInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugMarkerObjectNameInfoEXT*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugMarkerMarkerInfoEXT*)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugMarkerMarkerInfoEXT*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T*, i64, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkCuModuleCreateInfoNVX*, %struct.VkAllocationCallbacks*, %struct.VkCuModuleNVX_T**)*, i32 (%struct.VkDevice_T*, %struct.VkCuFunctionCreateInfoNVX*, %struct.VkAllocationCallbacks*, %struct.VkCuFunctionNVX_T**)*, void (%struct.VkDevice_T*, %struct.VkCuModuleNVX_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkCuFunctionNVX_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCuLaunchInfoNVX*)*, i32 (%struct.VkDevice_T*, %struct.VkImageViewHandleInfoNVX*)*, i32 (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkImageViewAddressPropertiesNVX*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32, i32, i64*, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkConditionalRenderingBeginInfoEXT*)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewportWScalingNV*)*, i32 (%struct.VkDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayPowerInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceEventInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayEventInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32, i64*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, %struct.VkRefreshCycleDurationGOOGLE*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32*, %struct.VkPastPresentationTimingGOOGLE*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)*, void (%struct.VkDevice_T*, i32, %struct.VkSwapchainKHR_T**, %struct.VkHdrMetadataEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugUtilsObjectNameInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugUtilsObjectTagInfoEXT*)*, void (%struct.VkQueue_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkQueue_T*)*, void (%struct.VkQueue_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSampleLocationsInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageDrmFormatModifierPropertiesEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkValidationCacheCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkValidationCacheEXT_T**)*, void (%struct.VkDevice_T*, %struct.VkValidationCacheEXT_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkValidationCacheEXT_T*, i32, %struct.VkValidationCacheEXT_T**)*, i32 (%struct.VkDevice_T*, %struct.VkValidationCacheEXT_T*, i64*, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImageView_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkShadingRatePaletteNV*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkCoarseSampleOrderCustomNV*)*, i32 (%struct.VkDevice_T*, %struct.VkAccelerationStructureCreateInfoNV*, %struct.VkAllocationCallbacks*, %struct.VkAccelerationStructureNV_T**)*, void (%struct.VkDevice_T*, %struct.VkAccelerationStructureNV_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkAccelerationStructureMemoryRequirementsInfoNV*, %struct.VkMemoryRequirements2*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindAccelerationStructureMemoryInfoNV*)*, void (%struct.VkCommandBuffer_T*, %struct.VkAccelerationStructureInfoNV*, %struct.VkBuffer_T*, i64, i32, %struct.VkAccelerationStructureNV_T*, %struct.VkAccelerationStructureNV_T*, %struct.VkBuffer_T*, i64)*, void (%struct.VkCommandBuffer_T*, %struct.VkAccelerationStructureNV_T*, %struct.VkAccelerationStructureNV_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i64, %struct.VkBuffer_T*, i64, i64, %struct.VkBuffer_T*, i64, i64, i32, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkRayTracingPipelineCreateInfoNV*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32, i32, i64, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32, i32, i64, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkAccelerationStructureNV_T*, i64, i8*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkAccelerationStructureNV_T**, i32, %struct.VkQueryPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32)*, i32 (%struct.VkDevice_T*, i32, i8*, %struct.VkMemoryHostPointerPropertiesEXT*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkBuffer_T*, i64, i32)*, i32 (%struct.VkDevice_T*, i32, %struct.VkCalibratedTimestampInfoEXT*, i64*, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)*, void (%struct.VkCommandBuffer_T*, i8*)*, void (%struct.VkQueue_T*, i32*, %struct.VkCheckpointDataNV*)*, i32 (%struct.VkDevice_T*, %struct.VkInitializePerformanceApiInfoINTEL*)*, void (%struct.VkDevice_T*)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkPerformanceMarkerInfoINTEL*)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkPerformanceStreamMarkerInfoINTEL*)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkPerformanceOverrideInfoINTEL*)*, i32 (%struct.VkDevice_T*, %struct.VkPerformanceConfigurationAcquireInfoINTEL*, %struct.VkPerformanceConfigurationINTEL_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPerformanceConfigurationINTEL_T*)*, i32 (%struct.VkQueue_T*, %struct.VkPerformanceConfigurationINTEL_T*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkPerformanceValueINTEL*)*, void (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, void (%struct.VkCommandBuffer_T*, i32, i16)*, void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkViewport*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkRect2D*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*, i64*, i64*)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)*, void (%struct.VkDevice_T*, %struct.VkGeneratedCommandsMemoryRequirementsInfoNV*, %struct.VkMemoryRequirements2*)*, void (%struct.VkCommandBuffer_T*, %struct.VkGeneratedCommandsInfoNV*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkGeneratedCommandsInfoNV*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkIndirectCommandsLayoutCreateInfoNV*, %struct.VkAllocationCallbacks*, %struct.VkIndirectCommandsLayoutNV_T**)*, void (%struct.VkDevice_T*, %struct.VkIndirectCommandsLayoutNV_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkPrivateDataSlotCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkPrivateDataSlotEXT_T**)*, void (%struct.VkDevice_T*, %struct.VkPrivateDataSlotEXT_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, i32, i64, %struct.VkPrivateDataSlotEXT_T*, i64)*, void (%struct.VkDevice_T*, i32, i64, %struct.VkPrivateDataSlotEXT_T*, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkVertexInputBindingDescription2EXT*, i32, %struct.VkVertexInputAttributeDescription2EXT*)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkAccelerationStructureCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkAccelerationStructureKHR_T**)*, void (%struct.VkDevice_T*, %struct.VkAccelerationStructureKHR_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkAccelerationStructureBuildGeometryInfoKHR*, %struct.VkAccelerationStructureBuildRangeInfoKHR**)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkAccelerationStructureBuildGeometryInfoKHR*, i64*, i32*, i32**)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, i32, %struct.VkAccelerationStructureBuildGeometryInfoKHR*, %struct.VkAccelerationStructureBuildRangeInfoKHR**)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, %struct.VkCopyAccelerationStructureInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, %struct.VkCopyAccelerationStructureToMemoryInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, %struct.VkCopyMemoryToAccelerationStructureInfoKHR*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkAccelerationStructureKHR_T**, i32, i64, i8*, i64)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyAccelerationStructureInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyAccelerationStructureToMemoryInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyMemoryToAccelerationStructureInfoKHR*)*, i64 (%struct.VkDevice_T*, %struct.VkAccelerationStructureDeviceAddressInfoKHR*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkAccelerationStructureKHR_T**, i32, %struct.VkQueryPool_T*, i32)*, void (%struct.VkDevice_T*, %struct.VkAccelerationStructureVersionInfoKHR*, i32*)*, void (%struct.VkDevice_T*, i32, %struct.VkAccelerationStructureBuildGeometryInfoKHR*, i32*, %struct.VkAccelerationStructureBuildSizesInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, i32, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, %struct.VkPipelineCache_T*, i32, %struct.VkRayTracingPipelineCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32, i32, i64, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, i64)*, i64 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32)* }
%struct.VkQueue_T = type opaque
%struct.VkSubmitInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32*, i32, %struct.VkCommandBuffer_T**, i32, %struct.VkSemaphore_T** }
%struct.VkCommandBuffer_T = type opaque
%struct.VkSemaphore_T = type opaque
%struct.VkFence_T = type opaque
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%struct.VkDeviceMemory_T = type opaque
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%struct.VkBuffer_T = type opaque
%struct.VkImage_T = type opaque
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%struct.VkSparseImageMemoryRequirements = type { %struct.VkSparseImageFormatProperties, i32, i64, i64, i64 }
%struct.VkBindSparseInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSparseBufferMemoryBindInfo*, i32, %struct.VkSparseImageOpaqueMemoryBindInfo*, i32, %struct.VkSparseImageMemoryBindInfo*, i32, %struct.VkSemaphore_T** }
%struct.VkSparseBufferMemoryBindInfo = type { %struct.VkBuffer_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseMemoryBind = type { i64, i64, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkSparseImageOpaqueMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseImageMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseImageMemoryBind* }
%struct.VkSparseImageMemoryBind = type { %struct.VkImageSubresource, %struct.VkOffset3D, %struct.VkExtent3D, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkImageSubresource = type { i32, i32, i32 }
%struct.VkOffset3D = type { i32, i32, i32 }
%struct.VkFenceCreateInfo = type { i32, i8*, i32 }
%struct.VkSemaphoreCreateInfo = type { i32, i8*, i32 }
%struct.VkEventCreateInfo = type { i32, i8*, i32 }
%struct.VkEvent_T = type opaque
%struct.VkQueryPoolCreateInfo = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkQueryPool_T = type opaque
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%struct.VkBufferViewCreateInfo = type { i32, i8*, i32, %struct.VkBuffer_T*, i32, i64, i64 }
%struct.VkBufferView_T = type opaque
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%struct.VkSubresourceLayout = type { i64, i64, i64, i64, i64 }
%struct.VkImageViewCreateInfo = type { i32, i8*, i32, %struct.VkImage_T*, i32, i32, %struct.VkComponentMapping, %struct.VkImageSubresourceRange }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%struct.VkImageView_T = type opaque
%struct.VkShaderModuleCreateInfo = type { i32, i8*, i32, i64, i32* }
%struct.VkShaderModule_T = type opaque
%struct.VkPipelineCacheCreateInfo = type { i32, i8*, i32, i64, i8* }
%struct.VkPipelineCache_T = type opaque
%struct.VkGraphicsPipelineCreateInfo = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, %struct.VkPipelineVertexInputStateCreateInfo*, %struct.VkPipelineInputAssemblyStateCreateInfo*, %struct.VkPipelineTessellationStateCreateInfo*, %struct.VkPipelineViewportStateCreateInfo*, %struct.VkPipelineRasterizationStateCreateInfo*, %struct.VkPipelineMultisampleStateCreateInfo*, %struct.VkPipelineDepthStencilStateCreateInfo*, %struct.VkPipelineColorBlendStateCreateInfo*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkRenderPass_T*, i32, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineShaderStageCreateInfo = type { i32, i8*, i32, i32, %struct.VkShaderModule_T*, i8*, %struct.VkSpecializationInfo* }
%struct.VkSpecializationInfo = type { i32, %struct.VkSpecializationMapEntry*, i64, i8* }
%struct.VkSpecializationMapEntry = type { i32, i32, i64 }
%struct.VkPipelineVertexInputStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkVertexInputBindingDescription*, i32, %struct.VkVertexInputAttributeDescription* }
%struct.VkVertexInputBindingDescription = type { i32, i32, i32 }
%struct.VkVertexInputAttributeDescription = type { i32, i32, i32, i32 }
%struct.VkPipelineInputAssemblyStateCreateInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkPipelineTessellationStateCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkPipelineViewportStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkViewport*, i32, %struct.VkRect2D* }
%struct.VkViewport = type { float, float, float, float, float, float }
%struct.VkPipelineRasterizationStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, float, float, float }
%struct.VkPipelineMultisampleStateCreateInfo = type { i32, i8*, i32, i32, i32, float, i32*, i32, i32 }
%struct.VkPipelineDepthStencilStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkStencilOpState, %struct.VkStencilOpState, float, float }
%struct.VkStencilOpState = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineColorBlendStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, %struct.VkPipelineColorBlendAttachmentState*, [4 x float] }
%struct.VkPipelineColorBlendAttachmentState = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineDynamicStateCreateInfo = type { i32, i8*, i32, i32, i32* }
%struct.VkPipelineLayout_T = type opaque
%struct.VkRenderPass_T = type opaque
%struct.VkPipeline_T = type opaque
%struct.VkComputePipelineCreateInfo = type { i32, i8*, i32, %struct.VkPipelineShaderStageCreateInfo, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayout_T**, i32, %struct.VkPushConstantRange* }
%struct.VkDescriptorSetLayout_T = type opaque
%struct.VkPushConstantRange = type { i32, i32, i32 }
%struct.VkSamplerCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32 }
%struct.VkSampler_T = type opaque
%struct.VkDescriptorSetLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayoutBinding* }
%struct.VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, %struct.VkSampler_T** }
%struct.VkDescriptorPoolCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkDescriptorPoolSize* }
%struct.VkDescriptorPoolSize = type { i32, i32 }
%struct.VkDescriptorPool_T = type opaque
%struct.VkDescriptorSetAllocateInfo = type { i32, i8*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSetLayout_T** }
%struct.VkDescriptorSet_T = type opaque
%struct.VkWriteDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %struct.VkBufferView_T** }
%struct.VkDescriptorImageInfo = type { %struct.VkSampler_T*, %struct.VkImageView_T*, i32 }
%struct.VkDescriptorBufferInfo = type { %struct.VkBuffer_T*, i64, i64 }
%struct.VkCopyDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, %struct.VkDescriptorSet_T*, i32, i32, i32 }
%struct.VkFramebufferCreateInfo = type { i32, i8*, i32, %struct.VkRenderPass_T*, i32, %struct.VkImageView_T**, i32, i32, i32 }
%struct.VkFramebuffer_T = type opaque
%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkCommandPoolCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkCommandPool_T = type opaque
%struct.VkCommandBufferAllocateInfo = type { i32, i8*, %struct.VkCommandPool_T*, i32, i32 }
%struct.VkCommandBufferBeginInfo = type { i32, i8*, i32, %struct.VkCommandBufferInheritanceInfo* }
%struct.VkCommandBufferInheritanceInfo = type { i32, i8*, %struct.VkRenderPass_T*, i32, %struct.VkFramebuffer_T*, i32, i32, i32 }
%struct.VkBufferCopy = type { i64, i64, i64 }
%struct.VkImageCopy = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkImageSubresourceLayers = type { i32, i32, i32, i32 }
%struct.VkImageBlit = type { %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D], %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D] }
%struct.VkBufferImageCopy = type { i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%union.VkClearColorValue = type { [4 x float] }
%struct.VkClearDepthStencilValue = type { float, i32 }
%struct.VkClearAttachment = type { i32, i32, %union.VkClearValue }
%union.VkClearValue = type { %union.VkClearColorValue }
%struct.VkClearRect = type { %struct.VkRect2D, i32, i32 }
%struct.VkImageResolve = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkMemoryBarrier = type { i32, i8*, i32, i32 }
%struct.VkBufferMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%struct.VkRenderPassBeginInfo = type { i32, i8*, %struct.VkRenderPass_T*, %struct.VkFramebuffer_T*, %struct.VkRect2D, i32, %union.VkClearValue* }
%struct.VkDeviceQueueInfo2 = type { i32, i8*, i32, i32, i32 }
%struct.VkSwapchainCreateInfoKHR = type { i32, i8*, i32, %struct.VkSurfaceKHR_T*, i32, i32, i32, %struct.VkExtent2D, i32, i32, i32, i32, i32*, i32, i32, i32, i32, %struct.VkSwapchainKHR_T* }
%struct.VkSwapchainKHR_T = type opaque
%struct.VkPresentInfoKHR = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSwapchainKHR_T**, i32*, i32* }
%struct.VkDeviceGroupPresentCapabilitiesKHR = type { i32, i8*, [32 x i32], i32 }
%struct.VkAcquireNextImageInfoKHR = type { i32, i8*, %struct.VkSwapchainKHR_T*, i64, %struct.VkSemaphore_T*, %struct.VkFence_T*, i32 }
%struct.VkVideoSessionCreateInfoKHR = type { i32, i8*, i32, i32, %struct.VkVideoProfileKHR*, i32, %struct.VkExtent2D, i32, i32, i32 }
%struct.VkVideoSessionKHR_T = type opaque
%struct.VkVideoGetMemoryPropertiesKHR = type { i32, i8*, i32, %struct.VkMemoryRequirements2* }
%struct.VkMemoryRequirements2 = type { i32, i8*, %struct.VkMemoryRequirements }
%struct.VkVideoBindMemoryKHR = type { i32, i8*, i32, %struct.VkDeviceMemory_T*, i64, i64 }
%struct.VkVideoSessionParametersCreateInfoKHR = type { i32, i8*, %struct.VkVideoSessionParametersKHR_T*, %struct.VkVideoSessionKHR_T* }
%struct.VkVideoSessionParametersKHR_T = type opaque
%struct.VkVideoSessionParametersUpdateInfoKHR = type { i32, i8*, i32 }
%struct.VkVideoBeginCodingInfoKHR = type { i32, i8*, i32, i32, %struct.VkVideoSessionKHR_T*, %struct.VkVideoSessionParametersKHR_T*, i32, %struct.VkVideoReferenceSlotKHR* }
%struct.VkVideoReferenceSlotKHR = type { i32, i8*, i8, %struct.VkVideoPictureResourceKHR* }
%struct.VkVideoPictureResourceKHR = type { i32, i8*, %struct.VkOffset2D, %struct.VkExtent2D, i32, %struct.VkImageView_T* }
%struct.VkVideoEndCodingInfoKHR = type { i32, i8*, i32 }
%struct.VkVideoCodingControlInfoKHR = type { i32, i8*, i32 }
%struct.VkVideoDecodeInfoKHR = type { i32, i8*, i32, %struct.VkOffset2D, %struct.VkExtent2D, %struct.VkBuffer_T*, i64, i64, %struct.VkVideoPictureResourceKHR, %struct.VkVideoReferenceSlotKHR*, i32, %struct.VkVideoReferenceSlotKHR* }
%struct.VkMemoryGetFdInfoKHR = type { i32, i8*, %struct.VkDeviceMemory_T*, i32 }
%struct.VkMemoryFdPropertiesKHR = type { i32, i8*, i32 }
%struct.VkImportSemaphoreFdInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i32, i32, i32 }
%struct.VkSemaphoreGetFdInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i32 }
%struct.VkDescriptorUpdateTemplate_T = type opaque
%struct.VkDescriptorUpdateTemplateCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorUpdateTemplateEntry*, i32, %struct.VkDescriptorSetLayout_T*, i32, %struct.VkPipelineLayout_T*, i32 }
%struct.VkDescriptorUpdateTemplateEntry = type { i32, i32, i32, i32, i64, i64 }
%struct.VkRenderPassCreateInfo2 = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription2*, i32, %struct.VkSubpassDescription2*, i32, %struct.VkSubpassDependency2*, i32, i32* }
%struct.VkAttachmentDescription2 = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription2 = type { i32, i8*, i32, i32, i32, i32, %struct.VkAttachmentReference2*, i32, %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2*, i32, i32* }
%struct.VkAttachmentReference2 = type { i32, i8*, i32, i32, i32 }
%struct.VkSubpassDependency2 = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassBeginInfo = type { i32, i8*, i32 }
%struct.VkSubpassEndInfo = type { i32, i8* }
%struct.VkImportFenceFdInfoKHR = type { i32, i8*, %struct.VkFence_T*, i32, i32, i32 }
%struct.VkFenceGetFdInfoKHR = type { i32, i8*, %struct.VkFence_T*, i32 }
%struct.VkAcquireProfilingLockInfoKHR = type { i32, i8*, i32, i64 }
%struct.VkImageMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkBufferMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkBuffer_T* }
%struct.VkImageSparseMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkSparseImageMemoryRequirements2 = type { i32, i8*, %struct.VkSparseImageMemoryRequirements }
%struct.VkSamplerYcbcrConversionCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkComponentMapping, i32, i32, i32, i32 }
%struct.VkSamplerYcbcrConversion_T = type opaque
%struct.VkBindBufferMemoryInfo = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64 }
%struct.VkBindImageMemoryInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64 }
%struct.VkDescriptorSetLayoutSupport = type { i32, i8*, i32 }
%struct.VkSemaphoreWaitInfo = type { i32, i8*, i32, i32, %struct.VkSemaphore_T**, i64* }
%struct.VkSemaphoreSignalInfo = type { i32, i8*, %struct.VkSemaphore_T*, i64 }
%struct.VkDeviceMemoryOpaqueCaptureAddressInfo = type { i32, i8*, %struct.VkDeviceMemory_T* }
%struct.VkDeferredOperationKHR_T = type opaque
%struct.VkPipelineInfoKHR = type { i32, i8*, %struct.VkPipeline_T* }
%struct.VkPipelineExecutablePropertiesKHR = type { i32, i8*, i32, [256 x i8], [256 x i8], i32 }
%struct.VkPipelineExecutableInfoKHR = type { i32, i8*, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineExecutableStatisticKHR = type { i32, i8*, [256 x i8], [256 x i8], i32, %union.VkPipelineExecutableStatisticValueKHR }
%union.VkPipelineExecutableStatisticValueKHR = type { i64 }
%struct.VkPipelineExecutableInternalRepresentationKHR = type { i32, i8*, [256 x i8], [256 x i8], i32, i64, i8* }
%struct.VkVideoEncodeInfoKHR = type { i32, i8*, i32, i32, %struct.VkExtent2D, %struct.VkBuffer_T*, i64, i64, %struct.VkVideoPictureResourceKHR, %struct.VkVideoReferenceSlotKHR*, i32, %struct.VkVideoReferenceSlotKHR* }
%struct.VkDependencyInfoKHR = type { i32, i8*, i32, i32, %struct.VkMemoryBarrier2KHR*, i32, %struct.VkBufferMemoryBarrier2KHR*, i32, %struct.VkImageMemoryBarrier2KHR* }
%struct.VkMemoryBarrier2KHR = type { i32, i8*, i64, i64, i64, i64 }
%struct.VkBufferMemoryBarrier2KHR = type { i32, i8*, i64, i64, i64, i64, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier2KHR = type { i32, i8*, i64, i64, i64, i64, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%struct.VkSubmitInfo2KHR = type { i32, i8*, i32, i32, %struct.VkSemaphoreSubmitInfoKHR*, i32, %struct.VkCommandBufferSubmitInfoKHR*, i32, %struct.VkSemaphoreSubmitInfoKHR* }
%struct.VkCommandBufferSubmitInfoKHR = type { i32, i8*, %struct.VkCommandBuffer_T*, i32 }
%struct.VkSemaphoreSubmitInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i64, i64, i32 }
%struct.VkCheckpointData2NV = type { i32, i8*, i64, i8* }
%struct.VkCopyBufferInfo2KHR = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy2KHR* }
%struct.VkBufferCopy2KHR = type { i32, i8*, i64, i64, i64 }
%struct.VkCopyImageInfo2KHR = type { i32, i8*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy2KHR* }
%struct.VkImageCopy2KHR = type { i32, i8*, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkCopyBufferToImageInfo2KHR = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy2KHR* }
%struct.VkBufferImageCopy2KHR = type { i32, i8*, i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkCopyImageToBufferInfo2KHR = type { i32, i8*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy2KHR* }
%struct.VkBlitImageInfo2KHR = type { i32, i8*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit2KHR*, i32 }
%struct.VkImageBlit2KHR = type { i32, i8*, %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D], %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D] }
%struct.VkResolveImageInfo2KHR = type { i32, i8*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve2KHR* }
%struct.VkImageResolve2KHR = type { i32, i8*, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkDebugMarkerObjectTagInfoEXT = type { i32, i8*, i32, i64, i64, i64, i8* }
%struct.VkDebugMarkerObjectNameInfoEXT = type { i32, i8*, i32, i64, i8* }
%struct.VkDebugMarkerMarkerInfoEXT = type { i32, i8*, i8*, [4 x float] }
%struct.VkCuModuleCreateInfoNVX = type { i32, i8*, i64, i8* }
%struct.VkCuModuleNVX_T = type opaque
%struct.VkCuFunctionCreateInfoNVX = type { i32, i8*, %struct.VkCuModuleNVX_T*, i8* }
%struct.VkCuFunctionNVX_T = type opaque
%struct.VkCuLaunchInfoNVX = type { i32, i8*, %struct.VkCuFunctionNVX_T*, i32, i32, i32, i32, i32, i32, i32, i64, i8**, i64, i8** }
%struct.VkImageViewHandleInfoNVX = type { i32, i8*, %struct.VkImageView_T*, i32, %struct.VkSampler_T* }
%struct.VkImageViewAddressPropertiesNVX = type { i32, i8*, i64, i64 }
%struct.VkConditionalRenderingBeginInfoEXT = type { i32, i8*, %struct.VkBuffer_T*, i64, i32 }
%struct.VkViewportWScalingNV = type { float, float }
%struct.VkDisplayPowerInfoEXT = type { i32, i8*, i32 }
%struct.VkDeviceEventInfoEXT = type { i32, i8*, i32 }
%struct.VkDisplayEventInfoEXT = type { i32, i8*, i32 }
%struct.VkRefreshCycleDurationGOOGLE = type { i64 }
%struct.VkPastPresentationTimingGOOGLE = type { i32, i64, i64, i64, i64 }
%struct.VkHdrMetadataEXT = type { i32, i8*, %struct.VkXYColorEXT, %struct.VkXYColorEXT, %struct.VkXYColorEXT, %struct.VkXYColorEXT, float, float, float, float }
%struct.VkXYColorEXT = type { float, float }
%struct.VkDebugUtilsObjectTagInfoEXT = type { i32, i8*, i32, i64, i64, i64, i8* }
%struct.VkSampleLocationsInfoEXT = type { i32, i8*, i32, %struct.VkExtent2D, i32, %struct.VkSampleLocationEXT* }
%struct.VkSampleLocationEXT = type { float, float }
%struct.VkImageDrmFormatModifierPropertiesEXT = type { i32, i8*, i64 }
%struct.VkValidationCacheCreateInfoEXT = type { i32, i8*, i32, i64, i8* }
%struct.VkValidationCacheEXT_T = type opaque
%struct.VkShadingRatePaletteNV = type { i32, i32* }
%struct.VkCoarseSampleOrderCustomNV = type { i32, i32, i32, %struct.VkCoarseSampleLocationNV* }
%struct.VkCoarseSampleLocationNV = type { i32, i32, i32 }
%struct.VkAccelerationStructureCreateInfoNV = type { i32, i8*, i64, %struct.VkAccelerationStructureInfoNV }
%struct.VkAccelerationStructureInfoNV = type { i32, i8*, i32, i32, i32, i32, %struct.VkGeometryNV* }
%struct.VkGeometryNV = type { i32, i8*, i32, %struct.VkGeometryDataNV, i32 }
%struct.VkGeometryDataNV = type { %struct.VkGeometryTrianglesNV, %struct.VkGeometryAABBNV }
%struct.VkGeometryTrianglesNV = type { i32, i8*, %struct.VkBuffer_T*, i64, i32, i64, i32, %struct.VkBuffer_T*, i64, i32, i32, %struct.VkBuffer_T*, i64 }
%struct.VkGeometryAABBNV = type { i32, i8*, %struct.VkBuffer_T*, i32, i32, i64 }
%struct.VkAccelerationStructureNV_T = type opaque
%struct.VkAccelerationStructureMemoryRequirementsInfoNV = type { i32, i8*, i32, %struct.VkAccelerationStructureNV_T* }
%struct.VkBindAccelerationStructureMemoryInfoNV = type { i32, i8*, %struct.VkAccelerationStructureNV_T*, %struct.VkDeviceMemory_T*, i64, i32, i32* }
%struct.VkRayTracingPipelineCreateInfoNV = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, i32, %struct.VkRayTracingShaderGroupCreateInfoNV*, i32, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%struct.VkRayTracingShaderGroupCreateInfoNV = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkMemoryHostPointerPropertiesEXT = type { i32, i8*, i32 }
%struct.VkCalibratedTimestampInfoEXT = type { i32, i8*, i32 }
%struct.VkCheckpointDataNV = type { i32, i8*, i32, i8* }
%struct.VkInitializePerformanceApiInfoINTEL = type { i32, i8*, i8* }
%struct.VkPerformanceMarkerInfoINTEL = type { i32, i8*, i64 }
%struct.VkPerformanceStreamMarkerInfoINTEL = type { i32, i8*, i32 }
%struct.VkPerformanceOverrideInfoINTEL = type { i32, i8*, i32, i32, i64 }
%struct.VkPerformanceConfigurationAcquireInfoINTEL = type { i32, i8*, i32 }
%struct.VkPerformanceConfigurationINTEL_T = type opaque
%struct.VkPerformanceValueINTEL = type { i32, %union.VkPerformanceValueDataINTEL }
%union.VkPerformanceValueDataINTEL = type { i64 }
%struct.VkBufferDeviceAddressInfo = type { i32, i8*, %struct.VkBuffer_T* }
%struct.VkGeneratedCommandsMemoryRequirementsInfoNV = type { i32, i8*, i32, %struct.VkPipeline_T*, %struct.VkIndirectCommandsLayoutNV_T*, i32 }
%struct.VkIndirectCommandsLayoutNV_T = type opaque
%struct.VkGeneratedCommandsInfoNV = type { i32, i8*, i32, %struct.VkPipeline_T*, %struct.VkIndirectCommandsLayoutNV_T*, i32, %struct.VkIndirectCommandsStreamNV*, i32, %struct.VkBuffer_T*, i64, i64, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64 }
%struct.VkIndirectCommandsStreamNV = type { %struct.VkBuffer_T*, i64 }
%struct.VkIndirectCommandsLayoutCreateInfoNV = type { i32, i8*, i32, i32, i32, %struct.VkIndirectCommandsLayoutTokenNV*, i32, i32* }
%struct.VkIndirectCommandsLayoutTokenNV = type { i32, i8*, i32, i32, i32, i32, i32, %struct.VkPipelineLayout_T*, i32, i32, i32, i32, i32, i32*, i32* }
%struct.VkPrivateDataSlotCreateInfoEXT = type { i32, i8*, i32 }
%struct.VkPrivateDataSlotEXT_T = type opaque
%struct.VkVertexInputBindingDescription2EXT = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkVertexInputAttributeDescription2EXT = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkAccelerationStructureCreateInfoKHR = type { i32, i8*, i32, %struct.VkBuffer_T*, i64, i64, i32, i64 }
%struct.VkAccelerationStructureKHR_T = type opaque
%struct.VkAccelerationStructureBuildGeometryInfoKHR = type { i32, i8*, i32, i32, i32, %struct.VkAccelerationStructureKHR_T*, %struct.VkAccelerationStructureKHR_T*, i32, %struct.VkAccelerationStructureGeometryKHR*, %struct.VkAccelerationStructureGeometryKHR**, %union.VkDeviceOrHostAddressKHR }
%struct.VkAccelerationStructureGeometryKHR = type { i32, i8*, i32, %union.VkAccelerationStructureGeometryDataKHR, i32 }
%union.VkAccelerationStructureGeometryDataKHR = type { %struct.VkAccelerationStructureGeometryTrianglesDataKHR }
%struct.VkAccelerationStructureGeometryTrianglesDataKHR = type { i32, i8*, i32, %union.VkDeviceOrHostAddressConstKHR, i64, i32, i32, %union.VkDeviceOrHostAddressConstKHR, %union.VkDeviceOrHostAddressConstKHR }
%union.VkDeviceOrHostAddressConstKHR = type { i64 }
%union.VkDeviceOrHostAddressKHR = type { i64 }
%struct.VkAccelerationStructureBuildRangeInfoKHR = type { i32, i32, i32, i32 }
%struct.VkCopyAccelerationStructureInfoKHR = type { i32, i8*, %struct.VkAccelerationStructureKHR_T*, %struct.VkAccelerationStructureKHR_T*, i32 }
%struct.VkCopyAccelerationStructureToMemoryInfoKHR = type { i32, i8*, %struct.VkAccelerationStructureKHR_T*, %union.VkDeviceOrHostAddressKHR, i32 }
%struct.VkCopyMemoryToAccelerationStructureInfoKHR = type { i32, i8*, %union.VkDeviceOrHostAddressConstKHR, %struct.VkAccelerationStructureKHR_T*, i32 }
%struct.VkAccelerationStructureDeviceAddressInfoKHR = type { i32, i8*, %struct.VkAccelerationStructureKHR_T* }
%struct.VkAccelerationStructureVersionInfoKHR = type { i32, i8*, i8* }
%struct.VkAccelerationStructureBuildSizesInfoKHR = type { i32, i8*, i64, i64, i64 }
%struct.VkStridedDeviceAddressRegionKHR = type { i64, i64, i64 }
%struct.VkRayTracingPipelineCreateInfoKHR = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, i32, %struct.VkRayTracingShaderGroupCreateInfoKHR*, i32, %struct.VkPipelineLibraryCreateInfoKHR*, %struct.VkRayTracingPipelineInterfaceCreateInfoKHR*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%struct.VkRayTracingShaderGroupCreateInfoKHR = type { i32, i8*, i32, i32, i32, i32, i32, i8* }
%struct.VkPipelineLibraryCreateInfoKHR = type { i32, i8*, i32, %struct.VkPipeline_T** }
%struct.VkRayTracingPipelineInterfaceCreateInfoKHR = type { i32, i8*, i32, i32 }
%struct.loader_dev_ext_dispatch_table = type { [250 x i32 (%struct.VkDevice_T*)*] }
%struct.anon.0 = type { i8, i8, i8, i8, i8, i8 }
%struct.loader_icd_term_dispatch = type { i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)*, void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, void ()* (%struct.VkDevice_T*, i8*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)*, i32 (i8*, i32*, %struct.VkExtensionProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)*, i32 (i32*, %struct.VkLayerProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)*, i32 (i32*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)*, void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)*, i32 (%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkVideoProfileKHR*, %struct.VkVideoCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceVideoFormatInfoKHR*, i32*, %struct.VkVideoFormatPropertiesKHR*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkPerformanceCounterKHR*, %struct.VkPerformanceCounterDescriptionKHR*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkQueryPoolPerformanceCreateInfoKHR*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlaneProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkPhysicalDeviceFragmentShadingRateKHR*)*, i32 (%struct.VkInstance_T*, %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkDebugReportCallbackEXT_T**)*, void (%struct.VkInstance_T*, %struct.VkDebugReportCallbackEXT_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, i32, i32, i64, i64, i32, i8*, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugMarkerObjectTagInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugMarkerObjectNameInfoEXT*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32, %struct.VkExternalImageFormatPropertiesNV*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilities2EXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugUtilsObjectNameInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugUtilsObjectTagInfoEXT*)*, void (%struct.VkQueue_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkQueue_T*)*, void (%struct.VkQueue_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugUtilsLabelEXT*)*, i32 (%struct.VkInstance_T*, %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkDebugUtilsMessengerEXT_T**)*, void (%struct.VkInstance_T*, %struct.VkDebugUtilsMessengerEXT_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, i32, i32, %struct.VkDebugUtilsMessengerCallbackDataEXT*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkMultisamplePropertiesEXT*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkPhysicalDeviceToolPropertiesEXT*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkCooperativeMatrixPropertiesNV*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkFramebufferMixedSamplesCombinationNV*)*, i32 (%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* }
%struct.loader_icd_tramp_list = type { i64, i32, %struct.loader_scanned_icd* }
%struct.loader_dispatch_hash_entry = type { i8*, %struct.loader_dispatch_hash_list }
%struct.loader_dispatch_hash_list = type { i64, i32, i32* }
%struct.loader_msg_callback_map_entry = type { %struct.VkDebugReportCallbackEXT_T*, %struct.VkDebugReportCallbackEXT_T* }
%struct.loader_layer_list = type { i64, i32, %struct.loader_layer_properties* }
%struct.loader_layer_properties = type { %struct.VkLayerProperties, i32, i32, [1024 x i8], i8*, %struct.loader_layer_functions, %struct.loader_extension_list, %struct.loader_device_extension_list, %struct.loader_name_value, %struct.loader_name_value, i32, [1024 x i8]*, %struct.anon, i32, [1024 x i8]*, i8, i8, %struct.loader_override_expiration, i8, i32, [1024 x i8]*, i32, [1024 x i8]* }
%struct.loader_layer_functions = type { [1024 x i8], [1024 x i8], [1024 x i8], i32 (%struct.VkNegotiateLayerInterface*)*, void ()* (%struct.VkInstance_T*, i8*)*, void ()* (%struct.VkDevice_T*, i8*)*, void ()* (%struct.VkInstance_T*, i8*)* }
%struct.VkNegotiateLayerInterface = type { i32, i8*, i32, void ()* (%struct.VkInstance_T*, i8*)*, void ()* (%struct.VkDevice_T*, i8*)*, void ()* (%struct.VkInstance_T*, i8*)* }
%struct.loader_device_extension_list = type { i64, i32, %struct.loader_dev_ext_props* }
%struct.loader_dev_ext_props = type { %struct.VkExtensionProperties, i32, i8** }
%struct.loader_name_value = type { [1024 x i8], [1024 x i8] }
%struct.anon = type { [1024 x i8], [1024 x i8], [1024 x i8] }
%struct.loader_override_expiration = type { i16, i8, i8, i8, i8 }
%struct.VkInstance_T = type opaque
%struct.loader_extension_list = type { i64, i32, %struct.VkExtensionProperties* }
%union.loader_instance_extension_enables = type { [4 x i64] }
%struct.VkLayerDbgFunctionNode_ = type { i8, %union.anon, i8*, %struct.VkLayerDbgFunctionNode_* }
%union.anon = type { %struct.VkDebugReportContent }
%struct.VkDebugReportContent = type { %struct.VkDebugReportCallbackEXT_T*, i32 (i32, i32, i64, i64, i32, i8*, i8*, i8*)*, i32 }
%struct.VkDebugReportCallbackCreateInfoEXT = type { i32, i8*, i32, i32 (i32, i32, i64, i64, i32, i8*, i8*, i8*)*, i8* }
%struct.VkDebugUtilsMessengerCreateInfoEXT = type { i32, i8*, i32, i32, i32, i32 (i32, i32, %struct.VkDebugUtilsMessengerCallbackDataEXT*, i8*)*, i8* }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkInstanceCreateInfo = type { i32, i8*, i32, %struct.VkApplicationInfo*, i32, i8**, i32, i8** }
%struct.VkApplicationInfo = type { i32, i8*, i8*, i32, i8*, i32, i32 }
%struct.VkIcdSurface = type { %union.anon.2, i32, i32, i32, i32, %struct.VkSurfaceKHR_T** }
%union.anon.2 = type { %struct.VkIcdSurfaceDisplay }
%struct.VkIcdSurfaceDisplay = type { %struct.VkIcdSurfaceBase, %struct.VkDisplayModeKHR_T*, i32, i32, i32, float, i32, %struct.VkExtent2D }
%struct.VkIcdSurfaceBase = type { i32 }
%struct.VkBaseOutStructure = type { i32, %struct.VkBaseOutStructure* }

@.str = private unnamed_addr constant [15 x i8] c"VK_KHR_surface\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"VK_KHR_xcb_surface\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"VK_EXT_headless_surface\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"VK_KHR_display\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"VK_KHR_get_display_properties2\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"VK_KHR_wayland_surface\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"VK_KHR_xlib_surface\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"VK_EXT_directfb_surface\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"VK_QNX_screen_surface\00", align 1
@.str.9 = private unnamed_addr constant [91 x i8] c"VK_KHR_surface extension not enabled.  vkGetPhysicalDeviceSurfaceSupportKHR not executed!\0A\00", align 1
@.str.10 = private unnamed_addr constant [79 x i8] c"NULL pointer passed into vkGetPhysicalDeviceSurfaceSupportKHR for pSupported!\0A\00", align 1
@.str.11 = private unnamed_addr constant [89 x i8] c"ICD for selected physical device is not exporting vkGetPhysicalDeviceSurfaceSupportKHR!\0A\00", align 1
@.str.12 = private unnamed_addr constant [96 x i8] c"VK_KHR_surface extension not enabled.  vkGetPhysicalDeviceSurfaceCapabilitiesKHR not executed!\0A\00", align 1
@.str.13 = private unnamed_addr constant [94 x i8] c"NULL pointer passed into vkGetPhysicalDeviceSurfaceCapabilitiesKHR for pSurfaceCapabilities!\0A\00", align 1
@.str.14 = private unnamed_addr constant [94 x i8] c"ICD for selected physical device is not exporting vkGetPhysicalDeviceSurfaceCapabilitiesKHR!\0A\00", align 1
@.str.15 = private unnamed_addr constant [91 x i8] c"VK_KHR_surface extension not enabled.  vkGetPhysicalDeviceSurfaceFormatsKHR not executed!\0A\00", align 1
@.str.16 = private unnamed_addr constant [88 x i8] c"NULL pointer passed into vkGetPhysicalDeviceSurfaceFormatsKHR for pSurfaceFormatCount!\0A\00", align 1
@.str.17 = private unnamed_addr constant [96 x i8] c"VK_KHR_surface extension not enabled.  vkGetPhysicalDeviceSurfacePresentModesKHR not executed!\0A\00", align 1
@.str.18 = private unnamed_addr constant [91 x i8] c"NULL pointer passed into vkGetPhysicalDeviceSurfacePresentModesKHR for pPresentModeCount!\0A\00", align 1
@.str.19 = private unnamed_addr constant [94 x i8] c"ICD for selected physical device is not exporting vkGetPhysicalDeviceSurfacePresentModesKHR!\0A\00", align 1
@.str.20 = private unnamed_addr constant [80 x i8] c"VK_KHR_xcb_surface extension not enabled.  vkCreateXcbSurfaceKHR not executed!\0A\00", align 1
@.str.21 = private unnamed_addr constant [103 x i8] c"VK_KHR_xcb_surface extension not enabled.  vkGetPhysicalDeviceXcbPresentationSupportKHR not executed!\0A\00", align 1
@.str.22 = private unnamed_addr constant [97 x i8] c"ICD for selected physical device is not exporting vkGetPhysicalDeviceXcbPresentationSupportKHR!\0A\00", align 1
@.str.23 = private unnamed_addr constant [90 x i8] c"VK_EXT_headless_surface extension not enabled.  vkCreateHeadlessSurfaceEXT not executed!\0A\00", align 1
@.str.24 = private unnamed_addr constant [94 x i8] c"VK_KHR_display extension not enabled.  vkGetPhysicalDeviceDisplayPropertiesKHR not executed!\0A\00", align 1
@.str.25 = private unnamed_addr constant [99 x i8] c"VK_KHR_display extension not enabled.  vkGetPhysicalDeviceDisplayPlanePropertiesKHR not executed!\0A\00", align 1
@.str.26 = private unnamed_addr constant [92 x i8] c"VK_KHR_display extension not enabled.  vkGetDisplayPlaneSupportedDisplaysKHR not executed!\0A\00", align 1
@.str.27 = private unnamed_addr constant [90 x i8] c"ICD for selected physical device is not exporting vkGetDisplayPlaneSupportedDisplaysKHR!\0A\00", align 1
@.str.28 = private unnamed_addr constant [84 x i8] c"VK_KHR_display extension not enabled.  vkGetDisplayModePropertiesKHR not executed!\0A\00", align 1
@.str.29 = private unnamed_addr constant [82 x i8] c"ICD for selected physical device is not exporting vkGetDisplayModePropertiesKHR!\0A\00", align 1
@.str.30 = private unnamed_addr constant [77 x i8] c"VK_KHR_display extension not enabled.  vkCreateDisplayModeKHR not executed!\0A\00", align 1
@.str.31 = private unnamed_addr constant [75 x i8] c"ICD for selected physical device is not exporting vkCreateDisplayModeKHR!\0A\00", align 1
@.str.32 = private unnamed_addr constant [87 x i8] c"VK_KHR_display extension not enabled.  vkGetDisplayPlaneCapabilitiesKHR not executed!\0A\00", align 1
@.str.33 = private unnamed_addr constant [85 x i8] c"ICD for selected physical device is not exporting vkGetDisplayPlaneCapabilitiesKHR!\0A\00", align 1
@.str.34 = private unnamed_addr constant [85 x i8] c"VK_KHR_surface extension not enabled.  vkCreateDisplayPlaneSurfaceKHR not executed!\0A\00", align 1
@.str.35 = private unnamed_addr constant [92 x i8] c"ICD associated with VkPhysicalDevice does not support GetPhysicalDevicePresentRectanglesKHX\00", align 1
@.str.36 = private unnamed_addr constant [69 x i8] c"vkGetPhysicalDeviceDisplayProperties2KHR: Emulating call in ICD \22%s\22\00", align 1
@.str.37 = private unnamed_addr constant [74 x i8] c"vkGetPhysicalDeviceDisplayPlaneProperties2KHR: Emulating call in ICD \22%s\22\00", align 1
@.str.38 = private unnamed_addr constant [59 x i8] c"vkGetDisplayModeProperties2KHR: Emulating call in ICD \22%s\22\00", align 1
@.str.39 = private unnamed_addr constant [62 x i8] c"vkGetDisplayPlaneCapabilities2KHR: Emulating call in ICD \22%s\22\00", align 1
@.str.40 = private unnamed_addr constant [96 x i8] c"VK_KHR_surface extension not enabled. vkGetPhysicalDeviceSurfaceCapabilities2KHR not executed!\0A\00", align 1
@.str.41 = private unnamed_addr constant [119 x i8] c"vkGetPhysicalDeviceSurfaceCapabilities2KHR: Emulating call in ICD \22%s\22 using vkGetPhysicalDeviceSurfaceCapabilitiesKHR\00", align 1
@.str.42 = private unnamed_addr constant [141 x i8] c"vkGetPhysicalDeviceSurfaceCapabilities2KHR: Emulation found unrecognized structure type in pSurfaceInfo->pNext - this struct will be ignored\00", align 1
@.str.43 = private unnamed_addr constant [149 x i8] c"vkGetPhysicalDeviceSurfaceCapabilities2KHR: Emulation found unrecognized structure type in pSurfaceCapabilities->pNext - this struct will be ignored\00", align 1
@.str.44 = private unnamed_addr constant [91 x i8] c"VK_KHR_surface extension not enabled. vkGetPhysicalDeviceSurfaceFormats2KHR not executed!\0A\00", align 1
@.str.45 = private unnamed_addr constant [109 x i8] c"vkGetPhysicalDeviceSurfaceFormats2KHR: Emulating call in ICD \22%s\22 using vkGetPhysicalDeviceSurfaceFormatsKHR\00", align 1
@.str.46 = private unnamed_addr constant [136 x i8] c"vkGetPhysicalDeviceSurfaceFormats2KHR: Emulation found unrecognized structure type in pSurfaceInfo->pNext - this struct will be ignored\00", align 1
@.str.47 = private unnamed_addr constant [142 x i8] c"vkGetPhysicalDeviceSurfaceFormats2KHR: Emulation found unrecognized structure type in pSurfaceFormats[%d].pNext - this struct will be ignored\00", align 1
@.str.48 = private unnamed_addr constant [20 x i8] c"vkDestroySurfaceKHR\00", align 1
@.str.49 = private unnamed_addr constant [37 x i8] c"vkGetPhysicalDeviceSurfaceSupportKHR\00", align 1
@.str.50 = private unnamed_addr constant [42 x i8] c"vkGetPhysicalDeviceSurfaceCapabilitiesKHR\00", align 1
@.str.51 = private unnamed_addr constant [37 x i8] c"vkGetPhysicalDeviceSurfaceFormatsKHR\00", align 1
@.str.52 = private unnamed_addr constant [42 x i8] c"vkGetPhysicalDeviceSurfacePresentModesKHR\00", align 1
@.str.53 = private unnamed_addr constant [39 x i8] c"vkGetDeviceGroupPresentCapabilitiesKHR\00", align 1
@.str.54 = private unnamed_addr constant [39 x i8] c"vkGetDeviceGroupSurfacePresentModesKHR\00", align 1
@.str.55 = private unnamed_addr constant [40 x i8] c"vkGetPhysicalDevicePresentRectanglesKHR\00", align 1
@.str.56 = private unnamed_addr constant [43 x i8] c"vkGetPhysicalDeviceSurfaceCapabilities2KHR\00", align 1
@.str.57 = private unnamed_addr constant [38 x i8] c"vkGetPhysicalDeviceSurfaceFormats2KHR\00", align 1
@.str.58 = private unnamed_addr constant [21 x i8] c"vkCreateSwapchainKHR\00", align 1
@.str.59 = private unnamed_addr constant [22 x i8] c"vkDestroySwapchainKHR\00", align 1
@.str.60 = private unnamed_addr constant [24 x i8] c"vkGetSwapchainImagesKHR\00", align 1
@.str.61 = private unnamed_addr constant [22 x i8] c"vkAcquireNextImageKHR\00", align 1
@.str.62 = private unnamed_addr constant [18 x i8] c"vkQueuePresentKHR\00", align 1
@.str.63 = private unnamed_addr constant [23 x i8] c"vkAcquireNextImage2KHR\00", align 1
@.str.64 = private unnamed_addr constant [22 x i8] c"vkCreateXcbSurfaceKHR\00", align 1
@.str.65 = private unnamed_addr constant [45 x i8] c"vkGetPhysicalDeviceXcbPresentationSupportKHR\00", align 1
@.str.66 = private unnamed_addr constant [27 x i8] c"vkCreateHeadlessSurfaceEXT\00", align 1
@.str.67 = private unnamed_addr constant [40 x i8] c"vkGetPhysicalDeviceDisplayPropertiesKHR\00", align 1
@.str.68 = private unnamed_addr constant [45 x i8] c"vkGetPhysicalDeviceDisplayPlanePropertiesKHR\00", align 1
@.str.69 = private unnamed_addr constant [38 x i8] c"vkGetDisplayPlaneSupportedDisplaysKHR\00", align 1
@.str.70 = private unnamed_addr constant [30 x i8] c"vkGetDisplayModePropertiesKHR\00", align 1
@.str.71 = private unnamed_addr constant [23 x i8] c"vkCreateDisplayModeKHR\00", align 1
@.str.72 = private unnamed_addr constant [33 x i8] c"vkGetDisplayPlaneCapabilitiesKHR\00", align 1
@.str.73 = private unnamed_addr constant [31 x i8] c"vkCreateDisplayPlaneSurfaceKHR\00", align 1
@.str.74 = private unnamed_addr constant [28 x i8] c"vkCreateSharedSwapchainsKHR\00", align 1
@.str.75 = private unnamed_addr constant [41 x i8] c"vkGetPhysicalDeviceDisplayProperties2KHR\00", align 1
@.str.76 = private unnamed_addr constant [46 x i8] c"vkGetPhysicalDeviceDisplayPlaneProperties2KHR\00", align 1
@.str.77 = private unnamed_addr constant [31 x i8] c"vkGetDisplayModeProperties2KHR\00", align 1
@.str.78 = private unnamed_addr constant [34 x i8] c"vkGetDisplayPlaneCapabilities2KHR\00", align 1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @wsi_create_instance(%struct.loader_instance* nocapture, %struct.VkInstanceCreateInfo* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 34
  store i8 0, i8* %3, align 8
  %4 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 35
  store i8 0, i8* %4, align 1
  %5 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 37
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 38
  store i8 0, i8* %6, align 4
  %7 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %1, i64 0, i32 6
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %1, i64 0, i32 7
  %12 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 36
  br label %14

13:                                               ; preds = %38, %2
  ret void

14:                                               ; preds = %10, %38
  %15 = phi i64 [ 0, %10 ], [ %39, %38 ]
  %16 = load i8**, i8*** %11, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 %15
  %18 = load i8*, i8** %17, align 8
  %19 = tail call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0)) #6
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %14
  store i8 1, i8* %3, align 8
  br label %38

22:                                               ; preds = %14
  %23 = tail call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0)) #6
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  store i8 1, i8* %4, align 1
  br label %38

26:                                               ; preds = %22
  %27 = tail call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #6
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i8 1, i8* %12, align 2
  br label %38

30:                                               ; preds = %26
  %31 = tail call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0)) #6
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  store i8 1, i8* %5, align 1
  br label %38

34:                                               ; preds = %30
  %35 = tail call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0)) #6
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %34
  store i8 1, i8* %6, align 4
  br label %38

38:                                               ; preds = %34, %37, %33, %29, %25, %21
  %39 = add nuw nsw i64 %15, 1
  %40 = load i32, i32* %7, align 8
  %41 = zext i32 %40 to i64
  %42 = icmp ult i64 %39, %41
  br i1 %42, label %14, label %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @wsi_unsupported_instance_extension(%struct.VkExtensionProperties* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.VkExtensionProperties, %struct.VkExtensionProperties* %0, i64 0, i32 0, i64 0
  %3 = tail call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0)) #6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0)) #6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %5
  %9 = tail call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0)) #6
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %8
  %12 = tail call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0)) #6
  %13 = icmp eq i32 %12, 0
  br label %14

14:                                               ; preds = %11, %8, %5, %1
  %15 = phi i1 [ true, %1 ], [ true, %5 ], [ true, %8 ], [ %13, %11 ]
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroySurfaceKHR(%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*) #4 {
  %4 = bitcast %struct.VkInstance_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %5 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %5, i64 0, i32 29
  %7 = load void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkInstance_T* %0, %struct.VkSurfaceKHR_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @terminator_DestroySurfaceKHR(%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*) local_unnamed_addr #4 {
  %4 = tail call %struct.loader_instance* @loader_get_instance(%struct.VkInstance_T* %0) #7
  %5 = icmp eq %struct.VkSurfaceKHR_T* %1, null
  br i1 %5, label %51, label %6

6:                                                ; preds = %3
  %7 = bitcast %struct.VkSurfaceKHR_T* %1 to %struct.VkIcdSurface*
  %8 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %7, i64 0, i32 5
  %9 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %8, align 8
  %10 = icmp eq %struct.VkSurfaceKHR_T** %9, null
  br i1 %10, label %49, label %11

11:                                               ; preds = %6
  %12 = bitcast %struct.VkSurfaceKHR_T** %9 to i8*
  %13 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %4, i64 0, i32 14
  %14 = load %struct.loader_icd_term*, %struct.loader_icd_term** %13, align 8
  %15 = icmp eq %struct.loader_icd_term* %14, null
  br i1 %15, label %19, label %21

16:                                               ; preds = %44
  %17 = bitcast %struct.VkSurfaceKHR_T*** %8 to i8**
  %18 = load i8*, i8** %17, align 8
  br label %19

19:                                               ; preds = %11, %16
  %20 = phi i8* [ %18, %16 ], [ %12, %11 ]
  tail call void @loader_instance_heap_free(%struct.loader_instance* %4, i8* %20) #7
  br label %49

21:                                               ; preds = %11, %44
  %22 = phi %struct.loader_icd_term* [ %47, %44 ], [ %14, %11 ]
  %23 = phi i32 [ %46, %44 ], [ 0, %11 ]
  %24 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %22, i64 0, i32 0
  %25 = load %struct.loader_scanned_icd*, %struct.loader_scanned_icd** %24, align 8
  %26 = getelementptr inbounds %struct.loader_scanned_icd, %struct.loader_scanned_icd* %25, i64 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = icmp ugt i32 %27, 2
  br i1 %28, label %29, label %44

29:                                               ; preds = %21
  %30 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %22, i64 0, i32 4, i32 27
  %31 = load void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)** %30, align 8
  %32 = icmp eq void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)* %31, null
  br i1 %32, label %44, label %33

33:                                               ; preds = %29
  %34 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %8, align 8
  %35 = zext i32 %23 to i64
  %36 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %34, i64 %35
  %37 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %36, align 8
  %38 = icmp eq %struct.VkSurfaceKHR_T* %37, null
  br i1 %38, label %44, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %22, i64 0, i32 3
  %41 = load %struct.VkInstance_T*, %struct.VkInstance_T** %40, align 8
  tail call void %31(%struct.VkInstance_T* %41, %struct.VkSurfaceKHR_T* nonnull %37, %struct.VkAllocationCallbacks* %2) #7
  %42 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %8, align 8
  %43 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %42, i64 %35
  store %struct.VkSurfaceKHR_T* null, %struct.VkSurfaceKHR_T** %43, align 8
  br label %44

44:                                               ; preds = %33, %29, %39, %21
  %45 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %22, i64 0, i32 5
  %46 = add i32 %23, 1
  %47 = load %struct.loader_icd_term*, %struct.loader_icd_term** %45, align 8
  %48 = icmp eq %struct.loader_icd_term* %47, null
  br i1 %48, label %16, label %21

49:                                               ; preds = %6, %19
  %50 = bitcast %struct.VkSurfaceKHR_T* %1 to i8*
  tail call void @loader_instance_heap_free(%struct.loader_instance* %4, i8* nonnull %50) #7
  br label %51

51:                                               ; preds = %3, %49
  ret void
}

declare %struct.loader_instance* @loader_get_instance(%struct.VkInstance_T*) local_unnamed_addr #5

declare void @loader_instance_heap_free(%struct.loader_instance*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceSurfaceSupportKHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32, %struct.VkSurfaceKHR_T*, i32*) #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %7 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %6, align 8
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %9 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 30
  %11 = load i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)** %10, align 8
  %12 = tail call i32 %11(%struct.VkPhysicalDevice_T* %7, i32 %1, %struct.VkSurfaceKHR_T* %2, i32* %3) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDeviceSurfaceSupportKHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32, %struct.VkSurfaceKHR_T*, i32*) local_unnamed_addr #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %6 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 1
  %7 = load %struct.loader_icd_term*, %struct.loader_icd_term** %6, align 8
  %8 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 1
  %9 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  %10 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %9, i64 0, i32 34
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.9, i64 0, i64 0)) #7
  br label %44

14:                                               ; preds = %4
  %15 = icmp eq i32* %3, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %14
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.10, i64 0, i64 0)) #7
  br label %17

17:                                               ; preds = %16, %14
  store i32 0, i32* %3, align 4
  %18 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 28
  %19 = load i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)** %18, align 8
  %20 = icmp eq i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.11, i64 0, i64 0)) #7
  br label %22

22:                                               ; preds = %21, %17
  %23 = bitcast %struct.VkSurfaceKHR_T* %2 to %struct.VkIcdSurface*
  %24 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %23, i64 0, i32 5
  %25 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %24, align 8
  %26 = icmp eq %struct.VkSurfaceKHR_T** %25, null
  br i1 %26, label %39, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 2
  %29 = load i8, i8* %28, align 8
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %25, i64 %30
  %32 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %31, align 8
  %33 = icmp eq %struct.VkSurfaceKHR_T* %32, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %27
  %35 = load i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)** %18, align 8
  %36 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %37 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %36, align 8
  %38 = tail call i32 %35(%struct.VkPhysicalDevice_T* %37, i32 %1, %struct.VkSurfaceKHR_T* nonnull %32, i32* %3) #7
  br label %44

39:                                               ; preds = %27, %22
  %40 = load i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)** %18, align 8
  %41 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %42 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %41, align 8
  %43 = tail call i32 %40(%struct.VkPhysicalDevice_T* %42, i32 %1, %struct.VkSurfaceKHR_T* %2, i32* %3) #7
  br label %44

44:                                               ; preds = %34, %39, %13
  %45 = phi i32 [ 0, %13 ], [ %38, %34 ], [ %43, %39 ]
  ret i32 %45
}

declare void @loader_log(%struct.loader_instance*, i32, i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceSurfaceCapabilitiesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*) #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 31
  %10 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)** %9, align 8
  %11 = tail call i32 %10(%struct.VkPhysicalDevice_T* %6, %struct.VkSurfaceKHR_T* %1, %struct.VkSurfaceCapabilitiesKHR* %2) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDeviceSurfaceCapabilitiesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*) local_unnamed_addr #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %5 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 1
  %6 = load %struct.loader_icd_term*, %struct.loader_icd_term** %5, align 8
  %7 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 1
  %8 = load %struct.loader_instance*, %struct.loader_instance** %7, align 8
  %9 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 34
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %3
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %8, i32 8, i32 0, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.12, i64 0, i64 0)) #7
  br label %43

13:                                               ; preds = %3
  %14 = icmp eq %struct.VkSurfaceCapabilitiesKHR* %2, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %13
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %8, i32 8, i32 0, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.13, i64 0, i64 0)) #7
  br label %16

16:                                               ; preds = %15, %13
  %17 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 4, i32 29
  %18 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)** %17, align 8
  %19 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)* %18, null
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %8, i32 8, i32 0, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.14, i64 0, i64 0)) #7
  br label %21

21:                                               ; preds = %20, %16
  %22 = bitcast %struct.VkSurfaceKHR_T* %1 to %struct.VkIcdSurface*
  %23 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %22, i64 0, i32 5
  %24 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %23, align 8
  %25 = icmp eq %struct.VkSurfaceKHR_T** %24, null
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 2
  %28 = load i8, i8* %27, align 8
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %24, i64 %29
  %31 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %30, align 8
  %32 = icmp eq %struct.VkSurfaceKHR_T* %31, null
  br i1 %32, label %38, label %33

33:                                               ; preds = %26
  %34 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)** %17, align 8
  %35 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %36 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %35, align 8
  %37 = tail call i32 %34(%struct.VkPhysicalDevice_T* %36, %struct.VkSurfaceKHR_T* nonnull %31, %struct.VkSurfaceCapabilitiesKHR* %2) #7
  br label %43

38:                                               ; preds = %26, %21
  %39 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)** %17, align 8
  %40 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %41 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %40, align 8
  %42 = tail call i32 %39(%struct.VkPhysicalDevice_T* %41, %struct.VkSurfaceKHR_T* %1, %struct.VkSurfaceCapabilitiesKHR* %2) #7
  br label %43

43:                                               ; preds = %33, %38, %12
  %44 = phi i32 [ 0, %12 ], [ %37, %33 ], [ %42, %38 ]
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceSurfaceFormatsKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*) #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %7 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %6, align 8
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %9 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 32
  %11 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)** %10, align 8
  %12 = tail call i32 %11(%struct.VkPhysicalDevice_T* %7, %struct.VkSurfaceKHR_T* %1, i32* %2, %struct.VkSurfaceFormatKHR* %3) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDeviceSurfaceFormatsKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*) local_unnamed_addr #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %6 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 1
  %7 = load %struct.loader_icd_term*, %struct.loader_icd_term** %6, align 8
  %8 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 1
  %9 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  %10 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %9, i64 0, i32 34
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.15, i64 0, i64 0)) #7
  br label %44

14:                                               ; preds = %4
  %15 = icmp eq i32* %2, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %14
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.16, i64 0, i64 0)) #7
  br label %17

17:                                               ; preds = %16, %14
  %18 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 30
  %19 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)** %18, align 8
  %20 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.14, i64 0, i64 0)) #7
  br label %22

22:                                               ; preds = %21, %17
  %23 = bitcast %struct.VkSurfaceKHR_T* %1 to %struct.VkIcdSurface*
  %24 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %23, i64 0, i32 5
  %25 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %24, align 8
  %26 = icmp eq %struct.VkSurfaceKHR_T** %25, null
  br i1 %26, label %39, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 2
  %29 = load i8, i8* %28, align 8
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %25, i64 %30
  %32 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %31, align 8
  %33 = icmp eq %struct.VkSurfaceKHR_T* %32, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %27
  %35 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)** %18, align 8
  %36 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %37 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %36, align 8
  %38 = tail call i32 %35(%struct.VkPhysicalDevice_T* %37, %struct.VkSurfaceKHR_T* nonnull %32, i32* %2, %struct.VkSurfaceFormatKHR* %3) #7
  br label %44

39:                                               ; preds = %27, %22
  %40 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)** %18, align 8
  %41 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %42 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %41, align 8
  %43 = tail call i32 %40(%struct.VkPhysicalDevice_T* %42, %struct.VkSurfaceKHR_T* %1, i32* %2, %struct.VkSurfaceFormatKHR* %3) #7
  br label %44

44:                                               ; preds = %34, %39, %13
  %45 = phi i32 [ 0, %13 ], [ %38, %34 ], [ %43, %39 ]
  ret i32 %45
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceSurfacePresentModesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkSurfaceKHR_T*, i32*, i32*) #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %7 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %6, align 8
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %9 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 33
  %11 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)** %10, align 8
  %12 = tail call i32 %11(%struct.VkPhysicalDevice_T* %7, %struct.VkSurfaceKHR_T* %1, i32* %2, i32* %3) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDeviceSurfacePresentModesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkSurfaceKHR_T*, i32*, i32*) local_unnamed_addr #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %6 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 1
  %7 = load %struct.loader_icd_term*, %struct.loader_icd_term** %6, align 8
  %8 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 1
  %9 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  %10 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %9, i64 0, i32 34
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0)) #7
  br label %44

14:                                               ; preds = %4
  %15 = icmp eq i32* %2, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %14
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.18, i64 0, i64 0)) #7
  br label %17

17:                                               ; preds = %16, %14
  %18 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 31
  %19 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)** %18, align 8
  %20 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.19, i64 0, i64 0)) #7
  br label %22

22:                                               ; preds = %21, %17
  %23 = bitcast %struct.VkSurfaceKHR_T* %1 to %struct.VkIcdSurface*
  %24 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %23, i64 0, i32 5
  %25 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %24, align 8
  %26 = icmp eq %struct.VkSurfaceKHR_T** %25, null
  br i1 %26, label %39, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 2
  %29 = load i8, i8* %28, align 8
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %25, i64 %30
  %32 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %31, align 8
  %33 = icmp eq %struct.VkSurfaceKHR_T* %32, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %27
  %35 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)** %18, align 8
  %36 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %37 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %36, align 8
  %38 = tail call i32 %35(%struct.VkPhysicalDevice_T* %37, %struct.VkSurfaceKHR_T* nonnull %32, i32* %2, i32* %3) #7
  br label %44

39:                                               ; preds = %27, %22
  %40 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)** %18, align 8
  %41 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %42 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %41, align 8
  %43 = tail call i32 %40(%struct.VkPhysicalDevice_T* %42, %struct.VkSurfaceKHR_T* %1, i32* %2, i32* %3) #7
  br label %44

44:                                               ; preds = %34, %39, %13
  %45 = phi i32 [ 0, %13 ], [ %38, %34 ], [ %43, %39 ]
  ret i32 %45
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateSwapchainKHR(%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**) #4 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 150
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkSwapchainCreateInfoKHR* %1, %struct.VkAllocationCallbacks* %2, %struct.VkSwapchainKHR_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_CreateSwapchainKHR(%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**) local_unnamed_addr #4 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.loader_device*, align 8
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #7
  store i32 0, i32* %5, align 4
  %8 = bitcast %struct.loader_device** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #7
  store %struct.loader_device* inttoptr (i64 -6148914691236517206 to %struct.loader_device*), %struct.loader_device** %6, align 8
  %9 = bitcast %struct.VkDevice_T* %0 to i8*
  %10 = call %struct.loader_icd_term* @loader_get_icd_and_device(i8* %9, %struct.loader_device** nonnull %6, i32* nonnull %5) #7
  %11 = icmp eq %struct.loader_icd_term* %10, null
  br i1 %11, label %42, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %10, i64 0, i32 4, i32 32
  %14 = load i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)** %13, align 8
  %15 = icmp eq i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)* %14, null
  br i1 %15, label %42, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.VkSwapchainCreateInfoKHR, %struct.VkSwapchainCreateInfoKHR* %1, i64 0, i32 3
  %18 = bitcast %struct.VkSurfaceKHR_T** %17 to %struct.VkIcdSurface**
  %19 = load %struct.VkIcdSurface*, %struct.VkIcdSurface** %18, align 8
  %20 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %19, i64 0, i32 5
  %21 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %20, align 8
  %22 = icmp eq %struct.VkSurfaceKHR_T** %21, null
  br i1 %22, label %40, label %23

23:                                               ; preds = %16
  %24 = load i32, i32* %5, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %21, i64 %25
  %27 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %26, align 8
  %28 = icmp eq %struct.VkSurfaceKHR_T* %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %23
  %30 = alloca %struct.VkSwapchainCreateInfoKHR, align 16
  %31 = bitcast %struct.VkSwapchainCreateInfoKHR* %30 to i8*
  %32 = bitcast %struct.VkSwapchainCreateInfoKHR* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %31, i8* align 8 %32, i64 104, i1 false)
  %33 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %20, align 8
  %34 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %33, i64 %25
  %35 = bitcast %struct.VkSurfaceKHR_T** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.VkSwapchainCreateInfoKHR, %struct.VkSwapchainCreateInfoKHR* %30, i64 0, i32 3
  %38 = bitcast %struct.VkSurfaceKHR_T** %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = call i32 %14(%struct.VkDevice_T* %0, %struct.VkSwapchainCreateInfoKHR* nonnull %30, %struct.VkAllocationCallbacks* %2, %struct.VkSwapchainKHR_T** %3) #7
  br label %42

40:                                               ; preds = %23, %16
  %41 = call i32 %14(%struct.VkDevice_T* %0, %struct.VkSwapchainCreateInfoKHR* %1, %struct.VkAllocationCallbacks* %2, %struct.VkSwapchainKHR_T** %3) #7
  br label %42

42:                                               ; preds = %4, %12, %29, %40
  %43 = phi i32 [ %39, %29 ], [ %41, %40 ], [ 0, %12 ], [ 0, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #7
  ret i32 %43
}

declare %struct.loader_icd_term* @loader_get_icd_and_device(i8*, %struct.loader_device**, i32*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define void @vkDestroySwapchainKHR(%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, %struct.VkAllocationCallbacks*) #4 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 151
  %7 = load void (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkSwapchainKHR_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetSwapchainImagesKHR(%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32*, %struct.VkImage_T**) #4 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 152
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32*, %struct.VkImage_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32*, %struct.VkImage_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkSwapchainKHR_T* %1, i32* %2, %struct.VkImage_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkAcquireNextImageKHR(%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i64, %struct.VkSemaphore_T*, %struct.VkFence_T*, i32*) #4 {
  %7 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %8 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %8, i64 0, i32 153
  %10 = load i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i64, %struct.VkSemaphore_T*, %struct.VkFence_T*, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i64, %struct.VkSemaphore_T*, %struct.VkFence_T*, i32*)** %9, align 8
  %11 = tail call i32 %10(%struct.VkDevice_T* %0, %struct.VkSwapchainKHR_T* %1, i64 %2, %struct.VkSemaphore_T* %3, %struct.VkFence_T* %4, i32* %5) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkQueuePresentKHR(%struct.VkQueue_T*, %struct.VkPresentInfoKHR*) #4 {
  %3 = bitcast %struct.VkQueue_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 154
  %6 = load i32 (%struct.VkQueue_T*, %struct.VkPresentInfoKHR*)*, i32 (%struct.VkQueue_T*, %struct.VkPresentInfoKHR*)** %5, align 8
  %7 = tail call i32 %6(%struct.VkQueue_T* %0, %struct.VkPresentInfoKHR* %1) #7
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateXcbSurfaceKHR(%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**) #4 {
  %5 = bitcast %struct.VkInstance_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %6 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %6, i64 0, i32 42
  %8 = load i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkInstance_T* %0, %struct.VkXcbSurfaceCreateInfoKHR* %1, %struct.VkAllocationCallbacks* %2, %struct.VkSurfaceKHR_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_CreateXcbSurfaceKHR(%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T** nocapture) local_unnamed_addr #4 {
  %5 = tail call %struct.loader_instance* @loader_get_instance(%struct.VkInstance_T* %0) #7
  %6 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 35
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %5, i32 8, i32 0, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.20, i64 0, i64 0)) #7
  br label %105

10:                                               ; preds = %4
  %11 = tail call i8* @loader_instance_heap_alloc(%struct.loader_instance* %5, i64 72, i32 1) #7
  %12 = icmp eq i8* %11, null
  br i1 %12, label %105, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds i8, i8* %11, i64 48
  %15 = bitcast i8* %14 to <4 x i32>*
  store <4 x i32> <i32 4, i32 24, i32 48, i32 72>, <4 x i32>* %15, align 8
  %16 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 13
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %18, 3
  %20 = tail call i8* @loader_instance_heap_alloc(%struct.loader_instance* %5, i64 %19, i32 1) #7
  %21 = getelementptr inbounds i8, i8* %11, i64 64
  %22 = bitcast i8* %21 to i8**
  store i8* %20, i8** %22, align 8
  %23 = icmp eq i8* %20, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %13
  tail call void @loader_instance_heap_free(%struct.loader_instance* %5, i8* nonnull %11) #7
  br label %105

25:                                               ; preds = %13
  %26 = load i32, i32* %16, align 8
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 %28, i1 false) #7
  %29 = bitcast i8* %11 to i32*
  store i32 3, i32* %29, align 8
  %30 = getelementptr inbounds %struct.VkXcbSurfaceCreateInfoKHR, %struct.VkXcbSurfaceCreateInfoKHR* %1, i64 0, i32 3
  %31 = bitcast %struct.xcb_connection_t** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds i8, i8* %11, i64 8
  %34 = bitcast i8* %33 to i64*
  store i64 %32, i64* %34, align 8
  %35 = getelementptr inbounds %struct.VkXcbSurfaceCreateInfoKHR, %struct.VkXcbSurfaceCreateInfoKHR* %1, i64 0, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds i8, i8* %11, i64 16
  %38 = bitcast i8* %37 to i32*
  store i32 %36, i32* %38, align 8
  %39 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 14
  %40 = load %struct.loader_icd_term*, %struct.loader_icd_term** %39, align 8
  %41 = icmp eq %struct.loader_icd_term* %40, null
  br i1 %41, label %69, label %42

42:                                               ; preds = %25
  %43 = bitcast i8* %21 to %struct.VkSurfaceKHR_T***
  br label %44

44:                                               ; preds = %42, %64
  %45 = phi %struct.loader_icd_term* [ %40, %42 ], [ %67, %64 ]
  %46 = phi i32 [ 0, %42 ], [ %66, %64 ]
  %47 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %45, i64 0, i32 0
  %48 = load %struct.loader_scanned_icd*, %struct.loader_scanned_icd** %47, align 8
  %49 = getelementptr inbounds %struct.loader_scanned_icd, %struct.loader_scanned_icd* %48, i64 0, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = icmp ugt i32 %50, 2
  br i1 %51, label %52, label %64

52:                                               ; preds = %44
  %53 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %45, i64 0, i32 4, i32 43
  %54 = load i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)** %53, align 8
  %55 = icmp eq i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* %54, null
  br i1 %55, label %64, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %45, i64 0, i32 3
  %58 = load %struct.VkInstance_T*, %struct.VkInstance_T** %57, align 8
  %59 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %43, align 8
  %60 = zext i32 %46 to i64
  %61 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %59, i64 %60
  %62 = tail call i32 %54(%struct.VkInstance_T* %58, %struct.VkXcbSurfaceCreateInfoKHR* %1, %struct.VkAllocationCallbacks* %2, %struct.VkSurfaceKHR_T** %61) #7
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %71

64:                                               ; preds = %56, %52, %44
  %65 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %45, i64 0, i32 5
  %66 = add i32 %46, 1
  %67 = load %struct.loader_icd_term*, %struct.loader_icd_term** %65, align 8
  %68 = icmp eq %struct.loader_icd_term* %67, null
  br i1 %68, label %69, label %44

69:                                               ; preds = %64, %25
  %70 = bitcast %struct.VkSurfaceKHR_T** %3 to i8**
  store i8* %11, i8** %70, align 8
  br label %105

71:                                               ; preds = %56
  %72 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %43, align 8
  %73 = icmp eq %struct.VkSurfaceKHR_T** %72, null
  br i1 %73, label %104, label %74

74:                                               ; preds = %71
  %75 = bitcast %struct.VkSurfaceKHR_T** %72 to i8*
  %76 = load %struct.loader_icd_term*, %struct.loader_icd_term** %39, align 8
  %77 = icmp eq %struct.loader_icd_term* %76, null
  br i1 %77, label %80, label %82

78:                                               ; preds = %97
  %79 = load i8*, i8** %22, align 8
  br label %80

80:                                               ; preds = %78, %74
  %81 = phi i8* [ %79, %78 ], [ %75, %74 ]
  tail call void @loader_instance_heap_free(%struct.loader_instance* %5, i8* %81) #7
  br label %104

82:                                               ; preds = %74, %101
  %83 = phi %struct.VkSurfaceKHR_T** [ %103, %101 ], [ %72, %74 ]
  %84 = phi %struct.loader_icd_term* [ %99, %101 ], [ %76, %74 ]
  %85 = phi i32 [ %102, %101 ], [ 0, %74 ]
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %83, i64 %86
  %88 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %87, align 8
  %89 = icmp eq %struct.VkSurfaceKHR_T* %88, null
  br i1 %89, label %97, label %90

90:                                               ; preds = %82
  %91 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %84, i64 0, i32 4, i32 27
  %92 = load void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)** %91, align 8
  %93 = icmp eq void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)* %92, null
  br i1 %93, label %97, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %84, i64 0, i32 3
  %96 = load %struct.VkInstance_T*, %struct.VkInstance_T** %95, align 8
  tail call void %92(%struct.VkInstance_T* %96, %struct.VkSurfaceKHR_T* nonnull %88, %struct.VkAllocationCallbacks* %2) #7
  br label %97

97:                                               ; preds = %90, %82, %94
  %98 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %84, i64 0, i32 5
  %99 = load %struct.loader_icd_term*, %struct.loader_icd_term** %98, align 8
  %100 = icmp eq %struct.loader_icd_term* %99, null
  br i1 %100, label %78, label %101

101:                                              ; preds = %97
  %102 = add i32 %85, 1
  %103 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %43, align 8
  br label %82

104:                                              ; preds = %71, %80
  tail call void @loader_instance_heap_free(%struct.loader_instance* %5, i8* nonnull %11) #7
  br label %105

105:                                              ; preds = %10, %24, %9, %69, %104
  %106 = phi i32 [ %62, %104 ], [ -7, %9 ], [ 0, %69 ], [ -1, %24 ], [ -1, %10 ]
  ret i32 %106
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceXcbPresentationSupportKHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32, %struct.xcb_connection_t*, i32) #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %7 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %6, align 8
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %9 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 43
  %11 = load i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)** %10, align 8
  %12 = tail call i32 %11(%struct.VkPhysicalDevice_T* %7, i32 %1, %struct.xcb_connection_t* %2, i32 %3) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDeviceXcbPresentationSupportKHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32, %struct.xcb_connection_t*, i32) local_unnamed_addr #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %6 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 1
  %7 = load %struct.loader_icd_term*, %struct.loader_icd_term** %6, align 8
  %8 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 1
  %9 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  %10 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %9, i64 0, i32 35
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.21, i64 0, i64 0)) #7
  br label %25

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 44
  %16 = load i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)** %15, align 8
  %17 = icmp eq i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)* %16, null
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.22, i64 0, i64 0)) #7
  %19 = load i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)** %15, align 8
  br label %20

20:                                               ; preds = %18, %14
  %21 = phi i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)* [ %19, %18 ], [ %16, %14 ]
  %22 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %23 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %22, align 8
  %24 = tail call i32 %21(%struct.VkPhysicalDevice_T* %23, i32 %1, %struct.xcb_connection_t* %2, i32 %3) #7
  br label %25

25:                                               ; preds = %20, %13
  %26 = phi i32 [ %24, %20 ], [ 0, %13 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vkCreateHeadlessSurfaceEXT(%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**) #4 {
  %5 = bitcast %struct.VkInstance_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %6 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %6, i64 0, i32 80
  %8 = load i32 (%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkInstance_T* %0, %struct.VkHeadlessSurfaceCreateInfoEXT* %1, %struct.VkAllocationCallbacks* %2, %struct.VkSurfaceKHR_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_CreateHeadlessSurfaceEXT(%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T** nocapture) local_unnamed_addr #4 {
  %5 = tail call %struct.loader_instance* @loader_get_instance(%struct.VkInstance_T* %0) #7
  %6 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 36
  %7 = load i8, i8* %6, align 2, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %5, i32 8, i32 0, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.23, i64 0, i64 0)) #7
  br label %96

10:                                               ; preds = %4
  %11 = tail call i8* @loader_instance_heap_alloc(%struct.loader_instance* %5, i64 72, i32 1) #7
  %12 = icmp eq i8* %11, null
  br i1 %12, label %96, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds i8, i8* %11, i64 48
  %15 = bitcast i8* %14 to <4 x i32>*
  store <4 x i32> <i32 4, i32 4, i32 48, i32 72>, <4 x i32>* %15, align 8
  %16 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 13
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %18, 3
  %20 = tail call i8* @loader_instance_heap_alloc(%struct.loader_instance* %5, i64 %19, i32 1) #7
  %21 = getelementptr inbounds i8, i8* %11, i64 64
  %22 = bitcast i8* %21 to i8**
  store i8* %20, i8** %22, align 8
  %23 = icmp eq i8* %20, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %13
  tail call void @loader_instance_heap_free(%struct.loader_instance* %5, i8* nonnull %11) #7
  br label %96

25:                                               ; preds = %13
  %26 = load i32, i32* %16, align 8
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 %28, i1 false) #7
  %29 = bitcast i8* %11 to i32*
  store i32 9, i32* %29, align 8
  %30 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 14
  %31 = load %struct.loader_icd_term*, %struct.loader_icd_term** %30, align 8
  %32 = icmp eq %struct.loader_icd_term* %31, null
  br i1 %32, label %60, label %33

33:                                               ; preds = %25
  %34 = bitcast i8* %21 to %struct.VkSurfaceKHR_T***
  br label %35

35:                                               ; preds = %33, %55
  %36 = phi %struct.loader_icd_term* [ %31, %33 ], [ %58, %55 ]
  %37 = phi i32 [ 0, %33 ], [ %57, %55 ]
  %38 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %36, i64 0, i32 0
  %39 = load %struct.loader_scanned_icd*, %struct.loader_scanned_icd** %38, align 8
  %40 = getelementptr inbounds %struct.loader_scanned_icd, %struct.loader_scanned_icd* %39, i64 0, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = icmp ugt i32 %41, 2
  br i1 %42, label %43, label %55

43:                                               ; preds = %35
  %44 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %36, i64 0, i32 4, i32 91
  %45 = load i32 (%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)** %44, align 8
  %46 = icmp eq i32 (%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* %45, null
  br i1 %46, label %55, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %36, i64 0, i32 3
  %49 = load %struct.VkInstance_T*, %struct.VkInstance_T** %48, align 8
  %50 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %34, align 8
  %51 = zext i32 %37 to i64
  %52 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %50, i64 %51
  %53 = tail call i32 %45(%struct.VkInstance_T* %49, %struct.VkHeadlessSurfaceCreateInfoEXT* %1, %struct.VkAllocationCallbacks* %2, %struct.VkSurfaceKHR_T** %52) #7
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %62

55:                                               ; preds = %47, %43, %35
  %56 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %36, i64 0, i32 5
  %57 = add i32 %37, 1
  %58 = load %struct.loader_icd_term*, %struct.loader_icd_term** %56, align 8
  %59 = icmp eq %struct.loader_icd_term* %58, null
  br i1 %59, label %60, label %35

60:                                               ; preds = %55, %25
  %61 = bitcast %struct.VkSurfaceKHR_T** %3 to i8**
  store i8* %11, i8** %61, align 8
  br label %96

62:                                               ; preds = %47
  %63 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %34, align 8
  %64 = icmp eq %struct.VkSurfaceKHR_T** %63, null
  br i1 %64, label %95, label %65

65:                                               ; preds = %62
  %66 = bitcast %struct.VkSurfaceKHR_T** %63 to i8*
  %67 = load %struct.loader_icd_term*, %struct.loader_icd_term** %30, align 8
  %68 = icmp eq %struct.loader_icd_term* %67, null
  br i1 %68, label %71, label %73

69:                                               ; preds = %88
  %70 = load i8*, i8** %22, align 8
  br label %71

71:                                               ; preds = %69, %65
  %72 = phi i8* [ %70, %69 ], [ %66, %65 ]
  tail call void @loader_instance_heap_free(%struct.loader_instance* %5, i8* %72) #7
  br label %95

73:                                               ; preds = %65, %92
  %74 = phi %struct.VkSurfaceKHR_T** [ %94, %92 ], [ %63, %65 ]
  %75 = phi %struct.loader_icd_term* [ %90, %92 ], [ %67, %65 ]
  %76 = phi i32 [ %93, %92 ], [ 0, %65 ]
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %74, i64 %77
  %79 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %78, align 8
  %80 = icmp eq %struct.VkSurfaceKHR_T* %79, null
  br i1 %80, label %88, label %81

81:                                               ; preds = %73
  %82 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %75, i64 0, i32 4, i32 27
  %83 = load void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)** %82, align 8
  %84 = icmp eq void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)* %83, null
  br i1 %84, label %88, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %75, i64 0, i32 3
  %87 = load %struct.VkInstance_T*, %struct.VkInstance_T** %86, align 8
  tail call void %83(%struct.VkInstance_T* %87, %struct.VkSurfaceKHR_T* nonnull %79, %struct.VkAllocationCallbacks* %2) #7
  br label %88

88:                                               ; preds = %81, %73, %85
  %89 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %75, i64 0, i32 5
  %90 = load %struct.loader_icd_term*, %struct.loader_icd_term** %89, align 8
  %91 = icmp eq %struct.loader_icd_term* %90, null
  br i1 %91, label %69, label %92

92:                                               ; preds = %88
  %93 = add i32 %76, 1
  %94 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %34, align 8
  br label %73

95:                                               ; preds = %62, %71
  tail call void @loader_instance_heap_free(%struct.loader_instance* %5, i8* nonnull %11) #7
  br label %96

96:                                               ; preds = %10, %24, %60, %95, %9
  %97 = phi i32 [ 0, %9 ], [ %53, %95 ], [ 0, %60 ], [ -1, %24 ], [ -1, %10 ]
  ret i32 %97
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceDisplayPropertiesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32*, %struct.VkDisplayPropertiesKHR*) #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 35
  %10 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)** %9, align 8
  %11 = tail call i32 %10(%struct.VkPhysicalDevice_T* %6, i32* %1, %struct.VkDisplayPropertiesKHR* %2) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDeviceDisplayPropertiesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32*, %struct.VkDisplayPropertiesKHR*) local_unnamed_addr #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %5 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 1
  %6 = load %struct.loader_icd_term*, %struct.loader_icd_term** %5, align 8
  %7 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 1
  %8 = load %struct.loader_instance*, %struct.loader_instance** %7, align 8
  %9 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 37
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %3
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %8, i32 8, i32 0, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.24, i64 0, i64 0)) #7
  br label %22

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 4, i32 35
  %15 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)** %14, align 8
  %16 = icmp eq i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)* %15, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  store i32 0, i32* %1, align 4
  br label %22

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %20 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %19, align 8
  %21 = tail call i32 %15(%struct.VkPhysicalDevice_T* %20, i32* %1, %struct.VkDisplayPropertiesKHR* %2) #7
  br label %22

22:                                               ; preds = %18, %17, %12
  %23 = phi i32 [ 0, %17 ], [ %21, %18 ], [ 0, %12 ]
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceDisplayPlanePropertiesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32*, %struct.VkDisplayPlanePropertiesKHR*) #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 36
  %10 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)** %9, align 8
  %11 = tail call i32 %10(%struct.VkPhysicalDevice_T* %6, i32* %1, %struct.VkDisplayPlanePropertiesKHR* %2) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDeviceDisplayPlanePropertiesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32*, %struct.VkDisplayPlanePropertiesKHR*) local_unnamed_addr #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %5 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 1
  %6 = load %struct.loader_icd_term*, %struct.loader_icd_term** %5, align 8
  %7 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 1
  %8 = load %struct.loader_instance*, %struct.loader_instance** %7, align 8
  %9 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 37
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %3
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %8, i32 8, i32 0, i8* getelementptr inbounds ([99 x i8], [99 x i8]* @.str.25, i64 0, i64 0)) #7
  br label %22

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 4, i32 36
  %15 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)** %14, align 8
  %16 = icmp eq i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)* %15, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  store i32 0, i32* %1, align 4
  br label %22

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %20 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %19, align 8
  %21 = tail call i32 %15(%struct.VkPhysicalDevice_T* %20, i32* %1, %struct.VkDisplayPlanePropertiesKHR* %2) #7
  br label %22

22:                                               ; preds = %18, %17, %12
  %23 = phi i32 [ 0, %17 ], [ %21, %18 ], [ 0, %12 ]
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetDisplayPlaneSupportedDisplaysKHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32, i32*, %struct.VkDisplayKHR_T**) #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %7 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %6, align 8
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %9 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 37
  %11 = load i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)** %10, align 8
  %12 = tail call i32 %11(%struct.VkPhysicalDevice_T* %7, i32 %1, i32* %2, %struct.VkDisplayKHR_T** %3) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetDisplayPlaneSupportedDisplaysKHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32, i32*, %struct.VkDisplayKHR_T**) local_unnamed_addr #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %6 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 1
  %7 = load %struct.loader_icd_term*, %struct.loader_icd_term** %6, align 8
  %8 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 1
  %9 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  %10 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %9, i64 0, i32 37
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.26, i64 0, i64 0)) #7
  br label %25

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 37
  %16 = load i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)** %15, align 8
  %17 = icmp eq i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)* %16, null
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.27, i64 0, i64 0)) #7
  %19 = load i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)** %15, align 8
  br label %20

20:                                               ; preds = %18, %14
  %21 = phi i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)* [ %19, %18 ], [ %16, %14 ]
  %22 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %23 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %22, align 8
  %24 = tail call i32 %21(%struct.VkPhysicalDevice_T* %23, i32 %1, i32* %2, %struct.VkDisplayKHR_T** %3) #7
  br label %25

25:                                               ; preds = %20, %13
  %26 = phi i32 [ %24, %20 ], [ 0, %13 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetDisplayModePropertiesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*) #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %7 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %6, align 8
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %9 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 38
  %11 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)** %10, align 8
  %12 = tail call i32 %11(%struct.VkPhysicalDevice_T* %7, %struct.VkDisplayKHR_T* %1, i32* %2, %struct.VkDisplayModePropertiesKHR* %3) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetDisplayModePropertiesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*) local_unnamed_addr #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %6 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 1
  %7 = load %struct.loader_icd_term*, %struct.loader_icd_term** %6, align 8
  %8 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 1
  %9 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  %10 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %9, i64 0, i32 37
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.28, i64 0, i64 0)) #7
  br label %25

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 38
  %16 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)** %15, align 8
  %17 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)* %16, null
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.29, i64 0, i64 0)) #7
  %19 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)** %15, align 8
  br label %20

20:                                               ; preds = %18, %14
  %21 = phi i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)* [ %19, %18 ], [ %16, %14 ]
  %22 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %23 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %22, align 8
  %24 = tail call i32 %21(%struct.VkPhysicalDevice_T* %23, %struct.VkDisplayKHR_T* %1, i32* %2, %struct.VkDisplayModePropertiesKHR* %3) #7
  br label %25

25:                                               ; preds = %20, %13
  %26 = phi i32 [ %24, %20 ], [ 0, %13 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateDisplayModeKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**) #4 {
  %6 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %7 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %6, i64 0, i32 2
  %8 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %7, align 8
  %9 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %10 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %9, align 8
  %11 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %10, i64 0, i32 39
  %12 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)** %11, align 8
  %13 = tail call i32 %12(%struct.VkPhysicalDevice_T* %8, %struct.VkDisplayKHR_T* %1, %struct.VkDisplayModeCreateInfoKHR* %2, %struct.VkAllocationCallbacks* %3, %struct.VkDisplayModeKHR_T** %4) #7
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_CreateDisplayModeKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**) local_unnamed_addr #4 {
  %6 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %7 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %6, i64 0, i32 1
  %8 = load %struct.loader_icd_term*, %struct.loader_icd_term** %7, align 8
  %9 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %8, i64 0, i32 1
  %10 = load %struct.loader_instance*, %struct.loader_instance** %9, align 8
  %11 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %10, i64 0, i32 37
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %5
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %10, i32 8, i32 0, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.30, i64 0, i64 0)) #7
  br label %26

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %8, i64 0, i32 4, i32 39
  %17 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)** %16, align 8
  %18 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)* %17, null
  br i1 %18, label %19, label %21

19:                                               ; preds = %15
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %10, i32 8, i32 0, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.31, i64 0, i64 0)) #7
  %20 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)** %16, align 8
  br label %21

21:                                               ; preds = %19, %15
  %22 = phi i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)* [ %20, %19 ], [ %17, %15 ]
  %23 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %6, i64 0, i32 3
  %24 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %23, align 8
  %25 = tail call i32 %22(%struct.VkPhysicalDevice_T* %24, %struct.VkDisplayKHR_T* %1, %struct.VkDisplayModeCreateInfoKHR* %2, %struct.VkAllocationCallbacks* %3, %struct.VkDisplayModeKHR_T** %4) #7
  br label %26

26:                                               ; preds = %21, %14
  %27 = phi i32 [ %25, %21 ], [ -7, %14 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetDisplayPlaneCapabilitiesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*) #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %7 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %6, align 8
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %9 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 40
  %11 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)** %10, align 8
  %12 = tail call i32 %11(%struct.VkPhysicalDevice_T* %7, %struct.VkDisplayModeKHR_T* %1, i32 %2, %struct.VkDisplayPlaneCapabilitiesKHR* %3) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetDisplayPlaneCapabilitiesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*) local_unnamed_addr #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %6 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 1
  %7 = load %struct.loader_icd_term*, %struct.loader_icd_term** %6, align 8
  %8 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 1
  %9 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  %10 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %9, i64 0, i32 37
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.32, i64 0, i64 0)) #7
  br label %25

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 40
  %16 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)** %15, align 8
  %17 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)* %16, null
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.33, i64 0, i64 0)) #7
  %19 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)** %15, align 8
  br label %20

20:                                               ; preds = %18, %14
  %21 = phi i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)* [ %19, %18 ], [ %16, %14 ]
  %22 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %23 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %22, align 8
  %24 = tail call i32 %21(%struct.VkPhysicalDevice_T* %23, %struct.VkDisplayModeKHR_T* %1, i32 %2, %struct.VkDisplayPlaneCapabilitiesKHR* %3) #7
  br label %25

25:                                               ; preds = %20, %13
  %26 = phi i32 [ %24, %20 ], [ 0, %13 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateDisplayPlaneSurfaceKHR(%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**) #4 {
  %5 = bitcast %struct.VkInstance_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %6 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %6, i64 0, i32 41
  %8 = load i32 (%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkInstance_T* %0, %struct.VkDisplaySurfaceCreateInfoKHR* %1, %struct.VkAllocationCallbacks* %2, %struct.VkSurfaceKHR_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_CreateDisplayPlaneSurfaceKHR(%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T** nocapture) local_unnamed_addr #4 {
  %5 = tail call %struct.loader_instance* @loader_get_instance(%struct.VkInstance_T* %0) #7
  %6 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 37
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %5, i32 8, i32 0, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.34, i64 0, i64 0)) #7
  br label %127

10:                                               ; preds = %4
  %11 = tail call i8* @loader_instance_heap_alloc(%struct.loader_instance* %5, i64 72, i32 1) #7
  %12 = icmp eq i8* %11, null
  br i1 %12, label %127, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds i8, i8* %11, i64 48
  %15 = bitcast i8* %14 to <4 x i32>*
  store <4 x i32> <i32 4, i32 48, i32 48, i32 72>, <4 x i32>* %15, align 8
  %16 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 13
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %18, 3
  %20 = tail call i8* @loader_instance_heap_alloc(%struct.loader_instance* %5, i64 %19, i32 1) #7
  %21 = getelementptr inbounds i8, i8* %11, i64 64
  %22 = bitcast i8* %21 to i8**
  store i8* %20, i8** %22, align 8
  %23 = icmp eq i8* %20, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %13
  tail call void @loader_instance_heap_free(%struct.loader_instance* %5, i8* nonnull %11) #7
  br label %127

25:                                               ; preds = %13
  %26 = load i32, i32* %16, align 8
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 %28, i1 false) #7
  %29 = bitcast i8* %11 to i32*
  store i32 8, i32* %29, align 8
  %30 = getelementptr inbounds %struct.VkDisplaySurfaceCreateInfoKHR, %struct.VkDisplaySurfaceCreateInfoKHR* %1, i64 0, i32 3
  %31 = bitcast %struct.VkDisplayModeKHR_T** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds i8, i8* %11, i64 8
  %34 = bitcast i8* %33 to i64*
  store i64 %32, i64* %34, align 8
  %35 = getelementptr inbounds %struct.VkDisplaySurfaceCreateInfoKHR, %struct.VkDisplaySurfaceCreateInfoKHR* %1, i64 0, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds i8, i8* %11, i64 16
  %38 = bitcast i8* %37 to i32*
  store i32 %36, i32* %38, align 8
  %39 = getelementptr inbounds %struct.VkDisplaySurfaceCreateInfoKHR, %struct.VkDisplaySurfaceCreateInfoKHR* %1, i64 0, i32 5
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds i8, i8* %11, i64 20
  %42 = bitcast i8* %41 to i32*
  store i32 %40, i32* %42, align 4
  %43 = getelementptr inbounds %struct.VkDisplaySurfaceCreateInfoKHR, %struct.VkDisplaySurfaceCreateInfoKHR* %1, i64 0, i32 6
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds i8, i8* %11, i64 24
  %46 = bitcast i8* %45 to i32*
  store i32 %44, i32* %46, align 8
  %47 = getelementptr inbounds %struct.VkDisplaySurfaceCreateInfoKHR, %struct.VkDisplaySurfaceCreateInfoKHR* %1, i64 0, i32 7
  %48 = bitcast float* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds i8, i8* %11, i64 28
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 4
  %52 = getelementptr inbounds %struct.VkDisplaySurfaceCreateInfoKHR, %struct.VkDisplaySurfaceCreateInfoKHR* %1, i64 0, i32 8
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds i8, i8* %11, i64 32
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 8
  %56 = getelementptr inbounds i8, i8* %11, i64 36
  %57 = getelementptr inbounds %struct.VkDisplaySurfaceCreateInfoKHR, %struct.VkDisplaySurfaceCreateInfoKHR* %1, i64 0, i32 9
  %58 = bitcast %struct.VkExtent2D* %57 to i64*
  %59 = bitcast i8* %56 to i64*
  %60 = load i64, i64* %58, align 4
  store i64 %60, i64* %59, align 4
  %61 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 14
  %62 = load %struct.loader_icd_term*, %struct.loader_icd_term** %61, align 8
  %63 = icmp eq %struct.loader_icd_term* %62, null
  br i1 %63, label %91, label %64

64:                                               ; preds = %25
  %65 = bitcast i8* %21 to %struct.VkSurfaceKHR_T***
  br label %66

66:                                               ; preds = %64, %86
  %67 = phi %struct.loader_icd_term* [ %62, %64 ], [ %89, %86 ]
  %68 = phi i32 [ 0, %64 ], [ %88, %86 ]
  %69 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %67, i64 0, i32 0
  %70 = load %struct.loader_scanned_icd*, %struct.loader_scanned_icd** %69, align 8
  %71 = getelementptr inbounds %struct.loader_scanned_icd, %struct.loader_scanned_icd* %70, i64 0, i32 3
  %72 = load i32, i32* %71, align 4
  %73 = icmp ugt i32 %72, 2
  br i1 %73, label %74, label %86

74:                                               ; preds = %66
  %75 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %67, i64 0, i32 4, i32 41
  %76 = load i32 (%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)** %75, align 8
  %77 = icmp eq i32 (%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* %76, null
  br i1 %77, label %86, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %67, i64 0, i32 3
  %80 = load %struct.VkInstance_T*, %struct.VkInstance_T** %79, align 8
  %81 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %65, align 8
  %82 = zext i32 %68 to i64
  %83 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %81, i64 %82
  %84 = tail call i32 %76(%struct.VkInstance_T* %80, %struct.VkDisplaySurfaceCreateInfoKHR* %1, %struct.VkAllocationCallbacks* %2, %struct.VkSurfaceKHR_T** %83) #7
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %93

86:                                               ; preds = %78, %74, %66
  %87 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %67, i64 0, i32 5
  %88 = add i32 %68, 1
  %89 = load %struct.loader_icd_term*, %struct.loader_icd_term** %87, align 8
  %90 = icmp eq %struct.loader_icd_term* %89, null
  br i1 %90, label %91, label %66

91:                                               ; preds = %86, %25
  %92 = bitcast %struct.VkSurfaceKHR_T** %3 to i8**
  store i8* %11, i8** %92, align 8
  br label %127

93:                                               ; preds = %78
  %94 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %65, align 8
  %95 = icmp eq %struct.VkSurfaceKHR_T** %94, null
  br i1 %95, label %126, label %96

96:                                               ; preds = %93
  %97 = bitcast %struct.VkSurfaceKHR_T** %94 to i8*
  %98 = load %struct.loader_icd_term*, %struct.loader_icd_term** %61, align 8
  %99 = icmp eq %struct.loader_icd_term* %98, null
  br i1 %99, label %102, label %104

100:                                              ; preds = %119
  %101 = load i8*, i8** %22, align 8
  br label %102

102:                                              ; preds = %100, %96
  %103 = phi i8* [ %101, %100 ], [ %97, %96 ]
  tail call void @loader_instance_heap_free(%struct.loader_instance* %5, i8* %103) #7
  br label %126

104:                                              ; preds = %96, %123
  %105 = phi %struct.VkSurfaceKHR_T** [ %125, %123 ], [ %94, %96 ]
  %106 = phi %struct.loader_icd_term* [ %121, %123 ], [ %98, %96 ]
  %107 = phi i32 [ %124, %123 ], [ 0, %96 ]
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %105, i64 %108
  %110 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %109, align 8
  %111 = icmp eq %struct.VkSurfaceKHR_T* %110, null
  br i1 %111, label %119, label %112

112:                                              ; preds = %104
  %113 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %106, i64 0, i32 4, i32 27
  %114 = load void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)** %113, align 8
  %115 = icmp eq void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)* %114, null
  br i1 %115, label %119, label %116

116:                                              ; preds = %112
  %117 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %106, i64 0, i32 3
  %118 = load %struct.VkInstance_T*, %struct.VkInstance_T** %117, align 8
  tail call void %114(%struct.VkInstance_T* %118, %struct.VkSurfaceKHR_T* nonnull %110, %struct.VkAllocationCallbacks* %2) #7
  br label %119

119:                                              ; preds = %112, %104, %116
  %120 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %106, i64 0, i32 5
  %121 = load %struct.loader_icd_term*, %struct.loader_icd_term** %120, align 8
  %122 = icmp eq %struct.loader_icd_term* %121, null
  br i1 %122, label %100, label %123

123:                                              ; preds = %119
  %124 = add i32 %107, 1
  %125 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %65, align 8
  br label %104

126:                                              ; preds = %93, %102
  tail call void @loader_instance_heap_free(%struct.loader_instance* %5, i8* nonnull %11) #7
  br label %127

127:                                              ; preds = %10, %24, %9, %91, %126
  %128 = phi i32 [ %84, %126 ], [ -7, %9 ], [ 0, %91 ], [ -1, %24 ], [ -1, %10 ]
  ret i32 %128
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateSharedSwapchainsKHR(%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**) #4 {
  %6 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 158
  %9 = load i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)** %8, align 8
  %10 = tail call i32 %9(%struct.VkDevice_T* %0, i32 %1, %struct.VkSwapchainCreateInfoKHR* %2, %struct.VkAllocationCallbacks* %3, %struct.VkSwapchainKHR_T** %4) #7
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_CreateSharedSwapchainsKHR(%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**) local_unnamed_addr #4 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.loader_device*, align 8
  %8 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #7
  store i32 0, i32* %6, align 4
  %9 = bitcast %struct.loader_device** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7
  store %struct.loader_device* inttoptr (i64 -6148914691236517206 to %struct.loader_device*), %struct.loader_device** %7, align 8
  %10 = bitcast %struct.VkDevice_T* %0 to i8*
  %11 = call %struct.loader_icd_term* @loader_get_icd_and_device(i8* %10, %struct.loader_device** nonnull %7, i32* nonnull %6) #7
  %12 = icmp eq %struct.loader_icd_term* %11, null
  br i1 %12, label %96, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %11, i64 0, i32 4, i32 42
  %15 = load i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)** %14, align 8
  %16 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)* %15, null
  br i1 %16, label %96, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.VkSwapchainCreateInfoKHR, %struct.VkSwapchainCreateInfoKHR* %2, i64 0, i32 3
  %19 = bitcast %struct.VkSurfaceKHR_T** %18 to %struct.VkIcdSurface**
  %20 = load %struct.VkIcdSurface*, %struct.VkIcdSurface** %19, align 8
  %21 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %20, i64 0, i32 5
  %22 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %21, align 8
  %23 = icmp eq %struct.VkSurfaceKHR_T** %22, null
  br i1 %23, label %94, label %24

24:                                               ; preds = %17
  %25 = load i32, i32* %6, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %22, i64 %26
  %28 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %27, align 8
  %29 = icmp eq %struct.VkSurfaceKHR_T* %28, null
  br i1 %29, label %94, label %30

30:                                               ; preds = %24
  %31 = zext i32 %1 to i64
  %32 = mul nuw nsw i64 %31, 104
  %33 = alloca %struct.VkSwapchainCreateInfoKHR, i64 %31, align 16
  %34 = bitcast %struct.VkSwapchainCreateInfoKHR* %33 to i8*
  %35 = bitcast %struct.VkSwapchainCreateInfoKHR* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %34, i8* align 8 %35, i64 %32, i1 false)
  %36 = icmp eq i32 %1, 0
  br i1 %36, label %58, label %37

37:                                               ; preds = %30
  %38 = add nsw i64 %31, -1
  %39 = and i64 %31, 3
  %40 = icmp ult i64 %38, 3
  br i1 %40, label %43, label %41

41:                                               ; preds = %37
  %42 = sub nsw i64 %31, %39
  br label %61

43:                                               ; preds = %61, %37
  %44 = phi i64 [ 0, %37 ], [ %91, %61 ]
  %45 = icmp eq i64 %39, 0
  br i1 %45, label %58, label %46

46:                                               ; preds = %43, %46
  %47 = phi i64 [ %55, %46 ], [ %44, %43 ]
  %48 = phi i64 [ %56, %46 ], [ %39, %43 ]
  %49 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %21, align 8
  %50 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %49, i64 %26
  %51 = bitcast %struct.VkSurfaceKHR_T** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.VkSwapchainCreateInfoKHR, %struct.VkSwapchainCreateInfoKHR* %33, i64 %47, i32 3
  %54 = bitcast %struct.VkSurfaceKHR_T** %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = add nuw nsw i64 %47, 1
  %56 = add i64 %48, -1
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %46, !llvm.loop !3

58:                                               ; preds = %43, %46, %30
  %59 = load i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)** %14, align 8
  %60 = call i32 %59(%struct.VkDevice_T* %0, i32 %1, %struct.VkSwapchainCreateInfoKHR* nonnull %33, %struct.VkAllocationCallbacks* %3, %struct.VkSwapchainKHR_T** %4) #7
  br label %96

61:                                               ; preds = %61, %41
  %62 = phi i64 [ 0, %41 ], [ %91, %61 ]
  %63 = phi i64 [ %42, %41 ], [ %92, %61 ]
  %64 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %21, align 8
  %65 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %64, i64 %26
  %66 = bitcast %struct.VkSurfaceKHR_T** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %struct.VkSwapchainCreateInfoKHR, %struct.VkSwapchainCreateInfoKHR* %33, i64 %62, i32 3
  %69 = bitcast %struct.VkSurfaceKHR_T** %68 to i64*
  store i64 %67, i64* %69, align 8
  %70 = or i64 %62, 1
  %71 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %21, align 8
  %72 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %71, i64 %26
  %73 = bitcast %struct.VkSurfaceKHR_T** %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %struct.VkSwapchainCreateInfoKHR, %struct.VkSwapchainCreateInfoKHR* %33, i64 %70, i32 3
  %76 = bitcast %struct.VkSurfaceKHR_T** %75 to i64*
  store i64 %74, i64* %76, align 8
  %77 = or i64 %62, 2
  %78 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %21, align 8
  %79 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %78, i64 %26
  %80 = bitcast %struct.VkSurfaceKHR_T** %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %struct.VkSwapchainCreateInfoKHR, %struct.VkSwapchainCreateInfoKHR* %33, i64 %77, i32 3
  %83 = bitcast %struct.VkSurfaceKHR_T** %82 to i64*
  store i64 %81, i64* %83, align 8
  %84 = or i64 %62, 3
  %85 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %21, align 8
  %86 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %85, i64 %26
  %87 = bitcast %struct.VkSurfaceKHR_T** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %struct.VkSwapchainCreateInfoKHR, %struct.VkSwapchainCreateInfoKHR* %33, i64 %84, i32 3
  %90 = bitcast %struct.VkSurfaceKHR_T** %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = add nuw nsw i64 %62, 4
  %92 = add i64 %63, -4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %43, label %61

94:                                               ; preds = %24, %17
  %95 = call i32 %15(%struct.VkDevice_T* %0, i32 %1, %struct.VkSwapchainCreateInfoKHR* %2, %struct.VkAllocationCallbacks* %3, %struct.VkSwapchainKHR_T** %4) #7
  br label %96

96:                                               ; preds = %5, %13, %58, %94
  %97 = phi i32 [ %60, %58 ], [ %95, %94 ], [ 0, %13 ], [ 0, %5 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #7
  ret i32 %97
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetDeviceGroupPresentCapabilitiesKHR(%struct.VkDevice_T*, %struct.VkDeviceGroupPresentCapabilitiesKHR*) #4 {
  %3 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 155
  %6 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceGroupPresentCapabilitiesKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceGroupPresentCapabilitiesKHR*)** %5, align 8
  %7 = tail call i32 %6(%struct.VkDevice_T* %0, %struct.VkDeviceGroupPresentCapabilitiesKHR* %1) #7
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetDeviceGroupSurfacePresentModesKHR(%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*) #4 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 156
  %7 = load i32 (%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, %struct.VkSurfaceKHR_T* %1, i32* %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetDeviceGroupSurfacePresentModesKHR(%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*) local_unnamed_addr #4 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.loader_device*, align 8
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #7
  store i32 0, i32* %4, align 4
  %7 = bitcast %struct.loader_device** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7
  store %struct.loader_device* inttoptr (i64 -6148914691236517206 to %struct.loader_device*), %struct.loader_device** %5, align 8
  %8 = bitcast %struct.VkDevice_T* %0 to i8*
  %9 = call %struct.loader_icd_term* @loader_get_icd_and_device(i8* %8, %struct.loader_device** nonnull %5, i32* nonnull %4) #7
  %10 = icmp eq %struct.loader_icd_term* %9, null
  br i1 %10, label %30, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %9, i64 0, i32 4, i32 33
  %13 = load i32 (%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*)** %12, align 8
  %14 = icmp eq i32 (%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*)* %13, null
  br i1 %14, label %30, label %15

15:                                               ; preds = %11
  %16 = bitcast %struct.VkSurfaceKHR_T* %1 to %struct.VkIcdSurface*
  %17 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %16, i64 0, i32 5
  %18 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %17, align 8
  %19 = icmp eq %struct.VkSurfaceKHR_T** %18, null
  br i1 %19, label %28, label %20

20:                                               ; preds = %15
  %21 = load i32, i32* %4, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %18, i64 %22
  %24 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %23, align 8
  %25 = icmp eq %struct.VkSurfaceKHR_T* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %20
  %27 = call i32 %13(%struct.VkDevice_T* %0, %struct.VkSurfaceKHR_T* nonnull %24, i32* %2) #7
  br label %30

28:                                               ; preds = %20, %15
  %29 = call i32 %13(%struct.VkDevice_T* %0, %struct.VkSurfaceKHR_T* %1, i32* %2) #7
  br label %30

30:                                               ; preds = %3, %11, %26, %28
  %31 = phi i32 [ %27, %26 ], [ %29, %28 ], [ 0, %11 ], [ 0, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #7
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDevicePresentRectanglesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*) #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %7 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %6, align 8
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %9 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 34
  %11 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)** %10, align 8
  %12 = tail call i32 %11(%struct.VkPhysicalDevice_T* %7, %struct.VkSurfaceKHR_T* %1, i32* %2, %struct.VkRect2D* %3) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDevicePresentRectanglesKHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*) local_unnamed_addr #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %6 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 1
  %7 = load %struct.loader_icd_term*, %struct.loader_icd_term** %6, align 8
  %8 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 34
  %9 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)** %8, align 8
  %10 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)* %9, null
  br i1 %10, label %11, label %14

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 1
  %13 = load %struct.loader_instance*, %struct.loader_instance** %12, align 8
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %13, i32 8, i32 0, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.35, i64 0, i64 0)) #7
  br label %14

14:                                               ; preds = %11, %4
  %15 = bitcast %struct.VkSurfaceKHR_T* %1 to %struct.VkIcdSurface*
  %16 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %15, i64 0, i32 5
  %17 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %16, align 8
  %18 = icmp eq %struct.VkSurfaceKHR_T** %17, null
  br i1 %18, label %31, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 2
  %21 = load i8, i8* %20, align 8
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %17, i64 %22
  %24 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %23, align 8
  %25 = icmp eq %struct.VkSurfaceKHR_T* %24, null
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)** %8, align 8
  %28 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %29 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %28, align 8
  %30 = tail call i32 %27(%struct.VkPhysicalDevice_T* %29, %struct.VkSurfaceKHR_T* nonnull %24, i32* %2, %struct.VkRect2D* %3) #7
  br label %36

31:                                               ; preds = %19, %14
  %32 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)** %8, align 8
  %33 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %34 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %33, align 8
  %35 = tail call i32 %32(%struct.VkPhysicalDevice_T* %34, %struct.VkSurfaceKHR_T* %1, i32* %2, %struct.VkRect2D* %3) #7
  br label %36

36:                                               ; preds = %31, %26
  %37 = phi i32 [ %30, %26 ], [ %35, %31 ]
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkAcquireNextImage2KHR(%struct.VkDevice_T*, %struct.VkAcquireNextImageInfoKHR*, i32*) #4 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 157
  %7 = load i32 (%struct.VkDevice_T*, %struct.VkAcquireNextImageInfoKHR*, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkAcquireNextImageInfoKHR*, i32*)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, %struct.VkAcquireNextImageInfoKHR* %1, i32* %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceDisplayProperties2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32*, %struct.VkDisplayProperties2KHR*) #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 61
  %10 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayProperties2KHR*)** %9, align 8
  %11 = tail call i32 %10(%struct.VkPhysicalDevice_T* %6, i32* %1, %struct.VkDisplayProperties2KHR* %2) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDeviceDisplayProperties2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32*, %struct.VkDisplayProperties2KHR*) local_unnamed_addr #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %5 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 1
  %6 = load %struct.loader_icd_term*, %struct.loader_icd_term** %5, align 8
  %7 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 4, i32 62
  %8 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayProperties2KHR*)** %7, align 8
  %9 = icmp eq i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayProperties2KHR*)* %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %12 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %11, align 8
  %13 = tail call i32 %8(%struct.VkPhysicalDevice_T* %12, i32* %1, %struct.VkDisplayProperties2KHR* %2) #7
  br label %57

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 1
  %16 = load %struct.loader_instance*, %struct.loader_instance** %15, align 8
  %17 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 0
  %18 = load %struct.loader_scanned_icd*, %struct.loader_scanned_icd** %17, align 8
  %19 = getelementptr inbounds %struct.loader_scanned_icd, %struct.loader_scanned_icd* %18, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %16, i32 1, i32 0, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.36, i64 0, i64 0), i8* %20) #7
  %21 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 4, i32 35
  %22 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)** %21, align 8
  %23 = icmp eq i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %14
  store i32 0, i32* %1, align 4
  br label %57

25:                                               ; preds = %14
  %26 = icmp eq %struct.VkDisplayProperties2KHR* %2, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %25
  %28 = load i32, i32* %1, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %27, %25
  %31 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %32 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %31, align 8
  %33 = tail call i32 %22(%struct.VkPhysicalDevice_T* %32, i32* %1, %struct.VkDisplayPropertiesKHR* null) #7
  br label %57

34:                                               ; preds = %27
  %35 = zext i32 %28 to i64
  %36 = mul nuw nsw i64 %35, 48
  %37 = alloca %struct.VkDisplayPropertiesKHR, i64 %35, align 16
  %38 = bitcast %struct.VkDisplayPropertiesKHR* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 %36, i1 false)
  %39 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)** %21, align 8
  %40 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %41 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %40, align 8
  %42 = call i32 %39(%struct.VkPhysicalDevice_T* %41, i32* %1, %struct.VkDisplayPropertiesKHR* nonnull %37) #7
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %57, label %44

44:                                               ; preds = %34
  %45 = load i32, i32* %1, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %57, label %47

47:                                               ; preds = %44, %47
  %48 = phi i64 [ %53, %47 ], [ 0, %44 ]
  %49 = getelementptr inbounds %struct.VkDisplayProperties2KHR, %struct.VkDisplayProperties2KHR* %2, i64 %48, i32 2
  %50 = bitcast %struct.VkDisplayPropertiesKHR* %49 to i8*
  %51 = getelementptr inbounds %struct.VkDisplayPropertiesKHR, %struct.VkDisplayPropertiesKHR* %37, i64 %48
  %52 = bitcast %struct.VkDisplayPropertiesKHR* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 16 %52, i64 48, i1 false)
  %53 = add nuw nsw i64 %48, 1
  %54 = load i32, i32* %1, align 4
  %55 = zext i32 %54 to i64
  %56 = icmp ult i64 %53, %55
  br i1 %56, label %47, label %57

57:                                               ; preds = %47, %44, %34, %30, %24, %10
  %58 = phi i32 [ %13, %10 ], [ 0, %24 ], [ %33, %30 ], [ %42, %34 ], [ %42, %44 ], [ %42, %47 ]
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceDisplayPlaneProperties2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32*, %struct.VkDisplayPlaneProperties2KHR*) #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 62
  %10 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlaneProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlaneProperties2KHR*)** %9, align 8
  %11 = tail call i32 %10(%struct.VkPhysicalDevice_T* %6, i32* %1, %struct.VkDisplayPlaneProperties2KHR* %2) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDeviceDisplayPlaneProperties2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, i32*, %struct.VkDisplayPlaneProperties2KHR*) local_unnamed_addr #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %5 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 1
  %6 = load %struct.loader_icd_term*, %struct.loader_icd_term** %5, align 8
  %7 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 4, i32 63
  %8 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlaneProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlaneProperties2KHR*)** %7, align 8
  %9 = icmp eq i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlaneProperties2KHR*)* %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %12 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %11, align 8
  %13 = tail call i32 %8(%struct.VkPhysicalDevice_T* %12, i32* %1, %struct.VkDisplayPlaneProperties2KHR* %2) #7
  br label %57

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 1
  %16 = load %struct.loader_instance*, %struct.loader_instance** %15, align 8
  %17 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 0
  %18 = load %struct.loader_scanned_icd*, %struct.loader_scanned_icd** %17, align 8
  %19 = getelementptr inbounds %struct.loader_scanned_icd, %struct.loader_scanned_icd* %18, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %16, i32 1, i32 0, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.37, i64 0, i64 0), i8* %20) #7
  %21 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 4, i32 36
  %22 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)** %21, align 8
  %23 = icmp eq i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %14
  store i32 0, i32* %1, align 4
  br label %57

25:                                               ; preds = %14
  %26 = icmp eq %struct.VkDisplayPlaneProperties2KHR* %2, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %25
  %28 = load i32, i32* %1, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %27, %25
  %31 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %32 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %31, align 8
  %33 = tail call i32 %22(%struct.VkPhysicalDevice_T* %32, i32* %1, %struct.VkDisplayPlanePropertiesKHR* null) #7
  br label %57

34:                                               ; preds = %27
  %35 = zext i32 %28 to i64
  %36 = shl nuw nsw i64 %35, 4
  %37 = alloca %struct.VkDisplayPlanePropertiesKHR, i64 %35, align 16
  %38 = bitcast %struct.VkDisplayPlanePropertiesKHR* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 %36, i1 false)
  %39 = load i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)** %21, align 8
  %40 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %41 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %40, align 8
  %42 = call i32 %39(%struct.VkPhysicalDevice_T* %41, i32* %1, %struct.VkDisplayPlanePropertiesKHR* nonnull %37) #7
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %57, label %44

44:                                               ; preds = %34
  %45 = load i32, i32* %1, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %57, label %47

47:                                               ; preds = %44, %47
  %48 = phi i64 [ %53, %47 ], [ 0, %44 ]
  %49 = getelementptr inbounds %struct.VkDisplayPlaneProperties2KHR, %struct.VkDisplayPlaneProperties2KHR* %2, i64 %48, i32 2
  %50 = bitcast %struct.VkDisplayPlanePropertiesKHR* %49 to i8*
  %51 = getelementptr inbounds %struct.VkDisplayPlanePropertiesKHR, %struct.VkDisplayPlanePropertiesKHR* %37, i64 %48
  %52 = bitcast %struct.VkDisplayPlanePropertiesKHR* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 16 %52, i64 16, i1 false)
  %53 = add nuw nsw i64 %48, 1
  %54 = load i32, i32* %1, align 4
  %55 = zext i32 %54 to i64
  %56 = icmp ult i64 %53, %55
  br i1 %56, label %47, label %57

57:                                               ; preds = %47, %44, %34, %30, %24, %10
  %58 = phi i32 [ %13, %10 ], [ 0, %24 ], [ %33, %30 ], [ %42, %34 ], [ %42, %44 ], [ %42, %47 ]
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetDisplayModeProperties2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*) #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %7 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %6, align 8
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %9 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 63
  %11 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*)** %10, align 8
  %12 = tail call i32 %11(%struct.VkPhysicalDevice_T* %7, %struct.VkDisplayKHR_T* %1, i32* %2, %struct.VkDisplayModeProperties2KHR* %3) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetDisplayModeProperties2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*) local_unnamed_addr #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %6 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 1
  %7 = load %struct.loader_icd_term*, %struct.loader_icd_term** %6, align 8
  %8 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 64
  %9 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*)** %8, align 8
  %10 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*)* %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %13 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %12, align 8
  %14 = tail call i32 %9(%struct.VkPhysicalDevice_T* %13, %struct.VkDisplayKHR_T* %1, i32* %2, %struct.VkDisplayModeProperties2KHR* %3) #7
  br label %58

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 1
  %17 = load %struct.loader_instance*, %struct.loader_instance** %16, align 8
  %18 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 0
  %19 = load %struct.loader_scanned_icd*, %struct.loader_scanned_icd** %18, align 8
  %20 = getelementptr inbounds %struct.loader_scanned_icd, %struct.loader_scanned_icd* %19, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %17, i32 1, i32 0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.38, i64 0, i64 0), i8* %21) #7
  %22 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 38
  %23 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)** %22, align 8
  %24 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)* %23, null
  br i1 %24, label %25, label %26

25:                                               ; preds = %15
  store i32 0, i32* %2, align 4
  br label %58

26:                                               ; preds = %15
  %27 = icmp eq %struct.VkDisplayModeProperties2KHR* %3, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %26
  %29 = load i32, i32* %2, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %35

31:                                               ; preds = %28, %26
  %32 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %33 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %32, align 8
  %34 = tail call i32 %23(%struct.VkPhysicalDevice_T* %33, %struct.VkDisplayKHR_T* %1, i32* %2, %struct.VkDisplayModePropertiesKHR* null) #7
  br label %58

35:                                               ; preds = %28
  %36 = zext i32 %29 to i64
  %37 = mul nuw nsw i64 %36, 24
  %38 = alloca %struct.VkDisplayModePropertiesKHR, i64 %36, align 16
  %39 = bitcast %struct.VkDisplayModePropertiesKHR* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %39, i8 -86, i64 %37, i1 false)
  %40 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)** %22, align 8
  %41 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %42 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %41, align 8
  %43 = call i32 %40(%struct.VkPhysicalDevice_T* %42, %struct.VkDisplayKHR_T* %1, i32* %2, %struct.VkDisplayModePropertiesKHR* nonnull %38) #7
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %58, label %45

45:                                               ; preds = %35
  %46 = load i32, i32* %2, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %58, label %48

48:                                               ; preds = %45, %48
  %49 = phi i64 [ %54, %48 ], [ 0, %45 ]
  %50 = getelementptr inbounds %struct.VkDisplayModeProperties2KHR, %struct.VkDisplayModeProperties2KHR* %3, i64 %49, i32 2
  %51 = bitcast %struct.VkDisplayModePropertiesKHR* %50 to i8*
  %52 = getelementptr inbounds %struct.VkDisplayModePropertiesKHR, %struct.VkDisplayModePropertiesKHR* %38, i64 %49
  %53 = bitcast %struct.VkDisplayModePropertiesKHR* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %53, i64 24, i1 false)
  %54 = add nuw nsw i64 %49, 1
  %55 = load i32, i32* %2, align 4
  %56 = zext i32 %55 to i64
  %57 = icmp ult i64 %54, %56
  br i1 %57, label %48, label %58

58:                                               ; preds = %48, %45, %35, %31, %25, %11
  %59 = phi i32 [ %14, %11 ], [ 0, %25 ], [ %34, %31 ], [ %43, %35 ], [ %43, %45 ], [ %43, %48 ]
  ret i32 %59
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetDisplayPlaneCapabilities2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*) #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 64
  %10 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*)** %9, align 8
  %11 = tail call i32 %10(%struct.VkPhysicalDevice_T* %6, %struct.VkDisplayPlaneInfo2KHR* %1, %struct.VkDisplayPlaneCapabilities2KHR* %2) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetDisplayPlaneCapabilities2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*) local_unnamed_addr #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %5 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 1
  %6 = load %struct.loader_icd_term*, %struct.loader_icd_term** %5, align 8
  %7 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 4, i32 65
  %8 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*)** %7, align 8
  %9 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*)* %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %12 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %11, align 8
  %13 = tail call i32 %8(%struct.VkPhysicalDevice_T* %12, %struct.VkDisplayPlaneInfo2KHR* %1, %struct.VkDisplayPlaneCapabilities2KHR* %2) #7
  br label %31

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 1
  %16 = load %struct.loader_instance*, %struct.loader_instance** %15, align 8
  %17 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 0
  %18 = load %struct.loader_scanned_icd*, %struct.loader_scanned_icd** %17, align 8
  %19 = getelementptr inbounds %struct.loader_scanned_icd, %struct.loader_scanned_icd* %18, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %16, i32 1, i32 0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.39, i64 0, i64 0), i8* %20) #7
  %21 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %6, i64 0, i32 4, i32 40
  %22 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)** %21, align 8
  %23 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %4, i64 0, i32 3
  %24 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %23, align 8
  %25 = getelementptr inbounds %struct.VkDisplayPlaneInfo2KHR, %struct.VkDisplayPlaneInfo2KHR* %1, i64 0, i32 2
  %26 = load %struct.VkDisplayModeKHR_T*, %struct.VkDisplayModeKHR_T** %25, align 8
  %27 = getelementptr inbounds %struct.VkDisplayPlaneInfo2KHR, %struct.VkDisplayPlaneInfo2KHR* %1, i64 0, i32 3
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.VkDisplayPlaneCapabilities2KHR, %struct.VkDisplayPlaneCapabilities2KHR* %2, i64 0, i32 2
  %30 = tail call i32 %22(%struct.VkPhysicalDevice_T* %24, %struct.VkDisplayModeKHR_T* %26, i32 %28, %struct.VkDisplayPlaneCapabilitiesKHR* %29) #7
  br label %31

31:                                               ; preds = %14, %10
  %32 = phi i32 [ %13, %10 ], [ %30, %14 ]
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceSurfaceCapabilities2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*) #4 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 59
  %10 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)** %9, align 8
  %11 = tail call i32 %10(%struct.VkPhysicalDevice_T* %6, %struct.VkPhysicalDeviceSurfaceInfo2KHR* %1, %struct.VkSurfaceCapabilities2KHR* %2) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDeviceSurfaceCapabilities2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*) local_unnamed_addr #4 {
  %4 = alloca %struct.VkPhysicalDeviceSurfaceInfo2KHR, align 8
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %6 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 1
  %7 = load %struct.loader_icd_term*, %struct.loader_icd_term** %6, align 8
  %8 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 1
  %9 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  %10 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %9, i64 0, i32 34
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 8, i32 0, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.40, i64 0, i64 0)) #7
  br label %99

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.VkPhysicalDeviceSurfaceInfo2KHR, %struct.VkPhysicalDeviceSurfaceInfo2KHR* %1, i64 0, i32 2
  %16 = bitcast %struct.VkSurfaceKHR_T** %15 to %struct.VkIcdSurface**
  %17 = load %struct.VkIcdSurface*, %struct.VkIcdSurface** %16, align 8
  %18 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 2
  %19 = load i8, i8* %18, align 8
  %20 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 60
  %21 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)** %20, align 8
  %22 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)* %21, null
  br i1 %22, label %65, label %23

23:                                               ; preds = %14
  %24 = getelementptr inbounds %struct.VkSurfaceCapabilities2KHR, %struct.VkSurfaceCapabilities2KHR* %2, i64 0, i32 1
  %25 = bitcast i8** %24 to %struct.VkBaseOutStructure**
  %26 = load %struct.VkBaseOutStructure*, %struct.VkBaseOutStructure** %25, align 8
  %27 = icmp eq %struct.VkBaseOutStructure* %26, null
  br i1 %27, label %39, label %28

28:                                               ; preds = %23, %35
  %29 = phi %struct.VkBaseOutStructure* [ %37, %35 ], [ %26, %23 ]
  %30 = getelementptr inbounds %struct.VkBaseOutStructure, %struct.VkBaseOutStructure* %29, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 1000239000
  br i1 %32, label %33, label %35

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.VkBaseOutStructure, %struct.VkBaseOutStructure* %29, i64 1, i32 0
  store i32 0, i32* %34, align 8
  br label %35

35:                                               ; preds = %33, %28
  %36 = getelementptr inbounds %struct.VkBaseOutStructure, %struct.VkBaseOutStructure* %29, i64 0, i32 1
  %37 = load %struct.VkBaseOutStructure*, %struct.VkBaseOutStructure** %36, align 8
  %38 = icmp eq %struct.VkBaseOutStructure* %37, null
  br i1 %38, label %39, label %28

39:                                               ; preds = %35, %23
  %40 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %17, i64 0, i32 5
  %41 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %40, align 8
  %42 = icmp eq %struct.VkSurfaceKHR_T** %41, null
  br i1 %42, label %60, label %43

43:                                               ; preds = %39
  %44 = zext i8 %19 to i64
  %45 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %41, i64 %44
  %46 = bitcast %struct.VkSurfaceKHR_T** %45 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %60, label %49

49:                                               ; preds = %43
  %50 = bitcast %struct.VkPhysicalDeviceSurfaceInfo2KHR* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %50) #7
  %51 = bitcast %struct.VkPhysicalDeviceSurfaceInfo2KHR* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %50, i8* align 8 %51, i64 24, i1 false)
  %52 = bitcast %struct.VkSurfaceKHR_T** %45 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.VkPhysicalDeviceSurfaceInfo2KHR, %struct.VkPhysicalDeviceSurfaceInfo2KHR* %4, i64 0, i32 2
  %55 = bitcast %struct.VkSurfaceKHR_T** %54 to i64*
  store i64 %53, i64* %55, align 8
  %56 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)** %20, align 8
  %57 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %58 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %57, align 8
  %59 = call i32 %56(%struct.VkPhysicalDevice_T* %58, %struct.VkPhysicalDeviceSurfaceInfo2KHR* nonnull %4, %struct.VkSurfaceCapabilities2KHR* %2) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %50) #7
  br label %99

60:                                               ; preds = %43, %39
  %61 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)** %20, align 8
  %62 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %63 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %62, align 8
  %64 = tail call i32 %61(%struct.VkPhysicalDevice_T* %63, %struct.VkPhysicalDeviceSurfaceInfo2KHR* %1, %struct.VkSurfaceCapabilities2KHR* %2) #7
  br label %99

65:                                               ; preds = %14
  %66 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 0
  %67 = load %struct.loader_scanned_icd*, %struct.loader_scanned_icd** %66, align 8
  %68 = getelementptr inbounds %struct.loader_scanned_icd, %struct.loader_scanned_icd* %67, i64 0, i32 0
  %69 = load i8*, i8** %68, align 8
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %9, i32 1, i32 0, i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str.41, i64 0, i64 0), i8* %69) #7
  %70 = getelementptr inbounds %struct.VkPhysicalDeviceSurfaceInfo2KHR, %struct.VkPhysicalDeviceSurfaceInfo2KHR* %1, i64 0, i32 1
  %71 = load i8*, i8** %70, align 8
  %72 = icmp eq i8* %71, null
  br i1 %72, label %75, label %73

73:                                               ; preds = %65
  %74 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %74, i32 2, i32 0, i8* getelementptr inbounds ([141 x i8], [141 x i8]* @.str.42, i64 0, i64 0)) #7
  br label %75

75:                                               ; preds = %65, %73
  %76 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %15, align 8
  %77 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %17, i64 0, i32 5
  %78 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %77, align 8
  %79 = icmp eq %struct.VkSurfaceKHR_T** %78, null
  br i1 %79, label %86, label %80

80:                                               ; preds = %75
  %81 = zext i8 %19 to i64
  %82 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %78, i64 %81
  %83 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %82, align 8
  %84 = icmp eq %struct.VkSurfaceKHR_T* %83, null
  %85 = select i1 %84, %struct.VkSurfaceKHR_T* %76, %struct.VkSurfaceKHR_T* %83
  br label %86

86:                                               ; preds = %80, %75
  %87 = phi %struct.VkSurfaceKHR_T* [ %76, %75 ], [ %85, %80 ]
  %88 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %7, i64 0, i32 4, i32 29
  %89 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)** %88, align 8
  %90 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %5, i64 0, i32 3
  %91 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %90, align 8
  %92 = getelementptr inbounds %struct.VkSurfaceCapabilities2KHR, %struct.VkSurfaceCapabilities2KHR* %2, i64 0, i32 2
  %93 = tail call i32 %89(%struct.VkPhysicalDevice_T* %91, %struct.VkSurfaceKHR_T* %87, %struct.VkSurfaceCapabilitiesKHR* %92) #7
  %94 = getelementptr inbounds %struct.VkSurfaceCapabilities2KHR, %struct.VkSurfaceCapabilities2KHR* %2, i64 0, i32 1
  %95 = load i8*, i8** %94, align 8
  %96 = icmp eq i8* %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %86
  %98 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %98, i32 2, i32 0, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.43, i64 0, i64 0)) #7
  br label %99

99:                                               ; preds = %60, %49, %86, %97, %13
  %100 = phi i32 [ 0, %13 ], [ %59, %49 ], [ %64, %60 ], [ %93, %86 ], [ %93, %97 ]
  ret i32 %100
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceSurfaceFormats2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*) #4 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %7 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %6, align 8
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %9 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 60
  %11 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*)** %10, align 8
  %12 = tail call i32 %11(%struct.VkPhysicalDevice_T* %7, %struct.VkPhysicalDeviceSurfaceInfo2KHR* %1, i32* %2, %struct.VkSurfaceFormat2KHR* %3) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @terminator_GetPhysicalDeviceSurfaceFormats2KHR(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*) local_unnamed_addr #4 {
  %5 = alloca %struct.VkPhysicalDeviceSurfaceInfo2KHR, align 8
  %6 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_term*
  %7 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %6, i64 0, i32 1
  %8 = load %struct.loader_icd_term*, %struct.loader_icd_term** %7, align 8
  %9 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %8, i64 0, i32 1
  %10 = load %struct.loader_instance*, %struct.loader_instance** %9, align 8
  %11 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %10, i64 0, i32 34
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %4
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %10, i32 8, i32 0, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.44, i64 0, i64 0)) #7
  br label %111

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.VkPhysicalDeviceSurfaceInfo2KHR, %struct.VkPhysicalDeviceSurfaceInfo2KHR* %1, i64 0, i32 2
  %17 = bitcast %struct.VkSurfaceKHR_T** %16 to %struct.VkIcdSurface**
  %18 = load %struct.VkIcdSurface*, %struct.VkIcdSurface** %17, align 8
  %19 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %6, i64 0, i32 2
  %20 = load i8, i8* %19, align 8
  %21 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %8, i64 0, i32 4, i32 61
  %22 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*)** %21, align 8
  %23 = icmp eq i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*)* %22, null
  br i1 %23, label %48, label %24

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %18, i64 0, i32 5
  %26 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %25, align 8
  %27 = icmp eq %struct.VkSurfaceKHR_T** %26, null
  br i1 %27, label %44, label %28

28:                                               ; preds = %24
  %29 = zext i8 %20 to i64
  %30 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %26, i64 %29
  %31 = bitcast %struct.VkSurfaceKHR_T** %30 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %44, label %34

34:                                               ; preds = %28
  %35 = bitcast %struct.VkPhysicalDeviceSurfaceInfo2KHR* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #7
  %36 = bitcast %struct.VkPhysicalDeviceSurfaceInfo2KHR* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %35, i8* align 8 %36, i64 24, i1 false)
  %37 = bitcast %struct.VkSurfaceKHR_T** %30 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.VkPhysicalDeviceSurfaceInfo2KHR, %struct.VkPhysicalDeviceSurfaceInfo2KHR* %5, i64 0, i32 2
  %40 = bitcast %struct.VkSurfaceKHR_T** %39 to i64*
  store i64 %38, i64* %40, align 8
  %41 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %6, i64 0, i32 3
  %42 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %41, align 8
  %43 = call i32 %22(%struct.VkPhysicalDevice_T* %42, %struct.VkPhysicalDeviceSurfaceInfo2KHR* nonnull %5, i32* %2, %struct.VkSurfaceFormat2KHR* %3) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #7
  br label %111

44:                                               ; preds = %28, %24
  %45 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %6, i64 0, i32 3
  %46 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %45, align 8
  %47 = tail call i32 %22(%struct.VkPhysicalDevice_T* %46, %struct.VkPhysicalDeviceSurfaceInfo2KHR* %1, i32* %2, %struct.VkSurfaceFormat2KHR* %3) #7
  br label %111

48:                                               ; preds = %15
  %49 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %8, i64 0, i32 0
  %50 = load %struct.loader_scanned_icd*, %struct.loader_scanned_icd** %49, align 8
  %51 = getelementptr inbounds %struct.loader_scanned_icd, %struct.loader_scanned_icd* %50, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %10, i32 1, i32 0, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.45, i64 0, i64 0), i8* %52) #7
  %53 = getelementptr inbounds %struct.VkPhysicalDeviceSurfaceInfo2KHR, %struct.VkPhysicalDeviceSurfaceInfo2KHR* %1, i64 0, i32 1
  %54 = load i8*, i8** %53, align 8
  %55 = icmp eq i8* %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %48
  %57 = load %struct.loader_instance*, %struct.loader_instance** %9, align 8
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %57, i32 2, i32 0, i8* getelementptr inbounds ([136 x i8], [136 x i8]* @.str.46, i64 0, i64 0)) #7
  br label %58

58:                                               ; preds = %48, %56
  %59 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %16, align 8
  %60 = getelementptr inbounds %struct.VkIcdSurface, %struct.VkIcdSurface* %18, i64 0, i32 5
  %61 = load %struct.VkSurfaceKHR_T**, %struct.VkSurfaceKHR_T*** %60, align 8
  %62 = icmp eq %struct.VkSurfaceKHR_T** %61, null
  br i1 %62, label %69, label %63

63:                                               ; preds = %58
  %64 = zext i8 %20 to i64
  %65 = getelementptr inbounds %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %61, i64 %64
  %66 = load %struct.VkSurfaceKHR_T*, %struct.VkSurfaceKHR_T** %65, align 8
  %67 = icmp eq %struct.VkSurfaceKHR_T* %66, null
  %68 = select i1 %67, %struct.VkSurfaceKHR_T* %59, %struct.VkSurfaceKHR_T* %66
  br label %69

69:                                               ; preds = %63, %58
  %70 = phi %struct.VkSurfaceKHR_T* [ %59, %58 ], [ %68, %63 ]
  %71 = load i32, i32* %2, align 4
  %72 = icmp eq i32 %71, 0
  %73 = icmp eq %struct.VkSurfaceFormat2KHR* %3, null
  %74 = or i1 %73, %72
  br i1 %74, label %75, label %81

75:                                               ; preds = %69
  %76 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %8, i64 0, i32 4, i32 30
  %77 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)** %76, align 8
  %78 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %6, i64 0, i32 3
  %79 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %78, align 8
  %80 = tail call i32 %77(%struct.VkPhysicalDevice_T* %79, %struct.VkSurfaceKHR_T* %70, i32* %2, %struct.VkSurfaceFormatKHR* null) #7
  br label %111

81:                                               ; preds = %69
  %82 = zext i32 %71 to i64
  %83 = shl nuw nsw i64 %82, 3
  %84 = alloca %struct.VkSurfaceFormatKHR, i64 %82, align 16
  %85 = bitcast %struct.VkSurfaceFormatKHR* %84 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %85, i8 -86, i64 %83, i1 false)
  %86 = getelementptr inbounds %struct.loader_icd_term, %struct.loader_icd_term* %8, i64 0, i32 4, i32 30
  %87 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)** %86, align 8
  %88 = getelementptr inbounds %struct.loader_physical_device_term, %struct.loader_physical_device_term* %6, i64 0, i32 3
  %89 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %88, align 8
  %90 = call i32 %87(%struct.VkPhysicalDevice_T* %89, %struct.VkSurfaceKHR_T* %70, i32* %2, %struct.VkSurfaceFormatKHR* nonnull %84) #7
  %91 = load i32, i32* %2, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %111, label %93

93:                                               ; preds = %81, %106
  %94 = phi i64 [ %107, %106 ], [ 0, %81 ]
  %95 = getelementptr inbounds %struct.VkSurfaceFormat2KHR, %struct.VkSurfaceFormat2KHR* %3, i64 %94, i32 2
  %96 = getelementptr inbounds %struct.VkSurfaceFormatKHR, %struct.VkSurfaceFormatKHR* %84, i64 %94
  %97 = bitcast %struct.VkSurfaceFormatKHR* %96 to i64*
  %98 = bitcast %struct.VkSurfaceFormatKHR* %95 to i64*
  %99 = load i64, i64* %97, align 8
  store i64 %99, i64* %98, align 8
  %100 = getelementptr inbounds %struct.VkSurfaceFormat2KHR, %struct.VkSurfaceFormat2KHR* %3, i64 %94, i32 1
  %101 = load i8*, i8** %100, align 8
  %102 = icmp eq i8* %101, null
  br i1 %102, label %106, label %103

103:                                              ; preds = %93
  %104 = load %struct.loader_instance*, %struct.loader_instance** %9, align 8
  %105 = trunc i64 %94 to i32
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %104, i32 2, i32 0, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.47, i64 0, i64 0), i32 %105) #7
  br label %106

106:                                              ; preds = %93, %103
  %107 = add nuw nsw i64 %94, 1
  %108 = load i32, i32* %2, align 4
  %109 = zext i32 %108 to i64
  %110 = icmp ult i64 %107, %109
  br i1 %110, label %93, label %111

111:                                              ; preds = %106, %81, %34, %44, %75, %14
  %112 = phi i32 [ 0, %14 ], [ %43, %34 ], [ %47, %44 ], [ %80, %75 ], [ %90, %81 ], [ %90, %106 ]
  ret i32 %112
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @wsi_swapchain_instance_gpa(%struct.loader_instance* readonly, i8* readonly, i8**) local_unnamed_addr #0 {
  store i8* null, i8** %2, align 8
  %4 = tail call i32 @strcmp(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.48, i64 0, i64 0), i8* %1) #6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 34
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, i8* null, i8* bitcast (void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)* @vkDestroySurfaceKHR to i8*)
  br label %216

11:                                               ; preds = %3
  %12 = tail call i32 @strcmp(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.49, i64 0, i64 0), i8* %1) #6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 34
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  %18 = select i1 %17, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)* @vkGetPhysicalDeviceSurfaceSupportKHR to i8*)
  br label %216

19:                                               ; preds = %11
  %20 = tail call i32 @strcmp(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.50, i64 0, i64 0), i8* %1) #6
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %27

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 34
  %24 = load i8, i8* %23, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  %26 = select i1 %25, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)* @vkGetPhysicalDeviceSurfaceCapabilitiesKHR to i8*)
  br label %216

27:                                               ; preds = %19
  %28 = tail call i32 @strcmp(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.51, i64 0, i64 0), i8* %1) #6
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %35

30:                                               ; preds = %27
  %31 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 34
  %32 = load i8, i8* %31, align 8, !range !2
  %33 = icmp eq i8 %32, 0
  %34 = select i1 %33, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)* @vkGetPhysicalDeviceSurfaceFormatsKHR to i8*)
  br label %216

35:                                               ; preds = %27
  %36 = tail call i32 @strcmp(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.52, i64 0, i64 0), i8* %1) #6
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %35
  %39 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 34
  %40 = load i8, i8* %39, align 8, !range !2
  %41 = icmp eq i8 %40, 0
  %42 = select i1 %41, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)* @vkGetPhysicalDeviceSurfacePresentModesKHR to i8*)
  br label %216

43:                                               ; preds = %35
  %44 = tail call i32 @strcmp(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.53, i64 0, i64 0), i8* %1) #6
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %51

46:                                               ; preds = %43
  %47 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 34
  %48 = load i8, i8* %47, align 8, !range !2
  %49 = icmp eq i8 %48, 0
  %50 = select i1 %49, i8* null, i8* bitcast (i32 (%struct.VkDevice_T*, %struct.VkDeviceGroupPresentCapabilitiesKHR*)* @vkGetDeviceGroupPresentCapabilitiesKHR to i8*)
  br label %216

51:                                               ; preds = %43
  %52 = tail call i32 @strcmp(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.54, i64 0, i64 0), i8* %1) #6
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  %55 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 34
  %56 = load i8, i8* %55, align 8, !range !2
  %57 = icmp eq i8 %56, 0
  %58 = select i1 %57, i8* null, i8* bitcast (i32 (%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*)* @vkGetDeviceGroupSurfacePresentModesKHR to i8*)
  br label %216

59:                                               ; preds = %51
  %60 = tail call i32 @strcmp(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.55, i64 0, i64 0), i8* %1) #6
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %67

62:                                               ; preds = %59
  %63 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 34
  %64 = load i8, i8* %63, align 8, !range !2
  %65 = icmp eq i8 %64, 0
  %66 = select i1 %65, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)* @vkGetPhysicalDevicePresentRectanglesKHR to i8*)
  br label %216

67:                                               ; preds = %59
  %68 = tail call i32 @strcmp(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.56, i64 0, i64 0), i8* %1) #6
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %75

70:                                               ; preds = %67
  %71 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 34
  %72 = load i8, i8* %71, align 8, !range !2
  %73 = icmp eq i8 %72, 0
  %74 = select i1 %73, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)* @vkGetPhysicalDeviceSurfaceCapabilities2KHR to i8*)
  br label %216

75:                                               ; preds = %67
  %76 = tail call i32 @strcmp(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.57, i64 0, i64 0), i8* %1) #6
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %83

78:                                               ; preds = %75
  %79 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 34
  %80 = load i8, i8* %79, align 8, !range !2
  %81 = icmp eq i8 %80, 0
  %82 = select i1 %81, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*)* @vkGetPhysicalDeviceSurfaceFormats2KHR to i8*)
  br label %216

83:                                               ; preds = %75
  %84 = tail call i32 @strcmp(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.58, i64 0, i64 0), i8* %1) #6
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %216, label %86

86:                                               ; preds = %83
  %87 = tail call i32 @strcmp(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.59, i64 0, i64 0), i8* %1) #6
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %216, label %89

89:                                               ; preds = %86
  %90 = tail call i32 @strcmp(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.60, i64 0, i64 0), i8* %1) #6
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %216, label %92

92:                                               ; preds = %89
  %93 = tail call i32 @strcmp(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.61, i64 0, i64 0), i8* %1) #6
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %216, label %95

95:                                               ; preds = %92
  %96 = tail call i32 @strcmp(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.62, i64 0, i64 0), i8* %1) #6
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %216, label %98

98:                                               ; preds = %95
  %99 = tail call i32 @strcmp(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.63, i64 0, i64 0), i8* %1) #6
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %216, label %101

101:                                              ; preds = %98
  %102 = tail call i32 @strcmp(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.64, i64 0, i64 0), i8* %1) #6
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %109

104:                                              ; preds = %101
  %105 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 35
  %106 = load i8, i8* %105, align 1, !range !2
  %107 = icmp eq i8 %106, 0
  %108 = select i1 %107, i8* null, i8* bitcast (i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* @vkCreateXcbSurfaceKHR to i8*)
  br label %216

109:                                              ; preds = %101
  %110 = tail call i32 @strcmp(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.65, i64 0, i64 0), i8* %1) #6
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %117

112:                                              ; preds = %109
  %113 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 35
  %114 = load i8, i8* %113, align 1, !range !2
  %115 = icmp eq i8 %114, 0
  %116 = select i1 %115, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)* @vkGetPhysicalDeviceXcbPresentationSupportKHR to i8*)
  br label %216

117:                                              ; preds = %109
  %118 = tail call i32 @strcmp(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.66, i64 0, i64 0), i8* %1) #6
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %125

120:                                              ; preds = %117
  %121 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 36
  %122 = load i8, i8* %121, align 2, !range !2
  %123 = icmp eq i8 %122, 0
  %124 = select i1 %123, i8* null, i8* bitcast (i32 (%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* @vkCreateHeadlessSurfaceEXT to i8*)
  br label %216

125:                                              ; preds = %117
  %126 = tail call i32 @strcmp(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.67, i64 0, i64 0), i8* %1) #6
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %133

128:                                              ; preds = %125
  %129 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 37
  %130 = load i8, i8* %129, align 1, !range !2
  %131 = icmp eq i8 %130, 0
  %132 = select i1 %131, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)* @vkGetPhysicalDeviceDisplayPropertiesKHR to i8*)
  br label %216

133:                                              ; preds = %125
  %134 = tail call i32 @strcmp(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.68, i64 0, i64 0), i8* %1) #6
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %141

136:                                              ; preds = %133
  %137 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 37
  %138 = load i8, i8* %137, align 1, !range !2
  %139 = icmp eq i8 %138, 0
  %140 = select i1 %139, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)* @vkGetPhysicalDeviceDisplayPlanePropertiesKHR to i8*)
  br label %216

141:                                              ; preds = %133
  %142 = tail call i32 @strcmp(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.69, i64 0, i64 0), i8* %1) #6
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %149

144:                                              ; preds = %141
  %145 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 37
  %146 = load i8, i8* %145, align 1, !range !2
  %147 = icmp eq i8 %146, 0
  %148 = select i1 %147, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)* @vkGetDisplayPlaneSupportedDisplaysKHR to i8*)
  br label %216

149:                                              ; preds = %141
  %150 = tail call i32 @strcmp(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.70, i64 0, i64 0), i8* %1) #6
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %157

152:                                              ; preds = %149
  %153 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 37
  %154 = load i8, i8* %153, align 1, !range !2
  %155 = icmp eq i8 %154, 0
  %156 = select i1 %155, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)* @vkGetDisplayModePropertiesKHR to i8*)
  br label %216

157:                                              ; preds = %149
  %158 = tail call i32 @strcmp(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.71, i64 0, i64 0), i8* %1) #6
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %165

160:                                              ; preds = %157
  %161 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 37
  %162 = load i8, i8* %161, align 1, !range !2
  %163 = icmp eq i8 %162, 0
  %164 = select i1 %163, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)* @vkCreateDisplayModeKHR to i8*)
  br label %216

165:                                              ; preds = %157
  %166 = tail call i32 @strcmp(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.72, i64 0, i64 0), i8* %1) #6
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %173

168:                                              ; preds = %165
  %169 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 37
  %170 = load i8, i8* %169, align 1, !range !2
  %171 = icmp eq i8 %170, 0
  %172 = select i1 %171, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)* @vkGetDisplayPlaneCapabilitiesKHR to i8*)
  br label %216

173:                                              ; preds = %165
  %174 = tail call i32 @strcmp(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.73, i64 0, i64 0), i8* %1) #6
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %181

176:                                              ; preds = %173
  %177 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 37
  %178 = load i8, i8* %177, align 1, !range !2
  %179 = icmp eq i8 %178, 0
  %180 = select i1 %179, i8* null, i8* bitcast (i32 (%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* @vkCreateDisplayPlaneSurfaceKHR to i8*)
  br label %216

181:                                              ; preds = %173
  %182 = tail call i32 @strcmp(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.74, i64 0, i64 0), i8* %1) #6
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %216, label %184

184:                                              ; preds = %181
  %185 = tail call i32 @strcmp(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.75, i64 0, i64 0), i8* %1) #6
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %192

187:                                              ; preds = %184
  %188 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 38
  %189 = load i8, i8* %188, align 4, !range !2
  %190 = icmp eq i8 %189, 0
  %191 = select i1 %190, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayProperties2KHR*)* @vkGetPhysicalDeviceDisplayProperties2KHR to i8*)
  br label %216

192:                                              ; preds = %184
  %193 = tail call i32 @strcmp(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.76, i64 0, i64 0), i8* %1) #6
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %200

195:                                              ; preds = %192
  %196 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 38
  %197 = load i8, i8* %196, align 4, !range !2
  %198 = icmp eq i8 %197, 0
  %199 = select i1 %198, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlaneProperties2KHR*)* @vkGetPhysicalDeviceDisplayPlaneProperties2KHR to i8*)
  br label %216

200:                                              ; preds = %192
  %201 = tail call i32 @strcmp(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.77, i64 0, i64 0), i8* %1) #6
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %208

203:                                              ; preds = %200
  %204 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 38
  %205 = load i8, i8* %204, align 4, !range !2
  %206 = icmp eq i8 %205, 0
  %207 = select i1 %206, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*)* @vkGetDisplayModeProperties2KHR to i8*)
  br label %216

208:                                              ; preds = %200
  %209 = tail call i32 @strcmp(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.78, i64 0, i64 0), i8* %1) #6
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %218

211:                                              ; preds = %208
  %212 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %0, i64 0, i32 38
  %213 = load i8, i8* %212, align 4, !range !2
  %214 = icmp eq i8 %213, 0
  %215 = select i1 %214, i8* null, i8* bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*)* @vkGetDisplayPlaneCapabilities2KHR to i8*)
  br label %216

216:                                              ; preds = %181, %98, %95, %92, %89, %86, %83, %6, %14, %22, %30, %38, %46, %54, %62, %70, %78, %104, %112, %120, %128, %136, %144, %152, %160, %168, %176, %187, %195, %203, %211
  %217 = phi i8* [ %215, %211 ], [ %207, %203 ], [ %199, %195 ], [ %191, %187 ], [ %180, %176 ], [ %172, %168 ], [ %164, %160 ], [ %156, %152 ], [ %148, %144 ], [ %140, %136 ], [ %132, %128 ], [ %124, %120 ], [ %116, %112 ], [ %108, %104 ], [ %82, %78 ], [ %74, %70 ], [ %66, %62 ], [ %58, %54 ], [ %50, %46 ], [ %42, %38 ], [ %34, %30 ], [ %26, %22 ], [ %18, %14 ], [ %10, %6 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)* @vkCreateSwapchainKHR to i8*), %83 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, %struct.VkAllocationCallbacks*)* @vkDestroySwapchainKHR to i8*), %86 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32*, %struct.VkImage_T**)* @vkGetSwapchainImagesKHR to i8*), %89 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i64, %struct.VkSemaphore_T*, %struct.VkFence_T*, i32*)* @vkAcquireNextImageKHR to i8*), %92 ], [ bitcast (i32 (%struct.VkQueue_T*, %struct.VkPresentInfoKHR*)* @vkQueuePresentKHR to i8*), %95 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkAcquireNextImageInfoKHR*, i32*)* @vkAcquireNextImage2KHR to i8*), %98 ], [ bitcast (i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)* @vkCreateSharedSwapchainsKHR to i8*), %181 ]
  store i8* %217, i8** %2, align 8
  br label %218

218:                                              ; preds = %216, %208
  %219 = phi i1 [ false, %208 ], [ true, %216 ]
  ret i1 %219
}

declare i8* @loader_instance_heap_alloc(%struct.loader_instance*, i64, i32) local_unnamed_addr #5

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
