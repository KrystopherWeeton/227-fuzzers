; ModuleID = '../../third_party/openscreen/src/third_party/tinycbor/src/src/cborparser.c'
source_filename = "../../third_party/openscreen/src/third_party/tinycbor/src/src/cborparser.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.CborValue = type { %struct.CborParser*, i8*, i32, i16, i8, i8 }
%struct.CborParser = type { i8*, i32 }

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_cbor_value_extract_number(i8** nocapture, i8*, i64* nocapture) local_unnamed_addr #0 {
  %4 = load i8*, i8** %0, align 8
  %5 = load i8, i8* %4, align 1
  %6 = and i8 %5, 31
  %7 = getelementptr inbounds i8, i8* %4, i64 1
  store i8* %7, i8** %0, align 8
  %8 = zext i8 %6 to i32
  %9 = icmp ult i8 %6, 24
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  %11 = zext i8 %6 to i64
  store i64 %11, i64* %2, align 8
  br label %44

12:                                               ; preds = %3
  %13 = icmp ugt i8 %6, 27
  br i1 %13, label %44, label %14, !prof !2

14:                                               ; preds = %12
  %15 = add nsw i32 %8, -24
  %16 = shl i32 1, %15
  %17 = sext i32 %16 to i64
  %18 = ptrtoint i8* %1 to i64
  %19 = ptrtoint i8* %7 to i64
  %20 = sub i64 %18, %19
  %21 = icmp ult i64 %20, %17
  br i1 %21, label %44, label %22, !prof !2

22:                                               ; preds = %14
  switch i32 %8, label %36 [
    i32 24, label %23
    i32 25, label %26
    i32 26, label %31
  ]

23:                                               ; preds = %22
  %24 = load i8, i8* %7, align 1
  %25 = zext i8 %24 to i64
  br label %40

26:                                               ; preds = %22
  %27 = bitcast i8* %7 to i16*
  %28 = load i16, i16* %27, align 1
  %29 = tail call i16 @llvm.bswap.i16(i16 %28) #6
  %30 = zext i16 %29 to i64
  br label %40

31:                                               ; preds = %22
  %32 = bitcast i8* %7 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = tail call i32 @llvm.bswap.i32(i32 %33) #6
  %35 = zext i32 %34 to i64
  br label %40

36:                                               ; preds = %22
  %37 = bitcast i8* %7 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = tail call i64 @llvm.bswap.i64(i64 %38) #6
  br label %40

40:                                               ; preds = %23, %31, %36, %26
  %41 = phi i64 [ %25, %23 ], [ %35, %31 ], [ %39, %36 ], [ %30, %26 ]
  store i64 %41, i64* %2, align 8
  %42 = load i8*, i8** %0, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %17
  store i8* %43, i8** %0, align 8
  br label %44

44:                                               ; preds = %14, %12, %40, %10
  %45 = phi i32 [ 0, %10 ], [ 0, %40 ], [ 261, %12 ], [ 257, %14 ]
  ret i32 %45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_cbor_value_decode_int64_internal(%struct.CborValue* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 1
  %4 = and i8 %3, 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %8 = load i8, i8* %7, align 2
  %9 = icmp eq i8 %8, -6
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = icmp eq i8 %8, -5
  tail call void @llvm.assume(i1 %11)
  br label %12

12:                                               ; preds = %1, %10, %6
  %13 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = load i8, i8* %14, align 1
  %16 = and i8 %15, 31
  %17 = icmp eq i8 %16, 26
  br i1 %17, label %20, label %18

18:                                               ; preds = %12
  %19 = icmp eq i8 %16, 27
  tail call void @llvm.assume(i1 %19)
  br label %20

20:                                               ; preds = %12, %18
  %21 = zext i8 %15 to i32
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %30

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, i8* %14, i64 1
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = tail call i32 @llvm.bswap.i32(i32 %27) #6
  %29 = zext i32 %28 to i64
  br label %37

30:                                               ; preds = %20
  %31 = and i32 %21, 31
  %32 = icmp eq i32 %31, 27
  tail call void @llvm.assume(i1 %32)
  %33 = getelementptr inbounds i8, i8* %14, i64 1
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = tail call i64 @llvm.bswap.i64(i64 %35) #6
  br label %37

37:                                               ; preds = %30, %24
  %38 = phi i64 [ %29, %24 ], [ %36, %30 ]
  ret i64 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_parser_init(i8*, i64, i32, %struct.CborParser*, %struct.CborValue* nocapture) local_unnamed_addr #2 {
  %6 = bitcast %struct.CborParser* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false)
  %7 = getelementptr inbounds i8, i8* %0, i64 %1
  %8 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %3, i64 0, i32 0
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %3, i64 0, i32 1
  store i32 %2, i32* %9, align 8
  %10 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %4, i64 0, i32 0
  store %struct.CborParser* %3, %struct.CborParser** %10, align 8
  %11 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %4, i64 0, i32 1
  store i8* %0, i8** %11, align 8
  %12 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %4, i64 0, i32 2
  store i32 1, i32* %12, align 8
  %13 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %4, i64 0, i32 5
  store i8 0, i8* %13, align 1
  %14 = tail call fastcc i32 @preparse_value(%struct.CborValue* %4)
  ret i32 %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc i32 @preparse_value(%struct.CborValue* nocapture) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 0
  %3 = load %struct.CborParser*, %struct.CborParser** %2, align 8
  %4 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  store i8 -1, i8* %4, align 2
  %5 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %3, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %6, %8
  br i1 %9, label %78, label %10

10:                                               ; preds = %1
  %11 = load i8, i8* %6, align 1
  %12 = and i8 %11, -32
  store i8 %12, i8* %4, align 2
  %13 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %14 = load i8, i8* %13, align 1
  %15 = and i8 %14, 96
  store i8 %15, i8* %13, align 1
  %16 = and i8 %11, 31
  %17 = zext i8 %16 to i16
  %18 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 3
  store i16 %17, i16* %18, align 4
  %19 = zext i8 %16 to i32
  %20 = icmp ugt i8 %16, 27
  br i1 %20, label %21, label %34

21:                                               ; preds = %10
  %22 = icmp eq i8 %16, 31
  br i1 %22, label %26, label %23, !prof !3

23:                                               ; preds = %21
  %24 = icmp ugt i8 %11, -33
  %25 = select i1 %24, i32 259, i32 261
  br label %78

26:                                               ; preds = %21
  %27 = lshr i8 %11, 5
  %28 = xor i8 %27, 4
  switch i8 %28, label %31 [
    i8 7, label %29
    i8 6, label %29
    i8 0, label %29
    i8 1, label %29
  ]

29:                                               ; preds = %26, %26, %26, %26
  %30 = or i8 %15, 4
  store i8 %30, i8* %13, align 1
  store i8 %12, i8* %4, align 2
  br label %78

31:                                               ; preds = %26
  %32 = icmp ugt i8 %11, -33
  %33 = select i1 %32, i32 258, i32 261
  br label %78

34:                                               ; preds = %10
  %35 = icmp ult i8 %16, 24
  br i1 %35, label %41, label %36

36:                                               ; preds = %34
  %37 = add nsw i32 %19, -24
  %38 = shl i32 1, %37
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %39, 1
  br label %41

41:                                               ; preds = %34, %36
  %42 = phi i64 [ %40, %36 ], [ 1, %34 ]
  %43 = bitcast %struct.CborParser* %3 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = ptrtoint i8* %6 to i64
  %46 = sub i64 %44, %45
  %47 = icmp ugt i64 %42, %46
  br i1 %47, label %78, label %48

48:                                               ; preds = %41
  %49 = lshr i8 %11, 5
  switch i8 %49, label %64 [
    i8 1, label %50
    i8 7, label %52
  ]

50:                                               ; preds = %48
  %51 = or i8 %15, 2
  store i8 %51, i8* %13, align 1
  store i8 0, i8* %4, align 2
  br label %64

52:                                               ; preds = %48
  switch i32 %19, label %78 [
    i32 20, label %53
    i32 26, label %54
    i32 27, label %54
    i32 21, label %56
    i32 22, label %56
    i32 23, label %56
    i32 25, label %56
    i32 24, label %58
  ]

53:                                               ; preds = %52
  store i16 0, i16* %18, align 4
  store i8 -11, i8* %4, align 2
  br label %78

54:                                               ; preds = %52, %52
  %55 = or i8 %15, 1
  store i8 %55, i8* %13, align 1
  br label %56

56:                                               ; preds = %52, %52, %52, %52, %54
  %57 = load i8, i8* %6, align 1
  store i8 %57, i8* %4, align 2
  br label %78

58:                                               ; preds = %52
  %59 = getelementptr inbounds i8, i8* %6, i64 1
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  store i16 %61, i16* %18, align 4
  %62 = icmp ult i8 %60, 32
  br i1 %62, label %63, label %78, !prof !2

63:                                               ; preds = %58
  store i8 -1, i8* %4, align 2
  br label %78

64:                                               ; preds = %48, %50
  %65 = phi i8 [ %15, %48 ], [ %51, %50 ]
  br i1 %35, label %78, label %66

66:                                               ; preds = %64
  switch i8 %16, label %76 [
    i8 24, label %67
    i8 25, label %71
  ]

67:                                               ; preds = %66
  %68 = getelementptr inbounds i8, i8* %6, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i16
  store i16 %70, i16* %18, align 4
  br label %78

71:                                               ; preds = %66
  %72 = getelementptr inbounds i8, i8* %6, i64 1
  %73 = bitcast i8* %72 to i16*
  %74 = load i16, i16* %73, align 1
  %75 = tail call i16 @llvm.bswap.i16(i16 %74) #6
  store i16 %75, i16* %18, align 4
  br label %78

76:                                               ; preds = %66
  %77 = or i8 %65, 1
  store i8 %77, i8* %13, align 1
  br label %78

78:                                               ; preds = %23, %29, %31, %63, %58, %52, %56, %53, %64, %71, %76, %67, %41, %1
  %79 = phi i32 [ 257, %1 ], [ %25, %23 ], [ 0, %29 ], [ %33, %31 ], [ 257, %41 ], [ 262, %63 ], [ 0, %58 ], [ 0, %52 ], [ 0, %56 ], [ 0, %53 ], [ 0, %64 ], [ 0, %71 ], [ 0, %76 ], [ 0, %67 ]
  ret i32 %79
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_validate_basic(%struct.CborValue* nocapture readonly) local_unnamed_addr #2 {
  %2 = alloca %struct.CborValue, align 8
  %3 = bitcast %struct.CborValue* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #6
  %4 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 2
  %5 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 4
  %6 = bitcast %struct.CborValue* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* align 8 %6, i64 24, i1 false)
  %7 = load i8, i8* %5, align 2
  %8 = icmp ne i8 %7, -1
  tail call void @llvm.assume(i1 %8) #6
  %9 = load i32, i32* %4, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %1
  %12 = call fastcc i32 @advance_recursive(%struct.CborValue* nonnull %2, i32 1024) #6
  br label %13

13:                                               ; preds = %1, %11
  %14 = phi i32 [ %12, %11 ], [ 3, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #6
  ret i32 %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_advance(%struct.CborValue*) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %3 = load i8, i8* %2, align 2
  %4 = icmp ne i8 %3, -1
  tail call void @llvm.assume(i1 %4)
  %5 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = tail call fastcc i32 @advance_recursive(%struct.CborValue* %0, i32 1024)
  br label %10

10:                                               ; preds = %1, %8
  %11 = phi i32 [ %9, %8 ], [ 3, %1 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_advance_fixed(%struct.CborValue* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %3 = load i8, i8* %2, align 2
  %4 = icmp ne i8 %3, -1
  tail call void @llvm.assume(i1 %4)
  %5 = lshr i8 %3, 5
  %6 = shl i8 %3, 3
  %7 = or i8 %5, %6
  %8 = xor i8 %7, 4
  %9 = icmp ugt i8 %8, 7
  %10 = lshr i8 60, %8
  %11 = and i8 %10, 1
  %12 = icmp ne i8 %11, 0
  %13 = or i1 %12, %9
  tail call void @llvm.assume(i1 %13)
  %14 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %107, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %19 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 0
  %20 = load %struct.CborParser*, %struct.CborParser** %19, align 8
  %21 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %20, i64 0, i32 0
  %22 = bitcast %struct.CborParser* %20 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = load i8*, i8** %18, align 8
  %25 = load i8, i8* %24, align 1
  %26 = and i8 %25, 31
  %27 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %27, i8** %18, align 8
  %28 = zext i8 %26 to i32
  %29 = icmp ult i8 %26, 24
  br i1 %29, label %30, label %32

30:                                               ; preds = %17
  %31 = zext i8 %26 to i64
  br label %62

32:                                               ; preds = %17
  %33 = icmp ugt i8 %26, 27
  br i1 %33, label %62, label %34, !prof !2

34:                                               ; preds = %32
  %35 = add nsw i32 %28, -24
  %36 = shl i32 1, %35
  %37 = sext i32 %36 to i64
  %38 = ptrtoint i8* %27 to i64
  %39 = sub i64 %23, %38
  %40 = icmp ult i64 %39, %37
  br i1 %40, label %62, label %41, !prof !2

41:                                               ; preds = %34
  switch i32 %28, label %55 [
    i32 24, label %42
    i32 25, label %45
    i32 26, label %50
  ]

42:                                               ; preds = %41
  %43 = load i8, i8* %27, align 1
  %44 = zext i8 %43 to i64
  br label %59

45:                                               ; preds = %41
  %46 = bitcast i8* %27 to i16*
  %47 = load i16, i16* %46, align 1
  %48 = tail call i16 @llvm.bswap.i16(i16 %47) #6
  %49 = zext i16 %48 to i64
  br label %59

50:                                               ; preds = %41
  %51 = bitcast i8* %27 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = tail call i32 @llvm.bswap.i32(i32 %52) #6
  %54 = zext i32 %53 to i64
  br label %59

55:                                               ; preds = %41
  %56 = bitcast i8* %27 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = tail call i64 @llvm.bswap.i64(i64 %57) #6
  br label %59

59:                                               ; preds = %55, %50, %45, %42
  %60 = phi i64 [ %58, %55 ], [ %54, %50 ], [ %49, %45 ], [ %44, %42 ]
  %61 = getelementptr inbounds i8, i8* %27, i64 %37
  store i8* %61, i8** %18, align 8
  br label %62

62:                                               ; preds = %30, %32, %34, %59
  %63 = phi i8* [ %27, %30 ], [ %27, %32 ], [ %27, %34 ], [ %61, %59 ]
  %64 = phi i64 [ %31, %30 ], [ -6148914691236517206, %32 ], [ -6148914691236517206, %34 ], [ %60, %59 ]
  %65 = phi i1 [ true, %30 ], [ false, %32 ], [ false, %34 ], [ true, %59 ]
  tail call void @llvm.assume(i1 %65) #6
  switch i8 %3, label %72 [
    i8 64, label %66
    i8 96, label %66
  ]

66:                                               ; preds = %62, %62
  %67 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %68 = load i8, i8* %67, align 1
  %69 = and i8 %68, 4
  %70 = icmp eq i8 %69, 0
  tail call void @llvm.assume(i1 %70) #6
  %71 = getelementptr inbounds i8, i8* %63, i64 %64
  store i8* %71, i8** %18, align 8
  br label %72

72:                                               ; preds = %62, %66
  %73 = phi i8* [ %63, %62 ], [ %71, %66 ]
  %74 = icmp ne i8 %3, -64
  %75 = icmp eq i32 %15, -1
  %76 = xor i1 %74, true
  %77 = or i1 %75, %76
  br i1 %77, label %82, label %78

78:                                               ; preds = %72
  %79 = add i32 %15, -1
  store i32 %79, i32* %14, align 8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %78
  store i8 -1, i8* %2, align 2
  br label %107

82:                                               ; preds = %78, %72
  %83 = phi i32 [ %15, %72 ], [ %79, %78 ]
  br i1 %74, label %84, label %88

84:                                               ; preds = %82
  %85 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %86 = load i8, i8* %85, align 1
  %87 = xor i8 %86, 64
  store i8 %87, i8* %85, align 1
  br label %88

88:                                               ; preds = %84, %82
  %89 = icmp eq i32 %83, -1
  br i1 %89, label %90, label %105

90:                                               ; preds = %88
  %91 = load i8*, i8** %21, align 8
  %92 = icmp eq i8* %73, %91
  br i1 %92, label %105, label %93

93:                                               ; preds = %90
  %94 = load i8, i8* %73, align 1
  %95 = icmp eq i8 %94, -1
  br i1 %95, label %96, label %105

96:                                               ; preds = %93
  %97 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %98 = load i8, i8* %97, align 1
  %99 = and i8 %98, 96
  %100 = icmp eq i8 %99, 96
  %101 = icmp eq i8 %3, -64
  %102 = or i1 %101, %100
  br i1 %102, label %107, label %103

103:                                              ; preds = %96
  %104 = getelementptr inbounds i8, i8* %73, i64 1
  store i8* %104, i8** %18, align 8
  store i8 -1, i8* %2, align 2
  store i32 0, i32* %14, align 8
  br label %107

105:                                              ; preds = %93, %90, %88
  %106 = tail call fastcc i32 @preparse_value(%struct.CborValue* %0) #6
  br label %107

107:                                              ; preds = %105, %103, %96, %81, %1
  %108 = phi i32 [ 3, %1 ], [ 0, %81 ], [ 0, %103 ], [ %106, %105 ], [ 258, %96 ]
  ret i32 %108
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @advance_recursive(%struct.CborValue*, i32) unnamed_addr #2 {
  %3 = alloca %struct.CborValue, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.CborValue, align 8
  %7 = bitcast %struct.CborValue* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #6
  %8 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %6, i64 0, i32 1
  %9 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %6, i64 0, i32 2
  %10 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %6, i64 0, i32 4
  %11 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %12 = bitcast %struct.CborValue* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 24, i1 false)
  %13 = load i8, i8* %11, align 2
  %14 = lshr i8 %13, 5
  %15 = shl i8 %13, 3
  %16 = or i8 %14, %15
  %17 = xor i8 %16, 4
  switch i8 %17, label %18 [
    i8 7, label %110
    i8 6, label %110
    i8 0, label %110
    i8 1, label %110
  ]

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %20 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 0
  %21 = load %struct.CborParser*, %struct.CborParser** %20, align 8
  %22 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %21, i64 0, i32 0
  %23 = bitcast %struct.CborParser* %21 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = load i8*, i8** %19, align 8
  %26 = load i8, i8* %25, align 1
  %27 = and i8 %26, 31
  %28 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %28, i8** %19, align 8
  %29 = zext i8 %27 to i32
  %30 = icmp ult i8 %27, 24
  br i1 %30, label %31, label %33

31:                                               ; preds = %18
  %32 = zext i8 %27 to i64
  br label %63

33:                                               ; preds = %18
  %34 = icmp ugt i8 %27, 27
  br i1 %34, label %63, label %35, !prof !2

35:                                               ; preds = %33
  %36 = add nsw i32 %29, -24
  %37 = shl i32 1, %36
  %38 = sext i32 %37 to i64
  %39 = ptrtoint i8* %28 to i64
  %40 = sub i64 %24, %39
  %41 = icmp ult i64 %40, %38
  br i1 %41, label %63, label %42, !prof !2

42:                                               ; preds = %35
  switch i32 %29, label %56 [
    i32 24, label %43
    i32 25, label %46
    i32 26, label %51
  ]

43:                                               ; preds = %42
  %44 = load i8, i8* %28, align 1
  %45 = zext i8 %44 to i64
  br label %60

46:                                               ; preds = %42
  %47 = bitcast i8* %28 to i16*
  %48 = load i16, i16* %47, align 1
  %49 = tail call i16 @llvm.bswap.i16(i16 %48) #6
  %50 = zext i16 %49 to i64
  br label %60

51:                                               ; preds = %42
  %52 = bitcast i8* %28 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = tail call i32 @llvm.bswap.i32(i32 %53) #6
  %55 = zext i32 %54 to i64
  br label %60

56:                                               ; preds = %42
  %57 = bitcast i8* %28 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = tail call i64 @llvm.bswap.i64(i64 %58) #6
  br label %60

60:                                               ; preds = %56, %51, %46, %43
  %61 = phi i64 [ %59, %56 ], [ %55, %51 ], [ %50, %46 ], [ %45, %43 ]
  %62 = getelementptr inbounds i8, i8* %28, i64 %38
  store i8* %62, i8** %19, align 8
  br label %63

63:                                               ; preds = %31, %33, %35, %60
  %64 = phi i8* [ %28, %31 ], [ %28, %33 ], [ %28, %35 ], [ %62, %60 ]
  %65 = phi i64 [ %32, %31 ], [ -6148914691236517206, %33 ], [ -6148914691236517206, %35 ], [ %61, %60 ]
  %66 = phi i1 [ true, %31 ], [ false, %33 ], [ false, %35 ], [ true, %60 ]
  tail call void @llvm.assume(i1 %66) #6
  switch i8 %13, label %73 [
    i8 64, label %67
    i8 96, label %67
  ]

67:                                               ; preds = %63, %63
  %68 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %69 = load i8, i8* %68, align 1
  %70 = and i8 %69, 4
  %71 = icmp eq i8 %70, 0
  tail call void @llvm.assume(i1 %71) #6
  %72 = getelementptr inbounds i8, i8* %64, i64 %65
  store i8* %72, i8** %19, align 8
  br label %73

73:                                               ; preds = %63, %67
  %74 = phi i8* [ %64, %63 ], [ %72, %67 ]
  %75 = icmp ne i8 %13, -64
  %76 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 2
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, -1
  %79 = xor i1 %75, true
  %80 = or i1 %78, %79
  br i1 %80, label %85, label %81

81:                                               ; preds = %73
  %82 = add i32 %77, -1
  store i32 %82, i32* %76, align 8
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %81
  store i8 -1, i8* %11, align 2
  br label %199

85:                                               ; preds = %81, %73
  %86 = phi i32 [ %77, %73 ], [ %82, %81 ]
  br i1 %75, label %87, label %91

87:                                               ; preds = %85
  %88 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %89 = load i8, i8* %88, align 1
  %90 = xor i8 %89, 64
  store i8 %90, i8* %88, align 1
  br label %91

91:                                               ; preds = %87, %85
  %92 = icmp eq i32 %86, -1
  br i1 %92, label %93, label %108

93:                                               ; preds = %91
  %94 = load i8*, i8** %22, align 8
  %95 = icmp eq i8* %74, %94
  br i1 %95, label %108, label %96

96:                                               ; preds = %93
  %97 = load i8, i8* %74, align 1
  %98 = icmp eq i8 %97, -1
  br i1 %98, label %99, label %108

99:                                               ; preds = %96
  %100 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %101 = load i8, i8* %100, align 1
  %102 = and i8 %101, 96
  %103 = icmp eq i8 %102, 96
  %104 = icmp eq i8 %13, -64
  %105 = or i1 %104, %103
  br i1 %105, label %199, label %106

106:                                              ; preds = %99
  %107 = getelementptr inbounds i8, i8* %74, i64 1
  store i8* %107, i8** %19, align 8
  store i8 -1, i8* %11, align 2
  store i32 0, i32* %76, align 8
  br label %199

108:                                              ; preds = %96, %93, %91
  %109 = tail call fastcc i32 @preparse_value(%struct.CborValue* %0) #6
  br label %199

110:                                              ; preds = %2, %2, %2, %2
  %111 = or i8 %13, 32
  %112 = icmp eq i8 %111, -96
  br i1 %112, label %142, label %113

113:                                              ; preds = %110
  %114 = bitcast %struct.CborValue* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %114) #6
  %115 = bitcast i8** %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %114, i8 -86, i64 24, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %115) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %116 = icmp eq i8 %13, 64
  br i1 %116, label %119, label %117

117:                                              ; preds = %113
  %118 = icmp eq i8 %13, 96
  tail call void @llvm.assume(i1 %118) #6
  br label %119

119:                                              ; preds = %117, %113
  %120 = icmp eq %struct.CborValue* %0, null
  %121 = select i1 %120, %struct.CborValue* %3, %struct.CborValue* %0
  %122 = bitcast %struct.CborValue* %121 to i8*
  %123 = bitcast %struct.CborValue* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 24, i1 false) #6
  %124 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %124) #6
  store i64 -6148914691236517206, i64* %5, align 8
  %125 = call fastcc i32 @get_string_chunk(%struct.CborValue* %121, i8** nonnull %4, i64* nonnull %5) #6
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %140

127:                                              ; preds = %119, %135
  %128 = phi i64 [ %136, %135 ], [ 0, %119 ]
  %129 = load i8*, i8** %4, align 8
  %130 = icmp eq i8* %129, null
  br i1 %130, label %139, label %131

131:                                              ; preds = %127
  %132 = load i64, i64* %5, align 8
  %133 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %128, i64 %132) #6
  %134 = extractvalue { i64, i1 } %133, 1
  br i1 %134, label %140, label %135, !prof !2

135:                                              ; preds = %131
  %136 = extractvalue { i64, i1 } %133, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %124) #6
  store i64 -6148914691236517206, i64* %5, align 8
  %137 = call fastcc i32 @get_string_chunk(%struct.CborValue* %121, i8** nonnull %4, i64* nonnull %5) #6
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %127, label %140

139:                                              ; preds = %127
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %115) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %114) #6
  br label %199

140:                                              ; preds = %131, %135, %119
  %141 = phi i32 [ %125, %119 ], [ 1024, %131 ], [ %137, %135 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %115) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %114) #6
  br label %199

142:                                              ; preds = %110
  %143 = icmp eq i32 %1, 0
  br i1 %143, label %199, label %144

144:                                              ; preds = %142
  %145 = call i32 @cbor_value_enter_container(%struct.CborValue* %0, %struct.CborValue* nonnull %6)
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %199

147:                                              ; preds = %144
  %148 = add nsw i32 %1, -1
  br label %149

149:                                              ; preds = %147, %152
  %150 = load i32, i32* %9, align 8
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %155, label %152

152:                                              ; preds = %149
  %153 = call fastcc i32 @advance_recursive(%struct.CborValue* nonnull %6, i32 %148)
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %149, label %199

155:                                              ; preds = %149
  %156 = load i8, i8* %11, align 2
  %157 = or i8 %156, 32
  %158 = icmp eq i8 %157, -96
  call void @llvm.assume(i1 %158) #6
  %159 = load i8, i8* %10, align 2
  %160 = icmp eq i8 %159, -1
  call void @llvm.assume(i1 %160) #6
  %161 = bitcast i8** %8 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %164 = bitcast i8** %163 to i64*
  store i64 %162, i64* %164, align 8
  %165 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 2
  %166 = load i32, i32* %165, align 8
  %167 = icmp eq i32 %166, -1
  %168 = inttoptr i64 %162 to i8*
  br i1 %167, label %169, label %173

169:                                              ; preds = %155
  %170 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %171 = load i8, i8* %170, align 1
  %172 = xor i8 %171, 64
  store i8 %172, i8* %170, align 1
  br label %182

173:                                              ; preds = %155
  %174 = add i32 %166, -1
  store i32 %174, i32* %165, align 8
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %177

176:                                              ; preds = %173
  store i8 -1, i8* %11, align 2
  br label %199

177:                                              ; preds = %173
  %178 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %179 = load i8, i8* %178, align 1
  %180 = xor i8 %179, 64
  store i8 %180, i8* %178, align 1
  %181 = icmp eq i32 %166, 0
  br i1 %181, label %182, label %197

182:                                              ; preds = %177, %169
  %183 = phi i8 [ %172, %169 ], [ %180, %177 ]
  %184 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 0
  %185 = load %struct.CborParser*, %struct.CborParser** %184, align 8
  %186 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %185, i64 0, i32 0
  %187 = load i8*, i8** %186, align 8
  %188 = icmp eq i8* %187, %168
  br i1 %188, label %197, label %189

189:                                              ; preds = %182
  %190 = load i8, i8* %168, align 1
  %191 = icmp eq i8 %190, -1
  br i1 %191, label %192, label %197

192:                                              ; preds = %189
  %193 = and i8 %183, 96
  %194 = icmp eq i8 %193, 96
  br i1 %194, label %199, label %195

195:                                              ; preds = %192
  %196 = getelementptr inbounds i8, i8* %168, i64 1
  store i8* %196, i8** %163, align 8
  store i8 -1, i8* %11, align 2
  store i32 0, i32* %165, align 8
  br label %199

197:                                              ; preds = %189, %182, %177
  %198 = call fastcc i32 @preparse_value(%struct.CborValue* %0) #6
  br label %199

199:                                              ; preds = %152, %139, %197, %195, %192, %176, %140, %108, %106, %99, %84, %144, %142
  %200 = phi i32 [ 1025, %142 ], [ %145, %144 ], [ 0, %84 ], [ 0, %106 ], [ %109, %108 ], [ 258, %99 ], [ %141, %140 ], [ 0, %176 ], [ 0, %195 ], [ %198, %197 ], [ 258, %192 ], [ 0, %139 ], [ %153, %152 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #6
  ret i32 %200
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_skip_tag(%struct.CborValue* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  br label %3

3:                                                ; preds = %6, %1
  %4 = load i8, i8* %2, align 2
  %5 = icmp eq i8 %4, -64
  br i1 %5, label %6, label %9

6:                                                ; preds = %3
  %7 = tail call i32 @cbor_value_advance_fixed(%struct.CborValue* %0)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %3, label %9

9:                                                ; preds = %3, %6
  %10 = phi i32 [ %7, %6 ], [ 0, %3 ]
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_enter_container(%struct.CborValue* nocapture readonly, %struct.CborValue* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 2
  %5 = or i8 %4, 32
  %6 = icmp eq i8 %5, -96
  tail call void @llvm.assume(i1 %6)
  %7 = bitcast %struct.CborValue* %1 to i8*
  %8 = bitcast %struct.CborValue* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 24, i1 false)
  %9 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %10 = load i8, i8* %9, align 1
  %11 = and i8 %10, 4
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %22, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 2
  store i32 -1, i32* %14, align 8
  %15 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %15, align 8
  %18 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 4
  %19 = load i8, i8* %18, align 2
  %20 = and i8 %19, 32
  %21 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 5
  store i8 %20, i8* %21, align 1
  br label %98

22:                                               ; preds = %2
  %23 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 1
  %24 = bitcast %struct.CborValue* %1 to i64**
  %25 = load i64*, i64** %24, align 8
  %26 = load i64, i64* %25, align 8
  %27 = load i8*, i8** %23, align 8
  %28 = load i8, i8* %27, align 1
  %29 = and i8 %28, 31
  %30 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %30, i8** %23, align 8
  %31 = zext i8 %29 to i32
  %32 = icmp ult i8 %29, 24
  br i1 %32, label %33, label %37

33:                                               ; preds = %22
  %34 = zext i8 %29 to i64
  %35 = zext i8 %29 to i32
  %36 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 2
  store i32 %35, i32* %36, align 8
  br label %73

37:                                               ; preds = %22
  %38 = icmp ult i8 %29, 28
  call void @llvm.assume(i1 %38)
  %39 = add nsw i32 %31, -24
  %40 = shl i32 1, %39
  %41 = sext i32 %40 to i64
  %42 = ptrtoint i8* %30 to i64
  %43 = sub i64 %26, %42
  %44 = icmp uge i64 %43, %41
  call void @llvm.assume(i1 %44)
  switch i32 %31, label %58 [
    i32 24, label %45
    i32 25, label %48
    i32 26, label %53
  ]

45:                                               ; preds = %37
  %46 = load i8, i8* %30, align 1
  %47 = zext i8 %46 to i64
  br label %62

48:                                               ; preds = %37
  %49 = bitcast i8* %30 to i16*
  %50 = load i16, i16* %49, align 1
  %51 = tail call i16 @llvm.bswap.i16(i16 %50) #6
  %52 = zext i16 %51 to i64
  br label %62

53:                                               ; preds = %37
  %54 = bitcast i8* %30 to i32*
  %55 = load i32, i32* %54, align 1
  %56 = tail call i32 @llvm.bswap.i32(i32 %55) #6
  %57 = zext i32 %56 to i64
  br label %62

58:                                               ; preds = %37
  %59 = bitcast i8* %30 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = tail call i64 @llvm.bswap.i64(i64 %60) #6
  br label %62

62:                                               ; preds = %45, %48, %53, %58
  %63 = phi i64 [ %61, %58 ], [ %57, %53 ], [ %52, %48 ], [ %47, %45 ]
  %64 = getelementptr inbounds i8, i8* %30, i64 %41
  store i8* %64, i8** %23, align 8
  %65 = trunc i64 %63 to i32
  %66 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 2
  store i32 %65, i32* %66, align 8
  %67 = icmp ugt i64 %63, 4294967294
  br i1 %67, label %68, label %73

68:                                               ; preds = %62
  %69 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %70 = bitcast i8** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast i8** %23 to i64*
  store i64 %71, i64* %72, align 8
  br label %118

73:                                               ; preds = %33, %62
  %74 = phi i32* [ %36, %33 ], [ %66, %62 ]
  %75 = phi i32 [ %35, %33 ], [ %65, %62 ]
  %76 = phi i64 [ %34, %33 ], [ %63, %62 ]
  %77 = phi i8* [ %30, %33 ], [ %64, %62 ]
  %78 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 4
  %79 = load i8, i8* %78, align 2
  %80 = icmp eq i8 %79, -96
  br i1 %80, label %81, label %90

81:                                               ; preds = %73
  %82 = icmp slt i32 %75, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %81
  %84 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %85 = bitcast i8** %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast i8** %23 to i64*
  store i64 %86, i64* %87, align 8
  br label %118

88:                                               ; preds = %81
  %89 = shl i32 %75, 1
  store i32 %89, i32* %74, align 8
  br label %90

90:                                               ; preds = %88, %73
  %91 = phi i32 [ %89, %88 ], [ %75, %73 ]
  %92 = icmp eq i64 %76, 0
  br i1 %92, label %93, label %94

93:                                               ; preds = %90
  store i8 -1, i8* %78, align 2
  br label %118

94:                                               ; preds = %90
  %95 = and i8 %79, 32
  %96 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 5
  store i8 %95, i8* %96, align 1
  %97 = icmp eq i32 %91, -1
  br i1 %97, label %98, label %116

98:                                               ; preds = %13, %94
  %99 = phi i8 [ %19, %13 ], [ %79, %94 ]
  %100 = phi i8* [ %17, %13 ], [ %77, %94 ]
  %101 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 4
  %102 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 2
  %103 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 1
  %104 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 0
  %105 = load %struct.CborParser*, %struct.CborParser** %104, align 8
  %106 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %105, i64 0, i32 0
  %107 = load i8*, i8** %106, align 8
  %108 = icmp eq i8* %100, %107
  br i1 %108, label %116, label %109

109:                                              ; preds = %98
  %110 = load i8, i8* %100, align 1
  %111 = icmp eq i8 %110, -1
  br i1 %111, label %112, label %116

112:                                              ; preds = %109
  %113 = icmp eq i8 %99, -64
  br i1 %113, label %118, label %114

114:                                              ; preds = %112
  %115 = getelementptr inbounds i8, i8* %100, i64 1
  store i8* %115, i8** %103, align 8
  store i8 -1, i8* %101, align 2
  store i32 0, i32* %102, align 8
  br label %118

116:                                              ; preds = %109, %98, %94
  %117 = tail call fastcc i32 @preparse_value(%struct.CborValue* %1) #6
  br label %118

118:                                              ; preds = %93, %83, %68, %116, %114, %112
  %119 = phi i32 [ 0, %114 ], [ %117, %116 ], [ 258, %112 ], [ 0, %93 ], [ 1024, %83 ], [ 1024, %68 ]
  ret i32 %119
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_leave_container(%struct.CborValue* nocapture, %struct.CborValue* nocapture readonly) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 2
  %5 = or i8 %4, 32
  %6 = icmp eq i8 %5, -96
  tail call void @llvm.assume(i1 %6)
  %7 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 4
  %8 = load i8, i8* %7, align 2
  %9 = icmp eq i8 %8, -1
  tail call void @llvm.assume(i1 %9)
  %10 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %1, i64 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %14 = bitcast i8** %13 to i64*
  store i64 %12, i64* %14, align 8
  %15 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, -1
  %18 = inttoptr i64 %12 to i8*
  br i1 %17, label %19, label %23

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %21 = load i8, i8* %20, align 1
  %22 = xor i8 %21, 64
  store i8 %22, i8* %20, align 1
  br label %32

23:                                               ; preds = %2
  %24 = add i32 %16, -1
  store i32 %24, i32* %15, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  store i8 -1, i8* %3, align 2
  br label %49

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %29 = load i8, i8* %28, align 1
  %30 = xor i8 %29, 64
  store i8 %30, i8* %28, align 1
  %31 = icmp eq i32 %16, 0
  br i1 %31, label %32, label %47

32:                                               ; preds = %19, %27
  %33 = phi i8 [ %22, %19 ], [ %30, %27 ]
  %34 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 0
  %35 = load %struct.CborParser*, %struct.CborParser** %34, align 8
  %36 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %35, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = icmp eq i8* %37, %18
  br i1 %38, label %47, label %39

39:                                               ; preds = %32
  %40 = load i8, i8* %18, align 1
  %41 = icmp eq i8 %40, -1
  br i1 %41, label %42, label %47

42:                                               ; preds = %39
  %43 = and i8 %33, 96
  %44 = icmp eq i8 %43, 96
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %46, i8** %13, align 8
  store i8 -1, i8* %3, align 2
  store i32 0, i32* %15, align 8
  br label %49

47:                                               ; preds = %39, %32, %27
  %48 = tail call fastcc i32 @preparse_value(%struct.CborValue* %0) #6
  br label %49

49:                                               ; preds = %26, %42, %45, %47
  %50 = phi i32 [ 0, %26 ], [ 0, %45 ], [ %48, %47 ], [ 258, %42 ]
  ret i32 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_get_int64_checked(%struct.CborValue* nocapture readonly, i64* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 2
  %5 = icmp eq i8 %4, 0
  tail call void @llvm.assume(i1 %5)
  %6 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 1
  %8 = and i8 %7, 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %28, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load i8, i8* %12, align 1
  %14 = and i8 %13, 31
  %15 = icmp eq i8 %14, 26
  br i1 %15, label %18, label %16

16:                                               ; preds = %10
  %17 = icmp eq i8 %14, 27
  tail call void @llvm.assume(i1 %17) #6
  br label %18

18:                                               ; preds = %16, %10
  %19 = zext i8 %13 to i32
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %32

22:                                               ; preds = %18
  %23 = getelementptr inbounds i8, i8* %12, i64 1
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = tail call i32 @llvm.bswap.i32(i32 %25) #6
  %27 = zext i32 %26 to i64
  br label %40

28:                                               ; preds = %2
  %29 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 3
  %30 = load i16, i16* %29, align 4
  %31 = zext i16 %30 to i64
  br label %40

32:                                               ; preds = %18
  %33 = and i32 %19, 31
  %34 = icmp eq i32 %33, 27
  tail call void @llvm.assume(i1 %34) #6
  %35 = getelementptr inbounds i8, i8* %12, i64 1
  %36 = bitcast i8* %35 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = tail call i64 @llvm.bswap.i64(i64 %37) #6
  %39 = icmp slt i64 %38, 0
  br i1 %39, label %47, label %40, !prof !2

40:                                               ; preds = %22, %28, %32
  %41 = phi i64 [ %38, %32 ], [ %27, %22 ], [ %31, %28 ]
  store i64 %41, i64* %1, align 8
  %42 = load i8, i8* %6, align 1
  %43 = and i8 %42, 2
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %40
  %46 = xor i64 %41, -1
  store i64 %46, i64* %1, align 8
  br label %47

47:                                               ; preds = %45, %40, %32
  %48 = phi i32 [ 1024, %32 ], [ 0, %40 ], [ 0, %45 ]
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_get_int_checked(%struct.CborValue* nocapture readonly, i32* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 2
  %5 = icmp eq i8 %4, 0
  tail call void @llvm.assume(i1 %5)
  %6 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 1
  %8 = and i8 %7, 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %35, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load i8, i8* %12, align 1
  %14 = and i8 %13, 31
  %15 = icmp eq i8 %14, 26
  br i1 %15, label %18, label %16

16:                                               ; preds = %10
  %17 = icmp eq i8 %14, 27
  tail call void @llvm.assume(i1 %17) #6
  br label %18

18:                                               ; preds = %16, %10
  %19 = zext i8 %13 to i32
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %18
  %23 = getelementptr inbounds i8, i8* %12, i64 1
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = tail call i32 @llvm.bswap.i32(i32 %25) #6
  %27 = zext i32 %26 to i64
  br label %39

28:                                               ; preds = %18
  %29 = and i32 %19, 31
  %30 = icmp eq i32 %29, 27
  tail call void @llvm.assume(i1 %30) #6
  %31 = getelementptr inbounds i8, i8* %12, i64 1
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = tail call i64 @llvm.bswap.i64(i64 %33) #6
  br label %39

35:                                               ; preds = %2
  %36 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 3
  %37 = load i16, i16* %36, align 4
  %38 = zext i16 %37 to i64
  br label %39

39:                                               ; preds = %22, %28, %35
  %40 = phi i64 [ %38, %35 ], [ %27, %22 ], [ %34, %28 ]
  %41 = and i8 %7, 2
  %42 = icmp eq i8 %41, 0
  %43 = icmp ugt i64 %40, 2147483647
  br i1 %42, label %48, label %44

44:                                               ; preds = %39
  br i1 %43, label %53, label %45

45:                                               ; preds = %44
  %46 = trunc i64 %40 to i32
  %47 = xor i32 %46, -1
  br label %51

48:                                               ; preds = %39
  br i1 %43, label %53, label %49

49:                                               ; preds = %48
  %50 = trunc i64 %40 to i32
  br label %51

51:                                               ; preds = %49, %45
  %52 = phi i32 [ %50, %49 ], [ %47, %45 ]
  store i32 %52, i32* %1, align 4
  br label %53

53:                                               ; preds = %48, %44, %51
  %54 = phi i32 [ 0, %51 ], [ 1024, %44 ], [ 1024, %48 ]
  ret i32 %54
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_calculate_string_length(%struct.CborValue* nocapture readonly, i64* nocapture) local_unnamed_addr #2 {
  %3 = alloca %struct.CborValue, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i64 -1, i64* %1, align 8
  %6 = bitcast %struct.CborValue* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #6
  %7 = bitcast i8** %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 24, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %8 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %9 = load i8, i8* %8, align 2
  %10 = icmp eq i8 %9, 64
  br i1 %10, label %13, label %11

11:                                               ; preds = %2
  %12 = icmp eq i8 %9, 96
  tail call void @llvm.assume(i1 %12) #6
  br label %13

13:                                               ; preds = %11, %2
  %14 = bitcast %struct.CborValue* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 %14, i64 24, i1 false) #6
  %15 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #6
  store i64 -6148914691236517206, i64* %5, align 8
  %16 = call fastcc i32 @get_string_chunk(%struct.CborValue* nonnull %3, i8** nonnull %4, i64* nonnull %5) #6
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %41

18:                                               ; preds = %13, %34
  %19 = phi i8 [ %35, %34 ], [ 1, %13 ]
  %20 = phi i64 [ %27, %34 ], [ 0, %13 ]
  %21 = load i8*, i8** %4, align 8
  %22 = icmp eq i8* %21, null
  br i1 %22, label %38, label %23

23:                                               ; preds = %18
  %24 = load i64, i64* %5, align 8
  %25 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %20, i64 %24) #6
  %26 = extractvalue { i64, i1 } %25, 1
  %27 = extractvalue { i64, i1 } %25, 0
  br i1 %26, label %41, label %28, !prof !2

28:                                               ; preds = %23
  %29 = icmp eq i8 %19, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %28
  %31 = load i64, i64* %1, align 8
  %32 = icmp uge i64 %31, %27
  %33 = zext i1 %32 to i8
  br label %34

34:                                               ; preds = %30, %28
  %35 = phi i8 [ 0, %28 ], [ %33, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #6
  store i64 -6148914691236517206, i64* %5, align 8
  %36 = call fastcc i32 @get_string_chunk(%struct.CborValue* nonnull %3, i8** nonnull %4, i64* nonnull %5) #6
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %18, label %41

38:                                               ; preds = %18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6
  %39 = icmp eq i8 %19, 0
  store i64 %20, i64* %1, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #6
  %40 = select i1 %39, i32 -2147483648, i32 0
  br label %43

41:                                               ; preds = %23, %34, %13
  %42 = phi i32 [ %16, %13 ], [ 1024, %23 ], [ %36, %34 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #6
  br label %43

43:                                               ; preds = %38, %41
  %44 = phi i32 [ %42, %41 ], [ %40, %38 ]
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_cbor_value_copy_string(%struct.CborValue* nocapture readonly, i8*, i64* nocapture, %struct.CborValue*) local_unnamed_addr #2 {
  %5 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #6
  store i8 -86, i8* %5, align 1
  %6 = icmp eq i8* %1, null
  %7 = select i1 %6, i64 (i8*, i8*, i64)* @iterate_noop, i64 (i8*, i8*, i64)* @iterate_memcpy
  %8 = call fastcc i32 @iterate_string_chunks(%struct.CborValue* %0, i8* %1, i64* %2, i8* nonnull %5, %struct.CborValue* %3, i64 (i8*, i8*, i64)* nonnull %7)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %4
  %11 = load i8, i8* %5, align 1, !range !4
  %12 = icmp eq i8 %11, 0
  %13 = select i1 %12, i32 -2147483648, i32 0
  br label %14

14:                                               ; preds = %4, %10
  %15 = phi i32 [ %13, %10 ], [ %8, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #6
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_cbor_value_prepare_string_iteration(%struct.CborValue* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 1
  %4 = and i8 %3, 2
  %5 = icmp eq i8 %4, 0
  tail call void @llvm.assume(i1 %5)
  %6 = and i8 %3, 4
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %9 = load i8*, i8** %8, align 8
  br i1 %7, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds i8, i8* %9, i64 1
  store i8* %11, i8** %8, align 8
  %12 = or i8 %3, 2
  store i8 %12, i8* %2, align 1
  br label %13

13:                                               ; preds = %1, %10
  %14 = phi i8* [ %11, %10 ], [ %9, %1 ]
  %15 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 0
  %16 = load %struct.CborParser*, %struct.CborParser** %15, align 8
  %17 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %16, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = icmp eq i8* %14, %18
  %20 = select i1 %19, i32 257, i32 0
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_cbor_value_get_string_chunk(%struct.CborValue* nocapture readonly, i8** nocapture, i64* nocapture, %struct.CborValue*) local_unnamed_addr #2 {
  %5 = alloca %struct.CborValue, align 8
  %6 = bitcast %struct.CborValue* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #6
  %7 = icmp eq %struct.CborValue* %3, null
  %8 = select i1 %7, %struct.CborValue* %5, %struct.CborValue* %3
  %9 = bitcast %struct.CborValue* %8 to i8*
  %10 = bitcast %struct.CborValue* %0 to i8*
  %11 = bitcast %struct.CborValue* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false)
  %12 = call fastcc i32 @get_string_chunk(%struct.CborValue* %8, i8** %1, i64* %2)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #6
  ret i32 %12
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc i32 @get_string_chunk(%struct.CborValue* nocapture, i8** nocapture, i64* nocapture) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = and i8 %5, 2
  %7 = icmp eq i8 %6, 0
  %8 = and i8 %5, 4
  %9 = icmp eq i8 %8, 0
  br i1 %7, label %11, label %10

10:                                               ; preds = %3
  br i1 %9, label %31, label %17

11:                                               ; preds = %3
  br i1 %9, label %17, label %12

12:                                               ; preds = %11
  %13 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %15, i8** %13, align 8
  %16 = or i8 %5, 2
  store i8 %16, i8* %4, align 1
  br label %17

17:                                               ; preds = %12, %11, %10
  %18 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 0
  %21 = load %struct.CborParser*, %struct.CborParser** %20, align 8
  %22 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %21, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %19, %23
  %25 = ptrtoint i8* %23 to i64
  br i1 %24, label %131, label %26

26:                                               ; preds = %17
  %27 = load i8, i8* %19, align 1
  %28 = icmp eq i8 %27, -1
  br i1 %28, label %29, label %72

29:                                               ; preds = %26
  %30 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %30, i8** %18, align 8
  br label %31

31:                                               ; preds = %10, %29
  store i8* null, i8** %1, align 8
  store i64 0, i64* %2, align 8
  %32 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %33 = load i8, i8* %32, align 2
  %34 = icmp ne i8 %33, -64
  %35 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 2
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, -1
  %38 = xor i1 %34, true
  %39 = or i1 %37, %38
  br i1 %39, label %44, label %40

40:                                               ; preds = %31
  %41 = add i32 %36, -1
  store i32 %41, i32* %35, align 8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  store i8 -1, i8* %32, align 2
  br label %131

44:                                               ; preds = %40, %31
  %45 = phi i32 [ %36, %31 ], [ %41, %40 ]
  br i1 %34, label %46, label %49

46:                                               ; preds = %44
  %47 = load i8, i8* %4, align 1
  %48 = xor i8 %47, 64
  store i8 %48, i8* %4, align 1
  br label %49

49:                                               ; preds = %46, %44
  %50 = icmp eq i32 %45, -1
  br i1 %50, label %51, label %70

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 0
  %55 = load %struct.CborParser*, %struct.CborParser** %54, align 8
  %56 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %55, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = icmp eq i8* %53, %57
  br i1 %58, label %70, label %59

59:                                               ; preds = %51
  %60 = load i8, i8* %53, align 1
  %61 = icmp eq i8 %60, -1
  br i1 %61, label %62, label %70

62:                                               ; preds = %59
  %63 = load i8, i8* %4, align 1
  %64 = and i8 %63, 96
  %65 = icmp eq i8 %64, 96
  %66 = icmp eq i8 %33, -64
  %67 = or i1 %66, %65
  br i1 %67, label %131, label %68

68:                                               ; preds = %62
  %69 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %69, i8** %52, align 8
  store i8 -1, i8* %32, align 2
  store i32 0, i32* %35, align 8
  br label %131

70:                                               ; preds = %59, %51, %49
  %71 = tail call fastcc i32 @preparse_value(%struct.CborValue* %0) #6
  br label %131

72:                                               ; preds = %26
  %73 = and i8 %27, -32
  %74 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %75 = load i8, i8* %74, align 2
  %76 = icmp eq i8 %73, %75
  br i1 %76, label %77, label %131

77:                                               ; preds = %72
  %78 = and i8 %27, 31
  %79 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %79, i8** %18, align 8
  %80 = zext i8 %78 to i32
  %81 = icmp ult i8 %78, 24
  br i1 %81, label %82, label %84

82:                                               ; preds = %77
  %83 = zext i8 %78 to i64
  br label %116

84:                                               ; preds = %77
  %85 = icmp ugt i8 %78, 27
  br i1 %85, label %114, label %86, !prof !2

86:                                               ; preds = %84
  %87 = add nsw i32 %80, -24
  %88 = shl i32 1, %87
  %89 = sext i32 %88 to i64
  %90 = ptrtoint i8* %79 to i64
  %91 = sub i64 %25, %90
  %92 = icmp ult i64 %91, %89
  br i1 %92, label %114, label %93, !prof !2

93:                                               ; preds = %86
  switch i32 %80, label %107 [
    i32 24, label %94
    i32 25, label %97
    i32 26, label %102
  ]

94:                                               ; preds = %93
  %95 = load i8, i8* %79, align 1
  %96 = zext i8 %95 to i64
  br label %111

97:                                               ; preds = %93
  %98 = bitcast i8* %79 to i16*
  %99 = load i16, i16* %98, align 1
  %100 = tail call i16 @llvm.bswap.i16(i16 %99) #6
  %101 = zext i16 %100 to i64
  br label %111

102:                                              ; preds = %93
  %103 = bitcast i8* %79 to i32*
  %104 = load i32, i32* %103, align 1
  %105 = tail call i32 @llvm.bswap.i32(i32 %104) #6
  %106 = zext i32 %105 to i64
  br label %111

107:                                              ; preds = %93
  %108 = bitcast i8* %79 to i64*
  %109 = load i64, i64* %108, align 1
  %110 = tail call i64 @llvm.bswap.i64(i64 %109) #6
  br label %111

111:                                              ; preds = %107, %102, %97, %94
  %112 = phi i64 [ %110, %107 ], [ %106, %102 ], [ %101, %97 ], [ %96, %94 ]
  %113 = getelementptr inbounds i8, i8* %79, i64 %89
  store i8* %113, i8** %18, align 8
  br label %116

114:                                              ; preds = %84, %86
  %115 = phi i32 [ 257, %86 ], [ 261, %84 ]
  store i64 0, i64* %2, align 8
  br label %131

116:                                              ; preds = %111, %82
  %117 = phi i64 [ %83, %82 ], [ %112, %111 ]
  store i64 %117, i64* %2, align 8
  %118 = bitcast %struct.CborValue* %0 to i64**
  %119 = load i64*, i64** %118, align 8
  %120 = load i64, i64* %119, align 8
  %121 = load i8*, i8** %18, align 8
  %122 = ptrtoint i8* %121 to i64
  %123 = sub i64 %120, %122
  %124 = icmp ugt i64 %117, %123
  br i1 %124, label %131, label %125

125:                                              ; preds = %116
  store i8* %121, i8** %1, align 8
  %126 = load i64, i64* %2, align 8
  %127 = load i8*, i8** %18, align 8
  %128 = getelementptr inbounds i8, i8* %127, i64 %126
  store i8* %128, i8** %18, align 8
  %129 = load i8, i8* %4, align 1
  %130 = or i8 %129, 2
  store i8 %130, i8* %4, align 1
  br label %131

131:                                              ; preds = %114, %70, %68, %62, %43, %72, %116, %17, %125
  %132 = phi i32 [ 0, %125 ], [ 257, %17 ], [ %115, %114 ], [ 257, %116 ], [ 260, %72 ], [ 0, %43 ], [ 0, %68 ], [ %71, %70 ], [ 258, %62 ]
  ret i32 %132
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @iterate_string_chunks(%struct.CborValue* nocapture readonly, i8*, i64* nocapture, i8* nocapture, %struct.CborValue*, i64 (i8*, i8*, i64)* nocapture) unnamed_addr #2 {
  %7 = alloca %struct.CborValue, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca [1 x i8], align 1
  %11 = bitcast %struct.CborValue* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #6
  %12 = bitcast i8** %8 to i8*
  %13 = bitcast %struct.CborValue* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %14 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %15 = load i8, i8* %14, align 2
  %16 = icmp eq i8 %15, 64
  br i1 %16, label %19, label %17

17:                                               ; preds = %6
  %18 = icmp eq i8 %15, 96
  tail call void @llvm.assume(i1 %18)
  br label %19

19:                                               ; preds = %17, %6
  %20 = icmp eq %struct.CborValue* %4, null
  %21 = select i1 %20, %struct.CborValue* %7, %struct.CborValue* %4
  %22 = bitcast %struct.CborValue* %21 to i8*
  %23 = bitcast %struct.CborValue* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 24, i1 false)
  store i8 1, i8* %3, align 1
  %24 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #6
  store i64 -6148914691236517206, i64* %9, align 8
  %25 = call fastcc i32 @get_string_chunk(%struct.CborValue* %21, i8** nonnull %8, i64* nonnull %9)
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %47

27:                                               ; preds = %19, %49
  %28 = phi i64 [ %35, %49 ], [ 0, %19 ]
  %29 = load i8*, i8** %8, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %53, label %31

31:                                               ; preds = %27
  %32 = load i64, i64* %9, align 8
  %33 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %28, i64 %32) #6
  %34 = extractvalue { i64, i1 } %33, 1
  %35 = extractvalue { i64, i1 } %33, 0
  br i1 %34, label %47, label %36, !prof !2

36:                                               ; preds = %31
  %37 = load i8, i8* %3, align 1, !range !4
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %36
  %40 = load i64, i64* %2, align 8
  %41 = icmp ult i64 %40, %35
  br i1 %41, label %49, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds i8, i8* %1, i64 %28
  %44 = tail call i64 %5(i8* %43, i8* nonnull %29, i64 %32) #6, !callees !5
  %45 = icmp ne i64 %44, 0
  %46 = zext i1 %45 to i8
  br label %49

47:                                               ; preds = %31, %49, %19
  %48 = phi i32 [ %25, %19 ], [ %51, %49 ], [ 1024, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #6
  br label %66

49:                                               ; preds = %42, %39, %36
  %50 = phi i8 [ %46, %42 ], [ 0, %39 ], [ 0, %36 ]
  store i8 %50, i8* %3, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #6
  store i64 -6148914691236517206, i64* %9, align 8
  %51 = call fastcc i32 @get_string_chunk(%struct.CborValue* %21, i8** nonnull %8, i64* nonnull %9)
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %27, label %47

53:                                               ; preds = %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #6
  %54 = load i8, i8* %3, align 1, !range !4
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %65, label %56

56:                                               ; preds = %53
  %57 = load i64, i64* %2, align 8
  %58 = icmp ugt i64 %57, %28
  br i1 %58, label %59, label %65

59:                                               ; preds = %56
  %60 = getelementptr inbounds [1 x i8], [1 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %60) #6
  store i8 0, i8* %60, align 1
  %61 = getelementptr inbounds i8, i8* %1, i64 %28
  %62 = call i64 %5(i8* %61, i8* nonnull %60, i64 1) #6, !callees !5
  %63 = icmp ne i64 %62, 0
  %64 = zext i1 %63 to i8
  store i8 %64, i8* %3, align 1
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %60) #6
  br label %65

65:                                               ; preds = %53, %59, %56
  store i64 %28, i64* %2, align 8
  br label %66

66:                                               ; preds = %47, %65
  %67 = phi i32 [ 0, %65 ], [ %48, %47 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #6
  ret i32 %67
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @iterate_memcpy(i8*, i8* nocapture readonly, i64) #2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %2, i1 false)
  %4 = ptrtoint i8* %0 to i64
  ret i64 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @iterate_noop(i8* nocapture readnone, i8* nocapture readnone, i64) #3 {
  ret i64 1
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_text_string_equals(%struct.CborValue* nocapture readonly, i8* nocapture readonly, i8* nocapture) local_unnamed_addr #2 {
  %4 = alloca %struct.CborValue, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.CborValue, align 8
  %8 = bitcast %struct.CborValue* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #6
  %9 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %7, i64 0, i32 4
  %10 = bitcast %struct.CborValue* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 %10, i64 24, i1 false)
  br label %11

11:                                               ; preds = %13, %3
  %12 = load i8, i8* %9, align 2
  switch i8 %12, label %16 [
    i8 -64, label %13
    i8 96, label %17
  ]

13:                                               ; preds = %11
  %14 = call i32 @cbor_value_advance_fixed(%struct.CborValue* nonnull %7) #6
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %11, label %61

16:                                               ; preds = %11
  store i8 0, i8* %2, align 1
  br label %61

17:                                               ; preds = %11
  %18 = tail call i64 @strlen(i8* %1) #8
  %19 = bitcast %struct.CborValue* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #6
  %20 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* nonnull align 8 %8, i64 24, i1 false) #6
  store i8 1, i8* %2, align 1
  %21 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #6
  store i64 -6148914691236517206, i64* %6, align 8
  %22 = call fastcc i32 @get_string_chunk(%struct.CborValue* nonnull %4, i8** nonnull %5, i64* nonnull %6) #6
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %43

24:                                               ; preds = %17, %45
  %25 = phi i64 [ %32, %45 ], [ 0, %17 ]
  %26 = load i8*, i8** %5, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %49, label %28

28:                                               ; preds = %24
  %29 = load i64, i64* %6, align 8
  %30 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %25, i64 %29) #6
  %31 = extractvalue { i64, i1 } %30, 1
  %32 = extractvalue { i64, i1 } %30, 0
  br i1 %31, label %43, label %33, !prof !2

33:                                               ; preds = %28
  %34 = load i8, i8* %2, align 1, !range !4
  %35 = icmp eq i8 %34, 0
  %36 = icmp ult i64 %18, %32
  %37 = or i1 %36, %35
  br i1 %37, label %45, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds i8, i8* %1, i64 %25
  %40 = tail call i32 @bcmp(i8* %39, i8* nonnull %26, i64 %29) #6
  %41 = icmp eq i32 %40, 0
  %42 = zext i1 %41 to i8
  br label %45

43:                                               ; preds = %45, %28, %17
  %44 = phi i32 [ %22, %17 ], [ 1024, %28 ], [ %47, %45 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #6
  br label %59

45:                                               ; preds = %38, %33
  %46 = phi i8 [ %42, %38 ], [ 0, %33 ]
  store i8 %46, i8* %2, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #6
  store i64 -6148914691236517206, i64* %6, align 8
  %47 = call fastcc i32 @get_string_chunk(%struct.CborValue* nonnull %4, i8** nonnull %5, i64* nonnull %6) #6
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %24, label %43

49:                                               ; preds = %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #6
  %50 = load i8, i8* %2, align 1, !range !4
  %51 = icmp ne i8 %50, 0
  %52 = icmp ugt i64 %18, %25
  %53 = and i1 %52, %51
  br i1 %53, label %54, label %59

54:                                               ; preds = %49
  %55 = getelementptr inbounds i8, i8* %1, i64 %25
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 0
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %2, align 1
  br label %59

59:                                               ; preds = %49, %54, %43
  %60 = phi i32 [ %44, %43 ], [ 0, %54 ], [ 0, %49 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #6
  br label %61

61:                                               ; preds = %13, %59, %16
  %62 = phi i32 [ %60, %59 ], [ 0, %16 ], [ %14, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #6
  ret i32 %62
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_map_find_value(%struct.CborValue* nocapture readonly, i8* nocapture readonly, %struct.CborValue*) local_unnamed_addr #2 {
  %4 = alloca %struct.CborValue, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = tail call i64 @strlen(i8* %1) #8
  %8 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %9 = load i8, i8* %8, align 2
  %10 = icmp eq i8 %9, -96
  tail call void @llvm.assume(i1 %10)
  %11 = tail call i32 @cbor_value_enter_container(%struct.CborValue* %0, %struct.CborValue* %2)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %93

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 2
  %15 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 4
  %16 = bitcast %struct.CborValue* %4 to i8*
  %17 = bitcast i8** %5 to i8*
  %18 = icmp eq %struct.CborValue* %2, null
  %19 = select i1 %18, %struct.CborValue* %4, %struct.CborValue* %2
  %20 = bitcast %struct.CborValue* %19 to i8*
  %21 = bitcast %struct.CborValue* %2 to i8*
  %22 = bitcast i64* %6 to i8*
  br label %23

23:                                               ; preds = %13, %89
  %24 = load i32, i32* %14, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %92, label %26

26:                                               ; preds = %23, %28
  %27 = load i8, i8* %15, align 2
  switch i8 %27, label %71 [
    i8 -64, label %28
    i8 96, label %31
  ]

28:                                               ; preds = %26
  %29 = tail call i32 @cbor_value_advance_fixed(%struct.CborValue* %2) #6
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %26, label %93

31:                                               ; preds = %26
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 24, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 24, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #6
  store i64 -6148914691236517206, i64* %6, align 8
  %32 = call fastcc i32 @get_string_chunk(%struct.CborValue* %19, i8** nonnull %5, i64* nonnull %6) #6
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %69

34:                                               ; preds = %31, %53
  %35 = phi i8 [ %54, %53 ], [ 1, %31 ]
  %36 = phi i64 [ %43, %53 ], [ 0, %31 ]
  %37 = load i8*, i8** %5, align 8
  %38 = icmp eq i8* %37, null
  br i1 %38, label %57, label %39

39:                                               ; preds = %34
  %40 = load i64, i64* %6, align 8
  %41 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %36, i64 %40) #6
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  br i1 %42, label %69, label %44, !prof !2

44:                                               ; preds = %39
  %45 = icmp eq i8 %35, 0
  %46 = icmp ult i64 %7, %43
  %47 = or i1 %45, %46
  br i1 %47, label %53, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds i8, i8* %1, i64 %36
  %50 = tail call i32 @bcmp(i8* %49, i8* nonnull %37, i64 %40) #6
  %51 = icmp eq i32 %50, 0
  %52 = zext i1 %51 to i8
  br label %53

53:                                               ; preds = %48, %44
  %54 = phi i8 [ %52, %48 ], [ 0, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #6
  store i64 -6148914691236517206, i64* %6, align 8
  %55 = call fastcc i32 @get_string_chunk(%struct.CborValue* %19, i8** nonnull %5, i64* nonnull %6) #6
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %34, label %69

57:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #6
  %58 = icmp eq i8 %35, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #6
  br label %78

60:                                               ; preds = %57
  %61 = icmp ugt i64 %7, %36
  br i1 %61, label %63, label %62

62:                                               ; preds = %60
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #6
  br label %67

63:                                               ; preds = %60
  %64 = getelementptr inbounds i8, i8* %1, i64 %36
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #6
  br i1 %66, label %67, label %78

67:                                               ; preds = %63, %62
  %68 = tail call fastcc i32 @preparse_value(%struct.CborValue* %2)
  br label %96

69:                                               ; preds = %31, %53, %39
  %70 = phi i32 [ %55, %53 ], [ 1024, %39 ], [ %32, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #6
  br label %93

71:                                               ; preds = %26
  %72 = icmp ne i8 %27, -1
  tail call void @llvm.assume(i1 %72) #6
  %73 = load i32, i32* %14, align 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %93, label %75

75:                                               ; preds = %71
  %76 = tail call fastcc i32 @advance_recursive(%struct.CborValue* %2, i32 1024) #6
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %93

78:                                               ; preds = %63, %59, %75
  br label %79

79:                                               ; preds = %78, %82
  %80 = load i8, i8* %15, align 2
  %81 = icmp eq i8 %80, -64
  br i1 %81, label %82, label %85

82:                                               ; preds = %79
  %83 = tail call i32 @cbor_value_advance_fixed(%struct.CborValue* %2) #6
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %79, label %93

85:                                               ; preds = %79
  %86 = icmp ne i8 %80, -1
  tail call void @llvm.assume(i1 %86) #6
  %87 = load i32, i32* %14, align 8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %93, label %89

89:                                               ; preds = %85
  %90 = tail call fastcc i32 @advance_recursive(%struct.CborValue* %2, i32 1024) #6
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %23, label %93

92:                                               ; preds = %23
  store i8 -1, i8* %15, align 2
  br label %96

93:                                               ; preds = %85, %71, %89, %75, %28, %82, %69, %3
  %94 = phi i32 [ %11, %3 ], [ %70, %69 ], [ %83, %82 ], [ %29, %28 ], [ 3, %85 ], [ 3, %71 ], [ %76, %75 ], [ %90, %89 ]
  %95 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 4
  store i8 -1, i8* %95, align 2
  br label %96

96:                                               ; preds = %67, %93, %92
  %97 = phi i32 [ %94, %93 ], [ 0, %92 ], [ %68, %67 ]
  ret i32 %97
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_get_half_float(%struct.CborValue* nocapture readonly, i8* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 2
  %5 = icmp eq i8 %4, -7
  tail call void @llvm.assume(i1 %5)
  %6 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 1
  %9 = bitcast i8* %8 to i16*
  %10 = load i16, i16* %9, align 1
  %11 = tail call i16 @llvm.bswap.i16(i16 %10) #6
  %12 = bitcast i8* %1 to i16*
  store i16 %11, i16* %12, align 1
  ret i32 0
}

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #5

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #5

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #5

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #5

; Function Attrs: nounwind
declare void @llvm.assume(i1) #6

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { nofree nounwind readonly }
attributes #8 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
!5 = distinct !{null, i64 (i8*, i8*, i64)* @iterate_memcpy, i64 (i8*, i8*, i64)* @iterate_noop}
