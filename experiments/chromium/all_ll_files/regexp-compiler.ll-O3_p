; ModuleID = '../../v8/src/regexp/regexp-compiler.cc'
source_filename = "../../v8/src/regexp/regexp-compiler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::RegExpCompiler" = type { %"class.v8::internal::EndNode"*, i32, i32, i32, %"class.v8::internal::ZoneVector"*, i32, %"class.v8::internal::RegExpMacroAssembler"*, i8, i8, i8, i8, i8, i32, %"class.v8::internal::FrequencyCollator", %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"* }
%"class.v8::internal::EndNode" = type <{ %"class.v8::internal::RegExpNode", i32, [4 x i8] }>
%"class.v8::internal::RegExpNode" = type { i32 (...)**, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::Label", i8, %"struct.v8::internal::NodeInfo", %"struct.v8::internal::EatsAtLeastInfo", i32, [2 x %"class.v8::internal::BoyerMooreLookahead"*], %"class.v8::internal::Zone"* }
%"class.v8::internal::Label" = type { i32, i32 }
%"struct.v8::internal::NodeInfo" = type { i8 }
%"struct.v8::internal::EatsAtLeastInfo" = type { i8, i8 }
%"class.v8::internal::BoyerMooreLookahead" = type { i32, %"class.v8::internal::RegExpCompiler"*, i32, %"class.v8::internal::ZoneList.20"* }
%"class.v8::internal::ZoneList.20" = type { %"class.v8::internal::BoyerMoorePositionInfo"**, i32, i32 }
%"class.v8::internal::BoyerMoorePositionInfo" = type { %"class.std::__1::bitset", i32, i32 }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { [2 x i64] }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"**, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22", %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.v8::internal::RegExpNode"** }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::RegExpMacroAssembler" = type { i32 (...)**, i8, i32, i8, i32, %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"* }
%"class.v8::internal::FrequencyCollator" = type { [128 x %"class.v8::internal::FrequencyCollator::CharacterFrequency"], i32 }
%"class.v8::internal::FrequencyCollator::CharacterFrequency" = type { i32, i32 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.29", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.659", %"class.std::__1::unique_ptr.680", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.690", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.823", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.836", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.846", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.857", %"struct.std::__1::atomic.184", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.932", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.975"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.984", i32, i8, i8, i32, i32, %"class.std::__1::vector.990", %"class.std::__1::vector.990", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.997", i64, %"class.std::__1::unordered_map.998", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.555", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.192", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1054", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1092", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1126", %"class.std::__1::vector.1130", %"class.std::__1::vector.1130", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic.24", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__cxx_atomic_impl.26" }
%"struct.std::__1::__cxx_atomic_impl.26" = type { %"struct.std::__1::__cxx_atomic_base_impl.27" }
%"struct.std::__1::__cxx_atomic_base_impl.27" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic", i64, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic.58", %"class.std::__1::vector.62", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.178", %"class.std::__1::unique_ptr.178", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.193", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic", i64, i8, %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.197", %"class.std::__1::vector.197", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.204", %"class.std::__1::unique_ptr.210", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.340", %"class.std::__1::unique_ptr.346", %"class.std::__1::unique_ptr.352", %"class.std::__1::unique_ptr.391", %"class.std::__1::unique_ptr.430", %"class.std::__1::unique_ptr.460", %"class.std::__1::unique_ptr.466", %"class.std::__1::unique_ptr.476", %"class.std::__1::unique_ptr.482", %"class.std::__1::unique_ptr.482", %"class.std::__1::unique_ptr.488", %"class.std::__1::unique_ptr.494", %"class.std::__1::unique_ptr.494", %"class.std::__1::unique_ptr.500", %"class.std::__1::unique_ptr.506", %"class.std::__1::shared_ptr.512", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.517", %"class.std::__1::unique_ptr.543", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.549", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.562", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.362", i8, [7 x i8], %"class.std::__1::unordered_map.568", %"class.std::__1::unordered_map.594", %"class.std::__1::unordered_map.568", %"class.std::__1::unordered_map.618", %"class.std::__1::vector.646", i8, %"class.std::__1::unique_ptr.653", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.35", %"class.std::__1::__compressed_pair.43", %"class.std::__1::__compressed_pair.48", %"class.std::__1::__compressed_pair.50", [4 x i8] }>
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37", %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.53", %"struct.std::__1::atomic.53", %"struct.std::__1::atomic.53" }
%"struct.std::__1::atomic.53" = type { %"struct.std::__1::__atomic_base.54" }
%"struct.std::__1::__atomic_base.54" = type { %"struct.std::__1::__atomic_base.55" }
%"struct.std::__1::__atomic_base.55" = type { %"struct.std::__1::__cxx_atomic_impl.56" }
%"struct.std::__1::__cxx_atomic_impl.56" = type { %"struct.std::__1::__cxx_atomic_base_impl.57" }
%"struct.std::__1::__cxx_atomic_base_impl.57" = type { i64 }
%"struct.std::__1::atomic.58" = type { %"struct.std::__1::__atomic_base.59" }
%"struct.std::__1::__atomic_base.59" = type { %"struct.std::__1::__cxx_atomic_impl.60" }
%"struct.std::__1::__cxx_atomic_impl.60" = type { %"struct.std::__1::__cxx_atomic_base_impl.61" }
%"struct.std::__1::__cxx_atomic_base_impl.61" = type { i32 }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.64" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.135" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic"*, %"class.std::__1::unique_ptr.129" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.69", %"class.std::__1::vector.69", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.71" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.76" }
%"class.std::__1::__hash_table.76" = type <{ %"class.std::__1::unique_ptr.77", %"class.std::__1::__compressed_pair.87", %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.94", [4 x i8] }>
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79", %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"struct.std::__1::__hash_node_base.80"** }
%"struct.std::__1::__hash_node_base.80" = type { %"struct.std::__1::__hash_node_base.80"* }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.std::__1::__bucket_list_deallocator.82" }
%"class.std::__1::__bucket_list_deallocator.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"struct.std::__1::__hash_node_base.80" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic", %"struct.std::__1::atomic.53", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set.110"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.118", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.53", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.53", %"struct.std::__1::atomic.99", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.99" = type { %"struct.std::__1::__atomic_base.100" }
%"struct.std::__1::__atomic_base.100" = type { %"struct.std::__1::__cxx_atomic_impl.101" }
%"struct.std::__1::__cxx_atomic_impl.101" = type { %"struct.std::__1::__cxx_atomic_base_impl.102" }
%"struct.std::__1::__cxx_atomic_base_impl.102" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.103" }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.105" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set.110" = type { %"class.std::__1::__tree.111" }
%"class.std::__1::__tree.111" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.112", %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::atomic.118" = type { %"struct.std::__1::__atomic_base.119" }
%"struct.std::__1::__atomic_base.119" = type { %"struct.std::__1::__cxx_atomic_impl.120" }
%"struct.std::__1::__cxx_atomic_impl.120" = type { %"struct.std::__1::__cxx_atomic_base_impl.121" }
%"struct.std::__1::__cxx_atomic_base_impl.121" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.122", i8, [7 x i8] }>
%"class.std::__1::vector.122" = type { %"class.std::__1::__vector_base.123" }
%"class.std::__1::__vector_base.123" = type { i64*, i64*, %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.129" = type { %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"struct.std::__1::pair.137"*, %"struct.std::__1::pair.137"*, %"class.std::__1::__compressed_pair.138" }
%"struct.std::__1::pair.137" = type { i32, i64 }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"struct.std::__1::pair.137"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic", i64, %"struct.std::__1::atomic" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic", i32, %"struct.std::__1::atomic", %"class.v8::base::Mutex", %"struct.std::__1::atomic" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.143" }
%"class.std::__1::unordered_map.143" = type { %"class.std::__1::__hash_table.144" }
%"class.std::__1::__hash_table.144" = type <{ %"class.std::__1::unique_ptr.145", %"class.std::__1::__compressed_pair.155", %"class.std::__1::__compressed_pair.160", %"class.std::__1::__compressed_pair.165", [4 x i8] }>
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147", %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"struct.std::__1::__hash_node_base.148"** }
%"struct.std::__1::__hash_node_base.148" = type { %"struct.std::__1::__hash_node_base.148"* }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.std::__1::__bucket_list_deallocator.150" }
%"class.std::__1::__bucket_list_deallocator.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"struct.std::__1::__hash_node_base.148" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.171", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.171" = type { %"class.std::__1::__vector_base.172" }
%"class.std::__1::__vector_base.172" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.173" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1059", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1063", %"class.std::__1::unique_ptr.1069", %"class.std::__1::unique_ptr.506", %"class.std::__1::vector.1075", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1059" = type { %"struct.std::__1::__atomic_base.1060" }
%"struct.std::__1::__atomic_base.1060" = type { %"struct.std::__1::__cxx_atomic_impl.1061" }
%"struct.std::__1::__cxx_atomic_impl.1061" = type { %"struct.std::__1::__cxx_atomic_base_impl.1062" }
%"struct.std::__1::__cxx_atomic_base_impl.1062" = type { i32 }
%"class.std::__1::unique_ptr.1063" = type { %"class.std::__1::__compressed_pair.1064" }
%"class.std::__1::__compressed_pair.1064" = type { %"struct.std::__1::__compressed_pair_elem.1065" }
%"struct.std::__1::__compressed_pair_elem.1065" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.816" }
%"class.std::__1::vector.816" = type { %"class.std::__1::__vector_base.817" }
%"class.std::__1::__vector_base.817" = type { i64**, i64**, %"class.std::__1::__compressed_pair.818" }
%"class.std::__1::__compressed_pair.818" = type { %"struct.std::__1::__compressed_pair_elem.819" }
%"struct.std::__1::__compressed_pair_elem.819" = type { i64** }
%"class.std::__1::unique_ptr.1069" = type { %"class.std::__1::__compressed_pair.1070" }
%"class.std::__1::__compressed_pair.1070" = type { %"struct.std::__1::__compressed_pair_elem.1071" }
%"struct.std::__1::__compressed_pair_elem.1071" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.816", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1075" = type { %"class.std::__1::__vector_base.1076" }
%"class.std::__1::__vector_base.1076" = type { %"struct.std::__1::pair.1077"*, %"struct.std::__1::pair.1077"*, %"class.std::__1::__compressed_pair.1078" }
%"struct.std::__1::pair.1077" = type opaque
%"class.std::__1::__compressed_pair.1078" = type { %"struct.std::__1::__compressed_pair_elem.1079" }
%"struct.std::__1::__compressed_pair_elem.1079" = type { %"struct.std::__1::pair.1077"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.184", %"struct.std::__1::atomic.188", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.188" = type { %"struct.std::__1::__atomic_base.189" }
%"struct.std::__1::__atomic_base.189" = type { %"struct.std::__1::__cxx_atomic_impl.190" }
%"struct.std::__1::__cxx_atomic_impl.190" = type { %"struct.std::__1::__cxx_atomic_base_impl.191" }
%"struct.std::__1::__cxx_atomic_base_impl.191" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.192" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.193" = type { %"struct.std::__1::__atomic_base.194" }
%"struct.std::__1::__atomic_base.194" = type { %"struct.std::__1::__cxx_atomic_impl.195" }
%"struct.std::__1::__cxx_atomic_impl.195" = type { %"struct.std::__1::__cxx_atomic_base_impl.196" }
%"struct.std::__1::__cxx_atomic_base_impl.196" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::vector.197" = type { %"class.std::__1::__vector_base.198" }
%"class.std::__1::__vector_base.198" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.199" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.204" = type { %"class.std::__1::__compressed_pair.205" }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.210" = type { %"class.std::__1::__compressed_pair.211" }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.212" }
%"struct.std::__1::__compressed_pair_elem.212" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.252", %"class.std::__1::unique_ptr.258", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.312", %"class.std::__1::vector.312", %"class.std::__1::vector.312", %"class.std::__1::vector.319", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.213", %"class.std::__1::vector.214", %"class.std::__1::vector.221", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.213" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.214" = type { %"class.std::__1::__vector_base.215" }
%"class.std::__1::__vector_base.215" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.216" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.221" = type { %"class.std::__1::__vector_base.222" }
%"class.std::__1::__vector_base.222" = type { %"class.std::__1::unique_ptr.223"*, %"class.std::__1::unique_ptr.223"*, %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::unique_ptr.223" = type opaque
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"class.std::__1::unique_ptr.223"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.229", %"class.v8::internal::Worklist.231", %"class.v8::internal::Worklist.231", %"class.v8::internal::Worklist.231", %"class.v8::internal::Worklist.233", %"class.v8::internal::Worklist.235", %"class.v8::internal::Worklist.237", %"class.v8::internal::Worklist.239", %"class.v8::internal::Worklist.241", %"class.v8::internal::Worklist.243" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.229" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.231" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.233" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.235" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.237" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.239" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.241" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.243" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.245", i8, i64 }
%"class.std::__1::vector.245" = type { %"class.std::__1::__vector_base.246" }
%"class.std::__1::__vector_base.246" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.248" }
%"struct.std::__1::__compressed_pair_elem.248" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.252" = type { %"class.std::__1::__compressed_pair.253" }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.254" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.261" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.213"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.261" = type { %"class.std::__1::__hash_table.262" }
%"class.std::__1::__hash_table.262" = type <{ %"class.std::__1::unique_ptr.263", %"class.std::__1::__compressed_pair.273", %"class.std::__1::__compressed_pair.278", %"class.std::__1::__compressed_pair.281", [4 x i8] }>
%"class.std::__1::unique_ptr.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.265", %"struct.std::__1::__compressed_pair_elem.267" }
%"struct.std::__1::__compressed_pair_elem.265" = type { %"struct.std::__1::__hash_node_base.266"** }
%"struct.std::__1::__hash_node_base.266" = type { %"struct.std::__1::__hash_node_base.266"* }
%"struct.std::__1::__compressed_pair_elem.267" = type { %"class.std::__1::__bucket_list_deallocator.268" }
%"class.std::__1::__bucket_list_deallocator.268" = type { %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.274" }
%"struct.std::__1::__compressed_pair_elem.274" = type { %"struct.std::__1::__hash_node_base.266" }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.288" }
%"class.std::__1::unordered_map.288" = type { %"class.std::__1::__hash_table.289" }
%"class.std::__1::__hash_table.289" = type <{ %"class.std::__1::unique_ptr.290", %"class.std::__1::__compressed_pair.300", %"class.std::__1::__compressed_pair.305", %"class.std::__1::__compressed_pair.308", [4 x i8] }>
%"class.std::__1::unique_ptr.290" = type { %"class.std::__1::__compressed_pair.291" }
%"class.std::__1::__compressed_pair.291" = type { %"struct.std::__1::__compressed_pair_elem.292", %"struct.std::__1::__compressed_pair_elem.294" }
%"struct.std::__1::__compressed_pair_elem.292" = type { %"struct.std::__1::__hash_node_base.293"** }
%"struct.std::__1::__hash_node_base.293" = type { %"struct.std::__1::__hash_node_base.293"* }
%"struct.std::__1::__compressed_pair_elem.294" = type { %"class.std::__1::__bucket_list_deallocator.295" }
%"class.std::__1::__bucket_list_deallocator.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"struct.std::__1::__hash_node_base.293" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::vector.312" = type { %"class.std::__1::__vector_base.313" }
%"class.std::__1::__vector_base.313" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.314" }
%"class.std::__1::__compressed_pair.314" = type { %"struct.std::__1::__compressed_pair_elem.315" }
%"struct.std::__1::__compressed_pair_elem.315" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.319" = type { %"class.std::__1::__vector_base.320" }
%"class.std::__1::__vector_base.320" = type { %"struct.std::__1::pair.321"*, %"struct.std::__1::pair.321"*, %"class.std::__1::__compressed_pair.322" }
%"struct.std::__1::pair.321" = type opaque
%"class.std::__1::__compressed_pair.322" = type { %"struct.std::__1::__compressed_pair_elem.323" }
%"struct.std::__1::__compressed_pair_elem.323" = type { %"struct.std::__1::pair.321"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.327", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.312"], [3 x %"class.std::__1::vector.312"], i8, %"struct.std::__1::atomic.184", [6 x i8], %"class.std::__1::vector.312", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.327" = type { %"class.std::__1::__compressed_pair.328" }
%"class.std::__1::__compressed_pair.328" = type { %"struct.std::__1::__compressed_pair_elem.329" }
%"struct.std::__1::__compressed_pair_elem.329" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.337"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.312", %"class.std::__1::vector.312", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.337" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.340" = type { %"class.std::__1::__compressed_pair.341" }
%"class.std::__1::__compressed_pair.341" = type { %"struct.std::__1::__compressed_pair_elem.342" }
%"struct.std::__1::__compressed_pair_elem.342" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.346" = type { %"class.std::__1::__compressed_pair.347" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.348" }
%"struct.std::__1::__compressed_pair_elem.348" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.352" = type { %"class.std::__1::__compressed_pair.353" }
%"class.std::__1::__compressed_pair.353" = type { %"struct.std::__1::__compressed_pair_elem.354" }
%"struct.std::__1::__compressed_pair_elem.354" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.362", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.355"], %"class.std::__1::unique_ptr.327" }
%"class.std::__1::vector.355" = type { %"class.std::__1::__vector_base.356" }
%"class.std::__1::__vector_base.356" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.357" }
%"class.std::__1::__compressed_pair.357" = type { %"struct.std::__1::__compressed_pair_elem.358" }
%"struct.std::__1::__compressed_pair_elem.358" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.391" = type { %"class.std::__1::__compressed_pair.392" }
%"class.std::__1::__compressed_pair.392" = type { %"struct.std::__1::__compressed_pair_elem.393" }
%"struct.std::__1::__compressed_pair_elem.393" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.394", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.398", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.403" }
%"struct.std::__1::atomic.394" = type { %"struct.std::__1::__atomic_base.395" }
%"struct.std::__1::__atomic_base.395" = type { %"struct.std::__1::__cxx_atomic_impl.396" }
%"struct.std::__1::__cxx_atomic_impl.396" = type { %"struct.std::__1::__cxx_atomic_base_impl.397" }
%"struct.std::__1::__cxx_atomic_base_impl.397" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.398" = type { %"struct.std::__1::__atomic_base.399" }
%"struct.std::__1::__atomic_base.399" = type { %"struct.std::__1::__cxx_atomic_impl.400" }
%"struct.std::__1::__cxx_atomic_impl.400" = type { %"struct.std::__1::__cxx_atomic_base_impl.401" }
%"struct.std::__1::__cxx_atomic_base_impl.401" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.403" = type { %"class.std::__1::__hash_table.404" }
%"class.std::__1::__hash_table.404" = type <{ %"class.std::__1::unique_ptr.405", %"class.std::__1::__compressed_pair.415", %"class.std::__1::__compressed_pair.420", %"class.std::__1::__compressed_pair.423", [4 x i8] }>
%"class.std::__1::unique_ptr.405" = type { %"class.std::__1::__compressed_pair.406" }
%"class.std::__1::__compressed_pair.406" = type { %"struct.std::__1::__compressed_pair_elem.407", %"struct.std::__1::__compressed_pair_elem.409" }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"struct.std::__1::__hash_node_base.408"** }
%"struct.std::__1::__hash_node_base.408" = type { %"struct.std::__1::__hash_node_base.408"* }
%"struct.std::__1::__compressed_pair_elem.409" = type { %"class.std::__1::__bucket_list_deallocator.410" }
%"class.std::__1::__bucket_list_deallocator.410" = type { %"class.std::__1::__compressed_pair.411" }
%"class.std::__1::__compressed_pair.411" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.415" = type { %"struct.std::__1::__compressed_pair_elem.416" }
%"struct.std::__1::__compressed_pair_elem.416" = type { %"struct.std::__1::__hash_node_base.408" }
%"class.std::__1::__compressed_pair.420" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unique_ptr.430" = type { %"class.std::__1::__compressed_pair.431" }
%"class.std::__1::__compressed_pair.431" = type { %"struct.std::__1::__compressed_pair_elem.432" }
%"struct.std::__1::__compressed_pair_elem.432" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.327", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic", %"struct.std::__1::atomic.184", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.433", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.433" = type { %"class.std::__1::__hash_table.434" }
%"class.std::__1::__hash_table.434" = type <{ %"class.std::__1::unique_ptr.435", %"class.std::__1::__compressed_pair.445", %"class.std::__1::__compressed_pair.450", %"class.std::__1::__compressed_pair.453", [4 x i8] }>
%"class.std::__1::unique_ptr.435" = type { %"class.std::__1::__compressed_pair.436" }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.437", %"struct.std::__1::__compressed_pair_elem.439" }
%"struct.std::__1::__compressed_pair_elem.437" = type { %"struct.std::__1::__hash_node_base.438"** }
%"struct.std::__1::__hash_node_base.438" = type { %"struct.std::__1::__hash_node_base.438"* }
%"struct.std::__1::__compressed_pair_elem.439" = type { %"class.std::__1::__bucket_list_deallocator.440" }
%"class.std::__1::__bucket_list_deallocator.440" = type { %"class.std::__1::__compressed_pair.441" }
%"class.std::__1::__compressed_pair.441" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"struct.std::__1::__hash_node_base.438" }
%"class.std::__1::__compressed_pair.450" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unique_ptr.460" = type { %"class.std::__1::__compressed_pair.461" }
%"class.std::__1::__compressed_pair.461" = type { %"struct.std::__1::__compressed_pair_elem.462" }
%"struct.std::__1::__compressed_pair_elem.462" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.466" = type { %"class.std::__1::__compressed_pair.467" }
%"class.std::__1::__compressed_pair.467" = type { %"struct.std::__1::__compressed_pair_elem.468" }
%"struct.std::__1::__compressed_pair_elem.468" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.469" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.476" = type { %"class.std::__1::__compressed_pair.477" }
%"class.std::__1::__compressed_pair.477" = type { %"struct.std::__1::__compressed_pair_elem.478" }
%"struct.std::__1::__compressed_pair_elem.478" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.482" = type { %"class.std::__1::__compressed_pair.483" }
%"class.std::__1::__compressed_pair.483" = type { %"struct.std::__1::__compressed_pair_elem.484" }
%"struct.std::__1::__compressed_pair_elem.484" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.488" = type { %"class.std::__1::__compressed_pair.489" }
%"class.std::__1::__compressed_pair.489" = type { %"struct.std::__1::__compressed_pair_elem.490" }
%"struct.std::__1::__compressed_pair_elem.490" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.494" = type { %"class.std::__1::__compressed_pair.495" }
%"class.std::__1::__compressed_pair.495" = type { %"struct.std::__1::__compressed_pair_elem.496" }
%"struct.std::__1::__compressed_pair_elem.496" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.500" = type { %"class.std::__1::__compressed_pair.501" }
%"class.std::__1::__compressed_pair.501" = type { %"struct.std::__1::__compressed_pair_elem.502" }
%"struct.std::__1::__compressed_pair_elem.502" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.506" = type { %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.508" }
%"struct.std::__1::__compressed_pair_elem.508" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.512" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.513", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.2", %"class.v8::internal::VirtualMemory" }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.11" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::set.11" = type { %"class.std::__1::__tree.12" }
%"class.std::__1::__tree.12" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::atomic.513" = type { %"struct.std::__1::__atomic_base.514" }
%"struct.std::__1::__atomic_base.514" = type { %"struct.std::__1::__cxx_atomic_impl.515" }
%"struct.std::__1::__cxx_atomic_impl.515" = type { %"struct.std::__1::__cxx_atomic_base_impl.516" }
%"struct.std::__1::__cxx_atomic_base_impl.516" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.517" = type { %"class.std::__1::__hash_table.518" }
%"class.std::__1::__hash_table.518" = type <{ %"class.std::__1::unique_ptr.519", %"class.std::__1::__compressed_pair.529", %"class.std::__1::__compressed_pair.534", %"class.std::__1::__compressed_pair.537", [4 x i8] }>
%"class.std::__1::unique_ptr.519" = type { %"class.std::__1::__compressed_pair.520" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.521", %"struct.std::__1::__compressed_pair_elem.523" }
%"struct.std::__1::__compressed_pair_elem.521" = type { %"struct.std::__1::__hash_node_base.522"** }
%"struct.std::__1::__hash_node_base.522" = type { %"struct.std::__1::__hash_node_base.522"* }
%"struct.std::__1::__compressed_pair_elem.523" = type { %"class.std::__1::__bucket_list_deallocator.524" }
%"class.std::__1::__bucket_list_deallocator.524" = type { %"class.std::__1::__compressed_pair.525" }
%"class.std::__1::__compressed_pair.525" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.529" = type { %"struct.std::__1::__compressed_pair_elem.530" }
%"struct.std::__1::__compressed_pair_elem.530" = type { %"struct.std::__1::__hash_node_base.522" }
%"class.std::__1::__compressed_pair.534" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.537" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unique_ptr.543" = type { %"class.std::__1::__compressed_pair.544" }
%"class.std::__1::__compressed_pair.544" = type { %"struct.std::__1::__compressed_pair_elem.545" }
%"struct.std::__1::__compressed_pair_elem.545" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.549" = type { %"class.std::__1::__compressed_pair.550" }
%"class.std::__1::__compressed_pair.550" = type { %"struct.std::__1::__compressed_pair_elem.551" }
%"struct.std::__1::__compressed_pair_elem.551" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.555", %"class.std::__1::vector.555" }
%"class.std::__1::unique_ptr.562" = type { %"class.std::__1::__compressed_pair.563" }
%"class.std::__1::__compressed_pair.563" = type { %"struct.std::__1::__compressed_pair_elem.564" }
%"struct.std::__1::__compressed_pair_elem.564" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.362" = type { %"class.std::__1::__hash_table.363" }
%"class.std::__1::__hash_table.363" = type <{ %"class.std::__1::unique_ptr.364", %"class.std::__1::__compressed_pair.374", %"class.std::__1::__compressed_pair.379", %"class.std::__1::__compressed_pair.383", [4 x i8] }>
%"class.std::__1::unique_ptr.364" = type { %"class.std::__1::__compressed_pair.365" }
%"class.std::__1::__compressed_pair.365" = type { %"struct.std::__1::__compressed_pair_elem.366", %"struct.std::__1::__compressed_pair_elem.368" }
%"struct.std::__1::__compressed_pair_elem.366" = type { %"struct.std::__1::__hash_node_base.367"** }
%"struct.std::__1::__hash_node_base.367" = type { %"struct.std::__1::__hash_node_base.367"* }
%"struct.std::__1::__compressed_pair_elem.368" = type { %"class.std::__1::__bucket_list_deallocator.369" }
%"class.std::__1::__bucket_list_deallocator.369" = type { %"class.std::__1::__compressed_pair.370" }
%"class.std::__1::__compressed_pair.370" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.std::__1::__hash_node_base.367" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unordered_map.594" = type { %"class.std::__1::__hash_table.595" }
%"class.std::__1::__hash_table.595" = type <{ %"class.std::__1::unique_ptr.596", %"class.std::__1::__compressed_pair.606", %"class.std::__1::__compressed_pair.611", %"class.std::__1::__compressed_pair.614", [4 x i8] }>
%"class.std::__1::unique_ptr.596" = type { %"class.std::__1::__compressed_pair.597" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.598", %"struct.std::__1::__compressed_pair_elem.600" }
%"struct.std::__1::__compressed_pair_elem.598" = type { %"struct.std::__1::__hash_node_base.599"** }
%"struct.std::__1::__hash_node_base.599" = type { %"struct.std::__1::__hash_node_base.599"* }
%"struct.std::__1::__compressed_pair_elem.600" = type { %"class.std::__1::__bucket_list_deallocator.601" }
%"class.std::__1::__bucket_list_deallocator.601" = type { %"class.std::__1::__compressed_pair.602" }
%"class.std::__1::__compressed_pair.602" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.606" = type { %"struct.std::__1::__compressed_pair_elem.607" }
%"struct.std::__1::__compressed_pair_elem.607" = type { %"struct.std::__1::__hash_node_base.599" }
%"class.std::__1::__compressed_pair.611" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.614" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unordered_map.568" = type { %"class.std::__1::__hash_table.569" }
%"class.std::__1::__hash_table.569" = type <{ %"class.std::__1::unique_ptr.570", %"class.std::__1::__compressed_pair.580", %"class.std::__1::__compressed_pair.585", %"class.std::__1::__compressed_pair.588", [4 x i8] }>
%"class.std::__1::unique_ptr.570" = type { %"class.std::__1::__compressed_pair.571" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.572", %"struct.std::__1::__compressed_pair_elem.574" }
%"struct.std::__1::__compressed_pair_elem.572" = type { %"struct.std::__1::__hash_node_base.573"** }
%"struct.std::__1::__hash_node_base.573" = type { %"struct.std::__1::__hash_node_base.573"* }
%"struct.std::__1::__compressed_pair_elem.574" = type { %"class.std::__1::__bucket_list_deallocator.575" }
%"class.std::__1::__bucket_list_deallocator.575" = type { %"class.std::__1::__compressed_pair.576" }
%"class.std::__1::__compressed_pair.576" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.580" = type { %"struct.std::__1::__compressed_pair_elem.581" }
%"struct.std::__1::__compressed_pair_elem.581" = type { %"struct.std::__1::__hash_node_base.573" }
%"class.std::__1::__compressed_pair.585" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unordered_map.618" = type { %"class.std::__1::__hash_table.619" }
%"class.std::__1::__hash_table.619" = type <{ %"class.std::__1::unique_ptr.620", %"class.std::__1::__compressed_pair.630", %"class.std::__1::__compressed_pair.635", %"class.std::__1::__compressed_pair.640", [4 x i8] }>
%"class.std::__1::unique_ptr.620" = type { %"class.std::__1::__compressed_pair.621" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.622", %"struct.std::__1::__compressed_pair_elem.624" }
%"struct.std::__1::__compressed_pair_elem.622" = type { %"struct.std::__1::__hash_node_base.623"** }
%"struct.std::__1::__hash_node_base.623" = type { %"struct.std::__1::__hash_node_base.623"* }
%"struct.std::__1::__compressed_pair_elem.624" = type { %"class.std::__1::__bucket_list_deallocator.625" }
%"class.std::__1::__bucket_list_deallocator.625" = type { %"class.std::__1::__compressed_pair.626" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.630" = type { %"struct.std::__1::__compressed_pair_elem.631" }
%"struct.std::__1::__compressed_pair_elem.631" = type { %"struct.std::__1::__hash_node_base.623" }
%"class.std::__1::__compressed_pair.635" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::vector.646" = type { %"class.std::__1::__vector_base.647" }
%"class.std::__1::__vector_base.647" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.648" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.648" = type { %"struct.std::__1::__compressed_pair_elem.649" }
%"struct.std::__1::__compressed_pair_elem.649" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.653" = type { %"class.std::__1::__compressed_pair.654" }
%"class.std::__1::__compressed_pair.654" = type { %"struct.std::__1::__compressed_pair_elem.655" }
%"struct.std::__1::__compressed_pair_elem.655" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.555" }
%"class.std::__1::shared_ptr.659" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.171", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.660", %"class.std::__1::unique_ptr.674" }
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.663" }
%"class.std::__1::vector.663" = type { %"class.std::__1::__vector_base.664" }
%"class.std::__1::__vector_base.664" = type { %"class.std::__1::unique_ptr.665"*, %"class.std::__1::unique_ptr.665"*, %"class.std::__1::__compressed_pair.666" }
%"class.std::__1::unique_ptr.665" = type { %"class.std::__1::__compressed_pair.1154" }
%"class.std::__1::__compressed_pair.1154" = type { %"struct.std::__1::__compressed_pair_elem.1155" }
%"struct.std::__1::__compressed_pair_elem.1155" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.666" = type { %"struct.std::__1::__compressed_pair_elem.667" }
%"struct.std::__1::__compressed_pair_elem.667" = type { %"class.std::__1::unique_ptr.665"* }
%"class.std::__1::unique_ptr.674" = type { %"class.std::__1::__compressed_pair.675" }
%"class.std::__1::__compressed_pair.675" = type { %"struct.std::__1::__compressed_pair_elem.676" }
%"struct.std::__1::__compressed_pair_elem.676" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.680" = type { %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.683", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.683" = type { %"struct.std::__1::__atomic_base.684" }
%"struct.std::__1::__atomic_base.684" = type { %"struct.std::__1::__cxx_atomic_impl.685" }
%"struct.std::__1::__cxx_atomic_impl.685" = type { %"struct.std::__1::__cxx_atomic_base_impl.686" }
%"struct.std::__1::__cxx_atomic_base_impl.686" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.690" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.691", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.691" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.692", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.692" = type { %"class.std::__1::__vector_base.693" }
%"class.std::__1::__vector_base.693" = type { %"class.std::__1::unique_ptr.694"*, %"class.std::__1::unique_ptr.694"*, %"class.std::__1::__compressed_pair.695" }
%"class.std::__1::unique_ptr.694" = type opaque
%"class.std::__1::__compressed_pair.695" = type { %"struct.std::__1::__compressed_pair_elem.696" }
%"struct.std::__1::__compressed_pair_elem.696" = type { %"class.std::__1::unique_ptr.694"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.700", %"class.std::__1::unique_ptr.706", %"struct.std::__1::atomic.184", %"class.std::__1::unique_ptr.712", %"class.std::__1::unique_ptr.718", %"class.std::__1::unique_ptr.724", %"class.std::__1::unique_ptr.730", %"class.std::__1::unique_ptr.736", %"class.std::__1::set.742", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.700" = type { %"class.std::__1::__compressed_pair.701" }
%"class.std::__1::__compressed_pair.701" = type { %"struct.std::__1::__compressed_pair_elem.702" }
%"struct.std::__1::__compressed_pair_elem.702" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.706" = type { %"class.std::__1::__compressed_pair.707" }
%"class.std::__1::__compressed_pair.707" = type { %"struct.std::__1::__compressed_pair_elem.708" }
%"struct.std::__1::__compressed_pair_elem.708" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.712" = type { %"class.std::__1::__compressed_pair.713" }
%"class.std::__1::__compressed_pair.713" = type { %"struct.std::__1::__compressed_pair_elem.714" }
%"struct.std::__1::__compressed_pair_elem.714" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.718" = type { %"class.std::__1::__compressed_pair.719" }
%"class.std::__1::__compressed_pair.719" = type { %"struct.std::__1::__compressed_pair_elem.720" }
%"struct.std::__1::__compressed_pair_elem.720" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.724" = type { %"class.std::__1::__compressed_pair.725" }
%"class.std::__1::__compressed_pair.725" = type { %"struct.std::__1::__compressed_pair_elem.726" }
%"struct.std::__1::__compressed_pair_elem.726" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.730" = type { %"class.std::__1::__compressed_pair.731" }
%"class.std::__1::__compressed_pair.731" = type { %"struct.std::__1::__compressed_pair_elem.732" }
%"struct.std::__1::__compressed_pair_elem.732" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.736" = type { %"class.std::__1::__compressed_pair.737" }
%"class.std::__1::__compressed_pair.737" = type { %"struct.std::__1::__compressed_pair_elem.738" }
%"struct.std::__1::__compressed_pair_elem.738" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.742" = type { %"class.std::__1::__tree.743" }
%"class.std::__1::__tree.743" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.744", %"class.std::__1::__compressed_pair.748" }
%"class.std::__1::__compressed_pair.744" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.748" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.751" }
%"class.v8::internal::TaggedImpl.751" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.750" }
%"class.v8::internal::TaggedImpl.750" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.752", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.752" = type { %"class.std::__1::__compressed_pair.753" }
%"class.std::__1::__compressed_pair.753" = type { %"struct.std::__1::__compressed_pair_elem.754" }
%"struct.std::__1::__compressed_pair_elem.754" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.758", %"class.v8::internal::DetachableVector.759", %"class.v8::internal::DetachableVector.758", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.759" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.758" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.760", %"class.std::__1::vector.766", %"class.std::__1::unique_ptr.773", %"class.std::__1::vector.780", %"class.std::__1::unique_ptr.787", i64, %"class.std::__1::vector.793", %"class.std::__1::vector.801", %"class.std::__1::vector.809", i8, i8, i32 }
%"class.std::__1::unique_ptr.760" = type { %"class.std::__1::__compressed_pair.761" }
%"class.std::__1::__compressed_pair.761" = type { %"struct.std::__1::__compressed_pair_elem.762" }
%"struct.std::__1::__compressed_pair_elem.762" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.766" = type { %"class.std::__1::__vector_base.767" }
%"class.std::__1::__vector_base.767" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.768" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.768" = type { %"struct.std::__1::__compressed_pair_elem.769" }
%"struct.std::__1::__compressed_pair_elem.769" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.773" = type { %"class.std::__1::__compressed_pair.774" }
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.775" }
%"struct.std::__1::__compressed_pair_elem.775" = type { %"class.v8::internal::GlobalHandles::NodeSpace.776"* }
%"class.v8::internal::GlobalHandles::NodeSpace.776" = type opaque
%"class.std::__1::vector.780" = type { %"class.std::__1::__vector_base.781" }
%"class.std::__1::__vector_base.781" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.782" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.782" = type { %"struct.std::__1::__compressed_pair_elem.783" }
%"struct.std::__1::__compressed_pair_elem.783" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.787" = type { %"class.std::__1::__compressed_pair.788" }
%"class.std::__1::__compressed_pair.788" = type { %"struct.std::__1::__compressed_pair_elem.789" }
%"struct.std::__1::__compressed_pair_elem.789" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.793" = type { %"class.std::__1::__vector_base.794" }
%"class.std::__1::__vector_base.794" = type { %"struct.std::__1::pair.795"*, %"struct.std::__1::pair.795"*, %"class.std::__1::__compressed_pair.796" }
%"struct.std::__1::pair.795" = type opaque
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { %"struct.std::__1::pair.795"* }
%"class.std::__1::vector.801" = type { %"class.std::__1::__vector_base.802" }
%"class.std::__1::__vector_base.802" = type { %"struct.std::__1::pair.803"*, %"struct.std::__1::pair.803"*, %"class.std::__1::__compressed_pair.804" }
%"struct.std::__1::pair.803" = type opaque
%"class.std::__1::__compressed_pair.804" = type { %"struct.std::__1::__compressed_pair_elem.805" }
%"struct.std::__1::__compressed_pair_elem.805" = type { %"struct.std::__1::pair.803"* }
%"class.std::__1::vector.809" = type { %"class.std::__1::__vector_base.810" }
%"class.std::__1::__vector_base.810" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.811" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.811" = type { %"struct.std::__1::__compressed_pair_elem.812" }
%"struct.std::__1::__compressed_pair_elem.812" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.816", %"class.std::__1::vector.823" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.830" }
%"class.std::__1::unique_ptr.830" = type { %"class.std::__1::__compressed_pair.831" }
%"class.std::__1::__compressed_pair.831" = type { %"struct.std::__1::__compressed_pair_elem.832" }
%"struct.std::__1::__compressed_pair_elem.832" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.823" = type { %"class.std::__1::__vector_base.824" }
%"class.std::__1::__vector_base.824" = type { i32*, i32*, %"class.std::__1::__compressed_pair.825" }
%"class.std::__1::__compressed_pair.825" = type { %"struct.std::__1::__compressed_pair_elem.826" }
%"struct.std::__1::__compressed_pair_elem.826" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.836" = type { %"struct.std::__1::__atomic_base.837" }
%"struct.std::__1::__atomic_base.837" = type { %"struct.std::__1::__cxx_atomic_impl.838" }
%"struct.std::__1::__cxx_atomic_impl.838" = type { %"struct.std::__1::__cxx_atomic_base_impl.839" }
%"struct.std::__1::__cxx_atomic_base_impl.839" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.846" = type { %"struct.std::__1::__atomic_base.847" }
%"struct.std::__1::__atomic_base.847" = type { %"struct.std::__1::__cxx_atomic_impl.848" }
%"struct.std::__1::__cxx_atomic_impl.848" = type { %"struct.std::__1::__cxx_atomic_base_impl.849" }
%"struct.std::__1::__cxx_atomic_base_impl.849" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.851" }
%"class.std::__1::__compressed_pair.851" = type { %"struct.std::__1::__compressed_pair_elem.852" }
%"struct.std::__1::__compressed_pair_elem.852" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.853 }
%union.anon.853 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.857" = type { %"class.std::__1::__hash_table.858" }
%"class.std::__1::__hash_table.858" = type <{ %"class.std::__1::unique_ptr.859", %"class.std::__1::__compressed_pair.869", %"class.std::__1::__compressed_pair.874", %"class.std::__1::__compressed_pair.877", [4 x i8] }>
%"class.std::__1::unique_ptr.859" = type { %"class.std::__1::__compressed_pair.860" }
%"class.std::__1::__compressed_pair.860" = type { %"struct.std::__1::__compressed_pair_elem.861", %"struct.std::__1::__compressed_pair_elem.863" }
%"struct.std::__1::__compressed_pair_elem.861" = type { %"struct.std::__1::__hash_node_base.862"** }
%"struct.std::__1::__hash_node_base.862" = type { %"struct.std::__1::__hash_node_base.862"* }
%"struct.std::__1::__compressed_pair_elem.863" = type { %"class.std::__1::__bucket_list_deallocator.864" }
%"class.std::__1::__bucket_list_deallocator.864" = type { %"class.std::__1::__compressed_pair.865" }
%"class.std::__1::__compressed_pair.865" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.870" }
%"struct.std::__1::__compressed_pair_elem.870" = type { %"struct.std::__1::__hash_node_base.862" }
%"class.std::__1::__compressed_pair.874" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.877" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::atomic.184" = type { %"struct.std::__1::__atomic_base.185" }
%"struct.std::__1::__atomic_base.185" = type { %"struct.std::__1::__cxx_atomic_impl.186" }
%"struct.std::__1::__cxx_atomic_impl.186" = type { %"struct.std::__1::__cxx_atomic_base_impl.187" }
%"struct.std::__1::__cxx_atomic_base_impl.187" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.883", %"class.v8::internal::Handle.889", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.890", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.889" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.890" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.891", %"class.std::__1::vector.897", %"class.std::__1::unique_ptr.905", %"class.std::__1::unique_ptr.911", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.917", %"class.std::__1::vector.923", %"struct.std::__1::pair.931" }
%"class.std::__1::unique_ptr.891" = type { %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.897" = type { %"class.std::__1::__vector_base.898" }
%"class.std::__1::__vector_base.898" = type { %"class.std::__1::unique_ptr.899"*, %"class.std::__1::unique_ptr.899"*, %"class.std::__1::__compressed_pair.900" }
%"class.std::__1::unique_ptr.899" = type opaque
%"class.std::__1::__compressed_pair.900" = type { %"struct.std::__1::__compressed_pair_elem.901" }
%"struct.std::__1::__compressed_pair_elem.901" = type { %"class.std::__1::unique_ptr.899"* }
%"class.std::__1::unique_ptr.905" = type { %"class.std::__1::__compressed_pair.906" }
%"class.std::__1::__compressed_pair.906" = type { %"struct.std::__1::__compressed_pair_elem.907" }
%"struct.std::__1::__compressed_pair_elem.907" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.911" = type { %"class.std::__1::__compressed_pair.912" }
%"class.std::__1::__compressed_pair.912" = type { %"struct.std::__1::__compressed_pair_elem.913" }
%"struct.std::__1::__compressed_pair_elem.913" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.917" = type { %"class.std::__1::__compressed_pair.918" }
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.923" = type { %"class.std::__1::__vector_base.924" }
%"class.std::__1::__vector_base.924" = type { %"struct.std::__1::pair.925"*, %"struct.std::__1::pair.925"*, %"class.std::__1::__compressed_pair.926" }
%"struct.std::__1::pair.925" = type opaque
%"class.std::__1::__compressed_pair.926" = type { %"struct.std::__1::__compressed_pair_elem.927" }
%"struct.std::__1::__compressed_pair_elem.927" = type { %"struct.std::__1::pair.925"* }
%"struct.std::__1::pair.931" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.28"*, i16, i8*)*, i8* }
%"class.v8::Local.28" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.932" = type { %"class.std::__1::__compressed_pair.933" }
%"class.std::__1::__compressed_pair.933" = type { %"struct.std::__1::__compressed_pair_elem.934" }
%"struct.std::__1::__compressed_pair_elem.934" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.935", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.935" = type { %"class.std::__1::__hash_table.936" }
%"class.std::__1::__hash_table.936" = type <{ %"class.std::__1::unique_ptr.937", %"class.std::__1::__compressed_pair.947", %"class.std::__1::__compressed_pair.952", %"class.std::__1::__compressed_pair.956", [4 x i8] }>
%"class.std::__1::unique_ptr.937" = type { %"class.std::__1::__compressed_pair.938" }
%"class.std::__1::__compressed_pair.938" = type { %"struct.std::__1::__compressed_pair_elem.939", %"struct.std::__1::__compressed_pair_elem.941" }
%"struct.std::__1::__compressed_pair_elem.939" = type { %"struct.std::__1::__hash_node_base.940"** }
%"struct.std::__1::__hash_node_base.940" = type { %"struct.std::__1::__hash_node_base.940"* }
%"struct.std::__1::__compressed_pair_elem.941" = type { %"class.std::__1::__bucket_list_deallocator.942" }
%"class.std::__1::__bucket_list_deallocator.942" = type { %"class.std::__1::__compressed_pair.943" }
%"class.std::__1::__compressed_pair.943" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.947" = type { %"struct.std::__1::__compressed_pair_elem.948" }
%"struct.std::__1::__compressed_pair_elem.948" = type { %"struct.std::__1::__hash_node_base.940" }
%"class.std::__1::__compressed_pair.952" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.956" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.970" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.964"**, %"struct.std::__1::pair.964"**, %"struct.std::__1::pair.964"**, %"class.std::__1::__compressed_pair.965" }
%"struct.std::__1::pair.964" = type opaque
%"class.std::__1::__compressed_pair.965" = type { %"struct.std::__1::__compressed_pair_elem.966" }
%"struct.std::__1::__compressed_pair_elem.966" = type { %"struct.std::__1::pair.964"** }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.975" = type { %"class.std::__1::__vector_base.976" }
%"class.std::__1::__vector_base.976" = type { %"class.v8::internal::Handle.977"*, %"class.v8::internal::Handle.977"*, %"class.std::__1::__compressed_pair.978" }
%"class.v8::internal::Handle.977" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.978" = type { %"struct.std::__1::__compressed_pair_elem.979" }
%"struct.std::__1::__compressed_pair_elem.979" = type { %"class.v8::internal::Handle.977"* }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector.983", [128 x i8] }
%"class.v8::internal::Vector.983" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.841", i32, %"class.v8::Local.28" }
%"class.v8::Local.841" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.984" = type { %"class.std::__1::__compressed_pair.985" }
%"class.std::__1::__compressed_pair.985" = type { %"struct.std::__1::__compressed_pair_elem.986" }
%"struct.std::__1::__compressed_pair_elem.986" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.990" = type { %"class.std::__1::__vector_base.991" }
%"class.std::__1::__vector_base.991" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.992" }
%"class.std::__1::__compressed_pair.992" = type { %"struct.std::__1::__compressed_pair_elem.993" }
%"struct.std::__1::__compressed_pair_elem.993" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.997" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.998" = type { %"class.std::__1::__hash_table.999" }
%"class.std::__1::__hash_table.999" = type <{ %"class.std::__1::unique_ptr.1000", %"class.std::__1::__compressed_pair.1010", %"class.std::__1::__compressed_pair.1015", %"class.std::__1::__compressed_pair.1018", [4 x i8] }>
%"class.std::__1::unique_ptr.1000" = type { %"class.std::__1::__compressed_pair.1001" }
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.1002", %"struct.std::__1::__compressed_pair_elem.1004" }
%"struct.std::__1::__compressed_pair_elem.1002" = type { %"struct.std::__1::__hash_node_base.1003"** }
%"struct.std::__1::__hash_node_base.1003" = type { %"struct.std::__1::__hash_node_base.1003"* }
%"struct.std::__1::__compressed_pair_elem.1004" = type { %"class.std::__1::__bucket_list_deallocator.1005" }
%"class.std::__1::__bucket_list_deallocator.1005" = type { %"class.std::__1::__compressed_pair.1006" }
%"class.std::__1::__compressed_pair.1006" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1010" = type { %"struct.std::__1::__compressed_pair_elem.1011" }
%"struct.std::__1::__compressed_pair_elem.1011" = type { %"struct.std::__1::__hash_node_base.1003" }
%"class.std::__1::__compressed_pair.1015" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1018" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.555" = type { %"class.std::__1::__vector_base.556" }
%"class.std::__1::__vector_base.556" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.192" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1022", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1051", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1052", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1022" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1047, %union.anon.1049, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1047 = type { i64 }
%union.anon.1049 = type { i64 }
%"class.std::__1::weak_ptr.1051" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1052" = type { %"class.v8::PersistentBase.1053" }
%"class.v8::PersistentBase.1053" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1023", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1023" = type { %"class.std::__1::__hash_table.1024" }
%"class.std::__1::__hash_table.1024" = type <{ %"class.std::__1::unique_ptr.1025", %"class.std::__1::__compressed_pair.1035", %"class.std::__1::__compressed_pair.1040", %"class.std::__1::__compressed_pair.1043", [4 x i8] }>
%"class.std::__1::unique_ptr.1025" = type { %"class.std::__1::__compressed_pair.1026" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.1027", %"struct.std::__1::__compressed_pair_elem.1029" }
%"struct.std::__1::__compressed_pair_elem.1027" = type { %"struct.std::__1::__hash_node_base.1028"** }
%"struct.std::__1::__hash_node_base.1028" = type { %"struct.std::__1::__hash_node_base.1028"* }
%"struct.std::__1::__compressed_pair_elem.1029" = type { %"class.std::__1::__bucket_list_deallocator.1030" }
%"class.std::__1::__bucket_list_deallocator.1030" = type { %"class.std::__1::__compressed_pair.1031" }
%"class.std::__1::__compressed_pair.1031" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1035" = type { %"struct.std::__1::__compressed_pair_elem.1036" }
%"struct.std::__1::__compressed_pair_elem.1036" = type { %"struct.std::__1::__hash_node_base.1028" }
%"class.std::__1::__compressed_pair.1040" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1043" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1054" = type { %"class.std::__1::__compressed_pair.1055" }
%"class.std::__1::__compressed_pair.1055" = type { %"struct.std::__1::__compressed_pair_elem.1056" }
%"struct.std::__1::__compressed_pair_elem.1056" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1083", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1083" = type { %"class.std::__1::__compressed_pair.1084" }
%"class.std::__1::__compressed_pair.1084" = type { %"struct.std::__1::__compressed_pair_elem.1085" }
%"struct.std::__1::__compressed_pair_elem.1085" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1092" = type { %"class.std::__1::__compressed_pair.1093" }
%"class.std::__1::__compressed_pair.1093" = type { %"struct.std::__1::__compressed_pair_elem.1094" }
%"struct.std::__1::__compressed_pair_elem.1094" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.842", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.842" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1100" }
%"class.std::__1::unordered_map.1100" = type { %"class.std::__1::__hash_table.1101" }
%"class.std::__1::__hash_table.1101" = type <{ %"class.std::__1::unique_ptr.1102", %"class.std::__1::__compressed_pair.1112", %"class.std::__1::__compressed_pair.1117", %"class.std::__1::__compressed_pair.1120", [4 x i8] }>
%"class.std::__1::unique_ptr.1102" = type { %"class.std::__1::__compressed_pair.1103" }
%"class.std::__1::__compressed_pair.1103" = type { %"struct.std::__1::__compressed_pair_elem.1104", %"struct.std::__1::__compressed_pair_elem.1106" }
%"struct.std::__1::__compressed_pair_elem.1104" = type { %"struct.std::__1::__hash_node_base.1105"** }
%"struct.std::__1::__hash_node_base.1105" = type { %"struct.std::__1::__hash_node_base.1105"* }
%"struct.std::__1::__compressed_pair_elem.1106" = type { %"class.std::__1::__bucket_list_deallocator.1107" }
%"class.std::__1::__bucket_list_deallocator.1107" = type { %"class.std::__1::__compressed_pair.1108" }
%"class.std::__1::__compressed_pair.1108" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1112" = type { %"struct.std::__1::__compressed_pair_elem.1113" }
%"struct.std::__1::__compressed_pair_elem.1113" = type { %"struct.std::__1::__hash_node_base.1105" }
%"class.std::__1::__compressed_pair.1117" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1120" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.1126" = type { %"struct.std::__1::__atomic_base.1127" }
%"struct.std::__1::__atomic_base.1127" = type { %"struct.std::__1::__cxx_atomic_impl.1128" }
%"struct.std::__1::__cxx_atomic_impl.1128" = type { %"struct.std::__1::__cxx_atomic_base_impl.1129" }
%"struct.std::__1::__cxx_atomic_base_impl.1129" = type { %"class.std::__1::vector.1130"* }
%"class.std::__1::vector.1130" = type { %"class.std::__1::__vector_base.1131" }
%"class.std::__1::__vector_base.1131" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1132" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1132" = type { %"struct.std::__1::__compressed_pair_elem.1133" }
%"struct.std::__1::__compressed_pair_elem.1133" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::GreedyLoopState" = type { %"class.v8::internal::Label", %"class.v8::internal::Trace" }
%"class.v8::internal::Trace" = type { i32, %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Label"*, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::Label"*, i32, i32, %"class.v8::internal::QuickCheckDetails", i32, i32 }
%"class.v8::internal::Trace::DeferredAction" = type { i32, i32, %"class.v8::internal::Trace::DeferredAction"* }
%"class.v8::internal::QuickCheckDetails" = type <{ i32, [4 x %"struct.v8::internal::QuickCheckDetails::Position"], i32, i32, i8, [3 x i8] }>
%"struct.v8::internal::QuickCheckDetails::Position" = type <{ i32, i32, i8, [3 x i8] }>
%"class.v8::internal::RegExpTree" = type { i32 (...)** }
%"class.v8::internal::RegExpText" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList", i32, [4 x i8] }>
%"class.v8::internal::ZoneList" = type { %"class.v8::internal::TextElement"*, i32, i32 }
%"class.v8::internal::TextElement" = type { i32, i32, %"class.v8::internal::RegExpTree"* }
%"class.v8::internal::RegExpAtom" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::Vector", %"class.v8::base::Flags", [4 x i8] }>
%"class.v8::internal::Vector" = type { i16*, i64 }
%"class.v8::base::Flags" = type { i32 }
%"class.v8::internal::RegExpCharacterClass" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::CharacterSet", %"class.v8::base::Flags", %"class.v8::base::Flags.19" }
%"class.v8::internal::CharacterSet" = type <{ %"class.v8::internal::ZoneList.18"*, i16, [6 x i8] }>
%"class.v8::internal::ZoneList.18" = type { %"class.v8::internal::CharacterRange"*, i32, i32 }
%"class.v8::internal::CharacterRange" = type { i32, i32 }
%"class.v8::base::Flags.19" = type { i32 }
%"struct.v8::internal::RegExpCompiler::CompilationResult" = type <{ i32, [4 x i8], %"class.v8::internal::Handle.1138", i32, [4 x i8] }>
%"class.v8::internal::Handle.1138" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DynamicBitSet" = type { i32, %"class.v8::internal::ZoneList.1139"* }
%"class.v8::internal::ZoneList.1139" = type { i32*, i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.v8::internal::NegativeSubmatchSuccess" = type { %"class.v8::internal::EndNode.base", i32, i32, i32, i32, [4 x i8] }
%"class.v8::internal::EndNode.base" = type <{ %"class.v8::internal::RegExpNode", i32 }>
%"class.v8::internal::GuardedAlternative" = type { %"class.v8::internal::RegExpNode"*, %"class.v8::internal::ZoneList.1140"* }
%"class.v8::internal::ZoneList.1140" = type { %"class.v8::internal::Guard"**, i32, i32 }
%"class.v8::internal::Guard" = type { i32, i32, i32 }
%"class.v8::internal::ActionNode" = type <{ %"class.v8::internal::SeqRegExpNode", %union.anon.1141, i32, [4 x i8] }>
%"class.v8::internal::SeqRegExpNode" = type { %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* }
%union.anon.1141 = type { %struct.anon.1145 }
%struct.anon.1145 = type { i32, i32, i32, i32 }
%"class.v8::internal::NodeVisitor" = type { i32 (...)** }
%"class.v8::internal::ChoiceNode" = type <{ %"class.v8::internal::RegExpNode", %"class.v8::internal::ZoneList.1148"*, i8, i8, [6 x i8] }>
%"class.v8::internal::ZoneList.1148" = type { %"class.v8::internal::GuardedAlternative"*, i32, i32 }
%"class.v8::internal::LoopChoiceNode" = type { %"class.v8::internal::ChoiceNode.base", %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"*, i8, i8, i8, i32 }
%"class.v8::internal::ChoiceNode.base" = type <{ %"class.v8::internal::RegExpNode", %"class.v8::internal::ZoneList.1148"*, i8, i8 }>
%"class.v8::internal::NegativeLookaroundChoiceNode" = type { %"class.v8::internal::ChoiceNode.base", [6 x i8] }
%"class.v8::internal::BackReferenceNode" = type <{ %"class.v8::internal::SeqRegExpNode", i32, i32, %"class.v8::base::Flags", i8, [3 x i8] }>
%"class.v8::internal::AssertionNode" = type <{ %"class.v8::internal::SeqRegExpNode", i32, [4 x i8] }>
%"class.v8::internal::TextNode" = type <{ %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::ZoneList"*, i8, [7 x i8] }>
%"class.icu_69::UnicodeString" = type { %"class.icu_69::Replaceable", %"union.icu_69::UnicodeString::StackBufferOrFields" }
%"class.icu_69::Replaceable" = type { %"class.icu_69::UObject" }
%"class.icu_69::UObject" = type { i32 (...)** }
%"union.icu_69::UnicodeString::StackBufferOrFields" = type { %struct.anon.1163, [32 x i8] }
%struct.anon.1163 = type { i16, i32, i32, i16* }
%"class.icu_69::UnicodeSet" = type <{ %"class.icu_69::UnicodeFilter", i32*, i32, i32, i8, [7 x i8], %"class.icu_69::BMPSet"*, i32*, i32, [4 x i8], i16*, i32, [4 x i8], %"class.icu_69::UVector"*, %"class.icu_69::UnicodeSetStringSpan"*, [25 x i32], [4 x i8] }>
%"class.icu_69::UnicodeFilter" = type { %"class.icu_69::UnicodeFunctor", %"class.icu_69::UnicodeMatcher" }
%"class.icu_69::UnicodeFunctor" = type { %"class.icu_69::UObject" }
%"class.icu_69::UnicodeMatcher" = type { i32 (...)** }
%"class.icu_69::BMPSet" = type opaque
%"class.icu_69::UVector" = type opaque
%"class.icu_69::UnicodeSetStringSpan" = type opaque
%"struct.v8::internal::PreloadState" = type { i8, i8, i32, i32 }
%"class.v8::internal::AlternativeGenerationList" = type { %"class.v8::internal::ZoneList.1150", [10 x %"class.v8::internal::AlternativeGeneration"] }
%"class.v8::internal::ZoneList.1150" = type { %"class.v8::internal::AlternativeGeneration"**, i32, i32 }
%"class.v8::internal::AlternativeGeneration" = type { %"class.v8::internal::Label", i8, %"class.v8::internal::Label", %"class.v8::internal::QuickCheckDetails" }
%"class.v8::internal::Interval" = type { i32, i32 }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.v8::internal::Trace::DeferredCapture" = type <{ %"class.v8::internal::Trace::DeferredAction", i32, i8, [3 x i8] }>
%"class.v8::internal::Trace::DeferredIncrementRegister" = type { %"class.v8::internal::Trace::DeferredAction" }
%"class.v8::internal::Trace::DeferredSetRegisterForLoop" = type <{ %"class.v8::internal::Trace::DeferredAction", i32, [4 x i8] }>
%"class.v8::internal::Trace::DeferredClearCaptures" = type { %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Interval" }
%"class.v8::internal::Analysis" = type { %"class.v8::internal::NodeVisitor", %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::RegExpLookaround::Builder" = type { i8, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"*, i32, i32 }
%"struct.v8::internal::RegExpCompileData" = type <{ %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::Handle.1138", i8, i8, [6 x i8], %"class.v8::internal::Handle.1151", i32, i32, i32, i32, i32, [4 x i8] }>
%"class.v8::internal::Handle.1151" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::RegExpDisjunction" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList.1152"*, i32, i32 }
%"class.v8::internal::ZoneList.1152" = type opaque
%"class.v8::internal::RegExpAlternative" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList.1152"*, i32, i32 }
%"class.v8::internal::RegExpAssertion" = type { %"class.v8::internal::RegExpTree", i32, %"class.v8::base::Flags" }
%"class.v8::internal::RegExpQuantifier" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.v8::internal::RegExpCapture" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i32, i32, i32, %"class.v8::internal::ZoneVector.1153"* }
%"class.v8::internal::ZoneVector.1153" = type opaque
%"class.v8::internal::RegExpGroup" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i32, i32 }
%"class.v8::internal::RegExpLookaround" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i8, i32, i32, i32 }
%"class.v8::internal::RegExpBackReference" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::ZoneVector.1153"*, %"class.v8::base::Flags", [4 x i8] }>
%"class.v8::internal::RegExpEmpty" = type { %"class.v8::internal::RegExpTree" }
%"class.std::__1::__bit_iterator.1166" = type <{ i64*, i32, [4 x i8] }>

$_ZN2v88internal10RegExpText10AddElementENS0_11TextElementEPNS0_4ZoneE = comdat any

$_ZN2v88internal17FrequencyCollatorC2Ev = comdat any

$_ZN2v88internal13DynamicBitSet3SetEjPNS0_4ZoneE = comdat any

$_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_ = comdat any

$_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_ = comdat any

$_ZN2v88internal25AlternativeGenerationListC2EiPNS0_4ZoneE = comdat any

$_ZN2v88internal11NodeVisitorD2Ev = comdat any

$_ZN2v88internal4Zone3NewINS0_10ChoiceNodeEJiPS1_EEEPT_DpOT0_ = comdat any

$_ZN2v88internal10RegExpTreeD2Ev = comdat any

$_ZN2v88internal10RegExpTreeD0Ev = comdat any

$_ZN2v88internal10RegExpTree13IsTextElementEv = comdat any

$_ZN2v88internal10RegExpTree17IsAnchoredAtStartEv = comdat any

$_ZN2v88internal10RegExpTree15IsAnchoredAtEndEv = comdat any

$_ZN2v88internal10RegExpTree16CaptureRegistersEv = comdat any

$_ZN2v88internal10RegExpNode20GreedyLoopTextLengthEv = comdat any

$_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE = comdat any

$_ZN2v88internal10RegExpNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb = comdat any

$_ZN2v88internal10RegExpNode13FilterOneByteEi = comdat any

$_ZN2v88internal13SeqRegExpNodeD0Ev = comdat any

$_ZN2v88internal13SeqRegExpNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb = comdat any

$_ZN2v88internal10ActionNodeD0Ev = comdat any

$_ZN2v88internal10ActionNode20GreedyLoopTextLengthEv = comdat any

$_ZN2v88internal8TextNodeD0Ev = comdat any

$_ZN2v88internal13AssertionNodeD0Ev = comdat any

$_ZN2v88internal17BackReferenceNodeD0Ev = comdat any

$_ZN2v88internal17BackReferenceNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib = comdat any

$_ZN2v88internal7EndNodeD0Ev = comdat any

$_ZN2v88internal7EndNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib = comdat any

$_ZN2v88internal7EndNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb = comdat any

$_ZN2v88internal23NegativeSubmatchSuccessD0Ev = comdat any

$_ZN2v88internal10ChoiceNodeD0Ev = comdat any

$_ZN2v88internal10ChoiceNode39try_to_emit_quick_check_for_alternativeEb = comdat any

$_ZN2v88internal10ChoiceNode13read_backwardEv = comdat any

$_ZN2v88internal28NegativeLookaroundChoiceNodeD0Ev = comdat any

$_ZN2v88internal28NegativeLookaroundChoiceNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb = comdat any

$_ZN2v88internal28NegativeLookaroundChoiceNode39try_to_emit_quick_check_for_alternativeEb = comdat any

$_ZN2v88internal14LoopChoiceNodeD0Ev = comdat any

$_ZN2v88internal14LoopChoiceNode13read_backwardEv = comdat any

$_ZNSt3__16bitsetILm128EErSEm = comdat any

$_ZNSt3__116__copy_unalignedINS_8__bitsetILm2ELm128EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_ = comdat any

$_ZN2v88internal8TextNodeC2EPNS0_20RegExpCharacterClassEbPNS0_10RegExpNodeE = comdat any

@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@_ZN2v88internal24FLAG_regexp_optimizationE = external local_unnamed_addr global i8, align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"unimplemented code\00", align 1
@_ZTVN2v88internal10RegExpTreeE = hidden unnamed_addr constant { [37 x i8*] } { [37 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTreeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTreeD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree13IsTextElementEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree17IsAnchoredAtStartEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree15IsAnchoredAtEndEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i64 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree16CaptureRegistersEv to i8*), i8* bitcast (void (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpText"*, %"class.v8::internal::Zone"*)* @_ZN2v88internal10RegExpTree12AppendToTextEPNS0_10RegExpTextEPNS0_4ZoneE to i8*), i8* bitcast (%"class.v8::internal::RegExpDisjunction"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree13AsDisjunctionEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree13IsDisjunctionEv to i8*), i8* bitcast (%"class.v8::internal::RegExpAlternative"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree13AsAlternativeEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree13IsAlternativeEv to i8*), i8* bitcast (%"class.v8::internal::RegExpAssertion"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree11AsAssertionEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree11IsAssertionEv to i8*), i8* bitcast (%"class.v8::internal::RegExpCharacterClass"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree16AsCharacterClassEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree16IsCharacterClassEv to i8*), i8* bitcast (%"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree6AsAtomEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree6IsAtomEv to i8*), i8* bitcast (%"class.v8::internal::RegExpQuantifier"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree12AsQuantifierEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree12IsQuantifierEv to i8*), i8* bitcast (%"class.v8::internal::RegExpCapture"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree9AsCaptureEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree9IsCaptureEv to i8*), i8* bitcast (%"class.v8::internal::RegExpGroup"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree7AsGroupEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree7IsGroupEv to i8*), i8* bitcast (%"class.v8::internal::RegExpLookaround"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree12AsLookaroundEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree12IsLookaroundEv to i8*), i8* bitcast (%"class.v8::internal::RegExpBackReference"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree15AsBackReferenceEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree15IsBackReferenceEv to i8*), i8* bitcast (%"class.v8::internal::RegExpEmpty"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree7AsEmptyEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree7IsEmptyEv to i8*), i8* bitcast (%"class.v8::internal::RegExpText"* (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree6AsTextEv to i8*), i8* bitcast (i1 (%"class.v8::internal::RegExpTree"*)* @_ZN2v88internal10RegExpTree6IsTextEv to i8*)] }, align 8
@_ZTVN2v88internal10RegExpNodeE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i16 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode24EatsAtLeastFromLoopEntryEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10RegExpNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (i32 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode20GreedyLoopTextLengthEv to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)* @_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)* @_ZN2v88internal10RegExpNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)* @_ZN2v88internal10RegExpNode13FilterOneByteEi to i8*)] }, align 8
@_ZTVN2v88internal13SeqRegExpNodeE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::SeqRegExpNode"*)* @_ZN2v88internal13SeqRegExpNodeD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i16 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode24EatsAtLeastFromLoopEntryEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10RegExpNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (i32 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode20GreedyLoopTextLengthEv to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)* @_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE to i8*), i8* bitcast (void (%"class.v8::internal::SeqRegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)* @_ZN2v88internal13SeqRegExpNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::SeqRegExpNode"*, i32)* @_ZN2v88internal13SeqRegExpNode13FilterOneByteEi to i8*)] }, align 8
@_ZTVN2v88internal10ActionNodeE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::ActionNode"*)* @_ZN2v88internal10ActionNodeD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::ActionNode"*, %"class.v8::internal::NodeVisitor"*)* @_ZN2v88internal10ActionNode6AcceptEPNS0_11NodeVisitorE to i8*), i8* bitcast (void (%"class.v8::internal::ActionNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)* @_ZN2v88internal10ActionNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE to i8*), i8* bitcast (i16 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode24EatsAtLeastFromLoopEntryEv to i8*), i8* bitcast (void (%"class.v8::internal::ActionNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10ActionNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10RegExpNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (i32 (%"class.v8::internal::ActionNode"*)* @_ZN2v88internal10ActionNode20GreedyLoopTextLengthEv to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)* @_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE to i8*), i8* bitcast (void (%"class.v8::internal::ActionNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)* @_ZN2v88internal10ActionNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::SeqRegExpNode"*, i32)* @_ZN2v88internal13SeqRegExpNode13FilterOneByteEi to i8*)] }, align 8
@_ZTVN2v88internal8TextNodeE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::TextNode"*)* @_ZN2v88internal8TextNodeD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::TextNode"*, %"class.v8::internal::NodeVisitor"*)* @_ZN2v88internal8TextNode6AcceptEPNS0_11NodeVisitorE to i8*), i8* bitcast (void (%"class.v8::internal::TextNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)* @_ZN2v88internal8TextNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE to i8*), i8* bitcast (i16 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode24EatsAtLeastFromLoopEntryEv to i8*), i8* bitcast (void (%"class.v8::internal::TextNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal8TextNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10RegExpNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (i32 (%"class.v8::internal::TextNode"*)* @_ZN2v88internal8TextNode20GreedyLoopTextLengthEv to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::TextNode"*, %"class.v8::internal::RegExpCompiler"*)* @_ZN2v88internal8TextNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE to i8*), i8* bitcast (void (%"class.v8::internal::TextNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)* @_ZN2v88internal8TextNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::TextNode"*, i32)* @_ZN2v88internal8TextNode13FilterOneByteEi to i8*)] }, align 8
@_ZTVN2v88internal13AssertionNodeE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::AssertionNode"*)* @_ZN2v88internal13AssertionNodeD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::AssertionNode"*, %"class.v8::internal::NodeVisitor"*)* @_ZN2v88internal13AssertionNode6AcceptEPNS0_11NodeVisitorE to i8*), i8* bitcast (void (%"class.v8::internal::AssertionNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)* @_ZN2v88internal13AssertionNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE to i8*), i8* bitcast (i16 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode24EatsAtLeastFromLoopEntryEv to i8*), i8* bitcast (void (%"class.v8::internal::AssertionNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal13AssertionNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10RegExpNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (i32 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode20GreedyLoopTextLengthEv to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)* @_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE to i8*), i8* bitcast (void (%"class.v8::internal::AssertionNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)* @_ZN2v88internal13AssertionNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::SeqRegExpNode"*, i32)* @_ZN2v88internal13SeqRegExpNode13FilterOneByteEi to i8*)] }, align 8
@_ZTVN2v88internal17BackReferenceNodeE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::BackReferenceNode"*)* @_ZN2v88internal17BackReferenceNodeD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::BackReferenceNode"*, %"class.v8::internal::NodeVisitor"*)* @_ZN2v88internal17BackReferenceNode6AcceptEPNS0_11NodeVisitorE to i8*), i8* bitcast (void (%"class.v8::internal::BackReferenceNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)* @_ZN2v88internal17BackReferenceNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE to i8*), i8* bitcast (i16 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode24EatsAtLeastFromLoopEntryEv to i8*), i8* bitcast (void (%"class.v8::internal::BackReferenceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal17BackReferenceNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10RegExpNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (i32 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode20GreedyLoopTextLengthEv to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)* @_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE to i8*), i8* bitcast (void (%"class.v8::internal::BackReferenceNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)* @_ZN2v88internal17BackReferenceNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::SeqRegExpNode"*, i32)* @_ZN2v88internal13SeqRegExpNode13FilterOneByteEi to i8*)] }, align 8
@_ZTVN2v88internal7EndNodeE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::EndNode"*)* @_ZN2v88internal7EndNodeD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::EndNode"*, %"class.v8::internal::NodeVisitor"*)* @_ZN2v88internal7EndNode6AcceptEPNS0_11NodeVisitorE to i8*), i8* bitcast (void (%"class.v8::internal::EndNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)* @_ZN2v88internal7EndNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE to i8*), i8* bitcast (i16 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode24EatsAtLeastFromLoopEntryEv to i8*), i8* bitcast (void (%"class.v8::internal::EndNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal7EndNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10RegExpNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (i32 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode20GreedyLoopTextLengthEv to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)* @_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE to i8*), i8* bitcast (void (%"class.v8::internal::EndNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)* @_ZN2v88internal7EndNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)* @_ZN2v88internal10RegExpNode13FilterOneByteEi to i8*)] }, align 8
@_ZTVN2v88internal23NegativeSubmatchSuccessE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::NegativeSubmatchSuccess"*)* @_ZN2v88internal23NegativeSubmatchSuccessD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::EndNode"*, %"class.v8::internal::NodeVisitor"*)* @_ZN2v88internal7EndNode6AcceptEPNS0_11NodeVisitorE to i8*), i8* bitcast (void (%"class.v8::internal::NegativeSubmatchSuccess"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)* @_ZN2v88internal23NegativeSubmatchSuccess4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE to i8*), i8* bitcast (i16 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode24EatsAtLeastFromLoopEntryEv to i8*), i8* bitcast (void (%"class.v8::internal::EndNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal7EndNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10RegExpNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (i32 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode20GreedyLoopTextLengthEv to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)* @_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE to i8*), i8* bitcast (void (%"class.v8::internal::EndNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)* @_ZN2v88internal7EndNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)* @_ZN2v88internal10RegExpNode13FilterOneByteEi to i8*)] }, align 8
@_ZTVN2v88internal10ChoiceNodeE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::ChoiceNode"*)* @_ZN2v88internal10ChoiceNodeD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::ChoiceNode"*, %"class.v8::internal::NodeVisitor"*)* @_ZN2v88internal10ChoiceNode6AcceptEPNS0_11NodeVisitorE to i8*), i8* bitcast (void (%"class.v8::internal::ChoiceNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)* @_ZN2v88internal10ChoiceNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE to i8*), i8* bitcast (i16 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode24EatsAtLeastFromLoopEntryEv to i8*), i8* bitcast (void (%"class.v8::internal::ChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10ChoiceNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10RegExpNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (i32 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode20GreedyLoopTextLengthEv to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)* @_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE to i8*), i8* bitcast (void (%"class.v8::internal::ChoiceNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)* @_ZN2v88internal10ChoiceNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::ChoiceNode"*, i32)* @_ZN2v88internal10ChoiceNode13FilterOneByteEi to i8*), i8* bitcast (i1 (%"class.v8::internal::ChoiceNode"*, i1)* @_ZN2v88internal10ChoiceNode39try_to_emit_quick_check_for_alternativeEb to i8*), i8* bitcast (i1 (%"class.v8::internal::ChoiceNode"*)* @_ZN2v88internal10ChoiceNode13read_backwardEv to i8*)] }, align 8
@_ZTVN2v88internal28NegativeLookaroundChoiceNodeE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::NegativeLookaroundChoiceNode"*)* @_ZN2v88internal28NegativeLookaroundChoiceNodeD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::NegativeLookaroundChoiceNode"*, %"class.v8::internal::NodeVisitor"*)* @_ZN2v88internal28NegativeLookaroundChoiceNode6AcceptEPNS0_11NodeVisitorE to i8*), i8* bitcast (void (%"class.v8::internal::ChoiceNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)* @_ZN2v88internal10ChoiceNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE to i8*), i8* bitcast (i16 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode24EatsAtLeastFromLoopEntryEv to i8*), i8* bitcast (void (%"class.v8::internal::NegativeLookaroundChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal28NegativeLookaroundChoiceNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal10RegExpNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (i32 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode20GreedyLoopTextLengthEv to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)* @_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE to i8*), i8* bitcast (void (%"class.v8::internal::NegativeLookaroundChoiceNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)* @_ZN2v88internal28NegativeLookaroundChoiceNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::NegativeLookaroundChoiceNode"*, i32)* @_ZN2v88internal28NegativeLookaroundChoiceNode13FilterOneByteEi to i8*), i8* bitcast (i1 (%"class.v8::internal::NegativeLookaroundChoiceNode"*, i1)* @_ZN2v88internal28NegativeLookaroundChoiceNode39try_to_emit_quick_check_for_alternativeEb to i8*), i8* bitcast (i1 (%"class.v8::internal::ChoiceNode"*)* @_ZN2v88internal10ChoiceNode13read_backwardEv to i8*)] }, align 8
@_ZTVN2v88internal14LoopChoiceNodeE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::LoopChoiceNode"*)* @_ZN2v88internal14LoopChoiceNodeD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::NodeVisitor"*)* @_ZN2v88internal14LoopChoiceNode6AcceptEPNS0_11NodeVisitorE to i8*), i8* bitcast (void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)* @_ZN2v88internal14LoopChoiceNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE to i8*), i8* bitcast (i16 (%"class.v8::internal::LoopChoiceNode"*)* @_ZN2v88internal14LoopChoiceNode24EatsAtLeastFromLoopEntryEv to i8*), i8* bitcast (void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal14LoopChoiceNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)* @_ZN2v88internal14LoopChoiceNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib to i8*), i8* bitcast (i32 (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNode20GreedyLoopTextLengthEv to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)* @_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE to i8*), i8* bitcast (void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)* @_ZN2v88internal14LoopChoiceNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb to i8*), i8* bitcast (%"class.v8::internal::RegExpNode"* (%"class.v8::internal::LoopChoiceNode"*, i32)* @_ZN2v88internal14LoopChoiceNode13FilterOneByteEi to i8*), i8* bitcast (i1 (%"class.v8::internal::ChoiceNode"*, i1)* @_ZN2v88internal10ChoiceNode39try_to_emit_quick_check_for_alternativeEb to i8*), i8* bitcast (i1 (%"class.v8::internal::LoopChoiceNode"*)* @_ZN2v88internal14LoopChoiceNode13read_backwardEv to i8*)] }, align 8
@.str.2 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"end - start + items <= letter_length\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"ch <= 0xffff\00", align 1
@_ZTVN2v88internal20RegExpCharacterClassE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEEE = internal unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::NodeVisitor"*)* @_ZN2v88internal11NodeVisitorD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::Analysis"*)* @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEED0Ev to i8*), i8* bitcast (void (%"class.v8::internal::Analysis"*, %"class.v8::internal::EndNode"*)* @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE8VisitEndEPNS0_7EndNodeE to i8*), i8* bitcast (void (%"class.v8::internal::Analysis"*, %"class.v8::internal::ActionNode"*)* @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE11VisitActionEPNS0_10ActionNodeE to i8*), i8* bitcast (void (%"class.v8::internal::Analysis"*, %"class.v8::internal::ChoiceNode"*)* @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE11VisitChoiceEPNS0_10ChoiceNodeE to i8*), i8* bitcast (void (%"class.v8::internal::Analysis"*, %"class.v8::internal::LoopChoiceNode"*)* @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE15VisitLoopChoiceEPNS0_14LoopChoiceNodeE to i8*), i8* bitcast (void (%"class.v8::internal::Analysis"*, %"class.v8::internal::NegativeLookaroundChoiceNode"*)* @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE29VisitNegativeLookaroundChoiceEPNS0_28NegativeLookaroundChoiceNodeE to i8*), i8* bitcast (void (%"class.v8::internal::Analysis"*, %"class.v8::internal::BackReferenceNode"*)* @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE18VisitBackReferenceEPNS0_17BackReferenceNodeE to i8*), i8* bitcast (void (%"class.v8::internal::Analysis"*, %"class.v8::internal::AssertionNode"*)* @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE14VisitAssertionEPNS0_13AssertionNodeE to i8*), i8* bitcast (void (%"class.v8::internal::Analysis"*, %"class.v8::internal::TextNode"*)* @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE9VisitTextEPNS0_8TextNodeE to i8*)] }, align 8
@_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE = external local_unnamed_addr global i8, align 1
@.str.8 = private unnamed_addr constant [37 x i8] c"Analysis: Aborting on stack overflow\00", align 1

@_ZN2v88internal14RegExpCompilerC1EPNS0_7IsolateEPNS0_4ZoneEib = hidden unnamed_addr alias void (%"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*, i32, i1), void (%"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*, i32, i1)* @_ZN2v88internal14RegExpCompilerC2EPNS0_7IsolateEPNS0_4ZoneEib
@_ZN2v88internal10RegExpNodeD1Ev = hidden unnamed_addr alias void (%"class.v8::internal::RegExpNode"*), void (%"class.v8::internal::RegExpNode"*)* @_ZN2v88internal10RegExpNodeD2Ev
@_ZN2v88internal19BoyerMooreLookaheadC1EiPNS0_14RegExpCompilerEPNS0_4ZoneE = hidden unnamed_addr alias void (%"class.v8::internal::BoyerMooreLookahead"*, i32, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Zone"*), void (%"class.v8::internal::BoyerMooreLookahead"*, i32, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Zone"*)* @_ZN2v88internal19BoyerMooreLookaheadC2EiPNS0_14RegExpCompilerEPNS0_4ZoneE
@_ZN2v88internal15GreedyLoopStateC1Eb = hidden unnamed_addr alias void (%"class.v8::internal::GreedyLoopState"*, i1), void (%"class.v8::internal::GreedyLoopState"*, i1)* @_ZN2v88internal15GreedyLoopStateC2Eb

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN2v88internal10RegExpTree12AppendToTextEPNS0_10RegExpTextEPNS0_4ZoneE(%"class.v8::internal::RegExpTree"* nocapture readnone, %"class.v8::internal::RegExpText"* nocapture readnone, %"class.v8::internal::Zone"* nocapture readnone) unnamed_addr #0 align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10RegExpAtom12AppendToTextEPNS0_10RegExpTextEPNS0_4ZoneE(%"class.v8::internal::RegExpAtom"*, %"class.v8::internal::RegExpText"*, %"class.v8::internal::Zone"*) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %0, i64 0, i32 0
  tail call void @_ZN2v88internal10RegExpText10AddElementENS0_11TextElementEPNS0_4ZoneE(%"class.v8::internal::RegExpText"* %1, i64 4294967295, %"class.v8::internal::RegExpTree"* %4, %"class.v8::internal::Zone"* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal10RegExpText10AddElementENS0_11TextElementEPNS0_4ZoneE(%"class.v8::internal::RegExpText"*, i64, %"class.v8::internal::RegExpTree"*, %"class.v8::internal::Zone"*) local_unnamed_addr #2 comdat align 2 {
  %5 = lshr i64 %1, 32
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %0, i64 0, i32 1, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %0, i64 0, i32 1, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %13, label %21

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %7, i64 0, i32 0
  %15 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %14, align 8
  %16 = add nsw i32 %9, 1
  store i32 %16, i32* %8, align 4
  %17 = sext i32 %9 to i64
  %18 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %15, i64 %17
  %19 = bitcast %"class.v8::internal::TextElement"* %18 to i64*
  store i64 %1, i64* %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %15, i64 %17, i32 2
  br label %57

21:                                               ; preds = %4
  %22 = shl nsw i32 %11, 1
  %23 = or i32 %22, 1
  %24 = sext i32 %23 to i64
  %25 = shl nsw i64 %24, 4
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3, i64 0, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %29, %27
  %31 = icmp ugt i64 %25, %30
  br i1 %31, label %32, label %34, !prof !2

32:                                               ; preds = %21
  %33 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 %25) #18
  br label %36

34:                                               ; preds = %21
  %35 = add i64 %27, %25
  store i64 %35, i64* %26, align 8
  br label %36

36:                                               ; preds = %34, %32
  %37 = phi i64 [ %33, %32 ], [ %27, %34 ]
  %38 = inttoptr i64 %37 to %"class.v8::internal::TextElement"*
  %39 = load i32, i32* %8, align 4
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %49

41:                                               ; preds = %36
  %42 = inttoptr i64 %37 to i8*
  %43 = bitcast %"class.v8::internal::ZoneList"* %7 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = icmp eq i32 %39, 1
  %46 = sext i32 %39 to i64
  %47 = shl nsw i64 %46, 4
  %48 = select i1 %45, i64 16, i64 %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %44, i64 %48, i1 false) #18
  br label %49

49:                                               ; preds = %41, %36
  %50 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %7, i64 0, i32 0
  store %"class.v8::internal::TextElement"* %38, %"class.v8::internal::TextElement"** %50, align 8
  store i32 %23, i32* %10, align 8
  %51 = load i32, i32* %8, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %8, align 4
  %53 = sext i32 %51 to i64
  %54 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %38, i64 %53
  %55 = bitcast %"class.v8::internal::TextElement"* %54 to i64*
  store i64 %1, i64* %55, align 8
  %56 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %38, i64 %53, i32 2
  br label %57

57:                                               ; preds = %13, %49
  %58 = phi %"class.v8::internal::RegExpTree"** [ %20, %13 ], [ %56, %49 ]
  store %"class.v8::internal::RegExpTree"* %2, %"class.v8::internal::RegExpTree"** %58, align 8
  switch i32 %6, label %64 [
    i32 0, label %59
    i32 1, label %65
  ]

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %2, i64 2
  %61 = bitcast %"class.v8::internal::RegExpTree"* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = trunc i64 %62 to i32
  br label %65

64:                                               ; preds = %57
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

65:                                               ; preds = %57, %59
  %66 = phi i32 [ %63, %59 ], [ %6, %57 ]
  %67 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %0, i64 0, i32 2
  %68 = load i32, i32* %67, align 8
  %69 = add nsw i32 %68, %66
  store i32 %69, i32* %67, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, %"class.v8::internal::RegExpTree"* } @_ZN2v88internal11TextElement4AtomEPNS0_10RegExpAtomE(%"class.v8::internal::RegExpAtom"*) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %0, i64 0, i32 0
  %3 = insertvalue { i64, %"class.v8::internal::RegExpTree"* } { i64 4294967295, %"class.v8::internal::RegExpTree"* undef }, %"class.v8::internal::RegExpTree"* %2, 1
  ret { i64, %"class.v8::internal::RegExpTree"* } %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal20RegExpCharacterClass12AppendToTextEPNS0_10RegExpTextEPNS0_4ZoneE(%"class.v8::internal::RegExpCharacterClass"*, %"class.v8::internal::RegExpText"*, %"class.v8::internal::Zone"*) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %0, i64 0, i32 0
  tail call void @_ZN2v88internal10RegExpText10AddElementENS0_11TextElementEPNS0_4ZoneE(%"class.v8::internal::RegExpText"* %1, i64 8589934591, %"class.v8::internal::RegExpTree"* %4, %"class.v8::internal::Zone"* %2)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, %"class.v8::internal::RegExpTree"* } @_ZN2v88internal11TextElement9CharClassEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpCharacterClass"*) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %0, i64 0, i32 0
  %3 = insertvalue { i64, %"class.v8::internal::RegExpTree"* } { i64 8589934591, %"class.v8::internal::RegExpTree"* undef }, %"class.v8::internal::RegExpTree"* %2, 1
  ret { i64, %"class.v8::internal::RegExpTree"* } %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10RegExpText12AppendToTextEPS1_PNS0_4ZoneE(%"class.v8::internal::RegExpText"* nocapture readonly, %"class.v8::internal::RegExpText"*, %"class.v8::internal::Zone"*) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %0, i64 0, i32 1, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %0, i64 0, i32 1, i32 0
  br label %10

9:                                                ; preds = %10, %3
  ret void

10:                                               ; preds = %7, %10
  %11 = phi i64 [ 0, %7 ], [ %18, %10 ]
  %12 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %8, align 8
  %13 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %12, i64 %11
  %14 = bitcast %"class.v8::internal::TextElement"* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %12, i64 %11, i32 2
  %17 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %16, align 8
  tail call void @_ZN2v88internal10RegExpText10AddElementENS0_11TextElementEPNS0_4ZoneE(%"class.v8::internal::RegExpText"* %1, i64 %15, %"class.v8::internal::RegExpTree"* %17, %"class.v8::internal::Zone"* %2)
  %18 = add nuw nsw i64 %11, 1
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = icmp slt i64 %18, %20
  br i1 %21, label %10, label %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal11TextElement6lengthEv(%"class.v8::internal::TextElement"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  switch i32 %3, label %11 [
    i32 0, label %4
    i32 1, label %12
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %0, i64 0, i32 2
  %6 = bitcast %"class.v8::internal::RegExpTree"** %5 to %"class.v8::internal::RegExpAtom"**
  %7 = load %"class.v8::internal::RegExpAtom"*, %"class.v8::internal::RegExpAtom"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %7, i64 0, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = trunc i64 %9 to i32
  br label %12

11:                                               ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

12:                                               ; preds = %1, %4
  %13 = phi i32 [ %10, %4 ], [ %3, %1 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14RegExpCompilerC2EPNS0_7IsolateEPNS0_4ZoneEib(%"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*, i32, i1 zeroext) unnamed_addr #2 align 2 {
  %6 = ptrtoint %"class.v8::internal::Zone"* %2 to i64
  %7 = zext i1 %4 to i8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 1
  %9 = shl i32 %3, 1
  %10 = add i32 %9, 2
  store i32 %10, i32* %8, align 8
  %11 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 2
  store i32 -1, i32* %11, align 4
  %12 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 3
  store i32 -1, i32* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 4
  store %"class.v8::internal::ZoneVector"* null, %"class.v8::internal::ZoneVector"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 5
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 7
  store i8 %7, i8* %15, align 8
  %16 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 8
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 9
  store i8 0, i8* %17, align 2
  %18 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 10
  %19 = load i8, i8* @_ZN2v88internal24FLAG_regexp_optimizationE, align 1, !range !3
  store i8 %19, i8* %18, align 1
  %20 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 11
  store i8 0, i8* %20, align 4
  %21 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 12
  store i32 1, i32* %21, align 8
  %22 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 13
  tail call void @_ZN2v88internal17FrequencyCollatorC2Ev(%"class.v8::internal::FrequencyCollator"* %22)
  %23 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 14
  store %"class.v8::internal::Isolate"* %1, %"class.v8::internal::Isolate"** %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 15
  %25 = bitcast %"class.v8::internal::Zone"** %24 to i64*
  store i64 %6, i64* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %29, %27
  %31 = icmp ult i64 %30, 64
  br i1 %31, label %32, label %34, !prof !2

32:                                               ; preds = %5
  %33 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 64) #18
  br label %36

34:                                               ; preds = %5
  %35 = add i64 %27, 64
  store i64 %35, i64* %26, align 8
  br label %36

36:                                               ; preds = %32, %34
  %37 = phi i64 [ %33, %32 ], [ %27, %34 ]
  %38 = inttoptr i64 %37 to %"class.v8::internal::EndNode"*
  %39 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %38, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %38, i64 0, i32 0, i32 1
  %41 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %38, i64 0, i32 0, i32 8
  %42 = bitcast %"class.v8::internal::RegExpNode"** %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 24, i1 false) #18
  %43 = bitcast %"class.v8::internal::Zone"** %41 to i64*
  store i64 %6, i64* %43, align 8
  %44 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %38, i64 0, i32 0, i32 7, i64 0
  %45 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal7EndNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %39, align 8
  %46 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %38, i64 0, i32 1
  store i32 0, i32* %46, align 8
  %47 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 0
  store %"class.v8::internal::EndNode"* %38, %"class.v8::internal::EndNode"** %47, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17FrequencyCollatorC2Ev(%"class.v8::internal::FrequencyCollator"*) unnamed_addr #2 comdat align 2 {
  %2 = bitcast %"class.v8::internal::FrequencyCollator"* %0 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %2, align 4
  %3 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 2, i32 0
  %4 = bitcast i32* %3 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %4, align 4
  %5 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 4, i32 0
  %6 = bitcast i32* %5 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %6, align 4
  %7 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 6, i32 0
  %8 = bitcast i32* %7 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %8, align 4
  %9 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 8, i32 0
  %10 = bitcast i32* %9 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %10, align 4
  %11 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 10, i32 0
  %12 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %12, align 4
  %13 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 12, i32 0
  %14 = bitcast i32* %13 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %14, align 4
  %15 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 14, i32 0
  %16 = bitcast i32* %15 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %16, align 4
  %17 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 16, i32 0
  %18 = bitcast i32* %17 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %18, align 4
  %19 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 18, i32 0
  %20 = bitcast i32* %19 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %20, align 4
  %21 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 20, i32 0
  %22 = bitcast i32* %21 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %22, align 4
  %23 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 22, i32 0
  %24 = bitcast i32* %23 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %24, align 4
  %25 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 24, i32 0
  %26 = bitcast i32* %25 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %26, align 4
  %27 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 26, i32 0
  %28 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %28, align 4
  %29 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 28, i32 0
  %30 = bitcast i32* %29 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 30, i32 0
  %32 = bitcast i32* %31 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %32, align 4
  %33 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 32, i32 0
  %34 = bitcast i32* %33 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %34, align 4
  %35 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 34, i32 0
  %36 = bitcast i32* %35 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %36, align 4
  %37 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 36, i32 0
  %38 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %38, align 4
  %39 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 38, i32 0
  %40 = bitcast i32* %39 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %40, align 4
  %41 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 40, i32 0
  %42 = bitcast i32* %41 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %42, align 4
  %43 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 42, i32 0
  %44 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %44, align 4
  %45 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 44, i32 0
  %46 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %46, align 4
  %47 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 46, i32 0
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %48, align 4
  %49 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 48, i32 0
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %50, align 4
  %51 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 50, i32 0
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %52, align 4
  %53 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 52, i32 0
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %54, align 4
  %55 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 54, i32 0
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %56, align 4
  %57 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 56, i32 0
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %58, align 4
  %59 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 58, i32 0
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %60, align 4
  %61 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 60, i32 0
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %62, align 4
  %63 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 62, i32 0
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %64, align 4
  %65 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 64, i32 0
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %66, align 4
  %67 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 66, i32 0
  %68 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %68, align 4
  %69 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 68, i32 0
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %70, align 4
  %71 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 70, i32 0
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %72, align 4
  %73 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 72, i32 0
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %74, align 4
  %75 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 74, i32 0
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %76, align 4
  %77 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 76, i32 0
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %78, align 4
  %79 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 78, i32 0
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %80, align 4
  %81 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 80, i32 0
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %82, align 4
  %83 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 82, i32 0
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %84, align 4
  %85 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 84, i32 0
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %86, align 4
  %87 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 86, i32 0
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %88, align 4
  %89 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 88, i32 0
  %90 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %90, align 4
  %91 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 90, i32 0
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %92, align 4
  %93 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 92, i32 0
  %94 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %94, align 4
  %95 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 94, i32 0
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %96, align 4
  %97 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 96, i32 0
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %98, align 4
  %99 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 98, i32 0
  %100 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %100, align 4
  %101 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 100, i32 0
  %102 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %102, align 4
  %103 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 102, i32 0
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %104, align 4
  %105 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 104, i32 0
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %106, align 4
  %107 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 106, i32 0
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %108, align 4
  %109 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 108, i32 0
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %110, align 4
  %111 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 110, i32 0
  %112 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %112, align 4
  %113 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 112, i32 0
  %114 = bitcast i32* %113 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %114, align 4
  %115 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 114, i32 0
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %116, align 4
  %117 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 116, i32 0
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %118, align 4
  %119 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 118, i32 0
  %120 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %120, align 4
  %121 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 120, i32 0
  %122 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %122, align 4
  %123 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 122, i32 0
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %124, align 4
  %125 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 124, i32 0
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %126, align 4
  %127 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 126, i32 0
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %128, align 4
  %129 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 1
  store i32 0, i32* %129, align 4
  %130 = bitcast %"class.v8::internal::FrequencyCollator"* %0 to <2 x i64>*
  store <2 x i64> <i64 0, i64 4294967296>, <2 x i64>* %130, align 4
  %131 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 2
  %132 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %131 to <2 x i64>*
  store <2 x i64> <i64 8589934592, i64 12884901888>, <2 x i64>* %132, align 4
  %133 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 4
  %134 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %133 to <2 x i64>*
  store <2 x i64> <i64 17179869184, i64 21474836480>, <2 x i64>* %134, align 4
  %135 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 6
  %136 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %135 to <2 x i64>*
  store <2 x i64> <i64 25769803776, i64 30064771072>, <2 x i64>* %136, align 4
  %137 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 8
  %138 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %137 to <2 x i64>*
  store <2 x i64> <i64 34359738368, i64 38654705664>, <2 x i64>* %138, align 4
  %139 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 10
  %140 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %139 to <2 x i64>*
  store <2 x i64> <i64 42949672960, i64 47244640256>, <2 x i64>* %140, align 4
  %141 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 12
  %142 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %141 to <2 x i64>*
  store <2 x i64> <i64 51539607552, i64 55834574848>, <2 x i64>* %142, align 4
  %143 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 14
  %144 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %143 to <2 x i64>*
  store <2 x i64> <i64 60129542144, i64 64424509440>, <2 x i64>* %144, align 4
  %145 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 16
  %146 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %145 to <2 x i64>*
  store <2 x i64> <i64 68719476736, i64 73014444032>, <2 x i64>* %146, align 4
  %147 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 18
  %148 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %147 to <2 x i64>*
  store <2 x i64> <i64 77309411328, i64 81604378624>, <2 x i64>* %148, align 4
  %149 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 20
  %150 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %149 to <2 x i64>*
  store <2 x i64> <i64 85899345920, i64 90194313216>, <2 x i64>* %150, align 4
  %151 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 22
  %152 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %151 to <2 x i64>*
  store <2 x i64> <i64 94489280512, i64 98784247808>, <2 x i64>* %152, align 4
  %153 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 24
  %154 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %153 to <2 x i64>*
  store <2 x i64> <i64 103079215104, i64 107374182400>, <2 x i64>* %154, align 4
  %155 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 26
  %156 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %155 to <2 x i64>*
  store <2 x i64> <i64 111669149696, i64 115964116992>, <2 x i64>* %156, align 4
  %157 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 28
  %158 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %157 to <2 x i64>*
  store <2 x i64> <i64 120259084288, i64 124554051584>, <2 x i64>* %158, align 4
  %159 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 30
  %160 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %159 to <2 x i64>*
  store <2 x i64> <i64 128849018880, i64 133143986176>, <2 x i64>* %160, align 4
  %161 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 32
  %162 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %161 to <2 x i64>*
  store <2 x i64> <i64 137438953472, i64 141733920768>, <2 x i64>* %162, align 4
  %163 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 34
  %164 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %163 to <2 x i64>*
  store <2 x i64> <i64 146028888064, i64 150323855360>, <2 x i64>* %164, align 4
  %165 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 36
  %166 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %165 to <2 x i64>*
  store <2 x i64> <i64 154618822656, i64 158913789952>, <2 x i64>* %166, align 4
  %167 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 38
  %168 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %167 to <2 x i64>*
  store <2 x i64> <i64 163208757248, i64 167503724544>, <2 x i64>* %168, align 4
  %169 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 40
  %170 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %169 to <2 x i64>*
  store <2 x i64> <i64 171798691840, i64 176093659136>, <2 x i64>* %170, align 4
  %171 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 42
  %172 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %171 to <2 x i64>*
  store <2 x i64> <i64 180388626432, i64 184683593728>, <2 x i64>* %172, align 4
  %173 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 44
  %174 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %173 to <2 x i64>*
  store <2 x i64> <i64 188978561024, i64 193273528320>, <2 x i64>* %174, align 4
  %175 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 46
  %176 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %175 to <2 x i64>*
  store <2 x i64> <i64 197568495616, i64 201863462912>, <2 x i64>* %176, align 4
  %177 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 48
  %178 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %177 to <2 x i64>*
  store <2 x i64> <i64 206158430208, i64 210453397504>, <2 x i64>* %178, align 4
  %179 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 50
  %180 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %179 to <2 x i64>*
  store <2 x i64> <i64 214748364800, i64 219043332096>, <2 x i64>* %180, align 4
  %181 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 52
  %182 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %181 to <2 x i64>*
  store <2 x i64> <i64 223338299392, i64 227633266688>, <2 x i64>* %182, align 4
  %183 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 54
  %184 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %183 to <2 x i64>*
  store <2 x i64> <i64 231928233984, i64 236223201280>, <2 x i64>* %184, align 4
  %185 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 56
  %186 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %185 to <2 x i64>*
  store <2 x i64> <i64 240518168576, i64 244813135872>, <2 x i64>* %186, align 4
  %187 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 58
  %188 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %187 to <2 x i64>*
  store <2 x i64> <i64 249108103168, i64 253403070464>, <2 x i64>* %188, align 4
  %189 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 60
  %190 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %189 to <2 x i64>*
  store <2 x i64> <i64 257698037760, i64 261993005056>, <2 x i64>* %190, align 4
  %191 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 62
  %192 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %191 to <2 x i64>*
  store <2 x i64> <i64 266287972352, i64 270582939648>, <2 x i64>* %192, align 4
  %193 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 64
  %194 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %193 to <2 x i64>*
  store <2 x i64> <i64 274877906944, i64 279172874240>, <2 x i64>* %194, align 4
  %195 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 66
  %196 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %195 to <2 x i64>*
  store <2 x i64> <i64 283467841536, i64 287762808832>, <2 x i64>* %196, align 4
  %197 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 68
  %198 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %197 to <2 x i64>*
  store <2 x i64> <i64 292057776128, i64 296352743424>, <2 x i64>* %198, align 4
  %199 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 70
  %200 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %199 to <2 x i64>*
  store <2 x i64> <i64 300647710720, i64 304942678016>, <2 x i64>* %200, align 4
  %201 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 72
  %202 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %201 to <2 x i64>*
  store <2 x i64> <i64 309237645312, i64 313532612608>, <2 x i64>* %202, align 4
  %203 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 74
  %204 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %203 to <2 x i64>*
  store <2 x i64> <i64 317827579904, i64 322122547200>, <2 x i64>* %204, align 4
  %205 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 76
  %206 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %205 to <2 x i64>*
  store <2 x i64> <i64 326417514496, i64 330712481792>, <2 x i64>* %206, align 4
  %207 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 78
  %208 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %207 to <2 x i64>*
  store <2 x i64> <i64 335007449088, i64 339302416384>, <2 x i64>* %208, align 4
  %209 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 80
  %210 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %209 to <2 x i64>*
  store <2 x i64> <i64 343597383680, i64 347892350976>, <2 x i64>* %210, align 4
  %211 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 82
  %212 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %211 to <2 x i64>*
  store <2 x i64> <i64 352187318272, i64 356482285568>, <2 x i64>* %212, align 4
  %213 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 84
  %214 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %213 to <2 x i64>*
  store <2 x i64> <i64 360777252864, i64 365072220160>, <2 x i64>* %214, align 4
  %215 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 86
  %216 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %215 to <2 x i64>*
  store <2 x i64> <i64 369367187456, i64 373662154752>, <2 x i64>* %216, align 4
  %217 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 88
  %218 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %217 to <2 x i64>*
  store <2 x i64> <i64 377957122048, i64 382252089344>, <2 x i64>* %218, align 4
  %219 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 90
  %220 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %219 to <2 x i64>*
  store <2 x i64> <i64 386547056640, i64 390842023936>, <2 x i64>* %220, align 4
  %221 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 92
  %222 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %221 to <2 x i64>*
  store <2 x i64> <i64 395136991232, i64 399431958528>, <2 x i64>* %222, align 4
  %223 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 94
  %224 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %223 to <2 x i64>*
  store <2 x i64> <i64 403726925824, i64 408021893120>, <2 x i64>* %224, align 4
  %225 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 96
  %226 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %225 to <2 x i64>*
  store <2 x i64> <i64 412316860416, i64 416611827712>, <2 x i64>* %226, align 4
  %227 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 98
  %228 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %227 to <2 x i64>*
  store <2 x i64> <i64 420906795008, i64 425201762304>, <2 x i64>* %228, align 4
  %229 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 100
  %230 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %229 to <2 x i64>*
  store <2 x i64> <i64 429496729600, i64 433791696896>, <2 x i64>* %230, align 4
  %231 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 102
  %232 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %231 to <2 x i64>*
  store <2 x i64> <i64 438086664192, i64 442381631488>, <2 x i64>* %232, align 4
  %233 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 104
  %234 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %233 to <2 x i64>*
  store <2 x i64> <i64 446676598784, i64 450971566080>, <2 x i64>* %234, align 4
  %235 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 106
  %236 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %235 to <2 x i64>*
  store <2 x i64> <i64 455266533376, i64 459561500672>, <2 x i64>* %236, align 4
  %237 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 108
  %238 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %237 to <2 x i64>*
  store <2 x i64> <i64 463856467968, i64 468151435264>, <2 x i64>* %238, align 4
  %239 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 110
  %240 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %239 to <2 x i64>*
  store <2 x i64> <i64 472446402560, i64 476741369856>, <2 x i64>* %240, align 4
  %241 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 112
  %242 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %241 to <2 x i64>*
  store <2 x i64> <i64 481036337152, i64 485331304448>, <2 x i64>* %242, align 4
  %243 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 114
  %244 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %243 to <2 x i64>*
  store <2 x i64> <i64 489626271744, i64 493921239040>, <2 x i64>* %244, align 4
  %245 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 116
  %246 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %245 to <2 x i64>*
  store <2 x i64> <i64 498216206336, i64 502511173632>, <2 x i64>* %246, align 4
  %247 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 118
  %248 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %247 to <2 x i64>*
  store <2 x i64> <i64 506806140928, i64 511101108224>, <2 x i64>* %248, align 4
  %249 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 120
  %250 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %249 to <2 x i64>*
  store <2 x i64> <i64 515396075520, i64 519691042816>, <2 x i64>* %250, align 4
  %251 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 122
  %252 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %251 to <2 x i64>*
  store <2 x i64> <i64 523986010112, i64 528280977408>, <2 x i64>* %252, align 4
  %253 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 124
  %254 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %253 to <2 x i64>*
  store <2 x i64> <i64 532575944704, i64 536870912000>, <2 x i64>* %254, align 4
  %255 = getelementptr inbounds %"class.v8::internal::FrequencyCollator", %"class.v8::internal::FrequencyCollator"* %0, i64 0, i32 0, i64 126
  %256 = bitcast %"class.v8::internal::FrequencyCollator::CharacterFrequency"* %255 to <2 x i64>*
  store <2 x i64> <i64 541165879296, i64 545460846592>, <2 x i64>* %256, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14RegExpCompiler8AssembleEPNS0_7IsolateEPNS0_20RegExpMacroAssemblerEPNS0_10RegExpNodeEiNS0_6HandleINS0_6StringEEE(%"struct.v8::internal::RegExpCompiler::CompilationResult"* noalias nocapture sret, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpNode"*, i32, i64) local_unnamed_addr #2 align 2 {
  %8 = alloca %"class.v8::internal::ZoneVector", align 8
  %9 = alloca %"class.v8::internal::Label", align 4
  %10 = alloca %"class.v8::internal::Trace", align 8
  %11 = inttoptr i64 %6 to i64*
  %12 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  store %"class.v8::internal::RegExpMacroAssembler"* %3, %"class.v8::internal::RegExpMacroAssembler"** %12, align 8
  %13 = bitcast %"class.v8::internal::ZoneVector"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #18
  %14 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 15
  %15 = bitcast %"class.v8::internal::Zone"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %8, i64 0, i32 0, i32 0, i32 2, i32 1
  %18 = bitcast %"struct.std::__1::__compressed_pair_elem.23"* %17 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #18
  store i64 %16, i64* %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 4
  store %"class.v8::internal::ZoneVector"* %8, %"class.v8::internal::ZoneVector"** %19, align 8
  %20 = bitcast %"class.v8::internal::Label"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #18
  %21 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %9, i64 0, i32 0
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %9, i64 0, i32 1
  store i32 0, i32* %22, align 4
  %23 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %3 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %24 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %24, i64 37
  %26 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %25, align 8
  call void %26(%"class.v8::internal::RegExpMacroAssembler"* %3, %"class.v8::internal::Label"* nonnull %9) #18
  %27 = bitcast %"class.v8::internal::Trace"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %27) #18
  %28 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %10, i64 0, i32 0
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %10, i64 0, i32 1
  %30 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %10, i64 0, i32 7, i32 1, i64 1
  %31 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 9, i1 false) #18
  %32 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %10, i64 0, i32 7, i32 1, i64 2
  %33 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %33, i8 0, i64 9, i1 false) #18
  %34 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %10, i64 0, i32 7, i32 1, i64 3
  %35 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 9, i1 false) #18
  %36 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %10, i64 0, i32 7, i32 2
  %37 = bitcast i32* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 9, i1 false) #18
  %38 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %10, i64 0, i32 8
  %39 = bitcast %"class.v8::internal::Trace::DeferredAction"** %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 53, i1 false) #18
  store i32 100, i32* %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %10, i64 0, i32 9
  store i32 -1, i32* %40, align 4
  %41 = bitcast %"class.v8::internal::RegExpNode"* %4 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %42 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %42, i64 3
  %44 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %43, align 8
  call void %44(%"class.v8::internal::RegExpNode"* %4, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %10) #18
  %45 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %12, align 8
  %46 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %45 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %47 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %47, i64 26
  %49 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %48, align 8
  call void %49(%"class.v8::internal::RegExpMacroAssembler"* %45, %"class.v8::internal::Label"* nonnull %9) #18
  %50 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %12, align 8
  %51 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %50 to void (%"class.v8::internal::RegExpMacroAssembler"*)***
  %52 = load void (%"class.v8::internal::RegExpMacroAssembler"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %52, i64 27
  %54 = load void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %53, align 8
  call void %54(%"class.v8::internal::RegExpMacroAssembler"* %50) #18
  %55 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %8, i64 0, i32 0, i32 0, i32 0
  %56 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %55, align 8
  %57 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %8, i64 0, i32 0, i32 0, i32 1
  %58 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %57, align 8
  %59 = icmp eq %"class.v8::internal::RegExpNode"** %56, %58
  br i1 %59, label %80, label %60

60:                                               ; preds = %7, %76
  %61 = phi %"class.v8::internal::RegExpNode"** [ %78, %76 ], [ %56, %7 ]
  %62 = phi %"class.v8::internal::RegExpNode"** [ %77, %76 ], [ %58, %7 ]
  %63 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %62, i64 -1
  %64 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %63, align 8
  store %"class.v8::internal::RegExpNode"** %63, %"class.v8::internal::RegExpNode"*** %57, align 8
  %65 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %64, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %64, i64 0, i32 2, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = icmp slt i32 %67, 0
  br i1 %68, label %76, label %69

69:                                               ; preds = %60
  %70 = bitcast %"class.v8::internal::RegExpNode"* %64 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %71 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %71, i64 3
  %73 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %72, align 8
  call void %73(%"class.v8::internal::RegExpNode"* %64, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %10) #18
  %74 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %55, align 8
  %75 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %57, align 8
  br label %76

76:                                               ; preds = %69, %60
  %77 = phi %"class.v8::internal::RegExpNode"** [ %75, %69 ], [ %63, %60 ]
  %78 = phi %"class.v8::internal::RegExpNode"** [ %74, %69 ], [ %61, %60 ]
  %79 = icmp eq %"class.v8::internal::RegExpNode"** %78, %77
  br i1 %79, label %80, label %60

80:                                               ; preds = %76, %7
  %81 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 8
  %82 = load i8, i8* %81, align 1, !range !3
  %83 = icmp eq i8 %82, 0
  %84 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %12, align 8
  br i1 %83, label %90, label %85

85:                                               ; preds = %80
  %86 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %84 to void (%"class.v8::internal::RegExpMacroAssembler"*)***
  %87 = load void (%"class.v8::internal::RegExpMacroAssembler"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*)*** %86, align 8
  %88 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %87, i64 2
  %89 = load void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %88, align 8
  call void %89(%"class.v8::internal::RegExpMacroAssembler"* %84) #18
  br label %98

90:                                               ; preds = %80
  %91 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %84 to i64* (%"class.v8::internal::RegExpMacroAssembler"*, i64*)***
  %92 = load i64* (%"class.v8::internal::RegExpMacroAssembler"*, i64*)**, i64* (%"class.v8::internal::RegExpMacroAssembler"*, i64*)*** %91, align 8
  %93 = getelementptr inbounds i64* (%"class.v8::internal::RegExpMacroAssembler"*, i64*)*, i64* (%"class.v8::internal::RegExpMacroAssembler"*, i64*)** %92, i64 28
  %94 = load i64* (%"class.v8::internal::RegExpMacroAssembler"*, i64*)*, i64* (%"class.v8::internal::RegExpMacroAssembler"*, i64*)** %93, align 8
  %95 = call i64* %94(%"class.v8::internal::RegExpMacroAssembler"* %84, i64* %11) #18
  call void @_ZN2v88internal7Isolate32IncreaseTotalRegexpCodeGeneratedENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::Isolate"* %2, i64* %95) #18
  store %"class.v8::internal::ZoneVector"* null, %"class.v8::internal::ZoneVector"** %19, align 8
  %96 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 1
  %97 = load i32, i32* %96, align 8
  br label %98

98:                                               ; preds = %90, %85
  %99 = phi i32 [ 0, %90 ], [ 3, %85 ]
  %100 = phi i64* [ %95, %90 ], [ null, %85 ]
  %101 = phi i32 [ %97, %90 ], [ 0, %85 ]
  %102 = getelementptr inbounds %"struct.v8::internal::RegExpCompiler::CompilationResult", %"struct.v8::internal::RegExpCompiler::CompilationResult"* %0, i64 0, i32 0
  store i32 %99, i32* %102, align 8
  %103 = getelementptr inbounds %"struct.v8::internal::RegExpCompiler::CompilationResult", %"struct.v8::internal::RegExpCompiler::CompilationResult"* %0, i64 0, i32 2, i32 0, i32 0
  store i64* %100, i64** %103, align 8
  %104 = getelementptr inbounds %"struct.v8::internal::RegExpCompiler::CompilationResult", %"struct.v8::internal::RegExpCompiler::CompilationResult"* %0, i64 0, i32 3
  store i32 %101, i32* %104, align 8
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %27) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #18
  %105 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %55, align 8
  %106 = icmp eq %"class.v8::internal::RegExpNode"** %105, null
  br i1 %106, label %110, label %107

107:                                              ; preds = %98
  %108 = ptrtoint %"class.v8::internal::RegExpNode"** %105 to i64
  %109 = bitcast %"class.v8::internal::RegExpNode"*** %57 to i64*
  store i64 %108, i64* %109, align 8
  br label %110

110:                                              ; preds = %98, %107
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #18
  ret void
}

declare void @_ZN2v88internal7Isolate32IncreaseTotalRegexpCodeGeneratedENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #5

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal5Trace14DeferredAction8MentionsEi(%"class.v8::internal::Trace::DeferredAction"* nocapture readonly, i32) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 6
  br i1 %5, label %6, label %16

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %0, i64 1
  %8 = bitcast %"class.v8::internal::Trace::DeferredAction"* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = trunc i64 %9 to i32
  %11 = icmp sgt i32 %10, %1
  br i1 %11, label %20, label %12

12:                                               ; preds = %6
  %13 = lshr i64 %9, 32
  %14 = trunc i64 %13 to i32
  %15 = icmp sge i32 %14, %1
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, %1
  br label %20

20:                                               ; preds = %12, %6, %16
  %21 = phi i1 [ %19, %16 ], [ false, %6 ], [ %15, %12 ]
  ret i1 %21
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal5Trace12mentions_regEi(%"class.v8::internal::Trace"* nocapture readonly, i32) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %3, align 8
  %5 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %4, null
  br i1 %5, label %29, label %6

6:                                                ; preds = %2, %25
  %7 = phi %"class.v8::internal::Trace::DeferredAction"* [ %27, %25 ], [ %4, %2 ]
  %8 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 6
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %7, i64 1
  %13 = bitcast %"class.v8::internal::Trace::DeferredAction"* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = trunc i64 %14 to i32
  %16 = icmp sgt i32 %15, %1
  br i1 %16, label %25, label %21

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %7, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, %1
  br i1 %20, label %29, label %25

21:                                               ; preds = %11
  %22 = lshr i64 %14, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp slt i32 %23, %1
  br i1 %24, label %25, label %29

25:                                               ; preds = %21, %11, %17
  %26 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %7, i64 0, i32 2
  %27 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %26, align 8
  %28 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %27, null
  br i1 %28, label %29, label %6

29:                                               ; preds = %25, %17, %21, %2
  %30 = phi i1 [ false, %2 ], [ true, %21 ], [ true, %17 ], [ false, %25 ]
  ret i1 %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal5Trace17GetStoredPositionEiPi(%"class.v8::internal::Trace"* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #8 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %4, align 8
  %6 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %5, null
  br i1 %6, label %35, label %7

7:                                                ; preds = %3, %31
  %8 = phi %"class.v8::internal::Trace::DeferredAction"* [ %33, %31 ], [ %5, %3 ]
  %9 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %8, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 6
  br i1 %11, label %12, label %18

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %8, i64 1
  %14 = bitcast %"class.v8::internal::Trace::DeferredAction"* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = trunc i64 %15 to i32
  %17 = icmp sgt i32 %16, %1
  br i1 %17, label %31, label %22

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %8, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, %1
  br i1 %21, label %26, label %31

22:                                               ; preds = %12
  %23 = lshr i64 %15, 32
  %24 = trunc i64 %23 to i32
  %25 = icmp slt i32 %24, %1
  br i1 %25, label %31, label %35

26:                                               ; preds = %18
  %27 = icmp eq i32 %10, 2
  br i1 %27, label %28, label %35

28:                                               ; preds = %26
  %29 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %8, i64 1, i32 0
  %30 = load i32, i32* %29, align 8
  store i32 %30, i32* %2, align 4
  br label %35

31:                                               ; preds = %22, %12, %18
  %32 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %8, i64 0, i32 2
  %33 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %32, align 8
  %34 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %33, null
  br i1 %34, label %35, label %7

35:                                               ; preds = %31, %22, %3, %26, %28
  %36 = phi i1 [ false, %26 ], [ true, %28 ], [ false, %3 ], [ false, %22 ], [ false, %31 ]
  ret i1 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal5Trace21FindAffectedRegistersEPNS0_13DynamicBitSetEPNS0_4ZoneE(%"class.v8::internal::Trace"* nocapture readonly, %"class.v8::internal::DynamicBitSet"*, %"class.v8::internal::Zone"*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %4, align 8
  %6 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %36, %3
  %8 = phi i32 [ -1, %3 ], [ %37, %36 ]
  ret i32 %8

9:                                                ; preds = %3, %36
  %10 = phi %"class.v8::internal::Trace::DeferredAction"* [ %39, %36 ], [ %5, %3 ]
  %11 = phi i32 [ %37, %36 ], [ -1, %3 ]
  %12 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %10, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 6
  br i1 %14, label %15, label %30

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %10, i64 1
  %17 = bitcast %"class.v8::internal::Trace::DeferredAction"* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = trunc i64 %18 to i32
  %20 = lshr i64 %18, 32
  %21 = trunc i64 %20 to i32
  %22 = icmp sgt i32 %19, %21
  br i1 %22, label %23, label %26

23:                                               ; preds = %26, %15
  %24 = icmp slt i32 %11, %21
  %25 = select i1 %24, i32 %21, i32 %11
  br label %36

26:                                               ; preds = %15, %26
  %27 = phi i32 [ %28, %26 ], [ %19, %15 ]
  tail call void @_ZN2v88internal13DynamicBitSet3SetEjPNS0_4ZoneE(%"class.v8::internal::DynamicBitSet"* %1, i32 %27, %"class.v8::internal::Zone"* %2)
  %28 = add nsw i32 %27, 1
  %29 = icmp slt i32 %27, %21
  br i1 %29, label %26, label %23

30:                                               ; preds = %9
  %31 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %10, i64 0, i32 1
  %32 = load i32, i32* %31, align 4
  tail call void @_ZN2v88internal13DynamicBitSet3SetEjPNS0_4ZoneE(%"class.v8::internal::DynamicBitSet"* %1, i32 %32, %"class.v8::internal::Zone"* %2)
  %33 = load i32, i32* %31, align 4
  %34 = icmp sgt i32 %33, %11
  %35 = select i1 %34, i32 %33, i32 %11
  br label %36

36:                                               ; preds = %30, %23
  %37 = phi i32 [ %25, %23 ], [ %35, %30 ]
  %38 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %10, i64 0, i32 2
  %39 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %38, align 8
  %40 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %39, null
  br i1 %40, label %7, label %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal13DynamicBitSet3SetEjPNS0_4ZoneE(%"class.v8::internal::DynamicBitSet"*, i32, %"class.v8::internal::Zone"*) local_unnamed_addr #2 comdat align 2 {
  %4 = icmp ult i32 %1, 32
  br i1 %4, label %5, label %10

5:                                                ; preds = %3
  %6 = shl i32 1, %1
  %7 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = or i32 %8, %6
  store i32 %9, i32* %7, align 8
  br label %115

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %0, i64 0, i32 1
  %12 = load %"class.v8::internal::ZoneList.1139"*, %"class.v8::internal::ZoneList.1139"** %11, align 8
  %13 = icmp eq %"class.v8::internal::ZoneList.1139"* %12, null
  br i1 %13, label %14, label %42

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %16
  %20 = icmp ult i64 %19, 16
  br i1 %20, label %21, label %23, !prof !2

21:                                               ; preds = %14
  %22 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 16) #18
  br label %25

23:                                               ; preds = %14
  %24 = add i64 %16, 16
  store i64 %24, i64* %15, align 8
  br label %25

25:                                               ; preds = %21, %23
  %26 = phi i64 [ %22, %21 ], [ %16, %23 ]
  %27 = inttoptr i64 %26 to %"class.v8::internal::ZoneList.1139"*
  %28 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %27, i64 0, i32 0
  store i32* null, i32** %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %27, i64 0, i32 1
  store i32 1, i32* %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %27, i64 0, i32 2
  store i32 0, i32* %30, align 4
  %31 = load i64, i64* %15, align 8
  %32 = load i64, i64* %17, align 8
  %33 = sub i64 %32, %31
  %34 = icmp ult i64 %33, 8
  br i1 %34, label %35, label %37, !prof !2

35:                                               ; preds = %25
  %36 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 8) #18
  br label %39

37:                                               ; preds = %25
  %38 = add i64 %31, 8
  store i64 %38, i64* %15, align 8
  br label %39

39:                                               ; preds = %35, %37
  %40 = phi i64 [ %36, %35 ], [ %31, %37 ]
  %41 = inttoptr i64 %40 to i32*
  store i32* %41, i32** %28, align 8
  store %"class.v8::internal::ZoneList.1139"* %27, %"class.v8::internal::ZoneList.1139"** %11, align 8
  br label %42

42:                                               ; preds = %39, %10
  %43 = phi %"class.v8::internal::ZoneList.1139"* [ %27, %39 ], [ %12, %10 ]
  %44 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %43, i64 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %59

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %43, i64 0, i32 0
  %49 = load i32*, i32** %48, align 8
  %50 = sext i32 %45 to i64
  br label %53

51:                                               ; preds = %53
  %52 = icmp eq i64 %58, %50
  br i1 %52, label %59, label %53

53:                                               ; preds = %51, %47
  %54 = phi i64 [ 0, %47 ], [ %58, %51 ]
  %55 = getelementptr inbounds i32, i32* %49, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, %1
  %58 = add nuw nsw i64 %54, 1
  br i1 %57, label %115, label %51

59:                                               ; preds = %51, %42
  %60 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %43, i64 0, i32 1
  %61 = load i32, i32* %60, align 8
  %62 = icmp slt i32 %45, %61
  br i1 %62, label %63, label %69

63:                                               ; preds = %59
  %64 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %43, i64 0, i32 0
  %65 = load i32*, i32** %64, align 8
  %66 = add nsw i32 %45, 1
  store i32 %66, i32* %44, align 4
  %67 = sext i32 %45 to i64
  %68 = getelementptr inbounds i32, i32* %65, i64 %67
  store i32 %1, i32* %68, align 4
  br label %115

69:                                               ; preds = %59
  %70 = shl nsw i32 %61, 1
  %71 = or i32 %70, 1
  %72 = sext i32 %71 to i64
  %73 = shl nsw i64 %72, 2
  %74 = add nsw i64 %73, 7
  %75 = and i64 %74, -8
  %76 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %79 = load i64, i64* %78, align 8
  %80 = sub i64 %79, %77
  %81 = icmp ugt i64 %75, %80
  br i1 %81, label %82, label %84, !prof !2

82:                                               ; preds = %69
  %83 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %75) #18
  br label %86

84:                                               ; preds = %69
  %85 = add i64 %77, %75
  store i64 %85, i64* %76, align 8
  br label %86

86:                                               ; preds = %84, %82
  %87 = phi i64 [ %83, %82 ], [ %77, %84 ]
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %44, align 4
  %90 = icmp sgt i32 %89, 0
  br i1 %90, label %91, label %109

91:                                               ; preds = %86
  %92 = inttoptr i64 %87 to i8*
  %93 = bitcast %"class.v8::internal::ZoneList.1139"* %43 to i8**
  %94 = load i8*, i8** %93, align 8
  %95 = sext i32 %89 to i64
  %96 = shl nsw i64 %95, 2
  %97 = add nsw i64 %96, -4
  %98 = lshr exact i64 %97, 2
  switch i64 %98, label %108 [
    i64 3, label %107
    i64 1, label %102
    i64 2, label %106
    i64 0, label %99
  ]

99:                                               ; preds = %91
  %100 = bitcast i8* %94 to i32*
  %101 = load i32, i32* %100, align 1
  store i32 %101, i32* %88, align 1
  br label %109

102:                                              ; preds = %91
  %103 = bitcast i8* %94 to i64*
  %104 = inttoptr i64 %87 to i64*
  %105 = load i64, i64* %103, align 1
  store i64 %105, i64* %104, align 1
  br label %109

106:                                              ; preds = %91
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %94, i64 12, i1 false) #18
  br label %109

107:                                              ; preds = %91
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %94, i64 16, i1 false) #18
  br label %109

108:                                              ; preds = %91
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %94, i64 %96, i1 false) #18
  br label %109

109:                                              ; preds = %86, %99, %102, %106, %107, %108
  %110 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %43, i64 0, i32 0
  store i32* %88, i32** %110, align 8
  store i32 %71, i32* %60, align 8
  %111 = load i32, i32* %44, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %44, align 4
  %113 = sext i32 %111 to i64
  %114 = getelementptr inbounds i32, i32* %88, i64 %113
  store i32 %1, i32* %114, align 4
  br label %115

115:                                              ; preds = %53, %109, %63, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal5Trace24RestoreAffectedRegistersEPNS0_20RegExpMacroAssemblerEiRKNS0_13DynamicBitSetES6_(%"class.v8::internal::Trace"* nocapture readnone, %"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::DynamicBitSet"* nocapture readonly dereferenceable(16), %"class.v8::internal::DynamicBitSet"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %6 = icmp sgt i32 %2, -1
  br i1 %6, label %7, label %14

7:                                                ; preds = %5
  %8 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %3, i64 0, i32 1
  %9 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %4, i64 0, i32 1
  %10 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %3, i64 0, i32 0
  %11 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32)***
  %12 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %4, i64 0, i32 0
  %13 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)***
  br label %15

14:                                               ; preds = %116, %5
  ret void

15:                                               ; preds = %7, %116
  %16 = phi i32 [ %2, %7 ], [ %118, %116 ]
  %17 = icmp ult i32 %16, 32
  br i1 %17, label %37, label %18

18:                                               ; preds = %15
  %19 = load %"class.v8::internal::ZoneList.1139"*, %"class.v8::internal::ZoneList.1139"** %8, align 8
  %20 = icmp eq %"class.v8::internal::ZoneList.1139"* %19, null
  br i1 %20, label %50, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %19, i64 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %50

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %19, i64 0, i32 0
  %27 = load i32*, i32** %26, align 8
  %28 = sext i32 %23 to i64
  br label %31

29:                                               ; preds = %31
  %30 = icmp eq i64 %36, %28
  br i1 %30, label %50, label %31

31:                                               ; preds = %29, %25
  %32 = phi i64 [ 0, %25 ], [ %36, %29 ]
  %33 = getelementptr inbounds i32, i32* %27, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, %16
  %36 = add nuw nsw i64 %32, 1
  br i1 %35, label %42, label %29

37:                                               ; preds = %15
  %38 = load i32, i32* %10, align 8
  %39 = shl i32 1, %16
  %40 = and i32 %38, %39
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %31, %37
  %43 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %11, align 8
  %44 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %43, i64 36
  %45 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %44, align 8
  tail call void %45(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %16) #18
  br label %116

46:                                               ; preds = %37
  %47 = load i32, i32* %12, align 8
  %48 = and i32 %47, %39
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %116, label %69

50:                                               ; preds = %29, %21, %18
  %51 = load %"class.v8::internal::ZoneList.1139"*, %"class.v8::internal::ZoneList.1139"** %9, align 8
  %52 = icmp eq %"class.v8::internal::ZoneList.1139"* %51, null
  br i1 %52, label %116, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %51, i64 0, i32 2
  %55 = load i32, i32* %54, align 4
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %116

57:                                               ; preds = %53
  %58 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %51, i64 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = sext i32 %55 to i64
  br label %63

61:                                               ; preds = %63
  %62 = icmp eq i64 %68, %60
  br i1 %62, label %116, label %63

63:                                               ; preds = %61, %57
  %64 = phi i64 [ 0, %57 ], [ %68, %61 ]
  %65 = getelementptr inbounds i32, i32* %59, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, %16
  %68 = add nuw nsw i64 %64, 1
  br i1 %67, label %69, label %61

69:                                               ; preds = %63, %46
  %70 = icmp sgt i32 %16, 0
  br i1 %70, label %71, label %111

71:                                               ; preds = %69
  %72 = load %"class.v8::internal::ZoneList.1139"*, %"class.v8::internal::ZoneList.1139"** %9, align 8
  %73 = icmp eq %"class.v8::internal::ZoneList.1139"* %72, null
  %74 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %72, i64 0, i32 2
  %75 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %72, i64 0, i32 0
  %76 = load i32, i32* %12, align 8
  br i1 %73, label %77, label %87

77:                                               ; preds = %71, %85
  %78 = phi i32 [ %79, %85 ], [ %16, %71 ]
  %79 = add nsw i32 %78, -1
  %80 = icmp ult i32 %79, 32
  br i1 %80, label %81, label %111

81:                                               ; preds = %77
  %82 = shl i32 1, %79
  %83 = and i32 %76, %82
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %111, label %85

85:                                               ; preds = %81
  %86 = icmp sgt i32 %79, 0
  br i1 %86, label %77, label %111

87:                                               ; preds = %71, %109
  %88 = phi i32 [ %89, %109 ], [ %16, %71 ]
  %89 = add nsw i32 %88, -1
  %90 = icmp ult i32 %89, 32
  br i1 %90, label %105, label %91

91:                                               ; preds = %87
  %92 = load i32, i32* %74, align 4
  %93 = icmp sgt i32 %92, 0
  br i1 %93, label %94, label %111

94:                                               ; preds = %91
  %95 = load i32*, i32** %75, align 8
  %96 = sext i32 %92 to i64
  br label %99

97:                                               ; preds = %99
  %98 = icmp eq i64 %104, %96
  br i1 %98, label %111, label %99

99:                                               ; preds = %97, %94
  %100 = phi i64 [ 0, %94 ], [ %104, %97 ]
  %101 = getelementptr inbounds i32, i32* %95, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, %89
  %104 = add nuw nsw i64 %100, 1
  br i1 %103, label %109, label %97

105:                                              ; preds = %87
  %106 = shl i32 1, %89
  %107 = and i32 %76, %106
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %111, label %109

109:                                              ; preds = %99, %105
  %110 = icmp sgt i32 %89, 0
  br i1 %110, label %87, label %111

111:                                              ; preds = %109, %91, %105, %85, %77, %81, %97, %69
  %112 = phi i32 [ %16, %69 ], [ %88, %97 ], [ %79, %85 ], [ %78, %77 ], [ %78, %81 ], [ %89, %109 ], [ %88, %91 ], [ %88, %105 ]
  %113 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*** %13, align 8
  %114 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %113, i64 46
  %115 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %114, align 8
  tail call void %115(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %112, i32 %16) #18
  br label %116

116:                                              ; preds = %61, %46, %53, %50, %42, %111
  %117 = phi i32 [ %16, %42 ], [ %112, %111 ], [ %16, %46 ], [ %16, %50 ], [ %16, %53 ], [ %16, %61 ]
  %118 = add nsw i32 %117, -1
  %119 = icmp sgt i32 %117, 0
  br i1 %119, label %15, label %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal5Trace22PerformDeferredActionsEPNS0_20RegExpMacroAssemblerEiRKNS0_13DynamicBitSetEPS4_S7_PNS0_4ZoneE(%"class.v8::internal::Trace"* nocapture readonly, %"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::DynamicBitSet"* nocapture readonly dereferenceable(16), %"class.v8::internal::DynamicBitSet"*, %"class.v8::internal::DynamicBitSet"*, %"class.v8::internal::Zone"*) local_unnamed_addr #2 align 2 {
  %8 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to i32 (%"class.v8::internal::RegExpMacroAssembler"*)***
  %9 = load i32 (%"class.v8::internal::RegExpMacroAssembler"*)**, i32 (%"class.v8::internal::RegExpMacroAssembler"*)*** %8, align 8
  %10 = getelementptr inbounds i32 (%"class.v8::internal::RegExpMacroAssembler"*)*, i32 (%"class.v8::internal::RegExpMacroAssembler"*)** %9, i64 3
  %11 = load i32 (%"class.v8::internal::RegExpMacroAssembler"*)*, i32 (%"class.v8::internal::RegExpMacroAssembler"*)** %10, align 8
  %12 = tail call i32 %11(%"class.v8::internal::RegExpMacroAssembler"* %1) #18
  %13 = add nsw i32 %12, 1
  %14 = sdiv i32 %13, 2
  %15 = icmp slt i32 %2, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %3, i64 0, i32 1
  %18 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %3, i64 0, i32 0
  %19 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 1
  %20 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)***
  br label %22

21:                                               ; preds = %221, %7
  ret void

22:                                               ; preds = %221, %16
  %23 = phi i32 [ 0, %16 ], [ %222, %221 ]
  %24 = phi i32 [ 0, %16 ], [ %223, %221 ]
  %25 = icmp ult i32 %24, 32
  br i1 %25, label %45, label %26

26:                                               ; preds = %22
  %27 = load %"class.v8::internal::ZoneList.1139"*, %"class.v8::internal::ZoneList.1139"** %17, align 8
  %28 = icmp eq %"class.v8::internal::ZoneList.1139"* %27, null
  br i1 %28, label %221, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %27, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %221

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %27, i64 0, i32 0
  %35 = load i32*, i32** %34, align 8
  %36 = sext i32 %31 to i64
  br label %39

37:                                               ; preds = %39
  %38 = icmp eq i64 %44, %36
  br i1 %38, label %221, label %39

39:                                               ; preds = %37, %33
  %40 = phi i64 [ 0, %33 ], [ %44, %37 ]
  %41 = getelementptr inbounds i32, i32* %35, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, %24
  %44 = add nuw nsw i64 %40, 1
  br i1 %43, label %50, label %37

45:                                               ; preds = %22
  %46 = load i32, i32* %18, align 8
  %47 = shl i32 1, %24
  %48 = and i32 %46, %47
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %221, label %50

50:                                               ; preds = %39, %45
  %51 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %19, align 8
  %52 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %51, null
  br i1 %52, label %221, label %53

53:                                               ; preds = %50
  %54 = icmp ult i32 %24, 2
  br i1 %54, label %55, label %118

55:                                               ; preds = %53, %103
  %56 = phi %"class.v8::internal::Trace::DeferredAction"* [ %110, %103 ], [ %51, %53 ]
  %57 = phi i32 [ %108, %103 ], [ -2147483648, %53 ]
  %58 = phi i8 [ %107, %103 ], [ 0, %53 ]
  %59 = phi i8 [ %106, %103 ], [ 0, %53 ]
  %60 = phi i32 [ %105, %103 ], [ 0, %53 ]
  %61 = phi i32 [ %104, %103 ], [ 0, %53 ]
  %62 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %56, i64 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 6
  br i1 %64, label %90, label %65

65:                                               ; preds = %55
  %66 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %56, i64 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, %24
  br i1 %68, label %69, label %103

69:                                               ; preds = %65
  switch i32 %63, label %173 [
    i32 0, label %83
    i32 1, label %78
    i32 2, label %70
  ]

70:                                               ; preds = %69
  %71 = and i8 %58, 1
  %72 = icmp eq i8 %71, 0
  %73 = icmp eq i32 %57, -2147483648
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %103

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %56, i64 1, i32 0
  %77 = load i32, i32* %76, align 8
  br label %103

78:                                               ; preds = %69
  %79 = and i8 %59, 1
  %80 = xor i8 %79, 1
  %81 = zext i8 %80 to i32
  %82 = add nsw i32 %60, %81
  br label %103

83:                                               ; preds = %69
  %84 = and i8 %59, 1
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %103

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %56, i64 1, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = add nsw i32 %88, %60
  br label %103

90:                                               ; preds = %55
  %91 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %56, i64 1
  %92 = bitcast %"class.v8::internal::Trace::DeferredAction"* %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = trunc i64 %93 to i32
  %95 = icmp slt i32 %24, %94
  br i1 %95, label %103, label %96

96:                                               ; preds = %90
  %97 = lshr i64 %93, 32
  %98 = trunc i64 %97 to i32
  %99 = icmp sgt i32 %24, %98
  br i1 %99, label %103, label %100

100:                                              ; preds = %96
  %101 = icmp eq i32 %57, -2147483648
  %102 = select i1 %101, i8 1, i8 %58
  br label %103

103:                                              ; preds = %70, %75, %100, %96, %90, %86, %83, %78, %65
  %104 = phi i32 [ 1, %100 ], [ 1, %78 ], [ %61, %96 ], [ 1, %83 ], [ 1, %86 ], [ %61, %65 ], [ %61, %90 ], [ 0, %75 ], [ 0, %70 ]
  %105 = phi i32 [ %60, %100 ], [ %82, %78 ], [ %60, %96 ], [ %60, %83 ], [ %89, %86 ], [ %60, %65 ], [ %60, %90 ], [ %60, %75 ], [ %60, %70 ]
  %106 = phi i8 [ %59, %100 ], [ %59, %78 ], [ %59, %96 ], [ %59, %83 ], [ 1, %86 ], [ %59, %65 ], [ %59, %90 ], [ %59, %75 ], [ %59, %70 ]
  %107 = phi i8 [ %102, %100 ], [ %58, %78 ], [ %58, %96 ], [ %58, %83 ], [ %58, %86 ], [ %58, %65 ], [ %58, %90 ], [ %58, %75 ], [ %58, %70 ]
  %108 = phi i32 [ %57, %100 ], [ %57, %78 ], [ %57, %96 ], [ %57, %83 ], [ %57, %86 ], [ %57, %65 ], [ %57, %90 ], [ %77, %75 ], [ %57, %70 ]
  %109 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %56, i64 0, i32 2
  %110 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %109, align 8
  %111 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %110, null
  br i1 %111, label %112, label %55

112:                                              ; preds = %174, %103
  %113 = phi i32 [ %104, %103 ], [ %175, %174 ]
  %114 = phi i32 [ %105, %103 ], [ %176, %174 ]
  %115 = phi i8 [ %106, %103 ], [ %177, %174 ]
  %116 = phi i8 [ %107, %103 ], [ %178, %174 ]
  %117 = phi i32 [ %108, %103 ], [ %179, %174 ]
  switch i32 %113, label %194 [
    i32 1, label %183
    i32 2, label %191
  ]

118:                                              ; preds = %53, %174
  %119 = phi %"class.v8::internal::Trace::DeferredAction"* [ %181, %174 ], [ %51, %53 ]
  %120 = phi i32 [ %179, %174 ], [ -2147483648, %53 ]
  %121 = phi i8 [ %178, %174 ], [ 0, %53 ]
  %122 = phi i8 [ %177, %174 ], [ 0, %53 ]
  %123 = phi i32 [ %176, %174 ], [ 0, %53 ]
  %124 = phi i32 [ %175, %174 ], [ 0, %53 ]
  %125 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %119, i64 0, i32 0
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, 6
  br i1 %127, label %128, label %134

128:                                              ; preds = %118
  %129 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %119, i64 1
  %130 = bitcast %"class.v8::internal::Trace::DeferredAction"* %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = trunc i64 %131 to i32
  %133 = icmp slt i32 %24, %132
  br i1 %133, label %174, label %138

134:                                              ; preds = %118
  %135 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %119, i64 0, i32 1
  %136 = load i32, i32* %135, align 4
  %137 = icmp eq i32 %136, %24
  br i1 %137, label %142, label %174

138:                                              ; preds = %128
  %139 = lshr i64 %131, 32
  %140 = trunc i64 %139 to i32
  %141 = icmp sgt i32 %24, %140
  br i1 %141, label %174, label %170

142:                                              ; preds = %134
  switch i32 %126, label %173 [
    i32 0, label %143
    i32 1, label %150
    i32 2, label %155
  ]

143:                                              ; preds = %142
  %144 = and i8 %122, 1
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %146, label %174

146:                                              ; preds = %143
  %147 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %119, i64 1, i32 0
  %148 = load i32, i32* %147, align 8
  %149 = add nsw i32 %148, %123
  br label %174

150:                                              ; preds = %142
  %151 = and i8 %122, 1
  %152 = xor i8 %151, 1
  %153 = zext i8 %152 to i32
  %154 = add nsw i32 %123, %153
  br label %174

155:                                              ; preds = %142
  %156 = and i8 %121, 1
  %157 = icmp eq i8 %156, 0
  %158 = icmp eq i32 %120, -2147483648
  %159 = and i1 %157, %158
  br i1 %159, label %160, label %163

160:                                              ; preds = %155
  %161 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %119, i64 1, i32 0
  %162 = load i32, i32* %161, align 8
  br label %163

163:                                              ; preds = %160, %155
  %164 = phi i32 [ %162, %160 ], [ %120, %155 ]
  %165 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %119, i64 1, i32 1
  %166 = bitcast i32* %165 to i8*
  %167 = load i8, i8* %166, align 4, !range !3
  %168 = icmp eq i8 %167, 0
  %169 = select i1 %168, i32 1, i32 2
  br label %174

170:                                              ; preds = %138
  %171 = icmp eq i32 %120, -2147483648
  %172 = select i1 %171, i8 1, i8 %121
  br label %174

173:                                              ; preds = %142, %69
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

174:                                              ; preds = %138, %128, %134, %163, %146, %143, %170, %150
  %175 = phi i32 [ 1, %170 ], [ 1, %150 ], [ %124, %138 ], [ 1, %143 ], [ 1, %146 ], [ %169, %163 ], [ %124, %134 ], [ %124, %128 ]
  %176 = phi i32 [ %123, %170 ], [ %154, %150 ], [ %123, %138 ], [ %123, %143 ], [ %149, %146 ], [ %123, %163 ], [ %123, %134 ], [ %123, %128 ]
  %177 = phi i8 [ %122, %170 ], [ %122, %150 ], [ %122, %138 ], [ %122, %143 ], [ 1, %146 ], [ %122, %163 ], [ %122, %134 ], [ %122, %128 ]
  %178 = phi i8 [ %172, %170 ], [ %121, %150 ], [ %121, %138 ], [ %121, %143 ], [ %121, %146 ], [ %121, %163 ], [ %121, %134 ], [ %121, %128 ]
  %179 = phi i32 [ %120, %170 ], [ %120, %150 ], [ %120, %138 ], [ %120, %143 ], [ %120, %146 ], [ %164, %163 ], [ %120, %134 ], [ %120, %128 ]
  %180 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %119, i64 0, i32 2
  %181 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %180, align 8
  %182 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %181, null
  br i1 %182, label %112, label %118

183:                                              ; preds = %112
  %184 = add nsw i32 %23, 1
  %185 = icmp eq i32 %184, %14
  %186 = select i1 %185, i32 0, i32 %184
  %187 = zext i1 %185 to i32
  %188 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*** %20, align 8
  %189 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %188, i64 39
  %190 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %189, align 8
  tail call void %190(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %24, i32 %187) #18
  br label %191

191:                                              ; preds = %112, %183
  %192 = phi %"class.v8::internal::DynamicBitSet"* [ %4, %183 ], [ %5, %112 ]
  %193 = phi i32 [ %186, %183 ], [ %23, %112 ]
  tail call void @_ZN2v88internal13DynamicBitSet3SetEjPNS0_4ZoneE(%"class.v8::internal::DynamicBitSet"* %192, i32 %24, %"class.v8::internal::Zone"* %6)
  br label %194

194:                                              ; preds = %191, %112
  %195 = phi i32 [ %23, %112 ], [ %193, %191 ]
  %196 = icmp eq i32 %117, -2147483648
  br i1 %196, label %201, label %197

197:                                              ; preds = %194
  %198 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*** %20, align 8
  %199 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %198, i64 45
  %200 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %199, align 8
  tail call void %200(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %24, i32 %117) #18
  br label %221

201:                                              ; preds = %194
  %202 = and i8 %116, 1
  %203 = icmp eq i8 %202, 0
  br i1 %203, label %208, label %204

204:                                              ; preds = %201
  %205 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*** %20, align 8
  %206 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %205, i64 46
  %207 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %206, align 8
  tail call void %207(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %24, i32 %24) #18
  br label %221

208:                                              ; preds = %201
  %209 = and i8 %115, 1
  %210 = icmp eq i8 %209, 0
  br i1 %210, label %215, label %211

211:                                              ; preds = %208
  %212 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*** %20, align 8
  %213 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %212, i64 43
  %214 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %213, align 8
  tail call void %214(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %24, i32 %114) #18
  br label %221

215:                                              ; preds = %208
  %216 = icmp eq i32 %114, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %215
  %218 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*** %20, align 8
  %219 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %218, i64 6
  %220 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %219, align 8
  tail call void %220(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %24, i32 %114) #18
  br label %221

221:                                              ; preds = %37, %50, %45, %29, %26, %197, %211, %217, %204, %215
  %222 = phi i32 [ %23, %45 ], [ %195, %215 ], [ %195, %204 ], [ %195, %217 ], [ %195, %211 ], [ %195, %197 ], [ %23, %26 ], [ %23, %29 ], [ %23, %50 ], [ %23, %37 ]
  %223 = add nuw i32 %24, 1
  %224 = icmp eq i32 %24, %2
  br i1 %224, label %21, label %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal5Trace5FlushEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::Trace"* nocapture readonly, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.v8::internal::Trace", align 8
  %5 = alloca %"class.v8::internal::DynamicBitSet", align 8
  %6 = alloca %"class.v8::internal::DynamicBitSet", align 8
  %7 = alloca %"class.v8::internal::DynamicBitSet", align 8
  %8 = alloca %"class.v8::internal::Label", align 4
  %9 = alloca %"class.v8::internal::Trace", align 8
  %10 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %11 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 1
  %13 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %12, align 8
  %14 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %13, null
  %15 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 2
  %16 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %15, align 8
  %17 = icmp eq %"class.v8::internal::Label"* %16, null
  %18 = and i1 %14, %17
  br i1 %18, label %19, label %47

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %11 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32)***
  %25 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %25, i64 5
  %27 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %26, align 8
  tail call void %27(%"class.v8::internal::RegExpMacroAssembler"* %11, i32 %21) #18
  br label %28

28:                                               ; preds = %19, %23
  %29 = bitcast %"class.v8::internal::Trace"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %29) #18
  %30 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 0
  store i32 0, i32* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 1
  %32 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 7, i32 1, i64 1
  %33 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %33, i8 0, i64 9, i1 false) #18
  %34 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 7, i32 1, i64 2
  %35 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 9, i1 false) #18
  %36 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 7, i32 1, i64 3
  %37 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 9, i1 false) #18
  %38 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 7, i32 2
  %39 = bitcast i32* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %39, i8 0, i64 9, i1 false) #18
  %40 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 8
  %41 = bitcast %"class.v8::internal::Trace::DeferredAction"** %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 53, i1 false) #18
  store i32 100, i32* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 9
  store i32 -1, i32* %42, align 4
  %43 = bitcast %"class.v8::internal::RegExpNode"* %2 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %44 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %44, i64 3
  %46 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %45, align 8
  call void %46(%"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %4) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %29) #18
  br label %422

47:                                               ; preds = %3
  %48 = bitcast %"class.v8::internal::DynamicBitSet"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %48) #18
  %49 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %5, i64 0, i32 0
  store i32 0, i32* %49, align 8
  %50 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %5, i64 0, i32 1
  store %"class.v8::internal::ZoneList.1139"* null, %"class.v8::internal::ZoneList.1139"** %50, align 8
  %51 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 2
  %52 = icmp eq %"class.v8::internal::Label"* %16, null
  br i1 %52, label %59, label %53

53:                                               ; preds = %47
  %54 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %11 to void (%"class.v8::internal::RegExpMacroAssembler"*)***
  %55 = load void (%"class.v8::internal::RegExpMacroAssembler"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*)*** %54, align 8
  %56 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %55, i64 38
  %57 = load void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %56, align 8
  tail call void %57(%"class.v8::internal::RegExpMacroAssembler"* %11) #18
  %58 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %12, align 8
  br label %59

59:                                               ; preds = %47, %53
  %60 = phi %"class.v8::internal::Trace::DeferredAction"* [ %13, %47 ], [ %58, %53 ]
  %61 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 15
  %62 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %61, align 8
  %63 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %60, null
  br i1 %63, label %98, label %64

64:                                               ; preds = %59, %91
  %65 = phi %"class.v8::internal::Trace::DeferredAction"* [ %94, %91 ], [ %60, %59 ]
  %66 = phi i32 [ %92, %91 ], [ -1, %59 ]
  %67 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %65, i64 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %68, 6
  br i1 %69, label %70, label %85

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %65, i64 1
  %72 = bitcast %"class.v8::internal::Trace::DeferredAction"* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = trunc i64 %73 to i32
  %75 = lshr i64 %73, 32
  %76 = trunc i64 %75 to i32
  %77 = icmp sgt i32 %74, %76
  br i1 %77, label %78, label %81

78:                                               ; preds = %81, %70
  %79 = icmp slt i32 %66, %76
  %80 = select i1 %79, i32 %76, i32 %66
  br label %91

81:                                               ; preds = %70, %81
  %82 = phi i32 [ %83, %81 ], [ %74, %70 ]
  call void @_ZN2v88internal13DynamicBitSet3SetEjPNS0_4ZoneE(%"class.v8::internal::DynamicBitSet"* nonnull %5, i32 %82, %"class.v8::internal::Zone"* %62) #18
  %83 = add nsw i32 %82, 1
  %84 = icmp slt i32 %82, %76
  br i1 %84, label %81, label %78

85:                                               ; preds = %64
  %86 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %65, i64 0, i32 1
  %87 = load i32, i32* %86, align 4
  call void @_ZN2v88internal13DynamicBitSet3SetEjPNS0_4ZoneE(%"class.v8::internal::DynamicBitSet"* nonnull %5, i32 %87, %"class.v8::internal::Zone"* %62) #18
  %88 = load i32, i32* %86, align 4
  %89 = icmp sgt i32 %88, %66
  %90 = select i1 %89, i32 %88, i32 %66
  br label %91

91:                                               ; preds = %85, %78
  %92 = phi i32 [ %80, %78 ], [ %90, %85 ]
  %93 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %65, i64 0, i32 2
  %94 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %93, align 8
  %95 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %94, null
  br i1 %95, label %96, label %64

96:                                               ; preds = %91
  %97 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %61, align 8
  br label %98

98:                                               ; preds = %96, %59
  %99 = phi %"class.v8::internal::Zone"* [ %62, %59 ], [ %97, %96 ]
  %100 = phi i32 [ -1, %59 ], [ %92, %96 ]
  %101 = bitcast %"class.v8::internal::DynamicBitSet"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %101) #18
  %102 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %6, i64 0, i32 0
  store i32 0, i32* %102, align 8
  %103 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %6, i64 0, i32 1
  store %"class.v8::internal::ZoneList.1139"* null, %"class.v8::internal::ZoneList.1139"** %103, align 8
  %104 = bitcast %"class.v8::internal::DynamicBitSet"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %104) #18
  %105 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %7, i64 0, i32 0
  store i32 0, i32* %105, align 8
  %106 = getelementptr inbounds %"class.v8::internal::DynamicBitSet", %"class.v8::internal::DynamicBitSet"* %7, i64 0, i32 1
  store %"class.v8::internal::ZoneList.1139"* null, %"class.v8::internal::ZoneList.1139"** %106, align 8
  call void @_ZN2v88internal5Trace22PerformDeferredActionsEPNS0_20RegExpMacroAssemblerEiRKNS0_13DynamicBitSetEPS4_S7_PNS0_4ZoneE(%"class.v8::internal::Trace"* %0, %"class.v8::internal::RegExpMacroAssembler"* %11, i32 %100, %"class.v8::internal::DynamicBitSet"* nonnull dereferenceable(16) %5, %"class.v8::internal::DynamicBitSet"* nonnull %6, %"class.v8::internal::DynamicBitSet"* nonnull %7, %"class.v8::internal::Zone"* %99)
  %107 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %115, label %110

110:                                              ; preds = %98
  %111 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %11 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32)***
  %112 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %111, align 8
  %113 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %112, i64 5
  %114 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %113, align 8
  call void %114(%"class.v8::internal::RegExpMacroAssembler"* %11, i32 %108) #18
  br label %115

115:                                              ; preds = %98, %110
  %116 = bitcast %"class.v8::internal::Label"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %116) #18
  %117 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %8, i64 0, i32 0
  store i32 0, i32* %117, align 4
  %118 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %8, i64 0, i32 1
  store i32 0, i32* %118, align 4
  %119 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %11 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %120 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %119, align 8
  %121 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %120, i64 37
  %122 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %121, align 8
  call void %122(%"class.v8::internal::RegExpMacroAssembler"* %11, %"class.v8::internal::Label"* nonnull %8) #18
  %123 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 9
  %124 = load i8, i8* %123, align 2, !range !3
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %126, label %149

126:                                              ; preds = %115
  %127 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 5
  %128 = load i32, i32* %127, align 8
  %129 = icmp slt i32 %128, 101
  br i1 %129, label %130, label %149

130:                                              ; preds = %126
  %131 = bitcast %"class.v8::internal::Trace"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %131) #18
  %132 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 0
  store i32 0, i32* %132, align 8
  %133 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 1
  %134 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 7, i32 1, i64 1
  %135 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %134 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %135, i8 0, i64 9, i1 false) #18
  %136 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 7, i32 1, i64 2
  %137 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %136 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %137, i8 0, i64 9, i1 false) #18
  %138 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 7, i32 1, i64 3
  %139 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %138 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %139, i8 0, i64 9, i1 false) #18
  %140 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 7, i32 2
  %141 = bitcast i32* %140 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %141, i8 0, i64 9, i1 false) #18
  %142 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 8
  %143 = bitcast %"class.v8::internal::Trace::DeferredAction"** %133 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 53, i1 false) #18
  store i32 100, i32* %142, align 8
  %144 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 9
  store i32 -1, i32* %144, align 4
  %145 = bitcast %"class.v8::internal::RegExpNode"* %2 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %146 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %145, align 8
  %147 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %146, i64 3
  %148 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %147, align 8
  call void %148(%"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %9) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %131) #18
  br label %403

149:                                              ; preds = %115, %126
  %150 = ptrtoint %"class.v8::internal::RegExpNode"* %2 to i64
  %151 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 3
  %152 = load i8, i8* %151, align 8, !range !3
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %154, label %398

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 2, i32 0
  %156 = load i32, i32* %155, align 4
  %157 = icmp slt i32 %156, 0
  br i1 %157, label %398, label %158

158:                                              ; preds = %154
  store i8 1, i8* %151, align 8
  %159 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 4
  %160 = bitcast %"class.v8::internal::ZoneVector"** %159 to %"class.std::__1::vector"**
  %161 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %160, align 8
  %162 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %161, i64 0, i32 0, i32 1
  %163 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %162, align 8
  %164 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %161, i64 0, i32 0, i32 2, i32 0, i32 0
  %165 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %164, align 8
  %166 = icmp eq %"class.v8::internal::RegExpNode"** %163, %165
  %167 = ptrtoint %"class.v8::internal::RegExpNode"** %165 to i64
  br i1 %166, label %173, label %168

168:                                              ; preds = %158
  %169 = bitcast %"class.v8::internal::RegExpNode"** %163 to i64*
  store i64 %150, i64* %169, align 8
  %170 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %163, i64 1
  %171 = ptrtoint %"class.v8::internal::RegExpNode"** %170 to i64
  %172 = bitcast %"class.v8::internal::RegExpNode"*** %162 to i64*
  store i64 %171, i64* %172, align 8
  br label %398

173:                                              ; preds = %158
  %174 = ptrtoint %"class.v8::internal::RegExpNode"** %163 to i64
  %175 = bitcast %"class.v8::internal::RegExpNode"*** %162 to i64*
  %176 = bitcast %"class.std::__1::vector"* %161 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = sub i64 %174, %177
  %179 = ashr exact i64 %178, 3
  %180 = add nsw i64 %179, 1
  %181 = icmp ugt i64 %180, 268435455
  br i1 %181, label %182, label %184

182:                                              ; preds = %173
  %183 = bitcast %"class.std::__1::vector"* %161 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %183) #17
  unreachable

184:                                              ; preds = %173
  %185 = bitcast %"class.v8::internal::RegExpNode"*** %164 to i64*
  %186 = sub i64 %167, %177
  %187 = ashr exact i64 %186, 3
  %188 = icmp ult i64 %187, 134217727
  br i1 %188, label %189, label %194

189:                                              ; preds = %184
  %190 = ashr exact i64 %186, 2
  %191 = icmp ult i64 %190, %180
  %192 = select i1 %191, i64 %180, i64 %190
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %212, label %194

194:                                              ; preds = %189, %184
  %195 = phi i64 [ %192, %189 ], [ 268435455, %184 ]
  %196 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %161, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %197 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %196, align 8
  %198 = shl i64 %195, 3
  %199 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %197, i64 0, i32 2
  %200 = load i64, i64* %199, align 8
  %201 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %197, i64 0, i32 3
  %202 = load i64, i64* %201, align 8
  %203 = sub i64 %202, %200
  %204 = icmp ugt i64 %198, %203
  br i1 %204, label %205, label %207, !prof !2

205:                                              ; preds = %194
  %206 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %197, i64 %198) #18
  br label %209

207:                                              ; preds = %194
  %208 = add i64 %200, %198
  store i64 %208, i64* %199, align 8
  br label %209

209:                                              ; preds = %207, %205
  %210 = phi i64 [ %206, %205 ], [ %200, %207 ]
  %211 = inttoptr i64 %210 to %"class.v8::internal::RegExpNode"**
  br label %212

212:                                              ; preds = %209, %189
  %213 = phi i64 [ %195, %209 ], [ 0, %189 ]
  %214 = phi %"class.v8::internal::RegExpNode"** [ %211, %209 ], [ null, %189 ]
  %215 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %214, i64 %179
  %216 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %214, i64 %213
  %217 = ptrtoint %"class.v8::internal::RegExpNode"** %216 to i64
  %218 = bitcast %"class.v8::internal::RegExpNode"** %215 to i64*
  store i64 %150, i64* %218, align 8
  %219 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %215, i64 1
  %220 = ptrtoint %"class.v8::internal::RegExpNode"** %219 to i64
  %221 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %161, i64 0, i32 0, i32 0
  %222 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %221, align 8
  %223 = ptrtoint %"class.v8::internal::RegExpNode"** %222 to i64
  %224 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %162, align 8
  %225 = icmp eq %"class.v8::internal::RegExpNode"** %224, %222
  br i1 %225, label %395, label %226

226:                                              ; preds = %212
  %227 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %224, i64 -1
  %228 = ptrtoint %"class.v8::internal::RegExpNode"** %227 to i64
  %229 = sub i64 %228, %223
  %230 = lshr i64 %229, 3
  %231 = add nuw nsw i64 %230, 1
  %232 = icmp ult i64 %231, 4
  br i1 %232, label %325, label %233

233:                                              ; preds = %226
  %234 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %224, i64 -1
  %235 = ptrtoint %"class.v8::internal::RegExpNode"** %234 to i64
  %236 = sub i64 %235, %223
  %237 = lshr i64 %236, 3
  %238 = xor i64 %237, -1
  %239 = add nsw i64 %179, %238
  %240 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %214, i64 %239
  %241 = xor i64 %237, -1
  %242 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %224, i64 %241
  %243 = icmp ult %"class.v8::internal::RegExpNode"** %240, %224
  %244 = icmp ult %"class.v8::internal::RegExpNode"** %242, %215
  %245 = and i1 %243, %244
  br i1 %245, label %325, label %246

246:                                              ; preds = %233
  %247 = and i64 %231, 4611686018427387900
  %248 = sub nsw i64 0, %247
  %249 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %215, i64 %248
  %250 = sub nsw i64 0, %247
  %251 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %224, i64 %250
  %252 = add nsw i64 %247, -4
  %253 = lshr exact i64 %252, 2
  %254 = add nuw nsw i64 %253, 1
  %255 = and i64 %254, 1
  %256 = icmp eq i64 %252, 0
  br i1 %256, label %303, label %257

257:                                              ; preds = %246
  %258 = sub nuw nsw i64 %254, %255
  %259 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %215, i64 -1
  %260 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %224, i64 -1
  %261 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %215, i64 -1
  %262 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %224, i64 -1
  br label %263

263:                                              ; preds = %263, %257
  %264 = phi i64 [ 0, %257 ], [ %298, %263 ]
  %265 = phi i64 [ %258, %257 ], [ %299, %263 ]
  %266 = sub i64 0, %264
  %267 = sub i64 0, %264
  %268 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %259, i64 %266
  %269 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %260, i64 %267
  %270 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %269, i64 -1
  %271 = bitcast %"class.v8::internal::RegExpNode"** %270 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 8, !alias.scope !4
  %273 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %269, i64 -2
  %274 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %273, i64 -1
  %275 = bitcast %"class.v8::internal::RegExpNode"** %274 to <2 x i64>*
  %276 = load <2 x i64>, <2 x i64>* %275, align 8, !alias.scope !4
  %277 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %268, i64 -1
  %278 = bitcast %"class.v8::internal::RegExpNode"** %277 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %278, align 8, !alias.scope !7, !noalias !4
  %279 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %268, i64 -2
  %280 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %279, i64 -1
  %281 = bitcast %"class.v8::internal::RegExpNode"** %280 to <2 x i64>*
  store <2 x i64> %276, <2 x i64>* %281, align 8, !alias.scope !7, !noalias !4
  %282 = sub nuw nsw i64 -4, %264
  %283 = sub nuw nsw i64 -4, %264
  %284 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %261, i64 %282
  %285 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %262, i64 %283
  %286 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %285, i64 -1
  %287 = bitcast %"class.v8::internal::RegExpNode"** %286 to <2 x i64>*
  %288 = load <2 x i64>, <2 x i64>* %287, align 8, !alias.scope !4
  %289 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %285, i64 -2
  %290 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %289, i64 -1
  %291 = bitcast %"class.v8::internal::RegExpNode"** %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8, !alias.scope !4
  %293 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %284, i64 -1
  %294 = bitcast %"class.v8::internal::RegExpNode"** %293 to <2 x i64>*
  store <2 x i64> %288, <2 x i64>* %294, align 8, !alias.scope !7, !noalias !4
  %295 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %284, i64 -2
  %296 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %295, i64 -1
  %297 = bitcast %"class.v8::internal::RegExpNode"** %296 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %297, align 8, !alias.scope !7, !noalias !4
  %298 = add i64 %264, 8
  %299 = add i64 %265, -2
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %301, label %263, !llvm.loop !9

301:                                              ; preds = %263
  %302 = sub nuw nsw i64 -8, %264
  br label %303

303:                                              ; preds = %301, %246
  %304 = phi i64 [ 0, %246 ], [ %302, %301 ]
  %305 = icmp eq i64 %255, 0
  br i1 %305, label %323, label %306

306:                                              ; preds = %303
  %307 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %215, i64 -1
  %308 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %224, i64 -1
  %309 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %307, i64 %304
  %310 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %308, i64 %304
  %311 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %310, i64 -1
  %312 = bitcast %"class.v8::internal::RegExpNode"** %311 to <2 x i64>*
  %313 = load <2 x i64>, <2 x i64>* %312, align 8, !alias.scope !4
  %314 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %310, i64 -2
  %315 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %314, i64 -1
  %316 = bitcast %"class.v8::internal::RegExpNode"** %315 to <2 x i64>*
  %317 = load <2 x i64>, <2 x i64>* %316, align 8, !alias.scope !4
  %318 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %309, i64 -1
  %319 = bitcast %"class.v8::internal::RegExpNode"** %318 to <2 x i64>*
  store <2 x i64> %313, <2 x i64>* %319, align 8, !alias.scope !7, !noalias !4
  %320 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %309, i64 -2
  %321 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %320, i64 -1
  %322 = bitcast %"class.v8::internal::RegExpNode"** %321 to <2 x i64>*
  store <2 x i64> %317, <2 x i64>* %322, align 8, !alias.scope !7, !noalias !4
  br label %323

323:                                              ; preds = %303, %306
  %324 = icmp eq i64 %231, %247
  br i1 %324, label %395, label %325

325:                                              ; preds = %323, %233, %226
  %326 = phi %"class.v8::internal::RegExpNode"** [ %215, %233 ], [ %215, %226 ], [ %249, %323 ]
  %327 = phi %"class.v8::internal::RegExpNode"** [ %224, %233 ], [ %224, %226 ], [ %251, %323 ]
  %328 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %327, i64 -1
  %329 = ptrtoint %"class.v8::internal::RegExpNode"** %328 to i64
  %330 = sub i64 %329, %223
  %331 = lshr i64 %330, 3
  %332 = add nuw nsw i64 %331, 1
  %333 = and i64 %332, 7
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %346, label %335

335:                                              ; preds = %325, %335
  %336 = phi %"class.v8::internal::RegExpNode"** [ %339, %335 ], [ %326, %325 ]
  %337 = phi %"class.v8::internal::RegExpNode"** [ %340, %335 ], [ %327, %325 ]
  %338 = phi i64 [ %344, %335 ], [ %333, %325 ]
  %339 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %336, i64 -1
  %340 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %337, i64 -1
  %341 = bitcast %"class.v8::internal::RegExpNode"** %340 to i64*
  %342 = load i64, i64* %341, align 8
  %343 = bitcast %"class.v8::internal::RegExpNode"** %339 to i64*
  store i64 %342, i64* %343, align 8
  %344 = add i64 %338, -1
  %345 = icmp eq i64 %344, 0
  br i1 %345, label %346, label %335, !llvm.loop !11

346:                                              ; preds = %335, %325
  %347 = phi %"class.v8::internal::RegExpNode"** [ undef, %325 ], [ %339, %335 ]
  %348 = phi %"class.v8::internal::RegExpNode"** [ %326, %325 ], [ %339, %335 ]
  %349 = phi %"class.v8::internal::RegExpNode"** [ %327, %325 ], [ %340, %335 ]
  %350 = icmp ult i64 %330, 56
  br i1 %350, label %395, label %351

351:                                              ; preds = %346, %351
  %352 = phi %"class.v8::internal::RegExpNode"** [ %389, %351 ], [ %348, %346 ]
  %353 = phi %"class.v8::internal::RegExpNode"** [ %390, %351 ], [ %349, %346 ]
  %354 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %352, i64 -1
  %355 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %353, i64 -1
  %356 = bitcast %"class.v8::internal::RegExpNode"** %355 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = bitcast %"class.v8::internal::RegExpNode"** %354 to i64*
  store i64 %357, i64* %358, align 8
  %359 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %352, i64 -2
  %360 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %353, i64 -2
  %361 = bitcast %"class.v8::internal::RegExpNode"** %360 to i64*
  %362 = load i64, i64* %361, align 8
  %363 = bitcast %"class.v8::internal::RegExpNode"** %359 to i64*
  store i64 %362, i64* %363, align 8
  %364 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %352, i64 -3
  %365 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %353, i64 -3
  %366 = bitcast %"class.v8::internal::RegExpNode"** %365 to i64*
  %367 = load i64, i64* %366, align 8
  %368 = bitcast %"class.v8::internal::RegExpNode"** %364 to i64*
  store i64 %367, i64* %368, align 8
  %369 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %352, i64 -4
  %370 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %353, i64 -4
  %371 = bitcast %"class.v8::internal::RegExpNode"** %370 to i64*
  %372 = load i64, i64* %371, align 8
  %373 = bitcast %"class.v8::internal::RegExpNode"** %369 to i64*
  store i64 %372, i64* %373, align 8
  %374 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %352, i64 -5
  %375 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %353, i64 -5
  %376 = bitcast %"class.v8::internal::RegExpNode"** %375 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = bitcast %"class.v8::internal::RegExpNode"** %374 to i64*
  store i64 %377, i64* %378, align 8
  %379 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %352, i64 -6
  %380 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %353, i64 -6
  %381 = bitcast %"class.v8::internal::RegExpNode"** %380 to i64*
  %382 = load i64, i64* %381, align 8
  %383 = bitcast %"class.v8::internal::RegExpNode"** %379 to i64*
  store i64 %382, i64* %383, align 8
  %384 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %352, i64 -7
  %385 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %353, i64 -7
  %386 = bitcast %"class.v8::internal::RegExpNode"** %385 to i64*
  %387 = load i64, i64* %386, align 8
  %388 = bitcast %"class.v8::internal::RegExpNode"** %384 to i64*
  store i64 %387, i64* %388, align 8
  %389 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %352, i64 -8
  %390 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %353, i64 -8
  %391 = bitcast %"class.v8::internal::RegExpNode"** %390 to i64*
  %392 = load i64, i64* %391, align 8
  %393 = bitcast %"class.v8::internal::RegExpNode"** %389 to i64*
  store i64 %392, i64* %393, align 8
  %394 = icmp eq %"class.v8::internal::RegExpNode"** %390, %222
  br i1 %394, label %395, label %351, !llvm.loop !13

395:                                              ; preds = %346, %351, %323, %212
  %396 = phi %"class.v8::internal::RegExpNode"** [ %215, %212 ], [ %249, %323 ], [ %347, %346 ], [ %389, %351 ]
  %397 = ptrtoint %"class.v8::internal::RegExpNode"** %396 to i64
  store i64 %397, i64* %176, align 8
  store i64 %220, i64* %175, align 8
  store i64 %217, i64* %185, align 8
  br label %398

398:                                              ; preds = %149, %154, %168, %395
  %399 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 2
  %400 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %119, align 8
  %401 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %400, i64 29
  %402 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %401, align 8
  call void %402(%"class.v8::internal::RegExpMacroAssembler"* %11, %"class.v8::internal::Label"* %399) #18
  br label %403

403:                                              ; preds = %398, %130
  %404 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %119, align 8
  %405 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %404, i64 26
  %406 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %405, align 8
  call void %406(%"class.v8::internal::RegExpMacroAssembler"* %11, %"class.v8::internal::Label"* nonnull %8) #18
  call void @_ZN2v88internal5Trace24RestoreAffectedRegistersEPNS0_20RegExpMacroAssemblerEiRKNS0_13DynamicBitSetES6_(%"class.v8::internal::Trace"* undef, %"class.v8::internal::RegExpMacroAssembler"* %11, i32 %100, %"class.v8::internal::DynamicBitSet"* nonnull dereferenceable(16) %6, %"class.v8::internal::DynamicBitSet"* nonnull dereferenceable(16) %7)
  %407 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %51, align 8
  %408 = icmp eq %"class.v8::internal::Label"* %407, null
  %409 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %11 to void (%"class.v8::internal::RegExpMacroAssembler"*)***
  %410 = load void (%"class.v8::internal::RegExpMacroAssembler"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*)*** %409, align 8
  br i1 %408, label %411, label %414

411:                                              ; preds = %403
  %412 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %410, i64 7
  %413 = load void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %412, align 8
  call void %413(%"class.v8::internal::RegExpMacroAssembler"* %11) #18
  br label %421

414:                                              ; preds = %403
  %415 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %410, i64 35
  %416 = load void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %415, align 8
  call void %416(%"class.v8::internal::RegExpMacroAssembler"* %11) #18
  %417 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %51, align 8
  %418 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %119, align 8
  %419 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %418, i64 29
  %420 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %419, align 8
  call void %420(%"class.v8::internal::RegExpMacroAssembler"* %11, %"class.v8::internal::Label"* %417) #18
  br label %421

421:                                              ; preds = %414, %411
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %116) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %104) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %101) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %48) #18
  br label %422

422:                                              ; preds = %421, %28
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal10RegExpNode13KeepRecursingEPNS0_14RegExpCompilerE(%"class.v8::internal::RegExpNode"* nocapture readnone, %"class.v8::internal::RegExpCompiler"* nocapture readonly) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 9
  %4 = load i8, i8* %3, align 2, !range !3
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 5
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %8, 101
  br label %10

10:                                               ; preds = %2, %6
  %11 = phi i1 [ false, %2 ], [ %9, %6 ]
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23NegativeSubmatchSuccess4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::NegativeSubmatchSuccess"*, %"class.v8::internal::RegExpCompiler"* nocapture readonly, %"class.v8::internal::Trace"* nocapture readnone) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %5 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %0, i64 0, i32 0, i32 0, i32 2
  %7 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %6, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %3
  %11 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %5 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %12 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %12, i64 8
  %14 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %13, align 8
  tail call void %14(%"class.v8::internal::RegExpMacroAssembler"* %5, %"class.v8::internal::Label"* %6) #18
  br label %15

15:                                               ; preds = %10, %3
  %16 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %5 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32)***
  %19 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %19, i64 40
  %21 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %20, align 8
  tail call void %21(%"class.v8::internal::RegExpMacroAssembler"* %5, i32 %17) #18
  %22 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %0, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %18, align 8
  %25 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %24, i64 41
  %26 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %25, align 8
  tail call void %26(%"class.v8::internal::RegExpMacroAssembler"* %5, i32 %23) #18
  %27 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %0, i64 0, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %39

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.v8::internal::NegativeSubmatchSuccess", %"class.v8::internal::NegativeSubmatchSuccess"* %0, i64 0, i32 4
  %32 = load i32, i32* %31, align 8
  %33 = add nsw i32 %28, -1
  %34 = add i32 %33, %32
  %35 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %5 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)***
  %36 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %36, i64 46
  %38 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %37, align 8
  tail call void %38(%"class.v8::internal::RegExpMacroAssembler"* %5, i32 %32, i32 %34) #18
  br label %39

39:                                               ; preds = %30, %15
  %40 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %5 to void (%"class.v8::internal::RegExpMacroAssembler"*)***
  %41 = load void (%"class.v8::internal::RegExpMacroAssembler"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*)*** %40, align 8
  %42 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %41, i64 7
  %43 = load void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %42, align 8
  tail call void %43(%"class.v8::internal::RegExpMacroAssembler"* %5) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal7EndNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::EndNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"* nocapture readonly) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %5 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %4, align 8
  %6 = icmp eq %"class.v8::internal::Label"* %5, null
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 1
  %9 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %8, align 8
  %10 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %9, null
  br i1 %10, label %11, label %31

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %31

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 5
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %31

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 6
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %31

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 7, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %31

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 9
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %33, label %31

31:                                               ; preds = %3, %7, %11, %15, %19, %23, %27
  %32 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %0, i64 0, i32 0
  tail call void @_ZN2v88internal5Trace5FlushEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::Trace"* %2, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %32)
  br label %62

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %35 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %0, i64 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %36, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %45, label %40

40:                                               ; preds = %33
  %41 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %35 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %42 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %42, i64 8
  %44 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %43, align 8
  tail call void %44(%"class.v8::internal::RegExpMacroAssembler"* %35, %"class.v8::internal::Label"* %36) #18
  br label %45

45:                                               ; preds = %40, %33
  %46 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %0, i64 0, i32 1
  %47 = load i32, i32* %46, align 8
  switch i32 %47, label %61 [
    i32 0, label %48
    i32 1, label %54
    i32 2, label %60
  ]

48:                                               ; preds = %45
  %49 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %35 to i1 (%"class.v8::internal::RegExpMacroAssembler"*)***
  %50 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*)**, i1 (%"class.v8::internal::RegExpMacroAssembler"*)*** %49, align 8
  %51 = getelementptr inbounds i1 (%"class.v8::internal::RegExpMacroAssembler"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*)** %50, i64 44
  %52 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*)** %51, align 8
  %53 = tail call zeroext i1 %52(%"class.v8::internal::RegExpMacroAssembler"* %35) #18
  br label %62

54:                                               ; preds = %45
  %55 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %4, align 8
  %56 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %35 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %57 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %56, align 8
  %58 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %57, i64 29
  %59 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %58, align 8
  tail call void %59(%"class.v8::internal::RegExpMacroAssembler"* %35, %"class.v8::internal::Label"* %55) #18
  br label %62

60:                                               ; preds = %45
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

61:                                               ; preds = %45
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0)) #17
  unreachable

62:                                               ; preds = %48, %54, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18GuardedAlternative8AddGuardEPNS0_5GuardEPNS0_4ZoneE(%"class.v8::internal::GuardedAlternative"* nocapture, %"class.v8::internal::Guard"*, %"class.v8::internal::Zone"*) local_unnamed_addr #2 align 2 {
  %4 = ptrtoint %"class.v8::internal::Guard"* %1 to i64
  %5 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %0, i64 0, i32 1
  %6 = load %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::ZoneList.1140"** %5, align 8
  %7 = icmp eq %"class.v8::internal::ZoneList.1140"* %6, null
  br i1 %7, label %8, label %36

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %12, %10
  %14 = icmp ult i64 %13, 16
  br i1 %14, label %15, label %17, !prof !2

15:                                               ; preds = %8
  %16 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 16) #18
  br label %19

17:                                               ; preds = %8
  %18 = add i64 %10, 16
  store i64 %18, i64* %9, align 8
  br label %19

19:                                               ; preds = %15, %17
  %20 = phi i64 [ %16, %15 ], [ %10, %17 ]
  %21 = inttoptr i64 %20 to %"class.v8::internal::ZoneList.1140"*
  %22 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %21, i64 0, i32 0
  store %"class.v8::internal::Guard"** null, %"class.v8::internal::Guard"*** %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %21, i64 0, i32 1
  store i32 1, i32* %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %21, i64 0, i32 2
  store i32 0, i32* %24, align 4
  %25 = load i64, i64* %9, align 8
  %26 = load i64, i64* %11, align 8
  %27 = sub i64 %26, %25
  %28 = icmp ult i64 %27, 8
  br i1 %28, label %29, label %31, !prof !2

29:                                               ; preds = %19
  %30 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 8) #18
  br label %33

31:                                               ; preds = %19
  %32 = add i64 %25, 8
  store i64 %32, i64* %9, align 8
  br label %33

33:                                               ; preds = %29, %31
  %34 = phi i64 [ %30, %29 ], [ %25, %31 ]
  %35 = inttoptr i64 %34 to %"class.v8::internal::Guard"**
  store %"class.v8::internal::Guard"** %35, %"class.v8::internal::Guard"*** %22, align 8
  store %"class.v8::internal::ZoneList.1140"* %21, %"class.v8::internal::ZoneList.1140"** %5, align 8
  br label %36

36:                                               ; preds = %33, %3
  %37 = phi %"class.v8::internal::ZoneList.1140"* [ %21, %33 ], [ %6, %3 ]
  %38 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %37, i64 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %37, i64 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp slt i32 %39, %41
  br i1 %42, label %43, label %46

43:                                               ; preds = %36
  %44 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %37, i64 0, i32 0
  %45 = load %"class.v8::internal::Guard"**, %"class.v8::internal::Guard"*** %44, align 8
  br label %81

46:                                               ; preds = %36
  %47 = shl nsw i32 %41, 1
  %48 = or i32 %47, 1
  %49 = sext i32 %48 to i64
  %50 = shl nsw i64 %49, 3
  %51 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %54 = load i64, i64* %53, align 8
  %55 = sub i64 %54, %52
  %56 = icmp ugt i64 %50, %55
  br i1 %56, label %57, label %59, !prof !2

57:                                               ; preds = %46
  %58 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %50) #18
  br label %61

59:                                               ; preds = %46
  %60 = add i64 %52, %50
  store i64 %60, i64* %51, align 8
  br label %61

61:                                               ; preds = %59, %57
  %62 = phi i64 [ %58, %57 ], [ %52, %59 ]
  %63 = inttoptr i64 %62 to %"class.v8::internal::Guard"**
  %64 = load i32, i32* %38, align 4
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %66, label %78

66:                                               ; preds = %61
  %67 = inttoptr i64 %62 to i8*
  %68 = bitcast %"class.v8::internal::ZoneList.1140"* %37 to i8**
  %69 = load i8*, i8** %68, align 8
  %70 = sext i32 %64 to i64
  %71 = shl nsw i64 %70, 3
  switch i64 %71, label %77 [
    i64 16, label %76
    i64 8, label %72
  ]

72:                                               ; preds = %66
  %73 = bitcast i8* %69 to i64*
  %74 = inttoptr i64 %62 to i64*
  %75 = load i64, i64* %73, align 1
  store i64 %75, i64* %74, align 1
  br label %78

76:                                               ; preds = %66
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %69, i64 16, i1 false) #18
  br label %78

77:                                               ; preds = %66
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %69, i64 %71, i1 false) #18
  br label %78

78:                                               ; preds = %77, %76, %72, %61
  %79 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %37, i64 0, i32 0
  store %"class.v8::internal::Guard"** %63, %"class.v8::internal::Guard"*** %79, align 8
  store i32 %48, i32* %40, align 8
  %80 = load i32, i32* %38, align 4
  br label %81

81:                                               ; preds = %43, %78
  %82 = phi i32 [ %39, %43 ], [ %80, %78 ]
  %83 = phi %"class.v8::internal::Guard"** [ %45, %43 ], [ %63, %78 ]
  %84 = add nsw i32 %82, 1
  store i32 %84, i32* %38, align 4
  %85 = sext i32 %82 to i64
  %86 = getelementptr inbounds %"class.v8::internal::Guard"*, %"class.v8::internal::Guard"** %83, i64 %85
  %87 = bitcast %"class.v8::internal::Guard"** %86 to i64*
  store i64 %4, i64* %87, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode18SetRegisterForLoopEiiPNS0_10RegExpNodeE(i32, i32, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %5 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %7
  %11 = icmp ult i64 %10, 88
  br i1 %11, label %12, label %14, !prof !2

12:                                               ; preds = %3
  %13 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5, i64 88) #18
  br label %16

14:                                               ; preds = %3
  %15 = add i64 %7, 88
  store i64 %15, i64* %6, align 8
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi i64 [ %13, %12 ], [ %7, %14 ]
  %18 = inttoptr i64 %17 to %"class.v8::internal::ActionNode"*
  %19 = bitcast %"class.v8::internal::Zone"** %4 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 0, i32 0, i32 8
  %24 = bitcast %"class.v8::internal::RegExpNode"** %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #18
  %25 = bitcast %"class.v8::internal::Zone"** %23 to i64*
  store i64 %20, i64* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 0, i32 0, i32 7, i64 0
  %27 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 16, i1 false) #18
  %28 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %28, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal10ActionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %29 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 2
  store i32 0, i32* %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 1, i32 0, i32 0
  store i32 %0, i32* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 1, i32 0, i32 1
  store i32 %1, i32* %31, align 4
  ret %"class.v8::internal::ActionNode"* %18
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode17IncrementRegisterEiPNS0_10RegExpNodeE(i32, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %1, i64 0, i32 8
  %4 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %6
  %10 = icmp ult i64 %9, 88
  br i1 %10, label %11, label %13, !prof !2

11:                                               ; preds = %2
  %12 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4, i64 88) #18
  br label %15

13:                                               ; preds = %2
  %14 = add i64 %6, 88
  store i64 %14, i64* %5, align 8
  br label %15

15:                                               ; preds = %11, %13
  %16 = phi i64 [ %12, %11 ], [ %6, %13 ]
  %17 = inttoptr i64 %16 to %"class.v8::internal::ActionNode"*
  %18 = bitcast %"class.v8::internal::Zone"** %3 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %17, i64 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %17, i64 0, i32 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %17, i64 0, i32 0, i32 0, i32 8
  %23 = bitcast %"class.v8::internal::RegExpNode"** %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 24, i1 false) #18
  %24 = bitcast %"class.v8::internal::Zone"** %22 to i64*
  store i64 %19, i64* %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %17, i64 0, i32 0, i32 0, i32 7, i64 0
  %26 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 16, i1 false) #18
  %27 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %17, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %27, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal10ActionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %20, align 8
  %28 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %17, i64 0, i32 2
  store i32 1, i32* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %17, i64 0, i32 1, i32 0, i32 0
  store i32 %0, i32* %29, align 8
  ret %"class.v8::internal::ActionNode"* %17
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13StorePositionEibPNS0_10RegExpNodeE(i32, i1 zeroext, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2 align 2 {
  %4 = zext i1 %1 to i8
  %5 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %6 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %10, %8
  %12 = icmp ult i64 %11, 88
  br i1 %12, label %13, label %15, !prof !2

13:                                               ; preds = %3
  %14 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 88) #18
  br label %17

15:                                               ; preds = %3
  %16 = add i64 %8, 88
  store i64 %16, i64* %7, align 8
  br label %17

17:                                               ; preds = %13, %15
  %18 = phi i64 [ %14, %13 ], [ %8, %15 ]
  %19 = inttoptr i64 %18 to %"class.v8::internal::ActionNode"*
  %20 = bitcast %"class.v8::internal::Zone"** %5 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 0, i32 0, i32 8
  %25 = bitcast %"class.v8::internal::RegExpNode"** %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 24, i1 false) #18
  %26 = bitcast %"class.v8::internal::Zone"** %24 to i64*
  store i64 %21, i64* %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 0, i32 0, i32 7, i64 0
  %28 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 16, i1 false) #18
  %29 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %29, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal10ActionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %30 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 2
  store i32 2, i32* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 1, i32 0, i32 0
  store i32 %0, i32* %31, align 8
  %32 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 1, i32 0, i32 1
  %33 = bitcast i32* %32 to i8*
  store i8 %4, i8* %33, align 4
  ret %"class.v8::internal::ActionNode"* %19
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13ClearCapturesENS0_8IntervalEPNS0_10RegExpNodeE(i64, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2 align 2 {
  %3 = trunc i64 %0 to i32
  %4 = lshr i64 %0, 32
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %1, i64 0, i32 8
  %7 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %11, %9
  %13 = icmp ult i64 %12, 88
  br i1 %13, label %14, label %16, !prof !2

14:                                               ; preds = %2
  %15 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %7, i64 88) #18
  br label %18

16:                                               ; preds = %2
  %17 = add i64 %9, 88
  store i64 %17, i64* %8, align 8
  br label %18

18:                                               ; preds = %14, %16
  %19 = phi i64 [ %15, %14 ], [ %9, %16 ]
  %20 = inttoptr i64 %19 to %"class.v8::internal::ActionNode"*
  %21 = bitcast %"class.v8::internal::Zone"** %6 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 0, i32 0, i32 8
  %26 = bitcast %"class.v8::internal::RegExpNode"** %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #18
  %27 = bitcast %"class.v8::internal::Zone"** %25 to i64*
  store i64 %22, i64* %27, align 8
  %28 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 0, i32 0, i32 7, i64 0
  %29 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #18
  %30 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %30, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal10ActionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 2
  store i32 6, i32* %31, align 8
  %32 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 1, i32 0, i32 0
  store i32 %3, i32* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 1, i32 0, i32 1
  store i32 %5, i32* %33, align 4
  ret %"class.v8::internal::ActionNode"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode13BeginSubmatchEiiPNS0_10RegExpNodeE(i32, i32, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 8
  %5 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %7
  %11 = icmp ult i64 %10, 88
  br i1 %11, label %12, label %14, !prof !2

12:                                               ; preds = %3
  %13 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5, i64 88) #18
  br label %16

14:                                               ; preds = %3
  %15 = add i64 %7, 88
  store i64 %15, i64* %6, align 8
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi i64 [ %13, %12 ], [ %7, %14 ]
  %18 = inttoptr i64 %17 to %"class.v8::internal::ActionNode"*
  %19 = bitcast %"class.v8::internal::Zone"** %4 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 0, i32 0, i32 8
  %24 = bitcast %"class.v8::internal::RegExpNode"** %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #18
  %25 = bitcast %"class.v8::internal::Zone"** %23 to i64*
  store i64 %20, i64* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 0, i32 0, i32 7, i64 0
  %27 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 16, i1 false) #18
  %28 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::RegExpNode"** %28, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal10ActionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %29 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 2
  store i32 3, i32* %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 1, i32 0, i32 0
  store i32 %0, i32* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %18, i64 0, i32 1, i32 0, i32 1
  store i32 %1, i32* %31, align 4
  ret %"class.v8::internal::ActionNode"* %18
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode23PositiveSubmatchSuccessEiiiiPNS0_10RegExpNodeE(i32, i32, i32, i32, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %4, i64 0, i32 8
  %7 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %11, %9
  %13 = icmp ult i64 %12, 88
  br i1 %13, label %14, label %16, !prof !2

14:                                               ; preds = %5
  %15 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %7, i64 88) #18
  br label %18

16:                                               ; preds = %5
  %17 = add i64 %9, 88
  store i64 %17, i64* %8, align 8
  br label %18

18:                                               ; preds = %14, %16
  %19 = phi i64 [ %15, %14 ], [ %9, %16 ]
  %20 = inttoptr i64 %19 to %"class.v8::internal::ActionNode"*
  %21 = bitcast %"class.v8::internal::Zone"** %6 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 0, i32 0, i32 8
  %26 = bitcast %"class.v8::internal::RegExpNode"** %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #18
  %27 = bitcast %"class.v8::internal::Zone"** %25 to i64*
  store i64 %22, i64* %27, align 8
  %28 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 0, i32 0, i32 7, i64 0
  %29 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #18
  %30 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %4, %"class.v8::internal::RegExpNode"** %30, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal10ActionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 2
  store i32 4, i32* %31, align 8
  %32 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 1, i32 0, i32 0
  store i32 %0, i32* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 1, i32 0, i32 1
  store i32 %1, i32* %33, align 4
  %34 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 1, i32 0, i32 2
  store i32 %2, i32* %34, align 8
  %35 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %20, i64 0, i32 1, i32 0, i32 3
  store i32 %3, i32* %35, align 4
  ret %"class.v8::internal::ActionNode"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::ActionNode"* @_ZN2v88internal10ActionNode15EmptyMatchCheckEiiiPNS0_10RegExpNodeE(i32, i32, i32, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %3, i64 0, i32 8
  %6 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %10, %8
  %12 = icmp ult i64 %11, 88
  br i1 %12, label %13, label %15, !prof !2

13:                                               ; preds = %4
  %14 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 88) #18
  br label %17

15:                                               ; preds = %4
  %16 = add i64 %8, 88
  store i64 %16, i64* %7, align 8
  br label %17

17:                                               ; preds = %13, %15
  %18 = phi i64 [ %14, %13 ], [ %8, %15 ]
  %19 = inttoptr i64 %18 to %"class.v8::internal::ActionNode"*
  %20 = bitcast %"class.v8::internal::Zone"** %5 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 0, i32 0, i32 8
  %25 = bitcast %"class.v8::internal::RegExpNode"** %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 24, i1 false) #18
  %26 = bitcast %"class.v8::internal::Zone"** %24 to i64*
  store i64 %21, i64* %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 0, i32 0, i32 7, i64 0
  %28 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 16, i1 false) #18
  %29 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %3, %"class.v8::internal::RegExpNode"** %29, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal10ActionNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %30 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 2
  store i32 5, i32* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 1, i32 0, i32 0
  store i32 %0, i32* %31, align 8
  %32 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 1, i32 0, i32 1
  store i32 %1, i32* %32, align 4
  %33 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %19, i64 0, i32 1, i32 0, i32 2
  store i32 %2, i32* %33, align 8
  ret %"class.v8::internal::ActionNode"* %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal7EndNode6AcceptEPNS0_11NodeVisitorE(%"class.v8::internal::EndNode"*, %"class.v8::internal::NodeVisitor"*) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.v8::internal::NodeVisitor"* %1 to void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::EndNode"*)***
  %4 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::EndNode"*)**, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::EndNode"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::EndNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::EndNode"*)** %4, i64 2
  %6 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::EndNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::EndNode"*)** %5, align 8
  tail call void %6(%"class.v8::internal::NodeVisitor"* %1, %"class.v8::internal::EndNode"* %0) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ActionNode6AcceptEPNS0_11NodeVisitorE(%"class.v8::internal::ActionNode"*, %"class.v8::internal::NodeVisitor"*) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.v8::internal::NodeVisitor"* %1 to void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ActionNode"*)***
  %4 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ActionNode"*)**, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ActionNode"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ActionNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ActionNode"*)** %4, i64 3
  %6 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ActionNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ActionNode"*)** %5, align 8
  tail call void %6(%"class.v8::internal::NodeVisitor"* %1, %"class.v8::internal::ActionNode"* %0) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ChoiceNode6AcceptEPNS0_11NodeVisitorE(%"class.v8::internal::ChoiceNode"*, %"class.v8::internal::NodeVisitor"*) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.v8::internal::NodeVisitor"* %1 to void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ChoiceNode"*)***
  %4 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ChoiceNode"*)**, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ChoiceNode"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ChoiceNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ChoiceNode"*)** %4, i64 4
  %6 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ChoiceNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::ChoiceNode"*)** %5, align 8
  tail call void %6(%"class.v8::internal::NodeVisitor"* %1, %"class.v8::internal::ChoiceNode"* %0) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14LoopChoiceNode6AcceptEPNS0_11NodeVisitorE(%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::NodeVisitor"*) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.v8::internal::NodeVisitor"* %1 to void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::LoopChoiceNode"*)***
  %4 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::LoopChoiceNode"*)**, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::LoopChoiceNode"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::LoopChoiceNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::LoopChoiceNode"*)** %4, i64 5
  %6 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::LoopChoiceNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::LoopChoiceNode"*)** %5, align 8
  tail call void %6(%"class.v8::internal::NodeVisitor"* %1, %"class.v8::internal::LoopChoiceNode"* %0) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal28NegativeLookaroundChoiceNode6AcceptEPNS0_11NodeVisitorE(%"class.v8::internal::NegativeLookaroundChoiceNode"*, %"class.v8::internal::NodeVisitor"*) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.v8::internal::NodeVisitor"* %1 to void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::NegativeLookaroundChoiceNode"*)***
  %4 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::NegativeLookaroundChoiceNode"*)**, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::NegativeLookaroundChoiceNode"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::NegativeLookaroundChoiceNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::NegativeLookaroundChoiceNode"*)** %4, i64 6
  %6 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::NegativeLookaroundChoiceNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::NegativeLookaroundChoiceNode"*)** %5, align 8
  tail call void %6(%"class.v8::internal::NodeVisitor"* %1, %"class.v8::internal::NegativeLookaroundChoiceNode"* %0) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal17BackReferenceNode6AcceptEPNS0_11NodeVisitorE(%"class.v8::internal::BackReferenceNode"*, %"class.v8::internal::NodeVisitor"*) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.v8::internal::NodeVisitor"* %1 to void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::BackReferenceNode"*)***
  %4 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::BackReferenceNode"*)**, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::BackReferenceNode"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::BackReferenceNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::BackReferenceNode"*)** %4, i64 7
  %6 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::BackReferenceNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::BackReferenceNode"*)** %5, align 8
  tail call void %6(%"class.v8::internal::NodeVisitor"* %1, %"class.v8::internal::BackReferenceNode"* %0) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13AssertionNode6AcceptEPNS0_11NodeVisitorE(%"class.v8::internal::AssertionNode"*, %"class.v8::internal::NodeVisitor"*) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.v8::internal::NodeVisitor"* %1 to void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::AssertionNode"*)***
  %4 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::AssertionNode"*)**, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::AssertionNode"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::AssertionNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::AssertionNode"*)** %4, i64 8
  %6 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::AssertionNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::AssertionNode"*)** %5, align 8
  tail call void %6(%"class.v8::internal::NodeVisitor"* %1, %"class.v8::internal::AssertionNode"* %0) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8TextNode6AcceptEPNS0_11NodeVisitorE(%"class.v8::internal::TextNode"*, %"class.v8::internal::NodeVisitor"*) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.v8::internal::NodeVisitor"* %1 to void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::TextNode"*)***
  %4 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::TextNode"*)**, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::TextNode"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::TextNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::TextNode"*)** %4, i64 9
  %6 = load void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::TextNode"*)*, void (%"class.v8::internal::NodeVisitor"*, %"class.v8::internal::TextNode"*)** %5, align 8
  tail call void %6(%"class.v8::internal::NodeVisitor"* %1, %"class.v8::internal::TextNode"* %0) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ChoiceNode13GenerateGuardEPNS0_20RegExpMacroAssemblerEPNS0_5GuardEPNS0_5TraceE(%"class.v8::internal::ChoiceNode"* nocapture readnone, %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Guard"* nocapture readonly, %"class.v8::internal::Trace"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %2, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  switch i32 %6, label %29 [
    i32 0, label %7
    i32 1, label %18
  ]

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %2, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %2, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %3, i64 0, i32 2
  %13 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %12, align 8
  %14 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)***
  %15 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %15, i64 30
  %17 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %16, align 8
  tail call void %17(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %9, i32 %11, %"class.v8::internal::Label"* %13) #18
  br label %29

18:                                               ; preds = %4
  %19 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %2, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %2, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %3, i64 0, i32 2
  %24 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %23, align 8
  %25 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)***
  %26 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %26, i64 31
  %28 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %27, align 8
  tail call void %28(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %20, i32 %22, %"class.v8::internal::Label"* %24) #18
  br label %29

29:                                               ; preds = %4, %18, %7
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN2v88internal10RegExpNodeD0Ev(%"class.v8::internal::RegExpNode"* nocapture readnone) unnamed_addr #0 align 2 {
  tail call void @llvm.trap() #17
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal10RegExpNode13LimitVersionsEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 3
  %5 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %4, align 8
  %6 = icmp eq %"class.v8::internal::RegExpNode"* %5, null
  br i1 %6, label %7, label %330

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %9 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %11 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %10, align 8
  %12 = icmp eq %"class.v8::internal::Label"* %11, null
  br i1 %12, label %13, label %312

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 1
  %15 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %14, align 8
  %16 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %15, null
  br i1 %16, label %17, label %312

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %312

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 5
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %312

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 6
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %312

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 7, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %312

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 9
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, -1
  br i1 %36, label %37, label %312

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %0, i64 0, i32 2
  %39 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %38, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %54, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %0, i64 0, i32 3
  %44 = load i8, i8* %43, align 8, !range !3
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %54

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 9
  %48 = load i8, i8* %47, align 2, !range !3
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 5
  %52 = load i32, i32* %51, align 8
  %53 = icmp slt i32 %52, 101
  br i1 %53, label %307, label %54

54:                                               ; preds = %42, %46, %50, %37
  %55 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %56 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %55, align 8
  %57 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %56, i64 29
  %58 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %57, align 8
  tail call void %58(%"class.v8::internal::RegExpMacroAssembler"* %9, %"class.v8::internal::Label"* %38) #18
  %59 = ptrtoint %"class.v8::internal::RegExpNode"* %0 to i64
  %60 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %0, i64 0, i32 3
  %61 = load i8, i8* %60, align 8, !range !3
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %330

63:                                               ; preds = %54
  %64 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %0, i64 0, i32 2, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %330, label %67

67:                                               ; preds = %63
  store i8 1, i8* %60, align 8
  %68 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 4
  %69 = bitcast %"class.v8::internal::ZoneVector"** %68 to %"class.std::__1::vector"**
  %70 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %69, align 8
  %71 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %70, i64 0, i32 0, i32 1
  %72 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %71, align 8
  %73 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %70, i64 0, i32 0, i32 2, i32 0, i32 0
  %74 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %73, align 8
  %75 = icmp eq %"class.v8::internal::RegExpNode"** %72, %74
  %76 = ptrtoint %"class.v8::internal::RegExpNode"** %74 to i64
  br i1 %75, label %82, label %77

77:                                               ; preds = %67
  %78 = bitcast %"class.v8::internal::RegExpNode"** %72 to i64*
  store i64 %59, i64* %78, align 8
  %79 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %72, i64 1
  %80 = ptrtoint %"class.v8::internal::RegExpNode"** %79 to i64
  %81 = bitcast %"class.v8::internal::RegExpNode"*** %71 to i64*
  store i64 %80, i64* %81, align 8
  br label %330

82:                                               ; preds = %67
  %83 = ptrtoint %"class.v8::internal::RegExpNode"** %72 to i64
  %84 = bitcast %"class.v8::internal::RegExpNode"*** %71 to i64*
  %85 = bitcast %"class.std::__1::vector"* %70 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = sub i64 %83, %86
  %88 = ashr exact i64 %87, 3
  %89 = add nsw i64 %88, 1
  %90 = icmp ugt i64 %89, 268435455
  br i1 %90, label %91, label %93

91:                                               ; preds = %82
  %92 = bitcast %"class.std::__1::vector"* %70 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %92) #17
  unreachable

93:                                               ; preds = %82
  %94 = bitcast %"class.v8::internal::RegExpNode"*** %73 to i64*
  %95 = sub i64 %76, %86
  %96 = ashr exact i64 %95, 3
  %97 = icmp ult i64 %96, 134217727
  br i1 %97, label %98, label %103

98:                                               ; preds = %93
  %99 = ashr exact i64 %95, 2
  %100 = icmp ult i64 %99, %89
  %101 = select i1 %100, i64 %89, i64 %99
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %121, label %103

103:                                              ; preds = %98, %93
  %104 = phi i64 [ %101, %98 ], [ 268435455, %93 ]
  %105 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %70, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %106 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %105, align 8
  %107 = shl i64 %104, 3
  %108 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %106, i64 0, i32 2
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %106, i64 0, i32 3
  %111 = load i64, i64* %110, align 8
  %112 = sub i64 %111, %109
  %113 = icmp ugt i64 %107, %112
  br i1 %113, label %114, label %116, !prof !2

114:                                              ; preds = %103
  %115 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %106, i64 %107) #18
  br label %118

116:                                              ; preds = %103
  %117 = add i64 %109, %107
  store i64 %117, i64* %108, align 8
  br label %118

118:                                              ; preds = %116, %114
  %119 = phi i64 [ %115, %114 ], [ %109, %116 ]
  %120 = inttoptr i64 %119 to %"class.v8::internal::RegExpNode"**
  br label %121

121:                                              ; preds = %118, %98
  %122 = phi i64 [ %104, %118 ], [ 0, %98 ]
  %123 = phi %"class.v8::internal::RegExpNode"** [ %120, %118 ], [ null, %98 ]
  %124 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %123, i64 %88
  %125 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %123, i64 %122
  %126 = ptrtoint %"class.v8::internal::RegExpNode"** %125 to i64
  %127 = bitcast %"class.v8::internal::RegExpNode"** %124 to i64*
  store i64 %59, i64* %127, align 8
  %128 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %124, i64 1
  %129 = ptrtoint %"class.v8::internal::RegExpNode"** %128 to i64
  %130 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %70, i64 0, i32 0, i32 0
  %131 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %130, align 8
  %132 = ptrtoint %"class.v8::internal::RegExpNode"** %131 to i64
  %133 = load %"class.v8::internal::RegExpNode"**, %"class.v8::internal::RegExpNode"*** %71, align 8
  %134 = icmp eq %"class.v8::internal::RegExpNode"** %133, %131
  br i1 %134, label %304, label %135

135:                                              ; preds = %121
  %136 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %133, i64 -1
  %137 = ptrtoint %"class.v8::internal::RegExpNode"** %136 to i64
  %138 = sub i64 %137, %132
  %139 = lshr i64 %138, 3
  %140 = add nuw nsw i64 %139, 1
  %141 = icmp ult i64 %140, 4
  br i1 %141, label %234, label %142

142:                                              ; preds = %135
  %143 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %133, i64 -1
  %144 = ptrtoint %"class.v8::internal::RegExpNode"** %143 to i64
  %145 = sub i64 %144, %132
  %146 = lshr i64 %145, 3
  %147 = xor i64 %146, -1
  %148 = add nsw i64 %88, %147
  %149 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %123, i64 %148
  %150 = xor i64 %146, -1
  %151 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %133, i64 %150
  %152 = icmp ult %"class.v8::internal::RegExpNode"** %149, %133
  %153 = icmp ult %"class.v8::internal::RegExpNode"** %151, %124
  %154 = and i1 %152, %153
  br i1 %154, label %234, label %155

155:                                              ; preds = %142
  %156 = and i64 %140, 4611686018427387900
  %157 = sub nsw i64 0, %156
  %158 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %124, i64 %157
  %159 = sub nsw i64 0, %156
  %160 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %133, i64 %159
  %161 = add nsw i64 %156, -4
  %162 = lshr exact i64 %161, 2
  %163 = add nuw nsw i64 %162, 1
  %164 = and i64 %163, 1
  %165 = icmp eq i64 %161, 0
  br i1 %165, label %212, label %166

166:                                              ; preds = %155
  %167 = sub nuw nsw i64 %163, %164
  %168 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %124, i64 -1
  %169 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %133, i64 -1
  %170 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %124, i64 -1
  %171 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %133, i64 -1
  br label %172

172:                                              ; preds = %172, %166
  %173 = phi i64 [ 0, %166 ], [ %207, %172 ]
  %174 = phi i64 [ %167, %166 ], [ %208, %172 ]
  %175 = sub i64 0, %173
  %176 = sub i64 0, %173
  %177 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %168, i64 %175
  %178 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %169, i64 %176
  %179 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %178, i64 -1
  %180 = bitcast %"class.v8::internal::RegExpNode"** %179 to <2 x i64>*
  %181 = load <2 x i64>, <2 x i64>* %180, align 8, !alias.scope !14
  %182 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %178, i64 -2
  %183 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %182, i64 -1
  %184 = bitcast %"class.v8::internal::RegExpNode"** %183 to <2 x i64>*
  %185 = load <2 x i64>, <2 x i64>* %184, align 8, !alias.scope !14
  %186 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %177, i64 -1
  %187 = bitcast %"class.v8::internal::RegExpNode"** %186 to <2 x i64>*
  store <2 x i64> %181, <2 x i64>* %187, align 8, !alias.scope !17, !noalias !14
  %188 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %177, i64 -2
  %189 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %188, i64 -1
  %190 = bitcast %"class.v8::internal::RegExpNode"** %189 to <2 x i64>*
  store <2 x i64> %185, <2 x i64>* %190, align 8, !alias.scope !17, !noalias !14
  %191 = sub nuw nsw i64 -4, %173
  %192 = sub nuw nsw i64 -4, %173
  %193 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %170, i64 %191
  %194 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %171, i64 %192
  %195 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %194, i64 -1
  %196 = bitcast %"class.v8::internal::RegExpNode"** %195 to <2 x i64>*
  %197 = load <2 x i64>, <2 x i64>* %196, align 8, !alias.scope !14
  %198 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %194, i64 -2
  %199 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %198, i64 -1
  %200 = bitcast %"class.v8::internal::RegExpNode"** %199 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 8, !alias.scope !14
  %202 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %193, i64 -1
  %203 = bitcast %"class.v8::internal::RegExpNode"** %202 to <2 x i64>*
  store <2 x i64> %197, <2 x i64>* %203, align 8, !alias.scope !17, !noalias !14
  %204 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %193, i64 -2
  %205 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %204, i64 -1
  %206 = bitcast %"class.v8::internal::RegExpNode"** %205 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %206, align 8, !alias.scope !17, !noalias !14
  %207 = add i64 %173, 8
  %208 = add i64 %174, -2
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %172, !llvm.loop !19

210:                                              ; preds = %172
  %211 = sub nuw nsw i64 -8, %173
  br label %212

212:                                              ; preds = %210, %155
  %213 = phi i64 [ 0, %155 ], [ %211, %210 ]
  %214 = icmp eq i64 %164, 0
  br i1 %214, label %232, label %215

215:                                              ; preds = %212
  %216 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %124, i64 -1
  %217 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %133, i64 -1
  %218 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %216, i64 %213
  %219 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %217, i64 %213
  %220 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %219, i64 -1
  %221 = bitcast %"class.v8::internal::RegExpNode"** %220 to <2 x i64>*
  %222 = load <2 x i64>, <2 x i64>* %221, align 8, !alias.scope !14
  %223 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %219, i64 -2
  %224 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %223, i64 -1
  %225 = bitcast %"class.v8::internal::RegExpNode"** %224 to <2 x i64>*
  %226 = load <2 x i64>, <2 x i64>* %225, align 8, !alias.scope !14
  %227 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %218, i64 -1
  %228 = bitcast %"class.v8::internal::RegExpNode"** %227 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %228, align 8, !alias.scope !17, !noalias !14
  %229 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %218, i64 -2
  %230 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %229, i64 -1
  %231 = bitcast %"class.v8::internal::RegExpNode"** %230 to <2 x i64>*
  store <2 x i64> %226, <2 x i64>* %231, align 8, !alias.scope !17, !noalias !14
  br label %232

232:                                              ; preds = %212, %215
  %233 = icmp eq i64 %140, %156
  br i1 %233, label %304, label %234

234:                                              ; preds = %232, %142, %135
  %235 = phi %"class.v8::internal::RegExpNode"** [ %124, %142 ], [ %124, %135 ], [ %158, %232 ]
  %236 = phi %"class.v8::internal::RegExpNode"** [ %133, %142 ], [ %133, %135 ], [ %160, %232 ]
  %237 = getelementptr %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %236, i64 -1
  %238 = ptrtoint %"class.v8::internal::RegExpNode"** %237 to i64
  %239 = sub i64 %238, %132
  %240 = lshr i64 %239, 3
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 7
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %255, label %244

244:                                              ; preds = %234, %244
  %245 = phi %"class.v8::internal::RegExpNode"** [ %248, %244 ], [ %235, %234 ]
  %246 = phi %"class.v8::internal::RegExpNode"** [ %249, %244 ], [ %236, %234 ]
  %247 = phi i64 [ %253, %244 ], [ %242, %234 ]
  %248 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %245, i64 -1
  %249 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %246, i64 -1
  %250 = bitcast %"class.v8::internal::RegExpNode"** %249 to i64*
  %251 = load i64, i64* %250, align 8
  %252 = bitcast %"class.v8::internal::RegExpNode"** %248 to i64*
  store i64 %251, i64* %252, align 8
  %253 = add i64 %247, -1
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %244, !llvm.loop !20

255:                                              ; preds = %244, %234
  %256 = phi %"class.v8::internal::RegExpNode"** [ undef, %234 ], [ %248, %244 ]
  %257 = phi %"class.v8::internal::RegExpNode"** [ %235, %234 ], [ %248, %244 ]
  %258 = phi %"class.v8::internal::RegExpNode"** [ %236, %234 ], [ %249, %244 ]
  %259 = icmp ult i64 %239, 56
  br i1 %259, label %304, label %260

260:                                              ; preds = %255, %260
  %261 = phi %"class.v8::internal::RegExpNode"** [ %298, %260 ], [ %257, %255 ]
  %262 = phi %"class.v8::internal::RegExpNode"** [ %299, %260 ], [ %258, %255 ]
  %263 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %261, i64 -1
  %264 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %262, i64 -1
  %265 = bitcast %"class.v8::internal::RegExpNode"** %264 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = bitcast %"class.v8::internal::RegExpNode"** %263 to i64*
  store i64 %266, i64* %267, align 8
  %268 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %261, i64 -2
  %269 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %262, i64 -2
  %270 = bitcast %"class.v8::internal::RegExpNode"** %269 to i64*
  %271 = load i64, i64* %270, align 8
  %272 = bitcast %"class.v8::internal::RegExpNode"** %268 to i64*
  store i64 %271, i64* %272, align 8
  %273 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %261, i64 -3
  %274 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %262, i64 -3
  %275 = bitcast %"class.v8::internal::RegExpNode"** %274 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = bitcast %"class.v8::internal::RegExpNode"** %273 to i64*
  store i64 %276, i64* %277, align 8
  %278 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %261, i64 -4
  %279 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %262, i64 -4
  %280 = bitcast %"class.v8::internal::RegExpNode"** %279 to i64*
  %281 = load i64, i64* %280, align 8
  %282 = bitcast %"class.v8::internal::RegExpNode"** %278 to i64*
  store i64 %281, i64* %282, align 8
  %283 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %261, i64 -5
  %284 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %262, i64 -5
  %285 = bitcast %"class.v8::internal::RegExpNode"** %284 to i64*
  %286 = load i64, i64* %285, align 8
  %287 = bitcast %"class.v8::internal::RegExpNode"** %283 to i64*
  store i64 %286, i64* %287, align 8
  %288 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %261, i64 -6
  %289 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %262, i64 -6
  %290 = bitcast %"class.v8::internal::RegExpNode"** %289 to i64*
  %291 = load i64, i64* %290, align 8
  %292 = bitcast %"class.v8::internal::RegExpNode"** %288 to i64*
  store i64 %291, i64* %292, align 8
  %293 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %261, i64 -7
  %294 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %262, i64 -7
  %295 = bitcast %"class.v8::internal::RegExpNode"** %294 to i64*
  %296 = load i64, i64* %295, align 8
  %297 = bitcast %"class.v8::internal::RegExpNode"** %293 to i64*
  store i64 %296, i64* %297, align 8
  %298 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %261, i64 -8
  %299 = getelementptr inbounds %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %262, i64 -8
  %300 = bitcast %"class.v8::internal::RegExpNode"** %299 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = bitcast %"class.v8::internal::RegExpNode"** %298 to i64*
  store i64 %301, i64* %302, align 8
  %303 = icmp eq %"class.v8::internal::RegExpNode"** %299, %131
  br i1 %303, label %304, label %260, !llvm.loop !21

304:                                              ; preds = %255, %260, %232, %121
  %305 = phi %"class.v8::internal::RegExpNode"** [ %124, %121 ], [ %158, %232 ], [ %256, %255 ], [ %298, %260 ]
  %306 = ptrtoint %"class.v8::internal::RegExpNode"** %305 to i64
  store i64 %306, i64* %85, align 8
  store i64 %129, i64* %84, align 8
  store i64 %126, i64* %94, align 8
  br label %330

307:                                              ; preds = %50
  %308 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %309 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %308, align 8
  %310 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %309, i64 8
  %311 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %310, align 8
  tail call void %311(%"class.v8::internal::RegExpMacroAssembler"* %9, %"class.v8::internal::Label"* %38) #18
  br label %330

312:                                              ; preds = %7, %13, %17, %21, %25, %29, %33
  %313 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %0, i64 0, i32 6
  %314 = load i32, i32* %313, align 4
  %315 = add nsw i32 %314, 1
  store i32 %315, i32* %313, align 4
  %316 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 9
  %317 = load i8, i8* %316, align 2, !range !3
  %318 = icmp eq i8 %317, 0
  br i1 %318, label %319, label %329

319:                                              ; preds = %312
  %320 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 5
  %321 = load i32, i32* %320, align 8
  %322 = icmp slt i32 %321, 101
  br i1 %322, label %323, label %329

323:                                              ; preds = %319
  %324 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 10
  %325 = load i8, i8* %324, align 1, !range !3
  %326 = icmp ne i8 %325, 0
  %327 = icmp slt i32 %315, 10
  %328 = and i1 %327, %326
  br i1 %328, label %330, label %329

329:                                              ; preds = %312, %323, %319
  store i8 1, i8* %316, align 2
  tail call void @_ZN2v88internal5Trace5FlushEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::Trace"* %2, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %0)
  store i8 %317, i8* %316, align 2
  br label %330

330:                                              ; preds = %323, %304, %77, %63, %54, %307, %329, %3
  %331 = phi i32 [ 1, %3 ], [ 1, %307 ], [ 0, %329 ], [ 0, %54 ], [ 0, %63 ], [ 0, %77 ], [ 0, %304 ], [ 1, %323 ]
  ret i32 %331
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ActionNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb(%"class.v8::internal::ActionNode"* nocapture, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1 zeroext) unnamed_addr #2 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 4
  br i1 %9, label %10, label %35

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, %2
  br i1 %13, label %14, label %43

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 3
  %16 = sext i32 %2 to i64
  br label %17

17:                                               ; preds = %30, %14
  %18 = phi i64 [ %16, %14 ], [ %31, %30 ]
  %19 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %15, align 8
  %20 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %19, i64 0, i32 0
  %21 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %21, i64 %18
  %23 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %23, i64 0, i32 2
  store i32 3, i32* %24, align 4
  %25 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %23, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 128
  br i1 %27, label %30, label %28

28:                                               ; preds = %17
  store i32 128, i32* %25, align 8
  %29 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 -1, i64 16, i1 false) #18
  br label %30

30:                                               ; preds = %28, %17
  %31 = add nsw i64 %18, 1
  %32 = load i32, i32* %11, align 8
  %33 = sext i32 %32 to i64
  %34 = icmp slt i64 %31, %33
  br i1 %34, label %17, label %43

35:                                               ; preds = %6
  %36 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 1
  %37 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %36, align 8
  %38 = add nsw i32 %3, -1
  %39 = bitcast %"class.v8::internal::RegExpNode"* %37 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)***
  %40 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*** %39, align 8
  %41 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %40, i64 9
  %42 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %41, align 8
  tail call void %42(%"class.v8::internal::RegExpNode"* %37, %"class.v8::internal::Isolate"* %1, i32 %2, i32 %38, %"class.v8::internal::BoyerMooreLookahead"* %4, i1 zeroext %5) #18
  br label %43

43:                                               ; preds = %30, %10, %35
  %44 = icmp eq i32 %2, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %43
  %46 = zext i1 %5 to i64
  %47 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 %46
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %47, align 8
  br label %48

48:                                               ; preds = %43, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ActionNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib(%"class.v8::internal::ActionNode"* nocapture readonly, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1 zeroext) unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 1
  %10 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %9, align 8
  %11 = bitcast %"class.v8::internal::RegExpNode"* %10 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)***
  %12 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*** %11, align 8
  br i1 %8, label %13, label %16

13:                                               ; preds = %5
  %14 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %12, i64 6
  %15 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %14, align 8
  tail call void %15(%"class.v8::internal::RegExpNode"* %10, %"class.v8::internal::QuickCheckDetails"* %1, %"class.v8::internal::RegExpCompiler"* %2, i32 %3, i1 zeroext %4) #18
  br label %19

16:                                               ; preds = %5
  %17 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %12, i64 5
  %18 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %17, align 8
  tail call void %18(%"class.v8::internal::RegExpNode"* %10, %"class.v8::internal::QuickCheckDetails"* %1, %"class.v8::internal::RegExpCompiler"* %2, i32 %3, i1 zeroext %4) #18
  br label %19

19:                                               ; preds = %16, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13AssertionNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb(%"class.v8::internal::AssertionNode"* nocapture, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1 zeroext) unnamed_addr #2 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp ne i32 %8, 1
  %10 = xor i1 %5, true
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %24

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 0, i32 1
  %14 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %13, align 8
  %15 = add nsw i32 %3, -1
  %16 = bitcast %"class.v8::internal::RegExpNode"* %14 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)***
  %17 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %17, i64 9
  %19 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %18, align 8
  tail call void %19(%"class.v8::internal::RegExpNode"* %14, %"class.v8::internal::Isolate"* %1, i32 %2, i32 %15, %"class.v8::internal::BoyerMooreLookahead"* %4, i1 zeroext %5) #18
  %20 = icmp eq i32 %2, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %12
  %22 = zext i1 %5 to i64
  %23 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 %22
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %23, align 8
  br label %24

24:                                               ; preds = %21, %12, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal28NegativeLookaroundChoiceNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib(%"class.v8::internal::NegativeLookaroundChoiceNode"* nocapture readonly, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1 zeroext) unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %7, i64 0, i32 0
  %9 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %9, i64 1, i32 0
  %11 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %10, align 8
  %12 = bitcast %"class.v8::internal::RegExpNode"* %11 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)***
  %13 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %13, i64 5
  %15 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %14, align 8
  tail call void %15(%"class.v8::internal::RegExpNode"* %11, %"class.v8::internal::QuickCheckDetails"* %1, %"class.v8::internal::RegExpCompiler"* %2, i32 %3, i1 zeroext %4) #18
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal17QuickCheckDetails11RationalizeEb(%"class.v8::internal::QuickCheckDetails"* nocapture, i1 zeroext) local_unnamed_addr #8 align 2 {
  %3 = select i1 %1, i32 255, i32 65535
  %4 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 2
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 3
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %2
  %10 = select i1 %1, i32 8, i32 16
  %11 = sext i32 %7 to i64
  br label %17

12:                                               ; preds = %17
  %13 = and i8 %27, 1
  %14 = icmp ne i8 %13, 0
  br label %15

15:                                               ; preds = %12, %2
  %16 = phi i1 [ false, %2 ], [ %14, %12 ]
  ret i1 %16

17:                                               ; preds = %9, %17
  %18 = phi i32 [ 0, %9 ], [ %35, %17 ]
  %19 = phi i32 [ 0, %9 ], [ %30, %17 ]
  %20 = phi i64 [ 0, %9 ], [ %37, %17 ]
  %21 = phi i8 [ 0, %9 ], [ %27, %17 ]
  %22 = phi i32 [ 0, %9 ], [ %36, %17 ]
  %23 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %20, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = and i32 %24, 255
  %26 = icmp eq i32 %25, 0
  %27 = select i1 %26, i8 %21, i8 1
  %28 = and i32 %24, %3
  %29 = shl i32 %28, %22
  %30 = or i32 %29, %19
  store i32 %30, i32* %4, align 4
  %31 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %20, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, %3
  %34 = shl i32 %33, %22
  %35 = or i32 %34, %18
  store i32 %35, i32* %5, align 4
  %36 = add nuw nsw i32 %22, %10
  %37 = add nuw nsw i64 %20, 1
  %38 = icmp slt i64 %37, %11
  br i1 %38, label %17, label %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN2v88internal10RegExpNode11EatsAtLeastEb(%"class.v8::internal::RegExpNode"* nocapture readonly, i1 zeroext) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %0, i64 0, i32 5, i32 1
  %4 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %0, i64 0, i32 5, i32 0
  %5 = select i1 %1, i8* %3, i8* %4
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  ret i32 %7
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden i16 @_ZN2v88internal10RegExpNode24EatsAtLeastFromLoopEntryEv(%"class.v8::internal::RegExpNode"* nocapture readnone) unnamed_addr #0 align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN2v88internal10RegExpNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib(%"class.v8::internal::RegExpNode"* nocapture readnone, %"class.v8::internal::QuickCheckDetails"* nocapture readnone, %"class.v8::internal::RegExpCompiler"* nocapture readnone, i32, i1 zeroext) unnamed_addr #0 align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define hidden i16 @_ZN2v88internal14LoopChoiceNode24EatsAtLeastFromLoopEntryEv(%"class.v8::internal::LoopChoiceNode"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.v8::internal::LoopChoiceNode"* %0 to i1 (%"class.v8::internal::LoopChoiceNode"*)***
  %3 = load i1 (%"class.v8::internal::LoopChoiceNode"*)**, i1 (%"class.v8::internal::LoopChoiceNode"*)*** %2, align 8
  %4 = getelementptr inbounds i1 (%"class.v8::internal::LoopChoiceNode"*)*, i1 (%"class.v8::internal::LoopChoiceNode"*)** %3, i64 12
  %5 = load i1 (%"class.v8::internal::LoopChoiceNode"*)*, i1 (%"class.v8::internal::LoopChoiceNode"*)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.v8::internal::LoopChoiceNode"* %0) #18
  br i1 %6, label %107, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 1
  %9 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %9, i64 0, i32 5, i32 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 2
  %14 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %14, i64 0, i32 5, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = sub nsw i32 %12, %17
  %19 = tail call i1 @llvm.is.constant.i32(i32 %18) #18
  br i1 %19, label %25, label %20

20:                                               ; preds = %7
  %21 = ashr i32 %18, 31
  %22 = xor i32 %21, 255
  %23 = icmp ult i32 %18, 256
  %24 = select i1 %23, i32 %18, i32 %22
  br label %28

25:                                               ; preds = %7
  %26 = icmp sgt i32 %18, 0
  %27 = select i1 %26, i32 %18, i32 0
  br label %28

28:                                               ; preds = %20, %25
  %29 = phi i32 [ %24, %20 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %9, i64 0, i32 5, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = sub nsw i32 %32, %17
  %34 = tail call i1 @llvm.is.constant.i32(i32 %33) #18
  br i1 %34, label %42, label %35

35:                                               ; preds = %28
  %36 = ashr i32 %33, 31
  %37 = trunc i32 %36 to i8
  %38 = xor i8 %37, -1
  %39 = icmp ult i32 %33, 256
  %40 = trunc i32 %33 to i8
  %41 = select i1 %39, i8 %40, i8 %38, !prof !22
  br label %46

42:                                               ; preds = %28
  %43 = icmp sgt i32 %33, -1
  %44 = trunc i32 %33 to i8
  %45 = select i1 %43, i8 %44, i8 0
  br label %46

46:                                               ; preds = %35, %42
  %47 = phi i8 [ %41, %35 ], [ %45, %42 ]
  %48 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 6
  %49 = load i32, i32* %48, align 4
  %50 = tail call i1 @llvm.is.constant.i32(i32 %49) #18
  br i1 %50, label %58, label %51

51:                                               ; preds = %46
  %52 = ashr i32 %49, 31
  %53 = trunc i32 %52 to i8
  %54 = xor i8 %53, -1
  %55 = icmp ult i32 %49, 256
  %56 = trunc i32 %49 to i8
  %57 = select i1 %55, i8 %56, i8 %54, !prof !22
  br label %64

58:                                               ; preds = %46
  %59 = icmp sgt i32 %49, 255
  br i1 %59, label %64, label %60

60:                                               ; preds = %58
  %61 = icmp sgt i32 %49, -1
  %62 = trunc i32 %49 to i8
  %63 = select i1 %61, i8 %62, i8 0
  br label %64

64:                                               ; preds = %51, %58, %60
  %65 = phi i8 [ %57, %51 ], [ %63, %60 ], [ -1, %58 ]
  %66 = zext i8 %65 to i32
  %67 = and i32 %29, 255
  %68 = mul nuw nsw i32 %67, %66
  %69 = add nuw nsw i32 %68, %17
  %70 = tail call i1 @llvm.is.constant.i32(i32 %69) #18
  %71 = icmp ult i32 %69, 256
  %72 = trunc i32 %69 to i16
  %73 = select i1 %71, i16 %72, i16 255
  %74 = icmp ult i32 %69, 255
  %75 = select i1 %74, i32 %69, i32 255
  %76 = trunc i32 %75 to i16
  %77 = select i1 %70, i16 %76, i16 %73
  %78 = icmp eq i8 %65, 0
  %79 = icmp eq i8 %47, 0
  %80 = or i1 %79, %78
  br i1 %80, label %101, label %81

81:                                               ; preds = %64
  %82 = zext i8 %47 to i32
  %83 = add nsw i32 %66, -1
  %84 = mul nsw i32 %83, %67
  %85 = add nuw nsw i32 %82, %17
  %86 = add nsw i32 %85, %84
  %87 = tail call i1 @llvm.is.constant.i32(i32 %86) #18
  br i1 %87, label %95, label %88

88:                                               ; preds = %81
  %89 = ashr i32 %86, 31
  %90 = trunc i32 %89 to i8
  %91 = xor i8 %90, -1
  %92 = icmp ult i32 %86, 256
  %93 = trunc i32 %86 to i8
  %94 = select i1 %92, i8 %93, i8 %91, !prof !22
  br label %104

95:                                               ; preds = %81
  %96 = icmp sgt i32 %86, 255
  br i1 %96, label %104, label %97

97:                                               ; preds = %95
  %98 = icmp sgt i32 %86, -1
  %99 = trunc i32 %86 to i8
  %100 = select i1 %98, i8 %99, i8 0
  br label %104

101:                                              ; preds = %64
  %102 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %14, i64 0, i32 5, i32 0
  %103 = load i8, i8* %102, align 1
  br label %104

104:                                              ; preds = %97, %95, %88, %101
  %105 = phi i8 [ %103, %101 ], [ %94, %88 ], [ %100, %97 ], [ -1, %95 ]
  %106 = shl i16 %77, 8
  br label %107

107:                                              ; preds = %1, %104
  %108 = phi i16 [ %106, %104 ], [ 0, %1 ]
  %109 = phi i8 [ %105, %104 ], [ 0, %1 ]
  %110 = zext i8 %109 to i16
  %111 = or i16 %108, %110
  ret i16 %111
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal10RegExpNode14EmitQuickCheckEPNS0_14RegExpCompilerEPNS0_5TraceES5_bPNS0_5LabelEPNS0_17QuickCheckDetailsEbPNS0_10ChoiceNodeE(%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"* nocapture readonly, %"class.v8::internal::Trace"* nocapture readonly, i1 zeroext, %"class.v8::internal::Label"*, %"class.v8::internal::QuickCheckDetails"*, i1 zeroext, %"class.v8::internal::ChoiceNode"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %10 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %125, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %3, i64 0, i32 9
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  %17 = bitcast %"class.v8::internal::RegExpNode"* %0 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)***
  %18 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %18, i64 5
  %20 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %19, align 8
  tail call void %20(%"class.v8::internal::RegExpNode"* %0, %"class.v8::internal::QuickCheckDetails"* %6, %"class.v8::internal::RegExpCompiler"* %1, i32 0, i1 zeroext %16) #18
  %21 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 4
  %22 = load i8, i8* %21, align 4, !range !3
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %125

24:                                               ; preds = %13
  %25 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 7
  %26 = load i8, i8* %25, align 8, !range !3
  %27 = icmp ne i8 %26, 0
  %28 = select i1 %27, i32 255, i32 65535
  %29 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 2
  store i32 0, i32* %29, align 4
  %30 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 3
  store i32 0, i32* %30, align 4
  %31 = load i32, i32* %10, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %125

33:                                               ; preds = %24
  %34 = select i1 %27, i32 8, i32 16
  %35 = sext i32 %31 to i64
  br label %36

36:                                               ; preds = %36, %33
  %37 = phi i32 [ 0, %33 ], [ %54, %36 ]
  %38 = phi i32 [ 0, %33 ], [ %49, %36 ]
  %39 = phi i64 [ 0, %33 ], [ %56, %36 ]
  %40 = phi i8 [ 0, %33 ], [ %46, %36 ]
  %41 = phi i32 [ 0, %33 ], [ %55, %36 ]
  %42 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 1, i64 %39, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = and i32 %43, 255
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, i8 %40, i8 1
  %47 = and i32 %43, %28
  %48 = shl i32 %47, %41
  %49 = or i32 %48, %38
  store i32 %49, i32* %29, align 4
  %50 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 1, i64 %39, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = and i32 %51, %28
  %53 = shl i32 %52, %41
  %54 = or i32 %53, %37
  store i32 %54, i32* %30, align 4
  %55 = add nuw nsw i32 %41, %34
  %56 = add nuw nsw i64 %39, 1
  %57 = icmp eq i64 %56, %35
  br i1 %57, label %58, label %36

58:                                               ; preds = %36
  %59 = and i8 %46, 1
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %125, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %63 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %3, i64 0, i32 5
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, %31
  br i1 %66, label %82, label %67

67:                                               ; preds = %61
  %68 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 9
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %8, i64 0, i32 0, i32 5, i32 1
  %72 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %8, i64 0, i32 0, i32 5, i32 0
  %73 = select i1 %70, i8* %71, i8* %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %3, i64 0, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %79 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %78, align 8
  %80 = xor i1 %4, true
  tail call void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"* %63, i32 %77, %"class.v8::internal::Label"* %79, i1 zeroext %80, i32 %31, i32 %75) #18
  %81 = load i32, i32* %10, align 4
  br label %82

82:                                               ; preds = %61, %67
  %83 = phi i32 [ %31, %61 ], [ %81, %67 ]
  switch i32 %83, label %96 [
    i32 1, label %84
    i32 2, label %90
  ]

84:                                               ; preds = %82
  %85 = load i8, i8* %25, align 8, !range !3
  %86 = icmp eq i8 %85, 0
  %87 = select i1 %86, i32 65535, i32 255
  %88 = and i32 %87, %49
  %89 = icmp ne i32 %88, %87
  br label %98

90:                                               ; preds = %82
  %91 = load i8, i8* %25, align 8, !range !3
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %90
  %94 = and i32 %49, 65535
  %95 = icmp ne i32 %94, 65535
  br label %98

96:                                               ; preds = %90, %82
  %97 = icmp ne i32 %49, -1
  br label %98

98:                                               ; preds = %96, %93, %84
  %99 = phi i32 [ %88, %84 ], [ %49, %93 ], [ %49, %96 ]
  %100 = phi i1 [ %89, %84 ], [ %95, %93 ], [ %97, %96 ]
  br i1 %7, label %101, label %112

101:                                              ; preds = %98
  br i1 %100, label %102, label %107

102:                                              ; preds = %101
  %103 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %63 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)***
  %104 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %103, align 8
  %105 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %104, i64 10
  %106 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %105, align 8
  tail call void %106(%"class.v8::internal::RegExpMacroAssembler"* %63, i32 %54, i32 %99, %"class.v8::internal::Label"* %5) #18
  br label %125

107:                                              ; preds = %101
  %108 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %63 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %109 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %108, align 8
  %110 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %109, i64 9
  %111 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %110, align 8
  tail call void %111(%"class.v8::internal::RegExpMacroAssembler"* %63, i32 %54, %"class.v8::internal::Label"* %5) #18
  br label %125

112:                                              ; preds = %98
  %113 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %3, i64 0, i32 2
  %114 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %113, align 8
  br i1 %100, label %115, label %120

115:                                              ; preds = %112
  %116 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %63 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)***
  %117 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %116, align 8
  %118 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %117, i64 19
  %119 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %118, align 8
  tail call void %119(%"class.v8::internal::RegExpMacroAssembler"* %63, i32 %54, i32 %99, %"class.v8::internal::Label"* %114) #18
  br label %125

120:                                              ; preds = %112
  %121 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %63 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %122 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %121, align 8
  %123 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %122, i64 18
  %124 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %123, align 8
  tail call void %124(%"class.v8::internal::RegExpMacroAssembler"* %63, i32 %54, %"class.v8::internal::Label"* %114) #18
  br label %125

125:                                              ; preds = %58, %13, %24, %107, %102, %120, %115, %9
  %126 = phi i1 [ false, %9 ], [ false, %13 ], [ false, %58 ], [ true, %115 ], [ true, %120 ], [ true, %102 ], [ true, %107 ], [ false, %24 ]
  ret i1 %126
}

declare void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*, i1 zeroext, i32, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8TextNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib(%"class.v8::internal::TextNode"* nocapture readonly, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1 zeroext) unnamed_addr #2 align 2 {
  %6 = alloca [4 x i32], align 16
  %7 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 2
  %8 = load i8, i8* %7, align 8, !range !3
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %315

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %2, i64 0, i32 7
  %14 = load i8, i8* %13, align 8, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = select i1 %15, i32 65535, i32 255
  %17 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %18 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %18, i64 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %303

22:                                               ; preds = %10
  %23 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 8
  %24 = icmp sgt i32 %12, 0
  %25 = bitcast [4 x i32]* %6 to i8*
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 0
  %27 = sext i32 %12 to i64
  br label %28

28:                                               ; preds = %22, %295
  %29 = phi i64 [ 0, %22 ], [ %297, %295 ]
  %30 = phi %"class.v8::internal::ZoneList"* [ %18, %22 ], [ %298, %295 ]
  %31 = phi i32 [ %3, %22 ], [ %296, %295 ]
  %32 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %30, i64 0, i32 0
  %33 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %33, i64 %29, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %33, i64 %29, i32 2
  %37 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %36, align 8
  %38 = icmp eq i32 %35, 0
  br i1 %38, label %39, label %177

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %37, i64 1
  %41 = bitcast %"class.v8::internal::RegExpTree"* %40 to i16**
  %42 = load i16*, i16** %41, align 8
  %43 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %37, i64 2
  %44 = bitcast %"class.v8::internal::RegExpTree"* %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = trunc i64 %45 to i32
  %47 = icmp sgt i32 %46, 0
  %48 = and i1 %24, %47
  br i1 %48, label %49, label %295

49:                                               ; preds = %39
  %50 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %37, i64 3
  %51 = bitcast %"class.v8::internal::RegExpTree"* %50 to i32*
  %52 = sext i32 %31 to i64
  %53 = shl i64 %45, 32
  %54 = ashr exact i64 %53, 32
  br label %59

55:                                               ; preds = %171
  %56 = icmp slt i64 %176, %27
  %57 = icmp slt i64 %176, %54
  %58 = and i1 %56, %57
  br i1 %58, label %59, label %293

59:                                               ; preds = %49, %55
  %60 = phi i64 [ 0, %49 ], [ %176, %55 ]
  %61 = phi i64 [ %52, %49 ], [ %172, %55 ]
  %62 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %61
  %63 = getelementptr inbounds i16, i16* %42, i64 %60
  %64 = load i16, i16* %63, align 2
  %65 = load i32, i32* %51, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %161, label %68

68:                                               ; preds = %59
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #18
  %69 = load i8, i8* %13, align 8, !range !3
  %70 = icmp ne i8 %69, 0
  %71 = call fastcc i32 @_ZN2v88internalL25GetCaseIndependentLettersEPNS0_7IsolateEtbPji(i16 zeroext %64, i1 zeroext %70, i32* nonnull %26)
  switch i32 %71, label %77 [
    i32 0, label %158
    i32 1, label %72
  ]

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"struct.v8::internal::QuickCheckDetails::Position", %"struct.v8::internal::QuickCheckDetails::Position"* %62, i64 0, i32 0
  store i32 %16, i32* %73, align 4
  %74 = load i32, i32* %26, align 16
  %75 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %61, i32 1
  store i32 %74, i32* %75, align 4
  %76 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %61, i32 2
  store i8 1, i8* %76, align 4
  br label %157

77:                                               ; preds = %68
  %78 = load i32, i32* %26, align 16
  %79 = icmp sgt i32 %71, 1
  br i1 %79, label %80, label %152

80:                                               ; preds = %77
  %81 = zext i32 %71 to i64
  %82 = add nsw i64 %81, -1
  %83 = add nsw i64 %81, -2
  %84 = and i64 %82, 3
  %85 = icmp ult i64 %83, 3
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  %87 = sub nsw i64 %82, %84
  br label %113

88:                                               ; preds = %113, %80
  %89 = phi i32 [ undef, %80 ], [ %140, %113 ]
  %90 = phi i32 [ undef, %80 ], [ %141, %113 ]
  %91 = phi i64 [ 1, %80 ], [ %142, %113 ]
  %92 = phi i32 [ %16, %80 ], [ %140, %113 ]
  %93 = phi i32 [ %78, %80 ], [ %141, %113 ]
  %94 = icmp eq i64 %84, 0
  br i1 %94, label %109, label %95

95:                                               ; preds = %88, %95
  %96 = phi i64 [ %106, %95 ], [ %91, %88 ]
  %97 = phi i32 [ %104, %95 ], [ %92, %88 ]
  %98 = phi i32 [ %105, %95 ], [ %93, %88 ]
  %99 = phi i64 [ %107, %95 ], [ %84, %88 ]
  %100 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %96
  %101 = load i32, i32* %100, align 4
  %102 = and i32 %101, %97
  %103 = xor i32 %97, %98
  %104 = xor i32 %103, %102
  %105 = and i32 %104, %98
  %106 = add nuw nsw i64 %96, 1
  %107 = add i64 %99, -1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %95, !llvm.loop !23

109:                                              ; preds = %95, %88
  %110 = phi i32 [ %89, %88 ], [ %104, %95 ]
  %111 = phi i32 [ %90, %88 ], [ %105, %95 ]
  %112 = icmp eq i32 %71, 2
  br i1 %112, label %145, label %152

113:                                              ; preds = %113, %86
  %114 = phi i64 [ 1, %86 ], [ %142, %113 ]
  %115 = phi i32 [ %16, %86 ], [ %140, %113 ]
  %116 = phi i32 [ %78, %86 ], [ %141, %113 ]
  %117 = phi i64 [ %87, %86 ], [ %143, %113 ]
  %118 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %114
  %119 = load i32, i32* %118, align 4
  %120 = and i32 %119, %115
  %121 = xor i32 %115, %116
  %122 = xor i32 %121, %120
  %123 = add nuw nsw i64 %114, 1
  %124 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = xor i32 %116, -1
  %127 = xor i32 %125, %126
  %128 = and i32 %122, %127
  %129 = add nuw nsw i64 %114, 2
  %130 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %129
  %131 = load i32, i32* %130, align 4
  %132 = xor i32 %116, -1
  %133 = xor i32 %131, %132
  %134 = and i32 %128, %133
  %135 = add nuw nsw i64 %114, 3
  %136 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = xor i32 %116, -1
  %139 = xor i32 %137, %138
  %140 = and i32 %134, %139
  %141 = and i32 %140, %116
  %142 = add nuw nsw i64 %114, 4
  %143 = add i64 %117, -4
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %88, label %113

145:                                              ; preds = %109
  %146 = xor i32 %110, -1
  %147 = and i32 %16, %146
  %148 = tail call i32 @llvm.ctpop.i32(i32 %147), !range !24
  %149 = icmp ult i32 %148, 2
  br i1 %149, label %150, label %152

150:                                              ; preds = %145
  %151 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %61, i32 2
  store i8 1, i8* %151, align 4
  br label %152

152:                                              ; preds = %77, %150, %145, %109
  %153 = phi i32 [ %110, %150 ], [ %110, %145 ], [ %110, %109 ], [ %16, %77 ]
  %154 = phi i32 [ %111, %150 ], [ %111, %145 ], [ %111, %109 ], [ %78, %77 ]
  %155 = getelementptr inbounds %"struct.v8::internal::QuickCheckDetails::Position", %"struct.v8::internal::QuickCheckDetails::Position"* %62, i64 0, i32 0
  store i32 %153, i32* %155, align 4
  %156 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %61, i32 1
  store i32 %154, i32* %156, align 4
  br label %157

157:                                              ; preds = %152, %72
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #18
  br label %171

158:                                              ; preds = %68
  %159 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 4
  store i8 1, i8* %159, align 4
  %160 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %61, i32 2
  store i8 0, i8* %160, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #18
  br label %315

161:                                              ; preds = %59
  %162 = zext i16 %64 to i32
  %163 = icmp ult i32 %16, %162
  br i1 %163, label %164, label %167

164:                                              ; preds = %161
  %165 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 4
  store i8 1, i8* %165, align 4
  %166 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %61, i32 2
  store i8 0, i8* %166, align 4
  br label %315

167:                                              ; preds = %161
  %168 = getelementptr inbounds %"struct.v8::internal::QuickCheckDetails::Position", %"struct.v8::internal::QuickCheckDetails::Position"* %62, i64 0, i32 0
  store i32 %16, i32* %168, align 4
  %169 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %61, i32 1
  store i32 %162, i32* %169, align 4
  %170 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %61, i32 2
  store i8 1, i8* %170, align 4
  br label %171

171:                                              ; preds = %157, %167
  %172 = add nsw i64 %61, 1
  %173 = load i32, i32* %11, align 4
  %174 = trunc i64 %172 to i32
  %175 = icmp eq i32 %173, %174
  %176 = add nuw nsw i64 %60, 1
  br i1 %175, label %315, label %55

177:                                              ; preds = %28
  %178 = sext i32 %31 to i64
  %179 = bitcast %"class.v8::internal::RegExpTree"* %37 to %"class.v8::internal::RegExpCharacterClass"*
  %180 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %23, align 8
  %181 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %37, i64 1
  %182 = bitcast %"class.v8::internal::RegExpTree"* %181 to %"class.v8::internal::CharacterSet"*
  %183 = tail call %"class.v8::internal::ZoneList.18"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"* %182, %"class.v8::internal::Zone"* %180) #18
  %184 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %179, i64 0, i32 3, i32 0
  %185 = load i32, i32* %184, align 4
  %186 = and i32 %185, 1
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %285

188:                                              ; preds = %177
  %189 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %183, i64 0, i32 0
  %190 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %189, align 8
  %191 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %183, i64 0, i32 2
  br label %192

192:                                              ; preds = %188, %198
  %193 = phi i64 [ 0, %188 ], [ %199, %198 ]
  %194 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %190, i64 %193
  %195 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %194, i64 0, i32 0
  %196 = load i32, i32* %195, align 4
  %197 = icmp ugt i32 %196, %16
  br i1 %197, label %198, label %203

198:                                              ; preds = %192
  %199 = add nuw i64 %193, 1
  %200 = load i32, i32* %191, align 4
  %201 = zext i32 %200 to i64
  %202 = icmp eq i64 %199, %201
  br i1 %202, label %282, label %192

203:                                              ; preds = %192
  %204 = trunc i64 %193 to i32
  %205 = bitcast %"class.v8::internal::CharacterRange"* %194 to i64*
  %206 = load i64, i64* %205, align 4
  %207 = trunc i64 %206 to i32
  %208 = lshr i64 %206, 32
  %209 = trunc i64 %208 to i32
  %210 = icmp ult i32 %16, %209
  %211 = select i1 %210, i32 %16, i32 %209
  %212 = xor i32 %211, %207
  %213 = add i32 %212, 1
  %214 = and i32 %213, %212
  %215 = icmp eq i32 %214, 0
  %216 = add i32 %212, %207
  %217 = icmp eq i32 %216, %211
  %218 = and i1 %217, %215
  br i1 %218, label %219, label %221

219:                                              ; preds = %203
  %220 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %178, i32 2
  store i8 1, i8* %220, align 4
  br label %221

221:                                              ; preds = %219, %203
  %222 = lshr i32 %212, 1
  %223 = or i32 %222, %212
  %224 = lshr i32 %223, 2
  %225 = or i32 %224, %223
  %226 = lshr i32 %225, 4
  %227 = or i32 %226, %225
  %228 = lshr i32 %227, 8
  %229 = or i32 %228, %227
  %230 = lshr i32 %229, 16
  %231 = or i32 %230, %229
  %232 = xor i32 %231, -1
  %233 = and i32 %232, %207
  %234 = add i32 %204, 1
  %235 = load i32, i32* %191, align 4
  %236 = icmp slt i32 %234, %235
  br i1 %236, label %237, label %285

237:                                              ; preds = %221
  %238 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %178, i32 2
  %239 = zext i32 %234 to i64
  br label %240

240:                                              ; preds = %237, %275
  %241 = phi i32 [ %235, %237 ], [ %276, %275 ]
  %242 = phi i64 [ %239, %237 ], [ %279, %275 ]
  %243 = phi i32 [ %233, %237 ], [ %278, %275 ]
  %244 = phi i32 [ %232, %237 ], [ %277, %275 ]
  %245 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %189, align 8
  %246 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %245, i64 %242
  %247 = bitcast %"class.v8::internal::CharacterRange"* %246 to i64*
  %248 = load i64, i64* %247, align 4
  %249 = trunc i64 %248 to i32
  %250 = lshr i64 %248, 32
  %251 = trunc i64 %250 to i32
  %252 = icmp ult i32 %16, %249
  br i1 %252, label %275, label %253

253:                                              ; preds = %240
  %254 = icmp ult i32 %16, %251
  %255 = select i1 %254, i32 %16, i32 %251
  store i8 0, i8* %238, align 4
  %256 = xor i32 %255, %249
  %257 = lshr i32 %256, 1
  %258 = or i32 %257, %256
  %259 = lshr i32 %258, 2
  %260 = or i32 %259, %258
  %261 = lshr i32 %260, 4
  %262 = or i32 %261, %260
  %263 = lshr i32 %262, 8
  %264 = or i32 %263, %262
  %265 = lshr i32 %264, 16
  %266 = or i32 %265, %264
  %267 = xor i32 %266, -1
  %268 = and i32 %244, %267
  %269 = and i32 %243, %267
  %270 = and i32 %268, %249
  %271 = xor i32 %268, %269
  %272 = xor i32 %271, %270
  %273 = and i32 %243, %272
  %274 = load i32, i32* %191, align 4
  br label %275

275:                                              ; preds = %240, %253
  %276 = phi i32 [ %274, %253 ], [ %241, %240 ]
  %277 = phi i32 [ %272, %253 ], [ %244, %240 ]
  %278 = phi i32 [ %273, %253 ], [ %243, %240 ]
  %279 = add nuw nsw i64 %242, 1
  %280 = trunc i64 %279 to i32
  %281 = icmp sgt i32 %276, %280
  br i1 %281, label %240, label %285

282:                                              ; preds = %198
  %283 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 4
  store i8 1, i8* %283, align 4
  %284 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %178, i32 2
  store i8 0, i8* %284, align 4
  br label %315

285:                                              ; preds = %275, %221, %177
  %286 = phi i32 [ 0, %177 ], [ %232, %221 ], [ %277, %275 ]
  %287 = phi i32 [ 0, %177 ], [ %233, %221 ], [ %278, %275 ]
  %288 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %178, i32 0
  store i32 %286, i32* %288, align 4
  %289 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %178, i32 1
  store i32 %287, i32* %289, align 4
  %290 = add nsw i32 %31, 1
  %291 = load i32, i32* %11, align 4
  %292 = icmp eq i32 %290, %291
  br i1 %292, label %315, label %295

293:                                              ; preds = %55
  %294 = trunc i64 %172 to i32
  br label %295

295:                                              ; preds = %293, %39, %285
  %296 = phi i32 [ %290, %285 ], [ %31, %39 ], [ %294, %293 ]
  %297 = add nuw nsw i64 %29, 1
  %298 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %17, align 8
  %299 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %298, i64 0, i32 2
  %300 = load i32, i32* %299, align 4
  %301 = sext i32 %300 to i64
  %302 = icmp slt i64 %297, %301
  br i1 %302, label %28, label %303

303:                                              ; preds = %295, %10
  %304 = phi i32 [ %3, %10 ], [ %296, %295 ]
  %305 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 4
  %306 = load i8, i8* %305, align 4, !range !3
  %307 = icmp eq i8 %306, 0
  br i1 %307, label %308, label %315

308:                                              ; preds = %303
  %309 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 1
  %310 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %309, align 8
  %311 = bitcast %"class.v8::internal::RegExpNode"* %310 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)***
  %312 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*** %311, align 8
  %313 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %312, i64 5
  %314 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %313, align 8
  tail call void %314(%"class.v8::internal::RegExpNode"* %310, %"class.v8::internal::QuickCheckDetails"* %1, %"class.v8::internal::RegExpCompiler"* %2, i32 %304, i1 zeroext true) #18
  br label %315

315:                                              ; preds = %285, %171, %303, %5, %282, %164, %158, %308
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN2v88internalL25GetCaseIndependentLettersEPNS0_7IsolateEtbPji(i16 zeroext, i1 zeroext, i32* nocapture) unnamed_addr #2 {
  %4 = alloca %"class.icu_69::UnicodeString", align 8
  %5 = alloca %"class.icu_69::UnicodeString", align 8
  %6 = alloca %"class.icu_69::UnicodeSet", align 8
  %7 = tail call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN2v88internal17RegExpCaseFolding9IgnoreSetEv() #18
  %8 = zext i16 %0 to i32
  %9 = tail call signext i8 @_ZNK6icu_6910UnicodeSet8containsEi(%"class.icu_69::UnicodeSet"* %7, i32 %8) #18
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %3
  store i32 %8, i32* %2, align 4
  br label %117

12:                                               ; preds = %3
  %13 = tail call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN2v88internal17RegExpCaseFolding13SpecialAddSetEv() #18
  %14 = tail call signext i8 @_ZNK6icu_6910UnicodeSet8containsEi(%"class.icu_69::UnicodeSet"* %13, i32 %8) #18
  %15 = icmp ne i8 %14, 0
  %16 = bitcast %"class.icu_69::UnicodeSet"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %16) #18
  call void @_ZN6icu_6910UnicodeSetC1Ev(%"class.icu_69::UnicodeSet"* nonnull %6) #18
  %17 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet3addEi(%"class.icu_69::UnicodeSet"* nonnull %6, i32 %8) #18
  %18 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9closeOverEi(%"class.icu_69::UnicodeSet"* nonnull %6, i32 2) #18
  %19 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSetaSERKS0_(%"class.icu_69::UnicodeSet"* nonnull %6, %"class.icu_69::UnicodeSet"* dereferenceable(200) %18) #18
  br i1 %15, label %20, label %40

20:                                               ; preds = %12
  %21 = bitcast %"class.icu_69::UnicodeString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %21) #18
  call void @_ZN6icu_6913UnicodeStringC1Ei(%"class.icu_69::UnicodeString"* nonnull %5, i32 %8) #18
  %22 = call dereferenceable(64) %"class.icu_69::UnicodeString"* @_ZN6icu_6913UnicodeString7toUpperEv(%"class.icu_69::UnicodeString"* nonnull %5) #18
  %23 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %22, i64 0, i32 1, i32 0, i32 0
  %24 = load i16, i16* %23, align 8
  %25 = icmp slt i16 %24, 0
  %26 = lshr i16 %24, 5
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %22, i64 0, i32 1, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = select i1 %25, i32 %29, i32 %27
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %38

32:                                               ; preds = %20
  %33 = call i32 @_ZNK6icu_6913UnicodeString8char32AtEi(%"class.icu_69::UnicodeString"* %22, i32 0) #18
  %34 = icmp ugt i16 %0, 127
  %35 = icmp slt i32 %33, 128
  %36 = and i1 %34, %35
  %37 = select i1 %36, i32 %8, i32 %33
  br label %38

38:                                               ; preds = %20, %32
  %39 = phi i32 [ %37, %32 ], [ %8, %20 ]
  call void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"* nonnull %5) #18
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %21) #18
  br label %40

40:                                               ; preds = %38, %12
  %41 = phi i32 [ %39, %38 ], [ 0, %12 ]
  %42 = call i32 @_ZNK6icu_6910UnicodeSet13getRangeCountEv(%"class.icu_69::UnicodeSet"* nonnull %6) #18
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %40
  %45 = bitcast %"class.icu_69::UnicodeString"* %4 to i8*
  br label %48

46:                                               ; preds = %113, %40
  %47 = phi i32 [ 0, %40 ], [ %114, %113 ]
  call void @_ZN6icu_6910UnicodeSetD1Ev(%"class.icu_69::UnicodeSet"* nonnull %6) #18
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %16) #18
  br label %117

48:                                               ; preds = %113, %44
  %49 = phi i32 [ 0, %44 ], [ %115, %113 ]
  %50 = phi i32 [ 0, %44 ], [ %114, %113 ]
  %51 = call i32 @_ZNK6icu_6910UnicodeSet13getRangeStartEi(%"class.icu_69::UnicodeSet"* nonnull %6, i32 %49) #18
  %52 = call i32 @_ZNK6icu_6910UnicodeSet11getRangeEndEi(%"class.icu_69::UnicodeSet"* nonnull %6, i32 %49) #18
  %53 = sub i32 %50, %51
  %54 = add i32 %53, %52
  %55 = icmp sgt i32 %54, 4
  br i1 %55, label %99, label %56, !prof !2

56:                                               ; preds = %48
  %57 = icmp sgt i32 %51, %52
  %58 = icmp sgt i32 %51, 255
  %59 = and i1 %58, %1
  %60 = or i1 %57, %59
  br i1 %60, label %113, label %61

61:                                               ; preds = %56
  br i1 %15, label %64, label %62

62:                                               ; preds = %61
  %63 = sext i32 %50 to i64
  br label %100

64:                                               ; preds = %61, %92
  %65 = phi i32 [ %94, %92 ], [ %51, %61 ]
  %66 = phi i32 [ %93, %92 ], [ %50, %61 ]
  %67 = icmp slt i32 %65, 65536
  br i1 %67, label %68, label %110, !prof !22

68:                                               ; preds = %64
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %45) #18
  call void @_ZN6icu_6913UnicodeStringC1Ei(%"class.icu_69::UnicodeString"* nonnull %4, i32 %65) #18
  %69 = call dereferenceable(64) %"class.icu_69::UnicodeString"* @_ZN6icu_6913UnicodeString7toUpperEv(%"class.icu_69::UnicodeString"* nonnull %4) #18
  %70 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %69, i64 0, i32 1, i32 0, i32 0
  %71 = load i16, i16* %70, align 8
  %72 = icmp slt i16 %71, 0
  %73 = lshr i16 %71, 5
  %74 = zext i16 %73 to i32
  %75 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %69, i64 0, i32 1, i32 0, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = select i1 %72, i32 %76, i32 %74
  %78 = icmp eq i32 %77, 1
  br i1 %78, label %79, label %85

79:                                               ; preds = %68
  %80 = call i32 @_ZNK6icu_6913UnicodeString8char32AtEi(%"class.icu_69::UnicodeString"* %69, i32 0) #18
  %81 = icmp sgt i32 %65, 127
  %82 = icmp slt i32 %80, 128
  %83 = and i1 %81, %82
  %84 = select i1 %83, i32 %65, i32 %80
  br label %85

85:                                               ; preds = %79, %68
  %86 = phi i32 [ %84, %79 ], [ %65, %68 ]
  call void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"* nonnull %4) #18
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %45) #18
  %87 = icmp eq i32 %86, %41
  br i1 %87, label %88, label %92

88:                                               ; preds = %85
  %89 = add nsw i32 %66, 1
  %90 = sext i32 %66 to i64
  %91 = getelementptr inbounds i32, i32* %2, i64 %90
  store i32 %65, i32* %91, align 4
  br label %92

92:                                               ; preds = %88, %85
  %93 = phi i32 [ %66, %85 ], [ %89, %88 ]
  %94 = add nsw i32 %65, 1
  %95 = icmp sge i32 %65, %52
  %96 = icmp sgt i32 %65, 254
  %97 = and i1 %96, %1
  %98 = or i1 %95, %97
  br i1 %98, label %113, label %64

99:                                               ; preds = %48
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0)) #17
  unreachable

100:                                              ; preds = %62, %100
  %101 = phi i64 [ %63, %62 ], [ %103, %100 ]
  %102 = phi i32 [ %51, %62 ], [ %105, %100 ]
  %103 = add nsw i64 %101, 1
  %104 = getelementptr inbounds i32, i32* %2, i64 %101
  store i32 %102, i32* %104, align 4
  %105 = add nsw i32 %102, 1
  %106 = icmp sge i32 %102, %52
  %107 = icmp sgt i32 %102, 254
  %108 = and i1 %107, %1
  %109 = or i1 %106, %108
  br i1 %109, label %111, label %100

110:                                              ; preds = %64
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0)) #17
  unreachable

111:                                              ; preds = %100
  %112 = trunc i64 %103 to i32
  br label %113

113:                                              ; preds = %92, %111, %56
  %114 = phi i32 [ %50, %56 ], [ %112, %111 ], [ %93, %92 ]
  %115 = add nuw nsw i32 %49, 1
  %116 = icmp eq i32 %115, %42
  br i1 %116, label %46, label %48

117:                                              ; preds = %46, %11
  %118 = phi i32 [ 1, %11 ], [ %47, %46 ]
  ret i32 %118
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal17QuickCheckDetails5ClearEv(%"class.v8::internal::QuickCheckDetails"* nocapture) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %23

5:                                                ; preds = %1
  %6 = sext i32 %3 to i64
  %7 = add nsw i64 %6, -1
  %8 = and i64 %6, 7
  %9 = icmp ult i64 %7, 7
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = sub nsw i64 %6, %8
  br label %24

12:                                               ; preds = %24, %5
  %13 = phi i64 [ 0, %5 ], [ %49, %24 ]
  %14 = icmp eq i64 %8, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %12, %15
  %16 = phi i64 [ %19, %15 ], [ %13, %12 ]
  %17 = phi i64 [ %21, %15 ], [ %8, %12 ]
  %18 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %16, i32 0
  %19 = add nuw nsw i64 %16, 1
  %20 = bitcast i32* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 9, i1 false)
  %21 = add i64 %17, -1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %15, !llvm.loop !25

23:                                               ; preds = %12, %15, %1
  store i32 0, i32* %2, align 4
  ret void

24:                                               ; preds = %24, %10
  %25 = phi i64 [ 0, %10 ], [ %49, %24 ]
  %26 = phi i64 [ %11, %10 ], [ %51, %24 ]
  %27 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %25, i32 0
  %28 = or i64 %25, 1
  %29 = bitcast i32* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 9, i1 false)
  %30 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %28, i32 0
  %31 = or i64 %25, 2
  %32 = bitcast i32* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %32, i8 0, i64 9, i1 false)
  %33 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %31, i32 0
  %34 = or i64 %25, 3
  %35 = bitcast i32* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 9, i1 false)
  %36 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %34, i32 0
  %37 = or i64 %25, 4
  %38 = bitcast i32* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %38, i8 0, i64 9, i1 false)
  %39 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %37, i32 0
  %40 = or i64 %25, 5
  %41 = bitcast i32* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %41, i8 0, i64 9, i1 false)
  %42 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %40, i32 0
  %43 = or i64 %25, 6
  %44 = bitcast i32* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %44, i8 0, i64 9, i1 false)
  %45 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %43, i32 0
  %46 = or i64 %25, 7
  %47 = bitcast i32* %45 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %47, i8 0, i64 9, i1 false)
  %48 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %46, i32 0
  %49 = add nuw nsw i64 %25, 8
  %50 = bitcast i32* %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %50, i8 0, i64 9, i1 false)
  %51 = add i64 %26, -8
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %12, label %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal17QuickCheckDetails7AdvanceEib(%"class.v8::internal::QuickCheckDetails"* nocapture, i32, i1 zeroext) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp sle i32 %5, %1
  %7 = icmp slt i32 %1, 0
  %8 = or i1 %7, %6
  br i1 %8, label %19, label %9

9:                                                ; preds = %3
  %10 = sub i32 %5, %1
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %66

12:                                               ; preds = %9
  %13 = sext i32 %1 to i64
  %14 = zext i32 %10 to i64
  %15 = and i64 %14, 1
  %16 = icmp eq i32 %10, 1
  br i1 %16, label %57, label %17

17:                                               ; preds = %12
  %18 = sub nsw i64 %14, %15
  br label %70

19:                                               ; preds = %3
  %20 = icmp sgt i32 %5, 0
  br i1 %20, label %21, label %108

21:                                               ; preds = %19
  %22 = sext i32 %5 to i64
  %23 = add nsw i64 %22, -1
  %24 = and i64 %22, 7
  %25 = icmp ult i64 %23, 7
  br i1 %25, label %97, label %26

26:                                               ; preds = %21
  %27 = sub nsw i64 %22, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %53, %28 ]
  %30 = phi i64 [ %27, %26 ], [ %55, %28 ]
  %31 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %29, i32 0
  %32 = or i64 %29, 1
  %33 = bitcast i32* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %33, i8 0, i64 9, i1 false) #18
  %34 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %32, i32 0
  %35 = or i64 %29, 2
  %36 = bitcast i32* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %36, i8 0, i64 9, i1 false) #18
  %37 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %35, i32 0
  %38 = or i64 %29, 3
  %39 = bitcast i32* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %39, i8 0, i64 9, i1 false) #18
  %40 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %38, i32 0
  %41 = or i64 %29, 4
  %42 = bitcast i32* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %42, i8 0, i64 9, i1 false) #18
  %43 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %41, i32 0
  %44 = or i64 %29, 5
  %45 = bitcast i32* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %45, i8 0, i64 9, i1 false) #18
  %46 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %44, i32 0
  %47 = or i64 %29, 6
  %48 = bitcast i32* %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %48, i8 0, i64 9, i1 false) #18
  %49 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %47, i32 0
  %50 = or i64 %29, 7
  %51 = bitcast i32* %49 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %51, i8 0, i64 9, i1 false) #18
  %52 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %50, i32 0
  %53 = add nuw nsw i64 %29, 8
  %54 = bitcast i32* %52 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %54, i8 0, i64 9, i1 false) #18
  %55 = add i64 %30, -8
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %97, label %28

57:                                               ; preds = %70, %12
  %58 = phi i64 [ 0, %12 ], [ %84, %70 ]
  %59 = icmp eq i64 %15, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %57
  %61 = add nsw i64 %58, %13
  %62 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %61
  %63 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %58
  %64 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %63 to i8*
  %65 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 9, i1 false)
  br label %66

66:                                               ; preds = %60, %57, %9
  %67 = icmp slt i32 %10, %5
  br i1 %67, label %68, label %108

68:                                               ; preds = %66
  %69 = sext i32 %10 to i64
  br label %89

70:                                               ; preds = %70, %17
  %71 = phi i64 [ 0, %17 ], [ %84, %70 ]
  %72 = phi i64 [ %18, %17 ], [ %85, %70 ]
  %73 = add nsw i64 %71, %13
  %74 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %73
  %75 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %71
  %76 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %75 to i8*
  %77 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 9, i1 false)
  %78 = or i64 %71, 1
  %79 = add nsw i64 %78, %13
  %80 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %79
  %81 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %78
  %82 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %81 to i8*
  %83 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %82, i8* align 4 %83, i64 9, i1 false)
  %84 = add nuw nsw i64 %71, 2
  %85 = add i64 %72, -2
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %57, label %70

87:                                               ; preds = %89
  %88 = sub nsw i32 %94, %1
  br label %108

89:                                               ; preds = %68, %89
  %90 = phi i64 [ %69, %68 ], [ %92, %89 ]
  %91 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %90, i32 0
  %92 = add nsw i64 %90, 1
  %93 = bitcast i32* %91 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %93, i8 0, i64 9, i1 false)
  %94 = load i32, i32* %4, align 4
  %95 = sext i32 %94 to i64
  %96 = icmp slt i64 %92, %95
  br i1 %96, label %89, label %87

97:                                               ; preds = %28, %21
  %98 = phi i64 [ 0, %21 ], [ %53, %28 ]
  %99 = icmp eq i64 %24, 0
  br i1 %99, label %108, label %100

100:                                              ; preds = %97, %100
  %101 = phi i64 [ %104, %100 ], [ %98, %97 ]
  %102 = phi i64 [ %106, %100 ], [ %24, %97 ]
  %103 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %101, i32 0
  %104 = add nuw nsw i64 %101, 1
  %105 = bitcast i32* %103 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %105, i8 0, i64 9, i1 false) #18
  %106 = add i64 %102, -1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %100, !llvm.loop !26

108:                                              ; preds = %97, %100, %66, %87, %19
  %109 = phi i32 [ 0, %19 ], [ %88, %87 ], [ %10, %66 ], [ 0, %100 ], [ 0, %97 ]
  store i32 %109, i32* %4, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal17QuickCheckDetails5MergeEPS1_i(%"class.v8::internal::QuickCheckDetails"* nocapture, %"class.v8::internal::QuickCheckDetails"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 4
  %5 = load i8, i8* %4, align 4, !range !3
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %58

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 4
  %9 = load i8, i8* %8, align 4, !range !3
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp sgt i32 %13, %2
  br i1 %14, label %15, label %58

15:                                               ; preds = %11
  %16 = sext i32 %2 to i64
  br label %20

17:                                               ; preds = %7
  %18 = bitcast %"class.v8::internal::QuickCheckDetails"* %0 to i8*
  %19 = bitcast %"class.v8::internal::QuickCheckDetails"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 4 %19, i64 61, i1 false)
  br label %58

20:                                               ; preds = %15, %40
  %21 = phi i64 [ %16, %15 ], [ %54, %40 ]
  %22 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %21, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %21, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %23, %25
  %27 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %21, i32 1
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %37

29:                                               ; preds = %20
  %30 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %21, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %28, %31
  br i1 %32, label %33, label %37

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %21, i32 2
  %35 = load i8, i8* %34, align 4, !range !3
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %20, %33, %29
  %38 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %21, i32 2
  store i8 0, i8* %38, align 4
  %39 = load i32, i32* %24, align 4
  br label %40

40:                                               ; preds = %33, %37
  %41 = phi i32 [ %23, %33 ], [ %39, %37 ]
  %42 = and i32 %41, %23
  store i32 %42, i32* %22, align 4
  %43 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %0, i64 0, i32 1, i64 %21, i32 1
  %44 = and i32 %28, %42
  store i32 %44, i32* %43, align 4
  %45 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %21, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %46, %42
  store i32 %47, i32* %45, align 4
  %48 = load i32, i32* %43, align 4
  %49 = xor i32 %47, -1
  %50 = xor i32 %48, %49
  %51 = load i32, i32* %22, align 4
  %52 = and i32 %51, %50
  store i32 %52, i32* %22, align 4
  %53 = and i32 %52, %48
  store i32 %53, i32* %43, align 4
  %54 = add nsw i64 %21, 1
  %55 = load i32, i32* %12, align 4
  %56 = sext i32 %55 to i64
  %57 = icmp slt i64 %54, %56
  br i1 %57, label %20, label %58

58:                                               ; preds = %40, %11, %3, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal13SeqRegExpNode13FilterOneByteEi(%"class.v8::internal::SeqRegExpNode"*, i32) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 0, i32 4, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp sgt i8 %5, -1
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 0, i32 1
  %9 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %8, align 8
  br label %36

10:                                               ; preds = %2
  %11 = icmp slt i32 %1, 0
  br i1 %11, label %36, label %12

12:                                               ; preds = %10
  %13 = or i8 %5, 64
  store i8 %13, i8* %4, align 1
  %14 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 1
  %15 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %14, align 8
  %16 = add nsw i32 %1, -2
  %17 = bitcast %"class.v8::internal::RegExpNode"* %15 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)***
  %18 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %18, i64 10
  %20 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %19, align 8
  %21 = tail call %"class.v8::internal::RegExpNode"* %20(%"class.v8::internal::RegExpNode"* %15, i32 %16) #18
  %22 = icmp eq %"class.v8::internal::RegExpNode"* %21, null
  br i1 %22, label %23, label %27

23:                                               ; preds = %12
  %24 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 0, i32 4, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = or i8 %25, -128
  store i8 %26, i8* %24, align 1
  br label %31

27:                                               ; preds = %12
  store %"class.v8::internal::RegExpNode"* %21, %"class.v8::internal::RegExpNode"** %14, align 8
  %28 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 0, i32 4, i32 0
  %29 = load i8, i8* %28, align 1
  %30 = or i8 %29, -128
  store i8 %30, i8* %28, align 1
  br label %31

31:                                               ; preds = %23, %27
  %32 = phi i8 [ %30, %27 ], [ %26, %23 ]
  %33 = phi %"class.v8::internal::RegExpNode"* [ %3, %27 ], [ null, %23 ]
  %34 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %33, %"class.v8::internal::RegExpNode"** %34, align 8
  %35 = and i8 %32, -65
  store i8 %35, i8* %4, align 1
  br label %36

36:                                               ; preds = %10, %31, %7
  %37 = phi %"class.v8::internal::RegExpNode"* [ %9, %7 ], [ %33, %31 ], [ %3, %10 ]
  ret %"class.v8::internal::RegExpNode"* %37
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal13SeqRegExpNode15FilterSuccessorEi(%"class.v8::internal::SeqRegExpNode"*, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %3, align 8
  %5 = add nsw i32 %1, -1
  %6 = bitcast %"class.v8::internal::RegExpNode"* %4 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)***
  %7 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %7, i64 10
  %9 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %8, align 8
  %10 = tail call %"class.v8::internal::RegExpNode"* %9(%"class.v8::internal::RegExpNode"* %4, i32 %5) #18
  %11 = icmp eq %"class.v8::internal::RegExpNode"* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %2
  store %"class.v8::internal::RegExpNode"* %10, %"class.v8::internal::RegExpNode"** %3, align 8
  %13 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 0
  br label %14

14:                                               ; preds = %2, %12
  %15 = phi %"class.v8::internal::RegExpNode"* [ %13, %12 ], [ null, %2 ]
  %16 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 0, i32 4, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = or i8 %17, -128
  store i8 %18, i8* %16, align 1
  %19 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %15, %"class.v8::internal::RegExpNode"** %19, align 8
  ret %"class.v8::internal::RegExpNode"* %15
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2v88internal30RangeContainsLatin1EquivalentsENS0_14CharacterRangeE(i64) local_unnamed_addr #3 {
  %2 = trunc i64 %0 to i32
  %3 = lshr i64 %0, 32
  %4 = trunc i64 %3 to i32
  %5 = icmp ugt i32 %2, 924
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = icmp ugt i32 %4, 923
  br i1 %7, label %16, label %12

8:                                                ; preds = %1
  %9 = icmp ult i32 %2, 957
  %10 = icmp ugt i32 %4, 955
  %11 = and i1 %9, %10
  ret i1 %11

12:                                               ; preds = %6
  %13 = icmp ult i32 %2, 377
  %14 = icmp ugt i32 %4, 375
  %15 = and i1 %13, %14
  ret i1 %15

16:                                               ; preds = %6
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal8TextNode13FilterOneByteEi(%"class.v8::internal::TextNode"*, i32) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = icmp sgt i8 %4, -1
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %7, align 8
  br label %197

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0
  %11 = icmp slt i32 %1, 0
  br i1 %11, label %197, label %12

12:                                               ; preds = %9
  %13 = or i8 %4, 64
  store i8 %13, i8* %3, align 1
  %14 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %15 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %15, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %174

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 8
  %21 = zext i32 %17 to i64
  br label %22

22:                                               ; preds = %172, %19
  %23 = phi %"class.v8::internal::ZoneList"* [ %15, %19 ], [ %173, %172 ]
  %24 = phi i64 [ 0, %19 ], [ %170, %172 ]
  %25 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %23, i64 0, i32 0
  %26 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %26, i64 %24, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %26, i64 %24, i32 2
  %30 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %29, align 8
  %31 = icmp eq i32 %28, 0
  br i1 %31, label %32, label %64

32:                                               ; preds = %22
  %33 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %30, i64 1
  %34 = bitcast %"class.v8::internal::RegExpTree"* %33 to i16**
  %35 = load i16*, i16** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %30, i64 2
  %37 = bitcast %"class.v8::internal::RegExpTree"* %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = trunc i64 %38 to i32
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %169

41:                                               ; preds = %32
  %42 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %30, i64 3
  %43 = bitcast %"class.v8::internal::RegExpTree"* %42 to i32*
  %44 = and i64 %38, 4294967295
  br label %45

45:                                               ; preds = %56, %41
  %46 = phi i64 [ 0, %41 ], [ %58, %56 ]
  %47 = getelementptr inbounds i16, i16* %35, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = load i32, i32* %43, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %54, label %52

52:                                               ; preds = %45
  switch i16 %48, label %54 [
    i16 924, label %56
    i16 956, label %56
    i16 376, label %53
  ]

53:                                               ; preds = %52
  br label %56

54:                                               ; preds = %45, %52
  %55 = icmp ugt i16 %48, 255
  br i1 %55, label %60, label %56

56:                                               ; preds = %52, %52, %53, %54
  %57 = phi i16 [ %48, %54 ], [ 181, %52 ], [ 181, %52 ], [ 255, %53 ]
  store i16 %57, i16* %47, align 2
  %58 = add nuw nsw i64 %46, 1
  %59 = icmp eq i64 %58, %44
  br i1 %59, label %169, label %45

60:                                               ; preds = %54
  %61 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %62 = load i8, i8* %61, align 1
  %63 = or i8 %62, -128
  store i8 %63, i8* %61, align 1
  br label %192

64:                                               ; preds = %22
  %65 = bitcast %"class.v8::internal::RegExpTree"* %30 to %"class.v8::internal::RegExpCharacterClass"*
  %66 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %20, align 8
  %67 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %30, i64 1
  %68 = bitcast %"class.v8::internal::RegExpTree"* %67 to %"class.v8::internal::CharacterSet"*
  %69 = tail call %"class.v8::internal::ZoneList.18"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"* %68, %"class.v8::internal::Zone"* %66) #18
  tail call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.18"* %69) #18
  %70 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %69, i64 0, i32 2
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %65, i64 0, i32 3, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = and i32 %73, 1
  %75 = icmp eq i32 %74, 0
  %76 = icmp eq i32 %71, 0
  br i1 %75, label %124, label %77

77:                                               ; preds = %64
  br i1 %76, label %169, label %78

78:                                               ; preds = %77
  %79 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %69, i64 0, i32 0
  %80 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %80, i64 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %169

84:                                               ; preds = %78
  %85 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %80, i64 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = icmp ugt i32 %86, 254
  br i1 %87, label %88, label %169

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %30, i64 3
  %90 = bitcast %"class.v8::internal::RegExpTree"* %89 to i32*
  %91 = load i32, i32* %90, align 8
  %92 = and i32 %91, 2
  %93 = icmp ne i32 %92, 0
  %94 = icmp sgt i32 %71, 0
  %95 = and i1 %94, %93
  br i1 %95, label %96, label %120

96:                                               ; preds = %88
  %97 = sext i32 %71 to i64
  br label %98

98:                                               ; preds = %117, %96
  %99 = phi i64 [ 0, %96 ], [ %118, %117 ]
  %100 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %80, i64 %99
  %101 = bitcast %"class.v8::internal::CharacterRange"* %100 to i64*
  %102 = load i64, i64* %101, align 4
  %103 = trunc i64 %102 to i32
  %104 = lshr i64 %102, 32
  %105 = trunc i64 %104 to i32
  %106 = icmp ugt i32 %103, 924
  br i1 %106, label %109, label %107

107:                                              ; preds = %98
  %108 = icmp ugt i32 %105, 923
  br i1 %108, label %169, label %113

109:                                              ; preds = %98
  %110 = icmp ult i32 %103, 957
  %111 = icmp ugt i32 %105, 955
  %112 = and i1 %110, %111
  br i1 %112, label %169, label %117

113:                                              ; preds = %107
  %114 = icmp ult i32 %103, 377
  %115 = icmp ugt i32 %105, 375
  %116 = and i1 %114, %115
  br i1 %116, label %169, label %117

117:                                              ; preds = %113, %109
  %118 = add nuw nsw i64 %99, 1
  %119 = icmp eq i64 %118, %97
  br i1 %119, label %120, label %98

120:                                              ; preds = %88, %117
  %121 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %122 = load i8, i8* %121, align 1
  %123 = or i8 %122, -128
  store i8 %123, i8* %121, align 1
  br label %192

124:                                              ; preds = %64
  br i1 %76, label %165, label %125

125:                                              ; preds = %124
  %126 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %69, i64 0, i32 0
  %127 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %126, align 8
  %128 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %127, i64 0, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp ugt i32 %129, 255
  br i1 %130, label %131, label %169

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %30, i64 3
  %133 = bitcast %"class.v8::internal::RegExpTree"* %132 to i32*
  %134 = load i32, i32* %133, align 8
  %135 = and i32 %134, 2
  %136 = icmp ne i32 %135, 0
  %137 = icmp sgt i32 %71, 0
  %138 = and i1 %137, %136
  br i1 %138, label %139, label %165

139:                                              ; preds = %131
  %140 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %69, i64 0, i32 0
  %141 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %140, align 8
  %142 = sext i32 %71 to i64
  br label %143

143:                                              ; preds = %162, %139
  %144 = phi i64 [ 0, %139 ], [ %163, %162 ]
  %145 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %141, i64 %144
  %146 = bitcast %"class.v8::internal::CharacterRange"* %145 to i64*
  %147 = load i64, i64* %146, align 4
  %148 = trunc i64 %147 to i32
  %149 = lshr i64 %147, 32
  %150 = trunc i64 %149 to i32
  %151 = icmp ugt i32 %148, 924
  br i1 %151, label %154, label %152

152:                                              ; preds = %143
  %153 = icmp ugt i32 %150, 923
  br i1 %153, label %169, label %158

154:                                              ; preds = %143
  %155 = icmp ult i32 %148, 957
  %156 = icmp ugt i32 %150, 955
  %157 = and i1 %155, %156
  br i1 %157, label %169, label %162

158:                                              ; preds = %152
  %159 = icmp ult i32 %148, 377
  %160 = icmp ugt i32 %150, 375
  %161 = and i1 %159, %160
  br i1 %161, label %169, label %162

162:                                              ; preds = %158, %154
  %163 = add nuw nsw i64 %144, 1
  %164 = icmp eq i64 %163, %142
  br i1 %164, label %165, label %143

165:                                              ; preds = %124, %131, %162
  %166 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %167 = load i8, i8* %166, align 1
  %168 = or i8 %167, -128
  store i8 %168, i8* %166, align 1
  br label %192

169:                                              ; preds = %113, %109, %107, %158, %154, %152, %56, %32, %84, %78, %125, %77
  %170 = add nuw nsw i64 %24, 1
  %171 = icmp eq i64 %170, %21
  br i1 %171, label %174, label %172

172:                                              ; preds = %169
  %173 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %14, align 8
  br label %22

174:                                              ; preds = %169, %12
  %175 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 1
  %176 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %175, align 8
  %177 = add nsw i32 %1, -2
  %178 = bitcast %"class.v8::internal::RegExpNode"* %176 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)***
  %179 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*** %178, align 8
  %180 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %179, i64 10
  %181 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %180, align 8
  %182 = tail call %"class.v8::internal::RegExpNode"* %181(%"class.v8::internal::RegExpNode"* %176, i32 %177) #18
  %183 = icmp eq %"class.v8::internal::RegExpNode"* %182, null
  br i1 %183, label %184, label %188

184:                                              ; preds = %174
  %185 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %186 = load i8, i8* %185, align 1
  %187 = or i8 %186, -128
  store i8 %187, i8* %185, align 1
  br label %192

188:                                              ; preds = %174
  store %"class.v8::internal::RegExpNode"* %182, %"class.v8::internal::RegExpNode"** %175, align 8
  %189 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %190 = load i8, i8* %189, align 1
  %191 = or i8 %190, -128
  store i8 %191, i8* %189, align 1
  br label %192

192:                                              ; preds = %188, %184, %60, %165, %120
  %193 = phi %"class.v8::internal::RegExpNode"* [ null, %60 ], [ null, %165 ], [ null, %120 ], [ %10, %188 ], [ null, %184 ]
  %194 = phi i8 [ %63, %60 ], [ %168, %165 ], [ %123, %120 ], [ %191, %188 ], [ %187, %184 ]
  %195 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %193, %"class.v8::internal::RegExpNode"** %195, align 8
  %196 = and i8 %194, -65
  store i8 %196, i8* %3, align 1
  br label %197

197:                                              ; preds = %9, %192, %6
  %198 = phi %"class.v8::internal::RegExpNode"* [ %8, %6 ], [ %193, %192 ], [ %10, %9 ]
  ret %"class.v8::internal::RegExpNode"* %198
}

declare void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.18"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal14LoopChoiceNode13FilterOneByteEi(%"class.v8::internal::LoopChoiceNode"*, i32) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = icmp sgt i8 %4, -1
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %7, align 8
  br label %37

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 0
  %11 = icmp sgt i32 %1, -1
  %12 = and i8 %4, 64
  %13 = icmp eq i8 %12, 0
  %14 = and i1 %11, %13
  br i1 %14, label %15, label %37

15:                                               ; preds = %9
  %16 = or i8 %4, 64
  store i8 %16, i8* %3, align 1
  %17 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 2
  %18 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %17, align 8
  %19 = add nsw i32 %1, -1
  %20 = bitcast %"class.v8::internal::RegExpNode"* %18 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)***
  %21 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %21, i64 10
  %23 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %22, align 8
  %24 = tail call %"class.v8::internal::RegExpNode"* %23(%"class.v8::internal::RegExpNode"* %18, i32 %19) #18
  %25 = icmp eq %"class.v8::internal::RegExpNode"* %24, null
  br i1 %25, label %26, label %32

26:                                               ; preds = %15
  %27 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* null, %"class.v8::internal::RegExpNode"** %29, align 8
  %30 = and i8 %28, 63
  %31 = or i8 %30, -128
  store i8 %31, i8* %3, align 1
  br label %37

32:                                               ; preds = %15
  %33 = load i8, i8* %3, align 1
  %34 = and i8 %33, -65
  store i8 %34, i8* %3, align 1
  %35 = bitcast %"class.v8::internal::LoopChoiceNode"* %0 to %"class.v8::internal::ChoiceNode"*
  %36 = tail call %"class.v8::internal::RegExpNode"* @_ZN2v88internal10ChoiceNode13FilterOneByteEi(%"class.v8::internal::ChoiceNode"* %35, i32 %19)
  br label %37

37:                                               ; preds = %9, %26, %32, %6
  %38 = phi %"class.v8::internal::RegExpNode"* [ %8, %6 ], [ %36, %32 ], [ null, %26 ], [ %10, %9 ]
  ret %"class.v8::internal::RegExpNode"* %38
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal10ChoiceNode13FilterOneByteEi(%"class.v8::internal::ChoiceNode"*, i32) unnamed_addr #2 align 2 {
  %3 = alloca %"class.v8::internal::GuardedAlternative", align 8
  %4 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 4, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp sgt i8 %6, -1
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 1
  %10 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %9, align 8
  br label %205

11:                                               ; preds = %2
  %12 = icmp sgt i32 %1, -1
  %13 = and i8 %6, 64
  %14 = icmp eq i8 %13, 0
  %15 = and i1 %12, %14
  br i1 %15, label %16, label %205

16:                                               ; preds = %11
  %17 = or i8 %6, 64
  store i8 %17, i8* %5, align 1
  %18 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 1
  %19 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %19, i64 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %47

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %19, i64 0, i32 0
  %25 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %24, align 8
  %26 = zext i32 %21 to i64
  br label %31

27:                                               ; preds = %40
  br i1 %22, label %28, label %47

28:                                               ; preds = %27
  %29 = add nsw i32 %1, -1
  %30 = zext i32 %21 to i64
  br label %58

31:                                               ; preds = %40, %23
  %32 = phi i64 [ 0, %23 ], [ %41, %40 ]
  %33 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %25, i64 %32, i32 1
  %34 = load %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::ZoneList.1140"** %33, align 8
  %35 = icmp eq %"class.v8::internal::ZoneList.1140"* %34, null
  br i1 %35, label %40, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %34, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %36, %31
  %41 = add nuw nsw i64 %32, 1
  %42 = icmp eq i64 %41, %26
  br i1 %42, label %27, label %31

43:                                               ; preds = %36
  %44 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 4, i32 0
  %45 = or i8 %6, -64
  store i8 %45, i8* %44, align 1
  %46 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %4, %"class.v8::internal::RegExpNode"** %46, align 8
  br label %201

47:                                               ; preds = %27, %16
  %48 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 4, i32 0
  %49 = or i8 %6, -64
  store i8 %49, i8* %48, align 1
  %50 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 1
  br label %86

51:                                               ; preds = %79
  %52 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 4, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i32 %80, 2
  %55 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 4, i32 0
  %56 = or i8 %53, -128
  store i8 %56, i8* %55, align 1
  %57 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 1
  br i1 %54, label %86, label %90

58:                                               ; preds = %84, %28
  %59 = phi %"class.v8::internal::ZoneList.1148"* [ %19, %28 ], [ %85, %84 ]
  %60 = phi i64 [ 0, %28 ], [ %82, %84 ]
  %61 = phi %"class.v8::internal::RegExpNode"* [ null, %28 ], [ %81, %84 ]
  %62 = phi i32 [ 0, %28 ], [ %80, %84 ]
  %63 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %59, i64 0, i32 0
  %64 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %64, i64 %60, i32 0
  %66 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %65, align 8
  %67 = bitcast %"class.v8::internal::RegExpNode"* %66 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)***
  %68 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*** %67, align 8
  %69 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %68, i64 10
  %70 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %69, align 8
  %71 = tail call %"class.v8::internal::RegExpNode"* %70(%"class.v8::internal::RegExpNode"* %66, i32 %29) #18
  %72 = icmp eq %"class.v8::internal::RegExpNode"* %71, null
  br i1 %72, label %79, label %73

73:                                               ; preds = %58
  %74 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %18, align 8
  %75 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %74, i64 0, i32 0
  %76 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %75, align 8
  %77 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %76, i64 %60, i32 0
  store %"class.v8::internal::RegExpNode"* %71, %"class.v8::internal::RegExpNode"** %77, align 8
  %78 = add nsw i32 %62, 1
  br label %79

79:                                               ; preds = %58, %73
  %80 = phi i32 [ %62, %58 ], [ %78, %73 ]
  %81 = phi %"class.v8::internal::RegExpNode"* [ %61, %58 ], [ %71, %73 ]
  %82 = add nuw nsw i64 %60, 1
  %83 = icmp eq i64 %82, %30
  br i1 %83, label %51, label %84

84:                                               ; preds = %79
  %85 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %18, align 8
  br label %58

86:                                               ; preds = %47, %51
  %87 = phi %"class.v8::internal::RegExpNode"** [ %50, %47 ], [ %57, %51 ]
  %88 = phi i8 [ %49, %47 ], [ %56, %51 ]
  %89 = phi %"class.v8::internal::RegExpNode"* [ null, %47 ], [ %81, %51 ]
  store %"class.v8::internal::RegExpNode"* %89, %"class.v8::internal::RegExpNode"** %87, align 8
  br label %201

90:                                               ; preds = %51
  store %"class.v8::internal::RegExpNode"* %4, %"class.v8::internal::RegExpNode"** %57, align 8
  %91 = icmp eq i32 %80, %21
  br i1 %91, label %201, label %92

92:                                               ; preds = %90
  %93 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 8
  %94 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %93, align 8
  %95 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %94, i64 0, i32 2
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %94, i64 0, i32 3
  %98 = load i64, i64* %97, align 8
  %99 = sub i64 %98, %96
  %100 = icmp ult i64 %99, 16
  br i1 %100, label %101, label %103, !prof !2

101:                                              ; preds = %92
  %102 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %94, i64 16) #18
  br label %105

103:                                              ; preds = %92
  %104 = add i64 %96, 16
  store i64 %104, i64* %95, align 8
  br label %105

105:                                              ; preds = %101, %103
  %106 = phi i64 [ %102, %101 ], [ %96, %103 ]
  %107 = inttoptr i64 %106 to %"class.v8::internal::ZoneList.1148"*
  %108 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %107, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* null, %"class.v8::internal::GuardedAlternative"** %108, align 8
  %109 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %107, i64 0, i32 1
  store i32 %80, i32* %109, align 8
  %110 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %107, i64 0, i32 2
  store i32 0, i32* %110, align 4
  %111 = sext i32 %80 to i64
  %112 = shl nsw i64 %111, 4
  %113 = load i64, i64* %95, align 8
  %114 = load i64, i64* %97, align 8
  %115 = sub i64 %114, %113
  %116 = icmp ugt i64 %112, %115
  br i1 %116, label %117, label %119, !prof !2

117:                                              ; preds = %105
  %118 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %94, i64 %112) #18
  br label %121

119:                                              ; preds = %105
  %120 = add i64 %113, %112
  store i64 %120, i64* %95, align 8
  br label %121

121:                                              ; preds = %117, %119
  %122 = phi i64 [ %118, %117 ], [ %113, %119 ]
  %123 = inttoptr i64 %122 to %"class.v8::internal::GuardedAlternative"*
  store %"class.v8::internal::GuardedAlternative"* %123, %"class.v8::internal::GuardedAlternative"** %108, align 8
  br i1 %22, label %124, label %129

124:                                              ; preds = %121
  %125 = add nsw i32 %1, -1
  %126 = bitcast %"class.v8::internal::GuardedAlternative"* %3 to i8*
  %127 = inttoptr i64 %106 to i8**
  %128 = zext i32 %21 to i64
  br label %131

129:                                              ; preds = %198, %121
  store %"class.v8::internal::ZoneList.1148"* %107, %"class.v8::internal::ZoneList.1148"** %18, align 8
  %130 = load i8, i8* %5, align 1
  br label %201

131:                                              ; preds = %198, %124
  %132 = phi i64 [ 0, %124 ], [ %199, %198 ]
  %133 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %18, align 8
  %134 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %133, i64 0, i32 0
  %135 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %134, align 8
  %136 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %135, i64 %132, i32 0
  %137 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %136, align 8
  %138 = bitcast %"class.v8::internal::RegExpNode"* %137 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)***
  %139 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*** %138, align 8
  %140 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %139, i64 10
  %141 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %140, align 8
  %142 = tail call %"class.v8::internal::RegExpNode"* %141(%"class.v8::internal::RegExpNode"* %137, i32 %125) #18
  %143 = icmp eq %"class.v8::internal::RegExpNode"* %142, null
  br i1 %143, label %198, label %144

144:                                              ; preds = %131
  %145 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %18, align 8
  %146 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %145, i64 0, i32 0
  %147 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %146, align 8
  %148 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %147, i64 %132, i32 0
  store %"class.v8::internal::RegExpNode"* %142, %"class.v8::internal::RegExpNode"** %148, align 8
  %149 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %18, align 8
  %150 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %149, i64 0, i32 0
  %151 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %150, align 8
  %152 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %151, i64 %132
  %153 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %93, align 8
  %154 = load i32, i32* %110, align 4
  %155 = load i32, i32* %109, align 8
  %156 = icmp slt i32 %154, %155
  br i1 %156, label %157, label %164

157:                                              ; preds = %144
  %158 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %108, align 8
  %159 = add nsw i32 %154, 1
  store i32 %159, i32* %110, align 4
  %160 = sext i32 %154 to i64
  %161 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %158, i64 %160
  %162 = bitcast %"class.v8::internal::GuardedAlternative"* %161 to i8*
  %163 = bitcast %"class.v8::internal::GuardedAlternative"* %152 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %162, i8* align 8 %163, i64 16, i1 false) #18
  br label %198

164:                                              ; preds = %144
  %165 = shl nsw i32 %155, 1
  %166 = or i32 %165, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %126)
  %167 = bitcast %"class.v8::internal::GuardedAlternative"* %152 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %126, i8* align 8 %167, i64 16, i1 false) #18
  %168 = sext i32 %166 to i64
  %169 = shl nsw i64 %168, 4
  %170 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %153, i64 0, i32 2
  %171 = load i64, i64* %170, align 8
  %172 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %153, i64 0, i32 3
  %173 = load i64, i64* %172, align 8
  %174 = sub i64 %173, %171
  %175 = icmp ugt i64 %169, %174
  br i1 %175, label %176, label %178, !prof !2

176:                                              ; preds = %164
  %177 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %153, i64 %169) #18
  br label %180

178:                                              ; preds = %164
  %179 = add i64 %171, %169
  store i64 %179, i64* %170, align 8
  br label %180

180:                                              ; preds = %178, %176
  %181 = phi i64 [ %177, %176 ], [ %171, %178 ]
  %182 = inttoptr i64 %181 to %"class.v8::internal::GuardedAlternative"*
  %183 = load i32, i32* %110, align 4
  %184 = icmp sgt i32 %183, 0
  br i1 %184, label %185, label %192

185:                                              ; preds = %180
  %186 = inttoptr i64 %181 to i8*
  %187 = load i8*, i8** %127, align 8
  %188 = icmp eq i32 %183, 1
  %189 = sext i32 %183 to i64
  %190 = shl nsw i64 %189, 4
  %191 = select i1 %188, i64 16, i64 %190
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %186, i8* align 1 %187, i64 %191, i1 false) #18
  br label %192

192:                                              ; preds = %185, %180
  store %"class.v8::internal::GuardedAlternative"* %182, %"class.v8::internal::GuardedAlternative"** %108, align 8
  store i32 %166, i32* %109, align 8
  %193 = load i32, i32* %110, align 4
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %110, align 4
  %195 = sext i32 %193 to i64
  %196 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %182, i64 %195
  %197 = bitcast %"class.v8::internal::GuardedAlternative"* %196 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %197, i8* nonnull align 8 %126, i64 16, i1 false) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %126)
  br label %198

198:                                              ; preds = %192, %157, %131
  %199 = add nuw nsw i64 %132, 1
  %200 = icmp eq i64 %199, %128
  br i1 %200, label %129, label %131

201:                                              ; preds = %86, %129, %90, %43
  %202 = phi i8 [ %45, %43 ], [ %88, %86 ], [ %130, %129 ], [ %56, %90 ]
  %203 = phi %"class.v8::internal::RegExpNode"* [ %4, %43 ], [ %89, %86 ], [ %4, %129 ], [ %4, %90 ]
  %204 = and i8 %202, -65
  store i8 %204, i8* %5, align 1
  br label %205

205:                                              ; preds = %11, %201, %8
  %206 = phi %"class.v8::internal::RegExpNode"* [ %10, %8 ], [ %203, %201 ], [ %4, %11 ]
  ret %"class.v8::internal::RegExpNode"* %206
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal28NegativeLookaroundChoiceNode13FilterOneByteEi(%"class.v8::internal::NegativeLookaroundChoiceNode"*, i32) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp sgt i8 %5, -1
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %8, align 8
  br label %67

10:                                               ; preds = %2
  %11 = icmp sgt i32 %1, -1
  %12 = and i8 %5, 64
  %13 = icmp eq i8 %12, 0
  %14 = and i1 %11, %13
  br i1 %14, label %15, label %67

15:                                               ; preds = %10
  %16 = or i8 %5, 64
  store i8 %16, i8* %4, align 1
  %17 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 1
  %18 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %18, i64 0, i32 0
  %20 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %20, i64 1, i32 0
  %22 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %21, align 8
  %23 = add nsw i32 %1, -1
  %24 = bitcast %"class.v8::internal::RegExpNode"* %22 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)***
  %25 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %25, i64 10
  %27 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %26, align 8
  %28 = tail call %"class.v8::internal::RegExpNode"* %27(%"class.v8::internal::RegExpNode"* %22, i32 %23) #18
  %29 = icmp eq %"class.v8::internal::RegExpNode"* %28, null
  br i1 %29, label %30, label %34

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %32 = load i8, i8* %31, align 1
  %33 = or i8 %32, -128
  store i8 %33, i8* %31, align 1
  br label %62

34:                                               ; preds = %15
  %35 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %17, align 8
  %36 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %35, i64 0, i32 0
  %37 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %36, align 8
  %38 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %37, i64 1, i32 0
  store %"class.v8::internal::RegExpNode"* %28, %"class.v8::internal::RegExpNode"** %38, align 8
  %39 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %17, align 8
  %40 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %39, i64 0, i32 0
  %41 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %41, i64 0, i32 0
  %43 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %42, align 8
  %44 = bitcast %"class.v8::internal::RegExpNode"* %43 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)***
  %45 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*** %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %45, i64 10
  %47 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %46, align 8
  %48 = tail call %"class.v8::internal::RegExpNode"* %47(%"class.v8::internal::RegExpNode"* %43, i32 %23) #18
  %49 = icmp eq %"class.v8::internal::RegExpNode"* %48, null
  br i1 %49, label %50, label %54

50:                                               ; preds = %34
  %51 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %52, -128
  store i8 %53, i8* %51, align 1
  br label %62

54:                                               ; preds = %34
  %55 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %17, align 8
  %56 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %55, i64 0, i32 0
  %57 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %56, align 8
  %58 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %57, i64 0, i32 0
  store %"class.v8::internal::RegExpNode"* %48, %"class.v8::internal::RegExpNode"** %58, align 8
  %59 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %60, -128
  store i8 %61, i8* %59, align 1
  br label %62

62:                                               ; preds = %50, %54, %30
  %63 = phi %"class.v8::internal::RegExpNode"* [ %28, %50 ], [ %3, %54 ], [ null, %30 ]
  %64 = phi i8 [ %53, %50 ], [ %61, %54 ], [ %33, %30 ]
  %65 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %63, %"class.v8::internal::RegExpNode"** %65, align 8
  %66 = and i8 %64, -65
  store i8 %66, i8* %4, align 1
  br label %67

67:                                               ; preds = %10, %62, %7
  %68 = phi %"class.v8::internal::RegExpNode"* [ %9, %7 ], [ %63, %62 ], [ %3, %10 ]
  ret %"class.v8::internal::RegExpNode"* %68
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14LoopChoiceNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib(%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1 zeroext) unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 3
  %7 = load i8, i8* %6, align 8, !range !3
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %53

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = and i8 %11, 64
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %53

14:                                               ; preds = %9
  br i1 %4, label %19, label %15

15:                                               ; preds = %14
  %16 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 2
  %17 = load i8, i8* %16, align 8, !range !3
  %18 = icmp ne i8 %17, 0
  br label %19

19:                                               ; preds = %15, %14
  %20 = phi i1 [ true, %14 ], [ %18, %15 ]
  %21 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 5
  %22 = load i8, i8* %21, align 2, !range !3
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %48, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 6
  %26 = load i32, i32* %25, align 4
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %48

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 1
  %30 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %30, i64 0, i32 5, i32 1
  %32 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %30, i64 0, i32 5, i32 0
  %33 = select i1 %20, i8* %31, i8* %32
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 2
  %36 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %35, align 8
  %37 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %36, i64 0, i32 5, i32 1
  %38 = load i8, i8* %37, align 1
  %39 = icmp ugt i8 %34, %38
  br i1 %39, label %40, label %48

40:                                               ; preds = %28
  %41 = add nsw i32 %26, -1
  store i32 %41, i32* %25, align 4
  %42 = bitcast %"class.v8::internal::RegExpNode"* %30 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)***
  %43 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %43, i64 5
  %45 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %44, align 8
  tail call void %45(%"class.v8::internal::RegExpNode"* %30, %"class.v8::internal::QuickCheckDetails"* %1, %"class.v8::internal::RegExpCompiler"* %2, i32 %3, i1 zeroext %20) #18
  %46 = load i32, i32* %25, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %25, align 4
  br label %53

48:                                               ; preds = %19, %28, %24
  %49 = or i8 %11, 64
  store i8 %49, i8* %10, align 1
  %50 = bitcast %"class.v8::internal::LoopChoiceNode"* %0 to %"class.v8::internal::ChoiceNode"*
  tail call void @_ZN2v88internal10ChoiceNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib(%"class.v8::internal::ChoiceNode"* %50, %"class.v8::internal::QuickCheckDetails"* %1, %"class.v8::internal::RegExpCompiler"* %2, i32 %3, i1 zeroext %20)
  %51 = load i8, i8* %10, align 1
  %52 = and i8 %51, -65
  store i8 %52, i8* %10, align 1
  br label %53

53:                                               ; preds = %9, %5, %48, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ChoiceNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib(%"class.v8::internal::ChoiceNode"* nocapture readonly, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1 zeroext) unnamed_addr #2 align 2 {
  %6 = alloca %"class.v8::internal::QuickCheckDetails", align 4
  br i1 %4, label %11, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 2
  %9 = load i8, i8* %8, align 8, !range !3
  %10 = icmp ne i8 %9, 0
  br label %11

11:                                               ; preds = %7, %5
  %12 = phi i1 [ true, %5 ], [ %10, %7 ]
  %13 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 1
  %14 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %14, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %14, i64 0, i32 0
  %18 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %18, i64 0, i32 0
  %20 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %19, align 8
  %21 = bitcast %"class.v8::internal::RegExpNode"* %20 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)***
  %22 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %22, i64 5
  %24 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %23, align 8
  tail call void %24(%"class.v8::internal::RegExpNode"* %20, %"class.v8::internal::QuickCheckDetails"* %1, %"class.v8::internal::RegExpCompiler"* %2, i32 %3, i1 zeroext %12) #18
  %25 = icmp sgt i32 %16, 1
  br i1 %25, label %26, label %45

26:                                               ; preds = %11
  %27 = bitcast %"class.v8::internal::QuickCheckDetails"* %6 to i8*
  %28 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 0
  %29 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 0
  %30 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 1, i64 0
  %31 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %30 to i8*
  %32 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 1, i64 1
  %33 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %32 to i8*
  %34 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 1, i64 2
  %35 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %34 to i8*
  %36 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 1, i64 3
  %37 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %36 to i8*
  %38 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 2
  %39 = bitcast i32* %38 to i8*
  %40 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 4
  %41 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 4
  %42 = bitcast %"class.v8::internal::QuickCheckDetails"* %1 to i8*
  %43 = sext i32 %3 to i64
  %44 = zext i32 %16 to i64
  br label %46

45:                                               ; preds = %102, %11
  ret void

46:                                               ; preds = %102, %26
  %47 = phi i64 [ 1, %26 ], [ %103, %102 ]
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %27) #18
  %48 = load i32, i32* %28, align 4
  store i32 %48, i32* %29, align 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 9, i1 false) #18
  call void @llvm.memset.p0i8.i64(i8* align 4 %33, i8 0, i64 9, i1 false) #18
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 9, i1 false) #18
  call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 9, i1 false) #18
  call void @llvm.memset.p0i8.i64(i8* align 4 %39, i8 0, i64 9, i1 false) #18
  %49 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %13, align 8
  %50 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %49, i64 0, i32 0
  %51 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %50, align 8
  %52 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %51, i64 %47, i32 0
  %53 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %52, align 8
  %54 = bitcast %"class.v8::internal::RegExpNode"* %53 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)***
  %55 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*** %54, align 8
  %56 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %55, i64 5
  %57 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %56, align 8
  call void %57(%"class.v8::internal::RegExpNode"* %53, %"class.v8::internal::QuickCheckDetails"* nonnull %6, %"class.v8::internal::RegExpCompiler"* %2, i32 %3, i1 zeroext %12) #18
  %58 = load i8, i8* %40, align 4, !range !3
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %102

60:                                               ; preds = %46
  %61 = load i8, i8* %41, align 4, !range !3
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %66

63:                                               ; preds = %60
  %64 = load i32, i32* %28, align 4
  %65 = icmp sgt i32 %64, %3
  br i1 %65, label %67, label %102

66:                                               ; preds = %60
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %42, i8* nonnull align 4 %27, i64 61, i1 false) #18
  br label %102

67:                                               ; preds = %63, %87
  %68 = phi i64 [ %98, %87 ], [ %43, %63 ]
  %69 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %68, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 1, i64 %68, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %70, %72
  %74 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %68, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 1, i64 %68, i32 1
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %75, %77
  %79 = and i1 %73, %78
  br i1 %79, label %80, label %84

80:                                               ; preds = %67
  %81 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 1, i64 %68, i32 2
  %82 = load i8, i8* %81, align 4, !range !3
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %67, %80
  %85 = phi i32 [ %75, %80 ], [ %77, %67 ]
  %86 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 1, i64 %68, i32 2
  store i8 0, i8* %86, align 4
  br label %87

87:                                               ; preds = %84, %80
  %88 = phi i32 [ %75, %80 ], [ %85, %84 ]
  %89 = phi i32 [ %70, %80 ], [ %72, %84 ]
  %90 = and i32 %89, %70
  %91 = and i32 %90, %75
  %92 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %6, i64 0, i32 1, i64 %68, i32 1
  %93 = and i32 %88, %90
  store i32 %93, i32* %92, align 4
  %94 = xor i32 %91, -1
  %95 = xor i32 %93, %94
  %96 = and i32 %95, %90
  store i32 %96, i32* %69, align 4
  %97 = and i32 %88, %91
  store i32 %97, i32* %74, align 4
  %98 = add nsw i64 %68, 1
  %99 = load i32, i32* %28, align 4
  %100 = sext i32 %99 to i64
  %101 = icmp slt i64 %98, %100
  br i1 %101, label %67, label %102

102:                                              ; preds = %87, %46, %63, %66
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %27) #18
  %103 = add nuw nsw i64 %47, 1
  %104 = icmp eq i64 %103, %44
  br i1 %104, label %45, label %46
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14LoopChoiceNode33GetQuickCheckDetailsFromLoopEntryEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib(%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1 zeroext) unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 2, !range !3
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = bitcast %"class.v8::internal::LoopChoiceNode"* %0 to void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)***
  %11 = load void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)**, void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %11, i64 5
  %13 = load void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %12, align 8
  tail call void %13(%"class.v8::internal::LoopChoiceNode"* %0, %"class.v8::internal::QuickCheckDetails"* %1, %"class.v8::internal::RegExpCompiler"* %2, i32 %3, i1 zeroext %4) #18
  br label %19

14:                                               ; preds = %5
  store i8 1, i8* %6, align 2
  %15 = bitcast %"class.v8::internal::LoopChoiceNode"* %0 to void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)***
  %16 = load void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)**, void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %16, i64 5
  %18 = load void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %17, align 8
  tail call void %18(%"class.v8::internal::LoopChoiceNode"* %0, %"class.v8::internal::QuickCheckDetails"* %1, %"class.v8::internal::RegExpCompiler"* %2, i32 %3, i1 zeroext %4) #18
  store i8 0, i8* %6, align 2
  br label %19

19:                                               ; preds = %14, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14LoopChoiceNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb(%"class.v8::internal::LoopChoiceNode"* nocapture, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1 zeroext) unnamed_addr #2 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 3
  %8 = load i8, i8* %7, align 8, !range !3
  %9 = icmp ne i8 %8, 0
  %10 = icmp slt i32 %3, 1
  %11 = or i1 %10, %9
  br i1 %11, label %12, label %42

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp sgt i32 %14, %2
  br i1 %15, label %16, label %37

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 3
  %18 = sext i32 %2 to i64
  br label %19

19:                                               ; preds = %32, %16
  %20 = phi i64 [ %18, %16 ], [ %33, %32 ]
  %21 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %17, align 8
  %22 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %21, i64 0, i32 0
  %23 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %23, i64 %20
  %25 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %25, i64 0, i32 2
  store i32 3, i32* %26, align 4
  %27 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %25, i64 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 128
  br i1 %29, label %32, label %30

30:                                               ; preds = %19
  store i32 128, i32* %27, align 8
  %31 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"* %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 -1, i64 16, i1 false) #18
  br label %32

32:                                               ; preds = %30, %19
  %33 = add nsw i64 %20, 1
  %34 = load i32, i32* %13, align 8
  %35 = sext i32 %34 to i64
  %36 = icmp slt i64 %33, %35
  br i1 %36, label %19, label %37

37:                                               ; preds = %32, %12
  %38 = icmp eq i32 %2, 0
  br i1 %38, label %39, label %107

39:                                               ; preds = %37
  %40 = zext i1 %5 to i64
  %41 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 %40
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %41, align 8
  br label %107

42:                                               ; preds = %6
  %43 = bitcast %"class.v8::internal::LoopChoiceNode"* %0 to %"class.v8::internal::ChoiceNode"*
  %44 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 1
  %45 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %44, align 8
  %46 = add nsw i32 %3, -2
  %47 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %45, i64 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = sdiv i32 %46, %48
  %50 = icmp sgt i32 %48, 0
  br i1 %50, label %51, label %101

51:                                               ; preds = %42
  %52 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %45, i64 0, i32 0
  br label %53

53:                                               ; preds = %90, %51
  %54 = phi i64 [ 0, %51 ], [ %97, %90 ]
  %55 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %52, align 8
  %56 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %55, i64 %54, i32 1
  %57 = load %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::ZoneList.1140"** %56, align 8
  %58 = icmp eq %"class.v8::internal::ZoneList.1140"* %57, null
  br i1 %58, label %90, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %57, i64 0, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %90, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = icmp sgt i32 %65, %2
  br i1 %66, label %67, label %88

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 3
  %69 = sext i32 %2 to i64
  br label %70

70:                                               ; preds = %83, %67
  %71 = phi i64 [ %69, %67 ], [ %84, %83 ]
  %72 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %68, align 8
  %73 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %72, i64 0, i32 0
  %74 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %73, align 8
  %75 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %74, i64 %71
  %76 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %75, align 8
  %77 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %76, i64 0, i32 2
  store i32 3, i32* %77, align 4
  %78 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %76, i64 0, i32 1
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %79, 128
  br i1 %80, label %83, label %81

81:                                               ; preds = %70
  store i32 128, i32* %78, align 8
  %82 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 -1, i64 16, i1 false) #18
  br label %83

83:                                               ; preds = %81, %70
  %84 = add nsw i64 %71, 1
  %85 = load i32, i32* %64, align 8
  %86 = sext i32 %85 to i64
  %87 = icmp slt i64 %84, %86
  br i1 %87, label %70, label %88

88:                                               ; preds = %83, %63
  %89 = icmp eq i32 %2, 0
  br i1 %89, label %103, label %107

90:                                               ; preds = %59, %53
  %91 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %55, i64 %54, i32 0
  %92 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %91, align 8
  %93 = bitcast %"class.v8::internal::RegExpNode"* %92 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)***
  %94 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*** %93, align 8
  %95 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %94, i64 9
  %96 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %95, align 8
  tail call void %96(%"class.v8::internal::RegExpNode"* %92, %"class.v8::internal::Isolate"* %1, i32 %2, i32 %49, %"class.v8::internal::BoyerMooreLookahead"* %4, i1 zeroext %5) #18
  %97 = add nuw nsw i64 %54, 1
  %98 = load i32, i32* %47, align 4
  %99 = sext i32 %98 to i64
  %100 = icmp slt i64 %97, %99
  br i1 %100, label %53, label %101

101:                                              ; preds = %90, %42
  %102 = icmp eq i32 %2, 0
  br i1 %102, label %103, label %107

103:                                              ; preds = %101, %88
  %104 = zext i1 %5 to i64
  %105 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %43, i64 0, i32 0, i32 7, i64 %104
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %105, align 8
  %106 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 %104
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %106, align 8
  br label %107

107:                                              ; preds = %101, %88, %103, %39, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ChoiceNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb(%"class.v8::internal::ChoiceNode"* nocapture, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1 zeroext) unnamed_addr #2 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %7, align 8
  %9 = add nsw i32 %3, -1
  %10 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %8, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = sdiv i32 %9, %11
  %13 = icmp sgt i32 %11, 0
  br i1 %13, label %14, label %67

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %8, i64 0, i32 0
  br label %16

16:                                               ; preds = %14, %56
  %17 = phi i64 [ 0, %14 ], [ %63, %56 ]
  %18 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %15, align 8
  %19 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %18, i64 %17, i32 1
  %20 = load %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::ZoneList.1140"** %19, align 8
  %21 = icmp eq %"class.v8::internal::ZoneList.1140"* %20, null
  br i1 %21, label %56, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %20, i64 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %56, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = icmp sgt i32 %28, %2
  br i1 %29, label %30, label %51

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 3
  %32 = sext i32 %2 to i64
  br label %33

33:                                               ; preds = %46, %30
  %34 = phi i64 [ %32, %30 ], [ %47, %46 ]
  %35 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %31, align 8
  %36 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %35, i64 0, i32 0
  %37 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %36, align 8
  %38 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %37, i64 %34
  %39 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %39, i64 0, i32 2
  store i32 3, i32* %40, align 4
  %41 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %39, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 128
  br i1 %43, label %46, label %44

44:                                               ; preds = %33
  store i32 128, i32* %41, align 8
  %45 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 -1, i64 16, i1 false) #18
  br label %46

46:                                               ; preds = %44, %33
  %47 = add nsw i64 %34, 1
  %48 = load i32, i32* %27, align 8
  %49 = sext i32 %48 to i64
  %50 = icmp slt i64 %47, %49
  br i1 %50, label %33, label %51

51:                                               ; preds = %46, %26
  %52 = icmp eq i32 %2, 0
  br i1 %52, label %53, label %72

53:                                               ; preds = %51
  %54 = zext i1 %5 to i64
  %55 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 7, i64 %54
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %55, align 8
  br label %72

56:                                               ; preds = %22, %16
  %57 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %18, i64 %17, i32 0
  %58 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %57, align 8
  %59 = bitcast %"class.v8::internal::RegExpNode"* %58 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)***
  %60 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*** %59, align 8
  %61 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %60, i64 9
  %62 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %61, align 8
  tail call void %62(%"class.v8::internal::RegExpNode"* %58, %"class.v8::internal::Isolate"* %1, i32 %2, i32 %12, %"class.v8::internal::BoyerMooreLookahead"* %4, i1 zeroext %5) #18
  %63 = add nuw nsw i64 %17, 1
  %64 = load i32, i32* %10, align 4
  %65 = sext i32 %64 to i64
  %66 = icmp slt i64 %63, %65
  br i1 %66, label %16, label %67

67:                                               ; preds = %56, %6
  %68 = icmp eq i32 %2, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = zext i1 %5 to i64
  %71 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 7, i64 %70
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %71, align 8
  br label %72

72:                                               ; preds = %69, %67, %53, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13AssertionNode17EmitBoundaryCheckEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::AssertionNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.v8::internal::Label", align 4
  %5 = alloca %"class.v8::internal::Label", align 4
  %6 = alloca %"class.v8::internal::Label", align 4
  %7 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %8 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::RegExpMacroAssembler", %"class.v8::internal::RegExpMacroAssembler"* %8, i64 0, i32 5
  %10 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 9
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  %14 = zext i1 %13 to i64
  %15 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 %14
  %16 = load %"class.v8::internal::BoyerMooreLookahead"*, %"class.v8::internal::BoyerMooreLookahead"** %15, align 8
  %17 = icmp eq %"class.v8::internal::BoyerMooreLookahead"* %16, null
  br i1 %17, label %18, label %59

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 0, i32 0, i32 5, i32 1
  %20 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 0, i32 0, i32 5, i32 0
  %21 = select i1 %13, i8* %19, i8* %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = icmp ult i32 %23, 8
  %25 = select i1 %24, i32 %23, i32 8
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %18
  %28 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 2
  br label %74

31:                                               ; preds = %18
  %32 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 0, i32 0, i32 8
  %33 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %33, i64 0, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %33, i64 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %37, %35
  %39 = icmp ult i64 %38, 32
  br i1 %39, label %40, label %42, !prof !2

40:                                               ; preds = %31
  %41 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %33, i64 32) #18
  br label %44

42:                                               ; preds = %31
  %43 = add i64 %35, 32
  store i64 %43, i64* %34, align 8
  br label %44

44:                                               ; preds = %40, %42
  %45 = phi i64 [ %41, %40 ], [ %35, %42 ]
  %46 = inttoptr i64 %45 to %"class.v8::internal::BoyerMooreLookahead"*
  tail call void @_ZN2v88internal19BoyerMooreLookaheadC2EiPNS0_14RegExpCompilerEPNS0_4ZoneE(%"class.v8::internal::BoyerMooreLookahead"* %46, i32 %25, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Zone"* %33) #18
  %47 = bitcast %"class.v8::internal::AssertionNode"* %0 to void (%"class.v8::internal::AssertionNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)***
  %48 = load void (%"class.v8::internal::AssertionNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)**, void (%"class.v8::internal::AssertionNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.v8::internal::AssertionNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::AssertionNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %48, i64 9
  %50 = load void (%"class.v8::internal::AssertionNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::AssertionNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %49, align 8
  tail call void %50(%"class.v8::internal::AssertionNode"* %0, %"class.v8::internal::Isolate"* %10, i32 0, i32 200, %"class.v8::internal::BoyerMooreLookahead"* %46, i1 zeroext %13) #18
  %51 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %46, i64 0, i32 3
  %52 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %51, align 8
  %53 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %52, i64 0, i32 0
  %54 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %53, align 8
  %55 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %54, align 8
  %56 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %55, i64 0, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %138, label %68

59:                                               ; preds = %3
  %60 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %16, i64 0, i32 3
  %61 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %60, align 8
  %62 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %61, i64 0, i32 0
  %63 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %62, align 8
  %64 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %64, i64 0, i32 2
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %138, label %68

68:                                               ; preds = %44, %59
  %69 = phi i32 [ %66, %59 ], [ %57, %44 ]
  %70 = icmp eq i32 %69, 2
  %71 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 1
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, 2
  br i1 %70, label %143, label %74

74:                                               ; preds = %68, %27
  %75 = phi i1 [ %30, %27 ], [ %73, %68 ]
  %76 = bitcast %"class.v8::internal::Label"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #18
  %77 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %4, i64 0, i32 0
  store i32 0, i32* %77, align 4
  %78 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %4, i64 0, i32 1
  store i32 0, i32* %78, align 4
  %79 = bitcast %"class.v8::internal::Label"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %79) #18
  %80 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %5, i64 0, i32 0
  store i32 0, i32* %80, align 4
  %81 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %5, i64 0, i32 1
  store i32 0, i32* %81, align 4
  %82 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 5
  %83 = load i32, i32* %82, align 8
  %84 = icmp eq i32 %83, 1
  br i1 %84, label %88, label %85

85:                                               ; preds = %74
  %86 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %87 = load i32, i32* %86, align 8
  call void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"* %8, i32 %87, %"class.v8::internal::Label"* nonnull %4, i1 zeroext true, i32 1, i32 -1) #18
  br label %88

88:                                               ; preds = %74, %85
  %89 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %8 to i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)***
  %90 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %89, align 8
  %91 = getelementptr inbounds i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %90, i64 25
  %92 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %91, align 8
  %93 = call zeroext i1 %92(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 87, %"class.v8::internal::Label"* nonnull %5) #18
  br i1 %93, label %118, label %94

94:                                               ; preds = %88
  %95 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %8 to void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)***
  %96 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %95, align 8
  %97 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %96, i64 11
  %98 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %97, align 8
  call void %98(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 122, %"class.v8::internal::Label"* nonnull %4) #18
  %99 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %95, align 8
  %100 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %99, i64 12
  %101 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %100, align 8
  call void %101(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 48, %"class.v8::internal::Label"* nonnull %4) #18
  %102 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %95, align 8
  %103 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %102, i64 11
  %104 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %103, align 8
  call void %104(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 96, %"class.v8::internal::Label"* nonnull %5) #18
  %105 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %95, align 8
  %106 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %105, i64 12
  %107 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %106, align 8
  call void %107(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 58, %"class.v8::internal::Label"* nonnull %5) #18
  %108 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %95, align 8
  %109 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %108, i64 12
  %110 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %109, align 8
  call void %110(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 65, %"class.v8::internal::Label"* nonnull %4) #18
  %111 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %95, align 8
  %112 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %111, i64 12
  %113 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %112, align 8
  call void %113(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 91, %"class.v8::internal::Label"* nonnull %5) #18
  %114 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %8 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %115 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %114, align 8
  %116 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %115, i64 9
  %117 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %116, align 8
  call void %117(%"class.v8::internal::RegExpMacroAssembler"* %8, i32 95, %"class.v8::internal::Label"* nonnull %5) #18
  br label %118

118:                                              ; preds = %88, %94
  %119 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %8 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %120 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %119, align 8
  %121 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %120, i64 8
  %122 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %121, align 8
  call void %122(%"class.v8::internal::RegExpMacroAssembler"* %8, %"class.v8::internal::Label"* nonnull %4) #18
  %123 = bitcast %"class.v8::internal::Label"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #18
  %124 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %6, i64 0, i32 0
  store i32 0, i32* %124, align 4
  %125 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %6, i64 0, i32 1
  store i32 0, i32* %125, align 4
  %126 = xor i1 %75, true
  %127 = zext i1 %126 to i32
  call void @_ZN2v88internal13AssertionNode19BacktrackIfPreviousEPNS0_14RegExpCompilerEPNS0_5TraceENS1_10IfPreviousE(%"class.v8::internal::AssertionNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2, i32 %127)
  %128 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %119, align 8
  %129 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %128, i64 29
  %130 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %129, align 8
  call void %130(%"class.v8::internal::RegExpMacroAssembler"* %8, %"class.v8::internal::Label"* nonnull %6) #18
  %131 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %119, align 8
  %132 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %131, i64 8
  %133 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %132, align 8
  call void %133(%"class.v8::internal::RegExpMacroAssembler"* %8, %"class.v8::internal::Label"* nonnull %5) #18
  %134 = zext i1 %75 to i32
  call void @_ZN2v88internal13AssertionNode19BacktrackIfPreviousEPNS0_14RegExpCompilerEPNS0_5TraceENS1_10IfPreviousE(%"class.v8::internal::AssertionNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2, i32 %134)
  %135 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %119, align 8
  %136 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %135, i64 8
  %137 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %136, align 8
  call void %137(%"class.v8::internal::RegExpMacroAssembler"* %8, %"class.v8::internal::Label"* nonnull %6) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %79) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #18
  br label %146

138:                                              ; preds = %44, %59
  %139 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 1
  %140 = load i32, i32* %139, align 8
  %141 = icmp eq i32 %140, 2
  %142 = zext i1 %141 to i32
  tail call void @_ZN2v88internal13AssertionNode19BacktrackIfPreviousEPNS0_14RegExpCompilerEPNS0_5TraceENS1_10IfPreviousE(%"class.v8::internal::AssertionNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2, i32 %142)
  br label %146

143:                                              ; preds = %68
  %144 = xor i1 %73, true
  %145 = zext i1 %144 to i32
  tail call void @_ZN2v88internal13AssertionNode19BacktrackIfPreviousEPNS0_14RegExpCompilerEPNS0_5TraceENS1_10IfPreviousE(%"class.v8::internal::AssertionNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2, i32 %145)
  br label %146

146:                                              ; preds = %138, %143, %118
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13AssertionNode19BacktrackIfPreviousEPNS0_14RegExpCompilerEPNS0_5TraceENS1_10IfPreviousE(%"class.v8::internal::AssertionNode"* nocapture readonly, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %5 = alloca %"class.v8::internal::Trace", align 8
  %6 = alloca %"class.v8::internal::Label", align 4
  %7 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %8 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %7, align 8
  %9 = bitcast %"class.v8::internal::Trace"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %9) #18
  %10 = bitcast %"class.v8::internal::Trace"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 8 %10, i64 120, i1 false)
  %11 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 5
  store i32 0, i32* %11, align 8
  %12 = bitcast %"class.v8::internal::Label"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #18
  %13 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %6, i64 0, i32 0
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %6, i64 0, i32 1
  store i32 0, i32* %14, align 4
  %15 = icmp eq i32 %3, 0
  %16 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 2
  %17 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %16, align 8
  %18 = select i1 %15, %"class.v8::internal::Label"* %17, %"class.v8::internal::Label"* %6
  %19 = select i1 %15, %"class.v8::internal::Label"* %6, %"class.v8::internal::Label"* %17
  %20 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = icmp slt i32 %21, 1
  br i1 %22, label %23, label %29

23:                                               ; preds = %4
  %24 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %8 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %25 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %25, i64 14
  %27 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %26, align 8
  call void %27(%"class.v8::internal::RegExpMacroAssembler"* %8, i32 %21, %"class.v8::internal::Label"* %18) #18
  %28 = load i32, i32* %20, align 8
  br label %29

29:                                               ; preds = %23, %4
  %30 = phi i32 [ %28, %23 ], [ %21, %4 ]
  %31 = xor i1 %22, true
  %32 = add nsw i32 %30, -1
  call void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"* %8, i32 %32, %"class.v8::internal::Label"* %18, i1 zeroext %31, i32 1, i32 -1) #18
  %33 = select i1 %15, i16 119, i16 87
  %34 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %8 to i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)***
  %35 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %34, align 8
  %36 = getelementptr inbounds i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %35, i64 25
  %37 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %36, align 8
  %38 = call zeroext i1 %37(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext %33, %"class.v8::internal::Label"* %17) #18
  br i1 %38, label %67, label %39

39:                                               ; preds = %29
  %40 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %8 to void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)***
  %41 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %40, align 8
  %42 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %41, i64 11
  %43 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %42, align 8
  call void %43(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 122, %"class.v8::internal::Label"* %18) #18
  %44 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %40, align 8
  %45 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %44, i64 12
  %46 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %45, align 8
  call void %46(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 48, %"class.v8::internal::Label"* %18) #18
  %47 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %40, align 8
  %48 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %47, i64 11
  %49 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %48, align 8
  call void %49(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 96, %"class.v8::internal::Label"* %19) #18
  %50 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %40, align 8
  %51 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %50, i64 12
  %52 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %51, align 8
  call void %52(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 58, %"class.v8::internal::Label"* %19) #18
  %53 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %40, align 8
  %54 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %53, i64 12
  %55 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %54, align 8
  call void %55(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 65, %"class.v8::internal::Label"* %18) #18
  %56 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %40, align 8
  %57 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %56, i64 12
  %58 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %57, align 8
  call void %58(%"class.v8::internal::RegExpMacroAssembler"* %8, i16 zeroext 91, %"class.v8::internal::Label"* %19) #18
  %59 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %8 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %60 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %59, align 8
  br i1 %15, label %61, label %64

61:                                               ; preds = %39
  %62 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %60, i64 18
  %63 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %62, align 8
  call void %63(%"class.v8::internal::RegExpMacroAssembler"* %8, i32 95, %"class.v8::internal::Label"* %18) #18
  br label %67

64:                                               ; preds = %39
  %65 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %60, i64 9
  %66 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %65, align 8
  call void %66(%"class.v8::internal::RegExpMacroAssembler"* %8, i32 95, %"class.v8::internal::Label"* %19) #18
  br label %67

67:                                               ; preds = %29, %61, %64
  %68 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %8 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %69 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %68, align 8
  %70 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %69, i64 8
  %71 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %70, align 8
  call void %71(%"class.v8::internal::RegExpMacroAssembler"* %8, %"class.v8::internal::Label"* nonnull %6) #18
  %72 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 0, i32 1
  %73 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %72, align 8
  %74 = bitcast %"class.v8::internal::RegExpNode"* %73 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %75 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %74, align 8
  %76 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %75, i64 3
  %77 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %76, align 8
  call void %77(%"class.v8::internal::RegExpNode"* %73, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %5) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %9) #18
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal5Trace26InvalidateCurrentCharacterEv(%"class.v8::internal::Trace"* nocapture) local_unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 5
  store i32 0, i32* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13AssertionNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib(%"class.v8::internal::AssertionNode"* nocapture readonly, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1 zeroext) unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp ne i32 %7, 1
  %9 = xor i1 %4, true
  %10 = or i1 %8, %9
  br i1 %10, label %13, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %1, i64 0, i32 4
  store i8 1, i8* %12, align 4
  br label %20

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 0, i32 1
  %15 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %14, align 8
  %16 = bitcast %"class.v8::internal::RegExpNode"* %15 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)***
  %17 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %17, i64 5
  %19 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1)** %18, align 8
  tail call void %19(%"class.v8::internal::RegExpNode"* %15, %"class.v8::internal::QuickCheckDetails"* %1, %"class.v8::internal::RegExpCompiler"* %2, i32 %3, i1 zeroext %4) #18
  br label %20

20:                                               ; preds = %13, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13AssertionNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::AssertionNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*) unnamed_addr #2 align 2 {
  %4 = alloca %"class.v8::internal::Trace", align 8
  %5 = alloca %"class.v8::internal::Label", align 4
  %6 = alloca %"class.v8::internal::Label", align 4
  %7 = alloca %"class.v8::internal::Trace", align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %9 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  switch i32 %11, label %116 [
    i32 0, label %12
    i32 1, label %31
    i32 4, label %59
    i32 2, label %115
    i32 3, label %115
  ]

12:                                               ; preds = %3
  %13 = bitcast %"class.v8::internal::Label"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #18
  %14 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %6, i64 0, i32 0
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %6, i64 0, i32 1
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %19 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %19, i64 24
  %21 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %20, align 8
  call void %21(%"class.v8::internal::RegExpMacroAssembler"* %9, i32 %17, %"class.v8::internal::Label"* nonnull %6) #18
  %22 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %23 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %22, align 8
  %24 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %25 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %25, i64 29
  %27 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %26, align 8
  call void %27(%"class.v8::internal::RegExpMacroAssembler"* %9, %"class.v8::internal::Label"* %23) #18
  %28 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %24, align 8
  %29 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %28, i64 8
  %30 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %29, align 8
  call void %30(%"class.v8::internal::RegExpMacroAssembler"* %9, %"class.v8::internal::Label"* nonnull %6) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #18
  br label %116

31:                                               ; preds = %3
  %32 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 9
  %33 = load i32, i32* %32, align 4
  switch i32 %33, label %116 [
    i32 0, label %34
    i32 -1, label %41
  ]

34:                                               ; preds = %31
  %35 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %36 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %35, align 8
  %37 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %38 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %37, align 8
  %39 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %38, i64 29
  %40 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %39, align 8
  tail call void %40(%"class.v8::internal::RegExpMacroAssembler"* %9, %"class.v8::internal::Label"* %36) #18
  br label %123

41:                                               ; preds = %31
  %42 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %45 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %44, align 8
  %46 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %47 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %47, i64 15
  %49 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %48, align 8
  tail call void %49(%"class.v8::internal::RegExpMacroAssembler"* %9, i32 %43, %"class.v8::internal::Label"* %45) #18
  %50 = bitcast %"class.v8::internal::Trace"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %50) #18
  %51 = bitcast %"class.v8::internal::Trace"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %50, i8* align 8 %51, i64 120, i1 false)
  %52 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 9
  store i32 1, i32* %52, align 4
  %53 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 0, i32 1
  %54 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %53, align 8
  %55 = bitcast %"class.v8::internal::RegExpNode"* %54 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %56 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %55, align 8
  %57 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %56, i64 3
  %58 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %57, align 8
  call void %58(%"class.v8::internal::RegExpNode"* %54, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %7) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %50) #18
  br label %123

59:                                               ; preds = %3
  %60 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 0, i32 1
  %61 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %60, align 8
  %62 = bitcast %"class.v8::internal::Trace"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %62) #18
  %63 = bitcast %"class.v8::internal::Trace"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %62, i8* align 8 %63, i64 120, i1 false) #18
  %64 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 5
  store i32 0, i32* %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = icmp slt i32 %66, 1
  %68 = bitcast %"class.v8::internal::Label"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #18
  %69 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %5, i64 0, i32 0
  store i32 0, i32* %69, align 4
  %70 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %5, i64 0, i32 1
  store i32 0, i32* %70, align 4
  br i1 %67, label %71, label %77

71:                                               ; preds = %59
  %72 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %73 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %72, align 8
  %74 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %73, i64 14
  %75 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %74, align 8
  call void %75(%"class.v8::internal::RegExpMacroAssembler"* %9, i32 %66, %"class.v8::internal::Label"* nonnull %5) #18
  %76 = load i32, i32* %65, align 8
  br label %77

77:                                               ; preds = %71, %59
  %78 = phi i32 [ %76, %71 ], [ %66, %59 ]
  %79 = xor i1 %67, true
  %80 = add nsw i32 %78, -1
  %81 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 2
  %82 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %81, align 8
  call void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"* %9, i32 %80, %"class.v8::internal::Label"* %82, i1 zeroext %79, i32 1, i32 -1) #18
  %83 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)***
  %84 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %83, align 8
  %85 = getelementptr inbounds i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %84, i64 25
  %86 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %85, align 8
  %87 = call zeroext i1 %86(%"class.v8::internal::RegExpMacroAssembler"* %9, i16 zeroext 110, %"class.v8::internal::Label"* %82) #18
  br i1 %87, label %106, label %88

88:                                               ; preds = %77
  %89 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 7
  %90 = load i8, i8* %89, align 8, !range !3
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %92, label %97

92:                                               ; preds = %88
  %93 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)***
  %94 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %93, align 8
  %95 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %94, i64 10
  %96 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %95, align 8
  call void %96(%"class.v8::internal::RegExpMacroAssembler"* %9, i32 8232, i32 65534, %"class.v8::internal::Label"* nonnull %5) #18
  br label %97

97:                                               ; preds = %92, %88
  %98 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %99 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %98, align 8
  %100 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %99, i64 9
  %101 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %100, align 8
  call void %101(%"class.v8::internal::RegExpMacroAssembler"* %9, i32 10, %"class.v8::internal::Label"* nonnull %5) #18
  %102 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %81, align 8
  %103 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %98, align 8
  %104 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %103, i64 18
  %105 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %104, align 8
  call void %105(%"class.v8::internal::RegExpMacroAssembler"* %9, i32 13, %"class.v8::internal::Label"* %102) #18
  br label %106

106:                                              ; preds = %77, %97
  %107 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %108 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %107, align 8
  %109 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %108, i64 8
  %110 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %109, align 8
  call void %110(%"class.v8::internal::RegExpMacroAssembler"* %9, %"class.v8::internal::Label"* nonnull %5) #18
  %111 = bitcast %"class.v8::internal::RegExpNode"* %61 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %112 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %111, align 8
  %113 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %112, i64 3
  %114 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %113, align 8
  call void %114(%"class.v8::internal::RegExpNode"* %61, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %4) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %62) #18
  br label %123

115:                                              ; preds = %3, %3
  tail call void @_ZN2v88internal13AssertionNode17EmitBoundaryCheckEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::AssertionNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2)
  br label %123

116:                                              ; preds = %31, %3, %12
  %117 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %0, i64 0, i32 0, i32 1
  %118 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %117, align 8
  %119 = bitcast %"class.v8::internal::RegExpNode"* %118 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %120 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %119, align 8
  %121 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %120, i64 3
  %122 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %121, align 8
  call void %122(%"class.v8::internal::RegExpNode"* %118, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2) #18
  br label %123

123:                                              ; preds = %116, %115, %106, %41, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8TextNode12TextEmitPassEPNS0_14RegExpCompilerENS1_16TextEmitPassTypeEbPNS0_5TraceEbPi(%"class.v8::internal::TextNode"* nocapture readonly, %"class.v8::internal::RegExpCompiler"* nocapture readonly, i32, i1 zeroext, %"class.v8::internal::Trace"* readonly, i1 zeroext, i32* nocapture) local_unnamed_addr #2 align 2 {
  %8 = alloca [4 x i32], align 16
  %9 = alloca %"class.v8::internal::Label", align 4
  %10 = alloca %"class.v8::internal::Label", align 4
  %11 = getelementptr %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %12 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %11, align 8
  %13 = getelementptr %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 7
  %14 = load i8, i8* %13, align 8, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 2
  %17 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 7
  %19 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %20 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %20, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 2
  %24 = load i8, i8* %23, align 8, !range !3
  %25 = icmp eq i8 %24, 0
  %26 = add nsw i32 %22, -1
  br i1 %25, label %47, label %27

27:                                               ; preds = %7
  %28 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %20, i64 0, i32 0
  %29 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %28, align 8
  %30 = sext i32 %26 to i64
  %31 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %29, i64 %30, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %29, i64 %30, i32 1
  %34 = load i32, i32* %33, align 4
  switch i32 %34, label %42 [
    i32 0, label %35
    i32 1, label %43
  ]

35:                                               ; preds = %27
  %36 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %29, i64 %30, i32 2
  %37 = bitcast %"class.v8::internal::RegExpTree"** %36 to %"class.v8::internal::RegExpAtom"**
  %38 = load %"class.v8::internal::RegExpAtom"*, %"class.v8::internal::RegExpAtom"** %37, align 8
  %39 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %38, i64 0, i32 1, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = trunc i64 %40 to i32
  br label %43

42:                                               ; preds = %27
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

43:                                               ; preds = %27, %35
  %44 = phi i32 [ %41, %35 ], [ %34, %27 ]
  %45 = add nsw i32 %32, %44
  %46 = sub nsw i32 0, %45
  br label %47

47:                                               ; preds = %7, %43
  %48 = phi i32 [ %46, %43 ], [ 0, %7 ]
  %49 = select i1 %3, i32 0, i32 %26
  %50 = icmp sgt i32 %49, -1
  br i1 %50, label %51, label %569

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 0
  %53 = icmp ne i32 %2, 4
  %54 = icmp eq %"class.v8::internal::QuickCheckDetails"* %18, null
  %55 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %18, i64 0, i32 0
  %56 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 8
  %57 = select i1 %15, i32 65535, i32 255
  %58 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %12 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %59 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %12 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %60 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %12 to i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)***
  %61 = bitcast %"class.v8::internal::Label"* %10 to i8*
  %62 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %10, i64 0, i32 0
  %63 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %10, i64 0, i32 1
  %64 = icmp eq i32 %2, 1
  %65 = or i32 %2, 1
  %66 = icmp eq i32 %65, 3
  %67 = bitcast [4 x i32]* %8 to i8*
  %68 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 0
  %69 = bitcast %"class.v8::internal::Label"* %9 to i8*
  %70 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %9, i64 0, i32 0
  %71 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %9, i64 0, i32 1
  %72 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 3
  %73 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  %74 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 2
  %75 = sext i32 %49 to i64
  br label %76

76:                                               ; preds = %566, %51
  %77 = phi %"class.v8::internal::ZoneList"* [ %20, %51 ], [ %568, %566 ]
  %78 = phi i64 [ %75, %51 ], [ %567, %566 ]
  %79 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %77, i64 0, i32 0
  %80 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %80, i64 %78, i32 0
  %82 = load i32, i32* %81, align 8
  %83 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %80, i64 %78, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %80, i64 %78, i32 2
  %86 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %85, align 8
  %87 = load i32, i32* %52, align 8
  %88 = add i32 %82, %48
  %89 = add i32 %88, %87
  %90 = icmp eq i32 %84, 0
  br i1 %90, label %91, label %282

91:                                               ; preds = %76
  %92 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %86, i64 3
  %93 = bitcast %"class.v8::internal::RegExpTree"* %92 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = and i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = select i1 %96, i1 %66, i1 %64
  br i1 %97, label %564, label %98

98:                                               ; preds = %91
  %99 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %86, i64 1
  %100 = bitcast %"class.v8::internal::RegExpTree"* %99 to i16**
  %101 = load i16*, i16** %100, align 8
  %102 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %86, i64 2
  %103 = bitcast %"class.v8::internal::RegExpTree"* %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = trunc i64 %104 to i32
  %106 = add nsw i32 %105, -1
  %107 = select i1 %3, i32 0, i32 %106
  %108 = icmp sgt i32 %107, -1
  br i1 %108, label %109, label %564

109:                                              ; preds = %98
  %110 = sext i32 %107 to i64
  %111 = sext i32 %89 to i64
  %112 = sext i32 %82 to i64
  br label %113

113:                                              ; preds = %109, %279
  %114 = phi i64 [ %110, %109 ], [ %280, %279 ]
  %115 = or i64 %114, %78
  %116 = trunc i64 %115 to i32
  %117 = icmp eq i32 %116, 0
  %118 = and i1 %117, %5
  br i1 %118, label %279, label %119

119:                                              ; preds = %113
  %120 = add nsw i64 %114, %112
  br i1 %54, label %129, label %121

121:                                              ; preds = %119
  %122 = load i32, i32* %55, align 4
  %123 = sext i32 %122 to i64
  %124 = icmp slt i64 %120, %123
  br i1 %124, label %125, label %129

125:                                              ; preds = %121
  %126 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 7, i32 1, i64 %120, i32 2
  %127 = load i8, i8* %126, align 4, !range !3
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %129, label %279

129:                                              ; preds = %125, %121, %119
  %130 = getelementptr inbounds i16, i16* %101, i64 %114
  %131 = load i16, i16* %130, align 2
  %132 = load i32, i32* %93, align 4
  %133 = and i32 %132, 2
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %138, label %135

135:                                              ; preds = %129
  switch i16 %131, label %137 [
    i16 924, label %138
    i16 956, label %138
    i16 376, label %136
  ]

136:                                              ; preds = %135
  br label %138

137:                                              ; preds = %135
  br label %138

138:                                              ; preds = %129, %137, %136, %135, %135
  %139 = phi i16 [ %131, %129 ], [ %131, %137 ], [ 255, %136 ], [ 181, %135 ], [ 181, %135 ]
  %140 = load i32, i32* %6, align 4
  %141 = add nsw i64 %114, %111
  %142 = sext i32 %140 to i64
  %143 = icmp sgt i64 %141, %142
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = load i8, i8* %23, align 8, !range !3
  %146 = icmp ne i8 %145, 0
  br label %147

147:                                              ; preds = %144, %138
  %148 = phi i1 [ true, %138 ], [ %146, %144 ]
  switch i32 %2, label %279 [
    i32 0, label %149
    i32 2, label %151
    i32 1, label %169
    i32 3, label %178
  ]

149:                                              ; preds = %147
  %150 = icmp ugt i16 %139, 255
  br i1 %150, label %560, label %279

151:                                              ; preds = %147
  %152 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %11, align 8
  %153 = load i8, i8* %13, align 8
  %154 = icmp ne i8 %153, 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #18
  %155 = call fastcc i32 @_ZN2v88internalL25GetCaseIndependentLettersEPNS0_7IsolateEtbPji(i16 zeroext %139, i1 zeroext %154, i32* nonnull %68) #18
  %156 = icmp ne i32 %155, 1
  %157 = icmp ugt i16 %139, 255
  %158 = and i1 %157, %154
  %159 = or i1 %158, %156
  br i1 %159, label %160, label %161

160:                                              ; preds = %151
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #18
  br label %279

161:                                              ; preds = %151
  br i1 %3, label %273, label %162

162:                                              ; preds = %161
  %163 = trunc i64 %141 to i32
  call void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"* %152, i32 %163, %"class.v8::internal::Label"* %17, i1 zeroext %148, i32 1, i32 -1) #18
  %164 = zext i16 %139 to i32
  %165 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %152 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %166 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %165, align 8
  %167 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %166, i64 18
  %168 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %167, align 8
  call void %168(%"class.v8::internal::RegExpMacroAssembler"* %152, i32 %164, %"class.v8::internal::Label"* %17) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #18
  br i1 %148, label %261, label %279

169:                                              ; preds = %147
  %170 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %11, align 8
  br i1 %3, label %267, label %171

171:                                              ; preds = %169
  %172 = trunc i64 %141 to i32
  call void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"* %170, i32 %172, %"class.v8::internal::Label"* %17, i1 zeroext %148, i32 1, i32 -1) #18
  %173 = zext i16 %139 to i32
  %174 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %170 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %175 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %174, align 8
  %176 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %175, i64 18
  %177 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %176, align 8
  call void %177(%"class.v8::internal::RegExpMacroAssembler"* %170, i32 %173, %"class.v8::internal::Label"* %17) #18
  br label %261

178:                                              ; preds = %147
  %179 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %11, align 8
  %180 = load i8, i8* %13, align 8
  %181 = icmp ne i8 %180, 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #18
  %182 = call fastcc i32 @_ZN2v88internalL25GetCaseIndependentLettersEPNS0_7IsolateEtbPji(i16 zeroext %139, i1 zeroext %181, i32* nonnull %68) #18
  %183 = icmp slt i32 %182, 2
  br i1 %183, label %260, label %184

184:                                              ; preds = %178
  br i1 %3, label %187, label %185

185:                                              ; preds = %184
  %186 = trunc i64 %141 to i32
  call void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"* %179, i32 %186, %"class.v8::internal::Label"* %17, i1 zeroext %148, i32 1, i32 -1) #18
  br label %187

187:                                              ; preds = %185, %184
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #18
  store i32 0, i32* %70, align 4
  store i32 0, i32* %71, align 4
  switch i32 %182, label %258 [
    i32 2, label %190
    i32 4, label %234
    i32 3, label %188
  ]

188:                                              ; preds = %187
  %189 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %179 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  br label %240

190:                                              ; preds = %187
  %191 = load i32, i32* %68, align 16
  %192 = trunc i32 %191 to i16
  %193 = load i32, i32* %73, align 4
  %194 = select i1 %181, i32 255, i32 65535
  %195 = xor i32 %193, %191
  %196 = trunc i32 %195 to i16
  %197 = call i16 @llvm.ctpop.i16(i16 %196) #18, !range !27
  %198 = icmp ult i16 %197, 2
  br i1 %198, label %199, label %207

199:                                              ; preds = %190
  %200 = and i32 %191, 65535
  %201 = and i32 %195, 65535
  %202 = xor i32 %201, %194
  %203 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %179 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)***
  %204 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %203, align 8
  %205 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %204, i64 19
  %206 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %205, align 8
  call void %206(%"class.v8::internal::RegExpMacroAssembler"* %179, i32 %200, i32 %202, %"class.v8::internal::Label"* %17) #18
  br label %259

207:                                              ; preds = %190
  %208 = trunc i32 %193 to i16
  %209 = sub i16 %208, %192
  %210 = call i16 @llvm.ctpop.i16(i16 %209) #18, !range !27
  %211 = icmp ugt i16 %210, 1
  %212 = icmp ugt i16 %209, %192
  %213 = or i1 %212, %211
  br i1 %213, label %222, label %214

214:                                              ; preds = %207
  %215 = trunc i32 %194 to i16
  %216 = xor i16 %209, %215
  %217 = sub i16 %192, %209
  %218 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %179 to void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, i16, %"class.v8::internal::Label"*)***
  %219 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, i16, %"class.v8::internal::Label"*)*** %218, align 8
  %220 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, i16, %"class.v8::internal::Label"*)** %219, i64 20
  %221 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, i16, %"class.v8::internal::Label"*)** %220, align 8
  call void %221(%"class.v8::internal::RegExpMacroAssembler"* %179, i16 zeroext %217, i16 zeroext %209, i16 zeroext %216, %"class.v8::internal::Label"* %17) #18
  br label %259

222:                                              ; preds = %207
  %223 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %179 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %224 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %223, align 8
  %225 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %224, i64 9
  %226 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %225, align 8
  call void %226(%"class.v8::internal::RegExpMacroAssembler"* %179, i32 %191, %"class.v8::internal::Label"* nonnull %9) #18
  %227 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %223, align 8
  %228 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %227, i64 18
  %229 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %228, align 8
  call void %229(%"class.v8::internal::RegExpMacroAssembler"* %179, i32 %193, %"class.v8::internal::Label"* %17) #18
  %230 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %179 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %231 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %230, align 8
  %232 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %231, i64 8
  %233 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %232, align 8
  call void %233(%"class.v8::internal::RegExpMacroAssembler"* %179, %"class.v8::internal::Label"* nonnull %9) #18
  br label %259

234:                                              ; preds = %187
  %235 = load i32, i32* %72, align 4
  %236 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %179 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %237 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %236, align 8
  %238 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %237, i64 9
  %239 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %238, align 8
  call void %239(%"class.v8::internal::RegExpMacroAssembler"* %179, i32 %235, %"class.v8::internal::Label"* nonnull %9) #18
  br label %240

240:                                              ; preds = %234, %188
  %241 = phi void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** [ %189, %188 ], [ %236, %234 ]
  %242 = load i32, i32* %68, align 16
  %243 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %241, align 8
  %244 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %243, i64 9
  %245 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %244, align 8
  call void %245(%"class.v8::internal::RegExpMacroAssembler"* %179, i32 %242, %"class.v8::internal::Label"* nonnull %9) #18
  %246 = load i32, i32* %73, align 4
  %247 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %241, align 8
  %248 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %247, i64 9
  %249 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %248, align 8
  call void %249(%"class.v8::internal::RegExpMacroAssembler"* %179, i32 %246, %"class.v8::internal::Label"* nonnull %9) #18
  %250 = load i32, i32* %74, align 8
  %251 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %241, align 8
  %252 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %251, i64 18
  %253 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %252, align 8
  call void %253(%"class.v8::internal::RegExpMacroAssembler"* %179, i32 %250, %"class.v8::internal::Label"* %17) #18
  %254 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %179 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %255 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %254, align 8
  %256 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %255, i64 8
  %257 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %256, align 8
  call void %257(%"class.v8::internal::RegExpMacroAssembler"* %179, %"class.v8::internal::Label"* nonnull %9) #18
  br label %259

258:                                              ; preds = %187
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

259:                                              ; preds = %199, %214, %222, %240
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #18
  br label %261

260:                                              ; preds = %178
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #18
  br label %279

261:                                              ; preds = %171, %259, %162
  %262 = load i32, i32* %6, align 4
  %263 = sext i32 %262 to i64
  %264 = icmp sgt i64 %141, %263
  br i1 %264, label %265, label %279

265:                                              ; preds = %261
  %266 = trunc i64 %141 to i32
  store i32 %266, i32* %6, align 4
  br label %279

267:                                              ; preds = %169
  %268 = zext i16 %139 to i32
  %269 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %170 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %270 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %269, align 8
  %271 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %270, i64 18
  %272 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %271, align 8
  call void %272(%"class.v8::internal::RegExpMacroAssembler"* %170, i32 %268, %"class.v8::internal::Label"* %17) #18
  br label %279

273:                                              ; preds = %161
  %274 = zext i16 %139 to i32
  %275 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %152 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %276 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %275, align 8
  %277 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %276, i64 18
  %278 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %277, align 8
  call void %278(%"class.v8::internal::RegExpMacroAssembler"* %152, i32 %274, %"class.v8::internal::Label"* %17) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #18
  br label %279

279:                                              ; preds = %125, %273, %267, %260, %265, %261, %160, %162, %147, %149, %113
  %280 = add nsw i64 %114, -1
  %281 = icmp sgt i64 %114, 0
  br i1 %281, label %113, label %564

282:                                              ; preds = %76
  %283 = icmp eq i64 %78, 0
  %284 = and i1 %283, %5
  %285 = or i1 %53, %284
  br i1 %285, label %564, label %286

286:                                              ; preds = %282
  br i1 %54, label %295, label %287

287:                                              ; preds = %286
  %288 = load i32, i32* %55, align 4
  %289 = icmp sgt i32 %288, %82
  br i1 %289, label %290, label %295

290:                                              ; preds = %287
  %291 = sext i32 %82 to i64
  %292 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 7, i32 1, i64 %291, i32 2
  %293 = load i8, i8* %292, align 4, !range !3
  %294 = icmp eq i8 %293, 0
  br i1 %294, label %295, label %564

295:                                              ; preds = %290, %287, %286
  %296 = bitcast %"class.v8::internal::RegExpTree"* %86 to %"class.v8::internal::RegExpCharacterClass"*
  %297 = load i32, i32* %6, align 4
  %298 = icmp slt i32 %297, %89
  br i1 %298, label %302, label %299

299:                                              ; preds = %295
  %300 = load i8, i8* %23, align 8, !range !3
  %301 = icmp ne i8 %300, 0
  br label %302

302:                                              ; preds = %299, %295
  %303 = phi i1 [ true, %295 ], [ %301, %299 ]
  %304 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %56, align 8
  %305 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %86, i64 1
  %306 = bitcast %"class.v8::internal::RegExpTree"* %305 to %"class.v8::internal::CharacterSet"*
  %307 = call %"class.v8::internal::ZoneList.18"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"* %306, %"class.v8::internal::Zone"* %304) #18
  call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.18"* %307) #18
  %308 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %307, i64 0, i32 2
  %309 = load i32, i32* %308, align 4
  %310 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %307, i64 0, i32 0
  %311 = sext i32 %309 to i64
  br label %312

312:                                              ; preds = %316, %302
  %313 = phi i64 [ %314, %316 ], [ %311, %302 ]
  %314 = add nsw i64 %313, -1
  %315 = icmp sgt i64 %313, 0
  br i1 %315, label %316, label %321

316:                                              ; preds = %312
  %317 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %310, align 8
  %318 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %317, i64 %314, i32 0
  %319 = load i32, i32* %318, align 4
  %320 = icmp ugt i32 %319, %57
  br i1 %320, label %312, label %335

321:                                              ; preds = %312
  %322 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %296, i64 0, i32 3, i32 0
  %323 = load i32, i32* %322, align 4
  %324 = and i32 %323, 1
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %326, label %330

326:                                              ; preds = %321
  %327 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %58, align 8
  %328 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %327, i64 29
  %329 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %328, align 8
  call void %329(%"class.v8::internal::RegExpMacroAssembler"* %12, %"class.v8::internal::Label"* %17) #18
  br label %330

330:                                              ; preds = %326, %321
  br i1 %303, label %331, label %556

331:                                              ; preds = %330
  %332 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %59, align 8
  %333 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %332, i64 24
  %334 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %333, align 8
  call void %334(%"class.v8::internal::RegExpMacroAssembler"* %12, i32 %89, %"class.v8::internal::Label"* %17) #18
  br label %556

335:                                              ; preds = %316
  %336 = trunc i64 %313 to i32
  %337 = trunc i64 %314 to i32
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %361

339:                                              ; preds = %335
  %340 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %317, i64 0, i32 0
  %341 = load i32, i32* %340, align 4
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %343, label %361

343:                                              ; preds = %339
  %344 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %317, i64 0, i32 1
  %345 = load i32, i32* %344, align 4
  %346 = icmp ult i32 %345, %57
  br i1 %346, label %361, label %347

347:                                              ; preds = %343
  %348 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %296, i64 0, i32 3, i32 0
  %349 = load i32, i32* %348, align 4
  %350 = and i32 %349, 1
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %356, label %352

352:                                              ; preds = %347
  %353 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %58, align 8
  %354 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %353, i64 29
  %355 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %354, align 8
  call void %355(%"class.v8::internal::RegExpMacroAssembler"* %12, %"class.v8::internal::Label"* %17) #18
  br label %556

356:                                              ; preds = %347
  br i1 %303, label %357, label %556

357:                                              ; preds = %356
  %358 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %59, align 8
  %359 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %358, i64 24
  %360 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %359, align 8
  call void %360(%"class.v8::internal::RegExpMacroAssembler"* %12, i32 %89, %"class.v8::internal::Label"* %17) #18
  br label %556

361:                                              ; preds = %343, %339, %335
  br i1 %3, label %363, label %362

362:                                              ; preds = %361
  call void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"* %12, i32 %89, %"class.v8::internal::Label"* %17, i1 zeroext %303, i32 1, i32 -1) #18
  br label %363

363:                                              ; preds = %362, %361
  %364 = call zeroext i1 @_ZN2v88internal20RegExpCharacterClass11is_standardEPNS0_4ZoneE(%"class.v8::internal::RegExpCharacterClass"* %296, %"class.v8::internal::Zone"* %304) #18
  br i1 %364, label %365, label %373

365:                                              ; preds = %363
  %366 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %86, i64 2
  %367 = bitcast %"class.v8::internal::RegExpTree"* %366 to i16*
  %368 = load i16, i16* %367, align 8
  %369 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %60, align 8
  %370 = getelementptr inbounds i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %369, i64 25
  %371 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %370, align 8
  %372 = call zeroext i1 %371(%"class.v8::internal::RegExpMacroAssembler"* %12, i16 zeroext %368, %"class.v8::internal::Label"* %17) #18
  br i1 %372, label %556, label %373

373:                                              ; preds = %365, %363
  %374 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %304, i64 0, i32 2
  %375 = load i64, i64* %374, align 8
  %376 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %304, i64 0, i32 3
  %377 = load i64, i64* %376, align 8
  %378 = sub i64 %377, %375
  %379 = icmp ult i64 %378, 16
  br i1 %379, label %380, label %382, !prof !2

380:                                              ; preds = %373
  %381 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %304, i64 16) #18
  br label %384

382:                                              ; preds = %373
  %383 = add i64 %375, 16
  store i64 %383, i64* %374, align 8
  br label %384

384:                                              ; preds = %382, %380
  %385 = phi i64 [ %381, %380 ], [ %375, %382 ]
  %386 = inttoptr i64 %385 to %"class.v8::internal::ZoneList.1139"*
  %387 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %386, i64 0, i32 0
  store i32* null, i32** %387, align 8
  %388 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %386, i64 0, i32 1
  store i32 %337, i32* %388, align 8
  %389 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %386, i64 0, i32 2
  store i32 0, i32* %389, align 4
  %390 = icmp sgt i32 %337, 0
  br i1 %390, label %391, label %407

391:                                              ; preds = %384
  %392 = shl i64 %314, 32
  %393 = ashr exact i64 %392, 30
  %394 = add nuw nsw i64 %393, 7
  %395 = and i64 %394, -8
  %396 = load i64, i64* %374, align 8
  %397 = load i64, i64* %376, align 8
  %398 = sub i64 %397, %396
  %399 = icmp ugt i64 %395, %398
  br i1 %399, label %400, label %402, !prof !2

400:                                              ; preds = %391
  %401 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %304, i64 %395) #18
  br label %404

402:                                              ; preds = %391
  %403 = add i64 %396, %395
  store i64 %403, i64* %374, align 8
  br label %404

404:                                              ; preds = %402, %400
  %405 = phi i64 [ %401, %400 ], [ %396, %402 ]
  %406 = inttoptr i64 %405 to i32*
  br label %407

407:                                              ; preds = %404, %384
  %408 = phi i32* [ %406, %404 ], [ null, %384 ]
  store i32* %408, i32** %387, align 8
  %409 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %296, i64 0, i32 3, i32 0
  %410 = load i32, i32* %409, align 4
  %411 = trunc i32 %410 to i8
  %412 = and i8 %411, 1
  %413 = xor i8 %412, 1
  %414 = icmp sgt i32 %336, 0
  br i1 %414, label %415, label %420

415:                                              ; preds = %407
  %416 = inttoptr i64 %385 to i8**
  %417 = and i64 %313, 4294967295
  br label %438

418:                                              ; preds = %548
  %419 = load i32*, i32** %387, align 8
  br label %420

420:                                              ; preds = %418, %407
  %421 = phi i32* [ %408, %407 ], [ %419, %418 ]
  %422 = phi i8 [ %413, %407 ], [ %500, %418 ]
  %423 = load i32, i32* %389, align 4
  %424 = add nsw i32 %423, -1
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds i32, i32* %421, i64 %425
  %427 = load i32, i32* %426, align 4
  %428 = icmp ugt i32 %427, %57
  %429 = add nsw i32 %423, -2
  %430 = select i1 %428, i32 %429, i32 %424
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #18
  store i32 0, i32* %62, align 4
  store i32 0, i32* %63, align 4
  %431 = and i8 %422, 1
  %432 = icmp ne i8 %431, 0
  %433 = select i1 %432, %"class.v8::internal::Label"* %10, %"class.v8::internal::Label"* %17
  %434 = select i1 %432, %"class.v8::internal::Label"* %17, %"class.v8::internal::Label"* %10
  call fastcc void @_ZN2v88internalL16GenerateBranchesEPNS0_20RegExpMacroAssemblerEPNS0_8ZoneListIjEEjjjjPNS0_5LabelES7_S7_(%"class.v8::internal::RegExpMacroAssembler"* %12, %"class.v8::internal::ZoneList.1139"* %386, i32 0, i32 %430, i32 0, i32 %57, %"class.v8::internal::Label"* nonnull %10, %"class.v8::internal::Label"* %433, %"class.v8::internal::Label"* %434) #18
  %435 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %58, align 8
  %436 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %435, i64 8
  %437 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %436, align 8
  call void %437(%"class.v8::internal::RegExpMacroAssembler"* %12, %"class.v8::internal::Label"* nonnull %10) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #18
  br label %556

438:                                              ; preds = %548, %415
  %439 = phi i64 [ 0, %415 ], [ %554, %548 ]
  %440 = phi i8 [ %413, %415 ], [ %500, %548 ]
  %441 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %310, align 8
  %442 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %441, i64 %439, i32 0
  %443 = load i32, i32* %442, align 4
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %445, label %448

445:                                              ; preds = %438
  %446 = and i8 %440, 1
  %447 = xor i8 %446, 1
  br label %499

448:                                              ; preds = %438
  %449 = load i32, i32* %389, align 4
  %450 = load i32, i32* %388, align 8
  %451 = icmp slt i32 %449, %450
  br i1 %451, label %452, label %457

452:                                              ; preds = %448
  %453 = load i32*, i32** %387, align 8
  %454 = add nsw i32 %449, 1
  store i32 %454, i32* %389, align 4
  %455 = sext i32 %449 to i64
  %456 = getelementptr inbounds i32, i32* %453, i64 %455
  store i32 %443, i32* %456, align 4
  br label %499

457:                                              ; preds = %448
  %458 = shl nsw i32 %450, 1
  %459 = or i32 %458, 1
  %460 = sext i32 %459 to i64
  %461 = shl nsw i64 %460, 2
  %462 = add nsw i64 %461, 7
  %463 = and i64 %462, -8
  %464 = load i64, i64* %374, align 8
  %465 = load i64, i64* %376, align 8
  %466 = sub i64 %465, %464
  %467 = icmp ugt i64 %463, %466
  br i1 %467, label %468, label %470, !prof !2

468:                                              ; preds = %457
  %469 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %304, i64 %463) #18
  br label %472

470:                                              ; preds = %457
  %471 = add i64 %464, %463
  store i64 %471, i64* %374, align 8
  br label %472

472:                                              ; preds = %470, %468
  %473 = phi i64 [ %469, %468 ], [ %464, %470 ]
  %474 = inttoptr i64 %473 to i32*
  %475 = load i32, i32* %389, align 4
  %476 = icmp sgt i32 %475, 0
  br i1 %476, label %477, label %494

477:                                              ; preds = %472
  %478 = inttoptr i64 %473 to i8*
  %479 = load i8*, i8** %416, align 8
  %480 = sext i32 %475 to i64
  %481 = shl nsw i64 %480, 2
  %482 = add nsw i64 %481, -4
  %483 = lshr exact i64 %482, 2
  switch i64 %483, label %493 [
    i64 3, label %492
    i64 1, label %487
    i64 2, label %491
    i64 0, label %484
  ]

484:                                              ; preds = %477
  %485 = bitcast i8* %479 to i32*
  %486 = load i32, i32* %485, align 1
  store i32 %486, i32* %474, align 1
  br label %494

487:                                              ; preds = %477
  %488 = bitcast i8* %479 to i64*
  %489 = inttoptr i64 %473 to i64*
  %490 = load i64, i64* %488, align 1
  store i64 %490, i64* %489, align 1
  br label %494

491:                                              ; preds = %477
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %478, i8* align 1 %479, i64 12, i1 false) #18
  br label %494

492:                                              ; preds = %477
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %478, i8* align 1 %479, i64 16, i1 false) #18
  br label %494

493:                                              ; preds = %477
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %478, i8* align 1 %479, i64 %481, i1 false) #18
  br label %494

494:                                              ; preds = %493, %492, %491, %487, %484, %472
  store i32* %474, i32** %387, align 8
  store i32 %459, i32* %388, align 8
  %495 = load i32, i32* %389, align 4
  %496 = add nsw i32 %495, 1
  store i32 %496, i32* %389, align 4
  %497 = sext i32 %495 to i64
  %498 = getelementptr inbounds i32, i32* %474, i64 %497
  store i32 %443, i32* %498, align 4
  br label %499

499:                                              ; preds = %494, %452, %445
  %500 = phi i8 [ %447, %445 ], [ %440, %452 ], [ %440, %494 ]
  %501 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %441, i64 %439, i32 1
  %502 = load i32, i32* %501, align 4
  %503 = add i32 %502, 1
  %504 = load i32, i32* %389, align 4
  %505 = load i32, i32* %388, align 8
  %506 = icmp slt i32 %504, %505
  br i1 %506, label %507, label %509

507:                                              ; preds = %499
  %508 = load i32*, i32** %387, align 8
  br label %548

509:                                              ; preds = %499
  %510 = shl nsw i32 %505, 1
  %511 = or i32 %510, 1
  %512 = sext i32 %511 to i64
  %513 = shl nsw i64 %512, 2
  %514 = add nsw i64 %513, 7
  %515 = and i64 %514, -8
  %516 = load i64, i64* %374, align 8
  %517 = load i64, i64* %376, align 8
  %518 = sub i64 %517, %516
  %519 = icmp ugt i64 %515, %518
  br i1 %519, label %520, label %522, !prof !2

520:                                              ; preds = %509
  %521 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %304, i64 %515) #18
  br label %524

522:                                              ; preds = %509
  %523 = add i64 %516, %515
  store i64 %523, i64* %374, align 8
  br label %524

524:                                              ; preds = %522, %520
  %525 = phi i64 [ %521, %520 ], [ %516, %522 ]
  %526 = inttoptr i64 %525 to i32*
  %527 = load i32, i32* %389, align 4
  %528 = icmp sgt i32 %527, 0
  br i1 %528, label %529, label %546

529:                                              ; preds = %524
  %530 = inttoptr i64 %525 to i8*
  %531 = load i8*, i8** %416, align 8
  %532 = sext i32 %527 to i64
  %533 = shl nsw i64 %532, 2
  %534 = add nsw i64 %533, -4
  %535 = lshr exact i64 %534, 2
  switch i64 %535, label %545 [
    i64 3, label %544
    i64 1, label %539
    i64 2, label %543
    i64 0, label %536
  ]

536:                                              ; preds = %529
  %537 = bitcast i8* %531 to i32*
  %538 = load i32, i32* %537, align 1
  store i32 %538, i32* %526, align 1
  br label %546

539:                                              ; preds = %529
  %540 = bitcast i8* %531 to i64*
  %541 = inttoptr i64 %525 to i64*
  %542 = load i64, i64* %540, align 1
  store i64 %542, i64* %541, align 1
  br label %546

543:                                              ; preds = %529
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %530, i8* align 1 %531, i64 12, i1 false) #18
  br label %546

544:                                              ; preds = %529
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %530, i8* align 1 %531, i64 16, i1 false) #18
  br label %546

545:                                              ; preds = %529
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %530, i8* align 1 %531, i64 %533, i1 false) #18
  br label %546

546:                                              ; preds = %545, %544, %543, %539, %536, %524
  store i32* %526, i32** %387, align 8
  store i32 %511, i32* %388, align 8
  %547 = load i32, i32* %389, align 4
  br label %548

548:                                              ; preds = %546, %507
  %549 = phi i32 [ %547, %546 ], [ %504, %507 ]
  %550 = phi i32* [ %526, %546 ], [ %508, %507 ]
  %551 = add nsw i32 %549, 1
  store i32 %551, i32* %389, align 4
  %552 = sext i32 %549 to i64
  %553 = getelementptr inbounds i32, i32* %550, i64 %552
  store i32 %503, i32* %553, align 4
  %554 = add nuw nsw i64 %439, 1
  %555 = icmp eq i64 %554, %417
  br i1 %555, label %418, label %438

556:                                              ; preds = %330, %331, %352, %356, %357, %365, %420
  %557 = load i32, i32* %6, align 4
  %558 = icmp slt i32 %557, %89
  br i1 %558, label %559, label %564

559:                                              ; preds = %556
  store i32 %89, i32* %6, align 4
  br label %564

560:                                              ; preds = %149
  %561 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %58, align 8
  %562 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %561, i64 29
  %563 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %562, align 8
  call void %563(%"class.v8::internal::RegExpMacroAssembler"* %12, %"class.v8::internal::Label"* %17) #18
  br label %569

564:                                              ; preds = %279, %98, %290, %282, %91, %559, %556
  %565 = icmp sgt i64 %78, 0
  br i1 %565, label %566, label %569

566:                                              ; preds = %564
  %567 = add nsw i64 %78, -1
  %568 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %19, align 8
  br label %76

569:                                              ; preds = %564, %47, %560
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal8TextNode6LengthEv(%"class.v8::internal::TextNode"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %3 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %3, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, -1
  %7 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %3, i64 0, i32 0
  %8 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %7, align 8
  %9 = sext i32 %6 to i64
  %10 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %8, i64 %9, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %8, i64 %9, i32 1
  %13 = load i32, i32* %12, align 4
  switch i32 %13, label %21 [
    i32 0, label %14
    i32 1, label %22
  ]

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %8, i64 %9, i32 2
  %16 = bitcast %"class.v8::internal::RegExpTree"** %15 to %"class.v8::internal::RegExpAtom"**
  %17 = load %"class.v8::internal::RegExpAtom"*, %"class.v8::internal::RegExpAtom"** %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %17, i64 0, i32 1, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = trunc i64 %19 to i32
  br label %22

21:                                               ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

22:                                               ; preds = %1, %14
  %23 = phi i32 [ %20, %14 ], [ %13, %1 ]
  %24 = add nsw i32 %23, %11
  ret i32 %24
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2v88internal8TextNode8SkipPassENS1_16TextEmitPassTypeEb(i32, i1 zeroext) local_unnamed_addr #3 align 2 {
  %3 = icmp eq i32 %0, 1
  %4 = or i32 %0, 1
  %5 = icmp eq i32 %4, 3
  %6 = select i1 %1, i1 %3, i1 %5
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"*, %"class.v8::internal::ZoneList.18"*, i1 zeroext, %"class.v8::internal::RegExpNode"*, i32) local_unnamed_addr #2 align 2 {
  %6 = alloca %"class.v8::base::Flags", align 4
  %7 = alloca %"class.v8::internal::Zone"*, align 8
  %8 = alloca %"class.v8::internal::ZoneList.18"*, align 8
  %9 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %6, i64 0, i32 0
  store i32 %4, i32* %9, align 4
  store %"class.v8::internal::Zone"* %0, %"class.v8::internal::Zone"** %7, align 8
  store %"class.v8::internal::ZoneList.18"* %1, %"class.v8::internal::ZoneList.18"** %8, align 8
  %10 = zext i1 %2 to i8
  %11 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %14, %12
  %16 = icmp ult i64 %15, 16
  br i1 %16, label %17, label %19, !prof !2

17:                                               ; preds = %5
  %18 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 16) #18
  br label %21

19:                                               ; preds = %5
  %20 = add i64 %12, 16
  store i64 %20, i64* %11, align 8
  br label %21

21:                                               ; preds = %17, %19
  %22 = phi i64 [ %18, %17 ], [ %12, %19 ]
  %23 = inttoptr i64 %22 to %"class.v8::internal::ZoneList"*
  %24 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %23, i64 0, i32 0
  store %"class.v8::internal::TextElement"* null, %"class.v8::internal::TextElement"** %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %23, i64 0, i32 1
  store i32 1, i32* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %23, i64 0, i32 2
  store i32 0, i32* %26, align 4
  %27 = load i64, i64* %11, align 8
  %28 = load i64, i64* %13, align 8
  %29 = sub i64 %28, %27
  %30 = icmp ult i64 %29, 16
  br i1 %30, label %31, label %33, !prof !2

31:                                               ; preds = %21
  %32 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 16) #18
  br label %35

33:                                               ; preds = %21
  %34 = add i64 %27, 16
  store i64 %34, i64* %11, align 8
  br label %35

35:                                               ; preds = %31, %33
  %36 = phi i64 [ %32, %31 ], [ %27, %33 ]
  %37 = inttoptr i64 %36 to %"class.v8::internal::TextElement"*
  store %"class.v8::internal::TextElement"* %37, %"class.v8::internal::TextElement"** %24, align 8
  %38 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %39 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %38, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %7, %"class.v8::internal::ZoneList.18"** nonnull dereferenceable(8) %8, %"class.v8::base::Flags"* nonnull dereferenceable(4) %6)
  %40 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %39, i64 0, i32 0
  %41 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %42 = load i32, i32* %26, align 4
  %43 = load i32, i32* %25, align 8
  %44 = icmp slt i32 %42, %43
  br i1 %44, label %45, label %52

45:                                               ; preds = %35
  %46 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %24, align 8
  %47 = add nsw i32 %42, 1
  store i32 %47, i32* %26, align 4
  %48 = sext i32 %42 to i64
  %49 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %46, i64 %48
  %50 = bitcast %"class.v8::internal::TextElement"* %49 to i64*
  store i64 8589934591, i64* %50, align 8
  %51 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %46, i64 %48, i32 2
  br label %87

52:                                               ; preds = %35
  %53 = shl nsw i32 %43, 1
  %54 = or i32 %53, 1
  %55 = sext i32 %54 to i64
  %56 = shl nsw i64 %55, 4
  %57 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %41, i64 0, i32 2
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %41, i64 0, i32 3
  %60 = load i64, i64* %59, align 8
  %61 = sub i64 %60, %58
  %62 = icmp ugt i64 %56, %61
  br i1 %62, label %63, label %65, !prof !2

63:                                               ; preds = %52
  %64 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %41, i64 %56) #18
  br label %67

65:                                               ; preds = %52
  %66 = add i64 %58, %56
  store i64 %66, i64* %57, align 8
  br label %67

67:                                               ; preds = %65, %63
  %68 = phi i64 [ %64, %63 ], [ %58, %65 ]
  %69 = inttoptr i64 %68 to %"class.v8::internal::TextElement"*
  %70 = load i32, i32* %26, align 4
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %80

72:                                               ; preds = %67
  %73 = inttoptr i64 %68 to i8*
  %74 = inttoptr i64 %22 to i8**
  %75 = load i8*, i8** %74, align 8
  %76 = icmp eq i32 %70, 1
  %77 = sext i32 %70 to i64
  %78 = shl nsw i64 %77, 4
  %79 = select i1 %76, i64 16, i64 %78
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %75, i64 %79, i1 false) #18
  br label %80

80:                                               ; preds = %72, %67
  store %"class.v8::internal::TextElement"* %69, %"class.v8::internal::TextElement"** %24, align 8
  store i32 %54, i32* %25, align 8
  %81 = load i32, i32* %26, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %26, align 4
  %83 = sext i32 %81 to i64
  %84 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %69, i64 %83
  %85 = bitcast %"class.v8::internal::TextElement"* %84 to i64*
  store i64 8589934591, i64* %85, align 8
  %86 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %69, i64 %83, i32 2
  br label %87

87:                                               ; preds = %45, %80
  %88 = phi %"class.v8::internal::RegExpTree"** [ %51, %45 ], [ %86, %80 ]
  store %"class.v8::internal::RegExpTree"* %40, %"class.v8::internal::RegExpTree"** %88, align 8
  %89 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %90 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %89, i64 0, i32 2
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %89, i64 0, i32 3
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %93, %91
  %95 = icmp ult i64 %94, 80
  br i1 %95, label %96, label %98, !prof !2

96:                                               ; preds = %87
  %97 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %89, i64 80) #18
  br label %100

98:                                               ; preds = %87
  %99 = add i64 %91, 80
  store i64 %99, i64* %90, align 8
  br label %100

100:                                              ; preds = %96, %98
  %101 = phi i64 [ %97, %96 ], [ %91, %98 ]
  %102 = inttoptr i64 %101 to %"class.v8::internal::TextNode"*
  %103 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %3, i64 0, i32 8
  %104 = bitcast %"class.v8::internal::Zone"** %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %102, i64 0, i32 0, i32 0, i32 0
  %107 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %102, i64 0, i32 0, i32 0, i32 1
  %108 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %102, i64 0, i32 0, i32 0, i32 8
  %109 = bitcast %"class.v8::internal::RegExpNode"** %107 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %109, i8 0, i64 24, i1 false) #18
  %110 = bitcast %"class.v8::internal::Zone"** %108 to i64*
  store i64 %105, i64* %110, align 8
  %111 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %102, i64 0, i32 0, i32 0, i32 7, i64 0
  %112 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %111 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 16, i1 false) #18
  %113 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %102, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %3, %"class.v8::internal::RegExpNode"** %113, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal8TextNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %106, align 8
  %114 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %102, i64 0, i32 1
  %115 = bitcast %"class.v8::internal::ZoneList"** %114 to i64*
  store i64 %22, i64* %115, align 8
  %116 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %102, i64 0, i32 2
  store i8 %10, i8* %116, align 8
  ret %"class.v8::internal::TextNode"* %102
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** dereferenceable(8), %"class.v8::internal::ZoneList.18"** dereferenceable(8), %"class.v8::base::Flags"* dereferenceable(4)) local_unnamed_addr #2 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %6
  %10 = icmp ult i64 %9, 32
  br i1 %10, label %11, label %13, !prof !2

11:                                               ; preds = %4
  %12 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 32) #18
  br label %15

13:                                               ; preds = %4
  %14 = add i64 %6, 32
  store i64 %14, i64* %5, align 8
  br label %15

15:                                               ; preds = %11, %13
  %16 = phi i64 [ %12, %11 ], [ %6, %13 ]
  %17 = inttoptr i64 %16 to %"class.v8::internal::RegExpCharacterClass"*
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1, align 8
  %19 = load %"class.v8::internal::ZoneList.18"*, %"class.v8::internal::ZoneList.18"** %2, align 8
  %20 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %3, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal20RegExpCharacterClassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 0
  store %"class.v8::internal::ZoneList.18"* %19, %"class.v8::internal::ZoneList.18"** %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 1
  store i16 0, i16* %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 2, i32 0
  store i32 %21, i32* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 3, i32 0
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %19, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %80

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %19, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  %35 = bitcast %"class.v8::internal::ZoneList.18"* %19 to i64**
  %36 = load i64*, i64** %35, align 8
  store i32 1, i32* %27, align 4
  br label %76

37:                                               ; preds = %30
  %38 = shl nsw i32 %32, 1
  %39 = or i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 3
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, %43
  %47 = icmp ugt i64 %41, %46
  br i1 %47, label %48, label %50, !prof !2

48:                                               ; preds = %37
  %49 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %41) #18
  br label %52

50:                                               ; preds = %37
  %51 = add i64 %43, %41
  store i64 %51, i64* %42, align 8
  br label %52

52:                                               ; preds = %50, %48
  %53 = phi i64 [ %49, %48 ], [ %43, %50 ]
  %54 = inttoptr i64 %53 to %"class.v8::internal::CharacterRange"*
  %55 = load i32, i32* %27, align 4
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %69

57:                                               ; preds = %52
  %58 = inttoptr i64 %53 to i8*
  %59 = bitcast %"class.v8::internal::ZoneList.18"* %19 to i8**
  %60 = load i8*, i8** %59, align 8
  %61 = sext i32 %55 to i64
  %62 = shl nsw i64 %61, 3
  switch i64 %62, label %68 [
    i64 16, label %67
    i64 8, label %63
  ]

63:                                               ; preds = %57
  %64 = bitcast i8* %60 to i64*
  %65 = inttoptr i64 %53 to i64*
  %66 = load i64, i64* %64, align 1
  store i64 %66, i64* %65, align 1
  br label %69

67:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 16, i1 false) #18
  br label %69

68:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 %62, i1 false) #18
  br label %69

69:                                               ; preds = %68, %67, %63, %52
  %70 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %19, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %54, %"class.v8::internal::CharacterRange"** %70, align 8
  store i32 %39, i32* %31, align 8
  %71 = load i32, i32* %27, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %27, align 4
  %73 = sext i32 %71 to i64
  %74 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %54, i64 %73
  %75 = bitcast %"class.v8::internal::CharacterRange"* %74 to i64*
  br label %76

76:                                               ; preds = %69, %34
  %77 = phi i64* [ %75, %69 ], [ %36, %34 ]
  store i64 4785070309113856, i64* %77, align 4
  %78 = load i32, i32* %26, align 4
  %79 = xor i32 %78, 1
  store i32 %79, i32* %26, align 4
  br label %80

80:                                               ; preds = %15, %76
  ret %"class.v8::internal::RegExpCharacterClass"* %17
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode22CreateForSurrogatePairEPNS0_4ZoneENS0_14CharacterRangeES4_bPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"*, i64, i64, i1 zeroext, %"class.v8::internal::RegExpNode"*, i32) local_unnamed_addr #2 align 2 {
  %7 = alloca %"class.v8::base::Flags", align 4
  %8 = alloca %"class.v8::internal::Zone"*, align 8
  %9 = alloca %"class.v8::internal::ZoneList.18"*, align 8
  %10 = alloca %"class.v8::internal::ZoneList.18"*, align 8
  %11 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %7, i64 0, i32 0
  store i32 %5, i32* %11, align 4
  store %"class.v8::internal::Zone"* %0, %"class.v8::internal::Zone"** %8, align 8
  %12 = zext i1 %3 to i8
  %13 = bitcast %"class.v8::internal::ZoneList.18"** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #18
  %14 = tail call %"class.v8::internal::ZoneList.18"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %0, i64 %1)
  store %"class.v8::internal::ZoneList.18"* %14, %"class.v8::internal::ZoneList.18"** %9, align 8
  %15 = bitcast %"class.v8::internal::ZoneList.18"** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #18
  %16 = tail call %"class.v8::internal::ZoneList.18"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %0, i64 %2)
  store %"class.v8::internal::ZoneList.18"* %16, %"class.v8::internal::ZoneList.18"** %10, align 8
  %17 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %18
  %22 = icmp ult i64 %21, 16
  br i1 %22, label %23, label %25, !prof !2

23:                                               ; preds = %6
  %24 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 16) #18
  br label %27

25:                                               ; preds = %6
  %26 = add i64 %18, 16
  store i64 %26, i64* %17, align 8
  br label %27

27:                                               ; preds = %23, %25
  %28 = phi i64 [ %24, %23 ], [ %18, %25 ]
  %29 = inttoptr i64 %28 to %"class.v8::internal::ZoneList"*
  %30 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %29, i64 0, i32 0
  store %"class.v8::internal::TextElement"* null, %"class.v8::internal::TextElement"** %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %29, i64 0, i32 1
  store i32 2, i32* %31, align 8
  %32 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %29, i64 0, i32 2
  store i32 0, i32* %32, align 4
  %33 = load i64, i64* %17, align 8
  %34 = load i64, i64* %19, align 8
  %35 = sub i64 %34, %33
  %36 = icmp ult i64 %35, 32
  br i1 %36, label %37, label %39, !prof !2

37:                                               ; preds = %27
  %38 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 32) #18
  br label %41

39:                                               ; preds = %27
  %40 = add i64 %33, 32
  store i64 %40, i64* %17, align 8
  br label %41

41:                                               ; preds = %37, %39
  %42 = phi i64 [ %38, %37 ], [ %33, %39 ]
  %43 = inttoptr i64 %42 to %"class.v8::internal::TextElement"*
  store %"class.v8::internal::TextElement"* %43, %"class.v8::internal::TextElement"** %30, align 8
  %44 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  %45 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %44, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %8, %"class.v8::internal::ZoneList.18"** nonnull dereferenceable(8) %9, %"class.v8::base::Flags"* nonnull dereferenceable(4) %7)
  %46 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %45, i64 0, i32 0
  %47 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  %48 = load i32, i32* %32, align 4
  %49 = load i32, i32* %31, align 8
  %50 = icmp slt i32 %48, %49
  br i1 %50, label %51, label %58

51:                                               ; preds = %41
  %52 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %30, align 8
  %53 = add nsw i32 %48, 1
  store i32 %53, i32* %32, align 4
  %54 = sext i32 %48 to i64
  %55 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %52, i64 %54
  %56 = bitcast %"class.v8::internal::TextElement"* %55 to i64*
  store i64 8589934591, i64* %56, align 8
  %57 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %52, i64 %54, i32 2
  br label %93

58:                                               ; preds = %41
  %59 = shl nsw i32 %49, 1
  %60 = or i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = shl nsw i64 %61, 4
  %63 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %47, i64 0, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %47, i64 0, i32 3
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 %66, %64
  %68 = icmp ugt i64 %62, %67
  br i1 %68, label %69, label %71, !prof !2

69:                                               ; preds = %58
  %70 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %47, i64 %62) #18
  br label %73

71:                                               ; preds = %58
  %72 = add i64 %64, %62
  store i64 %72, i64* %63, align 8
  br label %73

73:                                               ; preds = %71, %69
  %74 = phi i64 [ %70, %69 ], [ %64, %71 ]
  %75 = inttoptr i64 %74 to %"class.v8::internal::TextElement"*
  %76 = load i32, i32* %32, align 4
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %78, label %86

78:                                               ; preds = %73
  %79 = inttoptr i64 %74 to i8*
  %80 = inttoptr i64 %28 to i8**
  %81 = load i8*, i8** %80, align 8
  %82 = icmp eq i32 %76, 1
  %83 = sext i32 %76 to i64
  %84 = shl nsw i64 %83, 4
  %85 = select i1 %82, i64 16, i64 %84
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 %81, i64 %85, i1 false) #18
  br label %86

86:                                               ; preds = %78, %73
  store %"class.v8::internal::TextElement"* %75, %"class.v8::internal::TextElement"** %30, align 8
  store i32 %60, i32* %31, align 8
  %87 = load i32, i32* %32, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %32, align 4
  %89 = sext i32 %87 to i64
  %90 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %75, i64 %89
  %91 = bitcast %"class.v8::internal::TextElement"* %90 to i64*
  store i64 8589934591, i64* %91, align 8
  %92 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %75, i64 %89, i32 2
  br label %93

93:                                               ; preds = %51, %86
  %94 = phi %"class.v8::internal::RegExpTree"** [ %57, %51 ], [ %92, %86 ]
  store %"class.v8::internal::RegExpTree"* %46, %"class.v8::internal::RegExpTree"** %94, align 8
  %95 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  %96 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJRPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %95, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %8, %"class.v8::internal::ZoneList.18"** nonnull dereferenceable(8) %10, %"class.v8::base::Flags"* nonnull dereferenceable(4) %7)
  %97 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %96, i64 0, i32 0
  %98 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  %99 = load i32, i32* %32, align 4
  %100 = load i32, i32* %31, align 8
  %101 = icmp slt i32 %99, %100
  br i1 %101, label %102, label %109

102:                                              ; preds = %93
  %103 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %30, align 8
  %104 = add nsw i32 %99, 1
  store i32 %104, i32* %32, align 4
  %105 = sext i32 %99 to i64
  %106 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %103, i64 %105
  %107 = bitcast %"class.v8::internal::TextElement"* %106 to i64*
  store i64 8589934591, i64* %107, align 8
  %108 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %103, i64 %105, i32 2
  br label %144

109:                                              ; preds = %93
  %110 = shl nsw i32 %100, 1
  %111 = or i32 %110, 1
  %112 = sext i32 %111 to i64
  %113 = shl nsw i64 %112, 4
  %114 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %98, i64 0, i32 2
  %115 = load i64, i64* %114, align 8
  %116 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %98, i64 0, i32 3
  %117 = load i64, i64* %116, align 8
  %118 = sub i64 %117, %115
  %119 = icmp ugt i64 %113, %118
  br i1 %119, label %120, label %122, !prof !2

120:                                              ; preds = %109
  %121 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %98, i64 %113) #18
  br label %124

122:                                              ; preds = %109
  %123 = add i64 %115, %113
  store i64 %123, i64* %114, align 8
  br label %124

124:                                              ; preds = %122, %120
  %125 = phi i64 [ %121, %120 ], [ %115, %122 ]
  %126 = inttoptr i64 %125 to %"class.v8::internal::TextElement"*
  %127 = load i32, i32* %32, align 4
  %128 = icmp sgt i32 %127, 0
  br i1 %128, label %129, label %137

129:                                              ; preds = %124
  %130 = inttoptr i64 %125 to i8*
  %131 = inttoptr i64 %28 to i8**
  %132 = load i8*, i8** %131, align 8
  %133 = icmp eq i32 %127, 1
  %134 = sext i32 %127 to i64
  %135 = shl nsw i64 %134, 4
  %136 = select i1 %133, i64 16, i64 %135
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %130, i8* align 1 %132, i64 %136, i1 false) #18
  br label %137

137:                                              ; preds = %129, %124
  store %"class.v8::internal::TextElement"* %126, %"class.v8::internal::TextElement"** %30, align 8
  store i32 %111, i32* %31, align 8
  %138 = load i32, i32* %32, align 4
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %32, align 4
  %140 = sext i32 %138 to i64
  %141 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %126, i64 %140
  %142 = bitcast %"class.v8::internal::TextElement"* %141 to i64*
  store i64 8589934591, i64* %142, align 8
  %143 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %126, i64 %140, i32 2
  br label %144

144:                                              ; preds = %102, %137
  %145 = phi %"class.v8::internal::RegExpTree"** [ %108, %102 ], [ %143, %137 ]
  store %"class.v8::internal::RegExpTree"* %97, %"class.v8::internal::RegExpTree"** %145, align 8
  %146 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  %147 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %146, i64 0, i32 2
  %148 = load i64, i64* %147, align 8
  %149 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %146, i64 0, i32 3
  %150 = load i64, i64* %149, align 8
  %151 = sub i64 %150, %148
  %152 = icmp ult i64 %151, 80
  br i1 %152, label %153, label %155, !prof !2

153:                                              ; preds = %144
  %154 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %146, i64 80) #18
  br label %157

155:                                              ; preds = %144
  %156 = add i64 %148, 80
  store i64 %156, i64* %147, align 8
  br label %157

157:                                              ; preds = %153, %155
  %158 = phi i64 [ %154, %153 ], [ %148, %155 ]
  %159 = inttoptr i64 %158 to %"class.v8::internal::TextNode"*
  %160 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %4, i64 0, i32 8
  %161 = bitcast %"class.v8::internal::Zone"** %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %159, i64 0, i32 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %159, i64 0, i32 0, i32 0, i32 1
  %165 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %159, i64 0, i32 0, i32 0, i32 8
  %166 = bitcast %"class.v8::internal::RegExpNode"** %164 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %166, i8 0, i64 24, i1 false) #18
  %167 = bitcast %"class.v8::internal::Zone"** %165 to i64*
  store i64 %162, i64* %167, align 8
  %168 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %159, i64 0, i32 0, i32 0, i32 7, i64 0
  %169 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %168 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %169, i8 0, i64 16, i1 false) #18
  %170 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %159, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %4, %"class.v8::internal::RegExpNode"** %170, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal8TextNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %163, align 8
  %171 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %159, i64 0, i32 1
  %172 = bitcast %"class.v8::internal::ZoneList"** %171 to i64*
  store i64 %28, i64* %172, align 8
  %173 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %159, i64 0, i32 2
  store i8 %12, i8* %173, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #18
  ret %"class.v8::internal::TextNode"* %159
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::ZoneList.18"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %6, %4
  %8 = icmp ult i64 %7, 16
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %2
  %10 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 16) #18
  br label %13

11:                                               ; preds = %2
  %12 = add i64 %4, 16
  store i64 %12, i64* %3, align 8
  br label %13

13:                                               ; preds = %9, %11
  %14 = phi i64 [ %10, %9 ], [ %4, %11 ]
  %15 = inttoptr i64 %14 to %"class.v8::internal::ZoneList.18"*
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %15, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %15, i64 0, i32 1
  store i32 1, i32* %17, align 8
  %18 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %15, i64 0, i32 2
  store i32 0, i32* %18, align 4
  %19 = load i64, i64* %3, align 8
  %20 = load i64, i64* %5, align 8
  %21 = sub i64 %20, %19
  %22 = icmp ult i64 %21, 8
  br i1 %22, label %23, label %25, !prof !2

23:                                               ; preds = %13
  %24 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 8) #18
  br label %27

25:                                               ; preds = %13
  %26 = add i64 %19, 8
  store i64 %26, i64* %3, align 8
  br label %27

27:                                               ; preds = %23, %25
  %28 = phi i64 [ %24, %23 ], [ %19, %25 ]
  %29 = inttoptr i64 %28 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %29, %"class.v8::internal::CharacterRange"** %16, align 8
  %30 = load i32, i32* %18, align 4
  %31 = load i32, i32* %17, align 8
  %32 = icmp slt i32 %30, %31
  br i1 %32, label %65, label %33

33:                                               ; preds = %27
  %34 = shl nsw i32 %31, 1
  %35 = or i32 %34, 1
  %36 = sext i32 %35 to i64
  %37 = shl nsw i64 %36, 3
  %38 = load i64, i64* %3, align 8
  %39 = load i64, i64* %5, align 8
  %40 = sub i64 %39, %38
  %41 = icmp ugt i64 %37, %40
  br i1 %41, label %42, label %44, !prof !2

42:                                               ; preds = %33
  %43 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 %37) #18
  br label %46

44:                                               ; preds = %33
  %45 = add i64 %38, %37
  store i64 %45, i64* %3, align 8
  br label %46

46:                                               ; preds = %44, %42
  %47 = phi i64 [ %43, %42 ], [ %38, %44 ]
  %48 = inttoptr i64 %47 to %"class.v8::internal::CharacterRange"*
  %49 = load i32, i32* %18, align 4
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %63

51:                                               ; preds = %46
  %52 = inttoptr i64 %47 to i8*
  %53 = inttoptr i64 %14 to i8**
  %54 = load i8*, i8** %53, align 8
  %55 = sext i32 %49 to i64
  %56 = shl nsw i64 %55, 3
  switch i64 %56, label %62 [
    i64 16, label %61
    i64 8, label %57
  ]

57:                                               ; preds = %51
  %58 = bitcast i8* %54 to i64*
  %59 = inttoptr i64 %47 to i64*
  %60 = load i64, i64* %58, align 1
  store i64 %60, i64* %59, align 1
  br label %63

61:                                               ; preds = %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %54, i64 16, i1 false) #18
  br label %63

62:                                               ; preds = %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %54, i64 %56, i1 false) #18
  br label %63

63:                                               ; preds = %62, %61, %57, %46
  store %"class.v8::internal::CharacterRange"* %48, %"class.v8::internal::CharacterRange"** %16, align 8
  store i32 %35, i32* %17, align 8
  %64 = load i32, i32* %18, align 4
  br label %65

65:                                               ; preds = %27, %63
  %66 = phi i32 [ %64, %63 ], [ %30, %27 ]
  %67 = phi %"class.v8::internal::CharacterRange"* [ %48, %63 ], [ %29, %27 ]
  %68 = add nsw i32 %66, 1
  store i32 %68, i32* %18, align 4
  %69 = sext i32 %66 to i64
  %70 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %67, i64 %69
  %71 = bitcast %"class.v8::internal::CharacterRange"* %70 to i64*
  store i64 %1, i64* %71, align 4
  ret %"class.v8::internal::ZoneList.18"* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8TextNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::TextNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"* readonly) unnamed_addr #2 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %"class.v8::internal::Trace", align 8
  %7 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0
  %8 = tail call i32 @_ZN2v88internal10RegExpNode13LimitVersionsEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::RegExpNode"* %7, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %225, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %14 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %14, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %16, -1
  %18 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %14, i64 0, i32 0
  %19 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %18, align 8
  %20 = sext i32 %17 to i64
  %21 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %19, i64 %20, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %19, i64 %20, i32 1
  %24 = load i32, i32* %23, align 4
  switch i32 %24, label %32 [
    i32 0, label %25
    i32 1, label %33
  ]

25:                                               ; preds = %10
  %26 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %19, i64 %20, i32 2
  %27 = bitcast %"class.v8::internal::RegExpTree"** %26 to %"class.v8::internal::RegExpAtom"**
  %28 = load %"class.v8::internal::RegExpAtom"*, %"class.v8::internal::RegExpAtom"** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %28, i64 0, i32 1, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = trunc i64 %30 to i32
  br label %33

32:                                               ; preds = %10
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

33:                                               ; preds = %10, %25
  %34 = phi i32 [ %31, %25 ], [ %24, %10 ]
  %35 = add i32 %22, %12
  %36 = add i32 %35, %34
  %37 = icmp sgt i32 %36, 32767
  br i1 %37, label %38, label %40

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 8
  store i8 1, i8* %39, align 1
  br label %225

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 7
  %42 = load i8, i8* %41, align 8, !range !3
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %40
  %45 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #18
  store i32 0, i32* %4, align 4
  call void @_ZN2v88internal8TextNode12TextEmitPassEPNS0_14RegExpCompilerENS1_16TextEmitPassTypeEbPNS0_5TraceEbPi(%"class.v8::internal::TextNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, i32 0, i1 zeroext false, %"class.v8::internal::Trace"* %2, i1 zeroext false, i32* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #18
  %46 = load i32, i32* %11, align 8
  br label %47

47:                                               ; preds = %40, %44
  %48 = phi i32 [ %12, %40 ], [ %46, %44 ]
  %49 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #18
  %50 = add nsw i32 %48, -1
  %51 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 6
  %52 = load i32, i32* %51, align 4
  %53 = add nsw i32 %52, %50
  store i32 %53, i32* %5, align 4
  %54 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 5
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, 1
  br i1 %56, label %57, label %58

57:                                               ; preds = %47
  call void @_ZN2v88internal8TextNode12TextEmitPassEPNS0_14RegExpCompilerENS1_16TextEmitPassTypeEbPNS0_5TraceEbPi(%"class.v8::internal::TextNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, i32 1, i1 zeroext true, %"class.v8::internal::Trace"* %2, i1 zeroext false, i32* nonnull %5)
  call void @_ZN2v88internal8TextNode12TextEmitPassEPNS0_14RegExpCompilerENS1_16TextEmitPassTypeEbPNS0_5TraceEbPi(%"class.v8::internal::TextNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, i32 2, i1 zeroext true, %"class.v8::internal::Trace"* %2, i1 zeroext false, i32* nonnull %5)
  call void @_ZN2v88internal8TextNode12TextEmitPassEPNS0_14RegExpCompilerENS1_16TextEmitPassTypeEbPNS0_5TraceEbPi(%"class.v8::internal::TextNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, i32 3, i1 zeroext true, %"class.v8::internal::Trace"* %2, i1 zeroext false, i32* nonnull %5)
  call void @_ZN2v88internal8TextNode12TextEmitPassEPNS0_14RegExpCompilerENS1_16TextEmitPassTypeEbPNS0_5TraceEbPi(%"class.v8::internal::TextNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, i32 4, i1 zeroext true, %"class.v8::internal::Trace"* %2, i1 zeroext false, i32* nonnull %5)
  br label %58

58:                                               ; preds = %57, %47
  %59 = phi i1 [ false, %47 ], [ true, %57 ]
  call void @_ZN2v88internal8TextNode12TextEmitPassEPNS0_14RegExpCompilerENS1_16TextEmitPassTypeEbPNS0_5TraceEbPi(%"class.v8::internal::TextNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, i32 1, i1 zeroext false, %"class.v8::internal::Trace"* %2, i1 zeroext %59, i32* nonnull %5)
  call void @_ZN2v88internal8TextNode12TextEmitPassEPNS0_14RegExpCompilerENS1_16TextEmitPassTypeEbPNS0_5TraceEbPi(%"class.v8::internal::TextNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, i32 2, i1 zeroext false, %"class.v8::internal::Trace"* %2, i1 zeroext %59, i32* nonnull %5)
  call void @_ZN2v88internal8TextNode12TextEmitPassEPNS0_14RegExpCompilerENS1_16TextEmitPassTypeEbPNS0_5TraceEbPi(%"class.v8::internal::TextNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, i32 3, i1 zeroext false, %"class.v8::internal::Trace"* %2, i1 zeroext %59, i32* nonnull %5)
  call void @_ZN2v88internal8TextNode12TextEmitPassEPNS0_14RegExpCompilerENS1_16TextEmitPassTypeEbPNS0_5TraceEbPi(%"class.v8::internal::TextNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, i32 4, i1 zeroext false, %"class.v8::internal::Trace"* %2, i1 zeroext %59, i32* nonnull %5)
  %60 = bitcast %"class.v8::internal::Trace"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %60) #18
  %61 = bitcast %"class.v8::internal::Trace"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %60, i8* align 8 %61, i64 120, i1 false)
  %62 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 2
  %63 = load i8, i8* %62, align 8, !range !3
  %64 = icmp eq i8 %63, 0
  %65 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %13, align 8
  %66 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %65, i64 0, i32 2
  %67 = load i32, i32* %66, align 4
  %68 = add nsw i32 %67, -1
  %69 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %65, i64 0, i32 0
  %70 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %69, align 8
  %71 = sext i32 %68 to i64
  %72 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %70, i64 %71, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %70, i64 %71, i32 1
  %75 = load i32, i32* %74, align 4
  switch i32 %75, label %83 [
    i32 0, label %76
    i32 1, label %84
  ]

76:                                               ; preds = %58
  %77 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %70, i64 %71, i32 2
  %78 = bitcast %"class.v8::internal::RegExpTree"** %77 to %"class.v8::internal::RegExpAtom"**
  %79 = load %"class.v8::internal::RegExpAtom"*, %"class.v8::internal::RegExpAtom"** %78, align 8
  %80 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %79, i64 0, i32 1, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = trunc i64 %81 to i32
  br label %84

83:                                               ; preds = %58
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

84:                                               ; preds = %58, %76
  %85 = phi i32 [ %82, %76 ], [ %75, %58 ]
  %86 = add nsw i32 %85, %73
  %87 = sub nsw i32 0, %86
  %88 = select i1 %64, i32 %86, i32 %87
  %89 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 5
  store i32 0, i32* %89, align 8
  %90 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 0
  %91 = load i32, i32* %90, align 8
  %92 = icmp sle i32 %91, %88
  %93 = icmp slt i32 %88, 0
  %94 = or i1 %93, %92
  br i1 %94, label %105, label %95

95:                                               ; preds = %84
  %96 = sub i32 %91, %88
  %97 = icmp sgt i32 %96, 0
  br i1 %97, label %98, label %152

98:                                               ; preds = %95
  %99 = sext i32 %88 to i64
  %100 = zext i32 %96 to i64
  %101 = and i64 %100, 1
  %102 = icmp eq i32 %96, 1
  br i1 %102, label %143, label %103

103:                                              ; preds = %98
  %104 = sub nsw i64 %100, %101
  br label %156

105:                                              ; preds = %84
  %106 = icmp sgt i32 %91, 0
  br i1 %106, label %107, label %194

107:                                              ; preds = %105
  %108 = sext i32 %91 to i64
  %109 = add nsw i64 %108, -1
  %110 = and i64 %108, 7
  %111 = icmp ult i64 %109, 7
  br i1 %111, label %183, label %112

112:                                              ; preds = %107
  %113 = sub nsw i64 %108, %110
  br label %114

114:                                              ; preds = %114, %112
  %115 = phi i64 [ 0, %112 ], [ %139, %114 ]
  %116 = phi i64 [ %113, %112 ], [ %141, %114 ]
  %117 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %115, i32 0
  %118 = or i64 %115, 1
  %119 = bitcast i32* %117 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %119, i8 0, i64 9, i1 false) #18
  %120 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %118, i32 0
  %121 = or i64 %115, 2
  %122 = bitcast i32* %120 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %122, i8 0, i64 9, i1 false) #18
  %123 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %121, i32 0
  %124 = or i64 %115, 3
  %125 = bitcast i32* %123 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %125, i8 0, i64 9, i1 false) #18
  %126 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %124, i32 0
  %127 = or i64 %115, 4
  %128 = bitcast i32* %126 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %128, i8 0, i64 9, i1 false) #18
  %129 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %127, i32 0
  %130 = or i64 %115, 5
  %131 = bitcast i32* %129 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %131, i8 0, i64 9, i1 false) #18
  %132 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %130, i32 0
  %133 = or i64 %115, 6
  %134 = bitcast i32* %132 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %134, i8 0, i64 9, i1 false) #18
  %135 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %133, i32 0
  %136 = or i64 %115, 7
  %137 = bitcast i32* %135 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %137, i8 0, i64 9, i1 false) #18
  %138 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %136, i32 0
  %139 = add nuw nsw i64 %115, 8
  %140 = bitcast i32* %138 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %140, i8 0, i64 9, i1 false) #18
  %141 = add i64 %116, -8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %183, label %114

143:                                              ; preds = %156, %98
  %144 = phi i64 [ 0, %98 ], [ %170, %156 ]
  %145 = icmp eq i64 %101, 0
  br i1 %145, label %152, label %146

146:                                              ; preds = %143
  %147 = add nsw i64 %144, %99
  %148 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %147
  %149 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %144
  %150 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %149 to i8*
  %151 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %148 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %150, i8* align 4 %151, i64 9, i1 false) #18
  br label %152

152:                                              ; preds = %146, %143, %95
  %153 = icmp slt i32 %96, %91
  br i1 %153, label %154, label %194

154:                                              ; preds = %152
  %155 = sext i32 %96 to i64
  br label %175

156:                                              ; preds = %156, %103
  %157 = phi i64 [ 0, %103 ], [ %170, %156 ]
  %158 = phi i64 [ %104, %103 ], [ %171, %156 ]
  %159 = add nsw i64 %157, %99
  %160 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %159
  %161 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %157
  %162 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %161 to i8*
  %163 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %160 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %162, i8* align 4 %163, i64 9, i1 false) #18
  %164 = or i64 %157, 1
  %165 = add nsw i64 %164, %99
  %166 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %165
  %167 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %164
  %168 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %167 to i8*
  %169 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %166 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %168, i8* align 4 %169, i64 9, i1 false) #18
  %170 = add nuw nsw i64 %157, 2
  %171 = add i64 %158, -2
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %143, label %156

173:                                              ; preds = %175
  %174 = sub nsw i32 %180, %88
  br label %194

175:                                              ; preds = %175, %154
  %176 = phi i64 [ %155, %154 ], [ %178, %175 ]
  %177 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %176, i32 0
  %178 = add nsw i64 %176, 1
  %179 = bitcast i32* %177 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %179, i8 0, i64 9, i1 false) #18
  %180 = load i32, i32* %90, align 8
  %181 = sext i32 %180 to i64
  %182 = icmp slt i64 %178, %181
  br i1 %182, label %175, label %173

183:                                              ; preds = %114, %107
  %184 = phi i64 [ 0, %107 ], [ %139, %114 ]
  %185 = icmp eq i64 %110, 0
  br i1 %185, label %194, label %186

186:                                              ; preds = %183, %186
  %187 = phi i64 [ %190, %186 ], [ %184, %183 ]
  %188 = phi i64 [ %192, %186 ], [ %110, %183 ]
  %189 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 7, i32 1, i64 %187, i32 0
  %190 = add nuw nsw i64 %187, 1
  %191 = bitcast i32* %189 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %191, i8 0, i64 9, i1 false) #18
  %192 = add i64 %188, -1
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %186, !llvm.loop !28

194:                                              ; preds = %183, %186, %173, %152, %105
  %195 = phi i32 [ 0, %105 ], [ %174, %173 ], [ %96, %152 ], [ 0, %186 ], [ 0, %183 ]
  store i32 %195, i32* %90, align 8
  %196 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 0
  %197 = load i32, i32* %196, align 8
  %198 = add nsw i32 %197, %88
  store i32 %198, i32* %196, align 8
  %199 = icmp sgt i32 %198, 32767
  br i1 %199, label %200, label %203

200:                                              ; preds = %194
  %201 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 8
  store i8 1, i8* %201, align 1
  store i32 0, i32* %196, align 8
  %202 = load i8, i8* %62, align 8, !range !3
  br label %203

203:                                              ; preds = %194, %200
  %204 = phi i8 [ %63, %194 ], [ %202, %200 ]
  %205 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 6
  %206 = load i32, i32* %205, align 4
  %207 = sub nsw i32 %206, %88
  %208 = icmp sgt i32 %207, 0
  %209 = select i1 %208, i32 %207, i32 0
  store i32 %209, i32* %205, align 4
  %210 = shl nuw i8 %204, 7
  %211 = ashr exact i8 %210, 7
  %212 = sext i8 %211 to i32
  %213 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %6, i64 0, i32 9
  store i32 %212, i32* %213, align 4
  %214 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 5
  %215 = load i32, i32* %214, align 8
  %216 = add nsw i32 %215, 1
  store i32 %216, i32* %214, align 8
  %217 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 1
  %218 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %217, align 8
  %219 = bitcast %"class.v8::internal::RegExpNode"* %218 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %220 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %219, align 8
  %221 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %220, i64 3
  %222 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %221, align 8
  call void %222(%"class.v8::internal::RegExpNode"* %218, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %6) #18
  %223 = load i32, i32* %214, align 8
  %224 = add nsw i32 %223, -1
  store i32 %224, i32* %214, align 8
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %60) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #18
  br label %225

225:                                              ; preds = %3, %203, %38
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal5Trace29AdvanceCurrentPositionInTraceEiPNS0_14RegExpCompilerE(%"class.v8::internal::Trace"* nocapture, i32, %"class.v8::internal::RegExpCompiler"* nocapture) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 5
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp sle i32 %6, %1
  %8 = icmp slt i32 %1, 0
  %9 = or i1 %8, %7
  br i1 %9, label %20, label %10

10:                                               ; preds = %3
  %11 = sub i32 %6, %1
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %67

13:                                               ; preds = %10
  %14 = sext i32 %1 to i64
  %15 = zext i32 %11 to i64
  %16 = and i64 %15, 1
  %17 = icmp eq i32 %11, 1
  br i1 %17, label %58, label %18

18:                                               ; preds = %13
  %19 = sub nsw i64 %15, %16
  br label %71

20:                                               ; preds = %3
  %21 = icmp sgt i32 %6, 0
  br i1 %21, label %22, label %109

22:                                               ; preds = %20
  %23 = sext i32 %6 to i64
  %24 = add nsw i64 %23, -1
  %25 = and i64 %23, 7
  %26 = icmp ult i64 %24, 7
  br i1 %26, label %98, label %27

27:                                               ; preds = %22
  %28 = sub nsw i64 %23, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %54, %29 ]
  %31 = phi i64 [ %28, %27 ], [ %56, %29 ]
  %32 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %30, i32 0
  %33 = or i64 %30, 1
  %34 = bitcast i32* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %34, i8 0, i64 9, i1 false) #18
  %35 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %33, i32 0
  %36 = or i64 %30, 2
  %37 = bitcast i32* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 9, i1 false) #18
  %38 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %36, i32 0
  %39 = or i64 %30, 3
  %40 = bitcast i32* %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %40, i8 0, i64 9, i1 false) #18
  %41 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %39, i32 0
  %42 = or i64 %30, 4
  %43 = bitcast i32* %41 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %43, i8 0, i64 9, i1 false) #18
  %44 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %42, i32 0
  %45 = or i64 %30, 5
  %46 = bitcast i32* %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %46, i8 0, i64 9, i1 false) #18
  %47 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %45, i32 0
  %48 = or i64 %30, 6
  %49 = bitcast i32* %47 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %49, i8 0, i64 9, i1 false) #18
  %50 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %48, i32 0
  %51 = or i64 %30, 7
  %52 = bitcast i32* %50 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %52, i8 0, i64 9, i1 false) #18
  %53 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %51, i32 0
  %54 = add nuw nsw i64 %30, 8
  %55 = bitcast i32* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %55, i8 0, i64 9, i1 false) #18
  %56 = add i64 %31, -8
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %98, label %29

58:                                               ; preds = %71, %13
  %59 = phi i64 [ 0, %13 ], [ %85, %71 ]
  %60 = icmp eq i64 %16, 0
  br i1 %60, label %67, label %61

61:                                               ; preds = %58
  %62 = add nsw i64 %59, %14
  %63 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %62
  %64 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %59
  %65 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %64 to i8*
  %66 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* align 4 %66, i64 9, i1 false) #18
  br label %67

67:                                               ; preds = %61, %58, %10
  %68 = icmp slt i32 %11, %6
  br i1 %68, label %69, label %109

69:                                               ; preds = %67
  %70 = sext i32 %11 to i64
  br label %90

71:                                               ; preds = %71, %18
  %72 = phi i64 [ 0, %18 ], [ %85, %71 ]
  %73 = phi i64 [ %19, %18 ], [ %86, %71 ]
  %74 = add nsw i64 %72, %14
  %75 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %74
  %76 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %72
  %77 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %76 to i8*
  %78 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 4 %78, i64 9, i1 false) #18
  %79 = or i64 %72, 1
  %80 = add nsw i64 %79, %14
  %81 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %80
  %82 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %79
  %83 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %82 to i8*
  %84 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %84, i64 9, i1 false) #18
  %85 = add nuw nsw i64 %72, 2
  %86 = add i64 %73, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %58, label %71

88:                                               ; preds = %90
  %89 = sub nsw i32 %95, %1
  br label %109

90:                                               ; preds = %90, %69
  %91 = phi i64 [ %70, %69 ], [ %93, %90 ]
  %92 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %91, i32 0
  %93 = add nsw i64 %91, 1
  %94 = bitcast i32* %92 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %94, i8 0, i64 9, i1 false) #18
  %95 = load i32, i32* %5, align 4
  %96 = sext i32 %95 to i64
  %97 = icmp slt i64 %93, %96
  br i1 %97, label %90, label %88

98:                                               ; preds = %29, %22
  %99 = phi i64 [ 0, %22 ], [ %54, %29 ]
  %100 = icmp eq i64 %25, 0
  br i1 %100, label %109, label %101

101:                                              ; preds = %98, %101
  %102 = phi i64 [ %105, %101 ], [ %99, %98 ]
  %103 = phi i64 [ %107, %101 ], [ %25, %98 ]
  %104 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 7, i32 1, i64 %102, i32 0
  %105 = add nuw nsw i64 %102, 1
  %106 = bitcast i32* %104 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %106, i8 0, i64 9, i1 false) #18
  %107 = add i64 %103, -1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %101, !llvm.loop !29

109:                                              ; preds = %98, %101, %20, %67, %88
  %110 = phi i32 [ 0, %20 ], [ %89, %88 ], [ %11, %67 ], [ 0, %101 ], [ 0, %98 ]
  store i32 %110, i32* %5, align 4
  %111 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = add nsw i32 %112, %1
  store i32 %113, i32* %111, align 8
  %114 = icmp sgt i32 %113, 32767
  br i1 %114, label %115, label %117

115:                                              ; preds = %109
  %116 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %2, i64 0, i32 8
  store i8 1, i8* %116, align 1
  store i32 0, i32* %111, align 8
  br label %117

117:                                              ; preds = %115, %109
  %118 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %0, i64 0, i32 6
  %119 = load i32, i32* %118, align 4
  %120 = sub nsw i32 %119, %1
  %121 = icmp sgt i32 %120, 0
  %122 = select i1 %121, i32 %120, i32 0
  store i32 %122, i32* %118, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8TextNode19MakeCaseIndependentEPNS0_7IsolateEb(%"class.v8::internal::TextNode"* nocapture readonly, %"class.v8::internal::Isolate"*, i1 zeroext) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %5, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 8
  %11 = zext i32 %7 to i64
  br label %13

12:                                               ; preds = %40, %3
  ret void

13:                                               ; preds = %43, %9
  %14 = phi %"class.v8::internal::ZoneList"* [ %5, %9 ], [ %44, %43 ]
  %15 = phi i64 [ 0, %9 ], [ %41, %43 ]
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %14, i64 0, i32 0
  %17 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %17, i64 %15, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %17, i64 %15, i32 2
  %21 = bitcast %"class.v8::internal::RegExpTree"** %20 to %"class.v8::internal::RegExpCharacterClass"**
  %22 = load %"class.v8::internal::RegExpCharacterClass"*, %"class.v8::internal::RegExpCharacterClass"** %21, align 8
  %23 = icmp eq i32 %19, 1
  br i1 %23, label %24, label %40

24:                                               ; preds = %13
  %25 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %22, i64 0, i32 2, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = and i32 %26, 18
  %28 = icmp eq i32 %27, 18
  %29 = and i32 %26, 2
  %30 = icmp eq i32 %29, 0
  %31 = or i1 %30, %28
  br i1 %31, label %40, label %32

32:                                               ; preds = %24
  %33 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %10, align 8
  %34 = tail call zeroext i1 @_ZN2v88internal20RegExpCharacterClass11is_standardEPNS0_4ZoneE(%"class.v8::internal::RegExpCharacterClass"* %22, %"class.v8::internal::Zone"* %33) #18
  br i1 %34, label %40, label %35

35:                                               ; preds = %32
  %36 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %10, align 8
  %37 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %22, i64 0, i32 1
  %38 = tail call %"class.v8::internal::ZoneList.18"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"* %37, %"class.v8::internal::Zone"* %36) #18
  %39 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %10, align 8
  tail call void @_ZN2v88internal14CharacterRange18AddCaseEquivalentsEPNS0_7IsolateEPNS0_4ZoneEPNS0_8ZoneListIS1_EEb(%"class.v8::internal::Isolate"* %1, %"class.v8::internal::Zone"* %39, %"class.v8::internal::ZoneList.18"* %38, i1 zeroext %2) #18
  br label %40

40:                                               ; preds = %32, %13, %35, %24
  %41 = add nuw nsw i64 %15, 1
  %42 = icmp eq i64 %41, %11
  br i1 %42, label %12, label %43

43:                                               ; preds = %40
  %44 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %4, align 8
  br label %13
}

declare zeroext i1 @_ZN2v88internal20RegExpCharacterClass11is_standardEPNS0_4ZoneE(%"class.v8::internal::RegExpCharacterClass"*, %"class.v8::internal::Zone"*) local_unnamed_addr #5

declare void @_ZN2v88internal14CharacterRange18AddCaseEquivalentsEPNS0_7IsolateEPNS0_4ZoneEPNS0_8ZoneListIS1_EEb(%"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*, %"class.v8::internal::ZoneList.18"*, i1 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal8TextNode20GreedyLoopTextLengthEv(%"class.v8::internal::TextNode"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %3 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %3, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, -1
  %7 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %3, i64 0, i32 0
  %8 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %7, align 8
  %9 = sext i32 %6 to i64
  %10 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %8, i64 %9, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %8, i64 %9, i32 1
  %13 = load i32, i32* %12, align 4
  switch i32 %13, label %21 [
    i32 0, label %14
    i32 1, label %22
  ]

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %8, i64 %9, i32 2
  %16 = bitcast %"class.v8::internal::RegExpTree"** %15 to %"class.v8::internal::RegExpAtom"**
  %17 = load %"class.v8::internal::RegExpAtom"*, %"class.v8::internal::RegExpAtom"** %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %17, i64 0, i32 1, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = trunc i64 %19 to i32
  br label %22

21:                                               ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

22:                                               ; preds = %1, %14
  %23 = phi i32 [ %20, %14 ], [ %13, %1 ]
  %24 = add nsw i32 %23, %11
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal8TextNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE(%"class.v8::internal::TextNode"* nocapture readonly, %"class.v8::internal::RegExpCompiler"* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 2
  %4 = load i8, i8* %3, align 8, !range !3
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %56

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %56

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %8, i64 0, i32 0
  %14 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %14, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %14, i64 0, i32 2
  %18 = bitcast %"class.v8::internal::RegExpTree"** %17 to %"class.v8::internal::RegExpCharacterClass"**
  %19 = load %"class.v8::internal::RegExpCharacterClass"*, %"class.v8::internal::RegExpCharacterClass"** %18, align 8
  %20 = icmp eq i32 %16, 1
  br i1 %20, label %21, label %56

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 8
  %23 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %19, i64 0, i32 1
  %25 = tail call %"class.v8::internal::ZoneList.18"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"* %24, %"class.v8::internal::Zone"* %23) #18
  tail call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.18"* %25) #18
  %26 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %19, i64 0, i32 3, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %25, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  br i1 %29, label %37, label %32

32:                                               ; preds = %21
  %33 = icmp eq i32 %31, 0
  br i1 %33, label %34, label %56

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 1
  %36 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %35, align 8
  br label %56

37:                                               ; preds = %21
  %38 = icmp eq i32 %31, 1
  br i1 %38, label %39, label %56

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %25, i64 0, i32 0
  %41 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %41, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %56

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 7
  %47 = load i8, i8* %46, align 8, !range !3
  %48 = icmp eq i8 %47, 0
  %49 = select i1 %48, i32 65535, i32 255
  %50 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %41, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = icmp ult i32 %51, %49
  br i1 %52, label %56, label %53

53:                                               ; preds = %45
  %54 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 1
  %55 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %54, align 8
  br label %56

56:                                               ; preds = %45, %2, %39, %12, %53, %37, %34, %32, %6
  %57 = phi %"class.v8::internal::RegExpNode"* [ null, %2 ], [ null, %6 ], [ null, %12 ], [ %36, %34 ], [ null, %32 ], [ null, %37 ], [ %55, %53 ], [ null, %45 ], [ null, %39 ]
  ret %"class.v8::internal::RegExpNode"* %57
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal10ChoiceNode34GreedyLoopTextLengthForAlternativeEPNS0_18GuardedAlternativeE(%"class.v8::internal::ChoiceNode"*, %"class.v8::internal::GuardedAlternative"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %1, i64 0, i32 0
  %4 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0
  %6 = icmp eq %"class.v8::internal::RegExpNode"* %4, %5
  br i1 %6, label %26, label %7

7:                                                ; preds = %2, %20
  %8 = phi %"class.v8::internal::RegExpNode"* [ %24, %20 ], [ %4, %2 ]
  %9 = phi i32 [ %21, %20 ], [ 0, %2 ]
  %10 = phi i32 [ %11, %20 ], [ 0, %2 ]
  %11 = add nuw nsw i32 %10, 1
  %12 = icmp eq i32 %10, 101
  br i1 %12, label %38, label %13

13:                                               ; preds = %7
  %14 = bitcast %"class.v8::internal::RegExpNode"* %8 to i32 (%"class.v8::internal::RegExpNode"*)***
  %15 = load i32 (%"class.v8::internal::RegExpNode"*)**, i32 (%"class.v8::internal::RegExpNode"*)*** %14, align 8
  %16 = getelementptr inbounds i32 (%"class.v8::internal::RegExpNode"*)*, i32 (%"class.v8::internal::RegExpNode"*)** %15, i64 7
  %17 = load i32 (%"class.v8::internal::RegExpNode"*)*, i32 (%"class.v8::internal::RegExpNode"*)** %16, align 8
  %18 = tail call i32 %17(%"class.v8::internal::RegExpNode"* %8) #18
  %19 = icmp eq i32 %18, -2147483648
  br i1 %19, label %38, label %20

20:                                               ; preds = %13
  %21 = add nsw i32 %18, %9
  %22 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %8, i64 1
  %23 = bitcast %"class.v8::internal::RegExpNode"* %22 to %"class.v8::internal::RegExpNode"**
  %24 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %23, align 8
  %25 = icmp eq %"class.v8::internal::RegExpNode"* %24, %5
  br i1 %25, label %26, label %7

26:                                               ; preds = %20, %2
  %27 = phi i32 [ 0, %2 ], [ %21, %20 ]
  %28 = bitcast %"class.v8::internal::ChoiceNode"* %0 to i1 (%"class.v8::internal::ChoiceNode"*)***
  %29 = load i1 (%"class.v8::internal::ChoiceNode"*)**, i1 (%"class.v8::internal::ChoiceNode"*)*** %28, align 8
  %30 = getelementptr inbounds i1 (%"class.v8::internal::ChoiceNode"*)*, i1 (%"class.v8::internal::ChoiceNode"*)** %29, i64 12
  %31 = load i1 (%"class.v8::internal::ChoiceNode"*)*, i1 (%"class.v8::internal::ChoiceNode"*)** %30, align 8
  %32 = tail call zeroext i1 %31(%"class.v8::internal::ChoiceNode"* %0) #18
  %33 = sub nsw i32 0, %27
  %34 = select i1 %32, i32 %33, i32 %27
  %35 = add i32 %34, 32768
  %36 = icmp ugt i32 %35, 65535
  %37 = select i1 %36, i32 -2147483648, i32 %34
  ret i32 %37

38:                                               ; preds = %13, %7
  ret i32 -2147483648
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14LoopChoiceNode18AddLoopAlternativeENS0_18GuardedAlternativeE(%"class.v8::internal::LoopChoiceNode"* nocapture, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::ZoneList.1140"*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 1
  %5 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 0, i32 8
  %7 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %5, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %5, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %13, label %20

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %5, i64 0, i32 0
  %15 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %14, align 8
  %16 = add nsw i32 %9, 1
  store i32 %16, i32* %8, align 4
  %17 = sext i32 %9 to i64
  %18 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %15, i64 %17, i32 0
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %15, i64 %17, i32 1
  br label %55

20:                                               ; preds = %3
  %21 = shl nsw i32 %11, 1
  %22 = or i32 %21, 1
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 4
  %25 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7, i64 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7, i64 0, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %28, %26
  %30 = icmp ugt i64 %24, %29
  br i1 %30, label %31, label %33, !prof !2

31:                                               ; preds = %20
  %32 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %7, i64 %24) #18
  br label %35

33:                                               ; preds = %20
  %34 = add i64 %26, %24
  store i64 %34, i64* %25, align 8
  br label %35

35:                                               ; preds = %33, %31
  %36 = phi i64 [ %32, %31 ], [ %26, %33 ]
  %37 = inttoptr i64 %36 to %"class.v8::internal::GuardedAlternative"*
  %38 = load i32, i32* %8, align 4
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %48

40:                                               ; preds = %35
  %41 = inttoptr i64 %36 to i8*
  %42 = bitcast %"class.v8::internal::ZoneList.1148"* %5 to i8**
  %43 = load i8*, i8** %42, align 8
  %44 = icmp eq i32 %38, 1
  %45 = sext i32 %38 to i64
  %46 = shl nsw i64 %45, 4
  %47 = select i1 %44, i64 16, i64 %46
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %43, i64 %47, i1 false) #18
  br label %48

48:                                               ; preds = %40, %35
  %49 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %5, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %37, %"class.v8::internal::GuardedAlternative"** %49, align 8
  store i32 %22, i32* %10, align 8
  %50 = load i32, i32* %8, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %8, align 4
  %52 = sext i32 %50 to i64
  %53 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %37, i64 %52, i32 0
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %53, align 8
  %54 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %37, i64 %52, i32 1
  br label %55

55:                                               ; preds = %13, %48
  %56 = phi %"class.v8::internal::ZoneList.1140"** [ %19, %13 ], [ %54, %48 ]
  store %"class.v8::internal::ZoneList.1140"* %2, %"class.v8::internal::ZoneList.1140"** %56, align 8
  %57 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 1
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %57, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14LoopChoiceNode22AddContinueAlternativeENS0_18GuardedAlternativeE(%"class.v8::internal::LoopChoiceNode"* nocapture, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::ZoneList.1140"*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 1
  %5 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 0, i32 8
  %7 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %5, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %5, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %13, label %20

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %5, i64 0, i32 0
  %15 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %14, align 8
  %16 = add nsw i32 %9, 1
  store i32 %16, i32* %8, align 4
  %17 = sext i32 %9 to i64
  %18 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %15, i64 %17, i32 0
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %15, i64 %17, i32 1
  br label %55

20:                                               ; preds = %3
  %21 = shl nsw i32 %11, 1
  %22 = or i32 %21, 1
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 4
  %25 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7, i64 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7, i64 0, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %28, %26
  %30 = icmp ugt i64 %24, %29
  br i1 %30, label %31, label %33, !prof !2

31:                                               ; preds = %20
  %32 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %7, i64 %24) #18
  br label %35

33:                                               ; preds = %20
  %34 = add i64 %26, %24
  store i64 %34, i64* %25, align 8
  br label %35

35:                                               ; preds = %33, %31
  %36 = phi i64 [ %32, %31 ], [ %26, %33 ]
  %37 = inttoptr i64 %36 to %"class.v8::internal::GuardedAlternative"*
  %38 = load i32, i32* %8, align 4
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %48

40:                                               ; preds = %35
  %41 = inttoptr i64 %36 to i8*
  %42 = bitcast %"class.v8::internal::ZoneList.1148"* %5 to i8**
  %43 = load i8*, i8** %42, align 8
  %44 = icmp eq i32 %38, 1
  %45 = sext i32 %38 to i64
  %46 = shl nsw i64 %45, 4
  %47 = select i1 %44, i64 16, i64 %46
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %43, i64 %47, i1 false) #18
  br label %48

48:                                               ; preds = %40, %35
  %49 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %5, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %37, %"class.v8::internal::GuardedAlternative"** %49, align 8
  store i32 %22, i32* %10, align 8
  %50 = load i32, i32* %8, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %8, align 4
  %52 = sext i32 %50 to i64
  %53 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %37, i64 %52, i32 0
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %53, align 8
  %54 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %37, i64 %52, i32 1
  br label %55

55:                                               ; preds = %13, %48
  %56 = phi %"class.v8::internal::ZoneList.1140"** [ %19, %13 ], [ %54, %48 ]
  store %"class.v8::internal::ZoneList.1140"* %2, %"class.v8::internal::ZoneList.1140"** %56, align 8
  %57 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 2
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %57, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal14LoopChoiceNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::LoopChoiceNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %5 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 3
  %7 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 0
  %9 = icmp eq %"class.v8::internal::RegExpNode"* %7, %8
  br i1 %9, label %10, label %62

10:                                               ; preds = %3
  %11 = bitcast %"class.v8::internal::LoopChoiceNode"* %0 to %"class.v8::internal::ChoiceNode"*
  %12 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 0, i32 1
  %13 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %13, i64 0, i32 0
  %15 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %15, i64 0, i32 0
  %17 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %16, align 8
  %18 = icmp eq %"class.v8::internal::RegExpNode"* %17, %7
  br i1 %18, label %38, label %19

19:                                               ; preds = %10, %32
  %20 = phi %"class.v8::internal::RegExpNode"* [ %36, %32 ], [ %17, %10 ]
  %21 = phi i32 [ %33, %32 ], [ 0, %10 ]
  %22 = phi i32 [ %23, %32 ], [ 0, %10 ]
  %23 = add nuw nsw i32 %22, 1
  %24 = icmp eq i32 %22, 101
  br i1 %24, label %50, label %25

25:                                               ; preds = %19
  %26 = bitcast %"class.v8::internal::RegExpNode"* %20 to i32 (%"class.v8::internal::RegExpNode"*)***
  %27 = load i32 (%"class.v8::internal::RegExpNode"*)**, i32 (%"class.v8::internal::RegExpNode"*)*** %26, align 8
  %28 = getelementptr inbounds i32 (%"class.v8::internal::RegExpNode"*)*, i32 (%"class.v8::internal::RegExpNode"*)** %27, i64 7
  %29 = load i32 (%"class.v8::internal::RegExpNode"*)*, i32 (%"class.v8::internal::RegExpNode"*)** %28, align 8
  %30 = tail call i32 %29(%"class.v8::internal::RegExpNode"* %20) #18
  %31 = icmp eq i32 %30, -2147483648
  br i1 %31, label %50, label %32

32:                                               ; preds = %25
  %33 = add nsw i32 %30, %21
  %34 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %20, i64 1
  %35 = bitcast %"class.v8::internal::RegExpNode"* %34 to %"class.v8::internal::RegExpNode"**
  %36 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %35, align 8
  %37 = icmp eq %"class.v8::internal::RegExpNode"* %36, %7
  br i1 %37, label %38, label %19

38:                                               ; preds = %32, %10
  %39 = phi i32 [ 0, %10 ], [ %33, %32 ]
  %40 = bitcast %"class.v8::internal::LoopChoiceNode"* %0 to i1 (%"class.v8::internal::ChoiceNode"*)***
  %41 = load i1 (%"class.v8::internal::ChoiceNode"*)**, i1 (%"class.v8::internal::ChoiceNode"*)*** %40, align 8
  %42 = getelementptr inbounds i1 (%"class.v8::internal::ChoiceNode"*)*, i1 (%"class.v8::internal::ChoiceNode"*)** %41, i64 12
  %43 = load i1 (%"class.v8::internal::ChoiceNode"*)*, i1 (%"class.v8::internal::ChoiceNode"*)** %42, align 8
  %44 = tail call zeroext i1 %43(%"class.v8::internal::ChoiceNode"* %11) #18
  %45 = sub nsw i32 0, %39
  %46 = select i1 %44, i32 %45, i32 %39
  %47 = add i32 %46, 32768
  %48 = icmp ugt i32 %47, 65535
  %49 = select i1 %48, i32 -2147483648, i32 %46
  br label %50

50:                                               ; preds = %19, %25, %38
  %51 = phi i32 [ %49, %38 ], [ -2147483648, %25 ], [ -2147483648, %19 ]
  %52 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %5 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32)***
  %53 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %53, i64 5
  %55 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %54, align 8
  tail call void %55(%"class.v8::internal::RegExpMacroAssembler"* %5, i32 %51) #18
  %56 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 4
  %57 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %56, align 8
  %58 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %5 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %59 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %58, align 8
  %60 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %59, i64 29
  %61 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %60, align 8
  tail call void %61(%"class.v8::internal::RegExpMacroAssembler"* %5, %"class.v8::internal::Label"* %57) #18
  br label %93

62:                                               ; preds = %3
  %63 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %64 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %63, align 8
  %65 = icmp eq %"class.v8::internal::Label"* %64, null
  br i1 %65, label %66, label %90

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 1
  %68 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %67, align 8
  %69 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %68, null
  br i1 %69, label %70, label %90

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %90

74:                                               ; preds = %70
  %75 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 5
  %76 = load i32, i32* %75, align 8
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %90

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 6
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %90

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 7, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %90

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 9
  %88 = load i32, i32* %87, align 4
  %89 = icmp eq i32 %88, -1
  br i1 %89, label %91, label %90

90:                                               ; preds = %62, %66, %70, %74, %78, %82, %86
  tail call void @_ZN2v88internal5Trace5FlushEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::Trace"* %2, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %8)
  br label %93

91:                                               ; preds = %86
  %92 = bitcast %"class.v8::internal::LoopChoiceNode"* %0 to %"class.v8::internal::ChoiceNode"*
  tail call void @_ZN2v88internal10ChoiceNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::ChoiceNode"* %92, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2)
  br label %93

93:                                               ; preds = %91, %90, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ChoiceNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::ChoiceNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*) unnamed_addr #2 align 2 {
  %4 = alloca %"class.v8::internal::Label", align 4
  %5 = alloca %"class.v8::internal::Trace", align 8
  %6 = alloca %"class.v8::internal::Label", align 4
  %7 = alloca %"class.v8::internal::Label", align 4
  %8 = alloca %"struct.v8::internal::PreloadState", align 4
  %9 = alloca %"class.v8::internal::GreedyLoopState", align 8
  %10 = alloca %"class.v8::internal::AlternativeGenerationList", align 8
  %11 = alloca %"class.v8::internal::Label", align 4
  %12 = alloca %"class.v8::internal::Trace", align 8
  %13 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 1
  %14 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %14, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %31

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %14, i64 0, i32 0
  %20 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %20, i64 0, i32 1
  %22 = load %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::ZoneList.1140"** %21, align 8
  %23 = icmp eq %"class.v8::internal::ZoneList.1140"* %22, null
  br i1 %23, label %24, label %31

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %20, i64 0, i32 0
  %26 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %25, align 8
  %27 = bitcast %"class.v8::internal::RegExpNode"* %26 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %28 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %27, align 8
  %29 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %28, i64 3
  %30 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %29, align 8
  tail call void %30(%"class.v8::internal::RegExpNode"* %26, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2) #18
  br label %272

31:                                               ; preds = %18, %3
  %32 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0
  %33 = tail call i32 @_ZN2v88internal10RegExpNode13LimitVersionsEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::RegExpNode"* %32, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2)
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %272, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 8
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %44

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 1
  %41 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %40, align 8
  %42 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %41, null
  br i1 %42, label %44, label %43

43:                                               ; preds = %39
  tail call void @_ZN2v88internal5Trace5FlushEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::Trace"* %2, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %32)
  br label %272

44:                                               ; preds = %39, %35
  %45 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 5
  %46 = load i32, i32* %45, align 8
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %45, align 8
  %48 = getelementptr inbounds %"struct.v8::internal::PreloadState", %"struct.v8::internal::PreloadState"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %48) #18
  %49 = getelementptr inbounds %"struct.v8::internal::PreloadState", %"struct.v8::internal::PreloadState"* %8, i64 0, i32 3
  store i32 -1, i32* %49, align 4
  %50 = bitcast %"class.v8::internal::GreedyLoopState"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %50) #18
  %51 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 2
  %52 = load i8, i8* %51, align 8, !range !3
  %53 = icmp eq i8 %52, 0
  %54 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 0
  %55 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 0, i32 0
  store i32 0, i32* %55, align 8
  %56 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 0, i32 1
  store i32 0, i32* %56, align 4
  %57 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 1, i32 0
  store i32 0, i32* %57, align 8
  %58 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 1, i32 1
  %59 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 1, i32 7, i32 1, i64 1
  %60 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %60, i8 0, i64 9, i1 false) #18
  %61 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 1, i32 7, i32 1, i64 2
  %62 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %61 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %62, i8 0, i64 9, i1 false) #18
  %63 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 1, i32 7, i32 1, i64 3
  %64 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %63 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 9, i1 false) #18
  %65 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 1, i32 7, i32 2
  %66 = bitcast i32* %65 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %66, i8 0, i64 9, i1 false) #18
  %67 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 1, i32 8
  %68 = bitcast %"class.v8::internal::Trace::DeferredAction"** %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 53, i1 false) #18
  store i32 100, i32* %67, align 8
  %69 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 1, i32 9
  store i32 -1, i32* %69, align 4
  %70 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 1, i32 2
  store %"class.v8::internal::Label"* %54, %"class.v8::internal::Label"** %70, align 8
  br i1 %53, label %72, label %71

71:                                               ; preds = %44
  store i32 0, i32* %69, align 4
  br label %72

72:                                               ; preds = %44, %71
  %73 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %13, align 8
  %74 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %73, i64 0, i32 0
  %75 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %74, align 8
  %76 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %75, i64 0, i32 0
  %77 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %76, align 8
  %78 = icmp eq %"class.v8::internal::RegExpNode"* %77, %32
  br i1 %78, label %98, label %79

79:                                               ; preds = %72, %92
  %80 = phi %"class.v8::internal::RegExpNode"* [ %96, %92 ], [ %77, %72 ]
  %81 = phi i32 [ %93, %92 ], [ 0, %72 ]
  %82 = phi i32 [ %83, %92 ], [ 0, %72 ]
  %83 = add nuw nsw i32 %82, 1
  %84 = icmp eq i32 %82, 101
  br i1 %84, label %110, label %85

85:                                               ; preds = %79
  %86 = bitcast %"class.v8::internal::RegExpNode"* %80 to i32 (%"class.v8::internal::RegExpNode"*)***
  %87 = load i32 (%"class.v8::internal::RegExpNode"*)**, i32 (%"class.v8::internal::RegExpNode"*)*** %86, align 8
  %88 = getelementptr inbounds i32 (%"class.v8::internal::RegExpNode"*)*, i32 (%"class.v8::internal::RegExpNode"*)** %87, i64 7
  %89 = load i32 (%"class.v8::internal::RegExpNode"*)*, i32 (%"class.v8::internal::RegExpNode"*)** %88, align 8
  %90 = call i32 %89(%"class.v8::internal::RegExpNode"* %80) #18
  %91 = icmp eq i32 %90, -2147483648
  br i1 %91, label %110, label %92

92:                                               ; preds = %85
  %93 = add nsw i32 %90, %81
  %94 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %80, i64 1
  %95 = bitcast %"class.v8::internal::RegExpNode"* %94 to %"class.v8::internal::RegExpNode"**
  %96 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %95, align 8
  %97 = icmp eq %"class.v8::internal::RegExpNode"* %96, %32
  br i1 %97, label %98, label %79

98:                                               ; preds = %92, %72
  %99 = phi i32 [ 0, %72 ], [ %93, %92 ]
  %100 = bitcast %"class.v8::internal::ChoiceNode"* %0 to i1 (%"class.v8::internal::ChoiceNode"*)***
  %101 = load i1 (%"class.v8::internal::ChoiceNode"*)**, i1 (%"class.v8::internal::ChoiceNode"*)*** %100, align 8
  %102 = getelementptr inbounds i1 (%"class.v8::internal::ChoiceNode"*)*, i1 (%"class.v8::internal::ChoiceNode"*)** %101, i64 12
  %103 = load i1 (%"class.v8::internal::ChoiceNode"*)*, i1 (%"class.v8::internal::ChoiceNode"*)** %102, align 8
  %104 = call zeroext i1 %103(%"class.v8::internal::ChoiceNode"* %0) #18
  %105 = sub nsw i32 0, %99
  %106 = select i1 %104, i32 %105, i32 %99
  %107 = add i32 %106, 32768
  %108 = icmp ugt i32 %107, 65535
  %109 = select i1 %108, i32 -2147483648, i32 %106
  br label %110

110:                                              ; preds = %79, %85, %98
  %111 = phi i32 [ %109, %98 ], [ -2147483648, %85 ], [ -2147483648, %79 ]
  %112 = bitcast %"class.v8::internal::AlternativeGenerationList"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 856, i8* nonnull %112) #18
  %113 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 8
  %114 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %113, align 8
  call void @_ZN2v88internal25AlternativeGenerationListC2EiPNS0_4ZoneE(%"class.v8::internal::AlternativeGenerationList"* nonnull %10, i32 %16, %"class.v8::internal::Zone"* %114)
  %115 = icmp sgt i32 %16, 1
  %116 = icmp ne i32 %111, -2147483648
  %117 = and i1 %115, %116
  br i1 %117, label %118, label %192

118:                                              ; preds = %110
  %119 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %120 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %119, align 8
  %121 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %120 to void (%"class.v8::internal::RegExpMacroAssembler"*)***
  %122 = load void (%"class.v8::internal::RegExpMacroAssembler"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*)*** %121, align 8
  %123 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %122, i64 38
  %124 = load void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %123, align 8
  call void %124(%"class.v8::internal::RegExpMacroAssembler"* %120) #18
  %125 = bitcast %"class.v8::internal::Label"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %125) #18
  %126 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %4, i64 0, i32 0
  store i32 0, i32* %126, align 4
  %127 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %4, i64 0, i32 1
  store i32 0, i32* %127, align 4
  %128 = bitcast %"class.v8::internal::Trace"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %128) #18
  %129 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 0
  store i32 0, i32* %129, align 8
  %130 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 1
  %131 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 7, i32 1, i64 1
  %132 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %131 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %132, i8 0, i64 9, i1 false) #18
  %133 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 7, i32 1, i64 2
  %134 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %133 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %134, i8 0, i64 9, i1 false) #18
  %135 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 7, i32 1, i64 3
  %136 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %135 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %136, i8 0, i64 9, i1 false) #18
  %137 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 7, i32 2
  %138 = bitcast i32* %137 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %138, i8 0, i64 9, i1 false) #18
  %139 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 8
  %140 = bitcast %"class.v8::internal::Trace::DeferredAction"** %130 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %140, i8 0, i64 53, i1 false) #18
  store i32 100, i32* %139, align 8
  %141 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 9
  %142 = load i8, i8* %51, align 8, !range !3
  %143 = add nsw i8 %142, -1
  %144 = sext i8 %143 to i32
  store i32 %144, i32* %141, align 4
  %145 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 2
  store %"class.v8::internal::Label"* %4, %"class.v8::internal::Label"** %145, align 8
  %146 = bitcast %"class.v8::internal::Label"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %146) #18
  %147 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %6, i64 0, i32 0
  store i32 0, i32* %147, align 4
  %148 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %6, i64 0, i32 1
  store i32 0, i32* %148, align 4
  %149 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %120 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %150 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %149, align 8
  %151 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %150, i64 8
  %152 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %151, align 8
  call void %152(%"class.v8::internal::RegExpMacroAssembler"* %120, %"class.v8::internal::Label"* nonnull %6) #18
  %153 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 3
  store %"class.v8::internal::RegExpNode"* %32, %"class.v8::internal::RegExpNode"** %153, align 8
  %154 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 4
  store %"class.v8::internal::Label"* %6, %"class.v8::internal::Label"** %154, align 8
  %155 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %13, align 8
  %156 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %155, i64 0, i32 0
  %157 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %156, align 8
  %158 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %157, i64 0, i32 0
  %159 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %158, align 8
  %160 = bitcast %"class.v8::internal::RegExpNode"* %159 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %161 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %160, align 8
  %162 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %161, i64 3
  %163 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %162, align 8
  call void %163(%"class.v8::internal::RegExpNode"* %159, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %5) #18
  %164 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %149, align 8
  %165 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %164, i64 8
  %166 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %165, align 8
  call void %166(%"class.v8::internal::RegExpMacroAssembler"* %120, %"class.v8::internal::Label"* nonnull %4) #18
  %167 = bitcast %"class.v8::internal::Label"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %167) #18
  %168 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %7, i64 0, i32 0
  store i32 0, i32* %168, align 4
  %169 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %7, i64 0, i32 1
  store i32 0, i32* %169, align 4
  %170 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %149, align 8
  %171 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %170, i64 8
  %172 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %171, align 8
  call void %172(%"class.v8::internal::RegExpMacroAssembler"* %120, %"class.v8::internal::Label"* nonnull %7) #18
  %173 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 1
  call void @_ZN2v88internal10ChoiceNode11EmitChoicesEPNS0_14RegExpCompilerEPNS0_25AlternativeGenerationListEiPNS0_5TraceEPNS0_12PreloadStateE(%"class.v8::internal::ChoiceNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::AlternativeGenerationList"* nonnull %10, i32 1, %"class.v8::internal::Trace"* %173, %"struct.v8::internal::PreloadState"* nonnull %8) #18
  %174 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %149, align 8
  %175 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %174, i64 8
  %176 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %175, align 8
  call void %176(%"class.v8::internal::RegExpMacroAssembler"* %120, %"class.v8::internal::Label"* nonnull %54) #18
  %177 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %178 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %177, align 8
  %179 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %149, align 8
  %180 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %179, i64 13
  %181 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %180, align 8
  call void %181(%"class.v8::internal::RegExpMacroAssembler"* %120, %"class.v8::internal::Label"* %178) #18
  %182 = sub nsw i32 0, %111
  %183 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %120 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32)***
  %184 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %183, align 8
  %185 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %184, i64 5
  %186 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %185, align 8
  call void %186(%"class.v8::internal::RegExpMacroAssembler"* %120, i32 %182) #18
  %187 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %149, align 8
  %188 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %187, i64 29
  %189 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %188, align 8
  call void %189(%"class.v8::internal::RegExpMacroAssembler"* %120, %"class.v8::internal::Label"* nonnull %7) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %167) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %146) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %128) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %125) #18
  %190 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %9, i64 0, i32 1, i32 8
  %191 = load i32, i32* %190, align 8
  br label %206

192:                                              ; preds = %110
  %193 = bitcast %"class.v8::internal::Label"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %193) #18
  %194 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %11, i64 0, i32 0
  store i32 0, i32* %194, align 4
  %195 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %11, i64 0, i32 1
  store i32 0, i32* %195, align 4
  %196 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %197 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %196, align 8
  %198 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %197 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %199 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %198, align 8
  %200 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %199, i64 8
  %201 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %200, align 8
  call void %201(%"class.v8::internal::RegExpMacroAssembler"* %197, %"class.v8::internal::Label"* nonnull %11) #18
  %202 = call i32 @_ZN2v88internal10ChoiceNode29EmitOptimizedUnanchoredSearchEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::ChoiceNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* undef)
  store i32 %202, i32* %49, align 4
  call void @_ZN2v88internal10ChoiceNode11EmitChoicesEPNS0_14RegExpCompilerEPNS0_25AlternativeGenerationListEiPNS0_5TraceEPNS0_12PreloadStateE(%"class.v8::internal::ChoiceNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::AlternativeGenerationList"* nonnull %10, i32 0, %"class.v8::internal::Trace"* %2, %"struct.v8::internal::PreloadState"* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %193) #18
  %203 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 8
  %204 = load i32, i32* %203, align 8
  %205 = icmp sgt i32 %16, 0
  br i1 %205, label %206, label %220

206:                                              ; preds = %118, %192
  %207 = phi i32 [ %191, %118 ], [ %204, %192 ]
  %208 = phi %"class.v8::internal::Trace"* [ %173, %118 ], [ %2, %192 ]
  %209 = sdiv i32 %207, %16
  %210 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %10, i64 0, i32 0, i32 0
  %211 = bitcast %"class.v8::internal::Trace"* %12 to i8*
  %212 = bitcast %"class.v8::internal::Trace"* %208 to i8*
  %213 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %12, i64 0, i32 1
  %214 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %12, i64 0, i32 8
  %215 = add nsw i32 %16, -1
  %216 = getelementptr inbounds %"struct.v8::internal::PreloadState", %"struct.v8::internal::PreloadState"* %8, i64 0, i32 2
  %217 = load i32, i32* %216, align 4
  %218 = zext i32 %215 to i64
  %219 = zext i32 %16 to i64
  br label %245

220:                                              ; preds = %262, %192
  %221 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %10, i64 0, i32 0, i32 2
  %222 = load i32, i32* %221, align 4
  %223 = icmp sgt i32 %222, 10
  br i1 %223, label %224, label %242

224:                                              ; preds = %220
  %225 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %10, i64 0, i32 0, i32 0
  br label %226

226:                                              ; preds = %235, %224
  %227 = phi i64 [ 10, %224 ], [ %238, %235 ]
  %228 = load %"class.v8::internal::AlternativeGeneration"**, %"class.v8::internal::AlternativeGeneration"*** %225, align 8
  %229 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration"*, %"class.v8::internal::AlternativeGeneration"** %228, i64 %227
  %230 = load %"class.v8::internal::AlternativeGeneration"*, %"class.v8::internal::AlternativeGeneration"** %229, align 8
  %231 = icmp eq %"class.v8::internal::AlternativeGeneration"* %230, null
  br i1 %231, label %235, label %232

232:                                              ; preds = %226
  %233 = bitcast %"class.v8::internal::AlternativeGeneration"* %230 to i8*
  call void @_ZN2v88internal8MalloceddlEPv(i8* nonnull %233) #18
  %234 = load %"class.v8::internal::AlternativeGeneration"**, %"class.v8::internal::AlternativeGeneration"*** %225, align 8
  br label %235

235:                                              ; preds = %232, %226
  %236 = phi %"class.v8::internal::AlternativeGeneration"** [ %234, %232 ], [ %228, %226 ]
  %237 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration"*, %"class.v8::internal::AlternativeGeneration"** %236, i64 %227
  store %"class.v8::internal::AlternativeGeneration"* null, %"class.v8::internal::AlternativeGeneration"** %237, align 8
  %238 = add nuw nsw i64 %227, 1
  %239 = load i32, i32* %221, align 4
  %240 = sext i32 %239 to i64
  %241 = icmp slt i64 %238, %240
  br i1 %241, label %226, label %242

242:                                              ; preds = %235, %220
  call void @llvm.lifetime.end.p0i8(i64 856, i8* nonnull %112) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %50) #18
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %48) #18
  %243 = load i32, i32* %45, align 8
  %244 = add nsw i32 %243, -1
  store i32 %244, i32* %45, align 8
  br label %272

245:                                              ; preds = %262, %206
  %246 = phi i64 [ 0, %206 ], [ %255, %262 ]
  %247 = load %"class.v8::internal::AlternativeGeneration"**, %"class.v8::internal::AlternativeGeneration"*** %210, align 8
  %248 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration"*, %"class.v8::internal::AlternativeGeneration"** %247, i64 %246
  %249 = load %"class.v8::internal::AlternativeGeneration"*, %"class.v8::internal::AlternativeGeneration"** %248, align 8
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %211) #18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %211, i8* align 8 %212, i64 120, i1 false)
  %250 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %213, align 8
  %251 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %250, null
  br i1 %251, label %253, label %252

252:                                              ; preds = %245
  store i32 %209, i32* %214, align 8
  br label %253

253:                                              ; preds = %245, %252
  %254 = icmp eq i64 %246, %218
  %255 = add nuw nsw i64 %246, 1
  br i1 %254, label %262, label %256

256:                                              ; preds = %253
  %257 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration"*, %"class.v8::internal::AlternativeGeneration"** %247, i64 %255
  %258 = load %"class.v8::internal::AlternativeGeneration"*, %"class.v8::internal::AlternativeGeneration"** %257, align 8
  %259 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %258, i64 0, i32 1
  %260 = load i8, i8* %259, align 4, !range !3
  %261 = icmp ne i8 %260, 0
  br label %262

262:                                              ; preds = %253, %256
  %263 = phi i1 [ %261, %256 ], [ false, %253 ]
  %264 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %13, align 8
  %265 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %264, i64 0, i32 0
  %266 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %265, align 8
  %267 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %266, i64 %246, i32 0
  %268 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %267, align 8
  %269 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %266, i64 %246, i32 1
  %270 = load %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::ZoneList.1140"** %269, align 8
  call void @_ZN2v88internal10ChoiceNode25EmitOutOfLineContinuationEPNS0_14RegExpCompilerEPNS0_5TraceENS0_18GuardedAlternativeEPNS0_21AlternativeGenerationEib(%"class.v8::internal::ChoiceNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %12, %"class.v8::internal::RegExpNode"* %268, %"class.v8::internal::ZoneList.1140"* %270, %"class.v8::internal::AlternativeGeneration"* %249, i32 %217, i1 zeroext %263)
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %211) #18
  %271 = icmp eq i64 %255, %219
  br i1 %271, label %220, label %245

272:                                              ; preds = %43, %242, %31, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal10ChoiceNode26CalculatePreloadCharactersEPNS0_14RegExpCompilerEi(%"class.v8::internal::ChoiceNode"* nocapture readnone, %"class.v8::internal::RegExpCompiler"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %4 = icmp slt i32 %2, 4
  %5 = select i1 %4, i32 %2, i32 4
  %6 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %7 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %6, align 8
  %8 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %7 to i1 (%"class.v8::internal::RegExpMacroAssembler"*)***
  %9 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*)**, i1 (%"class.v8::internal::RegExpMacroAssembler"*)*** %8, align 8
  %10 = getelementptr inbounds i1 (%"class.v8::internal::RegExpMacroAssembler"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*)** %9, i64 4
  %11 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.v8::internal::RegExpMacroAssembler"* %7) #18
  br i1 %12, label %13, label %22

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 7
  %15 = load i8, i8* %14, align 8, !range !3
  %16 = icmp eq i8 %15, 0
  %17 = icmp eq i32 %5, 3
  %18 = select i1 %17, i32 2, i32 %5
  %19 = icmp slt i32 %5, 2
  %20 = select i1 %19, i32 %2, i32 2
  %21 = select i1 %16, i32 %20, i32 %18
  ret i32 %21

22:                                               ; preds = %3
  %23 = icmp slt i32 %5, 1
  %24 = select i1 %23, i32 %2, i32 1
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal22BoyerMoorePositionInfo3SetEi(%"class.v8::internal::BoyerMoorePositionInfo"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 3
  br i1 %5, label %33, label %6

6:                                                ; preds = %2
  %7 = icmp slt i32 %1, 48
  br i1 %7, label %8, label %17

8:                                                ; preds = %31, %29, %27, %25, %23, %21, %19, %17, %6
  %9 = phi i32 [ 0, %6 ], [ 48, %17 ], [ 58, %19 ], [ 65, %21 ], [ 91, %23 ], [ 95, %25 ], [ 96, %27 ], [ 97, %29 ], [ 123, %31 ]
  %10 = phi i32 [ 2, %6 ], [ 1, %17 ], [ 2, %19 ], [ 1, %21 ], [ 2, %23 ], [ 1, %25 ], [ 2, %27 ], [ 1, %29 ], [ 2, %31 ]
  %11 = phi i32 [ 48, %6 ], [ 58, %17 ], [ 65, %19 ], [ 91, %21 ], [ 95, %23 ], [ 96, %25 ], [ 97, %27 ], [ 123, %29 ], [ 1114112, %31 ]
  %12 = icmp sle i32 %9, %1
  %13 = icmp sgt i32 %11, %1
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %33

15:                                               ; preds = %8
  %16 = or i32 %10, %4
  br label %33

17:                                               ; preds = %6
  %18 = icmp slt i32 %1, 58
  br i1 %18, label %8, label %19

19:                                               ; preds = %17
  %20 = icmp slt i32 %1, 65
  br i1 %20, label %8, label %21

21:                                               ; preds = %19
  %22 = icmp slt i32 %1, 91
  br i1 %22, label %8, label %23

23:                                               ; preds = %21
  %24 = icmp slt i32 %1, 95
  br i1 %24, label %8, label %25

25:                                               ; preds = %23
  %26 = icmp eq i32 %1, 95
  br i1 %26, label %8, label %27

27:                                               ; preds = %25
  %28 = icmp slt i32 %1, 97
  br i1 %28, label %8, label %29

29:                                               ; preds = %27
  %30 = icmp slt i32 %1, 123
  br i1 %30, label %8, label %31

31:                                               ; preds = %29
  %32 = icmp slt i32 %1, 1114112
  br i1 %32, label %8, label %33

33:                                               ; preds = %31, %15, %8, %2
  %34 = phi i32 [ 3, %2 ], [ 3, %8 ], [ %16, %15 ], [ %4, %31 ]
  store i32 %34, i32* %3, align 4
  %35 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %0, i64 0, i32 1
  %36 = and i32 %1, 127
  %37 = zext i32 %36 to i64
  %38 = lshr i64 %37, 6
  %39 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i64 %38
  %40 = and i64 %37, 63
  %41 = shl i64 1, %40
  %42 = load i64, i64* %39, align 8
  %43 = and i64 %41, %42
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %50

45:                                               ; preds = %33
  %46 = load i32, i32* %35, align 8
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %35, align 8
  %48 = load i64, i64* %39, align 8
  %49 = or i64 %48, %41
  store i64 %49, i64* %39, align 8
  br label %50

50:                                               ; preds = %33, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal22BoyerMoorePositionInfo11SetIntervalERKNS0_8IntervalE(%"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::Interval"* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %"class.v8::internal::Interval"* %1 to i64*
  %6 = load i64, i64* %5, align 4
  %7 = trunc i64 %6 to i32
  %8 = lshr i64 %6, 32
  %9 = trunc i64 %8 to i32
  %10 = icmp eq i32 %4, 3
  br i1 %10, label %38, label %11

11:                                               ; preds = %2
  %12 = icmp slt i32 %7, 48
  br i1 %12, label %13, label %22

13:                                               ; preds = %36, %34, %32, %30, %28, %26, %24, %22, %11
  %14 = phi i32 [ 0, %11 ], [ 48, %22 ], [ 58, %24 ], [ 65, %26 ], [ 91, %28 ], [ 95, %30 ], [ 96, %32 ], [ 97, %34 ], [ 123, %36 ]
  %15 = phi i32 [ 2, %11 ], [ 1, %22 ], [ 2, %24 ], [ 1, %26 ], [ 2, %28 ], [ 1, %30 ], [ 2, %32 ], [ 1, %34 ], [ 2, %36 ]
  %16 = phi i32 [ 48, %11 ], [ 58, %22 ], [ 65, %24 ], [ 91, %26 ], [ 95, %28 ], [ 96, %30 ], [ 97, %32 ], [ 123, %34 ], [ 1114112, %36 ]
  %17 = icmp sle i32 %14, %7
  %18 = icmp sgt i32 %16, %9
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %38

20:                                               ; preds = %13
  %21 = or i32 %15, %4
  br label %38

22:                                               ; preds = %11
  %23 = icmp slt i32 %7, 58
  br i1 %23, label %13, label %24

24:                                               ; preds = %22
  %25 = icmp slt i32 %7, 65
  br i1 %25, label %13, label %26

26:                                               ; preds = %24
  %27 = icmp slt i32 %7, 91
  br i1 %27, label %13, label %28

28:                                               ; preds = %26
  %29 = icmp slt i32 %7, 95
  br i1 %29, label %13, label %30

30:                                               ; preds = %28
  %31 = icmp eq i32 %7, 95
  br i1 %31, label %13, label %32

32:                                               ; preds = %30
  %33 = icmp slt i32 %7, 97
  br i1 %33, label %13, label %34

34:                                               ; preds = %32
  %35 = icmp slt i32 %7, 123
  br i1 %35, label %13, label %36

36:                                               ; preds = %34
  %37 = icmp slt i32 %7, 1114112
  br i1 %37, label %13, label %38

38:                                               ; preds = %2, %13, %20, %36
  %39 = phi i32 [ 3, %2 ], [ 3, %13 ], [ %21, %20 ], [ %4, %36 ]
  store i32 %39, i32* %3, align 4
  %40 = getelementptr inbounds %"class.v8::internal::Interval", %"class.v8::internal::Interval"* %1, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"class.v8::internal::Interval", %"class.v8::internal::Interval"* %1, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = add i32 %41, 1
  %45 = sub i32 %44, %43
  %46 = icmp sgt i32 %45, 127
  br i1 %46, label %51, label %47

47:                                               ; preds = %38
  %48 = icmp sgt i32 %43, %41
  br i1 %48, label %77, label %49

49:                                               ; preds = %47
  %50 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %0, i64 0, i32 1
  br label %58

51:                                               ; preds = %38
  %52 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %0, i64 0, i32 1
  store i32 128, i32* %52, align 8
  %53 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 -1, i64 16, i1 false) #18
  br label %77

54:                                               ; preds = %74
  %55 = add nsw i32 %59, 1
  %56 = load i32, i32* %40, align 4
  %57 = icmp slt i32 %59, %56
  br i1 %57, label %58, label %77

58:                                               ; preds = %54, %49
  %59 = phi i32 [ %43, %49 ], [ %55, %54 ]
  %60 = and i32 %59, 127
  %61 = zext i32 %60 to i64
  %62 = lshr i64 %61, 6
  %63 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i64 %62
  %64 = and i64 %61, 63
  %65 = shl i64 1, %64
  %66 = load i64, i64* %63, align 8
  %67 = and i64 %66, %65
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %58
  %70 = load i32, i32* %50, align 8
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %50, align 8
  %72 = load i64, i64* %63, align 8
  %73 = or i64 %72, %65
  store i64 %73, i64* %63, align 8
  br label %74

74:                                               ; preds = %58, %69
  %75 = load i32, i32* %50, align 8
  %76 = icmp eq i32 %75, 128
  br i1 %76, label %77, label %54

77:                                               ; preds = %54, %74, %47, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal22BoyerMoorePositionInfo6SetAllEv(%"class.v8::internal::BoyerMoorePositionInfo"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %0, i64 0, i32 2
  store i32 3, i32* %2, align 4
  %3 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 128
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  store i32 128, i32* %3, align 8
  %7 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -1, i64 16, i1 false) #18
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19BoyerMooreLookaheadC2EiPNS0_14RegExpCompilerEPNS0_4ZoneE(%"class.v8::internal::BoyerMooreLookahead"* nocapture, i32, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Zone"*) unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %0, i64 0, i32 1
  store %"class.v8::internal::RegExpCompiler"* %2, %"class.v8::internal::RegExpCompiler"** %6, align 8
  %7 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %2, i64 0, i32 7
  %9 = load i8, i8* %8, align 8, !range !3
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i32 65535, i32 255
  store i32 %11, i32* %7, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3, i64 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %15, %13
  %17 = icmp ult i64 %16, 16
  br i1 %17, label %18, label %20, !prof !2

18:                                               ; preds = %4
  %19 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 16) #18
  br label %22

20:                                               ; preds = %4
  %21 = add i64 %13, 16
  store i64 %21, i64* %12, align 8
  br label %22

22:                                               ; preds = %20, %18
  %23 = phi i64 [ %19, %18 ], [ %13, %20 ]
  %24 = inttoptr i64 %23 to %"class.v8::internal::ZoneList.20"*
  %25 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %24, i64 0, i32 0
  store %"class.v8::internal::BoyerMoorePositionInfo"** null, %"class.v8::internal::BoyerMoorePositionInfo"*** %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %24, i64 0, i32 1
  store i32 %1, i32* %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %24, i64 0, i32 2
  store i32 0, i32* %27, align 4
  %28 = icmp sgt i32 %1, 0
  br i1 %28, label %29, label %40

29:                                               ; preds = %22
  %30 = sext i32 %1 to i64
  %31 = shl nsw i64 %30, 3
  %32 = load i64, i64* %12, align 8
  %33 = load i64, i64* %14, align 8
  %34 = sub i64 %33, %32
  %35 = icmp ugt i64 %31, %34
  br i1 %35, label %36, label %38, !prof !2

36:                                               ; preds = %29
  %37 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 %31) #18
  br label %42

38:                                               ; preds = %29
  %39 = add i64 %32, %31
  store i64 %39, i64* %12, align 8
  br label %42

40:                                               ; preds = %22
  store %"class.v8::internal::BoyerMoorePositionInfo"** null, %"class.v8::internal::BoyerMoorePositionInfo"*** %25, align 8
  %41 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %0, i64 0, i32 3
  store %"class.v8::internal::ZoneList.20"* %24, %"class.v8::internal::ZoneList.20"** %41, align 8
  br label %46

42:                                               ; preds = %36, %38
  %43 = phi i64 [ %37, %36 ], [ %32, %38 ]
  %44 = inttoptr i64 %43 to %"class.v8::internal::BoyerMoorePositionInfo"**
  store %"class.v8::internal::BoyerMoorePositionInfo"** %44, %"class.v8::internal::BoyerMoorePositionInfo"*** %25, align 8
  %45 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %0, i64 0, i32 3
  store %"class.v8::internal::ZoneList.20"* %24, %"class.v8::internal::ZoneList.20"** %45, align 8
  br label %47

46:                                               ; preds = %102, %40
  ret void

47:                                               ; preds = %111, %42
  %48 = phi %"class.v8::internal::ZoneList.20"* [ %112, %111 ], [ %24, %42 ]
  %49 = phi i32 [ %109, %111 ], [ 0, %42 ]
  %50 = load i64, i64* %12, align 8
  %51 = load i64, i64* %14, align 8
  %52 = sub i64 %51, %50
  %53 = icmp ult i64 %52, 24
  br i1 %53, label %54, label %56, !prof !2

54:                                               ; preds = %47
  %55 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 24) #18
  br label %58

56:                                               ; preds = %47
  %57 = add i64 %50, 24
  store i64 %57, i64* %12, align 8
  br label %58

58:                                               ; preds = %54, %56
  %59 = phi i64 [ %55, %54 ], [ %50, %56 ]
  %60 = inttoptr i64 %59 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 24, i1 false) #18
  %61 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %48, i64 0, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %48, i64 0, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = icmp slt i32 %62, %64
  br i1 %65, label %66, label %69

66:                                               ; preds = %58
  %67 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %48, i64 0, i32 0
  %68 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %67, align 8
  br label %102

69:                                               ; preds = %58
  %70 = shl nsw i32 %64, 1
  %71 = or i32 %70, 1
  %72 = sext i32 %71 to i64
  %73 = shl nsw i64 %72, 3
  %74 = load i64, i64* %12, align 8
  %75 = load i64, i64* %14, align 8
  %76 = sub i64 %75, %74
  %77 = icmp ugt i64 %73, %76
  br i1 %77, label %78, label %80, !prof !2

78:                                               ; preds = %69
  %79 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3, i64 %73) #18
  br label %82

80:                                               ; preds = %69
  %81 = add i64 %74, %73
  store i64 %81, i64* %12, align 8
  br label %82

82:                                               ; preds = %80, %78
  %83 = phi i64 [ %79, %78 ], [ %74, %80 ]
  %84 = inttoptr i64 %83 to %"class.v8::internal::BoyerMoorePositionInfo"**
  %85 = load i32, i32* %61, align 4
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %87, label %99

87:                                               ; preds = %82
  %88 = inttoptr i64 %83 to i8*
  %89 = bitcast %"class.v8::internal::ZoneList.20"* %48 to i8**
  %90 = load i8*, i8** %89, align 8
  %91 = sext i32 %85 to i64
  %92 = shl nsw i64 %91, 3
  switch i64 %92, label %98 [
    i64 16, label %97
    i64 8, label %93
  ]

93:                                               ; preds = %87
  %94 = bitcast i8* %90 to i64*
  %95 = inttoptr i64 %83 to i64*
  %96 = load i64, i64* %94, align 1
  store i64 %96, i64* %95, align 1
  br label %99

97:                                               ; preds = %87
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %90, i64 16, i1 false) #18
  br label %99

98:                                               ; preds = %87
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %90, i64 %92, i1 false) #18
  br label %99

99:                                               ; preds = %98, %97, %93, %82
  %100 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %48, i64 0, i32 0
  store %"class.v8::internal::BoyerMoorePositionInfo"** %84, %"class.v8::internal::BoyerMoorePositionInfo"*** %100, align 8
  store i32 %71, i32* %63, align 8
  %101 = load i32, i32* %61, align 4
  br label %102

102:                                              ; preds = %66, %99
  %103 = phi i32 [ %62, %66 ], [ %101, %99 ]
  %104 = phi %"class.v8::internal::BoyerMoorePositionInfo"** [ %68, %66 ], [ %84, %99 ]
  %105 = add nsw i32 %103, 1
  store i32 %105, i32* %61, align 4
  %106 = sext i32 %103 to i64
  %107 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %104, i64 %106
  %108 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"** %107 to i64*
  store i64 %59, i64* %108, align 8
  %109 = add nuw nsw i32 %49, 1
  %110 = icmp eq i32 %109, %1
  br i1 %110, label %46, label %111

111:                                              ; preds = %102
  %112 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %45, align 8
  br label %47
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal19BoyerMooreLookahead22FindWorthwhileIntervalEPiS2_(%"class.v8::internal::BoyerMooreLookahead"* nocapture readonly, i32* nocapture, i32* nocapture) local_unnamed_addr #2 align 2 {
  %4 = tail call i32 @_ZN2v88internal19BoyerMooreLookahead16FindBestIntervalEiiPiS2_(%"class.v8::internal::BoyerMooreLookahead"* %0, i32 4, i32 0, i32* %1, i32* %2)
  %5 = tail call i32 @_ZN2v88internal19BoyerMooreLookahead16FindBestIntervalEiiPiS2_(%"class.v8::internal::BoyerMooreLookahead"* %0, i32 8, i32 %4, i32* %1, i32* %2)
  %6 = tail call i32 @_ZN2v88internal19BoyerMooreLookahead16FindBestIntervalEiiPiS2_(%"class.v8::internal::BoyerMooreLookahead"* %0, i32 16, i32 %5, i32* %1, i32* %2)
  %7 = icmp ne i32 %6, 0
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal19BoyerMooreLookahead16FindBestIntervalEiiPiS2_(%"class.v8::internal::BoyerMooreLookahead"* nocapture readonly, i32, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #2 align 2 {
  %6 = alloca %"class.std::__1::bitset", align 8
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %"class.std::__1::bitset"*
  %9 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %150

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %0, i64 0, i32 3
  %14 = bitcast <2 x i64>* %7 to i8*
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 0, i64 0
  %16 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %8, i64 0, i32 0, i32 0, i64 1
  %17 = bitcast %"class.std::__1::bitset"* %6 to i8*
  %18 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %6, i64 0, i32 0, i32 0, i64 0
  %19 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %6, i64 0, i32 0, i32 0, i64 1
  %20 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %0, i64 0, i32 1
  br label %21

21:                                               ; preds = %12, %146
  %22 = phi i32 [ %10, %12 ], [ %148, %146 ]
  %23 = phi i32 [ %2, %12 ], [ %147, %146 ]
  %24 = phi i32 [ 0, %12 ], [ %79, %146 ]
  %25 = icmp slt i32 %24, %22
  br i1 %25, label %26, label %46

26:                                               ; preds = %21
  %27 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %13, align 8
  %28 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %27, i64 0, i32 0
  %29 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %28, align 8
  %30 = sext i32 %24 to i64
  br label %31

31:                                               ; preds = %39, %26
  %32 = phi i64 [ %30, %26 ], [ %40, %39 ]
  %33 = phi i32 [ %24, %26 ], [ %41, %39 ]
  %34 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %29, i64 %32
  %35 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %35, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = icmp sgt i32 %37, %1
  br i1 %38, label %39, label %44

39:                                               ; preds = %31
  %40 = add nsw i64 %32, 1
  %41 = add nsw i32 %33, 1
  %42 = trunc i64 %40 to i32
  %43 = icmp eq i32 %22, %42
  br i1 %43, label %46, label %31

44:                                               ; preds = %31
  %45 = trunc i64 %32 to i32
  br label %46

46:                                               ; preds = %39, %44, %21
  %47 = phi i32 [ %24, %21 ], [ %45, %44 ], [ %41, %39 ]
  %48 = icmp eq i32 %47, %22
  br i1 %48, label %150, label %49

49:                                               ; preds = %46
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 0, i64 16, i1 false) #18
  %50 = icmp slt i32 %47, %22
  br i1 %50, label %51, label %77

51:                                               ; preds = %49
  %52 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %13, align 8
  %53 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %52, i64 0, i32 0
  %54 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %53, align 8
  %55 = sext i32 %47 to i64
  br label %56

56:                                               ; preds = %64, %51
  %57 = phi i64 [ %55, %51 ], [ %68, %64 ]
  %58 = phi <2 x i64> [ zeroinitializer, %51 ], [ %67, %64 ]
  %59 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %54, i64 %57
  %60 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %60, i64 0, i32 1
  %62 = load i32, i32* %61, align 8
  %63 = icmp sgt i32 %62, %1
  br i1 %63, label %71, label %64

64:                                               ; preds = %56
  %65 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"* %60 to <2 x i64>*
  %66 = load <2 x i64>, <2 x i64>* %65, align 8
  %67 = or <2 x i64> %58, %66
  %68 = add nsw i64 %57, 1
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %22, %69
  br i1 %70, label %73, label %56

71:                                               ; preds = %56
  %72 = trunc i64 %57 to i32
  br label %73

73:                                               ; preds = %64, %71
  %74 = phi i32 [ %72, %71 ], [ %22, %64 ]
  %75 = phi <2 x i64> [ %58, %71 ], [ %67, %64 ]
  store <2 x i64> %75, <2 x i64>* %7, align 16
  %76 = extractelement <2 x i64> %75, i32 0
  br label %77

77:                                               ; preds = %73, %49
  %78 = phi i64 [ 0, %49 ], [ %76, %73 ]
  %79 = phi i32 [ %47, %49 ], [ %74, %73 ]
  br label %80

80:                                               ; preds = %116, %77
  %81 = phi i64 [ %78, %77 ], [ %126, %116 ]
  %82 = phi i32 [ 0, %77 ], [ %118, %116 ]
  %83 = icmp eq i64 %81, 0
  br i1 %83, label %84, label %97

84:                                               ; preds = %80
  %85 = load i64, i64* %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #18
  store i64 0, i64* %18, align 8
  store i64 %85, i64* %19, align 8
  %86 = call dereferenceable(16) %"class.std::__1::bitset"* @_ZNSt3__16bitsetILm128EErSEm(%"class.std::__1::bitset"* nonnull %6, i64 64) #18
  %87 = load i64, i64* %18, align 8
  %88 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #18
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %91, label %90

90:                                               ; preds = %84
  call void @abort() #17
  unreachable

91:                                               ; preds = %84
  %92 = icmp eq i64 %87, 0
  br i1 %92, label %127, label %93

93:                                               ; preds = %91
  %94 = call i64 @llvm.cttz.i64(i64 %87, i1 true) #18, !range !30
  %95 = trunc i64 %94 to i32
  %96 = or i32 %95, 64
  br label %100

97:                                               ; preds = %80
  %98 = call i64 @llvm.cttz.i64(i64 %81, i1 true) #18, !range !30
  %99 = trunc i64 %98 to i32
  br label %100

100:                                              ; preds = %97, %93
  %101 = phi i32 [ %96, %93 ], [ %99, %97 ]
  %102 = load %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpCompiler"** %20, align 8
  %103 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %102, i64 0, i32 13, i32 1
  %104 = load i32, i32* %103, align 4
  %105 = icmp slt i32 %104, 1
  %106 = sext i32 %101 to i64
  br i1 %105, label %112, label %107

107:                                              ; preds = %100
  %108 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %102, i64 0, i32 13, i32 0, i64 %106, i32 0
  %109 = load i32, i32* %108, align 4
  %110 = shl nsw i32 %109, 7
  %111 = sdiv i32 %110, %104
  br label %112

112:                                              ; preds = %100, %107
  %113 = phi i32 [ %111, %107 ], [ 1, %100 ]
  %114 = icmp ugt i32 %101, 127
  br i1 %114, label %115, label %116

115:                                              ; preds = %112
  call void @abort() #17
  unreachable

116:                                              ; preds = %112
  %117 = add i32 %82, 1
  %118 = add i32 %117, %113
  %119 = lshr i64 %106, 6
  %120 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %8, i64 0, i32 0, i32 0, i64 %119
  %121 = and i64 %106, 63
  %122 = shl i64 1, %121
  %123 = xor i64 %122, -1
  %124 = load i64, i64* %120, align 8
  %125 = and i64 %124, %123
  store i64 %125, i64* %120, align 8
  %126 = load i64, i64* %15, align 16
  br label %80

127:                                              ; preds = %91
  %128 = sub nsw i32 %79, %47
  %129 = icmp slt i32 %128, 4
  br i1 %129, label %138, label %130

130:                                              ; preds = %127
  %131 = load %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpCompiler"** %20, align 8
  %132 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %131, i64 0, i32 7
  %133 = load i8, i8* %132, align 8, !range !3
  %134 = icmp eq i8 %133, 0
  %135 = icmp slt i32 %47, 5
  %136 = icmp slt i32 %47, 3
  %137 = select i1 %134, i1 %136, i1 %135
  br i1 %137, label %138, label %139

138:                                              ; preds = %127, %130
  br label %139

139:                                              ; preds = %130, %138
  %140 = phi i32 [ 64, %138 ], [ 128, %130 ]
  %141 = sub nsw i32 %140, %82
  %142 = mul nsw i32 %141, %128
  %143 = icmp sgt i32 %142, %23
  br i1 %143, label %144, label %146

144:                                              ; preds = %139
  store i32 %47, i32* %3, align 4
  %145 = add nsw i32 %79, -1
  store i32 %145, i32* %4, align 4
  br label %146

146:                                              ; preds = %144, %139
  %147 = phi i32 [ %142, %144 ], [ %23, %139 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #18
  %148 = load i32, i32* %9, align 8
  %149 = icmp slt i32 %79, %148
  br i1 %149, label %21, label %150

150:                                              ; preds = %146, %46, %5
  %151 = phi i32 [ %2, %5 ], [ %23, %46 ], [ %147, %146 ]
  ret i32 %151
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal19BoyerMooreLookahead12GetSkipTableEiiNS0_6HandleINS0_9ByteArrayEEE(%"class.v8::internal::BoyerMooreLookahead"* nocapture readonly, i32, i32, i64*) local_unnamed_addr #2 align 2 {
  %5 = alloca %"class.std::__1::bitset", align 8
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %"class.std::__1::bitset"*
  %8 = load i64, i64* %3, align 8
  %9 = add i64 %8, 7
  %10 = inttoptr i64 %9 to i8*
  %11 = add i64 %8, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = ashr i32 %13, 1
  %15 = sext i32 %14 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 0, i64 %15, i1 false)
  %16 = icmp slt i32 %2, %1
  br i1 %16, label %27, label %17

17:                                               ; preds = %4
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %0, i64 0, i32 3
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %7, i64 0, i32 0, i32 0, i64 1
  %22 = bitcast %"class.std::__1::bitset"* %5 to i8*
  %23 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %5, i64 0, i32 0, i32 0, i64 0
  %24 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %5, i64 0, i32 0, i32 0, i64 1
  %25 = sext i32 %2 to i64
  %26 = sext i32 %1 to i64
  br label %30

27:                                               ; preds = %71, %4
  %28 = sub i32 1, %1
  %29 = add i32 %28, %2
  ret i32 %29

30:                                               ; preds = %71, %17
  %31 = phi i64 [ %72, %71 ], [ %25, %17 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #18
  %32 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %19, align 8
  %33 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %32, i64 0, i32 0
  %34 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %33, align 8
  %35 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %34, i64 %31
  %36 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"** %35 to <2 x i64>**
  %37 = load <2 x i64>*, <2 x i64>** %36, align 8
  %38 = load <2 x i64>, <2 x i64>* %37, align 8
  store <2 x i64> %38, <2 x i64>* %6, align 16
  %39 = extractelement <2 x i64> %38, i32 0
  br label %40

40:                                               ; preds = %57, %30
  %41 = phi i64 [ %70, %57 ], [ %39, %30 ]
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %52

43:                                               ; preds = %40
  %44 = load i64, i64* %21, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #18
  store i64 0, i64* %23, align 8
  store i64 %44, i64* %24, align 8
  %45 = call dereferenceable(16) %"class.std::__1::bitset"* @_ZNSt3__16bitsetILm128EErSEm(%"class.std::__1::bitset"* nonnull %5, i64 64) #18
  %46 = load i64, i64* %23, align 8
  %47 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #18
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %50, label %49

49:                                               ; preds = %43
  call void @abort() #17
  unreachable

50:                                               ; preds = %43
  %51 = icmp eq i64 %46, 0
  br i1 %51, label %71, label %54

52:                                               ; preds = %40
  %53 = call i64 @llvm.cttz.i64(i64 %41, i1 true) #18, !range !30
  br label %57

54:                                               ; preds = %50
  %55 = call i64 @llvm.cttz.i64(i64 %46, i1 true) #18, !range !30
  %56 = or i64 %55, 64
  br label %57

57:                                               ; preds = %54, %52
  %58 = phi i64 [ %56, %54 ], [ %53, %52 ]
  %59 = load i64, i64* %3, align 8
  %60 = add nuw nsw i64 %58, 7
  %61 = add i64 %60, %59
  %62 = inttoptr i64 %61 to i8*
  store i8 1, i8* %62, align 1
  %63 = lshr i64 %58, 6
  %64 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %7, i64 0, i32 0, i32 0, i64 %63
  %65 = and i64 %58, 63
  %66 = shl i64 1, %65
  %67 = xor i64 %66, -1
  %68 = load i64, i64* %64, align 8
  %69 = and i64 %68, %67
  store i64 %69, i64* %64, align 8
  %70 = load i64, i64* %20, align 16
  br label %40

71:                                               ; preds = %50
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #18
  %72 = add nsw i64 %31, -1
  %73 = icmp sgt i64 %31, %26
  br i1 %73, label %30, label %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19BoyerMooreLookahead20EmitSkipInstructionsEPNS0_20RegExpMacroAssemblerE(%"class.v8::internal::BoyerMooreLookahead"* nocapture readonly, %"class.v8::internal::RegExpMacroAssembler"*) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.std::__1::bitset", align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %"class.v8::internal::Label", align 4
  %7 = alloca %"class.v8::internal::Label", align 4
  %8 = alloca %"class.v8::internal::Label", align 4
  %9 = alloca %"class.v8::internal::Label", align 4
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #18
  store i32 0, i32* %4, align 4
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #18
  store i32 0, i32* %5, align 4
  %12 = call i32 @_ZN2v88internal19BoyerMooreLookahead16FindBestIntervalEiiPiS2_(%"class.v8::internal::BoyerMooreLookahead"* %0, i32 4, i32 0, i32* nonnull %4, i32* nonnull %5) #18
  %13 = call i32 @_ZN2v88internal19BoyerMooreLookahead16FindBestIntervalEiiPiS2_(%"class.v8::internal::BoyerMooreLookahead"* %0, i32 8, i32 %12, i32* nonnull %4, i32* nonnull %5) #18
  %14 = call i32 @_ZN2v88internal19BoyerMooreLookahead16FindBestIntervalEiiPiS2_(%"class.v8::internal::BoyerMooreLookahead"* %0, i32 16, i32 %13, i32* nonnull %4, i32* nonnull %5) #18
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %147, label %16

16:                                               ; preds = %2
  %17 = load i32, i32* %5, align 4
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %70, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %0, i64 0, i32 3
  %22 = bitcast %"class.std::__1::bitset"* %3 to i8*
  %23 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %3, i64 0, i32 0, i32 0, i64 0
  %24 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %3, i64 0, i32 0, i32 0, i64 1
  %25 = sext i32 %17 to i64
  %26 = sext i32 %18 to i64
  br label %27

27:                                               ; preds = %65, %20
  %28 = phi i64 [ %68, %65 ], [ %25, %20 ]
  %29 = phi i8 [ %67, %65 ], [ 0, %20 ]
  %30 = phi i32 [ %66, %65 ], [ 0, %20 ]
  %31 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %21, align 8
  %32 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %31, i64 0, i32 0
  %33 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %33, i64 %28
  %35 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %35, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %65, label %39

39:                                               ; preds = %27
  %40 = and i8 %29, 1
  %41 = icmp ne i8 %40, 0
  %42 = icmp sgt i32 %37, 1
  %43 = or i1 %41, %42
  br i1 %43, label %70, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %35, i64 0, i32 0, i32 0, i32 0, i64 0
  %46 = load i64, i64* %45, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %62

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %35, i64 0, i32 0, i32 0, i32 0, i64 1
  %50 = load i64, i64* %49, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #18
  store i64 0, i64* %23, align 8
  store i64 %50, i64* %24, align 8
  %51 = call dereferenceable(16) %"class.std::__1::bitset"* @_ZNSt3__16bitsetILm128EErSEm(%"class.std::__1::bitset"* nonnull %3, i64 64) #18
  %52 = load i64, i64* %23, align 8
  %53 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #18
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  call void @abort() #17
  unreachable

56:                                               ; preds = %48
  %57 = icmp eq i64 %52, 0
  br i1 %57, label %65, label %58

58:                                               ; preds = %56
  %59 = call i64 @llvm.cttz.i64(i64 %52, i1 true) #18, !range !30
  %60 = trunc i64 %59 to i32
  %61 = or i32 %60, 64
  br label %65

62:                                               ; preds = %44
  %63 = call i64 @llvm.cttz.i64(i64 %46, i1 true) #18, !range !30
  %64 = trunc i64 %63 to i32
  br label %65

65:                                               ; preds = %27, %56, %58, %62
  %66 = phi i32 [ -1, %56 ], [ %61, %58 ], [ %64, %62 ], [ %30, %27 ]
  %67 = phi i8 [ 1, %56 ], [ 1, %58 ], [ 1, %62 ], [ %29, %27 ]
  %68 = add nsw i64 %28, -1
  %69 = icmp sgt i64 %28, %26
  br i1 %69, label %27, label %70

70:                                               ; preds = %65, %39, %16
  %71 = phi i32 [ 0, %16 ], [ %30, %39 ], [ %66, %65 ]
  %72 = phi i8 [ 0, %16 ], [ 0, %39 ], [ %67, %65 ]
  %73 = add nsw i32 %17, 1
  %74 = sub i32 %73, %18
  %75 = and i8 %72, 1
  %76 = icmp ne i8 %75, 0
  %77 = icmp eq i32 %74, 1
  %78 = and i1 %77, %76
  %79 = icmp slt i32 %17, 3
  %80 = and i1 %79, %78
  br i1 %80, label %147, label %81

81:                                               ; preds = %70
  br i1 %76, label %82, label %117

82:                                               ; preds = %81
  %83 = bitcast %"class.v8::internal::Label"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #18
  %84 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %6, i64 0, i32 0
  store i32 0, i32* %84, align 4
  %85 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %6, i64 0, i32 1
  store i32 0, i32* %85, align 4
  %86 = bitcast %"class.v8::internal::Label"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %86) #18
  %87 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %7, i64 0, i32 0
  store i32 0, i32* %87, align 4
  %88 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %7, i64 0, i32 1
  store i32 0, i32* %88, align 4
  %89 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %90 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %89, align 8
  %91 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %90, i64 8
  %92 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %91, align 8
  call void %92(%"class.v8::internal::RegExpMacroAssembler"* %1, %"class.v8::internal::Label"* nonnull %7) #18
  call void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %17, %"class.v8::internal::Label"* nonnull %6, i1 zeroext true, i32 1, i32 -1) #18
  %93 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %0, i64 0, i32 2
  %94 = load i32, i32* %93, align 8
  %95 = icmp sgt i32 %94, 128
  br i1 %95, label %96, label %101

96:                                               ; preds = %82
  %97 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)***
  %98 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %97, align 8
  %99 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %98, i64 10
  %100 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %99, align 8
  call void %100(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %71, i32 127, %"class.v8::internal::Label"* nonnull %6) #18
  br label %106

101:                                              ; preds = %82
  %102 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %103 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %102, align 8
  %104 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %103, i64 9
  %105 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %104, align 8
  call void %105(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %71, %"class.v8::internal::Label"* nonnull %6) #18
  br label %106

106:                                              ; preds = %101, %96
  %107 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32)***
  %108 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %107, align 8
  %109 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %108, i64 5
  %110 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %109, align 8
  call void %110(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %74) #18
  %111 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %89, align 8
  %112 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %111, i64 29
  %113 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %112, align 8
  call void %113(%"class.v8::internal::RegExpMacroAssembler"* %1, %"class.v8::internal::Label"* nonnull %7) #18
  %114 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %89, align 8
  %115 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %114, i64 8
  %116 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %115, align 8
  call void %116(%"class.v8::internal::RegExpMacroAssembler"* %1, %"class.v8::internal::Label"* nonnull %6) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #18
  br label %147

117:                                              ; preds = %81
  %118 = getelementptr inbounds %"class.v8::internal::RegExpMacroAssembler", %"class.v8::internal::RegExpMacroAssembler"* %1, i64 0, i32 5
  %119 = bitcast %"class.v8::internal::Isolate"** %118 to %"class.v8::internal::FactoryBase"**
  %120 = load %"class.v8::internal::FactoryBase"*, %"class.v8::internal::FactoryBase"** %119, align 8
  %121 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewByteArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %120, i32 128, i8 zeroext 1) #18
  %122 = call i32 @_ZN2v88internal19BoyerMooreLookahead12GetSkipTableEiiNS0_6HandleINS0_9ByteArrayEEE(%"class.v8::internal::BoyerMooreLookahead"* %0, i32 %18, i32 %17, i64* %121)
  %123 = bitcast %"class.v8::internal::Label"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #18
  %124 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %8, i64 0, i32 0
  store i32 0, i32* %124, align 4
  %125 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %8, i64 0, i32 1
  store i32 0, i32* %125, align 4
  %126 = bitcast %"class.v8::internal::Label"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %126) #18
  %127 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %9, i64 0, i32 0
  store i32 0, i32* %127, align 4
  %128 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %9, i64 0, i32 1
  store i32 0, i32* %128, align 4
  %129 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %130 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %129, align 8
  %131 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %130, i64 8
  %132 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %131, align 8
  call void %132(%"class.v8::internal::RegExpMacroAssembler"* %1, %"class.v8::internal::Label"* nonnull %9) #18
  call void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %17, %"class.v8::internal::Label"* nonnull %8, i1 zeroext true, i32 1, i32 -1) #18
  %133 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)***
  %134 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)*** %133, align 8
  %135 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)** %134, i64 23
  %136 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)** %135, align 8
  call void %136(%"class.v8::internal::RegExpMacroAssembler"* %1, i64* %121, %"class.v8::internal::Label"* nonnull %8) #18
  %137 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %1 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32)***
  %138 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %137, align 8
  %139 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %138, i64 5
  %140 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %139, align 8
  call void %140(%"class.v8::internal::RegExpMacroAssembler"* %1, i32 %122) #18
  %141 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %129, align 8
  %142 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %141, i64 29
  %143 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %142, align 8
  call void %143(%"class.v8::internal::RegExpMacroAssembler"* %1, %"class.v8::internal::Label"* nonnull %9) #18
  %144 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %129, align 8
  %145 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %144, i64 8
  %146 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %145, align 8
  call void %146(%"class.v8::internal::RegExpMacroAssembler"* %1, %"class.v8::internal::Label"* nonnull %8) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %126) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #18
  br label %147

147:                                              ; preds = %2, %106, %117, %70
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #18
  ret void
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewByteArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal15GreedyLoopStateC2Eb(%"class.v8::internal::GreedyLoopState"*, i1 zeroext) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 0, i32 0
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 0, i32 1
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 1, i32 0
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 1, i32 1
  %8 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 1, i32 7, i32 1, i64 1
  %9 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 9, i1 false) #18
  %10 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 1, i32 7, i32 1, i64 2
  %11 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 9, i1 false) #18
  %12 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 1, i32 7, i32 1, i64 3
  %13 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 9, i1 false) #18
  %14 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 1, i32 7, i32 2
  %15 = bitcast i32* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 9, i1 false) #18
  %16 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 1, i32 8
  %17 = bitcast %"class.v8::internal::Trace::DeferredAction"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 53, i1 false) #18
  store i32 100, i32* %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 1, i32 9
  store i32 -1, i32* %18, align 4
  %19 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %0, i64 0, i32 1, i32 2
  store %"class.v8::internal::Label"* %3, %"class.v8::internal::Label"** %19, align 8
  br i1 %1, label %20, label %21

20:                                               ; preds = %2
  store i32 0, i32* %18, align 4
  br label %21

21:                                               ; preds = %20, %2
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2v88internal10ChoiceNode28AssertGuardsMentionRegistersEPNS0_5TraceE(%"class.v8::internal::ChoiceNode"* nocapture, %"class.v8::internal::Trace"* nocapture) local_unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ChoiceNode12SetUpPreLoadEPNS0_14RegExpCompilerEPNS0_5TraceEPNS0_12PreloadStateE(%"class.v8::internal::ChoiceNode"* nocapture readonly, %"class.v8::internal::RegExpCompiler"* nocapture readonly, %"class.v8::internal::Trace"* nocapture readonly, %"struct.v8::internal::PreloadState"* nocapture) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"struct.v8::internal::PreloadState", %"struct.v8::internal::PreloadState"* %3, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %8, label %17

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 9
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 5, i32 1
  %13 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 5, i32 0
  %14 = select i1 %11, i8* %12, i8* %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  store i32 %16, i32* %5, align 4
  br label %17

17:                                               ; preds = %8, %4
  %18 = phi i32 [ %16, %8 ], [ %6, %4 ]
  %19 = icmp slt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %22 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %21, align 8
  %23 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %22 to i1 (%"class.v8::internal::RegExpMacroAssembler"*)***
  %24 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*)**, i1 (%"class.v8::internal::RegExpMacroAssembler"*)*** %23, align 8
  %25 = getelementptr inbounds i1 (%"class.v8::internal::RegExpMacroAssembler"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*)** %24, i64 4
  %26 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*)** %25, align 8
  %27 = tail call zeroext i1 %26(%"class.v8::internal::RegExpMacroAssembler"* %22) #18
  br i1 %27, label %28, label %37

28:                                               ; preds = %17
  %29 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 7
  %30 = load i8, i8* %29, align 8, !range !3
  %31 = icmp eq i8 %30, 0
  %32 = icmp eq i32 %20, 3
  %33 = select i1 %32, i32 2, i32 %20
  %34 = icmp slt i32 %20, 2
  %35 = select i1 %34, i32 %18, i32 2
  %36 = select i1 %31, i32 %35, i32 %33
  br label %40

37:                                               ; preds = %17
  %38 = icmp slt i32 %20, 1
  %39 = select i1 %38, i32 %18, i32 1
  br label %40

40:                                               ; preds = %37, %28
  %41 = phi i32 [ %36, %28 ], [ %39, %37 ]
  %42 = getelementptr inbounds %"struct.v8::internal::PreloadState", %"struct.v8::internal::PreloadState"* %3, i64 0, i32 2
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 5
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %44, %41
  %46 = getelementptr inbounds %"struct.v8::internal::PreloadState", %"struct.v8::internal::PreloadState"* %3, i64 0, i32 0
  %47 = zext i1 %45 to i8
  store i8 %47, i8* %46, align 4
  %48 = getelementptr inbounds %"struct.v8::internal::PreloadState", %"struct.v8::internal::PreloadState"* %3, i64 0, i32 1
  store i8 %47, i8* %48, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal25AlternativeGenerationListC2EiPNS0_4ZoneE(%"class.v8::internal::AlternativeGenerationList"*, i32, %"class.v8::internal::Zone"*) unnamed_addr #2 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 0, i32 0
  store %"class.v8::internal::AlternativeGeneration"** null, %"class.v8::internal::AlternativeGeneration"*** %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 0, i32 1
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 0, i32 2
  store i32 0, i32* %6, align 4
  %7 = icmp sgt i32 %1, 0
  br i1 %7, label %8, label %24

8:                                                ; preds = %3
  %9 = sext i32 %1 to i64
  %10 = shl nsw i64 %9, 3
  %11 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %14, %12
  %16 = icmp ugt i64 %10, %15
  br i1 %16, label %17, label %19, !prof !2

17:                                               ; preds = %8
  %18 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %10) #18
  br label %21

19:                                               ; preds = %8
  %20 = add i64 %12, %10
  store i64 %20, i64* %11, align 8
  br label %21

21:                                               ; preds = %19, %17
  %22 = phi i64 [ %18, %17 ], [ %12, %19 ]
  %23 = inttoptr i64 %22 to %"class.v8::internal::AlternativeGeneration"**
  br label %24

24:                                               ; preds = %3, %21
  %25 = phi %"class.v8::internal::AlternativeGeneration"** [ %23, %21 ], [ null, %3 ]
  store %"class.v8::internal::AlternativeGeneration"** %25, %"class.v8::internal::AlternativeGeneration"*** %4, align 8
  %26 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 0
  %27 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 0, i32 2
  %28 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 0, i32 3, i32 1, i64 1
  %29 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 9, i1 false) #18
  %30 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 0, i32 3, i32 1, i64 2
  %31 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 9, i1 false) #18
  %32 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 0, i32 3, i32 1, i64 3
  %33 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %33, i8 0, i64 9, i1 false) #18
  %34 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 0, i32 3, i32 2
  %35 = bitcast i32* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 9, i1 false) #18
  %36 = bitcast %"class.v8::internal::AlternativeGeneration"* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %36, i8 0, i64 9, i1 false) #18
  %37 = bitcast %"class.v8::internal::Label"* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 21, i1 false) #18
  %38 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 1
  %39 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 1, i32 2
  %40 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 1, i32 3, i32 1, i64 1
  %41 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %41, i8 0, i64 9, i1 false) #18
  %42 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 1, i32 3, i32 1, i64 2
  %43 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %43, i8 0, i64 9, i1 false) #18
  %44 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 1, i32 3, i32 1, i64 3
  %45 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %45, i8 0, i64 9, i1 false) #18
  %46 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 1, i32 3, i32 2
  %47 = bitcast i32* %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %47, i8 0, i64 9, i1 false) #18
  %48 = bitcast %"class.v8::internal::AlternativeGeneration"* %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %48, i8 0, i64 9, i1 false) #18
  %49 = bitcast %"class.v8::internal::Label"* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %49, i8 0, i64 21, i1 false) #18
  %50 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 2
  %51 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 2, i32 2
  %52 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 2, i32 3, i32 1, i64 1
  %53 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %52 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %53, i8 0, i64 9, i1 false) #18
  %54 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 2, i32 3, i32 1, i64 2
  %55 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %54 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %55, i8 0, i64 9, i1 false) #18
  %56 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 2, i32 3, i32 1, i64 3
  %57 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %56 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %57, i8 0, i64 9, i1 false) #18
  %58 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 2, i32 3, i32 2
  %59 = bitcast i32* %58 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 9, i1 false) #18
  %60 = bitcast %"class.v8::internal::AlternativeGeneration"* %50 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %60, i8 0, i64 9, i1 false) #18
  %61 = bitcast %"class.v8::internal::Label"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 21, i1 false) #18
  %62 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 3
  %63 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 3, i32 2
  %64 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 3, i32 3, i32 1, i64 1
  %65 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %65, i8 0, i64 9, i1 false) #18
  %66 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 3, i32 3, i32 1, i64 2
  %67 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %66 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %67, i8 0, i64 9, i1 false) #18
  %68 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 3, i32 3, i32 1, i64 3
  %69 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %68 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %69, i8 0, i64 9, i1 false) #18
  %70 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 3, i32 3, i32 2
  %71 = bitcast i32* %70 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %71, i8 0, i64 9, i1 false) #18
  %72 = bitcast %"class.v8::internal::AlternativeGeneration"* %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %72, i8 0, i64 9, i1 false) #18
  %73 = bitcast %"class.v8::internal::Label"* %63 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %73, i8 0, i64 21, i1 false) #18
  %74 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 4
  %75 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 4, i32 2
  %76 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 4, i32 3, i32 1, i64 1
  %77 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %77, i8 0, i64 9, i1 false) #18
  %78 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 4, i32 3, i32 1, i64 2
  %79 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %78 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %79, i8 0, i64 9, i1 false) #18
  %80 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 4, i32 3, i32 1, i64 3
  %81 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %81, i8 0, i64 9, i1 false) #18
  %82 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 4, i32 3, i32 2
  %83 = bitcast i32* %82 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %83, i8 0, i64 9, i1 false) #18
  %84 = bitcast %"class.v8::internal::AlternativeGeneration"* %74 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %84, i8 0, i64 9, i1 false) #18
  %85 = bitcast %"class.v8::internal::Label"* %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %85, i8 0, i64 21, i1 false) #18
  %86 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 5
  %87 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 5, i32 2
  %88 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 5, i32 3, i32 1, i64 1
  %89 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %88 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %89, i8 0, i64 9, i1 false) #18
  %90 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 5, i32 3, i32 1, i64 2
  %91 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %90 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %91, i8 0, i64 9, i1 false) #18
  %92 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 5, i32 3, i32 1, i64 3
  %93 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %92 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %93, i8 0, i64 9, i1 false) #18
  %94 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 5, i32 3, i32 2
  %95 = bitcast i32* %94 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %95, i8 0, i64 9, i1 false) #18
  %96 = bitcast %"class.v8::internal::AlternativeGeneration"* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %96, i8 0, i64 9, i1 false) #18
  %97 = bitcast %"class.v8::internal::Label"* %87 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %97, i8 0, i64 21, i1 false) #18
  %98 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 6
  %99 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 6, i32 2
  %100 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 6, i32 3, i32 1, i64 1
  %101 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %100 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %101, i8 0, i64 9, i1 false) #18
  %102 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 6, i32 3, i32 1, i64 2
  %103 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %102 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %103, i8 0, i64 9, i1 false) #18
  %104 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 6, i32 3, i32 1, i64 3
  %105 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %104 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %105, i8 0, i64 9, i1 false) #18
  %106 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 6, i32 3, i32 2
  %107 = bitcast i32* %106 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %107, i8 0, i64 9, i1 false) #18
  %108 = bitcast %"class.v8::internal::AlternativeGeneration"* %98 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %108, i8 0, i64 9, i1 false) #18
  %109 = bitcast %"class.v8::internal::Label"* %99 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %109, i8 0, i64 21, i1 false) #18
  %110 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 7
  %111 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 7, i32 2
  %112 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 7, i32 3, i32 1, i64 1
  %113 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %112 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %113, i8 0, i64 9, i1 false) #18
  %114 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 7, i32 3, i32 1, i64 2
  %115 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %114 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %115, i8 0, i64 9, i1 false) #18
  %116 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 7, i32 3, i32 1, i64 3
  %117 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %116 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %117, i8 0, i64 9, i1 false) #18
  %118 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 7, i32 3, i32 2
  %119 = bitcast i32* %118 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %119, i8 0, i64 9, i1 false) #18
  %120 = bitcast %"class.v8::internal::AlternativeGeneration"* %110 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %120, i8 0, i64 9, i1 false) #18
  %121 = bitcast %"class.v8::internal::Label"* %111 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %121, i8 0, i64 21, i1 false) #18
  %122 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 8
  %123 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 8, i32 2
  %124 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 8, i32 3, i32 1, i64 1
  %125 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %124 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %125, i8 0, i64 9, i1 false) #18
  %126 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 8, i32 3, i32 1, i64 2
  %127 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %126 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %127, i8 0, i64 9, i1 false) #18
  %128 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 8, i32 3, i32 1, i64 3
  %129 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %129, i8 0, i64 9, i1 false) #18
  %130 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 8, i32 3, i32 2
  %131 = bitcast i32* %130 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %131, i8 0, i64 9, i1 false) #18
  %132 = bitcast %"class.v8::internal::AlternativeGeneration"* %122 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %132, i8 0, i64 9, i1 false) #18
  %133 = bitcast %"class.v8::internal::Label"* %123 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %133, i8 0, i64 21, i1 false) #18
  %134 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 9
  %135 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 9, i32 2
  %136 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 9, i32 3, i32 1, i64 1
  %137 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %136 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %137, i8 0, i64 9, i1 false) #18
  %138 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 9, i32 3, i32 1, i64 2
  %139 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %138 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %139, i8 0, i64 9, i1 false) #18
  %140 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 9, i32 3, i32 1, i64 3
  %141 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %140 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %141, i8 0, i64 9, i1 false) #18
  %142 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 9, i32 3, i32 2
  %143 = bitcast i32* %142 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %143, i8 0, i64 9, i1 false) #18
  %144 = bitcast %"class.v8::internal::AlternativeGeneration"* %134 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %144, i8 0, i64 9, i1 false) #18
  %145 = bitcast %"class.v8::internal::Label"* %135 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %145, i8 0, i64 21, i1 false) #18
  br i1 %7, label %146, label %208

146:                                              ; preds = %24
  %147 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %148 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %149 = bitcast %"class.v8::internal::AlternativeGenerationList"* %0 to i8**
  %150 = sext i32 %1 to i64
  br label %157

151:                                              ; preds = %197
  %152 = icmp sgt i32 %1, 10
  br i1 %152, label %153, label %208

153:                                              ; preds = %151
  %154 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %155 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %156 = bitcast %"class.v8::internal::AlternativeGenerationList"* %0 to i8**
  br label %209

157:                                              ; preds = %146, %197
  %158 = phi i64 [ 0, %146 ], [ %204, %197 ]
  %159 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %0, i64 0, i32 1, i64 %158
  %160 = ptrtoint %"class.v8::internal::AlternativeGeneration"* %159 to i64
  %161 = load i32, i32* %6, align 4
  %162 = load i32, i32* %5, align 8
  %163 = icmp slt i32 %161, %162
  br i1 %163, label %164, label %166

164:                                              ; preds = %157
  %165 = load %"class.v8::internal::AlternativeGeneration"**, %"class.v8::internal::AlternativeGeneration"*** %4, align 8
  br label %197

166:                                              ; preds = %157
  %167 = shl nsw i32 %162, 1
  %168 = or i32 %167, 1
  %169 = sext i32 %168 to i64
  %170 = shl nsw i64 %169, 3
  %171 = load i64, i64* %147, align 8
  %172 = load i64, i64* %148, align 8
  %173 = sub i64 %172, %171
  %174 = icmp ugt i64 %170, %173
  br i1 %174, label %175, label %177, !prof !2

175:                                              ; preds = %166
  %176 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %170) #18
  br label %179

177:                                              ; preds = %166
  %178 = add i64 %171, %170
  store i64 %178, i64* %147, align 8
  br label %179

179:                                              ; preds = %177, %175
  %180 = phi i64 [ %176, %175 ], [ %171, %177 ]
  %181 = inttoptr i64 %180 to %"class.v8::internal::AlternativeGeneration"**
  %182 = load i32, i32* %6, align 4
  %183 = icmp sgt i32 %182, 0
  br i1 %183, label %184, label %195

184:                                              ; preds = %179
  %185 = inttoptr i64 %180 to i8*
  %186 = load i8*, i8** %149, align 8
  %187 = sext i32 %182 to i64
  %188 = shl nsw i64 %187, 3
  switch i64 %188, label %194 [
    i64 16, label %193
    i64 8, label %189
  ]

189:                                              ; preds = %184
  %190 = bitcast i8* %186 to i64*
  %191 = inttoptr i64 %180 to i64*
  %192 = load i64, i64* %190, align 1
  store i64 %192, i64* %191, align 1
  br label %195

193:                                              ; preds = %184
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %185, i8* align 1 %186, i64 16, i1 false) #18
  br label %195

194:                                              ; preds = %184
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %185, i8* align 1 %186, i64 %188, i1 false) #18
  br label %195

195:                                              ; preds = %194, %193, %189, %179
  store %"class.v8::internal::AlternativeGeneration"** %181, %"class.v8::internal::AlternativeGeneration"*** %4, align 8
  store i32 %168, i32* %5, align 8
  %196 = load i32, i32* %6, align 4
  br label %197

197:                                              ; preds = %164, %195
  %198 = phi i32 [ %161, %164 ], [ %196, %195 ]
  %199 = phi %"class.v8::internal::AlternativeGeneration"** [ %165, %164 ], [ %181, %195 ]
  %200 = add nsw i32 %198, 1
  store i32 %200, i32* %6, align 4
  %201 = sext i32 %198 to i64
  %202 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration"*, %"class.v8::internal::AlternativeGeneration"** %199, i64 %201
  %203 = bitcast %"class.v8::internal::AlternativeGeneration"** %202 to i64*
  store i64 %160, i64* %203, align 8
  %204 = add nuw nsw i64 %158, 1
  %205 = icmp slt i64 %204, %150
  %206 = icmp ult i64 %204, 10
  %207 = and i1 %205, %206
  br i1 %207, label %157, label %151

208:                                              ; preds = %254, %24, %151
  ret void

209:                                              ; preds = %254, %153
  %210 = phi i32 [ 10, %153 ], [ %261, %254 ]
  %211 = tail call i8* @_ZN2v88internal8MallocednwEm(i64 84) #18
  %212 = getelementptr inbounds i8, i8* %211, i64 12
  %213 = getelementptr inbounds i8, i8* %211, i64 36
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %213, i8 0, i64 9, i1 false) #18
  %214 = getelementptr inbounds i8, i8* %211, i64 48
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %214, i8 0, i64 9, i1 false) #18
  %215 = getelementptr inbounds i8, i8* %211, i64 60
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %215, i8 0, i64 9, i1 false) #18
  %216 = getelementptr inbounds i8, i8* %211, i64 72
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %216, i8 0, i64 9, i1 false) #18
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %211, i8 0, i64 9, i1 false) #18
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %212, i8 0, i64 21, i1 false) #18
  %217 = ptrtoint i8* %211 to i64
  %218 = load i32, i32* %6, align 4
  %219 = load i32, i32* %5, align 8
  %220 = icmp slt i32 %218, %219
  br i1 %220, label %221, label %223

221:                                              ; preds = %209
  %222 = load %"class.v8::internal::AlternativeGeneration"**, %"class.v8::internal::AlternativeGeneration"*** %4, align 8
  br label %254

223:                                              ; preds = %209
  %224 = shl nsw i32 %219, 1
  %225 = or i32 %224, 1
  %226 = sext i32 %225 to i64
  %227 = shl nsw i64 %226, 3
  %228 = load i64, i64* %154, align 8
  %229 = load i64, i64* %155, align 8
  %230 = sub i64 %229, %228
  %231 = icmp ugt i64 %227, %230
  br i1 %231, label %232, label %234, !prof !2

232:                                              ; preds = %223
  %233 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %227) #18
  br label %236

234:                                              ; preds = %223
  %235 = add i64 %228, %227
  store i64 %235, i64* %154, align 8
  br label %236

236:                                              ; preds = %234, %232
  %237 = phi i64 [ %233, %232 ], [ %228, %234 ]
  %238 = inttoptr i64 %237 to %"class.v8::internal::AlternativeGeneration"**
  %239 = load i32, i32* %6, align 4
  %240 = icmp sgt i32 %239, 0
  br i1 %240, label %241, label %252

241:                                              ; preds = %236
  %242 = inttoptr i64 %237 to i8*
  %243 = load i8*, i8** %156, align 8
  %244 = sext i32 %239 to i64
  %245 = shl nsw i64 %244, 3
  switch i64 %245, label %251 [
    i64 16, label %250
    i64 8, label %246
  ]

246:                                              ; preds = %241
  %247 = bitcast i8* %243 to i64*
  %248 = inttoptr i64 %237 to i64*
  %249 = load i64, i64* %247, align 1
  store i64 %249, i64* %248, align 1
  br label %252

250:                                              ; preds = %241
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %242, i8* align 1 %243, i64 16, i1 false) #18
  br label %252

251:                                              ; preds = %241
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %242, i8* align 1 %243, i64 %245, i1 false) #18
  br label %252

252:                                              ; preds = %251, %250, %246, %236
  store %"class.v8::internal::AlternativeGeneration"** %238, %"class.v8::internal::AlternativeGeneration"*** %4, align 8
  store i32 %225, i32* %5, align 8
  %253 = load i32, i32* %6, align 4
  br label %254

254:                                              ; preds = %221, %252
  %255 = phi i32 [ %218, %221 ], [ %253, %252 ]
  %256 = phi %"class.v8::internal::AlternativeGeneration"** [ %222, %221 ], [ %238, %252 ]
  %257 = add nsw i32 %255, 1
  store i32 %257, i32* %6, align 4
  %258 = sext i32 %255 to i64
  %259 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration"*, %"class.v8::internal::AlternativeGeneration"** %256, i64 %258
  %260 = bitcast %"class.v8::internal::AlternativeGeneration"** %259 to i64*
  store i64 %217, i64* %260, align 8
  %261 = add nuw nsw i32 %210, 1
  %262 = icmp eq i32 %261, %1
  br i1 %262, label %208, label %209
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::Trace"* @_ZN2v88internal10ChoiceNode14EmitGreedyLoopEPNS0_14RegExpCompilerEPNS0_5TraceEPNS0_25AlternativeGenerationListEPNS0_12PreloadStateEPNS0_15GreedyLoopStateEi(%"class.v8::internal::ChoiceNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"* nocapture readonly, %"class.v8::internal::AlternativeGenerationList"* nocapture readonly, %"struct.v8::internal::PreloadState"* nocapture, %"class.v8::internal::GreedyLoopState"*, i32) local_unnamed_addr #2 align 2 {
  %8 = alloca %"class.v8::internal::Label", align 4
  %9 = alloca %"class.v8::internal::Trace", align 8
  %10 = alloca %"class.v8::internal::Label", align 4
  %11 = alloca %"class.v8::internal::Label", align 4
  %12 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %13 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %12, align 8
  %14 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %13 to void (%"class.v8::internal::RegExpMacroAssembler"*)***
  %15 = load void (%"class.v8::internal::RegExpMacroAssembler"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %15, i64 38
  %17 = load void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %16, align 8
  tail call void %17(%"class.v8::internal::RegExpMacroAssembler"* %13) #18
  %18 = bitcast %"class.v8::internal::Label"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #18
  %19 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %8, i64 0, i32 0
  store i32 0, i32* %19, align 4
  %20 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %8, i64 0, i32 1
  store i32 0, i32* %20, align 4
  %21 = bitcast %"class.v8::internal::Trace"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %21) #18
  %22 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 0
  store i32 0, i32* %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 1
  %24 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 7, i32 1, i64 1
  %25 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 0, i64 9, i1 false) #18
  %26 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 7, i32 1, i64 2
  %27 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %27, i8 0, i64 9, i1 false) #18
  %28 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 7, i32 1, i64 3
  %29 = bitcast %"struct.v8::internal::QuickCheckDetails::Position"* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 9, i1 false) #18
  %30 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 7, i32 2
  %31 = bitcast i32* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 9, i1 false) #18
  %32 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 8
  %33 = bitcast %"class.v8::internal::Trace::DeferredAction"** %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 53, i1 false) #18
  store i32 100, i32* %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 9
  %35 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 2
  %36 = load i8, i8* %35, align 8, !range !3
  %37 = add nsw i8 %36, -1
  %38 = sext i8 %37 to i32
  store i32 %38, i32* %34, align 4
  %39 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 2
  store %"class.v8::internal::Label"* %8, %"class.v8::internal::Label"** %39, align 8
  %40 = bitcast %"class.v8::internal::Label"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #18
  %41 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %10, i64 0, i32 0
  store i32 0, i32* %41, align 4
  %42 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %10, i64 0, i32 1
  store i32 0, i32* %42, align 4
  %43 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %13 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %44 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %44, i64 8
  %46 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %45, align 8
  call void %46(%"class.v8::internal::RegExpMacroAssembler"* %13, %"class.v8::internal::Label"* nonnull %10) #18
  %47 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0
  %48 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 3
  store %"class.v8::internal::RegExpNode"* %47, %"class.v8::internal::RegExpNode"** %48, align 8
  %49 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 4
  store %"class.v8::internal::Label"* %10, %"class.v8::internal::Label"** %49, align 8
  %50 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 1
  %51 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %50, align 8
  %52 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %51, i64 0, i32 0
  %53 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %52, align 8
  %54 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %53, i64 0, i32 0
  %55 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %54, align 8
  %56 = bitcast %"class.v8::internal::RegExpNode"* %55 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %57 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %56, align 8
  %58 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %57, i64 3
  %59 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %58, align 8
  call void %59(%"class.v8::internal::RegExpNode"* %55, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %9) #18
  %60 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %43, align 8
  %61 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %60, i64 8
  %62 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %61, align 8
  call void %62(%"class.v8::internal::RegExpMacroAssembler"* %13, %"class.v8::internal::Label"* nonnull %8) #18
  %63 = bitcast %"class.v8::internal::Label"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %63) #18
  %64 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %11, i64 0, i32 0
  store i32 0, i32* %64, align 4
  %65 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %11, i64 0, i32 1
  store i32 0, i32* %65, align 4
  %66 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %43, align 8
  %67 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %66, i64 8
  %68 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %67, align 8
  call void %68(%"class.v8::internal::RegExpMacroAssembler"* %13, %"class.v8::internal::Label"* nonnull %11) #18
  %69 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %5, i64 0, i32 1
  call void @_ZN2v88internal10ChoiceNode11EmitChoicesEPNS0_14RegExpCompilerEPNS0_25AlternativeGenerationListEiPNS0_5TraceEPNS0_12PreloadStateE(%"class.v8::internal::ChoiceNode"* %0, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::AlternativeGenerationList"* %3, i32 1, %"class.v8::internal::Trace"* %69, %"struct.v8::internal::PreloadState"* %4)
  %70 = getelementptr inbounds %"class.v8::internal::GreedyLoopState", %"class.v8::internal::GreedyLoopState"* %5, i64 0, i32 0
  %71 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %43, align 8
  %72 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %71, i64 8
  %73 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %72, align 8
  call void %73(%"class.v8::internal::RegExpMacroAssembler"* %13, %"class.v8::internal::Label"* %70) #18
  %74 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %75 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %74, align 8
  %76 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %43, align 8
  %77 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %76, i64 13
  %78 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %77, align 8
  call void %78(%"class.v8::internal::RegExpMacroAssembler"* %13, %"class.v8::internal::Label"* %75) #18
  %79 = sub nsw i32 0, %6
  %80 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %13 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32)***
  %81 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %80, align 8
  %82 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %81, i64 5
  %83 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %82, align 8
  call void %83(%"class.v8::internal::RegExpMacroAssembler"* %13, i32 %79) #18
  %84 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %43, align 8
  %85 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %84, i64 29
  %86 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %85, align 8
  call void %86(%"class.v8::internal::RegExpMacroAssembler"* %13, %"class.v8::internal::Label"* nonnull %11) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %63) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %21) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #18
  ret %"class.v8::internal::Trace"* %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal10ChoiceNode29EmitOptimizedUnanchoredSearchEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::ChoiceNode"* readonly, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"* nocapture readnone) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %5, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %73

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %5, i64 0, i32 0
  %11 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %11, i64 1, i32 0
  %13 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %11, i64 1, i32 1
  %15 = load %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::ZoneList.1140"** %14, align 8
  %16 = icmp eq %"class.v8::internal::ZoneList.1140"* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %15, i64 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %73

21:                                               ; preds = %17, %9
  %22 = bitcast %"class.v8::internal::RegExpNode"* %13 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)***
  %23 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)** %23, i64 8
  %25 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*)** %24, align 8
  %26 = tail call %"class.v8::internal::RegExpNode"* %25(%"class.v8::internal::RegExpNode"* %13, %"class.v8::internal::RegExpCompiler"* %1) #18
  %27 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0
  %28 = icmp eq %"class.v8::internal::RegExpNode"* %26, %27
  br i1 %28, label %29, label %73

29:                                               ; preds = %21
  %30 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %31 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::RegExpMacroAssembler", %"class.v8::internal::RegExpMacroAssembler"* %31, i64 0, i32 5
  %33 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 7, i64 0
  %35 = load %"class.v8::internal::BoyerMooreLookahead"*, %"class.v8::internal::BoyerMooreLookahead"** %34, align 8
  %36 = icmp eq %"class.v8::internal::BoyerMooreLookahead"* %35, null
  br i1 %36, label %37, label %70

37:                                               ; preds = %29
  %38 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 5, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = icmp ult i32 %40, 8
  %42 = select i1 %41, i32 %40, i32 8
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %73

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 8
  %46 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %46, i64 0, i32 2
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %46, i64 0, i32 3
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %50, %48
  %52 = icmp ult i64 %51, 32
  br i1 %52, label %53, label %55, !prof !2

53:                                               ; preds = %44
  %54 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %46, i64 32) #18
  br label %57

55:                                               ; preds = %44
  %56 = add i64 %48, 32
  store i64 %56, i64* %47, align 8
  br label %57

57:                                               ; preds = %55, %53
  %58 = phi i64 [ %54, %53 ], [ %48, %55 ]
  %59 = inttoptr i64 %58 to %"class.v8::internal::BoyerMooreLookahead"*
  tail call void @_ZN2v88internal19BoyerMooreLookaheadC2EiPNS0_14RegExpCompilerEPNS0_4ZoneE(%"class.v8::internal::BoyerMooreLookahead"* %59, i32 %42, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Zone"* %46) #18
  %60 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %4, align 8
  %61 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %60, i64 0, i32 0
  %62 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %61, align 8
  %63 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %62, i64 0, i32 0
  %64 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %63, align 8
  %65 = bitcast %"class.v8::internal::RegExpNode"* %64 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)***
  %66 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*** %65, align 8
  %67 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %66, i64 9
  %68 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %67, align 8
  tail call void %68(%"class.v8::internal::RegExpNode"* %64, %"class.v8::internal::Isolate"* %33, i32 0, i32 200, %"class.v8::internal::BoyerMooreLookahead"* %59, i1 zeroext false) #18
  %69 = icmp eq i64 %58, 0
  br i1 %69, label %73, label %70

70:                                               ; preds = %29, %57
  %71 = phi %"class.v8::internal::BoyerMooreLookahead"* [ %59, %57 ], [ %35, %29 ]
  %72 = phi i32 [ %42, %57 ], [ -1, %29 ]
  tail call void @_ZN2v88internal19BoyerMooreLookahead20EmitSkipInstructionsEPNS0_20RegExpMacroAssemblerE(%"class.v8::internal::BoyerMooreLookahead"* nonnull %71, %"class.v8::internal::RegExpMacroAssembler"* %31)
  br label %73

73:                                               ; preds = %37, %17, %70, %57, %21, %3
  %74 = phi i32 [ -1, %3 ], [ %42, %57 ], [ %72, %70 ], [ -1, %21 ], [ -1, %17 ], [ 0, %37 ]
  ret i32 %74
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ChoiceNode11EmitChoicesEPNS0_14RegExpCompilerEPNS0_25AlternativeGenerationListEiPNS0_5TraceEPNS0_12PreloadStateE(%"class.v8::internal::ChoiceNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::AlternativeGenerationList"* nocapture readonly, i32, %"class.v8::internal::Trace"* nocapture readonly, %"struct.v8::internal::PreloadState"* nocapture) local_unnamed_addr #2 align 2 {
  %7 = alloca %"class.v8::internal::Trace", align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %9 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %8, align 8
  %10 = getelementptr inbounds %"struct.v8::internal::PreloadState", %"struct.v8::internal::PreloadState"* %5, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, -1
  br i1 %12, label %13, label %23

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 9
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 5, i32 1
  %18 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 0, i32 5, i32 0
  %19 = select i1 %16, i8* %17, i8* %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  store i32 %21, i32* %10, align 4
  %22 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %8, align 8
  br label %23

23:                                               ; preds = %13, %6
  %24 = phi %"class.v8::internal::RegExpMacroAssembler"* [ %22, %13 ], [ %9, %6 ]
  %25 = phi i32 [ %21, %13 ], [ %11, %6 ]
  %26 = icmp slt i32 %25, 4
  %27 = select i1 %26, i32 %25, i32 4
  %28 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %24 to i1 (%"class.v8::internal::RegExpMacroAssembler"*)***
  %29 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*)**, i1 (%"class.v8::internal::RegExpMacroAssembler"*)*** %28, align 8
  %30 = getelementptr inbounds i1 (%"class.v8::internal::RegExpMacroAssembler"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*)** %29, i64 4
  %31 = load i1 (%"class.v8::internal::RegExpMacroAssembler"*)*, i1 (%"class.v8::internal::RegExpMacroAssembler"*)** %30, align 8
  %32 = tail call zeroext i1 %31(%"class.v8::internal::RegExpMacroAssembler"* %24) #18
  br i1 %32, label %33, label %42

33:                                               ; preds = %23
  %34 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 7
  %35 = load i8, i8* %34, align 8, !range !3
  %36 = icmp eq i8 %35, 0
  %37 = icmp eq i32 %27, 3
  %38 = select i1 %37, i32 2, i32 %27
  %39 = icmp slt i32 %27, 2
  %40 = select i1 %39, i32 %25, i32 2
  %41 = select i1 %36, i32 %40, i32 %38
  br label %45

42:                                               ; preds = %23
  %43 = icmp slt i32 %27, 1
  %44 = select i1 %43, i32 %25, i32 1
  br label %45

45:                                               ; preds = %33, %42
  %46 = phi i32 [ %41, %33 ], [ %44, %42 ]
  %47 = getelementptr inbounds %"struct.v8::internal::PreloadState", %"struct.v8::internal::PreloadState"* %5, i64 0, i32 2
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 5
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, %46
  %51 = getelementptr inbounds %"struct.v8::internal::PreloadState", %"struct.v8::internal::PreloadState"* %5, i64 0, i32 0
  %52 = zext i1 %50 to i8
  store i8 %52, i8* %51, align 4
  %53 = getelementptr inbounds %"struct.v8::internal::PreloadState", %"struct.v8::internal::PreloadState"* %5, i64 0, i32 1
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 1
  %55 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %54, align 8
  %56 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %55, i64 0, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 8
  %59 = load i32, i32* %58, align 8
  %60 = sdiv i32 %59, %57
  %61 = icmp sgt i32 %57, %3
  br i1 %61, label %62, label %84

62:                                               ; preds = %45
  %63 = add nsw i32 %57, -1
  %64 = getelementptr inbounds %"class.v8::internal::AlternativeGenerationList", %"class.v8::internal::AlternativeGenerationList"* %2, i64 0, i32 0, i32 0
  %65 = bitcast %"class.v8::internal::Trace"* %7 to i8*
  %66 = bitcast %"class.v8::internal::Trace"* %4 to i8*
  %67 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 5
  %68 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 6
  %69 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 7
  %70 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %69, i64 0, i32 0
  %71 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 2
  %72 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 9
  %73 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 2
  %74 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 10
  %75 = bitcast %"class.v8::internal::ChoiceNode"* %0 to i1 (%"class.v8::internal::ChoiceNode"*, i1)***
  %76 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %77 = bitcast %"class.v8::internal::QuickCheckDetails"* %69 to i8*
  %78 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %4, i64 0, i32 2
  %79 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 1
  %80 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 8
  %81 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %9 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)***
  %82 = sext i32 %3 to i64
  %83 = sext i32 %63 to i64
  br label %85

84:                                               ; preds = %257, %45
  ret void

85:                                               ; preds = %261, %62
  %86 = phi i32 [ %46, %62 ], [ %263, %261 ]
  %87 = phi %"class.v8::internal::ZoneList.1148"* [ %55, %62 ], [ %262, %261 ]
  %88 = phi i64 [ %82, %62 ], [ %258, %261 ]
  %89 = icmp eq i64 %88, %83
  %90 = xor i1 %89, true
  %91 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %87, i64 0, i32 0
  %92 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %91, align 8
  %93 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %92, i64 %88, i32 0
  %94 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %93, align 8
  %95 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %92, i64 %88, i32 1
  %96 = load %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::ZoneList.1140"** %95, align 8
  %97 = load %"class.v8::internal::AlternativeGeneration"**, %"class.v8::internal::AlternativeGeneration"*** %64, align 8
  %98 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration"*, %"class.v8::internal::AlternativeGeneration"** %97, i64 %88
  %99 = load %"class.v8::internal::AlternativeGeneration"*, %"class.v8::internal::AlternativeGeneration"** %98, align 8
  %100 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %99, i64 0, i32 3
  %101 = getelementptr inbounds %"class.v8::internal::QuickCheckDetails", %"class.v8::internal::QuickCheckDetails"* %100, i64 0, i32 0
  store i32 %86, i32* %101, align 4
  %102 = icmp eq %"class.v8::internal::ZoneList.1140"* %96, null
  br i1 %102, label %106, label %103

103:                                              ; preds = %85
  %104 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %96, i64 0, i32 2
  %105 = load i32, i32* %104, align 4
  br label %106

106:                                              ; preds = %85, %103
  %107 = phi i32 [ %105, %103 ], [ 0, %85 ]
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %65) #18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %65, i8* align 8 %66, i64 120, i1 false)
  %108 = load i8, i8* %51, align 4, !range !3
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %112, label %110

110:                                              ; preds = %106
  %111 = load i32, i32* %47, align 4
  br label %112

112:                                              ; preds = %106, %110
  %113 = phi i32 [ %111, %110 ], [ 0, %106 ]
  store i32 %113, i32* %67, align 8
  %114 = load i8, i8* %53, align 1, !range !3
  %115 = icmp eq i8 %114, 0
  br i1 %115, label %118, label %116

116:                                              ; preds = %112
  %117 = load i32, i32* %47, align 4
  store i32 %117, i32* %68, align 4
  br label %118

118:                                              ; preds = %112, %116
  %119 = load i32, i32* %70, align 8
  %120 = icmp sgt i32 %119, 0
  br i1 %120, label %121, label %168

121:                                              ; preds = %118
  %122 = sext i32 %119 to i64
  %123 = add nsw i64 %122, -1
  %124 = and i64 %122, 7
  %125 = icmp ult i64 %123, 7
  br i1 %125, label %157, label %126

126:                                              ; preds = %121
  %127 = sub nsw i64 %122, %124
  br label %128

128:                                              ; preds = %128, %126
  %129 = phi i64 [ 0, %126 ], [ %153, %128 ]
  %130 = phi i64 [ %127, %126 ], [ %155, %128 ]
  %131 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 7, i32 1, i64 %129, i32 0
  %132 = or i64 %129, 1
  %133 = bitcast i32* %131 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %133, i8 0, i64 9, i1 false) #18
  %134 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 7, i32 1, i64 %132, i32 0
  %135 = or i64 %129, 2
  %136 = bitcast i32* %134 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %136, i8 0, i64 9, i1 false) #18
  %137 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 7, i32 1, i64 %135, i32 0
  %138 = or i64 %129, 3
  %139 = bitcast i32* %137 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %139, i8 0, i64 9, i1 false) #18
  %140 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 7, i32 1, i64 %138, i32 0
  %141 = or i64 %129, 4
  %142 = bitcast i32* %140 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %142, i8 0, i64 9, i1 false) #18
  %143 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 7, i32 1, i64 %141, i32 0
  %144 = or i64 %129, 5
  %145 = bitcast i32* %143 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %145, i8 0, i64 9, i1 false) #18
  %146 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 7, i32 1, i64 %144, i32 0
  %147 = or i64 %129, 6
  %148 = bitcast i32* %146 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %148, i8 0, i64 9, i1 false) #18
  %149 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 7, i32 1, i64 %147, i32 0
  %150 = or i64 %129, 7
  %151 = bitcast i32* %149 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %151, i8 0, i64 9, i1 false) #18
  %152 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 7, i32 1, i64 %150, i32 0
  %153 = add nuw nsw i64 %129, 8
  %154 = bitcast i32* %152 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %154, i8 0, i64 9, i1 false) #18
  %155 = add i64 %130, -8
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %128

157:                                              ; preds = %128, %121
  %158 = phi i64 [ 0, %121 ], [ %153, %128 ]
  %159 = icmp eq i64 %124, 0
  br i1 %159, label %168, label %160

160:                                              ; preds = %157, %160
  %161 = phi i64 [ %164, %160 ], [ %158, %157 ]
  %162 = phi i64 [ %166, %160 ], [ %124, %157 ]
  %163 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 7, i32 1, i64 %161, i32 0
  %164 = add nuw nsw i64 %161, 1
  %165 = bitcast i32* %163 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %165, i8 0, i64 9, i1 false) #18
  %166 = add i64 %162, -1
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %160, !llvm.loop !31

168:                                              ; preds = %157, %160, %118
  store i32 0, i32* %70, align 8
  %169 = load i8, i8* %71, align 8, !range !3
  %170 = icmp eq i8 %169, 0
  br i1 %170, label %172, label %171

171:                                              ; preds = %168
  store i32 0, i32* %72, align 4
  br label %172

172:                                              ; preds = %168, %171
  br i1 %89, label %175, label %173

173:                                              ; preds = %172
  %174 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %99, i64 0, i32 2
  store %"class.v8::internal::Label"* %174, %"class.v8::internal::Label"** %73, align 8
  br label %175

175:                                              ; preds = %173, %172
  %176 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %99, i64 0, i32 1
  store i8 %108, i8* %176, align 4
  %177 = load i8, i8* %74, align 1, !range !3
  %178 = icmp eq i8 %177, 0
  br i1 %178, label %197, label %179

179:                                              ; preds = %175
  %180 = icmp eq i64 %88, 0
  %181 = load i1 (%"class.v8::internal::ChoiceNode"*, i1)**, i1 (%"class.v8::internal::ChoiceNode"*, i1)*** %75, align 8
  %182 = getelementptr inbounds i1 (%"class.v8::internal::ChoiceNode"*, i1)*, i1 (%"class.v8::internal::ChoiceNode"*, i1)** %181, i64 11
  %183 = load i1 (%"class.v8::internal::ChoiceNode"*, i1)*, i1 (%"class.v8::internal::ChoiceNode"*, i1)** %182, align 8
  %184 = call zeroext i1 %183(%"class.v8::internal::ChoiceNode"* %0, i1 zeroext %180) #18
  br i1 %184, label %185, label %197

185:                                              ; preds = %179
  %186 = load i8, i8* %53, align 1, !range !3
  %187 = icmp ne i8 %186, 0
  %188 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %99, i64 0, i32 0
  %189 = call zeroext i1 @_ZN2v88internal10RegExpNode14EmitQuickCheckEPNS0_14RegExpCompilerEPNS0_5TraceES5_bPNS0_5LabelEPNS0_17QuickCheckDetailsEbPNS0_10ChoiceNodeE(%"class.v8::internal::RegExpNode"* %94, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %4, %"class.v8::internal::Trace"* nonnull %7, i1 zeroext %187, %"class.v8::internal::Label"* %188, %"class.v8::internal::QuickCheckDetails"* %100, i1 zeroext %90, %"class.v8::internal::ChoiceNode"* %0)
  br i1 %189, label %190, label %197

190:                                              ; preds = %185
  store i8 1, i8* %51, align 4
  store i8 1, i8* %53, align 1
  br i1 %89, label %191, label %252

191:                                              ; preds = %190
  %192 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %76, align 8
  %193 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %192, i64 8
  %194 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %193, align 8
  call void %194(%"class.v8::internal::RegExpMacroAssembler"* %9, %"class.v8::internal::Label"* %188) #18
  %195 = bitcast %"class.v8::internal::QuickCheckDetails"* %100 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 4 %195, i64 61, i1 false) #18
  %196 = load i32, i32* %47, align 4
  store i32 %196, i32* %67, align 8
  store i32 %196, i32* %68, align 4
  br label %210

197:                                              ; preds = %175, %185, %179
  %198 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %99, i64 0, i32 3, i32 4
  %199 = load i8, i8* %198, align 4, !range !3
  %200 = icmp eq i8 %199, 0
  br i1 %200, label %207, label %201

201:                                              ; preds = %197
  br i1 %89, label %202, label %257

202:                                              ; preds = %201
  %203 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %78, align 8
  %204 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %76, align 8
  %205 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %204, i64 29
  %206 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %205, align 8
  call void %206(%"class.v8::internal::RegExpMacroAssembler"* %9, %"class.v8::internal::Label"* %203) #18
  br label %257

207:                                              ; preds = %197
  %208 = icmp eq i64 %88, %82
  br i1 %208, label %210, label %209

209:                                              ; preds = %207
  store i8 0, i8* %176, align 4
  store i32 0, i32* %67, align 8
  br label %210

210:                                              ; preds = %191, %207, %209
  %211 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %79, align 8
  %212 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %211, null
  br i1 %212, label %214, label %213

213:                                              ; preds = %210
  store i32 %60, i32* %80, align 8
  br label %214

214:                                              ; preds = %210, %213
  %215 = icmp sgt i32 %107, 0
  br i1 %215, label %216, label %219

216:                                              ; preds = %214
  %217 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %96, i64 0, i32 0
  %218 = zext i32 %107 to i64
  br label %224

219:                                              ; preds = %249, %214
  %220 = bitcast %"class.v8::internal::RegExpNode"* %94 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %221 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %220, align 8
  %222 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %221, i64 3
  %223 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %222, align 8
  call void %223(%"class.v8::internal::RegExpNode"* %94, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %7) #18
  store i8 0, i8* %51, align 4
  br label %252

224:                                              ; preds = %249, %216
  %225 = phi i64 [ 0, %216 ], [ %250, %249 ]
  %226 = load %"class.v8::internal::Guard"**, %"class.v8::internal::Guard"*** %217, align 8
  %227 = getelementptr inbounds %"class.v8::internal::Guard"*, %"class.v8::internal::Guard"** %226, i64 %225
  %228 = load %"class.v8::internal::Guard"*, %"class.v8::internal::Guard"** %227, align 8
  %229 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %228, i64 0, i32 1
  %230 = load i32, i32* %229, align 4
  switch i32 %230, label %249 [
    i32 0, label %231
    i32 1, label %240
  ]

231:                                              ; preds = %224
  %232 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %228, i64 0, i32 0
  %233 = load i32, i32* %232, align 4
  %234 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %228, i64 0, i32 2
  %235 = load i32, i32* %234, align 4
  %236 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %73, align 8
  %237 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %81, align 8
  %238 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %237, i64 30
  %239 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %238, align 8
  call void %239(%"class.v8::internal::RegExpMacroAssembler"* %9, i32 %233, i32 %235, %"class.v8::internal::Label"* %236) #18
  br label %249

240:                                              ; preds = %224
  %241 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %228, i64 0, i32 0
  %242 = load i32, i32* %241, align 4
  %243 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %228, i64 0, i32 2
  %244 = load i32, i32* %243, align 4
  %245 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %73, align 8
  %246 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %81, align 8
  %247 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %246, i64 31
  %248 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %247, align 8
  call void %248(%"class.v8::internal::RegExpMacroAssembler"* %9, i32 %242, i32 %244, %"class.v8::internal::Label"* %245) #18
  br label %249

249:                                              ; preds = %224, %231, %240
  %250 = add nuw nsw i64 %225, 1
  %251 = icmp eq i64 %250, %218
  br i1 %251, label %219, label %224

252:                                              ; preds = %190, %219
  %253 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %99, i64 0, i32 2
  %254 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %76, align 8
  %255 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %254, i64 8
  %256 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %255, align 8
  call void %256(%"class.v8::internal::RegExpMacroAssembler"* %9, %"class.v8::internal::Label"* %253) #18
  br label %257

257:                                              ; preds = %202, %201, %252
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %65) #18
  %258 = add nsw i64 %88, 1
  %259 = trunc i64 %258 to i32
  %260 = icmp eq i32 %57, %259
  br i1 %260, label %84, label %261

261:                                              ; preds = %257
  %262 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %54, align 8
  %263 = load i32, i32* %47, align 4
  br label %85
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ChoiceNode25EmitOutOfLineContinuationEPNS0_14RegExpCompilerEPNS0_5TraceENS0_18GuardedAlternativeEPNS0_21AlternativeGenerationEib(%"class.v8::internal::ChoiceNode"* nocapture readonly, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"* nocapture readonly, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::AlternativeGeneration"*, i32, i1 zeroext) local_unnamed_addr #2 align 2 {
  %9 = alloca %"class.v8::internal::Trace", align 8
  %10 = alloca %"class.v8::internal::Label", align 4
  %11 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %5, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %133

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %5, i64 0, i32 0
  %16 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %17 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %16, align 8
  %18 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %17 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %19 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %19, i64 8
  %21 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %20, align 8
  tail call void %21(%"class.v8::internal::RegExpMacroAssembler"* %17, %"class.v8::internal::Label"* %15) #18
  %22 = bitcast %"class.v8::internal::Trace"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %22) #18
  %23 = bitcast %"class.v8::internal::Trace"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 %23, i64 120, i1 false)
  %24 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 5
  store i32 %6, i32* %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %5, i64 0, i32 3
  %26 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 7
  %27 = bitcast %"class.v8::internal::QuickCheckDetails"* %26 to i8*
  %28 = bitcast %"class.v8::internal::QuickCheckDetails"* %25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 4 %28, i64 61, i1 false) #18
  %29 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %0, i64 0, i32 2
  %30 = load i8, i8* %29, align 8, !range !3
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %34, label %32

32:                                               ; preds = %14
  %33 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 9
  store i32 0, i32* %33, align 4
  br label %34

34:                                               ; preds = %14, %32
  %35 = icmp eq %"class.v8::internal::ZoneList.1140"* %4, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %4, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  br label %39

39:                                               ; preds = %34, %36
  %40 = phi i32 [ %38, %36 ], [ 0, %34 ]
  br i1 %7, label %41, label %93

41:                                               ; preds = %39
  %42 = bitcast %"class.v8::internal::Label"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #18
  %43 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %10, i64 0, i32 0
  store i32 0, i32* %43, align 4
  %44 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %10, i64 0, i32 1
  store i32 0, i32* %44, align 4
  %45 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 2
  store %"class.v8::internal::Label"* %10, %"class.v8::internal::Label"** %45, align 8
  %46 = icmp sgt i32 %40, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %4, i64 0, i32 0
  %49 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %17 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)***
  %50 = zext i32 %40 to i64
  br label %65

51:                                               ; preds = %90, %41
  %52 = bitcast %"class.v8::internal::RegExpNode"* %3 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %53 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %53, i64 3
  %55 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %54, align 8
  call void %55(%"class.v8::internal::RegExpNode"* %3, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %9) #18
  %56 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %18, align 8
  %57 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %56, i64 8
  %58 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %57, align 8
  call void %58(%"class.v8::internal::RegExpMacroAssembler"* %17, %"class.v8::internal::Label"* nonnull %10) #18
  %59 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %60 = load i32, i32* %59, align 8
  call void @_ZN2v88internal20RegExpMacroAssembler20LoadCurrentCharacterEiPNS0_5LabelEbii(%"class.v8::internal::RegExpMacroAssembler"* %17, i32 %60, %"class.v8::internal::Label"* null, i1 zeroext false, i32 %6, i32 -1) #18
  %61 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %5, i64 0, i32 2
  %62 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %18, align 8
  %63 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %62, i64 29
  %64 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %63, align 8
  call void %64(%"class.v8::internal::RegExpMacroAssembler"* %17, %"class.v8::internal::Label"* %61) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #18
  br label %132

65:                                               ; preds = %90, %47
  %66 = phi i64 [ 0, %47 ], [ %91, %90 ]
  %67 = load %"class.v8::internal::Guard"**, %"class.v8::internal::Guard"*** %48, align 8
  %68 = getelementptr inbounds %"class.v8::internal::Guard"*, %"class.v8::internal::Guard"** %67, i64 %66
  %69 = load %"class.v8::internal::Guard"*, %"class.v8::internal::Guard"** %68, align 8
  %70 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %69, i64 0, i32 1
  %71 = load i32, i32* %70, align 4
  switch i32 %71, label %90 [
    i32 0, label %72
    i32 1, label %81
  ]

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %69, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %69, i64 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %45, align 8
  %78 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %49, align 8
  %79 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %78, i64 30
  %80 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %79, align 8
  call void %80(%"class.v8::internal::RegExpMacroAssembler"* %17, i32 %74, i32 %76, %"class.v8::internal::Label"* %77) #18
  br label %90

81:                                               ; preds = %65
  %82 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %69, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %69, i64 0, i32 2
  %85 = load i32, i32* %84, align 4
  %86 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %45, align 8
  %87 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %49, align 8
  %88 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %87, i64 31
  %89 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %88, align 8
  call void %89(%"class.v8::internal::RegExpMacroAssembler"* %17, i32 %83, i32 %85, %"class.v8::internal::Label"* %86) #18
  br label %90

90:                                               ; preds = %65, %72, %81
  %91 = add nuw nsw i64 %66, 1
  %92 = icmp eq i64 %91, %50
  br i1 %92, label %51, label %65

93:                                               ; preds = %39
  %94 = getelementptr inbounds %"class.v8::internal::AlternativeGeneration", %"class.v8::internal::AlternativeGeneration"* %5, i64 0, i32 2
  %95 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 2
  store %"class.v8::internal::Label"* %94, %"class.v8::internal::Label"** %95, align 8
  %96 = icmp sgt i32 %40, 0
  br i1 %96, label %97, label %101

97:                                               ; preds = %93
  %98 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %4, i64 0, i32 0
  %99 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %17 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)***
  %100 = zext i32 %40 to i64
  br label %106

101:                                              ; preds = %129, %93
  %102 = bitcast %"class.v8::internal::RegExpNode"* %3 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %103 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %102, align 8
  %104 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %103, i64 3
  %105 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %104, align 8
  call void %105(%"class.v8::internal::RegExpNode"* %3, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %9) #18
  br label %132

106:                                              ; preds = %129, %97
  %107 = phi i64 [ 0, %97 ], [ %130, %129 ]
  %108 = load %"class.v8::internal::Guard"**, %"class.v8::internal::Guard"*** %98, align 8
  %109 = getelementptr inbounds %"class.v8::internal::Guard"*, %"class.v8::internal::Guard"** %108, i64 %107
  %110 = load %"class.v8::internal::Guard"*, %"class.v8::internal::Guard"** %109, align 8
  %111 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %110, i64 0, i32 1
  %112 = load i32, i32* %111, align 4
  switch i32 %112, label %129 [
    i32 0, label %113
    i32 1, label %121
  ]

113:                                              ; preds = %106
  %114 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %110, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %110, i64 0, i32 2
  %117 = load i32, i32* %116, align 4
  %118 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %99, align 8
  %119 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %118, i64 30
  %120 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %119, align 8
  tail call void %120(%"class.v8::internal::RegExpMacroAssembler"* %17, i32 %115, i32 %117, %"class.v8::internal::Label"* %94) #18
  br label %129

121:                                              ; preds = %106
  %122 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %110, i64 0, i32 0
  %123 = load i32, i32* %122, align 4
  %124 = getelementptr inbounds %"class.v8::internal::Guard", %"class.v8::internal::Guard"* %110, i64 0, i32 2
  %125 = load i32, i32* %124, align 4
  %126 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %99, align 8
  %127 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %126, i64 31
  %128 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %127, align 8
  tail call void %128(%"class.v8::internal::RegExpMacroAssembler"* %17, i32 %123, i32 %125, %"class.v8::internal::Label"* %94) #18
  br label %129

129:                                              ; preds = %106, %113, %121
  %130 = add nuw nsw i64 %107, 1
  %131 = icmp eq i64 %130, %100
  br i1 %131, label %101, label %106

132:                                              ; preds = %101, %51
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %22) #18
  br label %133

133:                                              ; preds = %8, %132
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10ActionNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::ActionNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*) unnamed_addr #2 align 2 {
  %4 = alloca %"class.v8::internal::Trace::DeferredCapture", align 8
  %5 = alloca %"class.v8::internal::Trace", align 8
  %6 = alloca %"class.v8::internal::Trace::DeferredIncrementRegister", align 8
  %7 = alloca %"class.v8::internal::Trace", align 8
  %8 = alloca %"class.v8::internal::Trace::DeferredSetRegisterForLoop", align 8
  %9 = alloca %"class.v8::internal::Trace", align 8
  %10 = alloca %"class.v8::internal::Trace::DeferredClearCaptures", align 8
  %11 = alloca %"class.v8::internal::Trace", align 8
  %12 = alloca %"class.v8::internal::Label", align 4
  %13 = alloca %"class.v8::internal::Label", align 4
  %14 = alloca %"class.v8::internal::Trace", align 8
  %15 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %16 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 0
  %18 = tail call i32 @_ZN2v88internal10RegExpNode13LimitVersionsEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::RegExpNode"* %17, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2)
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %371, label %20

20:                                               ; preds = %3
  %21 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 5
  %22 = load i32, i32* %21, align 8
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %21, align 8
  %24 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  switch i32 %25, label %367 [
    i32 2, label %26
    i32 1, label %53
    i32 0, label %73
    i32 6, label %96
    i32 3, label %124
    i32 5, label %172
    i32 4, label %287
  ]

26:                                               ; preds = %20
  %27 = bitcast %"class.v8::internal::Trace::DeferredCapture"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #18
  %28 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 1
  %31 = bitcast i32* %30 to i8*
  %32 = load i8, i8* %31, align 4, !range !3
  %33 = getelementptr inbounds %"class.v8::internal::Trace::DeferredCapture", %"class.v8::internal::Trace::DeferredCapture"* %4, i64 0, i32 0, i32 0
  store i32 2, i32* %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::Trace::DeferredCapture", %"class.v8::internal::Trace::DeferredCapture"* %4, i64 0, i32 0, i32 1
  store i32 %29, i32* %34, align 4
  %35 = getelementptr inbounds %"class.v8::internal::Trace::DeferredCapture", %"class.v8::internal::Trace::DeferredCapture"* %4, i64 0, i32 0, i32 2
  %36 = getelementptr inbounds %"class.v8::internal::Trace::DeferredCapture", %"class.v8::internal::Trace::DeferredCapture"* %4, i64 0, i32 1
  %37 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %38 = load i32, i32* %37, align 8
  store i32 %38, i32* %36, align 8
  %39 = getelementptr inbounds %"class.v8::internal::Trace::DeferredCapture", %"class.v8::internal::Trace::DeferredCapture"* %4, i64 0, i32 2
  store i8 %32, i8* %39, align 4
  %40 = bitcast %"class.v8::internal::Trace"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %40) #18
  %41 = bitcast %"class.v8::internal::Trace"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %40, i8* align 8 %41, i64 120, i1 false)
  %42 = getelementptr inbounds %"class.v8::internal::Trace::DeferredCapture", %"class.v8::internal::Trace::DeferredCapture"* %4, i64 0, i32 0
  %43 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %5, i64 0, i32 1
  %44 = bitcast %"class.v8::internal::Trace::DeferredAction"** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast %"class.v8::internal::Trace::DeferredAction"** %35 to i64*
  store i64 %45, i64* %46, align 8
  store %"class.v8::internal::Trace::DeferredAction"* %42, %"class.v8::internal::Trace::DeferredAction"** %43, align 8
  %47 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 1
  %48 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %47, align 8
  %49 = bitcast %"class.v8::internal::RegExpNode"* %48 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %50 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %50, i64 3
  %52 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %51, align 8
  call void %52(%"class.v8::internal::RegExpNode"* %48, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %5) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %40) #18
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #18
  br label %368

53:                                               ; preds = %20
  %54 = bitcast %"class.v8::internal::Trace::DeferredIncrementRegister"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54) #18
  %55 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %"class.v8::internal::Trace::DeferredIncrementRegister", %"class.v8::internal::Trace::DeferredIncrementRegister"* %6, i64 0, i32 0, i32 0
  store i32 1, i32* %57, align 8
  %58 = getelementptr inbounds %"class.v8::internal::Trace::DeferredIncrementRegister", %"class.v8::internal::Trace::DeferredIncrementRegister"* %6, i64 0, i32 0, i32 1
  store i32 %56, i32* %58, align 4
  %59 = getelementptr inbounds %"class.v8::internal::Trace::DeferredIncrementRegister", %"class.v8::internal::Trace::DeferredIncrementRegister"* %6, i64 0, i32 0, i32 2
  %60 = bitcast %"class.v8::internal::Trace"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %60) #18
  %61 = bitcast %"class.v8::internal::Trace"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %60, i8* align 8 %61, i64 120, i1 false)
  %62 = getelementptr inbounds %"class.v8::internal::Trace::DeferredIncrementRegister", %"class.v8::internal::Trace::DeferredIncrementRegister"* %6, i64 0, i32 0
  %63 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %7, i64 0, i32 1
  %64 = bitcast %"class.v8::internal::Trace::DeferredAction"** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.v8::internal::Trace::DeferredAction"** %59 to i64*
  store i64 %65, i64* %66, align 8
  store %"class.v8::internal::Trace::DeferredAction"* %62, %"class.v8::internal::Trace::DeferredAction"** %63, align 8
  %67 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 1
  %68 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %67, align 8
  %69 = bitcast %"class.v8::internal::RegExpNode"* %68 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %70 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %69, align 8
  %71 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %70, i64 3
  %72 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %71, align 8
  call void %72(%"class.v8::internal::RegExpNode"* %68, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %7) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %60) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54) #18
  br label %368

73:                                               ; preds = %20
  %74 = bitcast %"class.v8::internal::Trace::DeferredSetRegisterForLoop"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %74) #18
  %75 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 0
  %76 = load i32, i32* %75, align 8
  %77 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %"class.v8::internal::Trace::DeferredSetRegisterForLoop", %"class.v8::internal::Trace::DeferredSetRegisterForLoop"* %8, i64 0, i32 0, i32 0
  store i32 0, i32* %79, align 8
  %80 = getelementptr inbounds %"class.v8::internal::Trace::DeferredSetRegisterForLoop", %"class.v8::internal::Trace::DeferredSetRegisterForLoop"* %8, i64 0, i32 0, i32 1
  store i32 %76, i32* %80, align 4
  %81 = getelementptr inbounds %"class.v8::internal::Trace::DeferredSetRegisterForLoop", %"class.v8::internal::Trace::DeferredSetRegisterForLoop"* %8, i64 0, i32 0, i32 2
  %82 = getelementptr inbounds %"class.v8::internal::Trace::DeferredSetRegisterForLoop", %"class.v8::internal::Trace::DeferredSetRegisterForLoop"* %8, i64 0, i32 1
  store i32 %78, i32* %82, align 8
  %83 = bitcast %"class.v8::internal::Trace"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %83) #18
  %84 = bitcast %"class.v8::internal::Trace"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %83, i8* align 8 %84, i64 120, i1 false)
  %85 = getelementptr inbounds %"class.v8::internal::Trace::DeferredSetRegisterForLoop", %"class.v8::internal::Trace::DeferredSetRegisterForLoop"* %8, i64 0, i32 0
  %86 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %9, i64 0, i32 1
  %87 = bitcast %"class.v8::internal::Trace::DeferredAction"** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = bitcast %"class.v8::internal::Trace::DeferredAction"** %81 to i64*
  store i64 %88, i64* %89, align 8
  store %"class.v8::internal::Trace::DeferredAction"* %85, %"class.v8::internal::Trace::DeferredAction"** %86, align 8
  %90 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 1
  %91 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %90, align 8
  %92 = bitcast %"class.v8::internal::RegExpNode"* %91 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %93 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %92, align 8
  %94 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %93, i64 3
  %95 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %94, align 8
  call void %95(%"class.v8::internal::RegExpNode"* %91, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %9) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %83) #18
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %74) #18
  br label %368

96:                                               ; preds = %20
  %97 = bitcast %"class.v8::internal::Trace::DeferredClearCaptures"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %97) #18
  %98 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  %103 = shl nuw i64 %102, 32
  %104 = zext i32 %99 to i64
  %105 = or i64 %103, %104
  %106 = getelementptr inbounds %"class.v8::internal::Trace::DeferredClearCaptures", %"class.v8::internal::Trace::DeferredClearCaptures"* %10, i64 0, i32 0, i32 0
  store i32 6, i32* %106, align 8
  %107 = getelementptr inbounds %"class.v8::internal::Trace::DeferredClearCaptures", %"class.v8::internal::Trace::DeferredClearCaptures"* %10, i64 0, i32 0, i32 1
  store i32 -1, i32* %107, align 4
  %108 = getelementptr inbounds %"class.v8::internal::Trace::DeferredClearCaptures", %"class.v8::internal::Trace::DeferredClearCaptures"* %10, i64 0, i32 0, i32 2
  %109 = getelementptr inbounds %"class.v8::internal::Trace::DeferredClearCaptures", %"class.v8::internal::Trace::DeferredClearCaptures"* %10, i64 0, i32 1
  %110 = bitcast %"class.v8::internal::Interval"* %109 to i64*
  store i64 %105, i64* %110, align 8
  %111 = bitcast %"class.v8::internal::Trace"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %111) #18
  %112 = bitcast %"class.v8::internal::Trace"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %111, i8* align 8 %112, i64 120, i1 false)
  %113 = getelementptr inbounds %"class.v8::internal::Trace::DeferredClearCaptures", %"class.v8::internal::Trace::DeferredClearCaptures"* %10, i64 0, i32 0
  %114 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %11, i64 0, i32 1
  %115 = bitcast %"class.v8::internal::Trace::DeferredAction"** %114 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = bitcast %"class.v8::internal::Trace::DeferredAction"** %108 to i64*
  store i64 %116, i64* %117, align 8
  store %"class.v8::internal::Trace::DeferredAction"* %113, %"class.v8::internal::Trace::DeferredAction"** %114, align 8
  %118 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 1
  %119 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %118, align 8
  %120 = bitcast %"class.v8::internal::RegExpNode"* %119 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %121 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %120, align 8
  %122 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %121, i64 3
  %123 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %122, align 8
  call void %123(%"class.v8::internal::RegExpNode"* %119, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %11) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %111) #18
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %97) #18
  br label %368

124:                                              ; preds = %20
  %125 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %126 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %125, align 8
  %127 = icmp eq %"class.v8::internal::Label"* %126, null
  br i1 %127, label %128, label %152

128:                                              ; preds = %124
  %129 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 1
  %130 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %129, align 8
  %131 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %130, null
  br i1 %131, label %132, label %152

132:                                              ; preds = %128
  %133 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %134 = load i32, i32* %133, align 8
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %152

136:                                              ; preds = %132
  %137 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 5
  %138 = load i32, i32* %137, align 8
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %152

140:                                              ; preds = %136
  %141 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 6
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %152

144:                                              ; preds = %140
  %145 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 7, i32 0
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %152

148:                                              ; preds = %144
  %149 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 9
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, -1
  br i1 %151, label %153, label %152

152:                                              ; preds = %124, %128, %132, %136, %140, %144, %148
  tail call void @_ZN2v88internal5Trace5FlushEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::Trace"* %2, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %17)
  br label %368

153:                                              ; preds = %148
  %154 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 1
  %155 = load i32, i32* %154, align 4
  %156 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %16 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)***
  %157 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*** %156, align 8
  %158 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %157, i64 45
  %159 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %158, align 8
  tail call void %159(%"class.v8::internal::RegExpMacroAssembler"* %16, i32 %155, i32 0) #18
  %160 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 0
  %161 = load i32, i32* %160, align 8
  %162 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %16 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32)***
  %163 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %162, align 8
  %164 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %163, i64 47
  %165 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %164, align 8
  tail call void %165(%"class.v8::internal::RegExpMacroAssembler"* %16, i32 %161) #18
  %166 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 1
  %167 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %166, align 8
  %168 = bitcast %"class.v8::internal::RegExpNode"* %167 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %169 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %168, align 8
  %170 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %169, i64 3
  %171 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %170, align 8
  tail call void %171(%"class.v8::internal::RegExpNode"* %167, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2) #18
  br label %368

172:                                              ; preds = %20
  %173 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 0
  %174 = load i32, i32* %173, align 8
  %175 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 1
  %176 = load i32, i32* %175, align 4
  %177 = icmp ne i32 %176, -1
  %178 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 1
  %179 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %178, align 8
  %180 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %179, null
  br i1 %180, label %230, label %181

181:                                              ; preds = %172, %202
  %182 = phi %"class.v8::internal::Trace::DeferredAction"* [ %204, %202 ], [ %179, %172 ]
  %183 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %182, i64 0, i32 0
  %184 = load i32, i32* %183, align 8
  %185 = icmp eq i32 %184, 6
  br i1 %185, label %186, label %192

186:                                              ; preds = %181
  %187 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %182, i64 1
  %188 = bitcast %"class.v8::internal::Trace::DeferredAction"* %187 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = trunc i64 %189 to i32
  %191 = icmp slt i32 %174, %190
  br i1 %191, label %202, label %196

192:                                              ; preds = %181
  %193 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %182, i64 0, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = icmp eq i32 %194, %174
  br i1 %195, label %200, label %202

196:                                              ; preds = %186
  %197 = lshr i64 %189, 32
  %198 = trunc i64 %197 to i32
  %199 = icmp sgt i32 %174, %198
  br i1 %199, label %202, label %230

200:                                              ; preds = %192
  %201 = icmp eq i32 %184, 2
  br i1 %201, label %206, label %230

202:                                              ; preds = %196, %192, %186
  %203 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %182, i64 0, i32 2
  %204 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %203, align 8
  %205 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %204, null
  br i1 %205, label %230, label %181

206:                                              ; preds = %200
  %207 = getelementptr inbounds %"class.v8::internal::Trace::DeferredAction", %"class.v8::internal::Trace::DeferredAction"* %182, i64 1, i32 0
  %208 = load i32, i32* %207, align 8
  %209 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %210 = load i32, i32* %209, align 8
  %211 = xor i1 %177, true
  %212 = icmp eq i32 %208, %210
  %213 = and i1 %212, %211
  br i1 %213, label %214, label %221

214:                                              ; preds = %206
  %215 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %216 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %215, align 8
  %217 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %16 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %218 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %217, align 8
  %219 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %218, i64 29
  %220 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %219, align 8
  tail call void %220(%"class.v8::internal::RegExpMacroAssembler"* %16, %"class.v8::internal::Label"* %216) #18
  br label %368

221:                                              ; preds = %206
  %222 = icmp slt i32 %208, %210
  br i1 %222, label %223, label %230

223:                                              ; preds = %221
  %224 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 1
  %225 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %224, align 8
  %226 = bitcast %"class.v8::internal::RegExpNode"* %225 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %227 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %226, align 8
  %228 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %227, i64 3
  %229 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %228, align 8
  tail call void %229(%"class.v8::internal::RegExpNode"* %225, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2) #18
  br label %368

230:                                              ; preds = %202, %196, %172, %200, %221
  %231 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %232 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %231, align 8
  %233 = icmp ne %"class.v8::internal::Label"* %232, null
  %234 = xor i1 %180, true
  %235 = or i1 %233, %234
  br i1 %235, label %256, label %236

236:                                              ; preds = %230
  %237 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %238 = load i32, i32* %237, align 8
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %256

240:                                              ; preds = %236
  %241 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 5
  %242 = load i32, i32* %241, align 8
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %256

244:                                              ; preds = %240
  %245 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 6
  %246 = load i32, i32* %245, align 4
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %248, label %256

248:                                              ; preds = %244
  %249 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 7, i32 0
  %250 = load i32, i32* %249, align 4
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %252, label %256

252:                                              ; preds = %248
  %253 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 9
  %254 = load i32, i32* %253, align 4
  %255 = icmp eq i32 %254, -1
  br i1 %255, label %257, label %256

256:                                              ; preds = %230, %236, %240, %244, %248, %252
  tail call void @_ZN2v88internal5Trace5FlushEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::Trace"* %2, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %17)
  br label %368

257:                                              ; preds = %252
  %258 = bitcast %"class.v8::internal::Label"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %258) #18
  %259 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %12, i64 0, i32 0
  store i32 0, i32* %259, align 4
  %260 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %12, i64 0, i32 1
  store i32 0, i32* %260, align 4
  br i1 %177, label %261, label %270

261:                                              ; preds = %257
  %262 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 2
  %263 = load i32, i32* %262, align 8
  %264 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %16 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)***
  %265 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*** %264, align 8
  %266 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %265, i64 31
  %267 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32, %"class.v8::internal::Label"*)** %266, align 8
  call void %267(%"class.v8::internal::RegExpMacroAssembler"* %16, i32 %176, i32 %263, %"class.v8::internal::Label"* nonnull %12) #18
  %268 = load i32, i32* %173, align 8
  %269 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %231, align 8
  br label %270

270:                                              ; preds = %261, %257
  %271 = phi %"class.v8::internal::Label"* [ %269, %261 ], [ null, %257 ]
  %272 = phi i32 [ %268, %261 ], [ %174, %257 ]
  %273 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %16 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %274 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %273, align 8
  %275 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %274, i64 32
  %276 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %275, align 8
  call void %276(%"class.v8::internal::RegExpMacroAssembler"* %16, i32 %272, %"class.v8::internal::Label"* %271) #18
  %277 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %16 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %278 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %277, align 8
  %279 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %278, i64 8
  %280 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %279, align 8
  call void %280(%"class.v8::internal::RegExpMacroAssembler"* %16, %"class.v8::internal::Label"* nonnull %12) #18
  %281 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 1
  %282 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %281, align 8
  %283 = bitcast %"class.v8::internal::RegExpNode"* %282 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %284 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %283, align 8
  %285 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %284, i64 3
  %286 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %285, align 8
  call void %286(%"class.v8::internal::RegExpNode"* %282, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %258) #18
  br label %368

287:                                              ; preds = %20
  %288 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %289 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %288, align 8
  %290 = icmp eq %"class.v8::internal::Label"* %289, null
  br i1 %290, label %291, label %315

291:                                              ; preds = %287
  %292 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 1
  %293 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %292, align 8
  %294 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %293, null
  br i1 %294, label %295, label %315

295:                                              ; preds = %291
  %296 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %297 = load i32, i32* %296, align 8
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %299, label %315

299:                                              ; preds = %295
  %300 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 5
  %301 = load i32, i32* %300, align 8
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %303, label %315

303:                                              ; preds = %299
  %304 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 6
  %305 = load i32, i32* %304, align 4
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %315

307:                                              ; preds = %303
  %308 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 7, i32 0
  %309 = load i32, i32* %308, align 4
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %311, label %315

311:                                              ; preds = %307
  %312 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 9
  %313 = load i32, i32* %312, align 4
  %314 = icmp eq i32 %313, -1
  br i1 %314, label %316, label %315

315:                                              ; preds = %287, %291, %295, %299, %303, %307, %311
  tail call void @_ZN2v88internal5Trace5FlushEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::Trace"* %2, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %17)
  br label %368

316:                                              ; preds = %311
  %317 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 1
  %318 = load i32, i32* %317, align 4
  %319 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %16 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32)***
  %320 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %319, align 8
  %321 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %320, i64 40
  %322 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %321, align 8
  tail call void %322(%"class.v8::internal::RegExpMacroAssembler"* %16, i32 %318) #18
  %323 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 0
  %324 = load i32, i32* %323, align 8
  %325 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*** %319, align 8
  %326 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %325, i64 41
  %327 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32)** %326, align 8
  tail call void %327(%"class.v8::internal::RegExpMacroAssembler"* %16, i32 %324) #18
  %328 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 2
  %329 = load i32, i32* %328, align 8
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %338

331:                                              ; preds = %316
  %332 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 1
  %333 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %332, align 8
  %334 = bitcast %"class.v8::internal::RegExpNode"* %333 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %335 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %334, align 8
  %336 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %335, i64 3
  %337 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %336, align 8
  tail call void %337(%"class.v8::internal::RegExpNode"* %333, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2) #18
  br label %368

338:                                              ; preds = %316
  %339 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 1, i32 0, i32 3
  %340 = load i32, i32* %339, align 4
  %341 = bitcast %"class.v8::internal::Label"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %341) #18
  %342 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %13, i64 0, i32 0
  store i32 0, i32* %342, align 4
  %343 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %13, i64 0, i32 1
  store i32 0, i32* %343, align 4
  %344 = bitcast %"class.v8::internal::Trace"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %344) #18
  %345 = bitcast %"class.v8::internal::Trace"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %344, i8* align 8 %345, i64 120, i1 false)
  %346 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %14, i64 0, i32 2
  store %"class.v8::internal::Label"* %13, %"class.v8::internal::Label"** %346, align 8
  %347 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %0, i64 0, i32 0, i32 1
  %348 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %347, align 8
  %349 = bitcast %"class.v8::internal::RegExpNode"* %348 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %350 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %349, align 8
  %351 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %350, i64 3
  %352 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %351, align 8
  call void %352(%"class.v8::internal::RegExpNode"* %348, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* nonnull %14) #18
  %353 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %16 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %354 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %353, align 8
  %355 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %354, i64 8
  %356 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %355, align 8
  call void %356(%"class.v8::internal::RegExpMacroAssembler"* %16, %"class.v8::internal::Label"* nonnull %13) #18
  %357 = add i32 %329, -1
  %358 = add i32 %357, %340
  %359 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %16 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)***
  %360 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*** %359, align 8
  %361 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %360, i64 46
  %362 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i32)** %361, align 8
  call void %362(%"class.v8::internal::RegExpMacroAssembler"* %16, i32 %340, i32 %358) #18
  %363 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %16 to void (%"class.v8::internal::RegExpMacroAssembler"*)***
  %364 = load void (%"class.v8::internal::RegExpMacroAssembler"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*)*** %363, align 8
  %365 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %364, i64 7
  %366 = load void (%"class.v8::internal::RegExpMacroAssembler"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*)** %365, align 8
  call void %366(%"class.v8::internal::RegExpMacroAssembler"* %16) #18
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %344) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %341) #18
  br label %368

367:                                              ; preds = %20
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

368:                                              ; preds = %214, %256, %270, %223, %26, %53, %73, %96, %153, %152, %331, %338, %315
  %369 = load i32, i32* %21, align 8
  %370 = add nsw i32 %369, -1
  store i32 %370, i32* %21, align 8
  br label %371

371:                                              ; preds = %3, %368
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal17BackReferenceNode4EmitEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::BackReferenceNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 6
  %5 = load %"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::RegExpMacroAssembler"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 2
  %7 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %6, align 8
  %8 = icmp eq %"class.v8::internal::Label"* %7, null
  br i1 %8, label %9, label %29

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 1
  %11 = load %"class.v8::internal::Trace::DeferredAction"*, %"class.v8::internal::Trace::DeferredAction"** %10, align 8
  %12 = icmp eq %"class.v8::internal::Trace::DeferredAction"* %11, null
  br i1 %12, label %13, label %29

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 5
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 6
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 7, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %25, %21, %17, %13, %9, %3
  %30 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %0, i64 0, i32 0, i32 0
  br label %36

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.v8::internal::Trace", %"class.v8::internal::Trace"* %2, i64 0, i32 9
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, -1
  %35 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %0, i64 0, i32 0, i32 0
  br i1 %34, label %38, label %36

36:                                               ; preds = %29, %31
  %37 = phi %"class.v8::internal::RegExpNode"* [ %30, %29 ], [ %35, %31 ]
  tail call void @_ZN2v88internal5Trace5FlushEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::Trace"* %2, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::RegExpNode"* %37)
  br label %98

38:                                               ; preds = %31
  %39 = tail call i32 @_ZN2v88internal10RegExpNode13LimitVersionsEPNS0_14RegExpCompilerEPNS0_5TraceE(%"class.v8::internal::RegExpNode"* %35, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2)
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %98, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 5
  %43 = load i32, i32* %42, align 8
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %42, align 8
  %45 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %0, i64 0, i32 3, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %62, label %49

49:                                               ; preds = %41
  %50 = and i32 %46, 16
  %51 = icmp ne i32 %50, 0
  %52 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %0, i64 0, i32 1
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %0, i64 0, i32 4
  %55 = load i8, i8* %54, align 4, !range !3
  %56 = icmp ne i8 %55, 0
  %57 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %6, align 8
  %58 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %5 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, i1, %"class.v8::internal::Label"*)***
  %59 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, i1, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, i1, %"class.v8::internal::Label"*)*** %58, align 8
  %60 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, i1, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, i1, %"class.v8::internal::Label"*)** %59, i64 17
  %61 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, i1, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, i1, %"class.v8::internal::Label"*)** %60, align 8
  tail call void %61(%"class.v8::internal::RegExpMacroAssembler"* %5, i32 %53, i1 zeroext %56, i1 zeroext %51, %"class.v8::internal::Label"* %57) #18
  br label %73

62:                                               ; preds = %41
  %63 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %0, i64 0, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %0, i64 0, i32 4
  %66 = load i8, i8* %65, align 4, !range !3
  %67 = icmp ne i8 %66, 0
  %68 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %6, align 8
  %69 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %5 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, %"class.v8::internal::Label"*)***
  %70 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, %"class.v8::internal::Label"*)*** %69, align 8
  %71 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, %"class.v8::internal::Label"*)** %70, i64 16
  %72 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, i1, %"class.v8::internal::Label"*)** %71, align 8
  tail call void %72(%"class.v8::internal::RegExpMacroAssembler"* %5, i32 %64, i1 zeroext %67, %"class.v8::internal::Label"* %68) #18
  br label %73

73:                                               ; preds = %62, %49
  %74 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %0, i64 0, i32 4
  %75 = load i8, i8* %74, align 4, !range !3
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %78, label %77

77:                                               ; preds = %73
  store i32 -1, i32* %32, align 4
  br label %78

78:                                               ; preds = %73, %77
  %79 = load i32, i32* %45, align 8
  %80 = and i32 %79, 16
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %89, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %1, i64 0, i32 7
  %84 = load i8, i8* %83, align 8, !range !3
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %82
  %87 = load i32, i32* %14, align 8
  %88 = load %"class.v8::internal::Label"*, %"class.v8::internal::Label"** %6, align 8
  tail call void @_ZN2v88internal20RegExpMacroAssembler23CheckNotInSurrogatePairEiPNS0_5LabelE(%"class.v8::internal::RegExpMacroAssembler"* %5, i32 %87, %"class.v8::internal::Label"* %88) #18
  br label %89

89:                                               ; preds = %82, %78, %86
  %90 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %0, i64 0, i32 0, i32 1
  %91 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %90, align 8
  %92 = bitcast %"class.v8::internal::RegExpNode"* %91 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)***
  %93 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*** %92, align 8
  %94 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %93, i64 3
  %95 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::Trace"*)** %94, align 8
  tail call void %95(%"class.v8::internal::RegExpNode"* %91, %"class.v8::internal::RegExpCompiler"* %1, %"class.v8::internal::Trace"* %2) #18
  %96 = load i32, i32* %42, align 8
  %97 = add nsw i32 %96, -1
  store i32 %97, i32* %42, align 8
  br label %98

98:                                               ; preds = %89, %38, %36
  ret void
}

declare void @_ZN2v88internal20RegExpMacroAssembler23CheckNotInSurrogatePairEiPNS0_5LabelE(%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8TextNode16CalculateOffsetsEv(%"class.v8::internal::TextNode"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %3 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %3, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %1
  %8 = zext i32 %5 to i64
  br label %10

9:                                                ; preds = %27, %1
  ret void

10:                                               ; preds = %31, %7
  %11 = phi %"class.v8::internal::ZoneList"* [ %3, %7 ], [ %33, %31 ]
  %12 = phi i64 [ 0, %7 ], [ %29, %31 ]
  %13 = phi i32 [ 0, %7 ], [ %32, %31 ]
  %14 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %11, i64 0, i32 0
  %15 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %15, i64 %12, i32 0
  store i32 %13, i32* %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %15, i64 %12, i32 1
  %18 = load i32, i32* %17, align 4
  switch i32 %18, label %26 [
    i32 0, label %19
    i32 1, label %27
  ]

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %15, i64 %12, i32 2
  %21 = bitcast %"class.v8::internal::RegExpTree"** %20 to %"class.v8::internal::RegExpAtom"**
  %22 = load %"class.v8::internal::RegExpAtom"*, %"class.v8::internal::RegExpAtom"** %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %22, i64 0, i32 1, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = trunc i64 %24 to i32
  br label %27

26:                                               ; preds = %10
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

27:                                               ; preds = %10, %19
  %28 = phi i32 [ %25, %19 ], [ %18, %10 ]
  %29 = add nuw nsw i64 %12, 1
  %30 = icmp eq i64 %29, %8
  br i1 %30, label %9, label %31

31:                                               ; preds = %27
  %32 = add nsw i32 %28, %13
  %33 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %2, align 8
  br label %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal13AnalyzeRegExpEPNS0_7IsolateEbPNS0_10RegExpNodeE(%"class.v8::internal::Isolate"*, i1 zeroext, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #2 {
  %4 = alloca %"class.v8::internal::Analysis", align 8
  %5 = bitcast %"class.v8::internal::Analysis"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #18
  %6 = zext i1 %1 to i8
  %7 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %4, i64 0, i32 1
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %4, i64 0, i32 2
  store i8 %6, i8* %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %4, i64 0, i32 3
  store i32 0, i32* %10, align 4
  %11 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #18
  %12 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 6, i32 1, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp ult i64 %11, %13
  br i1 %14, label %15, label %20

15:                                               ; preds = %3
  %16 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %15
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0)) #17
  unreachable

19:                                               ; preds = %15
  store i32 2, i32* %10, align 4
  br label %37

20:                                               ; preds = %3
  %21 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %2, i64 0, i32 4, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = and i8 %22, 3
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %39

25:                                               ; preds = %20
  %26 = or i8 %22, 1
  store i8 %26, i8* %21, align 1
  %27 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %4, i64 0, i32 0
  %28 = bitcast %"class.v8::internal::RegExpNode"* %2 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)***
  %29 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %29, i64 2
  %31 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %30, align 8
  call void %31(%"class.v8::internal::RegExpNode"* %2, %"class.v8::internal::NodeVisitor"* nonnull %27) #18
  %32 = load i8, i8* %21, align 1
  %33 = and i8 %32, -4
  %34 = or i8 %33, 2
  store i8 %34, i8* %21, align 1
  %35 = load i32, i32* %10, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %25, %19
  %38 = phi i32 [ 2, %19 ], [ %35, %25 ]
  br label %39

39:                                               ; preds = %20, %25, %37
  %40 = phi i32 [ %38, %37 ], [ 0, %25 ], [ 0, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #18
  ret i32 %40
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal11NodeVisitorD2Ev(%"class.v8::internal::NodeVisitor"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal17BackReferenceNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb(%"class.v8::internal::BackReferenceNode"* nocapture, %"class.v8::internal::Isolate"* nocapture readnone, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1 zeroext) unnamed_addr #2 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp sgt i32 %8, %2
  br i1 %9, label %10, label %31

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 3
  %12 = sext i32 %2 to i64
  br label %13

13:                                               ; preds = %26, %10
  %14 = phi i64 [ %12, %10 ], [ %27, %26 ]
  %15 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %11, align 8
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %15, i64 0, i32 0
  %17 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %17, i64 %14
  %19 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %19, i64 0, i32 2
  store i32 3, i32* %20, align 4
  %21 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %19, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 128
  br i1 %23, label %26, label %24

24:                                               ; preds = %13
  store i32 128, i32* %21, align 8
  %25 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 -1, i64 16, i1 false) #18
  br label %26

26:                                               ; preds = %24, %13
  %27 = add nsw i64 %14, 1
  %28 = load i32, i32* %7, align 8
  %29 = sext i32 %28 to i64
  %30 = icmp slt i64 %27, %29
  br i1 %30, label %13, label %31

31:                                               ; preds = %26, %6
  %32 = icmp eq i32 %2, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %31
  %34 = zext i1 %5 to i64
  %35 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 %34
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %35, align 8
  br label %36

36:                                               ; preds = %31, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8TextNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb(%"class.v8::internal::TextNode"* nocapture, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1 zeroext) unnamed_addr #2 align 2 {
  %7 = alloca [4 x i32], align 16
  %8 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp sgt i32 %9, %2
  br i1 %10, label %11, label %423

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %15 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %15, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %410

19:                                               ; preds = %11
  %20 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 8
  %21 = getelementptr inbounds %"class.v8::internal::BoyerMooreLookahead", %"class.v8::internal::BoyerMooreLookahead"* %4, i64 0, i32 3
  %22 = bitcast [4 x i32]* %7 to i8*
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 0
  br label %24

24:                                               ; preds = %19, %394
  %25 = phi i32 [ %9, %19 ], [ %402, %394 ]
  %26 = phi i64 [ 0, %19 ], [ %396, %394 ]
  %27 = phi i1 [ true, %19 ], [ %403, %394 ]
  %28 = phi %"class.v8::internal::ZoneList"* [ %15, %19 ], [ %397, %394 ]
  %29 = phi i32 [ %2, %19 ], [ %395, %394 ]
  br i1 %27, label %35, label %30

30:                                               ; preds = %24
  %31 = icmp eq i32 %2, 0
  br i1 %31, label %32, label %423

32:                                               ; preds = %30
  %33 = zext i1 %5 to i64
  %34 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 %33
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %34, align 8
  br label %423

35:                                               ; preds = %24
  %36 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %28, i64 0, i32 0
  %37 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %36, align 8
  %38 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %37, i64 %26, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %37, i64 %26, i32 2
  %41 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %40, align 8
  %42 = icmp eq i32 %39, 0
  br i1 %42, label %43, label %212

43:                                               ; preds = %35
  %44 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %41, i64 2
  %45 = bitcast %"class.v8::internal::RegExpTree"* %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = trunc i64 %46 to i32
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %394

49:                                               ; preds = %43
  %50 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %41, i64 1
  %51 = bitcast %"class.v8::internal::RegExpTree"* %50 to i16**
  %52 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %41, i64 3
  %53 = bitcast %"class.v8::internal::RegExpTree"* %52 to i32*
  %54 = icmp slt i32 %29, %25
  br i1 %54, label %55, label %57

55:                                               ; preds = %49
  %56 = sext i32 %29 to i64
  br label %62

57:                                               ; preds = %49, %208
  %58 = icmp eq i32 %2, 0
  br i1 %58, label %59, label %423

59:                                               ; preds = %57
  %60 = zext i1 %5 to i64
  %61 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 %60
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %61, align 8
  br label %423

62:                                               ; preds = %55, %208
  %63 = phi i64 [ %56, %55 ], [ %203, %208 ]
  %64 = phi i64 [ 0, %55 ], [ %202, %208 ]
  %65 = load i16*, i16** %51, align 8
  %66 = getelementptr inbounds i16, i16* %65, i64 %64
  %67 = load i16, i16* %66, align 2
  %68 = load i32, i32* %53, align 8
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %141, label %71

71:                                               ; preds = %62
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #18
  %72 = load i32, i32* %12, align 8
  %73 = icmp eq i32 %72, 255
  %74 = call fastcc i32 @_ZN2v88internalL25GetCaseIndependentLettersEPNS0_7IsolateEtbPji(i16 zeroext %67, i1 zeroext %73, i32* nonnull %23)
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %71
  %77 = zext i32 %74 to i64
  br label %79

78:                                               ; preds = %138, %71
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #18
  br label %201

79:                                               ; preds = %138, %76
  %80 = phi i64 [ 0, %76 ], [ %139, %138 ]
  %81 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = load i32, i32* %12, align 8
  %84 = icmp slt i32 %83, %82
  br i1 %84, label %138, label %85

85:                                               ; preds = %79
  %86 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %21, align 8
  %87 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %86, i64 0, i32 0
  %88 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %87, align 8
  %89 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %88, i64 %63
  %90 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %90, i64 0, i32 2
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %92, 3
  br i1 %93, label %121, label %94

94:                                               ; preds = %85
  %95 = icmp slt i32 %82, 48
  br i1 %95, label %96, label %105

96:                                               ; preds = %119, %117, %115, %113, %111, %109, %107, %105, %94
  %97 = phi i32 [ 0, %94 ], [ 48, %105 ], [ 58, %107 ], [ 65, %109 ], [ 91, %111 ], [ 95, %113 ], [ 96, %115 ], [ 97, %117 ], [ 123, %119 ]
  %98 = phi i32 [ 2, %94 ], [ 1, %105 ], [ 2, %107 ], [ 1, %109 ], [ 2, %111 ], [ 1, %113 ], [ 2, %115 ], [ 1, %117 ], [ 2, %119 ]
  %99 = phi i32 [ 48, %94 ], [ 58, %105 ], [ 65, %107 ], [ 91, %109 ], [ 95, %111 ], [ 96, %113 ], [ 97, %115 ], [ 123, %117 ], [ 1114112, %119 ]
  %100 = icmp sle i32 %97, %82
  %101 = icmp sgt i32 %99, %82
  %102 = and i1 %100, %101
  br i1 %102, label %103, label %121

103:                                              ; preds = %96
  %104 = or i32 %98, %92
  br label %121

105:                                              ; preds = %94
  %106 = icmp slt i32 %82, 58
  br i1 %106, label %96, label %107

107:                                              ; preds = %105
  %108 = icmp slt i32 %82, 65
  br i1 %108, label %96, label %109

109:                                              ; preds = %107
  %110 = icmp slt i32 %82, 91
  br i1 %110, label %96, label %111

111:                                              ; preds = %109
  %112 = icmp slt i32 %82, 95
  br i1 %112, label %96, label %113

113:                                              ; preds = %111
  %114 = icmp eq i32 %82, 95
  br i1 %114, label %96, label %115

115:                                              ; preds = %113
  %116 = icmp slt i32 %82, 97
  br i1 %116, label %96, label %117

117:                                              ; preds = %115
  %118 = icmp slt i32 %82, 123
  br i1 %118, label %96, label %119

119:                                              ; preds = %117
  %120 = icmp slt i32 %82, 1114112
  br i1 %120, label %96, label %121

121:                                              ; preds = %119, %103, %96, %85
  %122 = phi i32 [ 3, %85 ], [ 3, %96 ], [ %104, %103 ], [ %92, %119 ]
  store i32 %122, i32* %91, align 4
  %123 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %90, i64 0, i32 1
  %124 = and i32 %82, 127
  %125 = zext i32 %124 to i64
  %126 = lshr i64 %125, 6
  %127 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %90, i64 0, i32 0, i32 0, i32 0, i64 %126
  %128 = and i64 %125, 63
  %129 = shl i64 1, %128
  %130 = load i64, i64* %127, align 8
  %131 = and i64 %130, %129
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %138

133:                                              ; preds = %121
  %134 = load i32, i32* %123, align 8
  %135 = add nsw i32 %134, 1
  store i32 %135, i32* %123, align 8
  %136 = load i64, i64* %127, align 8
  %137 = or i64 %136, %129
  store i64 %137, i64* %127, align 8
  br label %138

138:                                              ; preds = %79, %121, %133
  %139 = add nuw nsw i64 %80, 1
  %140 = icmp eq i64 %139, %77
  br i1 %140, label %78, label %79

141:                                              ; preds = %62
  %142 = zext i16 %67 to i32
  %143 = icmp slt i32 %13, %142
  br i1 %143, label %201, label %144

144:                                              ; preds = %141
  %145 = load i32, i32* %12, align 8
  %146 = icmp slt i32 %145, %142
  br i1 %146, label %201, label %147

147:                                              ; preds = %144
  %148 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %21, align 8
  %149 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %148, i64 0, i32 0
  %150 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %149, align 8
  %151 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %150, i64 %63
  %152 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %151, align 8
  %153 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %152, i64 0, i32 2
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %154, 3
  br i1 %155, label %184, label %156

156:                                              ; preds = %147
  %157 = icmp ult i16 %67, 48
  br i1 %157, label %158, label %167

158:                                              ; preds = %179, %177, %175, %173, %171, %169, %167, %156
  %159 = phi i32 [ 0, %156 ], [ 48, %167 ], [ 58, %169 ], [ 65, %171 ], [ 91, %173 ], [ 95, %175 ], [ 96, %177 ], [ %181, %179 ]
  %160 = phi i32 [ 2, %156 ], [ 1, %167 ], [ 2, %169 ], [ 1, %171 ], [ 2, %173 ], [ 1, %175 ], [ 2, %177 ], [ %182, %179 ]
  %161 = phi i32 [ 48, %156 ], [ 58, %167 ], [ 65, %169 ], [ 91, %171 ], [ 95, %173 ], [ 96, %175 ], [ 97, %177 ], [ %183, %179 ]
  %162 = icmp ule i32 %159, %142
  %163 = icmp ugt i32 %161, %142
  %164 = and i1 %162, %163
  br i1 %164, label %165, label %184

165:                                              ; preds = %158
  %166 = or i32 %160, %154
  br label %184

167:                                              ; preds = %156
  %168 = icmp ult i16 %67, 58
  br i1 %168, label %158, label %169

169:                                              ; preds = %167
  %170 = icmp ult i16 %67, 65
  br i1 %170, label %158, label %171

171:                                              ; preds = %169
  %172 = icmp ult i16 %67, 91
  br i1 %172, label %158, label %173

173:                                              ; preds = %171
  %174 = icmp ult i16 %67, 95
  br i1 %174, label %158, label %175

175:                                              ; preds = %173
  %176 = icmp eq i16 %67, 95
  br i1 %176, label %158, label %177

177:                                              ; preds = %175
  %178 = icmp ult i16 %67, 97
  br i1 %178, label %158, label %179

179:                                              ; preds = %177
  %180 = icmp ult i16 %67, 123
  %181 = select i1 %180, i32 97, i32 123
  %182 = select i1 %180, i32 1, i32 2
  %183 = select i1 %180, i32 123, i32 1114112
  br label %158

184:                                              ; preds = %165, %158, %147
  %185 = phi i32 [ 3, %147 ], [ 3, %158 ], [ %166, %165 ]
  store i32 %185, i32* %153, align 4
  %186 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %152, i64 0, i32 1
  %187 = and i32 %142, 127
  %188 = zext i32 %187 to i64
  %189 = lshr i64 %188, 6
  %190 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %152, i64 0, i32 0, i32 0, i32 0, i64 %189
  %191 = and i64 %188, 63
  %192 = shl i64 1, %191
  %193 = load i64, i64* %190, align 8
  %194 = and i64 %193, %192
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %201

196:                                              ; preds = %184
  %197 = load i32, i32* %186, align 8
  %198 = add nsw i32 %197, 1
  store i32 %198, i32* %186, align 8
  %199 = load i64, i64* %190, align 8
  %200 = or i64 %199, %192
  store i64 %200, i64* %190, align 8
  br label %201

201:                                              ; preds = %196, %184, %144, %141, %78
  %202 = add nuw nsw i64 %64, 1
  %203 = add nsw i64 %63, 1
  %204 = load i64, i64* %45, align 8
  %205 = shl i64 %204, 32
  %206 = ashr exact i64 %205, 32
  %207 = icmp slt i64 %202, %206
  br i1 %207, label %208, label %392

208:                                              ; preds = %201
  %209 = load i32, i32* %8, align 8
  %210 = sext i32 %209 to i64
  %211 = icmp slt i64 %203, %210
  br i1 %211, label %62, label %57

212:                                              ; preds = %35
  %213 = bitcast %"class.v8::internal::RegExpTree"* %41 to %"class.v8::internal::RegExpCharacterClass"*
  %214 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %20, align 8
  %215 = getelementptr inbounds %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"* %41, i64 1
  %216 = bitcast %"class.v8::internal::RegExpTree"* %215 to %"class.v8::internal::CharacterSet"*
  %217 = tail call %"class.v8::internal::ZoneList.18"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"* %216, %"class.v8::internal::Zone"* %214) #18
  %218 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %213, i64 0, i32 3, i32 0
  %219 = load i32, i32* %218, align 4
  %220 = and i32 %219, 1
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %229

222:                                              ; preds = %212
  %223 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %217, i64 0, i32 2
  %224 = load i32, i32* %223, align 4
  %225 = icmp sgt i32 %224, 0
  br i1 %225, label %226, label %390

226:                                              ; preds = %222
  %227 = getelementptr inbounds %"class.v8::internal::ZoneList.18", %"class.v8::internal::ZoneList.18"* %217, i64 0, i32 0
  %228 = sext i32 %29 to i64
  br label %242

229:                                              ; preds = %212
  %230 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %21, align 8
  %231 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %230, i64 0, i32 0
  %232 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %231, align 8
  %233 = sext i32 %29 to i64
  %234 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %232, i64 %233
  %235 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %234, align 8
  %236 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %235, i64 0, i32 2
  store i32 3, i32* %236, align 4
  %237 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %235, i64 0, i32 1
  %238 = load i32, i32* %237, align 8
  %239 = icmp eq i32 %238, 128
  br i1 %239, label %390, label %240

240:                                              ; preds = %229
  store i32 128, i32* %237, align 8
  %241 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"* %235 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %241, i8 -1, i64 16, i1 false) #18
  br label %390

242:                                              ; preds = %226, %385
  %243 = phi i64 [ 0, %226 ], [ %386, %385 ]
  %244 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %227, align 8
  %245 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %244, i64 %243, i32 0
  %246 = load i32, i32* %245, align 4
  %247 = icmp sgt i32 %246, %13
  br i1 %247, label %385, label %248

248:                                              ; preds = %242
  %249 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %244, i64 %243, i32 1
  %250 = load i32, i32* %249, align 4
  %251 = icmp slt i32 %250, %13
  %252 = select i1 %251, i32 %250, i32 %13
  %253 = load i32, i32* %12, align 8
  %254 = icmp sgt i32 %246, %253
  br i1 %254, label %385, label %255

255:                                              ; preds = %248
  %256 = load %"class.v8::internal::ZoneList.20"*, %"class.v8::internal::ZoneList.20"** %21, align 8
  %257 = getelementptr inbounds %"class.v8::internal::ZoneList.20", %"class.v8::internal::ZoneList.20"* %256, i64 0, i32 0
  %258 = load %"class.v8::internal::BoyerMoorePositionInfo"**, %"class.v8::internal::BoyerMoorePositionInfo"*** %257, align 8
  %259 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %258, i64 %228
  %260 = load %"class.v8::internal::BoyerMoorePositionInfo"*, %"class.v8::internal::BoyerMoorePositionInfo"** %259, align 8
  %261 = icmp sgt i32 %252, %253
  %262 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %260, i64 0, i32 2
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 3
  br i1 %261, label %265, label %323

265:                                              ; preds = %255
  br i1 %264, label %293, label %266

266:                                              ; preds = %265
  %267 = icmp slt i32 %246, 48
  br i1 %267, label %268, label %277

268:                                              ; preds = %291, %289, %287, %285, %283, %281, %279, %277, %266
  %269 = phi i32 [ 0, %266 ], [ 48, %277 ], [ 58, %279 ], [ 65, %281 ], [ 91, %283 ], [ 95, %285 ], [ 96, %287 ], [ 97, %289 ], [ 123, %291 ]
  %270 = phi i32 [ 2, %266 ], [ 1, %277 ], [ 2, %279 ], [ 1, %281 ], [ 2, %283 ], [ 1, %285 ], [ 2, %287 ], [ 1, %289 ], [ 2, %291 ]
  %271 = phi i32 [ 48, %266 ], [ 58, %277 ], [ 65, %279 ], [ 91, %281 ], [ 95, %283 ], [ 96, %285 ], [ 97, %287 ], [ 123, %289 ], [ 1114112, %291 ]
  %272 = icmp sle i32 %269, %246
  %273 = icmp sgt i32 %271, %253
  %274 = and i1 %272, %273
  br i1 %274, label %275, label %293

275:                                              ; preds = %268
  %276 = or i32 %270, %263
  br label %293

277:                                              ; preds = %266
  %278 = icmp slt i32 %246, 58
  br i1 %278, label %268, label %279

279:                                              ; preds = %277
  %280 = icmp slt i32 %246, 65
  br i1 %280, label %268, label %281

281:                                              ; preds = %279
  %282 = icmp slt i32 %246, 91
  br i1 %282, label %268, label %283

283:                                              ; preds = %281
  %284 = icmp slt i32 %246, 95
  br i1 %284, label %268, label %285

285:                                              ; preds = %283
  %286 = icmp eq i32 %246, 95
  br i1 %286, label %268, label %287

287:                                              ; preds = %285
  %288 = icmp slt i32 %246, 97
  br i1 %288, label %268, label %289

289:                                              ; preds = %287
  %290 = icmp slt i32 %246, 123
  br i1 %290, label %268, label %291

291:                                              ; preds = %289
  %292 = icmp slt i32 %246, 1114112
  br i1 %292, label %268, label %293

293:                                              ; preds = %291, %275, %268, %265
  %294 = phi i32 [ 3, %265 ], [ 3, %268 ], [ %276, %275 ], [ %263, %291 ]
  store i32 %294, i32* %262, align 4
  %295 = sub i32 1, %246
  %296 = add i32 %295, %253
  %297 = icmp sgt i32 %296, 127
  %298 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %260, i64 0, i32 1
  br i1 %297, label %299, label %304

299:                                              ; preds = %293
  store i32 128, i32* %298, align 8
  %300 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"* %260 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %300, i8 -1, i64 16, i1 false) #18
  br label %385

301:                                              ; preds = %320
  %302 = add nsw i32 %305, 1
  %303 = icmp slt i32 %305, %253
  br i1 %303, label %304, label %385

304:                                              ; preds = %293, %301
  %305 = phi i32 [ %302, %301 ], [ %246, %293 ]
  %306 = and i32 %305, 127
  %307 = zext i32 %306 to i64
  %308 = lshr i64 %307, 6
  %309 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %260, i64 0, i32 0, i32 0, i32 0, i64 %308
  %310 = and i64 %307, 63
  %311 = shl i64 1, %310
  %312 = load i64, i64* %309, align 8
  %313 = and i64 %311, %312
  %314 = icmp eq i64 %313, 0
  br i1 %314, label %315, label %320

315:                                              ; preds = %304
  %316 = load i32, i32* %298, align 8
  %317 = add nsw i32 %316, 1
  store i32 %317, i32* %298, align 8
  %318 = load i64, i64* %309, align 8
  %319 = or i64 %318, %311
  store i64 %319, i64* %309, align 8
  br label %320

320:                                              ; preds = %315, %304
  %321 = load i32, i32* %298, align 8
  %322 = icmp eq i32 %321, 128
  br i1 %322, label %385, label %301

323:                                              ; preds = %255
  br i1 %264, label %351, label %324

324:                                              ; preds = %323
  %325 = icmp slt i32 %246, 48
  br i1 %325, label %326, label %335

326:                                              ; preds = %349, %347, %345, %343, %341, %339, %337, %335, %324
  %327 = phi i32 [ 0, %324 ], [ 48, %335 ], [ 58, %337 ], [ 65, %339 ], [ 91, %341 ], [ 95, %343 ], [ 96, %345 ], [ 97, %347 ], [ 123, %349 ]
  %328 = phi i32 [ 2, %324 ], [ 1, %335 ], [ 2, %337 ], [ 1, %339 ], [ 2, %341 ], [ 1, %343 ], [ 2, %345 ], [ 1, %347 ], [ 2, %349 ]
  %329 = phi i32 [ 48, %324 ], [ 58, %335 ], [ 65, %337 ], [ 91, %339 ], [ 95, %341 ], [ 96, %343 ], [ 97, %345 ], [ 123, %347 ], [ 1114112, %349 ]
  %330 = icmp sle i32 %327, %246
  %331 = icmp sgt i32 %329, %252
  %332 = and i1 %330, %331
  br i1 %332, label %333, label %351

333:                                              ; preds = %326
  %334 = or i32 %328, %263
  br label %351

335:                                              ; preds = %324
  %336 = icmp slt i32 %246, 58
  br i1 %336, label %326, label %337

337:                                              ; preds = %335
  %338 = icmp slt i32 %246, 65
  br i1 %338, label %326, label %339

339:                                              ; preds = %337
  %340 = icmp slt i32 %246, 91
  br i1 %340, label %326, label %341

341:                                              ; preds = %339
  %342 = icmp slt i32 %246, 95
  br i1 %342, label %326, label %343

343:                                              ; preds = %341
  %344 = icmp eq i32 %246, 95
  br i1 %344, label %326, label %345

345:                                              ; preds = %343
  %346 = icmp slt i32 %246, 97
  br i1 %346, label %326, label %347

347:                                              ; preds = %345
  %348 = icmp slt i32 %246, 123
  br i1 %348, label %326, label %349

349:                                              ; preds = %347
  %350 = icmp slt i32 %246, 1114112
  br i1 %350, label %326, label %351

351:                                              ; preds = %349, %333, %326, %323
  %352 = phi i32 [ 3, %323 ], [ 3, %326 ], [ %334, %333 ], [ %263, %349 ]
  store i32 %352, i32* %262, align 4
  %353 = sub i32 1, %246
  %354 = add i32 %353, %252
  %355 = icmp sgt i32 %354, 127
  br i1 %355, label %360, label %356

356:                                              ; preds = %351
  %357 = icmp sgt i32 %246, %252
  br i1 %357, label %385, label %358

358:                                              ; preds = %356
  %359 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %260, i64 0, i32 1
  br label %366

360:                                              ; preds = %351
  %361 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %260, i64 0, i32 1
  store i32 128, i32* %361, align 8
  %362 = bitcast %"class.v8::internal::BoyerMoorePositionInfo"* %260 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %362, i8 -1, i64 16, i1 false) #18
  br label %385

363:                                              ; preds = %382
  %364 = add nsw i32 %367, 1
  %365 = icmp slt i32 %367, %252
  br i1 %365, label %366, label %385

366:                                              ; preds = %363, %358
  %367 = phi i32 [ %246, %358 ], [ %364, %363 ]
  %368 = and i32 %367, 127
  %369 = zext i32 %368 to i64
  %370 = lshr i64 %369, 6
  %371 = getelementptr inbounds %"class.v8::internal::BoyerMoorePositionInfo", %"class.v8::internal::BoyerMoorePositionInfo"* %260, i64 0, i32 0, i32 0, i32 0, i64 %370
  %372 = and i64 %369, 63
  %373 = shl i64 1, %372
  %374 = load i64, i64* %371, align 8
  %375 = and i64 %373, %374
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %377, label %382

377:                                              ; preds = %366
  %378 = load i32, i32* %359, align 8
  %379 = add nsw i32 %378, 1
  store i32 %379, i32* %359, align 8
  %380 = load i64, i64* %371, align 8
  %381 = or i64 %380, %373
  store i64 %381, i64* %371, align 8
  br label %382

382:                                              ; preds = %377, %366
  %383 = load i32, i32* %359, align 8
  %384 = icmp eq i32 %383, 128
  br i1 %384, label %385, label %363

385:                                              ; preds = %363, %382, %301, %320, %248, %299, %356, %360, %242
  %386 = add nuw nsw i64 %243, 1
  %387 = load i32, i32* %223, align 4
  %388 = sext i32 %387 to i64
  %389 = icmp slt i64 %386, %388
  br i1 %389, label %242, label %390

390:                                              ; preds = %385, %222, %240, %229
  %391 = add nsw i32 %29, 1
  br label %394

392:                                              ; preds = %201
  %393 = trunc i64 %203 to i32
  br label %394

394:                                              ; preds = %392, %43, %390
  %395 = phi i32 [ %391, %390 ], [ %29, %43 ], [ %393, %392 ]
  %396 = add nuw nsw i64 %26, 1
  %397 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %14, align 8
  %398 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %397, i64 0, i32 2
  %399 = load i32, i32* %398, align 4
  %400 = sext i32 %399 to i64
  %401 = icmp slt i64 %396, %400
  %402 = load i32, i32* %8, align 8
  %403 = icmp slt i32 %395, %402
  br i1 %401, label %24, label %404

404:                                              ; preds = %394
  br i1 %403, label %410, label %405

405:                                              ; preds = %404
  %406 = icmp eq i32 %2, 0
  br i1 %406, label %407, label %423

407:                                              ; preds = %405
  %408 = zext i1 %5 to i64
  %409 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 %408
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %409, align 8
  br label %423

410:                                              ; preds = %11, %404
  %411 = phi i32 [ %395, %404 ], [ %2, %11 ]
  %412 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 1
  %413 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %412, align 8
  %414 = add nsw i32 %3, -1
  %415 = bitcast %"class.v8::internal::RegExpNode"* %413 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)***
  %416 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*** %415, align 8
  %417 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %416, i64 9
  %418 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %417, align 8
  tail call void %418(%"class.v8::internal::RegExpNode"* %413, %"class.v8::internal::Isolate"* %1, i32 %411, i32 %414, %"class.v8::internal::BoyerMooreLookahead"* %4, i1 zeroext true) #18
  %419 = icmp eq i32 %2, 0
  br i1 %419, label %420, label %423

420:                                              ; preds = %410
  %421 = zext i1 %5 to i64
  %422 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 %421
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %422, align 8
  br label %423

423:                                              ; preds = %57, %59, %30, %32, %407, %405, %420, %410, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal14RegExpCompiler33OptionallyStepBackToLeadSurrogateEPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpCompiler"* nocapture, %"class.v8::internal::RegExpNode"*, i32) local_unnamed_addr #2 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca %"class.v8::internal::Zone"*, align 8
  %6 = alloca %"class.v8::internal::RegExpLookaround::Builder", align 8
  %7 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 15
  %8 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %9 = tail call %"class.v8::internal::ZoneList.18"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %8, i64 241888263198720)
  %10 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %11 = tail call %"class.v8::internal::ZoneList.18"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %10, i64 246286309710848)
  %12 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %13 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #18
  store i32 2, i32* %4, align 4
  %14 = bitcast %"class.v8::internal::Zone"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #18
  store %"class.v8::internal::Zone"* %12, %"class.v8::internal::Zone"** %5, align 8
  %15 = call %"class.v8::internal::ChoiceNode"* @_ZN2v88internal4Zone3NewINS0_10ChoiceNodeEJiPS1_EEEPT_DpOT0_(%"class.v8::internal::Zone"* %12, i32* nonnull dereferenceable(4) %4, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #18
  %16 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %19, label %28

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = icmp sgt i32 %21, 65534
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 8
  store i8 1, i8* %24, align 1
  br label %27

25:                                               ; preds = %19
  %26 = add nsw i32 %21, 1
  store i32 %26, i32* %20, align 8
  br label %27

27:                                               ; preds = %25, %23
  store i32 %21, i32* %16, align 4
  br label %28

28:                                               ; preds = %3, %27
  %29 = phi i32 [ %21, %27 ], [ %17, %3 ]
  %30 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, -1
  br i1 %32, label %33, label %42

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = icmp sgt i32 %35, 65534
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 8
  store i8 1, i8* %38, align 1
  br label %41

39:                                               ; preds = %33
  %40 = add nsw i32 %35, 1
  store i32 %40, i32* %34, align 8
  br label %41

41:                                               ; preds = %39, %37
  store i32 %35, i32* %30, align 8
  br label %42

42:                                               ; preds = %28, %41
  %43 = phi i32 [ %35, %41 ], [ %31, %28 ]
  %44 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %45 = call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %44, %"class.v8::internal::ZoneList.18"* %9, i1 zeroext true, %"class.v8::internal::RegExpNode"* %1, i32 %2)
  %46 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %45, i64 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %47) #18
  call void @_ZN2v88internal16RegExpLookaround7BuilderC1EbPNS0_10RegExpNodeEiiii(%"class.v8::internal::RegExpLookaround::Builder"* nonnull %6, i1 zeroext true, %"class.v8::internal::RegExpNode"* %46, i32 %29, i32 %43, i32 0, i32 0) #18
  %48 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %49 = getelementptr inbounds %"class.v8::internal::RegExpLookaround::Builder", %"class.v8::internal::RegExpLookaround::Builder"* %6, i64 0, i32 1
  %50 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %49, align 8
  %51 = call %"class.v8::internal::TextNode"* @_ZN2v88internal8TextNode24CreateForCharacterRangesEPNS0_4ZoneEPNS0_8ZoneListINS0_14CharacterRangeEEEbPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::Zone"* %48, %"class.v8::internal::ZoneList.18"* %11, i1 zeroext false, %"class.v8::internal::RegExpNode"* %50, i32 %2)
  %52 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %51, i64 0, i32 0, i32 0
  %53 = call %"class.v8::internal::RegExpNode"* @_ZN2v88internal16RegExpLookaround7Builder8ForMatchEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpLookaround::Builder"* nonnull %6, %"class.v8::internal::RegExpNode"* %52) #18
  %54 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %15, i64 0, i32 1
  %55 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %54, align 8
  %56 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %15, i64 0, i32 0, i32 8
  %57 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %56, align 8
  %58 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %55, i64 0, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %55, i64 0, i32 1
  %61 = load i32, i32* %60, align 8
  %62 = icmp slt i32 %59, %61
  br i1 %62, label %63, label %70

63:                                               ; preds = %42
  %64 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %55, i64 0, i32 0
  %65 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %64, align 8
  %66 = add nsw i32 %59, 1
  store i32 %66, i32* %58, align 4
  %67 = sext i32 %59 to i64
  %68 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %65, i64 %67, i32 0
  store %"class.v8::internal::RegExpNode"* %53, %"class.v8::internal::RegExpNode"** %68, align 8
  %69 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %65, i64 %67, i32 1
  br label %105

70:                                               ; preds = %42
  %71 = shl nsw i32 %61, 1
  %72 = or i32 %71, 1
  %73 = sext i32 %72 to i64
  %74 = shl nsw i64 %73, 4
  %75 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %57, i64 0, i32 2
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %57, i64 0, i32 3
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %78, %76
  %80 = icmp ugt i64 %74, %79
  br i1 %80, label %81, label %83, !prof !2

81:                                               ; preds = %70
  %82 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %57, i64 %74) #18
  br label %85

83:                                               ; preds = %70
  %84 = add i64 %76, %74
  store i64 %84, i64* %75, align 8
  br label %85

85:                                               ; preds = %83, %81
  %86 = phi i64 [ %82, %81 ], [ %76, %83 ]
  %87 = inttoptr i64 %86 to %"class.v8::internal::GuardedAlternative"*
  %88 = load i32, i32* %58, align 4
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %90, label %98

90:                                               ; preds = %85
  %91 = inttoptr i64 %86 to i8*
  %92 = bitcast %"class.v8::internal::ZoneList.1148"* %55 to i8**
  %93 = load i8*, i8** %92, align 8
  %94 = icmp eq i32 %88, 1
  %95 = sext i32 %88 to i64
  %96 = shl nsw i64 %95, 4
  %97 = select i1 %94, i64 16, i64 %96
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %91, i8* align 1 %93, i64 %97, i1 false) #18
  br label %98

98:                                               ; preds = %90, %85
  %99 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %55, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %87, %"class.v8::internal::GuardedAlternative"** %99, align 8
  store i32 %72, i32* %60, align 8
  %100 = load i32, i32* %58, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %58, align 4
  %102 = sext i32 %100 to i64
  %103 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %87, i64 %102, i32 0
  store %"class.v8::internal::RegExpNode"* %53, %"class.v8::internal::RegExpNode"** %103, align 8
  %104 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %87, i64 %102, i32 1
  br label %105

105:                                              ; preds = %63, %98
  %106 = phi %"class.v8::internal::ZoneList.1140"** [ %69, %63 ], [ %104, %98 ]
  store %"class.v8::internal::ZoneList.1140"* null, %"class.v8::internal::ZoneList.1140"** %106, align 8
  %107 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %54, align 8
  %108 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %56, align 8
  %109 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %107, i64 0, i32 2
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %107, i64 0, i32 1
  %112 = load i32, i32* %111, align 8
  %113 = icmp slt i32 %110, %112
  br i1 %113, label %114, label %121

114:                                              ; preds = %105
  %115 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %107, i64 0, i32 0
  %116 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %115, align 8
  %117 = add nsw i32 %110, 1
  store i32 %117, i32* %109, align 4
  %118 = sext i32 %110 to i64
  %119 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %116, i64 %118, i32 0
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %119, align 8
  %120 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %116, i64 %118, i32 1
  br label %156

121:                                              ; preds = %105
  %122 = shl nsw i32 %112, 1
  %123 = or i32 %122, 1
  %124 = sext i32 %123 to i64
  %125 = shl nsw i64 %124, 4
  %126 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %108, i64 0, i32 2
  %127 = load i64, i64* %126, align 8
  %128 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %108, i64 0, i32 3
  %129 = load i64, i64* %128, align 8
  %130 = sub i64 %129, %127
  %131 = icmp ugt i64 %125, %130
  br i1 %131, label %132, label %134, !prof !2

132:                                              ; preds = %121
  %133 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %108, i64 %125) #18
  br label %136

134:                                              ; preds = %121
  %135 = add i64 %127, %125
  store i64 %135, i64* %126, align 8
  br label %136

136:                                              ; preds = %134, %132
  %137 = phi i64 [ %133, %132 ], [ %127, %134 ]
  %138 = inttoptr i64 %137 to %"class.v8::internal::GuardedAlternative"*
  %139 = load i32, i32* %109, align 4
  %140 = icmp sgt i32 %139, 0
  br i1 %140, label %141, label %149

141:                                              ; preds = %136
  %142 = inttoptr i64 %137 to i8*
  %143 = bitcast %"class.v8::internal::ZoneList.1148"* %107 to i8**
  %144 = load i8*, i8** %143, align 8
  %145 = icmp eq i32 %139, 1
  %146 = sext i32 %139 to i64
  %147 = shl nsw i64 %146, 4
  %148 = select i1 %145, i64 16, i64 %147
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %142, i8* align 1 %144, i64 %148, i1 false) #18
  br label %149

149:                                              ; preds = %141, %136
  %150 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %107, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %138, %"class.v8::internal::GuardedAlternative"** %150, align 8
  store i32 %123, i32* %111, align 8
  %151 = load i32, i32* %109, align 4
  %152 = add nsw i32 %151, 1
  store i32 %152, i32* %109, align 4
  %153 = sext i32 %151 to i64
  %154 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %138, i64 %153, i32 0
  store %"class.v8::internal::RegExpNode"* %1, %"class.v8::internal::RegExpNode"** %154, align 8
  %155 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %138, i64 %153, i32 1
  br label %156

156:                                              ; preds = %114, %149
  %157 = phi %"class.v8::internal::ZoneList.1140"** [ %120, %114 ], [ %155, %149 ]
  store %"class.v8::internal::ZoneList.1140"* null, %"class.v8::internal::ZoneList.1140"** %157, align 8
  %158 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %15, i64 0, i32 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %47) #18
  ret %"class.v8::internal::RegExpNode"* %158
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::ChoiceNode"* @_ZN2v88internal4Zone3NewINS0_10ChoiceNodeEJiPS1_EEEPT_DpOT0_(%"class.v8::internal::Zone"*, i32* dereferenceable(4), %"class.v8::internal::Zone"** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %7, %5
  %9 = icmp ult i64 %8, 72
  br i1 %9, label %10, label %12, !prof !2

10:                                               ; preds = %3
  %11 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 72) #18
  br label %14

12:                                               ; preds = %3
  %13 = add i64 %5, 72
  store i64 %13, i64* %4, align 8
  br label %14

14:                                               ; preds = %10, %12
  %15 = phi i64 [ %11, %10 ], [ %5, %12 ]
  %16 = inttoptr i64 %15 to %"class.v8::internal::ChoiceNode"*
  %17 = load i32, i32* %1, align 4
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2, align 8
  %19 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 0, i32 8
  %22 = bitcast %"class.v8::internal::RegExpNode"** %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #18
  store %"class.v8::internal::Zone"* %18, %"class.v8::internal::Zone"** %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 0, i32 7, i64 0
  %24 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN2v88internal10ChoiceNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %19, align 8
  %25 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 1
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %29, %27
  %31 = icmp ult i64 %30, 16
  br i1 %31, label %32, label %34, !prof !2

32:                                               ; preds = %14
  %33 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 16) #18
  br label %36

34:                                               ; preds = %14
  %35 = add i64 %27, 16
  store i64 %35, i64* %26, align 8
  br label %36

36:                                               ; preds = %34, %32
  %37 = phi i64 [ %33, %32 ], [ %27, %34 ]
  %38 = inttoptr i64 %37 to %"class.v8::internal::ZoneList.1148"*
  %39 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %38, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* null, %"class.v8::internal::GuardedAlternative"** %39, align 8
  %40 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %38, i64 0, i32 1
  store i32 %17, i32* %40, align 8
  %41 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %38, i64 0, i32 2
  store i32 0, i32* %41, align 4
  %42 = icmp sgt i32 %17, 0
  br i1 %42, label %43, label %57

43:                                               ; preds = %36
  %44 = sext i32 %17 to i64
  %45 = shl nsw i64 %44, 4
  %46 = load i64, i64* %26, align 8
  %47 = load i64, i64* %28, align 8
  %48 = sub i64 %47, %46
  %49 = icmp ugt i64 %45, %48
  br i1 %49, label %50, label %52, !prof !2

50:                                               ; preds = %43
  %51 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %45) #18
  br label %54

52:                                               ; preds = %43
  %53 = add i64 %46, %45
  store i64 %53, i64* %26, align 8
  br label %54

54:                                               ; preds = %52, %50
  %55 = phi i64 [ %51, %50 ], [ %46, %52 ]
  %56 = inttoptr i64 %55 to %"class.v8::internal::GuardedAlternative"*
  br label %57

57:                                               ; preds = %36, %54
  %58 = phi %"class.v8::internal::GuardedAlternative"* [ %56, %54 ], [ null, %36 ]
  store %"class.v8::internal::GuardedAlternative"* %58, %"class.v8::internal::GuardedAlternative"** %39, align 8
  store %"class.v8::internal::ZoneList.1148"* %38, %"class.v8::internal::ZoneList.1148"** %25, align 8
  %59 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 2
  store i8 0, i8* %59, align 8
  %60 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %16, i64 0, i32 3
  store i8 0, i8* %60, align 1
  ret %"class.v8::internal::ChoiceNode"* %16
}

declare void @_ZN2v88internal16RegExpLookaround7BuilderC1EbPNS0_10RegExpNodeEiiii(%"class.v8::internal::RegExpLookaround::Builder"*, i1 zeroext, %"class.v8::internal::RegExpNode"*, i32, i32, i32, i32) unnamed_addr #5

declare %"class.v8::internal::RegExpNode"* @_ZN2v88internal16RegExpLookaround7Builder8ForMatchEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpLookaround::Builder"*, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal14RegExpCompiler16PreprocessRegExpEPNS0_17RegExpCompileDataENS_4base5FlagsINS0_8JSRegExp4FlagEiEEb(%"class.v8::internal::RegExpCompiler"*, %"struct.v8::internal::RegExpCompileData"* nocapture readonly, i32, i1 zeroext) local_unnamed_addr #2 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca %"class.v8::internal::Zone"*, align 8
  %7 = getelementptr inbounds %"struct.v8::internal::RegExpCompileData", %"struct.v8::internal::RegExpCompileData"* %1, i64 0, i32 0
  %8 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 0
  %10 = load %"class.v8::internal::EndNode"*, %"class.v8::internal::EndNode"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %10, i64 0, i32 0
  %12 = tail call %"class.v8::internal::RegExpNode"* @_ZN2v88internal13RegExpCapture6ToNodeEPNS0_10RegExpTreeEiPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpTree"* %8, i32 0, %"class.v8::internal::RegExpCompiler"* %0, %"class.v8::internal::RegExpNode"* %11) #18
  %13 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %7, align 8
  %14 = bitcast %"class.v8::internal::RegExpTree"* %13 to i1 (%"class.v8::internal::RegExpTree"*)***
  %15 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %14, align 8
  %16 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %15, i64 5
  %17 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %16, align 8
  %18 = tail call zeroext i1 %17(%"class.v8::internal::RegExpTree"* %13) #18
  %19 = and i32 %2, 8
  %20 = icmp ne i32 %19, 0
  %21 = or i1 %20, %18
  br i1 %21, label %191, label %22

22:                                               ; preds = %4
  %23 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 15
  %24 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %24, i64 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %24, i64 0, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %28, %26
  %30 = icmp ult i64 %29, 32
  br i1 %30, label %31, label %33, !prof !2

31:                                               ; preds = %22
  %32 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %24, i64 32) #18
  br label %35

33:                                               ; preds = %22
  %34 = add i64 %26, 32
  store i64 %34, i64* %25, align 8
  br label %35

35:                                               ; preds = %31, %33
  %36 = phi i64 [ %32, %31 ], [ %26, %33 ]
  %37 = inttoptr i64 %36 to %"class.v8::internal::RegExpCharacterClass"*
  %38 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %37, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal20RegExpCharacterClassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %38, align 8
  %39 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %37, i64 0, i32 1, i32 0
  store %"class.v8::internal::ZoneList.18"* null, %"class.v8::internal::ZoneList.18"** %39, align 8
  %40 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %37, i64 0, i32 1, i32 1
  store i16 42, i16* %40, align 8
  %41 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %37, i64 0, i32 2, i32 0
  store i32 0, i32* %41, align 8
  %42 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %37, i64 0, i32 3, i32 0
  store i32 0, i32* %42, align 4
  %43 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %37, i64 0, i32 0
  %44 = getelementptr inbounds %"struct.v8::internal::RegExpCompileData", %"struct.v8::internal::RegExpCompileData"* %1, i64 0, i32 4
  %45 = load i8, i8* %44, align 1, !range !3
  %46 = icmp ne i8 %45, 0
  %47 = tail call %"class.v8::internal::RegExpNode"* @_ZN2v88internal16RegExpQuantifier6ToNodeEiibPNS0_10RegExpTreeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeEb(i32 0, i32 2147483647, i1 zeroext false, %"class.v8::internal::RegExpTree"* %43, %"class.v8::internal::RegExpCompiler"* %0, %"class.v8::internal::RegExpNode"* %12, i1 zeroext %46) #18
  %48 = load i8, i8* %44, align 1, !range !3
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %191, label %50

50:                                               ; preds = %35
  %51 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %23, align 8
  %52 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #18
  store i32 2, i32* %5, align 4
  %53 = bitcast %"class.v8::internal::Zone"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #18
  store %"class.v8::internal::Zone"* %51, %"class.v8::internal::Zone"** %6, align 8
  %54 = call %"class.v8::internal::ChoiceNode"* @_ZN2v88internal4Zone3NewINS0_10ChoiceNodeEJiPS1_EEEPT_DpOT0_(%"class.v8::internal::Zone"* %51, i32* nonnull dereferenceable(4) %5, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %6)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #18
  %55 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %54, i64 0, i32 1
  %56 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %55, align 8
  %57 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %54, i64 0, i32 0, i32 8
  %58 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %56, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %56, i64 0, i32 1
  %62 = load i32, i32* %61, align 8
  %63 = icmp slt i32 %60, %62
  br i1 %63, label %64, label %71

64:                                               ; preds = %50
  %65 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %56, i64 0, i32 0
  %66 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %65, align 8
  %67 = add nsw i32 %60, 1
  store i32 %67, i32* %59, align 4
  %68 = sext i32 %60 to i64
  %69 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %66, i64 %68, i32 0
  store %"class.v8::internal::RegExpNode"* %12, %"class.v8::internal::RegExpNode"** %69, align 8
  %70 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %66, i64 %68, i32 1
  br label %106

71:                                               ; preds = %50
  %72 = shl nsw i32 %62, 1
  %73 = or i32 %72, 1
  %74 = sext i32 %73 to i64
  %75 = shl nsw i64 %74, 4
  %76 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 2
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 3
  %79 = load i64, i64* %78, align 8
  %80 = sub i64 %79, %77
  %81 = icmp ugt i64 %75, %80
  br i1 %81, label %82, label %84, !prof !2

82:                                               ; preds = %71
  %83 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %58, i64 %75) #18
  br label %86

84:                                               ; preds = %71
  %85 = add i64 %77, %75
  store i64 %85, i64* %76, align 8
  br label %86

86:                                               ; preds = %84, %82
  %87 = phi i64 [ %83, %82 ], [ %77, %84 ]
  %88 = inttoptr i64 %87 to %"class.v8::internal::GuardedAlternative"*
  %89 = load i32, i32* %59, align 4
  %90 = icmp sgt i32 %89, 0
  br i1 %90, label %91, label %99

91:                                               ; preds = %86
  %92 = inttoptr i64 %87 to i8*
  %93 = bitcast %"class.v8::internal::ZoneList.1148"* %56 to i8**
  %94 = load i8*, i8** %93, align 8
  %95 = icmp eq i32 %89, 1
  %96 = sext i32 %89 to i64
  %97 = shl nsw i64 %96, 4
  %98 = select i1 %95, i64 16, i64 %97
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %94, i64 %98, i1 false) #18
  br label %99

99:                                               ; preds = %91, %86
  %100 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %56, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %88, %"class.v8::internal::GuardedAlternative"** %100, align 8
  store i32 %73, i32* %61, align 8
  %101 = load i32, i32* %59, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %59, align 4
  %103 = sext i32 %101 to i64
  %104 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %88, i64 %103, i32 0
  store %"class.v8::internal::RegExpNode"* %12, %"class.v8::internal::RegExpNode"** %104, align 8
  %105 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %88, i64 %103, i32 1
  br label %106

106:                                              ; preds = %64, %99
  %107 = phi %"class.v8::internal::ZoneList.1140"** [ %70, %64 ], [ %105, %99 ]
  store %"class.v8::internal::ZoneList.1140"* null, %"class.v8::internal::ZoneList.1140"** %107, align 8
  %108 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %23, align 8
  %109 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %108, i64 0, i32 2
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %108, i64 0, i32 3
  %112 = load i64, i64* %111, align 8
  %113 = sub i64 %112, %110
  %114 = icmp ult i64 %113, 32
  br i1 %114, label %115, label %117, !prof !2

115:                                              ; preds = %106
  %116 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %108, i64 32) #18
  br label %119

117:                                              ; preds = %106
  %118 = add i64 %110, 32
  store i64 %118, i64* %109, align 8
  br label %119

119:                                              ; preds = %115, %117
  %120 = phi i64 [ %116, %115 ], [ %110, %117 ]
  %121 = inttoptr i64 %120 to %"class.v8::internal::RegExpCharacterClass"*
  %122 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %121, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal20RegExpCharacterClassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %122, align 8
  %123 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %121, i64 0, i32 1, i32 0
  store %"class.v8::internal::ZoneList.18"* null, %"class.v8::internal::ZoneList.18"** %123, align 8
  %124 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %121, i64 0, i32 1, i32 1
  store i16 42, i16* %124, align 8
  %125 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %121, i64 0, i32 2, i32 0
  store i32 0, i32* %125, align 8
  %126 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %121, i64 0, i32 3, i32 0
  store i32 0, i32* %126, align 4
  %127 = load i64, i64* %109, align 8
  %128 = load i64, i64* %111, align 8
  %129 = sub i64 %128, %127
  %130 = icmp ult i64 %129, 80
  br i1 %130, label %131, label %133, !prof !2

131:                                              ; preds = %119
  %132 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %108, i64 80) #18
  br label %135

133:                                              ; preds = %119
  %134 = add i64 %127, 80
  store i64 %134, i64* %109, align 8
  br label %135

135:                                              ; preds = %131, %133
  %136 = phi i64 [ %132, %131 ], [ %127, %133 ]
  %137 = inttoptr i64 %136 to %"class.v8::internal::TextNode"*
  call void @_ZN2v88internal8TextNodeC2EPNS0_20RegExpCharacterClassEbPNS0_10RegExpNodeE(%"class.v8::internal::TextNode"* %137, %"class.v8::internal::RegExpCharacterClass"* %121, i1 zeroext false, %"class.v8::internal::RegExpNode"* %47) #18
  %138 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %137, i64 0, i32 0, i32 0
  %139 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %55, align 8
  %140 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %57, align 8
  %141 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %139, i64 0, i32 2
  %142 = load i32, i32* %141, align 4
  %143 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %139, i64 0, i32 1
  %144 = load i32, i32* %143, align 8
  %145 = icmp slt i32 %142, %144
  br i1 %145, label %146, label %153

146:                                              ; preds = %135
  %147 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %139, i64 0, i32 0
  %148 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %147, align 8
  %149 = add nsw i32 %142, 1
  store i32 %149, i32* %141, align 4
  %150 = sext i32 %142 to i64
  %151 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %148, i64 %150, i32 0
  store %"class.v8::internal::RegExpNode"* %138, %"class.v8::internal::RegExpNode"** %151, align 8
  %152 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %148, i64 %150, i32 1
  br label %188

153:                                              ; preds = %135
  %154 = shl nsw i32 %144, 1
  %155 = or i32 %154, 1
  %156 = sext i32 %155 to i64
  %157 = shl nsw i64 %156, 4
  %158 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %140, i64 0, i32 2
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %140, i64 0, i32 3
  %161 = load i64, i64* %160, align 8
  %162 = sub i64 %161, %159
  %163 = icmp ugt i64 %157, %162
  br i1 %163, label %164, label %166, !prof !2

164:                                              ; preds = %153
  %165 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %140, i64 %157) #18
  br label %168

166:                                              ; preds = %153
  %167 = add i64 %159, %157
  store i64 %167, i64* %158, align 8
  br label %168

168:                                              ; preds = %166, %164
  %169 = phi i64 [ %165, %164 ], [ %159, %166 ]
  %170 = inttoptr i64 %169 to %"class.v8::internal::GuardedAlternative"*
  %171 = load i32, i32* %141, align 4
  %172 = icmp sgt i32 %171, 0
  br i1 %172, label %173, label %181

173:                                              ; preds = %168
  %174 = inttoptr i64 %169 to i8*
  %175 = bitcast %"class.v8::internal::ZoneList.1148"* %139 to i8**
  %176 = load i8*, i8** %175, align 8
  %177 = icmp eq i32 %171, 1
  %178 = sext i32 %171 to i64
  %179 = shl nsw i64 %178, 4
  %180 = select i1 %177, i64 16, i64 %179
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* align 1 %176, i64 %180, i1 false) #18
  br label %181

181:                                              ; preds = %173, %168
  %182 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %139, i64 0, i32 0
  store %"class.v8::internal::GuardedAlternative"* %170, %"class.v8::internal::GuardedAlternative"** %182, align 8
  store i32 %155, i32* %143, align 8
  %183 = load i32, i32* %141, align 4
  %184 = add nsw i32 %183, 1
  store i32 %184, i32* %141, align 4
  %185 = sext i32 %183 to i64
  %186 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %170, i64 %185, i32 0
  store %"class.v8::internal::RegExpNode"* %138, %"class.v8::internal::RegExpNode"** %186, align 8
  %187 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %170, i64 %185, i32 1
  br label %188

188:                                              ; preds = %146, %181
  %189 = phi %"class.v8::internal::ZoneList.1140"** [ %152, %146 ], [ %187, %181 ]
  store %"class.v8::internal::ZoneList.1140"* null, %"class.v8::internal::ZoneList.1140"** %189, align 8
  %190 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %54, i64 0, i32 0
  br label %191

191:                                              ; preds = %188, %35, %4
  %192 = phi %"class.v8::internal::RegExpNode"* [ %12, %4 ], [ %190, %188 ], [ %47, %35 ]
  br i1 %3, label %193, label %206

193:                                              ; preds = %191
  %194 = bitcast %"class.v8::internal::RegExpNode"* %192 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)***
  %195 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*** %194, align 8
  %196 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %195, i64 10
  %197 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %196, align 8
  %198 = call %"class.v8::internal::RegExpNode"* %197(%"class.v8::internal::RegExpNode"* %192, i32 100) #18
  %199 = icmp eq %"class.v8::internal::RegExpNode"* %198, null
  br i1 %199, label %217, label %200

200:                                              ; preds = %193
  %201 = bitcast %"class.v8::internal::RegExpNode"* %198 to %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)***
  %202 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)**, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*** %201, align 8
  %203 = getelementptr inbounds %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %202, i64 10
  %204 = load %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)*, %"class.v8::internal::RegExpNode"* (%"class.v8::internal::RegExpNode"*, i32)** %203, align 8
  %205 = call %"class.v8::internal::RegExpNode"* %204(%"class.v8::internal::RegExpNode"* nonnull %198, i32 100) #18
  br label %214

206:                                              ; preds = %191
  %207 = and i32 %2, 16
  %208 = icmp eq i32 %207, 0
  %209 = and i32 %2, 9
  %210 = icmp eq i32 %209, 0
  %211 = or i1 %208, %210
  br i1 %211, label %214, label %212

212:                                              ; preds = %206
  %213 = call %"class.v8::internal::RegExpNode"* @_ZN2v88internal14RegExpCompiler33OptionallyStepBackToLeadSurrogateEPNS0_10RegExpNodeENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpCompiler"* %0, %"class.v8::internal::RegExpNode"* %192, i32 %2)
  br label %214

214:                                              ; preds = %206, %212, %200
  %215 = phi %"class.v8::internal::RegExpNode"* [ %205, %200 ], [ %213, %212 ], [ %192, %206 ]
  %216 = icmp eq %"class.v8::internal::RegExpNode"* %215, null
  br i1 %216, label %217, label %243

217:                                              ; preds = %193, %214
  %218 = getelementptr inbounds %"class.v8::internal::RegExpCompiler", %"class.v8::internal::RegExpCompiler"* %0, i64 0, i32 15
  %219 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %218, align 8
  %220 = ptrtoint %"class.v8::internal::Zone"* %219 to i64
  %221 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %219, i64 0, i32 2
  %222 = load i64, i64* %221, align 8
  %223 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %219, i64 0, i32 3
  %224 = load i64, i64* %223, align 8
  %225 = sub i64 %224, %222
  %226 = icmp ult i64 %225, 64
  br i1 %226, label %227, label %229, !prof !2

227:                                              ; preds = %217
  %228 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %219, i64 64) #18
  br label %231

229:                                              ; preds = %217
  %230 = add i64 %222, 64
  store i64 %230, i64* %221, align 8
  br label %231

231:                                              ; preds = %227, %229
  %232 = phi i64 [ %228, %227 ], [ %222, %229 ]
  %233 = inttoptr i64 %232 to %"class.v8::internal::EndNode"*
  %234 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %233, i64 0, i32 0, i32 0
  %235 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %233, i64 0, i32 0, i32 1
  %236 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %233, i64 0, i32 0, i32 8
  %237 = bitcast %"class.v8::internal::RegExpNode"** %235 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %237, i8 0, i64 24, i1 false) #18
  %238 = bitcast %"class.v8::internal::Zone"** %236 to i64*
  store i64 %220, i64* %238, align 8
  %239 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %233, i64 0, i32 0, i32 7, i64 0
  %240 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %239 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %240, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal7EndNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %234, align 8
  %241 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %233, i64 0, i32 1
  store i32 1, i32* %241, align 8
  %242 = getelementptr inbounds %"class.v8::internal::EndNode", %"class.v8::internal::EndNode"* %233, i64 0, i32 0
  br label %243

243:                                              ; preds = %231, %214
  %244 = phi %"class.v8::internal::RegExpNode"* [ %242, %231 ], [ %215, %214 ]
  ret %"class.v8::internal::RegExpNode"* %244
}

declare %"class.v8::internal::RegExpNode"* @_ZN2v88internal13RegExpCapture6ToNodeEPNS0_10RegExpTreeEiPNS0_14RegExpCompilerEPNS0_10RegExpNodeE(%"class.v8::internal::RegExpTree"*, i32, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*) local_unnamed_addr #5

declare %"class.v8::internal::RegExpNode"* @_ZN2v88internal16RegExpQuantifier6ToNodeEiibPNS0_10RegExpTreeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeEb(i32, i32, i1 zeroext, %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpCompiler"*, %"class.v8::internal::RegExpNode"*, i1 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal10RegExpTreeD2Ev(%"class.v8::internal::RegExpTree"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal10RegExpTreeD0Ev(%"class.v8::internal::RegExpTree"*) unnamed_addr #2 comdat align 2 {
  tail call void @llvm.trap() #17
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal10RegExpTree13IsTextElementEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #2 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal10RegExpTree17IsAnchoredAtStartEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #2 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal10RegExpTree15IsAnchoredAtEndEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #2 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v88internal10RegExpTree16CaptureRegistersEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #2 comdat align 2 {
  ret i64 -4294967297
}

declare %"class.v8::internal::RegExpDisjunction"* @_ZN2v88internal10RegExpTree13AsDisjunctionEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree13IsDisjunctionEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare %"class.v8::internal::RegExpAlternative"* @_ZN2v88internal10RegExpTree13AsAlternativeEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree13IsAlternativeEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare %"class.v8::internal::RegExpAssertion"* @_ZN2v88internal10RegExpTree11AsAssertionEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree11IsAssertionEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal10RegExpTree16AsCharacterClassEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree16IsCharacterClassEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare %"class.v8::internal::RegExpAtom"* @_ZN2v88internal10RegExpTree6AsAtomEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree6IsAtomEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare %"class.v8::internal::RegExpQuantifier"* @_ZN2v88internal10RegExpTree12AsQuantifierEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree12IsQuantifierEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare %"class.v8::internal::RegExpCapture"* @_ZN2v88internal10RegExpTree9AsCaptureEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree9IsCaptureEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare %"class.v8::internal::RegExpGroup"* @_ZN2v88internal10RegExpTree7AsGroupEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree7IsGroupEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare %"class.v8::internal::RegExpLookaround"* @_ZN2v88internal10RegExpTree12AsLookaroundEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree12IsLookaroundEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare %"class.v8::internal::RegExpBackReference"* @_ZN2v88internal10RegExpTree15AsBackReferenceEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree15IsBackReferenceEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare %"class.v8::internal::RegExpEmpty"* @_ZN2v88internal10RegExpTree7AsEmptyEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree7IsEmptyEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare %"class.v8::internal::RegExpText"* @_ZN2v88internal10RegExpTree6AsTextEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

declare zeroext i1 @_ZN2v88internal10RegExpTree6IsTextEv(%"class.v8::internal::RegExpTree"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2v88internal10RegExpNode20GreedyLoopTextLengthEv(%"class.v8::internal::RegExpNode"*) unnamed_addr #2 comdat align 2 {
  ret i32 -2147483648
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal10RegExpNode32GetSuccessorOfOmnivorousTextNodeEPNS0_14RegExpCompilerE(%"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpCompiler"*) unnamed_addr #2 comdat align 2 {
  ret %"class.v8::internal::RegExpNode"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal10RegExpNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb(%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1 zeroext) unnamed_addr #2 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::RegExpNode"* @_ZN2v88internal10RegExpNode13FilterOneByteEi(%"class.v8::internal::RegExpNode"*, i32) unnamed_addr #2 comdat align 2 {
  ret %"class.v8::internal::RegExpNode"* %0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal13SeqRegExpNodeD0Ev(%"class.v8::internal::SeqRegExpNode"*) unnamed_addr #11 comdat align 2 {
  tail call void @llvm.trap() #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal13SeqRegExpNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb(%"class.v8::internal::SeqRegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1 zeroext) unnamed_addr #2 comdat align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %7, align 8
  %9 = add nsw i32 %3, -1
  %10 = bitcast %"class.v8::internal::RegExpNode"* %8 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)***
  %11 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %11, i64 9
  %13 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %12, align 8
  tail call void %13(%"class.v8::internal::RegExpNode"* %8, %"class.v8::internal::Isolate"* %1, i32 %2, i32 %9, %"class.v8::internal::BoyerMooreLookahead"* %4, i1 zeroext %5) #18
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %6
  %16 = zext i1 %5 to i64
  %17 = getelementptr inbounds %"class.v8::internal::SeqRegExpNode", %"class.v8::internal::SeqRegExpNode"* %0, i64 0, i32 0, i32 7, i64 %16
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %17, align 8
  br label %18

18:                                               ; preds = %15, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal10ActionNodeD0Ev(%"class.v8::internal::ActionNode"*) unnamed_addr #11 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2v88internal10ActionNode20GreedyLoopTextLengthEv(%"class.v8::internal::ActionNode"*) unnamed_addr #2 comdat align 2 {
  ret i32 -2147483648
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8TextNodeD0Ev(%"class.v8::internal::TextNode"*) unnamed_addr #11 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal13AssertionNodeD0Ev(%"class.v8::internal::AssertionNode"*) unnamed_addr #11 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17BackReferenceNodeD0Ev(%"class.v8::internal::BackReferenceNode"*) unnamed_addr #11 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17BackReferenceNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib(%"class.v8::internal::BackReferenceNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1 zeroext) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal7EndNodeD0Ev(%"class.v8::internal::EndNode"*) unnamed_addr #11 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal7EndNode20GetQuickCheckDetailsEPNS0_17QuickCheckDetailsEPNS0_14RegExpCompilerEib(%"class.v8::internal::EndNode"*, %"class.v8::internal::QuickCheckDetails"*, %"class.v8::internal::RegExpCompiler"*, i32, i1 zeroext) unnamed_addr #2 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal7EndNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb(%"class.v8::internal::EndNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1 zeroext) unnamed_addr #2 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal23NegativeSubmatchSuccessD0Ev(%"class.v8::internal::NegativeSubmatchSuccess"*) unnamed_addr #11 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal10ChoiceNodeD0Ev(%"class.v8::internal::ChoiceNode"*) unnamed_addr #11 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal10ChoiceNode39try_to_emit_quick_check_for_alternativeEb(%"class.v8::internal::ChoiceNode"*, i1 zeroext) unnamed_addr #2 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal10ChoiceNode13read_backwardEv(%"class.v8::internal::ChoiceNode"*) unnamed_addr #2 comdat align 2 {
  ret i1 false
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal28NegativeLookaroundChoiceNodeD0Ev(%"class.v8::internal::NegativeLookaroundChoiceNode"*) unnamed_addr #11 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal28NegativeLookaroundChoiceNode12FillInBMInfoEPNS0_7IsolateEiiPNS0_19BoyerMooreLookaheadEb(%"class.v8::internal::NegativeLookaroundChoiceNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1 zeroext) unnamed_addr #2 comdat align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %8, i64 0, i32 0
  %10 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %10, i64 1, i32 0
  %12 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %11, align 8
  %13 = add nsw i32 %3, -1
  %14 = bitcast %"class.v8::internal::RegExpNode"* %12 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)***
  %15 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %15, i64 9
  %17 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::Isolate"*, i32, i32, %"class.v8::internal::BoyerMooreLookahead"*, i1)** %16, align 8
  tail call void %17(%"class.v8::internal::RegExpNode"* %12, %"class.v8::internal::Isolate"* %1, i32 %2, i32 %13, %"class.v8::internal::BoyerMooreLookahead"* %4, i1 zeroext %5) #18
  %18 = icmp eq i32 %2, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %6
  %20 = zext i1 %5 to i64
  %21 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 %20
  store %"class.v8::internal::BoyerMooreLookahead"* %4, %"class.v8::internal::BoyerMooreLookahead"** %21, align 8
  br label %22

22:                                               ; preds = %19, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal28NegativeLookaroundChoiceNode39try_to_emit_quick_check_for_alternativeEb(%"class.v8::internal::NegativeLookaroundChoiceNode"*, i1 zeroext) unnamed_addr #2 comdat align 2 {
  %3 = xor i1 %1, true
  ret i1 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2v88internal10RegExpNodeD2Ev(%"class.v8::internal::RegExpNode"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal14LoopChoiceNodeD0Ev(%"class.v8::internal::LoopChoiceNode"*) unnamed_addr #11 comdat align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal14LoopChoiceNode13read_backwardEv(%"class.v8::internal::LoopChoiceNode"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %0, i64 0, i32 4
  %3 = load i8, i8* %2, align 1, !range !3
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #12

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN2v88internal17RegExpCaseFolding9IgnoreSetEv() local_unnamed_addr #5

declare signext i8 @_ZNK6icu_6910UnicodeSet8containsEi(%"class.icu_69::UnicodeSet"*, i32) unnamed_addr #5

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN2v88internal17RegExpCaseFolding13SpecialAddSetEv() local_unnamed_addr #5

declare void @_ZN6icu_6910UnicodeSetC1Ev(%"class.icu_69::UnicodeSet"*) unnamed_addr #5

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet3addEi(%"class.icu_69::UnicodeSet"*, i32) local_unnamed_addr #5

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9closeOverEi(%"class.icu_69::UnicodeSet"*, i32) local_unnamed_addr #5

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSetaSERKS0_(%"class.icu_69::UnicodeSet"*, %"class.icu_69::UnicodeSet"* dereferenceable(200)) local_unnamed_addr #5

declare i32 @_ZNK6icu_6910UnicodeSet13getRangeCountEv(%"class.icu_69::UnicodeSet"*) unnamed_addr #5

declare i32 @_ZNK6icu_6910UnicodeSet13getRangeStartEi(%"class.icu_69::UnicodeSet"*, i32) unnamed_addr #5

declare i32 @_ZNK6icu_6910UnicodeSet11getRangeEndEi(%"class.icu_69::UnicodeSet"*, i32) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6icu_6910UnicodeSetD1Ev(%"class.icu_69::UnicodeSet"*) unnamed_addr #13

declare void @_ZN6icu_6913UnicodeStringC1Ei(%"class.icu_69::UnicodeString"*, i32) unnamed_addr #5

declare dereferenceable(64) %"class.icu_69::UnicodeString"* @_ZN6icu_6913UnicodeString7toUpperEv(%"class.icu_69::UnicodeString"*) local_unnamed_addr #5

declare i32 @_ZNK6icu_6913UnicodeString8char32AtEi(%"class.icu_69::UnicodeString"*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"*) unnamed_addr #13

declare %"class.v8::internal::ZoneList.18"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"*, %"class.v8::internal::Zone"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internalL16GenerateBranchesEPNS0_20RegExpMacroAssemblerEPNS0_8ZoneListIjEEjjjjPNS0_5LabelES7_S7_(%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::ZoneList.1139"* readonly, i32, i32, i32, i32, %"class.v8::internal::Label"* readnone, %"class.v8::internal::Label"*, %"class.v8::internal::Label"*) unnamed_addr #2 {
  %10 = alloca [128 x i8], align 16
  %11 = alloca %"class.v8::internal::Label", align 4
  %12 = alloca %"class.v8::internal::Label", align 4
  %13 = alloca %"class.v8::internal::Label", align 4
  %14 = getelementptr inbounds %"class.v8::internal::ZoneList.1139", %"class.v8::internal::ZoneList.1139"* %1, i64 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds i32, i32* %15, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %3 to i64
  %20 = getelementptr inbounds i32, i32* %15, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, -1
  %23 = icmp eq i32 %3, %2
  br i1 %23, label %24, label %44

24:                                               ; preds = %9
  %25 = icmp eq %"class.v8::internal::Label"* %8, %6
  %26 = trunc i32 %18 to i16
  br i1 %25, label %38, label %27

27:                                               ; preds = %24
  %28 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)***
  %29 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %29, i64 12
  %31 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %30, align 8
  tail call void %31(%"class.v8::internal::RegExpMacroAssembler"* %0, i16 zeroext %26, %"class.v8::internal::Label"* %8) #18
  %32 = icmp eq %"class.v8::internal::Label"* %7, %6
  br i1 %32, label %430, label %33

33:                                               ; preds = %27
  %34 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %35 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %34, align 8
  %36 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %35, i64 29
  %37 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %36, align 8
  tail call void %37(%"class.v8::internal::RegExpMacroAssembler"* %0, %"class.v8::internal::Label"* %7) #18
  br label %430

38:                                               ; preds = %24
  %39 = add i16 %26, -1
  %40 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)***
  %41 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %40, align 8
  %42 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %41, i64 11
  %43 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %42, align 8
  tail call void %43(%"class.v8::internal::RegExpMacroAssembler"* %0, i16 zeroext %39, %"class.v8::internal::Label"* %7) #18
  br label %430

44:                                               ; preds = %9
  %45 = add i32 %2, 1
  %46 = icmp eq i32 %45, %3
  br i1 %46, label %47, label %83

47:                                               ; preds = %44
  %48 = icmp eq %"class.v8::internal::Label"* %7, %6
  %49 = icmp eq i32 %18, %22
  br i1 %48, label %50, label %63

50:                                               ; preds = %47
  br i1 %49, label %51, label %56

51:                                               ; preds = %50
  %52 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %53 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %53, i64 18
  %55 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %54, align 8
  tail call void %55(%"class.v8::internal::RegExpMacroAssembler"* %0, i32 %18, %"class.v8::internal::Label"* %8) #18
  br label %430

56:                                               ; preds = %50
  %57 = trunc i32 %18 to i16
  %58 = trunc i32 %22 to i16
  %59 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)***
  %60 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*** %59, align 8
  %61 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)** %60, i64 22
  %62 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)** %61, align 8
  tail call void %62(%"class.v8::internal::RegExpMacroAssembler"* %0, i16 zeroext %57, i16 zeroext %58, %"class.v8::internal::Label"* %8) #18
  br label %430

63:                                               ; preds = %47
  br i1 %49, label %64, label %69

64:                                               ; preds = %63
  %65 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %66 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %65, align 8
  %67 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %66, i64 9
  %68 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %67, align 8
  tail call void %68(%"class.v8::internal::RegExpMacroAssembler"* %0, i32 %18, %"class.v8::internal::Label"* %7) #18
  br label %76

69:                                               ; preds = %63
  %70 = trunc i32 %18 to i16
  %71 = trunc i32 %22 to i16
  %72 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)***
  %73 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*** %72, align 8
  %74 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)** %73, i64 21
  %75 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)** %74, align 8
  tail call void %75(%"class.v8::internal::RegExpMacroAssembler"* %0, i16 zeroext %70, i16 zeroext %71, %"class.v8::internal::Label"* %7) #18
  br label %76

76:                                               ; preds = %69, %64
  %77 = icmp eq %"class.v8::internal::Label"* %8, %6
  br i1 %77, label %430, label %78

78:                                               ; preds = %76
  %79 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %80 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %79, align 8
  %81 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %80, i64 29
  %82 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %81, align 8
  tail call void %82(%"class.v8::internal::RegExpMacroAssembler"* %0, %"class.v8::internal::Label"* %8) #18
  br label %430

83:                                               ; preds = %44
  %84 = sub i32 %3, %2
  %85 = icmp ult i32 %84, 7
  br i1 %85, label %86, label %219

86:                                               ; preds = %83, %92
  %87 = phi i32 [ %96, %92 ], [ %18, %83 ]
  %88 = phi i32 [ %93, %92 ], [ %2, %83 ]
  %89 = icmp ult i32 %88, %3
  br i1 %89, label %92, label %90

90:                                               ; preds = %86
  %91 = sext i32 %45 to i64
  br label %101

92:                                               ; preds = %86
  %93 = add nuw i32 %88, 1
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32* %15, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = add i32 %96, -1
  %98 = icmp eq i32 %87, %97
  br i1 %98, label %99, label %86

99:                                               ; preds = %92
  %100 = sext i32 %88 to i64
  br label %101

101:                                              ; preds = %99, %90
  %102 = phi i64 [ %91, %90 ], [ %94, %99 ]
  %103 = phi i32 [ %45, %90 ], [ %93, %99 ]
  %104 = phi i64 [ %16, %90 ], [ %100, %99 ]
  %105 = phi i32 [ %2, %90 ], [ %88, %99 ]
  %106 = sub i32 %105, %2
  %107 = and i32 %106, 1
  %108 = icmp eq i32 %107, 0
  %109 = select i1 %108, %"class.v8::internal::Label"* %7, %"class.v8::internal::Label"* %8
  %110 = bitcast %"class.v8::internal::Label"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %110) #18
  %111 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %11, i64 0, i32 0
  store i32 0, i32* %111, align 4
  %112 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %11, i64 0, i32 1
  store i32 0, i32* %112, align 4
  %113 = getelementptr inbounds i32, i32* %15, i64 %104
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds i32, i32* %15, i64 %102
  %116 = load i32, i32* %115, align 4
  %117 = add i32 %116, -1
  %118 = icmp eq %"class.v8::internal::Label"* %109, %11
  %119 = icmp eq i32 %114, %117
  br i1 %118, label %120, label %133

120:                                              ; preds = %101
  br i1 %119, label %121, label %126

121:                                              ; preds = %120
  %122 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %123 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %122, align 8
  %124 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %123, i64 18
  %125 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %124, align 8
  call void %125(%"class.v8::internal::RegExpMacroAssembler"* %0, i32 %114, %"class.v8::internal::Label"* nonnull %11) #18
  br label %146

126:                                              ; preds = %120
  %127 = trunc i32 %114 to i16
  %128 = trunc i32 %117 to i16
  %129 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)***
  %130 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*** %129, align 8
  %131 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)** %130, i64 22
  %132 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)** %131, align 8
  call void %132(%"class.v8::internal::RegExpMacroAssembler"* %0, i16 zeroext %127, i16 zeroext %128, %"class.v8::internal::Label"* nonnull %11) #18
  br label %146

133:                                              ; preds = %101
  br i1 %119, label %134, label %139

134:                                              ; preds = %133
  %135 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)***
  %136 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*** %135, align 8
  %137 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %136, i64 9
  %138 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i32, %"class.v8::internal::Label"*)** %137, align 8
  call void %138(%"class.v8::internal::RegExpMacroAssembler"* %0, i32 %114, %"class.v8::internal::Label"* %109) #18
  br label %146

139:                                              ; preds = %133
  %140 = trunc i32 %114 to i16
  %141 = trunc i32 %117 to i16
  %142 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)***
  %143 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*** %142, align 8
  %144 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)** %143, i64 21
  %145 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, i16, %"class.v8::internal::Label"*)** %144, align 8
  call void %145(%"class.v8::internal::RegExpMacroAssembler"* %0, i16 zeroext %140, i16 zeroext %141, %"class.v8::internal::Label"* %109) #18
  br label %146

146:                                              ; preds = %139, %134, %126, %121
  %147 = icmp ugt i32 %105, %2
  br i1 %147, label %148, label %164

148:                                              ; preds = %146
  %149 = sub i32 %105, %2
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %160, label %152

152:                                              ; preds = %148
  %153 = add i32 %105, -1
  %154 = load i32*, i32** %14, align 8
  %155 = sext i32 %153 to i64
  %156 = getelementptr inbounds i32, i32* %154, i64 %155
  %157 = load i32, i32* %156, align 4
  %158 = sext i32 %105 to i64
  %159 = getelementptr inbounds i32, i32* %154, i64 %158
  store i32 %157, i32* %159, align 4
  br label %160

160:                                              ; preds = %148, %152
  %161 = phi i32 [ %105, %148 ], [ %153, %152 ]
  %162 = add i32 %2, 1
  %163 = icmp eq i32 %105, %162
  br i1 %163, label %164, label %183

164:                                              ; preds = %160, %183, %146
  %165 = icmp ult i32 %103, %3
  br i1 %165, label %166, label %217

166:                                              ; preds = %164
  %167 = sub i32 %3, %103
  %168 = xor i32 %103, -1
  %169 = and i32 %167, 1
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %179, label %171

171:                                              ; preds = %166
  %172 = add nuw i32 %103, 1
  %173 = load i32*, i32** %14, align 8
  %174 = sext i32 %172 to i64
  %175 = getelementptr inbounds i32, i32* %173, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = sext i32 %103 to i64
  %178 = getelementptr inbounds i32, i32* %173, i64 %177
  store i32 %176, i32* %178, align 4
  br label %179

179:                                              ; preds = %166, %171
  %180 = phi i32 [ %103, %166 ], [ %172, %171 ]
  %181 = sub i32 0, %3
  %182 = icmp eq i32 %168, %181
  br i1 %182, label %217, label %200

183:                                              ; preds = %160, %183
  %184 = phi i32 [ %192, %183 ], [ %161, %160 ]
  %185 = add i32 %184, -1
  %186 = load i32*, i32** %14, align 8
  %187 = sext i32 %185 to i64
  %188 = getelementptr inbounds i32, i32* %186, i64 %187
  %189 = load i32, i32* %188, align 4
  %190 = sext i32 %184 to i64
  %191 = getelementptr inbounds i32, i32* %186, i64 %190
  store i32 %189, i32* %191, align 4
  %192 = add i32 %184, -2
  %193 = load i32*, i32** %14, align 8
  %194 = sext i32 %192 to i64
  %195 = getelementptr inbounds i32, i32* %193, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %185 to i64
  %198 = getelementptr inbounds i32, i32* %193, i64 %197
  store i32 %196, i32* %198, align 4
  %199 = icmp ugt i32 %192, %2
  br i1 %199, label %183, label %164

200:                                              ; preds = %179, %200
  %201 = phi i32 [ %209, %200 ], [ %180, %179 ]
  %202 = add nuw i32 %201, 1
  %203 = load i32*, i32** %14, align 8
  %204 = sext i32 %202 to i64
  %205 = getelementptr inbounds i32, i32* %203, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = sext i32 %201 to i64
  %208 = getelementptr inbounds i32, i32* %203, i64 %207
  store i32 %206, i32* %208, align 4
  %209 = add nuw i32 %201, 2
  %210 = load i32*, i32** %14, align 8
  %211 = sext i32 %209 to i64
  %212 = getelementptr inbounds i32, i32* %210, i64 %211
  %213 = load i32, i32* %212, align 4
  %214 = sext i32 %202 to i64
  %215 = getelementptr inbounds i32, i32* %210, i64 %214
  store i32 %213, i32* %215, align 4
  %216 = icmp eq i32 %209, %3
  br i1 %216, label %217, label %200

217:                                              ; preds = %179, %200, %164
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %110) #18
  %218 = add i32 %3, -1
  call fastcc void @_ZN2v88internalL16GenerateBranchesEPNS0_20RegExpMacroAssemblerEPNS0_8ZoneListIjEEjjjjPNS0_5LabelES7_S7_(%"class.v8::internal::RegExpMacroAssembler"* %0, %"class.v8::internal::ZoneList.1139"* %1, i32 %45, i32 %218, i32 %4, i32 %5, %"class.v8::internal::Label"* %6, %"class.v8::internal::Label"* %7, %"class.v8::internal::Label"* %8)
  br label %430

219:                                              ; preds = %83
  %220 = lshr i32 %5, 7
  %221 = lshr i32 %4, 7
  %222 = icmp eq i32 %220, %221
  br i1 %222, label %223, label %323

223:                                              ; preds = %219, %223
  %224 = phi i32 [ %226, %223 ], [ %2, %219 ]
  %225 = icmp ugt i32 %224, %3
  %226 = add i32 %224, 1
  br i1 %225, label %227, label %223

227:                                              ; preds = %223
  %228 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %228) #18
  %229 = icmp eq %"class.v8::internal::Label"* %7, %6
  %230 = select i1 %229, %"class.v8::internal::Label"* %7, %"class.v8::internal::Label"* %8
  %231 = select i1 %229, %"class.v8::internal::Label"* %8, %"class.v8::internal::Label"* %7
  %232 = and i32 %18, 127
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %237, label %234

234:                                              ; preds = %227
  %235 = zext i1 %229 to i8
  %236 = zext i32 %232 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %228, i8 %235, i64 %236, i1 false) #18
  br label %237

237:                                              ; preds = %234, %227
  %238 = xor i1 %229, true
  %239 = zext i1 %238 to i32
  %240 = icmp ugt i32 %3, %2
  br i1 %240, label %245, label %267

241:                                              ; preds = %245, %256
  %242 = phi i32 [ %249, %245 ], [ %254, %256 ]
  %243 = xor i32 %247, 1
  %244 = icmp eq i32 %250, %3
  br i1 %244, label %267, label %245

245:                                              ; preds = %237, %241
  %246 = phi i32 [ %253, %241 ], [ %18, %237 ]
  %247 = phi i32 [ %243, %241 ], [ %239, %237 ]
  %248 = phi i32 [ %250, %241 ], [ %2, %237 ]
  %249 = and i32 %246, 127
  %250 = add nuw i32 %248, 1
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds i32, i32* %15, i64 %251
  %253 = load i32, i32* %252, align 4
  %254 = and i32 %253, 127
  %255 = icmp ult i32 %249, %254
  br i1 %255, label %256, label %241

256:                                              ; preds = %245
  %257 = trunc i32 %247 to i8
  %258 = zext i32 %249 to i64
  %259 = getelementptr [128 x i8], [128 x i8]* %10, i64 0, i64 %258
  %260 = add nuw nsw i32 %249, 1
  %261 = icmp ugt i32 %260, %254
  %262 = select i1 %261, i32 %260, i32 %254
  %263 = xor i32 %249, -1
  %264 = add nsw i32 %262, %263
  %265 = zext i32 %264 to i64
  %266 = add nuw nsw i64 %265, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %259, i8 %257, i64 %266, i1 false) #18
  br label %241

267:                                              ; preds = %241, %237
  %268 = phi i32 [ %239, %237 ], [ %243, %241 ]
  %269 = phi i32 [ 0, %237 ], [ %242, %241 ]
  %270 = trunc i32 %268 to i8
  %271 = zext i32 %269 to i64
  %272 = getelementptr [128 x i8], [128 x i8]* %10, i64 0, i64 %271
  %273 = sub nuw nsw i32 127, %269
  %274 = zext i32 %273 to i64
  %275 = add nuw nsw i64 %274, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %272, i8 %270, i64 %275, i1 false) #18
  %276 = getelementptr inbounds %"class.v8::internal::RegExpMacroAssembler", %"class.v8::internal::RegExpMacroAssembler"* %0, i64 0, i32 5
  %277 = bitcast %"class.v8::internal::Isolate"** %276 to %"class.v8::internal::FactoryBase"**
  %278 = load %"class.v8::internal::FactoryBase"*, %"class.v8::internal::FactoryBase"** %277, align 8
  %279 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewByteArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %278, i32 128, i8 zeroext 1) #18
  br label %286

280:                                              ; preds = %286
  %281 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)***
  %282 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)*** %281, align 8
  %283 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)** %282, i64 23
  %284 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i64*, %"class.v8::internal::Label"*)** %283, align 8
  tail call void %284(%"class.v8::internal::RegExpMacroAssembler"* %0, i64* %279, %"class.v8::internal::Label"* %231) #18
  %285 = icmp eq %"class.v8::internal::Label"* %230, %6
  br i1 %285, label %322, label %317

286:                                              ; preds = %286, %267
  %287 = phi i64 [ 0, %267 ], [ %315, %286 ]
  %288 = load i64, i64* %279, align 8
  %289 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 %287
  %290 = load i8, i8* %289, align 4
  %291 = add nuw nsw i64 %287, 7
  %292 = add i64 %291, %288
  %293 = inttoptr i64 %292 to i8*
  store i8 %290, i8* %293, align 1
  %294 = or i64 %287, 1
  %295 = load i64, i64* %279, align 8
  %296 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 %294
  %297 = load i8, i8* %296, align 1
  %298 = add nuw nsw i64 %287, 8
  %299 = add i64 %298, %295
  %300 = inttoptr i64 %299 to i8*
  store i8 %297, i8* %300, align 1
  %301 = or i64 %287, 2
  %302 = load i64, i64* %279, align 8
  %303 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 %301
  %304 = load i8, i8* %303, align 2
  %305 = add nuw nsw i64 %287, 9
  %306 = add i64 %305, %302
  %307 = inttoptr i64 %306 to i8*
  store i8 %304, i8* %307, align 1
  %308 = or i64 %287, 3
  %309 = load i64, i64* %279, align 8
  %310 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 %308
  %311 = load i8, i8* %310, align 1
  %312 = add nuw nsw i64 %287, 10
  %313 = add i64 %312, %309
  %314 = inttoptr i64 %313 to i8*
  store i8 %311, i8* %314, align 1
  %315 = add nuw nsw i64 %287, 4
  %316 = icmp eq i64 %315, 128
  br i1 %316, label %280, label %286

317:                                              ; preds = %280
  %318 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %319 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %318, align 8
  %320 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %319, i64 29
  %321 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %320, align 8
  tail call void %321(%"class.v8::internal::RegExpMacroAssembler"* %0, %"class.v8::internal::Label"* %230) #18
  br label %322

322:                                              ; preds = %280, %317
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %228) #18
  br label %430

323:                                              ; preds = %219
  %324 = lshr i32 %18, 7
  %325 = icmp eq i32 %221, %324
  br i1 %325, label %332, label %326

326:                                              ; preds = %323
  %327 = trunc i32 %18 to i16
  %328 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)***
  %329 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %328, align 8
  %330 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %329, i64 12
  %331 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %330, align 8
  tail call void %331(%"class.v8::internal::RegExpMacroAssembler"* %0, i16 zeroext %327, %"class.v8::internal::Label"* %8) #18
  tail call fastcc void @_ZN2v88internalL16GenerateBranchesEPNS0_20RegExpMacroAssemblerEPNS0_8ZoneListIjEEjjjjPNS0_5LabelES7_S7_(%"class.v8::internal::RegExpMacroAssembler"* %0, %"class.v8::internal::ZoneList.1139"* %1, i32 %45, i32 %3, i32 %18, i32 %5, %"class.v8::internal::Label"* %6, %"class.v8::internal::Label"* %8, %"class.v8::internal::Label"* %7)
  br label %430

332:                                              ; preds = %323
  %333 = add i32 %18, 128
  %334 = and i32 %333, -128
  %335 = icmp ule i32 %3, %2
  %336 = icmp ugt i32 %18, %334
  %337 = or i1 %335, %336
  br i1 %337, label %347, label %338

338:                                              ; preds = %332, %342
  %339 = phi i32 [ %340, %342 ], [ %2, %332 ]
  %340 = add i32 %339, 1
  %341 = icmp eq i32 %340, %3
  br i1 %341, label %347, label %342

342:                                              ; preds = %338
  %343 = sext i32 %340 to i64
  %344 = getelementptr inbounds i32, i32* %15, i64 %343
  %345 = load i32, i32* %344, align 4
  %346 = icmp ugt i32 %345, %334
  br i1 %346, label %347, label %338

347:                                              ; preds = %342, %338, %332
  %348 = phi i32 [ %2, %332 ], [ %3, %338 ], [ %340, %342 ]
  %349 = add i32 %3, %2
  %350 = lshr i32 %349, 1
  %351 = add i32 %334, -1
  %352 = icmp ugt i32 %351, 255
  br i1 %352, label %353, label %382

353:                                              ; preds = %347
  %354 = sub i32 %348, %2
  %355 = shl i32 %354, 1
  %356 = icmp ugt i32 %84, %355
  br i1 %356, label %357, label %382

357:                                              ; preds = %353
  %358 = xor i32 %18, -1
  %359 = add i32 %21, %358
  %360 = icmp ugt i32 %359, 256
  %361 = icmp ugt i32 %350, %348
  %362 = and i1 %360, %361
  br i1 %362, label %363, label %382

363:                                              ; preds = %357
  %364 = zext i32 %350 to i64
  %365 = getelementptr inbounds i32, i32* %15, i64 %364
  %366 = load i32, i32* %365, align 4
  %367 = add i32 %18, 256
  %368 = icmp ult i32 %366, %367
  br i1 %368, label %382, label %369

369:                                              ; preds = %363
  %370 = or i32 %366, 127
  %371 = add i32 %370, 1
  %372 = icmp ult i32 %350, %3
  br i1 %372, label %373, label %382

373:                                              ; preds = %369, %379
  %374 = phi i32 [ %380, %379 ], [ %350, %369 ]
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds i32, i32* %15, i64 %375
  %377 = load i32, i32* %376, align 4
  %378 = icmp ugt i32 %377, %371
  br i1 %378, label %382, label %379

379:                                              ; preds = %373
  %380 = add i32 %374, 1
  %381 = icmp eq i32 %380, %3
  br i1 %381, label %382, label %373

382:                                              ; preds = %373, %379, %369, %363, %357, %353, %347
  %383 = phi i32 [ %348, %363 ], [ %348, %369 ], [ %348, %357 ], [ %348, %353 ], [ %348, %347 ], [ %374, %373 ], [ %348, %379 ]
  %384 = phi i32 [ %334, %363 ], [ %334, %369 ], [ %334, %357 ], [ %334, %353 ], [ %334, %347 ], [ %371, %373 ], [ %334, %379 ]
  %385 = add i32 %383, -1
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds i32, i32* %15, i64 %386
  %388 = load i32, i32* %387, align 4
  %389 = icmp eq i32 %388, %384
  %390 = add i32 %383, -2
  %391 = select i1 %389, i32 %390, i32 %385
  %392 = icmp ult i32 %384, %21
  %393 = add i32 %3, -1
  %394 = select i1 %392, i32 %383, i32 %3
  %395 = select i1 %392, i32 %391, i32 %393
  %396 = select i1 %392, i32 %384, i32 %21
  %397 = bitcast %"class.v8::internal::Label"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %397) #18
  %398 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %12, i64 0, i32 0
  store i32 0, i32* %398, align 4
  %399 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %12, i64 0, i32 1
  store i32 0, i32* %399, align 4
  br i1 %392, label %405, label %400

400:                                              ; preds = %382
  %401 = xor i32 %3, %2
  %402 = and i32 %401, 1
  %403 = icmp eq i32 %402, 0
  %404 = select i1 %403, %"class.v8::internal::Label"* %7, %"class.v8::internal::Label"* %8
  br label %405

405:                                              ; preds = %382, %400
  %406 = phi %"class.v8::internal::Label"* [ %404, %400 ], [ %12, %382 ]
  %407 = trunc i32 %396 to i16
  %408 = add i16 %407, -1
  %409 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)***
  %410 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*** %409, align 8
  %411 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %410, i64 11
  %412 = load void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, i16, %"class.v8::internal::Label"*)** %411, align 8
  call void %412(%"class.v8::internal::RegExpMacroAssembler"* %0, i16 zeroext %408, %"class.v8::internal::Label"* %406) #18
  %413 = bitcast %"class.v8::internal::Label"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %413) #18
  %414 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %13, i64 0, i32 0
  store i32 0, i32* %414, align 4
  %415 = getelementptr inbounds %"class.v8::internal::Label", %"class.v8::internal::Label"* %13, i64 0, i32 1
  store i32 0, i32* %415, align 4
  %416 = add i32 %396, -1
  call fastcc void @_ZN2v88internalL16GenerateBranchesEPNS0_20RegExpMacroAssemblerEPNS0_8ZoneListIjEEjjjjPNS0_5LabelES7_S7_(%"class.v8::internal::RegExpMacroAssembler"* %0, %"class.v8::internal::ZoneList.1139"* %1, i32 %2, i32 %395, i32 %4, i32 %416, %"class.v8::internal::Label"* nonnull %13, %"class.v8::internal::Label"* %7, %"class.v8::internal::Label"* %8)
  %417 = load i32, i32* %398, align 4
  %418 = icmp sgt i32 %417, 0
  br i1 %418, label %419, label %429

419:                                              ; preds = %405
  %420 = bitcast %"class.v8::internal::RegExpMacroAssembler"* %0 to void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)***
  %421 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)**, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*** %420, align 8
  %422 = getelementptr inbounds void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %421, i64 8
  %423 = load void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)*, void (%"class.v8::internal::RegExpMacroAssembler"*, %"class.v8::internal::Label"*)** %422, align 8
  call void %423(%"class.v8::internal::RegExpMacroAssembler"* %0, %"class.v8::internal::Label"* nonnull %12) #18
  %424 = xor i32 %394, %2
  %425 = and i32 %424, 1
  %426 = icmp ne i32 %425, 0
  %427 = select i1 %426, %"class.v8::internal::Label"* %8, %"class.v8::internal::Label"* %7
  %428 = select i1 %426, %"class.v8::internal::Label"* %7, %"class.v8::internal::Label"* %8
  call fastcc void @_ZN2v88internalL16GenerateBranchesEPNS0_20RegExpMacroAssemblerEPNS0_8ZoneListIjEEjjjjPNS0_5LabelES7_S7_(%"class.v8::internal::RegExpMacroAssembler"* %0, %"class.v8::internal::ZoneList.1139"* %1, i32 %394, i32 %3, i32 %396, i32 %5, %"class.v8::internal::Label"* nonnull %13, %"class.v8::internal::Label"* %427, %"class.v8::internal::Label"* %428)
  br label %429

429:                                              ; preds = %419, %405
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %413) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %397) #18
  br label %430

430:                                              ; preds = %78, %76, %56, %51, %38, %33, %27, %429, %326, %322, %217
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1 immarg) #14

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #15

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.std::__1::bitset"* @_ZNSt3__16bitsetILm128EErSEm(%"class.std::__1::bitset"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = alloca %"class.std::__1::__bit_iterator.1166", align 8
  %4 = alloca %"class.std::__1::__bit_iterator.1166", align 8
  %5 = alloca %"class.std::__1::__bit_iterator.1166", align 8
  %6 = alloca %"class.std::__1::__bit_iterator.1166", align 8
  %7 = icmp ult i64 %1, 128
  %8 = select i1 %7, i64 %1, i64 128
  %9 = lshr i64 %8, 6
  %10 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %0, i64 0, i32 0, i32 0, i64 %9
  %11 = trunc i64 %8 to i32
  %12 = and i32 %11, 63
  %13 = ptrtoint %"class.std::__1::bitset"* %0 to i64
  %14 = bitcast %"class.std::__1::__bit_iterator.1166"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #18
  %15 = bitcast %"class.std::__1::__bit_iterator.1166"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15)
  %16 = bitcast %"class.std::__1::__bit_iterator.1166"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16)
  %17 = bitcast %"class.std::__1::__bit_iterator.1166"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17)
  %18 = icmp eq i32 %12, 0
  br i1 %18, label %19, label %34

19:                                               ; preds = %2
  %20 = and i64 %8, 192
  %21 = sub nsw i64 128, %20
  %22 = icmp ult i64 %20, 128
  br i1 %22, label %23, label %30

23:                                               ; preds = %19
  %24 = bitcast i64* %10 to i8*
  %25 = lshr exact i64 %21, 6
  %26 = bitcast %"class.std::__1::bitset"* %0 to i8*
  %27 = lshr exact i64 %21, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %24, i64 %27, i1 false) #18, !noalias !32
  %28 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %0, i64 0, i32 0, i32 0, i64 %25
  %29 = ptrtoint i64* %28 to i64
  br label %30

30:                                               ; preds = %23, %19
  %31 = phi i64 [ %29, %23 ], [ %13, %19 ]
  %32 = bitcast %"class.std::__1::__bit_iterator.1166"* %6 to i64*
  store i64 %31, i64* %32, align 8, !alias.scope !35
  %33 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %6, i64 0, i32 1
  store i32 0, i32* %33, align 8, !alias.scope !35
  br label %44

34:                                               ; preds = %2
  %35 = ptrtoint i64* %10 to i64
  %36 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %0, i64 0, i32 0, i32 0, i64 2
  %37 = ptrtoint i64* %36 to i64
  %38 = bitcast %"class.std::__1::__bit_iterator.1166"* %3 to i64*
  store i64 %35, i64* %38, align 8, !noalias !38
  %39 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %3, i64 0, i32 1
  store i32 %12, i32* %39, align 8, !noalias !38
  %40 = bitcast %"class.std::__1::__bit_iterator.1166"* %4 to i64*
  store i64 %37, i64* %40, align 8, !noalias !38
  %41 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %4, i64 0, i32 1
  store i32 0, i32* %41, align 8, !noalias !38
  %42 = bitcast %"class.std::__1::__bit_iterator.1166"* %5 to i64*
  store i64 %13, i64* %42, align 8, !noalias !38
  %43 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %5, i64 0, i32 1
  store i32 0, i32* %43, align 8, !noalias !38
  call void @_ZNSt3__116__copy_unalignedINS_8__bitsetILm2ELm128EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_(%"class.std::__1::__bit_iterator.1166"* nonnull sret %6, %"class.std::__1::__bit_iterator.1166"* nonnull %3, %"class.std::__1::__bit_iterator.1166"* nonnull %4, %"class.std::__1::__bit_iterator.1166"* nonnull %5) #18
  br label %44

44:                                               ; preds = %30, %34
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #18
  %45 = sub nuw nsw i64 128, %8
  %46 = lshr i64 %45, 6
  %47 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %0, i64 0, i32 0, i32 0, i64 %46
  %48 = trunc i64 %45 to i32
  %49 = and i32 %48, 63
  %50 = icmp eq i64 %8, 0
  br i1 %50, label %84, label %51

51:                                               ; preds = %44
  %52 = icmp eq i32 %49, 0
  br i1 %52, label %69, label %53

53:                                               ; preds = %51
  %54 = sub nuw nsw i32 64, %49
  %55 = zext i32 %54 to i64
  %56 = icmp ult i64 %8, %55
  %57 = select i1 %56, i64 %8, i64 %55
  %58 = zext i32 %49 to i64
  %59 = shl i64 -1, %58
  %60 = sub nsw i64 %55, %57
  %61 = lshr i64 -1, %60
  %62 = and i64 %61, %59
  %63 = xor i64 %62, -1
  %64 = load i64, i64* %47, align 8
  %65 = and i64 %64, %63
  store i64 %65, i64* %47, align 8
  %66 = sub nsw i64 %8, %57
  %67 = getelementptr inbounds i64, i64* %47, i64 1
  %68 = lshr i64 %66, 6
  br label %69

69:                                               ; preds = %51, %53
  %70 = phi i64 [ %9, %51 ], [ %68, %53 ]
  %71 = phi i64* [ %47, %51 ], [ %67, %53 ]
  %72 = phi i64 [ %8, %51 ], [ %66, %53 ]
  %73 = bitcast i64* %71 to i8*
  %74 = shl nuw nsw i64 %70, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 %74, i1 false) #18
  %75 = and i64 %72, 63
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %84, label %77

77:                                               ; preds = %69
  %78 = getelementptr inbounds i64, i64* %71, i64 %70
  %79 = sub nuw nsw i64 64, %75
  %80 = lshr i64 -1, %79
  %81 = xor i64 %80, -1
  %82 = load i64, i64* %78, align 8
  %83 = and i64 %82, %81
  store i64 %83, i64* %78, align 8
  br label %84

84:                                               ; preds = %44, %69, %77
  ret %"class.std::__1::bitset"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__116__copy_unalignedINS_8__bitsetILm2ELm128EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_(%"class.std::__1::__bit_iterator.1166"* noalias sret, %"class.std::__1::__bit_iterator.1166"*, %"class.std::__1::__bit_iterator.1166"*, %"class.std::__1::__bit_iterator.1166"*) local_unnamed_addr #2 comdat {
  %5 = bitcast %"class.std::__1::__bit_iterator.1166"* %2 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::__bit_iterator.1166"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = shl i64 %9, 3
  %11 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = add nsw i64 %10, %13
  %15 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %18, 0
  %20 = inttoptr i64 %8 to i64*
  br i1 %19, label %21, label %185

21:                                               ; preds = %4
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %93, label %23

23:                                               ; preds = %21
  %24 = sub i32 64, %16
  %25 = zext i32 %24 to i64
  %26 = icmp slt i64 %18, %25
  %27 = select i1 %26, i64 %18, i64 %25
  %28 = sub nsw i64 %18, %27
  %29 = shl i64 -1, %17
  %30 = sub nsw i64 %25, %27
  %31 = lshr i64 -1, %30
  %32 = and i64 %31, %29
  %33 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %1, i64 0, i32 0
  %34 = load i64, i64* %20, align 8
  %35 = and i64 %32, %34
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %3, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = sub i32 64, %37
  %39 = zext i32 %38 to i64
  %40 = icmp ugt i64 %27, %39
  %41 = select i1 %40, i64 %39, i64 %27
  %42 = zext i32 %37 to i64
  %43 = shl i64 -1, %42
  %44 = sub nsw i64 %39, %41
  %45 = lshr i64 -1, %44
  %46 = and i64 %45, %43
  %47 = xor i64 %46, -1
  %48 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %3, i64 0, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, %47
  store i64 %51, i64* %49, align 8
  %52 = load i32, i32* %36, align 8
  %53 = load i32, i32* %15, align 8
  %54 = icmp ugt i32 %52, %53
  %55 = sub i32 %53, %52
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %35, %56
  %58 = sub i32 %52, %53
  %59 = zext i32 %58 to i64
  %60 = shl i64 %35, %59
  %61 = select i1 %54, i64 %60, i64 %57
  %62 = load i64*, i64** %48, align 8
  %63 = load i64, i64* %62, align 8
  %64 = or i64 %63, %61
  store i64 %64, i64* %62, align 8
  %65 = load i32, i32* %36, align 8
  %66 = zext i32 %65 to i64
  %67 = add nuw nsw i64 %41, %66
  %68 = lshr i64 %67, 6
  %69 = load i64*, i64** %48, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 %68
  store i64* %70, i64** %48, align 8
  %71 = trunc i64 %41 to i32
  %72 = add i32 %65, %71
  %73 = and i32 %72, 63
  store i32 %73, i32* %36, align 8
  %74 = sub i64 %27, %41
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %90

76:                                               ; preds = %23
  %77 = sub nsw i64 64, %74
  %78 = lshr i64 -1, %77
  %79 = xor i64 %78, -1
  %80 = load i64, i64* %70, align 8
  %81 = and i64 %80, %79
  store i64 %81, i64* %70, align 8
  %82 = load i32, i32* %15, align 8
  %83 = zext i32 %82 to i64
  %84 = add nuw nsw i64 %41, %83
  %85 = lshr i64 %35, %84
  %86 = load i64*, i64** %48, align 8
  %87 = load i64, i64* %86, align 8
  %88 = or i64 %85, %87
  store i64 %88, i64* %86, align 8
  %89 = trunc i64 %74 to i32
  store i32 %89, i32* %36, align 8
  br label %90

90:                                               ; preds = %76, %23
  %91 = load i64*, i64** %33, align 8
  %92 = getelementptr inbounds i64, i64* %91, i64 1
  store i64* %92, i64** %33, align 8
  br label %93

93:                                               ; preds = %21, %90
  %94 = phi i64* [ %20, %21 ], [ %92, %90 ]
  %95 = phi i64 [ %18, %21 ], [ %28, %90 ]
  %96 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %3, i64 0, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = sub i32 64, %97
  %99 = zext i32 %97 to i64
  %100 = shl i64 -1, %99
  %101 = icmp sgt i64 %95, 63
  br i1 %101, label %102, label %134

102:                                              ; preds = %93
  %103 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %1, i64 0, i32 0
  %104 = xor i64 %100, -1
  %105 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %3, i64 0, i32 0
  %106 = zext i32 %98 to i64
  br label %107

107:                                              ; preds = %102, %107
  %108 = phi i64* [ %94, %102 ], [ %130, %107 ]
  %109 = phi i64 [ %95, %102 ], [ %128, %107 ]
  %110 = load i64, i64* %108, align 8
  %111 = load i64*, i64** %105, align 8
  %112 = load i64, i64* %111, align 8
  %113 = and i64 %112, %104
  store i64 %113, i64* %111, align 8
  %114 = load i32, i32* %96, align 8
  %115 = zext i32 %114 to i64
  %116 = shl i64 %110, %115
  %117 = load i64*, i64** %105, align 8
  %118 = load i64, i64* %117, align 8
  %119 = or i64 %118, %116
  store i64 %119, i64* %117, align 8
  %120 = load i64*, i64** %105, align 8
  %121 = getelementptr inbounds i64, i64* %120, i64 1
  store i64* %121, i64** %105, align 8
  %122 = load i64, i64* %121, align 8
  %123 = and i64 %122, %100
  store i64 %123, i64* %121, align 8
  %124 = lshr i64 %110, %106
  %125 = load i64*, i64** %105, align 8
  %126 = load i64, i64* %125, align 8
  %127 = or i64 %126, %124
  store i64 %127, i64* %125, align 8
  %128 = add nsw i64 %109, -64
  %129 = load i64*, i64** %103, align 8
  %130 = getelementptr inbounds i64, i64* %129, i64 1
  store i64* %130, i64** %103, align 8
  %131 = icmp sgt i64 %128, 63
  br i1 %131, label %107, label %132

132:                                              ; preds = %107
  %133 = and i64 %95, 63
  br label %134

134:                                              ; preds = %132, %93
  %135 = phi i64* [ %94, %93 ], [ %130, %132 ]
  %136 = phi i64 [ %95, %93 ], [ %133, %132 ]
  %137 = icmp sgt i64 %136, 0
  br i1 %137, label %138, label %185

138:                                              ; preds = %134
  %139 = sub nuw nsw i64 64, %136
  %140 = lshr i64 -1, %139
  %141 = load i64, i64* %135, align 8
  %142 = and i64 %141, %140
  %143 = zext i32 %98 to i64
  %144 = icmp sgt i64 %136, %143
  %145 = select i1 %144, i64 %143, i64 %136
  %146 = load i32, i32* %96, align 8
  %147 = zext i32 %146 to i64
  %148 = shl i64 -1, %147
  %149 = sub nsw i64 %143, %145
  %150 = lshr i64 -1, %149
  %151 = and i64 %148, %150
  %152 = xor i64 %151, -1
  %153 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %3, i64 0, i32 0
  %154 = load i64*, i64** %153, align 8
  %155 = load i64, i64* %154, align 8
  %156 = and i64 %155, %152
  store i64 %156, i64* %154, align 8
  %157 = load i32, i32* %96, align 8
  %158 = zext i32 %157 to i64
  %159 = shl i64 %142, %158
  %160 = load i64*, i64** %153, align 8
  %161 = load i64, i64* %160, align 8
  %162 = or i64 %161, %159
  store i64 %162, i64* %160, align 8
  %163 = load i32, i32* %96, align 8
  %164 = zext i32 %163 to i64
  %165 = add nuw nsw i64 %145, %164
  %166 = lshr i64 %165, 6
  %167 = load i64*, i64** %153, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 %166
  store i64* %168, i64** %153, align 8
  %169 = trunc i64 %145 to i32
  %170 = add i32 %163, %169
  %171 = and i32 %170, 63
  store i32 %171, i32* %96, align 8
  %172 = sub nsw i64 %136, %145
  %173 = icmp sgt i64 %172, 0
  br i1 %173, label %174, label %185

174:                                              ; preds = %138
  %175 = sub nuw nsw i64 64, %172
  %176 = lshr i64 -1, %175
  %177 = xor i64 %176, -1
  %178 = load i64, i64* %168, align 8
  %179 = and i64 %178, %177
  store i64 %179, i64* %168, align 8
  %180 = lshr i64 %142, %145
  %181 = load i64*, i64** %153, align 8
  %182 = load i64, i64* %181, align 8
  %183 = or i64 %182, %180
  store i64 %183, i64* %181, align 8
  %184 = trunc i64 %172 to i32
  store i32 %184, i32* %96, align 8
  br label %185

185:                                              ; preds = %134, %174, %138, %4
  %186 = bitcast %"class.std::__1::__bit_iterator.1166"* %3 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.std::__1::__bit_iterator.1166"* %0 to i64*
  store i64 %187, i64* %188, align 8
  %189 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %0, i64 0, i32 1
  %190 = getelementptr inbounds %"class.std::__1::__bit_iterator.1166", %"class.std::__1::__bit_iterator.1166"* %3, i64 0, i32 1
  %191 = load i32, i32* %190, align 8
  store i32 %191, i32* %189, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

declare i8* @_ZN2v88internal8MallocednwEm(i64) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN2v88internal8MalloceddlEPv(i8*) local_unnamed_addr #13

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEED0Ev(%"class.v8::internal::Analysis"*) unnamed_addr #11 align 2 {
  %2 = bitcast %"class.v8::internal::Analysis"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE8VisitEndEPNS0_7EndNodeE(%"class.v8::internal::Analysis"* nocapture, %"class.v8::internal::EndNode"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE11VisitActionEPNS0_10ActionNodeE(%"class.v8::internal::Analysis"*, %"class.v8::internal::ActionNode"* nocapture) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %1, i64 0, i32 0, i32 1
  %4 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %3, align 8
  %5 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 1
  %6 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %5, align 8
  %7 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #18
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %6, i64 0, i32 0, i32 6, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %7, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %2
  %12 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %11
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0)) #17
  unreachable

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  store i32 2, i32* %16, align 4
  br label %32

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %4, i64 0, i32 4, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = and i8 %19, 3
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %32

22:                                               ; preds = %17
  %23 = or i8 %19, 1
  store i8 %23, i8* %18, align 1
  %24 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 0
  %25 = bitcast %"class.v8::internal::RegExpNode"* %4 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)***
  %26 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %26, i64 2
  %28 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %27, align 8
  tail call void %28(%"class.v8::internal::RegExpNode"* %4, %"class.v8::internal::NodeVisitor"* %24) #18
  %29 = load i8, i8* %18, align 1
  %30 = and i8 %29, -4
  %31 = or i8 %30, 2
  store i8 %31, i8* %18, align 1
  br label %32

32:                                               ; preds = %15, %17, %22
  %33 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %70

36:                                               ; preds = %32
  %37 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %3, align 8
  %38 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %37, i64 0, i32 4, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %1, i64 0, i32 0, i32 0, i32 4, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = and i8 %39, 4
  %43 = or i8 %42, %41
  store i8 %43, i8* %40, align 1
  %44 = load i8, i8* %38, align 1
  %45 = or i8 %44, %41
  %46 = and i8 %45, 8
  %47 = and i8 %43, -9
  %48 = or i8 %46, %47
  store i8 %48, i8* %40, align 1
  %49 = load i8, i8* %38, align 1
  %50 = or i8 %49, %41
  %51 = and i8 %50, 16
  %52 = and i8 %48, -17
  %53 = or i8 %52, %51
  store i8 %53, i8* %40, align 1
  %54 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %1, i64 0, i32 2
  %55 = load i32, i32* %54, align 8
  switch i32 %55, label %64 [
    i32 3, label %70
    i32 4, label %70
    i32 0, label %56
  ]

56:                                               ; preds = %36
  %57 = bitcast %"class.v8::internal::RegExpNode"* %37 to i16 (%"class.v8::internal::RegExpNode"*)***
  %58 = load i16 (%"class.v8::internal::RegExpNode"*)**, i16 (%"class.v8::internal::RegExpNode"*)*** %57, align 8
  %59 = getelementptr inbounds i16 (%"class.v8::internal::RegExpNode"*)*, i16 (%"class.v8::internal::RegExpNode"*)** %58, i64 4
  %60 = load i16 (%"class.v8::internal::RegExpNode"*)*, i16 (%"class.v8::internal::RegExpNode"*)** %59, align 8
  %61 = tail call i16 %60(%"class.v8::internal::RegExpNode"* %37) #18
  %62 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %1, i64 0, i32 0, i32 0, i32 5, i32 0
  %63 = bitcast i8* %62 to i16*
  store i16 %61, i16* %63, align 2
  br label %70

64:                                               ; preds = %36
  %65 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %37, i64 0, i32 5
  %66 = getelementptr inbounds %"class.v8::internal::ActionNode", %"class.v8::internal::ActionNode"* %1, i64 0, i32 0, i32 0, i32 5, i32 0
  %67 = bitcast %"struct.v8::internal::EatsAtLeastInfo"* %65 to i16*
  %68 = bitcast i8* %66 to i16*
  %69 = load i16, i16* %67, align 1
  store i16 %69, i16* %68, align 2
  br label %70

70:                                               ; preds = %32, %64, %56, %36, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE11VisitChoiceEPNS0_10ChoiceNodeE(%"class.v8::internal::Analysis"*, %"class.v8::internal::ChoiceNode"* nocapture) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %1, i64 0, i32 1
  %4 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %4, i64 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %105

8:                                                ; preds = %2
  %9 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 0
  %11 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  %12 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %1, i64 0, i32 0, i32 4, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %1, i64 0, i32 0, i32 5
  %14 = bitcast %"struct.v8::internal::EatsAtLeastInfo"* %13 to i16*
  %15 = getelementptr inbounds %"class.v8::internal::ChoiceNode", %"class.v8::internal::ChoiceNode"* %1, i64 0, i32 0, i32 5, i32 0
  %16 = bitcast i8* %15 to i16*
  br label %17

17:                                               ; preds = %8, %82
  %18 = phi i64 [ 0, %8 ], [ %100, %82 ]
  %19 = phi %"class.v8::internal::ZoneList.1148"* [ %4, %8 ], [ %52, %82 ]
  %20 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %19, i64 0, i32 0
  %21 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %21, i64 %18, i32 0
  %23 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %22, align 8
  %24 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %9, align 8
  %25 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #18
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %24, i64 0, i32 0, i32 6, i32 1, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = icmp ult i64 %25, %27
  br i1 %28, label %29, label %34

29:                                               ; preds = %17
  %30 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %29
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0)) #17
  unreachable

33:                                               ; preds = %29
  store i32 2, i32* %11, align 4
  br label %105

34:                                               ; preds = %17
  %35 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %23, i64 0, i32 4, i32 0
  %36 = load i8, i8* %35, align 1
  %37 = and i8 %36, 3
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %48

39:                                               ; preds = %34
  %40 = or i8 %36, 1
  store i8 %40, i8* %35, align 1
  %41 = bitcast %"class.v8::internal::RegExpNode"* %23 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)***
  %42 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %42, i64 2
  %44 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %43, align 8
  tail call void %44(%"class.v8::internal::RegExpNode"* %23, %"class.v8::internal::NodeVisitor"* %10) #18
  %45 = load i8, i8* %35, align 1
  %46 = and i8 %45, -4
  %47 = or i8 %46, 2
  store i8 %47, i8* %35, align 1
  br label %48

48:                                               ; preds = %34, %39
  %49 = load i32, i32* %11, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %105

51:                                               ; preds = %48
  %52 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %3, align 8
  %53 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %52, i64 0, i32 0
  %54 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %53, align 8
  %55 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %54, i64 %18, i32 0
  %56 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %55, align 8
  %57 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %56, i64 0, i32 4, i32 0
  %58 = load i8, i8* %57, align 1
  %59 = load i8, i8* %12, align 1
  %60 = and i8 %58, 4
  %61 = or i8 %60, %59
  store i8 %61, i8* %12, align 1
  %62 = load i8, i8* %57, align 1
  %63 = or i8 %62, %59
  %64 = and i8 %63, 8
  %65 = and i8 %61, -9
  %66 = or i8 %64, %65
  store i8 %66, i8* %12, align 1
  %67 = load i8, i8* %57, align 1
  %68 = or i8 %67, %59
  %69 = and i8 %68, 16
  %70 = and i8 %66, -17
  %71 = or i8 %70, %69
  store i8 %71, i8* %12, align 1
  %72 = icmp eq i64 %18, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %51
  %74 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %53, align 8
  br label %82

75:                                               ; preds = %51
  %76 = load i16, i16* %14, align 1
  %77 = trunc i16 %76 to i8
  %78 = lshr i16 %76, 8
  %79 = trunc i16 %78 to i8
  %80 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %53, align 8
  %81 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %80, i64 %18
  br label %82

82:                                               ; preds = %73, %75
  %83 = phi i8 [ -1, %73 ], [ %79, %75 ]
  %84 = phi i8 [ -1, %73 ], [ %77, %75 ]
  %85 = phi %"class.v8::internal::GuardedAlternative"* [ %74, %73 ], [ %81, %75 ]
  %86 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %85, i64 0, i32 0
  %87 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %86, align 8
  %88 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %87, i64 0, i32 5, i32 0
  %89 = load i8, i8* %88, align 1
  %90 = icmp ult i8 %89, %84
  %91 = select i1 %90, i8 %89, i8 %84
  %92 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %87, i64 0, i32 5, i32 1
  %93 = load i8, i8* %92, align 1
  %94 = icmp ult i8 %93, %83
  %95 = select i1 %94, i8 %93, i8 %83
  %96 = zext i8 %95 to i16
  %97 = shl nuw i16 %96, 8
  %98 = zext i8 %91 to i16
  %99 = or i16 %97, %98
  store i16 %99, i16* %16, align 2
  %100 = add nuw nsw i64 %18, 1
  %101 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %52, i64 0, i32 2
  %102 = load i32, i32* %101, align 4
  %103 = sext i32 %102 to i64
  %104 = icmp slt i64 %100, %103
  br i1 %104, label %17, label %105

105:                                              ; preds = %82, %48, %33, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE15VisitLoopChoiceEPNS0_14LoopChoiceNodeE(%"class.v8::internal::Analysis"*, %"class.v8::internal::LoopChoiceNode"*) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %1, i64 0, i32 2
  %4 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %3, align 8
  %5 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 1
  %6 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %5, align 8
  %7 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #18
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %6, i64 0, i32 0, i32 6, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %7, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %2
  %12 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %11
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0)) #17
  unreachable

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  store i32 2, i32* %16, align 4
  br label %32

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %4, i64 0, i32 4, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = and i8 %19, 3
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %32

22:                                               ; preds = %17
  %23 = or i8 %19, 1
  store i8 %23, i8* %18, align 1
  %24 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 0
  %25 = bitcast %"class.v8::internal::RegExpNode"* %4 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)***
  %26 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %26, i64 2
  %28 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %27, align 8
  tail call void %28(%"class.v8::internal::RegExpNode"* %4, %"class.v8::internal::NodeVisitor"* %24) #18
  %29 = load i8, i8* %18, align 1
  %30 = and i8 %29, -4
  %31 = or i8 %30, 2
  store i8 %31, i8* %18, align 1
  br label %32

32:                                               ; preds = %15, %17, %22
  %33 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %114

36:                                               ; preds = %32
  %37 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %3, align 8
  %38 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %37, i64 0, i32 4, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %1, i64 0, i32 0, i32 0, i32 4, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = and i8 %39, 4
  %43 = or i8 %42, %41
  store i8 %43, i8* %40, align 1
  %44 = load i8, i8* %38, align 1
  %45 = or i8 %44, %41
  %46 = and i8 %45, 8
  %47 = and i8 %43, -9
  %48 = or i8 %46, %47
  store i8 %48, i8* %40, align 1
  %49 = load i8, i8* %38, align 1
  %50 = or i8 %49, %41
  %51 = and i8 %50, 16
  %52 = and i8 %48, -17
  %53 = or i8 %52, %51
  store i8 %53, i8* %40, align 1
  %54 = bitcast %"class.v8::internal::LoopChoiceNode"* %1 to i1 (%"class.v8::internal::LoopChoiceNode"*)***
  %55 = load i1 (%"class.v8::internal::LoopChoiceNode"*)**, i1 (%"class.v8::internal::LoopChoiceNode"*)*** %54, align 8
  %56 = getelementptr inbounds i1 (%"class.v8::internal::LoopChoiceNode"*)*, i1 (%"class.v8::internal::LoopChoiceNode"*)** %55, i64 12
  %57 = load i1 (%"class.v8::internal::LoopChoiceNode"*)*, i1 (%"class.v8::internal::LoopChoiceNode"*)** %56, align 8
  %58 = tail call zeroext i1 %57(%"class.v8::internal::LoopChoiceNode"* %1) #18
  br i1 %58, label %66, label %59

59:                                               ; preds = %36
  %60 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %3, align 8
  %61 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %60, i64 0, i32 5
  %62 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %1, i64 0, i32 0, i32 0, i32 5, i32 0
  %63 = bitcast %"struct.v8::internal::EatsAtLeastInfo"* %61 to i16*
  %64 = bitcast i8* %62 to i16*
  %65 = load i16, i16* %63, align 1
  store i16 %65, i16* %64, align 2
  br label %66

66:                                               ; preds = %36, %59
  %67 = getelementptr inbounds %"class.v8::internal::LoopChoiceNode", %"class.v8::internal::LoopChoiceNode"* %1, i64 0, i32 1
  %68 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %67, align 8
  %69 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %5, align 8
  %70 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #18
  %71 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %69, i64 0, i32 0, i32 6, i32 1, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = icmp ult i64 %70, %72
  br i1 %73, label %74, label %79

74:                                               ; preds = %66
  %75 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %78, label %77

77:                                               ; preds = %74
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0)) #17
  unreachable

78:                                               ; preds = %74
  store i32 2, i32* %33, align 4
  br label %114

79:                                               ; preds = %66
  %80 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %68, i64 0, i32 4, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = and i8 %81, 3
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %84, label %94

84:                                               ; preds = %79
  %85 = or i8 %81, 1
  store i8 %85, i8* %80, align 1
  %86 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 0
  %87 = bitcast %"class.v8::internal::RegExpNode"* %68 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)***
  %88 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*** %87, align 8
  %89 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %88, i64 2
  %90 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %89, align 8
  tail call void %90(%"class.v8::internal::RegExpNode"* %68, %"class.v8::internal::NodeVisitor"* %86) #18
  %91 = load i8, i8* %80, align 1
  %92 = and i8 %91, -4
  %93 = or i8 %92, 2
  store i8 %93, i8* %80, align 1
  br label %94

94:                                               ; preds = %79, %84
  %95 = load i32, i32* %33, align 4
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %114

97:                                               ; preds = %94
  %98 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %67, align 8
  %99 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %98, i64 0, i32 4, i32 0
  %100 = load i8, i8* %99, align 1
  %101 = load i8, i8* %40, align 1
  %102 = and i8 %100, 4
  %103 = or i8 %102, %101
  store i8 %103, i8* %40, align 1
  %104 = load i8, i8* %99, align 1
  %105 = or i8 %104, %101
  %106 = and i8 %105, 8
  %107 = and i8 %103, -9
  %108 = or i8 %106, %107
  store i8 %108, i8* %40, align 1
  %109 = load i8, i8* %99, align 1
  %110 = or i8 %109, %101
  %111 = and i8 %110, 16
  %112 = and i8 %108, -17
  %113 = or i8 %112, %111
  store i8 %113, i8* %40, align 1
  br label %114

114:                                              ; preds = %94, %32, %78, %97
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE29VisitNegativeLookaroundChoiceEPNS0_28NegativeLookaroundChoiceNodeE(%"class.v8::internal::Analysis"*, %"class.v8::internal::NegativeLookaroundChoiceNode"* nocapture) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %1, i64 0, i32 0, i32 1
  %4 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %4, i64 0, i32 0
  %6 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %6, i64 0, i32 0
  %8 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %7, align 8
  %9 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 1
  %10 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %9, align 8
  %11 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #18
  %12 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 0, i32 6, i32 1, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp ult i64 %11, %13
  br i1 %14, label %15, label %21

15:                                               ; preds = %2
  %16 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %15
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0)) #17
  unreachable

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  store i32 2, i32* %20, align 4
  br label %36

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %8, i64 0, i32 4, i32 0
  %23 = load i8, i8* %22, align 1
  %24 = and i8 %23, 3
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %36

26:                                               ; preds = %21
  %27 = or i8 %23, 1
  store i8 %27, i8* %22, align 1
  %28 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 0
  %29 = bitcast %"class.v8::internal::RegExpNode"* %8 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)***
  %30 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %30, i64 2
  %32 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %31, align 8
  tail call void %32(%"class.v8::internal::RegExpNode"* %8, %"class.v8::internal::NodeVisitor"* %28) #18
  %33 = load i8, i8* %22, align 1
  %34 = and i8 %33, -4
  %35 = or i8 %34, 2
  store i8 %35, i8* %22, align 1
  br label %36

36:                                               ; preds = %19, %21, %26
  %37 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %122

40:                                               ; preds = %36
  %41 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %3, align 8
  %42 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %41, i64 0, i32 0
  %43 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %43, i64 0, i32 0
  %45 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %45, i64 0, i32 4, i32 0
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %1, i64 0, i32 0, i32 0, i32 4, i32 0
  %49 = load i8, i8* %48, align 1
  %50 = and i8 %47, 4
  %51 = or i8 %50, %49
  store i8 %51, i8* %48, align 1
  %52 = load i8, i8* %46, align 1
  %53 = or i8 %52, %49
  %54 = and i8 %53, 8
  %55 = and i8 %51, -9
  %56 = or i8 %54, %55
  store i8 %56, i8* %48, align 1
  %57 = load i8, i8* %46, align 1
  %58 = or i8 %57, %49
  %59 = and i8 %58, 16
  %60 = and i8 %56, -17
  %61 = or i8 %60, %59
  store i8 %61, i8* %48, align 1
  %62 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %42, align 8
  %63 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %62, i64 1, i32 0
  %64 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %63, align 8
  %65 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %9, align 8
  %66 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #18
  %67 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %65, i64 0, i32 0, i32 6, i32 1, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = icmp ult i64 %66, %68
  br i1 %69, label %70, label %75

70:                                               ; preds = %40
  %71 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %74, label %73

73:                                               ; preds = %70
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0)) #17
  unreachable

74:                                               ; preds = %70
  store i32 2, i32* %37, align 4
  br label %122

75:                                               ; preds = %40
  %76 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %64, i64 0, i32 4, i32 0
  %77 = load i8, i8* %76, align 1
  %78 = and i8 %77, 3
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %80, label %90

80:                                               ; preds = %75
  %81 = or i8 %77, 1
  store i8 %81, i8* %76, align 1
  %82 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 0
  %83 = bitcast %"class.v8::internal::RegExpNode"* %64 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)***
  %84 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*** %83, align 8
  %85 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %84, i64 2
  %86 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %85, align 8
  tail call void %86(%"class.v8::internal::RegExpNode"* %64, %"class.v8::internal::NodeVisitor"* %82) #18
  %87 = load i8, i8* %76, align 1
  %88 = and i8 %87, -4
  %89 = or i8 %88, 2
  store i8 %89, i8* %76, align 1
  br label %90

90:                                               ; preds = %75, %80
  %91 = load i32, i32* %37, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %122

93:                                               ; preds = %90
  %94 = load %"class.v8::internal::ZoneList.1148"*, %"class.v8::internal::ZoneList.1148"** %3, align 8
  %95 = getelementptr inbounds %"class.v8::internal::ZoneList.1148", %"class.v8::internal::ZoneList.1148"* %94, i64 0, i32 0
  %96 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %95, align 8
  %97 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %96, i64 1, i32 0
  %98 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %97, align 8
  %99 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %98, i64 0, i32 4, i32 0
  %100 = load i8, i8* %99, align 1
  %101 = load i8, i8* %48, align 1
  %102 = and i8 %100, 4
  %103 = or i8 %102, %101
  store i8 %103, i8* %48, align 1
  %104 = load i8, i8* %99, align 1
  %105 = or i8 %104, %101
  %106 = and i8 %105, 8
  %107 = and i8 %103, -9
  %108 = or i8 %106, %107
  store i8 %108, i8* %48, align 1
  %109 = load i8, i8* %99, align 1
  %110 = or i8 %109, %101
  %111 = and i8 %110, 16
  %112 = and i8 %108, -17
  %113 = or i8 %112, %111
  store i8 %113, i8* %48, align 1
  %114 = load %"class.v8::internal::GuardedAlternative"*, %"class.v8::internal::GuardedAlternative"** %95, align 8
  %115 = getelementptr inbounds %"class.v8::internal::GuardedAlternative", %"class.v8::internal::GuardedAlternative"* %114, i64 1, i32 0
  %116 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %115, align 8
  %117 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %116, i64 0, i32 5
  %118 = getelementptr inbounds %"class.v8::internal::NegativeLookaroundChoiceNode", %"class.v8::internal::NegativeLookaroundChoiceNode"* %1, i64 0, i32 0, i32 0, i32 5, i32 0
  %119 = bitcast %"struct.v8::internal::EatsAtLeastInfo"* %117 to i16*
  %120 = bitcast i8* %118 to i16*
  %121 = load i16, i16* %119, align 1
  store i16 %121, i16* %120, align 2
  br label %122

122:                                              ; preds = %90, %36, %74, %93
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE18VisitBackReferenceEPNS0_17BackReferenceNodeE(%"class.v8::internal::Analysis"*, %"class.v8::internal::BackReferenceNode"* nocapture) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %1, i64 0, i32 0, i32 1
  %4 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %3, align 8
  %5 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 1
  %6 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %5, align 8
  %7 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #18
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %6, i64 0, i32 0, i32 6, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %7, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %2
  %12 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %11
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0)) #17
  unreachable

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  store i32 2, i32* %16, align 4
  br label %32

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %4, i64 0, i32 4, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = and i8 %19, 3
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %32

22:                                               ; preds = %17
  %23 = or i8 %19, 1
  store i8 %23, i8* %18, align 1
  %24 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 0
  %25 = bitcast %"class.v8::internal::RegExpNode"* %4 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)***
  %26 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %26, i64 2
  %28 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %27, align 8
  tail call void %28(%"class.v8::internal::RegExpNode"* %4, %"class.v8::internal::NodeVisitor"* %24) #18
  %29 = load i8, i8* %18, align 1
  %30 = and i8 %29, -4
  %31 = or i8 %30, 2
  store i8 %31, i8* %18, align 1
  br label %32

32:                                               ; preds = %15, %17, %22
  %33 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %47

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %1, i64 0, i32 4
  %38 = load i8, i8* %37, align 4, !range !3
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %40, label %47

40:                                               ; preds = %36
  %41 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %3, align 8
  %42 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %41, i64 0, i32 5
  %43 = getelementptr inbounds %"class.v8::internal::BackReferenceNode", %"class.v8::internal::BackReferenceNode"* %1, i64 0, i32 0, i32 0, i32 5, i32 0
  %44 = bitcast %"struct.v8::internal::EatsAtLeastInfo"* %42 to i16*
  %45 = bitcast i8* %43 to i16*
  %46 = load i16, i16* %44, align 1
  store i16 %46, i16* %45, align 2
  br label %47

47:                                               ; preds = %32, %40, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE14VisitAssertionEPNS0_13AssertionNodeE(%"class.v8::internal::Analysis"*, %"class.v8::internal::AssertionNode"* nocapture) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %1, i64 0, i32 0, i32 1
  %4 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %3, align 8
  %5 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 1
  %6 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %5, align 8
  %7 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #18
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %6, i64 0, i32 0, i32 6, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %7, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %2
  %12 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %11
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0)) #17
  unreachable

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  store i32 2, i32* %16, align 4
  br label %32

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %4, i64 0, i32 4, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = and i8 %19, 3
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %32

22:                                               ; preds = %17
  %23 = or i8 %19, 1
  store i8 %23, i8* %18, align 1
  %24 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 0
  %25 = bitcast %"class.v8::internal::RegExpNode"* %4 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)***
  %26 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %26, i64 2
  %28 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %27, align 8
  tail call void %28(%"class.v8::internal::RegExpNode"* %4, %"class.v8::internal::NodeVisitor"* %24) #18
  %29 = load i8, i8* %18, align 1
  %30 = and i8 %29, -4
  %31 = or i8 %30, 2
  store i8 %31, i8* %18, align 1
  br label %32

32:                                               ; preds = %15, %17, %22
  %33 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %50

36:                                               ; preds = %32
  %37 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %3, align 8
  %38 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %37, i64 0, i32 5
  %39 = bitcast %"struct.v8::internal::EatsAtLeastInfo"* %38 to i16*
  %40 = load i16, i16* %39, align 1
  %41 = and i16 %40, -256
  %42 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %1, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 1
  %45 = getelementptr inbounds %"class.v8::internal::AssertionNode", %"class.v8::internal::AssertionNode"* %1, i64 0, i32 0, i32 0, i32 5, i32 0
  %46 = bitcast i8* %45 to i16*
  %47 = select i1 %44, i16 -256, i16 %41
  %48 = and i16 %40, 255
  %49 = or i16 %47, %48
  store i16 %49, i16* %46, align 2
  br label %50

50:                                               ; preds = %32, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2v88internal8AnalysisIJNS0_12_GLOBAL__N_119AssertionPropagatorENS2_21EatsAtLeastPropagatorEEE9VisitTextEPNS0_8TextNodeE(%"class.v8::internal::Analysis"*, %"class.v8::internal::TextNode"* nocapture) unnamed_addr #2 align 2 {
  %3 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 2
  %6 = load i8, i8* %5, align 8, !range !3
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %1, i64 0, i32 1
  %9 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %9, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %50

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %1, i64 0, i32 0, i32 0, i32 8
  %15 = zext i32 %11 to i64
  br label %16

16:                                               ; preds = %46, %13
  %17 = phi %"class.v8::internal::ZoneList"* [ %9, %13 ], [ %47, %46 ]
  %18 = phi i64 [ 0, %13 ], [ %44, %46 ]
  %19 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %17, i64 0, i32 0
  %20 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %20, i64 %18, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %20, i64 %18, i32 2
  %24 = bitcast %"class.v8::internal::RegExpTree"** %23 to %"class.v8::internal::RegExpCharacterClass"**
  %25 = load %"class.v8::internal::RegExpCharacterClass"*, %"class.v8::internal::RegExpCharacterClass"** %24, align 8
  %26 = icmp eq i32 %22, 1
  br i1 %26, label %27, label %43

27:                                               ; preds = %16
  %28 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %25, i64 0, i32 2, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, 18
  %31 = icmp eq i32 %30, 18
  %32 = and i32 %29, 2
  %33 = icmp eq i32 %32, 0
  %34 = or i1 %33, %31
  br i1 %34, label %43, label %35

35:                                               ; preds = %27
  %36 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %14, align 8
  %37 = tail call zeroext i1 @_ZN2v88internal20RegExpCharacterClass11is_standardEPNS0_4ZoneE(%"class.v8::internal::RegExpCharacterClass"* %25, %"class.v8::internal::Zone"* %36) #18
  br i1 %37, label %43, label %38

38:                                               ; preds = %35
  %39 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %14, align 8
  %40 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %25, i64 0, i32 1
  %41 = tail call %"class.v8::internal::ZoneList.18"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"* %40, %"class.v8::internal::Zone"* %39) #18
  %42 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %14, align 8
  tail call void @_ZN2v88internal14CharacterRange18AddCaseEquivalentsEPNS0_7IsolateEPNS0_4ZoneEPNS0_8ZoneListIS1_EEb(%"class.v8::internal::Isolate"* %4, %"class.v8::internal::Zone"* %42, %"class.v8::internal::ZoneList.18"* %41, i1 zeroext %7) #18
  br label %43

43:                                               ; preds = %38, %35, %27, %16
  %44 = add nuw nsw i64 %18, 1
  %45 = icmp eq i64 %44, %15
  br i1 %45, label %48, label %46

46:                                               ; preds = %43
  %47 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %8, align 8
  br label %16

48:                                               ; preds = %43
  %49 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %3, align 8
  br label %50

50:                                               ; preds = %48, %2
  %51 = phi %"class.v8::internal::Isolate"* [ %49, %48 ], [ %4, %2 ]
  %52 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %1, i64 0, i32 0, i32 1
  %53 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %52, align 8
  %54 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #18
  %55 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %51, i64 0, i32 0, i32 6, i32 1, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = icmp ult i64 %54, %56
  br i1 %57, label %58, label %64

58:                                               ; preds = %50
  %59 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %62, label %61

61:                                               ; preds = %58
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0)) #17
  unreachable

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  store i32 2, i32* %63, align 4
  br label %79

64:                                               ; preds = %50
  %65 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %53, i64 0, i32 4, i32 0
  %66 = load i8, i8* %65, align 1
  %67 = and i8 %66, 3
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %69, label %79

69:                                               ; preds = %64
  %70 = or i8 %66, 1
  store i8 %70, i8* %65, align 1
  %71 = getelementptr inbounds %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 0
  %72 = bitcast %"class.v8::internal::RegExpNode"* %53 to void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)***
  %73 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)**, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*** %72, align 8
  %74 = getelementptr inbounds void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %73, i64 2
  %75 = load void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)*, void (%"class.v8::internal::RegExpNode"*, %"class.v8::internal::NodeVisitor"*)** %74, align 8
  tail call void %75(%"class.v8::internal::RegExpNode"* %53, %"class.v8::internal::NodeVisitor"* %71) #18
  %76 = load i8, i8* %65, align 1
  %77 = and i8 %76, -4
  %78 = or i8 %77, 2
  store i8 %78, i8* %65, align 1
  br label %79

79:                                               ; preds = %62, %64, %69
  %80 = getelementptr %"class.v8::internal::Analysis", %"class.v8::internal::Analysis"* %0, i64 0, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %167

83:                                               ; preds = %79
  %84 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %8, align 8
  %85 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %84, i64 0, i32 2
  %86 = load i32, i32* %85, align 4
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %88, label %114

88:                                               ; preds = %83
  %89 = zext i32 %86 to i64
  br label %90

90:                                               ; preds = %111, %88
  %91 = phi %"class.v8::internal::ZoneList"* [ %84, %88 ], [ %113, %111 ]
  %92 = phi i64 [ 0, %88 ], [ %109, %111 ]
  %93 = phi i32 [ 0, %88 ], [ %112, %111 ]
  %94 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %91, i64 0, i32 0
  %95 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %94, align 8
  %96 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %95, i64 %92, i32 0
  store i32 %93, i32* %96, align 8
  %97 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %95, i64 %92, i32 1
  %98 = load i32, i32* %97, align 4
  switch i32 %98, label %106 [
    i32 0, label %99
    i32 1, label %107
  ]

99:                                               ; preds = %90
  %100 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %95, i64 %92, i32 2
  %101 = bitcast %"class.v8::internal::RegExpTree"** %100 to %"class.v8::internal::RegExpAtom"**
  %102 = load %"class.v8::internal::RegExpAtom"*, %"class.v8::internal::RegExpAtom"** %101, align 8
  %103 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %102, i64 0, i32 1, i32 1
  %104 = load i64, i64* %103, align 8
  %105 = trunc i64 %104 to i32
  br label %107

106:                                              ; preds = %90
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

107:                                              ; preds = %99, %90
  %108 = phi i32 [ %105, %99 ], [ %98, %90 ]
  %109 = add nuw nsw i64 %92, 1
  %110 = icmp eq i64 %109, %89
  br i1 %110, label %114, label %111

111:                                              ; preds = %107
  %112 = add nsw i32 %108, %93
  %113 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %8, align 8
  br label %90

114:                                              ; preds = %107, %83
  %115 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %1, i64 0, i32 2
  %116 = load i8, i8* %115, align 8, !range !3
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %118, label %167

118:                                              ; preds = %114
  %119 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %8, align 8
  %120 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %119, i64 0, i32 2
  %121 = load i32, i32* %120, align 4
  %122 = add nsw i32 %121, -1
  %123 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %119, i64 0, i32 0
  %124 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %123, align 8
  %125 = sext i32 %122 to i64
  %126 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %124, i64 %125, i32 0
  %127 = load i32, i32* %126, align 8
  %128 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %124, i64 %125, i32 1
  %129 = load i32, i32* %128, align 4
  switch i32 %129, label %137 [
    i32 0, label %130
    i32 1, label %138
  ]

130:                                              ; preds = %118
  %131 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %124, i64 %125, i32 2
  %132 = bitcast %"class.v8::internal::RegExpTree"** %131 to %"class.v8::internal::RegExpAtom"**
  %133 = load %"class.v8::internal::RegExpAtom"*, %"class.v8::internal::RegExpAtom"** %132, align 8
  %134 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %133, i64 0, i32 1, i32 1
  %135 = load i64, i64* %134, align 8
  %136 = trunc i64 %135 to i32
  br label %138

137:                                              ; preds = %118
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #17
  unreachable

138:                                              ; preds = %130, %118
  %139 = phi i32 [ %136, %130 ], [ %129, %118 ]
  %140 = add nsw i32 %139, %127
  %141 = load %"class.v8::internal::RegExpNode"*, %"class.v8::internal::RegExpNode"** %52, align 8
  %142 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %141, i64 0, i32 5, i32 1
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = add nsw i32 %140, %144
  %146 = tail call i1 @llvm.is.constant.i32(i32 %145) #18
  br i1 %146, label %154, label %147

147:                                              ; preds = %138
  %148 = ashr i32 %145, 31
  %149 = trunc i32 %148 to i16
  %150 = xor i16 %149, 255
  %151 = icmp ult i32 %145, 256
  %152 = trunc i32 %145 to i16
  %153 = select i1 %151, i16 %152, i16 %150
  br label %160

154:                                              ; preds = %138
  %155 = icmp sgt i32 %145, 255
  br i1 %155, label %160, label %156

156:                                              ; preds = %154
  %157 = icmp sgt i32 %145, -1
  %158 = trunc i32 %145 to i16
  %159 = select i1 %157, i16 %158, i16 0
  br label %160

160:                                              ; preds = %156, %154, %147
  %161 = phi i16 [ %153, %147 ], [ %159, %156 ], [ 255, %154 ]
  %162 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %1, i64 0, i32 0, i32 0, i32 5, i32 0
  %163 = bitcast i8* %162 to i16*
  %164 = and i16 %161, 255
  %165 = shl i16 %161, 8
  %166 = or i16 %165, %164
  store i16 %166, i16* %163, align 2
  br label %167

167:                                              ; preds = %79, %160, %114
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #16

declare i64 @_ZN2v88internal23GetCurrentStackPositionEv() local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8TextNodeC2EPNS0_20RegExpCharacterClassEbPNS0_10RegExpNodeE(%"class.v8::internal::TextNode"*, %"class.v8::internal::RegExpCharacterClass"*, i1 zeroext, %"class.v8::internal::RegExpNode"*) unnamed_addr #2 comdat align 2 {
  %5 = zext i1 %2 to i8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpNode", %"class.v8::internal::RegExpNode"* %3, i64 0, i32 8
  %7 = bitcast %"class.v8::internal::Zone"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 8
  %12 = bitcast %"class.v8::internal::RegExpNode"** %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #18
  %13 = bitcast %"class.v8::internal::Zone"** %11 to i64*
  store i64 %8, i64* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 0, i32 7, i64 0
  %15 = bitcast %"class.v8::internal::BoyerMooreLookahead"** %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false) #18
  %16 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpNode"* %3, %"class.v8::internal::RegExpNode"** %16, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2v88internal8TextNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %17 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 1
  %18 = inttoptr i64 %8 to %"class.v8::internal::Zone"*
  %19 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %22, %20
  %24 = icmp ult i64 %23, 16
  br i1 %24, label %25, label %27, !prof !2

25:                                               ; preds = %4
  %26 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 16) #18
  br label %29

27:                                               ; preds = %4
  %28 = add i64 %20, 16
  store i64 %28, i64* %19, align 8
  br label %29

29:                                               ; preds = %25, %27
  %30 = phi i64 [ %26, %25 ], [ %20, %27 ]
  %31 = inttoptr i64 %30 to %"class.v8::internal::ZoneList"*
  %32 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %31, i64 0, i32 0
  store %"class.v8::internal::TextElement"* null, %"class.v8::internal::TextElement"** %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %31, i64 0, i32 1
  store i32 1, i32* %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %31, i64 0, i32 2
  store i32 0, i32* %34, align 4
  %35 = load i64, i64* %19, align 8
  %36 = load i64, i64* %21, align 8
  %37 = sub i64 %36, %35
  %38 = icmp ult i64 %37, 16
  br i1 %38, label %39, label %41, !prof !2

39:                                               ; preds = %29
  %40 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 16) #18
  br label %43

41:                                               ; preds = %29
  %42 = add i64 %35, 16
  store i64 %42, i64* %19, align 8
  br label %43

43:                                               ; preds = %39, %41
  %44 = phi i64 [ %40, %39 ], [ %35, %41 ]
  %45 = inttoptr i64 %44 to %"class.v8::internal::TextElement"*
  store %"class.v8::internal::TextElement"* %45, %"class.v8::internal::TextElement"** %32, align 8
  store %"class.v8::internal::ZoneList"* %31, %"class.v8::internal::ZoneList"** %17, align 8
  %46 = getelementptr inbounds %"class.v8::internal::TextNode", %"class.v8::internal::TextNode"* %0, i64 0, i32 2
  store i8 %5, i8* %46, align 8
  %47 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %1, i64 0, i32 0
  %48 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %11, align 8
  %49 = load i32, i32* %34, align 4
  %50 = load i32, i32* %33, align 8
  %51 = icmp slt i32 %49, %50
  br i1 %51, label %52, label %59

52:                                               ; preds = %43
  %53 = load %"class.v8::internal::TextElement"*, %"class.v8::internal::TextElement"** %32, align 8
  %54 = add nsw i32 %49, 1
  store i32 %54, i32* %34, align 4
  %55 = sext i32 %49 to i64
  %56 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %53, i64 %55
  %57 = bitcast %"class.v8::internal::TextElement"* %56 to i64*
  store i64 8589934591, i64* %57, align 8
  %58 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %53, i64 %55, i32 2
  br label %94

59:                                               ; preds = %43
  %60 = shl nsw i32 %50, 1
  %61 = or i32 %60, 1
  %62 = sext i32 %61 to i64
  %63 = shl nsw i64 %62, 4
  %64 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %48, i64 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %48, i64 0, i32 3
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %67, %65
  %69 = icmp ugt i64 %63, %68
  br i1 %69, label %70, label %72, !prof !2

70:                                               ; preds = %59
  %71 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %48, i64 %63) #18
  br label %74

72:                                               ; preds = %59
  %73 = add i64 %65, %63
  store i64 %73, i64* %64, align 8
  br label %74

74:                                               ; preds = %72, %70
  %75 = phi i64 [ %71, %70 ], [ %65, %72 ]
  %76 = inttoptr i64 %75 to %"class.v8::internal::TextElement"*
  %77 = load i32, i32* %34, align 4
  %78 = icmp sgt i32 %77, 0
  br i1 %78, label %79, label %87

79:                                               ; preds = %74
  %80 = inttoptr i64 %75 to i8*
  %81 = inttoptr i64 %30 to i8**
  %82 = load i8*, i8** %81, align 8
  %83 = icmp eq i32 %77, 1
  %84 = sext i32 %77 to i64
  %85 = shl nsw i64 %84, 4
  %86 = select i1 %83, i64 16, i64 %85
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %80, i8* align 1 %82, i64 %86, i1 false) #18
  br label %87

87:                                               ; preds = %79, %74
  store %"class.v8::internal::TextElement"* %76, %"class.v8::internal::TextElement"** %32, align 8
  store i32 %61, i32* %33, align 8
  %88 = load i32, i32* %34, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %34, align 4
  %90 = sext i32 %88 to i64
  %91 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %76, i64 %90
  %92 = bitcast %"class.v8::internal::TextElement"* %91 to i64*
  store i64 8589934591, i64* %92, align 8
  %93 = getelementptr inbounds %"class.v8::internal::TextElement", %"class.v8::internal::TextElement"* %76, i64 %90, i32 2
  br label %94

94:                                               ; preds = %52, %87
  %95 = phi %"class.v8::internal::RegExpTree"** [ %58, %52 ], [ %93, %87 ]
  store %"class.v8::internal::RegExpTree"* %47, %"class.v8::internal::RegExpTree"** %95, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #14

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.ctpop.i16(i16) #14

attributes #0 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone }
attributes #13 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind readnone speculatable }
attributes #15 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { noreturn nounwind }
attributes #18 = { nounwind }
attributes #19 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !10}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !12}
!21 = distinct !{!21, !10}
!22 = !{!"branch_weights", i32 2000, i32 1}
!23 = distinct !{!23, !12}
!24 = !{i32 0, i32 33}
!25 = distinct !{!25, !12}
!26 = distinct !{!26, !12}
!27 = !{i16 0, i16 17}
!28 = distinct !{!28, !12}
!29 = distinct !{!29, !12}
!30 = !{i64 0, i64 65}
!31 = distinct !{!31, !12}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZNSt3__114__copy_alignedINS_8__bitsetILm2ELm128EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_: argument 0"}
!34 = distinct !{!34, !"_ZNSt3__114__copy_alignedINS_8__bitsetILm2ELm128EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_"}
!35 = !{!33, !36}
!36 = distinct !{!36, !37, !"_ZNSt3__14copyINS_8__bitsetILm2ELm128EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_: argument 0"}
!37 = distinct !{!37, !"_ZNSt3__14copyINS_8__bitsetILm2ELm128EEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS3_IS4_XT0_EXLi0EEEES6_S5_"}
!38 = !{!36}
