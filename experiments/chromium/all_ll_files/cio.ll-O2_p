; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/cio.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/cio.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.opj_stream_private = type { i8*, void (i8*)*, i64, i64 (i8*, i64, i8*)*, i64 (i8*, i64, i8*)*, i64 (i64, i8*)*, i32 (i64, i8*)*, i8*, i8*, i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)*, i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)*, i64, i64, i64, i32 }
%struct.opj_event_mgr = type { i8*, i8*, i8*, void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*)* }

@.str = private unnamed_addr constant [26 x i8] c"Stream reached its end !\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"Error on writing stream!\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Stream error!\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_write_bytes_BE(i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  store i32 %1, i32* %4, align 4
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  %6 = bitcast i32* %5 to i8*
  %7 = zext i32 %2 to i64
  %8 = sub nsw i64 0, %7
  %9 = getelementptr inbounds i8, i8* %6, i64 %8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_write_bytes_LE(i8* nocapture, i32, i32) local_unnamed_addr #2 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  store i32 %1, i32* %4, align 4
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %155, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  %9 = getelementptr inbounds i8, i8* %5, i64 %8
  %10 = add i32 %2, -1
  %11 = zext i32 %10 to i64
  %12 = add nuw nsw i64 %11, 1
  %13 = icmp ult i64 %12, 32
  br i1 %13, label %100, label %14

14:                                               ; preds = %7
  %15 = add i32 %2, -1
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %18 = getelementptr i8, i8* %0, i64 %17
  %19 = xor i64 %16, -1
  %20 = add nsw i64 %19, %8
  %21 = getelementptr i8, i8* %5, i64 %20
  %22 = getelementptr i8, i8* %5, i64 %8
  %23 = icmp ugt i8* %22, %0
  %24 = icmp ult i8* %21, %18
  %25 = and i1 %23, %24
  br i1 %25, label %100, label %26

26:                                               ; preds = %14
  %27 = and i64 %12, 8589934560
  %28 = sub nsw i64 0, %27
  %29 = getelementptr i8, i8* %9, i64 %28
  %30 = trunc i64 %27 to i32
  %31 = getelementptr i8, i8* %0, i64 %27
  %32 = add nsw i64 %27, -32
  %33 = lshr exact i64 %32, 5
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 1
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %78, label %37

37:                                               ; preds = %26
  %38 = sub nuw nsw i64 %34, %35
  %39 = getelementptr i8, i8* %9, i64 -1
  %40 = getelementptr i8, i8* %9, i64 -1
  br label %41

41:                                               ; preds = %41, %37
  %42 = phi i64 [ 0, %37 ], [ %75, %41 ]
  %43 = phi i64 [ %38, %37 ], [ %76, %41 ]
  %44 = sub i64 0, %42
  %45 = getelementptr i8, i8* %0, i64 %42
  %46 = getelementptr inbounds i8, i8* %39, i64 %44
  %47 = getelementptr inbounds i8, i8* %46, i64 -15
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1, !alias.scope !2
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %51 = getelementptr inbounds i8, i8* %46, i64 -16
  %52 = getelementptr inbounds i8, i8* %51, i64 -15
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !2
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %56 = bitcast i8* %45 to <16 x i8>*
  store <16 x i8> %50, <16 x i8>* %56, align 1, !alias.scope !5, !noalias !2
  %57 = getelementptr i8, i8* %45, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %58, align 1, !alias.scope !5, !noalias !2
  %59 = or i64 %42, 32
  %60 = sub nuw nsw i64 -32, %42
  %61 = getelementptr i8, i8* %0, i64 %59
  %62 = getelementptr inbounds i8, i8* %40, i64 %60
  %63 = getelementptr inbounds i8, i8* %62, i64 -15
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1, !alias.scope !2
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %67 = getelementptr inbounds i8, i8* %62, i64 -16
  %68 = getelementptr inbounds i8, i8* %67, i64 -15
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !2
  %71 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %72 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %72, align 1, !alias.scope !5, !noalias !2
  %73 = getelementptr i8, i8* %61, i64 16
  %74 = bitcast i8* %73 to <16 x i8>*
  store <16 x i8> %71, <16 x i8>* %74, align 1, !alias.scope !5, !noalias !2
  %75 = add i64 %42, 64
  %76 = add i64 %43, -2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %41, !llvm.loop !7

78:                                               ; preds = %41, %26
  %79 = phi i64 [ 0, %26 ], [ %75, %41 ]
  %80 = icmp eq i64 %35, 0
  br i1 %80, label %98, label %81

81:                                               ; preds = %78
  %82 = sub i64 0, %79
  %83 = getelementptr i8, i8* %9, i64 -1
  %84 = getelementptr i8, i8* %0, i64 %79
  %85 = getelementptr inbounds i8, i8* %83, i64 %82
  %86 = getelementptr inbounds i8, i8* %85, i64 -15
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !2
  %89 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %90 = getelementptr inbounds i8, i8* %85, i64 -16
  %91 = getelementptr inbounds i8, i8* %90, i64 -15
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1, !alias.scope !2
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %95 = bitcast i8* %84 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %95, align 1, !alias.scope !5, !noalias !2
  %96 = getelementptr i8, i8* %84, i64 16
  %97 = bitcast i8* %96 to <16 x i8>*
  store <16 x i8> %94, <16 x i8>* %97, align 1, !alias.scope !5, !noalias !2
  br label %98

98:                                               ; preds = %78, %81
  %99 = icmp eq i64 %12, %27
  br i1 %99, label %155, label %100

100:                                              ; preds = %98, %14, %7
  %101 = phi i8* [ %9, %14 ], [ %9, %7 ], [ %29, %98 ]
  %102 = phi i32 [ 0, %14 ], [ 0, %7 ], [ %30, %98 ]
  %103 = phi i8* [ %0, %14 ], [ %0, %7 ], [ %31, %98 ]
  %104 = sub i32 %2, %102
  %105 = xor i32 %102, -1
  %106 = add i32 %105, %2
  %107 = and i32 %104, 7
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %120, label %109

109:                                              ; preds = %100, %109
  %110 = phi i8* [ %114, %109 ], [ %101, %100 ]
  %111 = phi i32 [ %117, %109 ], [ %102, %100 ]
  %112 = phi i8* [ %116, %109 ], [ %103, %100 ]
  %113 = phi i32 [ %118, %109 ], [ %107, %100 ]
  %114 = getelementptr inbounds i8, i8* %110, i64 -1
  %115 = load i8, i8* %114, align 1
  %116 = getelementptr inbounds i8, i8* %112, i64 1
  store i8 %115, i8* %112, align 1
  %117 = add nuw i32 %111, 1
  %118 = add i32 %113, -1
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %109, !llvm.loop !9

120:                                              ; preds = %109, %100
  %121 = phi i8* [ %101, %100 ], [ %114, %109 ]
  %122 = phi i32 [ %102, %100 ], [ %117, %109 ]
  %123 = phi i8* [ %103, %100 ], [ %116, %109 ]
  %124 = icmp ult i32 %106, 7
  br i1 %124, label %155, label %125

125:                                              ; preds = %120, %125
  %126 = phi i8* [ %150, %125 ], [ %121, %120 ]
  %127 = phi i32 [ %153, %125 ], [ %122, %120 ]
  %128 = phi i8* [ %152, %125 ], [ %123, %120 ]
  %129 = getelementptr inbounds i8, i8* %126, i64 -1
  %130 = load i8, i8* %129, align 1
  %131 = getelementptr inbounds i8, i8* %128, i64 1
  store i8 %130, i8* %128, align 1
  %132 = getelementptr inbounds i8, i8* %126, i64 -2
  %133 = load i8, i8* %132, align 1
  %134 = getelementptr inbounds i8, i8* %128, i64 2
  store i8 %133, i8* %131, align 1
  %135 = getelementptr inbounds i8, i8* %126, i64 -3
  %136 = load i8, i8* %135, align 1
  %137 = getelementptr inbounds i8, i8* %128, i64 3
  store i8 %136, i8* %134, align 1
  %138 = getelementptr inbounds i8, i8* %126, i64 -4
  %139 = load i8, i8* %138, align 1
  %140 = getelementptr inbounds i8, i8* %128, i64 4
  store i8 %139, i8* %137, align 1
  %141 = getelementptr inbounds i8, i8* %126, i64 -5
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds i8, i8* %128, i64 5
  store i8 %142, i8* %140, align 1
  %144 = getelementptr inbounds i8, i8* %126, i64 -6
  %145 = load i8, i8* %144, align 1
  %146 = getelementptr inbounds i8, i8* %128, i64 6
  store i8 %145, i8* %143, align 1
  %147 = getelementptr inbounds i8, i8* %126, i64 -7
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr inbounds i8, i8* %128, i64 7
  store i8 %148, i8* %146, align 1
  %150 = getelementptr inbounds i8, i8* %126, i64 -8
  %151 = load i8, i8* %150, align 1
  %152 = getelementptr inbounds i8, i8* %128, i64 8
  store i8 %151, i8* %149, align 1
  %153 = add nuw i32 %127, 8
  %154 = icmp eq i32 %153, %2
  br i1 %154, label %155, label %125, !llvm.loop !11

155:                                              ; preds = %120, %125, %98, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_read_bytes_BE(i8* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #0 {
  store i32 0, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 1
  %5 = bitcast i32* %4 to i8*
  %6 = zext i32 %2 to i64
  %7 = sub nsw i64 0, %6
  %8 = getelementptr inbounds i8, i8* %5, i64 %7
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %0, i64 %6, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_read_bytes_LE(i8* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #2 {
  %4 = bitcast i32* %1 to i8*
  store i32 0, i32* %1, align 4
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %154, label %6

6:                                                ; preds = %3
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds i8, i8* %4, i64 %7
  %9 = add i32 %2, -1
  %10 = zext i32 %9 to i64
  %11 = add nuw nsw i64 %10, 1
  %12 = icmp ult i64 %11, 32
  br i1 %12, label %99, label %13

13:                                               ; preds = %6
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = xor i64 %15, -1
  %17 = add nsw i64 %16, %7
  %18 = getelementptr i8, i8* %4, i64 %17
  %19 = getelementptr i8, i8* %4, i64 %7
  %20 = add nuw nsw i64 %15, 1
  %21 = getelementptr i8, i8* %0, i64 %20
  %22 = icmp ult i8* %18, %21
  %23 = icmp ugt i8* %19, %0
  %24 = and i1 %22, %23
  br i1 %24, label %99, label %25

25:                                               ; preds = %13
  %26 = and i64 %11, 8589934560
  %27 = sub nsw i64 0, %26
  %28 = getelementptr i8, i8* %8, i64 %27
  %29 = trunc i64 %26 to i32
  %30 = getelementptr i8, i8* %0, i64 %26
  %31 = add nsw i64 %26, -32
  %32 = lshr exact i64 %31, 5
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 1
  %35 = icmp eq i64 %31, 0
  br i1 %35, label %77, label %36

36:                                               ; preds = %25
  %37 = sub nuw nsw i64 %33, %34
  %38 = getelementptr i8, i8* %8, i64 -1
  %39 = getelementptr i8, i8* %8, i64 -1
  br label %40

40:                                               ; preds = %40, %36
  %41 = phi i64 [ 0, %36 ], [ %74, %40 ]
  %42 = phi i64 [ %37, %36 ], [ %75, %40 ]
  %43 = sub i64 0, %41
  %44 = getelementptr i8, i8* %0, i64 %41
  %45 = getelementptr inbounds i8, i8* %38, i64 %43
  %46 = bitcast i8* %44 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1, !alias.scope !12
  %48 = getelementptr i8, i8* %44, i64 16
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1, !alias.scope !12
  %51 = shufflevector <16 x i8> %47, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %52 = getelementptr inbounds i8, i8* %45, i64 -15
  %53 = bitcast i8* %52 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %53, align 1, !alias.scope !15, !noalias !12
  %54 = shufflevector <16 x i8> %50, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %55 = getelementptr inbounds i8, i8* %45, i64 -16
  %56 = getelementptr inbounds i8, i8* %55, i64 -15
  %57 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %57, align 1, !alias.scope !15, !noalias !12
  %58 = or i64 %41, 32
  %59 = sub nuw nsw i64 -32, %41
  %60 = getelementptr i8, i8* %0, i64 %58
  %61 = getelementptr inbounds i8, i8* %39, i64 %59
  %62 = bitcast i8* %60 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !12
  %64 = getelementptr i8, i8* %60, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !12
  %67 = shufflevector <16 x i8> %63, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %68 = getelementptr inbounds i8, i8* %61, i64 -15
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %69, align 1, !alias.scope !15, !noalias !12
  %70 = shufflevector <16 x i8> %66, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %71 = getelementptr inbounds i8, i8* %61, i64 -16
  %72 = getelementptr inbounds i8, i8* %71, i64 -15
  %73 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %73, align 1, !alias.scope !15, !noalias !12
  %74 = add i64 %41, 64
  %75 = add i64 %42, -2
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %40, !llvm.loop !17

77:                                               ; preds = %40, %25
  %78 = phi i64 [ 0, %25 ], [ %74, %40 ]
  %79 = icmp eq i64 %34, 0
  br i1 %79, label %97, label %80

80:                                               ; preds = %77
  %81 = sub i64 0, %78
  %82 = getelementptr i8, i8* %8, i64 -1
  %83 = getelementptr i8, i8* %0, i64 %78
  %84 = getelementptr inbounds i8, i8* %82, i64 %81
  %85 = bitcast i8* %83 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !12
  %87 = getelementptr i8, i8* %83, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !12
  %90 = shufflevector <16 x i8> %86, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %91 = getelementptr inbounds i8, i8* %84, i64 -15
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %92, align 1, !alias.scope !15, !noalias !12
  %93 = shufflevector <16 x i8> %89, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %94 = getelementptr inbounds i8, i8* %84, i64 -16
  %95 = getelementptr inbounds i8, i8* %94, i64 -15
  %96 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> %93, <16 x i8>* %96, align 1, !alias.scope !15, !noalias !12
  br label %97

97:                                               ; preds = %77, %80
  %98 = icmp eq i64 %11, %26
  br i1 %98, label %154, label %99

99:                                               ; preds = %97, %13, %6
  %100 = phi i8* [ %8, %13 ], [ %8, %6 ], [ %28, %97 ]
  %101 = phi i32 [ 0, %13 ], [ 0, %6 ], [ %29, %97 ]
  %102 = phi i8* [ %0, %13 ], [ %0, %6 ], [ %30, %97 ]
  %103 = sub i32 %2, %101
  %104 = xor i32 %101, -1
  %105 = add i32 %104, %2
  %106 = and i32 %103, 7
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %119, label %108

108:                                              ; preds = %99, %108
  %109 = phi i8* [ %113, %108 ], [ %100, %99 ]
  %110 = phi i32 [ %116, %108 ], [ %101, %99 ]
  %111 = phi i8* [ %114, %108 ], [ %102, %99 ]
  %112 = phi i32 [ %117, %108 ], [ %106, %99 ]
  %113 = getelementptr inbounds i8, i8* %109, i64 -1
  %114 = getelementptr inbounds i8, i8* %111, i64 1
  %115 = load i8, i8* %111, align 1
  store i8 %115, i8* %113, align 1
  %116 = add nuw i32 %110, 1
  %117 = add i32 %112, -1
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %108, !llvm.loop !18

119:                                              ; preds = %108, %99
  %120 = phi i8* [ %100, %99 ], [ %113, %108 ]
  %121 = phi i32 [ %101, %99 ], [ %116, %108 ]
  %122 = phi i8* [ %102, %99 ], [ %114, %108 ]
  %123 = icmp ult i32 %105, 7
  br i1 %123, label %154, label %124

124:                                              ; preds = %119, %124
  %125 = phi i8* [ %149, %124 ], [ %120, %119 ]
  %126 = phi i32 [ %152, %124 ], [ %121, %119 ]
  %127 = phi i8* [ %150, %124 ], [ %122, %119 ]
  %128 = getelementptr inbounds i8, i8* %125, i64 -1
  %129 = getelementptr inbounds i8, i8* %127, i64 1
  %130 = load i8, i8* %127, align 1
  store i8 %130, i8* %128, align 1
  %131 = getelementptr inbounds i8, i8* %125, i64 -2
  %132 = getelementptr inbounds i8, i8* %127, i64 2
  %133 = load i8, i8* %129, align 1
  store i8 %133, i8* %131, align 1
  %134 = getelementptr inbounds i8, i8* %125, i64 -3
  %135 = getelementptr inbounds i8, i8* %127, i64 3
  %136 = load i8, i8* %132, align 1
  store i8 %136, i8* %134, align 1
  %137 = getelementptr inbounds i8, i8* %125, i64 -4
  %138 = getelementptr inbounds i8, i8* %127, i64 4
  %139 = load i8, i8* %135, align 1
  store i8 %139, i8* %137, align 1
  %140 = getelementptr inbounds i8, i8* %125, i64 -5
  %141 = getelementptr inbounds i8, i8* %127, i64 5
  %142 = load i8, i8* %138, align 1
  store i8 %142, i8* %140, align 1
  %143 = getelementptr inbounds i8, i8* %125, i64 -6
  %144 = getelementptr inbounds i8, i8* %127, i64 6
  %145 = load i8, i8* %141, align 1
  store i8 %145, i8* %143, align 1
  %146 = getelementptr inbounds i8, i8* %125, i64 -7
  %147 = getelementptr inbounds i8, i8* %127, i64 7
  %148 = load i8, i8* %144, align 1
  store i8 %148, i8* %146, align 1
  %149 = getelementptr inbounds i8, i8* %125, i64 -8
  %150 = getelementptr inbounds i8, i8* %127, i64 8
  %151 = load i8, i8* %147, align 1
  store i8 %151, i8* %149, align 1
  %152 = add nuw i32 %126, 8
  %153 = icmp eq i32 %152, %2
  br i1 %153, label %154, label %124, !llvm.loop !19

154:                                              ; preds = %119, %124, %97, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @opj_write_double_BE(i8* nocapture, double) local_unnamed_addr #3 {
  %3 = bitcast i8* %0 to double*
  store double %1, double* %3, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_write_double_LE(i8* nocapture, double) local_unnamed_addr #2 {
  %3 = bitcast double %1 to i64
  %4 = lshr i64 %3, 56
  %5 = trunc i64 %4 to i8
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %5, i8* %0, align 1
  %7 = lshr i64 %3, 48
  %8 = trunc i64 %7 to i8
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %8, i8* %6, align 1
  %10 = lshr i64 %3, 40
  %11 = trunc i64 %10 to i8
  %12 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %11, i8* %9, align 1
  %13 = lshr i64 %3, 32
  %14 = trunc i64 %13 to i8
  %15 = getelementptr inbounds i8, i8* %0, i64 4
  store i8 %14, i8* %12, align 1
  %16 = lshr i64 %3, 24
  %17 = trunc i64 %16 to i8
  %18 = getelementptr inbounds i8, i8* %0, i64 5
  store i8 %17, i8* %15, align 1
  %19 = lshr i64 %3, 16
  %20 = trunc i64 %19 to i8
  %21 = getelementptr inbounds i8, i8* %0, i64 6
  store i8 %20, i8* %18, align 1
  %22 = lshr i64 %3, 8
  %23 = trunc i64 %22 to i8
  %24 = getelementptr inbounds i8, i8* %0, i64 7
  store i8 %23, i8* %21, align 1
  %25 = trunc i64 %3 to i8
  store i8 %25, i8* %24, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_read_double_BE(i8* nocapture readonly, double* nocapture) local_unnamed_addr #2 {
  %3 = bitcast i8* %0 to i64*
  %4 = bitcast double* %1 to i64*
  %5 = load i64, i64* %3, align 1
  store i64 %5, i64* %4, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_read_double_LE(i8* nocapture readonly, double* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds double, double* %1, i64 1
  %4 = bitcast double* %3 to i8*
  %5 = getelementptr inbounds i8, i8* %4, i64 -1
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  %7 = load i8, i8* %0, align 1
  store i8 %7, i8* %5, align 1
  %8 = getelementptr inbounds i8, i8* %4, i64 -2
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  %10 = load i8, i8* %6, align 1
  store i8 %10, i8* %8, align 1
  %11 = getelementptr inbounds i8, i8* %4, i64 -3
  %12 = getelementptr inbounds i8, i8* %0, i64 3
  %13 = load i8, i8* %9, align 1
  store i8 %13, i8* %11, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 -4
  %15 = getelementptr inbounds i8, i8* %0, i64 4
  %16 = load i8, i8* %12, align 1
  store i8 %16, i8* %14, align 1
  %17 = getelementptr inbounds i8, i8* %4, i64 -5
  %18 = getelementptr inbounds i8, i8* %0, i64 5
  %19 = load i8, i8* %15, align 1
  store i8 %19, i8* %17, align 1
  %20 = getelementptr inbounds i8, i8* %4, i64 -6
  %21 = getelementptr inbounds i8, i8* %0, i64 6
  %22 = load i8, i8* %18, align 1
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds i8, i8* %4, i64 -7
  %24 = getelementptr inbounds i8, i8* %0, i64 7
  %25 = load i8, i8* %21, align 1
  store i8 %25, i8* %23, align 1
  %26 = bitcast double* %1 to i8*
  %27 = load i8, i8* %24, align 1
  store i8 %27, i8* %26, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @opj_write_float_BE(i8* nocapture, float) local_unnamed_addr #3 {
  %3 = bitcast i8* %0 to float*
  store float %1, float* %3, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_write_float_LE(i8* nocapture, float) local_unnamed_addr #2 {
  %3 = bitcast float %1 to i32
  %4 = lshr i32 %3, 24
  %5 = trunc i32 %4 to i8
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %5, i8* %0, align 1
  %7 = lshr i32 %3, 16
  %8 = trunc i32 %7 to i8
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %8, i8* %6, align 1
  %10 = lshr i32 %3, 8
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %11, i8* %9, align 1
  %13 = trunc i32 %3 to i8
  store i8 %13, i8* %12, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_read_float_BE(i8* nocapture readonly, float* nocapture) local_unnamed_addr #2 {
  %3 = bitcast i8* %0 to i32*
  %4 = bitcast float* %1 to i32*
  %5 = load i32, i32* %3, align 1
  store i32 %5, i32* %4, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_read_float_LE(i8* nocapture readonly, float* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds float, float* %1, i64 1
  %4 = bitcast float* %3 to i8*
  %5 = getelementptr inbounds i8, i8* %4, i64 -1
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  %7 = load i8, i8* %0, align 1
  store i8 %7, i8* %5, align 1
  %8 = getelementptr inbounds i8, i8* %4, i64 -2
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  %10 = load i8, i8* %6, align 1
  store i8 %10, i8* %8, align 1
  %11 = getelementptr inbounds i8, i8* %4, i64 -3
  %12 = getelementptr inbounds i8, i8* %0, i64 3
  %13 = load i8, i8* %9, align 1
  store i8 %13, i8* %11, align 1
  %14 = bitcast float* %1 to i8*
  %15 = load i8, i8* %12, align 1
  store i8 %15, i8* %14, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8** @opj_stream_create(i64, i32) local_unnamed_addr #0 {
  %3 = tail call i8* @opj_calloc(i64 1, i64 120) #7
  %4 = icmp eq i8* %3, null
  br i1 %4, label %35, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds i8, i8* %3, i64 104
  %7 = bitcast i8* %6 to i64*
  store i64 %0, i64* %7, align 8
  %8 = tail call i8* @opj_malloc(i64 %0) #7
  %9 = getelementptr inbounds i8, i8* %3, i64 56
  %10 = bitcast i8* %9 to i8**
  store i8* %8, i8** %10, align 8
  %11 = icmp eq i8* %8, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %5
  tail call void @opj_free(i8* nonnull %3) #7
  br label %35

13:                                               ; preds = %5
  %14 = getelementptr inbounds i8, i8* %3, i64 64
  %15 = bitcast i8* %14 to i8**
  store i8* %8, i8** %15, align 8
  %16 = icmp eq i32 %1, 0
  %17 = getelementptr inbounds i8, i8* %3, i64 112
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = select i1 %16, i32 1, i32 2
  %21 = select i1 %16, i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* @opj_stream_write_skip, i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* @opj_stream_read_skip
  %22 = select i1 %16, i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* @opj_stream_write_seek, i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* @opj_stream_read_seek
  %23 = or i32 %19, %20
  store i32 %23, i32* %18, align 8
  %24 = getelementptr inbounds i8, i8* %3, i64 72
  %25 = bitcast i8* %24 to i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)**
  store i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* %21, i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)** %25, align 8
  %26 = getelementptr inbounds i8, i8* %3, i64 80
  %27 = bitcast i8* %26 to i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)**
  store i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* %22, i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)** %27, align 8
  %28 = getelementptr inbounds i8, i8* %3, i64 24
  %29 = bitcast i8* %28 to <2 x i64 (i8*, i64, i8*)*>*
  store <2 x i64 (i8*, i64, i8*)*> <i64 (i8*, i64, i8*)* @opj_stream_default_read, i64 (i8*, i64, i8*)* @opj_stream_default_write>, <2 x i64 (i8*, i64, i8*)*>* %29, align 8
  %30 = getelementptr inbounds i8, i8* %3, i64 40
  %31 = bitcast i8* %30 to i64 (i64, i8*)**
  store i64 (i64, i8*)* @opj_stream_default_skip, i64 (i64, i8*)** %31, align 8
  %32 = getelementptr inbounds i8, i8* %3, i64 48
  %33 = bitcast i8* %32 to i32 (i64, i8*)**
  store i32 (i64, i8*)* @opj_stream_default_seek, i32 (i64, i8*)** %33, align 8
  %34 = bitcast i8* %3 to i8**
  br label %35

35:                                               ; preds = %2, %13, %12
  %36 = phi i8** [ %34, %13 ], [ null, %12 ], [ null, %2 ]
  ret i8** %36
}

declare i8* @opj_calloc(i64, i64) local_unnamed_addr #4

declare i8* @opj_malloc(i64) local_unnamed_addr #4

declare void @opj_free(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @opj_stream_read_skip(%struct.opj_stream_private* nocapture, i64, %struct.opj_event_mgr*) #0 {
  %4 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 11
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %15, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  store i8* %10, i8** %8, align 8
  %11 = sub i64 %5, %1
  store i64 %11, i64* %4, align 8
  %12 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  %13 = load i64, i64* %12, align 8
  %14 = add nsw i64 %13, %1
  store i64 %14, i64* %12, align 8
  br label %103

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 14
  %17 = load i32, i32* %16, align 8
  %18 = and i32 %17, 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %29, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %5
  store i8* %23, i8** %21, align 8
  store i64 0, i64* %4, align 8
  %24 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  %25 = load i64, i64* %24, align 8
  %26 = add nsw i64 %25, %5
  store i64 %26, i64* %24, align 8
  %27 = icmp eq i64 %5, 0
  %28 = select i1 %27, i64 -1, i64 %5
  br label %103

29:                                               ; preds = %15
  %30 = icmp eq i64 %5, 0
  br i1 %30, label %38, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 7
  %33 = bitcast i8** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %36 = bitcast i8** %35 to i64*
  store i64 %34, i64* %36, align 8
  %37 = sub nsw i64 %1, %5
  store i64 0, i64* %4, align 8
  br label %38

38:                                               ; preds = %29, %31
  %39 = phi i64 [ %37, %31 ], [ %1, %29 ]
  %40 = icmp sgt i64 %39, 0
  %41 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  %42 = load i64, i64* %41, align 8
  %43 = add nsw i64 %42, %5
  br i1 %40, label %44, label %100

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 2
  %46 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 5
  %47 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 0
  br label %48

48:                                               ; preds = %44, %94
  %49 = phi i64 [ %43, %44 ], [ %99, %94 ]
  %50 = phi i64 [ %5, %44 ], [ %96, %94 ]
  %51 = phi i64 [ %39, %44 ], [ %95, %94 ]
  %52 = add nsw i64 %49, %51
  %53 = load i64, i64* %45, align 8
  %54 = icmp ugt i64 %52, %53
  br i1 %54, label %55, label %81

55:                                               ; preds = %48
  %56 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
  %57 = load i64, i64* %41, align 8
  %58 = add nsw i64 %57, %50
  store i64 %58, i64* %41, align 8
  %59 = load i64, i64* %45, align 8
  %60 = sub i64 %59, %58
  %61 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 7
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %65 = bitcast i8** %64 to i64*
  store i64 %63, i64* %65, align 8
  store i64 0, i64* %4, align 8
  %66 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 6
  %67 = load i32 (i64, i8*)*, i32 (i64, i8*)** %66, align 8
  %68 = load i8*, i8** %47, align 8
  %69 = tail call i32 %67(i64 %59, i8* %68) #7
  %70 = icmp eq i32 %69, 0
  %71 = load i32, i32* %16, align 8
  br i1 %70, label %72, label %74

72:                                               ; preds = %55
  %73 = or i32 %71, 4
  store i32 %73, i32* %16, align 8
  br label %76

74:                                               ; preds = %55
  %75 = and i32 %71, -5
  store i32 %75, i32* %16, align 8
  store i64 %59, i64* %41, align 8
  br label %76

76:                                               ; preds = %72, %74
  %77 = phi i32 [ %73, %72 ], [ %75, %74 ]
  %78 = or i32 %77, 4
  store i32 %78, i32* %16, align 8
  %79 = icmp eq i64 %60, 0
  %80 = select i1 %79, i64 -1, i64 %60
  br label %103

81:                                               ; preds = %48
  %82 = load i64 (i64, i8*)*, i64 (i64, i8*)** %46, align 8
  %83 = load i8*, i8** %47, align 8
  %84 = tail call i64 %82(i64 %51, i8* %83) #7
  %85 = icmp eq i64 %84, -1
  br i1 %85, label %86, label %94

86:                                               ; preds = %81
  %87 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
  %88 = load i32, i32* %16, align 8
  %89 = or i32 %88, 4
  store i32 %89, i32* %16, align 8
  %90 = load i64, i64* %41, align 8
  %91 = add nsw i64 %90, %50
  store i64 %91, i64* %41, align 8
  %92 = icmp eq i64 %50, 0
  %93 = select i1 %92, i64 -1, i64 %50
  br label %103

94:                                               ; preds = %81
  %95 = sub nsw i64 %51, %84
  %96 = add nsw i64 %84, %50
  %97 = icmp sgt i64 %95, 0
  %98 = load i64, i64* %41, align 8
  %99 = add nsw i64 %98, %96
  br i1 %97, label %48, label %100

100:                                              ; preds = %94, %38
  %101 = phi i64 [ %5, %38 ], [ %96, %94 ]
  %102 = phi i64 [ %43, %38 ], [ %99, %94 ]
  store i64 %102, i64* %41, align 8
  br label %103

103:                                              ; preds = %100, %86, %76, %20, %7
  %104 = phi i64 [ %1, %7 ], [ %28, %20 ], [ %80, %76 ], [ %93, %86 ], [ %101, %100 ]
  ret i64 %104
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_stream_read_seek(%struct.opj_stream_private* nocapture, i64, %struct.opj_event_mgr* nocapture readnone) #0 {
  %4 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 7
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 11
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 6
  %11 = load i32 (i64, i8*)*, i32 (i64, i8*)** %10, align 8
  %12 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = tail call i32 %11(i64 %1, i8* %13) #7
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 14
  %17 = load i32, i32* %16, align 8
  br i1 %15, label %18, label %20

18:                                               ; preds = %3
  %19 = or i32 %17, 4
  store i32 %19, i32* %16, align 8
  br label %23

20:                                               ; preds = %3
  %21 = and i32 %17, -5
  store i32 %21, i32* %16, align 8
  %22 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  store i64 %1, i64* %22, align 8
  br label %23

23:                                               ; preds = %20, %18
  %24 = phi i32 [ 1, %20 ], [ 0, %18 ]
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @opj_stream_write_skip(%struct.opj_stream_private* nocapture, i64, %struct.opj_event_mgr*) #0 {
  %4 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 14
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %73

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 7
  %10 = bitcast i8** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %13 = bitcast i8** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 11
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %36, label %17

17:                                               ; preds = %8
  %18 = inttoptr i64 %11 to i8*
  %19 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 4
  %20 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 0
  br label %21

21:                                               ; preds = %28, %17
  %22 = phi i8* [ %18, %17 ], [ %30, %28 ]
  %23 = phi i64 [ %15, %17 ], [ %32, %28 ]
  %24 = load i64 (i8*, i64, i8*)*, i64 (i8*, i64, i8*)** %19, align 8
  %25 = load i8*, i8** %20, align 8
  %26 = tail call i64 %24(i8* %22, i64 %23, i8* %25) #7
  %27 = icmp eq i64 %26, -1
  br i1 %27, label %42, label %28

28:                                               ; preds = %21
  %29 = load i8*, i8** %12, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 %26
  store i8* %30, i8** %12, align 8
  %31 = load i64, i64* %14, align 8
  %32 = sub i64 %31, %26
  store i64 %32, i64* %14, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %21

34:                                               ; preds = %28
  %35 = load i64, i64* %10, align 8
  br label %36

36:                                               ; preds = %8, %34
  %37 = phi i64 [ %35, %34 ], [ %11, %8 ]
  store i64 %37, i64* %13, align 8
  %38 = icmp sgt i64 %1, 0
  br i1 %38, label %39, label %68

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 5
  %41 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 0
  br label %48

42:                                               ; preds = %21
  %43 = load i32, i32* %4, align 8
  %44 = or i32 %43, 8
  store i32 %44, i32* %4, align 8
  %45 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #7
  %46 = load i32, i32* %4, align 8
  %47 = or i32 %46, 8
  store i32 %47, i32* %4, align 8
  store i64 0, i64* %14, align 8
  br label %73

48:                                               ; preds = %39, %64
  %49 = phi i64 [ 0, %39 ], [ %66, %64 ]
  %50 = phi i64 [ %1, %39 ], [ %65, %64 ]
  %51 = load i64 (i64, i8*)*, i64 (i64, i8*)** %40, align 8
  %52 = load i8*, i8** %41, align 8
  %53 = tail call i64 %51(i64 %50, i8* %52) #7
  %54 = icmp eq i64 %53, -1
  br i1 %54, label %55, label %64

55:                                               ; preds = %48
  %56 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0)) #7
  %57 = load i32, i32* %4, align 8
  %58 = or i32 %57, 8
  store i32 %58, i32* %4, align 8
  %59 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  %60 = load i64, i64* %59, align 8
  %61 = add nsw i64 %60, %49
  store i64 %61, i64* %59, align 8
  %62 = icmp eq i64 %49, 0
  %63 = select i1 %62, i64 -1, i64 %49
  br label %73

64:                                               ; preds = %48
  %65 = sub nsw i64 %50, %53
  %66 = add nsw i64 %53, %49
  %67 = icmp sgt i64 %65, 0
  br i1 %67, label %48, label %68

68:                                               ; preds = %64, %36
  %69 = phi i64 [ 0, %36 ], [ %66, %64 ]
  %70 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  %71 = load i64, i64* %70, align 8
  %72 = add nsw i64 %71, %69
  store i64 %72, i64* %70, align 8
  br label %73

73:                                               ; preds = %3, %68, %55, %42
  %74 = phi i64 [ %63, %55 ], [ %69, %68 ], [ -1, %42 ], [ -1, %3 ]
  ret i64 %74
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_stream_write_seek(%struct.opj_stream_private* nocapture, i64, %struct.opj_event_mgr*) #0 {
  %4 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 7
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 11
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %38, label %12

12:                                               ; preds = %3
  %13 = inttoptr i64 %6 to i8*
  %14 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 4
  %15 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 0
  br label %16

16:                                               ; preds = %23, %12
  %17 = phi i8* [ %13, %12 ], [ %25, %23 ]
  %18 = phi i64 [ %10, %12 ], [ %27, %23 ]
  %19 = load i64 (i8*, i64, i8*)*, i64 (i8*, i64, i8*)** %14, align 8
  %20 = load i8*, i8** %15, align 8
  %21 = tail call i64 %19(i8* %17, i64 %18, i8* %20) #7
  %22 = icmp eq i64 %21, -1
  br i1 %22, label %31, label %23

23:                                               ; preds = %16
  %24 = load i8*, i8** %7, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %21
  store i8* %25, i8** %7, align 8
  %26 = load i64, i64* %9, align 8
  %27 = sub i64 %26, %21
  store i64 %27, i64* %9, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %16

29:                                               ; preds = %23
  %30 = load i64, i64* %5, align 8
  br label %38

31:                                               ; preds = %16
  %32 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 14
  %33 = load i32, i32* %32, align 8
  %34 = or i32 %33, 8
  store i32 %34, i32* %32, align 8
  %35 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #7
  %36 = load i32, i32* %32, align 8
  %37 = or i32 %36, 8
  store i32 %37, i32* %32, align 8
  br label %52

38:                                               ; preds = %29, %3
  %39 = phi i64 [ %30, %29 ], [ %6, %3 ]
  store i64 %39, i64* %8, align 8
  store i64 0, i64* %9, align 8
  %40 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 6
  %41 = load i32 (i64, i8*)*, i32 (i64, i8*)** %40, align 8
  %42 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = tail call i32 %41(i64 %1, i8* %43) #7
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %50

46:                                               ; preds = %38
  %47 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 14
  %48 = load i32, i32* %47, align 8
  %49 = or i32 %48, 8
  store i32 %49, i32* %47, align 8
  br label %52

50:                                               ; preds = %38
  %51 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  store i64 %1, i64* %51, align 8
  br label %52

52:                                               ; preds = %50, %46, %31
  %53 = phi i32 [ 1, %50 ], [ 0, %46 ], [ 0, %31 ]
  ret i32 %53
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @opj_stream_default_read(i8* nocapture readnone, i64, i8* nocapture readnone) #5 {
  ret i64 -1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @opj_stream_default_write(i8* nocapture readnone, i64, i8* nocapture readnone) #5 {
  ret i64 -1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @opj_stream_default_skip(i64, i8* nocapture readnone) #5 {
  ret i64 -1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @opj_stream_default_seek(i64, i8* nocapture readnone) #5 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i8** @opj_stream_default_create(i32) local_unnamed_addr #0 {
  %2 = tail call i8* @opj_calloc(i64 1, i64 120) #7
  %3 = icmp eq i8* %2, null
  br i1 %3, label %34, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds i8, i8* %2, i64 104
  %6 = bitcast i8* %5 to i64*
  store i64 1048576, i64* %6, align 8
  %7 = tail call i8* @opj_malloc(i64 1048576) #7
  %8 = getelementptr inbounds i8, i8* %2, i64 56
  %9 = bitcast i8* %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = icmp eq i8* %7, null
  br i1 %10, label %11, label %12

11:                                               ; preds = %4
  tail call void @opj_free(i8* nonnull %2) #7
  br label %34

12:                                               ; preds = %4
  %13 = getelementptr inbounds i8, i8* %2, i64 64
  %14 = bitcast i8* %13 to i8**
  store i8* %7, i8** %14, align 8
  %15 = icmp eq i32 %0, 0
  %16 = getelementptr inbounds i8, i8* %2, i64 112
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 8
  %19 = select i1 %15, i32 1, i32 2
  %20 = select i1 %15, i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* @opj_stream_write_skip, i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* @opj_stream_read_skip
  %21 = select i1 %15, i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* @opj_stream_write_seek, i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* @opj_stream_read_seek
  %22 = or i32 %18, %19
  store i32 %22, i32* %17, align 8
  %23 = getelementptr inbounds i8, i8* %2, i64 72
  %24 = bitcast i8* %23 to i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)**
  store i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* %20, i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)** %24, align 8
  %25 = getelementptr inbounds i8, i8* %2, i64 80
  %26 = bitcast i8* %25 to i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)**
  store i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)* %21, i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)** %26, align 8
  %27 = getelementptr inbounds i8, i8* %2, i64 24
  %28 = bitcast i8* %27 to <2 x i64 (i8*, i64, i8*)*>*
  store <2 x i64 (i8*, i64, i8*)*> <i64 (i8*, i64, i8*)* @opj_stream_default_read, i64 (i8*, i64, i8*)* @opj_stream_default_write>, <2 x i64 (i8*, i64, i8*)*>* %28, align 8
  %29 = getelementptr inbounds i8, i8* %2, i64 40
  %30 = bitcast i8* %29 to i64 (i64, i8*)**
  store i64 (i64, i8*)* @opj_stream_default_skip, i64 (i64, i8*)** %30, align 8
  %31 = getelementptr inbounds i8, i8* %2, i64 48
  %32 = bitcast i8* %31 to i32 (i64, i8*)**
  store i32 (i64, i8*)* @opj_stream_default_seek, i32 (i64, i8*)** %32, align 8
  %33 = bitcast i8* %2 to i8**
  br label %34

34:                                               ; preds = %1, %11, %12
  %35 = phi i8** [ %33, %12 ], [ null, %11 ], [ null, %1 ]
  ret i8** %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_stream_destroy(i8**) local_unnamed_addr #0 {
  %2 = icmp eq i8** %0, null
  br i1 %2, label %14, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds i8*, i8** %0, i64 1
  %5 = bitcast i8** %4 to void (i8*)**
  %6 = load void (i8*)*, void (i8*)** %5, align 8
  %7 = icmp eq void (i8*)* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = load i8*, i8** %0, align 8
  tail call void %6(i8* %9) #7
  br label %10

10:                                               ; preds = %3, %8
  %11 = getelementptr inbounds i8*, i8** %0, i64 7
  %12 = load i8*, i8** %11, align 8
  tail call void @opj_free(i8* %12) #7
  store i8* null, i8** %11, align 8
  %13 = bitcast i8** %0 to i8*
  tail call void @opj_free(i8* nonnull %13) #7
  br label %14

14:                                               ; preds = %1, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_stream_set_read_function(i8**, i64 (i8*, i64, i8*)*) local_unnamed_addr #2 {
  %3 = icmp eq i8** %0, null
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8*, i8** %0, i64 14
  %6 = bitcast i8** %5 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds i8*, i8** %0, i64 3
  %12 = bitcast i8** %11 to i64 (i8*, i64, i8*)**
  store i64 (i8*, i64, i8*)* %1, i64 (i8*, i64, i8*)** %12, align 8
  br label %13

13:                                               ; preds = %2, %4, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @opj_stream_set_seek_function(i8**, i32 (i64, i8*)*) local_unnamed_addr #3 {
  %3 = icmp eq i8** %0, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8*, i8** %0, i64 6
  %6 = bitcast i8** %5 to i32 (i64, i8*)**
  store i32 (i64, i8*)* %1, i32 (i64, i8*)** %6, align 8
  br label %7

7:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_stream_set_write_function(i8**, i64 (i8*, i64, i8*)*) local_unnamed_addr #2 {
  %3 = icmp eq i8** %0, null
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8*, i8** %0, i64 14
  %6 = bitcast i8** %5 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds i8*, i8** %0, i64 4
  %12 = bitcast i8** %11 to i64 (i8*, i64, i8*)**
  store i64 (i8*, i64, i8*)* %1, i64 (i8*, i64, i8*)** %12, align 8
  br label %13

13:                                               ; preds = %2, %4, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @opj_stream_set_skip_function(i8**, i64 (i64, i8*)*) local_unnamed_addr #3 {
  %3 = icmp eq i8** %0, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8*, i8** %0, i64 5
  %6 = bitcast i8** %5 to i64 (i64, i8*)**
  store i64 (i64, i8*)* %1, i64 (i64, i8*)** %6, align 8
  br label %7

7:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @opj_stream_set_user_data(i8**, i8*, void (i8*)*) local_unnamed_addr #3 {
  %4 = icmp eq i8** %0, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  store i8* %1, i8** %0, align 8
  %6 = getelementptr inbounds i8*, i8** %0, i64 1
  %7 = bitcast i8** %6 to void (i8*)**
  store void (i8*)* %2, void (i8*)** %7, align 8
  br label %8

8:                                                ; preds = %3, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @opj_stream_set_user_data_length(i8**, i64) local_unnamed_addr #3 {
  %3 = icmp eq i8** %0, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8*, i8** %0, i64 2
  %6 = bitcast i8** %5 to i64*
  store i64 %1, i64* %6, align 8
  br label %7

7:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @opj_stream_read_data(%struct.opj_stream_private*, i8*, i64, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 11
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, %2
  br i1 %7, label %18, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %10 = load i8*, i8** %9, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %10, i64 %2, i1 false)
  %11 = load i8*, i8** %9, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %2
  store i8* %12, i8** %9, align 8
  %13 = load i64, i64* %5, align 8
  %14 = sub i64 %13, %2
  store i64 %14, i64* %5, align 8
  %15 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %16, %2
  store i64 %17, i64* %15, align 8
  br label %128

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 14
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %34, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %25 = load i8*, i8** %24, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %25, i64 %6, i1 false)
  %26 = load i64, i64* %5, align 8
  %27 = load i8*, i8** %24, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 %26
  store i8* %28, i8** %24, align 8
  %29 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  %30 = load i64, i64* %29, align 8
  %31 = add nsw i64 %30, %26
  store i64 %31, i64* %29, align 8
  store i64 0, i64* %5, align 8
  %32 = icmp eq i64 %6, 0
  %33 = select i1 %32, i64 -1, i64 %6
  br label %128

34:                                               ; preds = %18
  %35 = icmp eq i64 %6, 0
  br i1 %35, label %49, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %38 = load i8*, i8** %37, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %38, i64 %6, i1 false)
  %39 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 7
  %40 = bitcast i8** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast i8** %37 to i64*
  store i64 %41, i64* %42, align 8
  %43 = load i64, i64* %5, align 8
  %44 = getelementptr inbounds i8, i8* %1, i64 %43
  %45 = sub i64 %2, %43
  %46 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  %47 = load i64, i64* %46, align 8
  %48 = add nsw i64 %47, %43
  store i64 %48, i64* %46, align 8
  store i64 0, i64* %5, align 8
  br label %55

49:                                               ; preds = %34
  %50 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 7
  %51 = bitcast i8** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %54 = bitcast i8** %53 to i64*
  store i64 %52, i64* %54, align 8
  br label %55

55:                                               ; preds = %49, %36
  %56 = phi i64* [ %54, %49 ], [ %42, %36 ]
  %57 = phi i64* [ %51, %49 ], [ %40, %36 ]
  %58 = phi i64 [ %52, %49 ], [ %41, %36 ]
  %59 = phi i8* [ %1, %49 ], [ %44, %36 ]
  %60 = phi i64 [ %2, %49 ], [ %45, %36 ]
  %61 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 13
  %62 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 3
  %63 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 0
  %64 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %65 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  br label %66

66:                                               ; preds = %120, %55
  %67 = phi i64 [ %58, %55 ], [ %122, %120 ]
  %68 = phi i8* [ %59, %55 ], [ %127, %120 ]
  %69 = phi i64 [ %60, %55 ], [ %126, %120 ]
  %70 = phi i64 [ %6, %55 ], [ %123, %120 ]
  %71 = load i64, i64* %61, align 8
  %72 = icmp ult i64 %69, %71
  %73 = load i64 (i8*, i64, i8*)*, i64 (i8*, i64, i8*)** %62, align 8
  br i1 %72, label %74, label %101

74:                                               ; preds = %66
  %75 = inttoptr i64 %67 to i8*
  %76 = load i8*, i8** %63, align 8
  %77 = tail call i64 %73(i8* %75, i64 %71, i8* %76) #7
  store i64 %77, i64* %5, align 8
  %78 = icmp eq i64 %77, -1
  br i1 %78, label %79, label %85

79:                                               ; preds = %74
  %80 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
  store i64 0, i64* %5, align 8
  %81 = load i32, i32* %19, align 8
  %82 = or i32 %81, 4
  store i32 %82, i32* %19, align 8
  %83 = icmp eq i64 %70, 0
  %84 = select i1 %83, i64 -1, i64 %70
  br label %128

85:                                               ; preds = %74
  %86 = icmp ult i64 %77, %69
  br i1 %86, label %87, label %92

87:                                               ; preds = %85
  %88 = add i64 %77, %70
  %89 = load i8*, i8** %64, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %89, i64 %77, i1 false)
  %90 = load i64, i64* %57, align 8
  store i64 %90, i64* %56, align 8
  %91 = load i64, i64* %5, align 8
  br label %120

92:                                               ; preds = %85
  %93 = add i64 %70, %69
  %94 = load i8*, i8** %64, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %94, i64 %69, i1 false)
  %95 = load i8*, i8** %64, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 %69
  store i8* %96, i8** %64, align 8
  %97 = load i64, i64* %5, align 8
  %98 = sub i64 %97, %69
  store i64 %98, i64* %5, align 8
  %99 = load i64, i64* %65, align 8
  %100 = add nsw i64 %99, %69
  store i64 %100, i64* %65, align 8
  br label %128

101:                                              ; preds = %66
  %102 = load i8*, i8** %63, align 8
  %103 = tail call i64 %73(i8* %68, i64 %69, i8* %102) #7
  store i64 %103, i64* %5, align 8
  %104 = icmp eq i64 %103, -1
  br i1 %104, label %105, label %111

105:                                              ; preds = %101
  %106 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
  store i64 0, i64* %5, align 8
  %107 = load i32, i32* %19, align 8
  %108 = or i32 %107, 4
  store i32 %108, i32* %19, align 8
  %109 = icmp eq i64 %70, 0
  %110 = select i1 %109, i64 -1, i64 %70
  br label %128

111:                                              ; preds = %101
  %112 = icmp ult i64 %103, %69
  %113 = add i64 %103, %70
  br i1 %112, label %114, label %116

114:                                              ; preds = %111
  %115 = load i64, i64* %57, align 8
  store i64 %115, i64* %56, align 8
  br label %120

116:                                              ; preds = %111
  %117 = load i64, i64* %65, align 8
  %118 = add nsw i64 %117, %103
  store i64 %118, i64* %65, align 8
  %119 = load i64, i64* %57, align 8
  store i64 %119, i64* %56, align 8
  store i64 0, i64* %5, align 8
  br label %128

120:                                              ; preds = %114, %87
  %121 = phi i64 [ %103, %114 ], [ %91, %87 ]
  %122 = phi i64 [ %115, %114 ], [ %90, %87 ]
  %123 = phi i64 [ %113, %114 ], [ %88, %87 ]
  %124 = load i64, i64* %65, align 8
  %125 = add nsw i64 %124, %121
  store i64 %125, i64* %65, align 8
  %126 = sub i64 %69, %121
  %127 = getelementptr inbounds i8, i8* %68, i64 %121
  store i64 0, i64* %5, align 8
  br label %66

128:                                              ; preds = %116, %105, %92, %79, %23, %8
  %129 = phi i64 [ %2, %8 ], [ %33, %23 ], [ %84, %79 ], [ %93, %92 ], [ %110, %105 ], [ %113, %116 ]
  ret i64 %129
}

declare i32 @opj_event_msg(%struct.opj_event_mgr*, i32, i8*, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @opj_stream_write_data(%struct.opj_stream_private* nocapture, i8* nocapture readonly, i64, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 14
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %98

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 13
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 11
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = icmp ult i64 %14, %2
  %16 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  br i1 %15, label %19, label %17

17:                                               ; preds = %9
  %18 = load i8*, i8** %16, align 8
  br label %29

19:                                               ; preds = %9
  %20 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 7
  %21 = bitcast i8** %20 to i64*
  %22 = bitcast i8** %16 to i64*
  %23 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 4
  %24 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 0
  %25 = bitcast i64* %12 to <2 x i64>*
  %26 = bitcast i64* %12 to <2 x i64>*
  br label %44

27:                                               ; preds = %92
  %28 = inttoptr i64 %94 to i8*
  br label %29

29:                                               ; preds = %17, %27
  %30 = phi i8* [ %18, %17 ], [ %28, %27 ]
  %31 = phi i8* [ %1, %17 ], [ %67, %27 ]
  %32 = phi i64 [ %2, %17 ], [ %68, %27 ]
  %33 = phi i64 [ 0, %17 ], [ %69, %27 ]
  %34 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false)
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 %32
  store i8* %36, i8** %34, align 8
  %37 = add i64 %33, %32
  %38 = bitcast i64* %12 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 8
  %40 = insertelement <2 x i64> undef, i64 %32, i32 0
  %41 = shufflevector <2 x i64> %40, <2 x i64> undef, <2 x i32> zeroinitializer
  %42 = add <2 x i64> %39, %41
  %43 = bitcast i64* %12 to <2 x i64>*
  store <2 x i64> %42, <2 x i64>* %43, align 8
  br label %98

44:                                               ; preds = %19, %92
  %45 = phi i64 [ %13, %19 ], [ %93, %92 ]
  %46 = phi i64 [ %14, %19 ], [ %96, %92 ]
  %47 = phi i64 [ 0, %19 ], [ %69, %92 ]
  %48 = phi i64 [ %2, %19 ], [ %68, %92 ]
  %49 = phi i8* [ %1, %19 ], [ %67, %92 ]
  %50 = icmp eq i64 %46, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %44
  %52 = load i64, i64* %21, align 8
  br label %64

53:                                               ; preds = %44
  %54 = add i64 %46, %47
  %55 = load i8*, i8** %16, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %49, i64 %46, i1 false)
  %56 = load i64, i64* %21, align 8
  store i64 %56, i64* %22, align 8
  %57 = getelementptr inbounds i8, i8* %49, i64 %46
  %58 = sub i64 %48, %46
  %59 = load <2 x i64>, <2 x i64>* %25, align 8
  %60 = insertelement <2 x i64> undef, i64 %46, i32 0
  %61 = shufflevector <2 x i64> %60, <2 x i64> undef, <2 x i32> zeroinitializer
  %62 = add <2 x i64> %59, %61
  store <2 x i64> %62, <2 x i64>* %26, align 8
  %63 = extractelement <2 x i64> %62, i32 0
  br label %64

64:                                               ; preds = %51, %53
  %65 = phi i64 [ %63, %53 ], [ %45, %51 ]
  %66 = phi i64 [ %56, %53 ], [ %52, %51 ]
  %67 = phi i8* [ %57, %53 ], [ %49, %51 ]
  %68 = phi i64 [ %58, %53 ], [ %48, %51 ]
  %69 = phi i64 [ %54, %53 ], [ %47, %51 ]
  store i64 %66, i64* %22, align 8
  %70 = icmp eq i64 %65, 0
  br i1 %70, label %92, label %71

71:                                               ; preds = %64
  %72 = inttoptr i64 %66 to i8*
  br label %73

73:                                               ; preds = %84, %71
  %74 = phi i8* [ %72, %71 ], [ %86, %84 ]
  %75 = phi i64 [ %65, %71 ], [ %88, %84 ]
  %76 = load i64 (i8*, i64, i8*)*, i64 (i8*, i64, i8*)** %23, align 8
  %77 = load i8*, i8** %24, align 8
  %78 = tail call i64 %76(i8* %74, i64 %75, i8* %77) #7
  %79 = icmp eq i64 %78, -1
  br i1 %79, label %80, label %84

80:                                               ; preds = %73
  %81 = load i32, i32* %5, align 8
  %82 = or i32 %81, 8
  store i32 %82, i32* %5, align 8
  %83 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %98

84:                                               ; preds = %73
  %85 = load i8*, i8** %16, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 %78
  store i8* %86, i8** %16, align 8
  %87 = load i64, i64* %12, align 8
  %88 = sub i64 %87, %78
  store i64 %88, i64* %12, align 8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %73

90:                                               ; preds = %84
  %91 = load i64, i64* %21, align 8
  br label %92

92:                                               ; preds = %64, %90
  %93 = phi i64 [ 0, %90 ], [ %65, %64 ]
  %94 = phi i64 [ %91, %90 ], [ %66, %64 ]
  store i64 %94, i64* %22, align 8
  %95 = load i64, i64* %10, align 8
  %96 = sub i64 %95, %93
  %97 = icmp ugt i64 %68, %96
  br i1 %97, label %44, label %27

98:                                               ; preds = %80, %4, %29
  %99 = phi i64 [ %37, %29 ], [ -1, %4 ], [ -1, %80 ]
  ret i64 %99
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_stream_flush(%struct.opj_stream_private* nocapture, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 7
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 8
  %7 = bitcast i8** %6 to i64*
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 11
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %35, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %5 to i8*
  %13 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 4
  %14 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 0
  br label %15

15:                                               ; preds = %11, %27
  %16 = phi i8* [ %12, %11 ], [ %29, %27 ]
  %17 = phi i64 [ %9, %11 ], [ %31, %27 ]
  %18 = load i64 (i8*, i64, i8*)*, i64 (i8*, i64, i8*)** %13, align 8
  %19 = load i8*, i8** %14, align 8
  %20 = tail call i64 %18(i8* %16, i64 %17, i8* %19) #7
  %21 = icmp eq i64 %20, -1
  br i1 %21, label %22, label %27

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 14
  %24 = load i32, i32* %23, align 8
  %25 = or i32 %24, 8
  store i32 %25, i32* %23, align 8
  %26 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %1, i32 4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %37

27:                                               ; preds = %15
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 %20
  store i8* %29, i8** %6, align 8
  %30 = load i64, i64* %8, align 8
  %31 = sub i64 %30, %20
  store i64 %31, i64* %8, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %15

33:                                               ; preds = %27
  %34 = load i64, i64* %4, align 8
  br label %35

35:                                               ; preds = %33, %2
  %36 = phi i64 [ %34, %33 ], [ %5, %2 ]
  store i64 %36, i64* %7, align 8
  br label %37

37:                                               ; preds = %35, %22
  %38 = phi i32 [ 0, %22 ], [ 1, %35 ]
  ret i32 %38
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @opj_stream_tell(%struct.opj_stream_private* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 12
  %7 = load i64, i64* %6, align 8
  %8 = sub nsw i64 %3, %7
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i64 [ %8, %5 ], [ 0, %1 ]
  ret i64 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @opj_stream_skip(%struct.opj_stream_private*, i64, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 9
  %5 = load i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)*, i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)** %4, align 8
  %6 = tail call i64 %5(%struct.opj_stream_private* %0, i64 %1, %struct.opj_event_mgr* %2) #7
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_stream_seek(%struct.opj_stream_private*, i64, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 10
  %5 = load i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)*, i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)** %4, align 8
  %6 = tail call i32 %5(%struct.opj_stream_private* %0, i64 %1, %struct.opj_event_mgr* %2) #7
  ret i32 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @opj_stream_has_seek(%struct.opj_stream_private* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.opj_stream_private, %struct.opj_stream_private* %0, i64 0, i32 6
  %3 = load i32 (i64, i8*)*, i32 (i64, i8*)** %2, align 8
  %4 = icmp ne i32 (i64, i8*)* %3, @opj_stream_default_seek
  %5 = zext i1 %4 to i32
  ret i32 %5
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
