; ModuleID = '../../net/ssl/ssl_config.cc'
source_filename = "../../net/ssl/ssl_config.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.net::SSLConfig::CertAndStatus" = type <{ %class.scoped_refptr, i32, [4 x i8] }>
%class.scoped_refptr = type { %"class.net::X509Certificate"* }
%"class.net::X509Certificate" = type { %"class.base::RefCountedThreadSafe", %"struct.net::CertPrincipal", %"struct.net::CertPrincipal", %"class.base::Time", %"class.base::Time", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr", %"class.std::__1::vector.10" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.net::CertPrincipal" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::basic_string"* }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::unique_ptr"* }
%"struct.net::SSLConfig" = type <{ %"class.absl::optional", %"class.absl::optional", i8, i8, i8, [5 x i8], %"class.std::__1::vector.18", i8, i8, [6 x i8], %"class.std::__1::vector.25", i8, [7 x i8], %"class.std::__1::vector.25", %"class.base::flat_map", %"class.net::NetworkIsolationKey", i32, i8, [3 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.17 }
%union.anon.17 = type { i16 }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %"struct.net::SSLConfig::CertAndStatus"*, %"struct.net::SSLConfig::CertAndStatus"*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.net::SSLConfig::CertAndStatus"* }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { i32*, i32*, %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i32* }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.34" }
%"struct.std::__1::pair" = type { i32, %"class.std::__1::vector.49" }
%"class.std::__1::vector.49" = type { %"class.std::__1::__vector_base.50" }
%"class.std::__1::__vector_base.50" = type { i8*, i8*, %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { i8* }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.std::__1::pair"* }
%"class.net::NetworkIsolationKey" = type { i8, %"class.absl::optional.39", %"class.absl::optional.39" }
%"class.absl::optional.39" = type { %"class.absl::optional_internal::optional_data.40" }
%"class.absl::optional_internal::optional_data.40" = type { %"class.absl::optional_internal::optional_data_base.41" }
%"class.absl::optional_internal::optional_data_base.41" = type { %"class.absl::optional_internal::optional_data_dtor_base.42" }
%"class.absl::optional_internal::optional_data_dtor_base.42" = type { i8, %union.anon.43 }
%union.anon.43 = type { %"class.net::SchemefulSite" }
%"class.net::SchemefulSite" = type { %"class.url::Origin" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.44" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.44" = type { %"class.absl::optional_internal::optional_data.45" }
%"class.absl::optional_internal::optional_data.45" = type { %"class.absl::optional_internal::optional_data_base.46" }
%"class.absl::optional_internal::optional_data_base.46" = type { %"class.absl::optional_internal::optional_data_dtor_base.47" }
%"class.absl::optional_internal::optional_data_dtor_base.47" = type { i8, %union.anon.48 }
%union.anon.48 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorINS_4pairIN3net9NextProtoENS0_IhNS_9allocatorIhEEEEEENS4_IS7_EEEC2ERKS9_ = comdat any

@_ZN3net21kDefaultSSLVersionMinE = hidden local_unnamed_addr constant i16 769, align 2
@_ZN3net25kDefaultSSLVersionMinWarnE = hidden local_unnamed_addr constant i16 771, align 2
@_ZN3net21kDefaultSSLVersionMaxE = hidden local_unnamed_addr constant i16 772, align 2

@_ZN3net9SSLConfig13CertAndStatusC1Ev = hidden unnamed_addr alias void (%"struct.net::SSLConfig::CertAndStatus"*), void (%"struct.net::SSLConfig::CertAndStatus"*)* @_ZN3net9SSLConfig13CertAndStatusC2Ev
@_ZN3net9SSLConfig13CertAndStatusC1E13scoped_refptrINS_15X509CertificateEEj = hidden unnamed_addr alias void (%"struct.net::SSLConfig::CertAndStatus"*, %"class.net::X509Certificate"*, i32), void (%"struct.net::SSLConfig::CertAndStatus"*, %"class.net::X509Certificate"*, i32)* @_ZN3net9SSLConfig13CertAndStatusC2E13scoped_refptrINS_15X509CertificateEEj
@_ZN3net9SSLConfig13CertAndStatusC1ERKS1_ = hidden unnamed_addr alias void (%"struct.net::SSLConfig::CertAndStatus"*, %"struct.net::SSLConfig::CertAndStatus"*), void (%"struct.net::SSLConfig::CertAndStatus"*, %"struct.net::SSLConfig::CertAndStatus"*)* @_ZN3net9SSLConfig13CertAndStatusC2ERKS1_
@_ZN3net9SSLConfig13CertAndStatusD1Ev = hidden unnamed_addr alias void (%"struct.net::SSLConfig::CertAndStatus"*), void (%"struct.net::SSLConfig::CertAndStatus"*)* @_ZN3net9SSLConfig13CertAndStatusD2Ev
@_ZN3net9SSLConfigC1Ev = hidden unnamed_addr alias void (%"struct.net::SSLConfig"*), void (%"struct.net::SSLConfig"*)* @_ZN3net9SSLConfigC2Ev
@_ZN3net9SSLConfigC1ERKS0_ = hidden unnamed_addr alias void (%"struct.net::SSLConfig"*, %"struct.net::SSLConfig"*), void (%"struct.net::SSLConfig"*, %"struct.net::SSLConfig"*)* @_ZN3net9SSLConfigC2ERKS0_
@_ZN3net9SSLConfigD1Ev = hidden unnamed_addr alias void (%"struct.net::SSLConfig"*), void (%"struct.net::SSLConfig"*)* @_ZN3net9SSLConfigD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net9SSLConfig13CertAndStatusC2Ev(%"struct.net::SSLConfig::CertAndStatus"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %0, i64 0, i32 0, i32 0
  store %"class.net::X509Certificate"* null, %"class.net::X509Certificate"** %2, align 8
  %3 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %0, i64 0, i32 1
  store i32 0, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9SSLConfig13CertAndStatusC2E13scoped_refptrINS_15X509CertificateEEj(%"struct.net::SSLConfig::CertAndStatus"* nocapture, %"class.net::X509Certificate"*, i32) unnamed_addr #1 align 2 {
  %4 = ptrtoint %"class.net::X509Certificate"* %1 to i64
  %5 = bitcast %"struct.net::SSLConfig::CertAndStatus"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %0, i64 0, i32 1
  store i32 %2, i32* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net9SSLConfig13CertAndStatusC2ERKS1_(%"struct.net::SSLConfig::CertAndStatus"* nocapture, %"struct.net::SSLConfig::CertAndStatus"* nocapture readonly dereferenceable(16)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %3, align 8
  %5 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %0, i64 0, i32 0, i32 0
  store %"class.net::X509Certificate"* %4, %"class.net::X509Certificate"** %5, align 8
  %6 = icmp eq %"class.net::X509Certificate"* %4, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  %11 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  store i32 %13, i32* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9SSLConfig13CertAndStatusD2Ev(%"struct.net::SSLConfig::CertAndStatus"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %2, align 8
  %4 = icmp eq %"class.net::X509Certificate"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i32* %6, i32 1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  tail call void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"* nonnull %3) #10
  %10 = bitcast %"class.net::X509Certificate"* %3 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %1, %5, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9SSLConfigC2Ev(%"struct.net::SSLConfig"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %2, align 2
  %3 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %3, align 2
  %4 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 2
  store i8 0, i8* %4, align 8
  %5 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 3
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 4
  store i8 0, i8* %6, align 2
  %7 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 6
  %8 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 10
  %9 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 13
  %10 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 15
  %11 = bitcast %"class.std::__1::vector.18"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 26, i1 false)
  %12 = bitcast %"class.std::__1::vector.25"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 25, i1 false)
  %13 = bitcast %"class.std::__1::vector.25"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 48, i1 false)
  tail call void @_ZN3net19NetworkIsolationKeyC1Ev(%"class.net::NetworkIsolationKey"* %10) #10
  %14 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 16
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 17
  store i8 0, i8* %15, align 4
  ret void
}

declare void @_ZN3net19NetworkIsolationKeyC1Ev(%"class.net::NetworkIsolationKey"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9SSLConfigC2ERKS0_(%"struct.net::SSLConfig"*, %"struct.net::SSLConfig"* dereferenceable(320)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 11, i1 false)
  %5 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 6
  %6 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 6
  %7 = bitcast %"class.std::__1::vector.18"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #10
  %8 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 6, i32 0, i32 1
  %9 = bitcast %"struct.net::SSLConfig::CertAndStatus"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.18"* %6 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 4
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %85, label %16

16:                                               ; preds = %2
  %17 = icmp ugt i64 %14, 1152921504606846975
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = bitcast %"class.std::__1::vector.18"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %19) #12
  unreachable

20:                                               ; preds = %16
  %21 = tail call i8* @_Znwm(i64 %13) #11
  %22 = bitcast i8* %21 to %"struct.net::SSLConfig::CertAndStatus"*
  %23 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 6, i32 0, i32 1
  %24 = bitcast %"struct.net::SSLConfig::CertAndStatus"** %23 to i8**
  store i8* %21, i8** %24, align 8
  %25 = bitcast %"class.std::__1::vector.18"* %5 to i8**
  store i8* %21, i8** %25, align 8
  %26 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %22, i64 %14
  %27 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  store %"struct.net::SSLConfig::CertAndStatus"* %26, %"struct.net::SSLConfig::CertAndStatus"** %27, align 8
  %28 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %6, i64 0, i32 0, i32 0
  %29 = load %"struct.net::SSLConfig::CertAndStatus"*, %"struct.net::SSLConfig::CertAndStatus"** %28, align 8
  %30 = load %"struct.net::SSLConfig::CertAndStatus"*, %"struct.net::SSLConfig::CertAndStatus"** %8, align 8
  %31 = bitcast %"struct.net::SSLConfig::CertAndStatus"** %23 to i64*
  %32 = ptrtoint i8* %21 to i64
  %33 = icmp eq %"struct.net::SSLConfig::CertAndStatus"* %29, %30
  br i1 %33, label %83, label %34

34:                                               ; preds = %20
  %35 = ptrtoint %"struct.net::SSLConfig::CertAndStatus"* %29 to i64
  %36 = getelementptr %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %30, i64 -1, i32 0, i32 0
  %37 = ptrtoint %"class.net::X509Certificate"** %36 to i64
  %38 = sub i64 %37, %35
  %39 = and i64 %38, 16
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %57

41:                                               ; preds = %34
  %42 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %29, i64 0, i32 0, i32 0
  %43 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %42, align 8
  %44 = bitcast i8* %21 to %"class.net::X509Certificate"**
  store %"class.net::X509Certificate"* %43, %"class.net::X509Certificate"** %44, align 8
  %45 = icmp eq %"class.net::X509Certificate"* %43, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = atomicrmw add i32* %47, i32 1 monotonic
  br label %49

49:                                               ; preds = %46, %41
  %50 = getelementptr inbounds i8, i8* %21, i64 8
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %29, i64 0, i32 1
  %53 = load i32, i32* %52, align 8
  store i32 %53, i32* %51, align 8
  %54 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %29, i64 1
  %55 = getelementptr inbounds i8, i8* %21, i64 16
  %56 = bitcast i8* %55 to %"struct.net::SSLConfig::CertAndStatus"*
  br label %57

57:                                               ; preds = %49, %34
  %58 = phi %"struct.net::SSLConfig::CertAndStatus"* [ undef, %34 ], [ %56, %49 ]
  %59 = phi %"struct.net::SSLConfig::CertAndStatus"* [ %22, %34 ], [ %56, %49 ]
  %60 = phi %"struct.net::SSLConfig::CertAndStatus"* [ %29, %34 ], [ %54, %49 ]
  %61 = icmp ult i64 %38, 16
  br i1 %61, label %80, label %62

62:                                               ; preds = %57, %183
  %63 = phi %"struct.net::SSLConfig::CertAndStatus"* [ %188, %183 ], [ %59, %57 ]
  %64 = phi %"struct.net::SSLConfig::CertAndStatus"* [ %187, %183 ], [ %60, %57 ]
  %65 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %64, i64 0, i32 0, i32 0
  %66 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %65, align 8
  %67 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %63, i64 0, i32 0, i32 0
  store %"class.net::X509Certificate"* %66, %"class.net::X509Certificate"** %67, align 8
  %68 = icmp eq %"class.net::X509Certificate"* %66, null
  br i1 %68, label %72, label %69

69:                                               ; preds = %62
  %70 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %66, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = atomicrmw add i32* %70, i32 1 monotonic
  br label %72

72:                                               ; preds = %69, %62
  %73 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %63, i64 0, i32 1
  %74 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %64, i64 0, i32 1
  %75 = load i32, i32* %74, align 8
  store i32 %75, i32* %73, align 8
  %76 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %64, i64 1, i32 0, i32 0
  %77 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %76, align 8
  %78 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %63, i64 1, i32 0, i32 0
  store %"class.net::X509Certificate"* %77, %"class.net::X509Certificate"** %78, align 8
  %79 = icmp eq %"class.net::X509Certificate"* %77, null
  br i1 %79, label %183, label %180

80:                                               ; preds = %183, %57
  %81 = phi %"struct.net::SSLConfig::CertAndStatus"* [ %58, %57 ], [ %188, %183 ]
  %82 = ptrtoint %"struct.net::SSLConfig::CertAndStatus"* %81 to i64
  br label %83

83:                                               ; preds = %80, %20
  %84 = phi i64 [ %32, %20 ], [ %82, %80 ]
  store i64 %84, i64* %31, align 8
  br label %85

85:                                               ; preds = %2, %83
  %86 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 7
  %87 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 7
  %88 = bitcast i8* %87 to i16*
  %89 = bitcast i8* %86 to i16*
  %90 = load i16, i16* %88, align 8
  store i16 %90, i16* %89, align 8
  %91 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 10
  %92 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 10
  %93 = bitcast %"class.std::__1::vector.25"* %91 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %93, i8 0, i64 24, i1 false) #10
  %94 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 10, i32 0, i32 1
  %95 = bitcast i32** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = bitcast %"class.std::__1::vector.25"* %92 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = sub i64 %96, %98
  %100 = ashr exact i64 %99, 2
  %101 = icmp eq i64 %99, 0
  br i1 %101, label %129, label %102

102:                                              ; preds = %85
  %103 = icmp ugt i64 %100, 4611686018427387903
  br i1 %103, label %104, label %106

104:                                              ; preds = %102
  %105 = bitcast %"class.std::__1::vector.25"* %91 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %105) #12
  unreachable

106:                                              ; preds = %102
  %107 = tail call i8* @_Znwm(i64 %99) #11
  %108 = bitcast i8* %107 to i32*
  %109 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 10, i32 0, i32 1
  %110 = bitcast i32** %109 to i8**
  store i8* %107, i8** %110, align 8
  %111 = bitcast %"class.std::__1::vector.25"* %91 to i8**
  store i8* %107, i8** %111, align 8
  %112 = getelementptr inbounds i32, i32* %108, i64 %100
  %113 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 10, i32 0, i32 2, i32 0, i32 0
  store i32* %112, i32** %113, align 8
  %114 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %92, i64 0, i32 0, i32 0
  %115 = load i32*, i32** %114, align 8
  %116 = load i64, i64* %95, align 8
  %117 = bitcast i32** %109 to i64*
  %118 = ptrtoint i8* %107 to i64
  %119 = ptrtoint i32* %115 to i64
  %120 = sub i64 %116, %119
  %121 = icmp sgt i64 %120, 0
  br i1 %121, label %122, label %127

122:                                              ; preds = %106
  %123 = lshr exact i64 %120, 2
  %124 = bitcast i32* %115 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %107, i8* align 4 %124, i64 %120, i1 false) #10
  %125 = getelementptr inbounds i32, i32* %108, i64 %123
  %126 = ptrtoint i32* %125 to i64
  br label %127

127:                                              ; preds = %122, %106
  %128 = phi i64 [ %126, %122 ], [ %118, %106 ]
  store i64 %128, i64* %117, align 8
  br label %129

129:                                              ; preds = %85, %127
  %130 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 11
  %131 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 11
  %132 = load i8, i8* %131, align 8, !range !2
  store i8 %132, i8* %130, align 8
  %133 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 13
  %134 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 13
  %135 = bitcast %"class.std::__1::vector.25"* %133 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %135, i8 0, i64 24, i1 false) #10
  %136 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 13, i32 0, i32 1
  %137 = bitcast i32** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"class.std::__1::vector.25"* %134 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = sub i64 %138, %140
  %142 = ashr exact i64 %141, 2
  %143 = icmp eq i64 %141, 0
  br i1 %143, label %171, label %144

144:                                              ; preds = %129
  %145 = icmp ugt i64 %142, 4611686018427387903
  br i1 %145, label %146, label %148

146:                                              ; preds = %144
  %147 = bitcast %"class.std::__1::vector.25"* %133 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %147) #12
  unreachable

148:                                              ; preds = %144
  %149 = tail call i8* @_Znwm(i64 %141) #11
  %150 = bitcast i8* %149 to i32*
  %151 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 13, i32 0, i32 1
  %152 = bitcast i32** %151 to i8**
  store i8* %149, i8** %152, align 8
  %153 = bitcast %"class.std::__1::vector.25"* %133 to i8**
  store i8* %149, i8** %153, align 8
  %154 = getelementptr inbounds i32, i32* %150, i64 %142
  %155 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 13, i32 0, i32 2, i32 0, i32 0
  store i32* %154, i32** %155, align 8
  %156 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %134, i64 0, i32 0, i32 0
  %157 = load i32*, i32** %156, align 8
  %158 = load i64, i64* %137, align 8
  %159 = bitcast i32** %151 to i64*
  %160 = ptrtoint i8* %149 to i64
  %161 = ptrtoint i32* %157 to i64
  %162 = sub i64 %158, %161
  %163 = icmp sgt i64 %162, 0
  br i1 %163, label %164, label %169

164:                                              ; preds = %148
  %165 = lshr exact i64 %162, 2
  %166 = bitcast i32* %157 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %149, i8* align 4 %166, i64 %162, i1 false) #10
  %167 = getelementptr inbounds i32, i32* %150, i64 %165
  %168 = ptrtoint i32* %167 to i64
  br label %169

169:                                              ; preds = %164, %148
  %170 = phi i64 [ %168, %164 ], [ %160, %148 ]
  store i64 %170, i64* %159, align 8
  br label %171

171:                                              ; preds = %129, %169
  %172 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 14, i32 0, i32 0
  %173 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 14, i32 0, i32 0
  tail call void @_ZNSt3__16vectorINS_4pairIN3net9NextProtoENS0_IhNS_9allocatorIhEEEEEENS4_IS7_EEEC2ERKS9_(%"class.std::__1::vector.32"* %172, %"class.std::__1::vector.32"* dereferenceable(24) %173) #10
  %174 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 15
  %175 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 15
  tail call void @_ZN3net19NetworkIsolationKeyC1ERKS0_(%"class.net::NetworkIsolationKey"* %174, %"class.net::NetworkIsolationKey"* dereferenceable(184) %175) #10
  %176 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 16
  %177 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %1, i64 0, i32 16
  %178 = bitcast i32* %176 to i8*
  %179 = bitcast i32* %177 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %178, i8* align 8 %179, i64 5, i1 false)
  ret void

180:                                              ; preds = %72
  %181 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %77, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %182 = atomicrmw add i32* %181, i32 1 monotonic
  br label %183

183:                                              ; preds = %180, %72
  %184 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %63, i64 1, i32 1
  %185 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %64, i64 1, i32 1
  %186 = load i32, i32* %185, align 8
  store i32 %186, i32* %184, align 8
  %187 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %64, i64 2
  %188 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %63, i64 2
  %189 = icmp eq %"struct.net::SSLConfig::CertAndStatus"* %187, %30
  br i1 %189, label %80, label %62
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN3net19NetworkIsolationKeyC1ERKS0_(%"class.net::NetworkIsolationKey"*, %"class.net::NetworkIsolationKey"* dereferenceable(184)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9SSLConfigD2Ev(%"struct.net::SSLConfig"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 15
  tail call void @_ZN3net19NetworkIsolationKeyD1Ev(%"class.net::NetworkIsolationKey"* %2) #10
  %3 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 14, i32 0
  %4 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %4, align 8
  %6 = icmp eq %"struct.std::__1::pair"* %5, null
  br i1 %6, label %29, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.std::__1::pair"* %5 to i8*
  %9 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 14, i32 0, i32 0, i32 0, i32 1
  %10 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %9, align 8
  %11 = icmp eq %"struct.std::__1::pair"* %10, %5
  br i1 %11, label %27, label %12

12:                                               ; preds = %7, %22
  %13 = phi %"struct.std::__1::pair"* [ %14, %22 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %13, i64 -1
  %15 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %13, i64 -1, i32 1, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %12
  %19 = ptrtoint i8* %16 to i64
  %20 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %13, i64 -1, i32 1, i32 0, i32 1
  %21 = bitcast i8** %20 to i64*
  store i64 %19, i64* %21, align 8
  tail call void @_ZdlPv(i8* nonnull %16) #11
  br label %22

22:                                               ; preds = %18, %12
  %23 = icmp eq %"struct.std::__1::pair"* %14, %5
  br i1 %23, label %24, label %12

24:                                               ; preds = %22
  %25 = bitcast %"class.base::internal::flat_tree"* %3 to i8**
  %26 = load i8*, i8** %25, align 8
  br label %27

27:                                               ; preds = %24, %7
  %28 = phi i8* [ %26, %24 ], [ %8, %7 ]
  store %"struct.std::__1::pair"* %5, %"struct.std::__1::pair"** %9, align 8
  tail call void @_ZdlPv(i8* %28) #11
  br label %29

29:                                               ; preds = %1, %27
  %30 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 13, i32 0, i32 0
  %31 = load i32*, i32** %30, align 8
  %32 = icmp eq i32* %31, null
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = ptrtoint i32* %31 to i64
  %35 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 13, i32 0, i32 1
  %36 = bitcast i32** %35 to i64*
  store i64 %34, i64* %36, align 8
  %37 = bitcast i32* %31 to i8*
  tail call void @_ZdlPv(i8* %37) #11
  br label %38

38:                                               ; preds = %29, %33
  %39 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 10, i32 0, i32 0
  %40 = load i32*, i32** %39, align 8
  %41 = icmp eq i32* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %38
  %43 = ptrtoint i32* %40 to i64
  %44 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 10, i32 0, i32 1
  %45 = bitcast i32** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = bitcast i32* %40 to i8*
  tail call void @_ZdlPv(i8* %46) #11
  br label %47

47:                                               ; preds = %38, %42
  %48 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 6
  %49 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %48, i64 0, i32 0, i32 0
  %50 = load %"struct.net::SSLConfig::CertAndStatus"*, %"struct.net::SSLConfig::CertAndStatus"** %49, align 8
  %51 = icmp eq %"struct.net::SSLConfig::CertAndStatus"* %50, null
  br i1 %51, label %76, label %52

52:                                               ; preds = %47
  %53 = bitcast %"struct.net::SSLConfig::CertAndStatus"* %50 to i8*
  %54 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 6, i32 0, i32 1
  %55 = load %"struct.net::SSLConfig::CertAndStatus"*, %"struct.net::SSLConfig::CertAndStatus"** %54, align 8
  %56 = icmp eq %"struct.net::SSLConfig::CertAndStatus"* %55, %50
  br i1 %56, label %74, label %57

57:                                               ; preds = %52, %69
  %58 = phi %"struct.net::SSLConfig::CertAndStatus"* [ %59, %69 ], [ %55, %52 ]
  %59 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %58, i64 -1
  %60 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %59, i64 0, i32 0, i32 0
  %61 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %60, align 8
  %62 = icmp eq %"class.net::X509Certificate"* %61, null
  br i1 %62, label %69, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %61, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = atomicrmw sub i32* %64, i32 1 acq_rel
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %67, label %69

67:                                               ; preds = %63
  tail call void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"* nonnull %61) #10
  %68 = bitcast %"class.net::X509Certificate"* %61 to i8*
  tail call void @_ZdlPv(i8* %68) #11
  br label %69

69:                                               ; preds = %67, %63, %57
  %70 = icmp eq %"struct.net::SSLConfig::CertAndStatus"* %59, %50
  br i1 %70, label %71, label %57

71:                                               ; preds = %69
  %72 = bitcast %"class.std::__1::vector.18"* %48 to i8**
  %73 = load i8*, i8** %72, align 8
  br label %74

74:                                               ; preds = %71, %52
  %75 = phi i8* [ %73, %71 ], [ %53, %52 ]
  store %"struct.net::SSLConfig::CertAndStatus"* %50, %"struct.net::SSLConfig::CertAndStatus"** %54, align 8
  tail call void @_ZdlPv(i8* %75) #11
  br label %76

76:                                               ; preds = %47, %74
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net19NetworkIsolationKeyD1Ev(%"class.net::NetworkIsolationKey"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net9SSLConfig16IsAllowedBadCertEPNS_15X509CertificateEPj(%"struct.net::SSLConfig"* nocapture readonly, %"class.net::X509Certificate"*, i32*) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 6, i32 0, i32 0
  %5 = load %"struct.net::SSLConfig::CertAndStatus"*, %"struct.net::SSLConfig::CertAndStatus"** %4, align 8
  %6 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 6, i32 0, i32 1
  %7 = load %"struct.net::SSLConfig::CertAndStatus"*, %"struct.net::SSLConfig::CertAndStatus"** %6, align 8
  %8 = icmp eq %"struct.net::SSLConfig::CertAndStatus"* %5, %7
  br i1 %8, label %22, label %9

9:                                                ; preds = %3, %19
  %10 = phi %"struct.net::SSLConfig::CertAndStatus"* [ %20, %19 ], [ %5, %3 ]
  %11 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %10, i64 0, i32 0, i32 0
  %12 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %11, align 8
  %13 = tail call zeroext i1 @_ZNK3net15X509Certificate20EqualsExcludingChainEPKS0_(%"class.net::X509Certificate"* %1, %"class.net::X509Certificate"* %12) #10
  br i1 %13, label %14, label %19

14:                                               ; preds = %9
  %15 = icmp eq i32* %2, null
  br i1 %15, label %22, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %10, i64 0, i32 1
  %18 = load i32, i32* %17, align 8
  store i32 %18, i32* %2, align 4
  br label %22

19:                                               ; preds = %9
  %20 = getelementptr inbounds %"struct.net::SSLConfig::CertAndStatus", %"struct.net::SSLConfig::CertAndStatus"* %10, i64 1
  %21 = icmp eq %"struct.net::SSLConfig::CertAndStatus"* %20, %7
  br i1 %21, label %22, label %9

22:                                               ; preds = %19, %3, %16, %14
  %23 = phi i1 [ true, %14 ], [ true, %16 ], [ false, %3 ], [ false, %19 ]
  ret i1 %23
}

declare zeroext i1 @_ZNK3net15X509Certificate20EqualsExcludingChainEPKS0_(%"class.net::X509Certificate"*, %"class.net::X509Certificate"*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK3net9SSLConfig18GetCertVerifyFlagsEv(%"struct.net::SSLConfig"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"struct.net::SSLConfig", %"struct.net::SSLConfig"* %0, i64 0, i32 8
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = zext i8 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_4pairIN3net9NextProtoENS0_IhNS_9allocatorIhEEEEEENS4_IS7_EEEC2ERKS9_(%"class.std::__1::vector.32"*, %"class.std::__1::vector.32"* dereferenceable(24)) unnamed_addr #1 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.32"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #10
  %4 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"struct.std::__1::pair"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.32"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 5
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %78, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 576460752303423487
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.32"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #12
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #11
  %18 = bitcast i8* %17 to %"struct.std::__1::pair"*
  %19 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"struct.std::__1::pair"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.32"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.std::__1::pair"* %22, %"struct.std::__1::pair"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %1, i64 0, i32 0, i32 0
  %25 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %24, align 8
  %26 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %4, align 8
  %27 = bitcast %"struct.std::__1::pair"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"struct.std::__1::pair"* %25, %26
  br i1 %29, label %76, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"struct.std::__1::pair"*
  br label %32

32:                                               ; preds = %70, %30
  %33 = phi %"struct.std::__1::pair"* [ %72, %70 ], [ %31, %30 ]
  %34 = phi %"struct.std::__1::pair"* [ %71, %70 ], [ %25, %30 ]
  %35 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 0, i32 0
  %36 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %34, i64 0, i32 0
  %37 = load i32, i32* %36, align 8
  store i32 %37, i32* %35, align 8
  %38 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 0, i32 1
  %39 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %34, i64 0, i32 1
  %40 = bitcast %"class.std::__1::vector.49"* %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #10
  %41 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %34, i64 0, i32 1, i32 0, i32 1
  %42 = bitcast i8** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.std::__1::vector.49"* %39 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %43, %45
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %70, label %48

48:                                               ; preds = %32
  %49 = icmp slt i64 %46, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = bitcast %"class.std::__1::vector.49"* %38 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %51) #12
  unreachable

52:                                               ; preds = %48
  %53 = tail call i8* @_Znwm(i64 %46) #11
  %54 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 0, i32 1, i32 0, i32 1
  store i8* %53, i8** %54, align 8
  %55 = getelementptr inbounds %"class.std::__1::vector.49", %"class.std::__1::vector.49"* %38, i64 0, i32 0, i32 0
  store i8* %53, i8** %55, align 8
  %56 = getelementptr inbounds i8, i8* %53, i64 %46
  %57 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store i8* %56, i8** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.49", %"class.std::__1::vector.49"* %39, i64 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = load i64, i64* %42, align 8
  %61 = bitcast i8** %54 to i64*
  %62 = ptrtoint i8* %59 to i64
  %63 = sub i64 %60, %62
  %64 = icmp sgt i64 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %52
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %53, i8* align 1 %59, i64 %63, i1 false) #10
  %66 = getelementptr inbounds i8, i8* %53, i64 %63
  br label %67

67:                                               ; preds = %65, %52
  %68 = phi i8* [ %66, %65 ], [ %53, %52 ]
  %69 = ptrtoint i8* %68 to i64
  store i64 %69, i64* %61, align 8
  br label %70

70:                                               ; preds = %67, %32
  %71 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %34, i64 1
  %72 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 1
  %73 = icmp eq %"struct.std::__1::pair"* %71, %26
  br i1 %73, label %74, label %32

74:                                               ; preds = %70
  %75 = ptrtoint %"struct.std::__1::pair"* %72 to i64
  br label %76

76:                                               ; preds = %16, %74
  %77 = phi i64 [ %28, %16 ], [ %75, %74 ]
  store i64 %77, i64* %27, align 8
  br label %78

78:                                               ; preds = %2, %76
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind
declare void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
