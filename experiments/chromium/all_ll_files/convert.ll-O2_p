; ModuleID = '../../third_party/libyuv/source/convert.cc'
source_filename = "../../third_party/libyuv/source/convert.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@cpu_info_ = external local_unnamed_addr global i32, align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I420Copy(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = add nsw i32 %12, 1
  %16 = ashr i32 %15, 1
  %17 = icmp ne i8* %2, null
  %18 = icmp ne i8* %4, null
  %19 = and i1 %17, %18
  %20 = icmp ne i8* %8, null
  %21 = and i1 %19, %20
  %22 = icmp ne i8* %10, null
  %23 = and i1 %21, %22
  %24 = xor i1 %23, true
  %25 = icmp slt i32 %12, 1
  %26 = or i1 %25, %24
  %27 = icmp eq i32 %13, 0
  %28 = or i1 %26, %27
  br i1 %28, label %63, label %29

29:                                               ; preds = %14
  %30 = add nsw i32 %13, 1
  %31 = ashr i32 %30, 1
  %32 = icmp slt i32 %13, 0
  br i1 %32, label %33, label %51

33:                                               ; preds = %29
  %34 = sub nsw i32 0, %13
  %35 = sub i32 1, %13
  %36 = ashr i32 %35, 1
  %37 = xor i32 %13, -1
  %38 = mul nsw i32 %37, %1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %0, i64 %39
  %41 = add nsw i32 %36, -1
  %42 = mul nsw i32 %41, %3
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %2, i64 %43
  %45 = mul nsw i32 %41, %5
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %4, i64 %46
  %48 = sub nsw i32 0, %1
  %49 = sub nsw i32 0, %3
  %50 = sub nsw i32 0, %5
  br label %51

51:                                               ; preds = %33, %29
  %52 = phi i32 [ %50, %33 ], [ %5, %29 ]
  %53 = phi i8* [ %47, %33 ], [ %4, %29 ]
  %54 = phi i32 [ %49, %33 ], [ %3, %29 ]
  %55 = phi i8* [ %44, %33 ], [ %2, %29 ]
  %56 = phi i32 [ %48, %33 ], [ %1, %29 ]
  %57 = phi i8* [ %40, %33 ], [ %0, %29 ]
  %58 = phi i32 [ %34, %33 ], [ %13, %29 ]
  %59 = phi i32 [ %36, %33 ], [ %31, %29 ]
  %60 = icmp eq i8* %6, null
  br i1 %60, label %62, label %61

61:                                               ; preds = %51
  tail call void @CopyPlane(i8* %57, i32 %56, i8* nonnull %6, i32 %7, i32 %12, i32 %58) #4
  br label %62

62:                                               ; preds = %51, %61
  tail call void @CopyPlane(i8* %55, i32 %54, i8* %8, i32 %9, i32 %16, i32 %59) #4
  tail call void @CopyPlane(i8* %53, i32 %52, i8* %10, i32 %11, i32 %16, i32 %59) #4
  br label %63

63:                                               ; preds = %14, %62
  %64 = phi i32 [ 0, %62 ], [ -1, %14 ]
  ret i32 %64
}

declare void @CopyPlane(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I010Copy(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = add nsw i32 %12, 1
  %16 = ashr i32 %15, 1
  %17 = icmp ne i16* %2, null
  %18 = icmp ne i16* %4, null
  %19 = and i1 %17, %18
  %20 = icmp ne i16* %8, null
  %21 = and i1 %19, %20
  %22 = icmp ne i16* %10, null
  %23 = and i1 %21, %22
  %24 = xor i1 %23, true
  %25 = icmp slt i32 %12, 1
  %26 = or i1 %25, %24
  %27 = icmp eq i32 %13, 0
  %28 = or i1 %26, %27
  br i1 %28, label %63, label %29

29:                                               ; preds = %14
  %30 = add nsw i32 %13, 1
  %31 = ashr i32 %30, 1
  %32 = icmp slt i32 %13, 0
  br i1 %32, label %33, label %51

33:                                               ; preds = %29
  %34 = sub nsw i32 0, %13
  %35 = sub i32 1, %13
  %36 = ashr i32 %35, 1
  %37 = xor i32 %13, -1
  %38 = mul nsw i32 %37, %1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %0, i64 %39
  %41 = add nsw i32 %36, -1
  %42 = mul nsw i32 %41, %3
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i16, i16* %2, i64 %43
  %45 = mul nsw i32 %41, %5
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i16, i16* %4, i64 %46
  %48 = sub nsw i32 0, %1
  %49 = sub nsw i32 0, %3
  %50 = sub nsw i32 0, %5
  br label %51

51:                                               ; preds = %33, %29
  %52 = phi i32 [ %50, %33 ], [ %5, %29 ]
  %53 = phi i16* [ %47, %33 ], [ %4, %29 ]
  %54 = phi i32 [ %49, %33 ], [ %3, %29 ]
  %55 = phi i16* [ %44, %33 ], [ %2, %29 ]
  %56 = phi i32 [ %48, %33 ], [ %1, %29 ]
  %57 = phi i16* [ %40, %33 ], [ %0, %29 ]
  %58 = phi i32 [ %34, %33 ], [ %13, %29 ]
  %59 = phi i32 [ %36, %33 ], [ %31, %29 ]
  %60 = icmp eq i16* %6, null
  br i1 %60, label %62, label %61

61:                                               ; preds = %51
  tail call void @CopyPlane_16(i16* %57, i32 %56, i16* nonnull %6, i32 %7, i32 %12, i32 %58) #4
  br label %62

62:                                               ; preds = %51, %61
  tail call void @CopyPlane_16(i16* %55, i32 %54, i16* %8, i32 %9, i32 %16, i32 %59) #4
  tail call void @CopyPlane_16(i16* %53, i32 %52, i16* %10, i32 %11, i32 %16, i32 %59) #4
  br label %63

63:                                               ; preds = %14, %62
  %64 = phi i32 [ 0, %62 ], [ -1, %14 ]
  ret i32 %64
}

declare void @CopyPlane_16(i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I010ToI420(i16*, i32, i16*, i32, i16*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = tail call fastcc i32 @_ZN6libyuvL17Planar16bitTo8bitEPKtiS1_iS1_iPhiS2_iS2_iiiiii(i16* %0, i32 %1, i16* %2, i32 %3, i16* %4, i32 %5, i8* %6, i32 %7, i8* %8, i32 %9, i8* %10, i32 %11, i32 %12, i32 %13, i32 1, i32 1, i32 10)
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN6libyuvL17Planar16bitTo8bitEPKtiS1_iS1_iPhiS2_iS2_iiiiii(i16*, i32, i16*, i32, i16*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32, i32, i32, i32) unnamed_addr #0 {
  %18 = icmp slt i32 %12, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %17
  %20 = sub i32 %14, %12
  %21 = ashr i32 %20, %14
  %22 = sub nsw i32 0, %21
  br label %26

23:                                               ; preds = %17
  %24 = add nsw i32 %14, %12
  %25 = ashr i32 %24, %14
  br label %26

26:                                               ; preds = %23, %19
  %27 = phi i32 [ %22, %19 ], [ %25, %23 ]
  %28 = icmp slt i32 %13, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %26
  %30 = sub i32 %15, %13
  %31 = ashr i32 %30, %15
  %32 = sub nsw i32 0, %31
  br label %36

33:                                               ; preds = %26
  %34 = add nsw i32 %15, %13
  %35 = ashr i32 %34, %15
  br label %36

36:                                               ; preds = %33, %29
  %37 = phi i32 [ %32, %29 ], [ %35, %33 ]
  %38 = sub nsw i32 24, %16
  %39 = shl i32 1, %38
  %40 = icmp ne i16* %2, null
  %41 = icmp ne i16* %4, null
  %42 = and i1 %40, %41
  %43 = icmp ne i8* %8, null
  %44 = and i1 %42, %43
  %45 = icmp ne i8* %10, null
  %46 = and i1 %44, %45
  %47 = xor i1 %46, true
  %48 = icmp slt i32 %12, 1
  %49 = or i1 %48, %47
  %50 = icmp eq i32 %13, 0
  %51 = or i1 %49, %50
  br i1 %51, label %79, label %52

52:                                               ; preds = %36
  br i1 %28, label %53, label %70

53:                                               ; preds = %52
  %54 = sub nsw i32 0, %13
  %55 = sub nsw i32 0, %37
  %56 = xor i32 %13, -1
  %57 = mul nsw i32 %56, %1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %0, i64 %58
  %60 = xor i32 %37, -1
  %61 = mul nsw i32 %60, %3
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i16, i16* %2, i64 %62
  %64 = mul nsw i32 %60, %5
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %4, i64 %65
  %67 = sub nsw i32 0, %1
  %68 = sub nsw i32 0, %3
  %69 = sub nsw i32 0, %5
  br label %70

70:                                               ; preds = %53, %52
  %71 = phi i32 [ %69, %53 ], [ %5, %52 ]
  %72 = phi i16* [ %66, %53 ], [ %4, %52 ]
  %73 = phi i32 [ %68, %53 ], [ %3, %52 ]
  %74 = phi i16* [ %63, %53 ], [ %2, %52 ]
  %75 = phi i32 [ %54, %53 ], [ %13, %52 ]
  %76 = phi i32 [ %67, %53 ], [ %1, %52 ]
  %77 = phi i16* [ %59, %53 ], [ %0, %52 ]
  %78 = phi i32 [ %55, %53 ], [ %37, %52 ]
  tail call void @Convert16To8Plane(i16* %77, i32 %76, i8* %6, i32 %7, i32 %39, i32 %12, i32 %75) #4
  tail call void @Convert16To8Plane(i16* %74, i32 %73, i8* %8, i32 %9, i32 %39, i32 %27, i32 %78) #4
  tail call void @Convert16To8Plane(i16* %72, i32 %71, i8* %10, i32 %11, i32 %39, i32 %27, i32 %78) #4
  br label %79

79:                                               ; preds = %36, %70
  %80 = phi i32 [ 0, %70 ], [ -1, %36 ]
  ret i32 %80
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I210ToI422(i16*, i32, i16*, i32, i16*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = tail call fastcc i32 @_ZN6libyuvL17Planar16bitTo8bitEPKtiS1_iS1_iPhiS2_iS2_iiiiii(i16* %0, i32 %1, i16* %2, i32 %3, i16* %4, i32 %5, i8* %6, i32 %7, i8* %8, i32 %9, i8* %10, i32 %11, i32 %12, i32 %13, i32 1, i32 0, i32 10)
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I410ToI444(i16*, i32, i16*, i32, i16*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = tail call fastcc i32 @_ZN6libyuvL17Planar16bitTo8bitEPKtiS1_iS1_iPhiS2_iS2_iiiiii(i16* %0, i32 %1, i16* %2, i32 %3, i16* %4, i32 %5, i8* %6, i32 %7, i8* %8, i32 %9, i8* %10, i32 %11, i32 %12, i32 %13, i32 0, i32 0, i32 10)
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I012ToI420(i16*, i32, i16*, i32, i16*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = tail call fastcc i32 @_ZN6libyuvL17Planar16bitTo8bitEPKtiS1_iS1_iPhiS2_iS2_iiiiii(i16* %0, i32 %1, i16* %2, i32 %3, i16* %4, i32 %5, i8* %6, i32 %7, i8* %8, i32 %9, i8* %10, i32 %11, i32 %12, i32 %13, i32 1, i32 1, i32 12)
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I212ToI422(i16*, i32, i16*, i32, i16*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = tail call fastcc i32 @_ZN6libyuvL17Planar16bitTo8bitEPKtiS1_iS1_iPhiS2_iS2_iiiiii(i16* %0, i32 %1, i16* %2, i32 %3, i16* %4, i32 %5, i8* %6, i32 %7, i8* %8, i32 %9, i8* %10, i32 %11, i32 %12, i32 %13, i32 1, i32 0, i32 12)
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I412ToI444(i16*, i32, i16*, i32, i16*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = tail call fastcc i32 @_ZN6libyuvL17Planar16bitTo8bitEPKtiS1_iS1_iPhiS2_iS2_iiiiii(i16* %0, i32 %1, i16* %2, i32 %3, i16* %4, i32 %5, i8* %6, i32 %7, i8* %8, i32 %9, i8* %10, i32 %11, i32 %12, i32 %13, i32 0, i32 0, i32 12)
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I410ToI010(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = icmp slt i32 %12, 0
  %16 = sub nsw i32 0, %12
  %17 = select i1 %15, i32 %16, i32 %12
  %18 = icmp slt i32 %13, 0
  %19 = sub nsw i32 0, %13
  %20 = select i1 %18, i32 %19, i32 %13
  %21 = add nuw nsw i32 %17, 1
  %22 = lshr i32 %21, 1
  %23 = add nuw nsw i32 %20, 1
  %24 = lshr i32 %23, 1
  %25 = icmp slt i32 %12, 1
  %26 = icmp eq i32 %13, 0
  %27 = or i1 %25, %26
  br i1 %27, label %32, label %28

28:                                               ; preds = %14
  %29 = icmp eq i16* %6, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %28
  tail call void @ScalePlane_12(i16* %0, i32 %1, i32 %12, i32 %13, i16* nonnull %6, i32 %7, i32 %17, i32 %20, i32 2) #4
  br label %31

31:                                               ; preds = %30, %28
  tail call void @ScalePlane_12(i16* %2, i32 %3, i32 %12, i32 %13, i16* %8, i32 %9, i32 %22, i32 %24, i32 2) #4
  tail call void @ScalePlane_12(i16* %4, i32 %5, i32 %12, i32 %13, i16* %10, i32 %11, i32 %22, i32 %24, i32 2) #4
  br label %32

32:                                               ; preds = %14, %31
  %33 = phi i32 [ 0, %31 ], [ -1, %14 ]
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I210ToI010(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = icmp slt i32 %12, 0
  %16 = sub nsw i32 0, %12
  %17 = select i1 %15, i32 %16, i32 %12
  %18 = icmp slt i32 %13, 0
  %19 = sub nsw i32 0, %13
  %20 = select i1 %18, i32 %19, i32 %13
  br i1 %15, label %21, label %25

21:                                               ; preds = %14
  %22 = sub i32 1, %12
  %23 = ashr i32 %22, 1
  %24 = sub nsw i32 0, %23
  br label %28

25:                                               ; preds = %14
  %26 = add nuw nsw i32 %12, 1
  %27 = ashr i32 %26, 1
  br label %28

28:                                               ; preds = %25, %21
  %29 = phi i32 [ %24, %21 ], [ %27, %25 ]
  %30 = add nuw nsw i32 %17, 1
  %31 = lshr i32 %30, 1
  %32 = add nuw nsw i32 %20, 1
  %33 = lshr i32 %32, 1
  %34 = icmp slt i32 %12, 1
  %35 = icmp eq i32 %13, 0
  %36 = or i1 %34, %35
  br i1 %36, label %41, label %37

37:                                               ; preds = %28
  %38 = icmp eq i16* %6, null
  br i1 %38, label %40, label %39

39:                                               ; preds = %37
  tail call void @ScalePlane_12(i16* %0, i32 %1, i32 %12, i32 %13, i16* nonnull %6, i32 %7, i32 %17, i32 %20, i32 2) #4
  br label %40

40:                                               ; preds = %39, %37
  tail call void @ScalePlane_12(i16* %2, i32 %3, i32 %29, i32 %13, i16* %8, i32 %9, i32 %31, i32 %33, i32 2) #4
  tail call void @ScalePlane_12(i16* %4, i32 %5, i32 %29, i32 %13, i16* %10, i32 %11, i32 %31, i32 %33, i32 2) #4
  br label %41

41:                                               ; preds = %28, %40
  %42 = phi i32 [ 0, %40 ], [ -1, %28 ]
  ret i32 %42
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I010ToP010(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp slt i32 %10, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %12
  %15 = sub i32 1, %10
  %16 = ashr i32 %15, 1
  %17 = sub nsw i32 0, %16
  br label %21

18:                                               ; preds = %12
  %19 = add nuw nsw i32 %10, 1
  %20 = ashr i32 %19, 1
  br label %21

21:                                               ; preds = %18, %14
  %22 = phi i32 [ %17, %14 ], [ %20, %18 ]
  %23 = icmp slt i32 %11, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %21
  %25 = sub i32 1, %11
  %26 = ashr i32 %25, 1
  %27 = sub nsw i32 0, %26
  br label %31

28:                                               ; preds = %21
  %29 = add nuw nsw i32 %11, 1
  %30 = ashr i32 %29, 1
  br label %31

31:                                               ; preds = %28, %24
  %32 = phi i32 [ %27, %24 ], [ %30, %28 ]
  %33 = icmp slt i32 %10, 1
  %34 = icmp eq i32 %11, 0
  %35 = or i1 %33, %34
  br i1 %35, label %37, label %36

36:                                               ; preds = %31
  tail call void @ConvertToMSBPlane_16(i16* %0, i32 %1, i16* %6, i32 %7, i32 %10, i32 %11, i32 10) #4
  tail call void @MergeUVPlane_16(i16* %2, i32 %3, i16* %4, i32 %5, i16* %8, i32 %9, i32 %22, i32 %32, i32 10) #4
  br label %37

37:                                               ; preds = %31, %36
  %38 = phi i32 [ 0, %36 ], [ -1, %31 ]
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I210ToP210(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp slt i32 %10, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %12
  %15 = icmp eq i32 %10, 0
  %16 = icmp eq i32 %11, 0
  %17 = or i1 %15, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = add nuw nsw i32 %10, 1
  %20 = ashr i32 %19, 1
  tail call void @ConvertToMSBPlane_16(i16* %0, i32 %1, i16* %6, i32 %7, i32 %10, i32 %11, i32 10) #4
  tail call void @MergeUVPlane_16(i16* %2, i32 %3, i16* %4, i32 %5, i16* %8, i32 %9, i32 %20, i32 %11, i32 10) #4
  br label %21

21:                                               ; preds = %12, %14, %18
  %22 = phi i32 [ 0, %18 ], [ -1, %14 ], [ -1, %12 ]
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I012ToP012(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp slt i32 %10, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %12
  %15 = sub i32 1, %10
  %16 = ashr i32 %15, 1
  %17 = sub nsw i32 0, %16
  br label %21

18:                                               ; preds = %12
  %19 = add nuw nsw i32 %10, 1
  %20 = ashr i32 %19, 1
  br label %21

21:                                               ; preds = %18, %14
  %22 = phi i32 [ %17, %14 ], [ %20, %18 ]
  %23 = icmp slt i32 %11, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %21
  %25 = sub i32 1, %11
  %26 = ashr i32 %25, 1
  %27 = sub nsw i32 0, %26
  br label %31

28:                                               ; preds = %21
  %29 = add nuw nsw i32 %11, 1
  %30 = ashr i32 %29, 1
  br label %31

31:                                               ; preds = %28, %24
  %32 = phi i32 [ %27, %24 ], [ %30, %28 ]
  %33 = icmp slt i32 %10, 1
  %34 = icmp eq i32 %11, 0
  %35 = or i1 %33, %34
  br i1 %35, label %37, label %36

36:                                               ; preds = %31
  tail call void @ConvertToMSBPlane_16(i16* %0, i32 %1, i16* %6, i32 %7, i32 %10, i32 %11, i32 12) #4
  tail call void @MergeUVPlane_16(i16* %2, i32 %3, i16* %4, i32 %5, i16* %8, i32 %9, i32 %22, i32 %32, i32 12) #4
  br label %37

37:                                               ; preds = %31, %36
  %38 = phi i32 [ 0, %36 ], [ -1, %31 ]
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I212ToP212(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp slt i32 %10, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %12
  %15 = icmp eq i32 %10, 0
  %16 = icmp eq i32 %11, 0
  %17 = or i1 %15, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = add nuw nsw i32 %10, 1
  %20 = ashr i32 %19, 1
  tail call void @ConvertToMSBPlane_16(i16* %0, i32 %1, i16* %6, i32 %7, i32 %10, i32 %11, i32 12) #4
  tail call void @MergeUVPlane_16(i16* %2, i32 %3, i16* %4, i32 %5, i16* %8, i32 %9, i32 %20, i32 %11, i32 12) #4
  br label %21

21:                                               ; preds = %12, %14, %18
  %22 = phi i32 [ 0, %18 ], [ -1, %14 ], [ -1, %12 ]
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I422ToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = icmp slt i32 %12, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %14
  %17 = sub i32 1, %12
  %18 = ashr i32 %17, 1
  %19 = sub nsw i32 0, %18
  br label %23

20:                                               ; preds = %14
  %21 = add nuw nsw i32 %12, 1
  %22 = ashr i32 %21, 1
  br label %23

23:                                               ; preds = %20, %16
  %24 = phi i32 [ %19, %16 ], [ %22, %20 ]
  %25 = sub nsw i32 0, %12
  %26 = select i1 %15, i32 %25, i32 %12
  %27 = icmp slt i32 %13, 0
  %28 = sub nsw i32 0, %13
  %29 = select i1 %27, i32 %28, i32 %13
  %30 = add nuw nsw i32 %26, 1
  %31 = lshr i32 %30, 1
  %32 = add nuw nsw i32 %29, 1
  %33 = lshr i32 %32, 1
  %34 = icmp slt i32 %24, 1
  %35 = icmp eq i32 %13, 0
  %36 = or i1 %35, %34
  br i1 %36, label %41, label %37

37:                                               ; preds = %23
  %38 = icmp eq i8* %6, null
  br i1 %38, label %40, label %39

39:                                               ; preds = %37
  tail call void @ScalePlane(i8* %0, i32 %1, i32 %12, i32 %13, i8* nonnull %6, i32 %7, i32 %26, i32 %29, i32 2) #4
  br label %40

40:                                               ; preds = %39, %37
  tail call void @ScalePlane(i8* %2, i32 %3, i32 %24, i32 %13, i8* %8, i32 %9, i32 %31, i32 %33, i32 2) #4
  tail call void @ScalePlane(i8* %4, i32 %5, i32 %24, i32 %13, i8* %10, i32 %11, i32 %31, i32 %33, i32 2) #4
  br label %41

41:                                               ; preds = %23, %40
  %42 = phi i32 [ 0, %40 ], [ -1, %23 ]
  ret i32 %42
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I422ToNV21(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %13 = add nsw i32 %10, 1
  %14 = ashr i32 %13, 1
  %15 = add nsw i32 %11, 1
  %16 = icmp slt i32 %11, 0
  br i1 %16, label %17, label %33

17:                                               ; preds = %12
  %18 = sub nsw i32 0, %11
  %19 = sub i32 1, %11
  %20 = xor i32 %11, -1
  %21 = mul nsw i32 %20, %1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %0, i64 %22
  %24 = mul nsw i32 %20, %3
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %2, i64 %25
  %27 = mul nsw i32 %20, %5
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %4, i64 %28
  %30 = sub nsw i32 0, %1
  %31 = sub nsw i32 0, %3
  %32 = sub nsw i32 0, %5
  br label %33

33:                                               ; preds = %17, %12
  %34 = phi i32 [ %32, %17 ], [ %5, %12 ]
  %35 = phi i8* [ %29, %17 ], [ %4, %12 ]
  %36 = phi i32 [ %31, %17 ], [ %3, %12 ]
  %37 = phi i32 [ %18, %17 ], [ %11, %12 ]
  %38 = phi i32 [ %19, %17 ], [ %15, %12 ]
  %39 = phi i8* [ %26, %17 ], [ %2, %12 ]
  %40 = phi i32 [ %30, %17 ], [ %1, %12 ]
  %41 = phi i8* [ %23, %17 ], [ %0, %12 ]
  %42 = ashr i32 %38, 1
  %43 = mul nsw i32 %42, %14
  %44 = shl i32 %43, 1
  %45 = add nsw i32 %44, 63
  %46 = sext i32 %45 to i64
  %47 = tail call noalias i8* @malloc(i64 %46) #4
  %48 = ptrtoint i8* %47 to i64
  %49 = add nsw i64 %48, 63
  %50 = and i64 %49, -64
  %51 = inttoptr i64 %50 to i8*
  %52 = sext i32 %43 to i64
  %53 = getelementptr inbounds i8, i8* %51, i64 %52
  %54 = tail call i32 @I422ToI420(i8* %41, i32 %40, i8* %39, i32 %36, i8* %35, i32 %34, i8* %6, i32 %7, i8* %51, i32 %14, i8* %53, i32 %14, i32 %10, i32 %37)
  tail call void @MergeUVPlane(i8* %53, i32 %14, i8* %51, i32 %14, i8* %8, i32 %9, i32 %14, i32 %42) #4
  tail call void @free(i8* %47) #4
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

declare void @MergeUVPlane(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I444ToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = icmp slt i32 %12, 0
  %16 = sub nsw i32 0, %12
  %17 = select i1 %15, i32 %16, i32 %12
  %18 = icmp slt i32 %13, 0
  %19 = sub nsw i32 0, %13
  %20 = select i1 %18, i32 %19, i32 %13
  %21 = add nuw nsw i32 %17, 1
  %22 = lshr i32 %21, 1
  %23 = add nuw nsw i32 %20, 1
  %24 = lshr i32 %23, 1
  %25 = icmp slt i32 %12, 1
  %26 = icmp eq i32 %13, 0
  %27 = or i1 %25, %26
  br i1 %27, label %32, label %28

28:                                               ; preds = %14
  %29 = icmp eq i8* %6, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %28
  tail call void @ScalePlane(i8* %0, i32 %1, i32 %12, i32 %13, i8* nonnull %6, i32 %7, i32 %17, i32 %20, i32 2) #4
  br label %31

31:                                               ; preds = %30, %28
  tail call void @ScalePlane(i8* %2, i32 %3, i32 %12, i32 %13, i8* %8, i32 %9, i32 %22, i32 %24, i32 2) #4
  tail call void @ScalePlane(i8* %4, i32 %5, i32 %12, i32 %13, i8* %10, i32 %11, i32 %22, i32 %24, i32 2) #4
  br label %32

32:                                               ; preds = %14, %31
  %33 = phi i32 [ 0, %31 ], [ -1, %14 ]
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I444ToNV12(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp ne i8* %0, null
  %14 = icmp ne i8* %2, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %4, null
  %17 = and i1 %15, %16
  %18 = icmp ne i8* %6, null
  %19 = and i1 %17, %18
  %20 = icmp ne i8* %8, null
  %21 = and i1 %19, %20
  %22 = xor i1 %21, true
  %23 = icmp slt i32 %10, 1
  %24 = or i1 %23, %22
  %25 = icmp eq i32 %11, 0
  %26 = or i1 %24, %25
  br i1 %26, label %54, label %27

27:                                               ; preds = %12
  %28 = icmp slt i32 %11, 0
  br i1 %28, label %29, label %44

29:                                               ; preds = %27
  %30 = sub nsw i32 0, %11
  %31 = xor i32 %11, -1
  %32 = mul nsw i32 %31, %1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %0, i64 %33
  %35 = mul nsw i32 %31, %3
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %2, i64 %36
  %38 = mul nsw i32 %31, %5
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %4, i64 %39
  %41 = sub nsw i32 0, %1
  %42 = sub nsw i32 0, %3
  %43 = sub nsw i32 0, %5
  br label %44

44:                                               ; preds = %29, %27
  %45 = phi i8* [ %40, %29 ], [ %4, %27 ]
  %46 = phi i32 [ %43, %29 ], [ %5, %27 ]
  %47 = phi i32 [ %42, %29 ], [ %3, %27 ]
  %48 = phi i8* [ %37, %29 ], [ %2, %27 ]
  %49 = phi i32 [ %41, %29 ], [ %1, %27 ]
  %50 = phi i8* [ %34, %29 ], [ %0, %27 ]
  %51 = phi i32 [ %30, %29 ], [ %11, %27 ]
  br i1 %18, label %52, label %53

52:                                               ; preds = %44
  tail call void @CopyPlane(i8* %50, i32 %49, i8* nonnull %6, i32 %7, i32 %10, i32 %51) #4
  br label %53

53:                                               ; preds = %52, %44
  tail call void @HalfMergeUVPlane(i8* %48, i32 %47, i8* %45, i32 %46, i8* %8, i32 %9, i32 %10, i32 %51) #4
  br label %54

54:                                               ; preds = %12, %53
  %55 = phi i32 [ 0, %53 ], [ -1, %12 ]
  ret i32 %55
}

declare void @HalfMergeUVPlane(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I444ToNV21(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp ne i8* %0, null
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %2, null
  %17 = and i1 %16, %15
  %18 = icmp ne i8* %6, null
  %19 = and i1 %17, %18
  %20 = icmp ne i8* %8, null
  %21 = and i1 %19, %20
  %22 = xor i1 %21, true
  %23 = icmp slt i32 %10, 1
  %24 = or i1 %23, %22
  %25 = icmp eq i32 %11, 0
  %26 = or i1 %24, %25
  br i1 %26, label %54, label %27

27:                                               ; preds = %12
  %28 = icmp slt i32 %11, 0
  br i1 %28, label %29, label %44

29:                                               ; preds = %27
  %30 = sub nsw i32 0, %11
  %31 = xor i32 %11, -1
  %32 = mul nsw i32 %31, %1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %0, i64 %33
  %35 = mul nsw i32 %31, %5
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %4, i64 %36
  %38 = mul nsw i32 %31, %3
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %2, i64 %39
  %41 = sub nsw i32 0, %1
  %42 = sub nsw i32 0, %5
  %43 = sub nsw i32 0, %3
  br label %44

44:                                               ; preds = %29, %27
  %45 = phi i8* [ %40, %29 ], [ %2, %27 ]
  %46 = phi i32 [ %43, %29 ], [ %3, %27 ]
  %47 = phi i32 [ %42, %29 ], [ %5, %27 ]
  %48 = phi i8* [ %37, %29 ], [ %4, %27 ]
  %49 = phi i32 [ %41, %29 ], [ %1, %27 ]
  %50 = phi i8* [ %34, %29 ], [ %0, %27 ]
  %51 = phi i32 [ %30, %29 ], [ %11, %27 ]
  br i1 %18, label %52, label %53

52:                                               ; preds = %44
  tail call void @CopyPlane(i8* %50, i32 %49, i8* nonnull %6, i32 %7, i32 %10, i32 %51) #4
  br label %53

53:                                               ; preds = %52, %44
  tail call void @HalfMergeUVPlane(i8* %48, i32 %47, i8* %45, i32 %46, i8* %8, i32 %9, i32 %10, i32 %51) #4
  br label %54

54:                                               ; preds = %12, %53
  %55 = phi i32 [ 0, %53 ], [ -1, %12 ]
  ret i32 %55
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I400ToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = add nsw i32 %8, 1
  %12 = ashr i32 %11, 1
  %13 = icmp eq i8* %4, null
  %14 = icmp eq i8* %6, null
  %15 = or i1 %13, %14
  %16 = icmp slt i32 %8, 1
  %17 = or i1 %15, %16
  %18 = icmp eq i32 %9, 0
  %19 = or i1 %17, %18
  br i1 %19, label %40, label %20

20:                                               ; preds = %10
  %21 = add nsw i32 %9, 1
  %22 = icmp slt i32 %9, 0
  br i1 %22, label %23, label %31

23:                                               ; preds = %20
  %24 = sub nsw i32 0, %9
  %25 = sub i32 1, %9
  %26 = xor i32 %9, -1
  %27 = mul nsw i32 %26, %1
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %0, i64 %28
  %30 = sub nsw i32 0, %1
  br label %31

31:                                               ; preds = %23, %20
  %32 = phi i32 [ %30, %23 ], [ %1, %20 ]
  %33 = phi i8* [ %29, %23 ], [ %0, %20 ]
  %34 = phi i32 [ %24, %23 ], [ %9, %20 ]
  %35 = phi i32 [ %25, %23 ], [ %21, %20 ]
  %36 = ashr i32 %35, 1
  %37 = icmp eq i8* %2, null
  br i1 %37, label %39, label %38

38:                                               ; preds = %31
  tail call void @CopyPlane(i8* %33, i32 %32, i8* nonnull %2, i32 %3, i32 %8, i32 %34) #4
  br label %39

39:                                               ; preds = %31, %38
  tail call void @SetPlane(i8* nonnull %4, i32 %5, i32 %12, i32 %36, i32 128) #4
  tail call void @SetPlane(i8* nonnull %6, i32 %7, i32 %12, i32 %36, i32 128) #4
  br label %40

40:                                               ; preds = %10, %39
  %41 = phi i32 [ 0, %39 ], [ -1, %10 ]
  ret i32 %41
}

declare void @SetPlane(i8*, i32, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I400ToNV21(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = add nsw i32 %6, 1
  %10 = icmp eq i8* %4, null
  %11 = icmp slt i32 %6, 1
  %12 = or i1 %10, %11
  %13 = icmp eq i32 %7, 0
  %14 = or i1 %12, %13
  br i1 %14, label %36, label %15

15:                                               ; preds = %8
  %16 = add nsw i32 %7, 1
  %17 = icmp slt i32 %7, 0
  br i1 %17, label %18, label %26

18:                                               ; preds = %15
  %19 = sub nsw i32 0, %7
  %20 = sub i32 1, %7
  %21 = xor i32 %7, -1
  %22 = mul nsw i32 %21, %1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %0, i64 %23
  %25 = sub nsw i32 0, %1
  br label %26

26:                                               ; preds = %18, %15
  %27 = phi i32 [ %25, %18 ], [ %1, %15 ]
  %28 = phi i8* [ %24, %18 ], [ %0, %15 ]
  %29 = phi i32 [ %19, %18 ], [ %7, %15 ]
  %30 = phi i32 [ %20, %18 ], [ %16, %15 ]
  %31 = ashr i32 %30, 1
  %32 = icmp eq i8* %2, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %26
  tail call void @CopyPlane(i8* %28, i32 %27, i8* nonnull %2, i32 %3, i32 %6, i32 %29) #4
  br label %34

34:                                               ; preds = %26, %33
  %35 = and i32 %9, -2
  tail call void @SetPlane(i8* nonnull %4, i32 %5, i32 %35, i32 %31, i32 128) #4
  br label %36

36:                                               ; preds = %8, %34
  %37 = phi i32 [ 0, %34 ], [ -1, %8 ]
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NV12ToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %13 = add nsw i32 %10, 1
  %14 = ashr i32 %13, 1
  %15 = icmp ne i8* %2, null
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = icmp ne i8* %8, null
  %19 = and i1 %17, %18
  %20 = xor i1 %19, true
  %21 = icmp slt i32 %10, 1
  %22 = or i1 %21, %20
  %23 = icmp eq i32 %11, 0
  %24 = or i1 %22, %23
  br i1 %24, label %73, label %25

25:                                               ; preds = %12
  %26 = add nsw i32 %11, 1
  %27 = ashr i32 %26, 1
  %28 = icmp slt i32 %11, 0
  br i1 %28, label %29, label %43

29:                                               ; preds = %25
  %30 = sub nsw i32 0, %11
  %31 = sub i32 1, %11
  %32 = ashr i32 %31, 1
  %33 = xor i32 %11, -1
  %34 = mul nsw i32 %33, %1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %0, i64 %35
  %37 = add nsw i32 %32, -1
  %38 = mul nsw i32 %37, %3
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %2, i64 %39
  %41 = sub nsw i32 0, %1
  %42 = sub nsw i32 0, %3
  br label %43

43:                                               ; preds = %29, %25
  %44 = phi i8* [ %40, %29 ], [ %2, %25 ]
  %45 = phi i32 [ %42, %29 ], [ %3, %25 ]
  %46 = phi i32 [ %41, %29 ], [ %1, %25 ]
  %47 = phi i8* [ %36, %29 ], [ %0, %25 ]
  %48 = phi i32 [ %30, %29 ], [ %11, %25 ]
  %49 = phi i32 [ %32, %29 ], [ %27, %25 ]
  %50 = icmp eq i32 %46, %10
  %51 = icmp eq i32 %5, %10
  %52 = and i1 %51, %50
  %53 = and i32 %13, -2
  %54 = icmp eq i32 %45, %53
  %55 = icmp eq i32 %14, %7
  %56 = and i1 %55, %54
  %57 = icmp eq i32 %14, %9
  %58 = and i1 %57, %56
  %59 = select i1 %58, i32 0, i32 %45
  %60 = select i1 %58, i32 0, i32 %7
  %61 = select i1 %58, i32 0, i32 %9
  %62 = select i1 %58, i32 %49, i32 1
  %63 = mul nsw i32 %62, %14
  %64 = select i1 %58, i32 1, i32 %49
  %65 = icmp eq i8* %4, null
  br i1 %65, label %72, label %66

66:                                               ; preds = %43
  %67 = select i1 %52, i32 1, i32 %48
  %68 = select i1 %52, i32 %48, i32 1
  %69 = mul nsw i32 %68, %10
  %70 = select i1 %52, i32 0, i32 %5
  %71 = select i1 %52, i32 0, i32 %46
  tail call void @CopyPlane(i8* %47, i32 %71, i8* nonnull %4, i32 %70, i32 %69, i32 %67) #4
  br label %72

72:                                               ; preds = %43, %66
  tail call void @SplitUVPlane(i8* %44, i32 %59, i8* %6, i32 %60, i8* %8, i32 %61, i32 %63, i32 %64) #4
  br label %73

73:                                               ; preds = %12, %72
  %74 = phi i32 [ 0, %72 ], [ -1, %12 ]
  ret i32 %74
}

declare void @SplitUVPlane(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NV21ToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %13 = tail call i32 @NV12ToI420(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 %5, i8* %8, i32 %9, i8* %6, i32 %7, i32 %10, i32 %11)
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NV12ToNV24(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp slt i32 %8, 1
  %12 = icmp eq i32 %9, 0
  %13 = or i1 %11, %12
  br i1 %13, label %36, label %14

14:                                               ; preds = %10
  %15 = icmp eq i8* %4, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %14
  %17 = icmp slt i32 %9, 0
  %18 = sub nsw i32 0, %9
  %19 = select i1 %17, i32 %18, i32 %9
  tail call void @ScalePlane(i8* %0, i32 %1, i32 %8, i32 %9, i8* nonnull %4, i32 %5, i32 %8, i32 %19, i32 2) #4
  br label %20

20:                                               ; preds = %14, %16
  %21 = add nuw nsw i32 %8, 1
  %22 = ashr i32 %21, 1
  %23 = icmp slt i32 %9, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = sub i32 1, %9
  %26 = ashr i32 %25, 1
  %27 = sub nsw i32 0, %26
  br label %31

28:                                               ; preds = %20
  %29 = add nuw nsw i32 %9, 1
  %30 = ashr i32 %29, 1
  br label %31

31:                                               ; preds = %28, %24
  %32 = phi i32 [ %27, %24 ], [ %30, %28 ]
  %33 = sub nsw i32 0, %9
  %34 = select i1 %23, i32 %33, i32 %9
  %35 = tail call i32 @UVScale(i8* %2, i32 %3, i32 %22, i32 %32, i8* %6, i32 %7, i32 %8, i32 %34, i32 2) #4
  br label %36

36:                                               ; preds = %10, %31
  %37 = phi i32 [ 0, %31 ], [ -1, %10 ]
  ret i32 %37
}

declare void @ScalePlane(i8*, i32, i32, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #1

declare i32 @UVScale(i8*, i32, i32, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NV16ToNV24(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp slt i32 %8, 1
  %12 = icmp eq i32 %9, 0
  %13 = or i1 %11, %12
  br i1 %13, label %29, label %14

14:                                               ; preds = %10
  %15 = icmp eq i8* %4, null
  br i1 %15, label %16, label %18

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %9
  br label %22

18:                                               ; preds = %14
  %19 = icmp slt i32 %9, 0
  %20 = sub nsw i32 0, %9
  %21 = select i1 %19, i32 %20, i32 %9
  tail call void @ScalePlane(i8* %0, i32 %1, i32 %8, i32 %9, i8* nonnull %4, i32 %5, i32 %8, i32 %21, i32 2) #4
  br label %22

22:                                               ; preds = %16, %18
  %23 = phi i32 [ %17, %16 ], [ %20, %18 ]
  %24 = add nuw nsw i32 %8, 1
  %25 = ashr i32 %24, 1
  %26 = icmp slt i32 %9, 0
  %27 = select i1 %26, i32 %23, i32 %9
  %28 = tail call i32 @UVScale(i8* %2, i32 %3, i32 %25, i32 %9, i8* %6, i32 %7, i32 %8, i32 %27, i32 2) #4
  br label %29

29:                                               ; preds = %10, %22
  %30 = phi i32 [ 0, %22 ], [ -1, %10 ]
  ret i32 %30
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @P010ToP410(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp slt i32 %8, 1
  %12 = icmp eq i32 %9, 0
  %13 = or i1 %11, %12
  br i1 %13, label %36, label %14

14:                                               ; preds = %10
  %15 = icmp eq i16* %4, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %14
  %17 = icmp slt i32 %9, 0
  %18 = sub nsw i32 0, %9
  %19 = select i1 %17, i32 %18, i32 %9
  tail call void @ScalePlane_16(i16* %0, i32 %1, i32 %8, i32 %9, i16* nonnull %4, i32 %5, i32 %8, i32 %19, i32 2) #4
  br label %20

20:                                               ; preds = %14, %16
  %21 = add nuw nsw i32 %8, 1
  %22 = ashr i32 %21, 1
  %23 = icmp slt i32 %9, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = sub i32 1, %9
  %26 = ashr i32 %25, 1
  %27 = sub nsw i32 0, %26
  br label %31

28:                                               ; preds = %20
  %29 = add nuw nsw i32 %9, 1
  %30 = ashr i32 %29, 1
  br label %31

31:                                               ; preds = %28, %24
  %32 = phi i32 [ %27, %24 ], [ %30, %28 ]
  %33 = sub nsw i32 0, %9
  %34 = select i1 %23, i32 %33, i32 %9
  %35 = tail call i32 @UVScale_16(i16* %2, i32 %3, i32 %22, i32 %32, i16* %6, i32 %7, i32 %8, i32 %34, i32 2) #4
  br label %36

36:                                               ; preds = %10, %31
  %37 = phi i32 [ 0, %31 ], [ -1, %10 ]
  ret i32 %37
}

declare void @ScalePlane_16(i16*, i32, i32, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #1

declare i32 @UVScale_16(i16*, i32, i32, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @P210ToP410(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp slt i32 %8, 1
  %12 = icmp eq i32 %9, 0
  %13 = or i1 %11, %12
  br i1 %13, label %29, label %14

14:                                               ; preds = %10
  %15 = icmp eq i16* %4, null
  br i1 %15, label %16, label %18

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %9
  br label %22

18:                                               ; preds = %14
  %19 = icmp slt i32 %9, 0
  %20 = sub nsw i32 0, %9
  %21 = select i1 %19, i32 %20, i32 %9
  tail call void @ScalePlane_16(i16* %0, i32 %1, i32 %8, i32 %9, i16* nonnull %4, i32 %5, i32 %8, i32 %21, i32 2) #4
  br label %22

22:                                               ; preds = %16, %18
  %23 = phi i32 [ %17, %16 ], [ %20, %18 ]
  %24 = add nuw nsw i32 %8, 1
  %25 = ashr i32 %24, 1
  %26 = icmp slt i32 %9, 0
  %27 = select i1 %26, i32 %23, i32 %9
  %28 = tail call i32 @UVScale_16(i16* %2, i32 %3, i32 %25, i32 %9, i16* %6, i32 %7, i32 %8, i32 %27, i32 2) #4
  br label %29

29:                                               ; preds = %10, %22
  %30 = phi i32 [ 0, %22 ], [ -1, %10 ]
  ret i32 %30
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @YUY2ToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp slt i32 %9, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %10
  %13 = sub nsw i32 0, %9
  %14 = xor i32 %9, -1
  %15 = mul nsw i32 %14, %1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = sub nsw i32 0, %1
  br label %19

19:                                               ; preds = %12, %10
  %20 = phi i32 [ %18, %12 ], [ %1, %10 ]
  %21 = phi i8* [ %17, %12 ], [ %0, %10 ]
  %22 = phi i32 [ %13, %12 ], [ %9, %10 ]
  %23 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %19
  %26 = tail call i32 @InitCpuFlags() #4
  br label %27

27:                                               ; preds = %19, %25
  %28 = phi i32 [ %26, %25 ], [ %23, %19 ]
  %29 = and i32 %28, 32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %27
  %32 = and i32 %8, 15
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, void (i8*, i32, i8*, i8*, i32)* @YUY2ToUVRow_SSE2, void (i8*, i32, i8*, i8*, i32)* @YUY2ToUVRow_Any_SSE2
  %35 = select i1 %33, void (i8*, i8*, i32)* @YUY2ToYRow_SSE2, void (i8*, i8*, i32)* @YUY2ToYRow_Any_SSE2
  br label %36

36:                                               ; preds = %31, %27
  %37 = phi void (i8*, i32, i8*, i8*, i32)* [ @YUY2ToUVRow_C, %27 ], [ %34, %31 ]
  %38 = phi void (i8*, i8*, i32)* [ @YUY2ToYRow_C, %27 ], [ %35, %31 ]
  %39 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = tail call i32 @InitCpuFlags() #4
  br label %43

43:                                               ; preds = %36, %41
  %44 = phi i32 [ %42, %41 ], [ %39, %36 ]
  %45 = and i32 %44, 1024
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %43
  %48 = and i32 %8, 31
  %49 = icmp eq i32 %48, 0
  %50 = select i1 %49, void (i8*, i32, i8*, i8*, i32)* @YUY2ToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @YUY2ToUVRow_Any_AVX2
  %51 = select i1 %49, void (i8*, i8*, i32)* @YUY2ToYRow_AVX2, void (i8*, i8*, i32)* @YUY2ToYRow_Any_AVX2
  br label %52

52:                                               ; preds = %47, %43
  %53 = phi void (i8*, i32, i8*, i8*, i32)* [ %37, %43 ], [ %50, %47 ]
  %54 = phi void (i8*, i8*, i32)* [ %38, %43 ], [ %51, %47 ]
  %55 = add nsw i32 %22, -1
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %80

57:                                               ; preds = %52
  %58 = sext i32 %20 to i64
  %59 = sext i32 %3 to i64
  %60 = shl nsw i32 %20, 1
  %61 = sext i32 %60 to i64
  %62 = shl nsw i32 %3, 1
  %63 = sext i32 %62 to i64
  %64 = sext i32 %5 to i64
  %65 = sext i32 %7 to i64
  br label %66

66:                                               ; preds = %57, %66
  %67 = phi i32 [ 0, %57 ], [ %78, %66 ]
  %68 = phi i8* [ %21, %57 ], [ %74, %66 ]
  %69 = phi i8* [ %6, %57 ], [ %77, %66 ]
  %70 = phi i8* [ %2, %57 ], [ %75, %66 ]
  %71 = phi i8* [ %4, %57 ], [ %76, %66 ]
  tail call void %53(i8* %68, i32 %20, i8* %71, i8* %69, i32 %8) #4
  tail call void %54(i8* %68, i8* %70, i32 %8) #4
  %72 = getelementptr inbounds i8, i8* %68, i64 %58
  %73 = getelementptr inbounds i8, i8* %70, i64 %59
  tail call void %54(i8* %72, i8* %73, i32 %8) #4
  %74 = getelementptr inbounds i8, i8* %68, i64 %61
  %75 = getelementptr inbounds i8, i8* %70, i64 %63
  %76 = getelementptr inbounds i8, i8* %71, i64 %64
  %77 = getelementptr inbounds i8, i8* %69, i64 %65
  %78 = add nuw nsw i32 %67, 2
  %79 = icmp slt i32 %78, %55
  br i1 %79, label %66, label %80

80:                                               ; preds = %66, %52
  %81 = phi i8* [ %4, %52 ], [ %76, %66 ]
  %82 = phi i8* [ %2, %52 ], [ %75, %66 ]
  %83 = phi i8* [ %6, %52 ], [ %77, %66 ]
  %84 = phi i8* [ %21, %52 ], [ %74, %66 ]
  %85 = and i32 %22, 1
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %88, label %87

87:                                               ; preds = %80
  tail call void %53(i8* %84, i32 0, i8* %81, i8* %83, i32 %8) #4
  tail call void %54(i8* %84, i8* %82, i32 %8) #4
  br label %88

88:                                               ; preds = %80, %87
  ret i32 0
}

declare void @YUY2ToUVRow_C(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @YUY2ToYRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @YUY2ToUVRow_Any_SSE2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @YUY2ToYRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @YUY2ToUVRow_SSE2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @YUY2ToYRow_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @YUY2ToUVRow_Any_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @YUY2ToYRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @YUY2ToUVRow_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @YUY2ToYRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @UYVYToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp slt i32 %9, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %10
  %13 = sub nsw i32 0, %9
  %14 = xor i32 %9, -1
  %15 = mul nsw i32 %14, %1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = sub nsw i32 0, %1
  br label %19

19:                                               ; preds = %12, %10
  %20 = phi i32 [ %18, %12 ], [ %1, %10 ]
  %21 = phi i8* [ %17, %12 ], [ %0, %10 ]
  %22 = phi i32 [ %13, %12 ], [ %9, %10 ]
  %23 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %19
  %26 = tail call i32 @InitCpuFlags() #4
  br label %27

27:                                               ; preds = %19, %25
  %28 = phi i32 [ %26, %25 ], [ %23, %19 ]
  %29 = and i32 %28, 32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %27
  %32 = and i32 %8, 15
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, void (i8*, i32, i8*, i8*, i32)* @UYVYToUVRow_SSE2, void (i8*, i32, i8*, i8*, i32)* @UYVYToUVRow_Any_SSE2
  %35 = select i1 %33, void (i8*, i8*, i32)* @UYVYToYRow_SSE2, void (i8*, i8*, i32)* @UYVYToYRow_Any_SSE2
  br label %36

36:                                               ; preds = %31, %27
  %37 = phi void (i8*, i32, i8*, i8*, i32)* [ @UYVYToUVRow_C, %27 ], [ %34, %31 ]
  %38 = phi void (i8*, i8*, i32)* [ @UYVYToYRow_C, %27 ], [ %35, %31 ]
  %39 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = tail call i32 @InitCpuFlags() #4
  br label %43

43:                                               ; preds = %36, %41
  %44 = phi i32 [ %42, %41 ], [ %39, %36 ]
  %45 = and i32 %44, 1024
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %43
  %48 = and i32 %8, 31
  %49 = icmp eq i32 %48, 0
  %50 = select i1 %49, void (i8*, i32, i8*, i8*, i32)* @UYVYToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @UYVYToUVRow_Any_AVX2
  %51 = select i1 %49, void (i8*, i8*, i32)* @UYVYToYRow_AVX2, void (i8*, i8*, i32)* @UYVYToYRow_Any_AVX2
  br label %52

52:                                               ; preds = %47, %43
  %53 = phi void (i8*, i32, i8*, i8*, i32)* [ %37, %43 ], [ %50, %47 ]
  %54 = phi void (i8*, i8*, i32)* [ %38, %43 ], [ %51, %47 ]
  %55 = add nsw i32 %22, -1
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %80

57:                                               ; preds = %52
  %58 = sext i32 %20 to i64
  %59 = sext i32 %3 to i64
  %60 = shl nsw i32 %20, 1
  %61 = sext i32 %60 to i64
  %62 = shl nsw i32 %3, 1
  %63 = sext i32 %62 to i64
  %64 = sext i32 %5 to i64
  %65 = sext i32 %7 to i64
  br label %66

66:                                               ; preds = %57, %66
  %67 = phi i32 [ 0, %57 ], [ %78, %66 ]
  %68 = phi i8* [ %21, %57 ], [ %74, %66 ]
  %69 = phi i8* [ %6, %57 ], [ %77, %66 ]
  %70 = phi i8* [ %2, %57 ], [ %75, %66 ]
  %71 = phi i8* [ %4, %57 ], [ %76, %66 ]
  tail call void %53(i8* %68, i32 %20, i8* %71, i8* %69, i32 %8) #4
  tail call void %54(i8* %68, i8* %70, i32 %8) #4
  %72 = getelementptr inbounds i8, i8* %68, i64 %58
  %73 = getelementptr inbounds i8, i8* %70, i64 %59
  tail call void %54(i8* %72, i8* %73, i32 %8) #4
  %74 = getelementptr inbounds i8, i8* %68, i64 %61
  %75 = getelementptr inbounds i8, i8* %70, i64 %63
  %76 = getelementptr inbounds i8, i8* %71, i64 %64
  %77 = getelementptr inbounds i8, i8* %69, i64 %65
  %78 = add nuw nsw i32 %67, 2
  %79 = icmp slt i32 %78, %55
  br i1 %79, label %66, label %80

80:                                               ; preds = %66, %52
  %81 = phi i8* [ %4, %52 ], [ %76, %66 ]
  %82 = phi i8* [ %2, %52 ], [ %75, %66 ]
  %83 = phi i8* [ %6, %52 ], [ %77, %66 ]
  %84 = phi i8* [ %21, %52 ], [ %74, %66 ]
  %85 = and i32 %22, 1
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %88, label %87

87:                                               ; preds = %80
  tail call void %53(i8* %84, i32 0, i8* %81, i8* %83, i32 %8) #4
  tail call void %54(i8* %84, i8* %82, i32 %8) #4
  br label %88

88:                                               ; preds = %80, %87
  ret i32 0
}

declare void @UYVYToUVRow_C(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @UYVYToYRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @UYVYToUVRow_Any_SSE2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @UYVYToYRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @UYVYToUVRow_SSE2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @UYVYToYRow_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @UYVYToUVRow_Any_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @UYVYToYRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @UYVYToUVRow_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @UYVYToYRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @AYUVToNV12(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp slt i32 %7, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %8
  %11 = sub nsw i32 0, %7
  %12 = xor i32 %7, -1
  %13 = mul nsw i32 %12, %1
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %0, i64 %14
  %16 = sub nsw i32 0, %1
  br label %17

17:                                               ; preds = %10, %8
  %18 = phi i32 [ %16, %10 ], [ %1, %8 ]
  %19 = phi i8* [ %15, %10 ], [ %0, %8 ]
  %20 = phi i32 [ %11, %10 ], [ %7, %8 ]
  %21 = add nsw i32 %20, -1
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %43

23:                                               ; preds = %17
  %24 = sext i32 %18 to i64
  %25 = sext i32 %3 to i64
  %26 = shl nsw i32 %18, 1
  %27 = sext i32 %26 to i64
  %28 = shl nsw i32 %3, 1
  %29 = sext i32 %28 to i64
  %30 = sext i32 %5 to i64
  br label %31

31:                                               ; preds = %23, %31
  %32 = phi i32 [ 0, %23 ], [ %41, %31 ]
  %33 = phi i8* [ %19, %23 ], [ %38, %31 ]
  %34 = phi i8* [ %4, %23 ], [ %40, %31 ]
  %35 = phi i8* [ %2, %23 ], [ %39, %31 ]
  tail call void @AYUVToUVRow_C(i8* %33, i32 %18, i8* %34, i32 %6) #4
  tail call void @AYUVToYRow_C(i8* %33, i8* %35, i32 %6) #4
  %36 = getelementptr inbounds i8, i8* %33, i64 %24
  %37 = getelementptr inbounds i8, i8* %35, i64 %25
  tail call void @AYUVToYRow_C(i8* %36, i8* %37, i32 %6) #4
  %38 = getelementptr inbounds i8, i8* %33, i64 %27
  %39 = getelementptr inbounds i8, i8* %35, i64 %29
  %40 = getelementptr inbounds i8, i8* %34, i64 %30
  %41 = add nuw nsw i32 %32, 2
  %42 = icmp slt i32 %41, %21
  br i1 %42, label %31, label %43

43:                                               ; preds = %31, %17
  %44 = phi i8* [ %2, %17 ], [ %39, %31 ]
  %45 = phi i8* [ %4, %17 ], [ %40, %31 ]
  %46 = phi i8* [ %19, %17 ], [ %38, %31 ]
  %47 = and i32 %20, 1
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %50, label %49

49:                                               ; preds = %43
  tail call void @AYUVToUVRow_C(i8* %46, i32 0, i8* %45, i32 %6) #4
  tail call void @AYUVToYRow_C(i8* %46, i8* %44, i32 %6) #4
  br label %50

50:                                               ; preds = %43, %49
  ret i32 0
}

declare void @AYUVToUVRow_C(i8*, i32, i8*, i32) local_unnamed_addr #1

declare void @AYUVToYRow_C(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @AYUVToNV21(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp slt i32 %7, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %8
  %11 = sub nsw i32 0, %7
  %12 = xor i32 %7, -1
  %13 = mul nsw i32 %12, %1
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %0, i64 %14
  %16 = sub nsw i32 0, %1
  br label %17

17:                                               ; preds = %10, %8
  %18 = phi i32 [ %16, %10 ], [ %1, %8 ]
  %19 = phi i8* [ %15, %10 ], [ %0, %8 ]
  %20 = phi i32 [ %11, %10 ], [ %7, %8 ]
  %21 = add nsw i32 %20, -1
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %43

23:                                               ; preds = %17
  %24 = sext i32 %18 to i64
  %25 = sext i32 %3 to i64
  %26 = shl nsw i32 %18, 1
  %27 = sext i32 %26 to i64
  %28 = shl nsw i32 %3, 1
  %29 = sext i32 %28 to i64
  %30 = sext i32 %5 to i64
  br label %31

31:                                               ; preds = %23, %31
  %32 = phi i32 [ 0, %23 ], [ %41, %31 ]
  %33 = phi i8* [ %19, %23 ], [ %38, %31 ]
  %34 = phi i8* [ %4, %23 ], [ %40, %31 ]
  %35 = phi i8* [ %2, %23 ], [ %39, %31 ]
  tail call void @AYUVToVURow_C(i8* %33, i32 %18, i8* %34, i32 %6) #4
  tail call void @AYUVToYRow_C(i8* %33, i8* %35, i32 %6) #4
  %36 = getelementptr inbounds i8, i8* %33, i64 %24
  %37 = getelementptr inbounds i8, i8* %35, i64 %25
  tail call void @AYUVToYRow_C(i8* %36, i8* %37, i32 %6) #4
  %38 = getelementptr inbounds i8, i8* %33, i64 %27
  %39 = getelementptr inbounds i8, i8* %35, i64 %29
  %40 = getelementptr inbounds i8, i8* %34, i64 %30
  %41 = add nuw nsw i32 %32, 2
  %42 = icmp slt i32 %41, %21
  br i1 %42, label %31, label %43

43:                                               ; preds = %31, %17
  %44 = phi i8* [ %2, %17 ], [ %39, %31 ]
  %45 = phi i8* [ %4, %17 ], [ %40, %31 ]
  %46 = phi i8* [ %19, %17 ], [ %38, %31 ]
  %47 = and i32 %20, 1
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %50, label %49

49:                                               ; preds = %43
  tail call void @AYUVToVURow_C(i8* %46, i32 0, i8* %45, i32 %6) #4
  tail call void @AYUVToYRow_C(i8* %46, i8* %44, i32 %6) #4
  br label %50

50:                                               ; preds = %43, %49
  ret i32 0
}

declare void @AYUVToVURow_C(i8*, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %101, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 64
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 15
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_SSSE3
  %48 = select i1 %46, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %49

49:                                               ; preds = %44, %40
  %50 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVRow_C, %40 ], [ %47, %44 ]
  %51 = phi void (i8*, i8*, i32)* [ @ARGBToYRow_C, %40 ], [ %48, %44 ]
  %52 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %49
  %55 = tail call i32 @InitCpuFlags() #4
  br label %56

56:                                               ; preds = %49, %54
  %57 = phi i32 [ %55, %54 ], [ %52, %49 ]
  %58 = and i32 %57, 1024
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %65, label %60

60:                                               ; preds = %56
  %61 = and i32 %8, 31
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_AVX2
  %64 = select i1 %62, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %65

65:                                               ; preds = %60, %56
  %66 = phi void (i8*, i32, i8*, i8*, i32)* [ %50, %56 ], [ %63, %60 ]
  %67 = phi void (i8*, i8*, i32)* [ %51, %56 ], [ %64, %60 ]
  %68 = add nsw i32 %35, -1
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %70, label %96

70:                                               ; preds = %65
  %71 = sext i32 %33 to i64
  %72 = sext i32 %3 to i64
  %73 = shl nsw i32 %33, 1
  %74 = sext i32 %73 to i64
  %75 = shl nsw i32 %3, 1
  %76 = sext i32 %75 to i64
  %77 = sext i32 %5 to i64
  %78 = sext i32 %7 to i64
  br label %79

79:                                               ; preds = %70, %79
  %80 = phi i32 [ 0, %70 ], [ %91, %79 ]
  %81 = phi i8* [ %34, %70 ], [ %87, %79 ]
  %82 = phi i8* [ %6, %70 ], [ %90, %79 ]
  %83 = phi i8* [ %4, %70 ], [ %89, %79 ]
  %84 = phi i8* [ %2, %70 ], [ %88, %79 ]
  tail call void %66(i8* %81, i32 %33, i8* %83, i8* %82, i32 %8) #4
  tail call void %67(i8* %81, i8* %84, i32 %8) #4
  %85 = getelementptr inbounds i8, i8* %81, i64 %71
  %86 = getelementptr inbounds i8, i8* %84, i64 %72
  tail call void %67(i8* %85, i8* %86, i32 %8) #4
  %87 = getelementptr inbounds i8, i8* %81, i64 %74
  %88 = getelementptr inbounds i8, i8* %84, i64 %76
  %89 = getelementptr inbounds i8, i8* %83, i64 %77
  %90 = getelementptr inbounds i8, i8* %82, i64 %78
  %91 = add nuw nsw i32 %80, 2
  %92 = icmp slt i32 %91, %68
  br i1 %92, label %79, label %93

93:                                               ; preds = %79
  %94 = and i32 %35, 1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %101, label %96

96:                                               ; preds = %65, %93
  %97 = phi i8* [ %87, %93 ], [ %34, %65 ]
  %98 = phi i8* [ %90, %93 ], [ %6, %65 ]
  %99 = phi i8* [ %89, %93 ], [ %4, %65 ]
  %100 = phi i8* [ %88, %93 ], [ %2, %65 ]
  tail call void %66(i8* %97, i32 0, i8* %99, i8* %98, i32 %8) #4
  tail call void %67(i8* %97, i8* %100, i32 %8) #4
  br label %101

101:                                              ; preds = %96, %93, %10
  %102 = phi i32 [ -1, %10 ], [ 0, %93 ], [ 0, %96 ]
  ret i32 %102
}

declare void @ARGBToUVRow_C(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVRow_Any_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVRow_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVRow_Any_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVRow_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @BGRAToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %85, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 64
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 15
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i32, i8*, i8*, i32)* @BGRAToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @BGRAToUVRow_Any_SSSE3
  %48 = select i1 %46, void (i8*, i8*, i32)* @BGRAToYRow_SSSE3, void (i8*, i8*, i32)* @BGRAToYRow_Any_SSSE3
  br label %49

49:                                               ; preds = %44, %40
  %50 = phi void (i8*, i32, i8*, i8*, i32)* [ @BGRAToUVRow_C, %40 ], [ %47, %44 ]
  %51 = phi void (i8*, i8*, i32)* [ @BGRAToYRow_C, %40 ], [ %48, %44 ]
  %52 = add nsw i32 %35, -1
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %54, label %80

54:                                               ; preds = %49
  %55 = sext i32 %33 to i64
  %56 = sext i32 %3 to i64
  %57 = shl nsw i32 %33, 1
  %58 = sext i32 %57 to i64
  %59 = shl nsw i32 %3, 1
  %60 = sext i32 %59 to i64
  %61 = sext i32 %5 to i64
  %62 = sext i32 %7 to i64
  br label %63

63:                                               ; preds = %54, %63
  %64 = phi i32 [ 0, %54 ], [ %75, %63 ]
  %65 = phi i8* [ %34, %54 ], [ %71, %63 ]
  %66 = phi i8* [ %6, %54 ], [ %74, %63 ]
  %67 = phi i8* [ %4, %54 ], [ %73, %63 ]
  %68 = phi i8* [ %2, %54 ], [ %72, %63 ]
  tail call void %50(i8* %65, i32 %33, i8* %67, i8* %66, i32 %8) #4, !callees !2
  tail call void %51(i8* %65, i8* %68, i32 %8) #4, !callees !3
  %69 = getelementptr inbounds i8, i8* %65, i64 %55
  %70 = getelementptr inbounds i8, i8* %68, i64 %56
  tail call void %51(i8* %69, i8* %70, i32 %8) #4, !callees !3
  %71 = getelementptr inbounds i8, i8* %65, i64 %58
  %72 = getelementptr inbounds i8, i8* %68, i64 %60
  %73 = getelementptr inbounds i8, i8* %67, i64 %61
  %74 = getelementptr inbounds i8, i8* %66, i64 %62
  %75 = add nuw nsw i32 %64, 2
  %76 = icmp slt i32 %75, %52
  br i1 %76, label %63, label %77

77:                                               ; preds = %63
  %78 = and i32 %35, 1
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %85, label %80

80:                                               ; preds = %49, %77
  %81 = phi i8* [ %71, %77 ], [ %34, %49 ]
  %82 = phi i8* [ %74, %77 ], [ %6, %49 ]
  %83 = phi i8* [ %73, %77 ], [ %4, %49 ]
  %84 = phi i8* [ %72, %77 ], [ %2, %49 ]
  tail call void %50(i8* %81, i32 0, i8* %83, i8* %82, i32 %8) #4, !callees !2
  tail call void %51(i8* %81, i8* %84, i32 %8) #4, !callees !3
  br label %85

85:                                               ; preds = %80, %77, %10
  %86 = phi i32 [ -1, %10 ], [ 0, %77 ], [ 0, %80 ]
  ret i32 %86
}

declare void @BGRAToUVRow_C(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @BGRAToYRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @BGRAToUVRow_Any_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @BGRAToYRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @BGRAToUVRow_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @BGRAToYRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ABGRToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %101, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 64
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 15
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_Any_SSSE3
  %48 = select i1 %46, void (i8*, i8*, i32)* @ABGRToYRow_SSSE3, void (i8*, i8*, i32)* @ABGRToYRow_Any_SSSE3
  br label %49

49:                                               ; preds = %44, %40
  %50 = phi void (i8*, i32, i8*, i8*, i32)* [ @ABGRToUVRow_C, %40 ], [ %47, %44 ]
  %51 = phi void (i8*, i8*, i32)* [ @ABGRToYRow_C, %40 ], [ %48, %44 ]
  %52 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %49
  %55 = tail call i32 @InitCpuFlags() #4
  br label %56

56:                                               ; preds = %49, %54
  %57 = phi i32 [ %55, %54 ], [ %52, %49 ]
  %58 = and i32 %57, 1024
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %65, label %60

60:                                               ; preds = %56
  %61 = and i32 %8, 31
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_Any_AVX2
  %64 = select i1 %62, void (i8*, i8*, i32)* @ABGRToYRow_AVX2, void (i8*, i8*, i32)* @ABGRToYRow_Any_AVX2
  br label %65

65:                                               ; preds = %60, %56
  %66 = phi void (i8*, i32, i8*, i8*, i32)* [ %50, %56 ], [ %63, %60 ]
  %67 = phi void (i8*, i8*, i32)* [ %51, %56 ], [ %64, %60 ]
  %68 = add nsw i32 %35, -1
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %70, label %96

70:                                               ; preds = %65
  %71 = sext i32 %33 to i64
  %72 = sext i32 %3 to i64
  %73 = shl nsw i32 %33, 1
  %74 = sext i32 %73 to i64
  %75 = shl nsw i32 %3, 1
  %76 = sext i32 %75 to i64
  %77 = sext i32 %5 to i64
  %78 = sext i32 %7 to i64
  br label %79

79:                                               ; preds = %70, %79
  %80 = phi i32 [ 0, %70 ], [ %91, %79 ]
  %81 = phi i8* [ %34, %70 ], [ %87, %79 ]
  %82 = phi i8* [ %6, %70 ], [ %90, %79 ]
  %83 = phi i8* [ %4, %70 ], [ %89, %79 ]
  %84 = phi i8* [ %2, %70 ], [ %88, %79 ]
  tail call void %66(i8* %81, i32 %33, i8* %83, i8* %82, i32 %8) #4
  tail call void %67(i8* %81, i8* %84, i32 %8) #4
  %85 = getelementptr inbounds i8, i8* %81, i64 %71
  %86 = getelementptr inbounds i8, i8* %84, i64 %72
  tail call void %67(i8* %85, i8* %86, i32 %8) #4
  %87 = getelementptr inbounds i8, i8* %81, i64 %74
  %88 = getelementptr inbounds i8, i8* %84, i64 %76
  %89 = getelementptr inbounds i8, i8* %83, i64 %77
  %90 = getelementptr inbounds i8, i8* %82, i64 %78
  %91 = add nuw nsw i32 %80, 2
  %92 = icmp slt i32 %91, %68
  br i1 %92, label %79, label %93

93:                                               ; preds = %79
  %94 = and i32 %35, 1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %101, label %96

96:                                               ; preds = %65, %93
  %97 = phi i8* [ %87, %93 ], [ %34, %65 ]
  %98 = phi i8* [ %90, %93 ], [ %6, %65 ]
  %99 = phi i8* [ %89, %93 ], [ %4, %65 ]
  %100 = phi i8* [ %88, %93 ], [ %2, %65 ]
  tail call void %66(i8* %97, i32 0, i8* %99, i8* %98, i32 %8) #4
  tail call void %67(i8* %97, i8* %100, i32 %8) #4
  br label %101

101:                                              ; preds = %96, %93, %10
  %102 = phi i32 [ -1, %10 ], [ 0, %93 ], [ 0, %96 ]
  ret i32 %102
}

declare void @ABGRToUVRow_C(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToYRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToUVRow_Any_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToYRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToUVRow_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToYRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToUVRow_Any_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToYRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToUVRow_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToYRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RGBAToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %85, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 64
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 15
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i32, i8*, i8*, i32)* @RGBAToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @RGBAToUVRow_Any_SSSE3
  %48 = select i1 %46, void (i8*, i8*, i32)* @RGBAToYRow_SSSE3, void (i8*, i8*, i32)* @RGBAToYRow_Any_SSSE3
  br label %49

49:                                               ; preds = %44, %40
  %50 = phi void (i8*, i32, i8*, i8*, i32)* [ @RGBAToUVRow_C, %40 ], [ %47, %44 ]
  %51 = phi void (i8*, i8*, i32)* [ @RGBAToYRow_C, %40 ], [ %48, %44 ]
  %52 = add nsw i32 %35, -1
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %54, label %80

54:                                               ; preds = %49
  %55 = sext i32 %33 to i64
  %56 = sext i32 %3 to i64
  %57 = shl nsw i32 %33, 1
  %58 = sext i32 %57 to i64
  %59 = shl nsw i32 %3, 1
  %60 = sext i32 %59 to i64
  %61 = sext i32 %5 to i64
  %62 = sext i32 %7 to i64
  br label %63

63:                                               ; preds = %54, %63
  %64 = phi i32 [ 0, %54 ], [ %75, %63 ]
  %65 = phi i8* [ %34, %54 ], [ %71, %63 ]
  %66 = phi i8* [ %6, %54 ], [ %74, %63 ]
  %67 = phi i8* [ %4, %54 ], [ %73, %63 ]
  %68 = phi i8* [ %2, %54 ], [ %72, %63 ]
  tail call void %50(i8* %65, i32 %33, i8* %67, i8* %66, i32 %8) #4, !callees !4
  tail call void %51(i8* %65, i8* %68, i32 %8) #4, !callees !5
  %69 = getelementptr inbounds i8, i8* %65, i64 %55
  %70 = getelementptr inbounds i8, i8* %68, i64 %56
  tail call void %51(i8* %69, i8* %70, i32 %8) #4, !callees !5
  %71 = getelementptr inbounds i8, i8* %65, i64 %58
  %72 = getelementptr inbounds i8, i8* %68, i64 %60
  %73 = getelementptr inbounds i8, i8* %67, i64 %61
  %74 = getelementptr inbounds i8, i8* %66, i64 %62
  %75 = add nuw nsw i32 %64, 2
  %76 = icmp slt i32 %75, %52
  br i1 %76, label %63, label %77

77:                                               ; preds = %63
  %78 = and i32 %35, 1
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %85, label %80

80:                                               ; preds = %49, %77
  %81 = phi i8* [ %71, %77 ], [ %34, %49 ]
  %82 = phi i8* [ %74, %77 ], [ %6, %49 ]
  %83 = phi i8* [ %73, %77 ], [ %4, %49 ]
  %84 = phi i8* [ %72, %77 ], [ %2, %49 ]
  tail call void %50(i8* %81, i32 0, i8* %83, i8* %82, i32 %8) #4, !callees !4
  tail call void %51(i8* %81, i8* %84, i32 %8) #4, !callees !5
  br label %85

85:                                               ; preds = %80, %77, %10
  %86 = phi i32 [ -1, %10 ], [ 0, %77 ], [ 0, %80 ]
  ret i32 %86
}

declare void @RGBAToUVRow_C(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @RGBAToYRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGBAToUVRow_Any_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @RGBAToYRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGBAToUVRow_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @RGBAToYRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RGB24ToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %129, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 64
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 15
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i8*, i32)* @RGB24ToARGBRow_SSSE3, void (i8*, i8*, i32)* @RGB24ToARGBRow_Any_SSSE3
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi void (i8*, i8*, i32)* [ %47, %44 ], [ @RGB24ToARGBRow_C, %40 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = tail call i32 @InitCpuFlags() #4
  br label %54

54:                                               ; preds = %48, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %48 ]
  %56 = and i32 %55, 64
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = and i32 %8, 15
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_SSSE3
  %62 = select i1 %60, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %63

63:                                               ; preds = %58, %54
  %64 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVRow_C, %54 ], [ %61, %58 ]
  %65 = phi void (i8*, i8*, i32)* [ @ARGBToYRow_C, %54 ], [ %62, %58 ]
  %66 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = tail call i32 @InitCpuFlags() #4
  br label %70

70:                                               ; preds = %63, %68
  %71 = phi i32 [ %69, %68 ], [ %66, %63 ]
  %72 = and i32 %71, 1024
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %70
  %75 = and i32 %8, 31
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_AVX2
  %78 = select i1 %76, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %79

79:                                               ; preds = %74, %70
  %80 = phi void (i8*, i32, i8*, i8*, i32)* [ %64, %70 ], [ %77, %74 ]
  %81 = phi void (i8*, i8*, i32)* [ %65, %70 ], [ %78, %74 ]
  %82 = shl nsw i32 %8, 2
  %83 = add nsw i32 %82, 31
  %84 = and i32 %83, -32
  %85 = shl nsw i32 %83, 1
  %86 = or i32 %85, 63
  %87 = sext i32 %86 to i64
  %88 = tail call noalias i8* @malloc(i64 %87) #4
  %89 = ptrtoint i8* %88 to i64
  %90 = add nsw i64 %89, 63
  %91 = and i64 %90, -64
  %92 = inttoptr i64 %91 to i8*
  %93 = add nsw i32 %35, -1
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %95, label %123

95:                                               ; preds = %79
  %96 = sext i32 %33 to i64
  %97 = sext i32 %84 to i64
  %98 = getelementptr inbounds i8, i8* %92, i64 %97
  %99 = sext i32 %3 to i64
  %100 = shl nsw i32 %33, 1
  %101 = sext i32 %100 to i64
  %102 = shl nsw i32 %3, 1
  %103 = sext i32 %102 to i64
  %104 = sext i32 %5 to i64
  %105 = sext i32 %7 to i64
  br label %106

106:                                              ; preds = %95, %106
  %107 = phi i32 [ 0, %95 ], [ %118, %106 ]
  %108 = phi i8* [ %34, %95 ], [ %114, %106 ]
  %109 = phi i8* [ %6, %95 ], [ %117, %106 ]
  %110 = phi i8* [ %4, %95 ], [ %116, %106 ]
  %111 = phi i8* [ %2, %95 ], [ %115, %106 ]
  tail call void %49(i8* %108, i8* %92, i32 %8) #4, !callees !6
  %112 = getelementptr inbounds i8, i8* %108, i64 %96
  tail call void %49(i8* %112, i8* %98, i32 %8) #4, !callees !6
  tail call void %80(i8* %92, i32 %84, i8* %110, i8* %109, i32 %8) #4
  tail call void %81(i8* %92, i8* %111, i32 %8) #4
  %113 = getelementptr inbounds i8, i8* %111, i64 %99
  tail call void %81(i8* %98, i8* %113, i32 %8) #4
  %114 = getelementptr inbounds i8, i8* %108, i64 %101
  %115 = getelementptr inbounds i8, i8* %111, i64 %103
  %116 = getelementptr inbounds i8, i8* %110, i64 %104
  %117 = getelementptr inbounds i8, i8* %109, i64 %105
  %118 = add nuw nsw i32 %107, 2
  %119 = icmp slt i32 %118, %93
  br i1 %119, label %106, label %120

120:                                              ; preds = %106
  %121 = and i32 %35, 1
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %128, label %123

123:                                              ; preds = %79, %120
  %124 = phi i8* [ %114, %120 ], [ %34, %79 ]
  %125 = phi i8* [ %117, %120 ], [ %6, %79 ]
  %126 = phi i8* [ %116, %120 ], [ %4, %79 ]
  %127 = phi i8* [ %115, %120 ], [ %2, %79 ]
  tail call void %49(i8* %124, i8* %92, i32 %8) #4, !callees !6
  tail call void %80(i8* %92, i32 0, i8* %126, i8* %125, i32 %8) #4
  tail call void %81(i8* %92, i8* %127, i32 %8) #4
  br label %128

128:                                              ; preds = %120, %123
  tail call void @free(i8* %88) #4
  br label %129

129:                                              ; preds = %10, %128
  %130 = phi i32 [ 0, %128 ], [ -1, %10 ]
  ret i32 %130
}

declare void @RGB24ToARGBRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGB24ToARGBRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGB24ToARGBRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RGB24ToJ420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %129, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 64
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 15
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i8*, i32)* @RGB24ToARGBRow_SSSE3, void (i8*, i8*, i32)* @RGB24ToARGBRow_Any_SSSE3
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi void (i8*, i8*, i32)* [ %47, %44 ], [ @RGB24ToARGBRow_C, %40 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = tail call i32 @InitCpuFlags() #4
  br label %54

54:                                               ; preds = %48, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %48 ]
  %56 = and i32 %55, 64
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = and i32 %8, 15
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_Any_SSSE3
  %62 = select i1 %60, void (i8*, i8*, i32)* @ARGBToYJRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYJRow_Any_SSSE3
  br label %63

63:                                               ; preds = %58, %54
  %64 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVJRow_C, %54 ], [ %61, %58 ]
  %65 = phi void (i8*, i8*, i32)* [ @ARGBToYJRow_C, %54 ], [ %62, %58 ]
  %66 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = tail call i32 @InitCpuFlags() #4
  br label %70

70:                                               ; preds = %63, %68
  %71 = phi i32 [ %69, %68 ], [ %66, %63 ]
  %72 = and i32 %71, 1024
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %70
  %75 = and i32 %8, 31
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_Any_AVX2
  %78 = select i1 %76, void (i8*, i8*, i32)* @ARGBToYJRow_AVX2, void (i8*, i8*, i32)* @ARGBToYJRow_Any_AVX2
  br label %79

79:                                               ; preds = %74, %70
  %80 = phi void (i8*, i32, i8*, i8*, i32)* [ %64, %70 ], [ %77, %74 ]
  %81 = phi void (i8*, i8*, i32)* [ %65, %70 ], [ %78, %74 ]
  %82 = shl nsw i32 %8, 2
  %83 = add nsw i32 %82, 31
  %84 = and i32 %83, -32
  %85 = shl nsw i32 %83, 1
  %86 = or i32 %85, 63
  %87 = sext i32 %86 to i64
  %88 = tail call noalias i8* @malloc(i64 %87) #4
  %89 = ptrtoint i8* %88 to i64
  %90 = add nsw i64 %89, 63
  %91 = and i64 %90, -64
  %92 = inttoptr i64 %91 to i8*
  %93 = add nsw i32 %35, -1
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %95, label %123

95:                                               ; preds = %79
  %96 = sext i32 %33 to i64
  %97 = sext i32 %84 to i64
  %98 = getelementptr inbounds i8, i8* %92, i64 %97
  %99 = sext i32 %3 to i64
  %100 = shl nsw i32 %33, 1
  %101 = sext i32 %100 to i64
  %102 = shl nsw i32 %3, 1
  %103 = sext i32 %102 to i64
  %104 = sext i32 %5 to i64
  %105 = sext i32 %7 to i64
  br label %106

106:                                              ; preds = %95, %106
  %107 = phi i32 [ 0, %95 ], [ %118, %106 ]
  %108 = phi i8* [ %34, %95 ], [ %114, %106 ]
  %109 = phi i8* [ %6, %95 ], [ %117, %106 ]
  %110 = phi i8* [ %4, %95 ], [ %116, %106 ]
  %111 = phi i8* [ %2, %95 ], [ %115, %106 ]
  tail call void %49(i8* %108, i8* %92, i32 %8) #4, !callees !6
  %112 = getelementptr inbounds i8, i8* %108, i64 %96
  tail call void %49(i8* %112, i8* %98, i32 %8) #4, !callees !6
  tail call void %80(i8* %92, i32 %84, i8* %110, i8* %109, i32 %8) #4
  tail call void %81(i8* %92, i8* %111, i32 %8) #4
  %113 = getelementptr inbounds i8, i8* %111, i64 %99
  tail call void %81(i8* %98, i8* %113, i32 %8) #4
  %114 = getelementptr inbounds i8, i8* %108, i64 %101
  %115 = getelementptr inbounds i8, i8* %111, i64 %103
  %116 = getelementptr inbounds i8, i8* %110, i64 %104
  %117 = getelementptr inbounds i8, i8* %109, i64 %105
  %118 = add nuw nsw i32 %107, 2
  %119 = icmp slt i32 %118, %93
  br i1 %119, label %106, label %120

120:                                              ; preds = %106
  %121 = and i32 %35, 1
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %128, label %123

123:                                              ; preds = %79, %120
  %124 = phi i8* [ %114, %120 ], [ %34, %79 ]
  %125 = phi i8* [ %117, %120 ], [ %6, %79 ]
  %126 = phi i8* [ %116, %120 ], [ %4, %79 ]
  %127 = phi i8* [ %115, %120 ], [ %2, %79 ]
  tail call void %49(i8* %124, i8* %92, i32 %8) #4, !callees !6
  tail call void %80(i8* %92, i32 0, i8* %126, i8* %125, i32 %8) #4
  tail call void %81(i8* %92, i8* %127, i32 %8) #4
  br label %128

128:                                              ; preds = %120, %123
  tail call void @free(i8* %88) #4
  br label %129

129:                                              ; preds = %10, %128
  %130 = phi i32 [ 0, %128 ], [ -1, %10 ]
  ret i32 %130
}

declare void @ARGBToUVJRow_C(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYJRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVJRow_Any_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYJRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVJRow_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYJRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVJRow_Any_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYJRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVJRow_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYJRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RAWToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %129, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 64
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 15
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i8*, i32)* @RAWToARGBRow_SSSE3, void (i8*, i8*, i32)* @RAWToARGBRow_Any_SSSE3
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi void (i8*, i8*, i32)* [ %47, %44 ], [ @RAWToARGBRow_C, %40 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = tail call i32 @InitCpuFlags() #4
  br label %54

54:                                               ; preds = %48, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %48 ]
  %56 = and i32 %55, 64
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = and i32 %8, 15
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_SSSE3
  %62 = select i1 %60, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %63

63:                                               ; preds = %58, %54
  %64 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVRow_C, %54 ], [ %61, %58 ]
  %65 = phi void (i8*, i8*, i32)* [ @ARGBToYRow_C, %54 ], [ %62, %58 ]
  %66 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = tail call i32 @InitCpuFlags() #4
  br label %70

70:                                               ; preds = %63, %68
  %71 = phi i32 [ %69, %68 ], [ %66, %63 ]
  %72 = and i32 %71, 1024
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %70
  %75 = and i32 %8, 31
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_AVX2
  %78 = select i1 %76, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %79

79:                                               ; preds = %74, %70
  %80 = phi void (i8*, i32, i8*, i8*, i32)* [ %64, %70 ], [ %77, %74 ]
  %81 = phi void (i8*, i8*, i32)* [ %65, %70 ], [ %78, %74 ]
  %82 = shl nsw i32 %8, 2
  %83 = add nsw i32 %82, 31
  %84 = and i32 %83, -32
  %85 = shl nsw i32 %83, 1
  %86 = or i32 %85, 63
  %87 = sext i32 %86 to i64
  %88 = tail call noalias i8* @malloc(i64 %87) #4
  %89 = ptrtoint i8* %88 to i64
  %90 = add nsw i64 %89, 63
  %91 = and i64 %90, -64
  %92 = inttoptr i64 %91 to i8*
  %93 = add nsw i32 %35, -1
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %95, label %123

95:                                               ; preds = %79
  %96 = sext i32 %33 to i64
  %97 = sext i32 %84 to i64
  %98 = getelementptr inbounds i8, i8* %92, i64 %97
  %99 = sext i32 %3 to i64
  %100 = shl nsw i32 %33, 1
  %101 = sext i32 %100 to i64
  %102 = shl nsw i32 %3, 1
  %103 = sext i32 %102 to i64
  %104 = sext i32 %5 to i64
  %105 = sext i32 %7 to i64
  br label %106

106:                                              ; preds = %95, %106
  %107 = phi i32 [ 0, %95 ], [ %118, %106 ]
  %108 = phi i8* [ %34, %95 ], [ %114, %106 ]
  %109 = phi i8* [ %6, %95 ], [ %117, %106 ]
  %110 = phi i8* [ %4, %95 ], [ %116, %106 ]
  %111 = phi i8* [ %2, %95 ], [ %115, %106 ]
  tail call void %49(i8* %108, i8* %92, i32 %8) #4, !callees !7
  %112 = getelementptr inbounds i8, i8* %108, i64 %96
  tail call void %49(i8* %112, i8* %98, i32 %8) #4, !callees !7
  tail call void %80(i8* %92, i32 %84, i8* %110, i8* %109, i32 %8) #4
  tail call void %81(i8* %92, i8* %111, i32 %8) #4
  %113 = getelementptr inbounds i8, i8* %111, i64 %99
  tail call void %81(i8* %98, i8* %113, i32 %8) #4
  %114 = getelementptr inbounds i8, i8* %108, i64 %101
  %115 = getelementptr inbounds i8, i8* %111, i64 %103
  %116 = getelementptr inbounds i8, i8* %110, i64 %104
  %117 = getelementptr inbounds i8, i8* %109, i64 %105
  %118 = add nuw nsw i32 %107, 2
  %119 = icmp slt i32 %118, %93
  br i1 %119, label %106, label %120

120:                                              ; preds = %106
  %121 = and i32 %35, 1
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %128, label %123

123:                                              ; preds = %79, %120
  %124 = phi i8* [ %114, %120 ], [ %34, %79 ]
  %125 = phi i8* [ %117, %120 ], [ %6, %79 ]
  %126 = phi i8* [ %116, %120 ], [ %4, %79 ]
  %127 = phi i8* [ %115, %120 ], [ %2, %79 ]
  tail call void %49(i8* %124, i8* %92, i32 %8) #4, !callees !7
  tail call void %80(i8* %92, i32 0, i8* %126, i8* %125, i32 %8) #4
  tail call void %81(i8* %92, i8* %127, i32 %8) #4
  br label %128

128:                                              ; preds = %120, %123
  tail call void @free(i8* %88) #4
  br label %129

129:                                              ; preds = %10, %128
  %130 = phi i32 [ 0, %128 ], [ -1, %10 ]
  ret i32 %130
}

declare void @RAWToARGBRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @RAWToARGBRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @RAWToARGBRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RAWToJ420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %129, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 64
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 15
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i8*, i32)* @RAWToARGBRow_SSSE3, void (i8*, i8*, i32)* @RAWToARGBRow_Any_SSSE3
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi void (i8*, i8*, i32)* [ %47, %44 ], [ @RAWToARGBRow_C, %40 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = tail call i32 @InitCpuFlags() #4
  br label %54

54:                                               ; preds = %48, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %48 ]
  %56 = and i32 %55, 64
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = and i32 %8, 15
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_Any_SSSE3
  %62 = select i1 %60, void (i8*, i8*, i32)* @ARGBToYJRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYJRow_Any_SSSE3
  br label %63

63:                                               ; preds = %58, %54
  %64 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVJRow_C, %54 ], [ %61, %58 ]
  %65 = phi void (i8*, i8*, i32)* [ @ARGBToYJRow_C, %54 ], [ %62, %58 ]
  %66 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = tail call i32 @InitCpuFlags() #4
  br label %70

70:                                               ; preds = %63, %68
  %71 = phi i32 [ %69, %68 ], [ %66, %63 ]
  %72 = and i32 %71, 1024
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %70
  %75 = and i32 %8, 31
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_Any_AVX2
  %78 = select i1 %76, void (i8*, i8*, i32)* @ARGBToYJRow_AVX2, void (i8*, i8*, i32)* @ARGBToYJRow_Any_AVX2
  br label %79

79:                                               ; preds = %74, %70
  %80 = phi void (i8*, i32, i8*, i8*, i32)* [ %64, %70 ], [ %77, %74 ]
  %81 = phi void (i8*, i8*, i32)* [ %65, %70 ], [ %78, %74 ]
  %82 = shl nsw i32 %8, 2
  %83 = add nsw i32 %82, 31
  %84 = and i32 %83, -32
  %85 = shl nsw i32 %83, 1
  %86 = or i32 %85, 63
  %87 = sext i32 %86 to i64
  %88 = tail call noalias i8* @malloc(i64 %87) #4
  %89 = ptrtoint i8* %88 to i64
  %90 = add nsw i64 %89, 63
  %91 = and i64 %90, -64
  %92 = inttoptr i64 %91 to i8*
  %93 = add nsw i32 %35, -1
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %95, label %123

95:                                               ; preds = %79
  %96 = sext i32 %33 to i64
  %97 = sext i32 %84 to i64
  %98 = getelementptr inbounds i8, i8* %92, i64 %97
  %99 = sext i32 %3 to i64
  %100 = shl nsw i32 %33, 1
  %101 = sext i32 %100 to i64
  %102 = shl nsw i32 %3, 1
  %103 = sext i32 %102 to i64
  %104 = sext i32 %5 to i64
  %105 = sext i32 %7 to i64
  br label %106

106:                                              ; preds = %95, %106
  %107 = phi i32 [ 0, %95 ], [ %118, %106 ]
  %108 = phi i8* [ %34, %95 ], [ %114, %106 ]
  %109 = phi i8* [ %6, %95 ], [ %117, %106 ]
  %110 = phi i8* [ %4, %95 ], [ %116, %106 ]
  %111 = phi i8* [ %2, %95 ], [ %115, %106 ]
  tail call void %49(i8* %108, i8* %92, i32 %8) #4, !callees !7
  %112 = getelementptr inbounds i8, i8* %108, i64 %96
  tail call void %49(i8* %112, i8* %98, i32 %8) #4, !callees !7
  tail call void %80(i8* %92, i32 %84, i8* %110, i8* %109, i32 %8) #4
  tail call void %81(i8* %92, i8* %111, i32 %8) #4
  %113 = getelementptr inbounds i8, i8* %111, i64 %99
  tail call void %81(i8* %98, i8* %113, i32 %8) #4
  %114 = getelementptr inbounds i8, i8* %108, i64 %101
  %115 = getelementptr inbounds i8, i8* %111, i64 %103
  %116 = getelementptr inbounds i8, i8* %110, i64 %104
  %117 = getelementptr inbounds i8, i8* %109, i64 %105
  %118 = add nuw nsw i32 %107, 2
  %119 = icmp slt i32 %118, %93
  br i1 %119, label %106, label %120

120:                                              ; preds = %106
  %121 = and i32 %35, 1
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %128, label %123

123:                                              ; preds = %79, %120
  %124 = phi i8* [ %114, %120 ], [ %34, %79 ]
  %125 = phi i8* [ %117, %120 ], [ %6, %79 ]
  %126 = phi i8* [ %116, %120 ], [ %4, %79 ]
  %127 = phi i8* [ %115, %120 ], [ %2, %79 ]
  tail call void %49(i8* %124, i8* %92, i32 %8) #4, !callees !7
  tail call void %80(i8* %92, i32 0, i8* %126, i8* %125, i32 %8) #4
  tail call void %81(i8* %92, i8* %127, i32 %8) #4
  br label %128

128:                                              ; preds = %120, %123
  tail call void @free(i8* %88) #4
  br label %129

129:                                              ; preds = %10, %128
  %130 = phi i32 [ 0, %128 ], [ -1, %10 ]
  ret i32 %130
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RGB565ToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %129, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 32
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 7
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i8*, i32)* @RGB565ToARGBRow_SSE2, void (i8*, i8*, i32)* @RGB565ToARGBRow_Any_SSE2
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi void (i8*, i8*, i32)* [ %47, %44 ], [ @RGB565ToARGBRow_C, %40 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = tail call i32 @InitCpuFlags() #4
  br label %54

54:                                               ; preds = %48, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %48 ]
  %56 = and i32 %55, 64
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = and i32 %8, 15
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_SSSE3
  %62 = select i1 %60, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %63

63:                                               ; preds = %58, %54
  %64 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVRow_C, %54 ], [ %61, %58 ]
  %65 = phi void (i8*, i8*, i32)* [ @ARGBToYRow_C, %54 ], [ %62, %58 ]
  %66 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = tail call i32 @InitCpuFlags() #4
  br label %70

70:                                               ; preds = %63, %68
  %71 = phi i32 [ %69, %68 ], [ %66, %63 ]
  %72 = and i32 %71, 1024
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %70
  %75 = and i32 %8, 31
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_AVX2
  %78 = select i1 %76, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %79

79:                                               ; preds = %74, %70
  %80 = phi void (i8*, i32, i8*, i8*, i32)* [ %64, %70 ], [ %77, %74 ]
  %81 = phi void (i8*, i8*, i32)* [ %65, %70 ], [ %78, %74 ]
  %82 = shl nsw i32 %8, 2
  %83 = add nsw i32 %82, 31
  %84 = and i32 %83, -32
  %85 = shl nsw i32 %83, 1
  %86 = or i32 %85, 63
  %87 = sext i32 %86 to i64
  %88 = tail call noalias i8* @malloc(i64 %87) #4
  %89 = ptrtoint i8* %88 to i64
  %90 = add nsw i64 %89, 63
  %91 = and i64 %90, -64
  %92 = inttoptr i64 %91 to i8*
  %93 = add nsw i32 %35, -1
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %95, label %123

95:                                               ; preds = %79
  %96 = sext i32 %33 to i64
  %97 = sext i32 %84 to i64
  %98 = getelementptr inbounds i8, i8* %92, i64 %97
  %99 = sext i32 %3 to i64
  %100 = shl nsw i32 %33, 1
  %101 = sext i32 %100 to i64
  %102 = shl nsw i32 %3, 1
  %103 = sext i32 %102 to i64
  %104 = sext i32 %5 to i64
  %105 = sext i32 %7 to i64
  br label %106

106:                                              ; preds = %95, %106
  %107 = phi i32 [ 0, %95 ], [ %118, %106 ]
  %108 = phi i8* [ %34, %95 ], [ %114, %106 ]
  %109 = phi i8* [ %6, %95 ], [ %117, %106 ]
  %110 = phi i8* [ %4, %95 ], [ %116, %106 ]
  %111 = phi i8* [ %2, %95 ], [ %115, %106 ]
  tail call void %49(i8* %108, i8* %92, i32 %8) #4, !callees !8
  %112 = getelementptr inbounds i8, i8* %108, i64 %96
  tail call void %49(i8* %112, i8* %98, i32 %8) #4, !callees !8
  tail call void %80(i8* %92, i32 %84, i8* %110, i8* %109, i32 %8) #4
  tail call void %81(i8* %92, i8* %111, i32 %8) #4
  %113 = getelementptr inbounds i8, i8* %111, i64 %99
  tail call void %81(i8* %98, i8* %113, i32 %8) #4
  %114 = getelementptr inbounds i8, i8* %108, i64 %101
  %115 = getelementptr inbounds i8, i8* %111, i64 %103
  %116 = getelementptr inbounds i8, i8* %110, i64 %104
  %117 = getelementptr inbounds i8, i8* %109, i64 %105
  %118 = add nuw nsw i32 %107, 2
  %119 = icmp slt i32 %118, %93
  br i1 %119, label %106, label %120

120:                                              ; preds = %106
  %121 = and i32 %35, 1
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %128, label %123

123:                                              ; preds = %79, %120
  %124 = phi i8* [ %114, %120 ], [ %34, %79 ]
  %125 = phi i8* [ %117, %120 ], [ %6, %79 ]
  %126 = phi i8* [ %116, %120 ], [ %4, %79 ]
  %127 = phi i8* [ %115, %120 ], [ %2, %79 ]
  tail call void %49(i8* %124, i8* %92, i32 %8) #4, !callees !8
  tail call void %80(i8* %92, i32 0, i8* %126, i8* %125, i32 %8) #4
  tail call void %81(i8* %92, i8* %127, i32 %8) #4
  br label %128

128:                                              ; preds = %120, %123
  tail call void @free(i8* %88) #4
  br label %129

129:                                              ; preds = %10, %128
  %130 = phi i32 [ 0, %128 ], [ -1, %10 ]
  ret i32 %130
}

declare void @RGB565ToARGBRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGB565ToARGBRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGB565ToARGBRow_SSE2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGB1555ToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %129, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 32
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 7
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i8*, i32)* @ARGB1555ToARGBRow_SSE2, void (i8*, i8*, i32)* @ARGB1555ToARGBRow_Any_SSE2
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi void (i8*, i8*, i32)* [ %47, %44 ], [ @ARGB1555ToARGBRow_C, %40 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = tail call i32 @InitCpuFlags() #4
  br label %54

54:                                               ; preds = %48, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %48 ]
  %56 = and i32 %55, 64
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = and i32 %8, 15
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_SSSE3
  %62 = select i1 %60, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %63

63:                                               ; preds = %58, %54
  %64 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVRow_C, %54 ], [ %61, %58 ]
  %65 = phi void (i8*, i8*, i32)* [ @ARGBToYRow_C, %54 ], [ %62, %58 ]
  %66 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = tail call i32 @InitCpuFlags() #4
  br label %70

70:                                               ; preds = %63, %68
  %71 = phi i32 [ %69, %68 ], [ %66, %63 ]
  %72 = and i32 %71, 1024
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %70
  %75 = and i32 %8, 31
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_AVX2
  %78 = select i1 %76, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %79

79:                                               ; preds = %74, %70
  %80 = phi void (i8*, i32, i8*, i8*, i32)* [ %64, %70 ], [ %77, %74 ]
  %81 = phi void (i8*, i8*, i32)* [ %65, %70 ], [ %78, %74 ]
  %82 = shl nsw i32 %8, 2
  %83 = add nsw i32 %82, 31
  %84 = and i32 %83, -32
  %85 = shl nsw i32 %83, 1
  %86 = or i32 %85, 63
  %87 = sext i32 %86 to i64
  %88 = tail call noalias i8* @malloc(i64 %87) #4
  %89 = ptrtoint i8* %88 to i64
  %90 = add nsw i64 %89, 63
  %91 = and i64 %90, -64
  %92 = inttoptr i64 %91 to i8*
  %93 = add nsw i32 %35, -1
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %95, label %123

95:                                               ; preds = %79
  %96 = sext i32 %33 to i64
  %97 = sext i32 %84 to i64
  %98 = getelementptr inbounds i8, i8* %92, i64 %97
  %99 = sext i32 %3 to i64
  %100 = shl nsw i32 %33, 1
  %101 = sext i32 %100 to i64
  %102 = shl nsw i32 %3, 1
  %103 = sext i32 %102 to i64
  %104 = sext i32 %5 to i64
  %105 = sext i32 %7 to i64
  br label %106

106:                                              ; preds = %95, %106
  %107 = phi i32 [ 0, %95 ], [ %118, %106 ]
  %108 = phi i8* [ %34, %95 ], [ %114, %106 ]
  %109 = phi i8* [ %6, %95 ], [ %117, %106 ]
  %110 = phi i8* [ %4, %95 ], [ %116, %106 ]
  %111 = phi i8* [ %2, %95 ], [ %115, %106 ]
  tail call void %49(i8* %108, i8* %92, i32 %8) #4, !callees !9
  %112 = getelementptr inbounds i8, i8* %108, i64 %96
  tail call void %49(i8* %112, i8* %98, i32 %8) #4, !callees !9
  tail call void %80(i8* %92, i32 %84, i8* %110, i8* %109, i32 %8) #4
  tail call void %81(i8* %92, i8* %111, i32 %8) #4
  %113 = getelementptr inbounds i8, i8* %111, i64 %99
  tail call void %81(i8* %98, i8* %113, i32 %8) #4
  %114 = getelementptr inbounds i8, i8* %108, i64 %101
  %115 = getelementptr inbounds i8, i8* %111, i64 %103
  %116 = getelementptr inbounds i8, i8* %110, i64 %104
  %117 = getelementptr inbounds i8, i8* %109, i64 %105
  %118 = add nuw nsw i32 %107, 2
  %119 = icmp slt i32 %118, %93
  br i1 %119, label %106, label %120

120:                                              ; preds = %106
  %121 = and i32 %35, 1
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %128, label %123

123:                                              ; preds = %79, %120
  %124 = phi i8* [ %114, %120 ], [ %34, %79 ]
  %125 = phi i8* [ %117, %120 ], [ %6, %79 ]
  %126 = phi i8* [ %116, %120 ], [ %4, %79 ]
  %127 = phi i8* [ %115, %120 ], [ %2, %79 ]
  tail call void %49(i8* %124, i8* %92, i32 %8) #4, !callees !9
  tail call void %80(i8* %92, i32 0, i8* %126, i8* %125, i32 %8) #4
  tail call void %81(i8* %92, i8* %127, i32 %8) #4
  br label %128

128:                                              ; preds = %120, %123
  tail call void @free(i8* %88) #4
  br label %129

129:                                              ; preds = %10, %128
  %130 = phi i32 [ 0, %128 ], [ -1, %10 ]
  ret i32 %130
}

declare void @ARGB1555ToARGBRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGB1555ToARGBRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGB1555ToARGBRow_SSE2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGB4444ToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %129, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 32
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 7
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i8*, i32)* @ARGB4444ToARGBRow_SSE2, void (i8*, i8*, i32)* @ARGB4444ToARGBRow_Any_SSE2
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi void (i8*, i8*, i32)* [ %47, %44 ], [ @ARGB4444ToARGBRow_C, %40 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = tail call i32 @InitCpuFlags() #4
  br label %54

54:                                               ; preds = %48, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %48 ]
  %56 = and i32 %55, 64
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = and i32 %8, 15
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_SSSE3
  %62 = select i1 %60, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %63

63:                                               ; preds = %58, %54
  %64 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVRow_C, %54 ], [ %61, %58 ]
  %65 = phi void (i8*, i8*, i32)* [ @ARGBToYRow_C, %54 ], [ %62, %58 ]
  %66 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = tail call i32 @InitCpuFlags() #4
  br label %70

70:                                               ; preds = %63, %68
  %71 = phi i32 [ %69, %68 ], [ %66, %63 ]
  %72 = and i32 %71, 1024
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %70
  %75 = and i32 %8, 31
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_AVX2
  %78 = select i1 %76, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %79

79:                                               ; preds = %74, %70
  %80 = phi void (i8*, i32, i8*, i8*, i32)* [ %64, %70 ], [ %77, %74 ]
  %81 = phi void (i8*, i8*, i32)* [ %65, %70 ], [ %78, %74 ]
  %82 = shl nsw i32 %8, 2
  %83 = add nsw i32 %82, 31
  %84 = and i32 %83, -32
  %85 = shl nsw i32 %83, 1
  %86 = or i32 %85, 63
  %87 = sext i32 %86 to i64
  %88 = tail call noalias i8* @malloc(i64 %87) #4
  %89 = ptrtoint i8* %88 to i64
  %90 = add nsw i64 %89, 63
  %91 = and i64 %90, -64
  %92 = inttoptr i64 %91 to i8*
  %93 = add nsw i32 %35, -1
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %95, label %123

95:                                               ; preds = %79
  %96 = sext i32 %33 to i64
  %97 = sext i32 %84 to i64
  %98 = getelementptr inbounds i8, i8* %92, i64 %97
  %99 = sext i32 %3 to i64
  %100 = shl nsw i32 %33, 1
  %101 = sext i32 %100 to i64
  %102 = shl nsw i32 %3, 1
  %103 = sext i32 %102 to i64
  %104 = sext i32 %5 to i64
  %105 = sext i32 %7 to i64
  br label %106

106:                                              ; preds = %95, %106
  %107 = phi i32 [ 0, %95 ], [ %118, %106 ]
  %108 = phi i8* [ %34, %95 ], [ %114, %106 ]
  %109 = phi i8* [ %6, %95 ], [ %117, %106 ]
  %110 = phi i8* [ %4, %95 ], [ %116, %106 ]
  %111 = phi i8* [ %2, %95 ], [ %115, %106 ]
  tail call void %49(i8* %108, i8* %92, i32 %8) #4, !callees !10
  %112 = getelementptr inbounds i8, i8* %108, i64 %96
  tail call void %49(i8* %112, i8* %98, i32 %8) #4, !callees !10
  tail call void %80(i8* %92, i32 %84, i8* %110, i8* %109, i32 %8) #4
  tail call void %81(i8* %92, i8* %111, i32 %8) #4
  %113 = getelementptr inbounds i8, i8* %111, i64 %99
  tail call void %81(i8* %98, i8* %113, i32 %8) #4
  %114 = getelementptr inbounds i8, i8* %108, i64 %101
  %115 = getelementptr inbounds i8, i8* %111, i64 %103
  %116 = getelementptr inbounds i8, i8* %110, i64 %104
  %117 = getelementptr inbounds i8, i8* %109, i64 %105
  %118 = add nuw nsw i32 %107, 2
  %119 = icmp slt i32 %118, %93
  br i1 %119, label %106, label %120

120:                                              ; preds = %106
  %121 = and i32 %35, 1
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %128, label %123

123:                                              ; preds = %79, %120
  %124 = phi i8* [ %114, %120 ], [ %34, %79 ]
  %125 = phi i8* [ %117, %120 ], [ %6, %79 ]
  %126 = phi i8* [ %116, %120 ], [ %4, %79 ]
  %127 = phi i8* [ %115, %120 ], [ %2, %79 ]
  tail call void %49(i8* %124, i8* %92, i32 %8) #4, !callees !10
  tail call void %80(i8* %92, i32 0, i8* %126, i8* %125, i32 %8) #4
  tail call void %81(i8* %92, i8* %127, i32 %8) #4
  br label %128

128:                                              ; preds = %120, %123
  tail call void @free(i8* %88) #4
  br label %129

129:                                              ; preds = %10, %128
  %130 = phi i32 [ 0, %128 ], [ -1, %10 ]
  ret i32 %130
}

declare void @ARGB4444ToARGBRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGB4444ToARGBRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGB4444ToARGBRow_SSE2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RGB24ToJ400(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = mul nsw i32 %4, 3
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %3, %4
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 15
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @RGB24ToYJRow_SSSE3, void (i8*, i8*, i32)* @RGB24ToYJRow_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @RGB24ToYJRow_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #4
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 31
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @RGB24ToYJRow_AVX2, void (i8*, i8*, i32)* @RGB24ToYJRow_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #4
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @RGB24ToYJRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGB24ToYJRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGB24ToYJRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGB24ToYJRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGB24ToYJRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RAWToJ400(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = mul nsw i32 %4, 3
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %3, %4
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 15
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @RAWToYJRow_SSSE3, void (i8*, i8*, i32)* @RAWToYJRow_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @RAWToYJRow_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #4
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 31
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @RAWToYJRow_AVX2, void (i8*, i8*, i32)* @RAWToYJRow_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #4
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @RAWToYJRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @RAWToYJRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @RAWToYJRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @RAWToYJRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @RAWToYJRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Android420ToI420(i8*, i32, i8*, i32, i8*, i32, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %16 = ptrtoint i8* %4 to i64
  %17 = ptrtoint i8* %2 to i64
  %18 = sub i64 %16, %17
  %19 = add nsw i32 %13, 1
  %20 = ashr i32 %19, 1
  %21 = icmp ne i8* %2, null
  %22 = icmp ne i8* %4, null
  %23 = and i1 %21, %22
  %24 = icmp ne i8* %9, null
  %25 = and i1 %23, %24
  %26 = icmp ne i8* %11, null
  %27 = and i1 %25, %26
  %28 = xor i1 %27, true
  %29 = icmp slt i32 %13, 1
  %30 = or i1 %29, %28
  %31 = icmp eq i32 %14, 0
  %32 = or i1 %30, %31
  br i1 %32, label %196, label %33

33:                                               ; preds = %15
  %34 = add nsw i32 %14, 1
  %35 = ashr i32 %34, 1
  %36 = icmp slt i32 %14, 0
  br i1 %36, label %37, label %55

37:                                               ; preds = %33
  %38 = sub nsw i32 0, %14
  %39 = sub i32 1, %14
  %40 = ashr i32 %39, 1
  %41 = xor i32 %14, -1
  %42 = mul nsw i32 %41, %1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %0, i64 %43
  %45 = add nsw i32 %40, -1
  %46 = mul nsw i32 %45, %3
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %2, i64 %47
  %49 = mul nsw i32 %45, %5
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %4, i64 %50
  %52 = sub nsw i32 0, %1
  %53 = sub nsw i32 0, %3
  %54 = sub nsw i32 0, %5
  br label %55

55:                                               ; preds = %37, %33
  %56 = phi i32 [ %54, %37 ], [ %5, %33 ]
  %57 = phi i8* [ %51, %37 ], [ %4, %33 ]
  %58 = phi i32 [ %53, %37 ], [ %3, %33 ]
  %59 = phi i8* [ %48, %37 ], [ %2, %33 ]
  %60 = phi i32 [ %52, %37 ], [ %1, %33 ]
  %61 = phi i8* [ %44, %37 ], [ %0, %33 ]
  %62 = phi i32 [ %38, %37 ], [ %14, %33 ]
  %63 = phi i32 [ %40, %37 ], [ %35, %33 ]
  %64 = icmp eq i8* %7, null
  br i1 %64, label %66, label %65

65:                                               ; preds = %55
  tail call void @CopyPlane(i8* %61, i32 %60, i8* nonnull %7, i32 %8, i32 %13, i32 %62) #4
  br label %66

66:                                               ; preds = %55, %65
  %67 = icmp eq i32 %6, 1
  br i1 %67, label %68, label %69

68:                                               ; preds = %66
  tail call void @CopyPlane(i8* %59, i32 %58, i8* %9, i32 %10, i32 %20, i32 %63) #4
  tail call void @CopyPlane(i8* %57, i32 %56, i8* %11, i32 %12, i32 %20, i32 %63) #4
  br label %196

69:                                               ; preds = %66
  %70 = icmp eq i32 %6, 2
  %71 = icmp eq i64 %18, -1
  %72 = and i1 %70, %71
  %73 = icmp eq i32 %58, %56
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %76

75:                                               ; preds = %69
  tail call void @SplitUVPlane(i8* %57, i32 %56, i8* %11, i32 %12, i8* %9, i32 %10, i32 %20, i32 %63) #4
  br label %196

76:                                               ; preds = %69
  %77 = icmp eq i64 %18, 1
  %78 = and i1 %70, %77
  %79 = and i1 %78, %73
  br i1 %79, label %97, label %80

80:                                               ; preds = %76
  %81 = icmp sgt i32 %63, 0
  br i1 %81, label %82, label %196

82:                                               ; preds = %80
  %83 = sext i32 %6 to i64
  %84 = sext i32 %58 to i64
  %85 = sext i32 %56 to i64
  %86 = sext i32 %10 to i64
  %87 = sext i32 %12 to i64
  %88 = add nsw i32 %20, -1
  %89 = and i32 %20, 7
  %90 = icmp ult i32 %88, 7
  %91 = sub nsw i32 %20, %89
  %92 = icmp eq i32 %89, 0
  %93 = and i32 %20, 7
  %94 = icmp ult i32 %88, 7
  %95 = sub nsw i32 %20, %93
  %96 = icmp eq i32 %93, 0
  br label %98

97:                                               ; preds = %76
  tail call void @SplitUVPlane(i8* %59, i32 %56, i8* %9, i32 %10, i8* %11, i32 %12, i32 %20, i32 %63) #4
  br label %196

98:                                               ; preds = %189, %82
  %99 = phi i32 [ 0, %82 ], [ %194, %189 ]
  %100 = phi i8* [ %11, %82 ], [ %193, %189 ]
  %101 = phi i8* [ %9, %82 ], [ %192, %189 ]
  %102 = phi i8* [ %59, %82 ], [ %190, %189 ]
  %103 = phi i8* [ %57, %82 ], [ %191, %189 ]
  br i1 %90, label %134, label %104

104:                                              ; preds = %98, %104
  %105 = phi i8* [ %131, %104 ], [ %102, %98 ]
  %106 = phi i8* [ %130, %104 ], [ %101, %98 ]
  %107 = phi i32 [ %132, %104 ], [ %91, %98 ]
  %108 = load i8, i8* %105, align 1
  store i8 %108, i8* %106, align 1
  %109 = getelementptr inbounds i8, i8* %106, i64 1
  %110 = getelementptr inbounds i8, i8* %105, i64 %83
  %111 = load i8, i8* %110, align 1
  store i8 %111, i8* %109, align 1
  %112 = getelementptr inbounds i8, i8* %106, i64 2
  %113 = getelementptr inbounds i8, i8* %110, i64 %83
  %114 = load i8, i8* %113, align 1
  store i8 %114, i8* %112, align 1
  %115 = getelementptr inbounds i8, i8* %106, i64 3
  %116 = getelementptr inbounds i8, i8* %113, i64 %83
  %117 = load i8, i8* %116, align 1
  store i8 %117, i8* %115, align 1
  %118 = getelementptr inbounds i8, i8* %106, i64 4
  %119 = getelementptr inbounds i8, i8* %116, i64 %83
  %120 = load i8, i8* %119, align 1
  store i8 %120, i8* %118, align 1
  %121 = getelementptr inbounds i8, i8* %106, i64 5
  %122 = getelementptr inbounds i8, i8* %119, i64 %83
  %123 = load i8, i8* %122, align 1
  store i8 %123, i8* %121, align 1
  %124 = getelementptr inbounds i8, i8* %106, i64 6
  %125 = getelementptr inbounds i8, i8* %122, i64 %83
  %126 = load i8, i8* %125, align 1
  store i8 %126, i8* %124, align 1
  %127 = getelementptr inbounds i8, i8* %106, i64 7
  %128 = getelementptr inbounds i8, i8* %125, i64 %83
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %106, i64 8
  %131 = getelementptr inbounds i8, i8* %128, i64 %83
  %132 = add i32 %107, -8
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %104

134:                                              ; preds = %104, %98
  %135 = phi i8* [ %102, %98 ], [ %131, %104 ]
  %136 = phi i8* [ %101, %98 ], [ %130, %104 ]
  br i1 %92, label %146, label %137

137:                                              ; preds = %134, %137
  %138 = phi i8* [ %143, %137 ], [ %135, %134 ]
  %139 = phi i8* [ %142, %137 ], [ %136, %134 ]
  %140 = phi i32 [ %144, %137 ], [ %89, %134 ]
  %141 = load i8, i8* %138, align 1
  store i8 %141, i8* %139, align 1
  %142 = getelementptr inbounds i8, i8* %139, i64 1
  %143 = getelementptr inbounds i8, i8* %138, i64 %83
  %144 = add i32 %140, -1
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %137, !llvm.loop !11

146:                                              ; preds = %137, %134
  br i1 %94, label %177, label %147

147:                                              ; preds = %146, %147
  %148 = phi i8* [ %174, %147 ], [ %103, %146 ]
  %149 = phi i8* [ %173, %147 ], [ %100, %146 ]
  %150 = phi i32 [ %175, %147 ], [ %95, %146 ]
  %151 = load i8, i8* %148, align 1
  store i8 %151, i8* %149, align 1
  %152 = getelementptr inbounds i8, i8* %149, i64 1
  %153 = getelementptr inbounds i8, i8* %148, i64 %83
  %154 = load i8, i8* %153, align 1
  store i8 %154, i8* %152, align 1
  %155 = getelementptr inbounds i8, i8* %149, i64 2
  %156 = getelementptr inbounds i8, i8* %153, i64 %83
  %157 = load i8, i8* %156, align 1
  store i8 %157, i8* %155, align 1
  %158 = getelementptr inbounds i8, i8* %149, i64 3
  %159 = getelementptr inbounds i8, i8* %156, i64 %83
  %160 = load i8, i8* %159, align 1
  store i8 %160, i8* %158, align 1
  %161 = getelementptr inbounds i8, i8* %149, i64 4
  %162 = getelementptr inbounds i8, i8* %159, i64 %83
  %163 = load i8, i8* %162, align 1
  store i8 %163, i8* %161, align 1
  %164 = getelementptr inbounds i8, i8* %149, i64 5
  %165 = getelementptr inbounds i8, i8* %162, i64 %83
  %166 = load i8, i8* %165, align 1
  store i8 %166, i8* %164, align 1
  %167 = getelementptr inbounds i8, i8* %149, i64 6
  %168 = getelementptr inbounds i8, i8* %165, i64 %83
  %169 = load i8, i8* %168, align 1
  store i8 %169, i8* %167, align 1
  %170 = getelementptr inbounds i8, i8* %149, i64 7
  %171 = getelementptr inbounds i8, i8* %168, i64 %83
  %172 = load i8, i8* %171, align 1
  store i8 %172, i8* %170, align 1
  %173 = getelementptr inbounds i8, i8* %149, i64 8
  %174 = getelementptr inbounds i8, i8* %171, i64 %83
  %175 = add i32 %150, -8
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %147

177:                                              ; preds = %147, %146
  %178 = phi i8* [ %103, %146 ], [ %174, %147 ]
  %179 = phi i8* [ %100, %146 ], [ %173, %147 ]
  br i1 %96, label %189, label %180

180:                                              ; preds = %177, %180
  %181 = phi i8* [ %186, %180 ], [ %178, %177 ]
  %182 = phi i8* [ %185, %180 ], [ %179, %177 ]
  %183 = phi i32 [ %187, %180 ], [ %93, %177 ]
  %184 = load i8, i8* %181, align 1
  store i8 %184, i8* %182, align 1
  %185 = getelementptr inbounds i8, i8* %182, i64 1
  %186 = getelementptr inbounds i8, i8* %181, i64 %83
  %187 = add i32 %183, -1
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %180, !llvm.loop !13

189:                                              ; preds = %180, %177
  %190 = getelementptr inbounds i8, i8* %102, i64 %84
  %191 = getelementptr inbounds i8, i8* %103, i64 %85
  %192 = getelementptr inbounds i8, i8* %101, i64 %86
  %193 = getelementptr inbounds i8, i8* %100, i64 %87
  %194 = add nuw nsw i32 %99, 1
  %195 = icmp eq i32 %194, %63
  br i1 %195, label %196, label %98

196:                                              ; preds = %189, %80, %15, %97, %75, %68
  %197 = phi i32 [ 0, %68 ], [ 0, %75 ], [ 0, %97 ], [ -1, %15 ], [ 0, %80 ], [ 0, %189 ]
  ret i32 %197
}

declare void @Convert16To8Plane(i16*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #1

declare void @ScalePlane_12(i16*, i32, i32, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #1

declare void @ConvertToMSBPlane_16(i16*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #1

declare void @MergeUVPlane_16(i16*, i32, i16*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #1

declare i32 @InitCpuFlags() local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{void (i8*, i32, i8*, i8*, i32)* @BGRAToUVRow_Any_SSSE3, void (i8*, i32, i8*, i8*, i32)* @BGRAToUVRow_C, void (i8*, i32, i8*, i8*, i32)* @BGRAToUVRow_SSSE3}
!3 = !{void (i8*, i8*, i32)* @BGRAToYRow_Any_SSSE3, void (i8*, i8*, i32)* @BGRAToYRow_C, void (i8*, i8*, i32)* @BGRAToYRow_SSSE3}
!4 = !{void (i8*, i32, i8*, i8*, i32)* @RGBAToUVRow_Any_SSSE3, void (i8*, i32, i8*, i8*, i32)* @RGBAToUVRow_C, void (i8*, i32, i8*, i8*, i32)* @RGBAToUVRow_SSSE3}
!5 = !{void (i8*, i8*, i32)* @RGBAToYRow_Any_SSSE3, void (i8*, i8*, i32)* @RGBAToYRow_C, void (i8*, i8*, i32)* @RGBAToYRow_SSSE3}
!6 = !{void (i8*, i8*, i32)* @RGB24ToARGBRow_Any_SSSE3, void (i8*, i8*, i32)* @RGB24ToARGBRow_C, void (i8*, i8*, i32)* @RGB24ToARGBRow_SSSE3}
!7 = !{void (i8*, i8*, i32)* @RAWToARGBRow_Any_SSSE3, void (i8*, i8*, i32)* @RAWToARGBRow_C, void (i8*, i8*, i32)* @RAWToARGBRow_SSSE3}
!8 = !{void (i8*, i8*, i32)* @RGB565ToARGBRow_Any_SSE2, void (i8*, i8*, i32)* @RGB565ToARGBRow_C, void (i8*, i8*, i32)* @RGB565ToARGBRow_SSE2}
!9 = !{void (i8*, i8*, i32)* @ARGB1555ToARGBRow_Any_SSE2, void (i8*, i8*, i32)* @ARGB1555ToARGBRow_C, void (i8*, i8*, i32)* @ARGB1555ToARGBRow_SSE2}
!10 = !{void (i8*, i8*, i32)* @ARGB4444ToARGBRow_Any_SSE2, void (i8*, i8*, i32)* @ARGB4444ToARGBRow_C, void (i8*, i8*, i32)* @ARGB4444ToARGBRow_SSE2}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !12}
