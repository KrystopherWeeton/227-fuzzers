; ModuleID = '../../third_party/swiftshader/src/Vulkan/VkFramebuffer.cpp'
source_filename = "../../third_party/swiftshader/src/Vulkan/VkFramebuffer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.vk::Framebuffer" = type <{ i32, [4 x i8], %"class.vk::ImageView"**, %struct.VkExtent3D, [4 x i8] }>
%"class.vk::ImageView" = type <{ %"class.vk::Image"*, i32, %"class.vk::Format", %struct.VkComponentMapping, %struct.VkImageSubresourceRange, [4 x i8], %"class.vk::SamplerYcbcrConversion"*, %"union.vk::Identifier", [4 x i8] }>
%"class.vk::Image" = type { %"class.vk::DeviceMemory"*, %"class.vk::Device"*, i64, i32, i32, %"class.vk::Format", %struct.VkExtent3D, i32, i32, i32, i32, i32, %"class.vk::Image"*, i32, %"class.marl::mutex", %"class.std::__1::unordered_set" }
%"class.vk::DeviceMemory" = type opaque
%"class.vk::Device" = type opaque
%"class.marl::mutex" = type { %"class.std::__1::mutex" }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.44", %"class.std::__1::__compressed_pair.49", %"class.std::__1::__compressed_pair.51", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i64 }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.49" = type <{ %"struct.std::__1::__compressed_pair_elem.42", %"struct.std::__1::__compressed_pair_elem.50", [4 x i8] }>
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.vk::Image::Subresource" }
%"class.vk::Image::Subresource" = type { %struct.VkImageSubresource }
%struct.VkImageSubresource = type { i32, i32, i32 }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { float }
%"class.vk::Format" = type { i32 }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%"class.vk::SamplerYcbcrConversion" = type opaque
%"union.vk::Identifier" = type { %struct.anon }
%struct.anon = type { i24 }
%struct.VkExtent3D = type { i32, i32, i32 }
%struct.VkFramebufferCreateInfo = type { i32, i8*, i32, %class.VkNonDispatchableHandle.12, i32, %class.VkNonDispatchableHandle.7*, i32, i32, i32 }
%class.VkNonDispatchableHandle.12 = type { i64 }
%class.VkNonDispatchableHandle.7 = type { i64 }
%class.VkNonDispatchableHandle = type { i64 }
%class.VkNonDispatchableHandle.0 = type { i64 }
%class.VkNonDispatchableHandle.1 = type { i64 }
%class.VkNonDispatchableHandle.2 = type { i64 }
%class.VkNonDispatchableHandle.3 = type { i64 }
%class.VkNonDispatchableHandle.4 = type { i64 }
%class.VkNonDispatchableHandle.5 = type { i64 }
%class.VkNonDispatchableHandle.6 = type { i64 }
%class.VkNonDispatchableHandle.8 = type { i64 }
%class.VkNonDispatchableHandle.9 = type { i64 }
%class.VkNonDispatchableHandle.10 = type { i64 }
%class.VkNonDispatchableHandle.11 = type { i64 }
%class.VkNonDispatchableHandle.13 = type { i64 }
%class.VkNonDispatchableHandle.14 = type { i64 }
%class.VkNonDispatchableHandle.15 = type { i64 }
%class.VkNonDispatchableHandle.16 = type { i64 }
%class.VkNonDispatchableHandle.17 = type { i64 }
%class.VkNonDispatchableHandle.18 = type { i64 }
%class.VkNonDispatchableHandle.19 = type { i64 }
%class.VkNonDispatchableHandle.20 = type { i64 }
%class.VkNonDispatchableHandle.21 = type { i64 }
%class.VkNonDispatchableHandle.22 = type { i64 }
%class.VkNonDispatchableHandle.23 = type { i64 }
%class.VkNonDispatchableHandle.24 = type { i64 }
%class.VkNonDispatchableHandle.25 = type { i64 }
%class.VkNonDispatchableHandle.26 = type { i64 }
%class.VkNonDispatchableHandle.27 = type { i64 }
%class.VkNonDispatchableHandle.28 = type { i64 }
%class.VkNonDispatchableHandle.29 = type { i64 }
%class.VkNonDispatchableHandle.30 = type { i64 }
%class.VkNonDispatchableHandle.31 = type { i64 }
%class.VkNonDispatchableHandle.32 = type { i64 }
%class.VkNonDispatchableHandle.33 = type { i64 }
%class.VkNonDispatchableHandle.34 = type { i64 }
%class.VkNonDispatchableHandle.35 = type { i64 }
%struct.VkBaseInStructure = type { i32, %struct.VkBaseInStructure* }
%struct.VkFramebufferAttachmentsCreateInfo = type { i32, i8*, i32, %struct.VkFramebufferAttachmentImageInfo* }
%struct.VkFramebufferAttachmentImageInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32* }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%"class.vk::RenderPass" = type { i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, %struct.VkSubpassDescriptionDepthStencilResolve*, i32, %struct.VkSubpassDependency*, i32*, i32*, i32* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDescriptionDepthStencilResolve = type { i32, i8*, i32, i32, %struct.VkAttachmentReference2* }
%struct.VkAttachmentReference2 = type { i32, i8*, i32, i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%union.VkClearValue = type { %union.VkClearColorValue }
%union.VkClearColorValue = type { [4 x float] }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%struct.VkClearAttachment = type { i32, i32, %union.VkClearValue }
%struct.VkClearRect = type { %struct.VkRect2D, i32, i32 }

$_ZNK23VkNonDispatchableHandleIP10VkBuffer_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP10VkBuffer_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkImage_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkImage_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkSemaphore_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkSemaphore_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkFence_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkFence_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkDeviceMemory_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkDeviceMemory_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkEvent_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkEvent_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkQueryPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkQueryPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkBufferView_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkBufferView_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkImageView_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkImageView_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkShaderModule_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkShaderModule_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkPipelineCache_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkPipelineCache_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkPipelineLayout_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkPipelineLayout_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP12VkPipeline_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP12VkPipeline_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkRenderPass_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkRenderPass_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP11VkSampler_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP11VkSampler_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkDescriptorSet_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkDescriptorSet_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkDescriptorPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkDescriptorPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkFramebuffer_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkFramebuffer_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkCommandPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkCommandPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkSurfaceKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkSurfaceKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkSwapchainKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkSwapchainKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkDisplayKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkDisplayKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkCuModuleNVX_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkCuModuleNVX_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEaSEm = comdat any

@_ZN2vk11FramebufferC1EPK23VkFramebufferCreateInfoPv = hidden unnamed_addr alias void (%"class.vk::Framebuffer"*, %struct.VkFramebufferCreateInfo*, i8*), void (%"class.vk::Framebuffer"*, %struct.VkFramebufferCreateInfo*, i8*)* @_ZN2vk11FramebufferC2EPK23VkFramebufferCreateInfoPv

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP10VkBuffer_TEcvPvEv(%class.VkNonDispatchableHandle*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP10VkBuffer_TEaSEm(%class.VkNonDispatchableHandle*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle, %class.VkNonDispatchableHandle* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkImage_TEcvPvEv(%class.VkNonDispatchableHandle.0*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.0* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkImage_TEaSEm(%class.VkNonDispatchableHandle.0*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.0, %class.VkNonDispatchableHandle.0* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkSemaphore_TEcvPvEv(%class.VkNonDispatchableHandle.1*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.1* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkSemaphore_TEaSEm(%class.VkNonDispatchableHandle.1*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.1, %class.VkNonDispatchableHandle.1* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkFence_TEcvPvEv(%class.VkNonDispatchableHandle.2*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.2* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkFence_TEaSEm(%class.VkNonDispatchableHandle.2*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.2, %class.VkNonDispatchableHandle.2* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkDeviceMemory_TEcvPvEv(%class.VkNonDispatchableHandle.3*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.3* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkDeviceMemory_TEaSEm(%class.VkNonDispatchableHandle.3*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.3, %class.VkNonDispatchableHandle.3* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkEvent_TEcvPvEv(%class.VkNonDispatchableHandle.4*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.4* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkEvent_TEaSEm(%class.VkNonDispatchableHandle.4*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.4, %class.VkNonDispatchableHandle.4* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkQueryPool_TEcvPvEv(%class.VkNonDispatchableHandle.5*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.5* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkQueryPool_TEaSEm(%class.VkNonDispatchableHandle.5*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.5, %class.VkNonDispatchableHandle.5* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkBufferView_TEcvPvEv(%class.VkNonDispatchableHandle.6*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.6* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkBufferView_TEaSEm(%class.VkNonDispatchableHandle.6*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.6, %class.VkNonDispatchableHandle.6* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkImageView_TEcvPvEv(%class.VkNonDispatchableHandle.7*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.7* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkImageView_TEaSEm(%class.VkNonDispatchableHandle.7*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.7, %class.VkNonDispatchableHandle.7* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkShaderModule_TEcvPvEv(%class.VkNonDispatchableHandle.8*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.8* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkShaderModule_TEaSEm(%class.VkNonDispatchableHandle.8*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.8, %class.VkNonDispatchableHandle.8* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkPipelineCache_TEcvPvEv(%class.VkNonDispatchableHandle.9*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.9* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkPipelineCache_TEaSEm(%class.VkNonDispatchableHandle.9*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.9, %class.VkNonDispatchableHandle.9* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkPipelineLayout_TEcvPvEv(%class.VkNonDispatchableHandle.10*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.10* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkPipelineLayout_TEaSEm(%class.VkNonDispatchableHandle.10*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.10, %class.VkNonDispatchableHandle.10* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP12VkPipeline_TEcvPvEv(%class.VkNonDispatchableHandle.11*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.11* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP12VkPipeline_TEaSEm(%class.VkNonDispatchableHandle.11*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.11, %class.VkNonDispatchableHandle.11* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkRenderPass_TEcvPvEv(%class.VkNonDispatchableHandle.12*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.12* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkRenderPass_TEaSEm(%class.VkNonDispatchableHandle.12*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.12, %class.VkNonDispatchableHandle.12* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEcvPvEv(%class.VkNonDispatchableHandle.13*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.13* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEaSEm(%class.VkNonDispatchableHandle.13*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.13, %class.VkNonDispatchableHandle.13* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP11VkSampler_TEcvPvEv(%class.VkNonDispatchableHandle.14*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.14* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP11VkSampler_TEaSEm(%class.VkNonDispatchableHandle.14*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.14, %class.VkNonDispatchableHandle.14* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkDescriptorSet_TEcvPvEv(%class.VkNonDispatchableHandle.15*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.15* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkDescriptorSet_TEaSEm(%class.VkNonDispatchableHandle.15*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.15, %class.VkNonDispatchableHandle.15* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkDescriptorPool_TEcvPvEv(%class.VkNonDispatchableHandle.16*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.16* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkDescriptorPool_TEaSEm(%class.VkNonDispatchableHandle.16*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.16, %class.VkNonDispatchableHandle.16* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkFramebuffer_TEcvPvEv(%class.VkNonDispatchableHandle.17*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.17* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkFramebuffer_TEaSEm(%class.VkNonDispatchableHandle.17*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.17, %class.VkNonDispatchableHandle.17* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkCommandPool_TEcvPvEv(%class.VkNonDispatchableHandle.18*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.18* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkCommandPool_TEaSEm(%class.VkNonDispatchableHandle.18*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.18, %class.VkNonDispatchableHandle.18* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEcvPvEv(%class.VkNonDispatchableHandle.19*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.19* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEaSEm(%class.VkNonDispatchableHandle.19*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.19, %class.VkNonDispatchableHandle.19* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEcvPvEv(%class.VkNonDispatchableHandle.20*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.20* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEaSEm(%class.VkNonDispatchableHandle.20*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.20, %class.VkNonDispatchableHandle.20* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkSurfaceKHR_TEcvPvEv(%class.VkNonDispatchableHandle.21*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.21* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkSurfaceKHR_TEaSEm(%class.VkNonDispatchableHandle.21*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.21, %class.VkNonDispatchableHandle.21* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkSwapchainKHR_TEcvPvEv(%class.VkNonDispatchableHandle.22*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.22* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkSwapchainKHR_TEaSEm(%class.VkNonDispatchableHandle.22*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.22, %class.VkNonDispatchableHandle.22* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkDisplayKHR_TEcvPvEv(%class.VkNonDispatchableHandle.23*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.23* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkDisplayKHR_TEaSEm(%class.VkNonDispatchableHandle.23*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.23, %class.VkNonDispatchableHandle.23* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEcvPvEv(%class.VkNonDispatchableHandle.24*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.24* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEaSEm(%class.VkNonDispatchableHandle.24*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.24, %class.VkNonDispatchableHandle.24* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEcvPvEv(%class.VkNonDispatchableHandle.25*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.25* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEaSEm(%class.VkNonDispatchableHandle.25*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.25, %class.VkNonDispatchableHandle.25* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEcvPvEv(%class.VkNonDispatchableHandle.26*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.26* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEaSEm(%class.VkNonDispatchableHandle.26*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.26, %class.VkNonDispatchableHandle.26* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkCuModuleNVX_TEcvPvEv(%class.VkNonDispatchableHandle.27*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.27* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkCuModuleNVX_TEaSEm(%class.VkNonDispatchableHandle.27*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.27, %class.VkNonDispatchableHandle.27* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEcvPvEv(%class.VkNonDispatchableHandle.28*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.28* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEaSEm(%class.VkNonDispatchableHandle.28*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.28, %class.VkNonDispatchableHandle.28* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEcvPvEv(%class.VkNonDispatchableHandle.29*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.29* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEaSEm(%class.VkNonDispatchableHandle.29*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.29, %class.VkNonDispatchableHandle.29* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEcvPvEv(%class.VkNonDispatchableHandle.30*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.30* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEaSEm(%class.VkNonDispatchableHandle.30*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.30, %class.VkNonDispatchableHandle.30* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEcvPvEv(%class.VkNonDispatchableHandle.31*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.31* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEaSEm(%class.VkNonDispatchableHandle.31*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.31, %class.VkNonDispatchableHandle.31* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEcvPvEv(%class.VkNonDispatchableHandle.32*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.32* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEaSEm(%class.VkNonDispatchableHandle.32*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.32, %class.VkNonDispatchableHandle.32* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEcvPvEv(%class.VkNonDispatchableHandle.33*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.33* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEaSEm(%class.VkNonDispatchableHandle.33*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.33, %class.VkNonDispatchableHandle.33* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEcvPvEv(%class.VkNonDispatchableHandle.34*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.34* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEaSEm(%class.VkNonDispatchableHandle.34*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.34, %class.VkNonDispatchableHandle.34* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEcvPvEv(%class.VkNonDispatchableHandle.35*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.35* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEaSEm(%class.VkNonDispatchableHandle.35*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.35, %class.VkNonDispatchableHandle.35* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN2vk11FramebufferC2EPK23VkFramebufferCreateInfoPv(%"class.vk::Framebuffer"* nocapture, %struct.VkFramebufferCreateInfo* nocapture readonly, i8*) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 0
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 2
  %6 = bitcast %"class.vk::ImageView"*** %5 to i8**
  store i8* %2, i8** %6, align 8
  %7 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 3, i32 0
  %8 = getelementptr inbounds %struct.VkFramebufferCreateInfo, %struct.VkFramebufferCreateInfo* %1, i64 0, i32 6
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 3, i32 1
  %11 = getelementptr inbounds %struct.VkFramebufferCreateInfo, %struct.VkFramebufferCreateInfo* %1, i64 0, i32 7
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %10, align 4
  %13 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 3, i32 2
  %14 = getelementptr inbounds %struct.VkFramebufferCreateInfo, %struct.VkFramebufferCreateInfo* %1, i64 0, i32 8
  %15 = load i32, i32* %14, align 8
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %struct.VkFramebufferCreateInfo, %struct.VkFramebufferCreateInfo* %1, i64 0, i32 1
  %17 = bitcast i8** %16 to %struct.VkBaseInStructure**
  %18 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %17, align 8
  %19 = icmp eq %struct.VkBaseInStructure* %18, null
  %20 = bitcast i8* %2 to %"class.vk::ImageView"**
  br i1 %19, label %32, label %21

21:                                               ; preds = %3, %21
  %22 = phi %struct.VkBaseInStructure* [ %30, %21 ], [ %18, %3 ]
  %23 = phi %struct.VkFramebufferAttachmentsCreateInfo* [ %28, %21 ], [ null, %3 ]
  %24 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %22, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 1000108001
  %27 = bitcast %struct.VkBaseInStructure* %22 to %struct.VkFramebufferAttachmentsCreateInfo*
  %28 = select i1 %26, %struct.VkFramebufferAttachmentsCreateInfo* %27, %struct.VkFramebufferAttachmentsCreateInfo* %23
  %29 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %22, i64 0, i32 1
  %30 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %29, align 8
  %31 = icmp eq %struct.VkBaseInStructure* %30, null
  br i1 %31, label %32, label %21

32:                                               ; preds = %21, %3
  %33 = phi %struct.VkFramebufferAttachmentsCreateInfo* [ null, %3 ], [ %28, %21 ]
  %34 = getelementptr inbounds %struct.VkFramebufferCreateInfo, %struct.VkFramebufferCreateInfo* %1, i64 0, i32 2
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %53, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %struct.VkFramebufferAttachmentsCreateInfo, %struct.VkFramebufferAttachmentsCreateInfo* %33, i64 0, i32 2
  %40 = load i32, i32* %39, align 8
  store i32 %40, i32* %4, align 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %77, label %42

42:                                               ; preds = %38
  store %"class.vk::ImageView"* null, %"class.vk::ImageView"** %20, align 8
  %43 = load i32, i32* %4, align 8
  %44 = icmp ugt i32 %43, 1
  br i1 %44, label %45, label %77

45:                                               ; preds = %42, %45
  %46 = phi i64 [ %49, %45 ], [ 1, %42 ]
  %47 = load %"class.vk::ImageView"**, %"class.vk::ImageView"*** %5, align 8
  %48 = getelementptr inbounds %"class.vk::ImageView"*, %"class.vk::ImageView"** %47, i64 %46
  store %"class.vk::ImageView"* null, %"class.vk::ImageView"** %48, align 8
  %49 = add nuw nsw i64 %46, 1
  %50 = load i32, i32* %4, align 8
  %51 = zext i32 %50 to i64
  %52 = icmp ult i64 %49, %51
  br i1 %52, label %45, label %77

53:                                               ; preds = %32
  %54 = getelementptr inbounds %struct.VkFramebufferCreateInfo, %struct.VkFramebufferCreateInfo* %1, i64 0, i32 4
  %55 = load i32, i32* %54, align 8
  store i32 %55, i32* %4, align 8
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %77, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.VkFramebufferCreateInfo, %struct.VkFramebufferCreateInfo* %1, i64 0, i32 5
  %59 = load %class.VkNonDispatchableHandle.7*, %class.VkNonDispatchableHandle.7** %58, align 8
  %60 = getelementptr inbounds %class.VkNonDispatchableHandle.7, %class.VkNonDispatchableHandle.7* %59, i64 0, i32 0
  %61 = load i64, i64* %60, align 8
  %62 = bitcast i8* %2 to i64*
  store i64 %61, i64* %62, align 8
  %63 = load i32, i32* %4, align 8
  %64 = icmp ugt i32 %63, 1
  br i1 %64, label %65, label %77

65:                                               ; preds = %57, %65
  %66 = phi i64 [ %73, %65 ], [ 1, %57 ]
  %67 = load %"class.vk::ImageView"**, %"class.vk::ImageView"*** %5, align 8
  %68 = load %class.VkNonDispatchableHandle.7*, %class.VkNonDispatchableHandle.7** %58, align 8
  %69 = getelementptr inbounds %class.VkNonDispatchableHandle.7, %class.VkNonDispatchableHandle.7* %68, i64 %66, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.vk::ImageView"*, %"class.vk::ImageView"** %67, i64 %66
  %72 = bitcast %"class.vk::ImageView"** %71 to i64*
  store i64 %70, i64* %72, align 8
  %73 = add nuw nsw i64 %66, 1
  %74 = load i32, i32* %4, align 8
  %75 = zext i32 %74 to i64
  %76 = icmp ult i64 %73, %75
  br i1 %76, label %65, label %77

77:                                               ; preds = %45, %65, %42, %57, %53, %38
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk11Framebuffer7destroyEPK21VkAllocationCallbacks(%"class.vk::Framebuffer"* nocapture readonly, %struct.VkAllocationCallbacks*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 2
  %4 = bitcast %"class.vk::ImageView"*** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_ZN2vk10deallocateEPvPK21VkAllocationCallbacks(i8* %5, %struct.VkAllocationCallbacks* %1) #5
  ret void
}

; Function Attrs: optsize
declare void @_ZN2vk10deallocateEPvPK21VkAllocationCallbacks(i8*, %struct.VkAllocationCallbacks*) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk11Framebuffer5clearEPKNS_10RenderPassEjPK12VkClearValueRK8VkRect2D(%"class.vk::Framebuffer"* nocapture readonly, %"class.vk::RenderPass"* nocapture readonly, i32, %union.VkClearValue*, %struct.VkRect2D* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.vk::Format", align 4
  %7 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp ult i32 %8, %2
  %10 = select i1 %9, i32 %8, i32 %2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %21, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %1, i64 0, i32 1
  %14 = bitcast %"class.vk::Format"* %6 to i8*
  %15 = getelementptr inbounds %"class.vk::Format", %"class.vk::Format"* %6, i64 0, i32 0
  %16 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %1, i64 0, i32 7
  %17 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %1, i64 0, i32 8
  %18 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 2
  %19 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %1, i64 0, i32 9
  %20 = zext i32 %10 to i64
  br label %22

21:                                               ; preds = %56, %5
  ret void

22:                                               ; preds = %12, %56
  %23 = phi i64 [ 0, %12 ], [ %57, %56 ]
  %24 = load %struct.VkAttachmentDescription*, %struct.VkAttachmentDescription** %13, align 8, !noalias !2
  %25 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %24, i64 %23, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %24, i64 %23, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %24, i64 %23, i32 5
  %30 = load i32, i32* %29, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #6
  store i32 %26, i32* %15, align 4
  %31 = call i32 @_ZNK2vk6Format10getAspectsEv(%"class.vk::Format"* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #6
  %32 = icmp eq i32 %28, 1
  %33 = and i32 %31, 4
  %34 = select i1 %32, i32 %31, i32 %33
  %35 = icmp eq i32 %30, 1
  %36 = and i32 %34, -5
  %37 = select i1 %35, i32 %34, i32 %36
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %56, label %39

39:                                               ; preds = %22
  %40 = load i32*, i32** %16, align 8
  %41 = getelementptr inbounds i32, i32* %40, i64 %23
  %42 = load i32, i32* %41, align 4
  %43 = icmp sgt i32 %42, -1
  br i1 %43, label %44, label %56

44:                                               ; preds = %39
  %45 = load i32*, i32** %17, align 8
  %46 = icmp eq i32* %45, null
  %47 = load %"class.vk::ImageView"**, %"class.vk::ImageView"*** %18, align 8
  %48 = getelementptr inbounds %"class.vk::ImageView"*, %"class.vk::ImageView"** %47, i64 %23
  %49 = load %"class.vk::ImageView"*, %"class.vk::ImageView"** %48, align 8
  %50 = getelementptr inbounds %union.VkClearValue, %union.VkClearValue* %3, i64 %23
  br i1 %46, label %55, label %51

51:                                               ; preds = %44
  %52 = load i32*, i32** %19, align 8
  %53 = getelementptr inbounds i32, i32* %52, i64 %23
  %54 = load i32, i32* %53, align 4
  call void @_ZN2vk9ImageView18clearWithLayerMaskERK12VkClearValuejRK8VkRect2Dj(%"class.vk::ImageView"* %49, %union.VkClearValue* dereferenceable(16) %50, i32 %37, %struct.VkRect2D* dereferenceable(16) %4, i32 %54) #5
  br label %56

55:                                               ; preds = %44
  call void @_ZN2vk9ImageView5clearERK12VkClearValuejRK8VkRect2D(%"class.vk::ImageView"* %49, %union.VkClearValue* dereferenceable(16) %50, i32 %37, %struct.VkRect2D* dereferenceable(16) %4) #5
  br label %56

56:                                               ; preds = %51, %55, %39, %22
  %57 = add nuw nsw i64 %23, 1
  %58 = icmp ult i64 %57, %20
  br i1 %58, label %22, label %21
}

; Function Attrs: optsize
declare i32 @_ZNK2vk6Format10getAspectsEv(%"class.vk::Format"*) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN2vk9ImageView18clearWithLayerMaskERK12VkClearValuejRK8VkRect2Dj(%"class.vk::ImageView"*, %union.VkClearValue* dereferenceable(16), i32, %struct.VkRect2D* dereferenceable(16), i32) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN2vk9ImageView5clearERK12VkClearValuejRK8VkRect2D(%"class.vk::ImageView"*, %union.VkClearValue* dereferenceable(16), i32, %struct.VkRect2D* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk11Framebuffer15clearAttachmentEPKNS_10RenderPassEjRK17VkClearAttachmentRK11VkClearRect(%"class.vk::Framebuffer"* nocapture readonly, %"class.vk::RenderPass"* nocapture readonly, i32, %struct.VkClearAttachment* dereferenceable(24), %struct.VkClearRect* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %1, i64 0, i32 3
  %7 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %6, align 8
  %8 = zext i32 %2 to i64
  %9 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %7, i64 %8, i32 7
  %10 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %9, align 8
  %11 = getelementptr inbounds %struct.VkClearAttachment, %struct.VkClearAttachment* %3, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %38

14:                                               ; preds = %5
  %15 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %7, i64 %8, i32 5
  %16 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %15, align 8
  %17 = getelementptr inbounds %struct.VkClearAttachment, %struct.VkClearAttachment* %3, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %16, i64 %19, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, -1
  br i1 %22, label %60, label %23

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 2
  %25 = load %"class.vk::ImageView"**, %"class.vk::ImageView"*** %24, align 8
  %26 = zext i32 %21 to i64
  %27 = getelementptr inbounds %"class.vk::ImageView"*, %"class.vk::ImageView"** %25, i64 %26
  %28 = load %"class.vk::ImageView"*, %"class.vk::ImageView"** %27, align 8
  %29 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %1, i64 0, i32 8
  %30 = load i32*, i32** %29, align 8
  %31 = icmp eq i32* %30, null
  %32 = getelementptr inbounds %struct.VkClearAttachment, %struct.VkClearAttachment* %3, i64 0, i32 2
  br i1 %31, label %37, label %33

33:                                               ; preds = %23
  %34 = getelementptr inbounds %struct.VkClearRect, %struct.VkClearRect* %4, i64 0, i32 0
  %35 = getelementptr inbounds i32, i32* %30, i64 %8
  %36 = load i32, i32* %35, align 4
  tail call void @_ZN2vk9ImageView18clearWithLayerMaskERK12VkClearValuejRK8VkRect2Dj(%"class.vk::ImageView"* %28, %union.VkClearValue* dereferenceable(16) %32, i32 1, %struct.VkRect2D* dereferenceable(16) %34, i32 %36) #5
  br label %60

37:                                               ; preds = %23
  tail call void @_ZN2vk9ImageView5clearERK12VkClearValuejRK11VkClearRect(%"class.vk::ImageView"* %28, %union.VkClearValue* dereferenceable(16) %32, i32 1, %struct.VkClearRect* dereferenceable(24) %4) #5
  br label %60

38:                                               ; preds = %5
  %39 = and i32 %12, 6
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %60, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %10, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, -1
  br i1 %44, label %60, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 2
  %47 = load %"class.vk::ImageView"**, %"class.vk::ImageView"*** %46, align 8
  %48 = zext i32 %43 to i64
  %49 = getelementptr inbounds %"class.vk::ImageView"*, %"class.vk::ImageView"** %47, i64 %48
  %50 = load %"class.vk::ImageView"*, %"class.vk::ImageView"** %49, align 8
  %51 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %1, i64 0, i32 8
  %52 = load i32*, i32** %51, align 8
  %53 = icmp eq i32* %52, null
  %54 = getelementptr inbounds %struct.VkClearAttachment, %struct.VkClearAttachment* %3, i64 0, i32 2
  br i1 %53, label %59, label %55

55:                                               ; preds = %45
  %56 = getelementptr inbounds %struct.VkClearRect, %struct.VkClearRect* %4, i64 0, i32 0
  %57 = getelementptr inbounds i32, i32* %52, i64 %8
  %58 = load i32, i32* %57, align 4
  tail call void @_ZN2vk9ImageView18clearWithLayerMaskERK12VkClearValuejRK8VkRect2Dj(%"class.vk::ImageView"* %50, %union.VkClearValue* dereferenceable(16) %54, i32 %12, %struct.VkRect2D* dereferenceable(16) %56, i32 %58) #5
  br label %60

59:                                               ; preds = %45
  tail call void @_ZN2vk9ImageView5clearERK12VkClearValuejRK11VkClearRect(%"class.vk::ImageView"* %50, %union.VkClearValue* dereferenceable(16) %54, i32 %12, %struct.VkClearRect* dereferenceable(24) %4) #5
  br label %60

60:                                               ; preds = %41, %59, %55, %14, %37, %33, %38
  ret void
}

; Function Attrs: optsize
declare void @_ZN2vk9ImageView5clearERK12VkClearValuejRK11VkClearRect(%"class.vk::ImageView"*, %union.VkClearValue* dereferenceable(16), i32, %struct.VkClearRect* dereferenceable(24)) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN2vk11Framebuffer13setAttachmentEPNS_9ImageViewEj(%"class.vk::Framebuffer"* nocapture readonly, %"class.vk::ImageView"*, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 2
  %5 = load %"class.vk::ImageView"**, %"class.vk::ImageView"*** %4, align 8
  %6 = zext i32 %2 to i64
  %7 = getelementptr inbounds %"class.vk::ImageView"*, %"class.vk::ImageView"** %5, i64 %6
  store %"class.vk::ImageView"* %1, %"class.vk::ImageView"** %7, align 8
  ret void
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden %"class.vk::ImageView"* @_ZNK2vk11Framebuffer13getAttachmentEj(%"class.vk::Framebuffer"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 2
  %4 = load %"class.vk::ImageView"**, %"class.vk::ImageView"*** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds %"class.vk::ImageView"*, %"class.vk::ImageView"** %4, i64 %5
  %7 = load %"class.vk::ImageView"*, %"class.vk::ImageView"** %6, align 8
  ret %"class.vk::ImageView"* %7
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk11Framebuffer7resolveEPKNS_10RenderPassEj(%"class.vk::Framebuffer"* nocapture readonly, %"class.vk::RenderPass"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.VkSubpassDescriptionDepthStencilResolve, align 8
  %5 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %1, i64 0, i32 3
  %6 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %5, align 8
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %6, i64 %7, i32 6
  %9 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %8, align 8
  %10 = icmp eq %struct.VkAttachmentReference* %9, null
  br i1 %10, label %49, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %6, i64 %7, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %49, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 2
  %17 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %6, i64 %7, i32 5
  %18 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %1, i64 0, i32 8
  br label %19

19:                                               ; preds = %47, %15
  %20 = phi %struct.VkAttachmentReference* [ %9, %15 ], [ %48, %47 ]
  %21 = phi i64 [ 0, %15 ], [ %43, %47 ]
  %22 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %20, i64 %21, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %42, label %25

25:                                               ; preds = %19
  %26 = load %"class.vk::ImageView"**, %"class.vk::ImageView"*** %16, align 8
  %27 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %17, align 8
  %28 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %27, i64 %21, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %"class.vk::ImageView"*, %"class.vk::ImageView"** %26, i64 %30
  %32 = load %"class.vk::ImageView"*, %"class.vk::ImageView"** %31, align 8
  %33 = load i32*, i32** %18, align 8
  %34 = icmp eq i32* %33, null
  %35 = zext i32 %23 to i64
  %36 = getelementptr inbounds %"class.vk::ImageView"*, %"class.vk::ImageView"** %26, i64 %35
  %37 = load %"class.vk::ImageView"*, %"class.vk::ImageView"** %36, align 8
  br i1 %34, label %41, label %38

38:                                               ; preds = %25
  %39 = getelementptr inbounds i32, i32* %33, i64 %7
  %40 = load i32, i32* %39, align 4
  tail call void @_ZN2vk9ImageView20resolveWithLayerMaskEPS0_j(%"class.vk::ImageView"* %32, %"class.vk::ImageView"* %37, i32 %40) #5
  br label %42

41:                                               ; preds = %25
  tail call void @_ZN2vk9ImageView7resolveEPS0_(%"class.vk::ImageView"* %32, %"class.vk::ImageView"* %37) #5
  br label %42

42:                                               ; preds = %38, %41, %19
  %43 = add nuw nsw i64 %21, 1
  %44 = load i32, i32* %12, align 8
  %45 = zext i32 %44 to i64
  %46 = icmp ult i64 %43, %45
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %8, align 8
  br label %19

49:                                               ; preds = %42, %11, %3
  %50 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %1, i64 0, i32 4
  %51 = load %struct.VkSubpassDescriptionDepthStencilResolve*, %struct.VkSubpassDescriptionDepthStencilResolve** %50, align 8
  %52 = icmp eq %struct.VkSubpassDescriptionDepthStencilResolve* %51, null
  br i1 %52, label %79, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %6, i64 %7, i32 7
  %55 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %54, align 8
  %56 = icmp eq %struct.VkAttachmentReference* %55, null
  br i1 %56, label %79, label %57

57:                                               ; preds = %53
  %58 = bitcast %struct.VkSubpassDescriptionDepthStencilResolve* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %58) #6
  %59 = getelementptr inbounds %struct.VkSubpassDescriptionDepthStencilResolve, %struct.VkSubpassDescriptionDepthStencilResolve* %51, i64 %7
  %60 = bitcast %struct.VkSubpassDescriptionDepthStencilResolve* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %58, i8* align 8 %60, i64 32, i1 false) #6
  %61 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %54, align 8
  %62 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %61, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, -1
  br i1 %64, label %78, label %65

65:                                               ; preds = %57
  %66 = getelementptr inbounds %"class.vk::Framebuffer", %"class.vk::Framebuffer"* %0, i64 0, i32 2
  %67 = load %"class.vk::ImageView"**, %"class.vk::ImageView"*** %66, align 8
  %68 = zext i32 %63 to i64
  %69 = getelementptr inbounds %"class.vk::ImageView"*, %"class.vk::ImageView"** %67, i64 %68
  %70 = load %"class.vk::ImageView"*, %"class.vk::ImageView"** %69, align 8
  %71 = getelementptr inbounds %struct.VkSubpassDescriptionDepthStencilResolve, %struct.VkSubpassDescriptionDepthStencilResolve* %4, i64 0, i32 4
  %72 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %71, align 8
  %73 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %72, i64 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds %"class.vk::ImageView"*, %"class.vk::ImageView"** %67, i64 %75
  %77 = load %"class.vk::ImageView"*, %"class.vk::ImageView"** %76, align 8
  call void @_ZN2vk9ImageView19resolveDepthStencilEPS0_RK39VkSubpassDescriptionDepthStencilResolve(%"class.vk::ImageView"* %70, %"class.vk::ImageView"* %77, %struct.VkSubpassDescriptionDepthStencilResolve* nonnull dereferenceable(32) %4) #5
  br label %78

78:                                               ; preds = %57, %65
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %58) #6
  br label %79

79:                                               ; preds = %49, %53, %78
  ret void
}

; Function Attrs: optsize
declare void @_ZN2vk9ImageView20resolveWithLayerMaskEPS0_j(%"class.vk::ImageView"*, %"class.vk::ImageView"*, i32) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN2vk9ImageView7resolveEPS0_(%"class.vk::ImageView"*, %"class.vk::ImageView"*) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN2vk9ImageView19resolveDepthStencilEPS0_RK39VkSubpassDescriptionDepthStencilResolve(%"class.vk::ImageView"*, %"class.vk::ImageView"*, %struct.VkSubpassDescriptionDepthStencilResolve* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i64 @_ZN2vk11Framebuffer29ComputeRequiredAllocationSizeEPK23VkFramebufferCreateInfo(%struct.VkFramebufferCreateInfo* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %struct.VkFramebufferCreateInfo, %struct.VkFramebufferCreateInfo* %0, i64 0, i32 1
  %3 = bitcast i8** %2 to %struct.VkBaseInStructure**
  %4 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %3, align 8
  %5 = icmp eq %struct.VkBaseInStructure* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1, %6
  %7 = phi %struct.VkBaseInStructure* [ %15, %6 ], [ %4, %1 ]
  %8 = phi %struct.VkFramebufferAttachmentsCreateInfo* [ %13, %6 ], [ null, %1 ]
  %9 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %7, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 1000108001
  %12 = bitcast %struct.VkBaseInStructure* %7 to %struct.VkFramebufferAttachmentsCreateInfo*
  %13 = select i1 %11, %struct.VkFramebufferAttachmentsCreateInfo* %12, %struct.VkFramebufferAttachmentsCreateInfo* %8
  %14 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %7, i64 0, i32 1
  %15 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %14, align 8
  %16 = icmp eq %struct.VkBaseInStructure* %15, null
  br i1 %16, label %17, label %6

17:                                               ; preds = %6, %1
  %18 = phi %struct.VkFramebufferAttachmentsCreateInfo* [ null, %1 ], [ %13, %6 ]
  %19 = getelementptr inbounds %struct.VkFramebufferCreateInfo, %struct.VkFramebufferCreateInfo* %0, i64 0, i32 2
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = getelementptr inbounds %struct.VkFramebufferAttachmentsCreateInfo, %struct.VkFramebufferAttachmentsCreateInfo* %18, i64 0, i32 2
  %24 = getelementptr inbounds %struct.VkFramebufferCreateInfo, %struct.VkFramebufferCreateInfo* %0, i64 0, i32 4
  %25 = select i1 %22, i32* %24, i32* %23
  %26 = load i32, i32* %25, align 8
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 3
  ret i64 %28
}

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind optsize }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK2vk10RenderPass13getAttachmentEj: argument 0"}
!4 = distinct !{!4, !"_ZNK2vk10RenderPass13getAttachmentEj"}
