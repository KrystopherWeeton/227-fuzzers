; ModuleID = 'gen/third_party/blink/renderer/core/securitypolicyviolation_disposition_names.cc'
source_filename = "gen/third_party/blink/renderer/core/securitypolicyviolation_disposition_names.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@_ZN5blink41securitypolicyviolation_disposition_names13names_storageE = hidden global [2 x i8*] zeroinitializer, align 16
@_ZN5blink41securitypolicyviolation_disposition_names8kEnforceE = hidden local_unnamed_addr constant %"class.WTF::AtomicString"* bitcast ([2 x i8*]* @_ZN5blink41securitypolicyviolation_disposition_names13names_storageE to %"class.WTF::AtomicString"*), align 8
@_ZN5blink41securitypolicyviolation_disposition_names7kReportE = hidden local_unnamed_addr constant %"class.WTF::AtomicString"* bitcast (i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_ZN5blink41securitypolicyviolation_disposition_names13names_storageE, i64 0, i64 1) to %"class.WTF::AtomicString"*), align 8
@_ZZN5blink41securitypolicyviolation_disposition_names4InitEvE9is_loaded = internal unnamed_addr global i1 false, align 1
@.str = private unnamed_addr constant [8 x i8] c"enforce\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"report\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink41securitypolicyviolation_disposition_names4InitEv() local_unnamed_addr #0 {
  %1 = load i1, i1* @_ZZN5blink41securitypolicyviolation_disposition_names4InitEvE9is_loaded, align 1
  br i1 %1, label %33, label %2

2:                                                ; preds = %0
  store i1 true, i1* @_ZZN5blink41securitypolicyviolation_disposition_names4InitEvE9is_loaded, align 1
  %3 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 7, i32 12733682) #4
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %28, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 acquire, align 4
  %8 = and i32 %7, 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %26, label %10

10:                                               ; preds = %5
  %11 = load atomic i32, i32* %6 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %28

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #4
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %43, %14
  tail call void @llvm.trap() #4
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %28

26:                                               ; preds = %5
  %27 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %3) #4
  br label %28

28:                                               ; preds = %2, %10, %24, %26
  %29 = phi %"class.WTF::StringImpl"* [ %27, %26 ], [ %3, %10 ], [ %3, %24 ], [ null, %2 ]
  %30 = ptrtoint %"class.WTF::StringImpl"* %29 to i64
  store i64 %30, i64* bitcast ([2 x i8*]* @_ZN5blink41securitypolicyviolation_disposition_names13names_storageE to i64*), align 16
  %31 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 6, i32 6727485) #4
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %56, label %34

33:                                               ; preds = %56, %0
  ret void

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 acquire, align 4
  %37 = and i32 %36, 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %54, label %39

39:                                               ; preds = %34
  %40 = load atomic i32, i32* %35 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %56

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #4
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %23, label %52, !prof !2

52:                                               ; preds = %43
  %53 = trunc i33 %49 to i32
  store i32 %53, i32* %44, align 4
  br label %56

54:                                               ; preds = %34
  %55 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %31) #4
  br label %56

56:                                               ; preds = %54, %52, %39, %28
  %57 = phi %"class.WTF::StringImpl"* [ %55, %54 ], [ %31, %39 ], [ %31, %52 ], [ null, %28 ]
  %58 = ptrtoint %"class.WTF::StringImpl"* %57 to i64
  store i64 %58, i64* bitcast (i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_ZN5blink41securitypolicyviolation_disposition_names13names_storageE, i64 0, i64 1) to i64*), align 8
  br label %33
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8*, i32, i32) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
