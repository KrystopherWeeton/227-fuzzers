; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/decoder/detokenize.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/decoder/detokenize.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%union.int_mv = type { i32 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.VP8D_COMP = type { %struct.macroblockd, [4 x %struct.yv12_buffer_config*], %struct.VP8Common, [9 x %struct.BOOL_DECODER], %struct.VP8D_CONFIG, %struct.FRAGMENT_DATA, %struct.vpx_atomic_int, i32, i32, i32, i32, [4 x i32], i32, %struct.vpx_atomic_int*, i8**, i8**, i8**, i8**, i8**, i8**, %struct.MB_ROW_DEC*, %struct.DECODETHREAD_DATA*, i64*, %union.sem_t*, %union.sem_t, i64, i32, i8, i8, i8, i8, i32, i32, i32, i32, i32, void (i8*, i8*, i8*, i32)*, i8*, i32 }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.mv_context = type { [19 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_DECODER = type { i8*, i8*, i64, i32, i32, void (i8*, i8*, i8*, i32)*, i8* }
%struct.VP8D_CONFIG = type { i32, i32, i32, i32, i32, i32 }
%struct.FRAGMENT_DATA = type { i32, i32, [9 x i8*], [9 x i32] }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_DEC = type { %struct.macroblockd }
%struct.DECODETHREAD_DATA = type { i32, i8*, i8* }
%union.sem_t = type { i64, [24 x i8] }

@kBands = internal unnamed_addr constant [17 x i8] c"\00\01\02\03\06\04\05\06\06\06\06\06\06\06\06\07\00", align 16
@kCat3456 = internal unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @kCat3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @kCat4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @kCat5, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @kCat6, i32 0, i32 0)], align 16
@kZigzag = internal unnamed_addr constant [16 x i8] c"\00\01\04\08\05\02\03\06\09\0C\0D\0A\07\0B\0E\0F", align 16
@vp8_norm = external local_unnamed_addr constant [256 x i8], align 16
@kCat3 = internal constant [4 x i8] c"\AD\94\8C\00", align 1
@kCat4 = internal constant [5 x i8] c"\B0\9B\8C\87\00", align 1
@kCat5 = internal constant [6 x i8] c"\B4\9D\8D\86\82\00", align 1
@kCat6 = internal constant [12 x i8] c"\FE\FE\F3\E6\C4\B1\99\8C\85\82\81\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_reset_mb_tokens_context(%struct.macroblockd* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 21
  %3 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %2 to i8**
  %4 = load i8*, i8** %3, align 16
  %5 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 22
  %6 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast i8* %4 to i64*
  store i64 0, i64* %8, align 1
  %9 = bitcast i8* %7 to i64*
  store i64 0, i64* %9, align 1
  %10 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 13
  %11 = load %struct.modeinfo*, %struct.modeinfo** %10, align 32
  %12 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %11, i64 0, i32 0, i32 3
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %1
  %16 = getelementptr inbounds i8, i8* %7, i64 8
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds i8, i8* %4, i64 8
  store i8 0, i8* %17, align 1
  br label %18

18:                                               ; preds = %1, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_decode_mb_tokens(%struct.VP8D_COMP* nocapture readonly, %struct.macroblockd* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 43
  %4 = bitcast i8** %3 to %struct.BOOL_DECODER**
  %5 = load %struct.BOOL_DECODER*, %struct.BOOL_DECODER** %4, align 8
  %6 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 21
  %7 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %6 to i8**
  %8 = load i8*, i8** %7, align 16
  %9 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 22
  %10 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 1, i64 0
  %13 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 13
  %14 = load %struct.modeinfo*, %struct.modeinfo** %13, align 32
  %15 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %14, i64 0, i32 0, i32 3
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %35

18:                                               ; preds = %2
  %19 = getelementptr inbounds i8, i8* %8, i64 8
  %20 = getelementptr inbounds i8, i8* %11, i64 8
  %21 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 4, i64 1, i64 0
  %22 = load i8, i8* %19, align 1
  %23 = sext i8 %22 to i32
  %24 = load i8, i8* %20, align 1
  %25 = sext i8 %24 to i32
  %26 = add nsw i32 %25, %23
  %27 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 1, i64 384
  %28 = tail call fastcc i32 @GetCoeffs(%struct.BOOL_DECODER* %5, [3 x [11 x i8]]* %21, i32 %26, i32 0, i16* %27)
  %29 = icmp sgt i32 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %20, align 1
  store i8 %30, i8* %19, align 1
  %31 = trunc i32 %28 to i8
  %32 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 3, i64 24
  store i8 %31, i8* %32, align 1
  %33 = add nsw i32 %28, -16
  %34 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 4, i64 0, i64 0
  br label %37

35:                                               ; preds = %2
  %36 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 4, i64 3, i64 0
  br label %37

37:                                               ; preds = %35, %18
  %38 = phi i32 [ 0, %35 ], [ %33, %18 ]
  %39 = phi [3 x [11 x i8]]* [ %36, %35 ], [ %34, %18 ]
  %40 = phi i32 [ 0, %35 ], [ 1, %18 ]
  br label %41

41:                                               ; preds = %41, %37
  %42 = phi i64 [ 0, %37 ], [ %63, %41 ]
  %43 = phi i16* [ %12, %37 ], [ %62, %41 ]
  %44 = phi i32 [ %38, %37 ], [ %61, %41 ]
  %45 = and i64 %42, 3
  %46 = getelementptr inbounds i8, i8* %8, i64 %45
  %47 = lshr i64 %42, 2
  %48 = and i64 %47, 3
  %49 = getelementptr inbounds i8, i8* %11, i64 %48
  %50 = load i8, i8* %46, align 1
  %51 = sext i8 %50 to i32
  %52 = load i8, i8* %49, align 1
  %53 = sext i8 %52 to i32
  %54 = add nsw i32 %53, %51
  %55 = tail call fastcc i32 @GetCoeffs(%struct.BOOL_DECODER* %5, [3 x [11 x i8]]* %39, i32 %54, i32 %40, i16* %43)
  %56 = icmp sgt i32 %55, 0
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %49, align 1
  store i8 %57, i8* %46, align 1
  %58 = add nsw i32 %55, %40
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 3, i64 %42
  store i8 %59, i8* %60, align 1
  %61 = add nsw i32 %58, %44
  %62 = getelementptr inbounds i16, i16* %43, i64 16
  %63 = add nuw nsw i64 %42, 1
  %64 = icmp eq i64 %63, 16
  br i1 %64, label %65, label %41

65:                                               ; preds = %41
  %66 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 4, i64 2, i64 0
  %67 = getelementptr inbounds i8, i8* %8, i64 4
  %68 = getelementptr inbounds i8, i8* %11, i64 4
  br label %69

69:                                               ; preds = %69, %65
  %70 = phi i64 [ 16, %65 ], [ %95, %69 ]
  %71 = phi i16* [ %62, %65 ], [ %94, %69 ]
  %72 = phi i32 [ %61, %65 ], [ %93, %69 ]
  %73 = icmp ugt i64 %70, 19
  %74 = zext i1 %73 to i64
  %75 = shl nuw nsw i64 %74, 1
  %76 = getelementptr inbounds i8, i8* %67, i64 %75
  %77 = and i64 %70, 1
  %78 = getelementptr inbounds i8, i8* %76, i64 %77
  %79 = getelementptr inbounds i8, i8* %68, i64 %75
  %80 = lshr i64 %70, 1
  %81 = and i64 %80, 1
  %82 = getelementptr inbounds i8, i8* %79, i64 %81
  %83 = load i8, i8* %78, align 1
  %84 = sext i8 %83 to i32
  %85 = load i8, i8* %82, align 1
  %86 = sext i8 %85 to i32
  %87 = add nsw i32 %86, %84
  %88 = tail call fastcc i32 @GetCoeffs(%struct.BOOL_DECODER* %5, [3 x [11 x i8]]* %66, i32 %87, i32 0, i16* %71)
  %89 = icmp sgt i32 %88, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %82, align 1
  store i8 %90, i8* %78, align 1
  %91 = trunc i32 %88 to i8
  %92 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 3, i64 %70
  store i8 %91, i8* %92, align 1
  %93 = add nsw i32 %88, %72
  %94 = getelementptr inbounds i16, i16* %71, i64 16
  %95 = add nuw nsw i64 %70, 1
  %96 = icmp eq i64 %95, 24
  br i1 %96, label %97, label %69

97:                                               ; preds = %69
  ret i32 %93
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @GetCoeffs(%struct.BOOL_DECODER*, [3 x [11 x i8]]* nocapture readonly, i32, i32, i16* nocapture) unnamed_addr #1 {
  %6 = sext i32 %3 to i64
  %7 = sext i32 %2 to i64
  %8 = getelementptr inbounds [3 x [11 x i8]], [3 x [11 x i8]]* %1, i64 %6, i64 %7, i64 0
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, -1
  %14 = mul i32 %13, %10
  %15 = lshr i32 %14, 8
  %16 = add nuw nsw i32 %15, 1
  %17 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 3
  %18 = load i32, i32* %17, align 8
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %5
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %21 = load i32, i32* %17, align 8
  br label %22

22:                                               ; preds = %20, %5
  %23 = phi i32 [ %21, %20 ], [ %18, %5 ]
  %24 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = zext i32 %16 to i64
  %27 = shl i64 %26, 56
  %28 = icmp ult i64 %25, %27
  br i1 %28, label %33, label %29

29:                                               ; preds = %22
  %30 = load i32, i32* %11, align 4
  %31 = sub i32 %30, %16
  %32 = sub i64 %25, %27
  br label %33

33:                                               ; preds = %22, %29
  %34 = phi i64 [ %32, %29 ], [ %25, %22 ]
  %35 = phi i32 [ %31, %29 ], [ %16, %22 ]
  %36 = phi i1 [ false, %29 ], [ true, %22 ]
  %37 = and i32 %35, 255
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = shl i32 %35, %41
  %43 = zext i8 %40 to i64
  %44 = shl i64 %34, %43
  %45 = sub nsw i32 %23, %41
  store i64 %44, i64* %24, align 8
  store i32 %45, i32* %17, align 8
  store i32 %42, i32* %11, align 4
  br i1 %36, label %613, label %46

46:                                               ; preds = %33, %604
  %47 = phi i64 [ %606, %604 ], [ %44, %33 ]
  %48 = phi i32 [ %607, %604 ], [ %45, %33 ]
  %49 = phi i32 [ %608, %604 ], [ %42, %33 ]
  %50 = phi i64 [ %52, %604 ], [ %6, %33 ]
  %51 = phi i8* [ %609, %604 ], [ %8, %33 ]
  %52 = add nsw i64 %50, 1
  %53 = getelementptr inbounds i8, i8* %51, i64 1
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = add i32 %49, -1
  %57 = mul i32 %56, %55
  %58 = lshr i32 %57, 8
  %59 = add nuw nsw i32 %58, 1
  %60 = icmp slt i32 %48, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %46
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %62 = load i32, i32* %17, align 8
  %63 = load i64, i64* %24, align 8
  br label %64

64:                                               ; preds = %61, %46
  %65 = phi i64 [ %63, %61 ], [ %47, %46 ]
  %66 = phi i32 [ %62, %61 ], [ %48, %46 ]
  %67 = zext i32 %59 to i64
  %68 = shl i64 %67, 56
  %69 = icmp ult i64 %65, %68
  br i1 %69, label %74, label %70

70:                                               ; preds = %64
  %71 = load i32, i32* %11, align 4
  %72 = sub i32 %71, %59
  %73 = sub i64 %65, %68
  br label %74

74:                                               ; preds = %64, %70
  %75 = phi i64 [ %73, %70 ], [ %65, %64 ]
  %76 = phi i32 [ %72, %70 ], [ %59, %64 ]
  %77 = phi i1 [ false, %70 ], [ true, %64 ]
  %78 = and i32 %76, 255
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl i32 %76, %82
  %84 = zext i8 %81 to i64
  %85 = shl i64 %75, %84
  %86 = sub nsw i32 %66, %82
  store i64 %85, i64* %24, align 8
  store i32 %86, i32* %17, align 8
  store i32 %83, i32* %11, align 4
  br i1 %77, label %87, label %93

87:                                               ; preds = %74
  %88 = getelementptr inbounds [17 x i8], [17 x i8]* @kBands, i64 0, i64 %52
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i64
  %91 = getelementptr inbounds [3 x [11 x i8]], [3 x [11 x i8]]* %1, i64 %90, i64 0, i64 0
  %92 = trunc i64 %52 to i32
  br label %604

93:                                               ; preds = %74
  %94 = getelementptr inbounds i8, i8* %51, i64 2
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = add i32 %83, -1
  %98 = mul i32 %97, %96
  %99 = lshr i32 %98, 8
  %100 = add nuw nsw i32 %99, 1
  %101 = icmp slt i32 %86, 0
  br i1 %101, label %102, label %105

102:                                              ; preds = %93
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %103 = load i32, i32* %17, align 8
  %104 = load i64, i64* %24, align 8
  br label %105

105:                                              ; preds = %102, %93
  %106 = phi i64 [ %104, %102 ], [ %85, %93 ]
  %107 = phi i32 [ %103, %102 ], [ %86, %93 ]
  %108 = zext i32 %100 to i64
  %109 = shl i64 %108, 56
  %110 = icmp ult i64 %106, %109
  br i1 %110, label %115, label %111

111:                                              ; preds = %105
  %112 = load i32, i32* %11, align 4
  %113 = sub i32 %112, %100
  %114 = sub i64 %106, %109
  br label %115

115:                                              ; preds = %105, %111
  %116 = phi i64 [ %114, %111 ], [ %106, %105 ]
  %117 = phi i32 [ %113, %111 ], [ %100, %105 ]
  %118 = phi i1 [ false, %111 ], [ true, %105 ]
  %119 = and i32 %117, 255
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = shl i32 %117, %123
  %125 = zext i8 %122 to i64
  %126 = shl i64 %116, %125
  %127 = sub nsw i32 %107, %123
  store i64 %126, i64* %24, align 8
  store i32 %127, i32* %17, align 8
  store i32 %124, i32* %11, align 4
  br i1 %118, label %528, label %128

128:                                              ; preds = %115
  %129 = getelementptr inbounds i8, i8* %51, i64 3
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = add i32 %124, -1
  %133 = mul i32 %132, %131
  %134 = lshr i32 %133, 8
  %135 = add nuw nsw i32 %134, 1
  %136 = icmp slt i32 %127, 0
  br i1 %136, label %137, label %140

137:                                              ; preds = %128
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %138 = load i32, i32* %17, align 8
  %139 = load i64, i64* %24, align 8
  br label %140

140:                                              ; preds = %137, %128
  %141 = phi i64 [ %139, %137 ], [ %126, %128 ]
  %142 = phi i32 [ %138, %137 ], [ %127, %128 ]
  %143 = zext i32 %135 to i64
  %144 = shl i64 %143, 56
  %145 = icmp ult i64 %141, %144
  br i1 %145, label %150, label %146

146:                                              ; preds = %140
  %147 = load i32, i32* %11, align 4
  %148 = sub i32 %147, %135
  %149 = sub i64 %141, %144
  br label %150

150:                                              ; preds = %140, %146
  %151 = phi i64 [ %149, %146 ], [ %141, %140 ]
  %152 = phi i32 [ %148, %146 ], [ %135, %140 ]
  %153 = phi i1 [ false, %146 ], [ true, %140 ]
  %154 = and i32 %152, 255
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = shl i32 %152, %158
  %160 = zext i8 %157 to i64
  %161 = shl i64 %151, %160
  %162 = sub nsw i32 %142, %158
  store i64 %161, i64* %24, align 8
  store i32 %162, i32* %17, align 8
  store i32 %159, i32* %11, align 4
  br i1 %153, label %163, label %233

163:                                              ; preds = %150
  %164 = getelementptr inbounds i8, i8* %51, i64 4
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = add i32 %159, -1
  %168 = mul i32 %167, %166
  %169 = lshr i32 %168, 8
  %170 = add nuw nsw i32 %169, 1
  %171 = icmp slt i32 %162, 0
  br i1 %171, label %172, label %175

172:                                              ; preds = %163
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %173 = load i32, i32* %17, align 8
  %174 = load i64, i64* %24, align 8
  br label %175

175:                                              ; preds = %172, %163
  %176 = phi i64 [ %174, %172 ], [ %161, %163 ]
  %177 = phi i32 [ %173, %172 ], [ %162, %163 ]
  %178 = zext i32 %170 to i64
  %179 = shl i64 %178, 56
  %180 = icmp ult i64 %176, %179
  br i1 %180, label %185, label %181

181:                                              ; preds = %175
  %182 = load i32, i32* %11, align 4
  %183 = sub i32 %182, %170
  %184 = sub i64 %176, %179
  br label %185

185:                                              ; preds = %175, %181
  %186 = phi i64 [ %184, %181 ], [ %176, %175 ]
  %187 = phi i32 [ %183, %181 ], [ %170, %175 ]
  %188 = phi i1 [ false, %181 ], [ true, %175 ]
  %189 = and i32 %187, 255
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %190
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i32
  %194 = shl i32 %187, %193
  %195 = zext i8 %192 to i64
  %196 = shl i64 %186, %195
  %197 = sub nsw i32 %177, %193
  store i64 %196, i64* %24, align 8
  store i32 %197, i32* %17, align 8
  store i32 %194, i32* %11, align 4
  br i1 %188, label %528, label %198

198:                                              ; preds = %185
  %199 = getelementptr inbounds i8, i8* %51, i64 5
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = add i32 %194, -1
  %203 = mul i32 %202, %201
  %204 = lshr i32 %203, 8
  %205 = add nuw nsw i32 %204, 1
  %206 = icmp slt i32 %197, 0
  br i1 %206, label %207, label %210

207:                                              ; preds = %198
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %208 = load i32, i32* %17, align 8
  %209 = load i64, i64* %24, align 8
  br label %210

210:                                              ; preds = %207, %198
  %211 = phi i64 [ %209, %207 ], [ %196, %198 ]
  %212 = phi i32 [ %208, %207 ], [ %197, %198 ]
  %213 = zext i32 %205 to i64
  %214 = shl i64 %213, 56
  %215 = icmp ult i64 %211, %214
  br i1 %215, label %220, label %216

216:                                              ; preds = %210
  %217 = load i32, i32* %11, align 4
  %218 = sub i32 %217, %205
  %219 = sub i64 %211, %214
  br label %220

220:                                              ; preds = %210, %216
  %221 = phi i64 [ %219, %216 ], [ %211, %210 ]
  %222 = phi i32 [ %218, %216 ], [ %205, %210 ]
  %223 = phi i32 [ 4, %216 ], [ 3, %210 ]
  %224 = and i32 %222, 255
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = shl i32 %222, %228
  %230 = zext i8 %227 to i64
  %231 = shl i64 %221, %230
  %232 = sub nsw i32 %212, %228
  store i64 %231, i64* %24, align 8
  store i32 %232, i32* %17, align 8
  store i32 %229, i32* %11, align 4
  br label %528

233:                                              ; preds = %150
  %234 = getelementptr inbounds i8, i8* %51, i64 6
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i32
  %237 = add i32 %159, -1
  %238 = mul i32 %237, %236
  %239 = lshr i32 %238, 8
  %240 = add nuw nsw i32 %239, 1
  %241 = icmp slt i32 %162, 0
  br i1 %241, label %242, label %245

242:                                              ; preds = %233
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %243 = load i32, i32* %17, align 8
  %244 = load i64, i64* %24, align 8
  br label %245

245:                                              ; preds = %242, %233
  %246 = phi i64 [ %244, %242 ], [ %161, %233 ]
  %247 = phi i32 [ %243, %242 ], [ %162, %233 ]
  %248 = zext i32 %240 to i64
  %249 = shl i64 %248, 56
  %250 = icmp ult i64 %246, %249
  br i1 %250, label %255, label %251

251:                                              ; preds = %245
  %252 = load i32, i32* %11, align 4
  %253 = sub i32 %252, %240
  %254 = sub i64 %246, %249
  br label %255

255:                                              ; preds = %245, %251
  %256 = phi i64 [ %254, %251 ], [ %246, %245 ]
  %257 = phi i32 [ %253, %251 ], [ %240, %245 ]
  %258 = phi i1 [ false, %251 ], [ true, %245 ]
  %259 = and i32 %257, 255
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %260
  %262 = load i8, i8* %261, align 1
  %263 = zext i8 %262 to i32
  %264 = shl i32 %257, %263
  %265 = zext i8 %262 to i64
  %266 = shl i64 %256, %265
  %267 = sub nsw i32 %247, %263
  store i64 %266, i64* %24, align 8
  store i32 %267, i32* %17, align 8
  store i32 %264, i32* %11, align 4
  br i1 %258, label %268, label %398

268:                                              ; preds = %255
  %269 = getelementptr inbounds i8, i8* %51, i64 7
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i32
  %272 = add i32 %264, -1
  %273 = mul i32 %272, %271
  %274 = lshr i32 %273, 8
  %275 = add nuw nsw i32 %274, 1
  %276 = icmp slt i32 %267, 0
  br i1 %276, label %277, label %280

277:                                              ; preds = %268
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %278 = load i32, i32* %17, align 8
  %279 = load i64, i64* %24, align 8
  br label %280

280:                                              ; preds = %277, %268
  %281 = phi i64 [ %279, %277 ], [ %266, %268 ]
  %282 = phi i32 [ %278, %277 ], [ %267, %268 ]
  %283 = zext i32 %275 to i64
  %284 = shl i64 %283, 56
  %285 = icmp ult i64 %281, %284
  br i1 %285, label %290, label %286

286:                                              ; preds = %280
  %287 = load i32, i32* %11, align 4
  %288 = sub i32 %287, %275
  %289 = sub i64 %281, %284
  br label %290

290:                                              ; preds = %280, %286
  %291 = phi i64 [ %289, %286 ], [ %281, %280 ]
  %292 = phi i32 [ %288, %286 ], [ %275, %280 ]
  %293 = phi i1 [ false, %286 ], [ true, %280 ]
  %294 = and i32 %292, 255
  %295 = zext i32 %294 to i64
  %296 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %295
  %297 = load i8, i8* %296, align 1
  %298 = zext i8 %297 to i32
  %299 = shl i32 %292, %298
  %300 = zext i8 %297 to i64
  %301 = shl i64 %291, %300
  %302 = sub nsw i32 %282, %298
  store i64 %301, i64* %24, align 8
  store i32 %302, i32* %17, align 8
  store i32 %299, i32* %11, align 4
  %303 = add i32 %299, -1
  br i1 %293, label %304, label %335

304:                                              ; preds = %290
  %305 = mul i32 %303, 159
  %306 = lshr i32 %305, 8
  %307 = add nuw nsw i32 %306, 1
  %308 = icmp slt i32 %302, 0
  br i1 %308, label %309, label %312

309:                                              ; preds = %304
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %310 = load i32, i32* %17, align 8
  %311 = load i64, i64* %24, align 8
  br label %312

312:                                              ; preds = %309, %304
  %313 = phi i64 [ %311, %309 ], [ %301, %304 ]
  %314 = phi i32 [ %310, %309 ], [ %302, %304 ]
  %315 = zext i32 %307 to i64
  %316 = shl i64 %315, 56
  %317 = icmp ult i64 %313, %316
  br i1 %317, label %322, label %318

318:                                              ; preds = %312
  %319 = load i32, i32* %11, align 4
  %320 = sub i32 %319, %307
  %321 = sub i64 %313, %316
  br label %322

322:                                              ; preds = %312, %318
  %323 = phi i64 [ %321, %318 ], [ %313, %312 ]
  %324 = phi i32 [ %320, %318 ], [ %307, %312 ]
  %325 = phi i32 [ 6, %318 ], [ 5, %312 ]
  %326 = and i32 %324, 255
  %327 = zext i32 %326 to i64
  %328 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %327
  %329 = load i8, i8* %328, align 1
  %330 = zext i8 %329 to i32
  %331 = shl i32 %324, %330
  %332 = zext i8 %329 to i64
  %333 = shl i64 %323, %332
  %334 = sub nsw i32 %314, %330
  store i64 %333, i64* %24, align 8
  store i32 %334, i32* %17, align 8
  store i32 %331, i32* %11, align 4
  br label %528

335:                                              ; preds = %290
  %336 = mul i32 %303, 165
  %337 = lshr i32 %336, 8
  %338 = add nuw nsw i32 %337, 1
  %339 = icmp slt i32 %302, 0
  br i1 %339, label %340, label %343

340:                                              ; preds = %335
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %341 = load i32, i32* %17, align 8
  %342 = load i64, i64* %24, align 8
  br label %343

343:                                              ; preds = %340, %335
  %344 = phi i64 [ %342, %340 ], [ %301, %335 ]
  %345 = phi i32 [ %341, %340 ], [ %302, %335 ]
  %346 = zext i32 %338 to i64
  %347 = shl i64 %346, 56
  %348 = icmp ult i64 %344, %347
  br i1 %348, label %353, label %349

349:                                              ; preds = %343
  %350 = load i32, i32* %11, align 4
  %351 = sub i32 %350, %338
  %352 = sub i64 %344, %347
  br label %353

353:                                              ; preds = %343, %349
  %354 = phi i64 [ %352, %349 ], [ %344, %343 ]
  %355 = phi i32 [ %351, %349 ], [ %338, %343 ]
  %356 = phi i32 [ 9, %349 ], [ 7, %343 ]
  %357 = and i32 %355, 255
  %358 = zext i32 %357 to i64
  %359 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %358
  %360 = load i8, i8* %359, align 1
  %361 = zext i8 %360 to i32
  %362 = shl i32 %355, %361
  %363 = zext i8 %360 to i64
  %364 = shl i64 %354, %363
  %365 = sub nsw i32 %345, %361
  store i64 %364, i64* %24, align 8
  store i32 %365, i32* %17, align 8
  store i32 %362, i32* %11, align 4
  %366 = mul i32 %362, 145
  %367 = add i32 %366, -145
  %368 = lshr i32 %367, 8
  %369 = add nuw nsw i32 %368, 1
  %370 = icmp slt i32 %365, 0
  br i1 %370, label %371, label %374

371:                                              ; preds = %353
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %372 = load i32, i32* %17, align 8
  %373 = load i64, i64* %24, align 8
  br label %374

374:                                              ; preds = %371, %353
  %375 = phi i64 [ %373, %371 ], [ %364, %353 ]
  %376 = phi i32 [ %372, %371 ], [ %365, %353 ]
  %377 = zext i32 %369 to i64
  %378 = shl i64 %377, 56
  %379 = icmp ult i64 %375, %378
  br i1 %379, label %384, label %380

380:                                              ; preds = %374
  %381 = load i32, i32* %11, align 4
  %382 = sub i32 %381, %369
  %383 = sub i64 %375, %378
  br label %384

384:                                              ; preds = %374, %380
  %385 = phi i64 [ %383, %380 ], [ %375, %374 ]
  %386 = phi i32 [ %382, %380 ], [ %369, %374 ]
  %387 = phi i32 [ 1, %380 ], [ 0, %374 ]
  %388 = and i32 %386, 255
  %389 = zext i32 %388 to i64
  %390 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %389
  %391 = load i8, i8* %390, align 1
  %392 = zext i8 %391 to i32
  %393 = shl i32 %386, %392
  %394 = zext i8 %391 to i64
  %395 = shl i64 %385, %394
  %396 = sub nsw i32 %376, %392
  store i64 %395, i64* %24, align 8
  store i32 %396, i32* %17, align 8
  store i32 %393, i32* %11, align 4
  %397 = add nuw nsw i32 %387, %356
  br label %528

398:                                              ; preds = %255
  %399 = getelementptr inbounds i8, i8* %51, i64 8
  %400 = load i8, i8* %399, align 1
  %401 = zext i8 %400 to i32
  %402 = add i32 %264, -1
  %403 = mul i32 %402, %401
  %404 = lshr i32 %403, 8
  %405 = add nuw nsw i32 %404, 1
  %406 = icmp slt i32 %267, 0
  br i1 %406, label %407, label %410

407:                                              ; preds = %398
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %408 = load i32, i32* %17, align 8
  %409 = load i64, i64* %24, align 8
  br label %410

410:                                              ; preds = %407, %398
  %411 = phi i64 [ %409, %407 ], [ %266, %398 ]
  %412 = phi i32 [ %408, %407 ], [ %267, %398 ]
  %413 = zext i32 %405 to i64
  %414 = shl i64 %413, 56
  %415 = icmp ult i64 %411, %414
  br i1 %415, label %420, label %416

416:                                              ; preds = %410
  %417 = load i32, i32* %11, align 4
  %418 = sub i32 %417, %405
  %419 = sub i64 %411, %414
  br label %420

420:                                              ; preds = %410, %416
  %421 = phi i64 [ %419, %416 ], [ %411, %410 ]
  %422 = phi i32 [ %418, %416 ], [ %405, %410 ]
  %423 = phi i32 [ 1, %416 ], [ 0, %410 ]
  %424 = and i32 %422, 255
  %425 = zext i32 %424 to i64
  %426 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %425
  %427 = load i8, i8* %426, align 1
  %428 = zext i8 %427 to i32
  %429 = shl i32 %422, %428
  %430 = zext i8 %427 to i64
  %431 = shl i64 %421, %430
  %432 = sub nsw i32 %412, %428
  store i64 %431, i64* %24, align 8
  store i32 %432, i32* %17, align 8
  store i32 %429, i32* %11, align 4
  %433 = add nuw nsw i32 %423, 9
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds i8, i8* %51, i64 %434
  %436 = load i8, i8* %435, align 1
  %437 = zext i8 %436 to i32
  %438 = add i32 %429, -1
  %439 = mul i32 %438, %437
  %440 = lshr i32 %439, 8
  %441 = add nuw nsw i32 %440, 1
  %442 = icmp slt i32 %432, 0
  br i1 %442, label %443, label %446

443:                                              ; preds = %420
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %444 = load i32, i32* %17, align 8
  %445 = load i64, i64* %24, align 8
  br label %446

446:                                              ; preds = %443, %420
  %447 = phi i64 [ %445, %443 ], [ %431, %420 ]
  %448 = phi i32 [ %444, %443 ], [ %432, %420 ]
  %449 = zext i32 %441 to i64
  %450 = shl i64 %449, 56
  %451 = icmp ult i64 %447, %450
  br i1 %451, label %456, label %452

452:                                              ; preds = %446
  %453 = load i32, i32* %11, align 4
  %454 = sub i32 %453, %441
  %455 = sub i64 %447, %450
  br label %456

456:                                              ; preds = %446, %452
  %457 = phi i64 [ %455, %452 ], [ %447, %446 ]
  %458 = phi i32 [ %454, %452 ], [ %441, %446 ]
  %459 = phi i32 [ 1, %452 ], [ 0, %446 ]
  %460 = and i32 %458, 255
  %461 = zext i32 %460 to i64
  %462 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %461
  %463 = load i8, i8* %462, align 1
  %464 = zext i8 %463 to i32
  %465 = shl i32 %458, %464
  %466 = zext i8 %463 to i64
  %467 = shl i64 %457, %466
  %468 = sub nsw i32 %448, %464
  store i64 %467, i64* %24, align 8
  store i32 %468, i32* %17, align 8
  store i32 %465, i32* %11, align 4
  %469 = shl nuw nsw i32 %423, 1
  %470 = or i32 %459, %469
  %471 = zext i32 %470 to i64
  %472 = getelementptr inbounds [4 x i8*], [4 x i8*]* @kCat3456, i64 0, i64 %471
  %473 = load i8*, i8** %472, align 8
  %474 = load i8, i8* %473, align 1
  %475 = icmp eq i8 %474, 0
  br i1 %475, label %520, label %476

476:                                              ; preds = %456, %502
  %477 = phi i64 [ %513, %502 ], [ %467, %456 ]
  %478 = phi i32 [ %514, %502 ], [ %468, %456 ]
  %479 = phi i32 [ %511, %502 ], [ %465, %456 ]
  %480 = phi i8 [ %518, %502 ], [ %474, %456 ]
  %481 = phi i8* [ %517, %502 ], [ %473, %456 ]
  %482 = phi i32 [ %516, %502 ], [ 0, %456 ]
  %483 = zext i8 %480 to i32
  %484 = add i32 %479, -1
  %485 = mul i32 %484, %483
  %486 = lshr i32 %485, 8
  %487 = add nuw nsw i32 %486, 1
  %488 = icmp slt i32 %478, 0
  br i1 %488, label %489, label %492

489:                                              ; preds = %476
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %490 = load i32, i32* %17, align 8
  %491 = load i64, i64* %24, align 8
  br label %492

492:                                              ; preds = %489, %476
  %493 = phi i64 [ %491, %489 ], [ %477, %476 ]
  %494 = phi i32 [ %490, %489 ], [ %478, %476 ]
  %495 = zext i32 %487 to i64
  %496 = shl i64 %495, 56
  %497 = icmp ult i64 %493, %496
  br i1 %497, label %502, label %498

498:                                              ; preds = %492
  %499 = load i32, i32* %11, align 4
  %500 = sub i32 %499, %487
  %501 = sub i64 %493, %496
  br label %502

502:                                              ; preds = %492, %498
  %503 = phi i64 [ %501, %498 ], [ %493, %492 ]
  %504 = phi i32 [ %500, %498 ], [ %487, %492 ]
  %505 = phi i32 [ 1, %498 ], [ 0, %492 ]
  %506 = and i32 %504, 255
  %507 = zext i32 %506 to i64
  %508 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %507
  %509 = load i8, i8* %508, align 1
  %510 = zext i8 %509 to i32
  %511 = shl i32 %504, %510
  %512 = zext i8 %509 to i64
  %513 = shl i64 %503, %512
  %514 = sub nsw i32 %494, %510
  store i64 %513, i64* %24, align 8
  store i32 %514, i32* %17, align 8
  store i32 %511, i32* %11, align 4
  %515 = shl i32 %482, 1
  %516 = or i32 %505, %515
  %517 = getelementptr inbounds i8, i8* %481, i64 1
  %518 = load i8, i8* %517, align 1
  %519 = icmp eq i8 %518, 0
  br i1 %519, label %520, label %476

520:                                              ; preds = %502, %456
  %521 = phi i64 [ %467, %456 ], [ %513, %502 ]
  %522 = phi i32 [ %468, %456 ], [ %514, %502 ]
  %523 = phi i32 [ %465, %456 ], [ %511, %502 ]
  %524 = phi i32 [ 0, %456 ], [ %516, %502 ]
  %525 = shl i32 8, %470
  %526 = or i32 %525, 3
  %527 = add nsw i32 %524, %526
  br label %528

528:                                              ; preds = %220, %322, %384, %520, %185, %115
  %529 = phi i64 [ 1, %115 ], [ 2, %185 ], [ 2, %520 ], [ 2, %384 ], [ 2, %322 ], [ 2, %220 ]
  %530 = phi i64 [ %126, %115 ], [ %196, %185 ], [ %521, %520 ], [ %395, %384 ], [ %333, %322 ], [ %231, %220 ]
  %531 = phi i32 [ %127, %115 ], [ %197, %185 ], [ %522, %520 ], [ %396, %384 ], [ %334, %322 ], [ %232, %220 ]
  %532 = phi i32 [ %124, %115 ], [ %194, %185 ], [ %523, %520 ], [ %393, %384 ], [ %331, %322 ], [ %229, %220 ]
  %533 = phi i32 [ 1, %115 ], [ 2, %185 ], [ %527, %520 ], [ %397, %384 ], [ %325, %322 ], [ %223, %220 ]
  %534 = getelementptr inbounds [17 x i8], [17 x i8]* @kBands, i64 0, i64 %52
  %535 = load i8, i8* %534, align 1
  %536 = zext i8 %535 to i64
  %537 = getelementptr inbounds [3 x [11 x i8]], [3 x [11 x i8]]* %1, i64 %536, i64 %529, i64 0
  %538 = getelementptr inbounds [16 x i8], [16 x i8]* @kZigzag, i64 0, i64 %50
  %539 = load i8, i8* %538, align 1
  %540 = add i32 %532, 1
  %541 = lshr i32 %540, 1
  %542 = zext i32 %541 to i64
  %543 = shl i64 %542, 56
  %544 = icmp slt i32 %531, 0
  br i1 %544, label %545, label %547

545:                                              ; preds = %528
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %546 = load i64, i64* %24, align 8
  br label %547

547:                                              ; preds = %545, %528
  %548 = phi i64 [ %546, %545 ], [ %530, %528 ]
  %549 = icmp ult i64 %548, %543
  br i1 %549, label %550, label %551

550:                                              ; preds = %547
  store i32 %541, i32* %11, align 4
  br label %556

551:                                              ; preds = %547
  %552 = load i32, i32* %11, align 4
  %553 = sub i32 %552, %541
  store i32 %553, i32* %11, align 4
  %554 = sub i64 %548, %543
  store i64 %554, i64* %24, align 8
  %555 = sub nsw i32 0, %533
  br label %556

556:                                              ; preds = %550, %551
  %557 = phi i64 [ %548, %550 ], [ %554, %551 ]
  %558 = phi i32 [ %541, %550 ], [ %553, %551 ]
  %559 = phi i32 [ %533, %550 ], [ %555, %551 ]
  %560 = shl i32 %558, 1
  store i32 %560, i32* %11, align 4
  %561 = shl i64 %557, 1
  store i64 %561, i64* %24, align 8
  %562 = load i32, i32* %17, align 8
  %563 = add nsw i32 %562, -1
  store i32 %563, i32* %17, align 8
  %564 = trunc i32 %559 to i16
  %565 = zext i8 %539 to i64
  %566 = getelementptr inbounds i16, i16* %4, i64 %565
  store i16 %564, i16* %566, align 2
  %567 = trunc i64 %52 to i32
  %568 = icmp eq i32 %567, 16
  br i1 %568, label %613, label %569

569:                                              ; preds = %556
  %570 = load i8, i8* %537, align 1
  %571 = zext i8 %570 to i32
  %572 = load i32, i32* %11, align 4
  %573 = add i32 %572, -1
  %574 = mul i32 %573, %571
  %575 = lshr i32 %574, 8
  %576 = add nuw nsw i32 %575, 1
  %577 = load i32, i32* %17, align 8
  %578 = icmp slt i32 %577, 0
  br i1 %578, label %579, label %581

579:                                              ; preds = %569
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %580 = load i32, i32* %17, align 8
  br label %581

581:                                              ; preds = %579, %569
  %582 = phi i32 [ %580, %579 ], [ %577, %569 ]
  %583 = load i64, i64* %24, align 8
  %584 = zext i32 %576 to i64
  %585 = shl i64 %584, 56
  %586 = icmp ult i64 %583, %585
  br i1 %586, label %591, label %587

587:                                              ; preds = %581
  %588 = load i32, i32* %11, align 4
  %589 = sub i32 %588, %576
  %590 = sub i64 %583, %585
  br label %591

591:                                              ; preds = %587, %581
  %592 = phi i64 [ %590, %587 ], [ %583, %581 ]
  %593 = phi i32 [ %589, %587 ], [ %576, %581 ]
  %594 = phi i1 [ false, %587 ], [ true, %581 ]
  %595 = and i32 %593, 255
  %596 = zext i32 %595 to i64
  %597 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %596
  %598 = load i8, i8* %597, align 1
  %599 = zext i8 %598 to i32
  %600 = shl i32 %593, %599
  %601 = zext i8 %598 to i64
  %602 = shl i64 %592, %601
  %603 = sub nsw i32 %582, %599
  store i64 %602, i64* %24, align 8
  store i32 %603, i32* %17, align 8
  store i32 %600, i32* %11, align 4
  br i1 %594, label %611, label %604

604:                                              ; preds = %591, %87
  %605 = phi i32 [ %92, %87 ], [ %567, %591 ]
  %606 = phi i64 [ %85, %87 ], [ %602, %591 ]
  %607 = phi i32 [ %86, %87 ], [ %603, %591 ]
  %608 = phi i32 [ %83, %87 ], [ %600, %591 ]
  %609 = phi i8* [ %91, %87 ], [ %537, %591 ]
  %610 = icmp eq i32 %605, 16
  br i1 %610, label %613, label %46

611:                                              ; preds = %591
  %612 = trunc i64 %52 to i32
  br label %613

613:                                              ; preds = %604, %556, %611, %33
  %614 = phi i32 [ 0, %33 ], [ %612, %611 ], [ 16, %556 ], [ 16, %604 ]
  ret i32 %614
}

declare void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER*) local_unnamed_addr #2

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
