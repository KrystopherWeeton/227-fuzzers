; ModuleID = '../../third_party/flac/src/libFLAC/fixed.c'
source_filename = "../../third_party/flac/src/libFLAC/fixed.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @FLAC__fixed_compute_best_predictor(i32* nocapture readonly, i32, float* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds i32, i32* %0, i64 -1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 -2
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds i32, i32* %0, i64 -3
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %10, %7
  %12 = add i32 %11, %8
  %13 = icmp eq i32 %1, 0
  br i1 %13, label %154, label %14

14:                                               ; preds = %3
  %15 = shl nsw i32 %10, 1
  %16 = sub i32 %15, %7
  %17 = getelementptr inbounds i32, i32* %0, i64 -4
  %18 = load i32, i32* %17, align 4
  %19 = sub i32 %16, %18
  %20 = add i32 %19, %12
  %21 = zext i32 %1 to i64
  %22 = icmp ult i32 %1, 4
  br i1 %22, label %104, label %23

23:                                               ; preds = %14
  %24 = and i64 %21, 4294967292
  %25 = insertelement <4 x i32> undef, i32 %5, i32 3
  %26 = insertelement <4 x i32> undef, i32 %8, i32 3
  %27 = insertelement <4 x i32> undef, i32 %12, i32 3
  %28 = insertelement <4 x i32> undef, i32 %20, i32 3
  br label %29

29:                                               ; preds = %29, %23
  %30 = phi i64 [ 0, %23 ], [ %71, %29 ]
  %31 = phi <4 x i32> [ %25, %23 ], [ %42, %29 ]
  %32 = phi <4 x i32> [ %26, %23 ], [ %48, %29 ]
  %33 = phi <4 x i32> [ %27, %23 ], [ %54, %29 ]
  %34 = phi <4 x i32> [ %28, %23 ], [ %60, %29 ]
  %35 = phi <4 x i32> [ zeroinitializer, %23 ], [ %47, %29 ]
  %36 = phi <4 x i32> [ zeroinitializer, %23 ], [ %53, %29 ]
  %37 = phi <4 x i32> [ zeroinitializer, %23 ], [ %59, %29 ]
  %38 = phi <4 x i32> [ zeroinitializer, %23 ], [ %65, %29 ]
  %39 = phi <4 x i32> [ zeroinitializer, %23 ], [ %70, %29 ]
  %40 = getelementptr inbounds i32, i32* %0, i64 %30
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 4
  %43 = shufflevector <4 x i32> %31, <4 x i32> %42, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %44 = icmp slt <4 x i32> %42, zeroinitializer
  %45 = sub nsw <4 x i32> zeroinitializer, %42
  %46 = select <4 x i1> %44, <4 x i32> %45, <4 x i32> %42
  %47 = add <4 x i32> %46, %35
  %48 = sub nsw <4 x i32> %42, %43
  %49 = shufflevector <4 x i32> %32, <4 x i32> %48, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %50 = icmp slt <4 x i32> %48, zeroinitializer
  %51 = sub nsw <4 x i32> zeroinitializer, %48
  %52 = select <4 x i1> %50, <4 x i32> %51, <4 x i32> %48
  %53 = add <4 x i32> %52, %36
  %54 = sub nsw <4 x i32> %48, %49
  %55 = shufflevector <4 x i32> %33, <4 x i32> %54, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %56 = icmp slt <4 x i32> %54, zeroinitializer
  %57 = sub nsw <4 x i32> zeroinitializer, %54
  %58 = select <4 x i1> %56, <4 x i32> %57, <4 x i32> %54
  %59 = add <4 x i32> %58, %37
  %60 = sub nsw <4 x i32> %54, %55
  %61 = shufflevector <4 x i32> %34, <4 x i32> %60, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %62 = icmp slt <4 x i32> %60, zeroinitializer
  %63 = sub nsw <4 x i32> zeroinitializer, %60
  %64 = select <4 x i1> %62, <4 x i32> %63, <4 x i32> %60
  %65 = add <4 x i32> %64, %38
  %66 = sub nsw <4 x i32> %60, %61
  %67 = icmp slt <4 x i32> %66, zeroinitializer
  %68 = sub nsw <4 x i32> zeroinitializer, %66
  %69 = select <4 x i1> %67, <4 x i32> %68, <4 x i32> %66
  %70 = add <4 x i32> %69, %39
  %71 = add i64 %30, 4
  %72 = icmp eq i64 %71, %24
  br i1 %72, label %73, label %29, !llvm.loop !2

73:                                               ; preds = %29
  %74 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %75 = add <4 x i32> %70, %74
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %77 = add <4 x i32> %75, %76
  %78 = extractelement <4 x i32> %77, i32 0
  %79 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %80 = add <4 x i32> %65, %79
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %82 = add <4 x i32> %80, %81
  %83 = extractelement <4 x i32> %82, i32 0
  %84 = shufflevector <4 x i32> %59, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %59, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %90 = add <4 x i32> %53, %89
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %92 = add <4 x i32> %90, %91
  %93 = extractelement <4 x i32> %92, i32 0
  %94 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %95 = add <4 x i32> %47, %94
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %97 = add <4 x i32> %95, %96
  %98 = extractelement <4 x i32> %97, i32 0
  %99 = icmp eq i64 %24, %21
  %100 = extractelement <4 x i32> %42, i32 3
  %101 = extractelement <4 x i32> %48, i32 3
  %102 = extractelement <4 x i32> %54, i32 3
  %103 = extractelement <4 x i32> %60, i32 3
  br i1 %99, label %154, label %104

104:                                              ; preds = %73, %14
  %105 = phi i64 [ 0, %14 ], [ %24, %73 ]
  %106 = phi i32 [ %5, %14 ], [ %100, %73 ]
  %107 = phi i32 [ %8, %14 ], [ %101, %73 ]
  %108 = phi i32 [ %12, %14 ], [ %102, %73 ]
  %109 = phi i32 [ %20, %14 ], [ %103, %73 ]
  %110 = phi i32 [ 0, %14 ], [ %98, %73 ]
  %111 = phi i32 [ 0, %14 ], [ %93, %73 ]
  %112 = phi i32 [ 0, %14 ], [ %88, %73 ]
  %113 = phi i32 [ 0, %14 ], [ %83, %73 ]
  %114 = phi i32 [ 0, %14 ], [ %78, %73 ]
  br label %115

115:                                              ; preds = %104, %115
  %116 = phi i64 [ %152, %115 ], [ %105, %104 ]
  %117 = phi i32 [ %127, %115 ], [ %106, %104 ]
  %118 = phi i32 [ %132, %115 ], [ %107, %104 ]
  %119 = phi i32 [ %137, %115 ], [ %108, %104 ]
  %120 = phi i32 [ %142, %115 ], [ %109, %104 ]
  %121 = phi i32 [ %131, %115 ], [ %110, %104 ]
  %122 = phi i32 [ %136, %115 ], [ %111, %104 ]
  %123 = phi i32 [ %141, %115 ], [ %112, %104 ]
  %124 = phi i32 [ %146, %115 ], [ %113, %104 ]
  %125 = phi i32 [ %151, %115 ], [ %114, %104 ]
  %126 = getelementptr inbounds i32, i32* %0, i64 %116
  %127 = load i32, i32* %126, align 4
  %128 = icmp slt i32 %127, 0
  %129 = sub nsw i32 0, %127
  %130 = select i1 %128, i32 %129, i32 %127
  %131 = add i32 %130, %121
  %132 = sub nsw i32 %127, %117
  %133 = icmp slt i32 %132, 0
  %134 = sub nsw i32 0, %132
  %135 = select i1 %133, i32 %134, i32 %132
  %136 = add i32 %135, %122
  %137 = sub nsw i32 %132, %118
  %138 = icmp slt i32 %137, 0
  %139 = sub nsw i32 0, %137
  %140 = select i1 %138, i32 %139, i32 %137
  %141 = add i32 %140, %123
  %142 = sub nsw i32 %137, %119
  %143 = icmp slt i32 %142, 0
  %144 = sub nsw i32 0, %142
  %145 = select i1 %143, i32 %144, i32 %142
  %146 = add i32 %145, %124
  %147 = sub nsw i32 %142, %120
  %148 = icmp slt i32 %147, 0
  %149 = sub nsw i32 0, %147
  %150 = select i1 %148, i32 %149, i32 %147
  %151 = add i32 %150, %125
  %152 = add nuw nsw i64 %116, 1
  %153 = icmp eq i64 %152, %21
  br i1 %153, label %154, label %115, !llvm.loop !4

154:                                              ; preds = %115, %73, %3
  %155 = phi i32 [ 0, %3 ], [ %78, %73 ], [ %151, %115 ]
  %156 = phi i32 [ 0, %3 ], [ %83, %73 ], [ %146, %115 ]
  %157 = phi i32 [ 0, %3 ], [ %88, %73 ], [ %141, %115 ]
  %158 = phi i32 [ 0, %3 ], [ %93, %73 ], [ %136, %115 ]
  %159 = phi i32 [ 0, %3 ], [ %98, %73 ], [ %131, %115 ]
  %160 = icmp ult i32 %158, %157
  %161 = select i1 %160, i32 %158, i32 %157
  %162 = icmp ult i32 %161, %156
  %163 = select i1 %162, i32 %161, i32 %156
  %164 = icmp ult i32 %163, %155
  %165 = select i1 %164, i32 %163, i32 %155
  %166 = icmp ult i32 %159, %165
  br i1 %166, label %179, label %167

167:                                              ; preds = %154
  %168 = icmp ult i32 %157, %156
  %169 = select i1 %168, i32 %157, i32 %156
  %170 = icmp ult i32 %169, %155
  %171 = select i1 %170, i32 %169, i32 %155
  %172 = icmp ult i32 %158, %171
  br i1 %172, label %179, label %173

173:                                              ; preds = %167
  %174 = icmp ult i32 %156, %155
  %175 = select i1 %174, i32 %156, i32 %155
  %176 = icmp ult i32 %157, %175
  %177 = select i1 %174, i32 3, i32 4
  %178 = select i1 %176, i32 2, i32 %177
  br label %179

179:                                              ; preds = %173, %167, %154
  %180 = phi i32 [ 0, %154 ], [ 1, %167 ], [ %178, %173 ]
  %181 = icmp eq i32 %159, 0
  br i1 %181, label %190, label %182

182:                                              ; preds = %179
  %183 = uitofp i32 %159 to double
  %184 = fmul double %183, 0x3FE62E42FEFA39EF
  %185 = uitofp i32 %1 to double
  %186 = fdiv double %184, %185
  %187 = tail call double @log(double %186) #4
  %188 = fdiv double %187, 0x3FE62E42FEFA39EF
  %189 = fptrunc double %188 to float
  br label %190

190:                                              ; preds = %179, %182
  %191 = phi float [ %189, %182 ], [ 0.000000e+00, %179 ]
  store float %191, float* %2, align 4
  %192 = icmp eq i32 %158, 0
  br i1 %192, label %201, label %193

193:                                              ; preds = %190
  %194 = uitofp i32 %158 to double
  %195 = fmul double %194, 0x3FE62E42FEFA39EF
  %196 = uitofp i32 %1 to double
  %197 = fdiv double %195, %196
  %198 = tail call double @log(double %197) #4
  %199 = fdiv double %198, 0x3FE62E42FEFA39EF
  %200 = fptrunc double %199 to float
  br label %201

201:                                              ; preds = %190, %193
  %202 = phi float [ %200, %193 ], [ 0.000000e+00, %190 ]
  %203 = getelementptr inbounds float, float* %2, i64 1
  store float %202, float* %203, align 4
  %204 = icmp eq i32 %157, 0
  br i1 %204, label %213, label %205

205:                                              ; preds = %201
  %206 = uitofp i32 %157 to double
  %207 = fmul double %206, 0x3FE62E42FEFA39EF
  %208 = uitofp i32 %1 to double
  %209 = fdiv double %207, %208
  %210 = tail call double @log(double %209) #4
  %211 = fdiv double %210, 0x3FE62E42FEFA39EF
  %212 = fptrunc double %211 to float
  br label %213

213:                                              ; preds = %201, %205
  %214 = phi float [ %212, %205 ], [ 0.000000e+00, %201 ]
  %215 = getelementptr inbounds float, float* %2, i64 2
  store float %214, float* %215, align 4
  %216 = icmp eq i32 %156, 0
  br i1 %216, label %225, label %217

217:                                              ; preds = %213
  %218 = uitofp i32 %156 to double
  %219 = fmul double %218, 0x3FE62E42FEFA39EF
  %220 = uitofp i32 %1 to double
  %221 = fdiv double %219, %220
  %222 = tail call double @log(double %221) #4
  %223 = fdiv double %222, 0x3FE62E42FEFA39EF
  %224 = fptrunc double %223 to float
  br label %225

225:                                              ; preds = %213, %217
  %226 = phi float [ %224, %217 ], [ 0.000000e+00, %213 ]
  %227 = getelementptr inbounds float, float* %2, i64 3
  store float %226, float* %227, align 4
  %228 = icmp eq i32 %155, 0
  br i1 %228, label %237, label %229

229:                                              ; preds = %225
  %230 = uitofp i32 %155 to double
  %231 = fmul double %230, 0x3FE62E42FEFA39EF
  %232 = uitofp i32 %1 to double
  %233 = fdiv double %231, %232
  %234 = tail call double @log(double %233) #4
  %235 = fdiv double %234, 0x3FE62E42FEFA39EF
  %236 = fptrunc double %235 to float
  br label %237

237:                                              ; preds = %225, %229
  %238 = phi float [ %236, %229 ], [ 0.000000e+00, %225 ]
  %239 = getelementptr inbounds float, float* %2, i64 4
  store float %238, float* %239, align 4
  ret i32 %180
}

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @FLAC__fixed_compute_best_predictor_wide(i32* nocapture readonly, i32, float* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds i32, i32* %0, i64 -1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 -2
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds i32, i32* %0, i64 -3
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %10, %7
  %12 = add i32 %11, %8
  %13 = icmp eq i32 %1, 0
  br i1 %13, label %66, label %14

14:                                               ; preds = %3
  %15 = shl nsw i32 %10, 1
  %16 = sub i32 %15, %7
  %17 = getelementptr inbounds i32, i32* %0, i64 -4
  %18 = load i32, i32* %17, align 4
  %19 = sub i32 %16, %18
  %20 = add i32 %19, %12
  %21 = zext i32 %1 to i64
  br label %22

22:                                               ; preds = %22, %14
  %23 = phi i64 [ 0, %14 ], [ %64, %22 ]
  %24 = phi i32 [ %5, %14 ], [ %34, %22 ]
  %25 = phi i32 [ %8, %14 ], [ %40, %22 ]
  %26 = phi i32 [ %12, %14 ], [ %46, %22 ]
  %27 = phi i32 [ %20, %14 ], [ %52, %22 ]
  %28 = phi i64 [ 0, %14 ], [ %39, %22 ]
  %29 = phi i64 [ 0, %14 ], [ %45, %22 ]
  %30 = phi i64 [ 0, %14 ], [ %51, %22 ]
  %31 = phi i64 [ 0, %14 ], [ %57, %22 ]
  %32 = phi i64 [ 0, %14 ], [ %63, %22 ]
  %33 = getelementptr inbounds i32, i32* %0, i64 %23
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = zext i32 %37 to i64
  %39 = add i64 %28, %38
  %40 = sub nsw i32 %34, %24
  %41 = icmp slt i32 %40, 0
  %42 = sub nsw i32 0, %40
  %43 = select i1 %41, i32 %42, i32 %40
  %44 = zext i32 %43 to i64
  %45 = add i64 %29, %44
  %46 = sub nsw i32 %40, %25
  %47 = icmp slt i32 %46, 0
  %48 = sub nsw i32 0, %46
  %49 = select i1 %47, i32 %48, i32 %46
  %50 = zext i32 %49 to i64
  %51 = add i64 %30, %50
  %52 = sub nsw i32 %46, %26
  %53 = icmp slt i32 %52, 0
  %54 = sub nsw i32 0, %52
  %55 = select i1 %53, i32 %54, i32 %52
  %56 = zext i32 %55 to i64
  %57 = add i64 %31, %56
  %58 = sub nsw i32 %52, %27
  %59 = icmp slt i32 %58, 0
  %60 = sub nsw i32 0, %58
  %61 = select i1 %59, i32 %60, i32 %58
  %62 = zext i32 %61 to i64
  %63 = add i64 %32, %62
  %64 = add nuw nsw i64 %23, 1
  %65 = icmp eq i64 %64, %21
  br i1 %65, label %66, label %22

66:                                               ; preds = %22, %3
  %67 = phi i64 [ 0, %3 ], [ %63, %22 ]
  %68 = phi i64 [ 0, %3 ], [ %57, %22 ]
  %69 = phi i64 [ 0, %3 ], [ %51, %22 ]
  %70 = phi i64 [ 0, %3 ], [ %45, %22 ]
  %71 = phi i64 [ 0, %3 ], [ %39, %22 ]
  %72 = icmp ult i64 %70, %69
  %73 = select i1 %72, i64 %70, i64 %69
  %74 = icmp ult i64 %73, %68
  %75 = select i1 %74, i64 %73, i64 %68
  %76 = icmp ult i64 %75, %67
  %77 = select i1 %76, i64 %75, i64 %67
  %78 = icmp ult i64 %71, %77
  br i1 %78, label %91, label %79

79:                                               ; preds = %66
  %80 = icmp ult i64 %69, %68
  %81 = select i1 %80, i64 %69, i64 %68
  %82 = icmp ult i64 %81, %67
  %83 = select i1 %82, i64 %81, i64 %67
  %84 = icmp ult i64 %70, %83
  br i1 %84, label %91, label %85

85:                                               ; preds = %79
  %86 = icmp ult i64 %68, %67
  %87 = select i1 %86, i64 %68, i64 %67
  %88 = icmp ult i64 %69, %87
  %89 = select i1 %86, i32 3, i32 4
  %90 = select i1 %88, i32 2, i32 %89
  br label %91

91:                                               ; preds = %85, %79, %66
  %92 = phi i32 [ 0, %66 ], [ 1, %79 ], [ %90, %85 ]
  %93 = icmp eq i64 %71, 0
  br i1 %93, label %102, label %94

94:                                               ; preds = %91
  %95 = uitofp i64 %71 to double
  %96 = fmul double %95, 0x3FE62E42FEFA39EF
  %97 = uitofp i32 %1 to double
  %98 = fdiv double %96, %97
  %99 = tail call double @log(double %98) #4
  %100 = fdiv double %99, 0x3FE62E42FEFA39EF
  %101 = fptrunc double %100 to float
  br label %102

102:                                              ; preds = %91, %94
  %103 = phi float [ %101, %94 ], [ 0.000000e+00, %91 ]
  store float %103, float* %2, align 4
  %104 = icmp eq i64 %70, 0
  br i1 %104, label %113, label %105

105:                                              ; preds = %102
  %106 = uitofp i64 %70 to double
  %107 = fmul double %106, 0x3FE62E42FEFA39EF
  %108 = uitofp i32 %1 to double
  %109 = fdiv double %107, %108
  %110 = tail call double @log(double %109) #4
  %111 = fdiv double %110, 0x3FE62E42FEFA39EF
  %112 = fptrunc double %111 to float
  br label %113

113:                                              ; preds = %102, %105
  %114 = phi float [ %112, %105 ], [ 0.000000e+00, %102 ]
  %115 = getelementptr inbounds float, float* %2, i64 1
  store float %114, float* %115, align 4
  %116 = icmp eq i64 %69, 0
  br i1 %116, label %125, label %117

117:                                              ; preds = %113
  %118 = uitofp i64 %69 to double
  %119 = fmul double %118, 0x3FE62E42FEFA39EF
  %120 = uitofp i32 %1 to double
  %121 = fdiv double %119, %120
  %122 = tail call double @log(double %121) #4
  %123 = fdiv double %122, 0x3FE62E42FEFA39EF
  %124 = fptrunc double %123 to float
  br label %125

125:                                              ; preds = %113, %117
  %126 = phi float [ %124, %117 ], [ 0.000000e+00, %113 ]
  %127 = getelementptr inbounds float, float* %2, i64 2
  store float %126, float* %127, align 4
  %128 = icmp eq i64 %68, 0
  br i1 %128, label %137, label %129

129:                                              ; preds = %125
  %130 = uitofp i64 %68 to double
  %131 = fmul double %130, 0x3FE62E42FEFA39EF
  %132 = uitofp i32 %1 to double
  %133 = fdiv double %131, %132
  %134 = tail call double @log(double %133) #4
  %135 = fdiv double %134, 0x3FE62E42FEFA39EF
  %136 = fptrunc double %135 to float
  br label %137

137:                                              ; preds = %125, %129
  %138 = phi float [ %136, %129 ], [ 0.000000e+00, %125 ]
  %139 = getelementptr inbounds float, float* %2, i64 3
  store float %138, float* %139, align 4
  %140 = icmp eq i64 %67, 0
  br i1 %140, label %149, label %141

141:                                              ; preds = %137
  %142 = uitofp i64 %67 to double
  %143 = fmul double %142, 0x3FE62E42FEFA39EF
  %144 = uitofp i32 %1 to double
  %145 = fdiv double %143, %144
  %146 = tail call double @log(double %145) #4
  %147 = fdiv double %146, 0x3FE62E42FEFA39EF
  %148 = fptrunc double %147 to float
  br label %149

149:                                              ; preds = %137, %141
  %150 = phi float [ %148, %141 ], [ 0.000000e+00, %137 ]
  %151 = getelementptr inbounds float, float* %2, i64 4
  store float %150, float* %151, align 4
  ret i32 %92
}

; Function Attrs: nounwind ssp uwtable
define hidden void @FLAC__fixed_compute_residual(i32* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #2 {
  switch i32 %2, label %393 [
    i32 0, label %297
    i32 1, label %188
    i32 2, label %115
    i32 3, label %54
    i32 4, label %5
  ]

5:                                                ; preds = %4
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %393

7:                                                ; preds = %5
  %8 = zext i32 %1 to i64
  %9 = icmp ult i32 %1, 4
  br i1 %9, label %10, label %12

10:                                               ; preds = %52, %12, %7
  %11 = phi i64 [ 0, %12 ], [ 0, %7 ], [ %20, %52 ]
  br label %368

12:                                               ; preds = %7
  %13 = getelementptr i32, i32* %3, i64 %8
  %14 = getelementptr i32, i32* %0, i64 -4
  %15 = getelementptr i32, i32* %0, i64 %8
  %16 = icmp ugt i32* %15, %3
  %17 = icmp ult i32* %14, %13
  %18 = and i1 %16, %17
  br i1 %18, label %10, label %19

19:                                               ; preds = %12
  %20 = and i64 %8, 4294967292
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %50, %21 ]
  %23 = getelementptr inbounds i32, i32* %0, i64 %22
  %24 = bitcast i32* %23 to <4 x i32>*
  %25 = load <4 x i32>, <4 x i32>* %24, align 4, !alias.scope !6
  %26 = add nsw i64 %22, -1
  %27 = getelementptr inbounds i32, i32* %0, i64 %26
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 4, !alias.scope !6
  %30 = add nsw i64 %22, -3
  %31 = getelementptr inbounds i32, i32* %0, i64 %30
  %32 = bitcast i32* %31 to <4 x i32>*
  %33 = load <4 x i32>, <4 x i32>* %32, align 4, !alias.scope !6
  %34 = add nsw <4 x i32> %33, %29
  %35 = shl <4 x i32> %34, <i32 2, i32 2, i32 2, i32 2>
  %36 = sub <4 x i32> %25, %35
  %37 = add nsw i64 %22, -2
  %38 = getelementptr inbounds i32, i32* %0, i64 %37
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 4, !alias.scope !6
  %41 = mul <4 x i32> %40, <i32 6, i32 6, i32 6, i32 6>
  %42 = add nsw <4 x i32> %36, %41
  %43 = add nsw i64 %22, -4
  %44 = getelementptr inbounds i32, i32* %0, i64 %43
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4, !alias.scope !6
  %47 = add nsw <4 x i32> %42, %46
  %48 = getelementptr inbounds i32, i32* %3, i64 %22
  %49 = bitcast i32* %48 to <4 x i32>*
  store <4 x i32> %47, <4 x i32>* %49, align 4, !alias.scope !9, !noalias !6
  %50 = add i64 %22, 4
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %52, label %21, !llvm.loop !11

52:                                               ; preds = %21
  %53 = icmp eq i64 %20, %8
  br i1 %53, label %393, label %10

54:                                               ; preds = %4
  %55 = icmp sgt i32 %1, 0
  br i1 %55, label %56, label %393

56:                                               ; preds = %54
  %57 = zext i32 %1 to i64
  %58 = icmp ult i32 %1, 8
  br i1 %58, label %59, label %61

59:                                               ; preds = %113, %61, %56
  %60 = phi i64 [ 0, %61 ], [ 0, %56 ], [ %69, %113 ]
  br label %348

61:                                               ; preds = %56
  %62 = getelementptr i32, i32* %3, i64 %57
  %63 = getelementptr i32, i32* %0, i64 -3
  %64 = getelementptr i32, i32* %0, i64 %57
  %65 = icmp ugt i32* %64, %3
  %66 = icmp ult i32* %63, %62
  %67 = and i1 %65, %66
  br i1 %67, label %59, label %68

68:                                               ; preds = %61
  %69 = and i64 %57, 4294967288
  br label %70

70:                                               ; preds = %70, %68
  %71 = phi i64 [ 0, %68 ], [ %111, %70 ]
  %72 = getelementptr inbounds i32, i32* %0, i64 %71
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !alias.scope !12
  %75 = getelementptr inbounds i32, i32* %72, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 4, !alias.scope !12
  %78 = add nsw i64 %71, -1
  %79 = getelementptr inbounds i32, i32* %0, i64 %78
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !12
  %82 = getelementptr inbounds i32, i32* %79, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4, !alias.scope !12
  %85 = add nsw i64 %71, -2
  %86 = getelementptr inbounds i32, i32* %0, i64 %85
  %87 = bitcast i32* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 4, !alias.scope !12
  %89 = getelementptr inbounds i32, i32* %86, i64 4
  %90 = bitcast i32* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !12
  %92 = sub nsw <4 x i32> %81, %88
  %93 = sub nsw <4 x i32> %84, %91
  %94 = mul <4 x i32> %92, <i32 -3, i32 -3, i32 -3, i32 -3>
  %95 = mul <4 x i32> %93, <i32 -3, i32 -3, i32 -3, i32 -3>
  %96 = add nsw i64 %71, -3
  %97 = getelementptr inbounds i32, i32* %0, i64 %96
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4, !alias.scope !12
  %100 = getelementptr inbounds i32, i32* %97, i64 4
  %101 = bitcast i32* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4, !alias.scope !12
  %103 = sub <4 x i32> %74, %99
  %104 = sub <4 x i32> %77, %102
  %105 = add <4 x i32> %103, %94
  %106 = add <4 x i32> %104, %95
  %107 = getelementptr inbounds i32, i32* %3, i64 %71
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %108, align 4, !alias.scope !15, !noalias !12
  %109 = getelementptr inbounds i32, i32* %107, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %110, align 4, !alias.scope !15, !noalias !12
  %111 = add i64 %71, 8
  %112 = icmp eq i64 %111, %69
  br i1 %112, label %113, label %70, !llvm.loop !17

113:                                              ; preds = %70
  %114 = icmp eq i64 %69, %57
  br i1 %114, label %393, label %59

115:                                              ; preds = %4
  %116 = icmp sgt i32 %1, 0
  br i1 %116, label %117, label %393

117:                                              ; preds = %115
  %118 = zext i32 %1 to i64
  %119 = icmp ult i32 %1, 8
  br i1 %119, label %120, label %143

120:                                              ; preds = %186, %143, %117
  %121 = phi i64 [ 0, %143 ], [ 0, %117 ], [ %151, %186 ]
  %122 = xor i64 %121, -1
  %123 = and i64 %118, 1
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %139, label %125

125:                                              ; preds = %120
  %126 = getelementptr inbounds i32, i32* %0, i64 %121
  %127 = load i32, i32* %126, align 4
  %128 = add nsw i64 %121, -1
  %129 = getelementptr inbounds i32, i32* %0, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = shl i32 %130, 1
  %132 = sub i32 %127, %131
  %133 = add nsw i64 %121, -2
  %134 = getelementptr inbounds i32, i32* %0, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = add nsw i32 %132, %135
  %137 = getelementptr inbounds i32, i32* %3, i64 %121
  store i32 %136, i32* %137, align 4
  %138 = or i64 %121, 1
  br label %139

139:                                              ; preds = %120, %125
  %140 = phi i64 [ %121, %120 ], [ %138, %125 ]
  %141 = sub nsw i64 0, %118
  %142 = icmp eq i64 %122, %141
  br i1 %142, label %393, label %320

143:                                              ; preds = %117
  %144 = getelementptr i32, i32* %3, i64 %118
  %145 = getelementptr i32, i32* %0, i64 -2
  %146 = getelementptr i32, i32* %0, i64 %118
  %147 = icmp ugt i32* %146, %3
  %148 = icmp ult i32* %145, %144
  %149 = and i1 %147, %148
  br i1 %149, label %120, label %150

150:                                              ; preds = %143
  %151 = and i64 %118, 4294967288
  br label %152

152:                                              ; preds = %152, %150
  %153 = phi i64 [ 0, %150 ], [ %184, %152 ]
  %154 = getelementptr inbounds i32, i32* %0, i64 %153
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4, !alias.scope !18
  %157 = getelementptr inbounds i32, i32* %154, i64 4
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4, !alias.scope !18
  %160 = add nsw i64 %153, -1
  %161 = getelementptr inbounds i32, i32* %0, i64 %160
  %162 = bitcast i32* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 4, !alias.scope !18
  %164 = getelementptr inbounds i32, i32* %161, i64 4
  %165 = bitcast i32* %164 to <4 x i32>*
  %166 = load <4 x i32>, <4 x i32>* %165, align 4, !alias.scope !18
  %167 = shl <4 x i32> %163, <i32 1, i32 1, i32 1, i32 1>
  %168 = shl <4 x i32> %166, <i32 1, i32 1, i32 1, i32 1>
  %169 = sub <4 x i32> %156, %167
  %170 = sub <4 x i32> %159, %168
  %171 = add nsw i64 %153, -2
  %172 = getelementptr inbounds i32, i32* %0, i64 %171
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4, !alias.scope !18
  %175 = getelementptr inbounds i32, i32* %172, i64 4
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4, !alias.scope !18
  %178 = add nsw <4 x i32> %169, %174
  %179 = add nsw <4 x i32> %170, %177
  %180 = getelementptr inbounds i32, i32* %3, i64 %153
  %181 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %181, align 4, !alias.scope !21, !noalias !18
  %182 = getelementptr inbounds i32, i32* %180, i64 4
  %183 = bitcast i32* %182 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %183, align 4, !alias.scope !21, !noalias !18
  %184 = add i64 %153, 8
  %185 = icmp eq i64 %184, %151
  br i1 %185, label %186, label %152, !llvm.loop !23

186:                                              ; preds = %152
  %187 = icmp eq i64 %151, %118
  br i1 %187, label %393, label %120

188:                                              ; preds = %4
  %189 = icmp sgt i32 %1, 0
  br i1 %189, label %190, label %393

190:                                              ; preds = %188
  %191 = zext i32 %1 to i64
  %192 = icmp ult i32 %1, 8
  br i1 %192, label %193, label %211

193:                                              ; preds = %295, %211, %190
  %194 = phi i64 [ 0, %211 ], [ 0, %190 ], [ %219, %295 ]
  %195 = xor i64 %194, -1
  %196 = and i64 %191, 1
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %207, label %198

198:                                              ; preds = %193
  %199 = getelementptr inbounds i32, i32* %0, i64 %194
  %200 = load i32, i32* %199, align 4
  %201 = add nsw i64 %194, -1
  %202 = getelementptr inbounds i32, i32* %0, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = sub nsw i32 %200, %203
  %205 = getelementptr inbounds i32, i32* %3, i64 %194
  store i32 %204, i32* %205, align 4
  %206 = or i64 %194, 1
  br label %207

207:                                              ; preds = %193, %198
  %208 = phi i64 [ %194, %193 ], [ %206, %198 ]
  %209 = sub nsw i64 0, %191
  %210 = icmp eq i64 %195, %209
  br i1 %210, label %393, label %302

211:                                              ; preds = %190
  %212 = getelementptr i32, i32* %3, i64 %191
  %213 = getelementptr i32, i32* %0, i64 -1
  %214 = getelementptr i32, i32* %0, i64 %191
  %215 = icmp ugt i32* %214, %3
  %216 = icmp ult i32* %213, %212
  %217 = and i1 %215, %216
  br i1 %217, label %193, label %218

218:                                              ; preds = %211
  %219 = and i64 %191, 4294967288
  %220 = add nsw i64 %219, -8
  %221 = lshr exact i64 %220, 3
  %222 = add nuw nsw i64 %221, 1
  %223 = and i64 %222, 1
  %224 = icmp eq i64 %220, 0
  br i1 %224, label %272, label %225

225:                                              ; preds = %218
  %226 = sub nuw nsw i64 %222, %223
  br label %227

227:                                              ; preds = %227, %225
  %228 = phi i64 [ 0, %225 ], [ %269, %227 ]
  %229 = phi i64 [ %226, %225 ], [ %270, %227 ]
  %230 = getelementptr inbounds i32, i32* %0, i64 %228
  %231 = bitcast i32* %230 to <4 x i32>*
  %232 = load <4 x i32>, <4 x i32>* %231, align 4, !alias.scope !24
  %233 = getelementptr inbounds i32, i32* %230, i64 4
  %234 = bitcast i32* %233 to <4 x i32>*
  %235 = load <4 x i32>, <4 x i32>* %234, align 4, !alias.scope !24
  %236 = add nsw i64 %228, -1
  %237 = getelementptr inbounds i32, i32* %0, i64 %236
  %238 = bitcast i32* %237 to <4 x i32>*
  %239 = load <4 x i32>, <4 x i32>* %238, align 4, !alias.scope !24
  %240 = getelementptr inbounds i32, i32* %237, i64 4
  %241 = bitcast i32* %240 to <4 x i32>*
  %242 = load <4 x i32>, <4 x i32>* %241, align 4, !alias.scope !24
  %243 = sub nsw <4 x i32> %232, %239
  %244 = sub nsw <4 x i32> %235, %242
  %245 = getelementptr inbounds i32, i32* %3, i64 %228
  %246 = bitcast i32* %245 to <4 x i32>*
  store <4 x i32> %243, <4 x i32>* %246, align 4, !alias.scope !27, !noalias !24
  %247 = getelementptr inbounds i32, i32* %245, i64 4
  %248 = bitcast i32* %247 to <4 x i32>*
  store <4 x i32> %244, <4 x i32>* %248, align 4, !alias.scope !27, !noalias !24
  %249 = or i64 %228, 8
  %250 = getelementptr inbounds i32, i32* %0, i64 %249
  %251 = bitcast i32* %250 to <4 x i32>*
  %252 = load <4 x i32>, <4 x i32>* %251, align 4, !alias.scope !24
  %253 = getelementptr inbounds i32, i32* %250, i64 4
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4, !alias.scope !24
  %256 = or i64 %228, 7
  %257 = getelementptr inbounds i32, i32* %0, i64 %256
  %258 = bitcast i32* %257 to <4 x i32>*
  %259 = load <4 x i32>, <4 x i32>* %258, align 4, !alias.scope !24
  %260 = getelementptr inbounds i32, i32* %257, i64 4
  %261 = bitcast i32* %260 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 4, !alias.scope !24
  %263 = sub nsw <4 x i32> %252, %259
  %264 = sub nsw <4 x i32> %255, %262
  %265 = getelementptr inbounds i32, i32* %3, i64 %249
  %266 = bitcast i32* %265 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %266, align 4, !alias.scope !27, !noalias !24
  %267 = getelementptr inbounds i32, i32* %265, i64 4
  %268 = bitcast i32* %267 to <4 x i32>*
  store <4 x i32> %264, <4 x i32>* %268, align 4, !alias.scope !27, !noalias !24
  %269 = add i64 %228, 16
  %270 = add i64 %229, -2
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %272, label %227, !llvm.loop !29

272:                                              ; preds = %227, %218
  %273 = phi i64 [ 0, %218 ], [ %269, %227 ]
  %274 = icmp eq i64 %223, 0
  br i1 %274, label %295, label %275

275:                                              ; preds = %272
  %276 = getelementptr inbounds i32, i32* %0, i64 %273
  %277 = bitcast i32* %276 to <4 x i32>*
  %278 = load <4 x i32>, <4 x i32>* %277, align 4, !alias.scope !24
  %279 = getelementptr inbounds i32, i32* %276, i64 4
  %280 = bitcast i32* %279 to <4 x i32>*
  %281 = load <4 x i32>, <4 x i32>* %280, align 4, !alias.scope !24
  %282 = add nsw i64 %273, -1
  %283 = getelementptr inbounds i32, i32* %0, i64 %282
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !alias.scope !24
  %286 = getelementptr inbounds i32, i32* %283, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4, !alias.scope !24
  %289 = sub nsw <4 x i32> %278, %285
  %290 = sub nsw <4 x i32> %281, %288
  %291 = getelementptr inbounds i32, i32* %3, i64 %273
  %292 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %289, <4 x i32>* %292, align 4, !alias.scope !27, !noalias !24
  %293 = getelementptr inbounds i32, i32* %291, i64 4
  %294 = bitcast i32* %293 to <4 x i32>*
  store <4 x i32> %290, <4 x i32>* %294, align 4, !alias.scope !27, !noalias !24
  br label %295

295:                                              ; preds = %272, %275
  %296 = icmp eq i64 %219, %191
  br i1 %296, label %393, label %193

297:                                              ; preds = %4
  %298 = bitcast i32* %3 to i8*
  %299 = bitcast i32* %0 to i8*
  %300 = zext i32 %1 to i64
  %301 = shl nuw nsw i64 %300, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %298, i8* align 4 %299, i64 %301, i1 false)
  br label %393

302:                                              ; preds = %207, %302
  %303 = phi i64 [ %318, %302 ], [ %208, %207 ]
  %304 = getelementptr inbounds i32, i32* %0, i64 %303
  %305 = load i32, i32* %304, align 4
  %306 = add nsw i64 %303, -1
  %307 = getelementptr inbounds i32, i32* %0, i64 %306
  %308 = load i32, i32* %307, align 4
  %309 = sub nsw i32 %305, %308
  %310 = getelementptr inbounds i32, i32* %3, i64 %303
  store i32 %309, i32* %310, align 4
  %311 = add nuw nsw i64 %303, 1
  %312 = getelementptr inbounds i32, i32* %0, i64 %311
  %313 = load i32, i32* %312, align 4
  %314 = getelementptr inbounds i32, i32* %0, i64 %303
  %315 = load i32, i32* %314, align 4
  %316 = sub nsw i32 %313, %315
  %317 = getelementptr inbounds i32, i32* %3, i64 %311
  store i32 %316, i32* %317, align 4
  %318 = add nuw nsw i64 %303, 2
  %319 = icmp eq i64 %318, %191
  br i1 %319, label %393, label %302, !llvm.loop !30

320:                                              ; preds = %139, %320
  %321 = phi i64 [ %346, %320 ], [ %140, %139 ]
  %322 = getelementptr inbounds i32, i32* %0, i64 %321
  %323 = load i32, i32* %322, align 4
  %324 = add nsw i64 %321, -1
  %325 = getelementptr inbounds i32, i32* %0, i64 %324
  %326 = load i32, i32* %325, align 4
  %327 = shl i32 %326, 1
  %328 = sub i32 %323, %327
  %329 = add nsw i64 %321, -2
  %330 = getelementptr inbounds i32, i32* %0, i64 %329
  %331 = load i32, i32* %330, align 4
  %332 = add nsw i32 %328, %331
  %333 = getelementptr inbounds i32, i32* %3, i64 %321
  store i32 %332, i32* %333, align 4
  %334 = add nuw nsw i64 %321, 1
  %335 = getelementptr inbounds i32, i32* %0, i64 %334
  %336 = load i32, i32* %335, align 4
  %337 = getelementptr inbounds i32, i32* %0, i64 %321
  %338 = load i32, i32* %337, align 4
  %339 = shl i32 %338, 1
  %340 = sub i32 %336, %339
  %341 = add nsw i64 %321, -1
  %342 = getelementptr inbounds i32, i32* %0, i64 %341
  %343 = load i32, i32* %342, align 4
  %344 = add nsw i32 %340, %343
  %345 = getelementptr inbounds i32, i32* %3, i64 %334
  store i32 %344, i32* %345, align 4
  %346 = add nuw nsw i64 %321, 2
  %347 = icmp eq i64 %346, %118
  br i1 %347, label %393, label %320, !llvm.loop !31

348:                                              ; preds = %59, %348
  %349 = phi i64 [ %366, %348 ], [ %60, %59 ]
  %350 = getelementptr inbounds i32, i32* %0, i64 %349
  %351 = load i32, i32* %350, align 4
  %352 = add nsw i64 %349, -1
  %353 = getelementptr inbounds i32, i32* %0, i64 %352
  %354 = load i32, i32* %353, align 4
  %355 = add nsw i64 %349, -2
  %356 = getelementptr inbounds i32, i32* %0, i64 %355
  %357 = load i32, i32* %356, align 4
  %358 = sub nsw i32 %354, %357
  %359 = mul i32 %358, -3
  %360 = add nsw i64 %349, -3
  %361 = getelementptr inbounds i32, i32* %0, i64 %360
  %362 = load i32, i32* %361, align 4
  %363 = sub i32 %351, %362
  %364 = add i32 %363, %359
  %365 = getelementptr inbounds i32, i32* %3, i64 %349
  store i32 %364, i32* %365, align 4
  %366 = add nuw nsw i64 %349, 1
  %367 = icmp eq i64 %366, %57
  br i1 %367, label %393, label %348, !llvm.loop !32

368:                                              ; preds = %10, %368
  %369 = phi i64 [ %391, %368 ], [ %11, %10 ]
  %370 = getelementptr inbounds i32, i32* %0, i64 %369
  %371 = load i32, i32* %370, align 4
  %372 = add nsw i64 %369, -1
  %373 = getelementptr inbounds i32, i32* %0, i64 %372
  %374 = load i32, i32* %373, align 4
  %375 = add nsw i64 %369, -3
  %376 = getelementptr inbounds i32, i32* %0, i64 %375
  %377 = load i32, i32* %376, align 4
  %378 = add nsw i32 %377, %374
  %379 = shl i32 %378, 2
  %380 = sub i32 %371, %379
  %381 = add nsw i64 %369, -2
  %382 = getelementptr inbounds i32, i32* %0, i64 %381
  %383 = load i32, i32* %382, align 4
  %384 = mul i32 %383, 6
  %385 = add nsw i32 %380, %384
  %386 = add nsw i64 %369, -4
  %387 = getelementptr inbounds i32, i32* %0, i64 %386
  %388 = load i32, i32* %387, align 4
  %389 = add nsw i32 %385, %388
  %390 = getelementptr inbounds i32, i32* %3, i64 %369
  store i32 %389, i32* %390, align 4
  %391 = add nuw nsw i64 %369, 1
  %392 = icmp eq i64 %391, %8
  br i1 %392, label %393, label %368, !llvm.loop !33

393:                                              ; preds = %368, %348, %139, %320, %207, %302, %52, %113, %186, %295, %5, %54, %115, %188, %4, %297
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @FLAC__fixed_restore_signal(i32* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #2 {
  switch i32 %2, label %198 [
    i32 0, label %46
    i32 1, label %35
    i32 2, label %25
    i32 3, label %13
    i32 4, label %5
  ]

5:                                                ; preds = %4
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %198

7:                                                ; preds = %5
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds i32, i32* %3, i64 -1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds i32, i32* %3, i64 -3
  %12 = load i32, i32* %11, align 4
  br label %132

13:                                               ; preds = %4
  %14 = icmp sgt i32 %1, 0
  br i1 %14, label %15, label %198

15:                                               ; preds = %13
  %16 = zext i32 %1 to i64
  %17 = getelementptr inbounds i32, i32* %3, i64 -1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds i32, i32* %3, i64 -3
  %20 = load i32, i32* %19, align 4
  %21 = and i64 %16, 1
  %22 = icmp eq i32 %1, 1
  br i1 %22, label %182, label %23

23:                                               ; preds = %15
  %24 = sub nsw i64 %16, %21
  br label %103

25:                                               ; preds = %4
  %26 = icmp sgt i32 %1, 0
  br i1 %26, label %27, label %198

27:                                               ; preds = %25
  %28 = zext i32 %1 to i64
  %29 = getelementptr inbounds i32, i32* %3, i64 -1
  %30 = load i32, i32* %29, align 4
  %31 = and i64 %28, 1
  %32 = icmp eq i32 %1, 1
  br i1 %32, label %168, label %33

33:                                               ; preds = %27
  %34 = sub nsw i64 %28, %31
  br label %77

35:                                               ; preds = %4
  %36 = icmp sgt i32 %1, 0
  br i1 %36, label %37, label %198

37:                                               ; preds = %35
  %38 = zext i32 %1 to i64
  %39 = getelementptr inbounds i32, i32* %3, i64 -1
  %40 = load i32, i32* %39, align 4
  %41 = add nsw i64 %38, -1
  %42 = and i64 %38, 3
  %43 = icmp ult i64 %41, 3
  br i1 %43, label %153, label %44

44:                                               ; preds = %37
  %45 = sub nsw i64 %38, %42
  br label %51

46:                                               ; preds = %4
  %47 = bitcast i32* %3 to i8*
  %48 = bitcast i32* %0 to i8*
  %49 = zext i32 %1 to i64
  %50 = shl nuw nsw i64 %49, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* align 4 %48, i64 %50, i1 false)
  br label %198

51:                                               ; preds = %51, %44
  %52 = phi i32 [ %40, %44 ], [ %72, %51 ]
  %53 = phi i64 [ 0, %44 ], [ %74, %51 ]
  %54 = phi i64 [ %45, %44 ], [ %75, %51 ]
  %55 = getelementptr inbounds i32, i32* %0, i64 %53
  %56 = load i32, i32* %55, align 4
  %57 = add nsw i32 %52, %56
  %58 = getelementptr inbounds i32, i32* %3, i64 %53
  store i32 %57, i32* %58, align 4
  %59 = or i64 %53, 1
  %60 = getelementptr inbounds i32, i32* %0, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = add nsw i32 %57, %61
  %63 = getelementptr inbounds i32, i32* %3, i64 %59
  store i32 %62, i32* %63, align 4
  %64 = or i64 %53, 2
  %65 = getelementptr inbounds i32, i32* %0, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = add nsw i32 %62, %66
  %68 = getelementptr inbounds i32, i32* %3, i64 %64
  store i32 %67, i32* %68, align 4
  %69 = or i64 %53, 3
  %70 = getelementptr inbounds i32, i32* %0, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = add nsw i32 %67, %71
  %73 = getelementptr inbounds i32, i32* %3, i64 %69
  store i32 %72, i32* %73, align 4
  %74 = add nuw nsw i64 %53, 4
  %75 = add i64 %54, -4
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %153, label %51

77:                                               ; preds = %77, %33
  %78 = phi i32 [ %30, %33 ], [ %98, %77 ]
  %79 = phi i64 [ 0, %33 ], [ %100, %77 ]
  %80 = phi i64 [ %34, %33 ], [ %101, %77 ]
  %81 = getelementptr inbounds i32, i32* %0, i64 %79
  %82 = load i32, i32* %81, align 4
  %83 = shl i32 %78, 1
  %84 = add nsw i32 %83, %82
  %85 = add nsw i64 %79, -2
  %86 = getelementptr inbounds i32, i32* %3, i64 %85
  %87 = load i32, i32* %86, align 4
  %88 = sub i32 %84, %87
  %89 = getelementptr inbounds i32, i32* %3, i64 %79
  store i32 %88, i32* %89, align 4
  %90 = or i64 %79, 1
  %91 = getelementptr inbounds i32, i32* %0, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = shl i32 %88, 1
  %94 = add nsw i32 %93, %92
  %95 = add nsw i64 %79, -1
  %96 = getelementptr inbounds i32, i32* %3, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = sub i32 %94, %97
  %99 = getelementptr inbounds i32, i32* %3, i64 %90
  store i32 %98, i32* %99, align 4
  %100 = add nuw nsw i64 %79, 2
  %101 = add i64 %80, -2
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %168, label %77

103:                                              ; preds = %103, %23
  %104 = phi i32 [ %20, %23 ], [ %123, %103 ]
  %105 = phi i32 [ %18, %23 ], [ %127, %103 ]
  %106 = phi i64 [ 0, %23 ], [ %129, %103 ]
  %107 = phi i64 [ %24, %23 ], [ %130, %103 ]
  %108 = getelementptr inbounds i32, i32* %0, i64 %106
  %109 = load i32, i32* %108, align 4
  %110 = add nsw i64 %106, -2
  %111 = getelementptr inbounds i32, i32* %3, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = sub nsw i32 %105, %112
  %114 = mul i32 %113, 3
  %115 = add i32 %104, %109
  %116 = add i32 %115, %114
  %117 = getelementptr inbounds i32, i32* %3, i64 %106
  store i32 %116, i32* %117, align 4
  %118 = or i64 %106, 1
  %119 = getelementptr inbounds i32, i32* %0, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i64 %106, -1
  %122 = getelementptr inbounds i32, i32* %3, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = sub nsw i32 %116, %123
  %125 = mul i32 %124, 3
  %126 = add i32 %112, %120
  %127 = add i32 %126, %125
  %128 = getelementptr inbounds i32, i32* %3, i64 %118
  store i32 %127, i32* %128, align 4
  %129 = add nuw nsw i64 %106, 2
  %130 = add i64 %107, -2
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %182, label %103

132:                                              ; preds = %132, %7
  %133 = phi i32 [ %12, %7 ], [ %143, %132 ]
  %134 = phi i32 [ %10, %7 ], [ %149, %132 ]
  %135 = phi i64 [ 0, %7 ], [ %151, %132 ]
  %136 = getelementptr inbounds i32, i32* %0, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = add nsw i32 %133, %134
  %139 = shl i32 %138, 2
  %140 = add nsw i32 %139, %137
  %141 = add nsw i64 %135, -2
  %142 = getelementptr inbounds i32, i32* %3, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = mul i32 %143, -6
  %145 = add i32 %140, %144
  %146 = add nsw i64 %135, -4
  %147 = getelementptr inbounds i32, i32* %3, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = sub i32 %145, %148
  %150 = getelementptr inbounds i32, i32* %3, i64 %135
  store i32 %149, i32* %150, align 4
  %151 = add nuw nsw i64 %135, 1
  %152 = icmp eq i64 %151, %8
  br i1 %152, label %198, label %132

153:                                              ; preds = %51, %37
  %154 = phi i32 [ %40, %37 ], [ %72, %51 ]
  %155 = phi i64 [ 0, %37 ], [ %74, %51 ]
  %156 = icmp eq i64 %42, 0
  br i1 %156, label %198, label %157

157:                                              ; preds = %153, %157
  %158 = phi i32 [ %163, %157 ], [ %154, %153 ]
  %159 = phi i64 [ %165, %157 ], [ %155, %153 ]
  %160 = phi i64 [ %166, %157 ], [ %42, %153 ]
  %161 = getelementptr inbounds i32, i32* %0, i64 %159
  %162 = load i32, i32* %161, align 4
  %163 = add nsw i32 %158, %162
  %164 = getelementptr inbounds i32, i32* %3, i64 %159
  store i32 %163, i32* %164, align 4
  %165 = add nuw nsw i64 %159, 1
  %166 = add i64 %160, -1
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %198, label %157, !llvm.loop !34

168:                                              ; preds = %77, %27
  %169 = phi i32 [ %30, %27 ], [ %98, %77 ]
  %170 = phi i64 [ 0, %27 ], [ %100, %77 ]
  %171 = icmp eq i64 %31, 0
  br i1 %171, label %198, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds i32, i32* %0, i64 %170
  %174 = load i32, i32* %173, align 4
  %175 = shl i32 %169, 1
  %176 = add nsw i32 %175, %174
  %177 = add nsw i64 %170, -2
  %178 = getelementptr inbounds i32, i32* %3, i64 %177
  %179 = load i32, i32* %178, align 4
  %180 = sub i32 %176, %179
  %181 = getelementptr inbounds i32, i32* %3, i64 %170
  store i32 %180, i32* %181, align 4
  br label %198

182:                                              ; preds = %103, %15
  %183 = phi i32 [ %20, %15 ], [ %123, %103 ]
  %184 = phi i32 [ %18, %15 ], [ %127, %103 ]
  %185 = phi i64 [ 0, %15 ], [ %129, %103 ]
  %186 = icmp eq i64 %21, 0
  br i1 %186, label %198, label %187

187:                                              ; preds = %182
  %188 = getelementptr inbounds i32, i32* %0, i64 %185
  %189 = load i32, i32* %188, align 4
  %190 = add nsw i64 %185, -2
  %191 = getelementptr inbounds i32, i32* %3, i64 %190
  %192 = load i32, i32* %191, align 4
  %193 = sub nsw i32 %184, %192
  %194 = mul i32 %193, 3
  %195 = add i32 %183, %189
  %196 = add i32 %195, %194
  %197 = getelementptr inbounds i32, i32* %3, i64 %185
  store i32 %196, i32* %197, align 4
  br label %198

198:                                              ; preds = %132, %187, %182, %172, %168, %153, %157, %5, %13, %25, %35, %4, %46
  ret void
}

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !3}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !3}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !3}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !3}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !3}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !3}
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.unroll.disable"}
