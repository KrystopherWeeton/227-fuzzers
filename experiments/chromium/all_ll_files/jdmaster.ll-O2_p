; ModuleID = '../../third_party/libjpeg_turbo/jdmaster.c'
source_filename = "../../third_party/libjpeg_turbo/jdmaster.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, {}* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { {}*, {}*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, {}*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { {}*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { {}*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, {}*, {}* }
%struct.my_decomp_master = type { %struct.jpeg_decomp_master, i32, i32, %struct.jpeg_color_quantizer*, %struct.jpeg_color_quantizer* }

@rgb_pixelsize = internal unnamed_addr constant [17 x i32] [i32 -1, i32 -1, i32 3, i32 -1, i32 -1, i32 -1, i32 3, i32 4, i32 3, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 -1], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_calc_output_dimensions(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 202
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %7 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %7, i64 0, i32 5
  store i32 20, i32* %8, align 8
  %9 = load i32, i32* %2, align 4
  %10 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %6, align 8
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 6, i32 0, i64 0
  store i32 %9, i32* %11, align 4
  %12 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %6, align 8
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %12, i64 0, i32 0
  %14 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %13, align 8
  %15 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %14(%struct.jpeg_common_struct* %15) #4
  br label %16

16:                                               ; preds = %1, %5
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 12
  %18 = load i32, i32* %17, align 4
  %19 = shl i32 %18, 3
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 13
  %21 = load i32, i32* %20, align 8
  %22 = icmp ugt i32 %19, %21
  br i1 %22, label %33, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %25 = load i32, i32* %24, align 8
  %26 = zext i32 %25 to i64
  %27 = tail call i64 @jdiv_round_up(i64 %26, i64 8) #4
  %28 = trunc i64 %27 to i32
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %28, i32* %29, align 8
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  br label %252

33:                                               ; preds = %16
  %34 = shl i32 %21, 1
  %35 = icmp ugt i32 %19, %34
  br i1 %35, label %48, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %38 = load i32, i32* %37, align 8
  %39 = zext i32 %38 to i64
  %40 = shl nuw nsw i64 %39, 1
  %41 = tail call i64 @jdiv_round_up(i64 %40, i64 8) #4
  %42 = trunc i64 %41 to i32
  %43 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %42, i32* %43, align 8
  %44 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i64
  %47 = shl nuw nsw i64 %46, 1
  br label %252

48:                                               ; preds = %33
  %49 = mul i32 %21, 3
  %50 = icmp ugt i32 %19, %49
  br i1 %50, label %63, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %53 = load i32, i32* %52, align 8
  %54 = zext i32 %53 to i64
  %55 = mul nuw nsw i64 %54, 3
  %56 = tail call i64 @jdiv_round_up(i64 %55, i64 8) #4
  %57 = trunc i64 %56 to i32
  %58 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %57, i32* %58, align 8
  %59 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = mul nuw nsw i64 %61, 3
  br label %252

63:                                               ; preds = %48
  %64 = shl i32 %21, 2
  %65 = icmp ugt i32 %19, %64
  br i1 %65, label %78, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %68 = load i32, i32* %67, align 8
  %69 = zext i32 %68 to i64
  %70 = shl nuw nsw i64 %69, 2
  %71 = tail call i64 @jdiv_round_up(i64 %70, i64 8) #4
  %72 = trunc i64 %71 to i32
  %73 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %72, i32* %73, align 8
  %74 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %75 to i64
  %77 = shl nuw nsw i64 %76, 2
  br label %252

78:                                               ; preds = %63
  %79 = mul i32 %21, 5
  %80 = icmp ugt i32 %19, %79
  br i1 %80, label %93, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %83 = load i32, i32* %82, align 8
  %84 = zext i32 %83 to i64
  %85 = mul nuw nsw i64 %84, 5
  %86 = tail call i64 @jdiv_round_up(i64 %85, i64 8) #4
  %87 = trunc i64 %86 to i32
  %88 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %87, i32* %88, align 8
  %89 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %90 = load i32, i32* %89, align 4
  %91 = zext i32 %90 to i64
  %92 = mul nuw nsw i64 %91, 5
  br label %252

93:                                               ; preds = %78
  %94 = mul i32 %21, 6
  %95 = icmp ugt i32 %19, %94
  br i1 %95, label %108, label %96

96:                                               ; preds = %93
  %97 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %98 = load i32, i32* %97, align 8
  %99 = zext i32 %98 to i64
  %100 = mul nuw nsw i64 %99, 6
  %101 = tail call i64 @jdiv_round_up(i64 %100, i64 8) #4
  %102 = trunc i64 %101 to i32
  %103 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %102, i32* %103, align 8
  %104 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %105 = load i32, i32* %104, align 4
  %106 = zext i32 %105 to i64
  %107 = mul nuw nsw i64 %106, 6
  br label %252

108:                                              ; preds = %93
  %109 = mul i32 %21, 7
  %110 = icmp ugt i32 %19, %109
  br i1 %110, label %123, label %111

111:                                              ; preds = %108
  %112 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %113 = load i32, i32* %112, align 8
  %114 = zext i32 %113 to i64
  %115 = mul nuw nsw i64 %114, 7
  %116 = tail call i64 @jdiv_round_up(i64 %115, i64 8) #4
  %117 = trunc i64 %116 to i32
  %118 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %117, i32* %118, align 8
  %119 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %120 = load i32, i32* %119, align 4
  %121 = zext i32 %120 to i64
  %122 = mul nuw nsw i64 %121, 7
  br label %252

123:                                              ; preds = %108
  %124 = shl i32 %21, 3
  %125 = icmp ugt i32 %19, %124
  br i1 %125, label %138, label %126

126:                                              ; preds = %123
  %127 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %128 = load i32, i32* %127, align 8
  %129 = zext i32 %128 to i64
  %130 = shl nuw nsw i64 %129, 3
  %131 = tail call i64 @jdiv_round_up(i64 %130, i64 8) #4
  %132 = trunc i64 %131 to i32
  %133 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %132, i32* %133, align 8
  %134 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %135 = load i32, i32* %134, align 4
  %136 = zext i32 %135 to i64
  %137 = shl nuw nsw i64 %136, 3
  br label %252

138:                                              ; preds = %123
  %139 = mul i32 %21, 9
  %140 = icmp ugt i32 %19, %139
  br i1 %140, label %153, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %143 = load i32, i32* %142, align 8
  %144 = zext i32 %143 to i64
  %145 = mul nuw nsw i64 %144, 9
  %146 = tail call i64 @jdiv_round_up(i64 %145, i64 8) #4
  %147 = trunc i64 %146 to i32
  %148 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %147, i32* %148, align 8
  %149 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %150 = load i32, i32* %149, align 4
  %151 = zext i32 %150 to i64
  %152 = mul nuw nsw i64 %151, 9
  br label %252

153:                                              ; preds = %138
  %154 = mul i32 %21, 10
  %155 = icmp ugt i32 %19, %154
  br i1 %155, label %168, label %156

156:                                              ; preds = %153
  %157 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %158 = load i32, i32* %157, align 8
  %159 = zext i32 %158 to i64
  %160 = mul nuw nsw i64 %159, 10
  %161 = tail call i64 @jdiv_round_up(i64 %160, i64 8) #4
  %162 = trunc i64 %161 to i32
  %163 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %162, i32* %163, align 8
  %164 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %165 = load i32, i32* %164, align 4
  %166 = zext i32 %165 to i64
  %167 = mul nuw nsw i64 %166, 10
  br label %252

168:                                              ; preds = %153
  %169 = mul i32 %21, 11
  %170 = icmp ugt i32 %19, %169
  br i1 %170, label %183, label %171

171:                                              ; preds = %168
  %172 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %173 = load i32, i32* %172, align 8
  %174 = zext i32 %173 to i64
  %175 = mul nuw nsw i64 %174, 11
  %176 = tail call i64 @jdiv_round_up(i64 %175, i64 8) #4
  %177 = trunc i64 %176 to i32
  %178 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %177, i32* %178, align 8
  %179 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %180 = load i32, i32* %179, align 4
  %181 = zext i32 %180 to i64
  %182 = mul nuw nsw i64 %181, 11
  br label %252

183:                                              ; preds = %168
  %184 = mul i32 %21, 12
  %185 = icmp ugt i32 %19, %184
  br i1 %185, label %198, label %186

186:                                              ; preds = %183
  %187 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %188 = load i32, i32* %187, align 8
  %189 = zext i32 %188 to i64
  %190 = mul nuw nsw i64 %189, 12
  %191 = tail call i64 @jdiv_round_up(i64 %190, i64 8) #4
  %192 = trunc i64 %191 to i32
  %193 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %192, i32* %193, align 8
  %194 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  %197 = mul nuw nsw i64 %196, 12
  br label %252

198:                                              ; preds = %183
  %199 = mul i32 %21, 13
  %200 = icmp ugt i32 %19, %199
  br i1 %200, label %213, label %201

201:                                              ; preds = %198
  %202 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %203 = load i32, i32* %202, align 8
  %204 = zext i32 %203 to i64
  %205 = mul nuw nsw i64 %204, 13
  %206 = tail call i64 @jdiv_round_up(i64 %205, i64 8) #4
  %207 = trunc i64 %206 to i32
  %208 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %207, i32* %208, align 8
  %209 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %210 = load i32, i32* %209, align 4
  %211 = zext i32 %210 to i64
  %212 = mul nuw nsw i64 %211, 13
  br label %252

213:                                              ; preds = %198
  %214 = mul i32 %21, 14
  %215 = icmp ugt i32 %19, %214
  br i1 %215, label %228, label %216

216:                                              ; preds = %213
  %217 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %218 = load i32, i32* %217, align 8
  %219 = zext i32 %218 to i64
  %220 = mul nuw nsw i64 %219, 14
  %221 = tail call i64 @jdiv_round_up(i64 %220, i64 8) #4
  %222 = trunc i64 %221 to i32
  %223 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %222, i32* %223, align 8
  %224 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %225 = load i32, i32* %224, align 4
  %226 = zext i32 %225 to i64
  %227 = mul nuw nsw i64 %226, 14
  br label %252

228:                                              ; preds = %213
  %229 = mul i32 %21, 15
  %230 = icmp ugt i32 %19, %229
  %231 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %232 = load i32, i32* %231, align 8
  %233 = zext i32 %232 to i64
  br i1 %230, label %243, label %234

234:                                              ; preds = %228
  %235 = mul nuw nsw i64 %233, 15
  %236 = tail call i64 @jdiv_round_up(i64 %235, i64 8) #4
  %237 = trunc i64 %236 to i32
  %238 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %237, i32* %238, align 8
  %239 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %240 = load i32, i32* %239, align 4
  %241 = zext i32 %240 to i64
  %242 = mul nuw nsw i64 %241, 15
  br label %252

243:                                              ; preds = %228
  %244 = shl nuw nsw i64 %233, 4
  %245 = tail call i64 @jdiv_round_up(i64 %244, i64 8) #4
  %246 = trunc i64 %245 to i32
  %247 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  store i32 %246, i32* %247, align 8
  %248 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %249 = load i32, i32* %248, align 4
  %250 = zext i32 %249 to i64
  %251 = shl nuw nsw i64 %250, 4
  br label %252

252:                                              ; preds = %243, %234, %216, %201, %186, %171, %156, %141, %126, %111, %96, %81, %66, %51, %36, %23
  %253 = phi i64 [ %251, %243 ], [ %242, %234 ], [ %227, %216 ], [ %212, %201 ], [ %197, %186 ], [ %182, %171 ], [ %167, %156 ], [ %152, %141 ], [ %137, %126 ], [ %122, %111 ], [ %107, %96 ], [ %92, %81 ], [ %77, %66 ], [ %62, %51 ], [ %47, %36 ], [ %32, %23 ]
  %254 = phi i32 [ 16, %243 ], [ 15, %234 ], [ 14, %216 ], [ 13, %201 ], [ 12, %186 ], [ 11, %171 ], [ 10, %156 ], [ 9, %141 ], [ 8, %126 ], [ 7, %111 ], [ 6, %96 ], [ 5, %81 ], [ 4, %66 ], [ 3, %51 ], [ 2, %36 ], [ 1, %23 ]
  %255 = tail call i64 @jdiv_round_up(i64 %253, i64 8) #4
  %256 = trunc i64 %255 to i32
  %257 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 28
  store i32 %256, i32* %257, align 4
  %258 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  store i32 %254, i32* %258, align 8
  %259 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %260 = load i32, i32* %259, align 8
  %261 = icmp sgt i32 %260, 0
  br i1 %261, label %262, label %366

262:                                              ; preds = %252
  %263 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %264 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %263, align 8
  %265 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  %266 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %264, i64 0, i32 9
  store i32 %254, i32* %266, align 4
  %267 = load i32, i32* %265, align 8
  store i32 %267, i32* %266, align 4
  %268 = load i32, i32* %259, align 8
  %269 = icmp sgt i32 %268, 1
  br i1 %269, label %270, label %280

270:                                              ; preds = %262, %270
  %271 = phi i32 [ %277, %270 ], [ 1, %262 ]
  %272 = phi %struct.jpeg_component_info* [ %273, %270 ], [ %264, %262 ]
  %273 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %272, i64 1
  %274 = load i32, i32* %265, align 8
  %275 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %272, i64 1, i32 9
  store i32 %274, i32* %275, align 4
  %276 = load i32, i32* %265, align 8
  store i32 %276, i32* %275, align 4
  %277 = add nuw nsw i32 %271, 1
  %278 = load i32, i32* %259, align 8
  %279 = icmp slt i32 %277, %278
  br i1 %279, label %270, label %280

280:                                              ; preds = %270, %262
  %281 = phi i32 [ %268, %262 ], [ %278, %270 ]
  %282 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %283 = icmp sgt i32 %281, 0
  br i1 %283, label %284, label %366

284:                                              ; preds = %280
  %285 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %282, align 8
  %286 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  %287 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 61
  %288 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  br label %289

289:                                              ; preds = %284, %315
  %290 = phi %struct.jpeg_component_info* [ %285, %284 ], [ %319, %315 ]
  %291 = phi i32 [ 0, %284 ], [ %318, %315 ]
  %292 = load i32, i32* %286, align 8
  %293 = icmp slt i32 %292, 8
  br i1 %293, label %294, label %315

294:                                              ; preds = %289
  %295 = load i32, i32* %287, align 8
  %296 = mul nsw i32 %295, %292
  %297 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %290, i64 0, i32 2
  %298 = load i32, i32* %297, align 8
  %299 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %290, i64 0, i32 3
  br label %300

300:                                              ; preds = %294, %313
  %301 = phi i32 [ %292, %294 ], [ %302, %313 ]
  %302 = shl i32 %301, 1
  %303 = mul i32 %302, %298
  %304 = srem i32 %296, %303
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %306, label %315

306:                                              ; preds = %300
  %307 = load i32, i32* %288, align 4
  %308 = mul nsw i32 %307, %292
  %309 = load i32, i32* %299, align 4
  %310 = mul i32 %302, %309
  %311 = srem i32 %308, %310
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %315

313:                                              ; preds = %306
  %314 = icmp slt i32 %301, 4
  br i1 %314, label %300, label %315

315:                                              ; preds = %306, %300, %313, %289
  %316 = phi i32 [ %292, %289 ], [ %302, %313 ], [ %301, %300 ], [ %301, %306 ]
  %317 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %290, i64 0, i32 9
  store i32 %316, i32* %317, align 4
  %318 = add nuw nsw i32 %291, 1
  %319 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %290, i64 1
  %320 = load i32, i32* %259, align 8
  %321 = icmp slt i32 %318, %320
  br i1 %321, label %289, label %322

322:                                              ; preds = %315
  %323 = icmp sgt i32 %320, 0
  br i1 %323, label %324, label %366

324:                                              ; preds = %322
  %325 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %282, align 8
  %326 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %327 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 61
  %328 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %329 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  br label %330

330:                                              ; preds = %324, %330
  %331 = phi %struct.jpeg_component_info* [ %325, %324 ], [ %363, %330 ]
  %332 = phi i32 [ 0, %324 ], [ %362, %330 ]
  %333 = load i32, i32* %326, align 8
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %331, i64 0, i32 2
  %336 = load i32, i32* %335, align 8
  %337 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %331, i64 0, i32 9
  %338 = load i32, i32* %337, align 4
  %339 = mul nsw i32 %338, %336
  %340 = sext i32 %339 to i64
  %341 = mul nsw i64 %340, %334
  %342 = load i32, i32* %327, align 8
  %343 = shl nsw i32 %342, 3
  %344 = sext i32 %343 to i64
  %345 = tail call i64 @jdiv_round_up(i64 %341, i64 %344) #4
  %346 = trunc i64 %345 to i32
  %347 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %331, i64 0, i32 10
  store i32 %346, i32* %347, align 8
  %348 = load i32, i32* %328, align 4
  %349 = zext i32 %348 to i64
  %350 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %331, i64 0, i32 3
  %351 = load i32, i32* %350, align 4
  %352 = load i32, i32* %337, align 4
  %353 = mul nsw i32 %352, %351
  %354 = sext i32 %353 to i64
  %355 = mul nsw i64 %354, %349
  %356 = load i32, i32* %329, align 4
  %357 = shl nsw i32 %356, 3
  %358 = sext i32 %357 to i64
  %359 = tail call i64 @jdiv_round_up(i64 %355, i64 %358) #4
  %360 = trunc i64 %359 to i32
  %361 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %331, i64 0, i32 11
  store i32 %360, i32* %361, align 4
  %362 = add nuw nsw i32 %332, 1
  %363 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %331, i64 1
  %364 = load i32, i32* %259, align 8
  %365 = icmp slt i32 %362, %364
  br i1 %365, label %330, label %366

366:                                              ; preds = %330, %252, %280, %322
  %367 = phi i32 [ %320, %322 ], [ %281, %280 ], [ %260, %252 ], [ %364, %330 ]
  %368 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %369 = load i32, i32* %368, align 8
  switch i32 %369, label %376 [
    i32 1, label %377
    i32 2, label %370
    i32 6, label %370
    i32 7, label %370
    i32 8, label %370
    i32 9, label %370
    i32 10, label %370
    i32 11, label %370
    i32 12, label %370
    i32 13, label %370
    i32 14, label %370
    i32 15, label %370
    i32 3, label %374
    i32 16, label %374
    i32 4, label %375
    i32 5, label %375
  ]

370:                                              ; preds = %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366
  %371 = zext i32 %369 to i64
  %372 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_pixelsize, i64 0, i64 %371
  %373 = load i32, i32* %372, align 4
  br label %377

374:                                              ; preds = %366, %366
  br label %377

375:                                              ; preds = %366, %366
  br label %377

376:                                              ; preds = %366
  br label %377

377:                                              ; preds = %366, %376, %375, %374, %370
  %378 = phi i32 [ %367, %376 ], [ 4, %375 ], [ 3, %374 ], [ %373, %370 ], [ %369, %366 ]
  %379 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  store i32 %378, i32* %379, align 8
  %380 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 20
  %381 = load i32, i32* %380, align 4
  %382 = icmp eq i32 %381, 0
  %383 = select i1 %382, i32 %378, i32 1
  %384 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 30
  store i32 %383, i32* %384, align 4
  %385 = tail call fastcc i32 @use_merged_upsample(%struct.jpeg_decompress_struct* %0)
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %390, label %387

387:                                              ; preds = %377
  %388 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %389 = load i32, i32* %388, align 4
  br label %390

390:                                              ; preds = %377, %387
  %391 = phi i32 [ %389, %387 ], [ 1, %377 ]
  %392 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 31
  store i32 %391, i32* %392, align 8
  ret void
}

declare i64 @jdiv_round_up(i64, i64) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @use_merged_upsample(%struct.jpeg_decompress_struct* nocapture readonly) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 18
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %72

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 59
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %72

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 10
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 3
  br i1 %12, label %13, label %72

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 3
  br i1 %16, label %17, label %72

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %19 = load i32, i32* %18, align 8
  switch i32 %19, label %72 [
    i32 16, label %20
    i32 2, label %24
    i32 6, label %24
    i32 7, label %24
    i32 8, label %24
    i32 9, label %24
    i32 10, label %24
    i32 11, label %24
    i32 12, label %24
    i32 13, label %24
    i32 14, label %24
    i32 15, label %24
  ]

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 3
  br i1 %23, label %31, label %72

24:                                               ; preds = %17, %17, %17, %17, %17, %17, %17, %17, %17, %17, %17
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %26 = load i32, i32* %25, align 8
  %27 = zext i32 %19 to i64
  %28 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_pixelsize, i64 0, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %26, %29
  br i1 %30, label %31, label %72

31:                                               ; preds = %20, %24
  %32 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %33 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %32, align 8
  %34 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 0, i32 2
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, 2
  br i1 %36, label %37, label %72

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 1, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %41, label %72

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 2, i32 2
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %72

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 0, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = icmp sgt i32 %47, 2
  br i1 %48, label %72, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 1, i32 3
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %53, label %72

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 2, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 1
  br i1 %56, label %57, label %72

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 0, i32 9
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %59, %61
  br i1 %62, label %63, label %72

63:                                               ; preds = %57
  %64 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 1, i32 9
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, %59
  br i1 %66, label %67, label %72

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 2, i32 9
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, %59
  %71 = zext i1 %70 to i32
  ret i32 %71

72:                                               ; preds = %17, %57, %63, %45, %31, %37, %41, %49, %53, %24, %20, %9, %13, %1, %5
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_new_colormap(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 77
  %3 = bitcast %struct.jpeg_decomp_master** %2 to %struct.my_decomp_master**
  %4 = load %struct.my_decomp_master*, %struct.my_decomp_master** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 207
  br i1 %7, label %19, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %10 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 5
  store i32 20, i32* %11, align 8
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 6, i32 0, i64 0
  store i32 %12, i32* %14, align 4
  %15 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %15, i64 0, i32 0
  %17 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %16, align 8
  %18 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %17(%struct.jpeg_common_struct* %18) #4
  br label %19

19:                                               ; preds = %1, %8
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 20
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %39, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 25
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 33
  %29 = load i8**, i8*** %28, align 8
  %30 = icmp eq i8** %29, null
  br i1 %30, label %39, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %4, i64 0, i32 4
  %33 = load %struct.jpeg_color_quantizer*, %struct.jpeg_color_quantizer** %32, align 8
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  store %struct.jpeg_color_quantizer* %33, %struct.jpeg_color_quantizer** %34, align 8
  %35 = getelementptr inbounds %struct.jpeg_color_quantizer, %struct.jpeg_color_quantizer* %33, i64 0, i32 3
  %36 = bitcast {}** %35 to void (%struct.jpeg_decompress_struct*)**
  %37 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %36, align 8
  tail call void %37(%struct.jpeg_decompress_struct* %0) #4
  %38 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %4, i64 0, i32 0, i32 2
  store i32 0, i32* %38, align 8
  br label %47

39:                                               ; preds = %27, %23, %19
  %40 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %41 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %40, align 8
  %42 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %41, i64 0, i32 5
  store i32 46, i32* %42, align 8
  %43 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %40, align 8
  %44 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %43, i64 0, i32 0
  %45 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %44, align 8
  %46 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %45(%struct.jpeg_common_struct* %46) #4
  br label %47

47:                                               ; preds = %39, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_master_decompress(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 77
  %3 = bitcast %struct.jpeg_decomp_master** %2 to %struct.my_decomp_master**
  %4 = load %struct.my_decomp_master*, %struct.my_decomp_master** %3, align 8
  %5 = bitcast %struct.my_decomp_master* %4 to <2 x void (%struct.jpeg_decompress_struct*)*>*
  store <2 x void (%struct.jpeg_decompress_struct*)*> <void (%struct.jpeg_decompress_struct*)* @prepare_for_output_pass, void (%struct.jpeg_decompress_struct*)* @finish_output_pass>, <2 x void (%struct.jpeg_decompress_struct*)*>* %5, align 8
  %6 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %4, i64 0, i32 0, i32 2
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %4, i64 0, i32 0, i32 7
  store i32 0, i32* %7, align 4
  %8 = load %struct.my_decomp_master*, %struct.my_decomp_master** %3, align 8
  tail call void @jpeg_calc_output_dimensions(%struct.jpeg_decompress_struct* %0) #4
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %10 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %10, i64 0, i32 0
  %12 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %11, align 8
  %13 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %14 = tail call i8* %12(%struct.jpeg_common_struct* %13, i32 1, i64 1408) #4
  %15 = getelementptr inbounds i8, i8* %14, i64 256
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 0, i64 256, i1 false) #4
  %17 = bitcast i8* %15 to <16 x i8>*
  store <16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, <16 x i8>* %17, align 1
  %18 = getelementptr inbounds i8, i8* %14, i64 272
  %19 = bitcast i8* %18 to <16 x i8>*
  store <16 x i8> <i8 16, i8 17, i8 18, i8 19, i8 20, i8 21, i8 22, i8 23, i8 24, i8 25, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31>, <16 x i8>* %19, align 1
  %20 = getelementptr inbounds i8, i8* %14, i64 288
  %21 = bitcast i8* %20 to <16 x i8>*
  store <16 x i8> <i8 32, i8 33, i8 34, i8 35, i8 36, i8 37, i8 38, i8 39, i8 40, i8 41, i8 42, i8 43, i8 44, i8 45, i8 46, i8 47>, <16 x i8>* %21, align 1
  %22 = getelementptr inbounds i8, i8* %14, i64 304
  %23 = bitcast i8* %22 to <16 x i8>*
  store <16 x i8> <i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 58, i8 59, i8 60, i8 61, i8 62, i8 63>, <16 x i8>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %14, i64 320
  %25 = bitcast i8* %24 to <16 x i8>*
  store <16 x i8> <i8 64, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 72, i8 73, i8 74, i8 75, i8 76, i8 77, i8 78, i8 79>, <16 x i8>* %25, align 1
  %26 = getelementptr inbounds i8, i8* %14, i64 336
  %27 = bitcast i8* %26 to <16 x i8>*
  store <16 x i8> <i8 80, i8 81, i8 82, i8 83, i8 84, i8 85, i8 86, i8 87, i8 88, i8 89, i8 90, i8 91, i8 92, i8 93, i8 94, i8 95>, <16 x i8>* %27, align 1
  %28 = getelementptr inbounds i8, i8* %14, i64 352
  %29 = bitcast i8* %28 to <16 x i8>*
  store <16 x i8> <i8 96, i8 97, i8 98, i8 99, i8 100, i8 101, i8 102, i8 103, i8 104, i8 105, i8 106, i8 107, i8 108, i8 109, i8 110, i8 111>, <16 x i8>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %14, i64 368
  %31 = bitcast i8* %30 to <16 x i8>*
  store <16 x i8> <i8 112, i8 113, i8 114, i8 115, i8 116, i8 117, i8 118, i8 119, i8 120, i8 121, i8 122, i8 123, i8 124, i8 125, i8 126, i8 127>, <16 x i8>* %31, align 1
  %32 = getelementptr inbounds i8, i8* %14, i64 384
  %33 = bitcast i8* %32 to <16 x i8>*
  store <16 x i8> <i8 -128, i8 -127, i8 -126, i8 -125, i8 -124, i8 -123, i8 -122, i8 -121, i8 -120, i8 -119, i8 -118, i8 -117, i8 -116, i8 -115, i8 -114, i8 -113>, <16 x i8>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %14, i64 400
  %35 = bitcast i8* %34 to <16 x i8>*
  store <16 x i8> <i8 -112, i8 -111, i8 -110, i8 -109, i8 -108, i8 -107, i8 -106, i8 -105, i8 -104, i8 -103, i8 -102, i8 -101, i8 -100, i8 -99, i8 -98, i8 -97>, <16 x i8>* %35, align 1
  %36 = getelementptr inbounds i8, i8* %14, i64 416
  %37 = bitcast i8* %36 to <16 x i8>*
  store <16 x i8> <i8 -96, i8 -95, i8 -94, i8 -93, i8 -92, i8 -91, i8 -90, i8 -89, i8 -88, i8 -87, i8 -86, i8 -85, i8 -84, i8 -83, i8 -82, i8 -81>, <16 x i8>* %37, align 1
  %38 = getelementptr inbounds i8, i8* %14, i64 432
  %39 = bitcast i8* %38 to <16 x i8>*
  store <16 x i8> <i8 -80, i8 -79, i8 -78, i8 -77, i8 -76, i8 -75, i8 -74, i8 -73, i8 -72, i8 -71, i8 -70, i8 -69, i8 -68, i8 -67, i8 -66, i8 -65>, <16 x i8>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %14, i64 448
  %41 = bitcast i8* %40 to <16 x i8>*
  store <16 x i8> <i8 -64, i8 -63, i8 -62, i8 -61, i8 -60, i8 -59, i8 -58, i8 -57, i8 -56, i8 -55, i8 -54, i8 -53, i8 -52, i8 -51, i8 -50, i8 -49>, <16 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %14, i64 464
  %43 = bitcast i8* %42 to <16 x i8>*
  store <16 x i8> <i8 -48, i8 -47, i8 -46, i8 -45, i8 -44, i8 -43, i8 -42, i8 -41, i8 -40, i8 -39, i8 -38, i8 -37, i8 -36, i8 -35, i8 -34, i8 -33>, <16 x i8>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %14, i64 480
  %45 = bitcast i8* %44 to <16 x i8>*
  store <16 x i8> <i8 -32, i8 -31, i8 -30, i8 -29, i8 -28, i8 -27, i8 -26, i8 -25, i8 -24, i8 -23, i8 -22, i8 -21, i8 -20, i8 -19, i8 -18, i8 -17>, <16 x i8>* %45, align 1
  %46 = getelementptr inbounds i8, i8* %14, i64 496
  %47 = bitcast i8* %46 to <16 x i8>*
  store <16 x i8> <i8 -16, i8 -15, i8 -14, i8 -13, i8 -12, i8 -11, i8 -10, i8 -9, i8 -8, i8 -7, i8 -6, i8 -5, i8 -4, i8 -3, i8 -2, i8 -1>, <16 x i8>* %47, align 1
  %48 = getelementptr i8, i8* %14, i64 512
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 -1, i64 384, i1 false) #4
  %49 = getelementptr inbounds i8, i8* %14, i64 896
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 0, i64 384, i1 false) #4
  %50 = getelementptr inbounds i8, i8* %14, i64 1280
  %51 = load i8*, i8** %16, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %51, i64 128, i1 false) #4
  %52 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %53 = load i32, i32* %52, align 8
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %56 = load i32, i32* %55, align 8
  %57 = sext i32 %56 to i64
  %58 = mul nsw i64 %57, %54
  %59 = icmp ugt i64 %58, 4294967295
  br i1 %59, label %60, label %67

60:                                               ; preds = %1
  %61 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %62 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %61, align 8
  %63 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %62, i64 0, i32 5
  store i32 70, i32* %63, align 8
  %64 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %61, align 8
  %65 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %64, i64 0, i32 0
  %66 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %65, align 8
  tail call void %66(%struct.jpeg_common_struct* %13) #4
  br label %67

67:                                               ; preds = %60, %1
  %68 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %8, i64 0, i32 1
  store i32 0, i32* %68, align 8
  %69 = tail call fastcc i32 @use_merged_upsample(%struct.jpeg_decompress_struct* %0) #4
  %70 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %8, i64 0, i32 2
  store i32 %69, i32* %70, align 4
  %71 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %8, i64 0, i32 3
  %72 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %8, i64 0, i32 4
  %73 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 20
  %74 = bitcast %struct.jpeg_color_quantizer** %71 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 16, i1 false) #4
  %75 = load i32, i32* %73, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %81

77:                                               ; preds = %67
  %78 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 24
  store i32 0, i32* %78, align 4
  %79 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 25
  store i32 0, i32* %79, align 8
  %80 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 26
  store i32 0, i32* %80, align 4
  br label %144

81:                                               ; preds = %67
  %82 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 15
  %83 = load i32, i32* %82, align 8
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %89

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 24
  store i32 0, i32* %86, align 4
  %87 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 25
  store i32 0, i32* %87, align 8
  %88 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 26
  store i32 0, i32* %88, align 4
  br label %89

89:                                               ; preds = %85, %81
  %90 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 16
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %100, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %95 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %94, align 8
  %96 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %95, i64 0, i32 5
  store i32 47, i32* %96, align 8
  %97 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %94, align 8
  %98 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %97, i64 0, i32 0
  %99 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %98, align 8
  tail call void %99(%struct.jpeg_common_struct* %13) #4
  br label %100

100:                                              ; preds = %93, %89
  %101 = load i32, i32* %55, align 8
  %102 = icmp eq i32 %101, 3
  br i1 %102, label %108, label %103

103:                                              ; preds = %100
  %104 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 24
  store i32 1, i32* %104, align 4
  %105 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 25
  store i32 0, i32* %105, align 8
  %106 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 26
  store i32 0, i32* %106, align 4
  %107 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 33
  store i8** null, i8*** %107, align 8
  br label %122

108:                                              ; preds = %100
  %109 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 33
  %110 = load i8**, i8*** %109, align 8
  %111 = icmp eq i8** %110, null
  br i1 %111, label %114, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 25
  store i32 1, i32* %113, align 8
  br label %122

114:                                              ; preds = %108
  %115 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 22
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %120, label %118

118:                                              ; preds = %114
  %119 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 26
  store i32 1, i32* %119, align 4
  br label %122

120:                                              ; preds = %114
  %121 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 24
  store i32 1, i32* %121, align 4
  br label %122

122:                                              ; preds = %120, %118, %112, %103
  %123 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 24
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %131, label %126

126:                                              ; preds = %122
  tail call void @jinit_1pass_quantizer(%struct.jpeg_decompress_struct* %0) #4
  %127 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %128 = bitcast %struct.jpeg_color_quantizer** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %struct.jpeg_color_quantizer** %71 to i64*
  store i64 %129, i64* %130, align 8
  br label %131

131:                                              ; preds = %126, %122
  %132 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 26
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %139

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 25
  %137 = load i32, i32* %136, align 8
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %144, label %139

139:                                              ; preds = %135, %131
  tail call void @jinit_2pass_quantizer(%struct.jpeg_decompress_struct* %0) #4
  %140 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %141 = bitcast %struct.jpeg_color_quantizer** %140 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = bitcast %struct.jpeg_color_quantizer** %72 to i64*
  store i64 %142, i64* %143, align 8
  br label %144

144:                                              ; preds = %139, %135, %77
  %145 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 16
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %156

148:                                              ; preds = %144
  %149 = load i32, i32* %70, align 4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %152, label %151

151:                                              ; preds = %148
  tail call void @jinit_merged_upsampler(%struct.jpeg_decompress_struct* %0) #4
  br label %153

152:                                              ; preds = %148
  tail call void @jinit_color_deconverter(%struct.jpeg_decompress_struct* %0) #4
  tail call void @jinit_upsampler(%struct.jpeg_decompress_struct* %0) #4
  br label %153

153:                                              ; preds = %152, %151
  %154 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 26
  %155 = load i32, i32* %154, align 4
  tail call void @jinit_d_post_controller(%struct.jpeg_decompress_struct* %0, i32 %155) #4
  br label %156

156:                                              ; preds = %153, %144
  tail call void @jinit_inverse_dct(%struct.jpeg_decompress_struct* %0) #4
  %157 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 46
  %158 = load i32, i32* %157, align 4
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %167, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %162 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %161, align 8
  %163 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %162, i64 0, i32 5
  store i32 1, i32* %163, align 8
  %164 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %161, align 8
  %165 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %164, i64 0, i32 0
  %166 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %165, align 8
  tail call void %166(%struct.jpeg_common_struct* %13) #4
  br label %173

167:                                              ; preds = %156
  %168 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 45
  %169 = load i32, i32* %168, align 8
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %172, label %171

171:                                              ; preds = %167
  tail call void @jinit_phuff_decoder(%struct.jpeg_decompress_struct* %0) #4
  br label %173

172:                                              ; preds = %167
  tail call void @jinit_huff_decoder(%struct.jpeg_decompress_struct* %0) #4
  br label %173

173:                                              ; preds = %172, %171, %160
  %174 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %175 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %174, align 8
  %176 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %175, i64 0, i32 4
  %177 = load i32, i32* %176, align 8
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %184

179:                                              ; preds = %173
  %180 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 15
  %181 = load i32, i32* %180, align 8
  %182 = icmp ne i32 %181, 0
  %183 = zext i1 %182 to i32
  br label %184

184:                                              ; preds = %179, %173
  %185 = phi i32 [ 1, %173 ], [ %183, %179 ]
  tail call void @jinit_d_coef_controller(%struct.jpeg_decompress_struct* %0, i32 %185) #4
  %186 = load i32, i32* %145, align 4
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %189

188:                                              ; preds = %184
  tail call void @jinit_d_main_controller(%struct.jpeg_decompress_struct* %0, i32 0) #4
  br label %189

189:                                              ; preds = %188, %184
  %190 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %9, align 8
  %191 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %190, i64 0, i32 6
  %192 = bitcast {}** %191 to void (%struct.jpeg_common_struct*)**
  %193 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %192, align 8
  tail call void %193(%struct.jpeg_common_struct* %13) #4
  %194 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %174, align 8
  %195 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %194, i64 0, i32 2
  %196 = bitcast {}** %195 to void (%struct.jpeg_decompress_struct*)**
  %197 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %196, align 8
  tail call void %197(%struct.jpeg_decompress_struct* %0) #4
  %198 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %2, align 8
  %199 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %198, i64 0, i32 3
  store i32 0, i32* %199, align 4
  %200 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 68
  %201 = load i32, i32* %200, align 8
  %202 = add i32 %201, -1
  %203 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %2, align 8
  %204 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %203, i64 0, i32 4
  store i32 %202, i32* %204, align 8
  %205 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %2, align 8
  %206 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %205, i64 0, i32 8
  store i32 0, i32* %206, align 8
  %207 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 2
  %208 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %207, align 8
  %209 = icmp eq %struct.jpeg_progress_mgr* %208, null
  br i1 %209, label %246, label %210

210:                                              ; preds = %189
  %211 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 15
  %212 = load i32, i32* %211, align 8
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %246

214:                                              ; preds = %210
  %215 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %174, align 8
  %216 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %215, i64 0, i32 4
  %217 = load i32, i32* %216, align 8
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %246, label %219

219:                                              ; preds = %214
  %220 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 45
  %221 = load i32, i32* %220, align 8
  %222 = icmp eq i32 %221, 0
  %223 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %224 = load i32, i32* %223, align 8
  %225 = mul nsw i32 %224, 3
  %226 = add nsw i32 %225, 2
  %227 = select i1 %222, i32 %224, i32 %226
  %228 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %208, i64 0, i32 1
  store i64 0, i64* %228, align 8
  %229 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 64
  %230 = load i32, i32* %229, align 4
  %231 = zext i32 %230 to i64
  %232 = sext i32 %227 to i64
  %233 = mul nsw i64 %232, %231
  %234 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %207, align 8
  %235 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %234, i64 0, i32 2
  store i64 %233, i64* %235, align 8
  %236 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %207, align 8
  %237 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %236, i64 0, i32 3
  store i32 0, i32* %237, align 8
  %238 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 26
  %239 = load i32, i32* %238, align 4
  %240 = icmp eq i32 %239, 0
  %241 = select i1 %240, i32 2, i32 3
  %242 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %207, align 8
  %243 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %242, i64 0, i32 4
  store i32 %241, i32* %243, align 4
  %244 = load i32, i32* %68, align 8
  %245 = add nsw i32 %244, 1
  store i32 %245, i32* %68, align 8
  br label %246

246:                                              ; preds = %189, %210, %214, %219
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prepare_for_output_pass(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 77
  %3 = bitcast %struct.jpeg_decomp_master** %2 to %struct.my_decomp_master**
  %4 = load %struct.my_decomp_master*, %struct.my_decomp_master** %3, align 8
  %5 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %4, i64 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %21, label %8

8:                                                ; preds = %1
  store i32 0, i32* %5, align 8
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %10 = load %struct.jpeg_color_quantizer*, %struct.jpeg_color_quantizer** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_color_quantizer, %struct.jpeg_color_quantizer* %10, i64 0, i32 0
  %12 = load void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i32)** %11, align 8
  tail call void %12(%struct.jpeg_decompress_struct* %0, i32 0) #4
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 80
  %14 = load %struct.jpeg_d_post_controller*, %struct.jpeg_d_post_controller** %13, align 8
  %15 = getelementptr inbounds %struct.jpeg_d_post_controller, %struct.jpeg_d_post_controller* %14, i64 0, i32 0
  %16 = load void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i32)** %15, align 8
  tail call void %16(%struct.jpeg_decompress_struct* %0, i32 2) #4
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 78
  %18 = load %struct.jpeg_d_main_controller*, %struct.jpeg_d_main_controller** %17, align 8
  %19 = getelementptr inbounds %struct.jpeg_d_main_controller, %struct.jpeg_d_main_controller* %18, i64 0, i32 0
  %20 = load void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i32)** %19, align 8
  tail call void %20(%struct.jpeg_decompress_struct* %0, i32 2) #4
  br label %108

21:                                               ; preds = %1
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 20
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %61, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 33
  %27 = load i8**, i8*** %26, align 8
  %28 = icmp eq i8** %27, null
  br i1 %28, label %29, label %61

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 22
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %43, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 26
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %4, i64 0, i32 4
  %39 = bitcast %struct.jpeg_color_quantizer** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %42 = bitcast %struct.jpeg_color_quantizer** %41 to i64*
  store i64 %40, i64* %42, align 8
  store i32 1, i32* %5, align 8
  br label %61

43:                                               ; preds = %33, %29
  %44 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 24
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %4, i64 0, i32 3
  %49 = bitcast %struct.jpeg_color_quantizer** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %52 = bitcast %struct.jpeg_color_quantizer** %51 to i64*
  store i64 %50, i64* %52, align 8
  br label %61

53:                                               ; preds = %43
  %54 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %55 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %54, align 8
  %56 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %55, i64 0, i32 5
  store i32 46, i32* %56, align 8
  %57 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %54, align 8
  %58 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %57, i64 0, i32 0
  %59 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %58, align 8
  %60 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %59(%struct.jpeg_common_struct* %60) #4
  br label %61

61:                                               ; preds = %21, %37, %53, %47, %25
  %62 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 84
  %63 = bitcast %struct.jpeg_inverse_dct** %62 to void (%struct.jpeg_decompress_struct*)***
  %64 = load void (%struct.jpeg_decompress_struct*)**, void (%struct.jpeg_decompress_struct*)*** %63, align 8
  %65 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %64, align 8
  tail call void %65(%struct.jpeg_decompress_struct* %0) #4
  %66 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %67 = load %struct.jpeg_d_coef_controller*, %struct.jpeg_d_coef_controller** %66, align 8
  %68 = getelementptr inbounds %struct.jpeg_d_coef_controller, %struct.jpeg_d_coef_controller* %67, i64 0, i32 2
  %69 = bitcast {}** %68 to void (%struct.jpeg_decompress_struct*)**
  %70 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %69, align 8
  tail call void %70(%struct.jpeg_decompress_struct* %0) #4
  %71 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 16
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %108

74:                                               ; preds = %61
  %75 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %4, i64 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %83

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %80 = bitcast %struct.jpeg_color_deconverter** %79 to void (%struct.jpeg_decompress_struct*)***
  %81 = load void (%struct.jpeg_decompress_struct*)**, void (%struct.jpeg_decompress_struct*)*** %80, align 8
  %82 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %81, align 8
  tail call void %82(%struct.jpeg_decompress_struct* %0) #4
  br label %83

83:                                               ; preds = %74, %78
  %84 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 85
  %85 = bitcast %struct.jpeg_upsampler** %84 to void (%struct.jpeg_decompress_struct*)***
  %86 = load void (%struct.jpeg_decompress_struct*)**, void (%struct.jpeg_decompress_struct*)*** %85, align 8
  %87 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %86, align 8
  tail call void %87(%struct.jpeg_decompress_struct* %0) #4
  %88 = load i32, i32* %22, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %96, label %90

90:                                               ; preds = %83
  %91 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %92 = load %struct.jpeg_color_quantizer*, %struct.jpeg_color_quantizer** %91, align 8
  %93 = getelementptr inbounds %struct.jpeg_color_quantizer, %struct.jpeg_color_quantizer* %92, i64 0, i32 0
  %94 = load void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i32)** %93, align 8
  %95 = load i32, i32* %5, align 8
  tail call void %94(%struct.jpeg_decompress_struct* %0, i32 %95) #4
  br label %96

96:                                               ; preds = %83, %90
  %97 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 80
  %98 = load %struct.jpeg_d_post_controller*, %struct.jpeg_d_post_controller** %97, align 8
  %99 = getelementptr inbounds %struct.jpeg_d_post_controller, %struct.jpeg_d_post_controller* %98, i64 0, i32 0
  %100 = load void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i32)** %99, align 8
  %101 = load i32, i32* %5, align 8
  %102 = icmp eq i32 %101, 0
  %103 = select i1 %102, i32 0, i32 3
  tail call void %100(%struct.jpeg_decompress_struct* %0, i32 %103) #4
  %104 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 78
  %105 = load %struct.jpeg_d_main_controller*, %struct.jpeg_d_main_controller** %104, align 8
  %106 = getelementptr inbounds %struct.jpeg_d_main_controller, %struct.jpeg_d_main_controller* %105, i64 0, i32 0
  %107 = load void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i32)** %106, align 8
  tail call void %107(%struct.jpeg_decompress_struct* %0, i32 0) #4
  br label %108

108:                                              ; preds = %61, %96, %8
  %109 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 2
  %110 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %109, align 8
  %111 = icmp eq %struct.jpeg_progress_mgr* %110, null
  br i1 %111, label %141, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %4, i64 0, i32 1
  %114 = load i32, i32* %113, align 8
  %115 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %110, i64 0, i32 3
  store i32 %114, i32* %115, align 8
  %116 = load i32, i32* %113, align 8
  %117 = load i32, i32* %5, align 8
  %118 = icmp eq i32 %117, 0
  %119 = select i1 %118, i32 1, i32 2
  %120 = add nsw i32 %119, %116
  %121 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %109, align 8
  %122 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %121, i64 0, i32 4
  store i32 %120, i32* %122, align 4
  %123 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 15
  %124 = load i32, i32* %123, align 8
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %141, label %126

126:                                              ; preds = %112
  %127 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %128 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %127, align 8
  %129 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %128, i64 0, i32 5
  %130 = load i32, i32* %129, align 4
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %141

132:                                              ; preds = %126
  %133 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 26
  %134 = load i32, i32* %133, align 4
  %135 = icmp eq i32 %134, 0
  %136 = select i1 %135, i32 1, i32 2
  %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %109, align 8
  %138 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %137, i64 0, i32 4
  %139 = load i32, i32* %138, align 4
  %140 = add nsw i32 %139, %136
  store i32 %140, i32* %138, align 4
  br label %141

141:                                              ; preds = %126, %112, %108, %132
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @finish_output_pass(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 77
  %3 = bitcast %struct.jpeg_decomp_master** %2 to %struct.my_decomp_master**
  %4 = load %struct.my_decomp_master*, %struct.my_decomp_master** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 20
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %10 = load %struct.jpeg_color_quantizer*, %struct.jpeg_color_quantizer** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_color_quantizer, %struct.jpeg_color_quantizer* %10, i64 0, i32 2
  %12 = bitcast {}** %11 to void (%struct.jpeg_decompress_struct*)**
  %13 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %12, align 8
  tail call void %13(%struct.jpeg_decompress_struct* %0) #4
  br label %14

14:                                               ; preds = %1, %8
  %15 = getelementptr inbounds %struct.my_decomp_master, %struct.my_decomp_master* %4, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %15, align 8
  ret void
}

declare void @jinit_1pass_quantizer(%struct.jpeg_decompress_struct*) local_unnamed_addr #1

declare void @jinit_2pass_quantizer(%struct.jpeg_decompress_struct*) local_unnamed_addr #1

declare void @jinit_merged_upsampler(%struct.jpeg_decompress_struct*) local_unnamed_addr #1

declare void @jinit_color_deconverter(%struct.jpeg_decompress_struct*) local_unnamed_addr #1

declare void @jinit_upsampler(%struct.jpeg_decompress_struct*) local_unnamed_addr #1

declare void @jinit_d_post_controller(%struct.jpeg_decompress_struct*, i32) local_unnamed_addr #1

declare void @jinit_inverse_dct(%struct.jpeg_decompress_struct*) local_unnamed_addr #1

declare void @jinit_phuff_decoder(%struct.jpeg_decompress_struct*) local_unnamed_addr #1

declare void @jinit_huff_decoder(%struct.jpeg_decompress_struct*) local_unnamed_addr #1

declare void @jinit_d_coef_controller(%struct.jpeg_decompress_struct*, i32) local_unnamed_addr #1

declare void @jinit_d_main_controller(%struct.jpeg_decompress_struct*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
