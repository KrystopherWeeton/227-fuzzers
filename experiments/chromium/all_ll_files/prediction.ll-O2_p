; ModuleID = '../../third_party/libgav1/src/src/tile/prediction.cc'
source_filename = "../../third_party/libgav1/src/src/tile/prediction.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.libgav1::Tile" = type { i32, i32, i32, i8*, i64, i32, i32, i32, i32, i32, i32, i8, [3 x i8], [3 x i8], [3 x i32], [3 x i32], [8 x [4 x [8 x [2 x i8]]]], i8, %"struct.std::__1::array", %"struct.std::__1::array.1", %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuFrameHeader"*, %"struct.std::__1::array.14"*, %"struct.std::__1::array.15"*, %"struct.libgav1::TemporalMotionField"*, %"struct.std::__1::array.21"*, %"struct.std::__1::array.40"*, %"struct.std::__1::array.41"*, %"class.libgav1::DaalaBitReader", [8 x i8], %"struct.libgav1::SymbolDecoderContext", %"struct.libgav1::SymbolDecoderContext"*, %"class.libgav1::SegmentationMap"*, %"struct.libgav1::dsp::Dsp"*, %"class.libgav1::PostFilter"*, %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::Quantizer", %"class.std::__1::unique_ptr.95", %"class.libgav1::Array2D.98", i64, i32, [3 x %"class.libgav1::Array2DView"], %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::Array2D.43"*, %"class.libgav1::Array2D.51"*, [24 x i8], %"struct.std::__1::array.125", %"class.libgav1::ThreadPool"*, %"struct.libgav1::Tile::ThreadingParameters", %"class.libgav1::ResidualBufferPool"*, %"class.libgav1::TileScratchBufferPool"*, %"class.libgav1::BlockingCounterImpl"*, i8, %"class.std::__1::unique_ptr.78", [32 x [32 x i8]], [4 x i8], i8, i8, i8, %"struct.std::__1::array.141"*, %"struct.std::__1::array.142", [24 x i8] }
%"struct.std::__1::array" = type { [2 x %"class.libgav1::Array2D"] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"struct.std::__1::array.1" = type { [2 x %"class.libgav1::Array2D.2"] }
%"class.libgav1::Array2D.2" = type { %"class.std::__1::unique_ptr.3", i64, i64, %"class.libgav1::Array2DView.9" }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i8* }
%"class.libgav1::Array2DView.9" = type { i32, i32, i8* }
%"struct.libgav1::ObuSequenceHeader" = type { i8, i8, i8, i32, [32 x i32], [32 x %"struct.libgav1::BitStreamLevel"], [32 x i8], i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.libgav1::ColorConfig", i8, %"struct.libgav1::TimingInfo", i8, %"struct.libgav1::DecoderModelInfo", [32 x i8], i8, [32 x i8], i8, %"struct.libgav1::OperatingParameters" }
%"struct.libgav1::BitStreamLevel" = type { i8, i8 }
%"struct.libgav1::ColorConfig" = type { i8, i8, i32, i32, i32, i32, i8, i8, i32, i8 }
%"struct.libgav1::TimingInfo" = type { i32, i32, i8, i32 }
%"struct.libgav1::DecoderModelInfo" = type { i8, i32, i8, i8 }
%"struct.libgav1::OperatingParameters" = type { [32 x i32], [32 x i32], [32 x i8] }
%"struct.libgav1::ObuFrameHeader" = type { i16, i16, i64, [7 x i16], i32, i32, i32, i32, i32, i32, i32, %"struct.libgav1::LoopRestoration", [32 x i32], i32, %"struct.std::__1::array.10", %"struct.libgav1::TileInfo", %"struct.libgav1::QuantizerParameters", %"struct.libgav1::Segmentation", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], i8, i8, i8, %"struct.libgav1::Delta", %"struct.libgav1::Delta", [7 x i8], [8 x i8], %"struct.libgav1::LoopFilter", %"struct.libgav1::Cdef", %"struct.libgav1::FilmGrainParams" }
%"struct.libgav1::LoopRestoration" = type { [3 x i8], [3 x i32] }
%"struct.std::__1::array.10" = type { [8 x %"struct.libgav1::GlobalMotion"] }
%"struct.libgav1::GlobalMotion" = type { i8, [6 x i32], i16, i16, i16, i16 }
%"struct.libgav1::TileInfo" = type { i8, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32, [65 x i32], [65 x i32], i16, i8 }
%"struct.libgav1::QuantizerParameters" = type { i8, [3 x i8], [3 x i8], i8, [3 x i8] }
%"struct.libgav1::Segmentation" = type { i8, i8, i8, i8, i8, i8, [8 x [8 x i8]], [8 x [8 x i16]], [8 x i8], [8 x i8] }
%"struct.libgav1::Delta" = type { i8, i8, i8 }
%"struct.libgav1::LoopFilter" = type { %"struct.std::__1::array.11", i8, i8, i8, %"struct.std::__1::array.12", %"struct.std::__1::array.13" }
%"struct.std::__1::array.11" = type { [4 x i8] }
%"struct.std::__1::array.12" = type { [8 x i8] }
%"struct.std::__1::array.13" = type { [2 x i8] }
%"struct.libgav1::Cdef" = type { i8, i8, [8 x i8], [8 x i8], [8 x i8], [8 x i8] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.std::__1::array.14" = type { [8 x i8] }
%"struct.std::__1::array.15" = type { [8 x %"class.std::__1::shared_ptr"] }
%"class.std::__1::shared_ptr" = type { %"class.libgav1::RefCountedBuffer"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.31", %"class.libgav1::Array2D.2" }
%"class.libgav1::Array2D.31" = type { %"class.std::__1::unique_ptr.32", i64, i64, %"class.libgav1::Array2DView.39" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon.35 }
%union.anon.35 = type { i32 }
%"class.libgav1::Array2DView.39" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.std::__1::array.21" = type { [8 x i8] }
%"struct.std::__1::array.40" = type { [9 x %"struct.std::__1::array.144"] }
%"struct.std::__1::array.144" = type { [2 x %"struct.std::__1::array.145"] }
%"struct.std::__1::array.145" = type { [16 x %"class.libgav1::Array2D"] }
%"struct.std::__1::array.41" = type opaque
%"class.libgav1::DaalaBitReader" = type { %"class.libgav1::BitReader", i8*, i8*, i8*, i8, i32, i32, i64 }
%"class.libgav1::BitReader" = type { i32 (...)** }
%"struct.libgav1::SymbolDecoderContext" = type { [5 x [4 x [11 x i16]]], [8 x i8], [3 x [9 x i16]], [10 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [5 x i16], [22 x i8], [5 x i16], [22 x i8], [4 x [5 x i16]], [24 x i8], [3 x i16], [26 x i8], [5 x [5 x [14 x i16]]], [4 x i8], [4 x [14 x i16]], [16 x i8], [8 x [8 x i16]], [2 x [13 x [15 x i16]]], [20 x i8], [9 x i16], [14 x i8], [6 x [17 x i16]], [20 x i8], [22 x [3 x i16]], [28 x i8], [6 x i16], [20 x i8], [4 x [3 x [4 x i16]]], [21 x [3 x i16]], [2 x i8], [5 x [13 x [3 x i16]]], [26 x i8], [3 x [4 x [17 x i16]]], [8 x i8], [2 x [4 x [13 x [17 x i16]]]], [16 x i8], [2 x [2 x [6 x i16]]], [16 x i8], [2 x [2 x [7 x i16]]], [8 x i8], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [24 x i8], [2 x [2 x [10 x i16]]], [16 x i8], [2 x [11 x i16]], [20 x i8], [2 x [12 x i16]], [16 x i8], [5 x [2 x [9 x [3 x i16]]]], [4 x i8], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [24 x i8], [5 x [2 x [21 x [5 x i16]]]], [12 x i8], [2 x [3 x [3 x i16]]], [28 x i8], [4 x i16], [24 x i8], [3 x i16], [26 x i8], [3 x i16], [26 x i8], [7 x [3 x [3 x i16]]], [2 x i8], [7 x [8 x i16]], [16 x i8], [2 x [3 x i16]], [20 x i8], [7 x [8 x i16]], [16 x i8], [2 x [7 x [5 x [9 x i16]]]], [20 x i8], [4 x [3 x i16]], [8 x i8], [5 x [3 x i16]], [2 x i8], [5 x [3 x i16]], [2 x i8], [2 x [3 x [3 x [3 x i16]]]], [20 x i8], [3 x [2 x [3 x i16]]], [28 x i8], [3 x [6 x [3 x i16]]], [20 x i8], [8 x [9 x i16]], [16 x i8], [6 x [3 x i16]], [28 x i8], [2 x [3 x i16]], [20 x i8], [6 x [3 x i16]], [28 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [3 x [5 x i16]], [2 x i8], [22 x [3 x i16]], [28 x i8], [22 x [17 x i16]], [20 x i8], [22 x [3 x i16]], [28 x i8], [22 x [4 x i16]], [16 x i8], [6 x [3 x i16]], [28 x i8], [6 x [3 x i16]], [28 x i8], [22 x [3 x i16]], [28 x i8], [16 x [4 x i16]], [2 x [5 x i16]], [12 x i8], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [12 x i16]]], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [2 x [5 x i16]]]], [16 x i8], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [10 x [3 x i16]]]], [16 x i8], [2 x [2 x [5 x i16]]], [24 x i8], [2 x [2 x [3 x i16]]], [8 x i8] }
%"class.libgav1::SegmentationMap" = type { i32, i32, %"class.std::__1::unique_ptr.3", %"class.libgav1::Array2DView.9" }
%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array.21", %"struct.std::__1::array.12", %"struct.std::__1::array.12", %"struct.std::__1::array.14", %"struct.std::__1::array.22", %"class.libgav1::Array2D.23", %"class.libgav1::Array2D.31" }
%"struct.std::__1::array.22" = type { [8 x i16] }
%"class.libgav1::Array2D.23" = type { %"class.std::__1::unique_ptr.24", i64, i64, %"class.libgav1::Array2DView.30" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i8* }
%"class.libgav1::Array2DView.30" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }
%"class.libgav1::PostFilter" = type <{ [2 x { i64, i64 }], %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::LoopRestoration"*, %"struct.libgav1::dsp::Dsp"*, i32, i32, i32, i32, i8, [3 x i8], [3 x i8], i8, i32, [4 x i8], i8*, i8*, i8, [8 x [4 x [8 x [2 x i8]]]], [3 x i8], [3 x %struct.anon.42], %"class.libgav1::Array2D.43"*, %"class.libgav1::Array2D.51"*, %"class.libgav1::LoopRestorationInfo"*, [2 x i8*], %"class.libgav1::YuvBuffer"*, %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"*, [3 x i8*], [3 x i8*], [3 x i8*], [3 x i8*], %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"*, i8, [7 x i8], %"class.libgav1::ThreadPool"*, i32, [9248 x i16], [4 x i8] }>
%struct.anon.42 = type { i32, i32, i32 }
%"class.libgav1::LoopRestorationInfo" = type { [3 x %"struct.libgav1::RestorationUnitInfo"*], %"class.libgav1::DynamicBuffer", [3 x i8], %"struct.libgav1::LoopRestoration"*, i8, i8, [3 x i32], [3 x i32], [3 x i32] }
%"class.libgav1::DynamicBuffer" = type { %"class.std::__1::unique_ptr.59", i64 }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"struct.libgav1::RestorationUnitInfo"* }
%"class.libgav1::YuvBuffer" = type <{ i32, i8, [3 x i8], i32, i32, i32, i32, [3 x i32], [3 x i32], [3 x i32], [3 x i32], [3 x i32], [4 x i8], [3 x i8*], %"class.std::__1::unique_ptr", i64, i8, i8, [6 x i8] }>
%"class.libgav1::BlockParametersHolder" = type { i32, i32, %"class.libgav1::DynamicBuffer.65", %"struct.std::__1::atomic", %"class.libgav1::Array2D.74" }
%"class.libgav1::DynamicBuffer.65" = type { %"class.std::__1::unique_ptr.66", i64 }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.std::__1::unique_ptr.69"* }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"struct.libgav1::BlockParameters"* }
%"struct.libgav1::BlockParameters" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x i8], [4 x i8], %"union.libgav1::CompoundMotionVector", %"struct.libgav1::PaletteModeInfo", %"class.std::__1::unique_ptr.78" }
%"struct.libgav1::PaletteModeInfo" = type { [2 x i8], [3 x [8 x i16]] }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.73" }
%"struct.std::__1::__atomic_base.73" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.libgav1::Array2D.74" = type { %"class.std::__1::unique_ptr.75", i64, i64, %"class.libgav1::Array2DView.88" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.libgav1::BlockParameters"** }
%"class.libgav1::Array2DView.88" = type { i32, i32, %"struct.libgav1::BlockParameters"** }
%"class.libgav1::Quantizer" = type { %"struct.libgav1::QuantizerParameters"*, i16*, i16* }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.libgav1::Array2D.98" = type { %"class.std::__1::unique_ptr.99", i64, i64, %"class.libgav1::Array2DView.124" }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.std::__1::unique_ptr.102"* }
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.libgav1::ResidualBuffer"* }
%"class.libgav1::ResidualBuffer" = type { %"class.std::__1::unique_ptr.95", %"class.libgav1::Queue", %"class.libgav1::Queue.111", %"class.libgav1::ResidualBuffer"* }
%"class.libgav1::Queue" = type { %"class.std::__1::unique_ptr.105", i64, i64, i64, i64 }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.libgav1::TransformParameters"* }
%"struct.libgav1::TransformParameters" = type { i8, i32 }
%"class.libgav1::Queue.111" = type { %"class.std::__1::unique_ptr.112", i64, i64, i64, i64 }
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.libgav1::PartitionTreeNode"* }
%"struct.libgav1::PartitionTreeNode" = type <{ i32, i32, i8, [3 x i8] }>
%"class.libgav1::Array2DView.124" = type { i32, i32, %"class.std::__1::unique_ptr.102"* }
%"class.libgav1::RefCountedBuffer" = type { %"class.libgav1::BufferPool"*, i8, i8*, %"class.libgav1::YuvBuffer", i8, %"class.std::__1::mutex", i8, i32, %"class.std::__1::condition_variable", %"class.std::__1::condition_variable", %"class.std::__1::condition_variable", i8, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.libgav1::SegmentationMap", %"struct.std::__1::array.10", [8 x i8], %"struct.libgav1::SymbolDecoderContext", %"struct.std::__1::array.12", %"struct.std::__1::array.13", %"struct.libgav1::Segmentation", %"struct.libgav1::FilmGrainParams", %"struct.libgav1::ReferenceInfo", [16 x i8] }
%"class.libgav1::BufferPool" = type { %"class.std::__1::mutex", %"class.libgav1::Vector", %"class.libgav1::InternalFrameBufferList", i32 (i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.Libgav1FrameBuffer*)*, void (i8*, i8*)*, i8* }
%"class.libgav1::Vector" = type { %"class.libgav1::internal::VectorBase" }
%"class.libgav1::internal::VectorBase" = type { %"class.libgav1::RefCountedBuffer"**, i64, i64 }
%"class.libgav1::InternalFrameBufferList" = type { %"class.libgav1::Vector.16" }
%"class.libgav1::Vector.16" = type { %"class.libgav1::internal::VectorBase.17" }
%"class.libgav1::internal::VectorBase.17" = type { %"class.std::__1::unique_ptr.18"*, i64, i64 }
%"class.std::__1::unique_ptr.18" = type opaque
%struct.Libgav1FrameBuffer = type { [3 x i8*], [3 x i32], i8* }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::condition_variable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.19, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.19 = type { i64 }
%"class.libgav1::Array2D.43" = type { %"class.std::__1::unique_ptr.44", i64, i64, %"class.libgav1::Array2DView.50" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { i16* }
%"class.libgav1::Array2DView.50" = type { i32, i32, i16* }
%"class.libgav1::Array2D.51" = type { %"class.std::__1::unique_ptr.52", i64, i64, %"class.libgav1::Array2DView.58" }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { i8* }
%"class.libgav1::Array2DView.58" = type { i32, i32, i8* }
%"struct.std::__1::array.125" = type { [3 x %"struct.libgav1::RestorationUnitInfo"] }
%"class.libgav1::ThreadPool" = type { %"class.libgav1::Executor", %"class.std::__1::condition_variable", %"class.std::__1::mutex", %"class.libgav1::UnboundedQueue", %"class.std::__1::unique_ptr.89", i8, i32, [16 x i8] }
%"class.libgav1::Executor" = type { i32 (...)** }
%"class.libgav1::UnboundedQueue" = type { %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64, %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64 }
%"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block" = type opaque
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.libgav1::ThreadPool::WorkerThread"** }
%"class.libgav1::ThreadPool::WorkerThread" = type opaque
%"struct.libgav1::Tile::ThreadingParameters" = type { %"class.std::__1::mutex", %"class.libgav1::Array2D.126", i8, i32, %"class.std::__1::condition_variable" }
%"class.libgav1::Array2D.126" = type { %"class.std::__1::unique_ptr.127", i64, i64, %"class.libgav1::Array2DView.133" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { i8* }
%"class.libgav1::Array2DView.133" = type { i32, i32, i8* }
%"class.libgav1::ResidualBufferPool" = type <{ %"class.std::__1::mutex", %"class.libgav1::ResidualBufferStack", i64, i32, [4 x i8] }>
%"class.libgav1::ResidualBufferStack" = type { %"class.libgav1::ResidualBuffer"*, i64 }
%"class.libgav1::TileScratchBufferPool" = type <{ %"class.std::__1::mutex", %"class.libgav1::Stack", i32, [4 x i8] }>
%"class.libgav1::Stack" = type <{ [128 x %"class.std::__1::unique_ptr.134"], i32, [4 x i8] }>
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"struct.libgav1::TileScratchBuffer"* }
%"struct.libgav1::TileScratchBuffer" = type <{ [16384 x i8], %union.anon.137, %"class.std::__1::unique_ptr.95", i64, i8, [3 x [34 x [34 x i8]]], [3 x i8] }>
%union.anon.137 = type { [2 x [16384 x i16]] }
%"class.libgav1::BlockingCounterImpl" = type opaque
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"struct.libgav1::PredictionParameters"* }
%"struct.libgav1::PredictionParameters" = type { i8, i8, [2 x i32], i8, i8, i32, i32, [2 x %"class.libgav1::Array2D"], i8, i8, i8, i32, i32, i8, i8, i8, %union.anon.81, [8 x i16], i32, i32, i32, [2 x %"struct.libgav1::MotionVector"], i32, [8 x [4 x i32]] }
%union.anon.81 = type { [8 x %"union.libgav1::CompoundMotionVector"] }
%"struct.std::__1::array.141" = type { [3 x %"class.libgav1::AlignedDynamicBuffer"] }
%"class.libgav1::AlignedDynamicBuffer" = type { %"class.std::__1::unique_ptr.95", i64 }
%"struct.std::__1::array.142" = type { [8 x i32] }
%"struct.libgav1::Tile::Block" = type { %"class.libgav1::Tile"*, i8, i8, [3 x i8], [3 x i8], [3 x i8], i32, i32, i32, i32, i32, i32, %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"*, %"struct.libgav1::TileScratchBuffer"*, i8** }
%"class.std::__1::unique_lock" = type <{ %"class.std::__1::mutex"*, i8, [7 x i8] }>

$_ZN7libgav14Tile15IntraPredictionIhEEvRKNS0_5BlockENS_5PlaneEiibbbbNS_14PredictionModeENS_13TransformSizeE = comdat any

$_ZN7libgav14Tile21DirectionalPredictionIhEEvRKNS0_5BlockENS_5PlaneEiibbbbiiiiiNS_13TransformSizeEPT_S8_ = comdat any

$_ZN7libgav14Tile15IntraPredictionItEEvRKNS0_5BlockENS_5PlaneEiibbbbNS_14PredictionModeENS_13TransformSizeE = comdat any

$_ZN7libgav14Tile21DirectionalPredictionItEEvRKNS0_5BlockENS_5PlaneEiibbbbiiiiiNS_13TransformSizeEPT_S8_ = comdat any

$_ZN7libgav14Tile17PalettePredictionIhEEvRKNS0_5BlockENS_5PlaneEiiiiNS_13TransformSizeE = comdat any

$_ZN7libgav14Tile17PalettePredictionItEEvRKNS0_5BlockENS_5PlaneEiiiiNS_13TransformSizeE = comdat any

$_ZN7libgav14Tile24ChromaFromLumaPredictionIhEEvRKNS0_5BlockENS_5PlaneEiiNS_13TransformSizeE = comdat any

$_ZN7libgav14Tile24ChromaFromLumaPredictionItEEvRKNS0_5BlockENS_5PlaneEiiNS_13TransformSizeE = comdat any

$_ZN7libgav116RefCountedBuffer9WaitUntilEiPi = comdat any

$_ZN7libgav14Tile18BuildConvolveBlockItEEvNS_5PlaneEibiiiiiiiiiPhll = comdat any

$_ZN7libgav14Tile18BuildConvolveBlockIhEEvNS_5PlaneEibiiiiiiiiiPhll = comdat any

@_ZN7libgav119kTransformWidthLog2E = external local_unnamed_addr constant [19 x i8], align 16
@_ZN7libgav120kTransformHeightLog2E = external local_unnamed_addr constant [19 x i8], align 16
@_ZN7libgav112_GLOBAL__N_122kPredictionModeToAngleE = internal unnamed_addr constant [14 x i32] [i32 0, i32 90, i32 180, i32 45, i32 135, i32 113, i32 157, i32 203, i32 67, i32 0, i32 0, i32 0, i32 0, i32 0], align 16
@_ZN7libgav115kTransformWidthE = external local_unnamed_addr constant [19 x i8], align 16
@_ZN7libgav116kTransformHeightE = external local_unnamed_addr constant [19 x i8], align 16
@_ZN7libgav112_GLOBAL__N_116kInterIntraMasksE = internal unnamed_addr constant [4 x [4 x [4 x i8*]]] [[4 x [4 x i8*]] [[4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_117kInterIntraMaskDcE, i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_117kInterIntraMaskDcE, i32 0, i32 0), i8* null, i8* null], [4 x i8*] [i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_117kInterIntraMaskDcE, i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_117kInterIntraMaskDcE, i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_117kInterIntraMaskDcE, i32 0, i32 0), i8* null], [4 x i8*] [i8* null, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_117kInterIntraMaskDcE, i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_117kInterIntraMaskDcE, i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_117kInterIntraMaskDcE, i32 0, i32 0)], [4 x i8*] [i8* null, i8* null, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_117kInterIntraMaskDcE, i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_117kInterIntraMaskDcE, i32 0, i32 0)]], [4 x [4 x i8*]] [[4 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZN7libgav112_GLOBAL__N_126kInterIntraMaskVertical4x4E, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @_ZN7libgav112_GLOBAL__N_126kInterIntraMaskVertical4x8E, i32 0, i32 0), i8* null, i8* null], [4 x i8*] [i8* getelementptr inbounds ([32 x i8], [32 x i8]* @_ZN7libgav112_GLOBAL__N_126kInterIntraMaskVertical8x4E, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @_ZN7libgav112_GLOBAL__N_126kInterIntraMaskVertical8x8E, i32 0, i32 0), i8* getelementptr inbounds ([128 x i8], [128 x i8]* @_ZN7libgav112_GLOBAL__N_127kInterIntraMaskVertical8x16E, i32 0, i32 0), i8* null], [4 x i8*] [i8* null, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @_ZN7libgav112_GLOBAL__N_127kInterIntraMaskVertical16x8E, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN7libgav112_GLOBAL__N_128kInterIntraMaskVertical16x16E, i32 0, i32 0), i8* getelementptr inbounds ([512 x i8], [512 x i8]* @_ZN7libgav112_GLOBAL__N_128kInterIntraMaskVertical16x32E, i32 0, i32 0)], [4 x i8*] [i8* null, i8* null, i8* getelementptr inbounds ([512 x i8], [512 x i8]* @_ZN7libgav112_GLOBAL__N_128kInterIntraMaskVertical32x16E, i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_128kInterIntraMaskVertical32x32E, i32 0, i32 0)]], [4 x [4 x i8*]] [[4 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZN7libgav112_GLOBAL__N_128kInterIntraMaskHorizontal4x4E, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @_ZN7libgav112_GLOBAL__N_128kInterIntraMaskHorizontal4x8E, i32 0, i32 0), i8* null, i8* null], [4 x i8*] [i8* getelementptr inbounds ([32 x i8], [32 x i8]* @_ZN7libgav112_GLOBAL__N_128kInterIntraMaskHorizontal8x4E, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @_ZN7libgav112_GLOBAL__N_128kInterIntraMaskHorizontal8x8E, i32 0, i32 0), i8* getelementptr inbounds ([128 x i8], [128 x i8]* @_ZN7libgav112_GLOBAL__N_129kInterIntraMaskHorizontal8x16E, i32 0, i32 0), i8* null], [4 x i8*] [i8* null, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @_ZN7libgav112_GLOBAL__N_129kInterIntraMaskHorizontal16x8E, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN7libgav112_GLOBAL__N_130kInterIntraMaskHorizontal16x16E, i32 0, i32 0), i8* getelementptr inbounds ([512 x i8], [512 x i8]* @_ZN7libgav112_GLOBAL__N_130kInterIntraMaskHorizontal16x32E, i32 0, i32 0)], [4 x i8*] [i8* null, i8* null, i8* getelementptr inbounds ([512 x i8], [512 x i8]* @_ZN7libgav112_GLOBAL__N_130kInterIntraMaskHorizontal32x16E, i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_130kInterIntraMaskHorizontal32x32E, i32 0, i32 0)]], [4 x [4 x i8*]] [[4 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZN7libgav112_GLOBAL__N_124kInterIntraMaskSmooth4x4E, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @_ZN7libgav112_GLOBAL__N_124kInterIntraMaskSmooth4x8E, i32 0, i32 0), i8* null, i8* null], [4 x i8*] [i8* getelementptr inbounds ([32 x i8], [32 x i8]* @_ZN7libgav112_GLOBAL__N_124kInterIntraMaskSmooth8x4E, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @_ZN7libgav112_GLOBAL__N_124kInterIntraMaskSmooth8x8E, i32 0, i32 0), i8* getelementptr inbounds ([128 x i8], [128 x i8]* @_ZN7libgav112_GLOBAL__N_125kInterIntraMaskSmooth8x16E, i32 0, i32 0), i8* null], [4 x i8*] [i8* null, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @_ZN7libgav112_GLOBAL__N_125kInterIntraMaskSmooth16x8E, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN7libgav112_GLOBAL__N_126kInterIntraMaskSmooth16x16E, i32 0, i32 0), i8* getelementptr inbounds ([512 x i8], [512 x i8]* @_ZN7libgav112_GLOBAL__N_126kInterIntraMaskSmooth16x32E, i32 0, i32 0)], [4 x i8*] [i8* null, i8* null, i8* getelementptr inbounds ([512 x i8], [512 x i8]* @_ZN7libgav112_GLOBAL__N_126kInterIntraMaskSmooth32x16E, i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @_ZN7libgav112_GLOBAL__N_126kInterIntraMaskSmooth32x32E, i32 0, i32 0)]]], align 16
@_ZN7libgav113k4x4WidthLog2E = external local_unnamed_addr constant [22 x i8], align 16
@_ZN7libgav117kNum4x4BlocksWideE = external local_unnamed_addr constant [22 x i8], align 16
@_ZN7libgav114k4x4HeightLog2E = external local_unnamed_addr constant [22 x i8], align 16
@_ZN7libgav117kNum4x4BlocksHighE = external local_unnamed_addr constant [22 x i8], align 16
@_ZN7libgav112_GLOBAL__N_117kInterIntraMaskDcE = internal constant [1024 x i8] calign 16
@_ZN7libgav112_GLOBAL__N_126kInterIntraMaskVertical4x4E = internal constant [16 x i8] c"<<<<\13\13\13\13\06\06\06\06\02\02\02\02", align 16
@_ZN7libgav112_GLOBAL__N_126kInterIntraMaskVertical4x8E = internal constant [32 x i8] c"<<<<\22\22\22\22\13\13\13\13\0B\0B\0B\0B\06\06\06\06\04\04\04\04\02\02\02\02\01\01\01\01", align 16
@_ZN7libgav112_GLOBAL__N_126kInterIntraMaskVertical8x4E = internal constant [32 x i8] c"<<<<<<<<\22\22\22\22\22\22\22\22\13\13\13\13\13\13\13\13\0B\0B\0B\0B\0B\0B\0B\0B", align 16
@_ZN7libgav112_GLOBAL__N_126kInterIntraMaskVertical8x8E = internal constant [64 x i8] c"<<<<<<<<\22\22\22\22\22\22\22\22\13\13\13\13\13\13\13\13\0B\0B\0B\0B\0B\0B\0B\0B\06\06\06\06\06\06\06\06\04\04\04\04\04\04\04\04\02\02\02\02\02\02\02\02\01\01\01\01\01\01\01\01", align 16
@_ZN7libgav112_GLOBAL__N_127kInterIntraMaskVertical8x16E = internal constant [128 x i8] c"<<<<<<<<--------\22\22\22\22\22\22\22\22\1A\1A\1A\1A\1A\1A\1A\1A\13\13\13\13\13\13\13\13\0F\0F\0F\0F\0F\0F\0F\0F\0B\0B\0B\0B\0B\0B\0B\0B\08\08\08\08\08\08\08\08\06\06\06\06\06\06\06\06\05\05\05\05\05\05\05\05\04\04\04\04\04\04\04\04\03\03\03\03\03\03\03\03\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01", align 16
@_ZN7libgav112_GLOBAL__N_127kInterIntraMaskVertical16x8E = internal constant [128 x i8] c"<<<<<<<<<<<<<<<<----------------\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08", align 16
@_ZN7libgav112_GLOBAL__N_128kInterIntraMaskVertical16x16E = internal constant [256 x i8] calign 16
@_ZN7libgav112_GLOBAL__N_128kInterIntraMaskVertical16x32E = internal constant [512 x i8] calign 16
@_ZN7libgav112_GLOBAL__N_128kInterIntraMaskVertical32x16E = internal constant [512 x i8] c"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<44444444444444444444444444444444--------------------------------''''''''''''''''''''''''''''''''\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07", align 16
@_ZN7libgav112_GLOBAL__N_128kInterIntraMaskVertical32x32E = internal constant [1024 x i8] calign 16
@_ZN7libgav112_GLOBAL__N_128kInterIntraMaskHorizontal4x4E = internal constant [16 x i8] c"<\13\06\02<\13\06\02<\13\06\02<\13\06\02", align 16
@_ZN7libgav112_GLOBAL__N_128kInterIntraMaskHorizontal4x8E = internal constant [32 x i8] c"<\22\13\0B<\22\13\0B<\22\13\0B<\22\13\0B<\22\13\0B<\22\13\0B<\22\13\0B<\22\13\0B", align 16
@_ZN7libgav112_GLOBAL__N_128kInterIntraMaskHorizontal8x4E = internal constant [32 x i8] c"<\22\13\0B\06\04\02\01<\22\13\0B\06\04\02\01<\22\13\0B\06\04\02\01<\22\13\0B\06\04\02\01", align 16
@_ZN7libgav112_GLOBAL__N_128kInterIntraMaskHorizontal8x8E = internal constant [64 x i8] c"<\22\13\0B\06\04\02\01<\22\13\0B\06\04\02\01<\22\13\0B\06\04\02\01<\22\13\0B\06\04\02\01<\22\13\0B\06\04\02\01<\22\13\0B\06\04\02\01<\22\13\0B\06\04\02\01<\22\13\0B\06\04\02\01", align 16
@_ZN7libgav112_GLOBAL__N_129kInterIntraMaskHorizontal8x16E = internal constant [128 x i8] c"<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08", align 16
@_ZN7libgav112_GLOBAL__N_129kInterIntraMaskHorizontal16x8E = internal constant [128 x i8] c"<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\01\01<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\01\01<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\01\01<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\01\01<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\01\01<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\01\01<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\01\01<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\01\01", align 16
@_ZN7libgav112_GLOBAL__N_130kInterIntraMaskHorizontal16x16E = internal constant [256 x i8] calign 16
@_ZN7libgav112_GLOBAL__N_130kInterIntraMaskHorizontal16x32E = internal constant [512 x i8] calign 16
@_ZN7libgav112_GLOBAL__N_130kInterIntraMaskHorizontal32x16E = internal constant [512 x i8] calign 16
@_ZN7libgav112_GLOBAL__N_130kInterIntraMaskHorizontal32x32E = internal constant [1024 x i8] calign 16
@_ZN7libgav112_GLOBAL__N_124kInterIntraMaskSmooth4x4E = internal constant [16 x i8] c"<<<<<\13\13\13<\13\06\06<\13\06\02", align 16
@_ZN7libgav112_GLOBAL__N_124kInterIntraMaskSmooth4x8E = internal constant [32 x i8] c"<<<<<\22\22\22<\22\13\13<\22\13\0B<\22\13\0B<\22\13\0B<\22\13\0B<\22\13\0B", align 16
@_ZN7libgav112_GLOBAL__N_124kInterIntraMaskSmooth8x4E = internal constant [32 x i8] c"<<<<<<<<<\22\22\22\22\22\22\22<\22\13\13\13\13\13\13<\22\13\0B\0B\0B\0B\0B", align 16
@_ZN7libgav112_GLOBAL__N_124kInterIntraMaskSmooth8x8E = internal constant [64 x i8] c"<<<<<<<<<\22\22\22\22\22\22\22<\22\13\13\13\13\13\13<\22\13\0B\0B\0B\0B\0B<\22\13\0B\06\06\06\06<\22\13\0B\06\04\04\04<\22\13\0B\06\04\02\02<\22\13\0B\06\04\02\01", align 16
@_ZN7libgav112_GLOBAL__N_125kInterIntraMaskSmooth8x16E = internal constant [128 x i8] c"<<<<<<<<<-------<-\22\22\22\22\22\22<-\22\1A\1A\1A\1A\1A<-\22\1A\13\13\13\13<-\22\1A\13\0F\0F\0F<-\22\1A\13\0F\0B\0B<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08<-\22\1A\13\0F\0B\08", align 16
@_ZN7libgav112_GLOBAL__N_125kInterIntraMaskSmooth16x8E = internal constant [128 x i8] c"<<<<<<<<<<<<<<<<<---------------<-\22\22\22\22\22\22\22\22\22\22\22\22\22\22<-\22\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A<-\22\1A\13\13\13\13\13\13\13\13\13\13\13\13<-\22\1A\13\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F<-\22\1A\13\0F\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B<-\22\1A\13\0F\0B\08\08\08\08\08\08\08\08\08", align 16
@_ZN7libgav112_GLOBAL__N_126kInterIntraMaskSmooth16x16E = internal constant [256 x i8] c"<<<<<<<<<<<<<<<<<---------------<-\22\22\22\22\22\22\22\22\22\22\22\22\22\22<-\22\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A<-\22\1A\13\13\13\13\13\13\13\13\13\13\13\13<-\22\1A\13\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F<-\22\1A\13\0F\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B<-\22\1A\13\0F\0B\08\08\08\08\08\08\08\08\08<-\22\1A\13\0F\0B\08\06\06\06\06\06\06\06\06<-\22\1A\13\0F\0B\08\06\05\05\05\05\05\05\05<-\22\1A\13\0F\0B\08\06\05\04\04\04\04\04\04<-\22\1A\13\0F\0B\08\06\05\04\03\03\03\03\03<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\02\02<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\02\02<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\01\01<-\22\1A\13\0F\0B\08\06\05\04\03\02\02\01\01", align 16
@_ZN7libgav112_GLOBAL__N_126kInterIntraMaskSmooth16x32E = internal constant [512 x i8] c"<<<<<<<<<<<<<<<<<444444444444444<4--------------<4-'''''''''''''<4-'\22\22\22\22\22\22\22\22\22\22\22\22<4-'\22\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E<4-'\22\1E\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A<4-'\22\1E\1A\16\16\16\16\16\16\16\16\16<4-'\22\1E\1A\16\13\13\13\13\13\13\13\13<4-'\22\1E\1A\16\13\11\11\11\11\11\11\11<4-'\22\1E\1A\16\13\11\0F\0F\0F\0F\0F\0F<4-'\22\1E\1A\16\13\11\0F\0D\0D\0D\0D\0D<4-'\22\1E\1A\16\13\11\0F\0D\0B\0B\0B\0B<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\0A\0A<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\08<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07", align 16
@_ZN7libgav112_GLOBAL__N_126kInterIntraMaskSmooth32x16E = internal constant [512 x i8] c"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<4444444444444444444444444444444<4------------------------------<4-'''''''''''''''''''''''''''''<4-'\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22<4-'\22\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E<4-'\22\1E\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A<4-'\22\1E\1A\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16<4-'\22\1E\1A\16\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13<4-'\22\1E\1A\16\13\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11<4-'\22\1E\1A\16\13\11\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F<4-'\22\1E\1A\16\13\11\0F\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D<4-'\22\1E\1A\16\13\11\0F\0D\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08<4-'\22\1E\1A\16\13\11\0F\0D\0B\0A\08\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07", align 16
@_ZN7libgav112_GLOBAL__N_126kInterIntraMaskSmooth32x32E = internal constant [1024 x i8] calign 16
@_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceLookupE = internal unnamed_addr constant [4 x [2 x i8]] [[2 x i8] c"\09\07", [2 x i8] c"\0B\05", [2 x i8] c"\0C\04", [2 x i8] c"\0D\03"], align 1
@_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceWeightE = internal unnamed_addr constant [4 x [2 x i8]] [[2 x i8] c"\02\03", [2 x i8] c"\02\05", [2 x i8] c"\02\07", [2 x i8] c"\01\1F"], align 1
@_ZN7libgav136kDirectionalIntraPredictorDerivativeE = external local_unnamed_addr constant [44 x i16], align 16

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN7libgav14Tile15IntraPredictionIhEEvRKNS0_5BlockENS_5PlaneEiibbbbNS_14PredictionModeENS_13TransformSizeE(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* dereferenceable(88), i8 zeroext, i32, i32, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %12 = alloca [160 x i8], align 32
  %13 = alloca [160 x i8], align 32
  %14 = zext i8 %10 to i64
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl i32 1, %17
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %14
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = shl i32 1, %21
  %23 = zext i8 %2 to i64
  %24 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %23
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i32
  %30 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %31 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %30, align 8
  %32 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %31, i64 0, i32 6
  %33 = load i32, i32* %32, align 8
  %34 = shl i32 %33, 2
  %35 = ashr i32 %34, %26
  %36 = add nsw i32 %35, -1
  %37 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %31, i64 0, i32 7
  %38 = load i32, i32* %37, align 4
  %39 = shl i32 %38, 2
  %40 = ashr i32 %39, %29
  %41 = add nsw i32 %40, -1
  %42 = getelementptr inbounds [160 x i8], [160 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %42) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %42, i8 -86, i64 160, i1 false)
  %43 = getelementptr inbounds [160 x i8], [160 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %43) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %43, i8 -86, i64 160, i1 false)
  %44 = getelementptr inbounds [160 x i8], [160 x i8]* %12, i64 0, i64 16
  %45 = getelementptr inbounds [160 x i8], [160 x i8]* %13, i64 0, i64 16
  %46 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %47 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %46, align 32
  %48 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %47, i64 0, i32 33, i32 0
  %49 = load i8, i8* %48, align 4
  %50 = sext i8 %49 to i32
  %51 = add nsw i32 %22, %18
  %52 = add i8 %9, -1
  %53 = icmp ult i8 %52, 8
  %54 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %55 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %54, align 8
  %56 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %55, i64 0, i32 18, i32 0, i32 0, i32 0
  %57 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %56, align 8
  %58 = icmp eq i8 %2, 0
  %59 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %57, i64 0, i32 0
  %60 = load i8, i8* %59, align 8
  %61 = icmp ne i8 %60, 0
  %62 = and i1 %58, %61
  br i1 %53, label %63, label %73

63:                                               ; preds = %11
  %64 = zext i8 %9 to i64
  %65 = getelementptr inbounds [14 x i32], [14 x i32]* @_ZN7libgav112_GLOBAL__N_122kPredictionModeToAngleE, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp ne i8 %2, 0
  %68 = zext i1 %67 to i64
  %69 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %57, i64 0, i32 2, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = mul nsw i32 %70, 3
  %72 = add nsw i32 %71, %66
  br label %73

73:                                               ; preds = %11, %63
  %74 = phi i32 [ %72, %63 ], [ 0, %11 ]
  %75 = select i1 %53, i32 %51, i32 %18
  %76 = select i1 %53, i32 %51, i32 %22
  %77 = select i1 %7, i32 2, i32 1
  %78 = shl i32 %77, %17
  %79 = select i1 %53, i32 %78, i32 %18
  %80 = select i1 %8, i32 2, i32 1
  %81 = shl i32 %80, %21
  %82 = select i1 %53, i32 %81, i32 %22
  %83 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %23, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %23, i32 2
  %86 = load i8*, i8** %85, align 8
  br i1 %62, label %103, label %87

87:                                               ; preds = %73
  %88 = zext i8 %9 to i32
  %89 = shl i32 1, %88
  %90 = and i32 %89, 7680
  %91 = icmp ne i32 %90, 0
  %92 = icmp slt i32 %74, 180
  %93 = and i1 %53, %92
  %94 = or i1 %91, %93
  br i1 %94, label %98, label %95

95:                                               ; preds = %87
  %96 = icmp eq i8 %9, 0
  %97 = and i1 %96, %6
  br label %98

98:                                               ; preds = %95, %87
  %99 = phi i1 [ %97, %95 ], [ true, %87 ]
  %100 = icmp sgt i32 %74, 90
  %101 = and i1 %53, %100
  %102 = or i1 %91, %101
  br i1 %102, label %103, label %109

103:                                              ; preds = %73, %98
  %104 = phi i1 [ true, %73 ], [ %99, %98 ]
  %105 = add nsw i32 %4, -1
  %106 = sext i32 %105 to i64
  %107 = sext i32 %84 to i64
  %108 = mul nsw i64 %107, %106
  br label %123

109:                                              ; preds = %98
  %110 = icmp eq i8 %9, 0
  %111 = and i1 %110, %5
  %112 = add nsw i32 %4, -1
  %113 = sext i32 %112 to i64
  %114 = sext i32 %84 to i64
  %115 = mul nsw i64 %114, %113
  %116 = or i1 %111, %99
  br i1 %116, label %123, label %117

117:                                              ; preds = %109
  %118 = sext i32 %4 to i64
  %119 = mul nsw i64 %114, %118
  %120 = getelementptr inbounds i8, i8* %86, i64 %119
  %121 = sext i32 %3 to i64
  %122 = getelementptr inbounds i8, i8* %120, i64 %121
  br label %378

123:                                              ; preds = %103, %109
  %124 = phi i64 [ %108, %103 ], [ %115, %109 ]
  %125 = phi i64 [ %107, %103 ], [ %114, %109 ]
  %126 = phi i32 [ %105, %103 ], [ %112, %109 ]
  %127 = phi i1 [ true, %103 ], [ %111, %109 ]
  %128 = phi i1 [ %104, %103 ], [ %99, %109 ]
  %129 = getelementptr inbounds i8, i8* %86, i64 %124
  %130 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 58
  %131 = load i8, i8* %130, align 2, !range !2
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %150, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 6
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %47, i64 0, i32 14
  %137 = load i8, i8* %136, align 1, !range !2
  %138 = icmp ne i8 %137, 0
  %139 = select i1 %138, i32 5, i32 4
  %140 = ashr i32 %135, %139
  %141 = select i1 %138, i32 7, i32 6
  %142 = sub nsw i32 %141, %29
  %143 = ashr i32 %126, %142
  %144 = icmp eq i32 %140, %143
  br i1 %144, label %150, label %145

145:                                              ; preds = %133
  %146 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 59
  %147 = load %"struct.std::__1::array.141"*, %"struct.std::__1::array.141"** %146, align 32
  %148 = getelementptr inbounds %"struct.std::__1::array.141", %"struct.std::__1::array.141"* %147, i64 0, i32 0, i64 %23, i32 0, i32 0, i32 0, i32 0
  %149 = load i8*, i8** %148, align 8
  br i1 %128, label %151, label %207

150:                                              ; preds = %133, %123
  br i1 %128, label %151, label %207

151:                                              ; preds = %145, %150
  %152 = phi i8* [ %149, %145 ], [ %129, %150 ]
  %153 = or i1 %5, %6
  br i1 %153, label %154, label %164

154:                                              ; preds = %151
  %155 = zext i1 %5 to i32
  %156 = sub i32 %3, %155
  %157 = sext i32 %4 to i64
  %158 = mul nsw i64 %125, %157
  %159 = getelementptr inbounds i8, i8* %86, i64 %158
  %160 = select i1 %6, i8* %152, i8* %159
  %161 = sext i32 %156 to i64
  %162 = getelementptr inbounds i8, i8* %160, i64 %161
  %163 = load i8, i8* %162, align 1
  br label %168

164:                                              ; preds = %151
  %165 = add nsw i32 %50, -1
  %166 = shl i32 1, %165
  %167 = trunc i32 %166 to i8
  br label %168

168:                                              ; preds = %164, %154
  %169 = phi i8 [ %167, %164 ], [ %163, %154 ]
  %170 = getelementptr inbounds [160 x i8], [160 x i8]* %12, i64 0, i64 15
  store i8 %169, i8* %170, align 1
  %171 = xor i1 %5, true
  %172 = or i1 %171, %6
  br i1 %172, label %182, label %173

173:                                              ; preds = %168
  %174 = sext i32 %4 to i64
  %175 = mul nsw i64 %125, %174
  %176 = getelementptr inbounds i8, i8* %86, i64 %175
  %177 = add nsw i32 %3, -1
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i8, i8* %176, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = sext i32 %75 to i64
  call void @llvm.memset.p0i8.i64(i8* align 16 %44, i8 %180, i64 %181, i1 false) #7
  br i1 %127, label %212, label %363

182:                                              ; preds = %168
  br i1 %153, label %189, label %183

183:                                              ; preds = %182
  %184 = add nsw i32 %50, -1
  %185 = shl nsw i32 -1, %184
  %186 = sext i32 %75 to i64
  %187 = trunc i32 %185 to i8
  %188 = xor i8 %187, -1
  call void @llvm.memset.p0i8.i64(i8* align 16 %44, i8 %188, i64 %186, i1 false) #7
  br i1 %127, label %225, label %363

189:                                              ; preds = %182
  %190 = sub nsw i32 %36, %3
  %191 = add nsw i32 %190, 1
  %192 = icmp slt i32 %79, %191
  %193 = select i1 %192, i32 %79, i32 %191
  %194 = sext i32 %3 to i64
  %195 = getelementptr inbounds i8, i8* %152, i64 %194
  %196 = sext i32 %193 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %44, i8* align 1 %195, i64 %196, i1 false)
  %197 = sub nsw i32 %75, %193
  %198 = icmp sgt i32 %197, 0
  br i1 %198, label %199, label %207

199:                                              ; preds = %189
  %200 = getelementptr inbounds i8, i8* %44, i64 %196
  %201 = add i32 %3, -1
  %202 = add i32 %201, %193
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i8, i8* %152, i64 %203
  %205 = load i8, i8* %204, align 1
  %206 = sext i32 %197 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %200, i8 %205, i64 %206, i1 false) #7
  br i1 %127, label %213, label %363

207:                                              ; preds = %145, %189, %150
  %208 = phi i8* [ %152, %189 ], [ %129, %150 ], [ %149, %145 ]
  %209 = phi i1 [ true, %189 ], [ false, %150 ], [ false, %145 ]
  br i1 %127, label %210, label %363

210:                                              ; preds = %207
  %211 = or i1 %5, %6
  br i1 %211, label %213, label %225

212:                                              ; preds = %173
  br i1 %153, label %213, label %225

213:                                              ; preds = %199, %210, %212
  %214 = phi i8* [ %152, %212 ], [ %208, %210 ], [ %152, %199 ]
  %215 = phi i1 [ true, %212 ], [ %209, %210 ], [ true, %199 ]
  %216 = zext i1 %5 to i32
  %217 = sub i32 %3, %216
  %218 = sext i32 %4 to i64
  %219 = mul nsw i64 %125, %218
  %220 = getelementptr inbounds i8, i8* %86, i64 %219
  %221 = select i1 %6, i8* %214, i8* %220
  %222 = sext i32 %217 to i64
  %223 = getelementptr inbounds i8, i8* %221, i64 %222
  %224 = load i8, i8* %223, align 1
  br label %231

225:                                              ; preds = %183, %210, %212
  %226 = phi i8* [ %152, %212 ], [ %208, %210 ], [ %152, %183 ]
  %227 = phi i1 [ true, %212 ], [ %209, %210 ], [ true, %183 ]
  %228 = add nsw i32 %50, -1
  %229 = shl i32 1, %228
  %230 = trunc i32 %229 to i8
  br label %231

231:                                              ; preds = %225, %213
  %232 = phi i8 [ %230, %225 ], [ %224, %213 ]
  %233 = phi i8* [ %226, %225 ], [ %214, %213 ]
  %234 = phi i1 [ %227, %225 ], [ %215, %213 ]
  %235 = phi i1 [ false, %225 ], [ true, %213 ]
  %236 = getelementptr inbounds [160 x i8], [160 x i8]* %13, i64 0, i64 15
  store i8 %232, i8* %236, align 1
  %237 = xor i1 %6, true
  %238 = or i1 %237, %5
  br i1 %238, label %244, label %239

239:                                              ; preds = %231
  %240 = sext i32 %3 to i64
  %241 = getelementptr inbounds i8, i8* %233, i64 %240
  %242 = load i8, i8* %241, align 1
  %243 = sext i32 %76 to i64
  call void @llvm.memset.p0i8.i64(i8* align 16 %45, i8 %242, i64 %243, i1 false) #7
  br label %363

244:                                              ; preds = %231
  br i1 %235, label %251, label %245

245:                                              ; preds = %244
  %246 = add nsw i32 %50, -1
  %247 = shl i32 1, %246
  %248 = sext i32 %76 to i64
  %249 = trunc i32 %247 to i8
  %250 = add i8 %249, 1
  call void @llvm.memset.p0i8.i64(i8* align 16 %45, i8 %250, i64 %248, i1 false) #7
  br label %363

251:                                              ; preds = %244
  %252 = sub nsw i32 %41, %4
  %253 = add nsw i32 %252, 1
  %254 = icmp slt i32 %82, %253
  %255 = select i1 %254, i32 %82, i32 %253
  %256 = icmp sgt i32 %255, 0
  br i1 %256, label %257, label %338

257:                                              ; preds = %251
  %258 = add nsw i32 %3, -1
  %259 = sext i32 %258 to i64
  %260 = sext i32 %4 to i64
  %261 = sext i32 %255 to i64
  %262 = getelementptr inbounds i8, i8* %86, i64 %259
  %263 = icmp ugt i32 %255, 31
  %264 = icmp eq i64 %125, 1
  %265 = and i1 %263, %264
  br i1 %265, label %266, label %278

266:                                              ; preds = %257
  %267 = getelementptr inbounds [160 x i8], [160 x i8]* %13, i64 0, i64 16
  %268 = add nsw i64 %261, 16
  %269 = getelementptr [160 x i8], [160 x i8]* %13, i64 0, i64 %268
  %270 = add nsw i64 %260, %259
  %271 = getelementptr i8, i8* %86, i64 %270
  %272 = add nsw i64 %260, %261
  %273 = add nsw i64 %272, %259
  %274 = getelementptr i8, i8* %86, i64 %273
  %275 = icmp ult i8* %267, %274
  %276 = icmp ult i8* %271, %269
  %277 = and i1 %275, %276
  br i1 %277, label %278, label %280

278:                                              ; preds = %257, %336, %266
  %279 = phi i64 [ 0, %266 ], [ 0, %257 ], [ %281, %336 ]
  br label %341

280:                                              ; preds = %266
  %281 = and i64 %261, -32
  %282 = add nsw i64 %281, -32
  %283 = lshr exact i64 %282, 5
  %284 = add nuw nsw i64 %283, 1
  %285 = and i64 %284, 1
  %286 = icmp eq i64 %282, 0
  br i1 %286, label %320, label %287

287:                                              ; preds = %280
  %288 = sub nuw nsw i64 %284, %285
  br label %289

289:                                              ; preds = %289, %287
  %290 = phi i64 [ 0, %287 ], [ %317, %289 ]
  %291 = phi i64 [ %288, %287 ], [ %318, %289 ]
  %292 = add nsw i64 %290, %260
  %293 = mul nsw i64 %125, %292
  %294 = getelementptr inbounds i8, i8* %262, i64 %293
  %295 = bitcast i8* %294 to <16 x i8>*
  %296 = load <16 x i8>, <16 x i8>* %295, align 1, !alias.scope !3
  %297 = getelementptr inbounds i8, i8* %294, i64 16
  %298 = bitcast i8* %297 to <16 x i8>*
  %299 = load <16 x i8>, <16 x i8>* %298, align 1, !alias.scope !3
  %300 = getelementptr inbounds i8, i8* %45, i64 %290
  %301 = bitcast i8* %300 to <16 x i8>*
  store <16 x i8> %296, <16 x i8>* %301, align 16, !alias.scope !6, !noalias !3
  %302 = getelementptr inbounds i8, i8* %300, i64 16
  %303 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %299, <16 x i8>* %303, align 16, !alias.scope !6, !noalias !3
  %304 = or i64 %290, 32
  %305 = add nsw i64 %304, %260
  %306 = mul nsw i64 %125, %305
  %307 = getelementptr inbounds i8, i8* %262, i64 %306
  %308 = bitcast i8* %307 to <16 x i8>*
  %309 = load <16 x i8>, <16 x i8>* %308, align 1, !alias.scope !3
  %310 = getelementptr inbounds i8, i8* %307, i64 16
  %311 = bitcast i8* %310 to <16 x i8>*
  %312 = load <16 x i8>, <16 x i8>* %311, align 1, !alias.scope !3
  %313 = getelementptr inbounds i8, i8* %45, i64 %304
  %314 = bitcast i8* %313 to <16 x i8>*
  store <16 x i8> %309, <16 x i8>* %314, align 16, !alias.scope !6, !noalias !3
  %315 = getelementptr inbounds i8, i8* %313, i64 16
  %316 = bitcast i8* %315 to <16 x i8>*
  store <16 x i8> %312, <16 x i8>* %316, align 16, !alias.scope !6, !noalias !3
  %317 = add i64 %290, 64
  %318 = add i64 %291, -2
  %319 = icmp eq i64 %318, 0
  br i1 %319, label %320, label %289, !llvm.loop !8

320:                                              ; preds = %289, %280
  %321 = phi i64 [ 0, %280 ], [ %317, %289 ]
  %322 = icmp eq i64 %285, 0
  br i1 %322, label %336, label %323

323:                                              ; preds = %320
  %324 = add nsw i64 %321, %260
  %325 = mul nsw i64 %125, %324
  %326 = getelementptr inbounds i8, i8* %262, i64 %325
  %327 = bitcast i8* %326 to <16 x i8>*
  %328 = load <16 x i8>, <16 x i8>* %327, align 1, !alias.scope !3
  %329 = getelementptr inbounds i8, i8* %326, i64 16
  %330 = bitcast i8* %329 to <16 x i8>*
  %331 = load <16 x i8>, <16 x i8>* %330, align 1, !alias.scope !3
  %332 = getelementptr inbounds i8, i8* %45, i64 %321
  %333 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %328, <16 x i8>* %333, align 16, !alias.scope !6, !noalias !3
  %334 = getelementptr inbounds i8, i8* %332, i64 16
  %335 = bitcast i8* %334 to <16 x i8>*
  store <16 x i8> %331, <16 x i8>* %335, align 16, !alias.scope !6, !noalias !3
  br label %336

336:                                              ; preds = %320, %323
  %337 = icmp eq i64 %281, %261
  br i1 %337, label %338, label %278

338:                                              ; preds = %341, %336, %251
  %339 = sub nsw i32 %76, %255
  %340 = icmp sgt i32 %339, 0
  br i1 %340, label %350, label %363

341:                                              ; preds = %278, %341
  %342 = phi i64 [ %348, %341 ], [ %279, %278 ]
  %343 = add nsw i64 %342, %260
  %344 = mul nsw i64 %125, %343
  %345 = getelementptr inbounds i8, i8* %262, i64 %344
  %346 = load i8, i8* %345, align 1
  %347 = getelementptr inbounds i8, i8* %45, i64 %342
  store i8 %346, i8* %347, align 1
  %348 = add nuw nsw i64 %342, 1
  %349 = icmp slt i64 %348, %261
  br i1 %349, label %341, label %338, !llvm.loop !10

350:                                              ; preds = %338
  %351 = sext i32 %255 to i64
  %352 = getelementptr inbounds i8, i8* %45, i64 %351
  %353 = add i32 %4, -1
  %354 = add i32 %353, %255
  %355 = sext i32 %354 to i64
  %356 = mul nsw i64 %125, %355
  %357 = getelementptr inbounds i8, i8* %86, i64 %356
  %358 = add nsw i32 %3, -1
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds i8, i8* %357, i64 %359
  %361 = load i8, i8* %360, align 1
  %362 = sext i32 %339 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %352, i8 %361, i64 %362, i1 false) #7
  br label %363

363:                                              ; preds = %183, %173, %199, %338, %350, %239, %245, %207
  %364 = phi i1 [ true, %338 ], [ true, %350 ], [ true, %239 ], [ true, %245 ], [ false, %207 ], [ false, %199 ], [ false, %173 ], [ false, %183 ]
  %365 = phi i1 [ %234, %338 ], [ %234, %350 ], [ %234, %239 ], [ %234, %245 ], [ %209, %207 ], [ true, %199 ], [ true, %173 ], [ true, %183 ]
  %366 = sext i32 %4 to i64
  %367 = mul nsw i64 %125, %366
  %368 = getelementptr inbounds i8, i8* %86, i64 %367
  %369 = sext i32 %3 to i64
  %370 = getelementptr inbounds i8, i8* %368, i64 %369
  br i1 %62, label %371, label %378

371:                                              ; preds = %363
  %372 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %373 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %372, align 16
  %374 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %373, i64 0, i32 12
  %375 = load void (i8*, i64, i8*, i8*, i8, i32, i32)*, void (i8*, i64, i8*, i8*, i8, i32, i32)** %374, align 8
  %376 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %57, i64 0, i32 1
  %377 = load i8, i8* %376, align 1
  call void %375(i8* %370, i64 %125, i8* %44, i8* %45, i8 zeroext %377, i32 %18, i32 %22) #7
  br label %400

378:                                              ; preds = %117, %363
  %379 = phi i8* [ %122, %117 ], [ %370, %363 ]
  %380 = phi i64 [ %114, %117 ], [ %125, %363 ]
  %381 = phi i1 [ false, %117 ], [ %365, %363 ]
  %382 = phi i1 [ false, %117 ], [ %364, %363 ]
  br i1 %53, label %383, label %384

383:                                              ; preds = %378
  call void @_ZN7libgav14Tile21DirectionalPredictionIhEEvRKNS0_5BlockENS_5PlaneEiibbbbiiiiiNS_13TransformSizeEPT_S8_(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %2, i32 %3, i32 %4, i1 zeroext %5, i1 zeroext %6, i1 zeroext %382, i1 zeroext %381, i32 %74, i32 %18, i32 %22, i32 %36, i32 %41, i8 zeroext %10, i8* %44, i8* %45)
  br label %400

384:                                              ; preds = %378
  switch i8 %9, label %393 [
    i8 0, label %385
    i8 12, label %394
    i8 9, label %390
    i8 10, label %391
    i8 11, label %392
  ]

385:                                              ; preds = %384
  %386 = and i1 %5, %6
  br i1 %386, label %394, label %387

387:                                              ; preds = %385
  %388 = zext i1 %6 to i64
  %389 = select i1 %5, i64 2, i64 %388
  br label %394

390:                                              ; preds = %384
  br label %394

391:                                              ; preds = %384
  br label %394

392:                                              ; preds = %384
  br label %394

393:                                              ; preds = %384
  br label %394

394:                                              ; preds = %384, %385, %390, %391, %392, %393, %387
  %395 = phi i64 [ %389, %387 ], [ 10, %393 ], [ 9, %392 ], [ 8, %391 ], [ 7, %390 ], [ 3, %385 ], [ 6, %384 ]
  %396 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %397 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %396, align 16
  %398 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %397, i64 0, i32 16, i64 %14, i64 %395
  %399 = load void (i8*, i64, i8*, i8*)*, void (i8*, i64, i8*, i8*)** %398, align 8
  call void %399(i8* %379, i64 %380, i8* %44, i8* %45) #7
  br label %400

400:                                              ; preds = %383, %394, %371
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %43) #7
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %42) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav14Tile21DirectionalPredictionIhEEvRKNS0_5BlockENS_5PlaneEiibbbbiiiiiNS_13TransformSizeEPT_S8_(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* dereferenceable(88), i8 zeroext, i32, i32, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, i32, i32, i32, i32, i32, i8 zeroext, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %18 = zext i8 %2 to i64
  %19 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %18, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %18, i32 2
  %22 = load i8*, i8** %21, align 8
  %23 = sext i32 %4 to i64
  %24 = sext i32 %20 to i64
  %25 = mul nsw i64 %24, %23
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = sext i32 %3 to i64
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  switch i32 %9, label %41 [
    i32 90, label %29
    i32 180, label %35
  ]

29:                                               ; preds = %17
  %30 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %31 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %30, align 16
  %32 = zext i8 %14 to i64
  %33 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %31, i64 0, i32 16, i64 %32, i64 4
  %34 = load void (i8*, i64, i8*, i8*)*, void (i8*, i64, i8*, i8*)** %33, align 8
  tail call void %34(i8* %28, i64 %24, i8* %15, i8* %16) #7
  br label %287

35:                                               ; preds = %17
  %36 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %37 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %36, align 16
  %38 = zext i8 %14 to i64
  %39 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %37, i64 0, i32 16, i64 %38, i64 5
  %40 = load void (i8*, i64, i8*, i8*)*, void (i8*, i64, i8*, i8*)** %39, align 8
  tail call void %40(i8* %28, i64 %24, i8* %15, i8* %16) #7
  br label %287

41:                                               ; preds = %17
  %42 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %43 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %42, align 32
  %44 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %43, i64 0, i32 16
  %45 = load i8, i8* %44, align 1, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %239, label %47

47:                                               ; preds = %41
  %48 = tail call i32 @_ZNK7libgav14Tile22GetIntraEdgeFilterTypeERKNS0_5BlockENS_5PlaneE(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %2)
  %49 = add i32 %9, -91
  %50 = icmp ult i32 %49, 89
  %51 = add nsw i32 %11, %10
  %52 = icmp sgt i32 %51, 23
  %53 = and i1 %50, %52
  br i1 %53, label %54, label %70

54:                                               ; preds = %47
  %55 = load i8, i8* %16, align 1
  %56 = zext i8 %55 to i32
  %57 = getelementptr inbounds i8, i8* %15, i64 -1
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = mul nuw nsw i32 %59, 6
  %61 = load i8, i8* %15, align 1
  %62 = zext i8 %61 to i32
  %63 = add nuw nsw i32 %62, %56
  %64 = mul nuw nsw i32 %63, 5
  %65 = add nuw nsw i32 %60, 8
  %66 = add nuw nsw i32 %65, %64
  %67 = lshr i32 %66, 4
  %68 = trunc i32 %67 to i8
  store i8 %68, i8* %57, align 1
  %69 = getelementptr inbounds i8, i8* %16, i64 -1
  store i8 %68, i8* %69, align 1
  br label %70

70:                                               ; preds = %54, %47
  %71 = xor i1 %6, true
  %72 = xor i1 %8, true
  %73 = or i1 %71, %72
  br i1 %73, label %133, label %74

74:                                               ; preds = %70
  %75 = add nsw i32 %9, -90
  %76 = icmp slt i32 %75, 0
  %77 = sub i32 90, %9
  %78 = select i1 %76, i32 %77, i32 %75
  %79 = icmp eq i32 %48, 0
  %80 = icmp slt i32 %51, 9
  br i1 %79, label %81, label %103

81:                                               ; preds = %74
  br i1 %80, label %82, label %84

82:                                               ; preds = %81
  %83 = icmp sgt i32 %78, 55
  br i1 %83, label %118, label %133

84:                                               ; preds = %81
  %85 = icmp slt i32 %51, 17
  br i1 %85, label %86, label %88

86:                                               ; preds = %84
  %87 = icmp sgt i32 %78, 39
  br i1 %87, label %118, label %133

88:                                               ; preds = %84
  %89 = icmp slt i32 %51, 25
  br i1 %89, label %90, label %96

90:                                               ; preds = %88
  %91 = icmp sgt i32 %78, 31
  br i1 %91, label %118, label %92

92:                                               ; preds = %90
  %93 = icmp sgt i32 %78, 15
  br i1 %93, label %118, label %94

94:                                               ; preds = %92
  %95 = icmp sgt i32 %78, 7
  br i1 %95, label %118, label %133

96:                                               ; preds = %88
  %97 = icmp sgt i32 %51, 32
  %98 = icmp sgt i32 %78, 31
  %99 = or i1 %97, %98
  br i1 %99, label %118, label %100

100:                                              ; preds = %96
  %101 = icmp sgt i32 %78, 3
  %102 = select i1 %101, i32 2, i32 1
  br label %118

103:                                              ; preds = %74
  br i1 %80, label %104, label %108

104:                                              ; preds = %103
  %105 = icmp sgt i32 %78, 63
  br i1 %105, label %118, label %106

106:                                              ; preds = %104
  %107 = icmp sgt i32 %78, 39
  br i1 %107, label %118, label %133

108:                                              ; preds = %103
  %109 = icmp slt i32 %51, 17
  br i1 %109, label %110, label %114

110:                                              ; preds = %108
  %111 = icmp sgt i32 %78, 47
  br i1 %111, label %118, label %112

112:                                              ; preds = %110
  %113 = icmp sgt i32 %78, 19
  br i1 %113, label %118, label %133

114:                                              ; preds = %108
  %115 = icmp sgt i32 %51, 24
  %116 = icmp sgt i32 %78, 3
  %117 = or i1 %115, %116
  br i1 %117, label %118, label %133

118:                                              ; preds = %82, %86, %90, %92, %94, %100, %96, %104, %106, %110, %112, %114
  %119 = phi i32 [ 3, %114 ], [ 1, %112 ], [ 2, %110 ], [ 1, %106 ], [ 2, %104 ], [ 3, %96 ], [ %102, %100 ], [ 1, %94 ], [ 2, %92 ], [ 3, %90 ], [ 1, %86 ], [ 1, %82 ]
  %120 = sub nsw i32 %12, %3
  %121 = add nsw i32 %120, 1
  %122 = icmp slt i32 %121, %10
  %123 = select i1 %122, i32 %121, i32 %10
  %124 = icmp slt i32 %9, 90
  %125 = add i32 %11, 1
  %126 = select i1 %124, i32 %125, i32 1
  %127 = add i32 %126, %123
  %128 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %129 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %128, align 16
  %130 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %129, i64 0, i32 14
  %131 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %130, align 8
  %132 = getelementptr inbounds i8, i8* %15, i64 -1
  tail call void %131(i8* %132, i32 %127, i32 %119) #7
  br label %133

133:                                              ; preds = %114, %112, %106, %94, %86, %82, %118, %70
  %134 = xor i1 %5, true
  %135 = xor i1 %7, true
  %136 = or i1 %134, %135
  br i1 %136, label %196, label %137

137:                                              ; preds = %133
  %138 = add nsw i32 %9, -180
  %139 = icmp slt i32 %138, 0
  %140 = sub i32 180, %9
  %141 = select i1 %139, i32 %140, i32 %138
  %142 = icmp eq i32 %48, 0
  %143 = icmp slt i32 %51, 9
  br i1 %142, label %144, label %166

144:                                              ; preds = %137
  br i1 %143, label %145, label %147

145:                                              ; preds = %144
  %146 = icmp sgt i32 %141, 55
  br i1 %146, label %181, label %196

147:                                              ; preds = %144
  %148 = icmp slt i32 %51, 17
  br i1 %148, label %149, label %151

149:                                              ; preds = %147
  %150 = icmp sgt i32 %141, 39
  br i1 %150, label %181, label %196

151:                                              ; preds = %147
  %152 = icmp slt i32 %51, 25
  br i1 %152, label %153, label %159

153:                                              ; preds = %151
  %154 = icmp sgt i32 %141, 31
  br i1 %154, label %181, label %155

155:                                              ; preds = %153
  %156 = icmp sgt i32 %141, 15
  br i1 %156, label %181, label %157

157:                                              ; preds = %155
  %158 = icmp sgt i32 %141, 7
  br i1 %158, label %181, label %196

159:                                              ; preds = %151
  %160 = icmp sgt i32 %51, 32
  %161 = icmp sgt i32 %141, 31
  %162 = or i1 %160, %161
  br i1 %162, label %181, label %163

163:                                              ; preds = %159
  %164 = icmp sgt i32 %141, 3
  %165 = select i1 %164, i32 2, i32 1
  br label %181

166:                                              ; preds = %137
  br i1 %143, label %167, label %171

167:                                              ; preds = %166
  %168 = icmp sgt i32 %141, 63
  br i1 %168, label %181, label %169

169:                                              ; preds = %167
  %170 = icmp sgt i32 %141, 39
  br i1 %170, label %181, label %196

171:                                              ; preds = %166
  %172 = icmp slt i32 %51, 17
  br i1 %172, label %173, label %177

173:                                              ; preds = %171
  %174 = icmp sgt i32 %141, 47
  br i1 %174, label %181, label %175

175:                                              ; preds = %173
  %176 = icmp sgt i32 %141, 19
  br i1 %176, label %181, label %196

177:                                              ; preds = %171
  %178 = icmp sgt i32 %51, 24
  %179 = icmp sgt i32 %141, 3
  %180 = or i1 %178, %179
  br i1 %180, label %181, label %196

181:                                              ; preds = %145, %149, %153, %155, %157, %163, %159, %167, %169, %173, %175, %177
  %182 = phi i32 [ 3, %177 ], [ 1, %175 ], [ 2, %173 ], [ 1, %169 ], [ 2, %167 ], [ 3, %159 ], [ %165, %163 ], [ 1, %157 ], [ 2, %155 ], [ 3, %153 ], [ 1, %149 ], [ 1, %145 ]
  %183 = sub nsw i32 %13, %4
  %184 = add nsw i32 %183, 1
  %185 = icmp slt i32 %184, %11
  %186 = select i1 %185, i32 %184, i32 %11
  %187 = icmp sgt i32 %9, 180
  %188 = add i32 %10, 1
  %189 = select i1 %187, i32 %188, i32 1
  %190 = add i32 %189, %186
  %191 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %192 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %191, align 16
  %193 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %192, i64 0, i32 14
  %194 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %193, align 8
  %195 = getelementptr inbounds i8, i8* %16, i64 -1
  tail call void %194(i8* %195, i32 %190, i32 %182) #7
  br label %196

196:                                              ; preds = %177, %175, %169, %157, %149, %145, %181, %133
  %197 = add nsw i32 %9, -90
  %198 = icmp slt i32 %197, 0
  %199 = sub i32 90, %9
  %200 = select i1 %198, i32 %199, i32 %197
  %201 = icmp sgt i32 %200, 39
  br i1 %201, label %217, label %202

202:                                              ; preds = %196
  %203 = icmp eq i32 %48, 1
  %204 = icmp slt i32 %51, 9
  %205 = icmp slt i32 %51, 17
  %206 = select i1 %203, i1 %204, i1 %205
  %207 = xor i1 %206, true
  %208 = or i1 %72, %207
  br i1 %208, label %217, label %209

209:                                              ; preds = %202
  %210 = icmp slt i32 %9, 90
  %211 = select i1 %210, i32 %11, i32 0
  %212 = add nsw i32 %211, %10
  %213 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %214 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %213, align 16
  %215 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %214, i64 0, i32 15
  %216 = load void (i8*, i32)*, void (i8*, i32)** %215, align 8
  tail call void %216(i8* %15, i32 %212) #7
  br label %217

217:                                              ; preds = %196, %202, %209
  %218 = phi i1 [ %206, %202 ], [ %206, %209 ], [ false, %196 ]
  %219 = add nsw i32 %9, -180
  %220 = icmp slt i32 %219, 0
  %221 = sub i32 180, %9
  %222 = select i1 %220, i32 %221, i32 %219
  %223 = icmp sgt i32 %222, 39
  br i1 %223, label %239, label %224

224:                                              ; preds = %217
  %225 = icmp eq i32 %48, 1
  %226 = icmp slt i32 %51, 9
  %227 = icmp slt i32 %51, 17
  %228 = select i1 %225, i1 %226, i1 %227
  %229 = xor i1 %228, true
  %230 = or i1 %135, %229
  br i1 %230, label %239, label %231

231:                                              ; preds = %224
  %232 = icmp sgt i32 %9, 180
  %233 = select i1 %232, i32 %10, i32 0
  %234 = add nsw i32 %233, %11
  %235 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %236 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %235, align 16
  %237 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %236, i64 0, i32 15
  %238 = load void (i8*, i32)*, void (i8*, i32)** %237, align 8
  tail call void %238(i8* %16, i32 %234) #7
  br label %239

239:                                              ; preds = %217, %231, %224, %41
  %240 = phi i1 [ false, %41 ], [ %228, %224 ], [ %228, %231 ], [ false, %217 ]
  %241 = phi i1 [ false, %41 ], [ %218, %224 ], [ %218, %231 ], [ %218, %217 ]
  %242 = icmp slt i32 %9, 90
  br i1 %242, label %243, label %254

243:                                              ; preds = %239
  %244 = ashr i32 %9, 1
  %245 = add nsw i32 %244, -1
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds [44 x i16], [44 x i16]* @_ZN7libgav136kDirectionalIntraPredictorDerivativeE, i64 0, i64 %246
  %248 = load i16, i16* %247, align 2
  %249 = sext i16 %248 to i32
  %250 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %251 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %250, align 16
  %252 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %251, i64 0, i32 7
  %253 = load void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)** %252, align 8
  tail call void %253(i8* %28, i64 %24, i8* %15, i32 %10, i32 %11, i32 %249, i1 zeroext %241) #7
  br label %287

254:                                              ; preds = %239
  %255 = icmp slt i32 %9, 180
  br i1 %255, label %256, label %275

256:                                              ; preds = %254
  %257 = sub nuw nsw i32 180, %9
  %258 = ashr i32 %257, 1
  %259 = add nsw i32 %258, -1
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds [44 x i16], [44 x i16]* @_ZN7libgav136kDirectionalIntraPredictorDerivativeE, i64 0, i64 %260
  %262 = load i16, i16* %261, align 2
  %263 = sext i16 %262 to i32
  %264 = add nsw i32 %9, -90
  %265 = ashr i32 %264, 1
  %266 = add nsw i32 %265, -1
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds [44 x i16], [44 x i16]* @_ZN7libgav136kDirectionalIntraPredictorDerivativeE, i64 0, i64 %267
  %269 = load i16, i16* %268, align 2
  %270 = sext i16 %269 to i32
  %271 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %272 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %271, align 16
  %273 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %272, i64 0, i32 8
  %274 = load void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)** %273, align 8
  tail call void %274(i8* %28, i64 %24, i8* %15, i8* %16, i32 %10, i32 %11, i32 %263, i32 %270, i1 zeroext %241, i1 zeroext %240) #7
  br label %287

275:                                              ; preds = %254
  %276 = sub nsw i32 270, %9
  %277 = ashr i32 %276, 1
  %278 = add nsw i32 %277, -1
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds [44 x i16], [44 x i16]* @_ZN7libgav136kDirectionalIntraPredictorDerivativeE, i64 0, i64 %279
  %281 = load i16, i16* %280, align 2
  %282 = sext i16 %281 to i32
  %283 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %284 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %283, align 16
  %285 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %284, i64 0, i32 9
  %286 = load void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)** %285, align 8
  tail call void %286(i8* %28, i64 %24, i8* %16, i32 %10, i32 %11, i32 %282, i1 zeroext %240) #7
  br label %287

287:                                              ; preds = %243, %275, %256, %35, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN7libgav14Tile15IntraPredictionItEEvRKNS0_5BlockENS_5PlaneEiibbbbNS_14PredictionModeENS_13TransformSizeE(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* dereferenceable(88), i8 zeroext, i32, i32, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %12 = alloca [160 x i16], align 32
  %13 = alloca [160 x i16], align 32
  %14 = zext i8 %10 to i64
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl i32 1, %17
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %14
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = shl i32 1, %21
  %23 = zext i8 %2 to i64
  %24 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %23
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i32
  %30 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %31 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %30, align 8
  %32 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %31, i64 0, i32 6
  %33 = load i32, i32* %32, align 8
  %34 = shl i32 %33, 2
  %35 = ashr i32 %34, %26
  %36 = add nsw i32 %35, -1
  %37 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %31, i64 0, i32 7
  %38 = load i32, i32* %37, align 4
  %39 = shl i32 %38, 2
  %40 = ashr i32 %39, %29
  %41 = add nsw i32 %40, -1
  %42 = bitcast [160 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 320, i8* nonnull %42) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %42, i8 -86, i64 320, i1 false)
  %43 = bitcast [160 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 320, i8* nonnull %43) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %43, i8 -86, i64 320, i1 false)
  %44 = getelementptr inbounds [160 x i16], [160 x i16]* %12, i64 0, i64 16
  %45 = getelementptr inbounds [160 x i16], [160 x i16]* %13, i64 0, i64 16
  %46 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %47 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %46, align 32
  %48 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %47, i64 0, i32 33, i32 0
  %49 = load i8, i8* %48, align 4
  %50 = sext i8 %49 to i32
  %51 = add nsw i32 %22, %18
  %52 = add i8 %9, -1
  %53 = icmp ult i8 %52, 8
  %54 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %55 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %54, align 8
  %56 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %55, i64 0, i32 18, i32 0, i32 0, i32 0
  %57 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %56, align 8
  %58 = icmp eq i8 %2, 0
  %59 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %57, i64 0, i32 0
  %60 = load i8, i8* %59, align 8
  %61 = icmp ne i8 %60, 0
  %62 = and i1 %58, %61
  br i1 %53, label %63, label %73

63:                                               ; preds = %11
  %64 = zext i8 %9 to i64
  %65 = getelementptr inbounds [14 x i32], [14 x i32]* @_ZN7libgav112_GLOBAL__N_122kPredictionModeToAngleE, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp ne i8 %2, 0
  %68 = zext i1 %67 to i64
  %69 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %57, i64 0, i32 2, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = mul nsw i32 %70, 3
  %72 = add nsw i32 %71, %66
  br label %73

73:                                               ; preds = %11, %63
  %74 = phi i32 [ %72, %63 ], [ 0, %11 ]
  %75 = select i1 %53, i32 %51, i32 %18
  %76 = select i1 %53, i32 %51, i32 %22
  %77 = select i1 %7, i32 2, i32 1
  %78 = shl i32 %77, %17
  %79 = select i1 %53, i32 %78, i32 %18
  %80 = select i1 %8, i32 2, i32 1
  %81 = shl i32 %80, %21
  %82 = select i1 %53, i32 %81, i32 %22
  %83 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %23, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = ashr i32 %84, 1
  %86 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %23, i32 2
  %87 = bitcast i8** %86 to i16**
  %88 = load i16*, i16** %87, align 8
  br i1 %62, label %105, label %89

89:                                               ; preds = %73
  %90 = zext i8 %9 to i32
  %91 = shl i32 1, %90
  %92 = and i32 %91, 7680
  %93 = icmp ne i32 %92, 0
  %94 = icmp slt i32 %74, 180
  %95 = and i1 %53, %94
  %96 = or i1 %93, %95
  br i1 %96, label %100, label %97

97:                                               ; preds = %89
  %98 = icmp eq i8 %9, 0
  %99 = and i1 %98, %6
  br label %100

100:                                              ; preds = %97, %89
  %101 = phi i1 [ %99, %97 ], [ true, %89 ]
  %102 = icmp sgt i32 %74, 90
  %103 = and i1 %53, %102
  %104 = or i1 %93, %103
  br i1 %104, label %105, label %111

105:                                              ; preds = %73, %100
  %106 = phi i1 [ true, %73 ], [ %101, %100 ]
  %107 = add nsw i32 %4, -1
  %108 = sext i32 %107 to i64
  %109 = sext i32 %85 to i64
  %110 = mul nsw i64 %109, %108
  br label %126

111:                                              ; preds = %100
  %112 = icmp eq i8 %9, 0
  %113 = and i1 %112, %5
  %114 = add nsw i32 %4, -1
  %115 = sext i32 %114 to i64
  %116 = sext i32 %85 to i64
  %117 = mul nsw i64 %116, %115
  %118 = or i1 %113, %101
  br i1 %118, label %126, label %119

119:                                              ; preds = %111
  %120 = sext i32 %4 to i64
  %121 = mul nsw i64 %116, %120
  %122 = getelementptr inbounds i16, i16* %88, i64 %121
  %123 = sext i32 %3 to i64
  %124 = getelementptr inbounds i16, i16* %122, i64 %123
  %125 = sext i32 %84 to i64
  br label %874

126:                                              ; preds = %105, %111
  %127 = phi i64 [ %110, %105 ], [ %117, %111 ]
  %128 = phi i64 [ %109, %105 ], [ %116, %111 ]
  %129 = phi i32 [ %107, %105 ], [ %114, %111 ]
  %130 = phi i1 [ true, %105 ], [ %113, %111 ]
  %131 = phi i1 [ %106, %105 ], [ %101, %111 ]
  %132 = getelementptr inbounds i16, i16* %88, i64 %127
  %133 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 58
  %134 = load i8, i8* %133, align 2, !range !2
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %154, label %136

136:                                              ; preds = %126
  %137 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 6
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %47, i64 0, i32 14
  %140 = load i8, i8* %139, align 1, !range !2
  %141 = icmp ne i8 %140, 0
  %142 = select i1 %141, i32 5, i32 4
  %143 = ashr i32 %138, %142
  %144 = select i1 %141, i32 7, i32 6
  %145 = sub nsw i32 %144, %29
  %146 = ashr i32 %129, %145
  %147 = icmp eq i32 %143, %146
  br i1 %147, label %154, label %148

148:                                              ; preds = %136
  %149 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 59
  %150 = load %"struct.std::__1::array.141"*, %"struct.std::__1::array.141"** %149, align 32
  %151 = getelementptr inbounds %"struct.std::__1::array.141", %"struct.std::__1::array.141"* %150, i64 0, i32 0, i64 %23, i32 0, i32 0, i32 0, i32 0
  %152 = bitcast i8** %151 to i16**
  %153 = load i16*, i16** %152, align 8
  br i1 %131, label %155, label %461

154:                                              ; preds = %136, %126
  br i1 %131, label %155, label %461

155:                                              ; preds = %148, %154
  %156 = phi i16* [ %153, %148 ], [ %132, %154 ]
  %157 = or i1 %5, %6
  br i1 %157, label %158, label %168

158:                                              ; preds = %155
  %159 = zext i1 %5 to i32
  %160 = sub i32 %3, %159
  %161 = sext i32 %4 to i64
  %162 = mul nsw i64 %128, %161
  %163 = getelementptr inbounds i16, i16* %88, i64 %162
  %164 = select i1 %6, i16* %156, i16* %163
  %165 = sext i32 %160 to i64
  %166 = getelementptr inbounds i16, i16* %164, i64 %165
  %167 = load i16, i16* %166, align 2
  br label %172

168:                                              ; preds = %155
  %169 = add nsw i32 %50, -1
  %170 = shl i32 1, %169
  %171 = trunc i32 %170 to i16
  br label %172

172:                                              ; preds = %168, %158
  %173 = phi i16 [ %171, %168 ], [ %167, %158 ]
  %174 = getelementptr inbounds [160 x i16], [160 x i16]* %12, i64 0, i64 15
  store i16 %173, i16* %174, align 2
  %175 = xor i1 %5, true
  %176 = or i1 %175, %6
  br i1 %176, label %269, label %177

177:                                              ; preds = %172
  %178 = sext i32 %4 to i64
  %179 = mul nsw i64 %128, %178
  %180 = getelementptr inbounds i16, i16* %88, i64 %179
  %181 = add nsw i32 %3, -1
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i16, i16* %180, i64 %182
  %184 = load i16, i16* %183, align 2
  %185 = sext i32 %75 to i64
  %186 = icmp eq i32 %75, 0
  br i1 %186, label %461, label %187

187:                                              ; preds = %177
  %188 = icmp ult i32 %75, 16
  br i1 %188, label %262, label %189

189:                                              ; preds = %187
  %190 = and i64 %185, -16
  %191 = insertelement <8 x i16> undef, i16 %184, i32 0
  %192 = shufflevector <8 x i16> %191, <8 x i16> undef, <8 x i32> zeroinitializer
  %193 = insertelement <8 x i16> undef, i16 %184, i32 0
  %194 = shufflevector <8 x i16> %193, <8 x i16> undef, <8 x i32> zeroinitializer
  %195 = add nsw i64 %190, -16
  %196 = lshr exact i64 %195, 4
  %197 = add nuw nsw i64 %196, 1
  %198 = and i64 %197, 7
  %199 = icmp ult i64 %195, 112
  br i1 %199, label %247, label %200

200:                                              ; preds = %189
  %201 = sub nsw i64 %197, %198
  br label %202

202:                                              ; preds = %202, %200
  %203 = phi i64 [ 0, %200 ], [ %244, %202 ]
  %204 = phi i64 [ %201, %200 ], [ %245, %202 ]
  %205 = getelementptr inbounds i16, i16* %44, i64 %203
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %206, align 32
  %207 = getelementptr inbounds i16, i16* %205, i64 8
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %208, align 16
  %209 = or i64 %203, 16
  %210 = getelementptr inbounds i16, i16* %44, i64 %209
  %211 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %211, align 32
  %212 = getelementptr inbounds i16, i16* %210, i64 8
  %213 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %213, align 16
  %214 = or i64 %203, 32
  %215 = getelementptr inbounds i16, i16* %44, i64 %214
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %216, align 32
  %217 = getelementptr inbounds i16, i16* %215, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %218, align 16
  %219 = or i64 %203, 48
  %220 = getelementptr inbounds i16, i16* %44, i64 %219
  %221 = bitcast i16* %220 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %221, align 32
  %222 = getelementptr inbounds i16, i16* %220, i64 8
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %223, align 16
  %224 = or i64 %203, 64
  %225 = getelementptr inbounds i16, i16* %44, i64 %224
  %226 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %226, align 32
  %227 = getelementptr inbounds i16, i16* %225, i64 8
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %228, align 16
  %229 = or i64 %203, 80
  %230 = getelementptr inbounds i16, i16* %44, i64 %229
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %231, align 32
  %232 = getelementptr inbounds i16, i16* %230, i64 8
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %233, align 16
  %234 = or i64 %203, 96
  %235 = getelementptr inbounds i16, i16* %44, i64 %234
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %236, align 32
  %237 = getelementptr inbounds i16, i16* %235, i64 8
  %238 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %238, align 16
  %239 = or i64 %203, 112
  %240 = getelementptr inbounds i16, i16* %44, i64 %239
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %241, align 32
  %242 = getelementptr inbounds i16, i16* %240, i64 8
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %243, align 16
  %244 = add i64 %203, 128
  %245 = add i64 %204, -8
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %247, label %202, !llvm.loop !11

247:                                              ; preds = %202, %189
  %248 = phi i64 [ 0, %189 ], [ %244, %202 ]
  %249 = icmp eq i64 %198, 0
  br i1 %249, label %260, label %250

250:                                              ; preds = %247, %250
  %251 = phi i64 [ %257, %250 ], [ %248, %247 ]
  %252 = phi i64 [ %258, %250 ], [ %198, %247 ]
  %253 = getelementptr inbounds i16, i16* %44, i64 %251
  %254 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %254, align 32
  %255 = getelementptr inbounds i16, i16* %253, i64 8
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %256, align 16
  %257 = add i64 %251, 16
  %258 = add i64 %252, -1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %250, !llvm.loop !12

260:                                              ; preds = %250, %247
  %261 = icmp eq i64 %190, %185
  br i1 %261, label %461, label %262

262:                                              ; preds = %260, %187
  %263 = phi i64 [ 0, %187 ], [ %190, %260 ]
  br label %264

264:                                              ; preds = %262, %264
  %265 = phi i64 [ %267, %264 ], [ %263, %262 ]
  %266 = getelementptr inbounds i16, i16* %44, i64 %265
  store i16 %184, i16* %266, align 2
  %267 = add nuw i64 %265, 1
  %268 = icmp eq i64 %267, %185
  br i1 %268, label %461, label %264, !llvm.loop !14

269:                                              ; preds = %172
  br i1 %157, label %359, label %270

270:                                              ; preds = %269
  %271 = sext i32 %75 to i64
  %272 = icmp eq i32 %75, 0
  br i1 %272, label %461, label %273

273:                                              ; preds = %270
  %274 = add nsw i32 %50, -1
  %275 = shl nsw i32 -1, %274
  %276 = trunc i32 %275 to i16
  %277 = xor i16 %276, -1
  %278 = icmp ult i32 %75, 16
  br i1 %278, label %352, label %279

279:                                              ; preds = %273
  %280 = and i64 %271, -16
  %281 = insertelement <8 x i16> undef, i16 %277, i32 0
  %282 = shufflevector <8 x i16> %281, <8 x i16> undef, <8 x i32> zeroinitializer
  %283 = insertelement <8 x i16> undef, i16 %277, i32 0
  %284 = shufflevector <8 x i16> %283, <8 x i16> undef, <8 x i32> zeroinitializer
  %285 = add nsw i64 %280, -16
  %286 = lshr exact i64 %285, 4
  %287 = add nuw nsw i64 %286, 1
  %288 = and i64 %287, 7
  %289 = icmp ult i64 %285, 112
  br i1 %289, label %337, label %290

290:                                              ; preds = %279
  %291 = sub nsw i64 %287, %288
  br label %292

292:                                              ; preds = %292, %290
  %293 = phi i64 [ 0, %290 ], [ %334, %292 ]
  %294 = phi i64 [ %291, %290 ], [ %335, %292 ]
  %295 = getelementptr inbounds i16, i16* %44, i64 %293
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %296, align 32
  %297 = getelementptr inbounds i16, i16* %295, i64 8
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %298, align 16
  %299 = or i64 %293, 16
  %300 = getelementptr inbounds i16, i16* %44, i64 %299
  %301 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %301, align 32
  %302 = getelementptr inbounds i16, i16* %300, i64 8
  %303 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %303, align 16
  %304 = or i64 %293, 32
  %305 = getelementptr inbounds i16, i16* %44, i64 %304
  %306 = bitcast i16* %305 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %306, align 32
  %307 = getelementptr inbounds i16, i16* %305, i64 8
  %308 = bitcast i16* %307 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %308, align 16
  %309 = or i64 %293, 48
  %310 = getelementptr inbounds i16, i16* %44, i64 %309
  %311 = bitcast i16* %310 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %311, align 32
  %312 = getelementptr inbounds i16, i16* %310, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %313, align 16
  %314 = or i64 %293, 64
  %315 = getelementptr inbounds i16, i16* %44, i64 %314
  %316 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %316, align 32
  %317 = getelementptr inbounds i16, i16* %315, i64 8
  %318 = bitcast i16* %317 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %318, align 16
  %319 = or i64 %293, 80
  %320 = getelementptr inbounds i16, i16* %44, i64 %319
  %321 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %321, align 32
  %322 = getelementptr inbounds i16, i16* %320, i64 8
  %323 = bitcast i16* %322 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %323, align 16
  %324 = or i64 %293, 96
  %325 = getelementptr inbounds i16, i16* %44, i64 %324
  %326 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %326, align 32
  %327 = getelementptr inbounds i16, i16* %325, i64 8
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %328, align 16
  %329 = or i64 %293, 112
  %330 = getelementptr inbounds i16, i16* %44, i64 %329
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %331, align 32
  %332 = getelementptr inbounds i16, i16* %330, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %333, align 16
  %334 = add i64 %293, 128
  %335 = add i64 %294, -8
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %292, !llvm.loop !16

337:                                              ; preds = %292, %279
  %338 = phi i64 [ 0, %279 ], [ %334, %292 ]
  %339 = icmp eq i64 %288, 0
  br i1 %339, label %350, label %340

340:                                              ; preds = %337, %340
  %341 = phi i64 [ %347, %340 ], [ %338, %337 ]
  %342 = phi i64 [ %348, %340 ], [ %288, %337 ]
  %343 = getelementptr inbounds i16, i16* %44, i64 %341
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %344, align 32
  %345 = getelementptr inbounds i16, i16* %343, i64 8
  %346 = bitcast i16* %345 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %346, align 16
  %347 = add i64 %341, 16
  %348 = add i64 %342, -1
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %340, !llvm.loop !17

350:                                              ; preds = %340, %337
  %351 = icmp eq i64 %280, %271
  br i1 %351, label %461, label %352

352:                                              ; preds = %350, %273
  %353 = phi i64 [ 0, %273 ], [ %280, %350 ]
  br label %354

354:                                              ; preds = %352, %354
  %355 = phi i64 [ %357, %354 ], [ %353, %352 ]
  %356 = getelementptr inbounds i16, i16* %44, i64 %355
  store i16 %277, i16* %356, align 2
  %357 = add nuw i64 %355, 1
  %358 = icmp eq i64 %357, %271
  br i1 %358, label %461, label %354, !llvm.loop !18

359:                                              ; preds = %269
  %360 = sub nsw i32 %36, %3
  %361 = add nsw i32 %360, 1
  %362 = icmp slt i32 %79, %361
  %363 = select i1 %362, i32 %79, i32 %361
  %364 = bitcast i16* %44 to i8*
  %365 = sext i32 %3 to i64
  %366 = getelementptr inbounds i16, i16* %156, i64 %365
  %367 = bitcast i16* %366 to i8*
  %368 = sext i32 %363 to i64
  %369 = shl nsw i64 %368, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %364, i8* align 2 %367, i64 %369, i1 false)
  %370 = sub nsw i32 %75, %363
  %371 = icmp sgt i32 %370, 0
  br i1 %371, label %372, label %461

372:                                              ; preds = %359
  %373 = getelementptr inbounds i16, i16* %44, i64 %368
  %374 = add i32 %3, -1
  %375 = add i32 %374, %363
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds i16, i16* %156, i64 %376
  %378 = load i16, i16* %377, align 2
  %379 = sext i32 %370 to i64
  %380 = icmp ult i32 %370, 16
  br i1 %380, label %454, label %381

381:                                              ; preds = %372
  %382 = and i64 %379, -16
  %383 = insertelement <8 x i16> undef, i16 %378, i32 0
  %384 = shufflevector <8 x i16> %383, <8 x i16> undef, <8 x i32> zeroinitializer
  %385 = insertelement <8 x i16> undef, i16 %378, i32 0
  %386 = shufflevector <8 x i16> %385, <8 x i16> undef, <8 x i32> zeroinitializer
  %387 = add nsw i64 %382, -16
  %388 = lshr exact i64 %387, 4
  %389 = add nuw nsw i64 %388, 1
  %390 = and i64 %389, 7
  %391 = icmp ult i64 %387, 112
  br i1 %391, label %439, label %392

392:                                              ; preds = %381
  %393 = sub nsw i64 %389, %390
  br label %394

394:                                              ; preds = %394, %392
  %395 = phi i64 [ 0, %392 ], [ %436, %394 ]
  %396 = phi i64 [ %393, %392 ], [ %437, %394 ]
  %397 = getelementptr inbounds i16, i16* %373, i64 %395
  %398 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %398, align 2
  %399 = getelementptr inbounds i16, i16* %397, i64 8
  %400 = bitcast i16* %399 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %400, align 2
  %401 = or i64 %395, 16
  %402 = getelementptr inbounds i16, i16* %373, i64 %401
  %403 = bitcast i16* %402 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %403, align 2
  %404 = getelementptr inbounds i16, i16* %402, i64 8
  %405 = bitcast i16* %404 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %405, align 2
  %406 = or i64 %395, 32
  %407 = getelementptr inbounds i16, i16* %373, i64 %406
  %408 = bitcast i16* %407 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %408, align 2
  %409 = getelementptr inbounds i16, i16* %407, i64 8
  %410 = bitcast i16* %409 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %410, align 2
  %411 = or i64 %395, 48
  %412 = getelementptr inbounds i16, i16* %373, i64 %411
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %413, align 2
  %414 = getelementptr inbounds i16, i16* %412, i64 8
  %415 = bitcast i16* %414 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %415, align 2
  %416 = or i64 %395, 64
  %417 = getelementptr inbounds i16, i16* %373, i64 %416
  %418 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %418, align 2
  %419 = getelementptr inbounds i16, i16* %417, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %420, align 2
  %421 = or i64 %395, 80
  %422 = getelementptr inbounds i16, i16* %373, i64 %421
  %423 = bitcast i16* %422 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %423, align 2
  %424 = getelementptr inbounds i16, i16* %422, i64 8
  %425 = bitcast i16* %424 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %425, align 2
  %426 = or i64 %395, 96
  %427 = getelementptr inbounds i16, i16* %373, i64 %426
  %428 = bitcast i16* %427 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %428, align 2
  %429 = getelementptr inbounds i16, i16* %427, i64 8
  %430 = bitcast i16* %429 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %430, align 2
  %431 = or i64 %395, 112
  %432 = getelementptr inbounds i16, i16* %373, i64 %431
  %433 = bitcast i16* %432 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %433, align 2
  %434 = getelementptr inbounds i16, i16* %432, i64 8
  %435 = bitcast i16* %434 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %435, align 2
  %436 = add i64 %395, 128
  %437 = add i64 %396, -8
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %439, label %394, !llvm.loop !19

439:                                              ; preds = %394, %381
  %440 = phi i64 [ 0, %381 ], [ %436, %394 ]
  %441 = icmp eq i64 %390, 0
  br i1 %441, label %452, label %442

442:                                              ; preds = %439, %442
  %443 = phi i64 [ %449, %442 ], [ %440, %439 ]
  %444 = phi i64 [ %450, %442 ], [ %390, %439 ]
  %445 = getelementptr inbounds i16, i16* %373, i64 %443
  %446 = bitcast i16* %445 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %446, align 2
  %447 = getelementptr inbounds i16, i16* %445, i64 8
  %448 = bitcast i16* %447 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %448, align 2
  %449 = add i64 %443, 16
  %450 = add i64 %444, -1
  %451 = icmp eq i64 %450, 0
  br i1 %451, label %452, label %442, !llvm.loop !20

452:                                              ; preds = %442, %439
  %453 = icmp eq i64 %382, %379
  br i1 %453, label %461, label %454

454:                                              ; preds = %452, %372
  %455 = phi i64 [ 0, %372 ], [ %382, %452 ]
  br label %456

456:                                              ; preds = %454, %456
  %457 = phi i64 [ %459, %456 ], [ %455, %454 ]
  %458 = getelementptr inbounds i16, i16* %373, i64 %457
  store i16 %378, i16* %458, align 2
  %459 = add nuw i64 %457, 1
  %460 = icmp eq i64 %459, %379
  br i1 %460, label %461, label %456, !llvm.loop !21

461:                                              ; preds = %264, %354, %456, %260, %350, %452, %270, %177, %148, %359, %154
  %462 = phi i16* [ %156, %359 ], [ %132, %154 ], [ %153, %148 ], [ %156, %177 ], [ %156, %270 ], [ %156, %452 ], [ %156, %350 ], [ %156, %260 ], [ %156, %456 ], [ %156, %354 ], [ %156, %264 ]
  %463 = phi i1 [ true, %359 ], [ false, %154 ], [ false, %148 ], [ true, %177 ], [ true, %270 ], [ true, %452 ], [ true, %350 ], [ true, %260 ], [ true, %456 ], [ true, %354 ], [ true, %264 ]
  br i1 %130, label %464, label %856

464:                                              ; preds = %461
  %465 = or i1 %5, %6
  br i1 %465, label %466, label %476

466:                                              ; preds = %464
  %467 = zext i1 %5 to i32
  %468 = sub i32 %3, %467
  %469 = sext i32 %4 to i64
  %470 = mul nsw i64 %128, %469
  %471 = getelementptr inbounds i16, i16* %88, i64 %470
  %472 = select i1 %6, i16* %462, i16* %471
  %473 = sext i32 %468 to i64
  %474 = getelementptr inbounds i16, i16* %472, i64 %473
  %475 = load i16, i16* %474, align 2
  br label %480

476:                                              ; preds = %464
  %477 = add nsw i32 %50, -1
  %478 = shl i32 1, %477
  %479 = trunc i32 %478 to i16
  br label %480

480:                                              ; preds = %476, %466
  %481 = phi i16 [ %479, %476 ], [ %475, %466 ]
  %482 = getelementptr inbounds [160 x i16], [160 x i16]* %13, i64 0, i64 15
  store i16 %481, i16* %482, align 2
  %483 = xor i1 %6, true
  %484 = or i1 %483, %5
  br i1 %484, label %573, label %485

485:                                              ; preds = %480
  %486 = sext i32 %3 to i64
  %487 = getelementptr inbounds i16, i16* %462, i64 %486
  %488 = load i16, i16* %487, align 2
  %489 = sext i32 %76 to i64
  %490 = icmp eq i32 %76, 0
  br i1 %490, label %856, label %491

491:                                              ; preds = %485
  %492 = icmp ult i32 %76, 16
  br i1 %492, label %566, label %493

493:                                              ; preds = %491
  %494 = and i64 %489, -16
  %495 = insertelement <8 x i16> undef, i16 %488, i32 0
  %496 = shufflevector <8 x i16> %495, <8 x i16> undef, <8 x i32> zeroinitializer
  %497 = insertelement <8 x i16> undef, i16 %488, i32 0
  %498 = shufflevector <8 x i16> %497, <8 x i16> undef, <8 x i32> zeroinitializer
  %499 = add nsw i64 %494, -16
  %500 = lshr exact i64 %499, 4
  %501 = add nuw nsw i64 %500, 1
  %502 = and i64 %501, 7
  %503 = icmp ult i64 %499, 112
  br i1 %503, label %551, label %504

504:                                              ; preds = %493
  %505 = sub nsw i64 %501, %502
  br label %506

506:                                              ; preds = %506, %504
  %507 = phi i64 [ 0, %504 ], [ %548, %506 ]
  %508 = phi i64 [ %505, %504 ], [ %549, %506 ]
  %509 = getelementptr inbounds i16, i16* %45, i64 %507
  %510 = bitcast i16* %509 to <8 x i16>*
  store <8 x i16> %496, <8 x i16>* %510, align 32
  %511 = getelementptr inbounds i16, i16* %509, i64 8
  %512 = bitcast i16* %511 to <8 x i16>*
  store <8 x i16> %498, <8 x i16>* %512, align 16
  %513 = or i64 %507, 16
  %514 = getelementptr inbounds i16, i16* %45, i64 %513
  %515 = bitcast i16* %514 to <8 x i16>*
  store <8 x i16> %496, <8 x i16>* %515, align 32
  %516 = getelementptr inbounds i16, i16* %514, i64 8
  %517 = bitcast i16* %516 to <8 x i16>*
  store <8 x i16> %498, <8 x i16>* %517, align 16
  %518 = or i64 %507, 32
  %519 = getelementptr inbounds i16, i16* %45, i64 %518
  %520 = bitcast i16* %519 to <8 x i16>*
  store <8 x i16> %496, <8 x i16>* %520, align 32
  %521 = getelementptr inbounds i16, i16* %519, i64 8
  %522 = bitcast i16* %521 to <8 x i16>*
  store <8 x i16> %498, <8 x i16>* %522, align 16
  %523 = or i64 %507, 48
  %524 = getelementptr inbounds i16, i16* %45, i64 %523
  %525 = bitcast i16* %524 to <8 x i16>*
  store <8 x i16> %496, <8 x i16>* %525, align 32
  %526 = getelementptr inbounds i16, i16* %524, i64 8
  %527 = bitcast i16* %526 to <8 x i16>*
  store <8 x i16> %498, <8 x i16>* %527, align 16
  %528 = or i64 %507, 64
  %529 = getelementptr inbounds i16, i16* %45, i64 %528
  %530 = bitcast i16* %529 to <8 x i16>*
  store <8 x i16> %496, <8 x i16>* %530, align 32
  %531 = getelementptr inbounds i16, i16* %529, i64 8
  %532 = bitcast i16* %531 to <8 x i16>*
  store <8 x i16> %498, <8 x i16>* %532, align 16
  %533 = or i64 %507, 80
  %534 = getelementptr inbounds i16, i16* %45, i64 %533
  %535 = bitcast i16* %534 to <8 x i16>*
  store <8 x i16> %496, <8 x i16>* %535, align 32
  %536 = getelementptr inbounds i16, i16* %534, i64 8
  %537 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %498, <8 x i16>* %537, align 16
  %538 = or i64 %507, 96
  %539 = getelementptr inbounds i16, i16* %45, i64 %538
  %540 = bitcast i16* %539 to <8 x i16>*
  store <8 x i16> %496, <8 x i16>* %540, align 32
  %541 = getelementptr inbounds i16, i16* %539, i64 8
  %542 = bitcast i16* %541 to <8 x i16>*
  store <8 x i16> %498, <8 x i16>* %542, align 16
  %543 = or i64 %507, 112
  %544 = getelementptr inbounds i16, i16* %45, i64 %543
  %545 = bitcast i16* %544 to <8 x i16>*
  store <8 x i16> %496, <8 x i16>* %545, align 32
  %546 = getelementptr inbounds i16, i16* %544, i64 8
  %547 = bitcast i16* %546 to <8 x i16>*
  store <8 x i16> %498, <8 x i16>* %547, align 16
  %548 = add i64 %507, 128
  %549 = add i64 %508, -8
  %550 = icmp eq i64 %549, 0
  br i1 %550, label %551, label %506, !llvm.loop !22

551:                                              ; preds = %506, %493
  %552 = phi i64 [ 0, %493 ], [ %548, %506 ]
  %553 = icmp eq i64 %502, 0
  br i1 %553, label %564, label %554

554:                                              ; preds = %551, %554
  %555 = phi i64 [ %561, %554 ], [ %552, %551 ]
  %556 = phi i64 [ %562, %554 ], [ %502, %551 ]
  %557 = getelementptr inbounds i16, i16* %45, i64 %555
  %558 = bitcast i16* %557 to <8 x i16>*
  store <8 x i16> %496, <8 x i16>* %558, align 32
  %559 = getelementptr inbounds i16, i16* %557, i64 8
  %560 = bitcast i16* %559 to <8 x i16>*
  store <8 x i16> %498, <8 x i16>* %560, align 16
  %561 = add i64 %555, 16
  %562 = add i64 %556, -1
  %563 = icmp eq i64 %562, 0
  br i1 %563, label %564, label %554, !llvm.loop !23

564:                                              ; preds = %554, %551
  %565 = icmp eq i64 %494, %489
  br i1 %565, label %856, label %566

566:                                              ; preds = %564, %491
  %567 = phi i64 [ 0, %491 ], [ %494, %564 ]
  br label %568

568:                                              ; preds = %566, %568
  %569 = phi i64 [ %571, %568 ], [ %567, %566 ]
  %570 = getelementptr inbounds i16, i16* %45, i64 %569
  store i16 %488, i16* %570, align 2
  %571 = add nuw i64 %569, 1
  %572 = icmp eq i64 %571, %489
  br i1 %572, label %856, label %568, !llvm.loop !24

573:                                              ; preds = %480
  br i1 %465, label %663, label %574

574:                                              ; preds = %573
  %575 = sext i32 %76 to i64
  %576 = icmp eq i32 %76, 0
  br i1 %576, label %856, label %577

577:                                              ; preds = %574
  %578 = add nsw i32 %50, -1
  %579 = shl i32 1, %578
  %580 = trunc i32 %579 to i16
  %581 = add i16 %580, 1
  %582 = icmp ult i32 %76, 16
  br i1 %582, label %656, label %583

583:                                              ; preds = %577
  %584 = and i64 %575, -16
  %585 = insertelement <8 x i16> undef, i16 %581, i32 0
  %586 = shufflevector <8 x i16> %585, <8 x i16> undef, <8 x i32> zeroinitializer
  %587 = insertelement <8 x i16> undef, i16 %581, i32 0
  %588 = shufflevector <8 x i16> %587, <8 x i16> undef, <8 x i32> zeroinitializer
  %589 = add nsw i64 %584, -16
  %590 = lshr exact i64 %589, 4
  %591 = add nuw nsw i64 %590, 1
  %592 = and i64 %591, 7
  %593 = icmp ult i64 %589, 112
  br i1 %593, label %641, label %594

594:                                              ; preds = %583
  %595 = sub nsw i64 %591, %592
  br label %596

596:                                              ; preds = %596, %594
  %597 = phi i64 [ 0, %594 ], [ %638, %596 ]
  %598 = phi i64 [ %595, %594 ], [ %639, %596 ]
  %599 = getelementptr inbounds i16, i16* %45, i64 %597
  %600 = bitcast i16* %599 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %600, align 32
  %601 = getelementptr inbounds i16, i16* %599, i64 8
  %602 = bitcast i16* %601 to <8 x i16>*
  store <8 x i16> %588, <8 x i16>* %602, align 16
  %603 = or i64 %597, 16
  %604 = getelementptr inbounds i16, i16* %45, i64 %603
  %605 = bitcast i16* %604 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %605, align 32
  %606 = getelementptr inbounds i16, i16* %604, i64 8
  %607 = bitcast i16* %606 to <8 x i16>*
  store <8 x i16> %588, <8 x i16>* %607, align 16
  %608 = or i64 %597, 32
  %609 = getelementptr inbounds i16, i16* %45, i64 %608
  %610 = bitcast i16* %609 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %610, align 32
  %611 = getelementptr inbounds i16, i16* %609, i64 8
  %612 = bitcast i16* %611 to <8 x i16>*
  store <8 x i16> %588, <8 x i16>* %612, align 16
  %613 = or i64 %597, 48
  %614 = getelementptr inbounds i16, i16* %45, i64 %613
  %615 = bitcast i16* %614 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %615, align 32
  %616 = getelementptr inbounds i16, i16* %614, i64 8
  %617 = bitcast i16* %616 to <8 x i16>*
  store <8 x i16> %588, <8 x i16>* %617, align 16
  %618 = or i64 %597, 64
  %619 = getelementptr inbounds i16, i16* %45, i64 %618
  %620 = bitcast i16* %619 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %620, align 32
  %621 = getelementptr inbounds i16, i16* %619, i64 8
  %622 = bitcast i16* %621 to <8 x i16>*
  store <8 x i16> %588, <8 x i16>* %622, align 16
  %623 = or i64 %597, 80
  %624 = getelementptr inbounds i16, i16* %45, i64 %623
  %625 = bitcast i16* %624 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %625, align 32
  %626 = getelementptr inbounds i16, i16* %624, i64 8
  %627 = bitcast i16* %626 to <8 x i16>*
  store <8 x i16> %588, <8 x i16>* %627, align 16
  %628 = or i64 %597, 96
  %629 = getelementptr inbounds i16, i16* %45, i64 %628
  %630 = bitcast i16* %629 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %630, align 32
  %631 = getelementptr inbounds i16, i16* %629, i64 8
  %632 = bitcast i16* %631 to <8 x i16>*
  store <8 x i16> %588, <8 x i16>* %632, align 16
  %633 = or i64 %597, 112
  %634 = getelementptr inbounds i16, i16* %45, i64 %633
  %635 = bitcast i16* %634 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %635, align 32
  %636 = getelementptr inbounds i16, i16* %634, i64 8
  %637 = bitcast i16* %636 to <8 x i16>*
  store <8 x i16> %588, <8 x i16>* %637, align 16
  %638 = add i64 %597, 128
  %639 = add i64 %598, -8
  %640 = icmp eq i64 %639, 0
  br i1 %640, label %641, label %596, !llvm.loop !25

641:                                              ; preds = %596, %583
  %642 = phi i64 [ 0, %583 ], [ %638, %596 ]
  %643 = icmp eq i64 %592, 0
  br i1 %643, label %654, label %644

644:                                              ; preds = %641, %644
  %645 = phi i64 [ %651, %644 ], [ %642, %641 ]
  %646 = phi i64 [ %652, %644 ], [ %592, %641 ]
  %647 = getelementptr inbounds i16, i16* %45, i64 %645
  %648 = bitcast i16* %647 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %648, align 32
  %649 = getelementptr inbounds i16, i16* %647, i64 8
  %650 = bitcast i16* %649 to <8 x i16>*
  store <8 x i16> %588, <8 x i16>* %650, align 16
  %651 = add i64 %645, 16
  %652 = add i64 %646, -1
  %653 = icmp eq i64 %652, 0
  br i1 %653, label %654, label %644, !llvm.loop !26

654:                                              ; preds = %644, %641
  %655 = icmp eq i64 %584, %575
  br i1 %655, label %856, label %656

656:                                              ; preds = %654, %577
  %657 = phi i64 [ 0, %577 ], [ %584, %654 ]
  br label %658

658:                                              ; preds = %656, %658
  %659 = phi i64 [ %661, %658 ], [ %657, %656 ]
  %660 = getelementptr inbounds i16, i16* %45, i64 %659
  store i16 %581, i16* %660, align 2
  %661 = add nuw i64 %659, 1
  %662 = icmp eq i64 %661, %575
  br i1 %662, label %856, label %658, !llvm.loop !27

663:                                              ; preds = %573
  %664 = sub nsw i32 %41, %4
  %665 = add nsw i32 %664, 1
  %666 = icmp slt i32 %82, %665
  %667 = select i1 %666, i32 %82, i32 %665
  %668 = icmp sgt i32 %667, 0
  br i1 %668, label %669, label %750

669:                                              ; preds = %663
  %670 = add nsw i32 %3, -1
  %671 = sext i32 %670 to i64
  %672 = sext i32 %4 to i64
  %673 = sext i32 %667 to i64
  %674 = getelementptr inbounds i16, i16* %88, i64 %671
  %675 = icmp ugt i32 %667, 15
  %676 = icmp eq i64 %128, 1
  %677 = and i1 %675, %676
  br i1 %677, label %678, label %690

678:                                              ; preds = %669
  %679 = getelementptr inbounds [160 x i16], [160 x i16]* %13, i64 0, i64 16
  %680 = add nsw i64 %673, 16
  %681 = getelementptr [160 x i16], [160 x i16]* %13, i64 0, i64 %680
  %682 = add nsw i64 %672, %671
  %683 = getelementptr i16, i16* %88, i64 %682
  %684 = add nsw i64 %672, %673
  %685 = add nsw i64 %684, %671
  %686 = getelementptr i16, i16* %88, i64 %685
  %687 = icmp ult i16* %679, %686
  %688 = icmp ult i16* %683, %681
  %689 = and i1 %687, %688
  br i1 %689, label %690, label %692

690:                                              ; preds = %669, %748, %678
  %691 = phi i64 [ 0, %678 ], [ 0, %669 ], [ %693, %748 ]
  br label %753

692:                                              ; preds = %678
  %693 = and i64 %673, -16
  %694 = add nsw i64 %693, -16
  %695 = lshr exact i64 %694, 4
  %696 = add nuw nsw i64 %695, 1
  %697 = and i64 %696, 1
  %698 = icmp eq i64 %694, 0
  br i1 %698, label %732, label %699

699:                                              ; preds = %692
  %700 = sub nuw nsw i64 %696, %697
  br label %701

701:                                              ; preds = %701, %699
  %702 = phi i64 [ 0, %699 ], [ %729, %701 ]
  %703 = phi i64 [ %700, %699 ], [ %730, %701 ]
  %704 = add nsw i64 %702, %672
  %705 = mul nsw i64 %128, %704
  %706 = getelementptr inbounds i16, i16* %674, i64 %705
  %707 = bitcast i16* %706 to <8 x i16>*
  %708 = load <8 x i16>, <8 x i16>* %707, align 2, !alias.scope !28
  %709 = getelementptr inbounds i16, i16* %706, i64 8
  %710 = bitcast i16* %709 to <8 x i16>*
  %711 = load <8 x i16>, <8 x i16>* %710, align 2, !alias.scope !28
  %712 = getelementptr inbounds i16, i16* %45, i64 %702
  %713 = bitcast i16* %712 to <8 x i16>*
  store <8 x i16> %708, <8 x i16>* %713, align 32, !alias.scope !31, !noalias !28
  %714 = getelementptr inbounds i16, i16* %712, i64 8
  %715 = bitcast i16* %714 to <8 x i16>*
  store <8 x i16> %711, <8 x i16>* %715, align 16, !alias.scope !31, !noalias !28
  %716 = or i64 %702, 16
  %717 = add nsw i64 %716, %672
  %718 = mul nsw i64 %128, %717
  %719 = getelementptr inbounds i16, i16* %674, i64 %718
  %720 = bitcast i16* %719 to <8 x i16>*
  %721 = load <8 x i16>, <8 x i16>* %720, align 2, !alias.scope !28
  %722 = getelementptr inbounds i16, i16* %719, i64 8
  %723 = bitcast i16* %722 to <8 x i16>*
  %724 = load <8 x i16>, <8 x i16>* %723, align 2, !alias.scope !28
  %725 = getelementptr inbounds i16, i16* %45, i64 %716
  %726 = bitcast i16* %725 to <8 x i16>*
  store <8 x i16> %721, <8 x i16>* %726, align 32, !alias.scope !31, !noalias !28
  %727 = getelementptr inbounds i16, i16* %725, i64 8
  %728 = bitcast i16* %727 to <8 x i16>*
  store <8 x i16> %724, <8 x i16>* %728, align 16, !alias.scope !31, !noalias !28
  %729 = add i64 %702, 32
  %730 = add i64 %703, -2
  %731 = icmp eq i64 %730, 0
  br i1 %731, label %732, label %701, !llvm.loop !33

732:                                              ; preds = %701, %692
  %733 = phi i64 [ 0, %692 ], [ %729, %701 ]
  %734 = icmp eq i64 %697, 0
  br i1 %734, label %748, label %735

735:                                              ; preds = %732
  %736 = add nsw i64 %733, %672
  %737 = mul nsw i64 %128, %736
  %738 = getelementptr inbounds i16, i16* %674, i64 %737
  %739 = bitcast i16* %738 to <8 x i16>*
  %740 = load <8 x i16>, <8 x i16>* %739, align 2, !alias.scope !28
  %741 = getelementptr inbounds i16, i16* %738, i64 8
  %742 = bitcast i16* %741 to <8 x i16>*
  %743 = load <8 x i16>, <8 x i16>* %742, align 2, !alias.scope !28
  %744 = getelementptr inbounds i16, i16* %45, i64 %733
  %745 = bitcast i16* %744 to <8 x i16>*
  store <8 x i16> %740, <8 x i16>* %745, align 32, !alias.scope !31, !noalias !28
  %746 = getelementptr inbounds i16, i16* %744, i64 8
  %747 = bitcast i16* %746 to <8 x i16>*
  store <8 x i16> %743, <8 x i16>* %747, align 16, !alias.scope !31, !noalias !28
  br label %748

748:                                              ; preds = %732, %735
  %749 = icmp eq i64 %693, %673
  br i1 %749, label %750, label %690

750:                                              ; preds = %753, %748, %663
  %751 = sub nsw i32 %76, %667
  %752 = icmp sgt i32 %751, 0
  br i1 %752, label %762, label %856

753:                                              ; preds = %690, %753
  %754 = phi i64 [ %760, %753 ], [ %691, %690 ]
  %755 = add nsw i64 %754, %672
  %756 = mul nsw i64 %128, %755
  %757 = getelementptr inbounds i16, i16* %674, i64 %756
  %758 = load i16, i16* %757, align 2
  %759 = getelementptr inbounds i16, i16* %45, i64 %754
  store i16 %758, i16* %759, align 2
  %760 = add nuw nsw i64 %754, 1
  %761 = icmp slt i64 %760, %673
  br i1 %761, label %753, label %750, !llvm.loop !34

762:                                              ; preds = %750
  %763 = sext i32 %667 to i64
  %764 = getelementptr inbounds i16, i16* %45, i64 %763
  %765 = add i32 %4, -1
  %766 = add i32 %765, %667
  %767 = sext i32 %766 to i64
  %768 = mul nsw i64 %128, %767
  %769 = getelementptr inbounds i16, i16* %88, i64 %768
  %770 = add nsw i32 %3, -1
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds i16, i16* %769, i64 %771
  %773 = load i16, i16* %772, align 2
  %774 = sext i32 %751 to i64
  %775 = icmp ult i32 %751, 16
  br i1 %775, label %849, label %776

776:                                              ; preds = %762
  %777 = and i64 %774, -16
  %778 = insertelement <8 x i16> undef, i16 %773, i32 0
  %779 = shufflevector <8 x i16> %778, <8 x i16> undef, <8 x i32> zeroinitializer
  %780 = insertelement <8 x i16> undef, i16 %773, i32 0
  %781 = shufflevector <8 x i16> %780, <8 x i16> undef, <8 x i32> zeroinitializer
  %782 = add nsw i64 %777, -16
  %783 = lshr exact i64 %782, 4
  %784 = add nuw nsw i64 %783, 1
  %785 = and i64 %784, 7
  %786 = icmp ult i64 %782, 112
  br i1 %786, label %834, label %787

787:                                              ; preds = %776
  %788 = sub nsw i64 %784, %785
  br label %789

789:                                              ; preds = %789, %787
  %790 = phi i64 [ 0, %787 ], [ %831, %789 ]
  %791 = phi i64 [ %788, %787 ], [ %832, %789 ]
  %792 = getelementptr inbounds i16, i16* %764, i64 %790
  %793 = bitcast i16* %792 to <8 x i16>*
  store <8 x i16> %779, <8 x i16>* %793, align 2
  %794 = getelementptr inbounds i16, i16* %792, i64 8
  %795 = bitcast i16* %794 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %795, align 2
  %796 = or i64 %790, 16
  %797 = getelementptr inbounds i16, i16* %764, i64 %796
  %798 = bitcast i16* %797 to <8 x i16>*
  store <8 x i16> %779, <8 x i16>* %798, align 2
  %799 = getelementptr inbounds i16, i16* %797, i64 8
  %800 = bitcast i16* %799 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %800, align 2
  %801 = or i64 %790, 32
  %802 = getelementptr inbounds i16, i16* %764, i64 %801
  %803 = bitcast i16* %802 to <8 x i16>*
  store <8 x i16> %779, <8 x i16>* %803, align 2
  %804 = getelementptr inbounds i16, i16* %802, i64 8
  %805 = bitcast i16* %804 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %805, align 2
  %806 = or i64 %790, 48
  %807 = getelementptr inbounds i16, i16* %764, i64 %806
  %808 = bitcast i16* %807 to <8 x i16>*
  store <8 x i16> %779, <8 x i16>* %808, align 2
  %809 = getelementptr inbounds i16, i16* %807, i64 8
  %810 = bitcast i16* %809 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %810, align 2
  %811 = or i64 %790, 64
  %812 = getelementptr inbounds i16, i16* %764, i64 %811
  %813 = bitcast i16* %812 to <8 x i16>*
  store <8 x i16> %779, <8 x i16>* %813, align 2
  %814 = getelementptr inbounds i16, i16* %812, i64 8
  %815 = bitcast i16* %814 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %815, align 2
  %816 = or i64 %790, 80
  %817 = getelementptr inbounds i16, i16* %764, i64 %816
  %818 = bitcast i16* %817 to <8 x i16>*
  store <8 x i16> %779, <8 x i16>* %818, align 2
  %819 = getelementptr inbounds i16, i16* %817, i64 8
  %820 = bitcast i16* %819 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %820, align 2
  %821 = or i64 %790, 96
  %822 = getelementptr inbounds i16, i16* %764, i64 %821
  %823 = bitcast i16* %822 to <8 x i16>*
  store <8 x i16> %779, <8 x i16>* %823, align 2
  %824 = getelementptr inbounds i16, i16* %822, i64 8
  %825 = bitcast i16* %824 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %825, align 2
  %826 = or i64 %790, 112
  %827 = getelementptr inbounds i16, i16* %764, i64 %826
  %828 = bitcast i16* %827 to <8 x i16>*
  store <8 x i16> %779, <8 x i16>* %828, align 2
  %829 = getelementptr inbounds i16, i16* %827, i64 8
  %830 = bitcast i16* %829 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %830, align 2
  %831 = add i64 %790, 128
  %832 = add i64 %791, -8
  %833 = icmp eq i64 %832, 0
  br i1 %833, label %834, label %789, !llvm.loop !35

834:                                              ; preds = %789, %776
  %835 = phi i64 [ 0, %776 ], [ %831, %789 ]
  %836 = icmp eq i64 %785, 0
  br i1 %836, label %847, label %837

837:                                              ; preds = %834, %837
  %838 = phi i64 [ %844, %837 ], [ %835, %834 ]
  %839 = phi i64 [ %845, %837 ], [ %785, %834 ]
  %840 = getelementptr inbounds i16, i16* %764, i64 %838
  %841 = bitcast i16* %840 to <8 x i16>*
  store <8 x i16> %779, <8 x i16>* %841, align 2
  %842 = getelementptr inbounds i16, i16* %840, i64 8
  %843 = bitcast i16* %842 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %843, align 2
  %844 = add i64 %838, 16
  %845 = add i64 %839, -1
  %846 = icmp eq i64 %845, 0
  br i1 %846, label %847, label %837, !llvm.loop !36

847:                                              ; preds = %837, %834
  %848 = icmp eq i64 %777, %774
  br i1 %848, label %856, label %849

849:                                              ; preds = %847, %762
  %850 = phi i64 [ 0, %762 ], [ %777, %847 ]
  br label %851

851:                                              ; preds = %849, %851
  %852 = phi i64 [ %854, %851 ], [ %850, %849 ]
  %853 = getelementptr inbounds i16, i16* %764, i64 %852
  store i16 %773, i16* %853, align 2
  %854 = add nuw i64 %852, 1
  %855 = icmp eq i64 %854, %774
  br i1 %855, label %856, label %851, !llvm.loop !37

856:                                              ; preds = %568, %658, %851, %564, %654, %847, %574, %485, %750, %461
  %857 = phi i1 [ true, %574 ], [ true, %485 ], [ %130, %750 ], [ false, %461 ], [ %130, %847 ], [ %130, %654 ], [ %130, %564 ], [ %130, %851 ], [ %130, %658 ], [ %130, %568 ]
  %858 = sext i32 %4 to i64
  %859 = mul nsw i64 %128, %858
  %860 = getelementptr inbounds i16, i16* %88, i64 %859
  %861 = sext i32 %3 to i64
  %862 = getelementptr inbounds i16, i16* %860, i64 %861
  %863 = sext i32 %84 to i64
  br i1 %62, label %864, label %874

864:                                              ; preds = %856
  %865 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %866 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %865, align 16
  %867 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %866, i64 0, i32 12
  %868 = load void (i8*, i64, i8*, i8*, i8, i32, i32)*, void (i8*, i64, i8*, i8*, i8, i32, i32)** %867, align 8
  %869 = bitcast i16* %862 to i8*
  %870 = bitcast i16* %44 to i8*
  %871 = bitcast i16* %45 to i8*
  %872 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %57, i64 0, i32 1
  %873 = load i8, i8* %872, align 1
  call void %868(i8* %869, i64 %863, i8* %870, i8* %871, i8 zeroext %873, i32 %18, i32 %22) #7
  br label %899

874:                                              ; preds = %119, %856
  %875 = phi i64 [ %125, %119 ], [ %863, %856 ]
  %876 = phi i16* [ %124, %119 ], [ %862, %856 ]
  %877 = phi i1 [ false, %119 ], [ %463, %856 ]
  %878 = phi i1 [ false, %119 ], [ %857, %856 ]
  br i1 %53, label %879, label %880

879:                                              ; preds = %874
  call void @_ZN7libgav14Tile21DirectionalPredictionItEEvRKNS0_5BlockENS_5PlaneEiibbbbiiiiiNS_13TransformSizeEPT_S8_(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %2, i32 %3, i32 %4, i1 zeroext %5, i1 zeroext %6, i1 zeroext %878, i1 zeroext %877, i32 %74, i32 %18, i32 %22, i32 %36, i32 %41, i8 zeroext %10, i16* %44, i16* %45)
  br label %899

880:                                              ; preds = %874
  switch i8 %9, label %889 [
    i8 0, label %881
    i8 12, label %890
    i8 9, label %886
    i8 10, label %887
    i8 11, label %888
  ]

881:                                              ; preds = %880
  %882 = and i1 %5, %6
  br i1 %882, label %890, label %883

883:                                              ; preds = %881
  %884 = zext i1 %6 to i64
  %885 = select i1 %5, i64 2, i64 %884
  br label %890

886:                                              ; preds = %880
  br label %890

887:                                              ; preds = %880
  br label %890

888:                                              ; preds = %880
  br label %890

889:                                              ; preds = %880
  br label %890

890:                                              ; preds = %880, %881, %886, %887, %888, %889, %883
  %891 = phi i64 [ %885, %883 ], [ 10, %889 ], [ 9, %888 ], [ 8, %887 ], [ 7, %886 ], [ 3, %881 ], [ 6, %880 ]
  %892 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %893 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %892, align 16
  %894 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %893, i64 0, i32 16, i64 %14, i64 %891
  %895 = load void (i8*, i64, i8*, i8*)*, void (i8*, i64, i8*, i8*)** %894, align 8
  %896 = bitcast i16* %876 to i8*
  %897 = bitcast i16* %44 to i8*
  %898 = bitcast i16* %45 to i8*
  call void %895(i8* %896, i64 %875, i8* %897, i8* %898) #7
  br label %899

899:                                              ; preds = %879, %890, %864
  call void @llvm.lifetime.end.p0i8(i64 320, i8* nonnull %43) #7
  call void @llvm.lifetime.end.p0i8(i64 320, i8* nonnull %42) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav14Tile21DirectionalPredictionItEEvRKNS0_5BlockENS_5PlaneEiibbbbiiiiiNS_13TransformSizeEPT_S8_(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* dereferenceable(88), i8 zeroext, i32, i32, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, i32, i32, i32, i32, i32, i8 zeroext, i16*, i16*) local_unnamed_addr #0 comdat align 2 {
  %18 = zext i8 %2 to i64
  %19 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %18, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = ashr i32 %20, 1
  %22 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %18, i32 2
  %23 = bitcast i8** %22 to i16**
  %24 = load i16*, i16** %23, align 8
  %25 = sext i32 %4 to i64
  %26 = sext i32 %21 to i64
  %27 = mul nsw i64 %26, %25
  %28 = getelementptr inbounds i16, i16* %24, i64 %27
  %29 = sext i32 %3 to i64
  %30 = getelementptr inbounds i16, i16* %28, i64 %29
  %31 = sext i32 %20 to i64
  switch i32 %9, label %50 [
    i32 90, label %32
    i32 180, label %41
  ]

32:                                               ; preds = %17
  %33 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %34 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %33, align 16
  %35 = zext i8 %14 to i64
  %36 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %34, i64 0, i32 16, i64 %35, i64 4
  %37 = load void (i8*, i64, i8*, i8*)*, void (i8*, i64, i8*, i8*)** %36, align 8
  %38 = bitcast i16* %30 to i8*
  %39 = bitcast i16* %15 to i8*
  %40 = bitcast i16* %16 to i8*
  tail call void %37(i8* %38, i64 %31, i8* %39, i8* %40) #7
  br label %307

41:                                               ; preds = %17
  %42 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %43 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %42, align 16
  %44 = zext i8 %14 to i64
  %45 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %43, i64 0, i32 16, i64 %44, i64 5
  %46 = load void (i8*, i64, i8*, i8*)*, void (i8*, i64, i8*, i8*)** %45, align 8
  %47 = bitcast i16* %30 to i8*
  %48 = bitcast i16* %15 to i8*
  %49 = bitcast i16* %16 to i8*
  tail call void %46(i8* %47, i64 %31, i8* %48, i8* %49) #7
  br label %307

50:                                               ; preds = %17
  %51 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %52 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %51, align 32
  %53 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %52, i64 0, i32 16
  %54 = load i8, i8* %53, align 1, !range !2
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %252, label %56

56:                                               ; preds = %50
  %57 = tail call i32 @_ZNK7libgav14Tile22GetIntraEdgeFilterTypeERKNS0_5BlockENS_5PlaneE(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %2)
  %58 = add i32 %9, -91
  %59 = icmp ult i32 %58, 89
  %60 = add nsw i32 %11, %10
  %61 = icmp sgt i32 %60, 23
  %62 = and i1 %59, %61
  br i1 %62, label %63, label %79

63:                                               ; preds = %56
  %64 = load i16, i16* %16, align 2
  %65 = zext i16 %64 to i32
  %66 = getelementptr inbounds i16, i16* %15, i64 -1
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %68, 6
  %70 = load i16, i16* %15, align 2
  %71 = zext i16 %70 to i32
  %72 = add nuw nsw i32 %71, %65
  %73 = mul nuw nsw i32 %72, 5
  %74 = add nuw nsw i32 %69, 8
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 4
  %77 = trunc i32 %76 to i16
  store i16 %77, i16* %66, align 2
  %78 = getelementptr inbounds i16, i16* %16, i64 -1
  store i16 %77, i16* %78, align 2
  br label %79

79:                                               ; preds = %63, %56
  %80 = xor i1 %6, true
  %81 = xor i1 %8, true
  %82 = or i1 %80, %81
  br i1 %82, label %143, label %83

83:                                               ; preds = %79
  %84 = add nsw i32 %9, -90
  %85 = icmp slt i32 %84, 0
  %86 = sub i32 90, %9
  %87 = select i1 %85, i32 %86, i32 %84
  %88 = icmp eq i32 %57, 0
  %89 = icmp slt i32 %60, 9
  br i1 %88, label %90, label %112

90:                                               ; preds = %83
  br i1 %89, label %91, label %93

91:                                               ; preds = %90
  %92 = icmp sgt i32 %87, 55
  br i1 %92, label %127, label %143

93:                                               ; preds = %90
  %94 = icmp slt i32 %60, 17
  br i1 %94, label %95, label %97

95:                                               ; preds = %93
  %96 = icmp sgt i32 %87, 39
  br i1 %96, label %127, label %143

97:                                               ; preds = %93
  %98 = icmp slt i32 %60, 25
  br i1 %98, label %99, label %105

99:                                               ; preds = %97
  %100 = icmp sgt i32 %87, 31
  br i1 %100, label %127, label %101

101:                                              ; preds = %99
  %102 = icmp sgt i32 %87, 15
  br i1 %102, label %127, label %103

103:                                              ; preds = %101
  %104 = icmp sgt i32 %87, 7
  br i1 %104, label %127, label %143

105:                                              ; preds = %97
  %106 = icmp sgt i32 %60, 32
  %107 = icmp sgt i32 %87, 31
  %108 = or i1 %106, %107
  br i1 %108, label %127, label %109

109:                                              ; preds = %105
  %110 = icmp sgt i32 %87, 3
  %111 = select i1 %110, i32 2, i32 1
  br label %127

112:                                              ; preds = %83
  br i1 %89, label %113, label %117

113:                                              ; preds = %112
  %114 = icmp sgt i32 %87, 63
  br i1 %114, label %127, label %115

115:                                              ; preds = %113
  %116 = icmp sgt i32 %87, 39
  br i1 %116, label %127, label %143

117:                                              ; preds = %112
  %118 = icmp slt i32 %60, 17
  br i1 %118, label %119, label %123

119:                                              ; preds = %117
  %120 = icmp sgt i32 %87, 47
  br i1 %120, label %127, label %121

121:                                              ; preds = %119
  %122 = icmp sgt i32 %87, 19
  br i1 %122, label %127, label %143

123:                                              ; preds = %117
  %124 = icmp sgt i32 %60, 24
  %125 = icmp sgt i32 %87, 3
  %126 = or i1 %124, %125
  br i1 %126, label %127, label %143

127:                                              ; preds = %91, %95, %99, %101, %103, %109, %105, %113, %115, %119, %121, %123
  %128 = phi i32 [ 3, %123 ], [ 1, %121 ], [ 2, %119 ], [ 1, %115 ], [ 2, %113 ], [ 3, %105 ], [ %111, %109 ], [ 1, %103 ], [ 2, %101 ], [ 3, %99 ], [ 1, %95 ], [ 1, %91 ]
  %129 = sub nsw i32 %12, %3
  %130 = add nsw i32 %129, 1
  %131 = icmp slt i32 %130, %10
  %132 = select i1 %131, i32 %130, i32 %10
  %133 = icmp slt i32 %9, 90
  %134 = add i32 %11, 1
  %135 = select i1 %133, i32 %134, i32 1
  %136 = add i32 %135, %132
  %137 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %138 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %137, align 16
  %139 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %138, i64 0, i32 14
  %140 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %139, align 8
  %141 = getelementptr inbounds i16, i16* %15, i64 -1
  %142 = bitcast i16* %141 to i8*
  tail call void %140(i8* %142, i32 %136, i32 %128) #7
  br label %143

143:                                              ; preds = %123, %121, %115, %103, %95, %91, %127, %79
  %144 = xor i1 %5, true
  %145 = xor i1 %7, true
  %146 = or i1 %144, %145
  br i1 %146, label %207, label %147

147:                                              ; preds = %143
  %148 = add nsw i32 %9, -180
  %149 = icmp slt i32 %148, 0
  %150 = sub i32 180, %9
  %151 = select i1 %149, i32 %150, i32 %148
  %152 = icmp eq i32 %57, 0
  %153 = icmp slt i32 %60, 9
  br i1 %152, label %154, label %176

154:                                              ; preds = %147
  br i1 %153, label %155, label %157

155:                                              ; preds = %154
  %156 = icmp sgt i32 %151, 55
  br i1 %156, label %191, label %207

157:                                              ; preds = %154
  %158 = icmp slt i32 %60, 17
  br i1 %158, label %159, label %161

159:                                              ; preds = %157
  %160 = icmp sgt i32 %151, 39
  br i1 %160, label %191, label %207

161:                                              ; preds = %157
  %162 = icmp slt i32 %60, 25
  br i1 %162, label %163, label %169

163:                                              ; preds = %161
  %164 = icmp sgt i32 %151, 31
  br i1 %164, label %191, label %165

165:                                              ; preds = %163
  %166 = icmp sgt i32 %151, 15
  br i1 %166, label %191, label %167

167:                                              ; preds = %165
  %168 = icmp sgt i32 %151, 7
  br i1 %168, label %191, label %207

169:                                              ; preds = %161
  %170 = icmp sgt i32 %60, 32
  %171 = icmp sgt i32 %151, 31
  %172 = or i1 %170, %171
  br i1 %172, label %191, label %173

173:                                              ; preds = %169
  %174 = icmp sgt i32 %151, 3
  %175 = select i1 %174, i32 2, i32 1
  br label %191

176:                                              ; preds = %147
  br i1 %153, label %177, label %181

177:                                              ; preds = %176
  %178 = icmp sgt i32 %151, 63
  br i1 %178, label %191, label %179

179:                                              ; preds = %177
  %180 = icmp sgt i32 %151, 39
  br i1 %180, label %191, label %207

181:                                              ; preds = %176
  %182 = icmp slt i32 %60, 17
  br i1 %182, label %183, label %187

183:                                              ; preds = %181
  %184 = icmp sgt i32 %151, 47
  br i1 %184, label %191, label %185

185:                                              ; preds = %183
  %186 = icmp sgt i32 %151, 19
  br i1 %186, label %191, label %207

187:                                              ; preds = %181
  %188 = icmp sgt i32 %60, 24
  %189 = icmp sgt i32 %151, 3
  %190 = or i1 %188, %189
  br i1 %190, label %191, label %207

191:                                              ; preds = %155, %159, %163, %165, %167, %173, %169, %177, %179, %183, %185, %187
  %192 = phi i32 [ 3, %187 ], [ 1, %185 ], [ 2, %183 ], [ 1, %179 ], [ 2, %177 ], [ 3, %169 ], [ %175, %173 ], [ 1, %167 ], [ 2, %165 ], [ 3, %163 ], [ 1, %159 ], [ 1, %155 ]
  %193 = sub nsw i32 %13, %4
  %194 = add nsw i32 %193, 1
  %195 = icmp slt i32 %194, %11
  %196 = select i1 %195, i32 %194, i32 %11
  %197 = icmp sgt i32 %9, 180
  %198 = add i32 %10, 1
  %199 = select i1 %197, i32 %198, i32 1
  %200 = add i32 %199, %196
  %201 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %202 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %201, align 16
  %203 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %202, i64 0, i32 14
  %204 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %203, align 8
  %205 = getelementptr inbounds i16, i16* %16, i64 -1
  %206 = bitcast i16* %205 to i8*
  tail call void %204(i8* %206, i32 %200, i32 %192) #7
  br label %207

207:                                              ; preds = %187, %185, %179, %167, %159, %155, %191, %143
  %208 = add nsw i32 %9, -90
  %209 = icmp slt i32 %208, 0
  %210 = sub i32 90, %9
  %211 = select i1 %209, i32 %210, i32 %208
  %212 = icmp sgt i32 %211, 39
  br i1 %212, label %229, label %213

213:                                              ; preds = %207
  %214 = icmp eq i32 %57, 1
  %215 = icmp slt i32 %60, 9
  %216 = icmp slt i32 %60, 17
  %217 = select i1 %214, i1 %215, i1 %216
  %218 = xor i1 %217, true
  %219 = or i1 %81, %218
  br i1 %219, label %229, label %220

220:                                              ; preds = %213
  %221 = icmp slt i32 %9, 90
  %222 = select i1 %221, i32 %11, i32 0
  %223 = add nsw i32 %222, %10
  %224 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %225 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %224, align 16
  %226 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %225, i64 0, i32 15
  %227 = load void (i8*, i32)*, void (i8*, i32)** %226, align 8
  %228 = bitcast i16* %15 to i8*
  tail call void %227(i8* %228, i32 %223) #7
  br label %229

229:                                              ; preds = %207, %213, %220
  %230 = phi i1 [ %217, %213 ], [ %217, %220 ], [ false, %207 ]
  %231 = add nsw i32 %9, -180
  %232 = icmp slt i32 %231, 0
  %233 = sub i32 180, %9
  %234 = select i1 %232, i32 %233, i32 %231
  %235 = icmp sgt i32 %234, 39
  br i1 %235, label %252, label %236

236:                                              ; preds = %229
  %237 = icmp eq i32 %57, 1
  %238 = icmp slt i32 %60, 9
  %239 = icmp slt i32 %60, 17
  %240 = select i1 %237, i1 %238, i1 %239
  %241 = xor i1 %240, true
  %242 = or i1 %145, %241
  br i1 %242, label %252, label %243

243:                                              ; preds = %236
  %244 = icmp sgt i32 %9, 180
  %245 = select i1 %244, i32 %10, i32 0
  %246 = add nsw i32 %245, %11
  %247 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %248 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %247, align 16
  %249 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %248, i64 0, i32 15
  %250 = load void (i8*, i32)*, void (i8*, i32)** %249, align 8
  %251 = bitcast i16* %16 to i8*
  tail call void %250(i8* %251, i32 %246) #7
  br label %252

252:                                              ; preds = %229, %243, %236, %50
  %253 = phi i1 [ false, %50 ], [ %240, %236 ], [ %240, %243 ], [ false, %229 ]
  %254 = phi i1 [ false, %50 ], [ %230, %236 ], [ %230, %243 ], [ %230, %229 ]
  %255 = icmp slt i32 %9, 90
  br i1 %255, label %256, label %269

256:                                              ; preds = %252
  %257 = ashr i32 %9, 1
  %258 = add nsw i32 %257, -1
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds [44 x i16], [44 x i16]* @_ZN7libgav136kDirectionalIntraPredictorDerivativeE, i64 0, i64 %259
  %261 = load i16, i16* %260, align 2
  %262 = sext i16 %261 to i32
  %263 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %264 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %263, align 16
  %265 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %264, i64 0, i32 7
  %266 = load void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)** %265, align 8
  %267 = bitcast i16* %30 to i8*
  %268 = bitcast i16* %15 to i8*
  tail call void %266(i8* %267, i64 %31, i8* %268, i32 %10, i32 %11, i32 %262, i1 zeroext %254) #7
  br label %307

269:                                              ; preds = %252
  %270 = icmp slt i32 %9, 180
  br i1 %270, label %271, label %293

271:                                              ; preds = %269
  %272 = sub nuw nsw i32 180, %9
  %273 = ashr i32 %272, 1
  %274 = add nsw i32 %273, -1
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds [44 x i16], [44 x i16]* @_ZN7libgav136kDirectionalIntraPredictorDerivativeE, i64 0, i64 %275
  %277 = load i16, i16* %276, align 2
  %278 = sext i16 %277 to i32
  %279 = add nsw i32 %9, -90
  %280 = ashr i32 %279, 1
  %281 = add nsw i32 %280, -1
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds [44 x i16], [44 x i16]* @_ZN7libgav136kDirectionalIntraPredictorDerivativeE, i64 0, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = sext i16 %284 to i32
  %286 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %287 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %286, align 16
  %288 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %287, i64 0, i32 8
  %289 = load void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)** %288, align 8
  %290 = bitcast i16* %30 to i8*
  %291 = bitcast i16* %15 to i8*
  %292 = bitcast i16* %16 to i8*
  tail call void %289(i8* %290, i64 %31, i8* %291, i8* %292, i32 %10, i32 %11, i32 %278, i32 %285, i1 zeroext %254, i1 zeroext %253) #7
  br label %307

293:                                              ; preds = %269
  %294 = sub nsw i32 270, %9
  %295 = ashr i32 %294, 1
  %296 = add nsw i32 %295, -1
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds [44 x i16], [44 x i16]* @_ZN7libgav136kDirectionalIntraPredictorDerivativeE, i64 0, i64 %297
  %299 = load i16, i16* %298, align 2
  %300 = sext i16 %299 to i32
  %301 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %302 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %301, align 16
  %303 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %302, i64 0, i32 9
  %304 = load void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)** %303, align 8
  %305 = bitcast i16* %30 to i8*
  %306 = bitcast i16* %16 to i8*
  tail call void %304(i8* %305, i64 %31, i8* %306, i32 %10, i32 %11, i32 %300, i1 zeroext %253) #7
  br label %307

307:                                              ; preds = %256, %293, %271, %41, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN7libgav14Tile17PalettePredictionIhEEvRKNS0_5BlockENS_5PlaneEiiiiNS_13TransformSizeE(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* dereferenceable(88), i8 zeroext, i32, i32, i32, i32, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %9 = zext i8 %7 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %15 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %14, align 8
  %16 = zext i8 %2 to i64
  %17 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %16, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = icmp eq i8 %13, 0
  br i1 %19, label %42, label %20

20:                                               ; preds = %8
  %21 = shl i32 %6, 2
  %22 = shl i32 %5, 2
  %23 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %16, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = icmp ne i8 %2, 0
  %26 = icmp eq i8 %11, 0
  %27 = zext i1 %25 to i64
  %28 = sext i32 %24 to i64
  %29 = sext i32 %3 to i64
  %30 = sext i32 %22 to i64
  %31 = sext i32 %4 to i64
  %32 = sext i32 %21 to i64
  %33 = zext i8 %13 to i64
  %34 = zext i8 %11 to i64
  br label %35

35:                                               ; preds = %43, %20
  %36 = phi i64 [ 0, %20 ], [ %44, %43 ]
  br i1 %26, label %43, label %37

37:                                               ; preds = %35
  %38 = add nsw i64 %36, %32
  %39 = add nsw i64 %36, %31
  %40 = mul nsw i64 %39, %28
  %41 = getelementptr inbounds i8, i8* %18, i64 %40
  br label %46

42:                                               ; preds = %43, %8
  ret void

43:                                               ; preds = %46, %35
  %44 = add nuw nsw i64 %36, 1
  %45 = icmp eq i64 %44, %33
  br i1 %45, label %42, label %35

46:                                               ; preds = %46, %37
  %47 = phi i64 [ 0, %37 ], [ %67, %46 ]
  %48 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %14, align 8
  %49 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %48, i64 0, i32 18, i32 0, i32 0, i32 0
  %50 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %49, align 8
  %51 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %50, i64 0, i32 7, i64 %27, i32 3, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = sext i32 %52 to i64
  %54 = mul nsw i64 %38, %53
  %55 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %50, i64 0, i32 7, i64 %27, i32 3, i32 2
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %54
  %58 = add nsw i64 %47, %30
  %59 = getelementptr inbounds i8, i8* %57, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %15, i64 0, i32 17, i32 1, i64 %16, i64 %61
  %63 = load i16, i16* %62, align 2
  %64 = trunc i16 %63 to i8
  %65 = add nsw i64 %47, %29
  %66 = getelementptr inbounds i8, i8* %41, i64 %65
  store i8 %64, i8* %66, align 1
  %67 = add nuw nsw i64 %47, 1
  %68 = icmp eq i64 %67, %34
  br i1 %68, label %43, label %46
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN7libgav14Tile17PalettePredictionItEEvRKNS0_5BlockENS_5PlaneEiiiiNS_13TransformSizeE(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* dereferenceable(88), i8 zeroext, i32, i32, i32, i32, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %9 = zext i8 %7 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %15 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %14, align 8
  %16 = zext i8 %2 to i64
  %17 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %16, i32 2
  %18 = bitcast i8** %17 to i16**
  %19 = load i16*, i16** %18, align 8
  %20 = icmp eq i8 %13, 0
  br i1 %20, label %44, label %21

21:                                               ; preds = %8
  %22 = shl i32 %6, 2
  %23 = shl i32 %5, 2
  %24 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %16, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  %27 = icmp ne i8 %2, 0
  %28 = icmp eq i8 %11, 0
  %29 = zext i1 %27 to i64
  %30 = sext i32 %26 to i64
  %31 = sext i32 %3 to i64
  %32 = sext i32 %23 to i64
  %33 = sext i32 %4 to i64
  %34 = sext i32 %22 to i64
  %35 = zext i8 %13 to i64
  %36 = zext i8 %11 to i64
  br label %37

37:                                               ; preds = %45, %21
  %38 = phi i64 [ 0, %21 ], [ %46, %45 ]
  br i1 %28, label %45, label %39

39:                                               ; preds = %37
  %40 = add nsw i64 %38, %34
  %41 = add nsw i64 %38, %33
  %42 = mul nsw i64 %41, %30
  %43 = getelementptr inbounds i16, i16* %19, i64 %42
  br label %48

44:                                               ; preds = %45, %8
  ret void

45:                                               ; preds = %48, %37
  %46 = add nuw nsw i64 %38, 1
  %47 = icmp eq i64 %46, %35
  br i1 %47, label %44, label %37

48:                                               ; preds = %48, %39
  %49 = phi i64 [ 0, %39 ], [ %68, %48 ]
  %50 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %14, align 8
  %51 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %50, i64 0, i32 18, i32 0, i32 0, i32 0
  %52 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %51, align 8
  %53 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %52, i64 0, i32 7, i64 %29, i32 3, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %54 to i64
  %56 = mul nsw i64 %40, %55
  %57 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %52, i64 0, i32 7, i64 %29, i32 3, i32 2
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 %56
  %60 = add nsw i64 %49, %32
  %61 = getelementptr inbounds i8, i8* %59, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %15, i64 0, i32 17, i32 1, i64 %16, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = add nsw i64 %49, %31
  %67 = getelementptr inbounds i16, i16* %43, i64 %66
  store i16 %65, i16* %67, align 2
  %68 = add nuw nsw i64 %49, 1
  %69 = icmp eq i64 %68, %36
  br i1 %69, label %45, label %48
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN7libgav14Tile24ChromaFromLumaPredictionIhEEvRKNS0_5BlockENS_5PlaneEiiNS_13TransformSizeE(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* dereferenceable(88), i8 zeroext, i32, i32, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %7 = zext i8 %2 to i64
  %8 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %7
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %15 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %14, align 8
  %16 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %15, i64 0, i32 18, i32 0, i32 0, i32 0
  %17 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %16, align 8
  %18 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 15
  %19 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %18, align 8
  %20 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %19, i64 0, i32 4
  %21 = load i8, i8* %20, align 16, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %6
  %24 = zext i8 %5 to i64
  br label %56

25:                                               ; preds = %6
  %26 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = shl i32 %3, %10
  %31 = shl i32 %4, %13
  %32 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %33 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %32, align 16
  %34 = zext i8 %5 to i64
  %35 = add nsw i32 %13, %10
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %33, i64 0, i32 4, i64 %34, i64 %36
  %38 = load void ([32 x i16]*, i32, i32, i8*, i64)*, void ([32 x i16]*, i32, i32, i8*, i64)** %37, align 8
  %39 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %19, i64 0, i32 1
  %40 = bitcast %union.anon.137* %39 to [32 x i16]*
  %41 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %17, i64 0, i32 5
  %42 = load i32, i32* %41, align 8
  %43 = sub nsw i32 %42, %30
  %44 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %17, i64 0, i32 6
  %45 = load i32, i32* %44, align 4
  %46 = sub nsw i32 %45, %31
  %47 = sext i32 %31 to i64
  %48 = sext i32 %29 to i64
  %49 = mul nsw i64 %48, %47
  %50 = getelementptr inbounds i8, i8* %27, i64 %49
  %51 = sext i32 %30 to i64
  %52 = getelementptr inbounds i8, i8* %50, i64 %51
  tail call void %38([32 x i16]* %40, i32 %43, i32 %46, i8* %52, i64 %48) #7
  %53 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %18, align 8
  %54 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %53, i64 0, i32 4
  store i8 1, i8* %54, align 16
  %55 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %18, align 8
  br label %56

56:                                               ; preds = %23, %25
  %57 = phi i64 [ %24, %23 ], [ %34, %25 ]
  %58 = phi %"struct.libgav1::TileScratchBuffer"* [ %19, %23 ], [ %55, %25 ]
  %59 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %7, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %7, i32 2
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %64 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %63, align 16
  %65 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %64, i64 0, i32 3, i64 %57
  %66 = load void (i8*, i64, [32 x i16]*, i32)*, void (i8*, i64, [32 x i16]*, i32)** %65, align 8
  %67 = sext i32 %4 to i64
  %68 = sext i32 %60 to i64
  %69 = mul nsw i64 %68, %67
  %70 = getelementptr inbounds i8, i8* %62, i64 %69
  %71 = sext i32 %3 to i64
  %72 = getelementptr inbounds i8, i8* %70, i64 %71
  %73 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %58, i64 0, i32 1
  %74 = bitcast %union.anon.137* %73 to [32 x i16]*
  %75 = icmp eq i8 %2, 1
  %76 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %17, i64 0, i32 3
  %77 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %17, i64 0, i32 4
  %78 = select i1 %75, i8* %76, i8* %77
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  tail call void %66(i8* %72, i64 %68, [32 x i16]* %74, i32 %80) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN7libgav14Tile24ChromaFromLumaPredictionItEEvRKNS0_5BlockENS_5PlaneEiiNS_13TransformSizeE(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* dereferenceable(88), i8 zeroext, i32, i32, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %7 = zext i8 %2 to i64
  %8 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %7
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %15 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %14, align 8
  %16 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %15, i64 0, i32 18, i32 0, i32 0, i32 0
  %17 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %16, align 8
  %18 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 15
  %21 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %20, align 8
  %22 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %21, i64 0, i32 4
  %23 = load i8, i8* %22, align 16, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %6
  %26 = zext i8 %5 to i64
  br label %60

27:                                               ; preds = %6
  %28 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 0, i32 2
  %29 = bitcast i8** %28 to i16**
  %30 = load i16*, i16** %29, align 8
  %31 = ashr i32 %19, 1
  %32 = shl i32 %3, %10
  %33 = shl i32 %4, %13
  %34 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %35 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %34, align 16
  %36 = zext i8 %5 to i64
  %37 = add nsw i32 %13, %10
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %35, i64 0, i32 4, i64 %36, i64 %38
  %40 = load void ([32 x i16]*, i32, i32, i8*, i64)*, void ([32 x i16]*, i32, i32, i8*, i64)** %39, align 8
  %41 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %21, i64 0, i32 1
  %42 = bitcast %union.anon.137* %41 to [32 x i16]*
  %43 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %17, i64 0, i32 5
  %44 = load i32, i32* %43, align 8
  %45 = sub nsw i32 %44, %32
  %46 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %17, i64 0, i32 6
  %47 = load i32, i32* %46, align 4
  %48 = sub nsw i32 %47, %33
  %49 = sext i32 %33 to i64
  %50 = sext i32 %31 to i64
  %51 = mul nsw i64 %50, %49
  %52 = getelementptr inbounds i16, i16* %30, i64 %51
  %53 = sext i32 %32 to i64
  %54 = getelementptr inbounds i16, i16* %52, i64 %53
  %55 = bitcast i16* %54 to i8*
  %56 = sext i32 %19 to i64
  tail call void %40([32 x i16]* %42, i32 %45, i32 %48, i8* %55, i64 %56) #7
  %57 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %20, align 8
  %58 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %57, i64 0, i32 4
  store i8 1, i8* %58, align 16
  %59 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %20, align 8
  br label %60

60:                                               ; preds = %25, %27
  %61 = phi i64 [ %26, %25 ], [ %36, %27 ]
  %62 = phi %"struct.libgav1::TileScratchBuffer"* [ %21, %25 ], [ %59, %27 ]
  %63 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %7, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = ashr i32 %64, 1
  %66 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %7, i32 2
  %67 = bitcast i8** %66 to i16**
  %68 = load i16*, i16** %67, align 8
  %69 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %70 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %69, align 16
  %71 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %70, i64 0, i32 3, i64 %61
  %72 = load void (i8*, i64, [32 x i16]*, i32)*, void (i8*, i64, [32 x i16]*, i32)** %71, align 8
  %73 = sext i32 %4 to i64
  %74 = sext i32 %65 to i64
  %75 = mul nsw i64 %74, %73
  %76 = getelementptr inbounds i16, i16* %68, i64 %75
  %77 = sext i32 %3 to i64
  %78 = getelementptr inbounds i16, i16* %76, i64 %77
  %79 = bitcast i16* %78 to i8*
  %80 = sext i32 %64 to i64
  %81 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %62, i64 0, i32 1
  %82 = bitcast %union.anon.137* %81 to [32 x i16]*
  %83 = icmp eq i8 %2, 1
  %84 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %17, i64 0, i32 3
  %85 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %17, i64 0, i32 4
  %86 = select i1 %83, i8* %84, i8* %85
  %87 = load i8, i8* %86, align 1
  %88 = sext i8 %87 to i32
  tail call void %72(i8* %79, i64 %80, [32 x i16]* %82, i32 %88) #7
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7libgav14Tile18IsSmoothPredictionEiiNS_5PlaneE(%"class.libgav1::Tile"* nocapture readonly, i32, i32, i8 zeroext) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %6 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %5, align 32
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %6, i64 0, i32 4, i32 3, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %10, %7
  %12 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %6, i64 0, i32 4, i32 3, i32 2
  %13 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %12, align 8
  %14 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %13, i64 %11
  %15 = sext i32 %2 to i64
  %16 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %14, i64 %15
  %17 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %16, align 8
  %18 = icmp eq i8 %3, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %4
  %20 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %17, i64 0, i32 9
  br label %27

21:                                               ; preds = %4
  %22 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %17, i64 0, i32 14, i64 0
  %23 = load i8, i8* %22, align 1
  %24 = icmp sgt i8 %23, 0
  br i1 %24, label %34, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %17, i64 0, i32 10
  br label %27

27:                                               ; preds = %25, %19
  %28 = phi i8* [ %20, %19 ], [ %26, %25 ]
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl i32 1, %30
  %32 = and i32 %31, 3584
  %33 = icmp ne i32 %32, 0
  br label %34

34:                                               ; preds = %21, %27
  %35 = phi i1 [ %33, %27 ], [ false, %21 ]
  ret i1 %35
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK7libgav14Tile22GetIntraEdgeFilterTypeERKNS0_5BlockENS_5PlaneE(%"class.libgav1::Tile"* nocapture readonly, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88), i8 zeroext) local_unnamed_addr #2 align 2 {
  %4 = zext i8 %2 to i64
  %5 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %4
  %6 = load i8, i8* %5, align 1
  %7 = sext i8 %6 to i32
  %8 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %4
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 3, i64 %4
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %54, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 6
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, %10
  %18 = xor i32 %17, -1
  %19 = add i32 %16, %18
  %20 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 7
  %21 = load i32, i32* %20, align 8
  %22 = xor i32 %21, -1
  %23 = and i32 %22, %7
  %24 = add nsw i32 %23, %21
  %25 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %26 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %25, align 32
  %27 = sext i32 %19 to i64
  %28 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %26, i64 0, i32 4, i32 3, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = mul nsw i64 %30, %27
  %32 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %26, i64 0, i32 4, i32 3, i32 2
  %33 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %32, align 8
  %34 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %33, i64 %31
  %35 = sext i32 %24 to i64
  %36 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %34, i64 %35
  %37 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %36, align 8
  %38 = icmp eq i8 %2, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %14
  %40 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %37, i64 0, i32 9
  br label %47

41:                                               ; preds = %14
  %42 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %37, i64 0, i32 14, i64 0
  %43 = load i8, i8* %42, align 1
  %44 = icmp sgt i8 %43, 0
  br i1 %44, label %54, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %37, i64 0, i32 10
  br label %47

47:                                               ; preds = %39, %45
  %48 = phi i8* [ %40, %39 ], [ %46, %45 ]
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = shl i32 1, %50
  %52 = and i32 %51, 3584
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %99

54:                                               ; preds = %47, %41, %3
  %55 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 4, i64 %4
  %56 = load i8, i8* %55, align 1, !range !2
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %99, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 6
  %60 = load i32, i32* %59, align 4
  %61 = xor i32 %60, -1
  %62 = and i32 %61, %10
  %63 = add nsw i32 %62, %60
  %64 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 7
  %65 = load i32, i32* %64, align 8
  %66 = and i32 %65, %7
  %67 = xor i32 %66, -1
  %68 = add i32 %65, %67
  %69 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %70 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %69, align 32
  %71 = sext i32 %63 to i64
  %72 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %70, i64 0, i32 4, i32 3, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %73 to i64
  %75 = mul nsw i64 %74, %71
  %76 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %70, i64 0, i32 4, i32 3, i32 2
  %77 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %76, align 8
  %78 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %77, i64 %75
  %79 = sext i32 %68 to i64
  %80 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %78, i64 %79
  %81 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %80, align 8
  %82 = icmp eq i8 %2, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %58
  %84 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %81, i64 0, i32 9
  br label %91

85:                                               ; preds = %58
  %86 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %81, i64 0, i32 14, i64 0
  %87 = load i8, i8* %86, align 1
  %88 = icmp sgt i8 %87, 0
  br i1 %88, label %98, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %81, i64 0, i32 10
  br label %91

91:                                               ; preds = %83, %89
  %92 = phi i8* [ %84, %83 ], [ %90, %89 ]
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = shl i32 1, %94
  %96 = and i32 %95, 3584
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %91, %85
  br label %99

99:                                               ; preds = %91, %47, %54, %98
  %100 = phi i32 [ 1, %47 ], [ 1, %91 ], [ 0, %98 ], [ 0, %54 ]
  ret i32 %100
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav14Tile20InterIntraPredictionEPtPKhlRKNS_20PredictionParametersEiiiiPhl(%"class.libgav1::Tile"* nocapture readonly, i16*, i8*, i64, %"struct.libgav1::PredictionParameters"* nocapture readonly dereferenceable(352), i32, i32, i32, i32, i8*, i64) local_unnamed_addr #0 align 2 {
  %12 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %13 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %12, align 32
  %14 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %13, i64 0, i32 33, i32 0
  %15 = load i8, i8* %14, align 4
  %16 = icmp sgt i8 %15, 8
  br i1 %16, label %17, label %34

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %19 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %18, align 16
  %20 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %4, i64 0, i32 10
  %21 = load i8, i8* %20, align 2, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %19, i64 0, i32 20, i64 0, i64 1
  br label %29

25:                                               ; preds = %17
  %26 = add nsw i32 %8, %7
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %19, i64 0, i32 20, i64 %27, i64 1
  br label %29

29:                                               ; preds = %23, %25
  %30 = phi void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** [ %24, %23 ], [ %28, %25 ]
  %31 = load void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %30, align 8
  %32 = bitcast i16* %1 to i8*
  %33 = lshr i64 %10, 1
  tail call void %31(i8* %32, i8* %9, i64 %33, i8* %2, i64 %3, i32 %5, i32 %6, i8* %9, i64 %10) #7
  br label %46

34:                                               ; preds = %11
  %35 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %4, i64 0, i32 10
  %36 = load i8, i8* %35, align 2, !range !2
  %37 = icmp eq i8 %36, 0
  %38 = add nsw i32 %8, %7
  %39 = sext i32 %38 to i64
  %40 = select i1 %37, i64 0, i64 %39
  %41 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %42 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %41, align 16
  %43 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %42, i64 0, i32 13, i64 %40
  %44 = load void (i8*, i8*, i64, i8*, i64, i32, i32)*, void (i8*, i8*, i64, i8*, i64, i32, i32)** %43, align 8
  %45 = bitcast i16* %1 to i8*
  tail call void %44(i8* %45, i8* %9, i64 %10, i8* %2, i64 %3, i32 %5, i32 %6) #7
  br label %46

46:                                               ; preds = %34, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav14Tile23CompoundInterPredictionERKNS0_5BlockEPKhliiiiiiPhl(%"class.libgav1::Tile"* nocapture readonly, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88), i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64) local_unnamed_addr #0 align 2 {
  %13 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %14 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %13, align 8
  %15 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %14, i64 0, i32 18, i32 0, i32 0, i32 0
  %16 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %15, align 8
  %17 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 15
  %18 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %17, align 8
  %19 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %18, i64 0, i32 1, i32 0
  %20 = bitcast [2 x [16384 x i16]]* %19 to i8*
  %21 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %18, i64 0, i32 1, i32 0, i64 1, i64 0
  %22 = bitcast i16* %21 to i8*
  %23 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %16, i64 0, i32 15
  %24 = load i8, i8* %23, align 2
  switch i8 %24, label %34 [
    i8 0, label %25
    i8 1, label %25
    i8 4, label %33
  ]

25:                                               ; preds = %12, %12
  %26 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %27 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %26, align 16
  %28 = add nsw i32 %7, %6
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %27, i64 0, i32 20, i64 %29, i64 0
  %31 = load void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %30, align 8
  %32 = sext i32 %4 to i64
  tail call void %31(i8* %20, i8* %22, i64 %32, i8* %2, i64 %3, i32 %4, i32 %5, i8* %10, i64 %11) #7
  br label %39

33:                                               ; preds = %12
  tail call void @_ZN7libgav14Tile26DistanceWeightedPredictionEPvS1_iiiiPhl(%"class.libgav1::Tile"* %0, i8* %20, i8* %22, i32 %4, i32 %5, i32 %8, i32 %9, i8* %10, i64 %11)
  br label %39

34:                                               ; preds = %12
  %35 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %36 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %35, align 16
  %37 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %36, i64 0, i32 0
  %38 = load void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i8*, i32, i32, i8*, i64)** %37, align 8
  tail call void %38(i8* %20, i8* %22, i32 %4, i32 %5, i8* %10, i64 %11) #7
  br label %39

39:                                               ; preds = %34, %33, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav14Tile26DistanceWeightedPredictionEPvS1_iiiiPhl(%"class.libgav1::Tile"* nocapture readonly, i8*, i8*, i32, i32, i32, i32, i8*, i64) local_unnamed_addr #0 align 2 {
  %10 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %11 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %10, align 32
  %12 = sext i32 %5 to i64
  %13 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %11, i64 0, i32 4, i32 3, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = sext i32 %14 to i64
  %16 = mul nsw i64 %15, %12
  %17 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %11, i64 0, i32 4, i32 3, i32 2
  %18 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %17, align 8
  %19 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %18, i64 %16
  %20 = sext i32 %6 to i64
  %21 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %19, i64 %20
  %22 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %21, align 8
  %23 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 42
  %24 = load %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::RefCountedBuffer"** %23, align 16
  %25 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %22, i64 0, i32 14, i64 0
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i64
  %28 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %24, i64 0, i32 32, i32 1, i32 0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = icmp slt i32 %33, 31
  %35 = select i1 %34, i32 %33, i32 31
  %36 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %22, i64 0, i32 14, i64 1
  %37 = load i8, i8* %36, align 1
  %38 = sext i8 %37 to i64
  %39 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %24, i64 0, i32 32, i32 1, i32 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp slt i32 %41, 0
  %43 = sub nsw i32 0, %41
  %44 = select i1 %42, i32 %43, i32 %41
  %45 = icmp slt i32 %44, 31
  %46 = select i1 %45, i32 %44, i32 31
  %47 = icmp sle i32 %46, %35
  %48 = icmp eq i32 %46, 0
  %49 = icmp eq i32 %35, 0
  %50 = or i1 %48, %49
  %51 = zext i1 %47 to i64
  br i1 %50, label %63, label %52

52:                                               ; preds = %9
  %53 = xor i1 %47, true
  %54 = zext i1 %53 to i64
  %55 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceWeightE, i64 0, i64 0, i64 %51
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceWeightE, i64 0, i64 0, i64 %54
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = mul nuw nsw i32 %46, %57
  %62 = mul nuw nsw i32 %35, %60
  br i1 %47, label %70, label %68

63:                                               ; preds = %9
  %64 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceLookupE, i64 0, i64 3, i64 %51
  %65 = xor i1 %47, true
  %66 = zext i1 %65 to i64
  %67 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceLookupE, i64 0, i64 3, i64 %66
  br label %103

68:                                               ; preds = %52
  %69 = icmp ult i32 %61, %62
  br i1 %69, label %81, label %72

70:                                               ; preds = %52
  %71 = icmp ugt i32 %61, %62
  br i1 %71, label %81, label %72

72:                                               ; preds = %70, %68
  %73 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceWeightE, i64 0, i64 1, i64 %51
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceWeightE, i64 0, i64 1, i64 %54
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = mul nuw nsw i32 %46, %75
  %80 = mul nuw nsw i32 %35, %78
  br i1 %47, label %87, label %85

81:                                               ; preds = %102, %100, %98, %87, %85, %70, %68
  %82 = phi i64 [ 0, %68 ], [ 0, %70 ], [ 1, %85 ], [ 1, %87 ], [ 2, %98 ], [ 2, %100 ], [ 3, %102 ]
  %83 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceLookupE, i64 0, i64 %82, i64 %51
  %84 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceLookupE, i64 0, i64 %82, i64 %54
  br label %103

85:                                               ; preds = %72
  %86 = icmp ult i32 %79, %80
  br i1 %86, label %81, label %89

87:                                               ; preds = %72
  %88 = icmp ugt i32 %79, %80
  br i1 %88, label %81, label %89

89:                                               ; preds = %87, %85
  %90 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceWeightE, i64 0, i64 2, i64 %51
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = getelementptr inbounds [4 x [2 x i8]], [4 x [2 x i8]]* @_ZN7libgav112_GLOBAL__N_124kQuantizedDistanceWeightE, i64 0, i64 2, i64 %54
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %46, %92
  %97 = mul nuw nsw i32 %35, %95
  br i1 %47, label %100, label %98

98:                                               ; preds = %89
  %99 = icmp ult i32 %96, %97
  br i1 %99, label %81, label %102

100:                                              ; preds = %89
  %101 = icmp ugt i32 %96, %97
  br i1 %101, label %81, label %102

102:                                              ; preds = %100, %98
  br label %81

103:                                              ; preds = %63, %81
  %104 = phi i8* [ %64, %63 ], [ %83, %81 ]
  %105 = phi i8* [ %67, %63 ], [ %84, %81 ]
  %106 = load i8, i8* %105, align 1
  %107 = load i8, i8* %104, align 1
  %108 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %109 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %108, align 16
  %110 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %109, i64 0, i32 10
  %111 = load void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)** %110, align 8
  tail call void %111(i8* %1, i8* %2, i8 zeroext %107, i8 zeroext %106, i32 %3, i32 %4, i8* %7, i64 %8) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.libgav1::GlobalMotion"* @_ZNK7libgav14Tile13GetWarpParamsERKNS0_5BlockENS_5PlaneEiiRKNS_20PredictionParametersENS_18ReferenceFrameTypeEPbPNS_12GlobalMotionESB_(%"class.libgav1::Tile"* nocapture readonly, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88), i8 zeroext, i32, i32, %"struct.libgav1::PredictionParameters"* dereferenceable(352), i8 signext, i8* nocapture, %"struct.libgav1::GlobalMotion"*, %"struct.libgav1::GlobalMotion"*) local_unnamed_addr #0 align 2 {
  %11 = icmp slt i32 %3, 8
  %12 = icmp slt i32 %4, 8
  %13 = or i1 %11, %12
  br i1 %13, label %92, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %16 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %15, align 8
  %17 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %16, i64 0, i32 36
  %18 = load i8, i8* %17, align 8
  %19 = icmp eq i8 %18, 1
  br i1 %19, label %92, label %20

20:                                               ; preds = %14
  %21 = icmp eq i8 %2, 0
  br i1 %21, label %22, label %46

22:                                               ; preds = %20
  %23 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %5, i64 0, i32 14
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 2
  br i1 %25, label %26, label %44

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %5, i64 0, i32 22
  %28 = load i32, i32* %27, align 4
  %29 = lshr i32 %3, 2
  %30 = lshr i32 %4, 2
  %31 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 6
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 7
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %36 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %35, align 8
  %37 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %36, i64 0, i32 16
  %38 = bitcast %"union.libgav1::CompoundMotionVector"* %37 to %"struct.libgav1::MotionVector"*
  %39 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %5, i64 0, i32 23, i64 0
  %40 = tail call zeroext i1 @_ZN7libgav114WarpEstimationEiiiiiRKNS_12MotionVectorEPA4_KiPNS_12GlobalMotionE(i32 %28, i32 %29, i32 %30, i32 %32, i32 %34, %"struct.libgav1::MotionVector"* dereferenceable(4) %38, [4 x i32]* %39, %"struct.libgav1::GlobalMotion"* %9) #7
  br i1 %40, label %41, label %44

41:                                               ; preds = %26
  %42 = tail call zeroext i1 @_ZN7libgav110SetupShearEPNS_12GlobalMotionE(%"struct.libgav1::GlobalMotion"* %9) #7
  %43 = zext i1 %42 to i8
  br label %44

44:                                               ; preds = %41, %26, %22
  %45 = phi i8 [ 0, %26 ], [ 0, %22 ], [ %43, %41 ]
  store i8 %45, i8* %7, align 1
  br label %46

46:                                               ; preds = %44, %20
  %47 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %5, i64 0, i32 14
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 2
  br i1 %49, label %50, label %53

50:                                               ; preds = %46
  %51 = load i8, i8* %7, align 1, !range !2
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %92

53:                                               ; preds = %50, %46
  %54 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %15, align 8
  %55 = sext i8 %6 to i64
  %56 = add nsw i64 %55, -1
  %57 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %54, i64 0, i32 52, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 23
  %60 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %59, align 8
  %61 = sext i8 %58 to i64
  %62 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %60, i64 0, i32 0, i64 %61, i32 0
  %63 = load %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::RefCountedBuffer"** %62, align 8
  %64 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %63, i64 0, i32 15
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %54, i64 0, i32 4
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %65, %67
  br i1 %68, label %69, label %92

69:                                               ; preds = %53
  %70 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %63, i64 0, i32 17
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %54, i64 0, i32 5
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %71, %73
  br i1 %74, label %75, label %92

75:                                               ; preds = %69
  %76 = icmp eq i8 %6, 0
  br i1 %76, label %81, label %77

77:                                               ; preds = %75
  %78 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 0
  %79 = load i8, i8* %78, align 4
  %80 = icmp ugt i8 %79, 1
  br label %81

81:                                               ; preds = %75, %77
  %82 = phi i1 [ %80, %77 ], [ true, %75 ]
  %83 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %84 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %83, align 8
  %85 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %84, i64 0, i32 6
  %86 = load i8, i8* %85, align 2, !range !2
  %87 = icmp ne i8 %86, 0
  %88 = and i1 %82, %87
  br i1 %88, label %89, label %91

89:                                               ; preds = %81
  %90 = tail call zeroext i1 @_ZN7libgav110SetupShearEPNS_12GlobalMotionE(%"struct.libgav1::GlobalMotion"* %8) #7
  br i1 %90, label %92, label %91

91:                                               ; preds = %89, %81
  br label %92

92:                                               ; preds = %69, %53, %91, %89, %50, %10, %14
  %93 = phi %"struct.libgav1::GlobalMotion"* [ null, %14 ], [ null, %10 ], [ %9, %50 ], [ %8, %89 ], [ null, %91 ], [ null, %69 ], [ null, %53 ]
  ret %"struct.libgav1::GlobalMotion"* %93
}

declare zeroext i1 @_ZN7libgav114WarpEstimationEiiiiiRKNS_12MotionVectorEPA4_KiPNS_12GlobalMotionE(i32, i32, i32, i32, i32, %"struct.libgav1::MotionVector"* dereferenceable(4), [4 x i32]*, %"struct.libgav1::GlobalMotion"*) local_unnamed_addr #3

declare zeroext i1 @_ZN7libgav110SetupShearEPNS_12GlobalMotionE(%"struct.libgav1::GlobalMotion"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav14Tile15InterPredictionERKNS0_5BlockENS_5PlaneEiiiiiiPbPNS_12GlobalMotionE(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88), i8 zeroext, i32, i32, i32, i32, i32, i32, i8* nocapture, %"struct.libgav1::GlobalMotion"*) local_unnamed_addr #0 align 2 {
  %12 = alloca %"struct.libgav1::GlobalMotion", align 4
  %13 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %14 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %13, align 32
  %15 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %14, i64 0, i32 33, i32 0
  %16 = load i8, i8* %15, align 4
  %17 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %18 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %17, align 8
  %19 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %20 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %19, align 32
  %21 = sext i32 %7 to i64
  %22 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %20, i64 0, i32 4, i32 3, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = mul nsw i64 %24, %21
  %26 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %20, i64 0, i32 4, i32 3, i32 2
  %27 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %26, align 8
  %28 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %27, i64 %25
  %29 = sext i32 %8 to i64
  %30 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %28, i64 %29
  %31 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %30, align 8
  %32 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %31, i64 0, i32 14, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = icmp sgt i8 %33, 0
  %35 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %18, i64 0, i32 14, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, 0
  %38 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %18, i64 0, i32 18, i32 0, i32 0, i32 0
  %39 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %38, align 8
  %40 = icmp sgt i8 %16, 8
  %41 = zext i8 %2 to i64
  br i1 %40, label %42, label %57

42:                                               ; preds = %11
  %43 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %41, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = ashr i32 %44, 1
  %46 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %41, i32 2
  %47 = bitcast i8** %46 to i16**
  %48 = load i16*, i16** %47, align 8
  %49 = sext i32 %4 to i64
  %50 = sext i32 %45 to i64
  %51 = mul nsw i64 %50, %49
  %52 = getelementptr inbounds i16, i16* %48, i64 %51
  %53 = sext i32 %3 to i64
  %54 = getelementptr inbounds i16, i16* %52, i64 %53
  %55 = bitcast i16* %54 to i8*
  %56 = sext i32 %44 to i64
  br label %68

57:                                               ; preds = %11
  %58 = sext i32 %4 to i64
  %59 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %41, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = sext i32 %60 to i64
  %62 = mul nsw i64 %61, %58
  %63 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %41, i32 2
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 %62
  %66 = sext i32 %3 to i64
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  br label %68

68:                                               ; preds = %42, %57
  %69 = phi i64 [ %56, %42 ], [ %61, %57 ]
  %70 = phi i8* [ %55, %42 ], [ %67, %57 ]
  %71 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %12, i64 0, i32 0
  %72 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %73 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %39, i64 0, i32 8
  %74 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %31, i64 0, i32 16
  %75 = bitcast %"union.libgav1::CompoundMotionVector"* %74 to [2 x %"struct.libgav1::MotionVector"]*
  %76 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 15
  %77 = select i1 %34, i64 2, i64 1
  br label %78

78:                                               ; preds = %68, %106
  %79 = phi i64 [ 0, %68 ], [ %107, %106 ]
  %80 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %31, i64 0, i32 14, i64 %79
  %81 = load i8, i8* %80, align 1
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %71) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %71, i8 -86, i64 36, i1 false)
  %82 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %72, align 8
  %83 = sext i8 %81 to i64
  %84 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %82, i64 0, i32 14, i32 0, i64 %83, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %71, i8* align 4 %84, i64 36, i1 false)
  %85 = call %"struct.libgav1::GlobalMotion"* @_ZNK7libgav14Tile13GetWarpParamsERKNS0_5BlockENS_5PlaneEiiRKNS_20PredictionParametersENS_18ReferenceFrameTypeEPbPNS_12GlobalMotionESB_(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %2, i32 %5, i32 %6, %"struct.libgav1::PredictionParameters"* dereferenceable(352) %39, i8 signext %81, i8* %9, %"struct.libgav1::GlobalMotion"* nonnull %12, %"struct.libgav1::GlobalMotion"* %10)
  %86 = icmp eq %"struct.libgav1::GlobalMotion"* %85, null
  br i1 %86, label %91, label %87

87:                                               ; preds = %78
  %88 = trunc i64 %79 to i32
  %89 = call zeroext i1 @_ZN7libgav14Tile16BlockWarpProcessERKNS0_5BlockENS_5PlaneEiiiiiPNS_12GlobalMotionEbbPhl(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %2, i32 %88, i32 %3, i32 %4, i32 %5, i32 %6, %"struct.libgav1::GlobalMotion"* nonnull %85, i1 zeroext %34, i1 zeroext %37, i8* %70, i64 %69)
  br i1 %89, label %106, label %90

90:                                               ; preds = %87
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %71) #7
  br label %248

91:                                               ; preds = %78
  %92 = load i8, i8* %73, align 8, !range !2
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %100

94:                                               ; preds = %91
  %95 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %72, align 8
  %96 = add nsw i64 %83, -1
  %97 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %95, i64 0, i32 52, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = sext i8 %98 to i32
  br label %100

100:                                              ; preds = %91, %94
  %101 = phi i32 [ %99, %94 ], [ -1, %91 ]
  %102 = getelementptr inbounds [2 x %"struct.libgav1::MotionVector"], [2 x %"struct.libgav1::MotionVector"]* %75, i64 0, i64 %79
  %103 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %76, align 8
  %104 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %103, i64 0, i32 1, i32 0, i64 %79, i64 0
  %105 = call zeroext i1 @_ZN7libgav14Tile20BlockInterPredictionERKNS0_5BlockENS_5PlaneEiRKNS_12MotionVectorEiiiiiiPtbbPhl(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %2, i32 %101, %"struct.libgav1::MotionVector"* dereferenceable(4) %102, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i16* %104, i1 zeroext %34, i1 zeroext %37, i8* %70, i64 %69)
  br i1 %105, label %106, label %109

106:                                              ; preds = %87, %100
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %71) #7
  %107 = add nuw nsw i64 %79, 1
  %108 = icmp ult i64 %107, %77
  br i1 %108, label %78, label %110

109:                                              ; preds = %100
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %71) #7
  br label %248

110:                                              ; preds = %106
  %111 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %41
  %112 = load i8, i8* %111, align 1
  %113 = sext i8 %112 to i32
  %114 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %41
  %115 = load i8, i8* %114, align 1
  %116 = sext i8 %115 to i32
  %117 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %39, i64 0, i32 15
  %118 = load i8, i8* %117, align 2
  switch i8 %118, label %181 [
    i8 0, label %119
    i8 3, label %143
    i8 1, label %156
  ]

119:                                              ; preds = %110
  %120 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 26
  %121 = load %"struct.std::__1::array.40"*, %"struct.std::__1::array.40"** %120, align 16
  %122 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 2
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = add nsw i64 %124, -4
  %126 = icmp ugt i8 %123, 7
  %127 = zext i1 %126 to i64
  %128 = sub nsw i64 %125, %127
  %129 = icmp ugt i8 %123, 11
  %130 = zext i1 %129 to i64
  %131 = sub nsw i64 %128, %130
  %132 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %39, i64 0, i32 12
  %133 = load i32, i32* %132, align 8
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %39, i64 0, i32 11
  %136 = load i32, i32* %135, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds %"struct.std::__1::array.40", %"struct.std::__1::array.40"* %121, i64 0, i32 0, i64 %131, i32 0, i64 %134, i32 0, i64 %137, i32 3, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %"struct.std::__1::array.40", %"struct.std::__1::array.40"* %121, i64 0, i32 0, i64 %131, i32 0, i64 %134, i32 0, i64 %137, i32 3, i32 2
  %141 = load i8*, i8** %140, align 8
  %142 = sext i32 %139 to i64
  br label %181

143:                                              ; preds = %110
  %144 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %39, i64 0, i32 9
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i64
  %147 = call i32 @llvm.ctlz.i32(i32 %5, i1 true) #7, !range !38
  %148 = sub nsw i32 29, %147
  %149 = sext i32 %148 to i64
  %150 = call i32 @llvm.ctlz.i32(i32 %6, i1 true) #7, !range !38
  %151 = sub nsw i32 29, %150
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds [4 x [4 x [4 x i8*]]], [4 x [4 x [4 x i8*]]]* @_ZN7libgav112_GLOBAL__N_116kInterIntraMasksE, i64 0, i64 %146, i64 %149, i64 %152
  %154 = load i8*, i8** %153, align 8
  %155 = sext i32 %5 to i64
  br label %181

156:                                              ; preds = %110
  %157 = icmp eq i8 %2, 0
  br i1 %157, label %158, label %178

158:                                              ; preds = %156
  %159 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %160 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %159, align 16
  %161 = call i32 @llvm.ctlz.i32(i32 %5, i1 true) #7, !range !38
  %162 = sub nsw i32 28, %161
  %163 = sext i32 %162 to i64
  %164 = call i32 @llvm.ctlz.i32(i32 %6, i1 true) #7, !range !38
  %165 = sub nsw i32 28, %164
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %39, i64 0, i32 13
  %168 = load i8, i8* %167, align 4, !range !2
  %169 = zext i8 %168 to i64
  %170 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %160, i64 0, i32 29, i64 %163, i64 %166, i64 %169
  %171 = load void (i8*, i8*, i8*, i64)*, void (i8*, i8*, i8*, i64)** %170, align 8
  %172 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %76, align 8
  %173 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %172, i64 0, i32 1, i32 0
  %174 = bitcast [2 x [16384 x i16]]* %173 to i8*
  %175 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %172, i64 0, i32 1, i32 0, i64 1, i64 0
  %176 = bitcast i16* %175 to i8*
  %177 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %172, i64 0, i32 0, i64 0
  call void %171(i8* %174, i8* %176, i8* %177, i64 128) #7
  br label %178

178:                                              ; preds = %158, %156
  %179 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %76, align 8
  %180 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %179, i64 0, i32 0, i64 0
  br label %181

181:                                              ; preds = %110, %143, %178, %119
  %182 = phi i64 [ %142, %119 ], [ %155, %143 ], [ 128, %178 ], [ 0, %110 ]
  %183 = phi i8* [ %141, %119 ], [ %154, %143 ], [ %180, %178 ], [ null, %110 ]
  br i1 %34, label %184, label %209

184:                                              ; preds = %181
  %185 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %17, align 8
  %186 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %185, i64 0, i32 18, i32 0, i32 0, i32 0
  %187 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %186, align 8
  %188 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %76, align 8
  %189 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %188, i64 0, i32 1, i32 0
  %190 = bitcast [2 x [16384 x i16]]* %189 to i8*
  %191 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %188, i64 0, i32 1, i32 0, i64 1, i64 0
  %192 = bitcast i16* %191 to i8*
  %193 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %187, i64 0, i32 15
  %194 = load i8, i8* %193, align 2
  switch i8 %194, label %204 [
    i8 0, label %195
    i8 1, label %195
    i8 4, label %203
  ]

195:                                              ; preds = %184, %184
  %196 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %197 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %196, align 16
  %198 = add nsw i32 %116, %113
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %197, i64 0, i32 20, i64 %199, i64 0
  %201 = load void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %200, align 8
  %202 = sext i32 %5 to i64
  call void %201(i8* %190, i8* %192, i64 %202, i8* %183, i64 %182, i32 %5, i32 %6, i8* %70, i64 %69) #7
  br label %248

203:                                              ; preds = %184
  call void @_ZN7libgav14Tile26DistanceWeightedPredictionEPvS1_iiiiPhl(%"class.libgav1::Tile"* %0, i8* %190, i8* %192, i32 %5, i32 %6, i32 %7, i32 %8, i8* %70, i64 %69) #7
  br label %248

204:                                              ; preds = %184
  %205 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %206 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %205, align 16
  %207 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %206, i64 0, i32 0
  %208 = load void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i8*, i32, i32, i8*, i64)** %207, align 8
  call void %208(i8* %190, i8* %192, i32 %5, i32 %6, i8* %70, i64 %69) #7
  br label %248

209:                                              ; preds = %181
  %210 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %39, i64 0, i32 14
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 1
  br i1 %212, label %213, label %215

213:                                              ; preds = %209
  %214 = call zeroext i1 @_ZN7libgav14Tile14ObmcPredictionERKNS0_5BlockENS_5PlaneEii(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %2, i32 %5, i32 %6)
  br label %248

215:                                              ; preds = %209
  br i1 %37, label %216, label %248

216:                                              ; preds = %215
  %217 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %76, align 8
  %218 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %217, i64 0, i32 1, i32 0, i64 0, i64 0
  %219 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %13, align 32
  %220 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %219, i64 0, i32 33, i32 0
  %221 = load i8, i8* %220, align 4
  %222 = icmp sgt i8 %221, 8
  br i1 %222, label %223, label %236

223:                                              ; preds = %216
  %224 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %225 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %224, align 16
  %226 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %39, i64 0, i32 10
  %227 = load i8, i8* %226, align 2, !range !2
  %228 = icmp eq i8 %227, 0
  %229 = add nsw i32 %116, %113
  %230 = sext i32 %229 to i64
  %231 = select i1 %228, i64 0, i64 %230
  %232 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %225, i64 0, i32 20, i64 %231, i64 1
  %233 = load void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %232, align 8
  %234 = bitcast i16* %218 to i8*
  %235 = lshr i64 %69, 1
  call void %233(i8* %234, i8* %70, i64 %235, i8* %183, i64 %182, i32 %5, i32 %6, i8* %70, i64 %69) #7
  br label %248

236:                                              ; preds = %216
  %237 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %39, i64 0, i32 10
  %238 = load i8, i8* %237, align 2, !range !2
  %239 = icmp eq i8 %238, 0
  %240 = add nsw i32 %116, %113
  %241 = sext i32 %240 to i64
  %242 = select i1 %239, i64 0, i64 %241
  %243 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %244 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %243, align 16
  %245 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %244, i64 0, i32 13, i64 %242
  %246 = load void (i8*, i8*, i64, i8*, i64, i32, i32)*, void (i8*, i8*, i64, i8*, i64, i32, i32)** %245, align 8
  %247 = bitcast i16* %218 to i8*
  call void %246(i8* %247, i8* %70, i64 %69, i8* %183, i64 %182, i32 %5, i32 %6) #7
  br label %248

248:                                              ; preds = %109, %90, %236, %223, %204, %203, %195, %213, %215
  %249 = phi i1 [ %214, %213 ], [ true, %215 ], [ true, %195 ], [ true, %203 ], [ true, %204 ], [ true, %223 ], [ true, %236 ], [ false, %109 ], [ false, %90 ]
  ret i1 %249
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav14Tile16BlockWarpProcessERKNS0_5BlockENS_5PlaneEiiiiiPNS_12GlobalMotionEbbPhl(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88), i8 zeroext, i32, i32, i32, i32, i32, %"struct.libgav1::GlobalMotion"*, i1 zeroext, i1 zeroext, i8*, i64) local_unnamed_addr #0 align 2 {
  %14 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %15 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %14, align 8
  %16 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %17 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %16, align 8
  %18 = sext i32 %3 to i64
  %19 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %15, i64 0, i32 14, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %17, i64 0, i32 52, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 23
  %26 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %25, align 8
  %27 = sext i8 %24 to i64
  %28 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %26, i64 0, i32 0, i64 %27, i32 0
  %29 = load %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::RefCountedBuffer"** %28, align 8
  %30 = zext i8 %2 to i64
  %31 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %29, i64 0, i32 3, i32 13, i64 %30
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %29, i64 0, i32 3, i32 11, i64 %30
  %34 = load i32, i32* %33, align 4
  %35 = sext i32 %34 to i64
  %36 = icmp eq i8 %2, 0
  %37 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %29, i64 0, i32 3, i32 3
  %38 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %29, i64 0, i32 3, i32 4
  %39 = select i1 %36, i32* %37, i32* %38
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %29, i64 0, i32 3, i32 5
  %42 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %29, i64 0, i32 3, i32 6
  %43 = select i1 %36, i32* %41, i32* %42
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 15
  %46 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %45, align 8
  %47 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %46, i64 0, i32 1, i32 0, i64 %18, i64 0
  %48 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 57
  %49 = load i8, i8* %48, align 1, !range !2
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %186, label %51

51:                                               ; preds = %13
  %52 = add nsw i32 %7, %5
  %53 = icmp sgt i32 %7, 0
  br i1 %53, label %54, label %156

54:                                               ; preds = %51
  %55 = add nsw i32 %6, %4
  %56 = icmp sgt i32 %6, 0
  %57 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %30
  %58 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %30
  %59 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 1, i64 4
  %60 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 1, i64 5
  %61 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 1, i64 1
  %62 = add i32 %6, %4
  %63 = add nsw i32 %4, 8
  %64 = icmp sgt i32 %62, %63
  %65 = select i1 %64, i32 %62, i32 %63
  %66 = xor i32 %4, -1
  %67 = add i32 %65, %66
  %68 = lshr i32 %67, 3
  %69 = add nuw nsw i32 %68, 1
  %70 = icmp ult i32 %69, 8
  %71 = and i32 %69, 1073741816
  %72 = shl i32 %71, 3
  %73 = add i32 %72, %4
  %74 = insertelement <4 x i32> undef, i32 %4, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  %76 = add <4 x i32> %75, <i32 0, i32 8, i32 16, i32 24>
  %77 = icmp eq i32 %69, %71
  br label %78

78:                                               ; preds = %54, %165
  %79 = phi i32 [ %5, %54 ], [ %167, %165 ]
  %80 = phi i32 [ -1, %54 ], [ %166, %165 ]
  br i1 %56, label %81, label %165

81:                                               ; preds = %78
  %82 = load i8, i8* %57, align 1
  %83 = sext i8 %82 to i32
  %84 = add nsw i32 %79, 4
  %85 = load i8, i8* %58, align 1
  %86 = sext i8 %85 to i32
  %87 = shl i32 %84, %86
  %88 = load i32, i32* %59, align 4
  %89 = load i32, i32* %60, align 4
  %90 = mul nsw i32 %87, %89
  %91 = load i32, i32* %61, align 4
  br i1 %70, label %92, label %95

92:                                               ; preds = %146, %81
  %93 = phi i32 [ %4, %81 ], [ %73, %146 ]
  %94 = phi i32 [ %80, %81 ], [ %155, %146 ]
  br label %169

95:                                               ; preds = %81
  %96 = insertelement <4 x i32> undef, i32 %83, i32 0
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> zeroinitializer
  %98 = insertelement <4 x i32> undef, i32 %83, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %88, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = insertelement <4 x i32> undef, i32 %88, i32 0
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> zeroinitializer
  %104 = insertelement <4 x i32> undef, i32 %90, i32 0
  %105 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> zeroinitializer
  %106 = insertelement <4 x i32> undef, i32 %90, i32 0
  %107 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> zeroinitializer
  %108 = insertelement <4 x i32> undef, i32 %91, i32 0
  %109 = shufflevector <4 x i32> %108, <4 x i32> undef, <4 x i32> zeroinitializer
  %110 = insertelement <4 x i32> undef, i32 %91, i32 0
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> zeroinitializer
  %112 = insertelement <4 x i32> undef, i32 %86, i32 0
  %113 = shufflevector <4 x i32> %112, <4 x i32> undef, <4 x i32> zeroinitializer
  %114 = insertelement <4 x i32> undef, i32 %86, i32 0
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> zeroinitializer
  %116 = insertelement <4 x i32> undef, i32 %80, i32 0
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %118

118:                                              ; preds = %118, %95
  %119 = phi i32 [ 0, %95 ], [ %143, %118 ]
  %120 = phi <4 x i32> [ %76, %95 ], [ %144, %118 ]
  %121 = phi <4 x i32> [ %117, %95 ], [ %141, %118 ]
  %122 = phi <4 x i32> [ %117, %95 ], [ %142, %118 ]
  %123 = add nsw <4 x i32> %120, <i32 4, i32 4, i32 4, i32 4>
  %124 = add <4 x i32> %120, <i32 36, i32 36, i32 36, i32 36>
  %125 = shl <4 x i32> %123, %97
  %126 = shl <4 x i32> %124, %99
  %127 = mul nsw <4 x i32> %125, %101
  %128 = mul nsw <4 x i32> %126, %103
  %129 = add nsw <4 x i32> %105, %127
  %130 = add nsw <4 x i32> %107, %128
  %131 = add nsw <4 x i32> %129, %109
  %132 = add nsw <4 x i32> %130, %111
  %133 = ashr <4 x i32> %131, %113
  %134 = ashr <4 x i32> %132, %115
  %135 = ashr <4 x i32> %133, <i32 16, i32 16, i32 16, i32 16>
  %136 = ashr <4 x i32> %134, <i32 16, i32 16, i32 16, i32 16>
  %137 = add nsw <4 x i32> %135, <i32 8, i32 8, i32 8, i32 8>
  %138 = add nsw <4 x i32> %136, <i32 8, i32 8, i32 8, i32 8>
  %139 = icmp slt <4 x i32> %137, %121
  %140 = icmp slt <4 x i32> %138, %122
  %141 = select <4 x i1> %139, <4 x i32> %121, <4 x i32> %137
  %142 = select <4 x i1> %140, <4 x i32> %122, <4 x i32> %138
  %143 = add i32 %119, 8
  %144 = add <4 x i32> %120, <i32 64, i32 64, i32 64, i32 64>
  %145 = icmp eq i32 %143, %71
  br i1 %145, label %146, label %118, !llvm.loop !39

146:                                              ; preds = %118
  %147 = icmp sgt <4 x i32> %141, %142
  %148 = select <4 x i1> %147, <4 x i32> %141, <4 x i32> %142
  %149 = shufflevector <4 x i32> %148, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %150 = icmp sgt <4 x i32> %148, %149
  %151 = select <4 x i1> %150, <4 x i32> %148, <4 x i32> %149
  %152 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %153 = icmp sgt <4 x i32> %151, %152
  %154 = select <4 x i1> %153, <4 x i32> %151, <4 x i32> %152
  %155 = extractelement <4 x i32> %154, i32 0
  br i1 %77, label %165, label %92

156:                                              ; preds = %165, %51
  %157 = phi i32 [ -1, %51 ], [ %166, %165 ]
  %158 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %30
  %159 = load i8, i8* %158, align 1
  %160 = sext i8 %159 to i32
  %161 = shl i32 %157, %160
  %162 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 60, i32 0, i64 %27
  %163 = load i32, i32* %162, align 4
  %164 = icmp slt i32 %163, %161
  br i1 %164, label %184, label %186

165:                                              ; preds = %169, %146, %78
  %166 = phi i32 [ %80, %78 ], [ %155, %146 ], [ %181, %169 ]
  %167 = add nsw i32 %79, 8
  %168 = icmp slt i32 %167, %52
  br i1 %168, label %78, label %156

169:                                              ; preds = %92, %169
  %170 = phi i32 [ %182, %169 ], [ %93, %92 ]
  %171 = phi i32 [ %181, %169 ], [ %94, %92 ]
  %172 = add nsw i32 %170, 4
  %173 = shl i32 %172, %83
  %174 = mul nsw i32 %173, %88
  %175 = add nsw i32 %90, %174
  %176 = add nsw i32 %175, %91
  %177 = ashr i32 %176, %86
  %178 = ashr i32 %177, 16
  %179 = add nsw i32 %178, 8
  %180 = icmp slt i32 %179, %171
  %181 = select i1 %180, i32 %171, i32 %179
  %182 = add nsw i32 %170, 8
  %183 = icmp slt i32 %182, %55
  br i1 %183, label %169, label %165, !llvm.loop !40

184:                                              ; preds = %156
  %185 = tail call zeroext i1 @_ZN7libgav116RefCountedBuffer9WaitUntilEiPi(%"class.libgav1::RefCountedBuffer"* %29, i32 %161, i32* %162)
  br i1 %185, label %186, label %242

186:                                              ; preds = %184, %156, %13
  br i1 %9, label %187, label %209

187:                                              ; preds = %186
  %188 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %189 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %188, align 16
  %190 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %189, i64 0, i32 27
  %191 = load void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)** %190, align 8
  %192 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 1, i64 0
  %193 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %30
  %194 = load i8, i8* %193, align 1
  %195 = sext i8 %194 to i32
  %196 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %30
  %197 = load i8, i8* %196, align 1
  %198 = sext i8 %197 to i32
  %199 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 2
  %200 = load i16, i16* %199, align 4
  %201 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 3
  %202 = load i16, i16* %201, align 2
  %203 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 4
  %204 = load i16, i16* %203, align 4
  %205 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 5
  %206 = load i16, i16* %205, align 2
  %207 = bitcast i16* %47 to i8*
  %208 = sext i32 %6 to i64
  tail call void %191(i8* %32, i64 %35, i32 %40, i32 %44, i32* %192, i32 %195, i32 %198, i32 %4, i32 %5, i32 %6, i32 %7, i16 signext %200, i16 signext %202, i16 signext %204, i16 signext %206, i8* %207, i64 %208) #7
  br label %242

209:                                              ; preds = %186
  %210 = bitcast i16* %47 to i8*
  %211 = select i1 %10, i8* %210, i8* %11
  br i1 %10, label %212, label %221

212:                                              ; preds = %209
  %213 = sext i32 %6 to i64
  %214 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %215 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %214, align 32
  %216 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %215, i64 0, i32 33, i32 0
  %217 = load i8, i8* %216, align 4
  %218 = icmp sgt i8 %217, 8
  %219 = zext i1 %218 to i64
  %220 = shl nsw i64 %213, %219
  br label %221

221:                                              ; preds = %212, %209
  %222 = phi i64 [ %12, %209 ], [ %220, %212 ]
  %223 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %224 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %223, align 16
  %225 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %224, i64 0, i32 28
  %226 = load void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)** %225, align 8
  %227 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 1, i64 0
  %228 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %30
  %229 = load i8, i8* %228, align 1
  %230 = sext i8 %229 to i32
  %231 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %30
  %232 = load i8, i8* %231, align 1
  %233 = sext i8 %232 to i32
  %234 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 2
  %235 = load i16, i16* %234, align 4
  %236 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 3
  %237 = load i16, i16* %236, align 2
  %238 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 4
  %239 = load i16, i16* %238, align 4
  %240 = getelementptr inbounds %"struct.libgav1::GlobalMotion", %"struct.libgav1::GlobalMotion"* %8, i64 0, i32 5
  %241 = load i16, i16* %240, align 2
  tail call void %226(i8* %32, i64 %35, i32 %40, i32 %44, i32* %227, i32 %230, i32 %233, i32 %4, i32 %5, i32 %6, i32 %7, i16 signext %235, i16 signext %237, i16 signext %239, i16 signext %241, i8* %211, i64 %222) #7
  br label %242

242:                                              ; preds = %184, %187, %221
  %243 = phi i1 [ true, %221 ], [ true, %187 ], [ false, %184 ]
  ret i1 %243
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav14Tile20BlockInterPredictionERKNS0_5BlockENS_5PlaneEiRKNS_12MotionVectorEiiiiiiPtbbPhl(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88), i8 zeroext, i32, %"struct.libgav1::MotionVector"* nocapture readonly dereferenceable(4), i32, i32, i32, i32, i32, i32, i16*, i1 zeroext, i1 zeroext, i8*, i64) local_unnamed_addr #0 align 2 {
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %22 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %21, align 32
  %23 = sext i32 %9 to i64
  %24 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %22, i64 0, i32 4, i32 3, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  %27 = mul nsw i64 %26, %23
  %28 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %22, i64 0, i32 4, i32 3, i32 2
  %29 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %28, align 8
  %30 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %29, i64 %27
  %31 = sext i32 %10 to i64
  %32 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %30, i64 %31
  %33 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %32, align 8
  %34 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #7
  store i32 -1431655766, i32* %17, align 4
  %35 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #7
  store i32 -1431655766, i32* %18, align 4
  %36 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %36) #7
  store i32 -1431655766, i32* %19, align 4
  %37 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #7
  store i32 -1431655766, i32* %20, align 4
  call void @_ZN7libgav14Tile17ScaleMotionVectorERKNS_12MotionVectorENS_5PlaneEiiiPiS5_S5_S5_(%"class.libgav1::Tile"* %0, %"struct.libgav1::MotionVector"* dereferenceable(4) %4, i8 zeroext %2, i32 %3, i32 %5, i32 %6, i32* nonnull %17, i32* nonnull %18, i32* nonnull %19, i32* nonnull %20)
  %38 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %33, i64 0, i32 13, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %33, i64 0, i32 13, i64 0
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = zext i8 %2 to i64
  %45 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %44
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = icmp eq i32 %3, -1
  br i1 %51, label %52, label %63

52:                                               ; preds = %16
  %53 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 42
  %54 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %55 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %54, align 8
  %56 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %55, i64 0, i32 6
  %57 = load i32, i32* %56, align 8
  %58 = shl i32 %57, 2
  %59 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %55, i64 0, i32 7
  %60 = load i32, i32* %59, align 4
  %61 = shl i32 %60, 2
  %62 = load %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::RefCountedBuffer"** %53, align 8
  br label %73

63:                                               ; preds = %16
  %64 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 23
  %65 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %64, align 8
  %66 = sext i32 %3 to i64
  %67 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %65, i64 0, i32 0, i64 %66, i32 0
  %68 = load %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::RefCountedBuffer"** %67, align 8
  %69 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %68, i64 0, i32 15
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %68, i64 0, i32 17
  %72 = load i32, i32* %71, align 4
  br label %73

73:                                               ; preds = %63, %52
  %74 = phi %"class.libgav1::RefCountedBuffer"* [ %62, %52 ], [ %68, %63 ]
  %75 = phi i32 [ %58, %52 ], [ %70, %63 ]
  %76 = phi i32 [ %61, %52 ], [ %72, %63 ]
  %77 = add nsw i32 %75, %47
  %78 = ashr i32 %77, %47
  %79 = add nsw i32 %78, -1
  %80 = add nsw i32 %76, %50
  %81 = ashr i32 %80, %50
  %82 = add nsw i32 %81, -1
  %83 = icmp ne i32 %3, -1
  br i1 %83, label %84, label %94

84:                                               ; preds = %73
  %85 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %86 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %85, align 8
  %87 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %86, i64 0, i32 4
  %88 = load i32, i32* %87, align 8
  %89 = icmp eq i32 %88, %75
  br i1 %89, label %90, label %94

90:                                               ; preds = %84
  %91 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %86, i64 0, i32 5
  %92 = load i32, i32* %91, align 4
  %93 = icmp ne i32 %92, %76
  br label %94

94:                                               ; preds = %84, %90, %73
  %95 = phi i1 [ false, %73 ], [ true, %84 ], [ %93, %90 ]
  %96 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %97 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %96, align 32
  %98 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %97, i64 0, i32 33, i32 0
  %99 = load i8, i8* %98, align 4
  %100 = icmp eq i8 %99, 8
  %101 = select i1 %100, i32 1, i32 2
  %102 = load i32, i32* %17, align 4
  %103 = load i32, i32* %18, align 4
  %104 = load i32, i32* %19, align 4
  %105 = load i32, i32* %20, align 4
  %106 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %74, i64 0, i32 3, i32 7, i64 %44
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %74, i64 0, i32 3, i32 8, i64 %44
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %74, i64 0, i32 3, i32 9, i64 %44
  %111 = load i32, i32* %110, align 4
  %112 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %74, i64 0, i32 3, i32 10, i64 %44
  %113 = load i32, i32* %112, align 4
  %114 = ashr i32 %102, 10
  %115 = ashr i32 %103, 10
  br i1 %51, label %147, label %116

116:                                              ; preds = %94
  %117 = add nsw i32 %114, -3
  %118 = add nsw i32 %115, -3
  %119 = add nsw i32 %7, -1
  %120 = mul nsw i32 %104, %119
  %121 = add nsw i32 %120, %102
  %122 = ashr i32 %121, 10
  %123 = add nsw i32 %122, 8
  %124 = add nsw i32 %8, -1
  %125 = mul nsw i32 %105, %124
  %126 = add nsw i32 %125, %103
  %127 = ashr i32 %126, 10
  %128 = add nsw i32 %127, 4
  br i1 %95, label %129, label %134

129:                                              ; preds = %116
  %130 = add nsw i32 %125, 1023
  %131 = ashr i32 %130, 10
  %132 = add nsw i32 %115, 4
  %133 = add nsw i32 %132, %131
  br label %134

134:                                              ; preds = %129, %116
  %135 = phi i32 [ %133, %129 ], [ %128, %116 ]
  %136 = sub nsw i32 0, %107
  %137 = icmp slt i32 %117, %136
  %138 = add nsw i32 %109, %79
  %139 = icmp sgt i32 %123, %138
  %140 = or i1 %137, %139
  %141 = sub nsw i32 0, %111
  %142 = icmp slt i32 %118, %141
  %143 = or i1 %142, %140
  br i1 %143, label %147, label %144

144:                                              ; preds = %134
  %145 = add nsw i32 %113, %82
  %146 = icmp sgt i32 %135, %145
  br label %147

147:                                              ; preds = %94, %134, %144
  %148 = phi i32 [ %114, %94 ], [ %117, %134 ], [ %117, %144 ]
  %149 = phi i32 [ %115, %94 ], [ %118, %134 ], [ %118, %144 ]
  %150 = phi i32 [ -1431655766, %94 ], [ %123, %134 ], [ %123, %144 ]
  %151 = phi i1 [ false, %94 ], [ true, %134 ], [ %146, %144 ]
  br i1 %83, label %152, label %175

152:                                              ; preds = %147
  %153 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 57
  %154 = load i8, i8* %153, align 1, !range !2
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %175, label %156

156:                                              ; preds = %152
  br i1 %95, label %163, label %157

157:                                              ; preds = %156
  %158 = add i32 %8, 8
  %159 = add i32 %158, %149
  %160 = icmp slt i32 %82, %159
  %161 = select i1 %160, i32 %82, i32 %159
  %162 = shl i32 %161, %50
  br label %163

163:                                              ; preds = %156, %157
  %164 = phi i32 [ %162, %157 ], [ %76, %156 ]
  %165 = sext i32 %3 to i64
  %166 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 60, i32 0, i64 %165
  %167 = load i32, i32* %166, align 4
  %168 = icmp slt i32 %167, %164
  br i1 %168, label %169, label %175

169:                                              ; preds = %163
  %170 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 23
  %171 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %170, align 8
  %172 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %171, i64 0, i32 0, i64 %165, i32 0
  %173 = load %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::RefCountedBuffer"** %172, align 8
  %174 = tail call zeroext i1 @_ZN7libgav116RefCountedBuffer9WaitUntilEiPi(%"class.libgav1::RefCountedBuffer"* %173, i32 %164, i32* %166)
  br i1 %174, label %175, label %281

175:                                              ; preds = %169, %163, %152, %147
  br i1 %151, label %215, label %176

176:                                              ; preds = %175
  br i1 %51, label %177, label %185

177:                                              ; preds = %176
  %178 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 42
  %179 = load %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::RefCountedBuffer"** %178, align 16
  %180 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %179, i64 0, i32 3, i32 11, i64 %44
  %181 = load i32, i32* %180, align 4
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %179, i64 0, i32 3, i32 13, i64 %44
  %184 = load i8*, i8** %183, align 8
  br label %196

185:                                              ; preds = %176
  %186 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 23
  %187 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %186, align 8
  %188 = sext i32 %3 to i64
  %189 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %187, i64 0, i32 0, i64 %188, i32 0
  %190 = load %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::RefCountedBuffer"** %189, align 8
  %191 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %190, i64 0, i32 3, i32 11, i64 %44
  %192 = load i32, i32* %191, align 4
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %190, i64 0, i32 3, i32 13, i64 %44
  %195 = load i8*, i8** %194, align 8
  br i1 %95, label %196, label %206

196:                                              ; preds = %177, %185
  %197 = phi i8* [ %184, %177 ], [ %195, %185 ]
  %198 = phi i64 [ %182, %177 ], [ %193, %185 ]
  %199 = phi i32 [ %181, %177 ], [ %192, %185 ]
  %200 = mul nsw i32 %199, %149
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds i8, i8* %197, i64 %201
  %203 = mul nsw i32 %148, %101
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i8, i8* %202, i64 %204
  br label %243

206:                                              ; preds = %185
  %207 = add nsw i32 %149, 3
  %208 = mul nsw i32 %192, %207
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %195, i64 %209
  %211 = add nsw i32 %148, 3
  %212 = mul nsw i32 %211, %101
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %210, i64 %213
  br label %243

215:                                              ; preds = %175
  %216 = shl i32 %7, 1
  %217 = add nsw i32 %216, 11
  %218 = mul nsw i32 %101, %217
  %219 = sext i32 %218 to i64
  %220 = add nsw i64 %219, 31
  %221 = and i64 %220, -32
  %222 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 15
  %223 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %222, align 8
  %224 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %223, i64 0, i32 3
  %225 = load i64, i64* %224, align 8
  %226 = icmp sgt i8 %99, 8
  %227 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %223, i64 0, i32 2, i32 0, i32 0, i32 0
  %228 = load i8*, i8** %227, align 8
  br i1 %226, label %229, label %230

229:                                              ; preds = %215
  tail call void @_ZN7libgav14Tile18BuildConvolveBlockItEEvNS_5PlaneEibiiiiiiiiiPhll(%"class.libgav1::Tile"* %0, i8 zeroext %2, i32 %3, i1 zeroext %95, i32 %8, i32 0, i32 %79, i32 0, i32 %82, i32 %105, i32 %148, i32 %150, i32 %149, i8* %228, i64 %225, i64 %221)
  br label %231

230:                                              ; preds = %215
  tail call void @_ZN7libgav14Tile18BuildConvolveBlockIhEEvNS_5PlaneEibiiiiiiiiiPhll(%"class.libgav1::Tile"* %0, i8 zeroext %2, i32 %3, i1 zeroext %95, i32 %8, i32 0, i32 %79, i32 0, i32 %82, i32 %105, i32 %148, i32 %150, i32 %149, i8* %228, i64 %225, i64 %221)
  br label %231

231:                                              ; preds = %230, %229
  %232 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %222, align 8
  %233 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %232, i64 0, i32 2, i32 0, i32 0, i32 0
  %234 = load i8*, i8** %233, align 8
  br i1 %95, label %240, label %235

235:                                              ; preds = %231
  %236 = mul nsw i64 %225, 3
  %237 = mul nuw nsw i32 %101, 3
  %238 = zext i32 %237 to i64
  %239 = add nsw i64 %236, %238
  br label %240

240:                                              ; preds = %231, %235
  %241 = phi i64 [ %239, %235 ], [ 0, %231 ]
  %242 = getelementptr inbounds i8, i8* %234, i64 %241
  br label %243

243:                                              ; preds = %196, %206, %240
  %244 = phi i8* [ %242, %240 ], [ %205, %196 ], [ %214, %206 ]
  %245 = phi i64 [ %225, %240 ], [ %198, %196 ], [ %193, %206 ]
  %246 = or i1 %12, %13
  %247 = bitcast i16* %11 to i8*
  %248 = select i1 %246, i8* %247, i8* %14
  %249 = sext i32 %7 to i64
  %250 = select i1 %246, i64 %249, i64 %15
  br i1 %13, label %251, label %258

251:                                              ; preds = %243
  %252 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %96, align 32
  %253 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %252, i64 0, i32 33, i32 0
  %254 = load i8, i8* %253, align 4
  %255 = icmp sgt i8 %254, 8
  %256 = zext i1 %255 to i64
  %257 = shl nsw i64 %250, %256
  br label %258

258:                                              ; preds = %251, %243
  %259 = phi i64 [ %250, %243 ], [ %257, %251 ]
  br i1 %95, label %260, label %266

260:                                              ; preds = %258
  %261 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %262 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %261, align 16
  %263 = zext i1 %12 to i64
  %264 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %262, i64 0, i32 6, i64 %263
  %265 = load void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)** %264, align 8
  tail call void %265(i8* %244, i64 %245, i32 %40, i32 %43, i32 %102, i32 %103, i32 %104, i32 %105, i32 %7, i32 %8, i8* %248, i64 %259) #7
  br label %281

266:                                              ; preds = %258
  %267 = lshr i32 %102, 6
  %268 = and i32 %267, 15
  %269 = lshr i32 %103, 6
  %270 = and i32 %269, 15
  %271 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %272 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %271, align 16
  %273 = zext i1 %51 to i64
  %274 = zext i1 %12 to i64
  %275 = icmp ne i32 %270, 0
  %276 = zext i1 %275 to i64
  %277 = icmp ne i32 %268, 0
  %278 = zext i1 %277 to i64
  %279 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %272, i64 0, i32 5, i64 %273, i64 %274, i64 %276, i64 %278
  %280 = load void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %279, align 8
  tail call void %280(i8* %244, i64 %245, i32 %40, i32 %43, i32 %268, i32 %270, i32 %7, i32 %8, i8* %248, i64 %259) #7
  br label %281

281:                                              ; preds = %260, %266, %169
  %282 = phi i1 [ false, %169 ], [ true, %266 ], [ true, %260 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %36) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #7
  ret i1 %282
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav14Tile14ObmcPredictionERKNS0_5BlockENS_5PlaneEii(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88), i8 zeroext, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = zext i8 %2 to i64
  %7 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %6
  %8 = load i8, i8* %7, align 1
  %9 = sext i8 %8 to i32
  %10 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %6
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 3, i64 0
  %14 = load i8, i8* %13, align 2, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %151, label %16

16:                                               ; preds = %5
  %17 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 5, i64 %6
  %18 = load i8, i8* %17, align 1
  %19 = icmp ult i8 %18, 4
  %20 = icmp ne i8 %18, 2
  %21 = and i1 %19, %20
  br i1 %21, label %151, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 2
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav113k4x4WidthLog2E, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = icmp ult i8 %27, 4
  %29 = select i1 %28, i8 %27, i8 4
  %30 = zext i8 %29 to i32
  %31 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 7
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 10
  %34 = load i32, i32* %33, align 4
  %35 = add nsw i32 %34, %32
  %36 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %37 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %36, align 8
  %38 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %37, i64 0, i32 6
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %39, %35
  %41 = select i1 %40, i32 %39, i32 %35
  %42 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 6
  %43 = load i32, i32* %42, align 4
  %44 = add nsw i32 %43, -1
  %45 = shl i32 %43, 2
  %46 = ashr i32 %45, %12
  %47 = ashr i32 %4, 1
  %48 = lshr i32 32, %12
  %49 = icmp slt i32 %48, %47
  %50 = select i1 %49, i32 %48, i32 %47
  %51 = icmp ne i8 %29, 0
  %52 = icmp slt i32 %32, %41
  %53 = and i1 %52, %51
  br i1 %53, label %54, label %151

54:                                               ; preds = %22
  %55 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %56 = sext i32 %44 to i64
  %57 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %58 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 15
  %59 = sext i32 %46 to i64
  %60 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %6, i32 1
  %61 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %6, i32 2
  %62 = bitcast i8** %61 to i16**
  %63 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  br label %64

64:                                               ; preds = %54, %145
  %65 = phi i32 [ 0, %54 ], [ %146, %145 ]
  %66 = phi i32 [ %32, %54 ], [ %147, %145 ]
  %67 = or i32 %66, 1
  %68 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %55, align 32
  %69 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %68, i64 0, i32 4, i32 3, i32 1
  %70 = load i32, i32* %69, align 4
  %71 = sext i32 %70 to i64
  %72 = mul nsw i64 %71, %56
  %73 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %68, i64 0, i32 4, i32 3, i32 2
  %74 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %73, align 8
  %75 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %74, i64 %72
  %76 = sext i32 %67 to i64
  %77 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %75, i64 %76
  %78 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %77, align 8
  %79 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %78, i64 0, i32 0
  %80 = load i8, i8* %79, align 8
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav117kNum4x4BlocksWideE, i64 0, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = icmp ult i8 %83, 2
  %86 = icmp ult i32 %84, 16
  %87 = select i1 %86, i32 %84, i32 16
  %88 = select i1 %85, i32 2, i32 %87
  %89 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %78, i64 0, i32 14, i64 0
  %90 = load i8, i8* %89, align 1
  %91 = icmp sgt i8 %90, 0
  br i1 %91, label %92, label %145

92:                                               ; preds = %64
  %93 = sext i8 %90 to i64
  %94 = add nsw i32 %65, 1
  %95 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %36, align 8
  %96 = add nsw i64 %93, -1
  %97 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %95, i64 0, i32 52, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = sext i8 %98 to i32
  %100 = shl nuw nsw i32 %88, 2
  %101 = lshr i32 %100, %9
  %102 = icmp slt i32 %101, %3
  %103 = select i1 %102, i32 %101, i32 %3
  %104 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %78, i64 0, i32 16
  %105 = bitcast %"union.libgav1::CompoundMotionVector"* %104 to %"struct.libgav1::MotionVector"*
  %106 = shl i32 %66, 2
  %107 = ashr i32 %106, %9
  %108 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %57, align 32
  %109 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %108, i64 0, i32 33, i32 0
  %110 = load i8, i8* %109, align 4
  %111 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %58, align 8
  %112 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %111, i64 0, i32 1, i32 0, i64 1, i64 0
  %113 = bitcast i16* %112 to i8*
  %114 = icmp ne i8 %110, 8
  %115 = sext i32 %103 to i64
  %116 = zext i1 %114 to i64
  %117 = shl nsw i64 %115, %116
  %118 = tail call zeroext i1 @_ZN7libgav14Tile20BlockInterPredictionERKNS0_5BlockENS_5PlaneEiRKNS_12MotionVectorEiiiiiiPtbbPhl(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %2, i32 %99, %"struct.libgav1::MotionVector"* dereferenceable(4) %105, i32 %107, i32 %46, i32 %103, i32 %50, i32 %44, i32 %67, i16* null, i1 zeroext false, i1 zeroext false, i8* %113, i64 %117) #7
  br i1 %118, label %119, label %285

119:                                              ; preds = %92
  %120 = icmp sgt i8 %110, 8
  %121 = load i32, i32* %60, align 4
  br i1 %120, label %122, label %132

122:                                              ; preds = %119
  %123 = ashr i32 %121, 1
  %124 = load i16*, i16** %62, align 8
  %125 = sext i32 %123 to i64
  %126 = mul nsw i64 %125, %59
  %127 = getelementptr inbounds i16, i16* %124, i64 %126
  %128 = sext i32 %107 to i64
  %129 = getelementptr inbounds i16, i16* %127, i64 %128
  %130 = bitcast i16* %129 to i8*
  %131 = sext i32 %121 to i64
  br label %139

132:                                              ; preds = %119
  %133 = sext i32 %121 to i64
  %134 = mul nsw i64 %133, %59
  %135 = load i8*, i8** %61, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 %134
  %137 = sext i32 %107 to i64
  %138 = getelementptr inbounds i8, i8* %136, i64 %137
  br label %139

139:                                              ; preds = %132, %122
  %140 = phi i64 [ %131, %122 ], [ %133, %132 ]
  %141 = phi i8* [ %130, %122 ], [ %138, %132 ]
  %142 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %63, align 16
  %143 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %142, i64 0, i32 24, i64 0
  %144 = load void (i8*, i64, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i8*, i64)** %143, align 8
  tail call void %144(i8* %141, i64 %140, i32 %103, i32 %50, i8* %113, i64 %117) #7
  br label %145

145:                                              ; preds = %139, %64
  %146 = phi i32 [ %94, %139 ], [ %65, %64 ]
  %147 = add nsw i32 %88, %66
  %148 = icmp slt i32 %146, %30
  %149 = icmp slt i32 %147, %41
  %150 = and i1 %149, %148
  br i1 %150, label %64, label %151

151:                                              ; preds = %145, %22, %5, %16
  %152 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 4, i64 0
  %153 = load i8, i8* %152, align 1, !range !2
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %285, label %155

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 2
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i64
  %159 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav114k4x4HeightLog2E, i64 0, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = icmp ult i8 %160, 4
  %162 = select i1 %161, i8 %160, i8 4
  %163 = zext i8 %162 to i32
  %164 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 6
  %165 = load i32, i32* %164, align 4
  %166 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 11
  %167 = load i32, i32* %166, align 8
  %168 = add nsw i32 %167, %165
  %169 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %170 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %169, align 8
  %171 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %170, i64 0, i32 7
  %172 = load i32, i32* %171, align 4
  %173 = icmp slt i32 %172, %168
  %174 = select i1 %173, i32 %172, i32 %168
  %175 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 7
  %176 = load i32, i32* %175, align 8
  %177 = add nsw i32 %176, -1
  %178 = shl i32 %176, 2
  %179 = ashr i32 %178, %9
  %180 = ashr i32 %3, 1
  %181 = lshr i32 32, %9
  %182 = icmp slt i32 %181, %180
  %183 = select i1 %182, i32 %181, i32 %180
  %184 = icmp ne i8 %162, 0
  %185 = icmp slt i32 %165, %174
  %186 = and i1 %185, %184
  br i1 %186, label %187, label %285

187:                                              ; preds = %155
  %188 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %189 = sext i32 %177 to i64
  %190 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %191 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 15
  %192 = sext i32 %183 to i64
  %193 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %6, i32 1
  %194 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %6, i32 2
  %195 = sext i32 %179 to i64
  %196 = bitcast i8** %194 to i16**
  %197 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  br label %198

198:                                              ; preds = %187, %279
  %199 = phi i32 [ 0, %187 ], [ %280, %279 ]
  %200 = phi i32 [ %165, %187 ], [ %281, %279 ]
  %201 = or i32 %200, 1
  %202 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %188, align 32
  %203 = sext i32 %201 to i64
  %204 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %202, i64 0, i32 4, i32 3, i32 1
  %205 = load i32, i32* %204, align 4
  %206 = sext i32 %205 to i64
  %207 = mul nsw i64 %206, %203
  %208 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %202, i64 0, i32 4, i32 3, i32 2
  %209 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %208, align 8
  %210 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %209, i64 %189
  %211 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %210, i64 %207
  %212 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %211, align 8
  %213 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %212, i64 0, i32 0
  %214 = load i8, i8* %213, align 8
  %215 = zext i8 %214 to i64
  %216 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav117kNum4x4BlocksHighE, i64 0, i64 %215
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = icmp ult i8 %217, 2
  %220 = icmp ult i32 %218, 16
  %221 = select i1 %220, i32 %218, i32 16
  %222 = select i1 %219, i32 2, i32 %221
  %223 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %212, i64 0, i32 14, i64 0
  %224 = load i8, i8* %223, align 1
  %225 = icmp sgt i8 %224, 0
  br i1 %225, label %226, label %279

226:                                              ; preds = %198
  %227 = sext i8 %224 to i64
  %228 = add nsw i32 %199, 1
  %229 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %169, align 8
  %230 = add nsw i64 %227, -1
  %231 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %229, i64 0, i32 52, i64 %230
  %232 = load i8, i8* %231, align 1
  %233 = sext i8 %232 to i32
  %234 = shl nuw nsw i32 %222, 2
  %235 = lshr i32 %234, %12
  %236 = icmp slt i32 %235, %4
  %237 = select i1 %236, i32 %235, i32 %4
  %238 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %212, i64 0, i32 16
  %239 = bitcast %"union.libgav1::CompoundMotionVector"* %238 to %"struct.libgav1::MotionVector"*
  %240 = shl i32 %200, 2
  %241 = ashr i32 %240, %12
  %242 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %190, align 32
  %243 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %242, i64 0, i32 33, i32 0
  %244 = load i8, i8* %243, align 4
  %245 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %191, align 8
  %246 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %245, i64 0, i32 1, i32 0, i64 1, i64 0
  %247 = bitcast i16* %246 to i8*
  %248 = icmp ne i8 %244, 8
  %249 = zext i1 %248 to i64
  %250 = shl nsw i64 %192, %249
  %251 = tail call zeroext i1 @_ZN7libgav14Tile20BlockInterPredictionERKNS0_5BlockENS_5PlaneEiRKNS_12MotionVectorEiiiiiiPtbbPhl(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %2, i32 %233, %"struct.libgav1::MotionVector"* dereferenceable(4) %239, i32 %179, i32 %241, i32 %183, i32 %237, i32 %201, i32 %177, i16* null, i1 zeroext false, i1 zeroext false, i8* %247, i64 %250) #7
  br i1 %251, label %252, label %285

252:                                              ; preds = %226
  %253 = icmp sgt i8 %244, 8
  br i1 %253, label %254, label %265

254:                                              ; preds = %252
  %255 = load i32, i32* %193, align 4
  %256 = ashr i32 %255, 1
  %257 = load i16*, i16** %196, align 8
  %258 = sext i32 %241 to i64
  %259 = sext i32 %256 to i64
  %260 = mul nsw i64 %259, %258
  %261 = getelementptr inbounds i16, i16* %257, i64 %195
  %262 = getelementptr inbounds i16, i16* %261, i64 %260
  %263 = bitcast i16* %262 to i8*
  %264 = sext i32 %255 to i64
  br label %273

265:                                              ; preds = %252
  %266 = sext i32 %241 to i64
  %267 = load i32, i32* %193, align 4
  %268 = sext i32 %267 to i64
  %269 = mul nsw i64 %268, %266
  %270 = load i8*, i8** %194, align 8
  %271 = getelementptr inbounds i8, i8* %270, i64 %195
  %272 = getelementptr inbounds i8, i8* %271, i64 %269
  br label %273

273:                                              ; preds = %265, %254
  %274 = phi i64 [ %264, %254 ], [ %268, %265 ]
  %275 = phi i8* [ %263, %254 ], [ %272, %265 ]
  %276 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %197, align 16
  %277 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %276, i64 0, i32 24, i64 1
  %278 = load void (i8*, i64, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i8*, i64)** %277, align 8
  tail call void %278(i8* %275, i64 %274, i32 %183, i32 %237, i8* %247, i64 %250) #7
  br label %279

279:                                              ; preds = %273, %198
  %280 = phi i32 [ %228, %273 ], [ %199, %198 ]
  %281 = add nsw i32 %222, %200
  %282 = icmp slt i32 %280, %163
  %283 = icmp slt i32 %281, %174
  %284 = and i1 %283, %282
  br i1 %284, label %198, label %285

285:                                              ; preds = %92, %226, %279, %155, %151
  %286 = phi i1 [ true, %151 ], [ true, %155 ], [ false, %226 ], [ true, %279 ], [ false, %92 ]
  ret i1 %286
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav14Tile19ObmcBlockPredictionERKNS0_5BlockERKNS_12MotionVectorENS_5PlaneEiiiiiiiNS_13ObmcDirectionE(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88), %"struct.libgav1::MotionVector"* nocapture readonly dereferenceable(4), i8 zeroext, i32, i32, i32, i32, i32, i32, i32, i8 zeroext) local_unnamed_addr #0 align 2 {
  %13 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %14 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %13, align 32
  %15 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %14, i64 0, i32 33, i32 0
  %16 = load i8, i8* %15, align 4
  %17 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 15
  %18 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %17, align 8
  %19 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %18, i64 0, i32 1, i32 0, i64 1, i64 0
  %20 = bitcast i16* %19 to i8*
  %21 = icmp ne i8 %16, 8
  %22 = sext i32 %5 to i64
  %23 = zext i1 %21 to i64
  %24 = shl nsw i64 %22, %23
  %25 = tail call zeroext i1 @_ZN7libgav14Tile20BlockInterPredictionERKNS0_5BlockENS_5PlaneEiRKNS_12MotionVectorEiiiiiiPtbbPhl(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %3, i32 %4, %"struct.libgav1::MotionVector"* dereferenceable(4) %2, i32 %7, i32 %8, i32 %5, i32 %6, i32 %9, i32 %10, i16* null, i1 zeroext false, i1 zeroext false, i8* %20, i64 %24)
  br i1 %25, label %26, label %63

26:                                               ; preds = %12
  %27 = icmp sgt i8 %16, 8
  %28 = zext i8 %3 to i64
  br i1 %27, label %29, label %44

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %28, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = ashr i32 %31, 1
  %33 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %28, i32 2
  %34 = bitcast i8** %33 to i16**
  %35 = load i16*, i16** %34, align 8
  %36 = sext i32 %8 to i64
  %37 = sext i32 %32 to i64
  %38 = mul nsw i64 %37, %36
  %39 = getelementptr inbounds i16, i16* %35, i64 %38
  %40 = sext i32 %7 to i64
  %41 = getelementptr inbounds i16, i16* %39, i64 %40
  %42 = bitcast i16* %41 to i8*
  %43 = sext i32 %31 to i64
  br label %55

44:                                               ; preds = %26
  %45 = sext i32 %8 to i64
  %46 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %28, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  %49 = mul nsw i64 %48, %45
  %50 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 41, i64 %28, i32 2
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 %49
  %53 = sext i32 %7 to i64
  %54 = getelementptr inbounds i8, i8* %52, i64 %53
  br label %55

55:                                               ; preds = %29, %44
  %56 = phi i64 [ %43, %29 ], [ %48, %44 ]
  %57 = phi i8* [ %42, %29 ], [ %54, %44 ]
  %58 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 33
  %59 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %58, align 16
  %60 = zext i8 %11 to i64
  %61 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %59, i64 0, i32 24, i64 %60
  %62 = load void (i8*, i64, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i8*, i64)** %61, align 8
  tail call void %62(i8* %57, i64 %56, i32 %5, i32 %6, i8* %20, i64 %24) #7
  br label %63

63:                                               ; preds = %12, %55
  %64 = phi i1 [ true, %55 ], [ false, %12 ]
  ret i1 %64
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7libgav14Tile17ScaleMotionVectorERKNS_12MotionVectorENS_5PlaneEiiiPiS5_S5_S5_(%"class.libgav1::Tile"* nocapture readonly, %"struct.libgav1::MotionVector"* nocapture readonly dereferenceable(4), i8 zeroext, i32, i32, i32, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture) local_unnamed_addr #4 align 2 {
  %11 = icmp eq i32 %3, -1
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %14 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %13, align 8
  %15 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %14, i64 0, i32 10
  %16 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %14, i64 0, i32 5
  br label %27

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 23
  %19 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %18, align 8
  %20 = sext i32 %3 to i64
  %21 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %19, i64 0, i32 0, i64 %20, i32 0
  %22 = load %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::RefCountedBuffer"** %21, align 8
  %23 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %22, i64 0, i32 15
  %24 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %22, i64 0, i32 17
  %25 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %26 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %25, align 8
  br label %27

27:                                               ; preds = %17, %12
  %28 = phi %"struct.libgav1::ObuFrameHeader"* [ %14, %12 ], [ %26, %17 ]
  %29 = phi i32* [ %15, %12 ], [ %23, %17 ]
  %30 = phi i32* [ %16, %12 ], [ %24, %17 ]
  %31 = load i32, i32* %30, align 4
  %32 = load i32, i32* %29, align 4
  %33 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %34 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %28, i64 0, i32 4
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %32, %35
  %37 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %28, i64 0, i32 5
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %31, %38
  %40 = shl i32 %4, 4
  %41 = bitcast %"struct.libgav1::MotionVector"* %1 to [2 x i16]*
  %42 = getelementptr inbounds [2 x i16], [2 x i16]* %41, i64 0, i64 1
  %43 = load i16, i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = shl nsw i32 %44, 1
  %46 = zext i8 %2 to i64
  %47 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 12, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = ashr i32 %45, %49
  %51 = add nsw i32 %50, %40
  %52 = shl i32 %5, 4
  %53 = bitcast %"struct.libgav1::MotionVector"* %1 to i16*
  %54 = load i16, i16* %53, align 4
  %55 = sext i16 %54 to i32
  %56 = shl nsw i32 %55, 1
  %57 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 13, i64 %46
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  %60 = ashr i32 %56, %59
  %61 = add nsw i32 %60, %52
  br i1 %36, label %81, label %62

62:                                               ; preds = %27
  %63 = shl i32 %32, 14
  %64 = ashr i32 %35, 1
  %65 = add nsw i32 %64, %63
  %66 = sdiv i32 %65, %35
  %67 = ashr i32 %66, 31
  %68 = add i32 %66, 8
  %69 = add i32 %68, %67
  %70 = ashr i32 %69, 4
  store i32 %70, i32* %8, align 4
  %71 = add nsw i32 %51, 8
  %72 = sext i32 %71 to i64
  %73 = sext i32 %66 to i64
  %74 = mul nsw i64 %73, %72
  %75 = add nsw i64 %74, -131072
  %76 = ashr i64 %75, 63
  %77 = add nsw i64 %74, 1099511496832
  %78 = add nsw i64 %77, %76
  %79 = lshr i64 %78, 8
  %80 = trunc i64 %79 to i32
  br label %83

81:                                               ; preds = %27
  store i32 1024, i32* %8, align 4
  %82 = shl i32 %51, 6
  br label %83

83:                                               ; preds = %81, %62
  %84 = phi i32 [ %82, %81 ], [ %80, %62 ]
  %85 = add nsw i32 %84, 32
  store i32 %85, i32* %6, align 4
  br i1 %39, label %108, label %86

86:                                               ; preds = %83
  %87 = shl i32 %31, 14
  %88 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %33, align 8
  %89 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %88, i64 0, i32 5
  %90 = load i32, i32* %89, align 4
  %91 = ashr i32 %90, 1
  %92 = add nsw i32 %91, %87
  %93 = sdiv i32 %92, %90
  %94 = ashr i32 %93, 31
  %95 = add i32 %93, 8
  %96 = add i32 %95, %94
  %97 = ashr i32 %96, 4
  store i32 %97, i32* %9, align 4
  %98 = add nsw i32 %61, 8
  %99 = sext i32 %98 to i64
  %100 = sext i32 %93 to i64
  %101 = mul nsw i64 %100, %99
  %102 = add nsw i64 %101, -131072
  %103 = ashr i64 %102, 63
  %104 = add nsw i64 %101, 1099511496832
  %105 = add nsw i64 %104, %103
  %106 = lshr i64 %105, 8
  %107 = trunc i64 %106 to i32
  br label %110

108:                                              ; preds = %83
  store i32 1024, i32* %9, align 4
  %109 = shl i32 %61, 6
  br label %110

110:                                              ; preds = %108, %86
  %111 = phi i32 [ %109, %108 ], [ %107, %86 ]
  %112 = add nsw i32 %111, 32
  store i32 %112, i32* %7, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav14Tile25GetReferenceBlockPositionEibiiiiiiiiiiiiiiPiS1_S1_(i32, i1 zeroext, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32* nocapture, i32* nocapture, i32* nocapture) local_unnamed_addr #4 align 2 {
  %20 = ashr i32 %8, 10
  store i32 %20, i32* %16, align 4
  %21 = ashr i32 %9, 10
  store i32 %21, i32* %17, align 4
  %22 = icmp eq i32 %0, -1
  br i1 %22, label %59, label %23

23:                                               ; preds = %19
  %24 = load i32, i32* %16, align 4
  %25 = add nsw i32 %24, -3
  store i32 %25, i32* %16, align 4
  %26 = load i32, i32* %17, align 4
  %27 = add nsw i32 %26, -3
  store i32 %27, i32* %17, align 4
  %28 = add nsw i32 %2, -1
  %29 = mul nsw i32 %28, %10
  %30 = add nsw i32 %29, %8
  %31 = ashr i32 %30, 10
  %32 = add nsw i32 %31, 8
  store i32 %32, i32* %18, align 4
  %33 = add nsw i32 %3, -1
  %34 = mul nsw i32 %33, %11
  %35 = add nsw i32 %34, %9
  %36 = ashr i32 %35, 10
  %37 = add nsw i32 %36, 4
  br i1 %1, label %38, label %44

38:                                               ; preds = %23
  %39 = add nsw i32 %34, 1023
  %40 = ashr i32 %39, 10
  %41 = load i32, i32* %17, align 4
  %42 = add nsw i32 %40, 7
  %43 = add i32 %42, %41
  br label %44

44:                                               ; preds = %38, %23
  %45 = phi i32 [ %43, %38 ], [ %37, %23 ]
  %46 = load i32, i32* %16, align 4
  %47 = sub nsw i32 %4, %12
  %48 = icmp slt i32 %46, %47
  %49 = add nsw i32 %13, %5
  %50 = icmp sgt i32 %32, %49
  %51 = or i1 %50, %48
  br i1 %51, label %59, label %52

52:                                               ; preds = %44
  %53 = load i32, i32* %17, align 4
  %54 = sub nsw i32 %6, %14
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  %57 = add nsw i32 %15, %7
  %58 = icmp sgt i32 %45, %57
  br label %59

59:                                               ; preds = %44, %52, %56, %19
  %60 = phi i1 [ false, %19 ], [ true, %52 ], [ true, %44 ], [ %58, %56 ]
  ret i1 %60
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN7libgav116RefCountedBuffer9WaitUntilEiPi(%"class.libgav1::RefCountedBuffer"*, i32, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::unique_lock", align 8
  %5 = icmp sgt i32 %1, 0
  %6 = select i1 %5, i32 %1, i32 0
  %7 = bitcast %"class.std::__1::unique_lock"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #7
  %8 = getelementptr inbounds %"class.std::__1::unique_lock", %"class.std::__1::unique_lock"* %4, i64 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::unique_lock", %"class.std::__1::unique_lock"* %4, i64 0, i32 1
  %10 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %0, i64 0, i32 5
  %11 = bitcast %"class.std::__1::unique_lock"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false)
  store %"class.std::__1::mutex"* %10, %"class.std::__1::mutex"** %8, align 8
  store i8 1, i8* %9, align 8
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %10) #7
  %12 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %0, i64 0, i32 6
  %13 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %0, i64 0, i32 11
  %14 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %0, i64 0, i32 7
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, %6
  br i1 %16, label %23, label %17

17:                                               ; preds = %3
  %18 = load i8, i8* %12, align 16
  %19 = icmp eq i8 %18, 3
  %20 = select i1 %19, i32 2147483647, i32 %15
  store i32 %20, i32* %2, align 4
  %21 = load i8, i8* %13, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br label %46

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %0, i64 0, i32 8
  %25 = load i8, i8* %12, align 16
  %26 = icmp eq i8 %25, 3
  br i1 %26, label %37, label %30

27:                                               ; preds = %34
  %28 = load i8, i8* %12, align 16
  %29 = icmp eq i8 %28, 3
  br i1 %29, label %37, label %30

30:                                               ; preds = %23, %27
  %31 = phi i32 [ %35, %27 ], [ %15, %23 ]
  %32 = load i8, i8* %13, align 8, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  call void @_ZNSt3__118condition_variable4waitERNS_11unique_lockINS_5mutexEEE(%"class.std::__1::condition_variable"* %24, %"class.std::__1::unique_lock"* nonnull dereferenceable(16) %4) #7
  %35 = load i32, i32* %14, align 4
  %36 = icmp slt i32 %35, %6
  br i1 %36, label %27, label %37

37:                                               ; preds = %27, %34, %30, %23
  %38 = phi i32 [ %15, %23 ], [ %35, %27 ], [ %35, %34 ], [ %31, %30 ]
  %39 = load i8, i8* %9, align 8, !range !2
  %40 = icmp eq i8 %39, 0
  %41 = load i8, i8* %12, align 16
  %42 = icmp eq i8 %41, 3
  %43 = select i1 %42, i32 2147483647, i32 %38
  store i32 %43, i32* %2, align 4
  %44 = load i8, i8* %13, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %40, label %49, label %46

46:                                               ; preds = %17, %37
  %47 = phi i1 [ %22, %17 ], [ %45, %37 ]
  %48 = load %"class.std::__1::mutex"*, %"class.std::__1::mutex"** %8, align 8
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %48) #7
  br label %49

49:                                               ; preds = %37, %46
  %50 = phi i1 [ %45, %37 ], [ %47, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #7
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav14Tile18BuildConvolveBlockItEEvNS_5PlaneEibiiiiiiiiiPhll(%"class.libgav1::Tile"*, i8 zeroext, i32, i1 zeroext, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %17 = icmp eq i32 %2, -1
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 42
  br label %25

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 23
  %22 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %21, align 8
  %23 = sext i32 %2 to i64
  %24 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %22, i64 0, i32 0, i64 %23, i32 0
  br label %25

25:                                               ; preds = %20, %18
  %26 = phi %"class.libgav1::RefCountedBuffer"** [ %19, %18 ], [ %24, %20 ]
  %27 = load %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::RefCountedBuffer"** %26, align 8
  %28 = zext i8 %1 to i64
  %29 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %27, i64 0, i32 3, i32 11, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = ashr i32 %30, 1
  %32 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %27, i64 0, i32 3, i32 13, i64 %28
  %33 = bitcast i8** %32 to i16**
  %34 = load i16*, i16** %33, align 8
  %35 = bitcast i8* %13 to i16*
  %36 = lshr i64 %14, 1
  %37 = add nsw i32 %4, 7
  br i1 %3, label %38, label %44

38:                                               ; preds = %25
  %39 = add nsw i32 %4, -1
  %40 = mul nsw i32 %39, %9
  %41 = add nsw i32 %40, 1023
  %42 = ashr i32 %41, 10
  %43 = add nsw i32 %42, 8
  br label %44

44:                                               ; preds = %38, %25
  %45 = phi i32 [ %43, %38 ], [ %37, %25 ]
  %46 = icmp slt i32 %10, %5
  %47 = icmp sgt i32 %10, %6
  %48 = select i1 %47, i32 %6, i32 %10
  %49 = select i1 %46, i32 %5, i32 %48
  %50 = icmp slt i32 %12, %7
  %51 = icmp sgt i32 %12, %8
  %52 = select i1 %51, i32 %8, i32 %12
  %53 = select i1 %50, i32 %7, i32 %52
  %54 = icmp sgt i32 %49, %11
  %55 = icmp sgt i32 %11, %6
  %56 = select i1 %55, i32 %6, i32 %11
  %57 = select i1 %54, i32 %49, i32 %56
  %58 = sub i32 1, %49
  %59 = add i32 %58, %57
  %60 = icmp slt i32 %57, %10
  %61 = or i1 %54, %60
  br i1 %61, label %62, label %168

62:                                               ; preds = %44
  %63 = icmp sgt i32 %45, 0
  br i1 %63, label %64, label %374

64:                                               ; preds = %62
  %65 = sext i32 %31 to i64
  %66 = sext i32 %57 to i64
  %67 = icmp eq i64 %15, 0
  %68 = getelementptr inbounds i16, i16* %34, i64 %66
  %69 = add i64 %15, -16
  %70 = lshr i64 %69, 4
  %71 = add nuw nsw i64 %70, 1
  %72 = icmp ult i64 %15, 16
  %73 = and i64 %15, -16
  %74 = and i64 %71, 7
  %75 = icmp ult i64 %69, 112
  %76 = sub nsw i64 %71, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %73, %15
  br label %79

79:                                               ; preds = %158, %64
  %80 = phi i32 [ %53, %64 ], [ %164, %158 ]
  %81 = phi i32 [ 0, %64 ], [ %166, %158 ]
  %82 = phi i16* [ %35, %64 ], [ %165, %158 ]
  %83 = sext i32 %80 to i64
  %84 = mul nsw i64 %83, %65
  %85 = getelementptr inbounds i16, i16* %68, i64 %84
  %86 = load i16, i16* %85, align 2
  br i1 %67, label %158, label %87

87:                                               ; preds = %79
  br i1 %72, label %151, label %88

88:                                               ; preds = %87
  %89 = insertelement <8 x i16> undef, i16 %86, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = insertelement <8 x i16> undef, i16 %86, i32 0
  %92 = shufflevector <8 x i16> %91, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %75, label %138, label %93

93:                                               ; preds = %88, %93
  %94 = phi i64 [ %135, %93 ], [ 0, %88 ]
  %95 = phi i64 [ %136, %93 ], [ %76, %88 ]
  %96 = getelementptr inbounds i16, i16* %82, i64 %94
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %97, align 2
  %98 = getelementptr inbounds i16, i16* %96, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %99, align 2
  %100 = or i64 %94, 16
  %101 = getelementptr inbounds i16, i16* %82, i64 %100
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %101, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %104, align 2
  %105 = or i64 %94, 32
  %106 = getelementptr inbounds i16, i16* %82, i64 %105
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds i16, i16* %106, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %109, align 2
  %110 = or i64 %94, 48
  %111 = getelementptr inbounds i16, i16* %82, i64 %110
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds i16, i16* %111, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %114, align 2
  %115 = or i64 %94, 64
  %116 = getelementptr inbounds i16, i16* %82, i64 %115
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %116, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %119, align 2
  %120 = or i64 %94, 80
  %121 = getelementptr inbounds i16, i16* %82, i64 %120
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds i16, i16* %121, i64 8
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %124, align 2
  %125 = or i64 %94, 96
  %126 = getelementptr inbounds i16, i16* %82, i64 %125
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds i16, i16* %126, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %129, align 2
  %130 = or i64 %94, 112
  %131 = getelementptr inbounds i16, i16* %82, i64 %130
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %132, align 2
  %133 = getelementptr inbounds i16, i16* %131, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %134, align 2
  %135 = add i64 %94, 128
  %136 = add i64 %95, -8
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %93, !llvm.loop !41

138:                                              ; preds = %93, %88
  %139 = phi i64 [ 0, %88 ], [ %135, %93 ]
  br i1 %77, label %150, label %140

140:                                              ; preds = %138, %140
  %141 = phi i64 [ %147, %140 ], [ %139, %138 ]
  %142 = phi i64 [ %148, %140 ], [ %74, %138 ]
  %143 = getelementptr inbounds i16, i16* %82, i64 %141
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %144, align 2
  %145 = getelementptr inbounds i16, i16* %143, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %146, align 2
  %147 = add i64 %141, 16
  %148 = add i64 %142, -1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %140, !llvm.loop !42

150:                                              ; preds = %140, %138
  br i1 %78, label %158, label %151

151:                                              ; preds = %150, %87
  %152 = phi i64 [ 0, %87 ], [ %73, %150 ]
  br label %153

153:                                              ; preds = %151, %153
  %154 = phi i64 [ %156, %153 ], [ %152, %151 ]
  %155 = getelementptr inbounds i16, i16* %82, i64 %154
  store i16 %86, i16* %155, align 2
  %156 = add nuw i64 %154, 1
  %157 = icmp eq i64 %156, %15
  br i1 %157, label %158, label %153, !llvm.loop !43

158:                                              ; preds = %153, %150, %79
  %159 = add nsw i32 %81, %12
  %160 = icmp sge i32 %159, %7
  %161 = icmp slt i32 %159, %8
  %162 = and i1 %160, %161
  %163 = zext i1 %162 to i32
  %164 = add nsw i32 %80, %163
  %165 = getelementptr inbounds i16, i16* %82, i64 %36
  %166 = add nuw nsw i32 %81, 1
  %167 = icmp eq i32 %166, %45
  br i1 %167, label %374, label %79

168:                                              ; preds = %44
  %169 = sub nsw i32 %49, %10
  %170 = icmp sgt i32 %45, 0
  br i1 %170, label %171, label %374

171:                                              ; preds = %168
  %172 = sext i32 %31 to i64
  %173 = sext i32 %49 to i64
  %174 = sext i32 %169 to i64
  %175 = icmp eq i32 %169, 0
  %176 = sext i32 %59 to i64
  %177 = shl nsw i64 %176, 1
  %178 = sext i32 %57 to i64
  %179 = sub nsw i64 %15, %174
  %180 = sub i64 %179, %176
  %181 = icmp eq i64 %180, 0
  %182 = getelementptr inbounds i16, i16* %34, i64 %173
  %183 = add nsw i64 %174, -16
  %184 = lshr i64 %183, 4
  %185 = add nuw nsw i64 %184, 1
  %186 = add i64 %180, -16
  %187 = lshr i64 %186, 4
  %188 = add nuw nsw i64 %187, 1
  %189 = icmp ult i32 %169, 16
  %190 = and i64 %174, -16
  %191 = and i64 %185, 7
  %192 = icmp ult i64 %183, 112
  %193 = sub nsw i64 %185, %191
  %194 = icmp eq i64 %191, 0
  %195 = icmp eq i64 %190, %174
  %196 = icmp ult i64 %180, 16
  %197 = and i64 %180, -16
  %198 = and i64 %188, 7
  %199 = icmp ult i64 %186, 112
  %200 = sub nsw i64 %188, %198
  %201 = icmp eq i64 %198, 0
  %202 = icmp eq i64 %180, %197
  br label %203

203:                                              ; preds = %364, %171
  %204 = phi i32 [ %53, %171 ], [ %370, %364 ]
  %205 = phi i32 [ 0, %171 ], [ %372, %364 ]
  %206 = phi i16* [ %35, %171 ], [ %371, %364 ]
  %207 = sext i32 %204 to i64
  %208 = mul nsw i64 %207, %172
  br i1 %46, label %209, label %283

209:                                              ; preds = %203
  %210 = getelementptr inbounds i16, i16* %182, i64 %208
  %211 = load i16, i16* %210, align 2
  br i1 %175, label %283, label %212

212:                                              ; preds = %209
  br i1 %189, label %276, label %213

213:                                              ; preds = %212
  %214 = insertelement <8 x i16> undef, i16 %211, i32 0
  %215 = shufflevector <8 x i16> %214, <8 x i16> undef, <8 x i32> zeroinitializer
  %216 = insertelement <8 x i16> undef, i16 %211, i32 0
  %217 = shufflevector <8 x i16> %216, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %192, label %263, label %218

218:                                              ; preds = %213, %218
  %219 = phi i64 [ %260, %218 ], [ 0, %213 ]
  %220 = phi i64 [ %261, %218 ], [ %193, %213 ]
  %221 = getelementptr inbounds i16, i16* %206, i64 %219
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %222, align 2
  %223 = getelementptr inbounds i16, i16* %221, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %224, align 2
  %225 = or i64 %219, 16
  %226 = getelementptr inbounds i16, i16* %206, i64 %225
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %227, align 2
  %228 = getelementptr inbounds i16, i16* %226, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %229, align 2
  %230 = or i64 %219, 32
  %231 = getelementptr inbounds i16, i16* %206, i64 %230
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %232, align 2
  %233 = getelementptr inbounds i16, i16* %231, i64 8
  %234 = bitcast i16* %233 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %234, align 2
  %235 = or i64 %219, 48
  %236 = getelementptr inbounds i16, i16* %206, i64 %235
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %237, align 2
  %238 = getelementptr inbounds i16, i16* %236, i64 8
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %239, align 2
  %240 = or i64 %219, 64
  %241 = getelementptr inbounds i16, i16* %206, i64 %240
  %242 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %242, align 2
  %243 = getelementptr inbounds i16, i16* %241, i64 8
  %244 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %244, align 2
  %245 = or i64 %219, 80
  %246 = getelementptr inbounds i16, i16* %206, i64 %245
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %247, align 2
  %248 = getelementptr inbounds i16, i16* %246, i64 8
  %249 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %249, align 2
  %250 = or i64 %219, 96
  %251 = getelementptr inbounds i16, i16* %206, i64 %250
  %252 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %252, align 2
  %253 = getelementptr inbounds i16, i16* %251, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %254, align 2
  %255 = or i64 %219, 112
  %256 = getelementptr inbounds i16, i16* %206, i64 %255
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %257, align 2
  %258 = getelementptr inbounds i16, i16* %256, i64 8
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %259, align 2
  %260 = add i64 %219, 128
  %261 = add i64 %220, -8
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %263, label %218, !llvm.loop !44

263:                                              ; preds = %218, %213
  %264 = phi i64 [ 0, %213 ], [ %260, %218 ]
  br i1 %194, label %275, label %265

265:                                              ; preds = %263, %265
  %266 = phi i64 [ %272, %265 ], [ %264, %263 ]
  %267 = phi i64 [ %273, %265 ], [ %191, %263 ]
  %268 = getelementptr inbounds i16, i16* %206, i64 %266
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %269, align 2
  %270 = getelementptr inbounds i16, i16* %268, i64 8
  %271 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %271, align 2
  %272 = add i64 %266, 16
  %273 = add i64 %267, -1
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %265, !llvm.loop !45

275:                                              ; preds = %265, %263
  br i1 %195, label %283, label %276

276:                                              ; preds = %275, %212
  %277 = phi i64 [ 0, %212 ], [ %190, %275 ]
  br label %278

278:                                              ; preds = %276, %278
  %279 = phi i64 [ %281, %278 ], [ %277, %276 ]
  %280 = getelementptr inbounds i16, i16* %206, i64 %279
  store i16 %211, i16* %280, align 2
  %281 = add nuw i64 %279, 1
  %282 = icmp eq i64 %281, %174
  br i1 %282, label %283, label %278, !llvm.loop !46

283:                                              ; preds = %278, %275, %203, %209
  %284 = getelementptr inbounds i16, i16* %206, i64 %174
  %285 = bitcast i16* %284 to i8*
  %286 = getelementptr inbounds i16, i16* %34, i64 %208
  %287 = getelementptr inbounds i16, i16* %286, i64 %173
  %288 = bitcast i16* %287 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %285, i8* align 2 %288, i64 %177, i1 false)
  br i1 %55, label %289, label %364

289:                                              ; preds = %283
  %290 = getelementptr inbounds i16, i16* %284, i64 %176
  %291 = getelementptr inbounds i16, i16* %286, i64 %178
  %292 = load i16, i16* %291, align 2
  br i1 %181, label %364, label %293

293:                                              ; preds = %289
  br i1 %196, label %357, label %294

294:                                              ; preds = %293
  %295 = insertelement <8 x i16> undef, i16 %292, i32 0
  %296 = shufflevector <8 x i16> %295, <8 x i16> undef, <8 x i32> zeroinitializer
  %297 = insertelement <8 x i16> undef, i16 %292, i32 0
  %298 = shufflevector <8 x i16> %297, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %199, label %344, label %299

299:                                              ; preds = %294, %299
  %300 = phi i64 [ %341, %299 ], [ 0, %294 ]
  %301 = phi i64 [ %342, %299 ], [ %200, %294 ]
  %302 = getelementptr inbounds i16, i16* %290, i64 %300
  %303 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %303, align 2
  %304 = getelementptr inbounds i16, i16* %302, i64 8
  %305 = bitcast i16* %304 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %305, align 2
  %306 = or i64 %300, 16
  %307 = getelementptr inbounds i16, i16* %290, i64 %306
  %308 = bitcast i16* %307 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %308, align 2
  %309 = getelementptr inbounds i16, i16* %307, i64 8
  %310 = bitcast i16* %309 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %310, align 2
  %311 = or i64 %300, 32
  %312 = getelementptr inbounds i16, i16* %290, i64 %311
  %313 = bitcast i16* %312 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %313, align 2
  %314 = getelementptr inbounds i16, i16* %312, i64 8
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %315, align 2
  %316 = or i64 %300, 48
  %317 = getelementptr inbounds i16, i16* %290, i64 %316
  %318 = bitcast i16* %317 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %318, align 2
  %319 = getelementptr inbounds i16, i16* %317, i64 8
  %320 = bitcast i16* %319 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %320, align 2
  %321 = or i64 %300, 64
  %322 = getelementptr inbounds i16, i16* %290, i64 %321
  %323 = bitcast i16* %322 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %323, align 2
  %324 = getelementptr inbounds i16, i16* %322, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %325, align 2
  %326 = or i64 %300, 80
  %327 = getelementptr inbounds i16, i16* %290, i64 %326
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %328, align 2
  %329 = getelementptr inbounds i16, i16* %327, i64 8
  %330 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %330, align 2
  %331 = or i64 %300, 96
  %332 = getelementptr inbounds i16, i16* %290, i64 %331
  %333 = bitcast i16* %332 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %333, align 2
  %334 = getelementptr inbounds i16, i16* %332, i64 8
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %335, align 2
  %336 = or i64 %300, 112
  %337 = getelementptr inbounds i16, i16* %290, i64 %336
  %338 = bitcast i16* %337 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %338, align 2
  %339 = getelementptr inbounds i16, i16* %337, i64 8
  %340 = bitcast i16* %339 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %340, align 2
  %341 = add i64 %300, 128
  %342 = add i64 %301, -8
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %344, label %299, !llvm.loop !47

344:                                              ; preds = %299, %294
  %345 = phi i64 [ 0, %294 ], [ %341, %299 ]
  br i1 %201, label %356, label %346

346:                                              ; preds = %344, %346
  %347 = phi i64 [ %353, %346 ], [ %345, %344 ]
  %348 = phi i64 [ %354, %346 ], [ %198, %344 ]
  %349 = getelementptr inbounds i16, i16* %290, i64 %347
  %350 = bitcast i16* %349 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %350, align 2
  %351 = getelementptr inbounds i16, i16* %349, i64 8
  %352 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %352, align 2
  %353 = add i64 %347, 16
  %354 = add i64 %348, -1
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %346, !llvm.loop !48

356:                                              ; preds = %346, %344
  br i1 %202, label %364, label %357

357:                                              ; preds = %356, %293
  %358 = phi i64 [ 0, %293 ], [ %197, %356 ]
  br label %359

359:                                              ; preds = %357, %359
  %360 = phi i64 [ %362, %359 ], [ %358, %357 ]
  %361 = getelementptr inbounds i16, i16* %290, i64 %360
  store i16 %292, i16* %361, align 2
  %362 = add nuw i64 %360, 1
  %363 = icmp eq i64 %362, %180
  br i1 %363, label %364, label %359, !llvm.loop !49

364:                                              ; preds = %359, %356, %289, %283
  %365 = add nsw i32 %205, %12
  %366 = icmp sge i32 %365, %7
  %367 = icmp slt i32 %365, %8
  %368 = and i1 %366, %367
  %369 = zext i1 %368 to i32
  %370 = add nsw i32 %204, %369
  %371 = getelementptr inbounds i16, i16* %206, i64 %36
  %372 = add nuw nsw i32 %205, 1
  %373 = icmp eq i32 %372, %45
  br i1 %373, label %374, label %203

374:                                              ; preds = %364, %158, %168, %62
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav14Tile18BuildConvolveBlockIhEEvNS_5PlaneEibiiiiiiiiiPhll(%"class.libgav1::Tile"*, i8 zeroext, i32, i1 zeroext, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %17 = icmp eq i32 %2, -1
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 42
  br label %25

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 23
  %22 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %21, align 8
  %23 = sext i32 %2 to i64
  %24 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %22, i64 0, i32 0, i64 %23, i32 0
  br label %25

25:                                               ; preds = %20, %18
  %26 = phi %"class.libgav1::RefCountedBuffer"** [ %19, %18 ], [ %24, %20 ]
  %27 = load %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::RefCountedBuffer"** %26, align 8
  %28 = zext i8 %1 to i64
  %29 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %27, i64 0, i32 3, i32 11, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.libgav1::RefCountedBuffer", %"class.libgav1::RefCountedBuffer"* %27, i64 0, i32 3, i32 13, i64 %28
  %32 = load i8*, i8** %31, align 8
  %33 = add nsw i32 %4, 7
  br i1 %3, label %34, label %40

34:                                               ; preds = %25
  %35 = add nsw i32 %4, -1
  %36 = mul nsw i32 %35, %9
  %37 = add nsw i32 %36, 1023
  %38 = ashr i32 %37, 10
  %39 = add nsw i32 %38, 8
  br label %40

40:                                               ; preds = %34, %25
  %41 = phi i32 [ %39, %34 ], [ %33, %25 ]
  %42 = icmp slt i32 %10, %5
  %43 = icmp sgt i32 %10, %6
  %44 = select i1 %43, i32 %6, i32 %10
  %45 = select i1 %42, i32 %5, i32 %44
  %46 = icmp slt i32 %12, %7
  %47 = icmp sgt i32 %12, %8
  %48 = select i1 %47, i32 %8, i32 %12
  %49 = select i1 %46, i32 %7, i32 %48
  %50 = icmp sgt i32 %45, %11
  %51 = icmp sgt i32 %11, %6
  %52 = select i1 %51, i32 %6, i32 %11
  %53 = select i1 %50, i32 %45, i32 %52
  %54 = sub i32 1, %45
  %55 = add i32 %54, %53
  %56 = icmp slt i32 %53, %10
  %57 = or i1 %50, %56
  %58 = icmp sgt i32 %41, 0
  br i1 %57, label %59, label %99

59:                                               ; preds = %40
  br i1 %58, label %60, label %146

60:                                               ; preds = %59
  %61 = sext i32 %30 to i64
  %62 = sext i32 %53 to i64
  %63 = getelementptr inbounds i8, i8* %32, i64 %62
  %64 = and i32 %41, 1
  %65 = icmp eq i32 %41, 1
  br i1 %65, label %137, label %66

66:                                               ; preds = %60
  %67 = sub i32 %41, %64
  br label %68

68:                                               ; preds = %68, %66
  %69 = phi i32 [ %49, %66 ], [ %94, %68 ]
  %70 = phi i32 [ 0, %66 ], [ %96, %68 ]
  %71 = phi i8* [ %13, %66 ], [ %95, %68 ]
  %72 = phi i32 [ %67, %66 ], [ %97, %68 ]
  %73 = sext i32 %69 to i64
  %74 = mul nsw i64 %73, %61
  %75 = getelementptr inbounds i8, i8* %63, i64 %74
  %76 = load i8, i8* %75, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %71, i8 %76, i64 %15, i1 false) #7
  %77 = add nsw i32 %70, %12
  %78 = icmp sge i32 %77, %7
  %79 = icmp slt i32 %77, %8
  %80 = and i1 %78, %79
  %81 = zext i1 %80 to i32
  %82 = add nsw i32 %69, %81
  %83 = getelementptr inbounds i8, i8* %71, i64 %14
  %84 = or i32 %70, 1
  %85 = sext i32 %82 to i64
  %86 = mul nsw i64 %85, %61
  %87 = getelementptr inbounds i8, i8* %63, i64 %86
  %88 = load i8, i8* %87, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %83, i8 %88, i64 %15, i1 false) #7
  %89 = add nsw i32 %84, %12
  %90 = icmp sge i32 %89, %7
  %91 = icmp slt i32 %89, %8
  %92 = and i1 %90, %91
  %93 = zext i1 %92 to i32
  %94 = add nsw i32 %82, %93
  %95 = getelementptr inbounds i8, i8* %83, i64 %14
  %96 = add nuw nsw i32 %70, 2
  %97 = add i32 %72, -2
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %137, label %68

99:                                               ; preds = %40
  br i1 %58, label %100, label %146

100:                                              ; preds = %99
  %101 = sub nsw i32 %45, %10
  %102 = sext i32 %30 to i64
  %103 = sext i32 %45 to i64
  %104 = sext i32 %101 to i64
  %105 = sext i32 %55 to i64
  %106 = sext i32 %53 to i64
  %107 = sub i64 %15, %104
  %108 = sub i64 %107, %105
  %109 = getelementptr inbounds i8, i8* %32, i64 %103
  br label %110

110:                                              ; preds = %127, %100
  %111 = phi i32 [ %49, %100 ], [ %133, %127 ]
  %112 = phi i32 [ 0, %100 ], [ %135, %127 ]
  %113 = phi i8* [ %13, %100 ], [ %134, %127 ]
  %114 = sext i32 %111 to i64
  %115 = mul nsw i64 %114, %102
  br i1 %42, label %116, label %119

116:                                              ; preds = %110
  %117 = getelementptr inbounds i8, i8* %109, i64 %115
  %118 = load i8, i8* %117, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %113, i8 %118, i64 %104, i1 false) #7
  br label %119

119:                                              ; preds = %110, %116
  %120 = getelementptr inbounds i8, i8* %113, i64 %104
  %121 = getelementptr inbounds i8, i8* %32, i64 %115
  %122 = getelementptr inbounds i8, i8* %121, i64 %103
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %120, i8* align 1 %122, i64 %105, i1 false)
  br i1 %51, label %123, label %127

123:                                              ; preds = %119
  %124 = getelementptr inbounds i8, i8* %120, i64 %105
  %125 = getelementptr inbounds i8, i8* %121, i64 %106
  %126 = load i8, i8* %125, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %124, i8 %126, i64 %108, i1 false) #7
  br label %127

127:                                              ; preds = %123, %119
  %128 = add nsw i32 %112, %12
  %129 = icmp sge i32 %128, %7
  %130 = icmp slt i32 %128, %8
  %131 = and i1 %129, %130
  %132 = zext i1 %131 to i32
  %133 = add nsw i32 %111, %132
  %134 = getelementptr inbounds i8, i8* %113, i64 %14
  %135 = add nuw nsw i32 %112, 1
  %136 = icmp eq i32 %135, %41
  br i1 %136, label %146, label %110

137:                                              ; preds = %68, %60
  %138 = phi i32 [ %49, %60 ], [ %94, %68 ]
  %139 = phi i8* [ %13, %60 ], [ %95, %68 ]
  %140 = icmp eq i32 %64, 0
  br i1 %140, label %146, label %141

141:                                              ; preds = %137
  %142 = sext i32 %138 to i64
  %143 = mul nsw i64 %142, %61
  %144 = getelementptr inbounds i8, i8* %63, i64 %143
  %145 = load i8, i8* %144, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %139, i8 %145, i64 %15, i1 false) #7
  br label %146

146:                                              ; preds = %127, %141, %137, %99, %59
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

; Function Attrs: nounwind
declare void @_ZNSt3__118condition_variable4waitERNS_11unique_lockINS_5mutexEEE(%"class.std::__1::condition_variable"*, %"class.std::__1::unique_lock"* dereferenceable(16)) local_unnamed_addr #6

declare void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !9}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !15, !9}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
!16 = distinct !{!16, !9}
!17 = distinct !{!17, !13}
!18 = distinct !{!18, !15, !9}
!19 = distinct !{!19, !9}
!20 = distinct !{!20, !13}
!21 = distinct !{!21, !15, !9}
!22 = distinct !{!22, !9}
!23 = distinct !{!23, !13}
!24 = distinct !{!24, !15, !9}
!25 = distinct !{!25, !9}
!26 = distinct !{!26, !13}
!27 = distinct !{!27, !15, !9}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !9}
!34 = distinct !{!34, !9}
!35 = distinct !{!35, !9}
!36 = distinct !{!36, !13}
!37 = distinct !{!37, !15, !9}
!38 = !{i32 0, i32 33}
!39 = distinct !{!39, !9}
!40 = distinct !{!40, !15, !9}
!41 = distinct !{!41, !9}
!42 = distinct !{!42, !13}
!43 = distinct !{!43, !15, !9}
!44 = distinct !{!44, !9}
!45 = distinct !{!45, !13}
!46 = distinct !{!46, !15, !9}
!47 = distinct !{!47, !9}
!48 = distinct !{!48, !13}
!49 = distinct !{!49, !15, !9}
