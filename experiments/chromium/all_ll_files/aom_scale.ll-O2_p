; ModuleID = '../../third_party/libaom/source/libaom/aom_scale/generic/aom_scale.c'
source_filename = "../../third_party/libaom/source/libaom/aom_scale/generic/aom_scale.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }

@switch.table.aom_scale_frame = private unnamed_addr constant [4 x void (i8*, i32, i8*, i32)*] [void (i8*, i32, i8*, i32)* @aom_horizontal_line_2_1_scale_c, void (i8*, i32, i8*, i32)* @aom_horizontal_line_5_3_scale_c, void (i8*, i32, i8*, i32)* null, void (i8*, i32, i8*, i32)* @aom_horizontal_line_5_4_scale_c], align 8
@switch.table.aom_scale_frame.1 = private unnamed_addr constant [4 x i32] [i32 1, i32 1, i32 0, i32 1], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_scale_frame(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, i8*, i8 zeroext, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %11 = add i32 %4, -1
  %12 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = mul i32 %13, %5
  %15 = add i32 %11, %14
  %16 = udiv i32 %15, %4
  %17 = add i32 %6, -1
  %18 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %19 = getelementptr inbounds %union.anon.0, %union.anon.0* %18, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = mul i32 %20, %7
  %22 = add i32 %17, %21
  %23 = udiv i32 %22, %6
  %24 = icmp sgt i32 %9, 0
  br i1 %24, label %25, label %65

25:                                               ; preds = %10
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %27 = bitcast %union.anon.8* %26 to [3 x i8*]*
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %29 = bitcast %union.anon.6* %28 to [2 x i32]*
  %30 = bitcast %struct.yv12_buffer_config* %0 to [2 x i32]*
  %31 = bitcast %union.anon.0* %18 to [2 x i32]*
  %32 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %33 = bitcast %union.anon.8* %32 to [3 x i8*]*
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %35 = bitcast %union.anon.6* %34 to [2 x i32]*
  %36 = mul i32 %5, 10
  %37 = udiv i32 %36, %4
  %38 = mul i32 %7, 10
  %39 = udiv i32 %38, %6
  %40 = icmp eq i32 %8, 0
  %41 = select i1 %40, void (i8*, i32, i8*, i32, i32)* @aom_vertical_band_2_1_scale_i_c, void (i8*, i32, i8*, i32, i32)* @aom_vertical_band_2_1_scale_c
  %42 = zext i1 %40 to i32
  %43 = icmp eq i32 %4, 2
  %44 = icmp eq i32 %5, 1
  %45 = and i1 %43, %44
  %46 = select i1 %45, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_ps, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_c
  %47 = icmp eq i32 %6, 2
  %48 = icmp eq i32 %7, 1
  %49 = and i1 %47, %48
  %50 = select i1 %40, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_i, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_ps
  %51 = select i1 %49, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* %50, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_c
  %52 = zext i8 %3 to i32
  %53 = add nsw i32 %52, -1
  %54 = mul i32 %53, %7
  %55 = bitcast %struct.yv12_buffer_config* %1 to [2 x i32]*
  %56 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  %57 = bitcast %union.anon.0* %56 to [2 x i32]*
  %58 = zext i32 %9 to i64
  %59 = add i32 %37, -5
  %60 = icmp ult i32 %59, 4
  %61 = sext i32 %59 to i64
  %62 = getelementptr inbounds [4 x void (i8*, i32, i8*, i32)*], [4 x void (i8*, i32, i8*, i32)*]* @switch.table.aom_scale_frame, i64 0, i64 %61
  %63 = sext i32 %59 to i64
  %64 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table.aom_scale_frame.1, i64 0, i64 %63
  br label %66

65:                                               ; preds = %360, %10
  ret void

66:                                               ; preds = %360, %25
  %67 = phi i64 [ 0, %25 ], [ %361, %360 ]
  %68 = icmp ne i64 %67, 0
  %69 = zext i1 %68 to i32
  %70 = ashr i32 %16, %69
  %71 = ashr i32 %23, %69
  %72 = getelementptr inbounds [3 x i8*], [3 x i8*]* %27, i64 0, i64 %67
  %73 = load i8*, i8** %72, align 8
  %74 = zext i1 %68 to i64
  %75 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds [2 x i32], [2 x i32]* %30, i64 0, i64 %74
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds [2 x i32], [2 x i32]* %31, i64 0, i64 %74
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds [3 x i8*], [3 x i8*]* %33, i64 0, i64 %67
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds [2 x i32], [2 x i32]* %35, i64 0, i64 %74
  %84 = load i32, i32* %83, align 4
  %85 = icmp slt i32 %76, 0
  br i1 %85, label %86, label %91

86:                                               ; preds = %66
  %87 = add i32 %80, -1
  %88 = mul nsw i32 %87, %76
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %73, i64 %89
  br label %91

91:                                               ; preds = %86, %66
  %92 = phi i8* [ %90, %86 ], [ %73, %66 ]
  br i1 %60, label %93, label %96

93:                                               ; preds = %91
  %94 = load void (i8*, i32, i8*, i32)*, void (i8*, i32, i8*, i32)** %62, align 8
  %95 = load i32, i32* %64, align 4
  br label %96

96:                                               ; preds = %91, %93
  %97 = phi void (i8*, i32, i8*, i32)* [ %94, %93 ], [ null, %91 ]
  %98 = phi i32 [ %95, %93 ], [ 0, %91 ]
  switch i32 %39, label %170 [
    i32 8, label %101
    i32 6, label %99
    i32 5, label %100
  ]

99:                                               ; preds = %96
  br label %101

100:                                              ; preds = %96
  br label %101

101:                                              ; preds = %100, %99, %96
  %102 = phi i32 [ 1, %100 ], [ 3, %99 ], [ 4, %96 ]
  %103 = phi i32 [ 2, %100 ], [ 5, %99 ], [ 5, %96 ]
  %104 = phi void (i8*, i32, i8*, i32, i32)* [ %41, %100 ], [ @aom_vertical_band_5_3_scale_c, %99 ], [ @aom_vertical_band_5_4_scale_c, %96 ]
  %105 = phi i32 [ %42, %100 ], [ 0, %99 ], [ 0, %96 ]
  %106 = icmp eq i32 %98, 0
  br i1 %106, label %170, label %107

107:                                              ; preds = %101
  %108 = icmp eq i32 %80, %71
  br i1 %108, label %109, label %122

109:                                              ; preds = %107
  %110 = icmp eq i32 %71, 0
  br i1 %110, label %256, label %111

111:                                              ; preds = %109
  %112 = sext i32 %76 to i64
  %113 = sext i32 %84 to i64
  br label %114

114:                                              ; preds = %114, %111
  %115 = phi i8* [ %73, %111 ], [ %118, %114 ]
  %116 = phi i32 [ 0, %111 ], [ %120, %114 ]
  %117 = phi i8* [ %82, %111 ], [ %119, %114 ]
  tail call void %97(i8* %115, i32 %78, i8* %117, i32 %70) #4, !callees !2
  %118 = getelementptr inbounds i8, i8* %115, i64 %112
  %119 = getelementptr inbounds i8, i8* %117, i64 %113
  %120 = add nuw i32 %116, 1
  %121 = icmp eq i32 %120, %71
  br i1 %121, label %258, label %114

122:                                              ; preds = %107
  %123 = icmp ne i32 %105, 0
  br i1 %123, label %124, label %127

124:                                              ; preds = %122
  %125 = icmp ugt i8* %92, %73
  %126 = select i1 %125, i8* %92, i8* %73
  tail call void %97(i8* %126, i32 %78, i8* %2, i32 %70) #4, !callees !2
  br label %127

127:                                              ; preds = %124, %122
  %128 = phi i8* [ %126, %124 ], [ %73, %122 ]
  %129 = add i32 %71, -1
  %130 = add i32 %129, %102
  %131 = udiv i32 %130, %102
  %132 = icmp ugt i32 %102, %130
  br i1 %132, label %258, label %133

133:                                              ; preds = %127
  %134 = sext i32 %84 to i64
  %135 = getelementptr inbounds i8, i8* %2, i64 %134
  %136 = mul i32 %103, %84
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %2, i64 %137
  %139 = zext i32 %70 to i64
  %140 = zext i32 %103 to i64
  %141 = sext i32 %76 to i64
  %142 = mul nsw i64 %140, %141
  %143 = zext i32 %102 to i64
  %144 = mul nsw i64 %143, %134
  br label %145

145:                                              ; preds = %165, %133
  %146 = phi i8* [ %128, %133 ], [ %166, %165 ]
  %147 = phi i32 [ 0, %133 ], [ %168, %165 ]
  %148 = phi i8* [ %82, %133 ], [ %167, %165 ]
  br label %149

149:                                              ; preds = %149, %145
  %150 = phi i64 [ 0, %145 ], [ %157, %149 ]
  %151 = trunc i64 %150 to i32
  %152 = mul i32 %76, %151
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %146, i64 %153
  %155 = icmp ult i8* %154, %92
  %156 = select i1 %155, i8* %92, i8* %154
  %157 = add nuw nsw i64 %150, 1
  %158 = trunc i64 %157 to i32
  %159 = mul i32 %84, %158
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds i8, i8* %2, i64 %160
  tail call void %97(i8* %156, i32 %78, i8* %161, i32 %70) #4, !callees !2
  %162 = icmp eq i64 %157, %140
  br i1 %162, label %163, label %149

163:                                              ; preds = %149
  tail call void %104(i8* %135, i32 %84, i8* %148, i32 %84, i32 %70) #4, !callees !3
  br i1 %123, label %164, label %165

164:                                              ; preds = %163
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %138, i64 %139, i1 false) #4
  br label %165

165:                                              ; preds = %164, %163
  %166 = getelementptr inbounds i8, i8* %146, i64 %142
  %167 = getelementptr inbounds i8, i8* %148, i64 %144
  %168 = add nuw i32 %147, 1
  %169 = icmp ult i32 %168, %131
  br i1 %169, label %145, label %258

170:                                              ; preds = %101, %96
  %171 = icmp eq i32 %80, %71
  br i1 %171, label %172, label %186

172:                                              ; preds = %170
  %173 = icmp eq i32 %71, 0
  br i1 %173, label %256, label %174

174:                                              ; preds = %172
  %175 = add i32 %78, 1
  %176 = sext i32 %76 to i64
  %177 = sext i32 %84 to i64
  br label %178

178:                                              ; preds = %178, %174
  %179 = phi i8* [ %73, %174 ], [ %182, %178 ]
  %180 = phi i32 [ 0, %174 ], [ %184, %178 ]
  %181 = phi i8* [ %82, %174 ], [ %183, %178 ]
  tail call void %46(i8* %179, i32 1, i32 %4, i32 %175, i8* %181, i32 1, i32 %5, i32 %70) #4, !callees !4
  %182 = getelementptr inbounds i8, i8* %179, i64 %176
  %183 = getelementptr inbounds i8, i8* %181, i64 %177
  %184 = add nuw i32 %180, 1
  %185 = icmp eq i32 %184, %71
  br i1 %185, label %258, label %178

186:                                              ; preds = %170
  %187 = icmp ugt i32 %71, %80
  br i1 %187, label %188, label %191

188:                                              ; preds = %186
  %189 = mul i32 %80, %53
  %190 = udiv i32 %189, %71
  br label %193

191:                                              ; preds = %186
  %192 = udiv i32 %54, %6
  br label %193

193:                                              ; preds = %191, %188
  %194 = phi i32 [ %53, %188 ], [ %192, %191 ]
  %195 = phi i32 [ %190, %188 ], [ %53, %191 ]
  %196 = add i32 %78, 1
  tail call void %46(i8* %73, i32 1, i32 %4, i32 %196, i8* %2, i32 1, i32 %5, i32 %70) #4, !callees !4
  %197 = add i32 %71, -1
  %198 = add i32 %197, %194
  %199 = udiv i32 %198, %194
  %200 = icmp ugt i32 %194, %198
  br i1 %200, label %258, label %201

201:                                              ; preds = %193
  %202 = add i32 %195, 1
  %203 = icmp ugt i32 %202, 1
  %204 = sext i32 %84 to i64
  %205 = icmp eq i32 %70, 0
  %206 = mul i32 %195, %84
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds i8, i8* %2, i64 %207
  %209 = mul i32 %195, %76
  %210 = zext i32 %209 to i64
  %211 = mul i32 %194, %84
  %212 = zext i32 %211 to i64
  %213 = zext i32 %202 to i64
  %214 = zext i32 %70 to i64
  br label %215

215:                                              ; preds = %251, %201
  %216 = phi i8* [ %73, %201 ], [ %252, %251 ]
  %217 = phi i32 [ 0, %201 ], [ %254, %251 ]
  %218 = phi i8* [ %82, %201 ], [ %253, %251 ]
  br i1 %203, label %219, label %221

219:                                              ; preds = %215
  %220 = mul i32 %217, %195
  br label %222

221:                                              ; preds = %242, %215
  br i1 %205, label %251, label %245

222:                                              ; preds = %242, %219
  %223 = phi i64 [ 1, %219 ], [ %243, %242 ]
  %224 = trunc i64 %223 to i32
  %225 = add i32 %220, %224
  %226 = icmp ult i32 %225, %80
  br i1 %226, label %227, label %234

227:                                              ; preds = %222
  %228 = mul i32 %76, %224
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds i8, i8* %216, i64 %229
  %231 = mul i32 %84, %224
  %232 = zext i32 %231 to i64
  %233 = getelementptr inbounds i8, i8* %2, i64 %232
  tail call void %46(i8* %230, i32 1, i32 %4, i32 %196, i8* %233, i32 1, i32 %5, i32 %70) #4, !callees !4
  br label %242

234:                                              ; preds = %222
  %235 = mul i32 %84, %224
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds i8, i8* %2, i64 %236
  %238 = add i32 %224, -1
  %239 = mul i32 %238, %84
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds i8, i8* %2, i64 %240
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %237, i8* align 1 %241, i64 %204, i1 false) #4
  br label %242

242:                                              ; preds = %234, %227
  %243 = add nuw nsw i64 %223, 1
  %244 = icmp eq i64 %243, %213
  br i1 %244, label %221, label %222

245:                                              ; preds = %221, %245
  %246 = phi i64 [ %249, %245 ], [ 0, %221 ]
  %247 = getelementptr inbounds i8, i8* %2, i64 %246
  %248 = getelementptr inbounds i8, i8* %218, i64 %246
  tail call void %51(i8* %247, i32 %84, i32 %6, i32 %202, i8* %248, i32 %84, i32 %7, i32 %194) #4, !callees !5
  %249 = add nuw nsw i64 %246, 1
  %250 = icmp eq i64 %249, %214
  br i1 %250, label %251, label %245

251:                                              ; preds = %245, %221
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %208, i64 %204, i1 false) #4
  %252 = getelementptr inbounds i8, i8* %216, i64 %210
  %253 = getelementptr inbounds i8, i8* %218, i64 %212
  %254 = add nuw i32 %217, 1
  %255 = icmp ult i32 %254, %199
  br i1 %255, label %215, label %258

256:                                              ; preds = %109, %172
  %257 = getelementptr inbounds [2 x i32], [2 x i32]* %55, i64 0, i64 %74
  br label %336

258:                                              ; preds = %165, %114, %251, %178, %127, %193
  %259 = getelementptr inbounds [2 x i32], [2 x i32]* %55, i64 0, i64 %74
  %260 = load i32, i32* %259, align 4
  %261 = icmp slt i32 %70, %260
  %262 = icmp sgt i32 %71, 0
  %263 = and i1 %261, %262
  br i1 %263, label %264, label %336

264:                                              ; preds = %258
  %265 = sext i32 %70 to i64
  %266 = add i32 %70, -2
  %267 = sub i32 1, %70
  %268 = load i8*, i8** %81, align 8
  %269 = getelementptr inbounds i8, i8* %268, i64 -1
  %270 = getelementptr inbounds i8, i8* %269, i64 %265
  %271 = sext i32 %266 to i64
  %272 = getelementptr inbounds i8, i8* %268, i64 %271
  %273 = load i8, i8* %272, align 1
  %274 = add i32 %267, %260
  %275 = sext i32 %274 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %270, i8 %273, i64 %275, i1 false)
  %276 = icmp eq i32 %71, 1
  br i1 %276, label %336, label %277

277:                                              ; preds = %264
  %278 = add i32 %71, -1
  %279 = and i32 %278, 1
  %280 = icmp eq i32 %71, 2
  br i1 %280, label %318, label %281

281:                                              ; preds = %277
  %282 = sub i32 %278, %279
  br label %283

283:                                              ; preds = %283, %281
  %284 = phi i32 [ 1, %281 ], [ %315, %283 ]
  %285 = phi i32 [ %282, %281 ], [ %316, %283 ]
  %286 = load i32, i32* %259, align 4
  %287 = load i8*, i8** %81, align 8
  %288 = load i32, i32* %83, align 4
  %289 = mul nsw i32 %288, %284
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds i8, i8* %287, i64 -1
  %292 = getelementptr inbounds i8, i8* %291, i64 %265
  %293 = getelementptr inbounds i8, i8* %292, i64 %290
  %294 = add i32 %266, %289
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds i8, i8* %287, i64 %295
  %297 = load i8, i8* %296, align 1
  %298 = add i32 %267, %286
  %299 = sext i32 %298 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %293, i8 %297, i64 %299, i1 false)
  %300 = add nuw nsw i32 %284, 1
  %301 = load i32, i32* %259, align 4
  %302 = load i8*, i8** %81, align 8
  %303 = load i32, i32* %83, align 4
  %304 = mul nsw i32 %303, %300
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i8, i8* %302, i64 -1
  %307 = getelementptr inbounds i8, i8* %306, i64 %265
  %308 = getelementptr inbounds i8, i8* %307, i64 %305
  %309 = add i32 %266, %304
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds i8, i8* %302, i64 %310
  %312 = load i8, i8* %311, align 1
  %313 = add i32 %267, %301
  %314 = sext i32 %313 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %308, i8 %312, i64 %314, i1 false)
  %315 = add nuw nsw i32 %284, 2
  %316 = add i32 %285, -2
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %318, label %283

318:                                              ; preds = %283, %277
  %319 = phi i32 [ 1, %277 ], [ %315, %283 ]
  %320 = icmp eq i32 %279, 0
  br i1 %320, label %336, label %321

321:                                              ; preds = %318
  %322 = load i32, i32* %259, align 4
  %323 = load i8*, i8** %81, align 8
  %324 = load i32, i32* %83, align 4
  %325 = mul nsw i32 %324, %319
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i8, i8* %323, i64 -1
  %328 = getelementptr inbounds i8, i8* %327, i64 %265
  %329 = getelementptr inbounds i8, i8* %328, i64 %326
  %330 = add i32 %266, %325
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds i8, i8* %323, i64 %331
  %333 = load i8, i8* %332, align 1
  %334 = add i32 %267, %322
  %335 = sext i32 %334 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %329, i8 %333, i64 %335, i1 false)
  br label %336

336:                                              ; preds = %321, %318, %264, %256, %258
  %337 = phi i32* [ %257, %256 ], [ %259, %258 ], [ %259, %264 ], [ %259, %318 ], [ %259, %321 ]
  %338 = getelementptr inbounds [2 x i32], [2 x i32]* %57, i64 0, i64 %74
  %339 = load i32, i32* %338, align 4
  %340 = icmp slt i32 %71, %339
  br i1 %340, label %341, label %360

341:                                              ; preds = %336
  %342 = add nsw i32 %71, -1
  %343 = add nsw i32 %71, -2
  br label %344

344:                                              ; preds = %341, %344
  %345 = phi i32 [ %342, %341 ], [ %357, %344 ]
  %346 = load i8*, i8** %81, align 8
  %347 = load i32, i32* %83, align 4
  %348 = mul nsw i32 %347, %345
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds i8, i8* %346, i64 %349
  %351 = mul nsw i32 %347, %343
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds i8, i8* %346, i64 %352
  %354 = load i32, i32* %337, align 4
  %355 = add nsw i32 %354, 1
  %356 = sext i32 %355 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %350, i8* align 1 %353, i64 %356, i1 false)
  %357 = add nsw i32 %345, 1
  %358 = load i32, i32* %338, align 4
  %359 = icmp slt i32 %357, %358
  br i1 %359, label %344, label %360

360:                                              ; preds = %344, %336
  %361 = add nuw nsw i64 %67, 1
  %362 = icmp eq i64 %361, %58
  br i1 %362, label %65, label %66
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @scale1d_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32, i32, i32) unnamed_addr #2 {
  %9 = mul i32 %7, %5
  %10 = lshr i32 %6, 1
  %11 = sext i32 %1 to i64
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %49, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds i8, i8* %0, i64 %11
  %15 = load i8, i8* %14, align 1
  %16 = load i8, i8* %0, align 1
  br label %17

17:                                               ; preds = %43, %13
  %18 = phi i8 [ %47, %43 ], [ %15, %13 ]
  %19 = phi i8 [ %46, %43 ], [ %16, %13 ]
  %20 = phi i32 [ %45, %43 ], [ 0, %13 ]
  %21 = phi i32 [ %48, %43 ], [ %6, %13 ]
  %22 = phi i8* [ %44, %43 ], [ %0, %13 ]
  %23 = zext i8 %19 to i32
  %24 = mul i32 %21, %23
  %25 = zext i8 %18 to i32
  %26 = mul i32 %20, %25
  %27 = add i32 %24, %10
  %28 = add i32 %27, %26
  %29 = udiv i32 %28, %6
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %4, align 1
  %31 = add i32 %20, %2
  %32 = icmp ugt i32 %31, %6
  br i1 %32, label %33, label %43

33:                                               ; preds = %17, %33
  %34 = phi i32 [ %36, %33 ], [ %31, %17 ]
  %35 = phi i8* [ %37, %33 ], [ %22, %17 ]
  %36 = sub i32 %34, %6
  %37 = getelementptr inbounds i8, i8* %35, i64 %11
  %38 = icmp ugt i32 %36, %6
  br i1 %38, label %33, label %39

39:                                               ; preds = %33
  %40 = load i8, i8* %37, align 1
  %41 = getelementptr inbounds i8, i8* %37, i64 %11
  %42 = load i8, i8* %41, align 1
  br label %43

43:                                               ; preds = %39, %17
  %44 = phi i8* [ %37, %39 ], [ %22, %17 ]
  %45 = phi i32 [ %36, %39 ], [ %31, %17 ]
  %46 = phi i8 [ %40, %39 ], [ %19, %17 ]
  %47 = phi i8 [ %42, %39 ], [ %18, %17 ]
  %48 = sub i32 %6, %45
  br label %17

49:                                               ; preds = %8
  ret void
}

declare void @aom_horizontal_line_5_4_scale_c(i8*, i32, i8*, i32) local_unnamed_addr #3

declare void @aom_horizontal_line_5_3_scale_c(i8*, i32, i8*, i32) local_unnamed_addr #3

declare void @aom_horizontal_line_2_1_scale_c(i8*, i32, i8*, i32) local_unnamed_addr #3

declare void @aom_vertical_band_5_4_scale_c(i8*, i32, i8*, i32, i32) local_unnamed_addr #3

declare void @aom_vertical_band_5_3_scale_c(i8*, i32, i8*, i32, i32) local_unnamed_addr #3

declare void @aom_vertical_band_2_1_scale_c(i8*, i32, i8*, i32, i32) local_unnamed_addr #3

declare void @aom_vertical_band_2_1_scale_i_c(i8*, i32, i8*, i32, i32) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @scale1d_2t1_ps(i8* nocapture readonly, i32, i32, i32, i8*, i32, i32, i32) unnamed_addr #2 {
  %9 = mul i32 %7, %5
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %4, i64 %10
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %8
  %14 = shl nsw i32 %1, 1
  %15 = sext i32 %14 to i64
  %16 = sext i32 %5 to i64
  br label %17

17:                                               ; preds = %13, %17
  %18 = phi i8* [ %0, %13 ], [ %21, %17 ]
  %19 = phi i8* [ %4, %13 ], [ %22, %17 ]
  %20 = load i8, i8* %18, align 1
  store i8 %20, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %18, i64 %15
  %22 = getelementptr inbounds i8, i8* %19, i64 %16
  %23 = icmp ult i8* %22, %11
  br i1 %23, label %17, label %24

24:                                               ; preds = %17, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @scale1d_2t1_i(i8* nocapture readonly, i32, i32, i32, i8*, i32, i32, i32) unnamed_addr #2 {
  %9 = mul i32 %7, %5
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %4, i64 %10
  %12 = shl nsw i32 %1, 1
  %13 = load i8, i8* %0, align 1
  store i8 %13, i8* %4, align 1
  %14 = sext i32 %12 to i64
  %15 = sext i32 %5 to i64
  %16 = icmp slt i64 %15, %10
  br i1 %16, label %17, label %42

17:                                               ; preds = %8
  %18 = getelementptr inbounds i8, i8* %4, i64 %15
  %19 = getelementptr inbounds i8, i8* %0, i64 %14
  %20 = sub nsw i32 0, %12
  %21 = sext i32 %20 to i64
  br label %22

22:                                               ; preds = %17, %22
  %23 = phi i8* [ %18, %17 ], [ %40, %22 ]
  %24 = phi i8* [ %19, %17 ], [ %31, %22 ]
  %25 = getelementptr inbounds i8, i8* %24, i64 %21
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = load i8, i8* %24, align 1
  %29 = zext i8 %28 to i32
  %30 = mul nuw nsw i32 %29, 10
  %31 = getelementptr inbounds i8, i8* %24, i64 %14
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = add nuw nsw i32 %33, %27
  %35 = mul nuw nsw i32 %34, 3
  %36 = add nuw nsw i32 %30, 8
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 4
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %23, align 1
  %40 = getelementptr inbounds i8, i8* %23, i64 %15
  %41 = icmp ult i8* %40, %11
  br i1 %41, label %22, label %42

42:                                               ; preds = %22, %8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{void (i8*, i32, i8*, i32)* @aom_horizontal_line_2_1_scale_c, void (i8*, i32, i8*, i32)* @aom_horizontal_line_5_3_scale_c, void (i8*, i32, i8*, i32)* @aom_horizontal_line_5_4_scale_c}
!3 = !{void (i8*, i32, i8*, i32, i32)* @aom_vertical_band_2_1_scale_c, void (i8*, i32, i8*, i32, i32)* @aom_vertical_band_2_1_scale_i_c, void (i8*, i32, i8*, i32, i32)* @aom_vertical_band_5_3_scale_c, void (i8*, i32, i8*, i32, i32)* @aom_vertical_band_5_4_scale_c}
!4 = !{void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_ps, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_c}
!5 = !{void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_i, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_ps, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_c}
