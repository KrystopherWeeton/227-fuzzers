; ModuleID = '../../third_party/nasm/asm/floats.c'
source_filename = "../../third_party/nasm/asm/floats.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ieee_format = type { i32, i32, i32, i32 }

@ieee_8 = internal constant %struct.ieee_format { i32 1, i32 3, i32 0, i32 4 }, align 4
@ieee_16 = internal constant %struct.ieee_format { i32 2, i32 10, i32 0, i32 5 }, align 4
@ieee_32 = internal constant %struct.ieee_format { i32 4, i32 23, i32 0, i32 8 }, align 4
@ieee_64 = internal constant %struct.ieee_format { i32 8, i32 52, i32 0, i32 11 }, align 4
@ieee_80 = internal constant %struct.ieee_format { i32 10, i32 63, i32 1, i32 15 }, align 4
@ieee_128 = internal constant %struct.ieee_format { i32 16, i32 112, i32 0, i32 15 }, align 4
@.str = private unnamed_addr constant [39 x i8] c"strange value %d passed to float_const\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"daz\00", align 1
@daz = internal unnamed_addr global i1 false, align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"nodaz\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"near\00", align 1
@rc = internal unnamed_addr global i32 0, align 4
@.str.4 = private unnamed_addr constant [5 x i8] c"down\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"up\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"zero\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.8 = private unnamed_addr constant [36 x i8] c"../../third_party/nasm/asm/floats.c\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"str[0]\00", align 1
@.str.10 = private unnamed_addr constant [47 x i8] c"internal error: unknown FP constant token `%s'\00", align 1
@.str.11 = private unnamed_addr constant [36 x i8] c"overflow in floating-point constant\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c"underflow in floating-point constant\00", align 1
@.str.13 = private unnamed_addr constant [33 x i8] c"denormal floating-point constant\00", align 1
@.str.14 = private unnamed_addr constant [37 x i8] c"packed BCD requires an 80-bit format\00", align 1
@.str.15 = private unnamed_addr constant [34 x i8] c"packed BCD truncated to 18 digits\00", align 1
@.str.16 = private unnamed_addr constant [46 x i8] c"invalid character `%c' in packed BCD constant\00", align 1
@ieee_flconvert_bin.log2tbl = internal unnamed_addr constant [16 x i32] [i32 -1, i32 0, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3], align 16
@.str.17 = private unnamed_addr constant [44 x i8] c"too many periods in floating-point constant\00", align 1
@.str.18 = private unnamed_addr constant [51 x i8] c"floating-point constant: `%c' is invalid character\00", align 1
@.str.19 = private unnamed_addr constant [54 x i8] c"invalid character in floating-point constant %s: '%c'\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"exponent\00", align 1
@.str.21 = private unnamed_addr constant [65 x i8] c"floating-point constant significand contains more than %i digits\00", align 1
@.str.22 = private unnamed_addr constant [12 x i8] c"significand\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @float_const(i8*, i32, i8* nocapture, i32) local_unnamed_addr #0 {
  switch i32 %3, label %10 [
    i32 1, label %11
    i32 2, label %5
    i32 4, label %6
    i32 8, label %7
    i32 10, label %8
    i32 16, label %9
  ]

5:                                                ; preds = %4
  br label %11

6:                                                ; preds = %4
  br label %11

7:                                                ; preds = %4
  br label %11

8:                                                ; preds = %4
  br label %11

9:                                                ; preds = %4
  br label %11

10:                                               ; preds = %4
  tail call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i32 %3) #9
  unreachable

11:                                               ; preds = %4, %9, %8, %7, %6, %5
  %12 = phi %struct.ieee_format* [ @ieee_128, %9 ], [ @ieee_80, %8 ], [ @ieee_64, %7 ], [ @ieee_32, %6 ], [ @ieee_16, %5 ], [ @ieee_8, %4 ]
  %13 = tail call fastcc i32 @to_float(i8* %0, i32 %1, i8* %2, %struct.ieee_format* nonnull %12)
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @to_float(i8*, i32, i8* nocapture, %struct.ieee_format* readonly) unnamed_addr #0 {
  %5 = alloca [6 x i32], align 16
  %6 = alloca i32, align 4
  %7 = bitcast [6 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #10
  %8 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 0
  %9 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 1
  %10 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 4
  %11 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 5
  %12 = bitcast i32* %6 to i8*
  %13 = bitcast [6 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #10
  store i32 0, i32* %6, align 4
  %14 = getelementptr inbounds %struct.ieee_format, %struct.ieee_format* %3, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, -1
  %17 = shl i32 1, %16
  %18 = getelementptr inbounds %struct.ieee_format, %struct.ieee_format* %3, i64 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, %15
  %21 = and i32 %20, 31
  %22 = lshr i32 -2147483648, %21
  %23 = sdiv i32 %20, 32
  %24 = icmp slt i32 %1, 0
  %25 = getelementptr inbounds %struct.ieee_format, %struct.ieee_format* %3, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = shl nsw i32 %26, 3
  %28 = load i8, i8* %0, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %31, !prof !2

30:                                               ; preds = %4
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8, i64 0, i64 0), i32 731, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0)) #9
  unreachable

31:                                               ; preds = %4
  %32 = tail call i64 @strlen(i8* %0)
  %33 = getelementptr i8, i8* %0, i64 %32
  %34 = getelementptr inbounds i8, i8* %33, i64 -1
  %35 = load i8, i8* %34, align 1
  switch i8 %35, label %39 [
    i8 80, label %36
    i8 112, label %36
  ]

36:                                               ; preds = %31, %31
  %37 = getelementptr inbounds i8, i8* %33, i64 -2
  %38 = tail call fastcc i32 @to_packed_bcd(i8* %0, i8* %37, i32 %1, i8* %2, %struct.ieee_format* %3)
  br label %586

39:                                               ; preds = %31
  switch i8 %28, label %71 [
    i8 95, label %40
    i8 48, label %47
    i8 36, label %68
  ]

40:                                               ; preds = %39
  %41 = getelementptr inbounds i8, i8* %0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = sext i8 %42 to i32
  switch i32 %43, label %46 [
    i32 110, label %528
    i32 78, label %528
    i32 113, label %528
    i32 81, label %528
    i32 115, label %44
    i32 83, label %44
    i32 105, label %45
    i32 73, label %45
  ]

44:                                               ; preds = %40, %40
  br label %528

45:                                               ; preds = %40, %40
  br label %528

46:                                               ; preds = %40
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10, i64 0, i64 0), i8* %0) #10
  br label %528

47:                                               ; preds = %39
  %48 = getelementptr inbounds i8, i8* %0, i64 1
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  switch i32 %50, label %66 [
    i32 120, label %51
    i32 88, label %51
    i32 104, label %51
    i32 72, label %51
    i32 111, label %54
    i32 79, label %54
    i32 113, label %54
    i32 81, label %54
    i32 98, label %57
    i32 66, label %57
    i32 121, label %57
    i32 89, label %57
    i32 100, label %60
    i32 68, label %60
    i32 116, label %60
    i32 84, label %60
    i32 112, label %63
    i32 80, label %63
  ]

51:                                               ; preds = %47, %47, %47, %47
  %52 = getelementptr inbounds i8, i8* %0, i64 2
  %53 = call fastcc zeroext i1 @ieee_flconvert_bin(i8* %52, i32 4, i32* nonnull %8, i32* nonnull %6)
  br i1 %53, label %73, label %528

54:                                               ; preds = %47, %47, %47, %47
  %55 = getelementptr inbounds i8, i8* %0, i64 2
  %56 = call fastcc zeroext i1 @ieee_flconvert_bin(i8* %55, i32 3, i32* nonnull %8, i32* nonnull %6)
  br i1 %56, label %73, label %528

57:                                               ; preds = %47, %47, %47, %47
  %58 = getelementptr inbounds i8, i8* %0, i64 2
  %59 = call fastcc zeroext i1 @ieee_flconvert_bin(i8* %58, i32 1, i32* nonnull %8, i32* nonnull %6)
  br i1 %59, label %73, label %528

60:                                               ; preds = %47, %47, %47, %47
  %61 = getelementptr inbounds i8, i8* %0, i64 2
  %62 = call fastcc zeroext i1 @ieee_flconvert(i8* %61, i32* nonnull %8, i32* nonnull %6)
  br i1 %62, label %73, label %528

63:                                               ; preds = %47, %47
  %64 = getelementptr inbounds i8, i8* %0, i64 2
  %65 = tail call fastcc i32 @to_packed_bcd(i8* %64, i8* %34, i32 %1, i8* %2, %struct.ieee_format* %3)
  br label %586

66:                                               ; preds = %47
  %67 = call fastcc zeroext i1 @ieee_flconvert(i8* %0, i32* nonnull %8, i32* nonnull %6)
  br i1 %67, label %73, label %528

68:                                               ; preds = %39
  %69 = getelementptr inbounds i8, i8* %0, i64 1
  %70 = call fastcc zeroext i1 @ieee_flconvert_bin(i8* %69, i32 4, i32* nonnull %8, i32* nonnull %6)
  br i1 %70, label %73, label %528

71:                                               ; preds = %39
  %72 = call fastcc zeroext i1 @ieee_flconvert(i8* %0, i32* nonnull %8, i32* nonnull %6)
  br i1 %72, label %73, label %528

73:                                               ; preds = %68, %51, %54, %57, %60, %66, %71
  %74 = load i32, i32* %8, align 16
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %76, label %86

76:                                               ; preds = %73
  %77 = load i32, i32* %6, align 4
  %78 = add nsw i32 %77, -1
  store i32 %78, i32* %6, align 4
  %79 = sub i32 2, %17
  %80 = icmp sle i32 %77, %79
  %81 = icmp sgt i32 %78, %17
  %82 = or i1 %80, %81
  br i1 %82, label %83, label %298

83:                                               ; preds = %76
  %84 = icmp sgt i32 %78, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %83
  tail call void (i32, i8*, ...) @nasm_warn(i32 327936, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.11, i64 0, i64 0)) #10
  br label %528

86:                                               ; preds = %73, %296
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 24, i1 false)
  br label %565

87:                                               ; preds = %83
  %88 = load i32, i32* %14, align 4
  %89 = load i32, i32* %18, align 4
  %90 = sub i32 %79, %78
  %91 = add i32 %90, %88
  %92 = add i32 %91, %89
  %93 = srem i32 %92, 32
  %94 = sub nsw i32 32, %93
  %95 = sdiv i32 %92, 32
  %96 = icmp eq i32 %93, 0
  br i1 %96, label %97, label %215

97:                                               ; preds = %87
  %98 = add i32 %92, 31
  %99 = icmp ugt i32 %98, 62
  br i1 %99, label %100, label %255

100:                                              ; preds = %97
  %101 = icmp sgt i32 %92, 191
  br i1 %101, label %255, label %102

102:                                              ; preds = %100
  %103 = sext i32 %95 to i64
  %104 = icmp slt i64 %103, 5
  %105 = select i1 %104, i64 %103, i64 5
  %106 = sub nsw i64 6, %105
  %107 = icmp ult i64 %106, 8
  br i1 %107, label %205, label %108

108:                                              ; preds = %102
  %109 = icmp slt i64 %103, 5
  %110 = select i1 %109, i64 %103, i64 5
  %111 = sub nsw i64 5, %110
  %112 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 5
  %113 = ptrtoint i32* %112 to i64
  %114 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %111, i64 4)
  %115 = extractvalue { i64, i1 } %114, 0
  %116 = extractvalue { i64, i1 } %114, 1
  %117 = icmp ugt i64 %115, %113
  %118 = or i1 %117, %116
  %119 = sub nsw i64 5, %103
  %120 = getelementptr [6 x i32], [6 x i32]* %5, i64 0, i64 %119
  %121 = ptrtoint i32* %120 to i64
  %122 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %111, i64 4)
  %123 = extractvalue { i64, i1 } %122, 0
  %124 = extractvalue { i64, i1 } %122, 1
  %125 = icmp ugt i64 %123, %121
  %126 = or i1 %125, %124
  %127 = or i1 %118, %126
  br i1 %127, label %205, label %128

128:                                              ; preds = %108
  %129 = icmp slt i64 %103, 5
  %130 = select i1 %129, i64 %103, i64 5
  %131 = getelementptr [6 x i32], [6 x i32]* %5, i64 0, i64 %130
  %132 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 1, i64 0
  %133 = sub nsw i64 %130, %103
  %134 = getelementptr [6 x i32], [6 x i32]* %5, i64 0, i64 %133
  %135 = sub nsw i64 0, %103
  %136 = getelementptr [6 x i32], [6 x i32]* %5, i64 1, i64 %135
  %137 = icmp ult i32* %131, %136
  %138 = icmp ult i32* %134, %132
  %139 = and i1 %137, %138
  br i1 %139, label %205, label %140

140:                                              ; preds = %128
  %141 = and i64 %106, -8
  %142 = sub nsw i64 5, %141
  %143 = add nsw i64 %141, -8
  %144 = lshr exact i64 %143, 3
  %145 = add nuw nsw i64 %144, 1
  %146 = and i64 %145, 1
  %147 = icmp eq i64 %143, 0
  br i1 %147, label %186, label %148

148:                                              ; preds = %140
  %149 = sub nuw nsw i64 %145, %146
  br label %150

150:                                              ; preds = %150, %148
  %151 = phi i64 [ 0, %148 ], [ %181, %150 ]
  %152 = phi i64 [ %149, %148 ], [ %182, %150 ]
  %153 = sub i64 5, %151
  %154 = sub nsw i64 %153, %103
  %155 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %154
  %156 = getelementptr inbounds i32, i32* %155, i64 -3
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4, !alias.scope !3
  %159 = getelementptr inbounds i32, i32* %155, i64 -7
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4, !alias.scope !3
  %162 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %153
  %163 = getelementptr inbounds i32, i32* %162, i64 -3
  %164 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %164, align 4, !alias.scope !6, !noalias !3
  %165 = getelementptr inbounds i32, i32* %162, i64 -7
  %166 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> %161, <4 x i32>* %166, align 4, !alias.scope !6, !noalias !3
  %167 = sub nuw nsw i64 -3, %151
  %168 = sub nsw i64 %167, %103
  %169 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %168
  %170 = getelementptr inbounds i32, i32* %169, i64 -3
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 4, !alias.scope !3
  %173 = getelementptr inbounds i32, i32* %169, i64 -7
  %174 = bitcast i32* %173 to <4 x i32>*
  %175 = load <4 x i32>, <4 x i32>* %174, align 4, !alias.scope !3
  %176 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %167
  %177 = getelementptr inbounds i32, i32* %176, i64 -3
  %178 = bitcast i32* %177 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %178, align 4, !alias.scope !6, !noalias !3
  %179 = getelementptr inbounds i32, i32* %176, i64 -7
  %180 = bitcast i32* %179 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %180, align 4, !alias.scope !6, !noalias !3
  %181 = add i64 %151, 16
  %182 = add i64 %152, -2
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %150, !llvm.loop !8

184:                                              ; preds = %150
  %185 = sub nuw nsw i64 -11, %151
  br label %186

186:                                              ; preds = %184, %140
  %187 = phi i64 [ 5, %140 ], [ %185, %184 ]
  %188 = icmp eq i64 %146, 0
  br i1 %188, label %203, label %189

189:                                              ; preds = %186
  %190 = sub nsw i64 %187, %103
  %191 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %190
  %192 = getelementptr inbounds i32, i32* %191, i64 -3
  %193 = bitcast i32* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 4, !alias.scope !3
  %195 = getelementptr inbounds i32, i32* %191, i64 -7
  %196 = bitcast i32* %195 to <4 x i32>*
  %197 = load <4 x i32>, <4 x i32>* %196, align 4, !alias.scope !3
  %198 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %187
  %199 = getelementptr inbounds i32, i32* %198, i64 -3
  %200 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %200, align 4, !alias.scope !6, !noalias !3
  %201 = getelementptr inbounds i32, i32* %198, i64 -7
  %202 = bitcast i32* %201 to <4 x i32>*
  store <4 x i32> %197, <4 x i32>* %202, align 4, !alias.scope !6, !noalias !3
  br label %203

203:                                              ; preds = %186, %189
  %204 = icmp eq i64 %106, %141
  br i1 %204, label %249, label %205

205:                                              ; preds = %203, %128, %108, %102
  %206 = phi i64 [ 5, %128 ], [ 5, %108 ], [ 5, %102 ], [ %142, %203 ]
  br label %207

207:                                              ; preds = %205, %207
  %208 = phi i64 [ %213, %207 ], [ %206, %205 ]
  %209 = sub nsw i64 %208, %103
  %210 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %208
  store i32 %211, i32* %212, align 4
  %213 = add nsw i64 %208, -1
  %214 = icmp sgt i64 %208, %103
  br i1 %214, label %207, label %249, !llvm.loop !10

215:                                              ; preds = %87
  %216 = icmp sgt i32 %92, 191
  br i1 %216, label %255, label %217

217:                                              ; preds = %215
  %218 = sub nsw i32 5, %95
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = lshr i32 %221, %93
  %223 = icmp slt i32 %92, 160
  br i1 %223, label %224, label %243

224:                                              ; preds = %217
  %225 = xor i32 %95, -1
  %226 = sext i32 %95 to i64
  br label %227

227:                                              ; preds = %227, %224
  %228 = phi i64 [ 5, %224 ], [ %238, %227 ]
  %229 = phi i32 [ %222, %224 ], [ %239, %227 ]
  %230 = trunc i64 %228 to i32
  %231 = add i32 %230, %225
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %232
  %234 = load i32, i32* %233, align 4
  %235 = shl i32 %234, %94
  %236 = or i32 %235, %229
  %237 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %228
  store i32 %236, i32* %237, align 4
  %238 = add nsw i64 %228, -1
  %239 = lshr i32 %234, %93
  %240 = icmp sgt i64 %238, %226
  br i1 %240, label %227, label %241

241:                                              ; preds = %227
  %242 = trunc i64 %238 to i32
  br label %243

243:                                              ; preds = %241, %217
  %244 = phi i32 [ 5, %217 ], [ %242, %241 ]
  %245 = phi i32 [ %222, %217 ], [ %239, %241 ]
  %246 = add nsw i32 %244, -1
  %247 = sext i32 %244 to i64
  %248 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %247
  store i32 %245, i32* %248, align 4
  br label %252

249:                                              ; preds = %207, %203
  %250 = phi i64 [ %142, %203 ], [ %213, %207 ]
  %251 = trunc i64 %250 to i32
  br label %252

252:                                              ; preds = %249, %243
  %253 = phi i32 [ %246, %243 ], [ %251, %249 ]
  %254 = icmp sgt i32 %253, -1
  br i1 %254, label %255, label %264

255:                                              ; preds = %252, %215, %100, %97
  %256 = phi i32 [ %253, %252 ], [ 5, %100 ], [ 5, %215 ], [ 0, %97 ]
  %257 = sext i32 %256 to i64
  %258 = zext i32 %256 to i64
  %259 = sub nsw i64 %257, %258
  %260 = getelementptr [6 x i32], [6 x i32]* %5, i64 0, i64 %259
  %261 = bitcast i32* %260 to i8*
  %262 = shl nuw nsw i64 %258, 2
  %263 = add nuw nsw i64 %262, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %261, i8 0, i64 %263, i1 false) #10
  br label %264

264:                                              ; preds = %252, %255
  call fastcc void @ieee_round(i1 zeroext %24, i32* nonnull %8, i32 %27)
  %265 = sext i32 %23 to i64
  %266 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %265
  %267 = load i32, i32* %266, align 4
  %268 = and i32 %267, %22
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %281, label %270

270:                                              ; preds = %264
  store i32 1, i32* %6, align 4
  %271 = load i32, i32* %18, align 4
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %276

273:                                              ; preds = %270
  %274 = xor i32 %22, -1
  %275 = and i32 %267, %274
  store i32 %275, i32* %266, align 4
  br label %276

276:                                              ; preds = %270, %273
  %277 = load i32, i32* %14, align 4
  %278 = lshr i32 -2147483648, %277
  %279 = load i32, i32* %8, align 16
  %280 = or i32 %279, %278
  store i32 %280, i32* %8, align 16
  br label %565

281:                                              ; preds = %264
  %282 = load i1, i1* @daz, align 1
  br i1 %282, label %296, label %283

283:                                              ; preds = %281
  %284 = bitcast [6 x i32]* %5 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 16
  %286 = load i32, i32* %10, align 16
  %287 = load i32, i32* %11, align 4
  %288 = shufflevector <4 x i32> %285, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %289 = or <4 x i32> %285, %288
  %290 = shufflevector <4 x i32> %289, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %291 = or <4 x i32> %289, %290
  %292 = extractelement <4 x i32> %291, i32 0
  %293 = or i32 %292, %286
  %294 = or i32 %293, %287
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %297

296:                                              ; preds = %283, %281
  tail call void (i32, i8*, ...) @nasm_warn(i32 459008, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i64 0, i64 0)) #10
  br label %86

297:                                              ; preds = %283
  tail call void (i32, i8*, ...) @nasm_warn(i32 262400, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i64 0, i64 0)) #10
  br label %565

298:                                              ; preds = %76
  %299 = add i32 %78, %17
  %300 = add i32 %299, -1
  store i32 %300, i32* %6, align 4
  %301 = load i32, i32* %14, align 4
  %302 = load i32, i32* %18, align 4
  %303 = add nsw i32 %302, %301
  %304 = srem i32 %303, 32
  %305 = sub nsw i32 32, %304
  %306 = sdiv i32 %303, 32
  %307 = icmp eq i32 %304, 0
  br i1 %307, label %308, label %426

308:                                              ; preds = %298
  %309 = add i32 %303, 31
  %310 = icmp ugt i32 %309, 62
  br i1 %310, label %311, label %466

311:                                              ; preds = %308
  %312 = icmp sgt i32 %303, 191
  br i1 %312, label %466, label %313

313:                                              ; preds = %311
  %314 = sext i32 %306 to i64
  %315 = icmp slt i64 %314, 5
  %316 = select i1 %315, i64 %314, i64 5
  %317 = sub nsw i64 6, %316
  %318 = icmp ult i64 %317, 8
  br i1 %318, label %416, label %319

319:                                              ; preds = %313
  %320 = icmp slt i64 %314, 5
  %321 = select i1 %320, i64 %314, i64 5
  %322 = sub nsw i64 5, %321
  %323 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 5
  %324 = ptrtoint i32* %323 to i64
  %325 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %322, i64 4)
  %326 = extractvalue { i64, i1 } %325, 0
  %327 = extractvalue { i64, i1 } %325, 1
  %328 = icmp ugt i64 %326, %324
  %329 = or i1 %328, %327
  %330 = sub nsw i64 5, %314
  %331 = getelementptr [6 x i32], [6 x i32]* %5, i64 0, i64 %330
  %332 = ptrtoint i32* %331 to i64
  %333 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %322, i64 4)
  %334 = extractvalue { i64, i1 } %333, 0
  %335 = extractvalue { i64, i1 } %333, 1
  %336 = icmp ugt i64 %334, %332
  %337 = or i1 %336, %335
  %338 = or i1 %329, %337
  br i1 %338, label %416, label %339

339:                                              ; preds = %319
  %340 = icmp slt i64 %314, 5
  %341 = select i1 %340, i64 %314, i64 5
  %342 = getelementptr [6 x i32], [6 x i32]* %5, i64 0, i64 %341
  %343 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 1, i64 0
  %344 = sub nsw i64 %341, %314
  %345 = getelementptr [6 x i32], [6 x i32]* %5, i64 0, i64 %344
  %346 = sub nsw i64 0, %314
  %347 = getelementptr [6 x i32], [6 x i32]* %5, i64 1, i64 %346
  %348 = icmp ult i32* %342, %347
  %349 = icmp ult i32* %345, %343
  %350 = and i1 %348, %349
  br i1 %350, label %416, label %351

351:                                              ; preds = %339
  %352 = and i64 %317, -8
  %353 = sub nsw i64 5, %352
  %354 = add nsw i64 %352, -8
  %355 = lshr exact i64 %354, 3
  %356 = add nuw nsw i64 %355, 1
  %357 = and i64 %356, 1
  %358 = icmp eq i64 %354, 0
  br i1 %358, label %397, label %359

359:                                              ; preds = %351
  %360 = sub nuw nsw i64 %356, %357
  br label %361

361:                                              ; preds = %361, %359
  %362 = phi i64 [ 0, %359 ], [ %392, %361 ]
  %363 = phi i64 [ %360, %359 ], [ %393, %361 ]
  %364 = sub i64 5, %362
  %365 = sub nsw i64 %364, %314
  %366 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %365
  %367 = getelementptr inbounds i32, i32* %366, i64 -3
  %368 = bitcast i32* %367 to <4 x i32>*
  %369 = load <4 x i32>, <4 x i32>* %368, align 4, !alias.scope !11
  %370 = getelementptr inbounds i32, i32* %366, i64 -7
  %371 = bitcast i32* %370 to <4 x i32>*
  %372 = load <4 x i32>, <4 x i32>* %371, align 4, !alias.scope !11
  %373 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %364
  %374 = getelementptr inbounds i32, i32* %373, i64 -3
  %375 = bitcast i32* %374 to <4 x i32>*
  store <4 x i32> %369, <4 x i32>* %375, align 4, !alias.scope !14, !noalias !11
  %376 = getelementptr inbounds i32, i32* %373, i64 -7
  %377 = bitcast i32* %376 to <4 x i32>*
  store <4 x i32> %372, <4 x i32>* %377, align 4, !alias.scope !14, !noalias !11
  %378 = sub nuw nsw i64 -3, %362
  %379 = sub nsw i64 %378, %314
  %380 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %379
  %381 = getelementptr inbounds i32, i32* %380, i64 -3
  %382 = bitcast i32* %381 to <4 x i32>*
  %383 = load <4 x i32>, <4 x i32>* %382, align 4, !alias.scope !11
  %384 = getelementptr inbounds i32, i32* %380, i64 -7
  %385 = bitcast i32* %384 to <4 x i32>*
  %386 = load <4 x i32>, <4 x i32>* %385, align 4, !alias.scope !11
  %387 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %378
  %388 = getelementptr inbounds i32, i32* %387, i64 -3
  %389 = bitcast i32* %388 to <4 x i32>*
  store <4 x i32> %383, <4 x i32>* %389, align 4, !alias.scope !14, !noalias !11
  %390 = getelementptr inbounds i32, i32* %387, i64 -7
  %391 = bitcast i32* %390 to <4 x i32>*
  store <4 x i32> %386, <4 x i32>* %391, align 4, !alias.scope !14, !noalias !11
  %392 = add i64 %362, 16
  %393 = add i64 %363, -2
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %395, label %361, !llvm.loop !16

395:                                              ; preds = %361
  %396 = sub nuw nsw i64 -11, %362
  br label %397

397:                                              ; preds = %395, %351
  %398 = phi i64 [ 5, %351 ], [ %396, %395 ]
  %399 = icmp eq i64 %357, 0
  br i1 %399, label %414, label %400

400:                                              ; preds = %397
  %401 = sub nsw i64 %398, %314
  %402 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %401
  %403 = getelementptr inbounds i32, i32* %402, i64 -3
  %404 = bitcast i32* %403 to <4 x i32>*
  %405 = load <4 x i32>, <4 x i32>* %404, align 4, !alias.scope !11
  %406 = getelementptr inbounds i32, i32* %402, i64 -7
  %407 = bitcast i32* %406 to <4 x i32>*
  %408 = load <4 x i32>, <4 x i32>* %407, align 4, !alias.scope !11
  %409 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %398
  %410 = getelementptr inbounds i32, i32* %409, i64 -3
  %411 = bitcast i32* %410 to <4 x i32>*
  store <4 x i32> %405, <4 x i32>* %411, align 4, !alias.scope !14, !noalias !11
  %412 = getelementptr inbounds i32, i32* %409, i64 -7
  %413 = bitcast i32* %412 to <4 x i32>*
  store <4 x i32> %408, <4 x i32>* %413, align 4, !alias.scope !14, !noalias !11
  br label %414

414:                                              ; preds = %397, %400
  %415 = icmp eq i64 %317, %352
  br i1 %415, label %460, label %416

416:                                              ; preds = %414, %339, %319, %313
  %417 = phi i64 [ 5, %339 ], [ 5, %319 ], [ 5, %313 ], [ %353, %414 ]
  br label %418

418:                                              ; preds = %416, %418
  %419 = phi i64 [ %424, %418 ], [ %417, %416 ]
  %420 = sub nsw i64 %419, %314
  %421 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %420
  %422 = load i32, i32* %421, align 4
  %423 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %419
  store i32 %422, i32* %423, align 4
  %424 = add nsw i64 %419, -1
  %425 = icmp sgt i64 %419, %314
  br i1 %425, label %418, label %460, !llvm.loop !17

426:                                              ; preds = %298
  %427 = icmp sgt i32 %303, 191
  br i1 %427, label %466, label %428

428:                                              ; preds = %426
  %429 = sub nsw i32 5, %306
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %430
  %432 = load i32, i32* %431, align 4
  %433 = lshr i32 %432, %304
  %434 = icmp slt i32 %303, 160
  br i1 %434, label %435, label %454

435:                                              ; preds = %428
  %436 = xor i32 %306, -1
  %437 = sext i32 %306 to i64
  br label %438

438:                                              ; preds = %438, %435
  %439 = phi i64 [ 5, %435 ], [ %449, %438 ]
  %440 = phi i32 [ %433, %435 ], [ %450, %438 ]
  %441 = trunc i64 %439 to i32
  %442 = add i32 %441, %436
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %443
  %445 = load i32, i32* %444, align 4
  %446 = shl i32 %445, %305
  %447 = or i32 %446, %440
  %448 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %439
  store i32 %447, i32* %448, align 4
  %449 = add nsw i64 %439, -1
  %450 = lshr i32 %445, %304
  %451 = icmp sgt i64 %449, %437
  br i1 %451, label %438, label %452

452:                                              ; preds = %438
  %453 = trunc i64 %449 to i32
  br label %454

454:                                              ; preds = %452, %428
  %455 = phi i32 [ 5, %428 ], [ %453, %452 ]
  %456 = phi i32 [ %433, %428 ], [ %450, %452 ]
  %457 = add nsw i32 %455, -1
  %458 = sext i32 %455 to i64
  %459 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %458
  store i32 %456, i32* %459, align 4
  br label %463

460:                                              ; preds = %418, %414
  %461 = phi i64 [ %353, %414 ], [ %424, %418 ]
  %462 = trunc i64 %461 to i32
  br label %463

463:                                              ; preds = %460, %454
  %464 = phi i32 [ %457, %454 ], [ %462, %460 ]
  %465 = icmp sgt i32 %464, -1
  br i1 %465, label %466, label %475

466:                                              ; preds = %463, %426, %311, %308
  %467 = phi i32 [ %464, %463 ], [ 5, %311 ], [ 5, %426 ], [ 0, %308 ]
  %468 = sext i32 %467 to i64
  %469 = zext i32 %467 to i64
  %470 = sub nsw i64 %468, %469
  %471 = getelementptr [6 x i32], [6 x i32]* %5, i64 0, i64 %470
  %472 = bitcast i32* %471 to i8*
  %473 = shl nuw nsw i64 %469, 2
  %474 = add nuw nsw i64 %473, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %472, i8 0, i64 %474, i1 false) #10
  br label %475

475:                                              ; preds = %463, %466
  call fastcc void @ieee_round(i1 zeroext %24, i32* nonnull %8, i32 %27)
  %476 = load i32, i32* %14, align 4
  %477 = load i32, i32* %18, align 4
  %478 = add i32 %476, -1
  %479 = add i32 %478, %477
  %480 = sdiv i32 %479, 32
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %481
  %483 = load i32, i32* %482, align 4
  %484 = and i32 %479, 31
  %485 = xor i32 %484, 31
  %486 = shl i32 1, %485
  %487 = and i32 %486, %483
  %488 = icmp eq i32 %487, 0
  br i1 %488, label %514, label %489

489:                                              ; preds = %475
  %490 = load i32, i32* %11, align 4
  %491 = lshr i32 %490, 1
  %492 = load i32, i32* %10, align 16
  %493 = shl i32 %492, 31
  %494 = or i32 %493, %491
  store i32 %494, i32* %11, align 4
  %495 = bitcast [6 x i32]* %5 to <4 x i32>*
  %496 = load <4 x i32>, <4 x i32>* %495, align 16
  %497 = extractelement <4 x i32> %496, i32 1
  %498 = insertelement <4 x i32> undef, i32 %497, i32 0
  %499 = extractelement <4 x i32> %496, i32 2
  %500 = insertelement <4 x i32> %498, i32 %499, i32 1
  %501 = extractelement <4 x i32> %496, i32 3
  %502 = insertelement <4 x i32> %500, i32 %501, i32 2
  %503 = insertelement <4 x i32> %502, i32 %492, i32 3
  %504 = lshr <4 x i32> %503, <i32 1, i32 1, i32 1, i32 1>
  %505 = shl <4 x i32> %496, <i32 31, i32 31, i32 31, i32 31>
  %506 = or <4 x i32> %505, %504
  %507 = bitcast i32* %9 to <4 x i32>*
  store <4 x i32> %506, <4 x i32>* %507, align 4
  %508 = extractelement <4 x i32> %496, i32 0
  %509 = lshr i32 %508, 1
  store i32 %509, i32* %8, align 16
  store i32 %299, i32* %6, align 4
  %510 = shl i32 %17, 1
  %511 = add nsw i32 %510, -1
  %512 = icmp slt i32 %299, %511
  br i1 %512, label %514, label %513

513:                                              ; preds = %489
  tail call void (i32, i8*, ...) @nasm_warn(i32 327936, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.11, i64 0, i64 0)) #10
  br label %528

514:                                              ; preds = %489, %475
  %515 = phi i32 [ %299, %489 ], [ %300, %475 ]
  %516 = icmp eq i32 %477, 0
  br i1 %516, label %517, label %523

517:                                              ; preds = %514
  %518 = xor i32 %22, -1
  %519 = sext i32 %23 to i64
  %520 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %519
  %521 = load i32, i32* %520, align 4
  %522 = and i32 %521, %518
  store i32 %522, i32* %520, align 4
  br label %523

523:                                              ; preds = %514, %517
  %524 = sub nsw i32 31, %476
  %525 = shl i32 %515, %524
  %526 = load i32, i32* %8, align 16
  %527 = or i32 %526, %525
  store i32 %527, i32* %8, align 16
  br label %565

528:                                              ; preds = %68, %51, %54, %57, %60, %66, %71, %40, %40, %40, %40, %85, %44, %45, %46, %513
  %529 = phi i32 [ 3, %513 ], [ 4, %68 ], [ 4, %51 ], [ 4, %54 ], [ 4, %57 ], [ 4, %60 ], [ 4, %66 ], [ 4, %71 ], [ 4, %40 ], [ 4, %40 ], [ 4, %40 ], [ 4, %40 ], [ 3, %85 ], [ 5, %44 ], [ 3, %45 ], [ 4, %46 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 24, i1 false)
  %530 = load i32, i32* %14, align 4
  %531 = shl nsw i32 -1, %530
  %532 = xor i32 %531, -1
  %533 = sub nsw i32 31, %530
  %534 = shl i32 %532, %533
  store i32 %534, i32* %8, align 16
  %535 = load i32, i32* %18, align 4
  %536 = icmp eq i32 %535, 0
  br i1 %536, label %542, label %537

537:                                              ; preds = %528
  %538 = sext i32 %23 to i64
  %539 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %538
  %540 = load i32, i32* %539, align 4
  %541 = or i32 %540, %22
  store i32 %541, i32* %539, align 4
  br label %542

542:                                              ; preds = %528, %537
  switch i32 %529, label %565 [
    i32 4, label %543
    i32 5, label %553
  ]

543:                                              ; preds = %542
  %544 = add nsw i32 %535, %530
  %545 = add nsw i32 %544, 1
  %546 = and i32 %545, 31
  %547 = lshr i32 -2147483648, %546
  %548 = sdiv i32 %545, 32
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %549
  %551 = load i32, i32* %550, align 4
  %552 = or i32 %551, %547
  store i32 %552, i32* %550, align 4
  br label %565

553:                                              ; preds = %542
  %554 = add nsw i32 %535, %530
  %555 = getelementptr inbounds %struct.ieee_format, %struct.ieee_format* %3, i64 0, i32 1
  %556 = load i32, i32* %555, align 4
  %557 = add nsw i32 %554, %556
  %558 = and i32 %557, 31
  %559 = lshr i32 -2147483648, %558
  %560 = sdiv i32 %557, 32
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %561
  %563 = load i32, i32* %562, align 4
  %564 = or i32 %559, %563
  store i32 %564, i32* %562, align 4
  br label %565

565:                                              ; preds = %542, %543, %553, %276, %297, %523, %86
  %566 = and i32 %1, -2147483648
  %567 = load i32, i32* %8, align 16
  %568 = or i32 %567, %566
  store i32 %568, i32* %8, align 16
  %569 = load i32, i32* %25, align 4
  %570 = icmp sgt i32 %569, 0
  br i1 %570, label %571, label %586

571:                                              ; preds = %565, %571
  %572 = phi i32 [ %574, %571 ], [ %569, %565 ]
  %573 = phi i8* [ %584, %571 ], [ %2, %565 ]
  %574 = add nsw i32 %572, -1
  %575 = sdiv i32 %574, 4
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %576
  %578 = load i32, i32* %577, align 4
  %579 = srem i32 %574, 4
  %580 = shl nsw i32 %579, 3
  %581 = sub nuw nsw i32 24, %580
  %582 = lshr i32 %578, %581
  %583 = trunc i32 %582 to i8
  %584 = getelementptr inbounds i8, i8* %573, i64 1
  store i8 %583, i8* %573, align 1
  %585 = icmp sgt i32 %574, 0
  br i1 %585, label %571, label %586

586:                                              ; preds = %571, %565, %63, %36
  %587 = phi i32 [ %38, %36 ], [ %65, %63 ], [ 1, %565 ], [ 1, %571 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #10
  ret i32 %587
}

; Function Attrs: cold noreturn
declare void @nasm_panic(i8*, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @float_option(i8* nocapture readonly) local_unnamed_addr #2 {
  %2 = tail call i32 @strcasecmp(i8* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0)) #11
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  store i1 true, i1* @daz, align 1
  br label %29

5:                                                ; preds = %1
  %6 = tail call i32 @strcasecmp(i8* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)) #11
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  store i1 false, i1* @daz, align 1
  br label %29

9:                                                ; preds = %5
  %10 = tail call i32 @strcasecmp(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #11
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  store i32 0, i32* @rc, align 4
  br label %29

13:                                               ; preds = %9
  %14 = tail call i32 @strcasecmp(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #11
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  store i32 2, i32* @rc, align 4
  br label %29

17:                                               ; preds = %13
  %18 = tail call i32 @strcasecmp(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0)) #11
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  store i32 3, i32* @rc, align 4
  br label %29

21:                                               ; preds = %17
  %22 = tail call i32 @strcasecmp(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #11
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %21
  store i32 1, i32* @rc, align 4
  br label %29

25:                                               ; preds = %21
  %26 = tail call i32 @strcasecmp(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0)) #11
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  store i32 0, i32* @rc, align 4
  store i1 false, i1* @daz, align 1
  br label %29

29:                                               ; preds = %25, %28, %24, %20, %16, %12, %8, %4
  %30 = phi i32 [ 0, %28 ], [ 0, %24 ], [ 0, %20 ], [ 0, %16 ], [ 0, %12 ], [ 0, %8 ], [ 0, %4 ], [ -1, %25 ]
  ret i32 %30
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: cold noreturn
declare void @nasm_assert_failed(i8*, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @to_packed_bcd(i8* readnone, i8* readonly, i32, i8* nocapture, %struct.ieee_format* readnone) unnamed_addr #0 {
  %6 = icmp eq %struct.ieee_format* %4, @ieee_80
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = icmp ult i8* %1, %0
  br i1 %8, label %60, label %10

9:                                                ; preds = %5
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.14, i64 0, i64 0)) #10
  br label %93

10:                                               ; preds = %7, %41
  %11 = phi i32 [ %44, %41 ], [ -1, %7 ]
  %12 = phi i32 [ %43, %41 ], [ 0, %7 ]
  %13 = phi i8* [ %42, %41 ], [ %3, %7 ]
  %14 = phi i8* [ %15, %41 ], [ %1, %7 ]
  %15 = getelementptr inbounds i8, i8* %14, i64 -1
  %16 = load i8, i8* %14, align 1
  %17 = sext i8 %16 to i32
  %18 = add i8 %16, -48
  %19 = icmp ult i8 %18, 10
  br i1 %19, label %20, label %37

20:                                               ; preds = %10
  %21 = icmp slt i32 %11, 0
  br i1 %21, label %22, label %27

22:                                               ; preds = %20
  %23 = icmp eq i32 %12, 9
  br i1 %23, label %24, label %25

24:                                               ; preds = %22
  tail call void (i32, i8*, ...) @nasm_warn(i32 2228480, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.15, i64 0, i64 0)) #10
  br label %25

25:                                               ; preds = %24, %22
  %26 = add nsw i32 %17, -48
  br label %41

27:                                               ; preds = %20
  %28 = icmp slt i32 %12, 9
  br i1 %28, label %29, label %34

29:                                               ; preds = %27
  %30 = shl nsw i32 %17, 4
  %31 = add i32 %30, %11
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds i8, i8* %13, i64 1
  store i8 %32, i8* %13, align 1
  br label %34

34:                                               ; preds = %29, %27
  %35 = phi i8* [ %33, %29 ], [ %13, %27 ]
  %36 = add nsw i32 %12, 1
  br label %41

37:                                               ; preds = %10
  %38 = icmp eq i8 %16, 95
  br i1 %38, label %41, label %39

39:                                               ; preds = %37
  %40 = sext i8 %16 to i32
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.16, i64 0, i64 0), i32 %40) #10
  br label %93

41:                                               ; preds = %37, %25, %34
  %42 = phi i8* [ %13, %25 ], [ %35, %34 ], [ %13, %37 ]
  %43 = phi i32 [ %12, %25 ], [ %36, %34 ], [ %12, %37 ]
  %44 = phi i32 [ %26, %25 ], [ -1, %34 ], [ %11, %37 ]
  %45 = icmp ult i8* %15, %0
  br i1 %45, label %46, label %10

46:                                               ; preds = %41
  %47 = icmp sgt i32 %44, -1
  br i1 %47, label %48, label %56

48:                                               ; preds = %46
  %49 = icmp slt i32 %43, 9
  br i1 %49, label %50, label %53

50:                                               ; preds = %48
  %51 = trunc i32 %44 to i8
  %52 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %51, i8* %42, align 1
  br label %53

53:                                               ; preds = %50, %48
  %54 = phi i8* [ %52, %50 ], [ %42, %48 ]
  %55 = add nsw i32 %43, 1
  br label %56

56:                                               ; preds = %53, %46
  %57 = phi i8* [ %54, %53 ], [ %42, %46 ]
  %58 = phi i32 [ %55, %53 ], [ %43, %46 ]
  %59 = icmp slt i32 %58, 9
  br i1 %59, label %60, label %88

60:                                               ; preds = %7, %56
  %61 = phi i32 [ %58, %56 ], [ 0, %7 ]
  %62 = phi i8* [ %57, %56 ], [ %3, %7 ]
  %63 = sub i32 8, %61
  %64 = zext i32 %63 to i64
  %65 = add nuw nsw i64 %64, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 0, i64 %65, i1 false)
  %66 = sub i32 1, %61
  %67 = and i32 %66, 7
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %77, label %69

69:                                               ; preds = %60, %69
  %70 = phi i32 [ %74, %69 ], [ %61, %60 ]
  %71 = phi i8* [ %73, %69 ], [ %62, %60 ]
  %72 = phi i32 [ %75, %69 ], [ %67, %60 ]
  %73 = getelementptr inbounds i8, i8* %71, i64 1
  %74 = add nsw i32 %70, 1
  %75 = add i32 %72, -1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %69, !llvm.loop !18

77:                                               ; preds = %69, %60
  %78 = phi i8* [ undef, %60 ], [ %73, %69 ]
  %79 = phi i32 [ %61, %60 ], [ %74, %69 ]
  %80 = phi i8* [ %62, %60 ], [ %73, %69 ]
  %81 = icmp ult i32 %63, 7
  br i1 %81, label %88, label %82

82:                                               ; preds = %77, %82
  %83 = phi i32 [ %86, %82 ], [ %79, %77 ]
  %84 = phi i8* [ %85, %82 ], [ %80, %77 ]
  %85 = getelementptr inbounds i8, i8* %84, i64 8
  %86 = add nsw i32 %83, 8
  %87 = icmp eq i32 %86, 9
  br i1 %87, label %88, label %82

88:                                               ; preds = %77, %82, %56
  %89 = phi i8* [ %57, %56 ], [ %78, %77 ], [ %85, %82 ]
  %90 = lshr i32 %2, 24
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, -128
  store i8 %92, i8* %89, align 1
  br label %93

93:                                               ; preds = %88, %39, %9
  %94 = phi i32 [ 0, %9 ], [ 0, %39 ], [ 1, %88 ]
  ret i32 %94
}

declare void @nasm_nonfatal(i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @ieee_flconvert_bin(i8* nocapture readonly, i32, i32* nocapture, i32* nocapture) unnamed_addr #0 {
  %5 = alloca [7 x i32], align 16
  %6 = bitcast [7 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %6) #10
  %7 = getelementptr inbounds [7 x i32], [7 x i32]* %5, i64 0, i64 0
  %8 = getelementptr inbounds [7 x i32], [7 x i32]* %5, i64 0, i64 6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 28, i1 false)
  %9 = sub i32 1, %1
  br label %10

10:                                               ; preds = %72, %4
  %11 = phi i8* [ %28, %72 ], [ %0, %4 ]
  %12 = phi i32* [ %73, %72 ], [ null, %4 ]
  %13 = phi i32 [ %78, %72 ], [ 0, %4 ]
  %14 = phi i32 [ %81, %72 ], [ 0, %4 ]
  %15 = phi i8 [ %25, %72 ], [ 0, %4 ]
  %16 = phi i8 [ %55, %72 ], [ 0, %4 ]
  %17 = and i8 %16, 1
  %18 = icmp eq i8 %17, 0
  br label %19

19:                                               ; preds = %10, %82
  %20 = phi i8* [ %11, %10 ], [ %28, %82 ]
  %21 = phi i32 [ %14, %10 ], [ %85, %82 ]
  %22 = phi i8 [ %15, %10 ], [ %25, %82 ]
  br label %23

23:                                               ; preds = %19, %31
  %24 = phi i8* [ %20, %19 ], [ %28, %31 ]
  %25 = phi i8 [ %22, %19 ], [ 1, %31 ]
  br label %26

26:                                               ; preds = %23, %86
  %27 = phi i8* [ %28, %86 ], [ %24, %23 ]
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  %29 = load i8, i8* %27, align 1
  %30 = zext i8 %29 to i32
  switch i8 %29, label %34 [
    i8 0, label %129
    i8 46, label %31
  ]

31:                                               ; preds = %26
  %32 = icmp eq i8 %25, 0
  br i1 %32, label %23, label %33

33:                                               ; preds = %31
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.17, i64 0, i64 0)) #10
  br label %138

34:                                               ; preds = %26
  %35 = add i8 %29, -48
  %36 = icmp ult i8 %35, 10
  %37 = add nsw i32 %30, -48
  %38 = or i32 %30, 32
  %39 = add nsw i32 %38, -87
  %40 = select i1 %36, i32 %37, i32 %39
  %41 = lshr i32 %40, %1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %86

43:                                               ; preds = %34
  %44 = icmp ne i32 %40, 0
  %45 = and i1 %18, %44
  br i1 %45, label %46, label %53

46:                                               ; preds = %43
  %47 = zext i32 %40 to i64
  %48 = getelementptr inbounds [16 x i32], [16 x i32]* @ieee_flconvert_bin.log2tbl, i64 0, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = sub nsw i32 31, %49
  %51 = add i32 %9, %21
  %52 = add i32 %51, %49
  br label %54

53:                                               ; preds = %43
  br i1 %18, label %82, label %54

54:                                               ; preds = %53, %46
  %55 = phi i8 [ 1, %46 ], [ %16, %53 ]
  %56 = phi i32 [ %52, %46 ], [ %21, %53 ]
  %57 = phi i32 [ %50, %46 ], [ %13, %53 ]
  %58 = phi i32* [ %7, %46 ], [ %12, %53 ]
  %59 = icmp slt i32 %57, 0
  br i1 %59, label %60, label %72

60:                                               ; preds = %54
  %61 = zext i32 %40 to i64
  %62 = sub nsw i32 0, %57
  %63 = zext i32 %62 to i64
  %64 = lshr i64 %61, %63
  %65 = load i32, i32* %58, align 4
  %66 = trunc i64 %64 to i32
  %67 = or i32 %65, %66
  store i32 %67, i32* %58, align 4
  %68 = getelementptr inbounds i32, i32* %58, i64 1
  %69 = icmp ugt i32* %68, %8
  %70 = select i1 %69, i32* %8, i32* %68
  %71 = add nsw i32 %57, 32
  br label %72

72:                                               ; preds = %60, %54
  %73 = phi i32* [ %70, %60 ], [ %58, %54 ]
  %74 = phi i32 [ %71, %60 ], [ %57, %54 ]
  %75 = shl i32 %40, %74
  %76 = load i32, i32* %73, align 4
  %77 = or i32 %76, %75
  store i32 %77, i32* %73, align 4
  %78 = sub nsw i32 %74, %1
  %79 = icmp eq i8 %25, 0
  %80 = select i1 %79, i32 %1, i32 0
  %81 = add nsw i32 %56, %80
  br label %10

82:                                               ; preds = %53
  %83 = icmp eq i8 %25, 0
  %84 = select i1 %83, i32 0, i32 %1
  %85 = sub nsw i32 %21, %84
  br label %19

86:                                               ; preds = %34
  switch i8 %29, label %127 [
    i8 112, label %87
    i8 80, label %87
    i8 95, label %26
  ]

87:                                               ; preds = %86, %86
  %88 = load i8, i8* %28, align 1
  switch i8 %88, label %94 [
    i8 43, label %90
    i8 45, label %89
  ]

89:                                               ; preds = %87
  br label %90

90:                                               ; preds = %87, %89
  %91 = phi i1 [ true, %89 ], [ false, %87 ]
  %92 = getelementptr inbounds i8, i8* %27, i64 2
  %93 = load i8, i8* %92, align 1
  br label %94

94:                                               ; preds = %90, %87
  %95 = phi i8 [ %93, %90 ], [ %88, %87 ]
  %96 = phi i8* [ %92, %90 ], [ %28, %87 ]
  %97 = phi i1 [ %91, %90 ], [ false, %87 ]
  %98 = icmp eq i8 %95, 0
  br i1 %98, label %120, label %99

99:                                               ; preds = %94, %115
  %100 = phi i8 [ %118, %115 ], [ %95, %94 ]
  %101 = phi i32 [ %116, %115 ], [ 0, %94 ]
  %102 = phi i8* [ %117, %115 ], [ %96, %94 ]
  %103 = sext i8 %100 to i32
  %104 = add i8 %100, -48
  %105 = icmp ult i8 %104, 10
  br i1 %105, label %106, label %112

106:                                              ; preds = %99
  %107 = mul nsw i32 %101, 10
  %108 = add nsw i32 %103, -48
  %109 = add i32 %108, %107
  %110 = icmp slt i32 %109, 20000
  %111 = select i1 %110, i32 %109, i32 20000
  br label %115

112:                                              ; preds = %99
  %113 = icmp eq i8 %100, 95
  br i1 %113, label %115, label %114

114:                                              ; preds = %112
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i64 0, i64 0), i32 %103) #10
  br label %138

115:                                              ; preds = %112, %106
  %116 = phi i32 [ %101, %112 ], [ %111, %106 ]
  %117 = getelementptr inbounds i8, i8* %102, i64 1
  %118 = load i8, i8* %117, align 1
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %120, label %99

120:                                              ; preds = %115, %94
  %121 = phi i32 [ 0, %94 ], [ %116, %115 ]
  %122 = sub nsw i32 0, %121
  %123 = select i1 %97, i32 %122, i32 %121
  %124 = icmp eq i32 %123, 2147483647
  %125 = select i1 %124, i32 0, i32 %123
  %126 = add nsw i32 %125, %21
  br i1 %124, label %138, label %129

127:                                              ; preds = %86
  %128 = zext i8 %29 to i32
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.18, i64 0, i64 0), i32 %128) #10
  br label %138

129:                                              ; preds = %26, %120
  %130 = phi i32 [ %126, %120 ], [ %21, %26 ]
  %131 = and i8 %16, 1
  %132 = icmp eq i8 %131, 0
  %133 = bitcast i32* %2 to i8*
  br i1 %132, label %134, label %135

134:                                              ; preds = %129
  call void @llvm.memset.p0i8.i64(i8* align 4 %133, i8 0, i64 24, i1 false)
  br label %136

135:                                              ; preds = %129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %133, i8* nonnull align 16 %6, i64 24, i1 false)
  br label %136

136:                                              ; preds = %135, %134
  %137 = phi i32 [ 0, %134 ], [ %130, %135 ]
  store i32 %137, i32* %3, align 4
  br label %138

138:                                              ; preds = %120, %114, %136, %127, %33
  %139 = phi i1 [ false, %33 ], [ true, %136 ], [ false, %120 ], [ false, %127 ], [ false, %114 ]
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %6) #10
  ret i1 %139
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @ieee_flconvert(i8* nocapture readonly, i32* nocapture, i32* nocapture) unnamed_addr #0 {
  %4 = bitcast i32* %1 to i8*
  %5 = alloca [52 x i8], align 16
  %6 = alloca [6 x i32], align 16
  %7 = bitcast [6 x i32]* %6 to i8*
  %8 = getelementptr inbounds [52 x i8], [52 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %8) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 52, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #10
  %9 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 0
  %10 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 5
  %12 = bitcast [6 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 24, i1 false)
  br label %13

13:                                               ; preds = %57, %3
  %14 = phi i8* [ %0, %3 ], [ %63, %57 ]
  %15 = phi i64 [ 0, %3 ], [ %58, %57 ]
  %16 = phi i32 [ 0, %3 ], [ %59, %57 ]
  %17 = phi i8 [ 0, %3 ], [ %60, %57 ]
  %18 = phi i8 [ 0, %3 ], [ %61, %57 ]
  %19 = phi i8 [ 0, %3 ], [ %62, %57 ]
  %20 = getelementptr inbounds [52 x i8], [52 x i8]* %5, i64 0, i64 %15
  %21 = load i8, i8* %14, align 1
  switch i8 %21, label %26 [
    i8 46, label %22
    i8 0, label %105
    i8 69, label %64
    i8 101, label %64
  ]

22:                                               ; preds = %13
  %23 = and i8 %18, 1
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %57, label %25

25:                                               ; preds = %22
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.17, i64 0, i64 0)) #10
  br label %205

26:                                               ; preds = %13
  %27 = add i8 %21, -48
  %28 = icmp ult i8 %27, 10
  br i1 %28, label %29, label %53

29:                                               ; preds = %26
  %30 = icmp eq i8 %21, 48
  %31 = and i8 %17, 1
  %32 = icmp eq i8 %31, 0
  %33 = and i1 %32, %30
  br i1 %33, label %34, label %38

34:                                               ; preds = %29
  %35 = and i8 %18, 1
  %36 = zext i8 %35 to i32
  %37 = sub i32 %16, %36
  br label %57

38:                                               ; preds = %29
  %39 = icmp slt i64 %15, 52
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = add nsw i64 %15, 1
  store i8 %27, i8* %20, align 1
  br label %46

42:                                               ; preds = %38
  %43 = and i8 %19, 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void (i32, i8*, ...) @nasm_warn(i32 393472, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.21, i64 0, i64 0), i32 52) #10
  br label %46

46:                                               ; preds = %42, %45, %40
  %47 = phi i64 [ %41, %40 ], [ %15, %42 ], [ %15, %45 ]
  %48 = phi i8 [ %19, %40 ], [ %19, %42 ], [ 1, %45 ]
  %49 = and i8 %18, 1
  %50 = xor i8 %49, 1
  %51 = zext i8 %50 to i32
  %52 = add nsw i32 %16, %51
  br label %57

53:                                               ; preds = %26
  %54 = icmp eq i8 %21, 95
  br i1 %54, label %57, label %55

55:                                               ; preds = %53
  %56 = sext i8 %21 to i32
  tail call void (i32, i8*, ...) @nasm_nonfatalf(i32 256, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i64 0, i64 0), i32 %56) #10
  br label %205

57:                                               ; preds = %46, %34, %22, %53
  %58 = phi i64 [ %15, %53 ], [ %15, %22 ], [ %15, %34 ], [ %47, %46 ]
  %59 = phi i32 [ %16, %53 ], [ %16, %22 ], [ %37, %34 ], [ %52, %46 ]
  %60 = phi i8 [ %17, %53 ], [ %17, %22 ], [ %17, %34 ], [ 1, %46 ]
  %61 = phi i8 [ %18, %53 ], [ 1, %22 ], [ %18, %34 ], [ %18, %46 ]
  %62 = phi i8 [ %19, %53 ], [ %19, %22 ], [ %19, %34 ], [ %48, %46 ]
  %63 = getelementptr inbounds i8, i8* %14, i64 1
  br label %13

64:                                               ; preds = %13, %13
  %65 = getelementptr inbounds i8, i8* %14, i64 1
  %66 = load i8, i8* %65, align 1
  switch i8 %66, label %72 [
    i8 43, label %68
    i8 45, label %67
  ]

67:                                               ; preds = %64
  br label %68

68:                                               ; preds = %64, %67
  %69 = phi i1 [ true, %67 ], [ false, %64 ]
  %70 = getelementptr inbounds i8, i8* %14, i64 2
  %71 = load i8, i8* %70, align 1
  br label %72

72:                                               ; preds = %68, %64
  %73 = phi i8 [ %71, %68 ], [ %66, %64 ]
  %74 = phi i8* [ %70, %68 ], [ %65, %64 ]
  %75 = phi i1 [ %69, %68 ], [ false, %64 ]
  %76 = icmp eq i8 %73, 0
  br i1 %76, label %98, label %77

77:                                               ; preds = %72, %93
  %78 = phi i8 [ %96, %93 ], [ %73, %72 ]
  %79 = phi i32 [ %94, %93 ], [ 0, %72 ]
  %80 = phi i8* [ %95, %93 ], [ %74, %72 ]
  %81 = sext i8 %78 to i32
  %82 = add i8 %78, -48
  %83 = icmp ult i8 %82, 10
  br i1 %83, label %84, label %90

84:                                               ; preds = %77
  %85 = mul nsw i32 %79, 10
  %86 = add nsw i32 %81, -48
  %87 = add i32 %86, %85
  %88 = icmp slt i32 %87, 5000
  %89 = select i1 %88, i32 %87, i32 5000
  br label %93

90:                                               ; preds = %77
  %91 = icmp eq i8 %78, 95
  br i1 %91, label %93, label %92

92:                                               ; preds = %90
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i64 0, i64 0), i32 %81) #10
  br label %205

93:                                               ; preds = %90, %84
  %94 = phi i32 [ %79, %90 ], [ %89, %84 ]
  %95 = getelementptr inbounds i8, i8* %80, i64 1
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %77

98:                                               ; preds = %93, %72
  %99 = phi i32 [ 0, %72 ], [ %94, %93 ]
  %100 = sub nsw i32 0, %99
  %101 = select i1 %75, i32 %100, i32 %99
  %102 = icmp eq i32 %101, 2147483647
  %103 = select i1 %102, i32 0, i32 %101
  %104 = add nsw i32 %103, %16
  br i1 %102, label %205, label %105

105:                                              ; preds = %13, %98
  %106 = phi i32 [ %104, %98 ], [ %16, %13 ]
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 24, i1 false)
  br label %107

107:                                              ; preds = %105, %166
  %108 = phi i32* [ %171, %166 ], [ %1, %105 ]
  %109 = phi i8 [ %170, %166 ], [ 0, %105 ]
  %110 = phi i32 [ %169, %166 ], [ 0, %105 ]
  %111 = phi i64 [ %168, %166 ], [ 0, %105 ]
  %112 = phi i32 [ %167, %166 ], [ -2147483648, %105 ]
  %113 = phi i64 [ %116, %166 ], [ %15, %105 ]
  %114 = icmp sgt i64 %113, 0
  br i1 %114, label %115, label %173

115:                                              ; preds = %107, %130
  %116 = phi i64 [ %131, %130 ], [ %113, %107 ]
  %117 = getelementptr inbounds [52 x i8], [52 x i8]* %5, i64 0, i64 %116
  %118 = getelementptr inbounds i8, i8* %117, i64 -1
  %119 = load i8, i8* %118, align 1
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %130, label %121

121:                                              ; preds = %115
  %122 = getelementptr inbounds i8, i8* %117, i64 -1
  %123 = sext i8 %119 to i32
  %124 = shl nsw i32 %123, 1
  %125 = icmp sgt i8 %119, 4
  %126 = add nsw i32 %124, 246
  %127 = select i1 %125, i32 %126, i32 %124
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %122, align 1
  %129 = icmp ugt i8* %122, %8
  br i1 %129, label %133, label %149

130:                                              ; preds = %115
  %131 = add nsw i64 %116, -1
  %132 = icmp sgt i64 %131, 0
  br i1 %132, label %115, label %173

133:                                              ; preds = %121, %133
  %134 = phi i1 [ %144, %133 ], [ %125, %121 ]
  %135 = phi i8* [ %140, %133 ], [ %122, %121 ]
  %136 = phi i8* [ %135, %133 ], [ %117, %121 ]
  %137 = zext i1 %134 to i32
  %138 = getelementptr inbounds i8, i8* %136, i64 -2
  %139 = load i8, i8* %138, align 1
  %140 = getelementptr inbounds i8, i8* %135, i64 -1
  %141 = sext i8 %139 to i32
  %142 = shl nsw i32 %141, 1
  %143 = or i32 %142, %137
  %144 = icmp sgt i32 %143, 9
  %145 = add nsw i32 %143, 246
  %146 = select i1 %144, i32 %145, i32 %143
  %147 = trunc i32 %146 to i8
  store i8 %147, i8* %140, align 1
  %148 = icmp ugt i8* %140, %8
  br i1 %148, label %133, label %149

149:                                              ; preds = %133, %121
  %150 = phi i1 [ %125, %121 ], [ %144, %133 ]
  br i1 %150, label %151, label %154

151:                                              ; preds = %149
  %152 = load i32, i32* %108, align 4
  %153 = or i32 %152, %112
  store i32 %153, i32* %108, align 4
  br label %157

154:                                              ; preds = %149
  %155 = and i8 %109, 1
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %164, label %157

157:                                              ; preds = %151, %154
  %158 = phi i8 [ 1, %151 ], [ %109, %154 ]
  %159 = icmp eq i32 %112, 1
  br i1 %159, label %160, label %162

160:                                              ; preds = %157
  %161 = add nsw i64 %111, 1
  br label %166

162:                                              ; preds = %157
  %163 = lshr i32 %112, 1
  br label %166

164:                                              ; preds = %154
  %165 = add nsw i32 %110, -1
  br label %166

166:                                              ; preds = %164, %162, %160
  %167 = phi i32 [ -2147483648, %160 ], [ %163, %162 ], [ %112, %164 ]
  %168 = phi i64 [ %161, %160 ], [ %111, %162 ], [ %111, %164 ]
  %169 = phi i32 [ %110, %160 ], [ %110, %162 ], [ %165, %164 ]
  %170 = phi i8 [ %158, %160 ], [ %158, %162 ], [ %109, %164 ]
  %171 = getelementptr inbounds i32, i32* %1, i64 %168
  %172 = icmp slt i64 %168, 6
  br i1 %172, label %107, label %173

173:                                              ; preds = %166, %107, %130
  %174 = phi i32 [ %110, %130 ], [ %110, %107 ], [ %169, %166 ]
  %175 = add nsw i32 %174, %106
  %176 = icmp slt i32 %106, 0
  br i1 %176, label %177, label %179

177:                                              ; preds = %173
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -52, i64 20, i1 false)
  store i32 -858993459, i32* %11, align 4
  %178 = sub nsw i32 0, %106
  br label %183

179:                                              ; preds = %173
  %180 = icmp eq i32 %106, 0
  br i1 %180, label %203, label %181

181:                                              ; preds = %179
  store i32 -1610612736, i32* %9, align 16
  %182 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %182, i8 0, i64 20, i1 false)
  br label %183

183:                                              ; preds = %177, %181
  %184 = phi i32 [ -2, %177 ], [ 3, %181 ]
  %185 = phi i32 [ %178, %177 ], [ %106, %181 ]
  br label %186

186:                                              ; preds = %183, %196
  %187 = phi i32 [ %200, %196 ], [ %184, %183 ]
  %188 = phi i32 [ %197, %196 ], [ %175, %183 ]
  %189 = phi i32 [ %201, %196 ], [ %185, %183 ]
  %190 = and i32 %189, 1
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %196, label %192

192:                                              ; preds = %186
  %193 = call fastcc i32 @float_multiply(i32* %1, i32* nonnull %9)
  %194 = add i32 %187, %188
  %195 = add i32 %194, %193
  br label %196

196:                                              ; preds = %186, %192
  %197 = phi i32 [ %195, %192 ], [ %188, %186 ]
  %198 = shl i32 %187, 1
  %199 = call fastcc i32 @float_multiply(i32* nonnull %9, i32* nonnull %9)
  %200 = add nsw i32 %199, %198
  %201 = lshr i32 %189, 1
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %186

203:                                              ; preds = %196, %179
  %204 = phi i32 [ %175, %179 ], [ %197, %196 ]
  store i32 %204, i32* %2, align 4
  br label %205

205:                                              ; preds = %98, %92, %203, %55, %25
  %206 = phi i1 [ false, %25 ], [ false, %55 ], [ true, %203 ], [ false, %98 ], [ false, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %8) #10
  ret i1 %206
}

declare void @nasm_warn(i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @ieee_round(i1 zeroext, i32* nocapture, i32) unnamed_addr #6 {
  %4 = sdiv i32 %2, 32
  %5 = and i32 %2, 31
  %6 = lshr i32 -2147483648, %5
  %7 = load i32, i32* @rc, align 4
  switch i32 %7, label %215 [
    i32 0, label %8
    i32 1, label %218
  ]

8:                                                ; preds = %3
  %9 = sext i32 %4 to i64
  %10 = getelementptr inbounds i32, i32* %1, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, %6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %203, label %14

14:                                               ; preds = %8
  %15 = xor i32 %6, -1
  %16 = and i32 %11, %15
  store i32 %16, i32* %10, align 4
  %17 = shl i32 %6, 1
  %18 = add i32 %17, -1
  %19 = and i32 %16, %18
  %20 = icmp slt i32 %2, 160
  br i1 %20, label %21, label %131

21:                                               ; preds = %14
  %22 = add nsw i64 %9, 1
  %23 = sub nsw i32 4, %4
  %24 = zext i32 %23 to i64
  %25 = add nuw nsw i64 %24, 1
  %26 = icmp ult i64 %25, 8
  br i1 %26, label %119, label %27

27:                                               ; preds = %21
  %28 = and i64 %25, 8589934584
  %29 = add nsw i64 %22, %28
  %30 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %19, i32 0
  %31 = add nsw i64 %28, -8
  %32 = lshr exact i64 %31, 3
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 3
  %35 = icmp ult i64 %31, 24
  br i1 %35, label %85, label %36

36:                                               ; preds = %27
  %37 = sub nsw i64 %33, %34
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi i64 [ 0, %36 ], [ %82, %38 ]
  %40 = phi <4 x i32> [ %30, %36 ], [ %80, %38 ]
  %41 = phi <4 x i32> [ zeroinitializer, %36 ], [ %81, %38 ]
  %42 = phi i64 [ %37, %36 ], [ %83, %38 ]
  %43 = add i64 %22, %39
  %44 = getelementptr inbounds i32, i32* %1, i64 %43
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = getelementptr inbounds i32, i32* %44, i64 4
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 4
  %50 = or <4 x i32> %46, %40
  %51 = or <4 x i32> %49, %41
  %52 = or i64 %39, 8
  %53 = add i64 %22, %52
  %54 = getelementptr inbounds i32, i32* %1, i64 %53
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = getelementptr inbounds i32, i32* %54, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 4
  %60 = or <4 x i32> %56, %50
  %61 = or <4 x i32> %59, %51
  %62 = or i64 %39, 16
  %63 = add i64 %22, %62
  %64 = getelementptr inbounds i32, i32* %1, i64 %63
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4
  %67 = getelementptr inbounds i32, i32* %64, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4
  %70 = or <4 x i32> %66, %60
  %71 = or <4 x i32> %69, %61
  %72 = or i64 %39, 24
  %73 = add i64 %22, %72
  %74 = getelementptr inbounds i32, i32* %1, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4
  %77 = getelementptr inbounds i32, i32* %74, i64 4
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4
  %80 = or <4 x i32> %76, %70
  %81 = or <4 x i32> %79, %71
  %82 = add i64 %39, 32
  %83 = add i64 %42, -4
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %38, !llvm.loop !20

85:                                               ; preds = %38, %27
  %86 = phi <4 x i32> [ undef, %27 ], [ %80, %38 ]
  %87 = phi <4 x i32> [ undef, %27 ], [ %81, %38 ]
  %88 = phi i64 [ 0, %27 ], [ %82, %38 ]
  %89 = phi <4 x i32> [ %30, %27 ], [ %80, %38 ]
  %90 = phi <4 x i32> [ zeroinitializer, %27 ], [ %81, %38 ]
  %91 = icmp eq i64 %34, 0
  br i1 %91, label %109, label %92

92:                                               ; preds = %85, %92
  %93 = phi i64 [ %106, %92 ], [ %88, %85 ]
  %94 = phi <4 x i32> [ %104, %92 ], [ %89, %85 ]
  %95 = phi <4 x i32> [ %105, %92 ], [ %90, %85 ]
  %96 = phi i64 [ %107, %92 ], [ %34, %85 ]
  %97 = add i64 %22, %93
  %98 = getelementptr inbounds i32, i32* %1, i64 %97
  %99 = bitcast i32* %98 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4
  %101 = getelementptr inbounds i32, i32* %98, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4
  %104 = or <4 x i32> %100, %94
  %105 = or <4 x i32> %103, %95
  %106 = add i64 %93, 8
  %107 = add i64 %96, -1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %92, !llvm.loop !21

109:                                              ; preds = %92, %85
  %110 = phi <4 x i32> [ %86, %85 ], [ %104, %92 ]
  %111 = phi <4 x i32> [ %87, %85 ], [ %105, %92 ]
  %112 = or <4 x i32> %111, %110
  %113 = shufflevector <4 x i32> %112, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %114 = or <4 x i32> %112, %113
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %116 = or <4 x i32> %114, %115
  %117 = extractelement <4 x i32> %116, i32 0
  %118 = icmp eq i64 %25, %28
  br i1 %118, label %131, label %119

119:                                              ; preds = %109, %21
  %120 = phi i64 [ %22, %21 ], [ %29, %109 ]
  %121 = phi i32 [ %19, %21 ], [ %117, %109 ]
  br label %122

122:                                              ; preds = %119, %122
  %123 = phi i64 [ %128, %122 ], [ %120, %119 ]
  %124 = phi i32 [ %127, %122 ], [ %121, %119 ]
  %125 = getelementptr inbounds i32, i32* %1, i64 %123
  %126 = load i32, i32* %125, align 4
  %127 = or i32 %126, %124
  %128 = add i64 %123, 1
  %129 = trunc i64 %128 to i32
  %130 = icmp eq i32 %129, 6
  br i1 %130, label %131, label %122, !llvm.loop !22

131:                                              ; preds = %122, %109, %14
  %132 = phi i32 [ %19, %14 ], [ %117, %109 ], [ %127, %122 ]
  %133 = or i32 %11, %6
  store i32 %133, i32* %10, align 4
  %134 = icmp eq i32 %132, 0
  br i1 %134, label %159, label %135

135:                                              ; preds = %131
  %136 = sub i32 0, %6
  %137 = and i32 %133, %136
  %138 = add i32 %137, %6
  store i32 %138, i32* %10, align 4
  br i1 %20, label %139, label %148

139:                                              ; preds = %135
  %140 = add nsw i64 %9, 1
  %141 = getelementptr i32, i32* %1, i64 %140
  %142 = bitcast i32* %141 to i8*
  %143 = sub nsw i32 4, %4
  %144 = zext i32 %143 to i64
  %145 = shl nuw nsw i64 %144, 2
  %146 = add nuw nsw i64 %145, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %142, i8 0, i64 %146, i1 false)
  %147 = icmp sgt i32 %2, 31
  br i1 %147, label %148, label %387

148:                                              ; preds = %135, %139
  br label %149

149:                                              ; preds = %148, %153
  %150 = phi i32 [ %157, %153 ], [ %138, %148 ]
  %151 = phi i64 [ %154, %153 ], [ %9, %148 ]
  %152 = icmp eq i32 %150, 0
  br i1 %152, label %153, label %387

153:                                              ; preds = %149
  %154 = add nsw i64 %151, -1
  %155 = getelementptr inbounds i32, i32* %1, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = add i32 %156, 1
  store i32 %157, i32* %155, align 4
  %158 = icmp sgt i64 %154, 0
  br i1 %158, label %149, label %387

159:                                              ; preds = %131
  %160 = add nsw i32 %2, -1
  %161 = sdiv i32 %160, 32
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i32, i32* %1, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = and i32 %160, 31
  %166 = xor i32 %165, 31
  %167 = shl i32 1, %166
  %168 = and i32 %164, %167
  %169 = icmp eq i32 %168, 0
  %170 = sub i32 0, %6
  %171 = and i32 %133, %170
  br i1 %169, label %194, label %172

172:                                              ; preds = %159
  %173 = add i32 %171, %6
  store i32 %173, i32* %10, align 4
  br i1 %20, label %174, label %183

174:                                              ; preds = %172
  %175 = add nsw i64 %9, 1
  %176 = getelementptr i32, i32* %1, i64 %175
  %177 = bitcast i32* %176 to i8*
  %178 = sub nsw i32 4, %4
  %179 = zext i32 %178 to i64
  %180 = shl nuw nsw i64 %179, 2
  %181 = add nuw nsw i64 %180, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %177, i8 0, i64 %181, i1 false)
  %182 = icmp sgt i32 %2, 31
  br i1 %182, label %183, label %387

183:                                              ; preds = %172, %174
  br label %184

184:                                              ; preds = %183, %188
  %185 = phi i32 [ %192, %188 ], [ %173, %183 ]
  %186 = phi i64 [ %189, %188 ], [ %9, %183 ]
  %187 = icmp eq i32 %185, 0
  br i1 %187, label %188, label %387

188:                                              ; preds = %184
  %189 = add nsw i64 %186, -1
  %190 = getelementptr inbounds i32, i32* %1, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = add i32 %191, 1
  store i32 %192, i32* %190, align 4
  %193 = icmp sgt i64 %189, 0
  br i1 %193, label %184, label %387

194:                                              ; preds = %159
  store i32 %171, i32* %10, align 4
  br i1 %20, label %195, label %387

195:                                              ; preds = %194
  %196 = add nsw i64 %9, 1
  %197 = getelementptr i32, i32* %1, i64 %196
  %198 = bitcast i32* %197 to i8*
  %199 = sub nsw i32 4, %4
  %200 = zext i32 %199 to i64
  %201 = shl nuw nsw i64 %200, 2
  %202 = add nuw nsw i64 %201, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %198, i8 0, i64 %202, i1 false)
  br label %387

203:                                              ; preds = %8
  %204 = sub i32 0, %6
  %205 = and i32 %11, %204
  store i32 %205, i32* %10, align 4
  %206 = icmp slt i32 %2, 160
  br i1 %206, label %207, label %387

207:                                              ; preds = %203
  %208 = add nsw i64 %9, 1
  %209 = getelementptr i32, i32* %1, i64 %208
  %210 = bitcast i32* %209 to i8*
  %211 = sub nsw i32 4, %4
  %212 = zext i32 %211 to i64
  %213 = shl nuw nsw i64 %212, 2
  %214 = add nuw nsw i64 %213, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %210, i8 0, i64 %214, i1 false)
  br label %387

215:                                              ; preds = %3
  %216 = select i1 %0, i32 3, i32 2
  %217 = icmp eq i32 %7, %216
  br i1 %217, label %218, label %233

218:                                              ; preds = %3, %215
  %219 = sub i32 0, %6
  %220 = sext i32 %4 to i64
  %221 = getelementptr inbounds i32, i32* %1, i64 %220
  %222 = load i32, i32* %221, align 4
  %223 = and i32 %222, %219
  store i32 %223, i32* %221, align 4
  %224 = icmp slt i32 %2, 160
  br i1 %224, label %225, label %387

225:                                              ; preds = %218
  %226 = add nsw i64 %220, 1
  %227 = getelementptr i32, i32* %1, i64 %226
  %228 = bitcast i32* %227 to i8*
  %229 = sub nsw i32 4, %4
  %230 = zext i32 %229 to i64
  %231 = shl nuw nsw i64 %230, 2
  %232 = add nuw nsw i64 %231, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %228, i8 0, i64 %232, i1 false)
  br label %387

233:                                              ; preds = %215
  %234 = sext i32 %4 to i64
  %235 = getelementptr inbounds i32, i32* %1, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = shl i32 %6, 1
  %238 = add i32 %237, -1
  %239 = and i32 %236, %238
  %240 = icmp slt i32 %2, 160
  br i1 %240, label %241, label %351

241:                                              ; preds = %233
  %242 = add nsw i64 %234, 1
  %243 = sub nsw i32 4, %4
  %244 = zext i32 %243 to i64
  %245 = add nuw nsw i64 %244, 1
  %246 = icmp ult i64 %245, 8
  br i1 %246, label %339, label %247

247:                                              ; preds = %241
  %248 = and i64 %245, 8589934584
  %249 = add nsw i64 %242, %248
  %250 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %239, i32 0
  %251 = add nsw i64 %248, -8
  %252 = lshr exact i64 %251, 3
  %253 = add nuw nsw i64 %252, 1
  %254 = and i64 %253, 3
  %255 = icmp ult i64 %251, 24
  br i1 %255, label %305, label %256

256:                                              ; preds = %247
  %257 = sub nsw i64 %253, %254
  br label %258

258:                                              ; preds = %258, %256
  %259 = phi i64 [ 0, %256 ], [ %302, %258 ]
  %260 = phi <4 x i32> [ %250, %256 ], [ %300, %258 ]
  %261 = phi <4 x i32> [ zeroinitializer, %256 ], [ %301, %258 ]
  %262 = phi i64 [ %257, %256 ], [ %303, %258 ]
  %263 = add i64 %242, %259
  %264 = getelementptr inbounds i32, i32* %1, i64 %263
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4
  %267 = getelementptr inbounds i32, i32* %264, i64 4
  %268 = bitcast i32* %267 to <4 x i32>*
  %269 = load <4 x i32>, <4 x i32>* %268, align 4
  %270 = or <4 x i32> %266, %260
  %271 = or <4 x i32> %269, %261
  %272 = or i64 %259, 8
  %273 = add i64 %242, %272
  %274 = getelementptr inbounds i32, i32* %1, i64 %273
  %275 = bitcast i32* %274 to <4 x i32>*
  %276 = load <4 x i32>, <4 x i32>* %275, align 4
  %277 = getelementptr inbounds i32, i32* %274, i64 4
  %278 = bitcast i32* %277 to <4 x i32>*
  %279 = load <4 x i32>, <4 x i32>* %278, align 4
  %280 = or <4 x i32> %276, %270
  %281 = or <4 x i32> %279, %271
  %282 = or i64 %259, 16
  %283 = add i64 %242, %282
  %284 = getelementptr inbounds i32, i32* %1, i64 %283
  %285 = bitcast i32* %284 to <4 x i32>*
  %286 = load <4 x i32>, <4 x i32>* %285, align 4
  %287 = getelementptr inbounds i32, i32* %284, i64 4
  %288 = bitcast i32* %287 to <4 x i32>*
  %289 = load <4 x i32>, <4 x i32>* %288, align 4
  %290 = or <4 x i32> %286, %280
  %291 = or <4 x i32> %289, %281
  %292 = or i64 %259, 24
  %293 = add i64 %242, %292
  %294 = getelementptr inbounds i32, i32* %1, i64 %293
  %295 = bitcast i32* %294 to <4 x i32>*
  %296 = load <4 x i32>, <4 x i32>* %295, align 4
  %297 = getelementptr inbounds i32, i32* %294, i64 4
  %298 = bitcast i32* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 4
  %300 = or <4 x i32> %296, %290
  %301 = or <4 x i32> %299, %291
  %302 = add i64 %259, 32
  %303 = add i64 %262, -4
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %258, !llvm.loop !24

305:                                              ; preds = %258, %247
  %306 = phi <4 x i32> [ undef, %247 ], [ %300, %258 ]
  %307 = phi <4 x i32> [ undef, %247 ], [ %301, %258 ]
  %308 = phi i64 [ 0, %247 ], [ %302, %258 ]
  %309 = phi <4 x i32> [ %250, %247 ], [ %300, %258 ]
  %310 = phi <4 x i32> [ zeroinitializer, %247 ], [ %301, %258 ]
  %311 = icmp eq i64 %254, 0
  br i1 %311, label %329, label %312

312:                                              ; preds = %305, %312
  %313 = phi i64 [ %326, %312 ], [ %308, %305 ]
  %314 = phi <4 x i32> [ %324, %312 ], [ %309, %305 ]
  %315 = phi <4 x i32> [ %325, %312 ], [ %310, %305 ]
  %316 = phi i64 [ %327, %312 ], [ %254, %305 ]
  %317 = add i64 %242, %313
  %318 = getelementptr inbounds i32, i32* %1, i64 %317
  %319 = bitcast i32* %318 to <4 x i32>*
  %320 = load <4 x i32>, <4 x i32>* %319, align 4
  %321 = getelementptr inbounds i32, i32* %318, i64 4
  %322 = bitcast i32* %321 to <4 x i32>*
  %323 = load <4 x i32>, <4 x i32>* %322, align 4
  %324 = or <4 x i32> %320, %314
  %325 = or <4 x i32> %323, %315
  %326 = add i64 %313, 8
  %327 = add i64 %316, -1
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %312, !llvm.loop !25

329:                                              ; preds = %312, %305
  %330 = phi <4 x i32> [ %306, %305 ], [ %324, %312 ]
  %331 = phi <4 x i32> [ %307, %305 ], [ %325, %312 ]
  %332 = or <4 x i32> %331, %330
  %333 = shufflevector <4 x i32> %332, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %334 = or <4 x i32> %332, %333
  %335 = shufflevector <4 x i32> %334, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %336 = or <4 x i32> %334, %335
  %337 = extractelement <4 x i32> %336, i32 0
  %338 = icmp eq i64 %245, %248
  br i1 %338, label %351, label %339

339:                                              ; preds = %329, %241
  %340 = phi i64 [ %242, %241 ], [ %249, %329 ]
  %341 = phi i32 [ %239, %241 ], [ %337, %329 ]
  br label %342

342:                                              ; preds = %339, %342
  %343 = phi i64 [ %348, %342 ], [ %340, %339 ]
  %344 = phi i32 [ %347, %342 ], [ %341, %339 ]
  %345 = getelementptr inbounds i32, i32* %1, i64 %343
  %346 = load i32, i32* %345, align 4
  %347 = or i32 %346, %344
  %348 = add i64 %343, 1
  %349 = trunc i64 %348 to i32
  %350 = icmp eq i32 %349, 6
  br i1 %350, label %351, label %342, !llvm.loop !26

351:                                              ; preds = %342, %329, %233
  %352 = phi i32 [ %239, %233 ], [ %337, %329 ], [ %347, %342 ]
  %353 = icmp eq i32 %352, 0
  %354 = sub i32 0, %6
  %355 = and i32 %236, %354
  br i1 %353, label %378, label %356

356:                                              ; preds = %351
  %357 = add i32 %355, %6
  store i32 %357, i32* %235, align 4
  br i1 %240, label %358, label %367

358:                                              ; preds = %356
  %359 = add nsw i64 %234, 1
  %360 = getelementptr i32, i32* %1, i64 %359
  %361 = bitcast i32* %360 to i8*
  %362 = sub nsw i32 4, %4
  %363 = zext i32 %362 to i64
  %364 = shl nuw nsw i64 %363, 2
  %365 = add nuw nsw i64 %364, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %361, i8 0, i64 %365, i1 false)
  %366 = icmp sgt i32 %2, 31
  br i1 %366, label %367, label %387

367:                                              ; preds = %356, %358
  br label %368

368:                                              ; preds = %367, %372
  %369 = phi i32 [ %376, %372 ], [ %357, %367 ]
  %370 = phi i64 [ %373, %372 ], [ %234, %367 ]
  %371 = icmp eq i32 %369, 0
  br i1 %371, label %372, label %387

372:                                              ; preds = %368
  %373 = add nsw i64 %370, -1
  %374 = getelementptr inbounds i32, i32* %1, i64 %373
  %375 = load i32, i32* %374, align 4
  %376 = add i32 %375, 1
  store i32 %376, i32* %374, align 4
  %377 = icmp sgt i64 %373, 0
  br i1 %377, label %368, label %387

378:                                              ; preds = %351
  store i32 %355, i32* %235, align 4
  br i1 %240, label %379, label %387

379:                                              ; preds = %378
  %380 = add nsw i64 %234, 1
  %381 = getelementptr i32, i32* %1, i64 %380
  %382 = bitcast i32* %381 to i8*
  %383 = sub nsw i32 4, %4
  %384 = zext i32 %383 to i64
  %385 = shl nuw nsw i64 %384, 2
  %386 = add nuw nsw i64 %385, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %382, i8 0, i64 %386, i1 false)
  br label %387

387:                                              ; preds = %153, %149, %188, %184, %372, %368, %195, %207, %379, %225, %139, %174, %194, %203, %358, %378, %218
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @nasm_nonfatalf(i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @float_multiply(i32* nocapture, i32* nocapture readonly) unnamed_addr #0 {
  %3 = alloca [12 x i64], align 16
  %4 = bitcast [12 x i64]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %4) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 96, i1 false)
  %5 = load i32, i32* %1, align 4
  %6 = getelementptr inbounds i32, i32* %1, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %1, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds i32, i32* %1, i64 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds i32, i32* %1, i64 4
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds i32, i32* %1, i64 5
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %5 to i64
  %17 = zext i32 %7 to i64
  %18 = zext i32 %9 to i64
  %19 = zext i32 %11 to i64
  %20 = zext i32 %13 to i64
  %21 = zext i32 %15 to i64
  br label %22

22:                                               ; preds = %90, %2
  %23 = phi i64 [ 0, %2 ], [ %91, %90 ]
  %24 = phi i64 [ 0, %2 ], [ %33, %90 ]
  %25 = getelementptr inbounds i32, i32* %0, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = mul nuw i64 %16, %27
  %29 = lshr i64 %28, 32
  %30 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 %24
  %31 = add i64 %29, %23
  store i64 %31, i64* %30, align 8
  %32 = and i64 %28, 4294967295
  %33 = add nuw nsw i64 %24, 1
  %34 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 %33
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, %32
  %37 = mul nuw i64 %17, %27
  %38 = lshr i64 %37, 32
  %39 = add i64 %38, %36
  store i64 %39, i64* %34, align 8
  %40 = and i64 %37, 4294967295
  %41 = add nuw nsw i64 %24, 2
  %42 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 %41
  %43 = load i64, i64* %42, align 8
  %44 = add i64 %43, %40
  store i64 %44, i64* %42, align 8
  %45 = mul nuw i64 %18, %27
  %46 = lshr i64 %45, 32
  %47 = add nuw nsw i64 %24, 2
  %48 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 %47
  %49 = load i64, i64* %48, align 8
  %50 = add i64 %46, %49
  store i64 %50, i64* %48, align 8
  %51 = and i64 %45, 4294967295
  %52 = add nuw nsw i64 %24, 3
  %53 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 %52
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %54, %51
  store i64 %55, i64* %53, align 8
  %56 = mul nuw i64 %19, %27
  %57 = lshr i64 %56, 32
  %58 = add nuw nsw i64 %24, 3
  %59 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 %58
  %60 = load i64, i64* %59, align 8
  %61 = add i64 %57, %60
  store i64 %61, i64* %59, align 8
  %62 = and i64 %56, 4294967295
  %63 = add nuw nsw i64 %24, 4
  %64 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 %63
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, %62
  store i64 %66, i64* %64, align 8
  %67 = mul nuw i64 %20, %27
  %68 = lshr i64 %67, 32
  %69 = add nuw nsw i64 %24, 4
  %70 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 %69
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %68, %71
  store i64 %72, i64* %70, align 8
  %73 = and i64 %67, 4294967295
  %74 = add nuw nsw i64 %24, 5
  %75 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 %74
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, %73
  store i64 %77, i64* %75, align 8
  %78 = mul nuw i64 %21, %27
  %79 = lshr i64 %78, 32
  %80 = add nuw nsw i64 %24, 5
  %81 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 %80
  %82 = load i64, i64* %81, align 8
  %83 = add i64 %79, %82
  store i64 %83, i64* %81, align 8
  %84 = and i64 %78, 4294967295
  %85 = add nuw nsw i64 %24, 6
  %86 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 %85
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, %84
  store i64 %88, i64* %86, align 8
  %89 = icmp eq i64 %33, 6
  br i1 %89, label %92, label %90

90:                                               ; preds = %22
  %91 = load i64, i64* %34, align 8
  br label %22

92:                                               ; preds = %22
  %93 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 0
  %94 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 11
  %95 = load i64, i64* %94, align 8
  %96 = lshr i64 %95, 32
  %97 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 10
  %98 = load i64, i64* %97, align 16
  %99 = add i64 %98, %96
  %100 = and i64 %95, 4294967295
  store i64 %100, i64* %94, align 8
  %101 = lshr i64 %99, 32
  %102 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 9
  %103 = load i64, i64* %102, align 8
  %104 = add i64 %103, %101
  %105 = and i64 %99, 4294967295
  store i64 %105, i64* %97, align 16
  %106 = lshr i64 %104, 32
  %107 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 8
  %108 = load i64, i64* %107, align 16
  %109 = add i64 %108, %106
  %110 = and i64 %104, 4294967295
  store i64 %110, i64* %102, align 8
  %111 = lshr i64 %109, 32
  %112 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 7
  %113 = load i64, i64* %112, align 8
  %114 = add i64 %113, %111
  %115 = and i64 %109, 4294967295
  store i64 %115, i64* %107, align 16
  %116 = lshr i64 %114, 32
  %117 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 6
  %118 = load i64, i64* %117, align 16
  %119 = add i64 %118, %116
  %120 = and i64 %114, 4294967295
  store i64 %120, i64* %112, align 8
  %121 = lshr i64 %119, 32
  %122 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 5
  %123 = load i64, i64* %122, align 8
  %124 = add i64 %123, %121
  %125 = and i64 %119, 4294967295
  store i64 %125, i64* %117, align 16
  %126 = lshr i64 %124, 32
  %127 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 4
  %128 = load i64, i64* %127, align 16
  %129 = add i64 %128, %126
  %130 = and i64 %124, 4294967295
  store i64 %130, i64* %122, align 8
  %131 = lshr i64 %129, 32
  %132 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 3
  %133 = load i64, i64* %132, align 8
  %134 = add i64 %133, %131
  %135 = and i64 %129, 4294967295
  store i64 %135, i64* %127, align 16
  %136 = lshr i64 %134, 32
  %137 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 2
  %138 = load i64, i64* %137, align 16
  %139 = add i64 %138, %136
  %140 = and i64 %134, 4294967295
  store i64 %140, i64* %132, align 8
  %141 = lshr i64 %139, 32
  %142 = getelementptr inbounds [12 x i64], [12 x i64]* %3, i64 0, i64 1
  %143 = load i64, i64* %142, align 8
  %144 = add i64 %143, %141
  %145 = and i64 %139, 4294967295
  store i64 %145, i64* %137, align 16
  %146 = lshr i64 %144, 32
  %147 = load i64, i64* %93, align 16
  %148 = add i64 %147, %146
  store i64 %148, i64* %93, align 16
  %149 = and i64 %144, 4294967295
  store i64 %149, i64* %142, align 8
  %150 = trunc i64 %148 to i32
  %151 = icmp slt i32 %150, 0
  br i1 %151, label %186, label %152

152:                                              ; preds = %92
  %153 = shl i64 %148, 1
  %154 = lshr i64 %144, 31
  %155 = and i64 %154, 1
  %156 = or i64 %155, %153
  %157 = trunc i64 %156 to i32
  store i32 %157, i32* %0, align 4
  %158 = shl nuw nsw i64 %149, 1
  %159 = lshr i64 %139, 31
  %160 = and i64 %159, 1
  %161 = or i64 %160, %158
  %162 = trunc i64 %161 to i32
  %163 = getelementptr inbounds i32, i32* %0, i64 1
  store i32 %162, i32* %163, align 4
  %164 = shl nuw nsw i64 %145, 1
  %165 = lshr i64 %134, 31
  %166 = and i64 %165, 1
  %167 = or i64 %166, %164
  %168 = trunc i64 %167 to i32
  %169 = getelementptr inbounds i32, i32* %0, i64 2
  store i32 %168, i32* %169, align 4
  %170 = shl nuw nsw i64 %140, 1
  %171 = lshr i64 %129, 31
  %172 = and i64 %171, 1
  %173 = or i64 %172, %170
  %174 = trunc i64 %173 to i32
  %175 = getelementptr inbounds i32, i32* %0, i64 3
  store i32 %174, i32* %175, align 4
  %176 = shl nuw nsw i64 %135, 1
  %177 = lshr i64 %124, 31
  %178 = and i64 %177, 1
  %179 = or i64 %178, %176
  %180 = trunc i64 %179 to i32
  %181 = getelementptr inbounds i32, i32* %0, i64 4
  store i32 %180, i32* %181, align 4
  %182 = shl nuw nsw i64 %130, 1
  %183 = lshr i64 %119, 31
  %184 = and i64 %183, 1
  %185 = or i64 %184, %182
  br label %195

186:                                              ; preds = %92
  store i32 %150, i32* %0, align 4
  %187 = trunc i64 %144 to i32
  %188 = getelementptr inbounds i32, i32* %0, i64 1
  store i32 %187, i32* %188, align 4
  %189 = trunc i64 %139 to i32
  %190 = getelementptr inbounds i32, i32* %0, i64 2
  store i32 %189, i32* %190, align 4
  %191 = trunc i64 %134 to i32
  %192 = getelementptr inbounds i32, i32* %0, i64 3
  store i32 %191, i32* %192, align 4
  %193 = trunc i64 %129 to i32
  %194 = getelementptr inbounds i32, i32* %0, i64 4
  store i32 %193, i32* %194, align 4
  br label %195

195:                                              ; preds = %152, %186
  %196 = phi i64 [ %185, %152 ], [ %124, %186 ]
  %197 = phi i32 [ -1, %152 ], [ 0, %186 ]
  %198 = trunc i64 %196 to i32
  %199 = getelementptr inbounds i32, i32* %0, i64 5
  store i32 %198, i32* %199, align 4
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %4) #10
  ret i32 %197
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nofree nounwind readonly }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !9}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !9}
!17 = distinct !{!17, !9}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.unroll.disable"}
!20 = distinct !{!20, !9}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !23, !9}
!23 = !{!"llvm.loop.unroll.runtime.disable"}
!24 = distinct !{!24, !9}
!25 = distinct !{!25, !19}
!26 = distinct !{!26, !23, !9}
