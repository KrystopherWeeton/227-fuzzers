; ModuleID = '../../third_party/libwebp/src/dec/alpha_dec.c'
source_filename = "../../third_party/libwebp/src/dec/alpha_dec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8Decoder = type { i32, i32, i8*, %struct.VP8BitReader, %struct.VP8FrameHeader, %struct.VP8PictureHeader, %struct.VP8FilterHeader, %struct.VP8SegmentHeader, %struct.WebPWorker, i32, i32, i32, %struct.VP8ThreadContext, i32, i32, i32, i32, i32, i32, i32, [8 x %struct.VP8BitReader], i32, %struct.VP8Random, [4 x %struct.VP8QuantMatrix], %struct.VP8Proba, i32, i8, i8*, [4 x i8], %struct.VP8TopSamples*, %struct.VP8MB*, %struct.VP8FInfo*, i8*, i8*, i8*, i8*, i32, i32, i8*, i64, i32, i32, %struct.VP8MBData*, i32, [4 x [2 x %struct.VP8FInfo]], %struct.ALPHDecoder*, i8*, i64, i32, i8*, i8*, i8*, i32 }
%struct.VP8BitReader = type { i64, i32, i32, i8*, i8*, i8*, i32 }
%struct.VP8FrameHeader = type { i8, i8, i8, i32 }
%struct.VP8PictureHeader = type { i16, i16, i8, i8, i8, i8 }
%struct.VP8FilterHeader = type { i32, i32, i32, i32, [4 x i32], [4 x i32] }
%struct.VP8SegmentHeader = type { i32, i32, i32, [4 x i8], [4 x i8] }
%struct.WebPWorker = type { i8*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VP8ThreadContext = type { i32, i32, i32, %struct.VP8FInfo*, %struct.VP8MBData*, %struct.VP8Io }
%struct.VP8Io = type { i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32 (%struct.VP8Io*)*, i32 (%struct.VP8Io*)*, void (%struct.VP8Io*)*, i32, i64, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
%struct.VP8Random = type { i32, i32, [55 x i32], i32 }
%struct.VP8QuantMatrix = type { [2 x i32], [2 x i32], [2 x i32], i32, i32 }
%struct.VP8Proba = type { [3 x i8], [4 x [8 x %struct.VP8BandProbas]], [4 x [17 x %struct.VP8BandProbas*]] }
%struct.VP8BandProbas = type { [3 x [11 x i8]] }
%struct.VP8TopSamples = type { [16 x i8], [8 x i8], [8 x i8] }
%struct.VP8MB = type { i8, i8 }
%struct.VP8FInfo = type { i8, i8, i8, i8 }
%struct.VP8MBData = type { [384 x i16], i8, [16 x i8], i8, i32, i32, i8, i8, i8 }
%struct.ALPHDecoder = type { i32, i32, i32, i32, i32, %struct.VP8LDecoder*, %struct.VP8Io, i32, i8*, i8* }
%struct.VP8LDecoder = type { i32, i32, %struct.VP8Io*, %struct.WebPDecBuffer*, i32*, i32*, %struct.VP8LBitReader, i32, %struct.VP8LBitReader, i32, i32, i32, i32, i32, i32, %struct.VP8LMetadata, i32, [4 x %struct.VP8LTransform], i32, i8*, %struct.WebPRescaler* }
%struct.WebPDecBuffer = type { i32, i32, i32, i32, %union.anon, [4 x i32], i8* }
%union.anon = type { %struct.WebPYUVABuffer }
%struct.WebPYUVABuffer = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, i64, i64, i64, i64 }
%struct.VP8LBitReader = type { i64, i8*, i64, i64, i32, i32 }
%struct.VP8LMetadata = type { i32, %struct.VP8LColorCache, %struct.VP8LColorCache, i32, i32, i32, i32*, i32, %struct.HTreeGroup*, %struct.HuffmanCode* }
%struct.VP8LColorCache = type { i32*, i32, i32 }
%struct.HTreeGroup = type { [5 x %struct.HuffmanCode*], i32, i32, i32, i32, [64 x %struct.HuffmanCode32] }
%struct.HuffmanCode32 = type { i32, i32 }
%struct.HuffmanCode = type { i8, i16 }
%struct.VP8LTransform = type { i32, i32, i32, i32, i32* }
%struct.WebPRescaler = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32*, i32* }
%struct.WebPDecParams = type { %struct.WebPDecBuffer*, i8*, i8*, i8*, i32, %struct.WebPDecoderOptions*, %struct.WebPRescaler*, %struct.WebPRescaler*, %struct.WebPRescaler*, %struct.WebPRescaler*, i8*, i32 (%struct.VP8Io*, %struct.WebPDecParams*)*, i32 (%struct.VP8Io*, %struct.WebPDecParams*, i32)*, i32 (%struct.WebPDecParams*, i32, i32)* }
%struct.WebPDecoderOptions = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i32] }

@WebPUnfilters = external local_unnamed_addr global [4 x void (i8*, i8*, i8*, i32)*], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @WebPDeallocateAlphaMemory(%struct.VP8Decoder* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 49
  %3 = load i8*, i8** %2, align 8
  tail call void @WebPSafeFree(i8* %3) #3
  %4 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 45
  %5 = bitcast i8** %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  %6 = load %struct.ALPHDecoder*, %struct.ALPHDecoder** %4, align 8
  %7 = icmp eq %struct.ALPHDecoder* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %6, i64 0, i32 5
  %10 = load %struct.VP8LDecoder*, %struct.VP8LDecoder** %9, align 8
  tail call void @VP8LDelete(%struct.VP8LDecoder* %10) #3
  store %struct.VP8LDecoder* null, %struct.VP8LDecoder** %9, align 8
  %11 = bitcast %struct.ALPHDecoder* %6 to i8*
  tail call void @WebPSafeFree(i8* nonnull %11) #3
  br label %12

12:                                               ; preds = %1, %8
  store %struct.ALPHDecoder* null, %struct.ALPHDecoder** %4, align 8
  ret void
}

declare void @WebPSafeFree(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @VP8DecompressAlphaRows(%struct.VP8Decoder* nocapture, %struct.VP8Io* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 22
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %2, 0
  %10 = icmp slt i32 %3, 1
  %11 = or i1 %9, %10
  %12 = add nsw i32 %3, %2
  %13 = icmp sgt i32 %12, %8
  %14 = or i1 %11, %13
  br i1 %14, label %263, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 48
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %246

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 45
  %21 = load %struct.ALPHDecoder*, %struct.ALPHDecoder** %20, align 8
  %22 = icmp eq %struct.ALPHDecoder* %21, null
  br i1 %22, label %23, label %122

23:                                               ; preds = %19
  %24 = tail call i8* @WebPSafeCalloc(i64 1, i64 216) #3
  %25 = bitcast %struct.ALPHDecoder** %20 to i8**
  store i8* %24, i8** %25, align 8
  %26 = icmp eq i8* %24, null
  br i1 %26, label %263, label %27

27:                                               ; preds = %23
  %28 = load i32, i32* %5, align 8
  %29 = load i32, i32* %7, align 4
  %30 = sext i32 %28 to i64
  %31 = sext i32 %29 to i64
  %32 = mul nsw i64 %31, %30
  %33 = tail call i8* @WebPSafeMalloc(i64 %32, i64 1) #3
  %34 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 49
  store i8* %33, i8** %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %252, label %36

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 50
  store i8* %33, i8** %37, align 8
  %38 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 51
  store i8* null, i8** %38, align 8
  %39 = load %struct.ALPHDecoder*, %struct.ALPHDecoder** %20, align 8
  %40 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 46
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 47
  %43 = load i64, i64* %42, align 8
  %44 = ptrtoint i8* %33 to i64
  %45 = getelementptr inbounds i8, i8* %41, i64 1
  %46 = add i64 %43, -1
  %47 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 6
  tail call void @VP8FiltersInit() #3
  %48 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 8
  %49 = bitcast i8** %48 to i64*
  store i64 %44, i64* %49, align 8
  %50 = load i32, i32* %5, align 8
  %51 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 0
  store i32 %50, i32* %51, align 8
  %52 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 1
  store i32 %53, i32* %54, align 4
  %55 = icmp ult i64 %43, 2
  br i1 %55, label %252, label %56

56:                                               ; preds = %36
  %57 = load i8, i8* %41, align 1
  %58 = and i8 %57, 3
  %59 = zext i8 %58 to i32
  %60 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 2
  store i32 %59, i32* %60, align 8
  %61 = load i8, i8* %41, align 1
  %62 = lshr i8 %61, 2
  %63 = and i8 %62, 3
  %64 = zext i8 %63 to i32
  %65 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 3
  store i32 %64, i32* %65, align 4
  %66 = load i8, i8* %41, align 1
  %67 = lshr i8 %66, 4
  %68 = and i8 %67, 3
  %69 = zext i8 %68 to i32
  %70 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 4
  store i32 %69, i32* %70, align 8
  %71 = icmp ugt i8 %58, 1
  br i1 %71, label %252, label %72

72:                                               ; preds = %56
  %73 = load i8, i8* %41, align 1
  %74 = icmp ugt i8 %68, 1
  %75 = icmp ugt i8 %73, 63
  %76 = or i1 %74, %75
  br i1 %76, label %252, label %77

77:                                               ; preds = %72
  %78 = tail call i32 @VP8InitIoInternal(%struct.VP8Io* %47, i32 521) #3
  tail call void @WebPInitCustomIo(%struct.WebPDecParams* null, %struct.VP8Io* %47) #3
  %79 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 6, i32 10
  %80 = bitcast i8** %79 to %struct.ALPHDecoder**
  store %struct.ALPHDecoder* %39, %struct.ALPHDecoder** %80, align 8
  %81 = load i32, i32* %5, align 8
  %82 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %47, i64 0, i32 0
  store i32 %81, i32* %82, align 8
  %83 = load i32, i32* %52, align 4
  %84 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 6, i32 1
  store i32 %83, i32* %84, align 4
  %85 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 18
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 6, i32 18
  store i32 %86, i32* %87, align 4
  %88 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 19
  %89 = load i32, i32* %88, align 8
  %90 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 6, i32 19
  store i32 %89, i32* %90, align 8
  %91 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 20
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 6, i32 20
  store i32 %92, i32* %93, align 4
  %94 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 21
  %95 = load i32, i32* %94, align 8
  %96 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 6, i32 21
  store i32 %95, i32* %96, align 8
  %97 = load i32, i32* %7, align 4
  %98 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %39, i64 0, i32 6, i32 22
  store i32 %97, i32* %98, align 4
  %99 = load i32, i32* %60, align 8
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %108

101:                                              ; preds = %77
  %102 = load i32, i32* %51, align 8
  %103 = load i32, i32* %54, align 4
  %104 = mul nsw i32 %103, %102
  %105 = sext i32 %104 to i64
  %106 = icmp uge i64 %46, %105
  %107 = zext i1 %106 to i32
  br label %110

108:                                              ; preds = %77
  %109 = tail call i32 @VP8LDecodeAlphaHeader(%struct.ALPHDecoder* %39, i8* %45, i64 %46) #3
  br label %110

110:                                              ; preds = %101, %108
  %111 = phi i32 [ %107, %101 ], [ %109, %108 ]
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %252, label %113

113:                                              ; preds = %110
  %114 = load %struct.ALPHDecoder*, %struct.ALPHDecoder** %20, align 8
  %115 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %114, i64 0, i32 4
  %116 = load i32, i32* %115, align 8
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %120, label %118

118:                                              ; preds = %113
  %119 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 52
  store i32 0, i32* %119, align 8
  br label %122

120:                                              ; preds = %113
  %121 = sub nsw i32 %8, %2
  br label %122

122:                                              ; preds = %118, %120, %19
  %123 = phi %struct.ALPHDecoder* [ %114, %118 ], [ %114, %120 ], [ %21, %19 ]
  %124 = phi i32 [ %3, %118 ], [ %121, %120 ], [ %3, %19 ]
  %125 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %123, i64 0, i32 0
  %126 = load i32, i32* %125, align 8
  %127 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %123, i64 0, i32 6, i32 22
  %128 = load i32, i32* %127, align 4
  %129 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %123, i64 0, i32 2
  %130 = load i32, i32* %129, align 8
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %205

132:                                              ; preds = %122
  %133 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 51
  %134 = load i8*, i8** %133, align 8
  %135 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 46
  %136 = load i8*, i8** %135, align 8
  %137 = getelementptr inbounds i8, i8* %136, i64 1
  %138 = mul nsw i32 %126, %2
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %137, i64 %139
  %141 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 50
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds i8, i8* %142, i64 %139
  %144 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %123, i64 0, i32 3
  %145 = load i32, i32* %144, align 4
  %146 = icmp eq i32 %145, 0
  %147 = icmp sgt i32 %124, 0
  br i1 %146, label %155, label %148

148:                                              ; preds = %132
  br i1 %147, label %149, label %202

149:                                              ; preds = %148
  %150 = sext i32 %126 to i64
  %151 = zext i32 %145 to i64
  %152 = getelementptr inbounds [4 x void (i8*, i8*, i8*, i32)*], [4 x void (i8*, i8*, i8*, i32)*]* @WebPUnfilters, i64 0, i64 %151
  %153 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %152, align 8
  tail call void %153(i8* %134, i8* %140, i8* %143, i32 %126) #3
  %154 = icmp eq i32 %124, 1
  br i1 %154, label %202, label %163

155:                                              ; preds = %132
  br i1 %147, label %156, label %202

156:                                              ; preds = %155
  %157 = sext i32 %126 to i64
  %158 = add i32 %124, -1
  %159 = and i32 %124, 3
  %160 = icmp ult i32 %158, 3
  br i1 %160, label %189, label %161

161:                                              ; preds = %156
  %162 = sub i32 %124, %159
  br label %175

163:                                              ; preds = %149, %163
  %164 = phi i32 [ %173, %163 ], [ 1, %149 ]
  %165 = phi i8* [ %167, %163 ], [ %140, %149 ]
  %166 = phi i8* [ %168, %163 ], [ %143, %149 ]
  %167 = getelementptr inbounds i8, i8* %165, i64 %150
  %168 = getelementptr inbounds i8, i8* %166, i64 %150
  %169 = load i32, i32* %144, align 4
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds [4 x void (i8*, i8*, i8*, i32)*], [4 x void (i8*, i8*, i8*, i32)*]* @WebPUnfilters, i64 0, i64 %170
  %172 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %171, align 8
  tail call void %172(i8* %166, i8* %167, i8* %168, i32 %126) #3
  %173 = add nuw nsw i32 %164, 1
  %174 = icmp eq i32 %173, %124
  br i1 %174, label %202, label %163

175:                                              ; preds = %175, %161
  %176 = phi i8* [ %143, %161 ], [ %185, %175 ]
  %177 = phi i8* [ %140, %161 ], [ %186, %175 ]
  %178 = phi i32 [ %162, %161 ], [ %187, %175 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %176, i8* align 1 %177, i64 %157, i1 false) #3
  %179 = getelementptr inbounds i8, i8* %176, i64 %157
  %180 = getelementptr inbounds i8, i8* %177, i64 %157
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %179, i8* align 1 %180, i64 %157, i1 false) #3
  %181 = getelementptr inbounds i8, i8* %179, i64 %157
  %182 = getelementptr inbounds i8, i8* %180, i64 %157
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %182, i64 %157, i1 false) #3
  %183 = getelementptr inbounds i8, i8* %181, i64 %157
  %184 = getelementptr inbounds i8, i8* %182, i64 %157
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %183, i8* align 1 %184, i64 %157, i1 false) #3
  %185 = getelementptr inbounds i8, i8* %183, i64 %157
  %186 = getelementptr inbounds i8, i8* %184, i64 %157
  %187 = add i32 %178, -4
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %175

189:                                              ; preds = %175, %156
  %190 = phi i8* [ undef, %156 ], [ %183, %175 ]
  %191 = phi i8* [ %143, %156 ], [ %185, %175 ]
  %192 = phi i8* [ %140, %156 ], [ %186, %175 ]
  %193 = icmp eq i32 %159, 0
  br i1 %193, label %202, label %194

194:                                              ; preds = %189, %194
  %195 = phi i8* [ %198, %194 ], [ %191, %189 ]
  %196 = phi i8* [ %199, %194 ], [ %192, %189 ]
  %197 = phi i32 [ %200, %194 ], [ %159, %189 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %195, i8* align 1 %196, i64 %157, i1 false) #3
  %198 = getelementptr inbounds i8, i8* %195, i64 %157
  %199 = getelementptr inbounds i8, i8* %196, i64 %157
  %200 = add i32 %197, -1
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %194, !llvm.loop !2

202:                                              ; preds = %163, %189, %194, %149, %155, %148
  %203 = phi i8* [ %134, %155 ], [ %134, %148 ], [ %143, %149 ], [ %190, %189 ], [ %195, %194 ], [ %168, %163 ]
  store i8* %203, i8** %133, align 8
  %204 = add nsw i32 %124, %2
  br label %209

205:                                              ; preds = %122
  %206 = add nsw i32 %124, %2
  %207 = tail call i32 @VP8LDecodeAlphaImageStream(%struct.ALPHDecoder* %123, i32 %206) #3
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %252, label %209

209:                                              ; preds = %205, %202
  %210 = phi i32 [ %206, %205 ], [ %204, %202 ]
  %211 = icmp slt i32 %210, %128
  br i1 %211, label %213, label %212

212:                                              ; preds = %209
  store i32 1, i32* %16, align 8
  br label %216

213:                                              ; preds = %209
  %214 = load i32, i32* %16, align 8
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %246, label %216

216:                                              ; preds = %212, %213
  %217 = load %struct.ALPHDecoder*, %struct.ALPHDecoder** %20, align 8
  %218 = icmp eq %struct.ALPHDecoder* %217, null
  br i1 %218, label %223, label %219

219:                                              ; preds = %216
  %220 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %217, i64 0, i32 5
  %221 = load %struct.VP8LDecoder*, %struct.VP8LDecoder** %220, align 8
  tail call void @VP8LDelete(%struct.VP8LDecoder* %221) #3
  store %struct.VP8LDecoder* null, %struct.VP8LDecoder** %220, align 8
  %222 = bitcast %struct.ALPHDecoder* %217 to i8*
  tail call void @WebPSafeFree(i8* nonnull %222) #3
  br label %223

223:                                              ; preds = %216, %219
  store %struct.ALPHDecoder* null, %struct.ALPHDecoder** %20, align 8
  %224 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 52
  %225 = load i32, i32* %224, align 8
  %226 = icmp sgt i32 %225, 0
  br i1 %226, label %227, label %246

227:                                              ; preds = %223
  %228 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 50
  %229 = load i8*, i8** %228, align 8
  %230 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 21
  %231 = load i32, i32* %230, align 8
  %232 = mul nsw i32 %231, %6
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i8, i8* %229, i64 %233
  %235 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 19
  %236 = load i32, i32* %235, align 8
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds i8, i8* %234, i64 %237
  %239 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 20
  %240 = load i32, i32* %239, align 4
  %241 = sub nsw i32 %240, %236
  %242 = load i32, i32* %7, align 4
  %243 = sub nsw i32 %242, %231
  %244 = tail call i32 @WebPDequantizeLevels(i8* %238, i32 %241, i32 %243, i32 %6, i32 %225) #3
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %252, label %246

246:                                              ; preds = %227, %213, %15, %223
  %247 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 50
  %248 = load i8*, i8** %247, align 8
  %249 = mul nsw i32 %6, %2
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds i8, i8* %248, i64 %250
  br label %263

252:                                              ; preds = %56, %72, %36, %27, %205, %227, %110
  %253 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 49
  %254 = load i8*, i8** %253, align 8
  tail call void @WebPSafeFree(i8* %254) #3
  %255 = bitcast i8** %253 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %255, i8 0, i64 16, i1 false) #3
  %256 = load %struct.ALPHDecoder*, %struct.ALPHDecoder** %20, align 8
  %257 = icmp eq %struct.ALPHDecoder* %256, null
  br i1 %257, label %262, label %258

258:                                              ; preds = %252
  %259 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %256, i64 0, i32 5
  %260 = load %struct.VP8LDecoder*, %struct.VP8LDecoder** %259, align 8
  tail call void @VP8LDelete(%struct.VP8LDecoder* %260) #3
  store %struct.VP8LDecoder* null, %struct.VP8LDecoder** %259, align 8
  %261 = bitcast %struct.ALPHDecoder* %256 to i8*
  tail call void @WebPSafeFree(i8* nonnull %261) #3
  br label %262

262:                                              ; preds = %252, %258
  store %struct.ALPHDecoder* null, %struct.ALPHDecoder** %20, align 8
  br label %263

263:                                              ; preds = %23, %4, %262, %246
  %264 = phi i8* [ %251, %246 ], [ null, %262 ], [ null, %4 ], [ null, %23 ]
  ret i8* %264
}

declare i32 @WebPDequantizeLevels(i8*, i32, i32, i32, i32) local_unnamed_addr #1

declare void @VP8LDelete(%struct.VP8LDecoder*) local_unnamed_addr #1

declare i8* @WebPSafeCalloc(i64, i64) local_unnamed_addr #1

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #1

declare void @VP8FiltersInit() local_unnamed_addr #1

declare void @WebPInitCustomIo(%struct.WebPDecParams*, %struct.VP8Io*) local_unnamed_addr #1

declare i32 @VP8LDecodeAlphaHeader(%struct.ALPHDecoder*, i8*, i64) local_unnamed_addr #1

declare i32 @VP8InitIoInternal(%struct.VP8Io*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare i32 @VP8LDecodeAlphaImageStream(%struct.ALPHDecoder*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
