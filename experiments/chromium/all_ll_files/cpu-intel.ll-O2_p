; ModuleID = '../../third_party/boringssl/src/crypto/cpu-intel.c'
source_filename = "../../third_party/boringssl/src/crypto/cpu-intel.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@OPENSSL_ia32cap_P = external global [4 x i32], align 16
@.str = private unnamed_addr constant [16 x i8] c"OPENSSL_ia32cap\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%lx\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @OPENSSL_cpuid_setup() local_unnamed_addr #0 {
  %1 = tail call { i32, i32, i32, i32 } asm sideeffect "xor %ecx, %ecx\0Acpuid\0A", "={ax},={bx},={cx},={dx},{ax},~{dirflag},~{fpsr},~{flags}"(i32 0) #4, !srcloc !2
  %2 = extractvalue { i32, i32, i32, i32 } %1, 0
  %3 = extractvalue { i32, i32, i32, i32 } %1, 1
  %4 = extractvalue { i32, i32, i32, i32 } %1, 2
  %5 = extractvalue { i32, i32, i32, i32 } %1, 3
  %6 = icmp eq i32 %3, 1970169159
  %7 = icmp eq i32 %5, 1231384169
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %0
  %10 = icmp eq i32 %4, 1818588270
  br label %17

11:                                               ; preds = %0
  %12 = icmp eq i32 %3, 1752462657
  %13 = icmp eq i32 %5, 1769238117
  %14 = and i1 %12, %13
  %15 = icmp eq i32 %4, 1145913699
  %16 = and i1 %15, %14
  br label %17

17:                                               ; preds = %11, %9
  %18 = phi i1 [ %10, %9 ], [ false, %11 ]
  %19 = phi i1 [ false, %9 ], [ %16, %11 ]
  %20 = icmp ugt i32 %2, 6
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "xor %ecx, %ecx\0Acpuid\0A", "={ax},={bx},={cx},={dx},{ax},~{dirflag},~{fpsr},~{flags}"(i32 7) #4, !srcloc !2
  %23 = extractvalue { i32, i32, i32, i32 } %22, 1
  %24 = extractvalue { i32, i32, i32, i32 } %22, 2
  br label %25

25:                                               ; preds = %21, %17
  %26 = phi i32 [ %24, %21 ], [ 0, %17 ]
  %27 = phi i32 [ %23, %21 ], [ 0, %17 ]
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "xor %ecx, %ecx\0Acpuid\0A", "={ax},={bx},={cx},={dx},{ax},~{dirflag},~{fpsr},~{flags}"(i32 1) #4, !srcloc !2
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0
  %30 = extractvalue { i32, i32, i32, i32 } %28, 2
  %31 = extractvalue { i32, i32, i32, i32 } %28, 3
  br i1 %19, label %32, label %47

32:                                               ; preds = %25
  %33 = and i32 %29, 3840
  %34 = icmp eq i32 %33, 3840
  br i1 %34, label %35, label %45

35:                                               ; preds = %32
  %36 = lshr i32 %29, 20
  %37 = and i32 %36, 255
  %38 = add nuw nsw i32 %37, 15
  %39 = icmp ult i32 %38, 23
  br i1 %39, label %45, label %40

40:                                               ; preds = %35
  %41 = and i32 %29, 983040
  %42 = icmp eq i32 %38, 23
  %43 = icmp eq i32 %41, 458752
  %44 = and i1 %43, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %32, %40, %35
  %46 = and i32 %30, -1073741825
  br label %47

47:                                               ; preds = %40, %45, %25
  %48 = phi i32 [ %46, %45 ], [ %30, %40 ], [ %30, %25 ]
  %49 = and i32 %31, -1343225857
  br i1 %18, label %50, label %55

50:                                               ; preds = %47
  %51 = or i32 %49, 1342177280
  %52 = and i32 %29, 268374000
  switch i32 %52, label %57 [
    i32 329328, label %53
    i32 525904, label %53
  ]

53:                                               ; preds = %50, %50
  %54 = and i32 %48, -67108865
  br label %57

55:                                               ; preds = %47
  %56 = or i32 %49, 268435456
  br label %57

57:                                               ; preds = %50, %53, %55
  %58 = phi i32 [ %48, %50 ], [ %54, %53 ], [ %48, %55 ]
  %59 = phi i32 [ %51, %50 ], [ %51, %53 ], [ %56, %55 ]
  %60 = and i32 %58, 134217728
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %69, label %62

62:                                               ; preds = %57
  %63 = and i32 %58, -2049
  %64 = tail call { i32, i32 } asm sideeffect "xgetbv", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0) #4, !srcloc !3
  %65 = extractvalue { i32, i32 } %64, 0
  %66 = zext i32 %65 to i64
  %67 = and i64 %66, 6
  %68 = icmp eq i64 %67, 6
  br i1 %68, label %73, label %69

69:                                               ; preds = %57, %62
  %70 = phi i64 [ %66, %62 ], [ 0, %57 ]
  %71 = and i32 %58, -268441601
  %72 = and i32 %27, 1071579103
  br label %73

73:                                               ; preds = %62, %69
  %74 = phi i64 [ %66, %62 ], [ %70, %69 ]
  %75 = phi i32 [ %63, %62 ], [ %71, %69 ]
  %76 = phi i32 [ %27, %62 ], [ %72, %69 ]
  %77 = and i64 %74, 230
  %78 = icmp eq i64 %77, 230
  %79 = and i32 %76, -65537
  %80 = select i1 %78, i32 %76, i32 %79
  %81 = and i32 %75, 67108864
  %82 = icmp eq i32 %81, 0
  %83 = and i32 %80, -524289
  %84 = select i1 %82, i32 %83, i32 %80
  store i32 %59, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @OPENSSL_ia32cap_P, i64 0, i64 0), align 16
  store i32 %75, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @OPENSSL_ia32cap_P, i64 0, i64 1), align 4
  store i32 %84, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @OPENSSL_ia32cap_P, i64 0, i64 2), align 8
  store i32 %26, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @OPENSSL_ia32cap_P, i64 0, i64 3), align 4
  %85 = tail call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #4
  %86 = icmp eq i8* %85, null
  br i1 %86, label %92, label %87

87:                                               ; preds = %73
  tail call fastcc void @handle_cpu_env(i32* getelementptr inbounds ([4 x i32], [4 x i32]* @OPENSSL_ia32cap_P, i64 0, i64 0), i8* nonnull %85)
  %88 = tail call i8* @strchr(i8* nonnull %85, i32 58) #5
  %89 = icmp eq i8* %88, null
  br i1 %89, label %92, label %90

90:                                               ; preds = %87
  %91 = getelementptr inbounds i8, i8* %88, i64 1
  tail call fastcc void @handle_cpu_env(i32* getelementptr inbounds ([4 x i32], [4 x i32]* @OPENSSL_ia32cap_P, i64 0, i64 2), i8* %91)
  br label %92

92:                                               ; preds = %90, %87, %73
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @handle_cpu_env(i32* nocapture, i8* nocapture readonly) unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = load i8, i8* %1, align 1
  %5 = icmp eq i8 %4, 126
  %6 = icmp eq i8 %4, 124
  %7 = or i8 %4, 2
  %8 = icmp eq i8 %7, 126
  %9 = zext i1 %8 to i64
  %10 = getelementptr inbounds i8, i8* %1, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 48
  br i1 %12, label %17, label %13

13:                                               ; preds = %2
  %14 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #4
  store i64 -6148914691236517206, i64* %3, align 8
  %15 = zext i1 %5 to i64
  %16 = getelementptr inbounds i8, i8* %1, i64 %15
  br label %28

17:                                               ; preds = %2
  %18 = select i1 %8, i64 2, i64 1
  %19 = getelementptr inbounds i8, i8* %1, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 120
  %22 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #4
  store i64 -6148914691236517206, i64* %3, align 8
  %23 = zext i1 %5 to i64
  %24 = getelementptr inbounds i8, i8* %1, i64 %23
  br i1 %21, label %25, label %28

25:                                               ; preds = %17
  %26 = getelementptr inbounds i8, i8* %24, i64 2
  %27 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64* nonnull %3) #4
  br label %32

28:                                               ; preds = %13, %17
  %29 = phi i8* [ %16, %13 ], [ %24, %17 ]
  %30 = phi i8* [ %14, %13 ], [ %22, %17 ]
  %31 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %29, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64* nonnull %3) #4
  br label %32

32:                                               ; preds = %28, %25
  %33 = phi i8* [ %22, %25 ], [ %30, %28 ]
  %34 = phi i32 [ %27, %25 ], [ %31, %28 ]
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %64, label %36

36:                                               ; preds = %32
  %37 = load i64, i64* %3, align 8
  br i1 %5, label %38, label %49

38:                                               ; preds = %36
  %39 = load i32, i32* %0, align 4
  %40 = trunc i64 %37 to i32
  %41 = xor i32 %40, -1
  %42 = and i32 %39, %41
  store i32 %42, i32* %0, align 4
  %43 = lshr i64 %37, 32
  %44 = getelementptr inbounds i32, i32* %0, i64 1
  %45 = load i32, i32* %44, align 4
  %46 = trunc i64 %43 to i32
  %47 = xor i32 %46, -1
  %48 = and i32 %45, %47
  store i32 %48, i32* %44, align 4
  br label %64

49:                                               ; preds = %36
  br i1 %6, label %50, label %59

50:                                               ; preds = %49
  %51 = load i32, i32* %0, align 4
  %52 = trunc i64 %37 to i32
  %53 = or i32 %51, %52
  store i32 %53, i32* %0, align 4
  %54 = lshr i64 %37, 32
  %55 = getelementptr inbounds i32, i32* %0, i64 1
  %56 = load i32, i32* %55, align 4
  %57 = trunc i64 %54 to i32
  %58 = or i32 %56, %57
  store i32 %58, i32* %55, align 4
  br label %64

59:                                               ; preds = %49
  %60 = trunc i64 %37 to i32
  store i32 %60, i32* %0, align 4
  %61 = lshr i64 %37, 32
  %62 = trunc i64 %61 to i32
  %63 = getelementptr inbounds i32, i32* %0, i64 1
  store i32 %62, i32* %63, align 4
  br label %64

64:                                               ; preds = %38, %59, %50, %32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #4
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__isoc99_sscanf(i8* nocapture readonly, i8* nocapture readonly, ...) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 4450, i32 4476}
!3 = !{i32 4890}
