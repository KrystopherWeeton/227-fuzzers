; ModuleID = '../../third_party/webrtc/net/dcsctp/packet/chunk/idata_chunk.cc'
source_filename = "../../third_party/webrtc/net/dcsctp/packet/chunk/idata_chunk.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon }
%union.anon = type { %"class.dcsctp::IDataChunk" }
%"class.dcsctp::IDataChunk" = type { %"class.dcsctp::AnyDataChunk.base", [7 x i8] }
%"class.dcsctp::AnyDataChunk.base" = type <{ %"class.dcsctp::Chunk", %"class.dcsctp::StrongAlias", [4 x i8], %"struct.dcsctp::Data", %"class.dcsctp::StrongAlias.9" }>
%"class.dcsctp::Chunk" = type { i32 (...)** }
%"class.dcsctp::StrongAlias" = type { i32 }
%"struct.dcsctp::Data" = type <{ %"class.dcsctp::StrongAlias.0", %"class.dcsctp::StrongAlias.1", %"class.dcsctp::StrongAlias.2", %"class.dcsctp::StrongAlias.3", %"class.dcsctp::StrongAlias.4", %"class.std::__1::vector", %"class.dcsctp::StrongAlias.6", %"class.dcsctp::StrongAlias.7", %"class.dcsctp::StrongAlias.8", [5 x i8] }>
%"class.dcsctp::StrongAlias.0" = type { i16 }
%"class.dcsctp::StrongAlias.1" = type { i16 }
%"class.dcsctp::StrongAlias.2" = type { i32 }
%"class.dcsctp::StrongAlias.3" = type { i32 }
%"class.dcsctp::StrongAlias.4" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.dcsctp::StrongAlias.6" = type { i8 }
%"class.dcsctp::StrongAlias.7" = type { i8 }
%"class.dcsctp::StrongAlias.8" = type { i8 }
%"class.dcsctp::StrongAlias.9" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.dcsctp::AnyDataChunk" = type <{ %"class.dcsctp::Chunk", %"class.dcsctp::StrongAlias", [4 x i8], %"struct.dcsctp::Data", %"class.dcsctp::StrongAlias.9", [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.23 }
%union.anon.23 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.rtc::StringBuilder" = type { %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN6dcsctp12AnyDataChunkD2Ev = comdat any

$_ZN6dcsctp10IDataChunkD0Ev = comdat any

$_ZN6dcsctp12AnyDataChunkD0Ev = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZTVN6dcsctp12AnyDataChunkE = comdat any

@_ZN6dcsctp10IDataChunk5kTypeE = hidden local_unnamed_addr constant i32 64, align 4
@.str = private unnamed_addr constant [14 x i8] c"I-DATA, type=\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"unordered\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"ordered\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"::\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"complete\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"first\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"last\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"middle\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c", tsn=\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c", stream_id=\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c", message_id=\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c", ppid=\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c", fsn=\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c", length=\00", align 1
@_ZTVN6dcsctp10IDataChunkE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dcsctp::AnyDataChunk"*)* @_ZN6dcsctp12AnyDataChunkD2Ev to i8*), i8* bitcast (void (%"class.dcsctp::IDataChunk"*)* @_ZN6dcsctp10IDataChunkD0Ev to i8*), i8* bitcast (void (%"class.dcsctp::IDataChunk"*, %"class.std::__1::vector"*)* @_ZNK6dcsctp10IDataChunk11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.dcsctp::IDataChunk"*)* @_ZNK6dcsctp10IDataChunk8ToStringEv to i8*)] }, align 8
@_ZTVN6dcsctp12AnyDataChunkE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dcsctp::AnyDataChunk"*)* @_ZN6dcsctp12AnyDataChunkD2Ev to i8*), i8* bitcast (void (%"class.dcsctp::AnyDataChunk"*)* @_ZN6dcsctp12AnyDataChunkD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp10IDataChunk5ParseEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = icmp eq i64 %2, 0
  %6 = select i1 %5, i8* null, i8* %1
  %7 = icmp ult i64 %2, 20
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64 %2, i64 20) #9, !noalias !2
  br label %32

9:                                                ; preds = %3
  %10 = load i8, i8* %6, align 1, !noalias !2
  %11 = icmp eq i8 %10, 64
  br i1 %11, label %14, label %12

12:                                               ; preds = %9
  %13 = zext i8 %10 to i32
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32 %13, i32 64) #9, !noalias !2
  br label %32

14:                                               ; preds = %9
  %15 = getelementptr inbounds i8, i8* %6, i64 2
  %16 = load i8, i8* %15, align 1, !noalias !2
  %17 = zext i8 %16 to i16
  %18 = shl nuw i16 %17, 8
  %19 = getelementptr inbounds i8, i8* %6, i64 3
  %20 = load i8, i8* %19, align 1, !noalias !2
  %21 = zext i8 %20 to i16
  %22 = or i16 %18, %21
  %23 = zext i16 %22 to i64
  %24 = icmp ugt i64 %23, %2
  %25 = icmp ult i16 %22, 20
  %26 = or i1 %25, %24
  br i1 %26, label %27, label %28

27:                                               ; preds = %14
  tail call void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64 %23, i64 %2) #9, !noalias !2
  br label %32

28:                                               ; preds = %14
  %29 = sub i64 %2, %23
  %30 = icmp ugt i64 %29, 3
  br i1 %30, label %31, label %36

31:                                               ; preds = %28
  tail call void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64 %29) #9, !noalias !2
  br label %32

32:                                               ; preds = %8, %27, %31, %12
  %33 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %33, align 8
  %34 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %35 = bitcast %union.anon* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 72, i1 false) #9
  br label %155

36:                                               ; preds = %28
  %37 = getelementptr inbounds i8, i8* %6, i64 1
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds i8, i8* %6, i64 4
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw i32 %41, 24
  %43 = getelementptr inbounds i8, i8* %6, i64 5
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl nuw nsw i32 %45, 16
  %47 = or i32 %46, %42
  %48 = getelementptr inbounds i8, i8* %6, i64 6
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 8
  %52 = or i32 %47, %51
  %53 = getelementptr inbounds i8, i8* %6, i64 7
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = or i32 %52, %55
  %57 = getelementptr inbounds i8, i8* %6, i64 8
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i16
  %60 = shl nuw i16 %59, 8
  %61 = getelementptr inbounds i8, i8* %6, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i16
  %64 = or i16 %60, %63
  %65 = getelementptr inbounds i8, i8* %6, i64 12
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = shl nuw i32 %67, 24
  %69 = getelementptr inbounds i8, i8* %6, i64 13
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = shl nuw nsw i32 %71, 16
  %73 = or i32 %72, %68
  %74 = getelementptr inbounds i8, i8* %6, i64 14
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = shl nuw nsw i32 %76, 8
  %78 = or i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %6, i64 15
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = or i32 %78, %81
  %83 = getelementptr inbounds i8, i8* %6, i64 16
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = shl nuw i32 %85, 24
  %87 = getelementptr inbounds i8, i8* %6, i64 17
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = shl nuw nsw i32 %89, 16
  %91 = or i32 %90, %86
  %92 = getelementptr inbounds i8, i8* %6, i64 18
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = shl nuw nsw i32 %94, 8
  %96 = or i32 %91, %95
  %97 = getelementptr inbounds i8, i8* %6, i64 19
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = or i32 %96, %99
  %101 = and i8 %38, 1
  %102 = lshr i8 %38, 1
  %103 = and i8 %102, 1
  %104 = lshr i8 %38, 2
  %105 = and i8 %104, 1
  %106 = lshr i8 %38, 3
  %107 = and i8 %106, 1
  %108 = icmp eq i8 %103, 0
  %109 = select i1 %108, i32 0, i32 %100
  %110 = select i1 %108, i32 %100, i32 0
  %111 = add nsw i64 %23, -20
  %112 = icmp ugt i16 %22, 20
  %113 = getelementptr inbounds i8, i8* %6, i64 20
  %114 = icmp eq i64 %111, 0
  %115 = select i1 %114, i8* null, i8* %113
  %116 = select i1 %112, i8* %115, i8* null
  %117 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %117, i8 0, i64 24, i1 false) #9
  %118 = icmp eq i64 %111, 0
  %119 = xor i1 %112, true
  %120 = or i1 %118, %119
  br i1 %120, label %134, label %121

121:                                              ; preds = %36
  %122 = icmp slt i64 %111, 0
  br i1 %122, label %123, label %125

123:                                              ; preds = %121
  %124 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %124) #10
  unreachable

125:                                              ; preds = %121
  %126 = tail call i8* @_Znwm(i64 %111) #11
  %127 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %128 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  store i8* %126, i8** %128, align 8
  %129 = getelementptr inbounds i8, i8* %126, i64 %111
  %130 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %129, i8** %130, align 8
  %131 = bitcast i8** %127 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %126, i8* align 1 %116, i64 %111, i1 false) #9
  %132 = ptrtoint i8* %129 to i64
  store i64 %132, i64* %131, align 8
  %133 = ptrtoint i8* %126 to i64
  br label %134

134:                                              ; preds = %36, %125
  %135 = phi i64 [ %132, %125 ], [ 0, %36 ]
  %136 = phi i64 [ %133, %125 ], [ 0, %36 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %117, i8 0, i64 24, i1 false) #9
  %137 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %137, align 8
  %138 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %139 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 1, i32 0
  store i32 %56, i32* %139, align 8
  %140 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 0, i32 0
  store i16 %64, i16* %140, align 8
  %141 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 1, i32 0
  store i16 0, i16* %141, align 2
  %142 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 2, i32 0
  store i32 %82, i32* %142, align 4
  %143 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 3, i32 0
  store i32 %110, i32* %143, align 8
  %144 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 4, i32 0
  store i32 %109, i32* %144, align 4
  %145 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 5
  %146 = bitcast %"class.std::__1::vector"* %145 to i64*
  store i64 %136, i64* %146, align 8
  %147 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 5, i32 0, i32 1
  %148 = bitcast i8** %147 to i64*
  store i64 %135, i64* %148, align 8
  %149 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 5, i32 0, i32 2, i32 0, i32 0
  %150 = bitcast i8** %149 to i64*
  store i64 %135, i64* %150, align 8
  %151 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 6, i32 0
  store i8 %103, i8* %151, align 8
  %152 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 7, i32 0
  store i8 %101, i8* %152, align 1
  %153 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 8, i32 0
  store i8 %105, i8* %153, align 2
  %154 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 4, i32 0
  store i8 %107, i8* %154, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp10IDataChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %138, align 8
  br label %155

155:                                              ; preds = %134, %32
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp12AnyDataChunkD2Ev(%"class.dcsctp::AnyDataChunk"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::AnyDataChunk", %"class.dcsctp::AnyDataChunk"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp12AnyDataChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dcsctp::AnyDataChunk", %"class.dcsctp::AnyDataChunk"* %0, i64 0, i32 3, i32 5, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.dcsctp::AnyDataChunk", %"class.dcsctp::AnyDataChunk"* %0, i64 0, i32 3, i32 5, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_ZdlPv(i8* nonnull %4) #11
  br label %10

10:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp10IDataChunk11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.dcsctp::IDataChunk"* readonly, %"class.std::__1::vector"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 3, i32 5, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 3, i32 5, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %5
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = add i64 %9, 20
  %17 = add i64 %15, %16
  %18 = icmp ult i64 %15, %17
  %19 = inttoptr i64 %14 to i8*
  br i1 %18, label %20, label %23

20:                                               ; preds = %2
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %1, i64 %16) #9
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  br label %27

23:                                               ; preds = %2
  %24 = icmp ugt i64 %15, %17
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = getelementptr inbounds i8, i8* %19, i64 %17
  store i8* %26, i8** %10, align 8
  br label %27

27:                                               ; preds = %20, %23, %25
  %28 = phi i8* [ %22, %20 ], [ %19, %23 ], [ %19, %25 ]
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %30 = getelementptr inbounds i8, i8* %28, i64 %15
  store i8 64, i8* %30, align 1
  %31 = trunc i64 %16 to i16
  %32 = getelementptr inbounds i8, i8* %30, i64 2
  %33 = lshr i16 %31, 8
  %34 = trunc i16 %33 to i8
  store i8 %34, i8* %32, align 1
  %35 = trunc i64 %16 to i8
  %36 = getelementptr inbounds i8, i8* %30, i64 3
  store i8 %35, i8* %36, align 1
  %37 = load i8*, i8** %29, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %15
  %39 = icmp eq i64 %16, 0
  %40 = select i1 %39, i8* null, i8* %38
  %41 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 3, i32 7, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 3, i32 6, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 3, i32 8, i32 0
  %46 = load i8, i8* %45, align 1
  %47 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 4, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %44, 0
  %50 = select i1 %49, i8 0, i8 2
  %51 = or i8 %50, %42
  %52 = icmp eq i8 %46, 0
  %53 = select i1 %52, i8 0, i8 4
  %54 = or i8 %51, %53
  %55 = icmp eq i8 %48, 0
  %56 = select i1 %55, i8 0, i8 8
  %57 = or i8 %54, %56
  %58 = getelementptr inbounds i8, i8* %40, i64 1
  store i8 %57, i8* %58, align 1
  %59 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 1, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds i8, i8* %40, i64 4
  %62 = lshr i32 %60, 24
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %61, align 1
  %64 = lshr i32 %60, 16
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds i8, i8* %40, i64 5
  store i8 %65, i8* %66, align 1
  %67 = lshr i32 %60, 8
  %68 = trunc i32 %67 to i8
  %69 = getelementptr inbounds i8, i8* %40, i64 6
  store i8 %68, i8* %69, align 1
  %70 = trunc i32 %60 to i8
  %71 = getelementptr inbounds i8, i8* %40, i64 7
  store i8 %70, i8* %71, align 1
  %72 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 3, i32 0, i32 0
  %73 = load i16, i16* %72, align 8
  %74 = getelementptr inbounds i8, i8* %40, i64 8
  %75 = lshr i16 %73, 8
  %76 = trunc i16 %75 to i8
  store i8 %76, i8* %74, align 1
  %77 = trunc i16 %73 to i8
  %78 = getelementptr inbounds i8, i8* %40, i64 9
  store i8 %77, i8* %78, align 1
  %79 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 3, i32 2, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds i8, i8* %40, i64 12
  %82 = lshr i32 %80, 24
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %81, align 1
  %84 = lshr i32 %80, 16
  %85 = trunc i32 %84 to i8
  %86 = getelementptr inbounds i8, i8* %40, i64 13
  store i8 %85, i8* %86, align 1
  %87 = lshr i32 %80, 8
  %88 = trunc i32 %87 to i8
  %89 = getelementptr inbounds i8, i8* %40, i64 14
  store i8 %88, i8* %89, align 1
  %90 = trunc i32 %80 to i8
  %91 = getelementptr inbounds i8, i8* %40, i64 15
  store i8 %90, i8* %91, align 1
  %92 = load i8, i8* %43, align 1
  %93 = icmp eq i8 %92, 0
  %94 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 3, i32 4, i32 0
  %95 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 3, i32 3, i32 0
  %96 = select i1 %93, i32* %95, i32* %94
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds i8, i8* %40, i64 16
  %99 = lshr i32 %97, 24
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %98, align 1
  %101 = lshr i32 %97, 16
  %102 = trunc i32 %101 to i8
  %103 = getelementptr inbounds i8, i8* %40, i64 17
  store i8 %102, i8* %103, align 1
  %104 = lshr i32 %97, 8
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds i8, i8* %40, i64 18
  store i8 %105, i8* %106, align 1
  %107 = trunc i32 %97 to i8
  %108 = getelementptr inbounds i8, i8* %40, i64 19
  store i8 %107, i8* %108, align 1
  %109 = load i8*, i8** %3, align 8
  %110 = load i64, i64* %7, align 8
  %111 = ptrtoint i8* %109 to i64
  %112 = sub i64 %110, %111
  %113 = icmp eq i64 %112, 0
  %114 = select i1 %113, i8* null, i8* %109
  %115 = getelementptr inbounds i8, i8* %40, i64 20
  %116 = icmp ult i64 %9, %112
  %117 = select i1 %116, i64 %9, i64 %112
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %115, i8* align 1 %114, i64 %117, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp10IDataChunk8ToStringEv(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.dcsctp::IDataChunk"* readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.rtc::StringBuilder", align 8
  %10 = bitcast %"class.rtc::StringBuilder"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #9
  %11 = getelementptr inbounds %"class.rtc::StringBuilder", %"class.rtc::StringBuilder"* %9, i64 0, i32 0
  %12 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i64 13) #9
  %13 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %1, i64 0, i32 0, i32 3, i32 7, i32 0
  %14 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %1, i64 0, i32 0, i32 3, i32 6, i32 0
  %15 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %1, i64 0, i32 0, i32 3, i32 8, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  %18 = select i1 %17, i64 7, i64 9
  %19 = select i1 %17, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)
  %20 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* %19, i64 %18) #9
  %21 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2) #9
  %22 = load i8, i8* %13, align 1
  %23 = load i8, i8* %14, align 1
  %24 = icmp eq i8 %23, 0
  %25 = icmp eq i8 %22, 0
  %26 = select i1 %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)
  %27 = select i1 %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0)
  %28 = select i1 %24, i8* %26, i8* %27
  %29 = call i64 @strlen(i8* nonnull %28) #9
  %30 = icmp sgt i64 %29, -1
  br i1 %30, label %32, label %31, !prof !5

31:                                               ; preds = %2
  call void @llvm.trap() #9
  unreachable

32:                                               ; preds = %2
  %33 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* %28, i64 %29) #9
  %34 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), i64 6) #9
  %35 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %1, i64 0, i32 0, i32 1, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #9
  call void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* nonnull sret %5, i32 %36) #9
  %38 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  %40 = load i8, i8* %39, align 1
  %41 = icmp slt i8 %40, 0
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = zext i8 %40 to i64
  %47 = select i1 %41, i8* %43, i8* %37
  %48 = select i1 %41, i64 %45, i64 %46
  %49 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* %47, i64 %48) #9
  %50 = load i8, i8* %39, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %32
  %53 = load i8*, i8** %42, align 8
  call void @_ZdlPv(i8* %53) #11
  br label %54

54:                                               ; preds = %32, %52
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #9
  %55 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i64 12) #9
  %56 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %1, i64 0, i32 0, i32 3, i32 0, i32 0
  %57 = load i16, i16* %56, align 8
  %58 = zext i16 %57 to i32
  %59 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %59) #9
  call void @_ZN3rtc8ToStringEi(%"class.std::__1::basic_string"* nonnull sret %4, i32 %58) #9
  %60 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %61 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %60, i64 0, i32 1, i32 0
  %62 = load i8, i8* %61, align 1
  %63 = icmp slt i8 %62, 0
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = zext i8 %62 to i64
  %69 = select i1 %63, i8* %65, i8* %59
  %70 = select i1 %63, i64 %67, i64 %68
  %71 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* %69, i64 %70) #9
  %72 = load i8, i8* %61, align 1
  %73 = icmp slt i8 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %54
  %75 = load i8*, i8** %64, align 8
  call void @_ZdlPv(i8* %75) #11
  br label %76

76:                                               ; preds = %54, %74
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %59) #9
  %77 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i64 13) #9
  %78 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %1, i64 0, i32 0, i32 3, i32 2, i32 0
  %79 = load i32, i32* %78, align 4
  %80 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %80) #9
  call void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* nonnull sret %3, i32 %79) #9
  %81 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %82 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %81, i64 0, i32 1, i32 0
  %83 = load i8, i8* %82, align 1
  %84 = icmp slt i8 %83, 0
  %85 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %88 = load i64, i64* %87, align 8
  %89 = zext i8 %83 to i64
  %90 = select i1 %84, i8* %86, i8* %80
  %91 = select i1 %84, i64 %88, i64 %89
  %92 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* %90, i64 %91) #9
  %93 = load i8, i8* %82, align 1
  %94 = icmp slt i8 %93, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %76
  %96 = load i8*, i8** %85, align 8
  call void @_ZdlPv(i8* %96) #11
  br label %97

97:                                               ; preds = %76, %95
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %80) #9
  %98 = load i8, i8* %14, align 1
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %121, label %100

100:                                              ; preds = %97
  %101 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i64 7) #9
  %102 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %1, i64 0, i32 0, i32 3, i32 4, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %104) #9
  call void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* nonnull sret %6, i32 %103) #9
  %105 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %106 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %105, i64 0, i32 1, i32 0
  %107 = load i8, i8* %106, align 1
  %108 = icmp slt i8 %107, 0
  %109 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  %111 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = zext i8 %107 to i64
  %114 = select i1 %108, i8* %110, i8* %104
  %115 = select i1 %108, i64 %112, i64 %113
  %116 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* %114, i64 %115) #9
  %117 = load i8, i8* %106, align 1
  %118 = icmp slt i8 %117, 0
  br i1 %118, label %119, label %142

119:                                              ; preds = %100
  %120 = load i8*, i8** %109, align 8
  call void @_ZdlPv(i8* %120) #11
  br label %142

121:                                              ; preds = %97
  %122 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0), i64 6) #9
  %123 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %1, i64 0, i32 0, i32 3, i32 3, i32 0
  %124 = load i32, i32* %123, align 8
  %125 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %125) #9
  call void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* nonnull sret %7, i32 %124) #9
  %126 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %127 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %126, i64 0, i32 1, i32 0
  %128 = load i8, i8* %127, align 1
  %129 = icmp slt i8 %128, 0
  %130 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load i8*, i8** %130, align 8
  %132 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %133 = load i64, i64* %132, align 8
  %134 = zext i8 %128 to i64
  %135 = select i1 %129, i8* %131, i8* %125
  %136 = select i1 %129, i64 %133, i64 %134
  %137 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* %135, i64 %136) #9
  %138 = load i8, i8* %127, align 1
  %139 = icmp slt i8 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %121
  %141 = load i8*, i8** %130, align 8
  call void @_ZdlPv(i8* %141) #11
  br label %142

142:                                              ; preds = %140, %121, %119, %100
  %143 = phi i8* [ %104, %100 ], [ %104, %119 ], [ %125, %121 ], [ %125, %140 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %143) #9
  %144 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i64 9) #9
  %145 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %1, i64 0, i32 0, i32 3, i32 5, i32 0, i32 0
  %146 = bitcast i8** %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %1, i64 0, i32 0, i32 3, i32 5, i32 0, i32 1
  %149 = bitcast i8** %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = sub i64 %150, %147
  %152 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %152) #9
  call void @_ZN3rtc8ToStringEm(%"class.std::__1::basic_string"* nonnull sret %8, i64 %151) #9
  %153 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %154 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %153, i64 0, i32 1, i32 0
  %155 = load i8, i8* %154, align 1
  %156 = icmp slt i8 %155, 0
  %157 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load i8*, i8** %157, align 8
  %159 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %160 = load i64, i64* %159, align 8
  %161 = zext i8 %155 to i64
  %162 = select i1 %156, i8* %158, i8* %152
  %163 = select i1 %156, i64 %160, i64 %161
  %164 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* %162, i64 %163) #9
  %165 = load i8, i8* %154, align 1
  %166 = icmp slt i8 %165, 0
  br i1 %166, label %167, label %169

167:                                              ; preds = %142
  %168 = load i8*, i8** %157, align 8
  call void @_ZdlPv(i8* %168) #11
  br label %169

169:                                              ; preds = %167, %142
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %152) #9
  %170 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %170, i8* nonnull align 8 %10, i64 24, i1 false) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp10IDataChunkD0Ev(%"class.dcsctp::IDataChunk"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp12AnyDataChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 3, i32 5, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.dcsctp::IDataChunk", %"class.dcsctp::IDataChunk"* %0, i64 0, i32 0, i32 3, i32 5, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_ZdlPv(i8* nonnull %4) #11
  br label %10

10:                                               ; preds = %1, %6
  %11 = bitcast %"class.dcsctp::IDataChunk"* %0 to i8*
  tail call void @_ZdlPv(i8* %11) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp12AnyDataChunkD0Ev(%"class.dcsctp::AnyDataChunk"*) unnamed_addr #2 comdat align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

declare void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZN3rtc8ToStringEi(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #4

declare void @_ZN3rtc8ToStringEm(%"class.std::__1::basic_string"* sret, i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64, i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32, i32) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64, i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #9
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #10
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #11
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #9
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #9
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #11
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6dcsctp8TLVTraitINS_16IDataChunkConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE: argument 0"}
!4 = distinct !{!4, !"_ZN6dcsctp8TLVTraitINS_16IDataChunkConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE"}
!5 = !{!"branch_weights", i32 2000, i32 1}
