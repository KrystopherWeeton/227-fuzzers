; ModuleID = '../../v8/src/compiler/refs-map.cc'
source_filename = "../../v8/src/compiler/refs-map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::compiler::RefsMap" = type { %"class.v8::base::TemplateHashMapImpl" }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<unsigned long, v8::internal::compiler::ObjectData *, v8::internal::compiler::AddressMatcher, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<unsigned long, v8::internal::compiler::ObjectData *, v8::internal::compiler::AddressMatcher, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"class.v8::internal::ZoneAllocationPolicy" = type { %"class.v8::internal::Zone"* }
%"struct.v8::base::TemplateHashMapEntry" = type <{ i64, %"class.v8::internal::compiler::ObjectData"*, i32, i8, [3 x i8] }>
%"class.v8::internal::compiler::ObjectData" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }

$_ZN2v84base19TemplateHashMapImplImPNS_8internal8compiler10ObjectDataENS3_14AddressMatcherENS2_20ZoneAllocationPolicyEE6RemoveERKmj = comdat any

$_ZN2v84base19TemplateHashMapImplImPNS_8internal8compiler10ObjectDataENS3_14AddressMatcherENS2_20ZoneAllocationPolicyEE6ResizeEv = comdat any

@.str = private unnamed_addr constant [35 x i8] c"Out of memory: HashMap::Initialize\00", align 1

@_ZN2v88internal8compiler7RefsMapC1EjNS1_14AddressMatcherEPNS0_4ZoneE = hidden unnamed_addr alias void (%"class.v8::internal::compiler::RefsMap"*, i32, %"class.v8::internal::Zone"*), void (%"class.v8::internal::compiler::RefsMap"*, i32, %"class.v8::internal::Zone"*)* @_ZN2v88internal8compiler7RefsMapC2EjNS1_14AddressMatcherEPNS0_4ZoneE
@_ZN2v88internal8compiler7RefsMapC1EPKS2_PNS0_4ZoneE = hidden unnamed_addr alias void (%"class.v8::internal::compiler::RefsMap"*, %"class.v8::internal::compiler::RefsMap"*, %"class.v8::internal::Zone"*), void (%"class.v8::internal::compiler::RefsMap"*, %"class.v8::internal::compiler::RefsMap"*, %"class.v8::internal::Zone"*)* @_ZN2v88internal8compiler7RefsMapC2EPKS2_PNS0_4ZoneE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler7RefsMapC2EjNS1_14AddressMatcherEPNS0_4ZoneE(%"class.v8::internal::compiler::RefsMap"* nocapture, i32, %"class.v8::internal::Zone"*) unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.v8::internal::Zone"* %2 to i64
  %5 = bitcast %"class.v8::internal::compiler::RefsMap"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.v8::base::TemplateHashMapEntry"** %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #6
  %8 = zext i32 %1 to i64
  %9 = mul nuw nsw i64 %8, 24
  %10 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %13, %11
  %15 = icmp ugt i64 %9, %14
  br i1 %15, label %16, label %18, !prof !2

16:                                               ; preds = %3
  %17 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %9) #6
  br label %20

18:                                               ; preds = %3
  %19 = add i64 %11, %9
  store i64 %19, i64* %10, align 8
  br label %20

20:                                               ; preds = %18, %16
  %21 = phi i64 [ %17, %16 ], [ %11, %18 ]
  %22 = inttoptr i64 %21 to %"struct.v8::base::TemplateHashMapEntry"*
  store %"struct.v8::base::TemplateHashMapEntry"* %22, %"struct.v8::base::TemplateHashMapEntry"** %6, align 8
  %23 = icmp eq i64 %21, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %20
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 %1, i32* %26, align 8
  %27 = icmp eq i32 %1, 0
  br i1 %27, label %40, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %22, i64 0, i32 3
  store i8 0, i8* %29, align 4
  %30 = load i32, i32* %26, align 8
  %31 = icmp ugt i32 %30, 1
  br i1 %31, label %32, label %40

32:                                               ; preds = %28, %32
  %33 = phi i64 [ %36, %32 ], [ 1, %28 ]
  %34 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %6, align 8
  %35 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %34, i64 %33, i32 3
  store i8 0, i8* %35, align 4
  %36 = add nuw nsw i64 %33, 1
  %37 = load i32, i32* %26, align 8
  %38 = zext i32 %37 to i64
  %39 = icmp ult i64 %36, %38
  br i1 %39, label %32, label %40

40:                                               ; preds = %32, %25, %28
  %41 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0, i32 0, i32 3
  store i32 0, i32* %41, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler7RefsMapC2EPKS2_PNS0_4ZoneE(%"class.v8::internal::compiler::RefsMap"* nocapture, %"class.v8::internal::compiler::RefsMap"* nocapture readonly, %"class.v8::internal::Zone"*) unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.v8::internal::Zone"* %2 to i64
  %5 = bitcast %"class.v8::internal::compiler::RefsMap"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.v8::base::TemplateHashMapEntry"** %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #6
  %8 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %1, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 %9, i32* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %1, i64 0, i32 0, i32 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0, i32 0, i32 3
  store i32 %12, i32* %13, align 4
  %14 = zext i32 %9 to i64
  %15 = mul nuw nsw i64 %14, 24
  %16 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %17
  %21 = icmp ugt i64 %15, %20
  br i1 %21, label %22, label %24, !prof !2

22:                                               ; preds = %3
  %23 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %15) #6
  br label %26

24:                                               ; preds = %3
  %25 = add i64 %17, %15
  store i64 %25, i64* %16, align 8
  br label %26

26:                                               ; preds = %22, %24
  %27 = phi i64 [ %23, %22 ], [ %17, %24 ]
  %28 = inttoptr i64 %27 to %"struct.v8::base::TemplateHashMapEntry"*
  store %"struct.v8::base::TemplateHashMapEntry"* %28, %"struct.v8::base::TemplateHashMapEntry"** %6, align 8
  %29 = inttoptr i64 %27 to i8*
  %30 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %1, i64 0, i32 0, i32 0, i32 1
  %31 = bitcast %"struct.v8::base::TemplateHashMapEntry"** %30 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = load i32, i32* %10, align 8
  %34 = zext i32 %33 to i64
  %35 = mul nuw nsw i64 %34, 24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 1 %32, i64 %35, i1 false) #6
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"struct.v8::base::TemplateHashMapEntry"* @_ZNK2v88internal8compiler7RefsMap6LookupERKm(%"class.v8::internal::compiler::RefsMap"* nocapture readonly, i64* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = trunc i64 %3 to i32
  %5 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = and i32 %7, %4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %10, align 8
  %12 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %11, i64 %9
  %13 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %11, i64 %9, i32 3
  %14 = load i8, i8* %13, align 4, !range !3
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %31, label %16

16:                                               ; preds = %2
  %17 = zext i32 %7 to i64
  br label %18

18:                                               ; preds = %24, %16
  %19 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %12, %16 ], [ %27, %24 ]
  %20 = phi i64 [ %9, %16 ], [ %26, %24 ]
  %21 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %19, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %3, %22
  br i1 %23, label %31, label %24

24:                                               ; preds = %18
  %25 = add nuw nsw i64 %20, 1
  %26 = and i64 %25, %17
  %27 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %11, i64 %26
  %28 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %11, i64 %26, i32 3
  %29 = load i8, i8* %28, align 4, !range !3
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %18

31:                                               ; preds = %18, %24, %2
  %32 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %12, %2 ], [ %27, %24 ], [ %19, %18 ]
  %33 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %32, i64 0, i32 3
  %34 = load i8, i8* %33, align 4, !range !3
  %35 = icmp eq i8 %34, 0
  %36 = select i1 %35, %"struct.v8::base::TemplateHashMapEntry"* null, %"struct.v8::base::TemplateHashMapEntry"* %32
  ret %"struct.v8::base::TemplateHashMapEntry"* %36
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2v88internal8compiler7RefsMap4HashEm(i64) local_unnamed_addr #2 align 2 {
  %2 = trunc i64 %0 to i32
  ret i32 %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.v8::base::TemplateHashMapEntry"* @_ZN2v88internal8compiler7RefsMap14LookupOrInsertERKm(%"class.v8::internal::compiler::RefsMap"*, i64* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0
  %4 = load i64, i64* %1, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, -1
  %9 = and i32 %8, %5
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %11, align 8
  %13 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %12, i64 %10
  %14 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %12, i64 %10, i32 3
  %15 = load i8, i8* %14, align 4, !range !3
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %32, label %17

17:                                               ; preds = %2
  %18 = zext i32 %8 to i64
  br label %19

19:                                               ; preds = %25, %17
  %20 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %13, %17 ], [ %28, %25 ]
  %21 = phi i64 [ %10, %17 ], [ %27, %25 ]
  %22 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %20, i64 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, %4
  br i1 %24, label %32, label %25

25:                                               ; preds = %19
  %26 = add nuw nsw i64 %21, 1
  %27 = and i64 %26, %18
  %28 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %12, i64 %27
  %29 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %12, i64 %27, i32 3
  %30 = load i8, i8* %29, align 4, !range !3
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %19

32:                                               ; preds = %25, %19, %2
  %33 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %13, %2 ], [ %20, %19 ], [ %28, %25 ]
  %34 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %33, i64 0, i32 3
  %35 = load i8, i8* %34, align 4, !range !3
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %74

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %33, i64 0, i32 0
  store i64 %4, i64* %38, align 8
  %39 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %33, i64 0, i32 1
  %40 = bitcast %"class.v8::internal::compiler::ObjectData"** %39 to i64*
  store i64 0, i64* %40, align 8
  %41 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %33, i64 0, i32 2
  store i32 %5, i32* %41, align 8
  store i8 1, i8* %34, align 4
  %42 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0, i32 0, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = add i32 %43, 1
  store i32 %44, i32* %42, align 4
  %45 = lshr i32 %44, 2
  %46 = add i32 %45, %44
  %47 = load i32, i32* %6, align 8
  %48 = icmp ult i32 %46, %47
  br i1 %48, label %74, label %49

49:                                               ; preds = %37
  tail call void @_ZN2v84base19TemplateHashMapImplImPNS_8internal8compiler10ObjectDataENS3_14AddressMatcherENS2_20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl"* %3) #6
  %50 = load i32, i32* %6, align 8
  %51 = add i32 %50, -1
  %52 = and i32 %51, %5
  %53 = zext i32 %52 to i64
  %54 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %11, align 8
  %55 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %54, i64 %53
  %56 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %54, i64 %53, i32 3
  %57 = load i8, i8* %56, align 4, !range !3
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %74, label %59

59:                                               ; preds = %49
  %60 = zext i32 %51 to i64
  br label %61

61:                                               ; preds = %67, %59
  %62 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %55, %59 ], [ %70, %67 ]
  %63 = phi i64 [ %53, %59 ], [ %69, %67 ]
  %64 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %62, i64 0, i32 0
  %65 = load i64, i64* %64, align 8
  %66 = icmp eq i64 %4, %65
  br i1 %66, label %74, label %67

67:                                               ; preds = %61
  %68 = add nuw nsw i64 %63, 1
  %69 = and i64 %68, %60
  %70 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %54, i64 %69
  %71 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %54, i64 %69, i32 3
  %72 = load i8, i8* %71, align 4, !range !3
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %74, label %61

74:                                               ; preds = %61, %67, %32, %37, %49
  %75 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %33, %32 ], [ %33, %37 ], [ %55, %49 ], [ %70, %67 ], [ %62, %61 ]
  ret %"struct.v8::base::TemplateHashMapEntry"* %75
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::ObjectData"* @_ZN2v88internal8compiler7RefsMap6RemoveERKm(%"class.v8::internal::compiler::RefsMap"*, i64* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::RefsMap", %"class.v8::internal::compiler::RefsMap"* %0, i64 0, i32 0
  %4 = load i64, i64* %1, align 8
  %5 = trunc i64 %4 to i32
  %6 = tail call %"class.v8::internal::compiler::ObjectData"* @_ZN2v84base19TemplateHashMapImplImPNS_8internal8compiler10ObjectDataENS3_14AddressMatcherENS2_20ZoneAllocationPolicyEE6RemoveERKmj(%"class.v8::base::TemplateHashMapImpl"* %3, i64* dereferenceable(8) %1, i32 %5)
  ret %"class.v8::internal::compiler::ObjectData"* %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::compiler::ObjectData"* @_ZN2v84base19TemplateHashMapImplImPNS_8internal8compiler10ObjectDataENS3_14AddressMatcherENS2_20ZoneAllocationPolicyEE6RemoveERKmj(%"class.v8::base::TemplateHashMapImpl"*, i64* dereferenceable(8), i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, -1
  %7 = and i32 %6, %2
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 1
  %10 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %9, align 8
  %11 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %10, i64 %8
  %12 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %10, i64 %8, i32 3
  %13 = load i8, i8* %12, align 4, !range !3
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %31, label %15

15:                                               ; preds = %3
  %16 = load i64, i64* %1, align 8
  %17 = zext i32 %6 to i64
  br label %18

18:                                               ; preds = %24, %15
  %19 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %11, %15 ], [ %27, %24 ]
  %20 = phi i64 [ %8, %15 ], [ %26, %24 ]
  %21 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %19, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %16, %22
  br i1 %23, label %31, label %24

24:                                               ; preds = %18
  %25 = add nuw nsw i64 %20, 1
  %26 = and i64 %25, %17
  %27 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %10, i64 %26
  %28 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %10, i64 %26, i32 3
  %29 = load i8, i8* %28, align 4, !range !3
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %18

31:                                               ; preds = %18, %24, %3
  %32 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %11, %3 ], [ %19, %18 ], [ %27, %24 ]
  %33 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %32, i64 0, i32 3
  %34 = load i8, i8* %33, align 4, !range !3
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %92, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %32, i64 0, i32 1
  %38 = load %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::ObjectData"** %37, align 8
  %39 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %32, i64 1
  %40 = zext i32 %5 to i64
  %41 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %10, i64 %40
  %42 = icmp eq %"struct.v8::base::TemplateHashMapEntry"* %39, %41
  %43 = select i1 %42, %"struct.v8::base::TemplateHashMapEntry"* %10, %"struct.v8::base::TemplateHashMapEntry"* %39
  %44 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %43, i64 0, i32 3
  %45 = load i8, i8* %44, align 4, !range !3
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %86, label %47

47:                                               ; preds = %36, %74
  %48 = phi i32 [ %75, %74 ], [ %5, %36 ]
  %49 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %76, %74 ], [ %10, %36 ]
  %50 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %82, %74 ], [ %43, %36 ]
  %51 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %77, %74 ], [ %32, %36 ]
  %52 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %50, i64 0, i32 2
  %53 = load i32, i32* %52, align 8
  %54 = add i32 %48, -1
  %55 = and i32 %53, %54
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 %56
  %58 = icmp ugt %"struct.v8::base::TemplateHashMapEntry"* %50, %51
  br i1 %58, label %59, label %63

59:                                               ; preds = %47
  %60 = icmp ule %"struct.v8::base::TemplateHashMapEntry"* %57, %51
  %61 = icmp ugt %"struct.v8::base::TemplateHashMapEntry"* %57, %50
  %62 = or i1 %60, %61
  br i1 %62, label %69, label %63

63:                                               ; preds = %59, %47
  %64 = icmp ult %"struct.v8::base::TemplateHashMapEntry"* %50, %51
  %65 = icmp ule %"struct.v8::base::TemplateHashMapEntry"* %57, %51
  %66 = and i1 %64, %65
  %67 = icmp ugt %"struct.v8::base::TemplateHashMapEntry"* %57, %50
  %68 = and i1 %67, %66
  br i1 %68, label %69, label %74

69:                                               ; preds = %63, %59
  %70 = bitcast %"struct.v8::base::TemplateHashMapEntry"* %51 to i8*
  %71 = bitcast %"struct.v8::base::TemplateHashMapEntry"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %71, i64 21, i1 false)
  %72 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %9, align 8
  %73 = load i32, i32* %4, align 8
  br label %74

74:                                               ; preds = %63, %69
  %75 = phi i32 [ %73, %69 ], [ %48, %63 ]
  %76 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %72, %69 ], [ %49, %63 ]
  %77 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %50, %69 ], [ %51, %63 ]
  %78 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %50, i64 1
  %79 = zext i32 %75 to i64
  %80 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %76, i64 %79
  %81 = icmp eq %"struct.v8::base::TemplateHashMapEntry"* %78, %80
  %82 = select i1 %81, %"struct.v8::base::TemplateHashMapEntry"* %76, %"struct.v8::base::TemplateHashMapEntry"* %78
  %83 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %82, i64 0, i32 3
  %84 = load i8, i8* %83, align 4, !range !3
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %47

86:                                               ; preds = %74, %36
  %87 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %32, %36 ], [ %77, %74 ]
  %88 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %87, i64 0, i32 3
  store i8 0, i8* %88, align 4
  %89 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 3
  %90 = load i32, i32* %89, align 4
  %91 = add i32 %90, -1
  store i32 %91, i32* %89, align 4
  br label %92

92:                                               ; preds = %31, %86
  %93 = phi %"class.v8::internal::compiler::ObjectData"* [ %38, %86 ], [ null, %31 ]
  ret %"class.v8::internal::compiler::ObjectData"* %93
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #4

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v84base19TemplateHashMapImplImPNS_8internal8compiler10ObjectDataENS3_14AddressMatcherENS2_20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 1
  %3 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = shl i32 %5, 1
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %10, align 8
  %12 = mul nuw nsw i64 %9, 24
  %13 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %14
  %18 = icmp ugt i64 %12, %17
  br i1 %18, label %19, label %21, !prof !2

19:                                               ; preds = %1
  %20 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %11, i64 %12) #6
  br label %23

21:                                               ; preds = %1
  %22 = add i64 %14, %12
  store i64 %22, i64* %13, align 8
  br label %23

23:                                               ; preds = %21, %19
  %24 = phi i64 [ %20, %19 ], [ %14, %21 ]
  %25 = inttoptr i64 %24 to %"struct.v8::base::TemplateHashMapEntry"*
  store %"struct.v8::base::TemplateHashMapEntry"* %25, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

28:                                               ; preds = %23
  store i32 %8, i32* %4, align 8
  %29 = icmp eq i32 %8, 0
  br i1 %29, label %42, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %25, i64 0, i32 3
  store i8 0, i8* %31, align 4
  %32 = load i32, i32* %4, align 8
  %33 = icmp ugt i32 %32, 1
  br i1 %33, label %34, label %42

34:                                               ; preds = %30, %34
  %35 = phi i64 [ %38, %34 ], [ 1, %30 ]
  %36 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %37 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %36, i64 %35, i32 3
  store i8 0, i8* %37, align 4
  %38 = add nuw nsw i64 %35, 1
  %39 = load i32, i32* %4, align 8
  %40 = zext i32 %39 to i64
  %41 = icmp ult i64 %38, %40
  br i1 %41, label %34, label %42

42:                                               ; preds = %34, %30, %28
  %43 = phi i32 [ %32, %30 ], [ 0, %28 ], [ %39, %34 ]
  store i32 0, i32* %6, align 4
  %44 = icmp eq i32 %7, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %123, %42
  ret void

46:                                               ; preds = %42, %123
  %47 = phi i32 [ %124, %123 ], [ %43, %42 ]
  %48 = phi i32 [ %125, %123 ], [ %7, %42 ]
  %49 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %126, %123 ], [ %3, %42 ]
  %50 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 3
  %51 = load i8, i8* %50, align 4, !range !3
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %123, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 0
  %55 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 2
  %56 = load i32, i32* %55, align 8
  %57 = add i32 %47, -1
  %58 = and i32 %57, %56
  %59 = zext i32 %58 to i64
  %60 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %61 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %60, i64 %59
  %62 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %60, i64 %59, i32 3
  %63 = load i8, i8* %62, align 4, !range !3
  %64 = icmp eq i8 %63, 0
  %65 = load i64, i64* %54, align 8
  br i1 %64, label %81, label %66

66:                                               ; preds = %53
  %67 = zext i32 %57 to i64
  br label %68

68:                                               ; preds = %74, %66
  %69 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %61, %66 ], [ %77, %74 ]
  %70 = phi i64 [ %59, %66 ], [ %76, %74 ]
  %71 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %69, i64 0, i32 0
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %65, %72
  br i1 %73, label %81, label %74

74:                                               ; preds = %68
  %75 = add nuw nsw i64 %70, 1
  %76 = and i64 %75, %67
  %77 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %60, i64 %76
  %78 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %60, i64 %76, i32 3
  %79 = load i8, i8* %78, align 4, !range !3
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %81, label %68

81:                                               ; preds = %68, %74, %53
  %82 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %61, %53 ], [ %69, %68 ], [ %77, %74 ]
  %83 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 1
  %84 = bitcast %"class.v8::internal::compiler::ObjectData"** %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %82, i64 0, i32 0
  store i64 %65, i64* %86, align 8
  %87 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %82, i64 0, i32 1
  %88 = bitcast %"class.v8::internal::compiler::ObjectData"** %87 to i64*
  store i64 %85, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %82, i64 0, i32 2
  store i32 %56, i32* %89, align 8
  %90 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %82, i64 0, i32 3
  store i8 1, i8* %90, align 4
  %91 = load i32, i32* %6, align 4
  %92 = add i32 %91, 1
  store i32 %92, i32* %6, align 4
  %93 = lshr i32 %92, 2
  %94 = add i32 %93, %92
  %95 = load i32, i32* %4, align 8
  %96 = icmp ult i32 %94, %95
  br i1 %96, label %120, label %97

97:                                               ; preds = %81
  tail call void @_ZN2v84base19TemplateHashMapImplImPNS_8internal8compiler10ObjectDataENS3_14AddressMatcherENS2_20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl"* %0) #6
  %98 = load i32, i32* %4, align 8
  %99 = add i32 %98, -1
  %100 = and i32 %99, %56
  %101 = zext i32 %100 to i64
  %102 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %103 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %102, i64 %101, i32 3
  %104 = load i8, i8* %103, align 4, !range !3
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %120, label %106

106:                                              ; preds = %97
  %107 = load i64, i64* %54, align 8
  %108 = zext i32 %99 to i64
  br label %109

109:                                              ; preds = %114, %106
  %110 = phi i64 [ %101, %106 ], [ %116, %114 ]
  %111 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %102, i64 %110, i32 0
  %112 = load i64, i64* %111, align 8
  %113 = icmp eq i64 %107, %112
  br i1 %113, label %120, label %114

114:                                              ; preds = %109
  %115 = add nuw nsw i64 %110, 1
  %116 = and i64 %115, %108
  %117 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %102, i64 %116, i32 3
  %118 = load i8, i8* %117, align 4, !range !3
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %120, label %109

120:                                              ; preds = %109, %114, %97, %81
  %121 = phi i32 [ %98, %97 ], [ %95, %81 ], [ %98, %114 ], [ %98, %109 ]
  %122 = add i32 %48, -1
  br label %123

123:                                              ; preds = %46, %120
  %124 = phi i32 [ %121, %120 ], [ %47, %46 ]
  %125 = phi i32 [ %122, %120 ], [ %48, %46 ]
  %126 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 1
  %127 = icmp eq i32 %125, 0
  br i1 %127, label %45, label %46
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
