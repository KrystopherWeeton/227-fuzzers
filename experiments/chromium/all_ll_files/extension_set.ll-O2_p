; ModuleID = '../../ui/gfx/extension_set.cc'
source_filename = "../../ui/gfx/extension_set.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::nothrow_t" = type { i8 }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::BasicStringPiece"* }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare" = type { i8 }

$_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE15sort_and_uniqueENS3_11__wrap_iterIPS6_EESH_ = comdat any

$_ZNSt3__16uniqueINS_11__wrap_iterIPN4base16BasicStringPieceIcNS_11char_traitsIcEEEEEENS2_8internal9NotFnImplINS9_9flat_treeIS6_NS2_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareEEEEET_SM_SM_T0_ = comdat any

$_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl = comdat any

$_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE = comdat any

$_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl = comdat any

$_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_PNS_15iterator_traitsISL_E10value_typeET_ = comdat any

$_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeE = comdat any

$_ZNK4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE11equal_rangeIS6_EENS3_4pairINS3_11__wrap_iterIPKS6_EESK_EERKT_ = comdat any

@.str = private unnamed_addr constant [2 x i8] c" \00", align 1
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx16MakeExtensionSetERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::internal::flat_tree"* noalias sret, %"class.base::BasicStringPiece"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  call void @_ZN4base16SplitStringPieceENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector"* nonnull sret %3, i8* %6, i64 %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1, i32 1, i32 0) #8
  %9 = bitcast %"class.std::__1::vector"* %3 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.base::internal::flat_tree"* %0 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = bitcast %"class.base::BasicStringPiece"** %12 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 8
  %16 = bitcast %"class.base::BasicStringPiece"** %13 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #8
  %17 = inttoptr i64 %10 to %"class.base::BasicStringPiece"*
  %18 = extractelement <2 x i64> %15, i32 0
  %19 = inttoptr i64 %18 to %"class.base::BasicStringPiece"*
  call void @_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE15sort_and_uniqueENS3_11__wrap_iterIPS6_EESH_(%"class.base::internal::flat_tree"* %0, %"class.base::BasicStringPiece"* %17, %"class.base::BasicStringPiece"* %19) #8
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %21 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %20, align 8
  %22 = icmp eq %"class.base::BasicStringPiece"* %21, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %2
  %24 = bitcast %"class.base::BasicStringPiece"** %12 to i64*
  %25 = ptrtoint %"class.base::BasicStringPiece"* %21 to i64
  store i64 %25, i64* %24, align 8
  %26 = bitcast %"class.base::BasicStringPiece"* %21 to i8*
  call void @_ZdlPv(i8* %26) #9
  br label %27

27:                                               ; preds = %2, %23
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4base16SplitStringPieceENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector"* sret, i8*, i64, i8*, i64, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gfx12HasExtensionERKN4base8internal9flat_treeINS0_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS0_8identityENS4_4lessIvEENS4_6vectorIS7_NS4_9allocatorIS7_EEEEEERKS7_(%"class.base::internal::flat_tree"* dereferenceable(24), %"class.base::BasicStringPiece"* dereferenceable(16)) local_unnamed_addr #0 {
  %3 = tail call { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"* } @_ZNK4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE11equal_rangeIS6_EENS3_4pairINS3_11__wrap_iterIPKS6_EESK_EERKT_(%"class.base::internal::flat_tree"* %0, %"class.base::BasicStringPiece"* dereferenceable(16) %1) #8
  %4 = extractvalue { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"* } %3, 0
  %5 = extractvalue { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"* } %3, 1
  %6 = icmp eq %"class.base::BasicStringPiece"* %4, %5
  %7 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %7, align 8
  %9 = select i1 %6, %"class.base::BasicStringPiece"* %8, %"class.base::BasicStringPiece"* %4
  %10 = icmp ne %"class.base::BasicStringPiece"* %9, %8
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx19MakeExtensionStringERKN4base8internal9flat_treeINS0_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS0_8identityENS4_4lessIvEENS4_6vectorIS7_NS4_9allocatorIS7_EEEEEE(%"class.std::__1::basic_string"* noalias sret, %"class.base::internal::flat_tree"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %1, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %7, align 8
  %9 = ptrtoint %"class.base::BasicStringPiece"* %8 to i64
  %10 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %1, i64 0, i32 0, i32 0, i32 1
  %11 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #8
  %12 = ptrtoint %"class.base::BasicStringPiece"* %11 to i64
  %13 = sub i64 %12, %9
  %14 = ashr exact i64 %13, 4
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %2
  %17 = bitcast %"class.base::BasicStringPiece"** %5 to i64*
  br label %79

18:                                               ; preds = %2
  %19 = icmp ugt i64 %14, 1152921504606846975
  br i1 %19, label %20, label %22

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %21) #10
  unreachable

22:                                               ; preds = %18
  %23 = tail call i8* @_Znwm(i64 %13) #9
  %24 = bitcast i8* %23 to %"class.base::BasicStringPiece"*
  %25 = bitcast %"class.base::BasicStringPiece"** %5 to i8**
  store i8* %23, i8** %25, align 8
  %26 = bitcast %"class.std::__1::vector"* %3 to i8**
  store i8* %23, i8** %26, align 8
  %27 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %24, i64 %14
  store %"class.base::BasicStringPiece"* %27, %"class.base::BasicStringPiece"** %6, align 8
  %28 = bitcast %"class.base::BasicStringPiece"** %5 to i64*
  %29 = ptrtoint i8* %23 to i64
  %30 = icmp eq %"class.base::BasicStringPiece"* %8, %11
  br i1 %30, label %77, label %31

31:                                               ; preds = %22
  %32 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 -1, i32 0
  %33 = ptrtoint i8** %32 to i64
  %34 = sub i64 %33, %9
  %35 = lshr i64 %34, 4
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 3
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %31, %39
  %40 = phi %"class.base::BasicStringPiece"* [ %46, %39 ], [ %24, %31 ]
  %41 = phi %"class.base::BasicStringPiece"* [ %45, %39 ], [ %8, %31 ]
  %42 = phi i64 [ %47, %39 ], [ %37, %31 ]
  %43 = bitcast %"class.base::BasicStringPiece"* %40 to i8*
  %44 = bitcast %"class.base::BasicStringPiece"* %41 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false) #8
  %45 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %41, i64 1
  %46 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %40, i64 1
  %47 = add i64 %42, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %39, !llvm.loop !2

49:                                               ; preds = %39, %31
  %50 = phi %"class.base::BasicStringPiece"* [ undef, %31 ], [ %46, %39 ]
  %51 = phi %"class.base::BasicStringPiece"* [ %24, %31 ], [ %46, %39 ]
  %52 = phi %"class.base::BasicStringPiece"* [ %8, %31 ], [ %45, %39 ]
  %53 = icmp ult i64 %34, 48
  br i1 %53, label %74, label %54

54:                                               ; preds = %49, %54
  %55 = phi %"class.base::BasicStringPiece"* [ %72, %54 ], [ %51, %49 ]
  %56 = phi %"class.base::BasicStringPiece"* [ %71, %54 ], [ %52, %49 ]
  %57 = bitcast %"class.base::BasicStringPiece"* %55 to i8*
  %58 = bitcast %"class.base::BasicStringPiece"* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 16, i1 false) #8
  %59 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %56, i64 1
  %60 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 1
  %61 = bitcast %"class.base::BasicStringPiece"* %60 to i8*
  %62 = bitcast %"class.base::BasicStringPiece"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 16, i1 false) #8
  %63 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %56, i64 2
  %64 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 2
  %65 = bitcast %"class.base::BasicStringPiece"* %64 to i8*
  %66 = bitcast %"class.base::BasicStringPiece"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 16, i1 false) #8
  %67 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %56, i64 3
  %68 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 3
  %69 = bitcast %"class.base::BasicStringPiece"* %68 to i8*
  %70 = bitcast %"class.base::BasicStringPiece"* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 16, i1 false) #8
  %71 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %56, i64 4
  %72 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 4
  %73 = icmp eq %"class.base::BasicStringPiece"* %71, %11
  br i1 %73, label %74, label %54

74:                                               ; preds = %54, %49
  %75 = phi %"class.base::BasicStringPiece"* [ %50, %49 ], [ %72, %54 ]
  %76 = ptrtoint %"class.base::BasicStringPiece"* %75 to i64
  br label %77

77:                                               ; preds = %74, %22
  %78 = phi i64 [ %29, %22 ], [ %76, %74 ]
  store i64 %78, i64* %28, align 8
  br label %79

79:                                               ; preds = %16, %77
  %80 = phi i64* [ %17, %16 ], [ %28, %77 ]
  %81 = phi i8* [ null, %16 ], [ %23, %77 ]
  %82 = phi %"class.base::BasicStringPiece"* [ null, %16 ], [ %24, %77 ]
  %83 = phi i64 [ 0, %16 ], [ %78, %77 ]
  %84 = phi i64 [ 0, %16 ], [ %29, %77 ]
  %85 = sub i64 %83, %84
  %86 = ashr exact i64 %85, 4
  %87 = inttoptr i64 %84 to %"class.base::BasicStringPiece"*
  tail call void @_ZN4base10JoinStringENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEES5_(%"class.std::__1::basic_string"* sret %0, i64 %86, %"class.base::BasicStringPiece"* %87, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1) #8
  %88 = icmp eq %"class.base::BasicStringPiece"* %82, null
  br i1 %88, label %91, label %89

89:                                               ; preds = %79
  %90 = ptrtoint %"class.base::BasicStringPiece"* %82 to i64
  store i64 %90, i64* %80, align 8
  tail call void @_ZdlPv(i8* %81) #9
  br label %91

91:                                               ; preds = %79, %89
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8
  ret void
}

declare void @_ZN4base10JoinStringENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEES5_(%"class.std::__1::basic_string"* sret, i64, %"class.base::BasicStringPiece"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE15sort_and_uniqueENS3_11__wrap_iterIPS6_EESH_(%"class.base::internal::flat_tree"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare", align 1
  %5 = ptrtoint %"class.base::BasicStringPiece"* %2 to i64
  %6 = getelementptr inbounds %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare", %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6)
  %7 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 4
  %10 = icmp sgt i64 %8, 2048
  br i1 %10, label %11, label %22

11:                                               ; preds = %3
  %12 = icmp slt i64 %9, 576460752303423487
  %13 = select i1 %12, i64 %9, i64 576460752303423487
  br label %14

14:                                               ; preds = %19, %11
  %15 = phi i64 [ %20, %19 ], [ %13, %11 ]
  %16 = shl i64 %15, 4
  %17 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %16, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %23

19:                                               ; preds = %14
  %20 = lshr i64 %15, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %14

22:                                               ; preds = %19, %3
  call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %2, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* nonnull dereferenceable(1) %4, i64 %9, %"class.base::BasicStringPiece"* null, i64 0) #8
  br label %25

23:                                               ; preds = %14
  %24 = bitcast i8* %17 to %"class.base::BasicStringPiece"*
  call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %2, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* nonnull dereferenceable(1) %4, i64 %9, %"class.base::BasicStringPiece"* nonnull %24, i64 %15) #8
  call void @_ZdlPv(i8* nonnull %17) #9
  br label %25

25:                                               ; preds = %22, %23
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6)
  %26 = call %"class.base::BasicStringPiece"* @_ZNSt3__16uniqueINS_11__wrap_iterIPN4base16BasicStringPieceIcNS_11char_traitsIcEEEEEENS2_8internal9NotFnImplINS9_9flat_treeIS6_NS2_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareEEEEET_SM_SM_T0_(%"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %2)
  %27 = icmp eq %"class.base::BasicStringPiece"* %26, %2
  br i1 %27, label %40, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = bitcast %"class.base::BasicStringPiece"** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %31, %5
  %33 = ashr exact i64 %32, 4
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %28
  %36 = bitcast %"class.base::BasicStringPiece"* %26 to i8*
  %37 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 %32, i1 false) #8
  br label %38

38:                                               ; preds = %35, %28
  %39 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %26, i64 %33
  store %"class.base::BasicStringPiece"* %39, %"class.base::BasicStringPiece"** %29, align 8
  br label %40

40:                                               ; preds = %25, %38
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.base::BasicStringPiece"* @_ZNSt3__16uniqueINS_11__wrap_iterIPN4base16BasicStringPieceIcNS_11char_traitsIcEEEEEENS2_8internal9NotFnImplINS9_9flat_treeIS6_NS2_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareEEEEET_SM_SM_T0_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %3, label %33, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %6 = icmp eq %"class.base::BasicStringPiece"* %5, %1
  br i1 %6, label %31, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  br label %10

10:                                               ; preds = %28, %7
  %11 = phi i8* [ %17, %28 ], [ %9, %7 ]
  %12 = phi %"class.base::BasicStringPiece"* [ %29, %28 ], [ %5, %7 ]
  %13 = phi %"class.base::BasicStringPiece"* [ %12, %28 ], [ %0, %7 ]
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 1, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp ugt i64 %15, %19
  %21 = select i1 %20, i64 %19, i64 %15
  %22 = tail call i32 @memcmp(i8* %11, i8* %17, i64 %21) #8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %10
  %25 = icmp ult i64 %15, %19
  br i1 %25, label %28, label %33

26:                                               ; preds = %10
  %27 = icmp sgt i32 %22, -1
  br i1 %27, label %33, label %28

28:                                               ; preds = %26, %24
  %29 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 1
  %30 = icmp eq %"class.base::BasicStringPiece"* %29, %1
  br i1 %30, label %31, label %10

31:                                               ; preds = %28, %4
  %32 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  br label %79

33:                                               ; preds = %24, %26, %2
  %34 = phi %"class.base::BasicStringPiece"* [ %0, %2 ], [ %13, %26 ], [ %13, %24 ]
  %35 = ptrtoint %"class.base::BasicStringPiece"* %34 to i64
  %36 = icmp eq %"class.base::BasicStringPiece"* %34, %1
  br i1 %36, label %79, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %34, i64 2
  %39 = icmp eq %"class.base::BasicStringPiece"* %38, %1
  br i1 %39, label %75, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %34, i64 1
  br label %42

42:                                               ; preds = %40, %68
  %43 = phi %"class.base::BasicStringPiece"* [ %72, %68 ], [ %34, %40 ]
  %44 = phi %"class.base::BasicStringPiece"* [ %70, %68 ], [ %38, %40 ]
  %45 = phi %"class.base::BasicStringPiece"* [ %44, %68 ], [ %41, %40 ]
  %46 = phi i64 [ %69, %68 ], [ %35, %40 ]
  %47 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %43, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %43, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %44, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %45, i64 1, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = icmp ugt i64 %50, %54
  %56 = select i1 %55, i64 %54, i64 %50
  %57 = tail call i32 @memcmp(i8* %48, i8* %52, i64 %56) #8
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %42
  %60 = icmp ult i64 %50, %54
  br i1 %60, label %63, label %68

61:                                               ; preds = %42
  %62 = icmp sgt i32 %57, -1
  br i1 %62, label %68, label %63

63:                                               ; preds = %59, %61
  %64 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %43, i64 1
  %65 = ptrtoint %"class.base::BasicStringPiece"* %64 to i64
  %66 = bitcast %"class.base::BasicStringPiece"* %64 to i8*
  %67 = bitcast %"class.base::BasicStringPiece"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 16, i1 false)
  br label %68

68:                                               ; preds = %59, %63, %61
  %69 = phi i64 [ %46, %61 ], [ %65, %63 ], [ %46, %59 ]
  %70 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %44, i64 1
  %71 = icmp eq %"class.base::BasicStringPiece"* %70, %1
  %72 = inttoptr i64 %69 to %"class.base::BasicStringPiece"*
  br i1 %71, label %73, label %42

73:                                               ; preds = %68
  %74 = inttoptr i64 %69 to %"class.base::BasicStringPiece"*
  br label %75

75:                                               ; preds = %73, %37
  %76 = phi %"class.base::BasicStringPiece"* [ %34, %37 ], [ %74, %73 ]
  %77 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %76, i64 1
  %78 = ptrtoint %"class.base::BasicStringPiece"* %77 to i64
  br label %79

79:                                               ; preds = %33, %31, %75
  %80 = phi i64 [ %78, %75 ], [ %35, %33 ], [ %32, %31 ]
  %81 = inttoptr i64 %80 to %"class.base::BasicStringPiece"*
  ret %"class.base::BasicStringPiece"* %81
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, %"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 comdat {
  switch i64 %3, label %30 [
    i64 0, label %207
    i64 1, label %207
    i64 2, label %7
  ]

7:                                                ; preds = %6
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %8, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %12, %16
  %18 = select i1 %17, i64 %16, i64 %12
  %19 = tail call i32 @memcmp(i8* %10, i8* %14, i64 %18) #8
  %20 = icmp eq i32 %19, 0
  %21 = ptrtoint i8* %14 to i64
  br i1 %20, label %22, label %24

22:                                               ; preds = %7
  %23 = icmp ult i64 %12, %16
  br i1 %23, label %26, label %207

24:                                               ; preds = %7
  %25 = icmp slt i32 %19, 0
  br i1 %25, label %26, label %207

26:                                               ; preds = %22, %24
  %27 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  %28 = bitcast %"class.base::BasicStringPiece"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 16, i1 false) #8
  %29 = bitcast %"class.base::BasicStringPiece"* %8 to i64*
  store i64 %21, i64* %29, align 8
  store i64 %16, i64* %11, align 8
  br label %207

30:                                               ; preds = %6
  %31 = icmp slt i64 %3, 129
  br i1 %31, label %32, label %70

32:                                               ; preds = %30
  %33 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %33, label %207, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %36 = icmp eq %"class.base::BasicStringPiece"* %35, %1
  br i1 %36, label %207, label %37

37:                                               ; preds = %34, %60
  %38 = phi %"class.base::BasicStringPiece"* [ %64, %60 ], [ %35, %34 ]
  %39 = phi %"class.base::BasicStringPiece"* [ %38, %60 ], [ %0, %34 ]
  %40 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %38, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %39, i64 1, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq %"class.base::BasicStringPiece"* %38, %0
  br i1 %44, label %60, label %45

45:                                               ; preds = %37, %66
  %46 = phi %"class.base::BasicStringPiece"* [ %47, %66 ], [ %38, %37 ]
  %47 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %46, i64 -1
  %48 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %47, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %46, i64 -1, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp ugt i64 %43, %51
  %53 = select i1 %52, i64 %51, i64 %43
  %54 = tail call i32 @memcmp(i8* %41, i8* %49, i64 %53) #8
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %45
  %57 = icmp ult i64 %43, %51
  br i1 %57, label %66, label %60

58:                                               ; preds = %45
  %59 = icmp slt i32 %54, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %66, %58, %56, %37
  %61 = phi %"class.base::BasicStringPiece"* [ %0, %37 ], [ %46, %58 ], [ %46, %56 ], [ %0, %66 ]
  %62 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %61, i64 0, i32 0
  store i8* %41, i8** %62, align 8
  %63 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %61, i64 0, i32 1
  store i64 %43, i64* %63, align 8
  %64 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %38, i64 1
  %65 = icmp eq %"class.base::BasicStringPiece"* %64, %1
  br i1 %65, label %207, label %37

66:                                               ; preds = %58, %56
  %67 = bitcast %"class.base::BasicStringPiece"* %46 to i8*
  %68 = bitcast %"class.base::BasicStringPiece"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #8
  %69 = icmp eq %"class.base::BasicStringPiece"* %47, %0
  br i1 %69, label %60, label %45

70:                                               ; preds = %30
  %71 = lshr i64 %3, 1
  %72 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 %71
  %73 = icmp sgt i64 %3, %5
  br i1 %73, label %205, label %74

74:                                               ; preds = %70
  tail call void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %72, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %71, %"class.base::BasicStringPiece"* %4)
  %75 = sub nsw i64 %3, %71
  %76 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %71
  tail call void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE(%"class.base::BasicStringPiece"* %72, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %75, %"class.base::BasicStringPiece"* %76)
  %77 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %3
  br label %104

78:                                               ; preds = %180
  %79 = icmp eq %"class.base::BasicStringPiece"* %181, %77
  br i1 %79, label %207, label %80

80:                                               ; preds = %78
  %81 = ptrtoint %"class.base::BasicStringPiece"* %181 to i64
  %82 = add i64 %3, -1
  %83 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %82, i32 0
  %84 = ptrtoint i8** %83 to i64
  %85 = sub i64 %84, %81
  %86 = lshr i64 %85, 4
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 3
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %100, label %90

90:                                               ; preds = %80, %90
  %91 = phi %"class.base::BasicStringPiece"* [ %96, %90 ], [ %181, %80 ]
  %92 = phi %"class.base::BasicStringPiece"* [ %97, %90 ], [ %183, %80 ]
  %93 = phi i64 [ %98, %90 ], [ %88, %80 ]
  %94 = bitcast %"class.base::BasicStringPiece"* %92 to i8*
  %95 = bitcast %"class.base::BasicStringPiece"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 16, i1 false) #8
  %96 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %91, i64 1
  %97 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %92, i64 1
  %98 = add i64 %93, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %90, !llvm.loop !4

100:                                              ; preds = %90, %80
  %101 = phi %"class.base::BasicStringPiece"* [ %181, %80 ], [ %96, %90 ]
  %102 = phi %"class.base::BasicStringPiece"* [ %183, %80 ], [ %97, %90 ]
  %103 = icmp ult i64 %85, 48
  br i1 %103, label %207, label %185

104:                                              ; preds = %74, %180
  %105 = phi %"class.base::BasicStringPiece"* [ %182, %180 ], [ %4, %74 ]
  %106 = phi %"class.base::BasicStringPiece"* [ %181, %180 ], [ %76, %74 ]
  %107 = phi %"class.base::BasicStringPiece"* [ %183, %180 ], [ %0, %74 ]
  %108 = icmp eq %"class.base::BasicStringPiece"* %106, %77
  br i1 %108, label %109, label %155

109:                                              ; preds = %104
  %110 = icmp eq %"class.base::BasicStringPiece"* %105, %76
  br i1 %110, label %207, label %111

111:                                              ; preds = %109
  %112 = ptrtoint %"class.base::BasicStringPiece"* %105 to i64
  %113 = add nsw i64 %71, -1
  %114 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %113, i32 0
  %115 = ptrtoint i8** %114 to i64
  %116 = sub i64 %115, %112
  %117 = lshr i64 %116, 4
  %118 = add nuw nsw i64 %117, 1
  %119 = and i64 %118, 3
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %131, label %121

121:                                              ; preds = %111, %121
  %122 = phi %"class.base::BasicStringPiece"* [ %127, %121 ], [ %105, %111 ]
  %123 = phi %"class.base::BasicStringPiece"* [ %128, %121 ], [ %107, %111 ]
  %124 = phi i64 [ %129, %121 ], [ %119, %111 ]
  %125 = bitcast %"class.base::BasicStringPiece"* %123 to i8*
  %126 = bitcast %"class.base::BasicStringPiece"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false) #8
  %127 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %122, i64 1
  %128 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %123, i64 1
  %129 = add i64 %124, -1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %121, !llvm.loop !5

131:                                              ; preds = %121, %111
  %132 = phi %"class.base::BasicStringPiece"* [ %105, %111 ], [ %127, %121 ]
  %133 = phi %"class.base::BasicStringPiece"* [ %107, %111 ], [ %128, %121 ]
  %134 = icmp ult i64 %116, 48
  br i1 %134, label %207, label %135

135:                                              ; preds = %131, %135
  %136 = phi %"class.base::BasicStringPiece"* [ %152, %135 ], [ %132, %131 ]
  %137 = phi %"class.base::BasicStringPiece"* [ %153, %135 ], [ %133, %131 ]
  %138 = bitcast %"class.base::BasicStringPiece"* %137 to i8*
  %139 = bitcast %"class.base::BasicStringPiece"* %136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 16, i1 false) #8
  %140 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 1
  %141 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 1
  %142 = bitcast %"class.base::BasicStringPiece"* %141 to i8*
  %143 = bitcast %"class.base::BasicStringPiece"* %140 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %142, i8* align 8 %143, i64 16, i1 false) #8
  %144 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 2
  %145 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 2
  %146 = bitcast %"class.base::BasicStringPiece"* %145 to i8*
  %147 = bitcast %"class.base::BasicStringPiece"* %144 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* align 8 %147, i64 16, i1 false) #8
  %148 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 3
  %149 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 3
  %150 = bitcast %"class.base::BasicStringPiece"* %149 to i8*
  %151 = bitcast %"class.base::BasicStringPiece"* %148 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 16, i1 false) #8
  %152 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 4
  %153 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 4
  %154 = icmp eq %"class.base::BasicStringPiece"* %152, %76
  br i1 %154, label %207, label %135

155:                                              ; preds = %104
  %156 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %106, i64 0, i32 0
  %157 = load i8*, i8** %156, align 8
  %158 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %106, i64 0, i32 1
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %105, i64 0, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %105, i64 0, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = icmp ugt i64 %159, %163
  %165 = select i1 %164, i64 %163, i64 %159
  %166 = tail call i32 @memcmp(i8* %157, i8* %161, i64 %165) #8
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %170

168:                                              ; preds = %155
  %169 = icmp ult i64 %159, %163
  br i1 %169, label %172, label %176

170:                                              ; preds = %155
  %171 = icmp slt i32 %166, 0
  br i1 %171, label %172, label %176

172:                                              ; preds = %170, %168
  %173 = bitcast %"class.base::BasicStringPiece"* %107 to i8*
  %174 = bitcast %"class.base::BasicStringPiece"* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %173, i8* align 8 %174, i64 16, i1 false) #8
  %175 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %106, i64 1
  br label %180

176:                                              ; preds = %170, %168
  %177 = bitcast %"class.base::BasicStringPiece"* %107 to i8*
  %178 = bitcast %"class.base::BasicStringPiece"* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 16, i1 false) #8
  %179 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %105, i64 1
  br label %180

180:                                              ; preds = %176, %172
  %181 = phi %"class.base::BasicStringPiece"* [ %175, %172 ], [ %106, %176 ]
  %182 = phi %"class.base::BasicStringPiece"* [ %105, %172 ], [ %179, %176 ]
  %183 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %107, i64 1
  %184 = icmp eq %"class.base::BasicStringPiece"* %182, %76
  br i1 %184, label %78, label %104

185:                                              ; preds = %100, %185
  %186 = phi %"class.base::BasicStringPiece"* [ %202, %185 ], [ %101, %100 ]
  %187 = phi %"class.base::BasicStringPiece"* [ %203, %185 ], [ %102, %100 ]
  %188 = bitcast %"class.base::BasicStringPiece"* %187 to i8*
  %189 = bitcast %"class.base::BasicStringPiece"* %186 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %188, i8* align 8 %189, i64 16, i1 false) #8
  %190 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 1
  %191 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 1
  %192 = bitcast %"class.base::BasicStringPiece"* %191 to i8*
  %193 = bitcast %"class.base::BasicStringPiece"* %190 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %192, i8* align 8 %193, i64 16, i1 false) #8
  %194 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 2
  %195 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 2
  %196 = bitcast %"class.base::BasicStringPiece"* %195 to i8*
  %197 = bitcast %"class.base::BasicStringPiece"* %194 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %196, i8* align 8 %197, i64 16, i1 false) #8
  %198 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 3
  %199 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 3
  %200 = bitcast %"class.base::BasicStringPiece"* %199 to i8*
  %201 = bitcast %"class.base::BasicStringPiece"* %198 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %200, i8* align 8 %201, i64 16, i1 false) #8
  %202 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %186, i64 4
  %203 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %187, i64 4
  %204 = icmp eq %"class.base::BasicStringPiece"* %202, %77
  br i1 %204, label %207, label %185

205:                                              ; preds = %70
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %72, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %71, %"class.base::BasicStringPiece"* %4, i64 %5)
  %206 = sub nsw i64 %3, %71
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %72, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %206, %"class.base::BasicStringPiece"* %4, i64 %5)
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %72, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %71, i64 %206, %"class.base::BasicStringPiece"* %4, i64 %5)
  ret void

207:                                              ; preds = %100, %185, %131, %135, %60, %22, %109, %78, %34, %32, %24, %26, %6, %6
  ret void
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeE(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat {
  switch i64 %3, label %41 [
    i64 0, label %180
    i64 1, label %6
    i64 2, label %9
  ]

6:                                                ; preds = %5
  %7 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  %8 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false)
  br label %180

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %10, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ugt i64 %14, %18
  %20 = select i1 %19, i64 %18, i64 %14
  %21 = tail call i32 @memcmp(i8* %12, i8* %16, i64 %20) #8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %9
  %24 = icmp ult i64 %14, %18
  %25 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  br i1 %24, label %29, label %35

26:                                               ; preds = %9
  %27 = icmp slt i32 %21, 0
  %28 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  br i1 %27, label %29, label %35

29:                                               ; preds = %23, %26
  %30 = phi i8* [ %28, %26 ], [ %25, %23 ]
  %31 = bitcast %"class.base::BasicStringPiece"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 16, i1 false)
  %32 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 1
  %33 = bitcast %"class.base::BasicStringPiece"* %32 to i8*
  %34 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 16, i1 false)
  br label %180

35:                                               ; preds = %23, %26
  %36 = phi i8* [ %28, %26 ], [ %25, %23 ]
  %37 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 16, i1 false)
  %38 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 1
  %39 = bitcast %"class.base::BasicStringPiece"* %38 to i8*
  %40 = bitcast %"class.base::BasicStringPiece"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 16, i1 false)
  br label %180

41:                                               ; preds = %5
  %42 = icmp slt i64 %3, 9
  br i1 %42, label %43, label %44

43:                                               ; preds = %41
  tail call void @_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_PNS_15iterator_traitsISL_E10value_typeET_(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %4, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2)
  br label %180

44:                                               ; preds = %41
  %45 = lshr i64 %3, 1
  %46 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 %45
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %46, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %45, %"class.base::BasicStringPiece"* %4, i64 %45)
  %47 = sub nsw i64 %3, %45
  %48 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 %45
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_T_NS_15iterator_traitsISL_E15difference_typeEPNSO_10value_typeEl(%"class.base::BasicStringPiece"* %46, %"class.base::BasicStringPiece"* %1, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %2, i64 %47, %"class.base::BasicStringPiece"* %48, i64 %47)
  %49 = icmp eq i64 %45, 0
  br i1 %49, label %50, label %97

50:                                               ; preds = %175, %44
  %51 = phi %"class.base::BasicStringPiece"* [ %46, %44 ], [ %176, %175 ]
  %52 = phi %"class.base::BasicStringPiece"* [ %4, %44 ], [ %178, %175 ]
  %53 = icmp eq %"class.base::BasicStringPiece"* %51, %1
  br i1 %53, label %180, label %54

54:                                               ; preds = %50
  %55 = ptrtoint %"class.base::BasicStringPiece"* %51 to i64
  %56 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 0
  %57 = ptrtoint i8** %56 to i64
  %58 = sub i64 %57, %55
  %59 = lshr i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %54, %63
  %64 = phi %"class.base::BasicStringPiece"* [ %70, %63 ], [ %52, %54 ]
  %65 = phi %"class.base::BasicStringPiece"* [ %69, %63 ], [ %51, %54 ]
  %66 = phi i64 [ %71, %63 ], [ %61, %54 ]
  %67 = bitcast %"class.base::BasicStringPiece"* %64 to i8*
  %68 = bitcast %"class.base::BasicStringPiece"* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #8
  %69 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %65, i64 1
  %70 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %64, i64 1
  %71 = add i64 %66, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !6

73:                                               ; preds = %63, %54
  %74 = phi %"class.base::BasicStringPiece"* [ %52, %54 ], [ %70, %63 ]
  %75 = phi %"class.base::BasicStringPiece"* [ %51, %54 ], [ %69, %63 ]
  %76 = icmp ult i64 %58, 48
  br i1 %76, label %180, label %77

77:                                               ; preds = %73, %77
  %78 = phi %"class.base::BasicStringPiece"* [ %95, %77 ], [ %74, %73 ]
  %79 = phi %"class.base::BasicStringPiece"* [ %94, %77 ], [ %75, %73 ]
  %80 = bitcast %"class.base::BasicStringPiece"* %78 to i8*
  %81 = bitcast %"class.base::BasicStringPiece"* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false) #8
  %82 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 1
  %83 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 1
  %84 = bitcast %"class.base::BasicStringPiece"* %83 to i8*
  %85 = bitcast %"class.base::BasicStringPiece"* %82 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 16, i1 false) #8
  %86 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 2
  %87 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 2
  %88 = bitcast %"class.base::BasicStringPiece"* %87 to i8*
  %89 = bitcast %"class.base::BasicStringPiece"* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 16, i1 false) #8
  %90 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 3
  %91 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 3
  %92 = bitcast %"class.base::BasicStringPiece"* %91 to i8*
  %93 = bitcast %"class.base::BasicStringPiece"* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 16, i1 false) #8
  %94 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %79, i64 4
  %95 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %78, i64 4
  %96 = icmp eq %"class.base::BasicStringPiece"* %94, %1
  br i1 %96, label %180, label %77

97:                                               ; preds = %44, %175
  %98 = phi %"class.base::BasicStringPiece"* [ %178, %175 ], [ %4, %44 ]
  %99 = phi %"class.base::BasicStringPiece"* [ %177, %175 ], [ %0, %44 ]
  %100 = phi %"class.base::BasicStringPiece"* [ %176, %175 ], [ %46, %44 ]
  %101 = icmp eq %"class.base::BasicStringPiece"* %100, %1
  br i1 %101, label %102, label %148

102:                                              ; preds = %97
  %103 = icmp eq %"class.base::BasicStringPiece"* %99, %46
  br i1 %103, label %180, label %104

104:                                              ; preds = %102
  %105 = ptrtoint %"class.base::BasicStringPiece"* %99 to i64
  %106 = add nsw i64 %45, -1
  %107 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 %106, i32 0
  %108 = ptrtoint i8** %107 to i64
  %109 = sub i64 %108, %105
  %110 = lshr i64 %109, 4
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 3
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %124, label %114

114:                                              ; preds = %104, %114
  %115 = phi %"class.base::BasicStringPiece"* [ %121, %114 ], [ %98, %104 ]
  %116 = phi %"class.base::BasicStringPiece"* [ %120, %114 ], [ %99, %104 ]
  %117 = phi i64 [ %122, %114 ], [ %112, %104 ]
  %118 = bitcast %"class.base::BasicStringPiece"* %115 to i8*
  %119 = bitcast %"class.base::BasicStringPiece"* %116 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 16, i1 false) #8
  %120 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %116, i64 1
  %121 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %115, i64 1
  %122 = add i64 %117, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %114, !llvm.loop !7

124:                                              ; preds = %114, %104
  %125 = phi %"class.base::BasicStringPiece"* [ %98, %104 ], [ %121, %114 ]
  %126 = phi %"class.base::BasicStringPiece"* [ %99, %104 ], [ %120, %114 ]
  %127 = icmp ult i64 %109, 48
  br i1 %127, label %180, label %128

128:                                              ; preds = %124, %128
  %129 = phi %"class.base::BasicStringPiece"* [ %146, %128 ], [ %125, %124 ]
  %130 = phi %"class.base::BasicStringPiece"* [ %145, %128 ], [ %126, %124 ]
  %131 = bitcast %"class.base::BasicStringPiece"* %129 to i8*
  %132 = bitcast %"class.base::BasicStringPiece"* %130 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %131, i8* align 8 %132, i64 16, i1 false) #8
  %133 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 1
  %134 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 1
  %135 = bitcast %"class.base::BasicStringPiece"* %134 to i8*
  %136 = bitcast %"class.base::BasicStringPiece"* %133 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %136, i64 16, i1 false) #8
  %137 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 2
  %138 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 2
  %139 = bitcast %"class.base::BasicStringPiece"* %138 to i8*
  %140 = bitcast %"class.base::BasicStringPiece"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 16, i1 false) #8
  %141 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 3
  %142 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 3
  %143 = bitcast %"class.base::BasicStringPiece"* %142 to i8*
  %144 = bitcast %"class.base::BasicStringPiece"* %141 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %144, i64 16, i1 false) #8
  %145 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %130, i64 4
  %146 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %129, i64 4
  %147 = icmp eq %"class.base::BasicStringPiece"* %145, %46
  br i1 %147, label %180, label %128

148:                                              ; preds = %97
  %149 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 0, i32 0
  %150 = load i8*, i8** %149, align 8
  %151 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 0, i32 1
  %152 = load i64, i64* %151, align 8
  %153 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 0, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = icmp ugt i64 %152, %156
  %158 = select i1 %157, i64 %156, i64 %152
  %159 = tail call i32 @memcmp(i8* %150, i8* %154, i64 %158) #8
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %164

161:                                              ; preds = %148
  %162 = icmp ult i64 %152, %156
  %163 = bitcast %"class.base::BasicStringPiece"* %98 to i8*
  br i1 %162, label %167, label %171

164:                                              ; preds = %148
  %165 = icmp slt i32 %159, 0
  %166 = bitcast %"class.base::BasicStringPiece"* %98 to i8*
  br i1 %165, label %167, label %171

167:                                              ; preds = %164, %161
  %168 = phi i8* [ %166, %164 ], [ %163, %161 ]
  %169 = bitcast %"class.base::BasicStringPiece"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %168, i8* align 8 %169, i64 16, i1 false) #8
  %170 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 1
  br label %175

171:                                              ; preds = %164, %161
  %172 = phi i8* [ %166, %164 ], [ %163, %161 ]
  %173 = bitcast %"class.base::BasicStringPiece"* %99 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 16, i1 false) #8
  %174 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 1
  br label %175

175:                                              ; preds = %171, %167
  %176 = phi %"class.base::BasicStringPiece"* [ %170, %167 ], [ %100, %171 ]
  %177 = phi %"class.base::BasicStringPiece"* [ %99, %167 ], [ %174, %171 ]
  %178 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %98, i64 1
  %179 = icmp eq %"class.base::BasicStringPiece"* %177, %46
  br i1 %179, label %50, label %97

180:                                              ; preds = %124, %128, %73, %77, %102, %50, %29, %35, %5, %43, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, i64, %"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 comdat {
  %9 = icmp eq i64 %5, 0
  br i1 %9, label %319, label %10

10:                                               ; preds = %8
  %11 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  %12 = ptrtoint %"class.base::BasicStringPiece"* %0 to i64
  br label %13

13:                                               ; preds = %10, %312
  %14 = phi %"class.base::BasicStringPiece"* [ %317, %312 ], [ %2, %10 ]
  %15 = phi i64 [ %316, %312 ], [ %4, %10 ]
  %16 = phi i64 [ %315, %312 ], [ %5, %10 ]
  %17 = phi i64 [ %314, %312 ], [ %11, %10 ]
  %18 = phi i64 [ %313, %312 ], [ %12, %10 ]
  %19 = icmp sgt i64 %15, %7
  %20 = icmp sgt i64 %16, %7
  %21 = and i1 %20, %19
  br i1 %21, label %22, label %30

22:                                               ; preds = %13
  %23 = icmp eq i64 %15, 0
  br i1 %23, label %319, label %24

24:                                               ; preds = %22
  %25 = inttoptr i64 %17 to %"class.base::BasicStringPiece"*
  %26 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 0, i32 1
  %29 = load i64, i64* %28, align 8
  br label %33

30:                                               ; preds = %13
  %31 = inttoptr i64 %18 to %"class.base::BasicStringPiece"*
  %32 = inttoptr i64 %17 to %"class.base::BasicStringPiece"*
  tail call void @_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeE(%"class.base::BasicStringPiece"* %31, %"class.base::BasicStringPiece"* %32, %"class.base::BasicStringPiece"* %14, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %3, i64 %15, i64 %16, %"class.base::BasicStringPiece"* %6)
  br label %319

33:                                               ; preds = %24, %49
  %34 = phi i64 [ %15, %24 ], [ %52, %49 ]
  %35 = phi i64 [ %18, %24 ], [ %51, %49 ]
  %36 = inttoptr i64 %35 to %"class.base::BasicStringPiece"*
  %37 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = icmp ugt i64 %29, %40
  %42 = select i1 %41, i64 %40, i64 %29
  %43 = tail call i32 @memcmp(i8* %27, i8* %38, i64 %42) #8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %33
  %46 = icmp ult i64 %29, %40
  br i1 %46, label %54, label %49

47:                                               ; preds = %33
  %48 = icmp slt i32 %43, 0
  br i1 %48, label %54, label %49

49:                                               ; preds = %45, %47
  %50 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 1
  %51 = ptrtoint %"class.base::BasicStringPiece"* %50 to i64
  %52 = add nsw i64 %34, -1
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %319, label %33

54:                                               ; preds = %45, %47
  %55 = inttoptr i64 %35 to %"class.base::BasicStringPiece"*
  %56 = icmp slt i64 %34, %16
  br i1 %56, label %57, label %97

57:                                               ; preds = %54
  %58 = sdiv i64 %16, 2
  %59 = sub i64 %17, %35
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %92, label %61

61:                                               ; preds = %57
  %62 = ashr exact i64 %59, 4
  %63 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %58, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %58, i32 1
  %66 = load i64, i64* %65, align 8
  br label %67

67:                                               ; preds = %88, %61
  %68 = phi %"class.base::BasicStringPiece"* [ %55, %61 ], [ %90, %88 ]
  %69 = phi i64 [ %62, %61 ], [ %89, %88 ]
  %70 = lshr i64 %69, 1
  %71 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 %70
  %72 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %71, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 %70, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = icmp ugt i64 %66, %75
  %77 = select i1 %76, i64 %75, i64 %66
  %78 = tail call i32 @memcmp(i8* %64, i8* %73, i64 %77) #8
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %67
  %81 = icmp ult i64 %66, %75
  br i1 %81, label %88, label %84

82:                                               ; preds = %67
  %83 = icmp slt i32 %78, 0
  br i1 %83, label %88, label %84

84:                                               ; preds = %82, %80
  %85 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %71, i64 1
  %86 = xor i64 %70, -1
  %87 = add i64 %69, %86
  br label %88

88:                                               ; preds = %84, %82, %80
  %89 = phi i64 [ %87, %84 ], [ %70, %82 ], [ %70, %80 ]
  %90 = phi %"class.base::BasicStringPiece"* [ %85, %84 ], [ %68, %82 ], [ %68, %80 ]
  %91 = icmp eq i64 %89, 0
  br i1 %91, label %92, label %67

92:                                               ; preds = %88, %57
  %93 = phi %"class.base::BasicStringPiece"* [ %55, %57 ], [ %90, %88 ]
  %94 = ptrtoint %"class.base::BasicStringPiece"* %93 to i64
  %95 = sub i64 %94, %35
  %96 = ashr exact i64 %95, 4
  br label %152

97:                                               ; preds = %54
  %98 = icmp eq i64 %34, 1
  br i1 %98, label %99, label %107

99:                                               ; preds = %97
  %100 = inttoptr i64 %17 to %"class.base::BasicStringPiece"*
  %101 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 0, i32 1
  %102 = inttoptr i64 %35 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %35 to i8*
  %105 = inttoptr i64 %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 16, i1 false) #8
  %106 = inttoptr i64 %17 to i64*
  store i64 %103, i64* %106, align 8
  store i64 %40, i64* %101, align 8
  br label %319

107:                                              ; preds = %97
  %108 = sdiv i64 %34, 2
  %109 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 %108
  %110 = ptrtoint %"class.base::BasicStringPiece"* %109 to i64
  %111 = ptrtoint %"class.base::BasicStringPiece"* %14 to i64
  %112 = sub i64 %111, %17
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %146, label %114

114:                                              ; preds = %107
  %115 = ashr exact i64 %112, 4
  %116 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 0, i32 0
  %117 = load i8*, i8** %116, align 8
  %118 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 %108, i32 1
  %119 = load i64, i64* %118, align 8
  br label %120

120:                                              ; preds = %142, %114
  %121 = phi i64 [ 0, %114 ], [ %144, %142 ]
  %122 = phi i64 [ %115, %114 ], [ %143, %142 ]
  %123 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %121
  %124 = lshr i64 %122, 1
  %125 = add nsw i64 %124, %121
  %126 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %125, i32 0
  %127 = load i8*, i8** %126, align 8
  %128 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %123, i64 %124, i32 1
  %129 = load i64, i64* %128, align 8
  %130 = icmp ugt i64 %129, %119
  %131 = select i1 %130, i64 %119, i64 %129
  %132 = tail call i32 @memcmp(i8* %127, i8* %117, i64 %131) #8
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %136

134:                                              ; preds = %120
  %135 = icmp ult i64 %129, %119
  br i1 %135, label %138, label %142

136:                                              ; preds = %120
  %137 = icmp slt i32 %132, 0
  br i1 %137, label %138, label %142

138:                                              ; preds = %136, %134
  %139 = add nsw i64 %125, 1
  %140 = xor i64 %124, -1
  %141 = add i64 %122, %140
  br label %142

142:                                              ; preds = %138, %136, %134
  %143 = phi i64 [ %141, %138 ], [ %124, %136 ], [ %124, %134 ]
  %144 = phi i64 [ %139, %138 ], [ %121, %136 ], [ %121, %134 ]
  %145 = icmp eq i64 %143, 0
  br i1 %145, label %146, label %120

146:                                              ; preds = %142, %107
  %147 = phi i64 [ 0, %107 ], [ %144, %142 ]
  %148 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %147
  %149 = ptrtoint %"class.base::BasicStringPiece"* %148 to i64
  %150 = sub i64 %149, %17
  %151 = ashr exact i64 %150, 4
  br label %152

152:                                              ; preds = %146, %92
  %153 = phi i64 [ %94, %92 ], [ %110, %146 ]
  %154 = phi i64 [ %58, %92 ], [ %147, %146 ]
  %155 = phi i64 [ %58, %92 ], [ %151, %146 ]
  %156 = phi i64 [ %96, %92 ], [ %108, %146 ]
  %157 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 %154
  %158 = ptrtoint %"class.base::BasicStringPiece"* %157 to i64
  %159 = sub nsw i64 %34, %156
  %160 = sub nsw i64 %16, %155
  %161 = inttoptr i64 %153 to %"class.base::BasicStringPiece"*
  %162 = icmp eq %"class.base::BasicStringPiece"* %161, %25
  br i1 %162, label %304, label %163

163:                                              ; preds = %152
  %164 = icmp eq i64 %154, 0
  br i1 %164, label %304, label %165

165:                                              ; preds = %163
  %166 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 1
  %167 = icmp eq %"class.base::BasicStringPiece"* %166, %25
  br i1 %167, label %168, label %183

168:                                              ; preds = %165
  %169 = inttoptr i64 %153 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 0, i32 1
  %172 = load i64, i64* %171, align 8
  %173 = sub i64 %158, %17
  %174 = ashr exact i64 %173, 4
  %175 = icmp eq i64 %173, 0
  br i1 %175, label %179, label %176

176:                                              ; preds = %168
  %177 = inttoptr i64 %153 to i8*
  %178 = inttoptr i64 %17 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 %173, i1 false) #8
  br label %179

179:                                              ; preds = %176, %168
  %180 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %174
  %181 = bitcast %"class.base::BasicStringPiece"* %180 to i64*
  store i64 %170, i64* %181, align 8
  %182 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %174, i32 1
  store i64 %172, i64* %182, align 8
  br label %304

183:                                              ; preds = %165
  %184 = icmp eq i64 %154, 1
  br i1 %184, label %185, label %204

185:                                              ; preds = %183
  %186 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %157, i64 -1
  %187 = bitcast %"class.base::BasicStringPiece"* %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %157, i64 -1, i32 1
  %190 = load i64, i64* %189, align 8
  %191 = ptrtoint %"class.base::BasicStringPiece"* %186 to i64
  %192 = sub i64 %191, %153
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %200, label %194

194:                                              ; preds = %185
  %195 = ashr exact i64 %192, 4
  %196 = sub nsw i64 0, %195
  %197 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %157, i64 %196
  %198 = bitcast %"class.base::BasicStringPiece"* %197 to i8*
  %199 = inttoptr i64 %153 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %198, i8* align 8 %199, i64 %192, i1 false) #8
  br label %200

200:                                              ; preds = %194, %185
  %201 = phi %"class.base::BasicStringPiece"* [ %197, %194 ], [ %157, %185 ]
  %202 = inttoptr i64 %153 to i64*
  store i64 %188, i64* %202, align 8
  %203 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 0, i32 1
  store i64 %190, i64* %203, align 8
  br label %304

204:                                              ; preds = %183
  %205 = sub i64 %17, %153
  %206 = ashr exact i64 %205, 4
  %207 = sub i64 %158, %17
  %208 = ashr exact i64 %207, 4
  %209 = icmp eq i64 %206, %208
  br i1 %209, label %210, label %269

210:                                              ; preds = %204
  %211 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %25, i64 -1
  %212 = bitcast %"class.base::BasicStringPiece"* %211 to i8*
  %213 = sub i64 0, %153
  %214 = getelementptr i8, i8* %212, i64 %213
  %215 = ptrtoint i8* %214 to i64
  %216 = lshr i64 %215, 4
  %217 = add nuw nsw i64 %216, 1
  %218 = and i64 %217, 3
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %233, label %220

220:                                              ; preds = %210, %220
  %221 = phi %"class.base::BasicStringPiece"* [ %230, %220 ], [ %25, %210 ]
  %222 = phi %"class.base::BasicStringPiece"* [ %229, %220 ], [ %161, %210 ]
  %223 = phi i64 [ %231, %220 ], [ %218, %210 ]
  %224 = bitcast %"class.base::BasicStringPiece"* %222 to <2 x i64>*
  %225 = load <2 x i64>, <2 x i64>* %224, align 8
  %226 = bitcast %"class.base::BasicStringPiece"* %222 to i8*
  %227 = bitcast %"class.base::BasicStringPiece"* %221 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %226, i8* align 8 %227, i64 16, i1 false) #8
  %228 = bitcast %"class.base::BasicStringPiece"* %221 to <2 x i64>*
  store <2 x i64> %225, <2 x i64>* %228, align 8
  %229 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %222, i64 1
  %230 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %221, i64 1
  %231 = add i64 %223, -1
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %220, !llvm.loop !8

233:                                              ; preds = %220, %210
  %234 = phi %"class.base::BasicStringPiece"* [ %25, %210 ], [ %230, %220 ]
  %235 = phi %"class.base::BasicStringPiece"* [ %161, %210 ], [ %229, %220 ]
  %236 = icmp ult i8* %214, inttoptr (i64 48 to i8*)
  br i1 %236, label %304, label %237

237:                                              ; preds = %233, %237
  %238 = phi %"class.base::BasicStringPiece"* [ %267, %237 ], [ %234, %233 ]
  %239 = phi %"class.base::BasicStringPiece"* [ %266, %237 ], [ %235, %233 ]
  %240 = bitcast %"class.base::BasicStringPiece"* %239 to <2 x i64>*
  %241 = load <2 x i64>, <2 x i64>* %240, align 8
  %242 = bitcast %"class.base::BasicStringPiece"* %239 to i8*
  %243 = bitcast %"class.base::BasicStringPiece"* %238 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %242, i8* align 8 %243, i64 16, i1 false) #8
  %244 = bitcast %"class.base::BasicStringPiece"* %238 to <2 x i64>*
  store <2 x i64> %241, <2 x i64>* %244, align 8
  %245 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 1
  %246 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 1
  %247 = bitcast %"class.base::BasicStringPiece"* %245 to <2 x i64>*
  %248 = load <2 x i64>, <2 x i64>* %247, align 8
  %249 = bitcast %"class.base::BasicStringPiece"* %245 to i8*
  %250 = bitcast %"class.base::BasicStringPiece"* %246 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %249, i8* align 8 %250, i64 16, i1 false) #8
  %251 = bitcast %"class.base::BasicStringPiece"* %246 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %251, align 8
  %252 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 2
  %253 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 2
  %254 = bitcast %"class.base::BasicStringPiece"* %252 to <2 x i64>*
  %255 = load <2 x i64>, <2 x i64>* %254, align 8
  %256 = bitcast %"class.base::BasicStringPiece"* %252 to i8*
  %257 = bitcast %"class.base::BasicStringPiece"* %253 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %256, i8* align 8 %257, i64 16, i1 false) #8
  %258 = bitcast %"class.base::BasicStringPiece"* %253 to <2 x i64>*
  store <2 x i64> %255, <2 x i64>* %258, align 8
  %259 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 3
  %260 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 3
  %261 = bitcast %"class.base::BasicStringPiece"* %259 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 8
  %263 = bitcast %"class.base::BasicStringPiece"* %259 to i8*
  %264 = bitcast %"class.base::BasicStringPiece"* %260 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %263, i8* align 8 %264, i64 16, i1 false) #8
  %265 = bitcast %"class.base::BasicStringPiece"* %260 to <2 x i64>*
  store <2 x i64> %262, <2 x i64>* %265, align 8
  %266 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 4
  %267 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 4
  %268 = icmp eq %"class.base::BasicStringPiece"* %266, %25
  br i1 %268, label %304, label %237

269:                                              ; preds = %204, %269
  %270 = phi i64 [ %272, %269 ], [ %208, %204 ]
  %271 = phi i64 [ %270, %269 ], [ %206, %204 ]
  %272 = srem i64 %271, %270
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %269

274:                                              ; preds = %269
  %275 = icmp eq i64 %270, 0
  br i1 %275, label %278, label %276

276:                                              ; preds = %274
  %277 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %270
  br label %280

278:                                              ; preds = %301, %274
  %279 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %208
  br label %304

280:                                              ; preds = %301, %276
  %281 = phi %"class.base::BasicStringPiece"* [ %282, %301 ], [ %277, %276 ]
  %282 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %281, i64 -1
  %283 = ptrtoint %"class.base::BasicStringPiece"* %282 to i64
  %284 = bitcast %"class.base::BasicStringPiece"* %282 to <2 x i64>*
  %285 = load <2 x i64>, <2 x i64>* %284, align 8
  %286 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %282, i64 %206
  br label %287

287:                                              ; preds = %287, %280
  %288 = phi i64 [ %283, %280 ], [ %290, %287 ]
  %289 = phi %"class.base::BasicStringPiece"* [ %286, %280 ], [ %299, %287 ]
  %290 = ptrtoint %"class.base::BasicStringPiece"* %289 to i64
  %291 = inttoptr i64 %288 to i8*
  %292 = bitcast %"class.base::BasicStringPiece"* %289 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %291, i8* align 8 %292, i64 16, i1 false) #8
  %293 = sub i64 %158, %290
  %294 = ashr exact i64 %293, 4
  %295 = icmp slt i64 %206, %294
  %296 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %289, i64 %206
  %297 = sub nsw i64 %206, %294
  %298 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %161, i64 %297
  %299 = select i1 %295, %"class.base::BasicStringPiece"* %296, %"class.base::BasicStringPiece"* %298
  %300 = icmp eq %"class.base::BasicStringPiece"* %299, %282
  br i1 %300, label %301, label %287

301:                                              ; preds = %287
  %302 = bitcast %"class.base::BasicStringPiece"* %289 to <2 x i64>*
  store <2 x i64> %285, <2 x i64>* %302, align 8
  %303 = icmp eq %"class.base::BasicStringPiece"* %282, %161
  br i1 %303, label %278, label %280

304:                                              ; preds = %233, %237, %278, %200, %179, %152, %163
  %305 = phi %"class.base::BasicStringPiece"* [ %161, %163 ], [ %157, %152 ], [ %180, %179 ], [ %201, %200 ], [ %279, %278 ], [ %25, %237 ], [ %25, %233 ]
  %306 = add nsw i64 %156, %155
  %307 = add nsw i64 %159, %160
  %308 = icmp slt i64 %306, %307
  br i1 %308, label %309, label %311

309:                                              ; preds = %304
  %310 = ptrtoint %"class.base::BasicStringPiece"* %305 to i64
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"* %55, %"class.base::BasicStringPiece"* %161, %"class.base::BasicStringPiece"* %305, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %3, i64 %156, i64 %155, %"class.base::BasicStringPiece"* %6, i64 %7)
  br label %312

311:                                              ; preds = %304
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeEl(%"class.base::BasicStringPiece"* %305, %"class.base::BasicStringPiece"* %157, %"class.base::BasicStringPiece"* %14, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1) %3, i64 %159, i64 %160, %"class.base::BasicStringPiece"* %6, i64 %7)
  br label %312

312:                                              ; preds = %309, %311
  %313 = phi i64 [ %310, %309 ], [ %35, %311 ]
  %314 = phi i64 [ %158, %309 ], [ %153, %311 ]
  %315 = phi i64 [ %160, %309 ], [ %155, %311 ]
  %316 = phi i64 [ %159, %309 ], [ %156, %311 ]
  %317 = phi %"class.base::BasicStringPiece"* [ %14, %309 ], [ %305, %311 ]
  %318 = icmp eq i64 %315, 0
  br i1 %318, label %319, label %13

319:                                              ; preds = %312, %22, %49, %8, %99, %30
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_PNS_15iterator_traitsISL_E10value_typeET_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %5, label %67, label %6

6:                                                ; preds = %4
  %7 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  %8 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false)
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %10 = icmp eq %"class.base::BasicStringPiece"* %9, %1
  br i1 %10, label %67, label %11

11:                                               ; preds = %6, %62
  %12 = phi %"class.base::BasicStringPiece"* [ %65, %62 ], [ %9, %6 ]
  %13 = phi %"class.base::BasicStringPiece"* [ %15, %62 ], [ %2, %6 ]
  %14 = phi %"class.base::BasicStringPiece"* [ %12, %62 ], [ %0, %6 ]
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 1
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %14, i64 1, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %13, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp ugt i64 %19, %23
  %25 = select i1 %24, i64 %23, i64 %19
  %26 = tail call i32 @memcmp(i8* %17, i8* %21, i64 %25) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %11
  %29 = icmp ult i64 %19, %23
  %30 = bitcast %"class.base::BasicStringPiece"* %15 to i8*
  br i1 %29, label %34, label %62

31:                                               ; preds = %11
  %32 = icmp slt i32 %26, 0
  %33 = bitcast %"class.base::BasicStringPiece"* %15 to i8*
  br i1 %32, label %34, label %62

34:                                               ; preds = %28, %31
  %35 = phi i8* [ %33, %31 ], [ %30, %28 ]
  %36 = bitcast %"class.base::BasicStringPiece"* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false)
  %37 = icmp eq %"class.base::BasicStringPiece"* %13, %2
  br i1 %37, label %62, label %38

38:                                               ; preds = %34, %55
  %39 = phi %"class.base::BasicStringPiece"* [ %40, %55 ], [ %13, %34 ]
  %40 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %39, i64 -1
  %41 = load i8*, i8** %16, align 8
  %42 = load i64, i64* %18, align 8
  %43 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %40, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %39, i64 -1, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = icmp ugt i64 %42, %46
  %48 = select i1 %47, i64 %46, i64 %42
  %49 = tail call i32 @memcmp(i8* %41, i8* %44, i64 %48) #8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %38
  %52 = icmp ult i64 %42, %46
  br i1 %52, label %55, label %59

53:                                               ; preds = %38
  %54 = icmp slt i32 %49, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %51, %53
  %56 = bitcast %"class.base::BasicStringPiece"* %39 to i8*
  %57 = bitcast %"class.base::BasicStringPiece"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 16, i1 false)
  %58 = icmp eq %"class.base::BasicStringPiece"* %40, %2
  br i1 %58, label %59, label %38

59:                                               ; preds = %51, %55, %53
  %60 = phi %"class.base::BasicStringPiece"* [ %39, %53 ], [ %2, %55 ], [ %39, %51 ]
  %61 = bitcast %"class.base::BasicStringPiece"* %60 to i8*
  br label %62

62:                                               ; preds = %31, %28, %34, %59
  %63 = phi i8* [ %61, %59 ], [ %7, %34 ], [ %33, %31 ], [ %30, %28 ]
  %64 = bitcast %"class.base::BasicStringPiece"* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false)
  %65 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 1
  %66 = icmp eq %"class.base::BasicStringPiece"* %65, %1
  br i1 %66, label %67, label %11

67:                                               ; preds = %62, %6, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeINS1_16BasicStringPieceIcNS_11char_traitsIcEEEENS1_8identityENS_4lessIvEENS_6vectorIS7_NS_9allocatorIS7_EEEEE13value_compareENS_11__wrap_iterIPS7_EEEEvT0_SL_SL_T_NS_15iterator_traitsISL_E15difference_typeESP_PNSO_10value_typeE(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.base::internal::flat_tree<base::BasicStringPiece<char>, base::identity, std::__1::less<void>, std::__1::vector<base::BasicStringPiece<char>, std::__1::allocator<base::BasicStringPiece<char> > > >::value_compare"* dereferenceable(1), i64, i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat {
  %8 = ptrtoint %"class.base::BasicStringPiece"* %0 to i64
  %9 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  %10 = ptrtoint %"class.base::BasicStringPiece"* %6 to i64
  %11 = icmp sgt i64 %4, %5
  br i1 %11, label %37, label %12

12:                                               ; preds = %7
  %13 = icmp eq %"class.base::BasicStringPiece"* %0, %1
  br i1 %13, label %227, label %14

14:                                               ; preds = %12
  %15 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 0
  %16 = ptrtoint i8** %15 to i64
  %17 = sub i64 %16, %8
  %18 = lshr i64 %17, 4
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 3
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %14, %22
  %23 = phi %"class.base::BasicStringPiece"* [ %29, %22 ], [ %6, %14 ]
  %24 = phi %"class.base::BasicStringPiece"* [ %28, %22 ], [ %0, %14 ]
  %25 = phi i64 [ %30, %22 ], [ %20, %14 ]
  %26 = bitcast %"class.base::BasicStringPiece"* %23 to i8*
  %27 = bitcast %"class.base::BasicStringPiece"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false)
  %28 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %24, i64 1
  %29 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %23, i64 1
  %30 = add i64 %25, -1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %22, !llvm.loop !9

32:                                               ; preds = %22, %14
  %33 = phi %"class.base::BasicStringPiece"* [ undef, %14 ], [ %29, %22 ]
  %34 = phi %"class.base::BasicStringPiece"* [ %6, %14 ], [ %29, %22 ]
  %35 = phi %"class.base::BasicStringPiece"* [ %0, %14 ], [ %28, %22 ]
  %36 = icmp ult i64 %17, 48
  br i1 %36, label %62, label %108

37:                                               ; preds = %7
  %38 = icmp eq %"class.base::BasicStringPiece"* %1, %2
  br i1 %38, label %227, label %39

39:                                               ; preds = %37
  %40 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 -1, i32 0
  %41 = ptrtoint i8** %40 to i64
  %42 = sub i64 %41, %9
  %43 = lshr i64 %42, 4
  %44 = add nuw nsw i64 %43, 1
  %45 = and i64 %44, 3
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %57, label %47

47:                                               ; preds = %39, %47
  %48 = phi %"class.base::BasicStringPiece"* [ %54, %47 ], [ %6, %39 ]
  %49 = phi %"class.base::BasicStringPiece"* [ %53, %47 ], [ %1, %39 ]
  %50 = phi i64 [ %55, %47 ], [ %45, %39 ]
  %51 = bitcast %"class.base::BasicStringPiece"* %48 to i8*
  %52 = bitcast %"class.base::BasicStringPiece"* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 16, i1 false)
  %53 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %49, i64 1
  %54 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %48, i64 1
  %55 = add i64 %50, -1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %47, !llvm.loop !10

57:                                               ; preds = %47, %39
  %58 = phi %"class.base::BasicStringPiece"* [ undef, %39 ], [ %54, %47 ]
  %59 = phi %"class.base::BasicStringPiece"* [ %6, %39 ], [ %54, %47 ]
  %60 = phi %"class.base::BasicStringPiece"* [ %1, %39 ], [ %53, %47 ]
  %61 = icmp ult i64 %42, 48
  br i1 %61, label %128, label %207

62:                                               ; preds = %108, %32
  %63 = phi %"class.base::BasicStringPiece"* [ %33, %32 ], [ %126, %108 ]
  %64 = icmp eq %"class.base::BasicStringPiece"* %63, %6
  br i1 %64, label %227, label %65

65:                                               ; preds = %62, %103
  %66 = phi %"class.base::BasicStringPiece"* [ %105, %103 ], [ %6, %62 ]
  %67 = phi %"class.base::BasicStringPiece"* [ %106, %103 ], [ %0, %62 ]
  %68 = phi %"class.base::BasicStringPiece"* [ %104, %103 ], [ %1, %62 ]
  %69 = icmp eq %"class.base::BasicStringPiece"* %68, %2
  br i1 %69, label %70, label %78

70:                                               ; preds = %65
  %71 = ptrtoint %"class.base::BasicStringPiece"* %63 to i64
  %72 = ptrtoint %"class.base::BasicStringPiece"* %66 to i64
  %73 = sub i64 %71, %72
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %227, label %75

75:                                               ; preds = %70
  %76 = bitcast %"class.base::BasicStringPiece"* %67 to i8*
  %77 = bitcast %"class.base::BasicStringPiece"* %66 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %73, i1 false) #8
  br label %227

78:                                               ; preds = %65
  %79 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 0, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %66, i64 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %66, i64 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = icmp ugt i64 %82, %86
  %88 = select i1 %87, i64 %86, i64 %82
  %89 = tail call i32 @memcmp(i8* %80, i8* %84, i64 %88) #8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %78
  %92 = icmp ult i64 %82, %86
  br i1 %92, label %95, label %99

93:                                               ; preds = %78
  %94 = icmp slt i32 %89, 0
  br i1 %94, label %95, label %99

95:                                               ; preds = %93, %91
  %96 = bitcast %"class.base::BasicStringPiece"* %67 to i8*
  %97 = bitcast %"class.base::BasicStringPiece"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 16, i1 false) #8
  %98 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 1
  br label %103

99:                                               ; preds = %93, %91
  %100 = bitcast %"class.base::BasicStringPiece"* %67 to i8*
  %101 = bitcast %"class.base::BasicStringPiece"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 16, i1 false) #8
  %102 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %66, i64 1
  br label %103

103:                                              ; preds = %99, %95
  %104 = phi %"class.base::BasicStringPiece"* [ %98, %95 ], [ %68, %99 ]
  %105 = phi %"class.base::BasicStringPiece"* [ %66, %95 ], [ %102, %99 ]
  %106 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %67, i64 1
  %107 = icmp eq %"class.base::BasicStringPiece"* %105, %63
  br i1 %107, label %227, label %65

108:                                              ; preds = %32, %108
  %109 = phi %"class.base::BasicStringPiece"* [ %126, %108 ], [ %34, %32 ]
  %110 = phi %"class.base::BasicStringPiece"* [ %125, %108 ], [ %35, %32 ]
  %111 = bitcast %"class.base::BasicStringPiece"* %109 to i8*
  %112 = bitcast %"class.base::BasicStringPiece"* %110 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %112, i64 16, i1 false)
  %113 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 1
  %114 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 1
  %115 = bitcast %"class.base::BasicStringPiece"* %114 to i8*
  %116 = bitcast %"class.base::BasicStringPiece"* %113 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 16, i1 false)
  %117 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 2
  %118 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 2
  %119 = bitcast %"class.base::BasicStringPiece"* %118 to i8*
  %120 = bitcast %"class.base::BasicStringPiece"* %117 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 16, i1 false)
  %121 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 3
  %122 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 3
  %123 = bitcast %"class.base::BasicStringPiece"* %122 to i8*
  %124 = bitcast %"class.base::BasicStringPiece"* %121 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 16, i1 false)
  %125 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %110, i64 4
  %126 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %109, i64 4
  %127 = icmp eq %"class.base::BasicStringPiece"* %125, %1
  br i1 %127, label %62, label %108

128:                                              ; preds = %207, %57
  %129 = phi %"class.base::BasicStringPiece"* [ %58, %57 ], [ %225, %207 ]
  %130 = icmp eq %"class.base::BasicStringPiece"* %129, %6
  br i1 %130, label %227, label %131

131:                                              ; preds = %128, %198
  %132 = phi %"class.base::BasicStringPiece"* [ %205, %198 ], [ %2, %128 ]
  %133 = phi %"class.base::BasicStringPiece"* [ %201, %198 ], [ %129, %128 ]
  %134 = phi %"class.base::BasicStringPiece"* [ %200, %198 ], [ %1, %128 ]
  %135 = icmp eq %"class.base::BasicStringPiece"* %134, %0
  br i1 %135, label %136, label %178

136:                                              ; preds = %131
  %137 = getelementptr %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %133, i64 -1, i32 0
  %138 = ptrtoint i8** %137 to i64
  %139 = sub i64 %138, %10
  %140 = lshr i64 %139, 4
  %141 = add nuw nsw i64 %140, 1
  %142 = and i64 %141, 3
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %154, label %144

144:                                              ; preds = %136, %144
  %145 = phi %"class.base::BasicStringPiece"* [ %148, %144 ], [ %133, %136 ]
  %146 = phi %"class.base::BasicStringPiece"* [ %149, %144 ], [ %132, %136 ]
  %147 = phi i64 [ %152, %144 ], [ %142, %136 ]
  %148 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %145, i64 -1
  %149 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %146, i64 -1
  %150 = bitcast %"class.base::BasicStringPiece"* %149 to i8*
  %151 = bitcast %"class.base::BasicStringPiece"* %148 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 16, i1 false) #8
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %144, !llvm.loop !11

154:                                              ; preds = %144, %136
  %155 = phi %"class.base::BasicStringPiece"* [ %133, %136 ], [ %148, %144 ]
  %156 = phi %"class.base::BasicStringPiece"* [ %132, %136 ], [ %149, %144 ]
  %157 = icmp ult i64 %139, 48
  br i1 %157, label %227, label %158

158:                                              ; preds = %154, %158
  %159 = phi %"class.base::BasicStringPiece"* [ %173, %158 ], [ %155, %154 ]
  %160 = phi %"class.base::BasicStringPiece"* [ %174, %158 ], [ %156, %154 ]
  %161 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -1
  %162 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -1
  %163 = bitcast %"class.base::BasicStringPiece"* %162 to i8*
  %164 = bitcast %"class.base::BasicStringPiece"* %161 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %163, i8* align 8 %164, i64 16, i1 false) #8
  %165 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -2
  %166 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -2
  %167 = bitcast %"class.base::BasicStringPiece"* %166 to i8*
  %168 = bitcast %"class.base::BasicStringPiece"* %165 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %167, i8* align 8 %168, i64 16, i1 false) #8
  %169 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -3
  %170 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -3
  %171 = bitcast %"class.base::BasicStringPiece"* %170 to i8*
  %172 = bitcast %"class.base::BasicStringPiece"* %169 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %171, i8* align 8 %172, i64 16, i1 false) #8
  %173 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 -4
  %174 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %160, i64 -4
  %175 = bitcast %"class.base::BasicStringPiece"* %174 to i8*
  %176 = bitcast %"class.base::BasicStringPiece"* %173 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %175, i8* align 8 %176, i64 16, i1 false) #8
  %177 = icmp eq %"class.base::BasicStringPiece"* %173, %6
  br i1 %177, label %227, label %158

178:                                              ; preds = %131
  %179 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %134, i64 -1
  %180 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %133, i64 -1
  %181 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %180, i64 0, i32 0
  %182 = load i8*, i8** %181, align 8
  %183 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %133, i64 -1, i32 1
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %179, i64 0, i32 0
  %186 = load i8*, i8** %185, align 8
  %187 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %134, i64 -1, i32 1
  %188 = load i64, i64* %187, align 8
  %189 = icmp ugt i64 %184, %188
  %190 = select i1 %189, i64 %188, i64 %184
  %191 = tail call i32 @memcmp(i8* %182, i8* %186, i64 %190) #8
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %195

193:                                              ; preds = %178
  %194 = icmp ult i64 %184, %188
  br i1 %194, label %198, label %197

195:                                              ; preds = %178
  %196 = icmp slt i32 %191, 0
  br i1 %196, label %198, label %197

197:                                              ; preds = %195, %193
  br label %198

198:                                              ; preds = %193, %195, %197
  %199 = phi %"class.base::BasicStringPiece"* [ %180, %197 ], [ %179, %195 ], [ %179, %193 ]
  %200 = phi %"class.base::BasicStringPiece"* [ %134, %197 ], [ %179, %195 ], [ %179, %193 ]
  %201 = phi %"class.base::BasicStringPiece"* [ %180, %197 ], [ %133, %195 ], [ %133, %193 ]
  %202 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %132, i64 -1
  %203 = bitcast %"class.base::BasicStringPiece"* %202 to i8*
  %204 = bitcast %"class.base::BasicStringPiece"* %199 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %203, i8* align 8 %204, i64 16, i1 false) #8
  %205 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %132, i64 -1
  %206 = icmp eq %"class.base::BasicStringPiece"* %201, %6
  br i1 %206, label %227, label %131

207:                                              ; preds = %57, %207
  %208 = phi %"class.base::BasicStringPiece"* [ %225, %207 ], [ %59, %57 ]
  %209 = phi %"class.base::BasicStringPiece"* [ %224, %207 ], [ %60, %57 ]
  %210 = bitcast %"class.base::BasicStringPiece"* %208 to i8*
  %211 = bitcast %"class.base::BasicStringPiece"* %209 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %210, i8* align 8 %211, i64 16, i1 false)
  %212 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 1
  %213 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 1
  %214 = bitcast %"class.base::BasicStringPiece"* %213 to i8*
  %215 = bitcast %"class.base::BasicStringPiece"* %212 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %214, i8* align 8 %215, i64 16, i1 false)
  %216 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 2
  %217 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 2
  %218 = bitcast %"class.base::BasicStringPiece"* %217 to i8*
  %219 = bitcast %"class.base::BasicStringPiece"* %216 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 16, i1 false)
  %220 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 3
  %221 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 3
  %222 = bitcast %"class.base::BasicStringPiece"* %221 to i8*
  %223 = bitcast %"class.base::BasicStringPiece"* %220 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %222, i8* align 8 %223, i64 16, i1 false)
  %224 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %209, i64 4
  %225 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %208, i64 4
  %226 = icmp eq %"class.base::BasicStringPiece"* %224, %2
  br i1 %226, label %128, label %207

227:                                              ; preds = %103, %198, %154, %158, %37, %12, %128, %75, %70, %62
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"* } @_ZNK4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE11equal_rangeIS6_EENS3_4pairINS3_11__wrap_iterIPKS6_EESK_EERKT_(%"class.base::internal::flat_tree"*, %"class.base::BasicStringPiece"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast %"class.base::BasicStringPiece"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint %"class.base::BasicStringPiece"* %4 to i64
  %9 = sub i64 %7, %8
  %10 = icmp eq i64 %9, 0
  %11 = inttoptr i64 %7 to %"class.base::BasicStringPiece"*
  br i1 %10, label %45, label %12

12:                                               ; preds = %2
  %13 = ashr exact i64 %9, 4
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  br label %18

18:                                               ; preds = %39, %12
  %19 = phi %"class.base::BasicStringPiece"* [ %4, %12 ], [ %41, %39 ]
  %20 = phi i64 [ %13, %12 ], [ %40, %39 ]
  %21 = lshr i64 %20, 1
  %22 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %19, i64 %21
  %23 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %22, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %19, i64 %21, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = icmp ugt i64 %26, %17
  %28 = select i1 %27, i64 %17, i64 %26
  %29 = tail call i32 @memcmp(i8* %24, i8* %15, i64 %28) #8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %18
  %32 = icmp ult i64 %26, %17
  br i1 %32, label %35, label %39

33:                                               ; preds = %18
  %34 = icmp slt i32 %29, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %33, %31
  %36 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %22, i64 1
  %37 = xor i64 %21, -1
  %38 = add i64 %20, %37
  br label %39

39:                                               ; preds = %35, %33, %31
  %40 = phi i64 [ %38, %35 ], [ %21, %33 ], [ %21, %31 ]
  %41 = phi %"class.base::BasicStringPiece"* [ %36, %35 ], [ %19, %33 ], [ %19, %31 ]
  %42 = icmp eq i64 %40, 0
  br i1 %42, label %43, label %18

43:                                               ; preds = %39
  %44 = ptrtoint %"class.base::BasicStringPiece"* %41 to i64
  br label %45

45:                                               ; preds = %43, %2
  %46 = phi i64 [ %44, %43 ], [ %8, %2 ]
  %47 = phi %"class.base::BasicStringPiece"* [ %41, %43 ], [ %4, %2 ]
  %48 = icmp eq %"class.base::BasicStringPiece"* %47, %11
  br i1 %48, label %69, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %47, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %47, i64 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = icmp ugt i64 %53, %57
  %59 = select i1 %58, i64 %57, i64 %53
  %60 = tail call i32 @memcmp(i8* %51, i8* %55, i64 %59) #8
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %49
  %63 = icmp ult i64 %53, %57
  br i1 %63, label %69, label %66

64:                                               ; preds = %49
  %65 = icmp slt i32 %60, 0
  br i1 %65, label %69, label %66

66:                                               ; preds = %62, %64
  %67 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %47, i64 1
  %68 = ptrtoint %"class.base::BasicStringPiece"* %67 to i64
  br label %69

69:                                               ; preds = %62, %64, %45, %66
  %70 = phi i64 [ %68, %66 ], [ %46, %45 ], [ %46, %64 ], [ %46, %62 ]
  %71 = insertvalue { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"* } undef, %"class.base::BasicStringPiece"* %47, 0
  %72 = inttoptr i64 %70 to %"class.base::BasicStringPiece"*
  %73 = insertvalue { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"* } %71, %"class.base::BasicStringPiece"* %72, 1
  ret { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"* } %73
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
