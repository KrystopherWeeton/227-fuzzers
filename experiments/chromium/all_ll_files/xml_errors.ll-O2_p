; ModuleID = '../../third_party/blink/renderer/core/xml/parser/xml_errors.cc'
source_filename = "../../third_party/blink/renderer/core/xml/parser/xml_errors.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::HTMLQualifiedName" = type { %"class.blink::QualifiedName" }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.29 }
%class.scoped_refptr.29 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::XMLErrors" = type { %"class.blink::Member", i32, %"class.WTF::TextPosition", [4 x i8], %"class.WTF::StringBuilder" }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Document"* }
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [16 x i8] }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.79", %"class.WTF::Vector.79", i8, i32, %"class.blink::Member.90", %"class.blink::Member.92", %"class.blink::Member.94", %"class.blink::Member.96", %"class.blink::Member.98", %"class.blink::Member.100", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.103", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.109", %"class.blink::Member.111", %"class.blink::Member.69", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.114", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector", %"class.blink::Member.27", %"class.blink::Member.129", %"class.blink::Member.27", %"class.blink::Member.27", %"class.blink::Member.27", %"class.blink::UserActionElementSet", %"class.blink::Member.138", double, double, i64, i64, %"class.blink::HeapHashSet", %"class.blink::HeapHashSet.145", i16, i8, %"class.blink::Member.152", %"class.blink::Member.154", %"class.blink::Member.156", %"class.blink::Member.158", %"class.blink::TextLinkColors", %"class.blink::Member.160", i8, [7 x i8], %"class.blink::HeapHashMap.162", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.27", %"class.WTF::Vector.169", %"class.blink::Member.174", %"class.blink::Member.176", i8, %"class.blink::Member.27", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.178", %"class.blink::HeapVector.180", %"class.std::__1::unique_ptr.188", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.194", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.206", %"class.WTF::Vector.208", i8, i8, %"class.std::__1::unique_ptr.213", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector", %"class.blink::HeapVector.219", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.227", i8, i32, %"class.blink::Member.229", %"class.blink::Member.231", %"class.blink::Member.233", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.235", %"class.WTF::HashMap.237", %"class.blink::Member.242", %"class.blink::Member.244", %"class.blink::Member.246", %"class.blink::Member.248", %"class.blink::Member", %"class.blink::Member", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.250", i8, i32, %"class.blink::Member.257", %"class.blink::Member.259", i32, %"class.blink::Member.261", %"class.blink::Member.263", %"class.blink::Member.265", %"class.std::__1::unique_ptr.267", i64, %"class.std::__1::unique_ptr.273", i32, i32, %"class.blink::Member.279", %"class.blink::Member.281", %"class.blink::Member.283", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.285", %"class.WTF::Vector.287", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.292", %"class.blink::Member.299", %"class.std::__1::unique_ptr.301", %"class.blink::Member.307", i8, i8, %"class.WTF::String", %"class.blink::Member.309", i8, [7 x i8], %"class.blink::HeapHashMap.311", %"class.blink::HeapObserverSet", %"class.blink::Member.325", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.327", i32, i8, i8, %"class.blink::WeakMember.329", %"class.blink::Member.330" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.6", %"class.blink::Member.6" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.6", %"class.blink::Member.8", %"class.blink::Member.6", %"class.blink::Member.6", %"class.blink::Member.10" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.8" = type { %"class.blink::MemberBase.9" }
%"class.blink::MemberBase.9" = type { %"class.blink::TreeScope"* }
%"class.blink::Member.10" = type { %"class.blink::MemberBase.11" }
%"class.blink::MemberBase.11" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.6" = type { %"class.blink::MemberBase.7" }
%"class.blink::MemberBase.7" = type { %"class.blink::Node"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.14", %"class.blink::Member", %"class.blink::Member.8", %"class.blink::Member.16", %"class.blink::Member.16", %"class.blink::Member.52", %"class.blink::Member.54", %"class.blink::Member.56", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.61", %"class.blink::HeapVector.63" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.14" = type { %"class.blink::MemberBase.15" }
%"class.blink::MemberBase.15" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.16" = type { %"class.blink::MemberBase.17" }
%"class.blink::MemberBase.17" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.blink::Member.23" }
%"class.blink::Member.23" = type { %"class.blink::MemberBase.24" }
%"class.blink::MemberBase.24" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.27", i32, %"class.blink::HeapVector" }
%"class.blink::Member.52" = type { %"class.blink::MemberBase.53" }
%"class.blink::MemberBase.53" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.54" = type { %"class.blink::MemberBase.55" }
%"class.blink::MemberBase.55" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.56" = type { %"class.blink::MemberBase.57" }
%"class.blink::MemberBase.57" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.58" }
%"class.blink::Member.58" = type { %"class.blink::MemberBase.59" }
%"class.blink::MemberBase.59" = type { %"class.blink::HeapHashMap.60"* }
%"class.blink::HeapHashMap.60" = type opaque
%"class.blink::Member.61" = type { %"class.blink::MemberBase.62" }
%"class.blink::MemberBase.62" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.63" = type { %"class.WTF::Vector.66" }
%"class.WTF::Vector.66" = type { %"class.WTF::VectorBuffer.67" }
%"class.WTF::VectorBuffer.67" = type { %"class.WTF::VectorBufferBase.68" }
%"class.WTF::VectorBufferBase.68" = type { %"class.blink::Member.69"*, i32, i32 }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.72" }
%"class.blink::HeapHashMap.72" = type { %"class.WTF::HashMap.75" }
%"class.WTF::HashMap.75" = type { %"class.WTF::HashTable.76" }
%"class.WTF::HashTable.76" = type <{ %"struct.WTF::KeyValuePair.78"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.78" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.79" = type { %"class.WTF::VectorBuffer.80" }
%"class.WTF::VectorBuffer.80" = type { %"class.WTF::VectorBufferBase.81" }
%"class.WTF::VectorBufferBase.81" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.82 }
%class.scoped_refptr.82 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.83" }
%"struct.std::__1::atomic.83" = type { %"struct.std::__1::__atomic_base.84" }
%"struct.std::__1::__atomic_base.84" = type { %"struct.std::__1::__atomic_base.85" }
%"struct.std::__1::__atomic_base.85" = type { %"struct.std::__1::__cxx_atomic_impl.86" }
%"struct.std::__1::__cxx_atomic_impl.86" = type { %"struct.std::__1::__cxx_atomic_base_impl.87" }
%"struct.std::__1::__cxx_atomic_base_impl.87" = type { i32 }
%"class.blink::Member.90" = type { %"class.blink::MemberBase.91" }
%"class.blink::MemberBase.91" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.92" = type { %"class.blink::MemberBase.93" }
%"class.blink::MemberBase.93" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type opaque
%"class.blink::Member.94" = type { %"class.blink::MemberBase.95" }
%"class.blink::MemberBase.95" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.96" = type { %"class.blink::MemberBase.97" }
%"class.blink::MemberBase.97" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.98" = type { %"class.blink::MemberBase.99" }
%"class.blink::MemberBase.99" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.100" = type { %"class.blink::MemberBase.101" }
%"class.blink::MemberBase.101" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.blink::Member.109" = type { %"class.blink::MemberBase.110" }
%"class.blink::MemberBase.110" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.111" = type { %"class.blink::MemberBase.112" }
%"class.blink::MemberBase.112" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.69" = type { %"class.blink::MemberBase.70" }
%"class.blink::MemberBase.70" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.113 }
%class.scoped_refptr.113 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.114" = type { %"class.WTF::VectorBuffer.115" }
%"class.WTF::VectorBuffer.115" = type { %"class.WTF::VectorBufferBase.116" }
%"class.WTF::VectorBufferBase.116" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.117 }
%class.scoped_refptr.117 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type opaque
%"class.blink::Member.129" = type { %"class.blink::MemberBase.130" }
%"class.blink::MemberBase.130" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.131" }
%"class.blink::HeapHashMap.131" = type { %"class.WTF::HashMap.134" }
%"class.WTF::HashMap.134" = type { %"class.WTF::HashTable.135" }
%"class.WTF::HashTable.135" = type <{ %"struct.WTF::KeyValuePair.137"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.137" = type opaque
%"class.blink::Member.138" = type { %"class.blink::MemberBase.139" }
%"class.blink::MemberBase.139" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.142" }
%"class.WTF::HashTable.142" = type <{ %"class.blink::WeakMember.144"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.144" = type opaque
%"class.blink::HeapHashSet.145" = type { %"class.WTF::HashSet.148" }
%"class.WTF::HashSet.148" = type { %"class.WTF::HashTable.149" }
%"class.WTF::HashTable.149" = type <{ %"class.blink::WeakMember.151"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.151" = type opaque
%"class.blink::Member.152" = type { %"class.blink::MemberBase.153" }
%"class.blink::MemberBase.153" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.154" = type { %"class.blink::MemberBase.155" }
%"class.blink::MemberBase.155" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.156" = type { %"class.blink::MemberBase.157" }
%"class.blink::MemberBase.157" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type opaque
%"class.blink::Member.158" = type { %"class.blink::MemberBase.159" }
%"class.blink::MemberBase.159" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.160" = type { %"class.blink::MemberBase.161" }
%"class.blink::MemberBase.161" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.162" = type { %"class.WTF::HashMap.165" }
%"class.WTF::HashMap.165" = type { %"class.WTF::HashTable.166" }
%"class.WTF::HashTable.166" = type <{ %"struct.WTF::KeyValuePair.168"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.168" = type opaque
%"class.WTF::Vector.169" = type { %"class.WTF::VectorBuffer.170" }
%"class.WTF::VectorBuffer.170" = type { %"class.WTF::VectorBufferBase.171" }
%"class.WTF::VectorBufferBase.171" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.174" = type { %"class.blink::MemberBase.175" }
%"class.blink::MemberBase.175" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.176" = type { %"class.blink::MemberBase.177" }
%"class.blink::MemberBase.177" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.27" = type { %"class.blink::MemberBase.28" }
%"class.blink::MemberBase.28" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.30" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.30" = type { %"class.blink::MemberBase.31" }
%"class.blink::MemberBase.31" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.34", %"class.blink::Member.36", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.34" = type { %"class.WTF::SingleThreadedBitField.35" }
%"class.WTF::SingleThreadedBitField.35" = type { i32 }
%"class.blink::Member.36" = type { %"class.blink::MemberBase.37" }
%"class.blink::MemberBase.37" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.38 }
%class.scoped_refptr.38 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.39", %"class.WTF::AtomicString", %"class.WTF::Vector.41" }
%"class.WTF::RefCounted.39" = type { %"class.base::RefCounted.40" }
%"class.base::RefCounted.40" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.41" = type { %"class.WTF::VectorBuffer.42" }
%"class.WTF::VectorBuffer.42" = type { %"class.WTF::VectorBufferBase.43", [32 x i8] }
%"class.WTF::VectorBufferBase.43" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.blink::Member.178" = type { %"class.blink::MemberBase.179" }
%"class.blink::MemberBase.179" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.180" = type { %"class.WTF::Vector.183" }
%"class.WTF::Vector.183" = type { %"class.WTF::VectorBuffer.184" }
%"class.WTF::VectorBuffer.184" = type { %"class.WTF::VectorBufferBase.185" }
%"class.WTF::VectorBufferBase.185" = type { %"class.blink::Member.186"*, i32, i32 }
%"class.blink::Member.186" = type opaque
%"class.std::__1::unique_ptr.188" = type { %"class.std::__1::__compressed_pair.189" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.194" = type { %"class.WTF::HashSet.197" }
%"class.WTF::HashSet.197" = type { %"class.WTF::HashTable.198" }
%"class.WTF::HashTable.198" = type <{ %"class.blink::WeakMember.200"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.200" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.201", i32, [4 x i8] }>
%"class.WTF::Vector.201" = type { %"class.WTF::VectorBuffer.202" }
%"class.WTF::VectorBuffer.202" = type { %"class.WTF::VectorBufferBase.203" }
%"class.WTF::VectorBufferBase.203" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type opaque
%"class.blink::Member.206" = type { %"class.blink::MemberBase.207" }
%"class.blink::MemberBase.207" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.208" = type { %"class.WTF::VectorBuffer.209" }
%"class.WTF::VectorBuffer.209" = type { %"class.WTF::VectorBufferBase.210" }
%"class.WTF::VectorBufferBase.210" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.213" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.48" }
%"class.WTF::Vector.48" = type { %"class.WTF::VectorBuffer.49" }
%"class.WTF::VectorBuffer.49" = type { %"class.WTF::VectorBufferBase.50" }
%"class.WTF::VectorBufferBase.50" = type { %"class.blink::Member.27"*, i32, i32 }
%"class.blink::HeapVector.219" = type { %"class.WTF::Vector.222" }
%"class.WTF::Vector.222" = type { %"class.WTF::VectorBuffer.223" }
%"class.WTF::VectorBuffer.223" = type { %"class.WTF::VectorBufferBase.224" }
%"class.WTF::VectorBufferBase.224" = type { %"class.blink::Member.225"*, i32, i32 }
%"class.blink::Member.225" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member" }
%"class.blink::Member.227" = type { %"class.blink::MemberBase.228" }
%"class.blink::MemberBase.228" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.229" = type { %"class.blink::MemberBase.230" }
%"class.blink::MemberBase.230" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.231" = type { %"class.blink::MemberBase.232" }
%"class.blink::MemberBase.232" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.233" = type { %"class.blink::MemberBase.234" }
%"class.blink::MemberBase.234" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.235" = type { %"class.blink::MemberBase.236" }
%"class.blink::MemberBase.236" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.237" = type { %"class.WTF::HashTable.238" }
%"class.WTF::HashTable.238" = type <{ %"struct.WTF::KeyValuePair.241"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.241" = type opaque
%"class.blink::Member.242" = type { %"class.blink::MemberBase.243" }
%"class.blink::MemberBase.243" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.244" = type { %"class.blink::MemberBase.245" }
%"class.blink::MemberBase.245" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.246" = type { %"class.blink::MemberBase.247" }
%"class.blink::MemberBase.247" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.248" = type { %"class.blink::MemberBase.249" }
%"class.blink::MemberBase.249" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.120, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.120 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.121" }>
%"class.base::RefCountedThreadSafe.121" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.122 }
%class.scoped_refptr.122 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.123", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.123" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.124" }
%"struct.std::__1::atomic.124" = type { %"struct.std::__1::__atomic_base.125" }
%"struct.std::__1::__atomic_base.125" = type { %"struct.std::__1::__atomic_base.126" }
%"struct.std::__1::__atomic_base.126" = type { %"struct.std::__1::__cxx_atomic_impl.127" }
%"struct.std::__1::__cxx_atomic_impl.127" = type { %"struct.std::__1::__cxx_atomic_base_impl.128" }
%"struct.std::__1::__cxx_atomic_base_impl.128" = type { i8 }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase" }
%"class.blink::HeapHashSet.250" = type { %"class.WTF::HashSet.253" }
%"class.WTF::HashSet.253" = type { %"class.WTF::HashTable.254" }
%"class.WTF::HashTable.254" = type <{ %"class.blink::Member.256"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.256" = type opaque
%"class.blink::Member.257" = type { %"class.blink::MemberBase.258" }
%"class.blink::MemberBase.258" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.259" = type { %"class.blink::MemberBase.260" }
%"class.blink::MemberBase.260" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.261" = type { %"class.blink::MemberBase.262" }
%"class.blink::MemberBase.262" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.263" = type { %"class.blink::MemberBase.264" }
%"class.blink::MemberBase.264" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.265" = type { %"class.blink::MemberBase.266" }
%"class.blink::MemberBase.266" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.267" = type { %"class.std::__1::__compressed_pair.268" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.273" = type { %"class.std::__1::__compressed_pair.274" }
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.275" }
%"struct.std::__1::__compressed_pair_elem.275" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.279" = type { %"class.blink::MemberBase.280" }
%"class.blink::MemberBase.280" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.281" = type { %"class.blink::MemberBase.282" }
%"class.blink::MemberBase.282" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.283" = type { %"class.blink::MemberBase.284" }
%"class.blink::MemberBase.284" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.285" = type { %"class.blink::MemberBase.286" }
%"class.blink::MemberBase.286" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.287" = type { %"class.WTF::VectorBuffer.288" }
%"class.WTF::VectorBuffer.288" = type { %"class.WTF::VectorBufferBase.289" }
%"class.WTF::VectorBufferBase.289" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.292" = type { %"class.WTF::HashMap.295" }
%"class.WTF::HashMap.295" = type { %"class.WTF::HashTable.296" }
%"class.WTF::HashTable.296" = type <{ %"struct.WTF::KeyValuePair.298"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.298" = type opaque
%"class.blink::Member.299" = type { %"class.blink::MemberBase.300" }
%"class.blink::MemberBase.300" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.301" = type { %"class.std::__1::__compressed_pair.302" }
%"class.std::__1::__compressed_pair.302" = type { %"struct.std::__1::__compressed_pair_elem.303" }
%"struct.std::__1::__compressed_pair_elem.303" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.307" = type { %"class.blink::MemberBase.308" }
%"class.blink::MemberBase.308" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.309" = type { %"class.blink::MemberBase.310" }
%"class.blink::MemberBase.310" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.311" = type { %"class.WTF::HashMap.314" }
%"class.WTF::HashMap.314" = type { %"class.WTF::HashTable.315" }
%"class.WTF::HashTable.315" = type <{ %"struct.WTF::KeyValuePair.317"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.317" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.318" }
%"class.blink::HeapHashSet.318" = type { %"class.WTF::HashSet.321" }
%"class.WTF::HashSet.321" = type { %"class.WTF::HashTable.322" }
%"class.WTF::HashTable.322" = type <{ %"class.blink::WeakMember.324"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.324" = type opaque
%"class.blink::Member.325" = type { %"class.blink::MemberBase.326" }
%"class.blink::MemberBase.326" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.327" = type { %"class.blink::MemberBase.328" }
%"class.blink::MemberBase.328" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member", %"class.blink::HeapHashSet.334", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.341", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.334" = type { %"class.WTF::HashSet.337" }
%"class.WTF::HashSet.337" = type { %"class.WTF::HashTable.338" }
%"class.WTF::HashTable.338" = type <{ %"class.blink::Member.340"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.340" = type opaque
%"class.blink::HeapTaskRunnerTimer.341" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.342", { i64, i64 } }
%"class.blink::WeakMember.342" = type { %"class.blink::MemberBase.328" }
%"class.blink::WeakMember.329" = type { %"class.blink::MemberBase.7" }
%"class.blink::Member.330" = type { %"class.blink::MemberBase.331" }
%"class.blink::MemberBase.331" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.343", i32, [4 x i8], %"class.std::__1::unique_ptr.479", %"class.std::__1::unique_ptr.479", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.490", %"class.std::__1::unique_ptr.496", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.508", %"class.std::__1::unique_ptr.514", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.521", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.343" = type { %"class.std::__1::__compressed_pair.344" }
%"class.std::__1::__compressed_pair.344" = type { %"struct.std::__1::__compressed_pair_elem.345" }
%"struct.std::__1::__compressed_pair_elem.345" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.346", %"class.std::__1::unique_ptr.352", %"class.std::__1::unique_ptr.358", %"class.std::__1::unique_ptr.364", %"class.std::__1::unique_ptr.370", %"class.std::__1::unique_ptr.376", %"class.std::__1::unique_ptr.387", %"class.std::__1::unique_ptr.394", %"class.std::__1::unique_ptr.394", %"class.std::__1::unique_ptr.401", %"class.std::__1::unique_ptr.408", %"class.std::__1::unique_ptr.415", %"class.std::__1::unique_ptr.415", %"class.std::__1::unique_ptr.422", %"class.std::__1::unique_ptr.429", %"class.std::__1::unique_ptr.436", %"class.std::__1::unique_ptr.459", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.346" = type { %"class.std::__1::__compressed_pair.347" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.348" }
%"struct.std::__1::__compressed_pair_elem.348" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.352" = type { %"class.std::__1::__compressed_pair.353" }
%"class.std::__1::__compressed_pair.353" = type { %"struct.std::__1::__compressed_pair_elem.354" }
%"struct.std::__1::__compressed_pair_elem.354" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.358" = type { %"class.std::__1::__compressed_pair.359" }
%"class.std::__1::__compressed_pair.359" = type { %"struct.std::__1::__compressed_pair_elem.360" }
%"struct.std::__1::__compressed_pair_elem.360" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.364" = type { %"class.std::__1::__compressed_pair.365" }
%"class.std::__1::__compressed_pair.365" = type { %"struct.std::__1::__compressed_pair_elem.366" }
%"struct.std::__1::__compressed_pair_elem.366" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.370" = type { %"class.std::__1::__compressed_pair.371" }
%"class.std::__1::__compressed_pair.371" = type { %"struct.std::__1::__compressed_pair_elem.372" }
%"struct.std::__1::__compressed_pair_elem.372" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.376" = type { %"class.std::__1::__compressed_pair.377" }
%"class.std::__1::__compressed_pair.377" = type { %"struct.std::__1::__compressed_pair_elem.378" }
%"struct.std::__1::__compressed_pair_elem.378" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.379" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.379" = type { %"struct.std::__1::__atomic_base.380" }
%"struct.std::__1::__atomic_base.380" = type { %"struct.std::__1::__atomic_base.381" }
%"struct.std::__1::__atomic_base.381" = type { %"struct.std::__1::__cxx_atomic_impl.382" }
%"struct.std::__1::__cxx_atomic_impl.382" = type { %"struct.std::__1::__cxx_atomic_base_impl.383" }
%"struct.std::__1::__cxx_atomic_base_impl.383" = type { i64 }
%"class.std::__1::unique_ptr.387" = type { %"class.std::__1::__compressed_pair.388" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.389" }
%"struct.std::__1::__compressed_pair_elem.389" = type { %"class.blink::Worklist.390"* }
%"class.blink::Worklist.390" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.379" }
%"class.std::__1::unique_ptr.394" = type { %"class.std::__1::__compressed_pair.395" }
%"class.std::__1::__compressed_pair.395" = type { %"struct.std::__1::__compressed_pair_elem.396" }
%"struct.std::__1::__compressed_pair_elem.396" = type { %"class.blink::Worklist.397"* }
%"class.blink::Worklist.397" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.379" }
%"class.std::__1::unique_ptr.401" = type { %"class.std::__1::__compressed_pair.402" }
%"class.std::__1::__compressed_pair.402" = type { %"struct.std::__1::__compressed_pair_elem.403" }
%"struct.std::__1::__compressed_pair_elem.403" = type { %"class.blink::Worklist.404"* }
%"class.blink::Worklist.404" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.379" }
%"class.std::__1::unique_ptr.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.410" }
%"struct.std::__1::__compressed_pair_elem.410" = type { %"class.blink::Worklist.411"* }
%"class.blink::Worklist.411" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.379" }
%"class.std::__1::unique_ptr.415" = type { %"class.std::__1::__compressed_pair.416" }
%"class.std::__1::__compressed_pair.416" = type { %"struct.std::__1::__compressed_pair_elem.417" }
%"struct.std::__1::__compressed_pair_elem.417" = type { %"class.blink::Worklist.418"* }
%"class.blink::Worklist.418" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.379" }
%"class.std::__1::unique_ptr.422" = type { %"class.std::__1::__compressed_pair.423" }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.424" }
%"struct.std::__1::__compressed_pair_elem.424" = type { %"class.blink::Worklist.425"* }
%"class.blink::Worklist.425" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.379" }
%"class.std::__1::unique_ptr.429" = type { %"class.std::__1::__compressed_pair.430" }
%"class.std::__1::__compressed_pair.430" = type { %"struct.std::__1::__compressed_pair_elem.431" }
%"struct.std::__1::__compressed_pair_elem.431" = type { %"class.blink::Worklist.432"* }
%"class.blink::Worklist.432" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.379" }
%"class.std::__1::unique_ptr.436" = type { %"class.std::__1::__compressed_pair.437" }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.438" }
%"struct.std::__1::__compressed_pair_elem.438" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.439", %"class.std::__1::__compressed_pair.446", %"class.std::__1::__compressed_pair.451", %"class.std::__1::__compressed_pair.453", [4 x i8] }>
%"class.std::__1::unique_ptr.439" = type { %"class.std::__1::__compressed_pair.440" }
%"class.std::__1::__compressed_pair.440" = type { %"struct.std::__1::__compressed_pair_elem.441", %"struct.std::__1::__compressed_pair_elem.442" }
%"struct.std::__1::__compressed_pair_elem.441" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.442" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.443" }
%"class.std::__1::__compressed_pair.443" = type { %"struct.std::__1::__compressed_pair_elem.444" }
%"struct.std::__1::__compressed_pair_elem.444" = type { i64 }
%"class.std::__1::__compressed_pair.446" = type { %"struct.std::__1::__compressed_pair_elem.447" }
%"struct.std::__1::__compressed_pair_elem.447" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.444" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.454" }
%"struct.std::__1::__compressed_pair_elem.454" = type { float }
%"class.std::__1::unique_ptr.459" = type { %"class.std::__1::__compressed_pair.460" }
%"class.std::__1::__compressed_pair.460" = type { %"struct.std::__1::__compressed_pair_elem.461" }
%"struct.std::__1::__compressed_pair_elem.461" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.462", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.462" = type { %"class.std::__1::__compressed_pair.463" }
%"class.std::__1::__compressed_pair.463" = type { %"struct.std::__1::__compressed_pair_elem.464" }
%"struct.std::__1::__compressed_pair_elem.464" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.471" }
%"class.WTF::Vector.471" = type { %"class.WTF::VectorBuffer.472" }
%"class.WTF::VectorBuffer.472" = type { %"class.WTF::VectorBufferBase.473" }
%"class.WTF::VectorBufferBase.473" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.479" = type { %"class.std::__1::__compressed_pair.480" }
%"class.std::__1::__compressed_pair.480" = type { %"struct.std::__1::__compressed_pair_elem.481" }
%"struct.std::__1::__compressed_pair_elem.481" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.487" }
%"class.WTF::VectorBuffer.487" = type { %"class.WTF::VectorBufferBase.488" }
%"class.WTF::VectorBufferBase.488" = type { %"struct.std::__1::pair.489"*, i32, i32 }
%"struct.std::__1::pair.489" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.490" = type { %"class.std::__1::__compressed_pair.491" }
%"class.std::__1::__compressed_pair.491" = type { %"struct.std::__1::__compressed_pair_elem.492" }
%"struct.std::__1::__compressed_pair_elem.492" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.496" = type { %"class.std::__1::__compressed_pair.497" }
%"class.std::__1::__compressed_pair.497" = type { %"struct.std::__1::__compressed_pair_elem.498" }
%"struct.std::__1::__compressed_pair_elem.498" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.502" }
%"class.std::__1::unique_ptr.502" = type { %"class.std::__1::__compressed_pair.503" }
%"class.std::__1::__compressed_pair.503" = type { %"struct.std::__1::__compressed_pair_elem.504" }
%"struct.std::__1::__compressed_pair_elem.504" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.390"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.397"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.404"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.411"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.418"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.525" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.525" = type { %"struct.std::__1::__compressed_pair_elem.526" }
%"struct.std::__1::__compressed_pair_elem.526" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.508" = type { %"class.std::__1::__compressed_pair.509" }
%"class.std::__1::__compressed_pair.509" = type { %"struct.std::__1::__compressed_pair_elem.510" }
%"struct.std::__1::__compressed_pair_elem.510" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.514" = type { %"class.std::__1::__compressed_pair.515" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.520 }
%class.scoped_refptr.520 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.521" = type { %"struct.std::__1::__atomic_base.522" }
%"struct.std::__1::__atomic_base.522" = type { %"struct.std::__1::__cxx_atomic_impl.523" }
%"struct.std::__1::__cxx_atomic_impl.523" = type { %"struct.std::__1::__cxx_atomic_base_impl.524" }
%"struct.std::__1::__cxx_atomic_base_impl.524" = type { i8 }
%"class.WTF::IntegerToStringConverter" = type <{ [13 x i8], [3 x i8], i8*, i32, [4 x i8] }>
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::CreateElementFlags" = type <{ i8, [7 x i8], %"class.blink::Document"*, i8, [7 x i8] }>
%"class.WTF::Vector.559" = type { %"class.WTF::VectorBuffer.560" }
%"class.WTF::VectorBuffer.560" = type { %"class.WTF::VectorBufferBase.561" }
%"class.WTF::VectorBufferBase.561" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.blink::Text" = type { %"class.blink::CharacterData" }
%"class.blink::CharacterData" = type { %"class.blink::Node", i8, %"class.blink::ParkableString", %"class.WTF::String" }
%"class.blink::ParkableString" = type { %class.scoped_refptr.530 }
%class.scoped_refptr.530 = type { %"class.blink::ParkableStringImpl"* }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted.531", %"class.WTF::String", %"class.std::__1::unique_ptr.533" }
%"class.WTF::RefCounted.531" = type { %"class.base::RefCounted.532" }
%"class.base::RefCounted.532" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.533" = type { %"class.std::__1::__compressed_pair.534" }
%"class.std::__1::__compressed_pair.534" = type { %"struct.std::__1::__compressed_pair_elem.535" }
%"struct.std::__1::__compressed_pair_elem.535" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.536", %"class.std::__1::unique_ptr.546", %"class.WTF::Vector.552", i8, i32 }
%"class.std::__1::unique_ptr.536" = type { %"class.std::__1::__compressed_pair.537" }
%"class.std::__1::__compressed_pair.537" = type { %"struct.std::__1::__compressed_pair_elem.538" }
%"struct.std::__1::__compressed_pair_elem.538" = type { %"class.WTF::Vector.539"* }
%"class.WTF::Vector.539" = type { %"class.WTF::VectorBuffer.540" }
%"class.WTF::VectorBuffer.540" = type { %"class.WTF::VectorBufferBase" }
%"class.std::__1::unique_ptr.546" = type { %"class.std::__1::__compressed_pair.547" }
%"class.std::__1::__compressed_pair.547" = type { %"struct.std::__1::__compressed_pair_elem.548" }
%"struct.std::__1::__compressed_pair_elem.548" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.552" = type { %"class.WTF::VectorBuffer.553" }
%"class.WTF::VectorBuffer.553" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.568" }
%"class.std::__1::__compressed_pair.568" = type { %"struct.std::__1::__compressed_pair_elem.569" }
%"struct.std::__1::__compressed_pair_elem.569" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.570 }
%union.anon.570 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE = comdat any

$_ZN5blink10TraceTraitINS_8DocumentEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink9AttributeEEEmm = comdat any

@.str = private unnamed_addr constant [8 x i8] c"warning\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c" on line \00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c" at column \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c": \00", align 1
@_ZN5blink10html_names8kHTMLTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kBodyTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink9svg_names13kNamespaceURIE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink10html_names8kHeadTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names9kStyleTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@.str.5 = private unnamed_addr constant [76 x i8] c"html, body { height: 100% } parsererror + svg { width: 100%; height: 100% }\00", align 1
@_ZN5blink10html_names10kStyleAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str.6 = private unnamed_addr constant [20 x i8] c"white-space: normal\00", align 1
@_ZN5blink10html_names5kPTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@.str.7 = private unnamed_addr constant [133 x i8] c"This document was created as the result of an XSL transformation. The line and column numbers given are from the transformed result.\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str.8 = private unnamed_addr constant [12 x i8] c"parsererror\00", align 1
@_ZN5blink10html_names17xhtmlNamespaceURIE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str.9 = private unnamed_addr constant [130 x i8] c"display: block; white-space: pre; border: 2px solid #c77; padding: 0 1em 0 1em; margin: 1em; background-color: #fdd; color: black\00", align 1
@_ZN5blink10html_names6kH3TagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@.str.10 = private unnamed_addr constant [41 x i8] c"This page contains the following errors:\00", align 1
@_ZN5blink10html_names7kDivTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@.str.11 = private unnamed_addr constant [37 x i8] c"font-family:monospace;font-size:12px\00", align 1
@.str.12 = private unnamed_addr constant [56 x i8] c"Below is a rendering of the page up to the first error.\00", align 1
@.str.15 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.16 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink9AttributeEEEPKcv = private unnamed_addr constant [64 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::Attribute]\00", align 1

@_ZN5blink9XMLErrorsC1EPNS_8DocumentE = hidden unnamed_addr alias void (%"class.blink::XMLErrors"*, %"class.blink::Document"*), void (%"class.blink::XMLErrors"*, %"class.blink::Document"*)* @_ZN5blink9XMLErrorsC2EPNS_8DocumentE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink9XMLErrorsC2EPNS_8DocumentE(%"class.blink::XMLErrors"* nocapture, %"class.blink::Document"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::Document"* %1, %"class.blink::Document"** %3, align 8
  %4 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 1
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 2
  %6 = bitcast %"class.WTF::TextPosition"* %5 to i64*
  store i64 -1, i64* %6, align 4
  %7 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 4, i32 1
  %9 = bitcast %union.anon* %8 to i8*
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 4, i32 2
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 4, i32 3
  store i8 1, i8* %11, align 4
  %12 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 4, i32 4
  store i8 0, i8* %12, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink9XMLErrors5TraceEPNS_7VisitorE(%"class.blink::XMLErrors"* nocapture readonly, %"class.blink::Visitor"*) local_unnamed_addr #1 align 2 {
  %3 = bitcast %"class.blink::XMLErrors"* %0 to i64*
  %4 = load atomic i64, i64* %3 monotonic, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = inttoptr i64 %4 to i8*
  %8 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %9 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %9, i64 5
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, align 8
  tail call void %11(%"class.blink::Visitor"* %1, i8* nonnull %7, i8* nonnull %7, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8DocumentEE5TraceEPNS_7VisitorEPKv) #9
  br label %12

12:                                               ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9XMLErrors11HandleErrorENS0_9ErrorTypeEPKcii(%"class.blink::XMLErrors"*, i32, i8*, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = add nsw i32 %3, -1
  %7 = add nsw i32 %4, -1
  %8 = zext i32 %7 to i64
  %9 = shl nuw i64 %8, 32
  %10 = zext i32 %6 to i64
  %11 = or i64 %9, %10
  tail call void @_ZN5blink9XMLErrors11HandleErrorENS0_9ErrorTypeEPKcN3WTF12TextPositionE(%"class.blink::XMLErrors"* %0, i32 %1, i8* %2, i64 %11)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9XMLErrors11HandleErrorENS0_9ErrorTypeEPKcN3WTF12TextPositionE(%"class.blink::XMLErrors"*, i32, i8*, i64) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = trunc i64 %3 to i32
  %8 = lshr i64 %3, 32
  %9 = trunc i64 %8 to i32
  %10 = icmp eq i32 %1, 2
  br i1 %10, label %42, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp slt i32 %13, 25
  br i1 %14, label %15, label %68

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 2, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, %7
  br i1 %18, label %68, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 2, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, %9
  br i1 %22, label %68, label %23

23:                                               ; preds = %19
  switch i32 %1, label %62 [
    i32 0, label %24
    i32 1, label %42
  ]

24:                                               ; preds = %23
  %25 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 7) #9
  call void @_ZN5blink9XMLErrors18AppendErrorMessageERKN3WTF6StringENS1_12TextPositionEPKc(%"class.blink::XMLErrors"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %5, i64 %3, i8* %2)
  %26 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %60, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %29
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi i32 [ %37, %36 ], [ %35, %29 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %60

41:                                               ; preds = %38
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #9
  br label %60

42:                                               ; preds = %23, %4
  %43 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 5) #9
  call void @_ZN5blink9XMLErrors18AppendErrorMessageERKN3WTF6StringENS1_12TextPositionEPKc(%"class.blink::XMLErrors"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %6, i64 %3, i8* %2)
  %44 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %60, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  br i1 %51, label %54, label %56

54:                                               ; preds = %47
  %55 = add i32 %53, -1
  store i32 %55, i32* %52, align 4
  br label %56

56:                                               ; preds = %54, %47
  %57 = phi i32 [ %55, %54 ], [ %53, %47 ]
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %56
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %45) #9
  br label %60

60:                                               ; preds = %59, %56, %42, %41, %38, %24
  %61 = phi i8* [ %25, %24 ], [ %25, %38 ], [ %25, %41 ], [ %43, %42 ], [ %43, %56 ], [ %43, %59 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #9
  br label %62

62:                                               ; preds = %60, %23
  %63 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 2, i32 0, i32 0
  store i32 %7, i32* %63, align 4
  %64 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 2, i32 1, i32 0
  store i32 %9, i32* %64, align 4
  %65 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 1
  %66 = load i32, i32* %65, align 8
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %65, align 8
  br label %68

68:                                               ; preds = %19, %15, %62, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9XMLErrors18AppendErrorMessageERKN3WTF6StringENS1_12TextPositionEPKc(%"class.blink::XMLErrors"*, %"class.WTF::String"* nocapture readonly dereferenceable(8), i64, i8*) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %6 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = trunc i64 %2 to i32
  %13 = lshr i64 %2, 32
  %14 = trunc i64 %13 to i32
  %15 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 4
  %16 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %20, label %24

20:                                               ; preds = %4
  %21 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* null, i8** %21, align 8
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %23 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %22, i64* %23, align 8
  br label %31

24:                                               ; preds = %4
  %25 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %18, %"class.WTF::StringImpl"** %25, align 8
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 1
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %30 = bitcast i8** %29 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %28, %"class.WTF::StringImpl"** %30, align 8
  br label %31

31:                                               ; preds = %20, %24
  %32 = phi i32 [ %27, %24 ], [ 0, %20 ]
  %33 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %32, i32* %33, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %15, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #9
  %34 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #9
  %35 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %36 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8** %37, align 8
  %38 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 9, i32* %38, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %15, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #9
  %39 = add nsw i32 %12, 1
  %40 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %40) #9
  %41 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 12
  %42 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 2
  %43 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 3
  %44 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 13
  %45 = icmp slt i32 %39, 0
  %46 = xor i32 %12, -1
  %47 = select i1 %45, i32 %46, i32 %39
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 32, i1 false) #9
  store i8* %41, i8** %42, align 8
  %48 = urem i32 %47, 10
  %49 = udiv i32 %47, 10
  %50 = trunc i32 %48 to i8
  %51 = or i8 %50, 48
  store i8 %51, i8* %41, align 4
  %52 = icmp ugt i32 %47, 9
  br i1 %52, label %53, label %75

53:                                               ; preds = %31
  %54 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 11
  store i8* %54, i8** %42, align 8
  %55 = urem i32 %49, 10
  %56 = trunc i32 %55 to i8
  %57 = or i8 %56, 48
  store i8 %57, i8* %54, align 1
  %58 = icmp ugt i32 %47, 99
  br i1 %58, label %59, label %75

59:                                               ; preds = %53
  %60 = udiv i32 %47, 100
  %61 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 10
  store i8* %61, i8** %42, align 8
  %62 = urem i32 %60, 10
  %63 = trunc i32 %62 to i8
  %64 = or i8 %63, 48
  store i8 %64, i8* %61, align 2
  %65 = icmp ugt i32 %47, 999
  br i1 %65, label %66, label %75

66:                                               ; preds = %59, %66
  %67 = phi i32 [ %69, %66 ], [ %60, %59 ]
  %68 = load i8*, i8** %42, align 8
  %69 = udiv i32 %67, 10
  %70 = getelementptr inbounds i8, i8* %68, i64 -1
  store i8* %70, i8** %42, align 8
  %71 = urem i32 %69, 10
  %72 = trunc i32 %71 to i8
  %73 = or i8 %72, 48
  store i8 %73, i8* %70, align 1
  %74 = icmp ugt i32 %67, 99
  br i1 %74, label %66, label %75

75:                                               ; preds = %66, %59, %53, %31
  br i1 %45, label %76, label %79

76:                                               ; preds = %75
  %77 = load i8*, i8** %42, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 -1
  store i8* %78, i8** %42, align 8
  store i8 45, i8* %78, align 1
  br label %79

79:                                               ; preds = %75, %76
  %80 = bitcast i8** %42 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = ptrtoint i8* %44 to i64
  %83 = sub i64 %82, %81
  %84 = trunc i64 %83 to i32
  store i32 %84, i32* %43, align 8
  %85 = inttoptr i64 %81 to i8*
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %15, i8* %85, i32 %84) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %40) #9
  %86 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %86) #9
  %87 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %88 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %87, i64* %88, align 8
  %89 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8** %89, align 8
  %90 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 11, i32* %90, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %15, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %86) #9
  %91 = add nsw i32 %14, 1
  %92 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %92) #9
  %93 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 12
  %94 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 2
  %95 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 3
  %96 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 13
  %97 = icmp slt i32 %91, 0
  %98 = xor i32 %14, -1
  %99 = select i1 %97, i32 %98, i32 %91
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 -86, i64 32, i1 false) #9
  store i8* %93, i8** %94, align 8
  %100 = urem i32 %99, 10
  %101 = udiv i32 %99, 10
  %102 = trunc i32 %100 to i8
  %103 = or i8 %102, 48
  store i8 %103, i8* %93, align 4
  %104 = icmp ugt i32 %99, 9
  br i1 %104, label %105, label %127

105:                                              ; preds = %79
  %106 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 11
  store i8* %106, i8** %94, align 8
  %107 = urem i32 %101, 10
  %108 = trunc i32 %107 to i8
  %109 = or i8 %108, 48
  store i8 %109, i8* %106, align 1
  %110 = icmp ugt i32 %99, 99
  br i1 %110, label %111, label %127

111:                                              ; preds = %105
  %112 = udiv i32 %99, 100
  %113 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 10
  store i8* %113, i8** %94, align 8
  %114 = urem i32 %112, 10
  %115 = trunc i32 %114 to i8
  %116 = or i8 %115, 48
  store i8 %116, i8* %113, align 2
  %117 = icmp ugt i32 %99, 999
  br i1 %117, label %118, label %127

118:                                              ; preds = %111, %118
  %119 = phi i32 [ %121, %118 ], [ %112, %111 ]
  %120 = load i8*, i8** %94, align 8
  %121 = udiv i32 %119, 10
  %122 = getelementptr inbounds i8, i8* %120, i64 -1
  store i8* %122, i8** %94, align 8
  %123 = urem i32 %121, 10
  %124 = trunc i32 %123 to i8
  %125 = or i8 %124, 48
  store i8 %125, i8* %122, align 1
  %126 = icmp ugt i32 %119, 99
  br i1 %126, label %118, label %127

127:                                              ; preds = %118, %111, %105, %79
  br i1 %97, label %128, label %131

128:                                              ; preds = %127
  %129 = load i8*, i8** %94, align 8
  %130 = getelementptr inbounds i8, i8* %129, i64 -1
  store i8* %130, i8** %94, align 8
  store i8 45, i8* %130, align 1
  br label %131

131:                                              ; preds = %127, %128
  %132 = bitcast i8** %94 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = ptrtoint i8* %96 to i64
  %135 = sub i64 %134, %133
  %136 = trunc i64 %135 to i32
  store i32 %136, i32* %95, align 8
  %137 = inttoptr i64 %133 to i8*
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %15, i8* %137, i32 %136) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %92) #9
  %138 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %138) #9
  %139 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %140 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %139, i64* %140, align 8
  %141 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8** %141, align 8
  %142 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 2, i32* %142, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %15, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %138) #9
  %143 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143) #9
  %144 = icmp eq i8* %3, null
  br i1 %144, label %151, label %145

145:                                              ; preds = %131
  %146 = call i64 @strlen(i8* nonnull %3) #10
  %147 = icmp ult i64 %146, 4294967296
  br i1 %147, label %149, label %148, !prof !2

148:                                              ; preds = %145
  call void @llvm.trap() #9
  unreachable

149:                                              ; preds = %145
  %150 = trunc i64 %146 to i32
  br label %151

151:                                              ; preds = %131, %149
  %152 = phi i32 [ %150, %149 ], [ 0, %131 ]
  %153 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %154 = bitcast %"class.WTF::StringView"* %11 to i64*
  store i64 %153, i64* %154, align 8
  %155 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  store i8* %3, i8** %155, align 8
  %156 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %152, i32* %156, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %15, %"class.WTF::StringView"* nonnull dereferenceable(24) %11)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %143) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %81, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, %10
  %14 = bitcast i8* %12 to i16*
  br i1 %13, label %15, label %20

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %4, %17
  %19 = select i1 %18, %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"* null
  br label %20

20:                                               ; preds = %6, %15
  %21 = phi %"class.WTF::StringImpl"* [ %19, %15 ], [ null, %6 ]
  %22 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 1, !range !3
  %28 = icmp eq i8 %27, 0
  %29 = icmp ne %"class.WTF::StringImpl"* %21, null
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %74

31:                                               ; preds = %25
  %32 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #9
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !4

46:                                               ; preds = %37
  tail call void @llvm.trap() #9
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %31, %47
  %50 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %51 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  store i64 %32, i64* %50, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #9
  br label %67

67:                                               ; preds = %66, %63, %49
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %22, align 8
  %70 = load atomic i32, i32* %33 monotonic, align 4
  %71 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %72 = trunc i32 %70 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %71, align 4
  br label %81

74:                                               ; preds = %20, %25
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %12, i32 %4) #9
  br label %81

80:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %14, i32 %4) #9
  br label %81

81:                                               ; preds = %67, %80, %79, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9XMLErrors23InsertErrorMessageBlockEv(%"class.blink::XMLErrors"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.blink::QualifiedName", align 8
  %3 = alloca %"class.WTF::AtomicString", align 8
  %4 = alloca %"class.blink::CreateElementFlags", align 8
  %5 = alloca %"class.WTF::Vector.559", align 8
  %6 = alloca %"class.blink::Attribute", align 8
  %7 = alloca %"class.WTF::AtomicString", align 8
  %8 = alloca %"class.blink::CreateElementFlags", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = alloca %"class.blink::CreateElementFlags", align 8
  %11 = alloca %"class.WTF::Vector.559", align 8
  %12 = alloca %"class.blink::Attribute", align 8
  %13 = alloca %"class.WTF::AtomicString", align 8
  %14 = alloca %"class.blink::CreateElementFlags", align 8
  %15 = alloca %"class.WTF::String", align 8
  %16 = alloca %"class.blink::CreateElementFlags", align 8
  %17 = alloca %"class.blink::CreateElementFlags", align 8
  %18 = alloca %"class.blink::CreateElementFlags", align 8
  %19 = alloca %"class.blink::CreateElementFlags", align 8
  %20 = alloca %"class.blink::CreateElementFlags", align 8
  %21 = alloca %"class.WTF::String", align 8
  %22 = alloca %"class.blink::CreateElementFlags", align 8
  %23 = alloca %"class.WTF::String", align 8
  %24 = alloca %"class.WTF::Vector.559", align 8
  %25 = alloca %"class.blink::Attribute", align 8
  %26 = alloca %"class.WTF::AtomicString", align 8
  %27 = alloca %"class.blink::CreateElementFlags", align 8
  %28 = alloca %"class.WTF::String", align 8
  %29 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %31 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %30, i64 0, i32 47, i32 0, i32 0
  %32 = load %"class.blink::Element"*, %"class.blink::Element"** %31, align 8
  %33 = icmp eq %"class.blink::Element"* %32, null
  br i1 %33, label %34, label %55

34:                                               ; preds = %1
  %35 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kHTMLTagE to %"class.blink::QualifiedName"**), align 8
  %36 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %16, i64 0, i32 0
  store i8 1, i8* %36, align 8
  %37 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %16, i64 0, i32 1, i64 0
  %38 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %16, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 -86, i64 7, i1 false)
  store %"class.blink::Document"* %30, %"class.blink::Document"** %38, align 8
  %39 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %16, i64 0, i32 3
  store i8 2, i8* %39, align 8
  %40 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %16, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 -86, i64 7, i1 false)
  %41 = tail call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %30, %"class.blink::QualifiedName"* dereferenceable(8) %35, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %16) #9
  %42 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %43 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kBodyTagE to %"class.blink::QualifiedName"**), align 8
  %44 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %17, i64 0, i32 0
  store i8 1, i8* %44, align 8
  %45 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %17, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %17, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 -86, i64 7, i1 false)
  store %"class.blink::Document"* %30, %"class.blink::Document"** %46, align 8
  %47 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %17, i64 0, i32 3
  store i8 2, i8* %47, align 8
  %48 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %17, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 -86, i64 7, i1 false)
  %49 = tail call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %42, %"class.blink::QualifiedName"* dereferenceable(8) %43, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %17) #9
  %50 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %41, i64 0, i32 0
  %51 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %49, i64 0, i32 0, i32 0
  tail call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %50, %"class.blink::Node"* %51) #9
  %52 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %53 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %52, i64 0, i32 0
  %54 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %41, i64 0, i32 0, i32 0
  tail call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %53, %"class.blink::Node"* %54) #9
  br label %134

55:                                               ; preds = %1
  %56 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %32, i64 0, i32 2, i32 0, i32 0
  %57 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %56, align 8
  %58 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink9svg_names13kNamespaceURIE, align 8
  %59 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %57, i64 0, i32 4, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %58, i64 0, i32 0, i32 0, i32 0
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  %63 = icmp eq %"class.WTF::StringImpl"* %60, %62
  br i1 %63, label %64, label %134

64:                                               ; preds = %55
  %65 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kHTMLTagE to %"class.blink::QualifiedName"**), align 8
  %66 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %18, i64 0, i32 0
  store i8 1, i8* %66, align 8
  %67 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %18, i64 0, i32 1, i64 0
  %68 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %18, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %67, i8 -86, i64 7, i1 false)
  store %"class.blink::Document"* %30, %"class.blink::Document"** %68, align 8
  %69 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %18, i64 0, i32 3
  store i8 2, i8* %69, align 8
  %70 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %18, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %70, i8 -86, i64 7, i1 false)
  %71 = tail call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %30, %"class.blink::QualifiedName"* dereferenceable(8) %65, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %18) #9
  %72 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %73 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kHeadTagE to %"class.blink::QualifiedName"**), align 8
  %74 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %19, i64 0, i32 0
  store i8 1, i8* %74, align 8
  %75 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %19, i64 0, i32 1, i64 0
  %76 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %19, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 -86, i64 7, i1 false)
  store %"class.blink::Document"* %30, %"class.blink::Document"** %76, align 8
  %77 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %19, i64 0, i32 3
  store i8 2, i8* %77, align 8
  %78 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %19, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 -86, i64 7, i1 false)
  %79 = tail call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %72, %"class.blink::QualifiedName"* dereferenceable(8) %73, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %19) #9
  %80 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %81 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kStyleTagE to %"class.blink::QualifiedName"**), align 8
  %82 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %20, i64 0, i32 0
  store i8 1, i8* %82, align 8
  %83 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %20, i64 0, i32 1, i64 0
  %84 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %20, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %83, i8 -86, i64 7, i1 false)
  store %"class.blink::Document"* %30, %"class.blink::Document"** %84, align 8
  %85 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %20, i64 0, i32 3
  store i8 2, i8* %85, align 8
  %86 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %20, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %86, i8 -86, i64 7, i1 false)
  %87 = tail call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %80, %"class.blink::QualifiedName"* dereferenceable(8) %81, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %20) #9
  %88 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %79, i64 0, i32 0
  %89 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %87, i64 0, i32 0, i32 0
  tail call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %88, %"class.blink::Node"* %89) #9
  %90 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %87, i64 0, i32 0
  %91 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %92 = bitcast %"class.WTF::String"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %21, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.5, i64 0, i64 0), i64 75) #9
  %93 = call %"class.blink::Text"* @_ZN5blink8Document14createTextNodeERKN3WTF6StringE(%"class.blink::Document"* %91, %"class.WTF::String"* nonnull dereferenceable(8) %21) #9
  %94 = getelementptr inbounds %"class.blink::Text", %"class.blink::Text"* %93, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %90, %"class.blink::Node"* %94) #9
  %95 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %21, i64 0, i32 0, i32 0
  %96 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %95, align 8
  %97 = icmp eq %"class.WTF::StringImpl"* %96, null
  br i1 %97, label %111, label %98

98:                                               ; preds = %64
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 0
  %104 = load i32, i32* %103, align 4
  br i1 %102, label %105, label %107

105:                                              ; preds = %98
  %106 = add i32 %104, -1
  store i32 %106, i32* %103, align 4
  br label %107

107:                                              ; preds = %105, %98
  %108 = phi i32 [ %106, %105 ], [ %104, %98 ]
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %107
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %96) #9
  br label %111

111:                                              ; preds = %64, %107, %110
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #9
  %112 = bitcast %"class.blink::Element"* %87 to void (%"class.blink::Element"*)***
  %113 = load void (%"class.blink::Element"*)**, void (%"class.blink::Element"*)*** %112, align 8
  %114 = getelementptr inbounds void (%"class.blink::Element"*)*, void (%"class.blink::Element"*)** %113, i64 111
  %115 = load void (%"class.blink::Element"*)*, void (%"class.blink::Element"*)** %114, align 8
  call void %115(%"class.blink::Element"* %87) #9
  %116 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %71, i64 0, i32 0
  %117 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %79, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %116, %"class.blink::Node"* %117) #9
  %118 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %119 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kBodyTagE to %"class.blink::QualifiedName"**), align 8
  %120 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %22, i64 0, i32 0
  store i8 1, i8* %120, align 8
  %121 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %22, i64 0, i32 1, i64 0
  %122 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %22, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %121, i8 -86, i64 7, i1 false)
  store %"class.blink::Document"* %30, %"class.blink::Document"** %122, align 8
  %123 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %22, i64 0, i32 3
  store i8 2, i8* %123, align 8
  %124 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %22, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %124, i8 -86, i64 7, i1 false)
  %125 = call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %118, %"class.blink::QualifiedName"* dereferenceable(8) %119, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %22) #9
  %126 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %125, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %116, %"class.blink::Node"* %126) #9
  %127 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %128 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %127, i64 0, i32 0
  %129 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %32, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserRemoveChildERNS_4NodeE(%"class.blink::ContainerNode"* %128, %"class.blink::Node"* dereferenceable(64) %129) #9
  %130 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %125, i64 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %130, %"class.blink::Node"* %129) #9
  %131 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %132 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %131, i64 0, i32 0
  %133 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %71, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %132, %"class.blink::Node"* %133) #9
  br label %134

134:                                              ; preds = %55, %111, %34
  %135 = phi %"class.blink::Element"* [ %125, %111 ], [ %32, %55 ], [ %49, %34 ]
  %136 = bitcast %"class.WTF::String"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %136) #9
  %137 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %23, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %137, align 8
  %138 = getelementptr inbounds %"class.blink::XMLErrors", %"class.blink::XMLErrors"* %0, i64 0, i32 4
  %139 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* %138) #9
  store %"class.WTF::StringImpl"* %139, %"class.WTF::StringImpl"** %137, align 8
  %140 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %141 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %141)
  %142 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %142)
  %143 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143)
  %144 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %14, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %144)
  %145 = bitcast %"class.blink::QualifiedName"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %145) #9
  %146 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %147 = bitcast %"class.WTF::AtomicString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %147) #9
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i64 11) #9
  %148 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink10html_names17xhtmlNamespaceURIE, align 8
  call void @_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"* nonnull %2, %"class.WTF::AtomicString"* dereferenceable(8) %146, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %3, %"class.WTF::AtomicString"* dereferenceable(8) %148) #9
  store i8 1, i8* %141, align 8
  %149 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %4, i64 0, i32 1, i64 0
  %150 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %149, i8 -86, i64 7, i1 false) #9
  store %"class.blink::Document"* %140, %"class.blink::Document"** %150, align 8
  %151 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %4, i64 0, i32 3
  store i8 2, i8* %151, align 8
  %152 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %4, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %152, i8 -86, i64 7, i1 false) #9
  %153 = call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %140, %"class.blink::QualifiedName"* nonnull dereferenceable(8) %2, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %4) #9
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %2) #9
  %154 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  %155 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %154, align 8
  %156 = icmp eq %"class.WTF::StringImpl"* %155, null
  br i1 %156, label %170, label %157

157:                                              ; preds = %134
  %158 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %155, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %159 = load atomic i32, i32* %158 monotonic, align 4
  %160 = and i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %155, i64 0, i32 0
  %163 = load i32, i32* %162, align 4
  br i1 %161, label %164, label %166

164:                                              ; preds = %157
  %165 = add i32 %163, -1
  store i32 %165, i32* %162, align 4
  br label %166

166:                                              ; preds = %164, %157
  %167 = phi i32 [ %165, %164 ], [ %163, %157 ]
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %170

169:                                              ; preds = %166
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %155) #9
  br label %170

170:                                              ; preds = %169, %166, %134
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %147) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %145) #9
  %171 = bitcast %"class.WTF::Vector.559"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %171) #9
  %172 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %5, i64 0, i32 0, i32 0, i32 0
  %173 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %5, i64 0, i32 0, i32 0, i32 1
  %174 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %171, i8 0, i64 16, i1 false) #9
  %175 = bitcast %"class.blink::Attribute"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %175) #9
  %176 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kStyleAttrE, align 8
  %177 = bitcast %"class.WTF::AtomicString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %177) #9
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %7, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.9, i64 0, i64 0), i64 129) #9
  %178 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %176, i64 0, i32 0, i32 0
  %179 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %178, align 8
  %180 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %6, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %179, %"class.blink::QualifiedName::QualifiedNameImpl"** %180, align 8
  %181 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %179, null
  br i1 %181, label %189, label %182

182:                                              ; preds = %170
  %183 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %179, i64 0, i32 1
  %184 = load i32, i32* %183, align 4
  %185 = and i32 %184, 16777216
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %189

187:                                              ; preds = %182
  %188 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %179, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %188) #9
  br label %189

189:                                              ; preds = %187, %182, %170
  %190 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %7, i64 0, i32 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %6, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %191, %"class.WTF::StringImpl"** %192, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %193, label %211, label %194

194:                                              ; preds = %189
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i33
  %203 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %202, i33 1) #9
  %204 = extractvalue { i33, i1 } %203, 1
  %205 = extractvalue { i33, i1 } %203, 0
  %206 = icmp slt i33 %205, 0
  %207 = or i1 %204, %206
  br i1 %207, label %208, label %209, !prof !4

208:                                              ; preds = %199
  call void @llvm.trap() #9
  unreachable

209:                                              ; preds = %199
  %210 = trunc i33 %205 to i32
  store i32 %210, i32* %200, align 4
  br label %211

211:                                              ; preds = %209, %194, %189
  %212 = load i32, i32* %174, align 4
  %213 = load i32, i32* %173, align 8
  %214 = icmp eq i32 %212, %213
  br i1 %214, label %237, label %215, !prof !4

215:                                              ; preds = %211
  %216 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %172, align 8
  %217 = zext i32 %212 to i64
  %218 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %180, align 8
  %219 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %216, i64 %217, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %218, %"class.blink::QualifiedName::QualifiedNameImpl"** %219, align 8
  %220 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %218, null
  br i1 %220, label %228, label %221

221:                                              ; preds = %215
  %222 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %218, i64 0, i32 1
  %223 = load i32, i32* %222, align 4
  %224 = and i32 %223, 16777216
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %228

226:                                              ; preds = %221
  %227 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %218, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %227) #9
  br label %228

228:                                              ; preds = %226, %221, %215
  %229 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %216, i64 %217, i32 1
  %230 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %6, i64 0, i32 1
  %231 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %230, i64 0, i32 0, i32 0, i32 0
  %232 = bitcast %"class.WTF::AtomicString"* %230 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = bitcast %"class.WTF::AtomicString"* %229 to i64*
  store i64 %233, i64* %234, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %231, align 8
  %235 = load i32, i32* %174, align 4
  %236 = add i32 %235, 1
  store i32 %236, i32* %174, align 4
  br label %253

237:                                              ; preds = %211
  call void @_ZN3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.559"* nonnull %5, %"class.blink::Attribute"* nonnull dereferenceable(16) %6) #9
  %238 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %192, align 8
  %239 = icmp eq %"class.WTF::StringImpl"* %238, null
  br i1 %239, label %253, label %240

240:                                              ; preds = %237
  %241 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %238, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %242 = load atomic i32, i32* %241 monotonic, align 4
  %243 = and i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %238, i64 0, i32 0
  %246 = load i32, i32* %245, align 4
  br i1 %244, label %247, label %249

247:                                              ; preds = %240
  %248 = add i32 %246, -1
  store i32 %248, i32* %245, align 4
  br label %249

249:                                              ; preds = %247, %240
  %250 = phi i32 [ %248, %247 ], [ %246, %240 ]
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %252, label %253

252:                                              ; preds = %249
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %238) #9
  br label %253

253:                                              ; preds = %252, %249, %237, %228
  %254 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %6, i64 0, i32 0
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %254) #9
  %255 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %256 = icmp eq %"class.WTF::StringImpl"* %255, null
  br i1 %256, label %270, label %257

257:                                              ; preds = %253
  %258 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %255, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %259 = load atomic i32, i32* %258 monotonic, align 4
  %260 = and i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %255, i64 0, i32 0
  %263 = load i32, i32* %262, align 4
  br i1 %261, label %264, label %266

264:                                              ; preds = %257
  %265 = add i32 %263, -1
  store i32 %265, i32* %262, align 4
  br label %266

266:                                              ; preds = %264, %257
  %267 = phi i32 [ %265, %264 ], [ %263, %257 ]
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %270

269:                                              ; preds = %266
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %255) #9
  br label %270

270:                                              ; preds = %269, %266, %253
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %177) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %175) #9
  call void @_ZN5blink7Element19ParserSetAttributesERKN3WTF6VectorINS_9AttributeELj0ENS1_18PartitionAllocatorEEE(%"class.blink::Element"* %153, %"class.WTF::Vector.559"* nonnull dereferenceable(16) %5) #9
  %271 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kH3TagE to %"class.blink::QualifiedName"**), align 8
  store i8 1, i8* %142, align 8
  %272 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %8, i64 0, i32 1, i64 0
  %273 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %8, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %272, i8 -86, i64 7, i1 false) #9
  store %"class.blink::Document"* %140, %"class.blink::Document"** %273, align 8
  %274 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %8, i64 0, i32 3
  store i8 2, i8* %274, align 8
  %275 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %8, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %275, i8 -86, i64 7, i1 false) #9
  %276 = call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %140, %"class.blink::QualifiedName"* dereferenceable(8) %271, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %8) #9
  %277 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %153, i64 0, i32 0
  %278 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %276, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %277, %"class.blink::Node"* %278) #9
  %279 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %276, i64 0, i32 0
  %280 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %280) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %9, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.10, i64 0, i64 0), i64 40) #9
  %281 = call %"class.blink::Text"* @_ZN5blink8Document14createTextNodeERKN3WTF6StringE(%"class.blink::Document"* %140, %"class.WTF::String"* nonnull dereferenceable(8) %9) #9
  %282 = getelementptr inbounds %"class.blink::Text", %"class.blink::Text"* %281, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %279, %"class.blink::Node"* %282) #9
  %283 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  %284 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %283, align 8
  %285 = icmp eq %"class.WTF::StringImpl"* %284, null
  br i1 %285, label %299, label %286

286:                                              ; preds = %270
  %287 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %284, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %288 = load atomic i32, i32* %287 monotonic, align 4
  %289 = and i32 %288, 2
  %290 = icmp eq i32 %289, 0
  %291 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %284, i64 0, i32 0
  %292 = load i32, i32* %291, align 4
  br i1 %290, label %293, label %295

293:                                              ; preds = %286
  %294 = add i32 %292, -1
  store i32 %294, i32* %291, align 4
  br label %295

295:                                              ; preds = %293, %286
  %296 = phi i32 [ %294, %293 ], [ %292, %286 ]
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %299

298:                                              ; preds = %295
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %284) #9
  br label %299

299:                                              ; preds = %298, %295, %270
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %280) #9
  %300 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names7kDivTagE to %"class.blink::QualifiedName"**), align 8
  store i8 1, i8* %143, align 8
  %301 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %10, i64 0, i32 1, i64 0
  %302 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %10, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %301, i8 -86, i64 7, i1 false) #9
  store %"class.blink::Document"* %140, %"class.blink::Document"** %302, align 8
  %303 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %10, i64 0, i32 3
  store i8 2, i8* %303, align 8
  %304 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %10, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %304, i8 -86, i64 7, i1 false) #9
  %305 = call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %140, %"class.blink::QualifiedName"* dereferenceable(8) %300, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %10) #9
  %306 = bitcast %"class.WTF::Vector.559"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %306) #9
  %307 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %11, i64 0, i32 0, i32 0, i32 0
  %308 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %11, i64 0, i32 0, i32 0, i32 1
  %309 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %11, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %306, i8 0, i64 16, i1 false) #9
  %310 = bitcast %"class.blink::Attribute"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %310) #9
  %311 = bitcast %"class.WTF::AtomicString"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %311) #9
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %13, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0), i64 36) #9
  %312 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %178, align 8
  %313 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %12, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %312, %"class.blink::QualifiedName::QualifiedNameImpl"** %313, align 8
  %314 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %312, null
  br i1 %314, label %322, label %315

315:                                              ; preds = %299
  %316 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %312, i64 0, i32 1
  %317 = load i32, i32* %316, align 4
  %318 = and i32 %317, 16777216
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %320, label %322

320:                                              ; preds = %315
  %321 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %312, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %321) #9
  br label %322

322:                                              ; preds = %320, %315, %299
  %323 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %13, i64 0, i32 0, i32 0, i32 0
  %324 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %323, align 8
  %325 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %12, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %324, %"class.WTF::StringImpl"** %325, align 8
  %326 = icmp eq %"class.WTF::StringImpl"* %324, null
  br i1 %326, label %344, label %327

327:                                              ; preds = %322
  %328 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %324, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %329 = load atomic i32, i32* %328 monotonic, align 4
  %330 = and i32 %329, 2
  %331 = icmp eq i32 %330, 0
  br i1 %331, label %332, label %344

332:                                              ; preds = %327
  %333 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %324, i64 0, i32 0
  %334 = load i32, i32* %333, align 4
  %335 = zext i32 %334 to i33
  %336 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %335, i33 1) #9
  %337 = extractvalue { i33, i1 } %336, 1
  %338 = extractvalue { i33, i1 } %336, 0
  %339 = icmp slt i33 %338, 0
  %340 = or i1 %337, %339
  br i1 %340, label %341, label %342, !prof !4

341:                                              ; preds = %332
  call void @llvm.trap() #9
  unreachable

342:                                              ; preds = %332
  %343 = trunc i33 %338 to i32
  store i32 %343, i32* %333, align 4
  br label %344

344:                                              ; preds = %342, %327, %322
  %345 = load i32, i32* %309, align 4
  %346 = load i32, i32* %308, align 8
  %347 = icmp eq i32 %345, %346
  br i1 %347, label %370, label %348, !prof !4

348:                                              ; preds = %344
  %349 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %307, align 8
  %350 = zext i32 %345 to i64
  %351 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %313, align 8
  %352 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %349, i64 %350, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %351, %"class.blink::QualifiedName::QualifiedNameImpl"** %352, align 8
  %353 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %351, null
  br i1 %353, label %361, label %354

354:                                              ; preds = %348
  %355 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %351, i64 0, i32 1
  %356 = load i32, i32* %355, align 4
  %357 = and i32 %356, 16777216
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %359, label %361

359:                                              ; preds = %354
  %360 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %351, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %360) #9
  br label %361

361:                                              ; preds = %359, %354, %348
  %362 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %349, i64 %350, i32 1
  %363 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %12, i64 0, i32 1
  %364 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %363, i64 0, i32 0, i32 0, i32 0
  %365 = bitcast %"class.WTF::AtomicString"* %363 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = bitcast %"class.WTF::AtomicString"* %362 to i64*
  store i64 %366, i64* %367, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %364, align 8
  %368 = load i32, i32* %309, align 4
  %369 = add i32 %368, 1
  store i32 %369, i32* %309, align 4
  br label %386

370:                                              ; preds = %344
  call void @_ZN3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.559"* nonnull %11, %"class.blink::Attribute"* nonnull dereferenceable(16) %12) #9
  %371 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %325, align 8
  %372 = icmp eq %"class.WTF::StringImpl"* %371, null
  br i1 %372, label %386, label %373

373:                                              ; preds = %370
  %374 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %371, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %375 = load atomic i32, i32* %374 monotonic, align 4
  %376 = and i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %371, i64 0, i32 0
  %379 = load i32, i32* %378, align 4
  br i1 %377, label %380, label %382

380:                                              ; preds = %373
  %381 = add i32 %379, -1
  store i32 %381, i32* %378, align 4
  br label %382

382:                                              ; preds = %380, %373
  %383 = phi i32 [ %381, %380 ], [ %379, %373 ]
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %385, label %386

385:                                              ; preds = %382
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %371) #9
  br label %386

386:                                              ; preds = %385, %382, %370, %361
  %387 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %12, i64 0, i32 0
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %387) #9
  %388 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %323, align 8
  %389 = icmp eq %"class.WTF::StringImpl"* %388, null
  br i1 %389, label %403, label %390

390:                                              ; preds = %386
  %391 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %388, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %392 = load atomic i32, i32* %391 monotonic, align 4
  %393 = and i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %388, i64 0, i32 0
  %396 = load i32, i32* %395, align 4
  br i1 %394, label %397, label %399

397:                                              ; preds = %390
  %398 = add i32 %396, -1
  store i32 %398, i32* %395, align 4
  br label %399

399:                                              ; preds = %397, %390
  %400 = phi i32 [ %398, %397 ], [ %396, %390 ]
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %402, label %403

402:                                              ; preds = %399
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %388) #9
  br label %403

403:                                              ; preds = %402, %399, %386
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %311) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %310) #9
  call void @_ZN5blink7Element19ParserSetAttributesERKN3WTF6VectorINS_9AttributeELj0ENS1_18PartitionAllocatorEEE(%"class.blink::Element"* %305, %"class.WTF::Vector.559"* nonnull dereferenceable(16) %11) #9
  %404 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %305, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %277, %"class.blink::Node"* %404) #9
  %405 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %305, i64 0, i32 0
  %406 = call %"class.blink::Text"* @_ZN5blink8Document14createTextNodeERKN3WTF6StringE(%"class.blink::Document"* %140, %"class.WTF::String"* nonnull dereferenceable(8) %23) #9
  %407 = getelementptr inbounds %"class.blink::Text", %"class.blink::Text"* %406, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %405, %"class.blink::Node"* %407) #9
  store i8 1, i8* %144, align 8
  %408 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %14, i64 0, i32 1, i64 0
  %409 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %14, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %408, i8 -86, i64 7, i1 false) #9
  store %"class.blink::Document"* %140, %"class.blink::Document"** %409, align 8
  %410 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %14, i64 0, i32 3
  store i8 2, i8* %410, align 8
  %411 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %14, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %411, i8 -86, i64 7, i1 false) #9
  %412 = call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %140, %"class.blink::QualifiedName"* dereferenceable(8) %271, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %14) #9
  %413 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %412, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %277, %"class.blink::Node"* %413) #9
  %414 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %412, i64 0, i32 0
  %415 = bitcast %"class.WTF::String"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %415) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %15, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.12, i64 0, i64 0), i64 55) #9
  %416 = call %"class.blink::Text"* @_ZN5blink8Document14createTextNodeERKN3WTF6StringE(%"class.blink::Document"* %140, %"class.WTF::String"* nonnull dereferenceable(8) %15) #9
  %417 = getelementptr inbounds %"class.blink::Text", %"class.blink::Text"* %416, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %414, %"class.blink::Node"* %417) #9
  %418 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  %419 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %418, align 8
  %420 = icmp eq %"class.WTF::StringImpl"* %419, null
  br i1 %420, label %434, label %421

421:                                              ; preds = %403
  %422 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %419, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %423 = load atomic i32, i32* %422 monotonic, align 4
  %424 = and i32 %423, 2
  %425 = icmp eq i32 %424, 0
  %426 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %419, i64 0, i32 0
  %427 = load i32, i32* %426, align 4
  br i1 %425, label %428, label %430

428:                                              ; preds = %421
  %429 = add i32 %427, -1
  store i32 %429, i32* %426, align 4
  br label %430

430:                                              ; preds = %428, %421
  %431 = phi i32 [ %429, %428 ], [ %427, %421 ]
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %433, label %434

433:                                              ; preds = %430
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %419) #9
  br label %434

434:                                              ; preds = %433, %430, %403
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %415) #9
  %435 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %307, align 8
  %436 = icmp eq %"class.blink::Attribute"* %435, null
  br i1 %436, label %471, label %437, !prof !2

437:                                              ; preds = %434
  %438 = bitcast %"class.blink::Attribute"* %435 to i8*
  %439 = load i32, i32* %309, align 4
  %440 = icmp eq i32 %439, 0
  br i1 %440, label %469, label %441, !prof !4

441:                                              ; preds = %437
  %442 = zext i32 %439 to i64
  %443 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %435, i64 %442
  br label %444

444:                                              ; preds = %462, %441
  %445 = phi %"class.blink::Attribute"* [ %464, %462 ], [ %435, %441 ]
  %446 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %445, i64 0, i32 1, i32 0, i32 0, i32 0
  %447 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %446, align 8
  %448 = icmp eq %"class.WTF::StringImpl"* %447, null
  br i1 %448, label %462, label %449

449:                                              ; preds = %444
  %450 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %447, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %451 = load atomic i32, i32* %450 monotonic, align 4
  %452 = and i32 %451, 2
  %453 = icmp eq i32 %452, 0
  %454 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %447, i64 0, i32 0
  %455 = load i32, i32* %454, align 4
  br i1 %453, label %456, label %458

456:                                              ; preds = %449
  %457 = add i32 %455, -1
  store i32 %457, i32* %454, align 4
  br label %458

458:                                              ; preds = %456, %449
  %459 = phi i32 [ %457, %456 ], [ %455, %449 ]
  %460 = icmp eq i32 %459, 0
  br i1 %460, label %461, label %462

461:                                              ; preds = %458
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %447) #9
  br label %462

462:                                              ; preds = %461, %458, %444
  %463 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %445, i64 0, i32 0
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %463) #9
  %464 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %445, i64 1
  %465 = icmp eq %"class.blink::Attribute"* %464, %443
  br i1 %465, label %466, label %444

466:                                              ; preds = %462
  store i32 0, i32* %309, align 4
  %467 = bitcast %"class.WTF::Vector.559"* %11 to i8**
  %468 = load i8*, i8** %467, align 8
  br label %469

469:                                              ; preds = %466, %437
  %470 = phi i8* [ %468, %466 ], [ %438, %437 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %470) #9
  store %"class.blink::Attribute"* null, %"class.blink::Attribute"** %307, align 8
  br label %471

471:                                              ; preds = %469, %434
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %306) #9
  %472 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %172, align 8
  %473 = icmp eq %"class.blink::Attribute"* %472, null
  br i1 %473, label %508, label %474, !prof !2

474:                                              ; preds = %471
  %475 = bitcast %"class.blink::Attribute"* %472 to i8*
  %476 = load i32, i32* %174, align 4
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %506, label %478, !prof !4

478:                                              ; preds = %474
  %479 = zext i32 %476 to i64
  %480 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %472, i64 %479
  br label %481

481:                                              ; preds = %499, %478
  %482 = phi %"class.blink::Attribute"* [ %501, %499 ], [ %472, %478 ]
  %483 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %482, i64 0, i32 1, i32 0, i32 0, i32 0
  %484 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %483, align 8
  %485 = icmp eq %"class.WTF::StringImpl"* %484, null
  br i1 %485, label %499, label %486

486:                                              ; preds = %481
  %487 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %488 = load atomic i32, i32* %487 monotonic, align 4
  %489 = and i32 %488, 2
  %490 = icmp eq i32 %489, 0
  %491 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 0
  %492 = load i32, i32* %491, align 4
  br i1 %490, label %493, label %495

493:                                              ; preds = %486
  %494 = add i32 %492, -1
  store i32 %494, i32* %491, align 4
  br label %495

495:                                              ; preds = %493, %486
  %496 = phi i32 [ %494, %493 ], [ %492, %486 ]
  %497 = icmp eq i32 %496, 0
  br i1 %497, label %498, label %499

498:                                              ; preds = %495
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %484) #9
  br label %499

499:                                              ; preds = %498, %495, %481
  %500 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %482, i64 0, i32 0
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %500) #9
  %501 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %482, i64 1
  %502 = icmp eq %"class.blink::Attribute"* %501, %480
  br i1 %502, label %503, label %481

503:                                              ; preds = %499
  store i32 0, i32* %174, align 4
  %504 = bitcast %"class.WTF::Vector.559"* %5 to i8**
  %505 = load i8*, i8** %504, align 8
  br label %506

506:                                              ; preds = %503, %474
  %507 = phi i8* [ %505, %503 ], [ %475, %474 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %507) #9
  store %"class.blink::Attribute"* null, %"class.blink::Attribute"** %172, align 8
  br label %508

508:                                              ; preds = %471, %506
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %171) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %141)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %142)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %143)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %144)
  %509 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %510 = call zeroext i1 @_ZN5blink12DocumentXSLT26HasTransformSourceDocumentERNS_8DocumentE(%"class.blink::Document"* dereferenceable(2848) %509) #9
  br i1 %510, label %511, label %678

511:                                              ; preds = %508
  %512 = bitcast %"class.WTF::Vector.559"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %512) #9
  %513 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %24, i64 0, i32 0, i32 0, i32 0
  %514 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %24, i64 0, i32 0, i32 0, i32 1
  %515 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %24, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %512, i8 0, i64 16, i1 false) #9
  %516 = bitcast %"class.blink::Attribute"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %516) #9
  %517 = bitcast %"class.WTF::AtomicString"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %517) #9
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %26, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i64 19) #9
  %518 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %178, align 8
  %519 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %25, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %518, %"class.blink::QualifiedName::QualifiedNameImpl"** %519, align 8
  %520 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %518, null
  br i1 %520, label %528, label %521

521:                                              ; preds = %511
  %522 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %518, i64 0, i32 1
  %523 = load i32, i32* %522, align 4
  %524 = and i32 %523, 16777216
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %526, label %528

526:                                              ; preds = %521
  %527 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %518, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %527) #9
  br label %528

528:                                              ; preds = %526, %521, %511
  %529 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %26, i64 0, i32 0, i32 0, i32 0
  %530 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %529, align 8
  %531 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %25, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %530, %"class.WTF::StringImpl"** %531, align 8
  %532 = icmp eq %"class.WTF::StringImpl"* %530, null
  br i1 %532, label %550, label %533

533:                                              ; preds = %528
  %534 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %530, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %535 = load atomic i32, i32* %534 monotonic, align 4
  %536 = and i32 %535, 2
  %537 = icmp eq i32 %536, 0
  br i1 %537, label %538, label %550

538:                                              ; preds = %533
  %539 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %530, i64 0, i32 0
  %540 = load i32, i32* %539, align 4
  %541 = zext i32 %540 to i33
  %542 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %541, i33 1) #9
  %543 = extractvalue { i33, i1 } %542, 1
  %544 = extractvalue { i33, i1 } %542, 0
  %545 = icmp slt i33 %544, 0
  %546 = or i1 %543, %545
  br i1 %546, label %547, label %548, !prof !4

547:                                              ; preds = %538
  call void @llvm.trap() #9
  unreachable

548:                                              ; preds = %538
  %549 = trunc i33 %544 to i32
  store i32 %549, i32* %539, align 4
  br label %550

550:                                              ; preds = %528, %533, %548
  %551 = load i32, i32* %515, align 4
  %552 = load i32, i32* %514, align 8
  %553 = icmp eq i32 %551, %552
  br i1 %553, label %576, label %554, !prof !4

554:                                              ; preds = %550
  %555 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %513, align 8
  %556 = zext i32 %551 to i64
  %557 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %519, align 8
  %558 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %555, i64 %556, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %557, %"class.blink::QualifiedName::QualifiedNameImpl"** %558, align 8
  %559 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %557, null
  br i1 %559, label %567, label %560

560:                                              ; preds = %554
  %561 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %557, i64 0, i32 1
  %562 = load i32, i32* %561, align 4
  %563 = and i32 %562, 16777216
  %564 = icmp eq i32 %563, 0
  br i1 %564, label %565, label %567

565:                                              ; preds = %560
  %566 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %557, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %566) #9
  br label %567

567:                                              ; preds = %554, %560, %565
  %568 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %555, i64 %556, i32 1
  %569 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %25, i64 0, i32 1
  %570 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %569, i64 0, i32 0, i32 0, i32 0
  %571 = bitcast %"class.WTF::AtomicString"* %569 to i64*
  %572 = load i64, i64* %571, align 8
  %573 = bitcast %"class.WTF::AtomicString"* %568 to i64*
  store i64 %572, i64* %573, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %570, align 8
  %574 = load i32, i32* %515, align 4
  %575 = add i32 %574, 1
  store i32 %575, i32* %515, align 4
  br label %592

576:                                              ; preds = %550
  call void @_ZN3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.559"* nonnull %24, %"class.blink::Attribute"* nonnull dereferenceable(16) %25) #9
  %577 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %531, align 8
  %578 = icmp eq %"class.WTF::StringImpl"* %577, null
  br i1 %578, label %592, label %579

579:                                              ; preds = %576
  %580 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %577, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %581 = load atomic i32, i32* %580 monotonic, align 4
  %582 = and i32 %581, 2
  %583 = icmp eq i32 %582, 0
  %584 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %577, i64 0, i32 0
  %585 = load i32, i32* %584, align 4
  br i1 %583, label %586, label %588

586:                                              ; preds = %579
  %587 = add i32 %585, -1
  store i32 %587, i32* %584, align 4
  br label %588

588:                                              ; preds = %586, %579
  %589 = phi i32 [ %587, %586 ], [ %585, %579 ]
  %590 = icmp eq i32 %589, 0
  br i1 %590, label %591, label %592

591:                                              ; preds = %588
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %577) #9
  br label %592

592:                                              ; preds = %567, %576, %588, %591
  %593 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %25, i64 0, i32 0
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %593) #9
  %594 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %529, align 8
  %595 = icmp eq %"class.WTF::StringImpl"* %594, null
  br i1 %595, label %609, label %596

596:                                              ; preds = %592
  %597 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %594, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %598 = load atomic i32, i32* %597 monotonic, align 4
  %599 = and i32 %598, 2
  %600 = icmp eq i32 %599, 0
  %601 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %594, i64 0, i32 0
  %602 = load i32, i32* %601, align 4
  br i1 %600, label %603, label %605

603:                                              ; preds = %596
  %604 = add i32 %602, -1
  store i32 %604, i32* %601, align 4
  br label %605

605:                                              ; preds = %603, %596
  %606 = phi i32 [ %604, %603 ], [ %602, %596 ]
  %607 = icmp eq i32 %606, 0
  br i1 %607, label %608, label %609

608:                                              ; preds = %605
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %594) #9
  br label %609

609:                                              ; preds = %592, %605, %608
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %517) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %516) #9
  %610 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %611 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names5kPTagE to %"class.blink::QualifiedName"**), align 8
  %612 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %27, i64 0, i32 0
  store i8 1, i8* %612, align 8
  %613 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %27, i64 0, i32 1, i64 0
  %614 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %27, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %613, i8 -86, i64 7, i1 false)
  store %"class.blink::Document"* %30, %"class.blink::Document"** %614, align 8
  %615 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %27, i64 0, i32 3
  store i8 2, i8* %615, align 8
  %616 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %27, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %616, i8 -86, i64 7, i1 false)
  %617 = call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %610, %"class.blink::QualifiedName"* dereferenceable(8) %611, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %27) #9
  call void @_ZN5blink7Element19ParserSetAttributesERKN3WTF6VectorINS_9AttributeELj0ENS1_18PartitionAllocatorEEE(%"class.blink::Element"* %617, %"class.WTF::Vector.559"* nonnull dereferenceable(16) %24) #9
  %618 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %617, i64 0, i32 0
  %619 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  %620 = bitcast %"class.WTF::String"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %620) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %28, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.7, i64 0, i64 0), i64 132) #9
  %621 = call %"class.blink::Text"* @_ZN5blink8Document14createTextNodeERKN3WTF6StringE(%"class.blink::Document"* %619, %"class.WTF::String"* nonnull dereferenceable(8) %28) #9
  %622 = getelementptr inbounds %"class.blink::Text", %"class.blink::Text"* %621, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %618, %"class.blink::Node"* %622) #9
  %623 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %624 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %623, align 8
  %625 = icmp eq %"class.WTF::StringImpl"* %624, null
  br i1 %625, label %639, label %626

626:                                              ; preds = %609
  %627 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %624, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %628 = load atomic i32, i32* %627 monotonic, align 4
  %629 = and i32 %628, 2
  %630 = icmp eq i32 %629, 0
  %631 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %624, i64 0, i32 0
  %632 = load i32, i32* %631, align 4
  br i1 %630, label %633, label %635

633:                                              ; preds = %626
  %634 = add i32 %632, -1
  store i32 %634, i32* %631, align 4
  br label %635

635:                                              ; preds = %633, %626
  %636 = phi i32 [ %634, %633 ], [ %632, %626 ]
  %637 = icmp eq i32 %636, 0
  br i1 %637, label %638, label %639

638:                                              ; preds = %635
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %624) #9
  br label %639

639:                                              ; preds = %609, %635, %638
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %620) #9
  %640 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %617, i64 0, i32 0, i32 0
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %277, %"class.blink::Node"* %640) #9
  %641 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %513, align 8
  %642 = icmp eq %"class.blink::Attribute"* %641, null
  br i1 %642, label %677, label %643, !prof !2

643:                                              ; preds = %639
  %644 = bitcast %"class.blink::Attribute"* %641 to i8*
  %645 = load i32, i32* %515, align 4
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %675, label %647, !prof !4

647:                                              ; preds = %643
  %648 = zext i32 %645 to i64
  %649 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %641, i64 %648
  br label %650

650:                                              ; preds = %668, %647
  %651 = phi %"class.blink::Attribute"* [ %670, %668 ], [ %641, %647 ]
  %652 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %651, i64 0, i32 1, i32 0, i32 0, i32 0
  %653 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %652, align 8
  %654 = icmp eq %"class.WTF::StringImpl"* %653, null
  br i1 %654, label %668, label %655

655:                                              ; preds = %650
  %656 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %653, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %657 = load atomic i32, i32* %656 monotonic, align 4
  %658 = and i32 %657, 2
  %659 = icmp eq i32 %658, 0
  %660 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %653, i64 0, i32 0
  %661 = load i32, i32* %660, align 4
  br i1 %659, label %662, label %664

662:                                              ; preds = %655
  %663 = add i32 %661, -1
  store i32 %663, i32* %660, align 4
  br label %664

664:                                              ; preds = %662, %655
  %665 = phi i32 [ %663, %662 ], [ %661, %655 ]
  %666 = icmp eq i32 %665, 0
  br i1 %666, label %667, label %668

667:                                              ; preds = %664
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %653) #9
  br label %668

668:                                              ; preds = %667, %664, %650
  %669 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %651, i64 0, i32 0
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %669) #9
  %670 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %651, i64 1
  %671 = icmp eq %"class.blink::Attribute"* %670, %649
  br i1 %671, label %672, label %650

672:                                              ; preds = %668
  store i32 0, i32* %515, align 4
  %673 = bitcast %"class.WTF::Vector.559"* %24 to i8**
  %674 = load i8*, i8** %673, align 8
  br label %675

675:                                              ; preds = %672, %643
  %676 = phi i8* [ %674, %672 ], [ %644, %643 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %676) #9
  store %"class.blink::Attribute"* null, %"class.blink::Attribute"** %513, align 8
  br label %677

677:                                              ; preds = %639, %675
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %512) #9
  br label %678

678:                                              ; preds = %677, %508
  %679 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %135, i64 0, i32 0
  %680 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %135, i64 0, i32 0, i32 1, i32 0, i32 0
  %681 = load %"class.blink::Node"*, %"class.blink::Node"** %680, align 8
  %682 = icmp eq %"class.blink::Node"* %681, null
  %683 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %153, i64 0, i32 0, i32 0
  br i1 %682, label %685, label %684

684:                                              ; preds = %678
  call void @_ZN5blink13ContainerNode18ParserInsertBeforeEPNS_4NodeERS1_(%"class.blink::ContainerNode"* %679, %"class.blink::Node"* %683, %"class.blink::Node"* nonnull dereferenceable(64) %681) #9
  br label %686

685:                                              ; preds = %678
  call void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"* %679, %"class.blink::Node"* %683) #9
  br label %686

686:                                              ; preds = %685, %684
  %687 = load %"class.blink::Document"*, %"class.blink::Document"** %29, align 8
  call void @_ZN5blink8Document24UpdateStyleAndLayoutTreeEv(%"class.blink::Document"* %687) #9
  %688 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %137, align 8
  %689 = icmp eq %"class.WTF::StringImpl"* %688, null
  br i1 %689, label %703, label %690

690:                                              ; preds = %686
  %691 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %688, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %692 = load atomic i32, i32* %691 monotonic, align 4
  %693 = and i32 %692, 2
  %694 = icmp eq i32 %693, 0
  %695 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %688, i64 0, i32 0
  %696 = load i32, i32* %695, align 4
  br i1 %694, label %697, label %699

697:                                              ; preds = %690
  %698 = add i32 %696, -1
  store i32 %698, i32* %695, align 4
  br label %699

699:                                              ; preds = %697, %690
  %700 = phi i32 [ %698, %697 ], [ %696, %690 ]
  %701 = icmp eq i32 %700, 0
  br i1 %701, label %702, label %703

702:                                              ; preds = %699
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %688) #9
  br label %703

703:                                              ; preds = %686, %699, %702
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %136) #9
  ret void
}

declare %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::CreateElementFlags"* byval(%"class.blink::CreateElementFlags") align 8) local_unnamed_addr #3

declare void @_ZN5blink13ContainerNode17ParserAppendChildEPNS_4NodeE(%"class.blink::ContainerNode"*, %"class.blink::Node"*) local_unnamed_addr #3

declare %"class.blink::Text"* @_ZN5blink8Document14createTextNodeERKN3WTF6StringE(%"class.blink::Document"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #3

declare void @_ZN5blink13ContainerNode17ParserRemoveChildERNS_4NodeE(%"class.blink::ContainerNode"*, %"class.blink::Node"* dereferenceable(64)) local_unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #3

declare zeroext i1 @_ZN5blink12DocumentXSLT26HasTransformSourceDocumentERNS_8DocumentE(%"class.blink::Document"* dereferenceable(2848)) local_unnamed_addr #3

declare void @_ZN5blink7Element19ParserSetAttributesERKN3WTF6VectorINS_9AttributeELj0ENS1_18PartitionAllocatorEEE(%"class.blink::Element"*, %"class.WTF::Vector.559"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZN5blink13ContainerNode18ParserInsertBeforeEPNS_4NodeERS1_(%"class.blink::ContainerNode"*, %"class.blink::Node"*, %"class.blink::Node"* dereferenceable(64)) local_unnamed_addr #3

declare void @_ZN5blink8Document24UpdateStyleAndLayoutTreeEv(%"class.blink::Document"*) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #3

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #3

declare void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"*, i16*, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"*) unnamed_addr #7

declare void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"*, i8*, i64) unnamed_addr #3

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8DocumentEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #1 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Document"*
  %4 = bitcast i8* %1 to void (%"class.blink::Document"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::Document"*, %"class.blink::Visitor"*)**, void (%"class.blink::Document"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::Document"*, %"class.blink::Visitor"*)*, void (%"class.blink::Document"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::Document"*, %"class.blink::Visitor"*)*, void (%"class.blink::Document"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::Document"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.559"*, %"class.blink::Attribute"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %6, align 8
  %8 = icmp ugt %"class.blink::Attribute"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %7, i64 %10
  %12 = icmp ugt %"class.blink::Attribute"* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !2

24:                                               ; preds = %13
  %25 = icmp eq %"class.blink::Attribute"* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink9AttributeEEEmm(i64 %27) #9
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink9AttributeEEEPKcv, i64 0, i64 0)) #9
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector.559"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %28, 4
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %"class.blink::Attribute"*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.559"* %0, i32 %22) #9
  %36 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %"class.blink::Attribute"* %1 to i64
  %39 = ptrtoint %"class.blink::Attribute"* %7 to i64
  %40 = sub i64 %38, %39
  %41 = ashr exact i64 %40, 4
  %42 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !2

52:                                               ; preds = %37
  %53 = icmp eq %"class.blink::Attribute"* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink9AttributeEEEmm(i64 %55) #9
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink9AttributeEEEPKcv, i64 0, i64 0)) #9
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector.559"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = lshr i64 %56, 4
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %"class.blink::Attribute"*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.559"* %0, i32 %50) #9
  %64 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %"class.blink::Attribute"* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %"class.blink::Attribute"* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %"class.blink::Attribute"* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %70, i64 0, i32 0, i32 0, i32 0
  %74 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %73, align 8
  %75 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %69, i64 %72, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %74, %"class.blink::QualifiedName::QualifiedNameImpl"** %75, align 8
  %76 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %74, null
  br i1 %76, label %84, label %77

77:                                               ; preds = %68
  %78 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %74, i64 0, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = and i32 %79, 16777216
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %74, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %83) #9
  br label %84

84:                                               ; preds = %68, %77, %82
  %85 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %69, i64 %72, i32 1
  %86 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %70, i64 0, i32 1
  %87 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.WTF::AtomicString"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %"class.WTF::AtomicString"* %85 to i64*
  store i64 %89, i64* %90, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %87, align 8
  %91 = load i32, i32* %3, align 4
  %92 = add i32 %91, 1
  store i32 %92, i32* %3, align 4
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink9AttributeELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.559"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %41

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector.559"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %39, label %14

14:                                               ; preds = %4, %28
  %15 = phi %"class.blink::Attribute"* [ %37, %28 ], [ %6, %4 ]
  %16 = phi %"class.blink::Attribute"* [ %36, %28 ], [ null, %4 ]
  %17 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %15, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %16, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %"class.blink::QualifiedName::QualifiedNameImpl"** %19, align 8
  %20 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, null
  br i1 %20, label %28, label %21

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %18, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, 16777216
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %18, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %27) #9
  br label %28

28:                                               ; preds = %26, %21, %14
  %29 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %16, i64 0, i32 1
  %30 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %15, i64 0, i32 1
  %31 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %30, i64 0, i32 0, i32 0, i32 0
  %32 = bitcast %"class.WTF::AtomicString"* %30 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"class.WTF::AtomicString"* %29 to i64*
  store i64 %33, i64* %34, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %31, align 8
  %35 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %15, i64 0, i32 0
  tail call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %35) #9
  %36 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %16, i64 1
  %37 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %15, i64 1
  %38 = icmp eq %"class.blink::Attribute"* %37, %10
  br i1 %38, label %39, label %14

39:                                               ; preds = %28, %4
  %40 = bitcast %"class.blink::Attribute"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %40) #9
  br label %91

41:                                               ; preds = %2
  %42 = zext i32 %1 to i64
  %43 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink9AttributeEEEmm(i64 %42) #9
  %44 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %43, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink9AttributeEEEPKcv, i64 0, i64 0)) #9
  %45 = lshr i64 %43, 4
  %46 = ptrtoint i8* %44 to i64
  %47 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %0, i64 0, i32 0, i32 0, i32 0
  %48 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %47, align 8
  %49 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %0, i64 0, i32 0, i32 0, i32 2
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %48, i64 %51
  %53 = icmp eq i32 %50, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %41
  %55 = bitcast %"class.blink::Attribute"* %48 to i8*
  br label %86

56:                                               ; preds = %41
  %57 = bitcast i8* %44 to %"class.blink::Attribute"*
  br label %58

58:                                               ; preds = %56, %72
  %59 = phi %"class.blink::Attribute"* [ %81, %72 ], [ %48, %56 ]
  %60 = phi %"class.blink::Attribute"* [ %80, %72 ], [ %57, %56 ]
  %61 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %59, i64 0, i32 0, i32 0, i32 0
  %62 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %61, align 8
  %63 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %60, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %62, %"class.blink::QualifiedName::QualifiedNameImpl"** %63, align 8
  %64 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %62, null
  br i1 %64, label %72, label %65

65:                                               ; preds = %58
  %66 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %62, i64 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = and i32 %67, 16777216
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %62, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %71) #9
  br label %72

72:                                               ; preds = %70, %65, %58
  %73 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %60, i64 0, i32 1
  %74 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %59, i64 0, i32 1
  %75 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %74, i64 0, i32 0, i32 0, i32 0
  %76 = bitcast %"class.WTF::AtomicString"* %74 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = bitcast %"class.WTF::AtomicString"* %73 to i64*
  store i64 %77, i64* %78, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %75, align 8
  %79 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %59, i64 0, i32 0
  tail call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %79) #9
  %80 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %60, i64 1
  %81 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %59, i64 1
  %82 = icmp eq %"class.blink::Attribute"* %81, %52
  br i1 %82, label %83, label %58

83:                                               ; preds = %72
  %84 = bitcast %"class.WTF::Vector.559"* %0 to i8**
  %85 = load i8*, i8** %84, align 8
  br label %86

86:                                               ; preds = %54, %83
  %87 = phi i8* [ %85, %83 ], [ %55, %54 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %87) #9
  %88 = bitcast %"class.WTF::Vector.559"* %0 to i64*
  store atomic i64 %46, i64* %88 monotonic, align 8
  %89 = trunc i64 %45 to i32
  %90 = getelementptr inbounds %"class.WTF::Vector.559", %"class.WTF::Vector.559"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %89, i32* %90, align 8
  br label %91

91:                                               ; preds = %86, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink9AttributeEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.16, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 1, i32 2000}
