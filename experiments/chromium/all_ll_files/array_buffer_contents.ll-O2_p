; ModuleID = '../../third_party/blink/renderer/core/typed_arrays/array_buffer/array_buffer_contents.cc'
source_filename = "../../third_party/blink/renderer/core/typed_arrays/array_buffer/array_buffer_contents.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::PartitionRoot" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, %"class.base::internal::MaybeSpinLock", [4 x i8], [128 x %"struct.base::internal::PartitionBucket"], %"struct.base::internal::PartitionBucket", i8, [7 x i8], %"struct.std::__1::atomic.2", %"struct.std::__1::atomic.2", %"struct.std::__1::atomic.2", i8*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry"*, %"struct.base::internal::PartitionSuperPageExtentEntry"*, %"struct.base::internal::PartitionDirectMapExtent"*, [16 x %"struct.base::internal::SlotSpanMetadata"*], i16, [6 x i8], i64, %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::internal::MaybeSpinLock" = type { %"class.base::internal::SpinningMutex" }
%"class.base::internal::SpinningMutex" = type { %"struct.std::__1::atomic" }
%"struct.base::internal::PartitionBucket" = type { %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"*, i32, i32, i64 }
%"struct.base::internal::SlotSpanMetadata" = type <{ %"class.base::internal::PartitionFreelistEntry"*, %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::PartitionBucket"*, i16, i16, i8, i8 }>
%"class.base::internal::PartitionFreelistEntry" = type { %"struct.base::internal::EncodedPartitionFreelistEntry"*, i64 }
%"struct.base::internal::EncodedPartitionFreelistEntry" = type { [8 x i8], [8 x i8] }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i64 }
%"struct.base::internal::PartitionSuperPageExtentEntry" = type { %"struct.base::PartitionRoot"*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry"* }
%"struct.base::internal::PartitionDirectMapExtent" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.12" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl.14" }
%"struct.std::__1::__cxx_atomic_impl.14" = type { %"struct.std::__1::__cxx_atomic_base_impl.15" }
%"struct.std::__1::__cxx_atomic_base_impl.15" = type { i8 }
%"class.base::internal::PCScan" = type <{ %"class.base::internal::PCScanScheduler", %"struct.std::__1::atomic.21", i8, [6 x i8] }>
%"class.base::internal::PCScanScheduler" = type { %"struct.base::internal::QuarantineData", %"class.base::internal::LimitBackend", %"class.base::internal::PCScanSchedulingBackend"* }
%"struct.base::internal::QuarantineData" = type { %"struct.std::__1::atomic.2", %"struct.std::__1::atomic.2", %"struct.std::__1::atomic.2", i64 }
%"class.base::internal::LimitBackend" = type { %"class.base::internal::PCScanSchedulingBackend" }
%"class.base::internal::PCScanSchedulingBackend" = type { i32 (...)**, %"class.base::internal::PCScanScheduler"* }
%"struct.std::__1::atomic.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl.23" }
%"struct.std::__1::__cxx_atomic_impl.23" = type { %"struct.std::__1::__cxx_atomic_base_impl.24" }
%"struct.std::__1::__cxx_atomic_base_impl.24" = type { i8 }
%"class.blink::ArrayBufferContents" = type { %"class.std::__1::shared_ptr" }
%"class.std::__1::shared_ptr" = type { %"class.v8::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::BackingStore" = type { i8 }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.base::internal::ThreadCache" = type { [89 x %"struct.base::internal::ThreadCache::Bucket"], i64, %"struct.std::__1::atomic.12", %"struct.base::ThreadCacheStats", %"struct.base::PartitionRoot"*, %"class.base::internal::ThreadCache"*, %"class.base::internal::ThreadCache"* }
%"struct.base::internal::ThreadCache::Bucket" = type <{ %"class.base::internal::PartitionFreelistEntry"*, i8, %"struct.std::__1::atomic.16", i16, [4 x i8] }>
%"struct.std::__1::atomic.16" = type { %"struct.std::__1::__atomic_base.17" }
%"struct.std::__1::__atomic_base.17" = type { %"struct.std::__1::__atomic_base.18" }
%"struct.std::__1::__atomic_base.18" = type { %"struct.std::__1::__cxx_atomic_impl.19" }
%"struct.std::__1::__cxx_atomic_impl.19" = type { %"struct.std::__1::__cxx_atomic_base_impl.20" }
%"struct.std::__1::__cxx_atomic_base_impl.20" = type { i8 }
%"struct.base::ThreadCacheStats" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [129 x i64], [129 x i64] }
%"struct.base::internal::PartitionPage" = type { %union.anon, i8, i8 }
%union.anon = type <{ %"struct.base::internal::SubsequentPageMetadata", [22 x i8] }>
%"struct.base::internal::SubsequentPageMetadata" = type { i64 }
%"struct.base::internal::DeferredUnmap" = type { i8*, i64 }
%"class.base::internal::ObjectBitmap" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [2048 x i64] }
%"class.std::__1::__shared_ptr_pointer" = type { %"class.std::__1::__shared_weak_count", %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::BackingStore"* }
%"class.std::type_info" = type { i32 (...)**, i8* }

$_ZNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev = comdat any

$_ZNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv = comdat any

$_ZNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv = comdat any

$_ZTVNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE = comdat any

@_ZN3WTF10Partitions18array_buffer_root_E = external local_unnamed_addr global %"struct.base::PartitionRoot"*, align 8
@_ZN5blink16InstanceCounters9counters_E = external global [0 x %"struct.std::__1::atomic"], align 4
@_ZTVNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.std::__1::__shared_weak_count"*)* @_ZNSt3__119__shared_weak_countD2Ev to i8*), i8* bitcast (void (%"class.std::__1::__shared_ptr_pointer"*)* @_ZNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev to i8*), i8* bitcast (void (%"class.std::__1::__shared_ptr_pointer"*)* @_ZNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv to i8*), i8* bitcast (i8* (%"class.std::__1::__shared_weak_count"*, %"class.std::type_info"*)* @_ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info to i8*), i8* bitcast (void (%"class.std::__1::__shared_ptr_pointer"*)* @_ZNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv to i8*)] }, comdat, align 8
@_ZN4base19PartitionAllocHooks14hooks_enabled_E = external local_unnamed_addr global %"struct.std::__1::atomic.12", align 1
@_ZZN4base8internal17BucketIndexLookup8GetIndexEmE6lookup = internal unnamed_addr constant { [128 x i64], [521 x i16] } { [128 x i64] [i64 16, i64 18, i64 20, i64 22, i64 24, i64 26, i64 28, i64 30, i64 32, i64 36, i64 40, i64 44, i64 48, i64 52, i64 56, i64 60, i64 64, i64 72, i64 80, i64 88, i64 96, i64 104, i64 112, i64 120, i64 128, i64 144, i64 160, i64 176, i64 192, i64 208, i64 224, i64 240, i64 256, i64 288, i64 320, i64 352, i64 384, i64 416, i64 448, i64 480, i64 512, i64 576, i64 640, i64 704, i64 768, i64 832, i64 896, i64 960, i64 1024, i64 1152, i64 1280, i64 1408, i64 1536, i64 1664, i64 1792, i64 1920, i64 2048, i64 2304, i64 2560, i64 2816, i64 3072, i64 3328, i64 3584, i64 3840, i64 4096, i64 4608, i64 5120, i64 5632, i64 6144, i64 6656, i64 7168, i64 7680, i64 8192, i64 9216, i64 10240, i64 11264, i64 12288, i64 13312, i64 14336, i64 15360, i64 16384, i64 18432, i64 20480, i64 22528, i64 24576, i64 26624, i64 28672, i64 30720, i64 32768, i64 36864, i64 40960, i64 45056, i64 49152, i64 53248, i64 57344, i64 61440, i64 65536, i64 73728, i64 81920, i64 90112, i64 98304, i64 106496, i64 114688, i64 122880, i64 131072, i64 147456, i64 163840, i64 180224, i64 196608, i64 212992, i64 229376, i64 245760, i64 262144, i64 294912, i64 327680, i64 360448, i64 393216, i64 425984, i64 458752, i64 491520, i64 524288, i64 589824, i64 655360, i64 720896, i64 786432, i64 851968, i64 917504, i64 983040], [521 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 12, i16 12, i16 12, i16 12, i16 16, i16 16, i16 16, i16 16, i16 18, i16 18, i16 20, i16 20, i16 22, i16 22, i16 24, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 81, i16 82, i16 83, i16 84, i16 85, i16 86, i16 87, i16 88, i16 89, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128] }, align 8
@_ZN4base12_GLOBAL__N_116kOrderIndexShiftE = internal unnamed_addr constant [65 x i8] c"\00\00\00\00\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123456789:;<", align 16
@_ZN4base12_GLOBAL__N_118kOrderSubIndexMaskE = internal unnamed_addr constant [65 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 1, i64 3, i64 7, i64 15, i64 31, i64 63, i64 127, i64 255, i64 511, i64 1023, i64 2047, i64 4095, i64 8191, i64 16383, i64 32767, i64 65535, i64 131071, i64 262143, i64 524287, i64 1048575, i64 2097151, i64 4194303, i64 8388607, i64 16777215, i64 33554431, i64 67108863, i64 134217727, i64 268435455, i64 536870911, i64 1073741823, i64 2147483647, i64 4294967295, i64 8589934591, i64 17179869183, i64 34359738367, i64 68719476735, i64 137438953471, i64 274877906943, i64 549755813887, i64 1099511627775, i64 2199023255551, i64 4398046511103, i64 8796093022207, i64 17592186044415, i64 35184372088831, i64 70368744177663, i64 140737488355327, i64 281474976710655, i64 562949953421311, i64 1125899906842623, i64 2251799813685247, i64 4503599627370495, i64 9007199254740991, i64 18014398509481983, i64 36028797018963967, i64 72057594037927935, i64 144115188075855871, i64 288230376151711743, i64 576460752303423487, i64 1152921504606846975], align 16
@_ZN4base8internal6PCScan9instance_E = external global %"class.base::internal::PCScan", align 8
@_ZN4base8internal18g_thread_cache_keyE = external local_unnamed_addr global i32, align 4
@_ZN4base8internal11ThreadCache28largest_active_bucket_index_E = external local_unnamed_addr global i16, align 2
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19ArrayBufferContentsEEEPKcv = private unnamed_addr constant [74 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ArrayBufferContents]\00", align 1
@.str.1 = private unnamed_addr constant [105 x i8] c"../../base/allocator/partition_allocator/partition_page.h(549) Check failed: slot_start != freelist_head\00", align 1

@_ZN5blink19ArrayBufferContentsC1EPvmPFvS1_mS1_E = hidden unnamed_addr alias void (%"class.blink::ArrayBufferContents"*, i8*, i64, void (i8*, i64, i8*)*), void (%"class.blink::ArrayBufferContents"*, i8*, i64, void (i8*, i64, i8*)*)* @_ZN5blink19ArrayBufferContentsC2EPvmPFvS1_mS1_E
@_ZN5blink19ArrayBufferContentsC1EmmNS0_11SharingTypeENS0_20InitializationPolicyE = hidden unnamed_addr alias void (%"class.blink::ArrayBufferContents"*, i64, i64, i32, i32), void (%"class.blink::ArrayBufferContents"*, i64, i64, i32, i32)* @_ZN5blink19ArrayBufferContentsC2EmmNS0_11SharingTypeENS0_20InitializationPolicyE
@_ZN5blink19ArrayBufferContentsD1Ev = hidden unnamed_addr alias void (%"class.blink::ArrayBufferContents"*), void (%"class.blink::ArrayBufferContents"*)* @_ZN5blink19ArrayBufferContentsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19ArrayBufferContentsC2EPvmPFvS1_mS1_E(%"class.blink::ArrayBufferContents"* nocapture, i8*, i64, void (i8*, i64, i8*)*) unnamed_addr #0 align 2 {
  %5 = bitcast %"class.blink::ArrayBufferContents"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #11
  %6 = tail call %"class.v8::BackingStore"* @_ZN2v811ArrayBuffer15NewBackingStoreEPvmPFvS1_mS1_ES1_(i8* %1, i64 %2, void (i8*, i64, i8*)* %3, i8* null) #11
  %7 = ptrtoint %"class.v8::BackingStore"* %6 to i64
  %8 = icmp eq %"class.v8::BackingStore"* %6, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %4
  %10 = tail call i8* @_Znwm(i64 32) #12
  %11 = bitcast i8* %10 to i32 (...)***
  %12 = getelementptr inbounds i8, i8* %10, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %13 = getelementptr inbounds i8, i8* %10, i64 24
  %14 = bitcast i8* %13 to i64*
  store i64 %7, i64* %14, align 8
  %15 = ptrtoint i8* %10 to i64
  br label %16

16:                                               ; preds = %9, %4
  %17 = phi i64 [ %15, %9 ], [ 0, %4 ]
  %18 = bitcast %"class.blink::ArrayBufferContents"* %0 to i64*
  store i64 %7, i64* %18, align 8
  %19 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::__shared_weak_count"** %19 to i64*
  %21 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %19, align 8
  store i64 %17, i64* %20, align 8
  %22 = icmp eq %"class.std::__1::__shared_weak_count"* %21, null
  br i1 %22, label %33, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %21, i64 0, i32 0, i32 1
  %25 = atomicrmw add i64* %24, i64 -1 acq_rel
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %33

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %21, i64 0, i32 0
  %29 = bitcast %"class.std::__1::__shared_weak_count"* %21 to void (%"class.std::__1::__shared_count"*)***
  %30 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %30, i64 2
  %32 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %31, align 8
  tail call void %32(%"class.std::__1::__shared_count"* %28) #11
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %21) #11
  br label %33

33:                                               ; preds = %27, %23, %16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.v8::BackingStore"* @_ZN2v811ArrayBuffer15NewBackingStoreEPvmPFvS1_mS1_ES1_(i8*, i64, void (i8*, i64, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19ArrayBufferContentsC2EmmNS0_11SharingTypeENS0_20InitializationPolicyE(%"class.blink::ArrayBufferContents"* nocapture, i64, i64, i32, i32) unnamed_addr #0 align 2 {
  %6 = bitcast %"class.blink::ArrayBufferContents"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #11
  %7 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1, i64 %2) #11
  %8 = extractvalue { i64, i1 } %7, 1
  %9 = extractvalue { i64, i1 } %7, 0
  br i1 %8, label %71, label %10

10:                                               ; preds = %5
  %11 = tail call i8* @_ZN5blink19ArrayBufferContents23AllocateMemoryWithFlagsEmNS0_20InitializationPolicyEi(i64 %9, i32 %4, i32 1) #11
  %12 = icmp eq i8* %11, null
  br i1 %12, label %71, label %13

13:                                               ; preds = %10
  %14 = icmp eq i32 %3, 0
  br i1 %14, label %15, label %43

15:                                               ; preds = %13
  %16 = tail call %"class.v8::BackingStore"* @_ZN2v811ArrayBuffer15NewBackingStoreEPvmPFvS1_mS1_ES1_(i8* nonnull %11, i64 %9, void (i8*, i64, i8*)* nonnull @"_ZZN5blink19ArrayBufferContentsC1EmmNS0_11SharingTypeENS0_20InitializationPolicyEEN3$_08__invokeEPvmS4_", i8* null) #11
  %17 = ptrtoint %"class.v8::BackingStore"* %16 to i64
  %18 = icmp eq %"class.v8::BackingStore"* %16, null
  br i1 %18, label %26, label %19

19:                                               ; preds = %15
  %20 = tail call i8* @_Znwm(i64 32) #12
  %21 = bitcast i8* %20 to i32 (...)***
  %22 = getelementptr inbounds i8, i8* %20, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 16, i1 false) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %23 = getelementptr inbounds i8, i8* %20, i64 24
  %24 = bitcast i8* %23 to i64*
  store i64 %17, i64* %24, align 8
  %25 = ptrtoint i8* %20 to i64
  br label %26

26:                                               ; preds = %19, %15
  %27 = phi i64 [ %25, %19 ], [ 0, %15 ]
  %28 = bitcast %"class.blink::ArrayBufferContents"* %0 to i64*
  store i64 %17, i64* %28, align 8
  %29 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %0, i64 0, i32 0, i32 1
  %30 = bitcast %"class.std::__1::__shared_weak_count"** %29 to i64*
  %31 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %29, align 8
  store i64 %27, i64* %30, align 8
  %32 = icmp eq %"class.std::__1::__shared_weak_count"* %31, null
  br i1 %32, label %71, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %31, i64 0, i32 0, i32 1
  %35 = atomicrmw add i64* %34, i64 -1 acq_rel
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %71

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %31, i64 0, i32 0
  %39 = bitcast %"class.std::__1::__shared_weak_count"* %31 to void (%"class.std::__1::__shared_count"*)***
  %40 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %39, align 8
  %41 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %40, i64 2
  %42 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %41, align 8
  tail call void %42(%"class.std::__1::__shared_count"* %38) #11
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %31) #11
  br label %71

43:                                               ; preds = %13
  %44 = tail call %"class.v8::BackingStore"* @_ZN2v817SharedArrayBuffer15NewBackingStoreEPvmPFvS1_mS1_ES1_(i8* nonnull %11, i64 %9, void (i8*, i64, i8*)* nonnull @"_ZZN5blink19ArrayBufferContentsC1EmmNS0_11SharingTypeENS0_20InitializationPolicyEEN3$_08__invokeEPvmS4_", i8* null) #11
  %45 = ptrtoint %"class.v8::BackingStore"* %44 to i64
  %46 = icmp eq %"class.v8::BackingStore"* %44, null
  br i1 %46, label %54, label %47

47:                                               ; preds = %43
  %48 = tail call i8* @_Znwm(i64 32) #12
  %49 = bitcast i8* %48 to i32 (...)***
  %50 = getelementptr inbounds i8, i8* %48, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 16, i1 false) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %49, align 8
  %51 = getelementptr inbounds i8, i8* %48, i64 24
  %52 = bitcast i8* %51 to i64*
  store i64 %45, i64* %52, align 8
  %53 = ptrtoint i8* %48 to i64
  br label %54

54:                                               ; preds = %47, %43
  %55 = phi i64 [ %53, %47 ], [ 0, %43 ]
  %56 = bitcast %"class.blink::ArrayBufferContents"* %0 to i64*
  store i64 %45, i64* %56, align 8
  %57 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %0, i64 0, i32 0, i32 1
  %58 = bitcast %"class.std::__1::__shared_weak_count"** %57 to i64*
  %59 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %57, align 8
  store i64 %55, i64* %58, align 8
  %60 = icmp eq %"class.std::__1::__shared_weak_count"* %59, null
  br i1 %60, label %71, label %61

61:                                               ; preds = %54
  %62 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %59, i64 0, i32 0, i32 1
  %63 = atomicrmw add i64* %62, i64 -1 acq_rel
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %71

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %59, i64 0, i32 0
  %67 = bitcast %"class.std::__1::__shared_weak_count"* %59 to void (%"class.std::__1::__shared_count"*)***
  %68 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %67, align 8
  %69 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %68, i64 2
  %70 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %69, align 8
  tail call void %70(%"class.std::__1::__shared_count"* %66) #11
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %59) #11
  br label %71

71:                                               ; preds = %5, %54, %61, %65, %26, %33, %37, %10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN5blink19ArrayBufferContents20AllocateMemoryOrNullEmNS0_20InitializationPolicyE(i64, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call i8* @_ZN5blink19ArrayBufferContents23AllocateMemoryWithFlagsEmNS0_20InitializationPolicyEi(i64 %0, i32 %1, i32 1)
  ret i8* %3
}

declare %"class.v8::BackingStore"* @_ZN2v817SharedArrayBuffer15NewBackingStoreEPvmPFvS1_mS1_ES1_(i8*, i64, void (i8*, i64, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19ArrayBufferContentsD2Ev(%"class.blink::ArrayBufferContents"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %2, align 8
  %4 = icmp eq %"class.std::__1::__shared_weak_count"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0, i32 1
  %7 = atomicrmw add i64* %6, i64 -1 acq_rel
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0
  %11 = bitcast %"class.std::__1::__shared_weak_count"* %3 to void (%"class.std::__1::__shared_count"*)***
  %12 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %12, i64 2
  %14 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %13, align 8
  tail call void %14(%"class.std::__1::__shared_count"* %10) #11
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %3) #11
  br label %15

15:                                               ; preds = %1, %5, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19ArrayBufferContents6DetachEv(%"class.blink::ArrayBufferContents"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %2, align 8
  %4 = bitcast %"class.blink::ArrayBufferContents"* %0 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %4, align 8
  %5 = icmp eq %"class.std::__1::__shared_weak_count"* %3, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0, i32 1
  %8 = atomicrmw add i64* %7, i64 -1 acq_rel
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0
  %12 = bitcast %"class.std::__1::__shared_weak_count"* %3 to void (%"class.std::__1::__shared_count"*)***
  %13 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %13, i64 2
  %15 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %14, align 8
  tail call void %15(%"class.std::__1::__shared_count"* %11) #11
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %3) #11
  br label %16

16:                                               ; preds = %1, %6, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19ArrayBufferContents5ResetEv(%"class.blink::ArrayBufferContents"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %2, align 8
  %4 = bitcast %"class.blink::ArrayBufferContents"* %0 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %4, align 8
  %5 = icmp eq %"class.std::__1::__shared_weak_count"* %3, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0, i32 1
  %8 = atomicrmw add i64* %7, i64 -1 acq_rel
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0
  %12 = bitcast %"class.std::__1::__shared_weak_count"* %3 to void (%"class.std::__1::__shared_count"*)***
  %13 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %13, i64 2
  %15 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %14, align 8
  tail call void %15(%"class.std::__1::__shared_count"* %11) #11
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %3) #11
  br label %16

16:                                               ; preds = %1, %6, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19ArrayBufferContents8TransferERS0_(%"class.blink::ArrayBufferContents"* nocapture, %"class.blink::ArrayBufferContents"* nocapture dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::ArrayBufferContents"* %0 to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 8
  %5 = bitcast %"class.blink::ArrayBufferContents"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #11
  %6 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %1, i64 0, i32 0, i32 1
  %7 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %6, align 8
  %8 = bitcast %"class.blink::ArrayBufferContents"* %1 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %8, align 8
  %9 = icmp eq %"class.std::__1::__shared_weak_count"* %7, null
  br i1 %9, label %20, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %7, i64 0, i32 0, i32 1
  %12 = atomicrmw add i64* %11, i64 -1 acq_rel
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %14, label %20

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %7, i64 0, i32 0
  %16 = bitcast %"class.std::__1::__shared_weak_count"* %7 to void (%"class.std::__1::__shared_count"*)***
  %17 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %17, i64 2
  %19 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %18, align 8
  tail call void %19(%"class.std::__1::__shared_count"* %15) #11
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %7) #11
  br label %20

20:                                               ; preds = %2, %10, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19ArrayBufferContents9ShareWithERS0_(%"class.blink::ArrayBufferContents"* nocapture readonly, %"class.blink::ArrayBufferContents"* nocapture dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::ArrayBufferContents"* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %5, align 8
  %7 = ptrtoint %"class.std::__1::__shared_weak_count"* %6 to i64
  %8 = icmp eq %"class.std::__1::__shared_weak_count"* %6, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %6, i64 0, i32 0, i32 1
  %11 = atomicrmw add i64* %10, i64 1 monotonic
  br label %12

12:                                               ; preds = %9, %2
  %13 = bitcast %"class.blink::ArrayBufferContents"* %1 to i64*
  store i64 %4, i64* %13, align 8
  %14 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %1, i64 0, i32 0, i32 1
  %15 = bitcast %"class.std::__1::__shared_weak_count"** %14 to i64*
  %16 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %14, align 8
  store i64 %7, i64* %15, align 8
  %17 = icmp eq %"class.std::__1::__shared_weak_count"* %16, null
  br i1 %17, label %28, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %16, i64 0, i32 0, i32 1
  %20 = atomicrmw add i64* %19, i64 -1 acq_rel
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %16, i64 0, i32 0
  %24 = bitcast %"class.std::__1::__shared_weak_count"* %16 to void (%"class.std::__1::__shared_count"*)***
  %25 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %25, i64 2
  %27 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %26, align 8
  tail call void %27(%"class.std::__1::__shared_count"* %23) #11
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %16) #11
  br label %28

28:                                               ; preds = %12, %18, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19ArrayBufferContents28ShareNonSharedForInternalUseERS0_(%"class.blink::ArrayBufferContents"* nocapture readonly, %"class.blink::ArrayBufferContents"* nocapture dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::ArrayBufferContents"* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %5, align 8
  %7 = ptrtoint %"class.std::__1::__shared_weak_count"* %6 to i64
  %8 = icmp eq %"class.std::__1::__shared_weak_count"* %6, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %6, i64 0, i32 0, i32 1
  %11 = atomicrmw add i64* %10, i64 1 monotonic
  br label %12

12:                                               ; preds = %9, %2
  %13 = bitcast %"class.blink::ArrayBufferContents"* %1 to i64*
  store i64 %4, i64* %13, align 8
  %14 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %1, i64 0, i32 0, i32 1
  %15 = bitcast %"class.std::__1::__shared_weak_count"** %14 to i64*
  %16 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %14, align 8
  store i64 %7, i64* %15, align 8
  %17 = icmp eq %"class.std::__1::__shared_weak_count"* %16, null
  br i1 %17, label %28, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %16, i64 0, i32 0, i32 1
  %20 = atomicrmw add i64* %19, i64 -1 acq_rel
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %16, i64 0, i32 0
  %24 = bitcast %"class.std::__1::__shared_weak_count"* %16 to void (%"class.std::__1::__shared_count"*)***
  %25 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %25, i64 2
  %27 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %26, align 8
  tail call void %27(%"class.std::__1::__shared_count"* %23) #11
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %16) #11
  br label %28

28:                                               ; preds = %12, %18, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19ArrayBufferContents6CopyToERS0_(%"class.blink::ArrayBufferContents"* nocapture readonly, %"class.blink::ArrayBufferContents"* nocapture dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"class.blink::ArrayBufferContents"*
  %5 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %0, i64 0, i32 0, i32 0
  %7 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %6, align 8
  %8 = icmp eq %"class.v8::BackingStore"* %7, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %2
  %10 = tail call i64 @_ZNK2v812BackingStore10ByteLengthEv(%"class.v8::BackingStore"* nonnull %7) #11
  %11 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %6, align 8
  %12 = icmp eq %"class.v8::BackingStore"* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = tail call zeroext i1 @_ZNK2v812BackingStore8IsSharedEv(%"class.v8::BackingStore"* nonnull %11) #11
  %15 = zext i1 %14 to i32
  br label %16

16:                                               ; preds = %2, %9, %13
  %17 = phi i64 [ %10, %13 ], [ %10, %9 ], [ 0, %2 ]
  %18 = phi i32 [ %15, %13 ], [ 0, %9 ], [ 0, %2 ]
  call void @_ZN5blink19ArrayBufferContentsC2EmmNS0_11SharingTypeENS0_20InitializationPolicyE(%"class.blink::ArrayBufferContents"* nonnull %4, i64 %17, i64 1, i32 %18, i32 1)
  %19 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %4, i64 0, i32 0, i32 1
  %20 = load <2 x i64>, <2 x i64>* %3, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 16, i1 false) #11
  %21 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %1, i64 0, i32 0, i32 1
  %22 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %21, align 8
  %23 = bitcast %"class.blink::ArrayBufferContents"* %1 to <2 x i64>*
  store <2 x i64> %20, <2 x i64>* %23, align 8
  %24 = icmp eq %"class.std::__1::__shared_weak_count"* %22, null
  br i1 %24, label %35, label %25

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %22, i64 0, i32 0, i32 1
  %27 = atomicrmw add i64* %26, i64 -1 acq_rel
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %35

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %22, i64 0, i32 0
  %31 = bitcast %"class.std::__1::__shared_weak_count"* %22 to void (%"class.std::__1::__shared_count"*)***
  %32 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %32, i64 2
  %34 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %33, align 8
  tail call void %34(%"class.std::__1::__shared_count"* %30) #11
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %22) #11
  br label %35

35:                                               ; preds = %16, %25, %29
  %36 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %19, align 8
  %37 = icmp eq %"class.std::__1::__shared_weak_count"* %36, null
  br i1 %37, label %48, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %36, i64 0, i32 0, i32 1
  %40 = atomicrmw add i64* %39, i64 -1 acq_rel
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %48

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %36, i64 0, i32 0
  %44 = bitcast %"class.std::__1::__shared_weak_count"* %36 to void (%"class.std::__1::__shared_count"*)***
  %45 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %44, align 8
  %46 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %45, i64 2
  %47 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %46, align 8
  tail call void %47(%"class.std::__1::__shared_count"* %43) #11
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %36) #11
  br label %48

48:                                               ; preds = %35, %38, %42
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  %49 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %6, align 8
  %50 = icmp eq %"class.v8::BackingStore"* %49, null
  br i1 %50, label %79, label %51

51:                                               ; preds = %48
  %52 = tail call i8* @_ZNK2v812BackingStore4DataEv(%"class.v8::BackingStore"* nonnull %49) #11
  %53 = icmp eq i8* %52, null
  br i1 %53, label %79, label %54

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"class.blink::ArrayBufferContents", %"class.blink::ArrayBufferContents"* %1, i64 0, i32 0, i32 0
  %56 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %55, align 8
  %57 = icmp eq %"class.v8::BackingStore"* %56, null
  br i1 %57, label %79, label %58

58:                                               ; preds = %54
  %59 = tail call i8* @_ZNK2v812BackingStore4DataEv(%"class.v8::BackingStore"* nonnull %56) #11
  %60 = icmp eq i8* %59, null
  br i1 %60, label %79, label %61

61:                                               ; preds = %58
  %62 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %55, align 8
  %63 = icmp eq %"class.v8::BackingStore"* %62, null
  br i1 %63, label %66, label %64

64:                                               ; preds = %61
  %65 = tail call i8* @_ZNK2v812BackingStore4DataEv(%"class.v8::BackingStore"* nonnull %62) #11
  br label %66

66:                                               ; preds = %61, %64
  %67 = phi i8* [ %65, %64 ], [ null, %61 ]
  %68 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %6, align 8
  %69 = icmp eq %"class.v8::BackingStore"* %68, null
  br i1 %69, label %76, label %70

70:                                               ; preds = %66
  %71 = tail call i8* @_ZNK2v812BackingStore4DataEv(%"class.v8::BackingStore"* nonnull %68) #11
  %72 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %6, align 8
  %73 = icmp eq %"class.v8::BackingStore"* %72, null
  br i1 %73, label %76, label %74

74:                                               ; preds = %70
  %75 = tail call i64 @_ZNK2v812BackingStore10ByteLengthEv(%"class.v8::BackingStore"* nonnull %72) #11
  br label %76

76:                                               ; preds = %66, %70, %74
  %77 = phi i8* [ %71, %74 ], [ %71, %70 ], [ null, %66 ]
  %78 = phi i64 [ %75, %74 ], [ 0, %70 ], [ 0, %66 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %77, i64 %78, i1 false)
  br label %79

79:                                               ; preds = %58, %51, %54, %48, %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN5blink19ArrayBufferContents23AllocateMemoryWithFlagsEmNS0_20InitializationPolicyEi(i64, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = icmp eq i32 %1, 0
  %8 = or i32 %2, 2
  %9 = select i1 %7, i32 %8, i32 %2
  %10 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions18array_buffer_root_E, align 8
  %11 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #11
  store i8* null, i8** %6, align 8
  %12 = load atomic i8, i8* getelementptr inbounds (%"struct.std::__1::atomic.12", %"struct.std::__1::atomic.12"* @_ZN4base19PartitionAllocHooks14hooks_enabled_E, i64 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 1
  %13 = and i8 %12, 1
  %14 = icmp ne i8 %13, 0
  br i1 %14, label %15, label %19, !prof !2

15:                                               ; preds = %3
  %16 = call zeroext i1 @_ZN4base19PartitionAllocHooks31AllocationOverrideHookIfEnabledEPPvimPKc(i8** nonnull %6, i32 %9, i64 %0, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19ArrayBufferContentsEEEPKcv, i64 0, i64 0)) #11
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = load i8*, i8** %6, align 8
  br label %347

19:                                               ; preds = %15, %3
  %20 = call i64 @llvm.ctlz.i64(i64 %0, i1 false) #11, !range !3
  %21 = sub nuw nsw i64 64, %20
  %22 = and i64 %21, 255
  %23 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN4base12_GLOBAL__N_116kOrderIndexShiftE, i64 0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = lshr i64 %0, %25
  %27 = and i64 %26, 7
  %28 = getelementptr inbounds [65 x i64], [65 x i64]* @_ZN4base12_GLOBAL__N_118kOrderSubIndexMaskE, i64 0, i64 %22
  %29 = load i64, i64* %28, align 8
  %30 = and i64 %29, %0
  %31 = shl nuw nsw i64 %22, 3
  %32 = or i64 %27, %31
  %33 = icmp ne i64 %30, 0
  %34 = zext i1 %33 to i64
  %35 = add nuw nsw i64 %32, %34
  %36 = getelementptr inbounds { [128 x i64], [521 x i16] }, { [128 x i64], [521 x i16] }* @_ZZN4base8internal17BucketIndexLookup8GetIndexEmE6lookup, i64 0, i32 1, i64 %35
  %37 = load i16, i16* %36, align 2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #11
  store i8 0, i8* %4, align 1
  %38 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #11
  store i64 -6148914691236517206, i64* %5, align 8
  %39 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %10, i64 0, i32 0
  %40 = load i8, i8* %39, align 8
  %41 = icmp eq i8 %40, 2
  br i1 %41, label %42, label %46

42:                                               ; preds = %19
  %43 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %44 = icmp eq i8 %43, 2
  br i1 %44, label %45, label %46, !prof !2

45:                                               ; preds = %42
  call void @_ZN4base8internal6PCScan8JoinScanEv() #11
  br label %46

46:                                               ; preds = %45, %42, %19
  %47 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %10, i64 0, i32 2
  %48 = load i8, i8* %47, align 2, !range !4
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %233, label %50, !prof !5

50:                                               ; preds = %46
  %51 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %52 = call i8* @pthread_getspecific(i32 %51) #11
  %53 = bitcast i8* %52 to %"class.base::internal::ThreadCache"*
  %54 = icmp ugt i8* %52, inttoptr (i64 1 to i8*)
  br i1 %54, label %55, label %125, !prof !6

55:                                               ; preds = %50
  %56 = zext i16 %37 to i64
  %57 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %53, i64 0, i32 3, i32 12, i64 %56
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %58, 1
  store i64 %59, i64* %57, align 8
  %60 = getelementptr inbounds i8, i8* %52, i64 1440
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 1
  store i64 %63, i64* %61, align 8
  %64 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %65 = icmp ult i16 %64, %37
  br i1 %65, label %66, label %75, !prof !2

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %52, i64 1472
  %68 = bitcast i8* %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %68, align 8
  %71 = getelementptr inbounds i8, i8* %52, i64 1456
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = add i64 %73, 1
  store i64 %74, i64* %72, align 8
  br label %134

75:                                               ; preds = %55
  %76 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %53, i64 0, i32 0, i64 %56, i32 0
  %77 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %76, align 8
  %78 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %77, null
  br i1 %78, label %84, label %79, !prof !2

79:                                               ; preds = %75
  %80 = getelementptr inbounds i8, i8* %52, i64 1448
  %81 = bitcast i8* %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = add i64 %82, 1
  store i64 %83, i64* %81, align 8
  br label %92

84:                                               ; preds = %75
  %85 = getelementptr inbounds i8, i8* %52, i64 1456
  %86 = bitcast i8* %85 to <2 x i64>*
  %87 = load <2 x i64>, <2 x i64>* %86, align 8
  %88 = add <2 x i64> %87, <i64 1, i64 1>
  %89 = bitcast i8* %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %89, align 8
  call void @_ZN4base8internal11ThreadCache10FillBucketEm(%"class.base::internal::ThreadCache"* %53, i64 %56) #11
  %90 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %76, align 8
  %91 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %90, null
  br i1 %91, label %134, label %92, !prof !2

92:                                               ; preds = %84, %79
  %93 = phi %"class.base::internal::PartitionFreelistEntry"* [ %90, %84 ], [ %77, %79 ]
  %94 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %93, i64 0, i32 0
  %95 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %94, align 8
  %96 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %95, null
  %97 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %95 to i64
  br i1 %96, label %98, label %100

98:                                               ; preds = %92
  %99 = call i64 @llvm.bswap.i64(i64 %97) #11
  br label %109

100:                                              ; preds = %92
  %101 = xor i64 %97, -1
  %102 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %93, i64 0, i32 1
  %103 = load i64, i64* %102, align 8
  %104 = icmp eq i64 %103, %101
  br i1 %104, label %106, label %105, !prof !6

105:                                              ; preds = %100
  call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #13
  unreachable

106:                                              ; preds = %100
  %107 = call i64 @llvm.bswap.i64(i64 %97) #11
  %108 = inttoptr i64 %107 to i8*
  call void @llvm.prefetch(i8* nonnull %108, i32 0, i32 3, i32 1) #11
  br label %109

109:                                              ; preds = %106, %98
  %110 = phi i64 [ %99, %98 ], [ %107, %106 ]
  %111 = inttoptr i64 %110 to %"class.base::internal::PartitionFreelistEntry"*
  %112 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %53, i64 0, i32 0, i64 %56, i32 1
  %113 = load i8, i8* %112, align 8
  %114 = add i8 %113, -1
  store i8 %114, i8* %112, align 8
  store %"class.base::internal::PartitionFreelistEntry"* %111, %"class.base::internal::PartitionFreelistEntry"** %76, align 8
  %115 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %53, i64 0, i32 0, i64 %56, i32 3
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i64
  store i64 %117, i64* %5, align 8
  %118 = load i16, i16* %115, align 2
  %119 = zext i16 %118 to i64
  %120 = getelementptr inbounds i8, i8* %52, i64 1424
  %121 = bitcast i8* %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = sub i64 %122, %119
  store i64 %123, i64* %121, align 8
  %124 = bitcast %"class.base::internal::PartitionFreelistEntry"* %93 to i8*
  br label %127

125:                                              ; preds = %50
  %126 = call i8* @_ZN4base13PartitionRootILb1EE28MaybeInitThreadCacheAndAllocEtPm(%"struct.base::PartitionRoot"* %10, i16 zeroext %37, i64* nonnull %5) #11
  br label %127

127:                                              ; preds = %125, %109
  %128 = phi i8* [ %126, %125 ], [ %124, %109 ]
  %129 = icmp eq i8* %128, null
  br i1 %129, label %130, label %132, !prof !2

130:                                              ; preds = %127
  %131 = zext i16 %37 to i64
  br label %134

132:                                              ; preds = %127
  %133 = load i64, i64* %5, align 8
  br label %336

134:                                              ; preds = %130, %84, %66
  %135 = phi i64 [ %131, %130 ], [ %56, %84 ], [ %56, %66 ]
  %136 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %10, i64 0, i32 10, i64 %135
  %137 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %10, i64 0, i32 8
  %138 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %137, i64 0, i32 0
  %139 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %137, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %140

140:                                              ; preds = %152, %134
  %141 = phi i32 [ 0, %134 ], [ %153, %152 ]
  %142 = phi i32 [ 1, %134 ], [ %156, %152 ]
  %143 = load atomic i32, i32* %139 monotonic, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %148, !prof !7

145:                                              ; preds = %140
  %146 = cmpxchg weak i32* %139, i32 0, i32 1 acquire monotonic
  %147 = extractvalue { i32, i1 } %146, 1
  br i1 %147, label %163, label %148, !prof !6

148:                                              ; preds = %145, %140
  %149 = icmp sgt i32 %142, 0
  br i1 %149, label %158, label %152

150:                                              ; preds = %158
  %151 = add i32 %142, %141
  br label %152

152:                                              ; preds = %150, %148
  %153 = phi i32 [ %141, %148 ], [ %151, %150 ]
  %154 = shl i32 %142, 1
  %155 = icmp slt i32 %154, 64
  %156 = select i1 %155, i32 %154, i32 64
  %157 = icmp slt i32 %153, 1000
  br i1 %157, label %140, label %162

158:                                              ; preds = %148, %158
  %159 = phi i32 [ %160, %158 ], [ 0, %148 ]
  call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !8
  %160 = add nuw nsw i32 %159, 1
  %161 = icmp eq i32 %160, %142
  br i1 %161, label %150, label %158

162:                                              ; preds = %152
  call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %138) #11
  br label %163

163:                                              ; preds = %145, %162
  %164 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %136, i64 0, i32 0
  %165 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %164, align 8
  %166 = bitcast %"struct.base::internal::SlotSpanMetadata"* %165 to i8**
  %167 = load i8*, i8** %166, align 1
  %168 = icmp eq i8* %167, null
  br i1 %168, label %196, label %169, !prof !2

169:                                              ; preds = %163
  %170 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %165, i64 0, i32 0
  store i8 0, i8* %4, align 1
  %171 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %10, i64 0, i32 10, i64 %135, i32 3
  %172 = load i32, i32* %171, align 8
  %173 = zext i32 %172 to i64
  %174 = bitcast i8* %167 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %175 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %174, align 8
  %176 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %175, null
  %177 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %175 to i64
  br i1 %176, label %178, label %180

178:                                              ; preds = %169
  %179 = call i64 @llvm.bswap.i64(i64 %177) #11
  br label %190

180:                                              ; preds = %169
  %181 = xor i64 %177, -1
  %182 = getelementptr inbounds i8, i8* %167, i64 8
  %183 = bitcast i8* %182 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = icmp eq i64 %184, %181
  br i1 %185, label %187, label %186, !prof !6

186:                                              ; preds = %180
  call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #13
  unreachable

187:                                              ; preds = %180
  %188 = call i64 @llvm.bswap.i64(i64 %177) #11
  %189 = inttoptr i64 %188 to i8*
  call void @llvm.prefetch(i8* nonnull %189, i32 0, i32 3, i32 1) #11
  br label %190

190:                                              ; preds = %187, %178
  %191 = phi i64 [ %179, %178 ], [ %188, %187 ]
  %192 = inttoptr i64 %191 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %192, %"class.base::internal::PartitionFreelistEntry"** %170, align 1
  %193 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %165, i64 0, i32 3
  %194 = load i16, i16* %193, align 1
  %195 = add i16 %194, 1
  store i16 %195, i16* %193, align 1
  br label %227

196:                                              ; preds = %163
  %197 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %136, %"struct.base::PartitionRoot"* %10, i32 %9, i64 %0, i64 16384, i8* nonnull %4) #11
  %198 = icmp eq i8* %197, null
  br i1 %198, label %227, label %199, !prof !2

199:                                              ; preds = %196
  %200 = ptrtoint i8* %197 to i64
  %201 = and i64 %200, -2097152
  %202 = or i64 %201, 4096
  %203 = inttoptr i64 %202 to i8*
  %204 = lshr i64 %200, 9
  %205 = and i64 %204, 4064
  %206 = getelementptr inbounds i8, i8* %203, i64 %205
  %207 = bitcast i8* %206 to %"struct.base::internal::PartitionPage"*
  %208 = getelementptr inbounds i8, i8* %206, i64 30
  %209 = load i8, i8* %208, align 2
  %210 = zext i8 %209 to i64
  %211 = sub nsw i64 0, %210
  %212 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %207, i64 %211, i32 0, i32 1, i64 21
  %213 = load i8, i8* %212, align 1, !range !4
  %214 = icmp eq i8 %213, 0
  br i1 %214, label %215, label %222, !prof !6

215:                                              ; preds = %199
  %216 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %207, i64 %211, i32 0, i32 1, i64 8
  %217 = bitcast i8* %216 to %"struct.base::internal::PartitionBucket"**
  %218 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %217, align 1
  %219 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %218, i64 0, i32 3
  %220 = load i32, i32* %219, align 8
  %221 = zext i32 %220 to i64
  br label %227

222:                                              ; preds = %199
  %223 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %207, i64 %211, i32 0
  %224 = bitcast %union.anon* %223 to %"struct.base::internal::PartitionPage"*
  %225 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %224, i64 1, i32 0, i32 0, i32 0
  %226 = load i64, i64* %225, align 1
  br label %227

227:                                              ; preds = %222, %215, %196, %190
  %228 = phi i64 [ %173, %190 ], [ -6148914691236517206, %196 ], [ %221, %215 ], [ %226, %222 ]
  %229 = phi i8* [ %167, %190 ], [ null, %196 ], [ %197, %215 ], [ %197, %222 ]
  %230 = atomicrmw xchg i32* %139, i32 0 release
  %231 = icmp eq i32 %230, 2
  br i1 %231, label %232, label %332, !prof !2

232:                                              ; preds = %227
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %138) #11
  br label %332

233:                                              ; preds = %46
  %234 = zext i16 %37 to i64
  %235 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %10, i64 0, i32 10, i64 %234
  %236 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %10, i64 0, i32 8
  %237 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %236, i64 0, i32 0
  %238 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %236, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %239

239:                                              ; preds = %251, %233
  %240 = phi i32 [ 0, %233 ], [ %252, %251 ]
  %241 = phi i32 [ 1, %233 ], [ %255, %251 ]
  %242 = load atomic i32, i32* %238 monotonic, align 4
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %247, !prof !7

244:                                              ; preds = %239
  %245 = cmpxchg weak i32* %238, i32 0, i32 1 acquire monotonic
  %246 = extractvalue { i32, i1 } %245, 1
  br i1 %246, label %262, label %247, !prof !6

247:                                              ; preds = %244, %239
  %248 = icmp sgt i32 %241, 0
  br i1 %248, label %257, label %251

249:                                              ; preds = %257
  %250 = add i32 %241, %240
  br label %251

251:                                              ; preds = %249, %247
  %252 = phi i32 [ %240, %247 ], [ %250, %249 ]
  %253 = shl i32 %241, 1
  %254 = icmp slt i32 %253, 64
  %255 = select i1 %254, i32 %253, i32 64
  %256 = icmp slt i32 %252, 1000
  br i1 %256, label %239, label %261

257:                                              ; preds = %247, %257
  %258 = phi i32 [ %259, %257 ], [ 0, %247 ]
  call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !8
  %259 = add nuw nsw i32 %258, 1
  %260 = icmp eq i32 %259, %241
  br i1 %260, label %249, label %257

261:                                              ; preds = %251
  call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %237) #11
  br label %262

262:                                              ; preds = %244, %261
  %263 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %235, i64 0, i32 0
  %264 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %263, align 8
  %265 = bitcast %"struct.base::internal::SlotSpanMetadata"* %264 to i8**
  %266 = load i8*, i8** %265, align 1
  %267 = icmp eq i8* %266, null
  br i1 %267, label %295, label %268, !prof !2

268:                                              ; preds = %262
  %269 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %264, i64 0, i32 0
  store i8 0, i8* %4, align 1
  %270 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %10, i64 0, i32 10, i64 %234, i32 3
  %271 = load i32, i32* %270, align 8
  %272 = zext i32 %271 to i64
  %273 = bitcast i8* %266 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %274 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %273, align 8
  %275 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %274, null
  %276 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %274 to i64
  br i1 %275, label %277, label %279

277:                                              ; preds = %268
  %278 = call i64 @llvm.bswap.i64(i64 %276) #11
  br label %289

279:                                              ; preds = %268
  %280 = xor i64 %276, -1
  %281 = getelementptr inbounds i8, i8* %266, i64 8
  %282 = bitcast i8* %281 to i64*
  %283 = load i64, i64* %282, align 8
  %284 = icmp eq i64 %283, %280
  br i1 %284, label %286, label %285, !prof !6

285:                                              ; preds = %279
  call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #13
  unreachable

286:                                              ; preds = %279
  %287 = call i64 @llvm.bswap.i64(i64 %276) #11
  %288 = inttoptr i64 %287 to i8*
  call void @llvm.prefetch(i8* nonnull %288, i32 0, i32 3, i32 1) #11
  br label %289

289:                                              ; preds = %286, %277
  %290 = phi i64 [ %278, %277 ], [ %287, %286 ]
  %291 = inttoptr i64 %290 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %291, %"class.base::internal::PartitionFreelistEntry"** %269, align 1
  %292 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %264, i64 0, i32 3
  %293 = load i16, i16* %292, align 1
  %294 = add i16 %293, 1
  store i16 %294, i16* %292, align 1
  br label %326

295:                                              ; preds = %262
  %296 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %235, %"struct.base::PartitionRoot"* %10, i32 %9, i64 %0, i64 16384, i8* nonnull %4) #11
  %297 = icmp eq i8* %296, null
  br i1 %297, label %326, label %298, !prof !2

298:                                              ; preds = %295
  %299 = ptrtoint i8* %296 to i64
  %300 = and i64 %299, -2097152
  %301 = or i64 %300, 4096
  %302 = inttoptr i64 %301 to i8*
  %303 = lshr i64 %299, 9
  %304 = and i64 %303, 4064
  %305 = getelementptr inbounds i8, i8* %302, i64 %304
  %306 = bitcast i8* %305 to %"struct.base::internal::PartitionPage"*
  %307 = getelementptr inbounds i8, i8* %305, i64 30
  %308 = load i8, i8* %307, align 2
  %309 = zext i8 %308 to i64
  %310 = sub nsw i64 0, %309
  %311 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %306, i64 %310, i32 0, i32 1, i64 21
  %312 = load i8, i8* %311, align 1, !range !4
  %313 = icmp eq i8 %312, 0
  br i1 %313, label %314, label %321, !prof !6

314:                                              ; preds = %298
  %315 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %306, i64 %310, i32 0, i32 1, i64 8
  %316 = bitcast i8* %315 to %"struct.base::internal::PartitionBucket"**
  %317 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %316, align 1
  %318 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %317, i64 0, i32 3
  %319 = load i32, i32* %318, align 8
  %320 = zext i32 %319 to i64
  br label %326

321:                                              ; preds = %298
  %322 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %306, i64 %310, i32 0
  %323 = bitcast %union.anon* %322 to %"struct.base::internal::PartitionPage"*
  %324 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %323, i64 1, i32 0, i32 0, i32 0
  %325 = load i64, i64* %324, align 1
  br label %326

326:                                              ; preds = %321, %314, %295, %289
  %327 = phi i64 [ %272, %289 ], [ -6148914691236517206, %295 ], [ %320, %314 ], [ %325, %321 ]
  %328 = phi i8* [ %266, %289 ], [ null, %295 ], [ %296, %314 ], [ %296, %321 ]
  %329 = atomicrmw xchg i32* %238, i32 0 release
  %330 = icmp eq i32 %329, 2
  br i1 %330, label %331, label %332, !prof !2

331:                                              ; preds = %326
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %237) #11
  br label %332

332:                                              ; preds = %331, %326, %232, %227
  %333 = phi i64 [ %228, %227 ], [ %228, %232 ], [ %327, %326 ], [ %327, %331 ]
  %334 = phi i8* [ %229, %227 ], [ %229, %232 ], [ %328, %326 ], [ %328, %331 ]
  %335 = icmp eq i8* %334, null
  br i1 %335, label %345, label %336, !prof !2

336:                                              ; preds = %332, %132
  %337 = phi i8* [ %128, %132 ], [ %334, %332 ]
  %338 = phi i64 [ %133, %132 ], [ %333, %332 ]
  %339 = and i32 %9, 2
  %340 = icmp ne i32 %339, 0
  %341 = load i8, i8* %4, align 1
  %342 = icmp eq i8 %341, 0
  %343 = and i1 %340, %342
  br i1 %343, label %344, label %345, !prof !9

344:                                              ; preds = %336
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %337, i8 0, i64 %338, i1 false) #11
  br label %345

345:                                              ; preds = %344, %336, %332
  %346 = phi i8* [ null, %332 ], [ %337, %336 ], [ %337, %344 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #11
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #11
  store i8* %346, i8** %6, align 8
  br i1 %14, label %347, label %349

347:                                              ; preds = %345, %17
  %348 = phi i8* [ %18, %17 ], [ %346, %345 ]
  call void @_ZN4base19PartitionAllocHooks31AllocationObserverHookIfEnabledEPvmPKc(i8* %348, i64 %0, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19ArrayBufferContentsEEEPKcv, i64 0, i64 0)) #11
  br label %349

349:                                              ; preds = %347, %345
  %350 = load i8*, i8** %6, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #11
  %351 = atomicrmw add i32* getelementptr inbounds ([0 x %"struct.std::__1::atomic"], [0 x %"struct.std::__1::atomic"]* @_ZN5blink16InstanceCounters9counters_E, i64 0, i64 17, i32 0, i32 0, i32 0, i32 0, i32 0), i32 1 monotonic
  ret i8* %350
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19ArrayBufferContents10FreeMemoryEPv(i8*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"struct.base::internal::DeferredUnmap", align 8
  %3 = atomicrmw sub i32* getelementptr inbounds ([0 x %"struct.std::__1::atomic"], [0 x %"struct.std::__1::atomic"]* @_ZN5blink16InstanceCounters9counters_E, i64 0, i64 17, i32 0, i32 0, i32 0, i32 0, i32 0), i32 1 monotonic
  %4 = icmp eq i8* %0, null
  br i1 %4, label %243, label %5, !prof !2

5:                                                ; preds = %1
  %6 = load atomic i8, i8* getelementptr inbounds (%"struct.std::__1::atomic.12", %"struct.std::__1::atomic.12"* @_ZN4base19PartitionAllocHooks14hooks_enabled_E, i64 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 1
  %7 = and i8 %6, 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  tail call void @_ZN4base19PartitionAllocHooks25FreeObserverHookIfEnabledEPv(i8* nonnull %0) #11
  %10 = tail call zeroext i1 @_ZN4base19PartitionAllocHooks25FreeOverrideHookIfEnabledEPv(i8* nonnull %0) #11
  br i1 %10, label %243, label %11

11:                                               ; preds = %9, %5
  tail call void @llvm.prefetch(i8* nonnull %0, i32 0, i32 3, i32 1) #11
  %12 = ptrtoint i8* %0 to i64
  %13 = and i64 %12, -2097152
  %14 = or i64 %13, 4096
  %15 = inttoptr i64 %14 to i8*
  %16 = lshr i64 %12, 9
  %17 = and i64 %16, 4064
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  %19 = bitcast i8* %18 to %"struct.base::internal::PartitionPage"*
  %20 = getelementptr inbounds i8, i8* %18, i64 30
  %21 = load i8, i8* %20, align 2
  %22 = zext i8 %21 to i64
  %23 = sub nsw i64 0, %22
  %24 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %19, i64 %23, i32 0
  %25 = bitcast %union.anon* %24 to %"struct.base::internal::SlotSpanMetadata"*
  %26 = bitcast %union.anon* %24 to i8*
  tail call void @llvm.prefetch(i8* %26, i32 0, i32 3, i32 1) #11
  %27 = ptrtoint %union.anon* %24 to i64
  %28 = and i64 %27, -4096
  %29 = inttoptr i64 %28 to %"struct.base::internal::PartitionSuperPageExtentEntry"*
  %30 = getelementptr inbounds %"struct.base::internal::PartitionSuperPageExtentEntry", %"struct.base::internal::PartitionSuperPageExtentEntry"* %29, i64 0, i32 0
  %31 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** %30, align 4096
  %32 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 0
  %33 = load i8, i8* %32, align 8
  %34 = icmp eq i8 %33, 2
  br i1 %34, label %35, label %104, !prof !2

35:                                               ; preds = %11
  %36 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %37 = icmp eq i8 %36, 2
  br i1 %37, label %38, label %39, !prof !2

38:                                               ; preds = %35
  tail call void @_ZN4base8internal6PCScan8JoinScanEv() #11
  br label %39

39:                                               ; preds = %38, %35
  %40 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %19, i64 %23, i32 0, i32 1, i64 8
  %41 = bitcast i8* %40 to %"struct.base::internal::PartitionBucket"**
  %42 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %41, align 1
  %43 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 10, i64 0
  %44 = icmp ugt %"struct.base::internal::PartitionBucket"* %43, %42
  %45 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 11
  %46 = icmp ult %"struct.base::internal::PartitionBucket"* %45, %42
  %47 = or i1 %44, %46
  br i1 %47, label %104, label %48, !prof !2

48:                                               ; preds = %39
  %49 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %19, i64 %23, i32 0, i32 1, i64 21
  %50 = load i8, i8* %49, align 1, !range !4
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %56, !prof !6

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %42, i64 0, i32 3
  %54 = load i32, i32* %53, align 8
  %55 = zext i32 %54 to i64
  br label %63

56:                                               ; preds = %48
  %57 = bitcast %union.anon* %24 to %"struct.base::internal::PartitionPage"*
  %58 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %57, i64 1, i32 0, i32 0, i32 0
  %59 = load i64, i64* %58, align 1
  %60 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %42, i64 0, i32 3
  %61 = load i32, i32* %60, align 8
  %62 = zext i32 %61 to i64
  br label %63

63:                                               ; preds = %56, %52
  %64 = phi i64 [ %55, %52 ], [ %62, %56 ]
  %65 = phi i64 [ %55, %52 ], [ %59, %56 ]
  %66 = load atomic i64, i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %67 = inttoptr i64 %13 to i8*
  %68 = and i64 %66, 1
  %69 = icmp eq i64 %68, 0
  %70 = select i1 %69, i64 16384, i64 32768
  %71 = getelementptr inbounds i8, i8* %67, i64 %70
  %72 = bitcast i8* %71 to %"class.base::internal::ObjectBitmap"*
  %73 = lshr i64 %12, 4
  %74 = lshr i64 %12, 10
  %75 = and i64 %74, 2047
  %76 = and i64 %73, 63
  %77 = shl i64 1, %76
  %78 = getelementptr inbounds %"class.base::internal::ObjectBitmap", %"class.base::internal::ObjectBitmap"* %72, i64 0, i32 0, i32 0, i64 %75
  %79 = atomicrmw or i64* %78, i64 %77 monotonic
  %80 = and i64 %79, %77
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %83, label %82, !prof !6

82:                                               ; preds = %63
  notail call void @_ZN4base8internal17DoubleFreeAttemptEv() #13
  unreachable

83:                                               ; preds = %63
  %84 = atomicrmw add i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0), i64 %64 monotonic
  %85 = add i64 %84, %64
  %86 = load atomic i64, i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %87 = icmp ugt i64 %85, %86
  br i1 %87, label %88, label %94

88:                                               ; preds = %83
  %89 = load %"class.base::internal::PCScanSchedulingBackend"*, %"class.base::internal::PCScanSchedulingBackend"** getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 2), align 8
  %90 = bitcast %"class.base::internal::PCScanSchedulingBackend"* %89 to i1 (%"class.base::internal::PCScanSchedulingBackend"*)***
  %91 = load i1 (%"class.base::internal::PCScanSchedulingBackend"*)**, i1 (%"class.base::internal::PCScanSchedulingBackend"*)*** %90, align 8
  %92 = load i1 (%"class.base::internal::PCScanSchedulingBackend"*)*, i1 (%"class.base::internal::PCScanSchedulingBackend"*)** %91, align 8
  %93 = tail call zeroext i1 %92(%"class.base::internal::PCScanSchedulingBackend"* %89) #11
  br label %94

94:                                               ; preds = %88, %83
  %95 = phi i1 [ false, %83 ], [ %93, %88 ]
  %96 = load i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 2), align 1
  %97 = icmp eq i8 %96, 1
  br i1 %97, label %98, label %99

98:                                               ; preds = %94
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %0, i8 0, i64 %65, i1 false) #11
  br label %99

99:                                               ; preds = %98, %94
  br i1 %95, label %100, label %243, !prof !2

100:                                              ; preds = %99
  %101 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %243

103:                                              ; preds = %100
  tail call void @_ZN4base8internal6PCScan11PerformScanENS1_14InvocationModeE(%"class.base::internal::PCScan"* nonnull @_ZN4base8internal6PCScan9instance_E, i32 1) #11
  br label %243

104:                                              ; preds = %39, %11
  %105 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 2
  %106 = load i8, i8* %105, align 2, !range !4
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %176, label %108, !prof !2

108:                                              ; preds = %104
  %109 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %19, i64 %23, i32 0, i32 1, i64 8
  %110 = bitcast i8* %109 to %"struct.base::internal::PartitionBucket"**
  %111 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %110, align 1
  %112 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 10, i64 0
  %113 = icmp ule %"struct.base::internal::PartitionBucket"* %112, %111
  %114 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 11
  %115 = icmp uge %"struct.base::internal::PartitionBucket"* %114, %111
  %116 = and i1 %115, %113
  %117 = ptrtoint %"struct.base::internal::PartitionBucket"* %111 to i64
  br i1 %116, label %118, label %176, !prof !6

118:                                              ; preds = %108
  %119 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %120 = tail call i8* @pthread_getspecific(i32 %119) #11
  %121 = bitcast i8* %120 to %"class.base::internal::ThreadCache"*
  %122 = icmp ugt i8* %120, inttoptr (i64 1 to i8*)
  br i1 %122, label %123, label %176, !prof !6

123:                                              ; preds = %118
  %124 = ptrtoint %"struct.base::internal::PartitionBucket"* %112 to i64
  %125 = sub i64 %117, %124
  %126 = sdiv exact i64 %125, 40
  %127 = getelementptr inbounds i8, i8* %120, i64 1480
  %128 = bitcast i8* %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = add i64 %129, 1
  store i64 %130, i64* %128, align 8
  %131 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %132 = zext i16 %131 to i64
  %133 = icmp ugt i64 %126, %132
  br i1 %133, label %134, label %139, !prof !2

134:                                              ; preds = %123
  %135 = getelementptr inbounds i8, i8* %120, i64 1496
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = add i64 %137, 1
  store i64 %138, i64* %136, align 8
  br label %176

139:                                              ; preds = %123
  %140 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %121, i64 0, i32 0, i64 %126
  %141 = bitcast %"struct.base::internal::ThreadCache::Bucket"* %140 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = tail call i64 @llvm.bswap.i64(i64 %142) #11
  %144 = inttoptr i64 %143 to %"struct.base::internal::EncodedPartitionFreelistEntry"*
  %145 = bitcast i8* %0 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  store %"struct.base::internal::EncodedPartitionFreelistEntry"* %144, %"struct.base::internal::EncodedPartitionFreelistEntry"** %145, align 8
  %146 = xor i64 %143, -1
  %147 = getelementptr inbounds i8, i8* %0, i64 8
  %148 = bitcast i8* %147 to i64*
  store i64 %146, i64* %148, align 8
  %149 = bitcast %"struct.base::internal::ThreadCache::Bucket"* %140 to i8**
  store i8* %0, i8** %149, align 8
  %150 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %121, i64 0, i32 0, i64 %126, i32 1
  %151 = load i8, i8* %150, align 8
  %152 = add i8 %151, 1
  store i8 %152, i8* %150, align 8
  %153 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %121, i64 0, i32 0, i64 %126, i32 3
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i64
  %156 = getelementptr inbounds i8, i8* %120, i64 1424
  %157 = bitcast i8* %156 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = add i64 %158, %155
  store i64 %159, i64* %157, align 8
  %160 = getelementptr inbounds i8, i8* %120, i64 1488
  %161 = bitcast i8* %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = add i64 %162, 1
  store i64 %163, i64* %161, align 8
  %164 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %121, i64 0, i32 0, i64 %126, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %165 = load atomic i8, i8* %164 monotonic, align 1
  %166 = icmp ugt i8 %152, %165
  br i1 %166, label %167, label %170, !prof !2

167:                                              ; preds = %139
  %168 = lshr i8 %165, 1
  %169 = zext i8 %168 to i64
  tail call void @_ZN4base8internal11ThreadCache11ClearBucketERNS1_6BucketEm(%"class.base::internal::ThreadCache"* %121, %"struct.base::internal::ThreadCache::Bucket"* dereferenceable(16) %140, i64 %169) #11
  br label %170

170:                                              ; preds = %167, %139
  %171 = getelementptr inbounds i8, i8* %120, i64 1432
  %172 = load atomic i8, i8* %171 monotonic, align 1
  %173 = and i8 %172, 1
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %243, label %175, !prof !6

175:                                              ; preds = %170
  tail call void @_ZN4base8internal11ThreadCache13PurgeInternalEv(%"class.base::internal::ThreadCache"* %121) #11
  br label %243

176:                                              ; preds = %134, %118, %108, %104
  %177 = bitcast %"struct.base::internal::DeferredUnmap"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %177) #11
  %178 = getelementptr inbounds %"struct.base::internal::DeferredUnmap", %"struct.base::internal::DeferredUnmap"* %2, i64 0, i32 0
  %179 = getelementptr inbounds %"struct.base::internal::DeferredUnmap", %"struct.base::internal::DeferredUnmap"* %2, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %177, i8 0, i64 16, i1 false) #11
  %180 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %31, i64 0, i32 8
  %181 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %180, i64 0, i32 0
  %182 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %180, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %183

183:                                              ; preds = %195, %176
  %184 = phi i32 [ 0, %176 ], [ %196, %195 ]
  %185 = phi i32 [ 1, %176 ], [ %199, %195 ]
  %186 = load atomic i32, i32* %182 monotonic, align 4
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %191, !prof !7

188:                                              ; preds = %183
  %189 = cmpxchg weak i32* %182, i32 0, i32 1 acquire monotonic
  %190 = extractvalue { i32, i1 } %189, 1
  br i1 %190, label %206, label %191, !prof !6

191:                                              ; preds = %188, %183
  %192 = icmp sgt i32 %185, 0
  br i1 %192, label %201, label %195

193:                                              ; preds = %201
  %194 = add i32 %185, %184
  br label %195

195:                                              ; preds = %193, %191
  %196 = phi i32 [ %184, %191 ], [ %194, %193 ]
  %197 = shl i32 %185, 1
  %198 = icmp slt i32 %197, 64
  %199 = select i1 %198, i32 %197, i32 64
  %200 = icmp slt i32 %196, 1000
  br i1 %200, label %183, label %205

201:                                              ; preds = %191, %201
  %202 = phi i32 [ %203, %201 ], [ 0, %191 ]
  tail call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !8
  %203 = add nuw nsw i32 %202, 1
  %204 = icmp eq i32 %203, %185
  br i1 %204, label %193, label %201

205:                                              ; preds = %195
  tail call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %181) #11
  br label %206

206:                                              ; preds = %188, %205
  %207 = bitcast %union.anon* %24 to i8**
  %208 = load i8*, i8** %207, align 1
  %209 = icmp eq i8* %208, %0
  br i1 %209, label %212, label %210, !prof !2

210:                                              ; preds = %206
  %211 = ptrtoint i8* %208 to i64
  br label %215

212:                                              ; preds = %206
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.1, i64 0, i64 0)) #11
  %213 = getelementptr inbounds %union.anon, %union.anon* %24, i64 0, i32 0, i32 0
  %214 = load i64, i64* %213, align 1
  br label %215

215:                                              ; preds = %212, %210
  %216 = phi i64 [ %211, %210 ], [ %214, %212 ]
  %217 = tail call i64 @llvm.bswap.i64(i64 %216) #11
  %218 = inttoptr i64 %217 to %"struct.base::internal::EncodedPartitionFreelistEntry"*
  %219 = bitcast i8* %0 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  store %"struct.base::internal::EncodedPartitionFreelistEntry"* %218, %"struct.base::internal::EncodedPartitionFreelistEntry"** %219, align 8
  %220 = xor i64 %217, -1
  %221 = getelementptr inbounds i8, i8* %0, i64 8
  %222 = bitcast i8* %221 to i64*
  store i64 %220, i64* %222, align 8
  store i8* %0, i8** %207, align 1
  %223 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %19, i64 %23, i32 0, i32 1, i64 16
  %224 = bitcast i8* %223 to i16*
  %225 = load i16, i16* %224, align 1
  %226 = add i16 %225, -1
  store i16 %226, i16* %224, align 1
  %227 = icmp slt i16 %226, 1
  br i1 %227, label %228, label %232, !prof !2

228:                                              ; preds = %215
  %229 = tail call { i8*, i64 } @_ZN4base8internal16SlotSpanMetadataILb1EE12FreeSlowPathEv(%"struct.base::internal::SlotSpanMetadata"* %25) #11
  %230 = extractvalue { i8*, i64 } %229, 0
  %231 = extractvalue { i8*, i64 } %229, 1
  br label %232

232:                                              ; preds = %228, %215
  %233 = phi i8* [ %230, %228 ], [ null, %215 ]
  %234 = phi i64 [ %231, %228 ], [ 0, %215 ]
  store i8* %233, i8** %178, align 8
  store i64 %234, i64* %179, align 8
  %235 = atomicrmw xchg i32* %182, i32 0 release
  %236 = icmp eq i32 %235, 2
  br i1 %236, label %237, label %238, !prof !2

237:                                              ; preds = %232
  tail call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %181) #11
  br label %238

238:                                              ; preds = %237, %232
  %239 = load i8*, i8** %178, align 8
  %240 = icmp eq i8* %239, null
  br i1 %240, label %242, label %241, !prof !6

241:                                              ; preds = %238
  call void @_ZN4base8internal13DeferredUnmap5UnmapEv(%"struct.base::internal::DeferredUnmap"* nonnull %2) #11
  br label %242

242:                                              ; preds = %241, %238
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %177) #11
  br label %243

243:                                              ; preds = %1, %9, %99, %100, %103, %170, %175, %242
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @"_ZZN5blink19ArrayBufferContentsC1EmmNS0_11SharingTypeENS0_20InitializationPolicyEEN3$_08__invokeEPvmS4_"(i8*, i64, i8* nocapture readnone) #4 align 2 {
  tail call void @_ZN5blink19ArrayBufferContents10FreeMemoryEPv(i8* %0) #11
  ret void
}

declare i64 @_ZNK2v812BackingStore10ByteLengthEv(%"class.v8::BackingStore"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v812BackingStore8IsSharedEv(%"class.v8::BackingStore"*) local_unnamed_addr #2

declare i8* @_ZNK2v812BackingStore4DataEv(%"class.v8::BackingStore"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN2v812BackingStoreD1Ev(%"class.v8::BackingStore"*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZNSt3__119__shared_weak_countD2Ev(%"class.std::__1::__shared_weak_count"*) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev(%"class.std::__1::__shared_ptr_pointer"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__shared_ptr_pointer", %"class.std::__1::__shared_ptr_pointer"* %0, i64 0, i32 0
  tail call void @_ZNSt3__119__shared_weak_countD2Ev(%"class.std::__1::__shared_weak_count"* %2) #11
  %3 = bitcast %"class.std::__1::__shared_ptr_pointer"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(%"class.std::__1::__shared_ptr_pointer"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__shared_ptr_pointer", %"class.std::__1::__shared_ptr_pointer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.v8::BackingStore"*, %"class.v8::BackingStore"** %2, align 8
  %4 = icmp eq %"class.v8::BackingStore"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN2v812BackingStoreD1Ev(%"class.v8::BackingStore"* nonnull %3) #11
  %6 = getelementptr inbounds %"class.v8::BackingStore", %"class.v8::BackingStore"* %3, i64 0, i32 0
  tail call void @_ZdlPv(i8* %6) #11
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind
declare i8* @_ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info(%"class.std::__1::__shared_weak_count"*, %"class.std::type_info"* dereferenceable(16)) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_pointerIPN2v812BackingStoreENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv(%"class.std::__1::__shared_ptr_pointer"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.std::__1::__shared_ptr_pointer"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

declare zeroext i1 @_ZN4base19PartitionAllocHooks31AllocationOverrideHookIfEnabledEPPvimPKc(i8**, i32, i64, i8*) local_unnamed_addr #2

declare void @_ZN4base19PartitionAllocHooks31AllocationObserverHookIfEnabledEPvmPKc(i8*, i64, i8*) local_unnamed_addr #2

declare void @_ZN7logging8RawCheckEPKc(i8*) local_unnamed_addr #2

declare i8* @_ZN4base13PartitionRootILb1EE28MaybeInitThreadCacheAndAllocEtPm(%"struct.base::PartitionRoot"*, i16 zeroext, i64*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #3

declare void @_ZN4base8internal6PCScan8JoinScanEv() local_unnamed_addr #2

; Function Attrs: nounwind
declare i8* @pthread_getspecific(i32) local_unnamed_addr #5

declare void @_ZN4base8internal11ThreadCache10FillBucketEm(%"class.base::internal::ThreadCache"*, i64) local_unnamed_addr #2

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() unnamed_addr #8 {
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !10
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !11
  unreachable
}

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #9

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #3

declare void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"*) local_unnamed_addr #2

declare i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"*, %"struct.base::PartitionRoot"*, i32, i64, i64, i8*) local_unnamed_addr #2

declare void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"*) local_unnamed_addr #2

declare void @_ZN4base19PartitionAllocHooks25FreeObserverHookIfEnabledEPv(i8*) local_unnamed_addr #2

declare zeroext i1 @_ZN4base19PartitionAllocHooks25FreeOverrideHookIfEnabledEPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZN4base8internal17DoubleFreeAttemptEv() local_unnamed_addr #10

declare void @_ZN4base8internal6PCScan11PerformScanENS1_14InvocationModeE(%"class.base::internal::PCScan"*, i32) local_unnamed_addr #2

declare void @_ZN4base8internal11ThreadCache11ClearBucketERNS1_6BucketEm(%"class.base::internal::ThreadCache"*, %"struct.base::internal::ThreadCache::Bucket"* dereferenceable(16), i64) local_unnamed_addr #2

declare void @_ZN4base8internal11ThreadCache13PurgeInternalEv(%"class.base::internal::ThreadCache"*) local_unnamed_addr #2

declare { i8*, i64 } @_ZN4base8internal16SlotSpanMetadataILb1EE12FreeSlowPathEv(%"struct.base::internal::SlotSpanMetadata"*) local_unnamed_addr #2

declare void @_ZN4base8internal13DeferredUnmap5UnmapEv(%"struct.base::internal::DeferredUnmap"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inaccessiblemem_or_argmemonly nounwind }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i64 0, i64 65}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 4001, i32 4000000}
!6 = !{!"branch_weights", i32 2000, i32 1}
!7 = !{!"branch_weights", i32 2146410443, i32 1073205}
!8 = !{i32 -2142365086}
!9 = !{!"branch_weights", i32 1, i32 4001}
!10 = !{i32 -2142403659}
!11 = !{i32 -2142403638}
