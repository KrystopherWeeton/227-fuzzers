; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/variance_impl_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/variance_impl_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@bilinear_filters_avx2 = internal unnamed_addr constant <{ [256 x i8], [256 x i8] }> <{ [256 x i8] cx i8] zeroinitializer }>, align 32

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_sub_pixel_variance32xh_avx2(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %9 = icmp eq i32 %2, 0
  br i1 %9, label %10, label %132

10:                                               ; preds = %8
  switch i32 %3, label %85 [
    i32 0, label %18
    i32 4, label %11
  ]

11:                                               ; preds = %10
  %12 = icmp sgt i32 %6, 0
  br i1 %12, label %13, label %488

13:                                               ; preds = %11
  %14 = sext i32 %1 to i64
  %15 = sext i32 %5 to i64
  %16 = bitcast i8* %0 to <32 x i8>*
  %17 = load <32 x i8>, <32 x i8>* %16, align 1
  br label %53

18:                                               ; preds = %10
  %19 = icmp sgt i32 %6, 0
  br i1 %19, label %20, label %488

20:                                               ; preds = %18
  %21 = sext i32 %1 to i64
  %22 = sext i32 %5 to i64
  br label %23

23:                                               ; preds = %23, %20
  %24 = phi i32 [ 0, %20 ], [ %51, %23 ]
  %25 = phi <16 x i16> [ zeroinitializer, %20 ], [ %45, %23 ]
  %26 = phi <8 x i32> [ zeroinitializer, %20 ], [ %48, %23 ]
  %27 = phi i8* [ %0, %20 ], [ %49, %23 ]
  %28 = phi i8* [ %4, %20 ], [ %50, %23 ]
  %29 = bitcast i8* %27 to <32 x i8>*
  %30 = load <32 x i8>, <32 x i8>* %29, align 1
  %31 = bitcast i8* %28 to <32 x i8>*
  %32 = load <32 x i8>, <32 x i8>* %31, align 1
  %33 = shufflevector <32 x i8> %30, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %34 = shufflevector <32 x i8> %30, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %35 = shufflevector <32 x i8> %32, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %36 = shufflevector <32 x i8> %32, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %37 = bitcast <32 x i8> %33 to <16 x i16>
  %38 = bitcast <32 x i8> %35 to <16 x i16>
  %39 = sub <16 x i16> %37, %38
  %40 = bitcast <32 x i8> %34 to <16 x i16>
  %41 = bitcast <32 x i8> %36 to <16 x i16>
  %42 = sub <16 x i16> %40, %41
  %43 = add <16 x i16> %39, %25
  %44 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %39, <16 x i16> %39) #2
  %45 = add <16 x i16> %43, %42
  %46 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %42, <16 x i16> %42) #2
  %47 = add <8 x i32> %44, %26
  %48 = add <8 x i32> %47, %46
  %49 = getelementptr inbounds i8, i8* %27, i64 %21
  %50 = getelementptr inbounds i8, i8* %28, i64 %22
  %51 = add nuw nsw i32 %24, 1
  %52 = icmp eq i32 %51, %6
  br i1 %52, label %472, label %23

53:                                               ; preds = %53, %13
  %54 = phi <32 x i8> [ %17, %13 ], [ %64, %53 ]
  %55 = phi i32 [ 0, %13 ], [ %83, %53 ]
  %56 = phi <16 x i16> [ zeroinitializer, %13 ], [ %78, %53 ]
  %57 = phi <8 x i32> [ zeroinitializer, %13 ], [ %81, %53 ]
  %58 = phi i8* [ %0, %13 ], [ %62, %53 ]
  %59 = phi i8* [ %4, %13 ], [ %82, %53 ]
  %60 = bitcast i8* %59 to <32 x i8>*
  %61 = load <32 x i8>, <32 x i8>* %60, align 1
  %62 = getelementptr inbounds i8, i8* %58, i64 %14
  %63 = bitcast i8* %62 to <32 x i8>*
  %64 = load <32 x i8>, <32 x i8>* %63, align 1
  %65 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %54, <32 x i8> %64) #2
  %66 = shufflevector <32 x i8> %65, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %67 = shufflevector <32 x i8> %65, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %68 = shufflevector <32 x i8> %61, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %69 = shufflevector <32 x i8> %61, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %70 = bitcast <32 x i8> %66 to <16 x i16>
  %71 = bitcast <32 x i8> %68 to <16 x i16>
  %72 = sub <16 x i16> %70, %71
  %73 = bitcast <32 x i8> %67 to <16 x i16>
  %74 = bitcast <32 x i8> %69 to <16 x i16>
  %75 = sub <16 x i16> %73, %74
  %76 = add <16 x i16> %72, %56
  %77 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %72, <16 x i16> %72) #2
  %78 = add <16 x i16> %76, %75
  %79 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %75, <16 x i16> %75) #2
  %80 = add <8 x i32> %77, %57
  %81 = add <8 x i32> %80, %79
  %82 = getelementptr inbounds i8, i8* %59, i64 %15
  %83 = add nuw nsw i32 %55, 1
  %84 = icmp eq i32 %83, %6
  br i1 %84, label %474, label %53

85:                                               ; preds = %10
  %86 = shl i32 %3, 5
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %87
  %89 = bitcast i8* %88 to <32 x i8>*
  %90 = load <32 x i8>, <32 x i8>* %89, align 32
  %91 = icmp sgt i32 %6, 0
  br i1 %91, label %92, label %488

92:                                               ; preds = %85
  %93 = sext i32 %1 to i64
  %94 = sext i32 %5 to i64
  %95 = bitcast i8* %0 to <32 x i8>*
  %96 = load <32 x i8>, <32 x i8>* %95, align 1
  br label %97

97:                                               ; preds = %97, %92
  %98 = phi <32 x i8> [ %96, %92 ], [ %108, %97 ]
  %99 = phi i32 [ 0, %92 ], [ %130, %97 ]
  %100 = phi <16 x i16> [ zeroinitializer, %92 ], [ %125, %97 ]
  %101 = phi <8 x i32> [ zeroinitializer, %92 ], [ %128, %97 ]
  %102 = phi i8* [ %0, %92 ], [ %106, %97 ]
  %103 = phi i8* [ %4, %92 ], [ %129, %97 ]
  %104 = bitcast i8* %103 to <32 x i8>*
  %105 = load <32 x i8>, <32 x i8>* %104, align 1
  %106 = getelementptr inbounds i8, i8* %102, i64 %93
  %107 = bitcast i8* %106 to <32 x i8>*
  %108 = load <32 x i8>, <32 x i8>* %107, align 1
  %109 = shufflevector <32 x i8> %98, <32 x i8> %108, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %110 = shufflevector <32 x i8> %98, <32 x i8> %108, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %111 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %109, <32 x i8> %90) #2
  %112 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %110, <32 x i8> %90) #2
  %113 = add <16 x i16> %111, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %114 = add <16 x i16> %112, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %115 = ashr <16 x i16> %113, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %116 = ashr <16 x i16> %114, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %117 = shufflevector <32 x i8> %105, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %118 = shufflevector <32 x i8> %105, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %119 = bitcast <32 x i8> %117 to <16 x i16>
  %120 = sub <16 x i16> %115, %119
  %121 = bitcast <32 x i8> %118 to <16 x i16>
  %122 = sub <16 x i16> %116, %121
  %123 = add <16 x i16> %120, %100
  %124 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %120, <16 x i16> %120) #2
  %125 = add <16 x i16> %123, %122
  %126 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %122, <16 x i16> %122) #2
  %127 = add <8 x i32> %124, %101
  %128 = add <8 x i32> %127, %126
  %129 = getelementptr inbounds i8, i8* %103, i64 %94
  %130 = add nuw nsw i32 %99, 1
  %131 = icmp eq i32 %130, %6
  br i1 %131, label %470, label %97

132:                                              ; preds = %8
  %133 = icmp eq i32 %2, 4
  %134 = icmp eq i32 %3, 0
  br i1 %133, label %135, label %279

135:                                              ; preds = %132
  br i1 %134, label %136, label %175

136:                                              ; preds = %135
  %137 = icmp sgt i32 %6, 0
  br i1 %137, label %138, label %488

138:                                              ; preds = %136
  %139 = sext i32 %1 to i64
  %140 = sext i32 %5 to i64
  br label %141

141:                                              ; preds = %141, %138
  %142 = phi i32 [ 0, %138 ], [ %173, %141 ]
  %143 = phi <16 x i16> [ zeroinitializer, %138 ], [ %167, %141 ]
  %144 = phi <8 x i32> [ zeroinitializer, %138 ], [ %170, %141 ]
  %145 = phi i8* [ %0, %138 ], [ %171, %141 ]
  %146 = phi i8* [ %4, %138 ], [ %172, %141 ]
  %147 = bitcast i8* %145 to <32 x i8>*
  %148 = load <32 x i8>, <32 x i8>* %147, align 1
  %149 = bitcast i8* %146 to <32 x i8>*
  %150 = load <32 x i8>, <32 x i8>* %149, align 1
  %151 = getelementptr inbounds i8, i8* %145, i64 1
  %152 = bitcast i8* %151 to <32 x i8>*
  %153 = load <32 x i8>, <32 x i8>* %152, align 1
  %154 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %148, <32 x i8> %153) #2
  %155 = shufflevector <32 x i8> %154, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %156 = shufflevector <32 x i8> %154, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %157 = shufflevector <32 x i8> %150, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %158 = shufflevector <32 x i8> %150, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %159 = bitcast <32 x i8> %155 to <16 x i16>
  %160 = bitcast <32 x i8> %157 to <16 x i16>
  %161 = sub <16 x i16> %159, %160
  %162 = bitcast <32 x i8> %156 to <16 x i16>
  %163 = bitcast <32 x i8> %158 to <16 x i16>
  %164 = sub <16 x i16> %162, %163
  %165 = add <16 x i16> %161, %143
  %166 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %161, <16 x i16> %161) #2
  %167 = add <16 x i16> %165, %164
  %168 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %164, <16 x i16> %164) #2
  %169 = add <8 x i32> %166, %144
  %170 = add <8 x i32> %169, %168
  %171 = getelementptr inbounds i8, i8* %145, i64 %139
  %172 = getelementptr inbounds i8, i8* %146, i64 %140
  %173 = add nuw nsw i32 %142, 1
  %174 = icmp eq i32 %173, %6
  br i1 %174, label %476, label %141

175:                                              ; preds = %135
  %176 = icmp eq i32 %3, 4
  br i1 %176, label %177, label %224

177:                                              ; preds = %175
  %178 = icmp sgt i32 %6, 0
  br i1 %178, label %179, label %488

179:                                              ; preds = %177
  %180 = bitcast i8* %0 to <32 x i8>*
  %181 = load <32 x i8>, <32 x i8>* %180, align 1
  %182 = getelementptr inbounds i8, i8* %0, i64 1
  %183 = bitcast i8* %182 to <32 x i8>*
  %184 = load <32 x i8>, <32 x i8>* %183, align 1
  %185 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %181, <32 x i8> %184) #2
  %186 = sext i32 %1 to i64
  %187 = sext i32 %5 to i64
  br label %188

188:                                              ; preds = %188, %179
  %189 = phi i32 [ 0, %179 ], [ %222, %188 ]
  %190 = phi <16 x i16> [ zeroinitializer, %179 ], [ %217, %188 ]
  %191 = phi <8 x i32> [ zeroinitializer, %179 ], [ %220, %188 ]
  %192 = phi <32 x i8> [ %185, %179 ], [ %203, %188 ]
  %193 = phi i8* [ %0, %179 ], [ %195, %188 ]
  %194 = phi i8* [ %4, %179 ], [ %221, %188 ]
  %195 = getelementptr inbounds i8, i8* %193, i64 %186
  %196 = bitcast i8* %195 to <32 x i8>*
  %197 = load <32 x i8>, <32 x i8>* %196, align 1
  %198 = bitcast i8* %194 to <32 x i8>*
  %199 = load <32 x i8>, <32 x i8>* %198, align 1
  %200 = getelementptr inbounds i8, i8* %195, i64 1
  %201 = bitcast i8* %200 to <32 x i8>*
  %202 = load <32 x i8>, <32 x i8>* %201, align 1
  %203 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %197, <32 x i8> %202) #2
  %204 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %192, <32 x i8> %203) #2
  %205 = shufflevector <32 x i8> %204, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %206 = shufflevector <32 x i8> %204, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %207 = shufflevector <32 x i8> %199, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %208 = shufflevector <32 x i8> %199, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %209 = bitcast <32 x i8> %205 to <16 x i16>
  %210 = bitcast <32 x i8> %207 to <16 x i16>
  %211 = sub <16 x i16> %209, %210
  %212 = bitcast <32 x i8> %206 to <16 x i16>
  %213 = bitcast <32 x i8> %208 to <16 x i16>
  %214 = sub <16 x i16> %212, %213
  %215 = add <16 x i16> %211, %190
  %216 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %211, <16 x i16> %211) #2
  %217 = add <16 x i16> %215, %214
  %218 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %214, <16 x i16> %214) #2
  %219 = add <8 x i32> %216, %191
  %220 = add <8 x i32> %219, %218
  %221 = getelementptr inbounds i8, i8* %194, i64 %187
  %222 = add nuw nsw i32 %189, 1
  %223 = icmp eq i32 %222, %6
  br i1 %223, label %478, label %188

224:                                              ; preds = %175
  %225 = shl i32 %3, 5
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %226
  %228 = bitcast i8* %227 to <32 x i8>*
  %229 = load <32 x i8>, <32 x i8>* %228, align 32
  %230 = icmp sgt i32 %6, 0
  br i1 %230, label %231, label %488

231:                                              ; preds = %224
  %232 = bitcast i8* %0 to <32 x i8>*
  %233 = load <32 x i8>, <32 x i8>* %232, align 1
  %234 = getelementptr inbounds i8, i8* %0, i64 1
  %235 = bitcast i8* %234 to <32 x i8>*
  %236 = load <32 x i8>, <32 x i8>* %235, align 1
  %237 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %233, <32 x i8> %236) #2
  %238 = sext i32 %1 to i64
  %239 = sext i32 %5 to i64
  br label %240

240:                                              ; preds = %240, %231
  %241 = phi i32 [ 0, %231 ], [ %277, %240 ]
  %242 = phi <16 x i16> [ zeroinitializer, %231 ], [ %272, %240 ]
  %243 = phi <8 x i32> [ zeroinitializer, %231 ], [ %275, %240 ]
  %244 = phi <32 x i8> [ %237, %231 ], [ %255, %240 ]
  %245 = phi i8* [ %0, %231 ], [ %247, %240 ]
  %246 = phi i8* [ %4, %231 ], [ %276, %240 ]
  %247 = getelementptr inbounds i8, i8* %245, i64 %238
  %248 = bitcast i8* %247 to <32 x i8>*
  %249 = load <32 x i8>, <32 x i8>* %248, align 1
  %250 = bitcast i8* %246 to <32 x i8>*
  %251 = load <32 x i8>, <32 x i8>* %250, align 1
  %252 = getelementptr inbounds i8, i8* %247, i64 1
  %253 = bitcast i8* %252 to <32 x i8>*
  %254 = load <32 x i8>, <32 x i8>* %253, align 1
  %255 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %249, <32 x i8> %254) #2
  %256 = shufflevector <32 x i8> %244, <32 x i8> %255, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %257 = shufflevector <32 x i8> %244, <32 x i8> %255, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %258 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %256, <32 x i8> %229) #2
  %259 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %257, <32 x i8> %229) #2
  %260 = add <16 x i16> %258, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %261 = add <16 x i16> %259, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %262 = ashr <16 x i16> %260, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %263 = ashr <16 x i16> %261, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %264 = shufflevector <32 x i8> %251, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %265 = shufflevector <32 x i8> %251, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %266 = bitcast <32 x i8> %264 to <16 x i16>
  %267 = sub <16 x i16> %262, %266
  %268 = bitcast <32 x i8> %265 to <16 x i16>
  %269 = sub <16 x i16> %263, %268
  %270 = add <16 x i16> %267, %242
  %271 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %267, <16 x i16> %267) #2
  %272 = add <16 x i16> %270, %269
  %273 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %269, <16 x i16> %269) #2
  %274 = add <8 x i32> %271, %243
  %275 = add <8 x i32> %274, %273
  %276 = getelementptr inbounds i8, i8* %246, i64 %239
  %277 = add nuw nsw i32 %241, 1
  %278 = icmp eq i32 %277, %6
  br i1 %278, label %480, label %240

279:                                              ; preds = %132
  br i1 %134, label %280, label %327

280:                                              ; preds = %279
  %281 = shl i32 %2, 5
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %282
  %284 = bitcast i8* %283 to <32 x i8>*
  %285 = load <32 x i8>, <32 x i8>* %284, align 32
  %286 = icmp sgt i32 %6, 0
  br i1 %286, label %287, label %488

287:                                              ; preds = %280
  %288 = sext i32 %1 to i64
  %289 = sext i32 %5 to i64
  br label %290

290:                                              ; preds = %290, %287
  %291 = phi i32 [ 0, %287 ], [ %325, %290 ]
  %292 = phi <16 x i16> [ zeroinitializer, %287 ], [ %319, %290 ]
  %293 = phi <8 x i32> [ zeroinitializer, %287 ], [ %322, %290 ]
  %294 = phi i8* [ %0, %287 ], [ %323, %290 ]
  %295 = phi i8* [ %4, %287 ], [ %324, %290 ]
  %296 = bitcast i8* %294 to <32 x i8>*
  %297 = load <32 x i8>, <32 x i8>* %296, align 1
  %298 = bitcast i8* %295 to <32 x i8>*
  %299 = load <32 x i8>, <32 x i8>* %298, align 1
  %300 = getelementptr inbounds i8, i8* %294, i64 1
  %301 = bitcast i8* %300 to <32 x i8>*
  %302 = load <32 x i8>, <32 x i8>* %301, align 1
  %303 = shufflevector <32 x i8> %297, <32 x i8> %302, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %304 = shufflevector <32 x i8> %297, <32 x i8> %302, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %305 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %303, <32 x i8> %285) #2
  %306 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %304, <32 x i8> %285) #2
  %307 = add <16 x i16> %305, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %308 = add <16 x i16> %306, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %309 = ashr <16 x i16> %307, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %310 = ashr <16 x i16> %308, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %311 = shufflevector <32 x i8> %299, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %312 = shufflevector <32 x i8> %299, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %313 = bitcast <32 x i8> %311 to <16 x i16>
  %314 = sub <16 x i16> %309, %313
  %315 = bitcast <32 x i8> %312 to <16 x i16>
  %316 = sub <16 x i16> %310, %315
  %317 = add <16 x i16> %314, %292
  %318 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %314, <16 x i16> %314) #2
  %319 = add <16 x i16> %317, %316
  %320 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %316, <16 x i16> %316) #2
  %321 = add <8 x i32> %318, %293
  %322 = add <8 x i32> %321, %320
  %323 = getelementptr inbounds i8, i8* %294, i64 %288
  %324 = getelementptr inbounds i8, i8* %295, i64 %289
  %325 = add nuw nsw i32 %291, 1
  %326 = icmp eq i32 %325, %6
  br i1 %326, label %482, label %290

327:                                              ; preds = %279
  %328 = icmp eq i32 %3, 4
  %329 = shl i32 %2, 5
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %330
  %332 = bitcast i8* %331 to <4 x i64>*
  %333 = load <4 x i64>, <4 x i64>* %332, align 32
  br i1 %328, label %334, label %398

334:                                              ; preds = %327
  %335 = bitcast i8* %0 to <32 x i8>*
  %336 = load <32 x i8>, <32 x i8>* %335, align 1
  %337 = getelementptr inbounds i8, i8* %0, i64 1
  %338 = bitcast i8* %337 to <32 x i8>*
  %339 = load <32 x i8>, <32 x i8>* %338, align 1
  %340 = bitcast <4 x i64> %333 to <32 x i8>
  %341 = icmp sgt i32 %6, 0
  br i1 %341, label %342, label %488

342:                                              ; preds = %334
  %343 = shufflevector <32 x i8> %336, <32 x i8> %339, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %344 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %343, <32 x i8> %340) #2
  %345 = add <16 x i16> %344, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %346 = ashr <16 x i16> %345, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %347 = shufflevector <32 x i8> %336, <32 x i8> %339, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %348 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %347, <32 x i8> %340) #2
  %349 = add <16 x i16> %348, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %350 = ashr <16 x i16> %349, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %351 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %346, <16 x i16> %350) #2
  %352 = sext i32 %1 to i64
  %353 = sext i32 %5 to i64
  br label %354

354:                                              ; preds = %354, %342
  %355 = phi <32 x i8> [ %351, %342 ], [ %377, %354 ]
  %356 = phi i32 [ 0, %342 ], [ %396, %354 ]
  %357 = phi <16 x i16> [ zeroinitializer, %342 ], [ %391, %354 ]
  %358 = phi <8 x i32> [ zeroinitializer, %342 ], [ %394, %354 ]
  %359 = phi i8* [ %0, %342 ], [ %361, %354 ]
  %360 = phi i8* [ %4, %342 ], [ %395, %354 ]
  %361 = getelementptr inbounds i8, i8* %359, i64 %352
  %362 = bitcast i8* %361 to <32 x i8>*
  %363 = load <32 x i8>, <32 x i8>* %362, align 1
  %364 = bitcast i8* %360 to <32 x i8>*
  %365 = load <32 x i8>, <32 x i8>* %364, align 1
  %366 = getelementptr inbounds i8, i8* %361, i64 1
  %367 = bitcast i8* %366 to <32 x i8>*
  %368 = load <32 x i8>, <32 x i8>* %367, align 1
  %369 = shufflevector <32 x i8> %363, <32 x i8> %368, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %370 = shufflevector <32 x i8> %363, <32 x i8> %368, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %371 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %369, <32 x i8> %340) #2
  %372 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %370, <32 x i8> %340) #2
  %373 = add <16 x i16> %371, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %374 = add <16 x i16> %372, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %375 = ashr <16 x i16> %373, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %376 = ashr <16 x i16> %374, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %377 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %375, <16 x i16> %376) #2
  %378 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %355, <32 x i8> %377) #2
  %379 = shufflevector <32 x i8> %378, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %380 = shufflevector <32 x i8> %378, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %381 = shufflevector <32 x i8> %365, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %382 = shufflevector <32 x i8> %365, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %383 = bitcast <32 x i8> %379 to <16 x i16>
  %384 = bitcast <32 x i8> %381 to <16 x i16>
  %385 = sub <16 x i16> %383, %384
  %386 = bitcast <32 x i8> %380 to <16 x i16>
  %387 = bitcast <32 x i8> %382 to <16 x i16>
  %388 = sub <16 x i16> %386, %387
  %389 = add <16 x i16> %385, %357
  %390 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %385, <16 x i16> %385) #2
  %391 = add <16 x i16> %389, %388
  %392 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %388, <16 x i16> %388) #2
  %393 = add <8 x i32> %390, %358
  %394 = add <8 x i32> %393, %392
  %395 = getelementptr inbounds i8, i8* %360, i64 %353
  %396 = add nuw nsw i32 %356, 1
  %397 = icmp eq i32 %396, %6
  br i1 %397, label %484, label %354

398:                                              ; preds = %327
  %399 = shl i32 %3, 5
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %400
  %402 = bitcast i8* %401 to <32 x i8>*
  %403 = load <32 x i8>, <32 x i8>* %402, align 32
  %404 = bitcast i8* %0 to <32 x i8>*
  %405 = load <32 x i8>, <32 x i8>* %404, align 1
  %406 = getelementptr inbounds i8, i8* %0, i64 1
  %407 = bitcast i8* %406 to <32 x i8>*
  %408 = load <32 x i8>, <32 x i8>* %407, align 1
  %409 = bitcast <4 x i64> %333 to <32 x i8>
  %410 = icmp sgt i32 %6, 0
  br i1 %410, label %411, label %488

411:                                              ; preds = %398
  %412 = shufflevector <32 x i8> %405, <32 x i8> %408, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %413 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %412, <32 x i8> %409) #2
  %414 = add <16 x i16> %413, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %415 = ashr <16 x i16> %414, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %416 = shufflevector <32 x i8> %405, <32 x i8> %408, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %417 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %416, <32 x i8> %409) #2
  %418 = add <16 x i16> %417, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %419 = ashr <16 x i16> %418, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %420 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %415, <16 x i16> %419) #2
  %421 = sext i32 %1 to i64
  %422 = sext i32 %5 to i64
  br label %423

423:                                              ; preds = %423, %411
  %424 = phi <32 x i8> [ %420, %411 ], [ %446, %423 ]
  %425 = phi i32 [ 0, %411 ], [ %468, %423 ]
  %426 = phi <16 x i16> [ zeroinitializer, %411 ], [ %463, %423 ]
  %427 = phi <8 x i32> [ zeroinitializer, %411 ], [ %466, %423 ]
  %428 = phi i8* [ %0, %411 ], [ %430, %423 ]
  %429 = phi i8* [ %4, %411 ], [ %467, %423 ]
  %430 = getelementptr inbounds i8, i8* %428, i64 %421
  %431 = bitcast i8* %430 to <32 x i8>*
  %432 = load <32 x i8>, <32 x i8>* %431, align 1
  %433 = bitcast i8* %429 to <32 x i8>*
  %434 = load <32 x i8>, <32 x i8>* %433, align 1
  %435 = getelementptr inbounds i8, i8* %430, i64 1
  %436 = bitcast i8* %435 to <32 x i8>*
  %437 = load <32 x i8>, <32 x i8>* %436, align 1
  %438 = shufflevector <32 x i8> %432, <32 x i8> %437, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %439 = shufflevector <32 x i8> %432, <32 x i8> %437, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %440 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %438, <32 x i8> %409) #2
  %441 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %439, <32 x i8> %409) #2
  %442 = add <16 x i16> %440, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %443 = add <16 x i16> %441, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %444 = ashr <16 x i16> %442, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %445 = ashr <16 x i16> %443, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %446 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %444, <16 x i16> %445) #2
  %447 = shufflevector <32 x i8> %424, <32 x i8> %446, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %448 = shufflevector <32 x i8> %424, <32 x i8> %446, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %449 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %447, <32 x i8> %403) #2
  %450 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %448, <32 x i8> %403) #2
  %451 = add <16 x i16> %449, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %452 = add <16 x i16> %450, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %453 = ashr <16 x i16> %451, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %454 = ashr <16 x i16> %452, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %455 = shufflevector <32 x i8> %434, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %456 = shufflevector <32 x i8> %434, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %457 = bitcast <32 x i8> %455 to <16 x i16>
  %458 = sub <16 x i16> %453, %457
  %459 = bitcast <32 x i8> %456 to <16 x i16>
  %460 = sub <16 x i16> %454, %459
  %461 = add <16 x i16> %458, %426
  %462 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %458, <16 x i16> %458) #2
  %463 = add <16 x i16> %461, %460
  %464 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %460, <16 x i16> %460) #2
  %465 = add <8 x i32> %462, %427
  %466 = add <8 x i32> %465, %464
  %467 = getelementptr inbounds i8, i8* %429, i64 %422
  %468 = add nuw nsw i32 %425, 1
  %469 = icmp eq i32 %468, %6
  br i1 %469, label %486, label %423

470:                                              ; preds = %97
  %471 = bitcast <8 x i32> %128 to <4 x i64>
  br label %488

472:                                              ; preds = %23
  %473 = bitcast <8 x i32> %48 to <4 x i64>
  br label %488

474:                                              ; preds = %53
  %475 = bitcast <8 x i32> %81 to <4 x i64>
  br label %488

476:                                              ; preds = %141
  %477 = bitcast <8 x i32> %170 to <4 x i64>
  br label %488

478:                                              ; preds = %188
  %479 = bitcast <8 x i32> %220 to <4 x i64>
  br label %488

480:                                              ; preds = %240
  %481 = bitcast <8 x i32> %275 to <4 x i64>
  br label %488

482:                                              ; preds = %290
  %483 = bitcast <8 x i32> %322 to <4 x i64>
  br label %488

484:                                              ; preds = %354
  %485 = bitcast <8 x i32> %394 to <4 x i64>
  br label %488

486:                                              ; preds = %423
  %487 = bitcast <8 x i32> %466 to <4 x i64>
  br label %488

488:                                              ; preds = %398, %486, %334, %484, %280, %482, %224, %480, %177, %478, %136, %476, %11, %474, %18, %472, %85, %470
  %489 = phi <8 x i32> [ %128, %470 ], [ zeroinitializer, %85 ], [ %48, %472 ], [ zeroinitializer, %18 ], [ %81, %474 ], [ zeroinitializer, %11 ], [ %170, %476 ], [ zeroinitializer, %136 ], [ %220, %478 ], [ zeroinitializer, %177 ], [ %275, %480 ], [ zeroinitializer, %224 ], [ %322, %482 ], [ zeroinitializer, %280 ], [ %394, %484 ], [ zeroinitializer, %334 ], [ %466, %486 ], [ zeroinitializer, %398 ]
  %490 = phi <4 x i64> [ %471, %470 ], [ zeroinitializer, %85 ], [ %473, %472 ], [ zeroinitializer, %18 ], [ %475, %474 ], [ zeroinitializer, %11 ], [ %477, %476 ], [ zeroinitializer, %136 ], [ %479, %478 ], [ zeroinitializer, %177 ], [ %481, %480 ], [ zeroinitializer, %224 ], [ %483, %482 ], [ zeroinitializer, %280 ], [ %485, %484 ], [ zeroinitializer, %334 ], [ %487, %486 ], [ zeroinitializer, %398 ]
  %491 = phi <16 x i16> [ %125, %470 ], [ zeroinitializer, %85 ], [ %45, %472 ], [ zeroinitializer, %18 ], [ %78, %474 ], [ zeroinitializer, %11 ], [ %167, %476 ], [ zeroinitializer, %136 ], [ %217, %478 ], [ zeroinitializer, %177 ], [ %272, %480 ], [ zeroinitializer, %224 ], [ %319, %482 ], [ zeroinitializer, %280 ], [ %391, %484 ], [ zeroinitializer, %334 ], [ %463, %486 ], [ zeroinitializer, %398 ]
  %492 = ashr <16 x i16> %491, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %493 = bitcast <4 x i64> %490 to <32 x i8>
  %494 = shufflevector <32 x i8> %493, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %495 = shufflevector <16 x i16> %491, <16 x i16> %492, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %496 = shufflevector <16 x i16> %491, <16 x i16> %492, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %497 = bitcast <32 x i8> %494 to <8 x i32>
  %498 = add <8 x i32> %489, %497
  %499 = bitcast <16 x i16> %495 to <8 x i32>
  %500 = bitcast <16 x i16> %496 to <8 x i32>
  %501 = add <8 x i32> %500, %499
  %502 = bitcast <8 x i32> %498 to <32 x i8>
  %503 = shufflevector <32 x i8> %502, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %504 = bitcast <8 x i32> %501 to <32 x i8>
  %505 = shufflevector <32 x i8> %504, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %506 = bitcast <32 x i8> %503 to <8 x i32>
  %507 = add <8 x i32> %498, %506
  %508 = bitcast <8 x i32> %507 to <4 x i64>
  %509 = bitcast <32 x i8> %505 to <8 x i32>
  %510 = add <8 x i32> %501, %509
  %511 = shufflevector <4 x i64> %508, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %512 = bitcast <2 x i64> %511 to <4 x i32>
  %513 = extractelement <4 x i32> %512, i32 0
  %514 = extractelement <8 x i32> %507, i32 4
  %515 = add nsw i32 %513, %514
  store i32 %515, i32* %7, align 4
  %516 = bitcast <8 x i32> %510 to <32 x i8>
  %517 = shufflevector <32 x i8> %516, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %518 = bitcast <32 x i8> %517 to <8 x i32>
  %519 = add <8 x i32> %510, %518
  %520 = bitcast <8 x i32> %519 to <4 x i64>
  %521 = shufflevector <4 x i64> %520, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %522 = bitcast <2 x i64> %521 to <4 x i32>
  %523 = extractelement <4 x i32> %522, i32 0
  %524 = extractelement <8 x i32> %519, i32 4
  %525 = add nsw i32 %523, %524
  tail call void @llvm.x86.avx.vzeroupper() #2
  ret i32 %525
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_sub_pixel_variance16xh_avx2(i8* readonly, i32, i32, i32, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %9 = icmp eq i32 %2, 0
  br i1 %9, label %10, label %178

10:                                               ; preds = %8
  switch i32 %3, label %115 [
    i32 0, label %22
    i32 4, label %11
  ]

11:                                               ; preds = %10
  %12 = icmp sgt i32 %6, 0
  br i1 %12, label %13, label %956

13:                                               ; preds = %11
  %14 = sext i32 %1 to i64
  %15 = sext i32 %5 to i64
  %16 = shl i32 %1, 1
  %17 = sext i32 %16 to i64
  %18 = shl i32 %5, 1
  %19 = sext i32 %18 to i64
  %20 = bitcast i8* %0 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  br label %71

22:                                               ; preds = %10
  %23 = icmp sgt i32 %6, 0
  br i1 %23, label %24, label %956

24:                                               ; preds = %22
  %25 = sext i32 %1 to i64
  %26 = sext i32 %5 to i64
  %27 = shl i32 %1, 1
  %28 = sext i32 %27 to i64
  %29 = shl i32 %5, 1
  %30 = sext i32 %29 to i64
  br label %31

31:                                               ; preds = %24, %31
  %32 = phi i8* [ %0, %24 ], [ %67, %31 ]
  %33 = phi i8* [ %4, %24 ], [ %68, %31 ]
  %34 = phi <8 x i32> [ zeroinitializer, %24 ], [ %66, %31 ]
  %35 = phi <16 x i16> [ zeroinitializer, %24 ], [ %63, %31 ]
  %36 = phi i32 [ 0, %24 ], [ %69, %31 ]
  %37 = bitcast i8* %32 to <2 x i64>*
  %38 = load <2 x i64>, <2 x i64>* %37, align 1
  %39 = getelementptr inbounds i8, i8* %32, i64 %25
  %40 = bitcast i8* %39 to <2 x i64>*
  %41 = load <2 x i64>, <2 x i64>* %40, align 1
  %42 = shufflevector <2 x i64> %38, <2 x i64> %41, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = bitcast i8* %33 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 1
  %45 = getelementptr inbounds i8, i8* %33, i64 %26
  %46 = bitcast i8* %45 to <2 x i64>*
  %47 = load <2 x i64>, <2 x i64>* %46, align 1
  %48 = shufflevector <2 x i64> %44, <2 x i64> %47, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %49 = bitcast <4 x i64> %42 to <32 x i8>
  %50 = shufflevector <32 x i8> %49, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %51 = shufflevector <32 x i8> %49, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %52 = bitcast <4 x i64> %48 to <32 x i8>
  %53 = shufflevector <32 x i8> %52, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %54 = shufflevector <32 x i8> %52, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %55 = bitcast <32 x i8> %50 to <16 x i16>
  %56 = bitcast <32 x i8> %53 to <16 x i16>
  %57 = sub <16 x i16> %55, %56
  %58 = bitcast <32 x i8> %51 to <16 x i16>
  %59 = bitcast <32 x i8> %54 to <16 x i16>
  %60 = sub <16 x i16> %58, %59
  %61 = add <16 x i16> %57, %35
  %62 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %57, <16 x i16> %57) #2
  %63 = add <16 x i16> %61, %60
  %64 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %60, <16 x i16> %60) #2
  %65 = add <8 x i32> %62, %34
  %66 = add <8 x i32> %65, %64
  %67 = getelementptr inbounds i8, i8* %32, i64 %28
  %68 = getelementptr inbounds i8, i8* %33, i64 %30
  %69 = add nuw nsw i32 %36, 2
  %70 = icmp slt i32 %69, %6
  br i1 %70, label %31, label %948

71:                                               ; preds = %13, %71
  %72 = phi <2 x i64> [ %21, %13 ], [ %90, %71 ]
  %73 = phi i8* [ %0, %13 ], [ %88, %71 ]
  %74 = phi i8* [ %4, %13 ], [ %112, %71 ]
  %75 = phi <8 x i32> [ zeroinitializer, %13 ], [ %111, %71 ]
  %76 = phi <16 x i16> [ zeroinitializer, %13 ], [ %108, %71 ]
  %77 = phi i32 [ 0, %13 ], [ %113, %71 ]
  %78 = getelementptr inbounds i8, i8* %73, i64 %14
  %79 = bitcast i8* %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 1
  %81 = shufflevector <2 x i64> %72, <2 x i64> %80, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %82 = bitcast i8* %74 to <2 x i64>*
  %83 = load <2 x i64>, <2 x i64>* %82, align 1
  %84 = getelementptr inbounds i8, i8* %74, i64 %15
  %85 = bitcast i8* %84 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 1
  %87 = shufflevector <2 x i64> %83, <2 x i64> %86, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %88 = getelementptr inbounds i8, i8* %73, i64 %17
  %89 = bitcast i8* %88 to <2 x i64>*
  %90 = load <2 x i64>, <2 x i64>* %89, align 1
  %91 = shufflevector <2 x i64> %80, <2 x i64> %90, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %92 = bitcast <4 x i64> %81 to <32 x i8>
  %93 = bitcast <4 x i64> %91 to <32 x i8>
  %94 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %92, <32 x i8> %93) #2
  %95 = shufflevector <32 x i8> %94, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %96 = shufflevector <32 x i8> %94, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %97 = bitcast <4 x i64> %87 to <32 x i8>
  %98 = shufflevector <32 x i8> %97, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %99 = shufflevector <32 x i8> %97, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %100 = bitcast <32 x i8> %95 to <16 x i16>
  %101 = bitcast <32 x i8> %98 to <16 x i16>
  %102 = sub <16 x i16> %100, %101
  %103 = bitcast <32 x i8> %96 to <16 x i16>
  %104 = bitcast <32 x i8> %99 to <16 x i16>
  %105 = sub <16 x i16> %103, %104
  %106 = add <16 x i16> %102, %76
  %107 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %102, <16 x i16> %102) #2
  %108 = add <16 x i16> %106, %105
  %109 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %105, <16 x i16> %105) #2
  %110 = add <8 x i32> %107, %75
  %111 = add <8 x i32> %110, %109
  %112 = getelementptr inbounds i8, i8* %74, i64 %19
  %113 = add nuw nsw i32 %77, 2
  %114 = icmp slt i32 %113, %6
  br i1 %114, label %71, label %950

115:                                              ; preds = %10
  %116 = shl i32 %3, 5
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %117
  %119 = bitcast i8* %118 to <32 x i8>*
  %120 = load <32 x i8>, <32 x i8>* %119, align 32
  %121 = icmp sgt i32 %6, 0
  br i1 %121, label %122, label %956

122:                                              ; preds = %115
  %123 = sext i32 %1 to i64
  %124 = sext i32 %5 to i64
  %125 = shl i32 %1, 1
  %126 = sext i32 %125 to i64
  %127 = shl i32 %5, 1
  %128 = sext i32 %127 to i64
  %129 = bitcast i8* %0 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 1
  br label %131

131:                                              ; preds = %122, %131
  %132 = phi <2 x i64> [ %130, %122 ], [ %150, %131 ]
  %133 = phi i8* [ %0, %122 ], [ %148, %131 ]
  %134 = phi i8* [ %4, %122 ], [ %175, %131 ]
  %135 = phi <8 x i32> [ zeroinitializer, %122 ], [ %174, %131 ]
  %136 = phi <16 x i16> [ zeroinitializer, %122 ], [ %171, %131 ]
  %137 = phi i32 [ 0, %122 ], [ %176, %131 ]
  %138 = getelementptr inbounds i8, i8* %133, i64 %123
  %139 = bitcast i8* %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 1
  %141 = shufflevector <2 x i64> %132, <2 x i64> %140, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %142 = bitcast i8* %134 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 1
  %144 = getelementptr inbounds i8, i8* %134, i64 %124
  %145 = bitcast i8* %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 1
  %147 = shufflevector <2 x i64> %143, <2 x i64> %146, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %148 = getelementptr inbounds i8, i8* %133, i64 %126
  %149 = bitcast i8* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 1
  %151 = shufflevector <2 x i64> %140, <2 x i64> %150, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %152 = bitcast <4 x i64> %141 to <32 x i8>
  %153 = bitcast <4 x i64> %151 to <32 x i8>
  %154 = shufflevector <32 x i8> %152, <32 x i8> %153, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %155 = shufflevector <32 x i8> %152, <32 x i8> %153, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %156 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %154, <32 x i8> %120) #2
  %157 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %155, <32 x i8> %120) #2
  %158 = add <16 x i16> %156, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %159 = add <16 x i16> %157, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %160 = ashr <16 x i16> %158, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %161 = ashr <16 x i16> %159, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %162 = bitcast <4 x i64> %147 to <32 x i8>
  %163 = shufflevector <32 x i8> %162, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %164 = shufflevector <32 x i8> %162, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %165 = bitcast <32 x i8> %163 to <16 x i16>
  %166 = sub <16 x i16> %160, %165
  %167 = bitcast <32 x i8> %164 to <16 x i16>
  %168 = sub <16 x i16> %161, %167
  %169 = add <16 x i16> %166, %136
  %170 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %166, <16 x i16> %166) #2
  %171 = add <16 x i16> %169, %168
  %172 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %168, <16 x i16> %168) #2
  %173 = add <8 x i32> %170, %135
  %174 = add <8 x i32> %173, %172
  %175 = getelementptr inbounds i8, i8* %134, i64 %128
  %176 = add nuw nsw i32 %137, 2
  %177 = icmp slt i32 %176, %6
  br i1 %177, label %131, label %946

178:                                              ; preds = %8
  %179 = icmp eq i32 %2, 4
  %180 = icmp eq i32 %3, 0
  br i1 %179, label %181, label %529

181:                                              ; preds = %178
  br i1 %180, label %182, label %240

182:                                              ; preds = %181
  %183 = icmp sgt i32 %6, 0
  br i1 %183, label %184, label %956

184:                                              ; preds = %182
  %185 = sext i32 %1 to i64
  %186 = sext i32 %5 to i64
  %187 = shl i32 %1, 1
  %188 = sext i32 %187 to i64
  %189 = shl i32 %5, 1
  %190 = sext i32 %189 to i64
  br label %191

191:                                              ; preds = %184, %191
  %192 = phi i8* [ %0, %184 ], [ %236, %191 ]
  %193 = phi i8* [ %4, %184 ], [ %237, %191 ]
  %194 = phi <8 x i32> [ zeroinitializer, %184 ], [ %235, %191 ]
  %195 = phi <16 x i16> [ zeroinitializer, %184 ], [ %232, %191 ]
  %196 = phi i32 [ 0, %184 ], [ %238, %191 ]
  %197 = bitcast i8* %192 to <2 x i64>*
  %198 = load <2 x i64>, <2 x i64>* %197, align 1
  %199 = getelementptr inbounds i8, i8* %192, i64 %185
  %200 = bitcast i8* %199 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 1
  %202 = shufflevector <2 x i64> %198, <2 x i64> %201, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %203 = getelementptr inbounds i8, i8* %192, i64 1
  %204 = bitcast i8* %203 to <2 x i64>*
  %205 = load <2 x i64>, <2 x i64>* %204, align 1
  %206 = getelementptr inbounds i8, i8* %199, i64 1
  %207 = bitcast i8* %206 to <2 x i64>*
  %208 = load <2 x i64>, <2 x i64>* %207, align 1
  %209 = shufflevector <2 x i64> %205, <2 x i64> %208, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %210 = bitcast i8* %193 to <2 x i64>*
  %211 = load <2 x i64>, <2 x i64>* %210, align 1
  %212 = getelementptr inbounds i8, i8* %193, i64 %186
  %213 = bitcast i8* %212 to <2 x i64>*
  %214 = load <2 x i64>, <2 x i64>* %213, align 1
  %215 = shufflevector <2 x i64> %211, <2 x i64> %214, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %216 = bitcast <4 x i64> %202 to <32 x i8>
  %217 = bitcast <4 x i64> %209 to <32 x i8>
  %218 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %216, <32 x i8> %217) #2
  %219 = shufflevector <32 x i8> %218, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %220 = shufflevector <32 x i8> %218, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %221 = bitcast <4 x i64> %215 to <32 x i8>
  %222 = shufflevector <32 x i8> %221, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %223 = shufflevector <32 x i8> %221, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %224 = bitcast <32 x i8> %219 to <16 x i16>
  %225 = bitcast <32 x i8> %222 to <16 x i16>
  %226 = sub <16 x i16> %224, %225
  %227 = bitcast <32 x i8> %220 to <16 x i16>
  %228 = bitcast <32 x i8> %223 to <16 x i16>
  %229 = sub <16 x i16> %227, %228
  %230 = add <16 x i16> %226, %195
  %231 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %226, <16 x i16> %226) #2
  %232 = add <16 x i16> %230, %229
  %233 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %229, <16 x i16> %229) #2
  %234 = add <8 x i32> %231, %194
  %235 = add <8 x i32> %234, %233
  %236 = getelementptr inbounds i8, i8* %192, i64 %188
  %237 = getelementptr inbounds i8, i8* %193, i64 %190
  %238 = add nuw nsw i32 %196, 2
  %239 = icmp slt i32 %238, %6
  br i1 %239, label %191, label %952

240:                                              ; preds = %181
  %241 = icmp eq i32 %3, 4
  br i1 %241, label %242, label %380

242:                                              ; preds = %240
  %243 = bitcast i8* %0 to <2 x i64>*
  %244 = load <2 x i64>, <2 x i64>* %243, align 1
  %245 = sext i32 %1 to i64
  %246 = getelementptr inbounds i8, i8* %0, i64 %245
  %247 = bitcast i8* %246 to <2 x i64>*
  %248 = load <2 x i64>, <2 x i64>* %247, align 1
  %249 = shufflevector <2 x i64> %244, <2 x i64> %248, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %250 = getelementptr inbounds i8, i8* %0, i64 1
  %251 = bitcast i8* %250 to <2 x i64>*
  %252 = load <2 x i64>, <2 x i64>* %251, align 1
  %253 = getelementptr inbounds i8, i8* %246, i64 1
  %254 = bitcast i8* %253 to <2 x i64>*
  %255 = load <2 x i64>, <2 x i64>* %254, align 1
  %256 = shufflevector <2 x i64> %252, <2 x i64> %255, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %257 = bitcast <4 x i64> %249 to <32 x i8>
  %258 = bitcast <4 x i64> %256 to <32 x i8>
  %259 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %257, <32 x i8> %258) #2
  %260 = bitcast <32 x i8> %259 to <4 x i64>
  %261 = shl i32 %1, 1
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds i8, i8* %0, i64 %262
  %264 = add nsw i32 %6, -2
  %265 = icmp sgt i32 %264, 0
  %266 = bitcast i8* %263 to <2 x i64>*
  %267 = load <2 x i64>, <2 x i64>* %266, align 1
  %268 = sext i32 %5 to i64
  br i1 %265, label %269, label %337

269:                                              ; preds = %242
  %270 = shl i32 %5, 1
  %271 = sext i32 %270 to i64
  %272 = add i32 %6, -3
  %273 = lshr i32 %272, 1
  %274 = add nuw nsw i32 %273, 1
  %275 = zext i32 %274 to i64
  %276 = mul nsw i64 %275, %262
  %277 = mul nsw i64 %275, %271
  br label %278

278:                                              ; preds = %269, %278
  %279 = phi <2 x i64> [ %267, %269 ], [ %333, %278 ]
  %280 = phi i8* [ %263, %269 ], [ %330, %278 ]
  %281 = phi i8* [ %4, %269 ], [ %328, %278 ]
  %282 = phi <8 x i32> [ zeroinitializer, %269 ], [ %327, %278 ]
  %283 = phi <16 x i16> [ zeroinitializer, %269 ], [ %324, %278 ]
  %284 = phi <4 x i64> [ %260, %269 ], [ %301, %278 ]
  %285 = phi <32 x i8> [ %259, %269 ], [ %300, %278 ]
  %286 = phi i32 [ 0, %269 ], [ %329, %278 ]
  %287 = getelementptr inbounds i8, i8* %280, i64 %245
  %288 = bitcast i8* %287 to <2 x i64>*
  %289 = load <2 x i64>, <2 x i64>* %288, align 1
  %290 = shufflevector <2 x i64> %279, <2 x i64> %289, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %291 = getelementptr inbounds i8, i8* %280, i64 1
  %292 = bitcast i8* %291 to <2 x i64>*
  %293 = load <2 x i64>, <2 x i64>* %292, align 1
  %294 = getelementptr inbounds i8, i8* %287, i64 1
  %295 = bitcast i8* %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 1
  %297 = shufflevector <2 x i64> %293, <2 x i64> %296, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %298 = bitcast <4 x i64> %290 to <32 x i8>
  %299 = bitcast <4 x i64> %297 to <32 x i8>
  %300 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %298, <32 x i8> %299) #2
  %301 = bitcast <32 x i8> %300 to <4 x i64>
  %302 = shufflevector <4 x i64> %284, <4 x i64> %301, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %303 = bitcast <4 x i64> %302 to <32 x i8>
  %304 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %285, <32 x i8> %303) #2
  %305 = bitcast i8* %281 to <2 x i64>*
  %306 = load <2 x i64>, <2 x i64>* %305, align 1
  %307 = getelementptr inbounds i8, i8* %281, i64 %268
  %308 = bitcast i8* %307 to <2 x i64>*
  %309 = load <2 x i64>, <2 x i64>* %308, align 1
  %310 = shufflevector <2 x i64> %306, <2 x i64> %309, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %311 = shufflevector <32 x i8> %304, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %312 = shufflevector <32 x i8> %304, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %313 = bitcast <4 x i64> %310 to <32 x i8>
  %314 = shufflevector <32 x i8> %313, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %315 = shufflevector <32 x i8> %313, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %316 = bitcast <32 x i8> %311 to <16 x i16>
  %317 = bitcast <32 x i8> %314 to <16 x i16>
  %318 = sub <16 x i16> %316, %317
  %319 = bitcast <32 x i8> %312 to <16 x i16>
  %320 = bitcast <32 x i8> %315 to <16 x i16>
  %321 = sub <16 x i16> %319, %320
  %322 = add <16 x i16> %318, %283
  %323 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %318, <16 x i16> %318) #2
  %324 = add <16 x i16> %322, %321
  %325 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %321, <16 x i16> %321) #2
  %326 = add <8 x i32> %323, %282
  %327 = add <8 x i32> %326, %325
  %328 = getelementptr inbounds i8, i8* %281, i64 %271
  %329 = add nuw nsw i32 %286, 2
  %330 = getelementptr inbounds i8, i8* %280, i64 %262
  %331 = icmp slt i32 %329, %264
  %332 = bitcast i8* %330 to <2 x i64>*
  %333 = load <2 x i64>, <2 x i64>* %332, align 1
  br i1 %331, label %278, label %334

334:                                              ; preds = %278
  %335 = getelementptr i8, i8* %0, i64 %276
  %336 = getelementptr i8, i8* %4, i64 %277
  br label %337

337:                                              ; preds = %242, %334
  %338 = phi <32 x i8> [ %300, %334 ], [ %259, %242 ]
  %339 = phi <4 x i64> [ %301, %334 ], [ %260, %242 ]
  %340 = phi <16 x i16> [ %324, %334 ], [ zeroinitializer, %242 ]
  %341 = phi <8 x i32> [ %327, %334 ], [ zeroinitializer, %242 ]
  %342 = phi i8* [ %336, %334 ], [ %4, %242 ]
  %343 = phi i8* [ %335, %334 ], [ %0, %242 ]
  %344 = phi <2 x i64> [ %333, %334 ], [ %267, %242 ]
  %345 = getelementptr inbounds i8, i8* %343, i64 %262
  %346 = getelementptr inbounds i8, i8* %345, i64 1
  %347 = bitcast i8* %346 to <16 x i8>*
  %348 = load <16 x i8>, <16 x i8>* %347, align 1
  %349 = bitcast <2 x i64> %344 to <16 x i8>
  %350 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %349, <16 x i8> %348) #2
  %351 = bitcast <16 x i8> %350 to <2 x i64>
  %352 = shufflevector <2 x i64> %351, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %353 = shufflevector <4 x i64> %339, <4 x i64> %352, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %354 = bitcast i8* %342 to <2 x i64>*
  %355 = load <2 x i64>, <2 x i64>* %354, align 1
  %356 = getelementptr inbounds i8, i8* %342, i64 %268
  %357 = bitcast i8* %356 to <2 x i64>*
  %358 = load <2 x i64>, <2 x i64>* %357, align 1
  %359 = shufflevector <2 x i64> %355, <2 x i64> %358, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %360 = bitcast <4 x i64> %353 to <32 x i8>
  %361 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %338, <32 x i8> %360) #2
  %362 = shufflevector <32 x i8> %361, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %363 = shufflevector <32 x i8> %361, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %364 = bitcast <4 x i64> %359 to <32 x i8>
  %365 = shufflevector <32 x i8> %364, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %366 = shufflevector <32 x i8> %364, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %367 = bitcast <32 x i8> %362 to <16 x i16>
  %368 = bitcast <32 x i8> %365 to <16 x i16>
  %369 = sub <16 x i16> %367, %368
  %370 = bitcast <32 x i8> %363 to <16 x i16>
  %371 = bitcast <32 x i8> %366 to <16 x i16>
  %372 = sub <16 x i16> %370, %371
  %373 = add <16 x i16> %369, %340
  %374 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %369, <16 x i16> %369) #2
  %375 = add <16 x i16> %373, %372
  %376 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %372, <16 x i16> %372) #2
  %377 = add <8 x i32> %374, %341
  %378 = add <8 x i32> %377, %376
  %379 = bitcast <8 x i32> %378 to <4 x i64>
  br label %956

380:                                              ; preds = %240
  %381 = shl i32 %3, 5
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %382
  %384 = bitcast i8* %383 to <32 x i8>*
  %385 = load <32 x i8>, <32 x i8>* %384, align 32
  %386 = bitcast i8* %0 to <2 x i64>*
  %387 = load <2 x i64>, <2 x i64>* %386, align 1
  %388 = sext i32 %1 to i64
  %389 = getelementptr inbounds i8, i8* %0, i64 %388
  %390 = bitcast i8* %389 to <2 x i64>*
  %391 = load <2 x i64>, <2 x i64>* %390, align 1
  %392 = shufflevector <2 x i64> %387, <2 x i64> %391, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %393 = getelementptr inbounds i8, i8* %0, i64 1
  %394 = bitcast i8* %393 to <2 x i64>*
  %395 = load <2 x i64>, <2 x i64>* %394, align 1
  %396 = getelementptr inbounds i8, i8* %389, i64 1
  %397 = bitcast i8* %396 to <2 x i64>*
  %398 = load <2 x i64>, <2 x i64>* %397, align 1
  %399 = shufflevector <2 x i64> %395, <2 x i64> %398, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %400 = bitcast <4 x i64> %392 to <32 x i8>
  %401 = bitcast <4 x i64> %399 to <32 x i8>
  %402 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %400, <32 x i8> %401) #2
  %403 = bitcast <32 x i8> %402 to <4 x i64>
  %404 = shl i32 %1, 1
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds i8, i8* %0, i64 %405
  %407 = add nsw i32 %6, -2
  %408 = icmp sgt i32 %407, 0
  %409 = bitcast i8* %406 to <2 x i64>*
  %410 = load <2 x i64>, <2 x i64>* %409, align 1
  %411 = sext i32 %5 to i64
  br i1 %408, label %412, label %483

412:                                              ; preds = %380
  %413 = shl i32 %5, 1
  %414 = sext i32 %413 to i64
  %415 = add i32 %6, -3
  %416 = lshr i32 %415, 1
  %417 = add nuw nsw i32 %416, 1
  %418 = zext i32 %417 to i64
  %419 = mul nsw i64 %418, %405
  %420 = mul nsw i64 %418, %414
  br label %421

421:                                              ; preds = %412, %421
  %422 = phi <2 x i64> [ %410, %412 ], [ %479, %421 ]
  %423 = phi i8* [ %406, %412 ], [ %476, %421 ]
  %424 = phi i8* [ %4, %412 ], [ %474, %421 ]
  %425 = phi <8 x i32> [ zeroinitializer, %412 ], [ %473, %421 ]
  %426 = phi <16 x i16> [ zeroinitializer, %412 ], [ %470, %421 ]
  %427 = phi <4 x i64> [ %403, %412 ], [ %444, %421 ]
  %428 = phi <32 x i8> [ %402, %412 ], [ %443, %421 ]
  %429 = phi i32 [ 0, %412 ], [ %475, %421 ]
  %430 = getelementptr inbounds i8, i8* %423, i64 %388
  %431 = bitcast i8* %430 to <2 x i64>*
  %432 = load <2 x i64>, <2 x i64>* %431, align 1
  %433 = shufflevector <2 x i64> %422, <2 x i64> %432, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %434 = getelementptr inbounds i8, i8* %423, i64 1
  %435 = bitcast i8* %434 to <2 x i64>*
  %436 = load <2 x i64>, <2 x i64>* %435, align 1
  %437 = getelementptr inbounds i8, i8* %430, i64 1
  %438 = bitcast i8* %437 to <2 x i64>*
  %439 = load <2 x i64>, <2 x i64>* %438, align 1
  %440 = shufflevector <2 x i64> %436, <2 x i64> %439, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %441 = bitcast <4 x i64> %433 to <32 x i8>
  %442 = bitcast <4 x i64> %440 to <32 x i8>
  %443 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %441, <32 x i8> %442) #2
  %444 = bitcast <32 x i8> %443 to <4 x i64>
  %445 = shufflevector <4 x i64> %427, <4 x i64> %444, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %446 = bitcast i8* %424 to <2 x i64>*
  %447 = load <2 x i64>, <2 x i64>* %446, align 1
  %448 = getelementptr inbounds i8, i8* %424, i64 %411
  %449 = bitcast i8* %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 1
  %451 = shufflevector <2 x i64> %447, <2 x i64> %450, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %452 = bitcast <4 x i64> %445 to <32 x i8>
  %453 = shufflevector <32 x i8> %428, <32 x i8> %452, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %454 = shufflevector <32 x i8> %428, <32 x i8> %452, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %455 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %453, <32 x i8> %385) #2
  %456 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %454, <32 x i8> %385) #2
  %457 = add <16 x i16> %455, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %458 = add <16 x i16> %456, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %459 = ashr <16 x i16> %457, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %460 = ashr <16 x i16> %458, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %461 = bitcast <4 x i64> %451 to <32 x i8>
  %462 = shufflevector <32 x i8> %461, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %463 = shufflevector <32 x i8> %461, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %464 = bitcast <32 x i8> %462 to <16 x i16>
  %465 = sub <16 x i16> %459, %464
  %466 = bitcast <32 x i8> %463 to <16 x i16>
  %467 = sub <16 x i16> %460, %466
  %468 = add <16 x i16> %465, %426
  %469 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %465, <16 x i16> %465) #2
  %470 = add <16 x i16> %468, %467
  %471 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %467, <16 x i16> %467) #2
  %472 = add <8 x i32> %469, %425
  %473 = add <8 x i32> %472, %471
  %474 = getelementptr inbounds i8, i8* %424, i64 %414
  %475 = add nuw nsw i32 %429, 2
  %476 = getelementptr inbounds i8, i8* %423, i64 %405
  %477 = icmp slt i32 %475, %407
  %478 = bitcast i8* %476 to <2 x i64>*
  %479 = load <2 x i64>, <2 x i64>* %478, align 1
  br i1 %477, label %421, label %480

480:                                              ; preds = %421
  %481 = getelementptr i8, i8* %0, i64 %419
  %482 = getelementptr i8, i8* %4, i64 %420
  br label %483

483:                                              ; preds = %380, %480
  %484 = phi <32 x i8> [ %443, %480 ], [ %402, %380 ]
  %485 = phi <4 x i64> [ %444, %480 ], [ %403, %380 ]
  %486 = phi <16 x i16> [ %470, %480 ], [ zeroinitializer, %380 ]
  %487 = phi <8 x i32> [ %473, %480 ], [ zeroinitializer, %380 ]
  %488 = phi i8* [ %482, %480 ], [ %4, %380 ]
  %489 = phi i8* [ %481, %480 ], [ %0, %380 ]
  %490 = phi <2 x i64> [ %479, %480 ], [ %410, %380 ]
  %491 = getelementptr inbounds i8, i8* %489, i64 %405
  %492 = getelementptr inbounds i8, i8* %491, i64 1
  %493 = bitcast i8* %492 to <16 x i8>*
  %494 = load <16 x i8>, <16 x i8>* %493, align 1
  %495 = bitcast <2 x i64> %490 to <16 x i8>
  %496 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %495, <16 x i8> %494) #2
  %497 = bitcast <16 x i8> %496 to <2 x i64>
  %498 = shufflevector <2 x i64> %497, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %499 = shufflevector <4 x i64> %485, <4 x i64> %498, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %500 = bitcast i8* %488 to <2 x i64>*
  %501 = load <2 x i64>, <2 x i64>* %500, align 1
  %502 = getelementptr inbounds i8, i8* %488, i64 %411
  %503 = bitcast i8* %502 to <2 x i64>*
  %504 = load <2 x i64>, <2 x i64>* %503, align 1
  %505 = shufflevector <2 x i64> %501, <2 x i64> %504, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %506 = bitcast <4 x i64> %499 to <32 x i8>
  %507 = shufflevector <32 x i8> %484, <32 x i8> %506, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %508 = shufflevector <32 x i8> %484, <32 x i8> %506, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %509 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %507, <32 x i8> %385) #2
  %510 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %508, <32 x i8> %385) #2
  %511 = add <16 x i16> %509, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %512 = add <16 x i16> %510, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %513 = ashr <16 x i16> %511, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %514 = ashr <16 x i16> %512, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %515 = bitcast <4 x i64> %505 to <32 x i8>
  %516 = shufflevector <32 x i8> %515, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %517 = shufflevector <32 x i8> %515, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %518 = bitcast <32 x i8> %516 to <16 x i16>
  %519 = sub <16 x i16> %513, %518
  %520 = bitcast <32 x i8> %517 to <16 x i16>
  %521 = sub <16 x i16> %514, %520
  %522 = add <16 x i16> %519, %486
  %523 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %519, <16 x i16> %519) #2
  %524 = add <16 x i16> %522, %521
  %525 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %521, <16 x i16> %521) #2
  %526 = add <8 x i32> %523, %487
  %527 = add <8 x i32> %526, %525
  %528 = bitcast <8 x i32> %527 to <4 x i64>
  br label %956

529:                                              ; preds = %178
  br i1 %180, label %530, label %598

530:                                              ; preds = %529
  %531 = shl i32 %2, 5
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %532
  %534 = bitcast i8* %533 to <32 x i8>*
  %535 = load <32 x i8>, <32 x i8>* %534, align 32
  %536 = icmp sgt i32 %6, 0
  br i1 %536, label %537, label %956

537:                                              ; preds = %530
  %538 = sext i32 %1 to i64
  %539 = sext i32 %5 to i64
  %540 = add nsw i32 %1, 1
  %541 = sext i32 %540 to i64
  %542 = shl i32 %1, 1
  %543 = sext i32 %542 to i64
  %544 = shl i32 %5, 1
  %545 = sext i32 %544 to i64
  br label %546

546:                                              ; preds = %537, %546
  %547 = phi i8* [ %0, %537 ], [ %594, %546 ]
  %548 = phi i8* [ %4, %537 ], [ %595, %546 ]
  %549 = phi <8 x i32> [ zeroinitializer, %537 ], [ %593, %546 ]
  %550 = phi <16 x i16> [ zeroinitializer, %537 ], [ %590, %546 ]
  %551 = phi i32 [ 0, %537 ], [ %596, %546 ]
  %552 = bitcast i8* %547 to <2 x i64>*
  %553 = load <2 x i64>, <2 x i64>* %552, align 1
  %554 = getelementptr inbounds i8, i8* %547, i64 %538
  %555 = bitcast i8* %554 to <2 x i64>*
  %556 = load <2 x i64>, <2 x i64>* %555, align 1
  %557 = shufflevector <2 x i64> %553, <2 x i64> %556, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %558 = bitcast i8* %548 to <2 x i64>*
  %559 = load <2 x i64>, <2 x i64>* %558, align 1
  %560 = getelementptr inbounds i8, i8* %548, i64 %539
  %561 = bitcast i8* %560 to <2 x i64>*
  %562 = load <2 x i64>, <2 x i64>* %561, align 1
  %563 = shufflevector <2 x i64> %559, <2 x i64> %562, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %564 = getelementptr inbounds i8, i8* %547, i64 1
  %565 = bitcast i8* %564 to <2 x i64>*
  %566 = load <2 x i64>, <2 x i64>* %565, align 1
  %567 = getelementptr inbounds i8, i8* %547, i64 %541
  %568 = bitcast i8* %567 to <2 x i64>*
  %569 = load <2 x i64>, <2 x i64>* %568, align 1
  %570 = shufflevector <2 x i64> %566, <2 x i64> %569, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %571 = bitcast <4 x i64> %557 to <32 x i8>
  %572 = bitcast <4 x i64> %570 to <32 x i8>
  %573 = shufflevector <32 x i8> %571, <32 x i8> %572, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %574 = shufflevector <32 x i8> %571, <32 x i8> %572, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %575 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %573, <32 x i8> %535) #2
  %576 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %574, <32 x i8> %535) #2
  %577 = add <16 x i16> %575, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %578 = add <16 x i16> %576, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %579 = ashr <16 x i16> %577, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %580 = ashr <16 x i16> %578, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %581 = bitcast <4 x i64> %563 to <32 x i8>
  %582 = shufflevector <32 x i8> %581, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %583 = shufflevector <32 x i8> %581, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %584 = bitcast <32 x i8> %582 to <16 x i16>
  %585 = sub <16 x i16> %579, %584
  %586 = bitcast <32 x i8> %583 to <16 x i16>
  %587 = sub <16 x i16> %580, %586
  %588 = add <16 x i16> %585, %550
  %589 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %585, <16 x i16> %585) #2
  %590 = add <16 x i16> %588, %587
  %591 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %587, <16 x i16> %587) #2
  %592 = add <8 x i32> %589, %549
  %593 = add <8 x i32> %592, %591
  %594 = getelementptr inbounds i8, i8* %547, i64 %543
  %595 = getelementptr inbounds i8, i8* %548, i64 %545
  %596 = add nuw nsw i32 %551, 2
  %597 = icmp slt i32 %596, %6
  br i1 %597, label %546, label %954

598:                                              ; preds = %529
  %599 = icmp eq i32 %3, 4
  %600 = shl i32 %2, 5
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %601
  %603 = bitcast i8* %602 to <4 x i64>*
  %604 = load <4 x i64>, <4 x i64>* %603, align 32
  br i1 %599, label %605, label %770

605:                                              ; preds = %598
  %606 = bitcast i8* %0 to <2 x i64>*
  %607 = load <2 x i64>, <2 x i64>* %606, align 1
  %608 = sext i32 %1 to i64
  %609 = getelementptr inbounds i8, i8* %0, i64 %608
  %610 = bitcast i8* %609 to <2 x i64>*
  %611 = load <2 x i64>, <2 x i64>* %610, align 1
  %612 = shufflevector <2 x i64> %607, <2 x i64> %611, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %613 = getelementptr inbounds i8, i8* %0, i64 1
  %614 = bitcast i8* %613 to <2 x i64>*
  %615 = load <2 x i64>, <2 x i64>* %614, align 1
  %616 = getelementptr inbounds i8, i8* %609, i64 1
  %617 = bitcast i8* %616 to <2 x i64>*
  %618 = load <2 x i64>, <2 x i64>* %617, align 1
  %619 = shufflevector <2 x i64> %615, <2 x i64> %618, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %620 = bitcast <4 x i64> %612 to <32 x i8>
  %621 = bitcast <4 x i64> %619 to <32 x i8>
  %622 = shufflevector <32 x i8> %620, <32 x i8> %621, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %623 = shufflevector <32 x i8> %620, <32 x i8> %621, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %624 = bitcast <4 x i64> %604 to <32 x i8>
  %625 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %622, <32 x i8> %624) #2
  %626 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %623, <32 x i8> %624) #2
  %627 = add <16 x i16> %625, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %628 = add <16 x i16> %626, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %629 = ashr <16 x i16> %627, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %630 = ashr <16 x i16> %628, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %631 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %629, <16 x i16> %630) #2
  %632 = bitcast <32 x i8> %631 to <4 x i64>
  %633 = shl i32 %1, 1
  %634 = sext i32 %633 to i64
  %635 = getelementptr inbounds i8, i8* %0, i64 %634
  %636 = add nsw i32 %6, -2
  %637 = icmp sgt i32 %636, 0
  %638 = bitcast i8* %635 to <2 x i64>*
  %639 = load <2 x i64>, <2 x i64>* %638, align 1
  %640 = sext i32 %5 to i64
  br i1 %637, label %641, label %717

641:                                              ; preds = %605
  %642 = shl i32 %5, 1
  %643 = sext i32 %642 to i64
  %644 = add i32 %6, -3
  %645 = lshr i32 %644, 1
  %646 = add nuw nsw i32 %645, 1
  %647 = zext i32 %646 to i64
  %648 = mul nsw i64 %647, %634
  %649 = mul nsw i64 %647, %643
  br label %650

650:                                              ; preds = %641, %650
  %651 = phi <2 x i64> [ %639, %641 ], [ %713, %650 ]
  %652 = phi i8* [ %635, %641 ], [ %710, %650 ]
  %653 = phi i8* [ %4, %641 ], [ %708, %650 ]
  %654 = phi <8 x i32> [ zeroinitializer, %641 ], [ %707, %650 ]
  %655 = phi <16 x i16> [ zeroinitializer, %641 ], [ %704, %650 ]
  %656 = phi <4 x i64> [ %632, %641 ], [ %687, %650 ]
  %657 = phi <32 x i8> [ %631, %641 ], [ %686, %650 ]
  %658 = phi i32 [ 0, %641 ], [ %709, %650 ]
  %659 = getelementptr inbounds i8, i8* %652, i64 %608
  %660 = bitcast i8* %659 to <2 x i64>*
  %661 = load <2 x i64>, <2 x i64>* %660, align 1
  %662 = shufflevector <2 x i64> %651, <2 x i64> %661, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %663 = getelementptr inbounds i8, i8* %652, i64 1
  %664 = bitcast i8* %663 to <2 x i64>*
  %665 = load <2 x i64>, <2 x i64>* %664, align 1
  %666 = getelementptr inbounds i8, i8* %659, i64 1
  %667 = bitcast i8* %666 to <2 x i64>*
  %668 = load <2 x i64>, <2 x i64>* %667, align 1
  %669 = shufflevector <2 x i64> %665, <2 x i64> %668, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %670 = bitcast i8* %653 to <2 x i64>*
  %671 = load <2 x i64>, <2 x i64>* %670, align 1
  %672 = getelementptr inbounds i8, i8* %653, i64 %640
  %673 = bitcast i8* %672 to <2 x i64>*
  %674 = load <2 x i64>, <2 x i64>* %673, align 1
  %675 = shufflevector <2 x i64> %671, <2 x i64> %674, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %676 = bitcast <4 x i64> %662 to <32 x i8>
  %677 = bitcast <4 x i64> %669 to <32 x i8>
  %678 = shufflevector <32 x i8> %676, <32 x i8> %677, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %679 = shufflevector <32 x i8> %676, <32 x i8> %677, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %680 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %678, <32 x i8> %624) #2
  %681 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %679, <32 x i8> %624) #2
  %682 = add <16 x i16> %680, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %683 = add <16 x i16> %681, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %684 = ashr <16 x i16> %682, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %685 = ashr <16 x i16> %683, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %686 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %684, <16 x i16> %685) #2
  %687 = bitcast <32 x i8> %686 to <4 x i64>
  %688 = shufflevector <4 x i64> %656, <4 x i64> %687, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %689 = bitcast <4 x i64> %688 to <32 x i8>
  %690 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %657, <32 x i8> %689) #2
  %691 = shufflevector <32 x i8> %690, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %692 = shufflevector <32 x i8> %690, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %693 = bitcast <4 x i64> %675 to <32 x i8>
  %694 = shufflevector <32 x i8> %693, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %695 = shufflevector <32 x i8> %693, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %696 = bitcast <32 x i8> %691 to <16 x i16>
  %697 = bitcast <32 x i8> %694 to <16 x i16>
  %698 = sub <16 x i16> %696, %697
  %699 = bitcast <32 x i8> %692 to <16 x i16>
  %700 = bitcast <32 x i8> %695 to <16 x i16>
  %701 = sub <16 x i16> %699, %700
  %702 = add <16 x i16> %698, %655
  %703 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %698, <16 x i16> %698) #2
  %704 = add <16 x i16> %702, %701
  %705 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %701, <16 x i16> %701) #2
  %706 = add <8 x i32> %703, %654
  %707 = add <8 x i32> %706, %705
  %708 = getelementptr inbounds i8, i8* %653, i64 %643
  %709 = add nuw nsw i32 %658, 2
  %710 = getelementptr inbounds i8, i8* %652, i64 %634
  %711 = icmp slt i32 %709, %636
  %712 = bitcast i8* %710 to <2 x i64>*
  %713 = load <2 x i64>, <2 x i64>* %712, align 1
  br i1 %711, label %650, label %714

714:                                              ; preds = %650
  %715 = getelementptr i8, i8* %0, i64 %648
  %716 = getelementptr i8, i8* %4, i64 %649
  br label %717

717:                                              ; preds = %605, %714
  %718 = phi <32 x i8> [ %686, %714 ], [ %631, %605 ]
  %719 = phi <4 x i64> [ %687, %714 ], [ %632, %605 ]
  %720 = phi <16 x i16> [ %704, %714 ], [ zeroinitializer, %605 ]
  %721 = phi <8 x i32> [ %707, %714 ], [ zeroinitializer, %605 ]
  %722 = phi i8* [ %716, %714 ], [ %4, %605 ]
  %723 = phi i8* [ %715, %714 ], [ %0, %605 ]
  %724 = phi <2 x i64> [ %713, %714 ], [ %639, %605 ]
  %725 = getelementptr inbounds i8, i8* %723, i64 %634
  %726 = getelementptr inbounds i8, i8* %725, i64 1
  %727 = bitcast i8* %726 to <16 x i8>*
  %728 = load <16 x i8>, <16 x i8>* %727, align 1
  %729 = bitcast <2 x i64> %724 to <16 x i8>
  %730 = shufflevector <16 x i8> %729, <16 x i8> %728, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %731 = shufflevector <16 x i8> %729, <16 x i8> %728, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %732 = shufflevector <4 x i64> %604, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %733 = bitcast i8* %722 to <2 x i64>*
  %734 = load <2 x i64>, <2 x i64>* %733, align 1
  %735 = getelementptr inbounds i8, i8* %722, i64 %640
  %736 = bitcast i8* %735 to <2 x i64>*
  %737 = load <2 x i64>, <2 x i64>* %736, align 1
  %738 = shufflevector <2 x i64> %734, <2 x i64> %737, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %739 = bitcast <2 x i64> %732 to <16 x i8>
  %740 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %730, <16 x i8> %739) #2
  %741 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %731, <16 x i8> %739) #2
  %742 = add <8 x i16> %740, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %743 = add <8 x i16> %741, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %744 = ashr <8 x i16> %742, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %745 = ashr <8 x i16> %743, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %746 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %744, <8 x i16> %745) #2
  %747 = bitcast <16 x i8> %746 to <2 x i64>
  %748 = shufflevector <2 x i64> %747, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %749 = shufflevector <4 x i64> %719, <4 x i64> %748, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %750 = bitcast <4 x i64> %749 to <32 x i8>
  %751 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %718, <32 x i8> %750) #2
  %752 = shufflevector <32 x i8> %751, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %753 = shufflevector <32 x i8> %751, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %754 = bitcast <4 x i64> %738 to <32 x i8>
  %755 = shufflevector <32 x i8> %754, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %756 = shufflevector <32 x i8> %754, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %757 = bitcast <32 x i8> %752 to <16 x i16>
  %758 = bitcast <32 x i8> %755 to <16 x i16>
  %759 = sub <16 x i16> %757, %758
  %760 = bitcast <32 x i8> %753 to <16 x i16>
  %761 = bitcast <32 x i8> %756 to <16 x i16>
  %762 = sub <16 x i16> %760, %761
  %763 = add <16 x i16> %759, %720
  %764 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %759, <16 x i16> %759) #2
  %765 = add <16 x i16> %763, %762
  %766 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %762, <16 x i16> %762) #2
  %767 = add <8 x i32> %764, %721
  %768 = add <8 x i32> %767, %766
  %769 = bitcast <8 x i32> %768 to <4 x i64>
  br label %956

770:                                              ; preds = %598
  %771 = shl i32 %3, 5
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %772
  %774 = bitcast i8* %773 to <32 x i8>*
  %775 = load <32 x i8>, <32 x i8>* %774, align 32
  %776 = bitcast i8* %0 to <2 x i64>*
  %777 = load <2 x i64>, <2 x i64>* %776, align 1
  %778 = sext i32 %1 to i64
  %779 = getelementptr inbounds i8, i8* %0, i64 %778
  %780 = bitcast i8* %779 to <2 x i64>*
  %781 = load <2 x i64>, <2 x i64>* %780, align 1
  %782 = shufflevector <2 x i64> %777, <2 x i64> %781, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %783 = getelementptr inbounds i8, i8* %0, i64 1
  %784 = bitcast i8* %783 to <2 x i64>*
  %785 = load <2 x i64>, <2 x i64>* %784, align 1
  %786 = getelementptr inbounds i8, i8* %779, i64 1
  %787 = bitcast i8* %786 to <2 x i64>*
  %788 = load <2 x i64>, <2 x i64>* %787, align 1
  %789 = shufflevector <2 x i64> %785, <2 x i64> %788, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %790 = bitcast <4 x i64> %782 to <32 x i8>
  %791 = bitcast <4 x i64> %789 to <32 x i8>
  %792 = shufflevector <32 x i8> %790, <32 x i8> %791, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %793 = shufflevector <32 x i8> %790, <32 x i8> %791, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %794 = bitcast <4 x i64> %604 to <32 x i8>
  %795 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %792, <32 x i8> %794) #2
  %796 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %793, <32 x i8> %794) #2
  %797 = add <16 x i16> %795, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %798 = add <16 x i16> %796, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %799 = ashr <16 x i16> %797, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %800 = ashr <16 x i16> %798, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %801 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %799, <16 x i16> %800) #2
  %802 = bitcast <32 x i8> %801 to <4 x i64>
  %803 = shl i32 %1, 1
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds i8, i8* %0, i64 %804
  %806 = add nsw i32 %6, -2
  %807 = icmp sgt i32 %806, 0
  %808 = bitcast i8* %805 to <2 x i64>*
  %809 = load <2 x i64>, <2 x i64>* %808, align 1
  %810 = sext i32 %5 to i64
  br i1 %807, label %811, label %890

811:                                              ; preds = %770
  %812 = shl i32 %5, 1
  %813 = sext i32 %812 to i64
  %814 = add i32 %6, -3
  %815 = lshr i32 %814, 1
  %816 = add nuw nsw i32 %815, 1
  %817 = zext i32 %816 to i64
  %818 = mul nsw i64 %817, %804
  %819 = mul nsw i64 %817, %813
  br label %820

820:                                              ; preds = %811, %820
  %821 = phi <2 x i64> [ %809, %811 ], [ %886, %820 ]
  %822 = phi i8* [ %805, %811 ], [ %883, %820 ]
  %823 = phi i8* [ %4, %811 ], [ %881, %820 ]
  %824 = phi <4 x i64> [ %802, %811 ], [ %857, %820 ]
  %825 = phi <32 x i8> [ %801, %811 ], [ %856, %820 ]
  %826 = phi <8 x i32> [ zeroinitializer, %811 ], [ %880, %820 ]
  %827 = phi <16 x i16> [ zeroinitializer, %811 ], [ %877, %820 ]
  %828 = phi i32 [ 0, %811 ], [ %882, %820 ]
  %829 = getelementptr inbounds i8, i8* %822, i64 %778
  %830 = bitcast i8* %829 to <2 x i64>*
  %831 = load <2 x i64>, <2 x i64>* %830, align 1
  %832 = shufflevector <2 x i64> %821, <2 x i64> %831, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %833 = getelementptr inbounds i8, i8* %822, i64 1
  %834 = bitcast i8* %833 to <2 x i64>*
  %835 = load <2 x i64>, <2 x i64>* %834, align 1
  %836 = getelementptr inbounds i8, i8* %829, i64 1
  %837 = bitcast i8* %836 to <2 x i64>*
  %838 = load <2 x i64>, <2 x i64>* %837, align 1
  %839 = shufflevector <2 x i64> %835, <2 x i64> %838, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %840 = bitcast i8* %823 to <2 x i64>*
  %841 = load <2 x i64>, <2 x i64>* %840, align 1
  %842 = getelementptr inbounds i8, i8* %823, i64 %810
  %843 = bitcast i8* %842 to <2 x i64>*
  %844 = load <2 x i64>, <2 x i64>* %843, align 1
  %845 = shufflevector <2 x i64> %841, <2 x i64> %844, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %846 = bitcast <4 x i64> %832 to <32 x i8>
  %847 = bitcast <4 x i64> %839 to <32 x i8>
  %848 = shufflevector <32 x i8> %846, <32 x i8> %847, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %849 = shufflevector <32 x i8> %846, <32 x i8> %847, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %850 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %848, <32 x i8> %794) #2
  %851 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %849, <32 x i8> %794) #2
  %852 = add <16 x i16> %850, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %853 = add <16 x i16> %851, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %854 = ashr <16 x i16> %852, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %855 = ashr <16 x i16> %853, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %856 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %854, <16 x i16> %855) #2
  %857 = bitcast <32 x i8> %856 to <4 x i64>
  %858 = shufflevector <4 x i64> %824, <4 x i64> %857, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %859 = bitcast <4 x i64> %858 to <32 x i8>
  %860 = shufflevector <32 x i8> %825, <32 x i8> %859, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %861 = shufflevector <32 x i8> %825, <32 x i8> %859, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %862 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %860, <32 x i8> %775) #2
  %863 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %861, <32 x i8> %775) #2
  %864 = add <16 x i16> %862, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %865 = add <16 x i16> %863, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %866 = ashr <16 x i16> %864, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %867 = ashr <16 x i16> %865, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %868 = bitcast <4 x i64> %845 to <32 x i8>
  %869 = shufflevector <32 x i8> %868, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %870 = shufflevector <32 x i8> %868, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %871 = bitcast <32 x i8> %869 to <16 x i16>
  %872 = sub <16 x i16> %866, %871
  %873 = bitcast <32 x i8> %870 to <16 x i16>
  %874 = sub <16 x i16> %867, %873
  %875 = add <16 x i16> %872, %827
  %876 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %872, <16 x i16> %872) #2
  %877 = add <16 x i16> %875, %874
  %878 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %874, <16 x i16> %874) #2
  %879 = add <8 x i32> %876, %826
  %880 = add <8 x i32> %879, %878
  %881 = getelementptr inbounds i8, i8* %823, i64 %813
  %882 = add nuw nsw i32 %828, 2
  %883 = getelementptr inbounds i8, i8* %822, i64 %804
  %884 = icmp slt i32 %882, %806
  %885 = bitcast i8* %883 to <2 x i64>*
  %886 = load <2 x i64>, <2 x i64>* %885, align 1
  br i1 %884, label %820, label %887

887:                                              ; preds = %820
  %888 = getelementptr i8, i8* %0, i64 %818
  %889 = getelementptr i8, i8* %4, i64 %819
  br label %890

890:                                              ; preds = %770, %887
  %891 = phi <16 x i16> [ %877, %887 ], [ zeroinitializer, %770 ]
  %892 = phi <8 x i32> [ %880, %887 ], [ zeroinitializer, %770 ]
  %893 = phi <32 x i8> [ %856, %887 ], [ %801, %770 ]
  %894 = phi <4 x i64> [ %857, %887 ], [ %802, %770 ]
  %895 = phi i8* [ %889, %887 ], [ %4, %770 ]
  %896 = phi i8* [ %888, %887 ], [ %0, %770 ]
  %897 = phi <2 x i64> [ %886, %887 ], [ %809, %770 ]
  %898 = getelementptr inbounds i8, i8* %896, i64 %804
  %899 = getelementptr inbounds i8, i8* %898, i64 1
  %900 = bitcast i8* %899 to <16 x i8>*
  %901 = load <16 x i8>, <16 x i8>* %900, align 1
  %902 = bitcast <2 x i64> %897 to <16 x i8>
  %903 = shufflevector <16 x i8> %902, <16 x i8> %901, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %904 = shufflevector <16 x i8> %902, <16 x i8> %901, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %905 = shufflevector <4 x i64> %604, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %906 = bitcast i8* %895 to <2 x i64>*
  %907 = load <2 x i64>, <2 x i64>* %906, align 1
  %908 = getelementptr inbounds i8, i8* %895, i64 %810
  %909 = bitcast i8* %908 to <2 x i64>*
  %910 = load <2 x i64>, <2 x i64>* %909, align 1
  %911 = shufflevector <2 x i64> %907, <2 x i64> %910, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %912 = bitcast <2 x i64> %905 to <16 x i8>
  %913 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %903, <16 x i8> %912) #2
  %914 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %904, <16 x i8> %912) #2
  %915 = add <8 x i16> %913, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %916 = add <8 x i16> %914, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %917 = ashr <8 x i16> %915, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %918 = ashr <8 x i16> %916, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %919 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %917, <8 x i16> %918) #2
  %920 = bitcast <16 x i8> %919 to <2 x i64>
  %921 = shufflevector <2 x i64> %920, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %922 = shufflevector <4 x i64> %894, <4 x i64> %921, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %923 = bitcast <4 x i64> %922 to <32 x i8>
  %924 = shufflevector <32 x i8> %893, <32 x i8> %923, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %925 = shufflevector <32 x i8> %893, <32 x i8> %923, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %926 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %924, <32 x i8> %775) #2
  %927 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %925, <32 x i8> %775) #2
  %928 = add <16 x i16> %926, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %929 = add <16 x i16> %927, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %930 = ashr <16 x i16> %928, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %931 = ashr <16 x i16> %929, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %932 = bitcast <4 x i64> %911 to <32 x i8>
  %933 = shufflevector <32 x i8> %932, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %934 = shufflevector <32 x i8> %932, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %935 = bitcast <32 x i8> %933 to <16 x i16>
  %936 = sub <16 x i16> %930, %935
  %937 = bitcast <32 x i8> %934 to <16 x i16>
  %938 = sub <16 x i16> %931, %937
  %939 = add <16 x i16> %936, %891
  %940 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %936, <16 x i16> %936) #2
  %941 = add <16 x i16> %939, %938
  %942 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %938, <16 x i16> %938) #2
  %943 = add <8 x i32> %940, %892
  %944 = add <8 x i32> %943, %942
  %945 = bitcast <8 x i32> %944 to <4 x i64>
  br label %956

946:                                              ; preds = %131
  %947 = bitcast <8 x i32> %174 to <4 x i64>
  br label %956

948:                                              ; preds = %31
  %949 = bitcast <8 x i32> %66 to <4 x i64>
  br label %956

950:                                              ; preds = %71
  %951 = bitcast <8 x i32> %111 to <4 x i64>
  br label %956

952:                                              ; preds = %191
  %953 = bitcast <8 x i32> %235 to <4 x i64>
  br label %956

954:                                              ; preds = %546
  %955 = bitcast <8 x i32> %593 to <4 x i64>
  br label %956

956:                                              ; preds = %530, %954, %182, %952, %11, %950, %22, %948, %115, %946, %337, %483, %717, %890
  %957 = phi <16 x i16> [ %375, %337 ], [ %524, %483 ], [ %765, %717 ], [ %941, %890 ], [ %171, %946 ], [ zeroinitializer, %115 ], [ %63, %948 ], [ zeroinitializer, %22 ], [ %108, %950 ], [ zeroinitializer, %11 ], [ %232, %952 ], [ zeroinitializer, %182 ], [ %590, %954 ], [ zeroinitializer, %530 ]
  %958 = phi <8 x i32> [ %378, %337 ], [ %527, %483 ], [ %768, %717 ], [ %944, %890 ], [ %174, %946 ], [ zeroinitializer, %115 ], [ %66, %948 ], [ zeroinitializer, %22 ], [ %111, %950 ], [ zeroinitializer, %11 ], [ %235, %952 ], [ zeroinitializer, %182 ], [ %593, %954 ], [ zeroinitializer, %530 ]
  %959 = phi <4 x i64> [ %379, %337 ], [ %528, %483 ], [ %769, %717 ], [ %945, %890 ], [ %947, %946 ], [ zeroinitializer, %115 ], [ %949, %948 ], [ zeroinitializer, %22 ], [ %951, %950 ], [ zeroinitializer, %11 ], [ %953, %952 ], [ zeroinitializer, %182 ], [ %955, %954 ], [ zeroinitializer, %530 ]
  %960 = ashr <16 x i16> %957, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %961 = bitcast <4 x i64> %959 to <32 x i8>
  %962 = shufflevector <32 x i8> %961, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %963 = shufflevector <16 x i16> %957, <16 x i16> %960, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %964 = shufflevector <16 x i16> %957, <16 x i16> %960, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %965 = bitcast <32 x i8> %962 to <8 x i32>
  %966 = add <8 x i32> %958, %965
  %967 = bitcast <16 x i16> %963 to <8 x i32>
  %968 = bitcast <16 x i16> %964 to <8 x i32>
  %969 = add <8 x i32> %968, %967
  %970 = bitcast <8 x i32> %966 to <32 x i8>
  %971 = shufflevector <32 x i8> %970, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %972 = bitcast <8 x i32> %969 to <32 x i8>
  %973 = shufflevector <32 x i8> %972, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %974 = bitcast <32 x i8> %971 to <8 x i32>
  %975 = add <8 x i32> %966, %974
  %976 = bitcast <8 x i32> %975 to <4 x i64>
  %977 = bitcast <32 x i8> %973 to <8 x i32>
  %978 = add <8 x i32> %969, %977
  %979 = shufflevector <4 x i64> %976, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %980 = bitcast <2 x i64> %979 to <4 x i32>
  %981 = extractelement <4 x i32> %980, i32 0
  %982 = extractelement <8 x i32> %975, i32 4
  %983 = add nsw i32 %981, %982
  store i32 %983, i32* %7, align 4
  %984 = bitcast <8 x i32> %978 to <32 x i8>
  %985 = shufflevector <32 x i8> %984, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %986 = bitcast <32 x i8> %985 to <8 x i32>
  %987 = add <8 x i32> %978, %986
  %988 = bitcast <8 x i32> %987 to <4 x i64>
  %989 = shufflevector <4 x i64> %988, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %990 = bitcast <2 x i64> %989 to <4 x i32>
  %991 = extractelement <4 x i32> %990, i32 0
  %992 = extractelement <8 x i32> %987, i32 4
  %993 = add nsw i32 %991, %992
  tail call void @llvm.x86.avx.vzeroupper() #2
  ret i32 %993
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @aom_sub_pixel_avg_variance32xh_avx2(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #0 {
  %11 = icmp eq i32 %2, 0
  br i1 %11, label %12, label %157

12:                                               ; preds = %10
  switch i32 %3, label %99 [
    i32 0, label %21
    i32 4, label %13
  ]

13:                                               ; preds = %12
  %14 = icmp sgt i32 %8, 0
  br i1 %14, label %15, label %564

15:                                               ; preds = %13
  %16 = sext i32 %1 to i64
  %17 = sext i32 %7 to i64
  %18 = sext i32 %5 to i64
  %19 = bitcast i8* %0 to <32 x i8>*
  %20 = load <32 x i8>, <32 x i8>* %19, align 1
  br label %62

21:                                               ; preds = %12
  %22 = icmp sgt i32 %8, 0
  br i1 %22, label %23, label %564

23:                                               ; preds = %21
  %24 = sext i32 %7 to i64
  %25 = sext i32 %1 to i64
  %26 = sext i32 %5 to i64
  br label %27

27:                                               ; preds = %27, %23
  %28 = phi i32 [ 0, %23 ], [ %60, %27 ]
  %29 = phi <16 x i16> [ zeroinitializer, %23 ], [ %54, %27 ]
  %30 = phi <8 x i32> [ zeroinitializer, %23 ], [ %57, %27 ]
  %31 = phi i8* [ %0, %23 ], [ %58, %27 ]
  %32 = phi i8* [ %6, %23 ], [ %41, %27 ]
  %33 = phi i8* [ %4, %23 ], [ %59, %27 ]
  %34 = bitcast i8* %31 to <32 x i8>*
  %35 = load <32 x i8>, <32 x i8>* %34, align 1
  %36 = bitcast i8* %33 to <32 x i8>*
  %37 = load <32 x i8>, <32 x i8>* %36, align 1
  %38 = bitcast i8* %32 to <32 x i8>*
  %39 = load <32 x i8>, <32 x i8>* %38, align 1
  %40 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %35, <32 x i8> %39) #2
  %41 = getelementptr inbounds i8, i8* %32, i64 %24
  %42 = shufflevector <32 x i8> %40, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %43 = shufflevector <32 x i8> %40, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %44 = shufflevector <32 x i8> %37, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %45 = shufflevector <32 x i8> %37, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %46 = bitcast <32 x i8> %42 to <16 x i16>
  %47 = bitcast <32 x i8> %44 to <16 x i16>
  %48 = sub <16 x i16> %46, %47
  %49 = bitcast <32 x i8> %43 to <16 x i16>
  %50 = bitcast <32 x i8> %45 to <16 x i16>
  %51 = sub <16 x i16> %49, %50
  %52 = add <16 x i16> %48, %29
  %53 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %48, <16 x i16> %48) #2
  %54 = add <16 x i16> %52, %51
  %55 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %51, <16 x i16> %51) #2
  %56 = add <8 x i32> %53, %30
  %57 = add <8 x i32> %56, %55
  %58 = getelementptr inbounds i8, i8* %31, i64 %25
  %59 = getelementptr inbounds i8, i8* %33, i64 %26
  %60 = add nuw nsw i32 %28, 1
  %61 = icmp eq i32 %60, %8
  br i1 %61, label %548, label %27

62:                                               ; preds = %62, %15
  %63 = phi <32 x i8> [ %20, %15 ], [ %74, %62 ]
  %64 = phi i32 [ 0, %15 ], [ %97, %62 ]
  %65 = phi <16 x i16> [ zeroinitializer, %15 ], [ %92, %62 ]
  %66 = phi <8 x i32> [ zeroinitializer, %15 ], [ %95, %62 ]
  %67 = phi i8* [ %0, %15 ], [ %72, %62 ]
  %68 = phi i8* [ %6, %15 ], [ %79, %62 ]
  %69 = phi i8* [ %4, %15 ], [ %96, %62 ]
  %70 = bitcast i8* %69 to <32 x i8>*
  %71 = load <32 x i8>, <32 x i8>* %70, align 1
  %72 = getelementptr inbounds i8, i8* %67, i64 %16
  %73 = bitcast i8* %72 to <32 x i8>*
  %74 = load <32 x i8>, <32 x i8>* %73, align 1
  %75 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %63, <32 x i8> %74) #2
  %76 = bitcast i8* %68 to <32 x i8>*
  %77 = load <32 x i8>, <32 x i8>* %76, align 1
  %78 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %75, <32 x i8> %77) #2
  %79 = getelementptr inbounds i8, i8* %68, i64 %17
  %80 = shufflevector <32 x i8> %78, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %81 = shufflevector <32 x i8> %78, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %82 = shufflevector <32 x i8> %71, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %83 = shufflevector <32 x i8> %71, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %84 = bitcast <32 x i8> %80 to <16 x i16>
  %85 = bitcast <32 x i8> %82 to <16 x i16>
  %86 = sub <16 x i16> %84, %85
  %87 = bitcast <32 x i8> %81 to <16 x i16>
  %88 = bitcast <32 x i8> %83 to <16 x i16>
  %89 = sub <16 x i16> %87, %88
  %90 = add <16 x i16> %86, %65
  %91 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %86, <16 x i16> %86) #2
  %92 = add <16 x i16> %90, %89
  %93 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %89, <16 x i16> %89) #2
  %94 = add <8 x i32> %91, %66
  %95 = add <8 x i32> %94, %93
  %96 = getelementptr inbounds i8, i8* %69, i64 %18
  %97 = add nuw nsw i32 %64, 1
  %98 = icmp eq i32 %97, %8
  br i1 %98, label %550, label %62

99:                                               ; preds = %12
  %100 = shl i32 %3, 5
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %101
  %103 = bitcast i8* %102 to <32 x i8>*
  %104 = load <32 x i8>, <32 x i8>* %103, align 32
  %105 = icmp sgt i32 %8, 0
  br i1 %105, label %106, label %564

106:                                              ; preds = %99
  %107 = sext i32 %1 to i64
  %108 = sext i32 %7 to i64
  %109 = sext i32 %5 to i64
  %110 = bitcast i8* %0 to <32 x i8>*
  %111 = load <32 x i8>, <32 x i8>* %110, align 1
  br label %112

112:                                              ; preds = %112, %106
  %113 = phi <32 x i8> [ %111, %106 ], [ %124, %112 ]
  %114 = phi i32 [ 0, %106 ], [ %155, %112 ]
  %115 = phi <16 x i16> [ zeroinitializer, %106 ], [ %150, %112 ]
  %116 = phi <8 x i32> [ zeroinitializer, %106 ], [ %153, %112 ]
  %117 = phi i8* [ %0, %106 ], [ %122, %112 ]
  %118 = phi i8* [ %6, %106 ], [ %137, %112 ]
  %119 = phi i8* [ %4, %106 ], [ %154, %112 ]
  %120 = bitcast i8* %119 to <32 x i8>*
  %121 = load <32 x i8>, <32 x i8>* %120, align 1
  %122 = getelementptr inbounds i8, i8* %117, i64 %107
  %123 = bitcast i8* %122 to <32 x i8>*
  %124 = load <32 x i8>, <32 x i8>* %123, align 1
  %125 = shufflevector <32 x i8> %113, <32 x i8> %124, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %126 = shufflevector <32 x i8> %113, <32 x i8> %124, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %127 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %125, <32 x i8> %104) #2
  %128 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %126, <32 x i8> %104) #2
  %129 = add <16 x i16> %127, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %130 = add <16 x i16> %128, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %131 = ashr <16 x i16> %129, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %132 = ashr <16 x i16> %130, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %133 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %131, <16 x i16> %132) #2
  %134 = bitcast i8* %118 to <32 x i8>*
  %135 = load <32 x i8>, <32 x i8>* %134, align 1
  %136 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %133, <32 x i8> %135) #2
  %137 = getelementptr inbounds i8, i8* %118, i64 %108
  %138 = shufflevector <32 x i8> %136, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %139 = shufflevector <32 x i8> %136, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %140 = shufflevector <32 x i8> %121, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %141 = shufflevector <32 x i8> %121, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %142 = bitcast <32 x i8> %138 to <16 x i16>
  %143 = bitcast <32 x i8> %140 to <16 x i16>
  %144 = sub <16 x i16> %142, %143
  %145 = bitcast <32 x i8> %139 to <16 x i16>
  %146 = bitcast <32 x i8> %141 to <16 x i16>
  %147 = sub <16 x i16> %145, %146
  %148 = add <16 x i16> %144, %115
  %149 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %144, <16 x i16> %144) #2
  %150 = add <16 x i16> %148, %147
  %151 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %147, <16 x i16> %147) #2
  %152 = add <8 x i32> %149, %116
  %153 = add <8 x i32> %152, %151
  %154 = getelementptr inbounds i8, i8* %119, i64 %109
  %155 = add nuw nsw i32 %114, 1
  %156 = icmp eq i32 %155, %8
  br i1 %156, label %546, label %112

157:                                              ; preds = %10
  %158 = icmp eq i32 %2, 4
  %159 = icmp eq i32 %3, 0
  br i1 %158, label %160, label %327

160:                                              ; preds = %157
  br i1 %159, label %161, label %206

161:                                              ; preds = %160
  %162 = icmp sgt i32 %8, 0
  br i1 %162, label %163, label %564

163:                                              ; preds = %161
  %164 = sext i32 %7 to i64
  %165 = sext i32 %1 to i64
  %166 = sext i32 %5 to i64
  br label %167

167:                                              ; preds = %167, %163
  %168 = phi i32 [ 0, %163 ], [ %204, %167 ]
  %169 = phi <16 x i16> [ zeroinitializer, %163 ], [ %198, %167 ]
  %170 = phi <8 x i32> [ zeroinitializer, %163 ], [ %201, %167 ]
  %171 = phi i8* [ %0, %163 ], [ %202, %167 ]
  %172 = phi i8* [ %6, %163 ], [ %185, %167 ]
  %173 = phi i8* [ %4, %163 ], [ %203, %167 ]
  %174 = bitcast i8* %171 to <32 x i8>*
  %175 = load <32 x i8>, <32 x i8>* %174, align 1
  %176 = bitcast i8* %173 to <32 x i8>*
  %177 = load <32 x i8>, <32 x i8>* %176, align 1
  %178 = getelementptr inbounds i8, i8* %171, i64 1
  %179 = bitcast i8* %178 to <32 x i8>*
  %180 = load <32 x i8>, <32 x i8>* %179, align 1
  %181 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %175, <32 x i8> %180) #2
  %182 = bitcast i8* %172 to <32 x i8>*
  %183 = load <32 x i8>, <32 x i8>* %182, align 1
  %184 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %181, <32 x i8> %183) #2
  %185 = getelementptr inbounds i8, i8* %172, i64 %164
  %186 = shufflevector <32 x i8> %184, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %187 = shufflevector <32 x i8> %184, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %188 = shufflevector <32 x i8> %177, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %189 = shufflevector <32 x i8> %177, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %190 = bitcast <32 x i8> %186 to <16 x i16>
  %191 = bitcast <32 x i8> %188 to <16 x i16>
  %192 = sub <16 x i16> %190, %191
  %193 = bitcast <32 x i8> %187 to <16 x i16>
  %194 = bitcast <32 x i8> %189 to <16 x i16>
  %195 = sub <16 x i16> %193, %194
  %196 = add <16 x i16> %192, %169
  %197 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %192, <16 x i16> %192) #2
  %198 = add <16 x i16> %196, %195
  %199 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %195, <16 x i16> %195) #2
  %200 = add <8 x i32> %197, %170
  %201 = add <8 x i32> %200, %199
  %202 = getelementptr inbounds i8, i8* %171, i64 %165
  %203 = getelementptr inbounds i8, i8* %173, i64 %166
  %204 = add nuw nsw i32 %168, 1
  %205 = icmp eq i32 %204, %8
  br i1 %205, label %552, label %167

206:                                              ; preds = %160
  %207 = icmp eq i32 %3, 4
  br i1 %207, label %208, label %261

208:                                              ; preds = %206
  %209 = icmp sgt i32 %8, 0
  br i1 %209, label %210, label %564

210:                                              ; preds = %208
  %211 = bitcast i8* %0 to <32 x i8>*
  %212 = load <32 x i8>, <32 x i8>* %211, align 1
  %213 = getelementptr inbounds i8, i8* %0, i64 1
  %214 = bitcast i8* %213 to <32 x i8>*
  %215 = load <32 x i8>, <32 x i8>* %214, align 1
  %216 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %212, <32 x i8> %215) #2
  %217 = sext i32 %1 to i64
  %218 = sext i32 %7 to i64
  %219 = sext i32 %5 to i64
  br label %220

220:                                              ; preds = %220, %210
  %221 = phi i32 [ 0, %210 ], [ %259, %220 ]
  %222 = phi <16 x i16> [ zeroinitializer, %210 ], [ %254, %220 ]
  %223 = phi <8 x i32> [ zeroinitializer, %210 ], [ %257, %220 ]
  %224 = phi <32 x i8> [ %216, %210 ], [ %236, %220 ]
  %225 = phi i8* [ %0, %210 ], [ %228, %220 ]
  %226 = phi i8* [ %6, %210 ], [ %241, %220 ]
  %227 = phi i8* [ %4, %210 ], [ %258, %220 ]
  %228 = getelementptr inbounds i8, i8* %225, i64 %217
  %229 = bitcast i8* %228 to <32 x i8>*
  %230 = load <32 x i8>, <32 x i8>* %229, align 1
  %231 = bitcast i8* %227 to <32 x i8>*
  %232 = load <32 x i8>, <32 x i8>* %231, align 1
  %233 = getelementptr inbounds i8, i8* %228, i64 1
  %234 = bitcast i8* %233 to <32 x i8>*
  %235 = load <32 x i8>, <32 x i8>* %234, align 1
  %236 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %230, <32 x i8> %235) #2
  %237 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %224, <32 x i8> %236) #2
  %238 = bitcast i8* %226 to <32 x i8>*
  %239 = load <32 x i8>, <32 x i8>* %238, align 1
  %240 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %237, <32 x i8> %239) #2
  %241 = getelementptr inbounds i8, i8* %226, i64 %218
  %242 = shufflevector <32 x i8> %240, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %243 = shufflevector <32 x i8> %240, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %244 = shufflevector <32 x i8> %232, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %245 = shufflevector <32 x i8> %232, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %246 = bitcast <32 x i8> %242 to <16 x i16>
  %247 = bitcast <32 x i8> %244 to <16 x i16>
  %248 = sub <16 x i16> %246, %247
  %249 = bitcast <32 x i8> %243 to <16 x i16>
  %250 = bitcast <32 x i8> %245 to <16 x i16>
  %251 = sub <16 x i16> %249, %250
  %252 = add <16 x i16> %248, %222
  %253 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %248, <16 x i16> %248) #2
  %254 = add <16 x i16> %252, %251
  %255 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %251, <16 x i16> %251) #2
  %256 = add <8 x i32> %253, %223
  %257 = add <8 x i32> %256, %255
  %258 = getelementptr inbounds i8, i8* %227, i64 %219
  %259 = add nuw nsw i32 %221, 1
  %260 = icmp eq i32 %259, %8
  br i1 %260, label %554, label %220

261:                                              ; preds = %206
  %262 = shl i32 %3, 5
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %263
  %265 = bitcast i8* %264 to <32 x i8>*
  %266 = load <32 x i8>, <32 x i8>* %265, align 32
  %267 = icmp sgt i32 %8, 0
  br i1 %267, label %268, label %564

268:                                              ; preds = %261
  %269 = bitcast i8* %0 to <32 x i8>*
  %270 = load <32 x i8>, <32 x i8>* %269, align 1
  %271 = getelementptr inbounds i8, i8* %0, i64 1
  %272 = bitcast i8* %271 to <32 x i8>*
  %273 = load <32 x i8>, <32 x i8>* %272, align 1
  %274 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %270, <32 x i8> %273) #2
  %275 = sext i32 %1 to i64
  %276 = sext i32 %7 to i64
  %277 = sext i32 %5 to i64
  br label %278

278:                                              ; preds = %278, %268
  %279 = phi i32 [ 0, %268 ], [ %325, %278 ]
  %280 = phi <16 x i16> [ zeroinitializer, %268 ], [ %320, %278 ]
  %281 = phi <8 x i32> [ zeroinitializer, %268 ], [ %323, %278 ]
  %282 = phi <32 x i8> [ %274, %268 ], [ %294, %278 ]
  %283 = phi i8* [ %0, %268 ], [ %286, %278 ]
  %284 = phi i8* [ %6, %268 ], [ %309, %278 ]
  %285 = phi i8* [ %4, %268 ], [ %324, %278 ]
  %286 = getelementptr inbounds i8, i8* %283, i64 %275
  %287 = bitcast i8* %286 to <32 x i8>*
  %288 = load <32 x i8>, <32 x i8>* %287, align 1
  %289 = bitcast i8* %285 to <32 x i8>*
  %290 = load <32 x i8>, <32 x i8>* %289, align 1
  %291 = getelementptr inbounds i8, i8* %286, i64 1
  %292 = bitcast i8* %291 to <32 x i8>*
  %293 = load <32 x i8>, <32 x i8>* %292, align 1
  %294 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %288, <32 x i8> %293) #2
  %295 = shufflevector <32 x i8> %282, <32 x i8> %294, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %296 = shufflevector <32 x i8> %282, <32 x i8> %294, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %297 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %295, <32 x i8> %266) #2
  %298 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %296, <32 x i8> %266) #2
  %299 = add <16 x i16> %297, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %300 = add <16 x i16> %298, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %301 = ashr <16 x i16> %299, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %302 = ashr <16 x i16> %300, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %303 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %301, <16 x i16> %302) #2
  %304 = bitcast i8* %284 to <32 x i8>*
  %305 = load <32 x i8>, <32 x i8>* %304, align 1
  %306 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %303, <32 x i8> %305) #2
  %307 = shufflevector <32 x i8> %306, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %308 = shufflevector <32 x i8> %306, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %309 = getelementptr inbounds i8, i8* %284, i64 %276
  %310 = shufflevector <32 x i8> %290, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %311 = shufflevector <32 x i8> %290, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %312 = bitcast <32 x i8> %307 to <16 x i16>
  %313 = bitcast <32 x i8> %310 to <16 x i16>
  %314 = sub <16 x i16> %312, %313
  %315 = bitcast <32 x i8> %308 to <16 x i16>
  %316 = bitcast <32 x i8> %311 to <16 x i16>
  %317 = sub <16 x i16> %315, %316
  %318 = add <16 x i16> %314, %280
  %319 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %314, <16 x i16> %314) #2
  %320 = add <16 x i16> %318, %317
  %321 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %317, <16 x i16> %317) #2
  %322 = add <8 x i32> %319, %281
  %323 = add <8 x i32> %322, %321
  %324 = getelementptr inbounds i8, i8* %285, i64 %277
  %325 = add nuw nsw i32 %279, 1
  %326 = icmp eq i32 %325, %8
  br i1 %326, label %556, label %278

327:                                              ; preds = %157
  br i1 %159, label %328, label %386

328:                                              ; preds = %327
  %329 = shl i32 %2, 5
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %330
  %332 = bitcast i8* %331 to <32 x i8>*
  %333 = load <32 x i8>, <32 x i8>* %332, align 32
  %334 = icmp sgt i32 %8, 0
  br i1 %334, label %335, label %564

335:                                              ; preds = %328
  %336 = sext i32 %7 to i64
  %337 = sext i32 %1 to i64
  %338 = sext i32 %5 to i64
  br label %339

339:                                              ; preds = %339, %335
  %340 = phi i32 [ 0, %335 ], [ %384, %339 ]
  %341 = phi <16 x i16> [ zeroinitializer, %335 ], [ %378, %339 ]
  %342 = phi <8 x i32> [ zeroinitializer, %335 ], [ %381, %339 ]
  %343 = phi i8* [ %0, %335 ], [ %382, %339 ]
  %344 = phi i8* [ %6, %335 ], [ %367, %339 ]
  %345 = phi i8* [ %4, %335 ], [ %383, %339 ]
  %346 = bitcast i8* %343 to <32 x i8>*
  %347 = load <32 x i8>, <32 x i8>* %346, align 1
  %348 = bitcast i8* %345 to <32 x i8>*
  %349 = load <32 x i8>, <32 x i8>* %348, align 1
  %350 = getelementptr inbounds i8, i8* %343, i64 1
  %351 = bitcast i8* %350 to <32 x i8>*
  %352 = load <32 x i8>, <32 x i8>* %351, align 1
  %353 = shufflevector <32 x i8> %347, <32 x i8> %352, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %354 = shufflevector <32 x i8> %347, <32 x i8> %352, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %355 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %353, <32 x i8> %333) #2
  %356 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %354, <32 x i8> %333) #2
  %357 = add <16 x i16> %355, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %358 = add <16 x i16> %356, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %359 = ashr <16 x i16> %357, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %360 = ashr <16 x i16> %358, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %361 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %359, <16 x i16> %360) #2
  %362 = bitcast i8* %344 to <32 x i8>*
  %363 = load <32 x i8>, <32 x i8>* %362, align 1
  %364 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %361, <32 x i8> %363) #2
  %365 = shufflevector <32 x i8> %364, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %366 = shufflevector <32 x i8> %364, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %367 = getelementptr inbounds i8, i8* %344, i64 %336
  %368 = shufflevector <32 x i8> %349, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %369 = shufflevector <32 x i8> %349, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %370 = bitcast <32 x i8> %365 to <16 x i16>
  %371 = bitcast <32 x i8> %368 to <16 x i16>
  %372 = sub <16 x i16> %370, %371
  %373 = bitcast <32 x i8> %366 to <16 x i16>
  %374 = bitcast <32 x i8> %369 to <16 x i16>
  %375 = sub <16 x i16> %373, %374
  %376 = add <16 x i16> %372, %341
  %377 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %372, <16 x i16> %372) #2
  %378 = add <16 x i16> %376, %375
  %379 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %375, <16 x i16> %375) #2
  %380 = add <8 x i32> %377, %342
  %381 = add <8 x i32> %380, %379
  %382 = getelementptr inbounds i8, i8* %343, i64 %337
  %383 = getelementptr inbounds i8, i8* %345, i64 %338
  %384 = add nuw nsw i32 %340, 1
  %385 = icmp eq i32 %384, %8
  br i1 %385, label %558, label %339

386:                                              ; preds = %327
  %387 = icmp eq i32 %3, 4
  %388 = shl i32 %2, 5
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %389
  %391 = bitcast i8* %390 to <4 x i64>*
  %392 = load <4 x i64>, <4 x i64>* %391, align 32
  br i1 %387, label %393, label %463

393:                                              ; preds = %386
  %394 = bitcast i8* %0 to <32 x i8>*
  %395 = load <32 x i8>, <32 x i8>* %394, align 1
  %396 = getelementptr inbounds i8, i8* %0, i64 1
  %397 = bitcast i8* %396 to <32 x i8>*
  %398 = load <32 x i8>, <32 x i8>* %397, align 1
  %399 = bitcast <4 x i64> %392 to <32 x i8>
  %400 = icmp sgt i32 %8, 0
  br i1 %400, label %401, label %564

401:                                              ; preds = %393
  %402 = shufflevector <32 x i8> %395, <32 x i8> %398, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %403 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %402, <32 x i8> %399) #2
  %404 = add <16 x i16> %403, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %405 = ashr <16 x i16> %404, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %406 = shufflevector <32 x i8> %395, <32 x i8> %398, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %407 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %406, <32 x i8> %399) #2
  %408 = add <16 x i16> %407, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %409 = ashr <16 x i16> %408, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %410 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %405, <16 x i16> %409) #2
  %411 = sext i32 %1 to i64
  %412 = sext i32 %7 to i64
  %413 = sext i32 %5 to i64
  br label %414

414:                                              ; preds = %414, %401
  %415 = phi <32 x i8> [ %410, %401 ], [ %438, %414 ]
  %416 = phi i32 [ 0, %401 ], [ %461, %414 ]
  %417 = phi <16 x i16> [ zeroinitializer, %401 ], [ %456, %414 ]
  %418 = phi <8 x i32> [ zeroinitializer, %401 ], [ %459, %414 ]
  %419 = phi i8* [ %0, %401 ], [ %422, %414 ]
  %420 = phi i8* [ %6, %401 ], [ %443, %414 ]
  %421 = phi i8* [ %4, %401 ], [ %460, %414 ]
  %422 = getelementptr inbounds i8, i8* %419, i64 %411
  %423 = bitcast i8* %422 to <32 x i8>*
  %424 = load <32 x i8>, <32 x i8>* %423, align 1
  %425 = bitcast i8* %421 to <32 x i8>*
  %426 = load <32 x i8>, <32 x i8>* %425, align 1
  %427 = getelementptr inbounds i8, i8* %422, i64 1
  %428 = bitcast i8* %427 to <32 x i8>*
  %429 = load <32 x i8>, <32 x i8>* %428, align 1
  %430 = shufflevector <32 x i8> %424, <32 x i8> %429, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %431 = shufflevector <32 x i8> %424, <32 x i8> %429, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %432 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %430, <32 x i8> %399) #2
  %433 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %431, <32 x i8> %399) #2
  %434 = add <16 x i16> %432, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %435 = add <16 x i16> %433, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %436 = ashr <16 x i16> %434, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %437 = ashr <16 x i16> %435, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %438 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %436, <16 x i16> %437) #2
  %439 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %415, <32 x i8> %438) #2
  %440 = bitcast i8* %420 to <32 x i8>*
  %441 = load <32 x i8>, <32 x i8>* %440, align 1
  %442 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %439, <32 x i8> %441) #2
  %443 = getelementptr inbounds i8, i8* %420, i64 %412
  %444 = shufflevector <32 x i8> %442, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %445 = shufflevector <32 x i8> %442, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %446 = shufflevector <32 x i8> %426, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %447 = shufflevector <32 x i8> %426, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %448 = bitcast <32 x i8> %444 to <16 x i16>
  %449 = bitcast <32 x i8> %446 to <16 x i16>
  %450 = sub <16 x i16> %448, %449
  %451 = bitcast <32 x i8> %445 to <16 x i16>
  %452 = bitcast <32 x i8> %447 to <16 x i16>
  %453 = sub <16 x i16> %451, %452
  %454 = add <16 x i16> %450, %417
  %455 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %450, <16 x i16> %450) #2
  %456 = add <16 x i16> %454, %453
  %457 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %453, <16 x i16> %453) #2
  %458 = add <8 x i32> %455, %418
  %459 = add <8 x i32> %458, %457
  %460 = getelementptr inbounds i8, i8* %421, i64 %413
  %461 = add nuw nsw i32 %416, 1
  %462 = icmp eq i32 %461, %8
  br i1 %462, label %560, label %414

463:                                              ; preds = %386
  %464 = shl i32 %3, 5
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds <{ [256 x i8], [256 x i8] }>, <{ [256 x i8], [256 x i8] }>* @bilinear_filters_avx2, i64 0, i32 0, i64 %465
  %467 = bitcast i8* %466 to <32 x i8>*
  %468 = load <32 x i8>, <32 x i8>* %467, align 32
  %469 = bitcast i8* %0 to <32 x i8>*
  %470 = load <32 x i8>, <32 x i8>* %469, align 1
  %471 = getelementptr inbounds i8, i8* %0, i64 1
  %472 = bitcast i8* %471 to <32 x i8>*
  %473 = load <32 x i8>, <32 x i8>* %472, align 1
  %474 = bitcast <4 x i64> %392 to <32 x i8>
  %475 = icmp sgt i32 %8, 0
  br i1 %475, label %476, label %564

476:                                              ; preds = %463
  %477 = shufflevector <32 x i8> %470, <32 x i8> %473, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %478 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %477, <32 x i8> %474) #2
  %479 = add <16 x i16> %478, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %480 = ashr <16 x i16> %479, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %481 = shufflevector <32 x i8> %470, <32 x i8> %473, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %482 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %481, <32 x i8> %474) #2
  %483 = add <16 x i16> %482, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %484 = ashr <16 x i16> %483, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %485 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %480, <16 x i16> %484) #2
  %486 = sext i32 %1 to i64
  %487 = sext i32 %7 to i64
  %488 = sext i32 %5 to i64
  br label %489

489:                                              ; preds = %489, %476
  %490 = phi <32 x i8> [ %485, %476 ], [ %513, %489 ]
  %491 = phi i32 [ 0, %476 ], [ %544, %489 ]
  %492 = phi <16 x i16> [ zeroinitializer, %476 ], [ %539, %489 ]
  %493 = phi <8 x i32> [ zeroinitializer, %476 ], [ %542, %489 ]
  %494 = phi i8* [ %0, %476 ], [ %497, %489 ]
  %495 = phi i8* [ %6, %476 ], [ %528, %489 ]
  %496 = phi i8* [ %4, %476 ], [ %543, %489 ]
  %497 = getelementptr inbounds i8, i8* %494, i64 %486
  %498 = bitcast i8* %497 to <32 x i8>*
  %499 = load <32 x i8>, <32 x i8>* %498, align 1
  %500 = bitcast i8* %496 to <32 x i8>*
  %501 = load <32 x i8>, <32 x i8>* %500, align 1
  %502 = getelementptr inbounds i8, i8* %497, i64 1
  %503 = bitcast i8* %502 to <32 x i8>*
  %504 = load <32 x i8>, <32 x i8>* %503, align 1
  %505 = shufflevector <32 x i8> %499, <32 x i8> %504, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %506 = shufflevector <32 x i8> %499, <32 x i8> %504, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %507 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %505, <32 x i8> %474) #2
  %508 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %506, <32 x i8> %474) #2
  %509 = add <16 x i16> %507, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %510 = add <16 x i16> %508, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %511 = ashr <16 x i16> %509, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %512 = ashr <16 x i16> %510, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %513 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %511, <16 x i16> %512) #2
  %514 = shufflevector <32 x i8> %490, <32 x i8> %513, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %515 = shufflevector <32 x i8> %490, <32 x i8> %513, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %516 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %514, <32 x i8> %468) #2
  %517 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %515, <32 x i8> %468) #2
  %518 = add <16 x i16> %516, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %519 = add <16 x i16> %517, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %520 = ashr <16 x i16> %518, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %521 = ashr <16 x i16> %519, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %522 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %520, <16 x i16> %521) #2
  %523 = bitcast i8* %495 to <32 x i8>*
  %524 = load <32 x i8>, <32 x i8>* %523, align 1
  %525 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %522, <32 x i8> %524) #2
  %526 = shufflevector <32 x i8> %525, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %527 = shufflevector <32 x i8> %525, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %528 = getelementptr inbounds i8, i8* %495, i64 %487
  %529 = shufflevector <32 x i8> %501, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %530 = shufflevector <32 x i8> %501, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %531 = bitcast <32 x i8> %526 to <16 x i16>
  %532 = bitcast <32 x i8> %529 to <16 x i16>
  %533 = sub <16 x i16> %531, %532
  %534 = bitcast <32 x i8> %527 to <16 x i16>
  %535 = bitcast <32 x i8> %530 to <16 x i16>
  %536 = sub <16 x i16> %534, %535
  %537 = add <16 x i16> %533, %492
  %538 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %533, <16 x i16> %533) #2
  %539 = add <16 x i16> %537, %536
  %540 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %536, <16 x i16> %536) #2
  %541 = add <8 x i32> %538, %493
  %542 = add <8 x i32> %541, %540
  %543 = getelementptr inbounds i8, i8* %496, i64 %488
  %544 = add nuw nsw i32 %491, 1
  %545 = icmp eq i32 %544, %8
  br i1 %545, label %562, label %489

546:                                              ; preds = %112
  %547 = bitcast <8 x i32> %153 to <4 x i64>
  br label %564

548:                                              ; preds = %27
  %549 = bitcast <8 x i32> %57 to <4 x i64>
  br label %564

550:                                              ; preds = %62
  %551 = bitcast <8 x i32> %95 to <4 x i64>
  br label %564

552:                                              ; preds = %167
  %553 = bitcast <8 x i32> %201 to <4 x i64>
  br label %564

554:                                              ; preds = %220
  %555 = bitcast <8 x i32> %257 to <4 x i64>
  br label %564

556:                                              ; preds = %278
  %557 = bitcast <8 x i32> %323 to <4 x i64>
  br label %564

558:                                              ; preds = %339
  %559 = bitcast <8 x i32> %381 to <4 x i64>
  br label %564

560:                                              ; preds = %414
  %561 = bitcast <8 x i32> %459 to <4 x i64>
  br label %564

562:                                              ; preds = %489
  %563 = bitcast <8 x i32> %542 to <4 x i64>
  br label %564

564:                                              ; preds = %463, %562, %393, %560, %328, %558, %261, %556, %208, %554, %161, %552, %13, %550, %21, %548, %99, %546
  %565 = phi <8 x i32> [ %153, %546 ], [ zeroinitializer, %99 ], [ %57, %548 ], [ zeroinitializer, %21 ], [ %95, %550 ], [ zeroinitializer, %13 ], [ %201, %552 ], [ zeroinitializer, %161 ], [ %257, %554 ], [ zeroinitializer, %208 ], [ %323, %556 ], [ zeroinitializer, %261 ], [ %381, %558 ], [ zeroinitializer, %328 ], [ %459, %560 ], [ zeroinitializer, %393 ], [ %542, %562 ], [ zeroinitializer, %463 ]
  %566 = phi <4 x i64> [ %547, %546 ], [ zeroinitializer, %99 ], [ %549, %548 ], [ zeroinitializer, %21 ], [ %551, %550 ], [ zeroinitializer, %13 ], [ %553, %552 ], [ zeroinitializer, %161 ], [ %555, %554 ], [ zeroinitializer, %208 ], [ %557, %556 ], [ zeroinitializer, %261 ], [ %559, %558 ], [ zeroinitializer, %328 ], [ %561, %560 ], [ zeroinitializer, %393 ], [ %563, %562 ], [ zeroinitializer, %463 ]
  %567 = phi <16 x i16> [ %150, %546 ], [ zeroinitializer, %99 ], [ %54, %548 ], [ zeroinitializer, %21 ], [ %92, %550 ], [ zeroinitializer, %13 ], [ %198, %552 ], [ zeroinitializer, %161 ], [ %254, %554 ], [ zeroinitializer, %208 ], [ %320, %556 ], [ zeroinitializer, %261 ], [ %378, %558 ], [ zeroinitializer, %328 ], [ %456, %560 ], [ zeroinitializer, %393 ], [ %539, %562 ], [ zeroinitializer, %463 ]
  %568 = ashr <16 x i16> %567, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %569 = bitcast <4 x i64> %566 to <32 x i8>
  %570 = shufflevector <32 x i8> %569, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %571 = shufflevector <16 x i16> %567, <16 x i16> %568, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %572 = shufflevector <16 x i16> %567, <16 x i16> %568, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %573 = bitcast <32 x i8> %570 to <8 x i32>
  %574 = add <8 x i32> %565, %573
  %575 = bitcast <16 x i16> %571 to <8 x i32>
  %576 = bitcast <16 x i16> %572 to <8 x i32>
  %577 = add <8 x i32> %576, %575
  %578 = bitcast <8 x i32> %574 to <32 x i8>
  %579 = shufflevector <32 x i8> %578, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %580 = bitcast <8 x i32> %577 to <32 x i8>
  %581 = shufflevector <32 x i8> %580, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %582 = bitcast <32 x i8> %579 to <8 x i32>
  %583 = add <8 x i32> %574, %582
  %584 = bitcast <8 x i32> %583 to <4 x i64>
  %585 = bitcast <32 x i8> %581 to <8 x i32>
  %586 = add <8 x i32> %577, %585
  %587 = shufflevector <4 x i64> %584, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %588 = bitcast <2 x i64> %587 to <4 x i32>
  %589 = extractelement <4 x i32> %588, i32 0
  %590 = extractelement <8 x i32> %583, i32 4
  %591 = add nsw i32 %589, %590
  store i32 %591, i32* %9, align 4
  %592 = bitcast <8 x i32> %586 to <32 x i8>
  %593 = shufflevector <32 x i8> %592, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %594 = bitcast <32 x i8> %593 to <8 x i32>
  %595 = add <8 x i32> %586, %594
  %596 = bitcast <8 x i32> %595 to <4 x i64>
  %597 = shufflevector <4 x i64> %596, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %598 = bitcast <2 x i64> %597 to <4 x i32>
  %599 = extractelement <4 x i32> %598, i32 0
  %600 = extractelement <8 x i32> %595, i32 4
  %601 = add nsw i32 %599, %600
  tail call void @llvm.x86.avx.vzeroupper() #2
  ret i32 %601
}

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #1

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8>, <32 x i8>) #1

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8>, <32 x i8>) #1

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16>, <16 x i16>) #1

; Function Attrs: nounwind
declare void @llvm.x86.avx.vzeroupper() #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8>, <16 x i8>) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #1

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
