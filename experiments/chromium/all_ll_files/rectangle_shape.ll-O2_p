; ModuleID = '../../third_party/blink/renderer/core/layout/shapes/rectangle_shape.cc'
source_filename = "../../third_party/blink/renderer/core/layout/shapes/rectangle_shape.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::RectangleShape" = type { %"class.blink::Shape", %"class.blink::FloatRect", %"class.blink::FloatSize" }
%"class.blink::Shape" = type { i32 (...)**, i8, float }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"struct.blink::Shape::DisplayPaths" = type { %"class.blink::Path", %"class.blink::Path" }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }

$_ZN5blink5ShapeD2Ev = comdat any

$_ZN5blink14RectangleShapeD0Ev = comdat any

$_ZNK5blink14RectangleShape29ShapeMarginLogicalBoundingBoxEv = comdat any

$_ZNK5blink14RectangleShape7IsEmptyEv = comdat any

@_ZTVN5blink14RectangleShapeE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::Shape"*)* @_ZN5blink5ShapeD2Ev to i8*), i8* bitcast (void (%"class.blink::RectangleShape"*)* @_ZN5blink14RectangleShapeD0Ev to i8*), i8* bitcast ({ i64, i64 } (%"class.blink::RectangleShape"*)* @_ZNK5blink14RectangleShape29ShapeMarginLogicalBoundingBoxEv to i8*), i8* bitcast (i1 (%"class.blink::RectangleShape"*)* @_ZNK5blink14RectangleShape7IsEmptyEv to i8*), i8* bitcast ({ i64, i8 } (%"class.blink::RectangleShape"*, i32, i32)* @_ZNK5blink14RectangleShape19GetExcludedIntervalENS_10LayoutUnitES1_ to i8*), i8* bitcast (void (%"class.blink::RectangleShape"*, %"struct.blink::Shape::DisplayPaths"*)* @_ZNK5blink14RectangleShape17BuildDisplayPathsERNS_5Shape12DisplayPathsE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK5blink14RectangleShape17ShapeMarginBoundsEv(%"class.blink::RectangleShape"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 0, i32 2
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 0.000000e+00
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1
  %7 = bitcast %"class.blink::FloatRect"* %6 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 8
  %9 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 1
  %10 = bitcast %"class.blink::FloatSize"* %9 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 8
  br label %26

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 0, i32 0
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = insertelement <2 x float> undef, float %3, i32 0
  %17 = shufflevector <2 x float> %16, <2 x float> undef, <2 x i32> zeroinitializer
  %18 = fsub <2 x float> %15, %17
  %19 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 1, i32 0
  %20 = fmul float %3, 2.000000e+00
  %21 = bitcast float* %19 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = insertelement <2 x float> undef, float %20, i32 0
  %24 = shufflevector <2 x float> %23, <2 x float> undef, <2 x i32> zeroinitializer
  %25 = fadd <2 x float> %24, %22
  br label %26

26:                                               ; preds = %12, %5
  %27 = phi <2 x float> [ %25, %12 ], [ %11, %5 ]
  %28 = phi <2 x float> [ %18, %12 ], [ %8, %5 ]
  %29 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %28, 0
  %30 = insertvalue { <2 x float>, <2 x float> } %29, <2 x float> %27, 1
  ret { <2 x float>, <2 x float> } %30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i8 } @_ZNK5blink14RectangleShape19GetExcludedIntervalENS_10LayoutUnitES1_(%"class.blink::RectangleShape"* nocapture readonly, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 0, i32 2
  %5 = load float, float* %4, align 4
  %6 = fcmp une float %5, 0.000000e+00
  br i1 %6, label %14, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1
  %9 = bitcast %"class.blink::FloatRect"* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 8
  %11 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 1
  %12 = bitcast %"class.blink::FloatSize"* %11 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 8
  br label %28

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = bitcast float* %15 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = insertelement <2 x float> undef, float %5, i32 0
  %19 = shufflevector <2 x float> %18, <2 x float> undef, <2 x i32> zeroinitializer
  %20 = fsub <2 x float> %17, %19
  %21 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 1, i32 0
  %22 = fmul float %5, 2.000000e+00
  %23 = bitcast float* %21 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 4
  %25 = insertelement <2 x float> undef, float %22, i32 0
  %26 = shufflevector <2 x float> %25, <2 x float> undef, <2 x i32> zeroinitializer
  %27 = fadd <2 x float> %26, %24
  br label %28

28:                                               ; preds = %7, %14
  %29 = phi <2 x float> [ %27, %14 ], [ %13, %7 ]
  %30 = phi <2 x float> [ %20, %14 ], [ %10, %7 ]
  %31 = extractelement <2 x float> %29, i32 0
  %32 = fcmp ole float %31, 0.000000e+00
  %33 = extractelement <2 x float> %29, i32 1
  %34 = fcmp ole float %33, 0.000000e+00
  %35 = or i1 %32, %34
  br i1 %35, label %115, label %36

36:                                               ; preds = %28
  %37 = sitofp i32 %1 to float
  %38 = fmul float %37, 1.562500e-02
  %39 = icmp slt i32 %2, 0
  %40 = select i1 %39, i32 -2147483648, i32 2147483647
  %41 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %2) #8
  %42 = extractvalue { i32, i1 } %41, 1
  %43 = extractvalue { i32, i1 } %41, 0
  %44 = select i1 %42, i32 %40, i32 %43, !prof !2
  %45 = sitofp i32 %44 to float
  %46 = fmul float %45, 1.562500e-02
  %47 = extractelement <2 x float> %30, i32 1
  %48 = fcmp olt float %46, %47
  br i1 %48, label %115, label %49

49:                                               ; preds = %36
  %50 = fadd float %33, %47
  %51 = fcmp ult float %38, %50
  br i1 %51, label %52, label %115

52:                                               ; preds = %49
  %53 = extractelement <2 x float> %30, i32 0
  %54 = fadd float %31, %53
  %55 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 2, i32 0
  %56 = load float, float* %55, align 4
  %57 = fadd float %56, %5
  %58 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 2, i32 1
  %59 = load float, float* %58, align 4
  %60 = fadd float %5, %59
  %61 = fcmp ogt float %60, 0.000000e+00
  br i1 %61, label %62, label %93

62:                                               ; preds = %52
  %63 = fadd float %47, %60
  %64 = fcmp olt float %46, %63
  br i1 %64, label %65, label %78

65:                                               ; preds = %62
  %66 = fsub float %46, %47
  %67 = fsub float %66, %60
  %68 = fmul float %67, %67
  %69 = fmul float %60, %60
  %70 = fdiv float %68, %69
  %71 = fsub float 1.000000e+00, %70
  %72 = tail call float @sqrtf(float %71) #8
  %73 = fmul float %57, %72
  %74 = fadd float %53, %57
  %75 = fsub float %74, %73
  %76 = fsub float %54, %57
  %77 = fadd float %76, %73
  br label %93

78:                                               ; preds = %62
  %79 = fsub float %50, %60
  %80 = fcmp ogt float %38, %79
  br i1 %80, label %81, label %93

81:                                               ; preds = %78
  %82 = fsub float %38, %79
  %83 = fmul float %82, %82
  %84 = fmul float %60, %60
  %85 = fdiv float %83, %84
  %86 = fsub float 1.000000e+00, %85
  %87 = tail call float @sqrtf(float %86) #8
  %88 = fmul float %57, %87
  %89 = fadd float %53, %57
  %90 = fsub float %89, %88
  %91 = fsub float %54, %57
  %92 = fadd float %91, %88
  br label %93

93:                                               ; preds = %65, %81, %78, %52
  %94 = phi float [ %77, %65 ], [ %92, %81 ], [ %54, %78 ], [ %54, %52 ]
  %95 = phi float [ %75, %65 ], [ %90, %81 ], [ %53, %78 ], [ %53, %52 ]
  %96 = fmul float %95, 6.400000e+01
  %97 = fcmp ult float %96, 0xC1E0000000000000
  %98 = fcmp ugt float %96, 0x41DFFFFFE0000000
  %99 = fcmp ogt float %96, 0xC1E0000000000000
  %100 = select i1 %99, float %96, float 0xC1E0000000000000
  %101 = fptosi float %100 to i32
  %102 = select i1 %97, i32 0, i32 2147483647
  %103 = select i1 %98, i32 %102, i32 %101
  %104 = fmul float %94, 6.400000e+01
  %105 = fcmp ult float %104, 0xC1E0000000000000
  %106 = fcmp ugt float %104, 0x41DFFFFFE0000000
  %107 = fcmp ogt float %104, 0xC1E0000000000000
  %108 = select i1 %107, float %104, float 0xC1E0000000000000
  %109 = fptosi float %108 to i32
  %110 = select i1 %105, i32 0, i32 2147483647
  %111 = select i1 %106, i32 %110, i32 %109
  %112 = zext i32 %111 to i64
  %113 = shl nuw i64 %112, 32
  %114 = zext i32 %103 to i64
  br label %115

115:                                              ; preds = %28, %36, %49, %93
  %116 = phi i8 [ 1, %93 ], [ 0, %49 ], [ 0, %36 ], [ 0, %28 ]
  %117 = phi i64 [ %113, %93 ], [ 0, %49 ], [ 0, %36 ], [ 0, %28 ]
  %118 = phi i64 [ %114, %93 ], [ 0, %49 ], [ 0, %36 ], [ 0, %28 ]
  %119 = or i64 %118, %117
  %120 = insertvalue { i64, i8 } undef, i64 %119, 0
  %121 = insertvalue { i64, i8 } %120, i8 %116, 1
  ret { i64, i8 } %121
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink14RectangleShape17BuildDisplayPathsERNS_5Shape12DisplayPathsE(%"class.blink::RectangleShape"*, %"struct.blink::Shape::DisplayPaths"* dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = alloca { <2 x float>, <2 x float> }, align 8
  %4 = alloca %"class.blink::FloatSize", align 4
  %5 = getelementptr inbounds %"struct.blink::Shape::DisplayPaths", %"struct.blink::Shape::DisplayPaths"* %1, i64 0, i32 0
  %6 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 2
  tail call void @_ZN5blink4Path14AddRoundedRectERKNS_9FloatRectERKNS_9FloatSizeE(%"class.blink::Path"* %5, %"class.blink::FloatRect"* dereferenceable(16) %6, %"class.blink::FloatSize"* dereferenceable(8) %7) #8
  %8 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = fcmp une float %9, 0.000000e+00
  br i1 %10, label %11, label %39

11:                                               ; preds = %2
  %12 = bitcast { <2 x float>, <2 x float> }* %3 to %"class.blink::FloatRect"*
  %13 = getelementptr inbounds %"struct.blink::Shape::DisplayPaths", %"struct.blink::Shape::DisplayPaths"* %1, i64 0, i32 1
  %14 = bitcast { <2 x float>, <2 x float> }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = bitcast float* %15 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = insertelement <2 x float> undef, float %9, i32 0
  %19 = shufflevector <2 x float> %18, <2 x float> undef, <2 x i32> zeroinitializer
  %20 = fsub <2 x float> %17, %19
  %21 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 1, i32 0
  %22 = fmul float %9, 2.000000e+00
  %23 = bitcast float* %21 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 4
  %25 = insertelement <2 x float> undef, float %22, i32 0
  %26 = shufflevector <2 x float> %25, <2 x float> undef, <2 x i32> zeroinitializer
  %27 = fadd <2 x float> %26, %24
  %28 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0
  store <2 x float> %20, <2 x float>* %28, align 8
  %29 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 1
  store <2 x float> %27, <2 x float>* %29, align 8
  %30 = bitcast %"class.blink::FloatSize"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #8
  %31 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %7, i64 0, i32 0
  %32 = load float, float* %31, align 4
  %33 = fadd float %9, %32
  %34 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 2, i32 1
  %35 = load float, float* %34, align 4
  %36 = fadd float %9, %35
  %37 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %4, i64 0, i32 0
  store float %33, float* %37, align 4
  %38 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %4, i64 0, i32 1
  store float %36, float* %38, align 4
  call void @_ZN5blink4Path14AddRoundedRectERKNS_9FloatRectERKNS_9FloatSizeE(%"class.blink::Path"* %13, %"class.blink::FloatRect"* nonnull dereferenceable(16) %12, %"class.blink::FloatSize"* nonnull dereferenceable(8) %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #8
  br label %39

39:                                               ; preds = %11, %2
  ret void
}

declare void @_ZN5blink4Path14AddRoundedRectERKNS_9FloatRectERKNS_9FloatSizeE(%"class.blink::Path"*, %"class.blink::FloatRect"* dereferenceable(16), %"class.blink::FloatSize"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5ShapeD2Ev(%"class.blink::Shape"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink14RectangleShapeD0Ev(%"class.blink::RectangleShape"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.blink::RectangleShape"* %0 to i8*
  tail call void @free(i8* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i64 } @_ZNK5blink14RectangleShape29ShapeMarginLogicalBoundingBoxEv(%"class.blink::RectangleShape"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 0, i32 2
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 0.000000e+00
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1
  %7 = bitcast %"class.blink::FloatRect"* %6 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 8
  %9 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 1
  %10 = bitcast %"class.blink::FloatSize"* %9 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 8
  br label %26

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 0, i32 0
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = insertelement <2 x float> undef, float %3, i32 0
  %17 = shufflevector <2 x float> %16, <2 x float> undef, <2 x i32> zeroinitializer
  %18 = fsub <2 x float> %15, %17
  %19 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 1, i32 0
  %20 = fmul float %3, 2.000000e+00
  %21 = bitcast float* %19 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = insertelement <2 x float> undef, float %20, i32 0
  %24 = shufflevector <2 x float> %23, <2 x float> undef, <2 x i32> zeroinitializer
  %25 = fadd <2 x float> %24, %22
  br label %26

26:                                               ; preds = %5, %12
  %27 = phi <2 x float> [ %25, %12 ], [ %11, %5 ]
  %28 = phi <2 x float> [ %18, %12 ], [ %8, %5 ]
  %29 = extractelement <2 x float> %28, i32 0
  %30 = fmul float %29, 6.400000e+01
  %31 = fcmp ult float %30, 0xC1E0000000000000
  %32 = fcmp ugt float %30, 0x41DFFFFFE0000000
  %33 = fcmp ogt float %30, 0xC1E0000000000000
  %34 = select i1 %33, float %30, float 0xC1E0000000000000
  %35 = fptosi float %34 to i32
  %36 = select i1 %31, i32 0, i32 2147483647
  %37 = select i1 %32, i32 %36, i32 %35
  %38 = extractelement <2 x float> %28, i32 1
  %39 = fmul float %38, 6.400000e+01
  %40 = fcmp ult float %39, 0xC1E0000000000000
  %41 = fcmp ugt float %39, 0x41DFFFFFE0000000
  %42 = fcmp ogt float %39, 0xC1E0000000000000
  %43 = select i1 %42, float %39, float 0xC1E0000000000000
  %44 = fptosi float %43 to i32
  %45 = select i1 %40, i32 0, i32 2147483647
  %46 = select i1 %41, i32 %45, i32 %44
  %47 = extractelement <2 x float> %27, i32 0
  %48 = fmul float %47, 6.400000e+01
  %49 = fcmp ult float %48, 0xC1E0000000000000
  %50 = fcmp ugt float %48, 0x41DFFFFFE0000000
  %51 = fcmp ogt float %48, 0xC1E0000000000000
  %52 = select i1 %51, float %48, float 0xC1E0000000000000
  %53 = fptosi float %52 to i32
  %54 = select i1 %49, i32 0, i32 2147483647
  %55 = select i1 %50, i32 %54, i32 %53
  %56 = extractelement <2 x float> %27, i32 1
  %57 = fmul float %56, 6.400000e+01
  %58 = fcmp ult float %57, 0xC1E0000000000000
  %59 = fcmp ugt float %57, 0x41DFFFFFE0000000
  %60 = fcmp ogt float %57, 0xC1E0000000000000
  %61 = select i1 %60, float %57, float 0xC1E0000000000000
  %62 = fptosi float %61 to i32
  %63 = select i1 %58, i32 0, i32 2147483647
  %64 = select i1 %59, i32 %63, i32 %62
  %65 = zext i32 %46 to i64
  %66 = shl nuw i64 %65, 32
  %67 = zext i32 %37 to i64
  %68 = or i64 %66, %67
  %69 = insertvalue { i64, i64 } undef, i64 %68, 0
  %70 = zext i32 %64 to i64
  %71 = shl nuw i64 %70, 32
  %72 = zext i32 %55 to i64
  %73 = or i64 %71, %72
  %74 = insertvalue { i64, i64 } %69, i64 %73, 1
  ret { i64, i64 } %74
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink14RectangleShape7IsEmptyEv(%"class.blink::RectangleShape"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 1, i32 0
  %3 = load float, float* %2, align 4
  %4 = fcmp ugt float %3, 0.000000e+00
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::RectangleShape", %"class.blink::RectangleShape"* %0, i64 0, i32 1, i32 1, i32 1
  %7 = load float, float* %6, align 4
  %8 = fcmp ole float %7, 0.000000e+00
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ true, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #5

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
