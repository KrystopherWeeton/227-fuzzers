; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/fft_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/fft_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_fft8x8_float_avx2(float*, float*, float*) local_unnamed_addr #0 {
  tail call void @aom_fft_2d_gen(float* %0, float* %1, float* %2, i32 8, void (float*, float*, i32)* nonnull @aom_fft1d_8_avx2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, void (float*, float*, i32)* nonnull @aom_fft_unpack_2d_output_sse2, i32 8) #3
  ret void
}

declare void @aom_fft_2d_gen(float*, float*, float*, i32, void (float*, float*, i32)*, void (float*, float*, i32)*, void (float*, float*, i32)*, i32) local_unnamed_addr #1

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_fft1d_8_avx2(float* nocapture readonly, float* nocapture, i32) #2 {
  %4 = bitcast float* %0 to <8 x float>*
  %5 = load <8 x float>, <8 x float>* %4, align 32
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <8 x float>*
  %9 = load <8 x float>, <8 x float>* %8, align 32
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <8 x float>*
  %14 = load <8 x float>, <8 x float>* %13, align 32
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <8 x float>*
  %19 = load <8 x float>, <8 x float>* %18, align 32
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <8 x float>*
  %24 = load <8 x float>, <8 x float>* %23, align 32
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <8 x float>*
  %29 = load <8 x float>, <8 x float>* %28, align 32
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <8 x float>*
  %34 = load <8 x float>, <8 x float>* %33, align 32
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <8 x float>*
  %39 = load <8 x float>, <8 x float>* %38, align 32
  %40 = fadd <8 x float> %5, %24
  %41 = fsub <8 x float> %5, %24
  %42 = fadd <8 x float> %14, %34
  %43 = fsub <8 x float> %14, %34
  %44 = fadd <8 x float> %40, %42
  %45 = fsub <8 x float> %40, %42
  %46 = fadd <8 x float> %9, %29
  %47 = fsub <8 x float> %9, %29
  %48 = fadd <8 x float> %19, %39
  %49 = fsub <8 x float> %19, %39
  %50 = fadd <8 x float> %46, %48
  %51 = fsub <8 x float> %46, %48
  %52 = fadd <8 x float> %44, %50
  %53 = bitcast float* %1 to <8 x float>*
  store <8 x float> %52, <8 x float>* %53, align 32
  %54 = getelementptr inbounds float, float* %1, i64 %6
  %55 = fsub <8 x float> %47, %49
  %56 = fmul <8 x float> %55, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %57 = fadd <8 x float> %41, %56
  %58 = bitcast float* %54 to <8 x float>*
  store <8 x float> %57, <8 x float>* %58, align 32
  %59 = getelementptr inbounds float, float* %1, i64 %11
  %60 = bitcast float* %59 to <8 x float>*
  store <8 x float> %45, <8 x float>* %60, align 32
  %61 = getelementptr inbounds float, float* %1, i64 %16
  %62 = fsub <8 x float> %41, %56
  %63 = bitcast float* %61 to <8 x float>*
  store <8 x float> %62, <8 x float>* %63, align 32
  %64 = getelementptr inbounds float, float* %1, i64 %21
  %65 = fsub <8 x float> %44, %50
  %66 = bitcast float* %64 to <8 x float>*
  store <8 x float> %65, <8 x float>* %66, align 32
  %67 = getelementptr inbounds float, float* %1, i64 %26
  %68 = fsub <8 x float> zeroinitializer, %43
  %69 = fadd <8 x float> %47, %49
  %70 = fmul <8 x float> %69, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %71 = fsub <8 x float> %68, %70
  %72 = bitcast float* %67 to <8 x float>*
  store <8 x float> %71, <8 x float>* %72, align 32
  %73 = getelementptr inbounds float, float* %1, i64 %31
  %74 = fsub <8 x float> zeroinitializer, %51
  %75 = bitcast float* %73 to <8 x float>*
  store <8 x float> %74, <8 x float>* %75, align 32
  %76 = getelementptr inbounds float, float* %1, i64 %36
  %77 = fsub <8 x float> %43, %70
  %78 = bitcast float* %76 to <8 x float>*
  store <8 x float> %77, <8 x float>* %78, align 32
  ret void
}

declare void @aom_transpose_float_sse2(float*, float*, i32) #1

declare void @aom_fft_unpack_2d_output_sse2(float*, float*, i32) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_fft16x16_float_avx2(float*, float*, float*) local_unnamed_addr #0 {
  tail call void @aom_fft_2d_gen(float* %0, float* %1, float* %2, i32 16, void (float*, float*, i32)* nonnull @aom_fft1d_16_avx2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, void (float*, float*, i32)* nonnull @aom_fft_unpack_2d_output_sse2, i32 8) #3
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_fft1d_16_avx2(float* nocapture readonly, float* nocapture, i32) #2 {
  %4 = bitcast float* %0 to <8 x float>*
  %5 = load <8 x float>, <8 x float>* %4, align 32
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <8 x float>*
  %9 = load <8 x float>, <8 x float>* %8, align 32
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <8 x float>*
  %14 = load <8 x float>, <8 x float>* %13, align 32
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <8 x float>*
  %19 = load <8 x float>, <8 x float>* %18, align 32
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <8 x float>*
  %24 = load <8 x float>, <8 x float>* %23, align 32
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <8 x float>*
  %29 = load <8 x float>, <8 x float>* %28, align 32
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <8 x float>*
  %34 = load <8 x float>, <8 x float>* %33, align 32
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <8 x float>*
  %39 = load <8 x float>, <8 x float>* %38, align 32
  %40 = shl nsw i32 %2, 3
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = bitcast float* %42 to <8 x float>*
  %44 = load <8 x float>, <8 x float>* %43, align 32
  %45 = mul nsw i32 %2, 9
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to <8 x float>*
  %49 = load <8 x float>, <8 x float>* %48, align 32
  %50 = mul nsw i32 %2, 10
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = bitcast float* %52 to <8 x float>*
  %54 = load <8 x float>, <8 x float>* %53, align 32
  %55 = mul nsw i32 %2, 11
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to <8 x float>*
  %59 = load <8 x float>, <8 x float>* %58, align 32
  %60 = mul nsw i32 %2, 12
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = bitcast float* %62 to <8 x float>*
  %64 = load <8 x float>, <8 x float>* %63, align 32
  %65 = mul nsw i32 %2, 13
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %0, i64 %66
  %68 = bitcast float* %67 to <8 x float>*
  %69 = load <8 x float>, <8 x float>* %68, align 32
  %70 = mul nsw i32 %2, 14
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = bitcast float* %72 to <8 x float>*
  %74 = load <8 x float>, <8 x float>* %73, align 32
  %75 = mul nsw i32 %2, 15
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = bitcast float* %77 to <8 x float>*
  %79 = load <8 x float>, <8 x float>* %78, align 32
  %80 = fadd <8 x float> %5, %44
  %81 = fsub <8 x float> %5, %44
  %82 = fadd <8 x float> %24, %64
  %83 = fsub <8 x float> %24, %64
  %84 = fadd <8 x float> %80, %82
  %85 = fsub <8 x float> %80, %82
  %86 = fadd <8 x float> %14, %54
  %87 = fsub <8 x float> %14, %54
  %88 = fadd <8 x float> %34, %74
  %89 = fsub <8 x float> %34, %74
  %90 = fadd <8 x float> %86, %88
  %91 = fsub <8 x float> %86, %88
  %92 = fadd <8 x float> %84, %90
  %93 = fsub <8 x float> %84, %90
  %94 = fsub <8 x float> %87, %89
  %95 = fmul <8 x float> %94, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %96 = fadd <8 x float> %81, %95
  %97 = fsub <8 x float> zeroinitializer, %83
  %98 = fadd <8 x float> %87, %89
  %99 = fmul <8 x float> %98, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %100 = fsub <8 x float> %97, %99
  %101 = fsub <8 x float> %81, %95
  %102 = fsub <8 x float> %83, %99
  %103 = fadd <8 x float> %9, %49
  %104 = fsub <8 x float> %9, %49
  %105 = fadd <8 x float> %29, %69
  %106 = fsub <8 x float> %29, %69
  %107 = fadd <8 x float> %103, %105
  %108 = fsub <8 x float> %103, %105
  %109 = fadd <8 x float> %19, %59
  %110 = fsub <8 x float> %19, %59
  %111 = fadd <8 x float> %39, %79
  %112 = fsub <8 x float> %39, %79
  %113 = fadd <8 x float> %109, %111
  %114 = fsub <8 x float> %109, %111
  %115 = fadd <8 x float> %107, %113
  %116 = fsub <8 x float> %107, %113
  %117 = fsub <8 x float> %110, %112
  %118 = fmul <8 x float> %117, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %119 = fadd <8 x float> %104, %118
  %120 = fsub <8 x float> zeroinitializer, %106
  %121 = fadd <8 x float> %110, %112
  %122 = fmul <8 x float> %121, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %123 = fsub <8 x float> %120, %122
  %124 = fsub <8 x float> %104, %118
  %125 = fsub <8 x float> %106, %122
  %126 = fadd <8 x float> %92, %115
  %127 = bitcast float* %1 to <8 x float>*
  store <8 x float> %126, <8 x float>* %127, align 32
  %128 = getelementptr inbounds float, float* %1, i64 %6
  %129 = fmul <8 x float> %119, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %130 = fmul <8 x float> %123, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %131 = fadd <8 x float> %129, %130
  %132 = fadd <8 x float> %96, %131
  %133 = bitcast float* %128 to <8 x float>*
  store <8 x float> %132, <8 x float>* %133, align 32
  %134 = getelementptr inbounds float, float* %1, i64 %11
  %135 = fsub <8 x float> %108, %114
  %136 = fmul <8 x float> %135, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %137 = fadd <8 x float> %85, %136
  %138 = bitcast float* %134 to <8 x float>*
  store <8 x float> %137, <8 x float>* %138, align 32
  %139 = getelementptr inbounds float, float* %1, i64 %16
  %140 = fmul <8 x float> %124, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %141 = fmul <8 x float> %125, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %142 = fadd <8 x float> %140, %141
  %143 = fadd <8 x float> %101, %142
  %144 = bitcast float* %139 to <8 x float>*
  store <8 x float> %143, <8 x float>* %144, align 32
  %145 = getelementptr inbounds float, float* %1, i64 %21
  %146 = bitcast float* %145 to <8 x float>*
  store <8 x float> %93, <8 x float>* %146, align 32
  %147 = getelementptr inbounds float, float* %1, i64 %26
  %148 = fsub <8 x float> zeroinitializer, %140
  %149 = fsub <8 x float> %148, %141
  %150 = fadd <8 x float> %101, %149
  %151 = bitcast float* %147 to <8 x float>*
  store <8 x float> %150, <8 x float>* %151, align 32
  %152 = getelementptr inbounds float, float* %1, i64 %31
  %153 = fsub <8 x float> %85, %136
  %154 = bitcast float* %152 to <8 x float>*
  store <8 x float> %153, <8 x float>* %154, align 32
  %155 = getelementptr inbounds float, float* %1, i64 %36
  %156 = fsub <8 x float> zeroinitializer, %129
  %157 = fsub <8 x float> %156, %130
  %158 = fadd <8 x float> %96, %157
  %159 = bitcast float* %155 to <8 x float>*
  store <8 x float> %158, <8 x float>* %159, align 32
  %160 = getelementptr inbounds float, float* %1, i64 %41
  %161 = fsub <8 x float> %92, %115
  %162 = bitcast float* %160 to <8 x float>*
  store <8 x float> %161, <8 x float>* %162, align 32
  %163 = getelementptr inbounds float, float* %1, i64 %46
  %164 = fmul <8 x float> %123, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %165 = fmul <8 x float> %119, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %166 = fsub <8 x float> %164, %165
  %167 = fadd <8 x float> %100, %166
  %168 = bitcast float* %163 to <8 x float>*
  store <8 x float> %167, <8 x float>* %168, align 32
  %169 = getelementptr inbounds float, float* %1, i64 %51
  %170 = fsub <8 x float> zeroinitializer, %91
  %171 = fadd <8 x float> %108, %114
  %172 = fmul <8 x float> %171, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %173 = fsub <8 x float> %170, %172
  %174 = bitcast float* %169 to <8 x float>*
  store <8 x float> %173, <8 x float>* %174, align 32
  %175 = getelementptr inbounds float, float* %1, i64 %56
  %176 = fmul <8 x float> %125, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %177 = fmul <8 x float> %124, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %178 = fsub <8 x float> %176, %177
  %179 = fadd <8 x float> %102, %178
  %180 = bitcast float* %175 to <8 x float>*
  store <8 x float> %179, <8 x float>* %180, align 32
  %181 = getelementptr inbounds float, float* %1, i64 %61
  %182 = fsub <8 x float> zeroinitializer, %116
  %183 = bitcast float* %181 to <8 x float>*
  store <8 x float> %182, <8 x float>* %183, align 32
  %184 = getelementptr inbounds float, float* %1, i64 %66
  %185 = fsub <8 x float> zeroinitializer, %102
  %186 = fsub <8 x float> %177, %176
  %187 = fsub <8 x float> %185, %186
  %188 = bitcast float* %184 to <8 x float>*
  store <8 x float> %187, <8 x float>* %188, align 32
  %189 = getelementptr inbounds float, float* %1, i64 %71
  %190 = fsub <8 x float> %91, %172
  %191 = bitcast float* %189 to <8 x float>*
  store <8 x float> %190, <8 x float>* %191, align 32
  %192 = getelementptr inbounds float, float* %1, i64 %76
  %193 = fsub <8 x float> zeroinitializer, %100
  %194 = fsub <8 x float> %165, %164
  %195 = fsub <8 x float> %193, %194
  %196 = bitcast float* %192 to <8 x float>*
  store <8 x float> %195, <8 x float>* %196, align 32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_fft32x32_float_avx2(float*, float*, float*) local_unnamed_addr #0 {
  tail call void @aom_fft_2d_gen(float* %0, float* %1, float* %2, i32 32, void (float*, float*, i32)* nonnull @aom_fft1d_32_avx2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, void (float*, float*, i32)* nonnull @aom_fft_unpack_2d_output_sse2, i32 8) #3
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_fft1d_32_avx2(float* readonly, float*, i32) #2 {
  %4 = bitcast float* %0 to <8 x float>*
  %5 = load <8 x float>, <8 x float>* %4, align 32
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <8 x float>*
  %9 = load <8 x float>, <8 x float>* %8, align 32
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <8 x float>*
  %14 = load <8 x float>, <8 x float>* %13, align 32
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <8 x float>*
  %19 = load <8 x float>, <8 x float>* %18, align 32
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <8 x float>*
  %24 = load <8 x float>, <8 x float>* %23, align 32
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <8 x float>*
  %29 = load <8 x float>, <8 x float>* %28, align 32
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <8 x float>*
  %34 = load <8 x float>, <8 x float>* %33, align 32
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <8 x float>*
  %39 = load <8 x float>, <8 x float>* %38, align 32
  %40 = shl nsw i32 %2, 3
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = bitcast float* %42 to <8 x float>*
  %44 = load <8 x float>, <8 x float>* %43, align 32
  %45 = mul nsw i32 %2, 9
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to <8 x float>*
  %49 = load <8 x float>, <8 x float>* %48, align 32
  %50 = mul nsw i32 %2, 10
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = bitcast float* %52 to <8 x float>*
  %54 = load <8 x float>, <8 x float>* %53, align 32
  %55 = mul nsw i32 %2, 11
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to <8 x float>*
  %59 = load <8 x float>, <8 x float>* %58, align 32
  %60 = mul nsw i32 %2, 12
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = bitcast float* %62 to <8 x float>*
  %64 = load <8 x float>, <8 x float>* %63, align 32
  %65 = mul nsw i32 %2, 13
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %0, i64 %66
  %68 = bitcast float* %67 to <8 x float>*
  %69 = load <8 x float>, <8 x float>* %68, align 32
  %70 = mul nsw i32 %2, 14
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = bitcast float* %72 to <8 x float>*
  %74 = load <8 x float>, <8 x float>* %73, align 32
  %75 = mul nsw i32 %2, 15
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = bitcast float* %77 to <8 x float>*
  %79 = load <8 x float>, <8 x float>* %78, align 32
  %80 = shl nsw i32 %2, 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float* %0, i64 %81
  %83 = bitcast float* %82 to <8 x float>*
  %84 = load <8 x float>, <8 x float>* %83, align 32
  %85 = insertelement <8 x i32> undef, i32 %2, i32 0
  %86 = shufflevector <8 x i32> %85, <8 x i32> undef, <8 x i32> zeroinitializer
  %87 = mul nsw <8 x i32> %86, <i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %88 = sext <8 x i32> %87 to <8 x i64>
  %89 = extractelement <8 x i64> %88, i32 0
  %90 = getelementptr inbounds float, float* %0, i64 %89
  %91 = bitcast float* %90 to <8 x float>*
  %92 = load <8 x float>, <8 x float>* %91, align 32
  %93 = extractelement <8 x i64> %88, i32 1
  %94 = getelementptr inbounds float, float* %0, i64 %93
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 32
  %97 = extractelement <8 x i64> %88, i32 2
  %98 = getelementptr inbounds float, float* %0, i64 %97
  %99 = bitcast float* %98 to <8 x float>*
  %100 = load <8 x float>, <8 x float>* %99, align 32
  %101 = extractelement <8 x i64> %88, i32 3
  %102 = getelementptr inbounds float, float* %0, i64 %101
  %103 = bitcast float* %102 to <8 x float>*
  %104 = load <8 x float>, <8 x float>* %103, align 32
  %105 = extractelement <8 x i64> %88, i32 4
  %106 = getelementptr inbounds float, float* %0, i64 %105
  %107 = bitcast float* %106 to <8 x float>*
  %108 = load <8 x float>, <8 x float>* %107, align 32
  %109 = extractelement <8 x i64> %88, i32 5
  %110 = getelementptr inbounds float, float* %0, i64 %109
  %111 = bitcast float* %110 to <8 x float>*
  %112 = load <8 x float>, <8 x float>* %111, align 32
  %113 = extractelement <8 x i64> %88, i32 6
  %114 = getelementptr inbounds float, float* %0, i64 %113
  %115 = bitcast float* %114 to <8 x float>*
  %116 = load <8 x float>, <8 x float>* %115, align 32
  %117 = extractelement <8 x i64> %88, i32 7
  %118 = getelementptr inbounds float, float* %0, i64 %117
  %119 = bitcast float* %118 to <8 x float>*
  %120 = load <8 x float>, <8 x float>* %119, align 32
  %121 = mul nsw i32 %2, 25
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds float, float* %0, i64 %122
  %124 = bitcast float* %123 to <8 x float>*
  %125 = load <8 x float>, <8 x float>* %124, align 32
  %126 = mul nsw i32 %2, 26
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %0, i64 %127
  %129 = bitcast float* %128 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 32
  %131 = mul nsw i32 %2, 27
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds float, float* %0, i64 %132
  %134 = bitcast float* %133 to <8 x float>*
  %135 = load <8 x float>, <8 x float>* %134, align 32
  %136 = mul nsw i32 %2, 28
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds float, float* %0, i64 %137
  %139 = bitcast float* %138 to <8 x float>*
  %140 = load <8 x float>, <8 x float>* %139, align 32
  %141 = mul nsw i32 %2, 29
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds float, float* %0, i64 %142
  %144 = bitcast float* %143 to <8 x float>*
  %145 = load <8 x float>, <8 x float>* %144, align 32
  %146 = mul nsw i32 %2, 30
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds float, float* %0, i64 %147
  %149 = bitcast float* %148 to <8 x float>*
  %150 = load <8 x float>, <8 x float>* %149, align 32
  %151 = mul nsw i32 %2, 31
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %0, i64 %152
  %154 = bitcast float* %153 to <8 x float>*
  %155 = load <8 x float>, <8 x float>* %154, align 32
  %156 = fadd <8 x float> %5, %84
  %157 = fsub <8 x float> %5, %84
  %158 = fadd <8 x float> %44, %120
  %159 = fsub <8 x float> %44, %120
  %160 = fadd <8 x float> %156, %158
  %161 = fsub <8 x float> %156, %158
  %162 = fadd <8 x float> %24, %104
  %163 = fsub <8 x float> %24, %104
  %164 = fadd <8 x float> %64, %140
  %165 = fsub <8 x float> %64, %140
  %166 = fadd <8 x float> %162, %164
  %167 = fsub <8 x float> %162, %164
  %168 = fadd <8 x float> %160, %166
  %169 = fsub <8 x float> %160, %166
  %170 = fsub <8 x float> %163, %165
  %171 = fmul <8 x float> %170, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %172 = fadd <8 x float> %157, %171
  %173 = fsub <8 x float> zeroinitializer, %159
  %174 = fadd <8 x float> %163, %165
  %175 = fmul <8 x float> %174, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %176 = fsub <8 x float> %173, %175
  %177 = fsub <8 x float> %157, %171
  %178 = fsub <8 x float> %159, %175
  %179 = fadd <8 x float> %14, %96
  %180 = fsub <8 x float> %14, %96
  %181 = fadd <8 x float> %54, %130
  %182 = fsub <8 x float> %54, %130
  %183 = fadd <8 x float> %179, %181
  %184 = fsub <8 x float> %179, %181
  %185 = fadd <8 x float> %34, %112
  %186 = fsub <8 x float> %34, %112
  %187 = fadd <8 x float> %74, %150
  %188 = fsub <8 x float> %74, %150
  %189 = fadd <8 x float> %185, %187
  %190 = fsub <8 x float> %185, %187
  %191 = fadd <8 x float> %183, %189
  %192 = fsub <8 x float> %183, %189
  %193 = fsub <8 x float> %186, %188
  %194 = fmul <8 x float> %193, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %195 = fadd <8 x float> %180, %194
  %196 = fsub <8 x float> zeroinitializer, %182
  %197 = fadd <8 x float> %186, %188
  %198 = fmul <8 x float> %197, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %199 = fsub <8 x float> %196, %198
  %200 = fsub <8 x float> %180, %194
  %201 = fsub <8 x float> %182, %198
  %202 = fadd <8 x float> %168, %191
  %203 = fsub <8 x float> %168, %191
  %204 = fmul <8 x float> %195, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %205 = fmul <8 x float> %199, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %206 = fadd <8 x float> %204, %205
  %207 = fadd <8 x float> %172, %206
  %208 = fmul <8 x float> %199, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %209 = fmul <8 x float> %195, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %210 = fsub <8 x float> %208, %209
  %211 = fadd <8 x float> %176, %210
  %212 = fsub <8 x float> %184, %190
  %213 = fmul <8 x float> %212, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %214 = fadd <8 x float> %161, %213
  %215 = fsub <8 x float> zeroinitializer, %167
  %216 = fadd <8 x float> %184, %190
  %217 = fmul <8 x float> %216, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %218 = fsub <8 x float> %215, %217
  %219 = fmul <8 x float> %200, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %220 = fmul <8 x float> %201, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %221 = fadd <8 x float> %219, %220
  %222 = fadd <8 x float> %177, %221
  %223 = fmul <8 x float> %201, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %224 = fmul <8 x float> %200, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %225 = fsub <8 x float> %223, %224
  %226 = fadd <8 x float> %178, %225
  %227 = fsub <8 x float> zeroinitializer, %219
  %228 = fsub <8 x float> %227, %220
  %229 = fadd <8 x float> %177, %228
  %230 = fsub <8 x float> zeroinitializer, %178
  %231 = fsub <8 x float> %224, %223
  %232 = fsub <8 x float> %230, %231
  %233 = fsub <8 x float> %161, %213
  %234 = fsub <8 x float> %167, %217
  %235 = fsub <8 x float> zeroinitializer, %204
  %236 = fsub <8 x float> %235, %205
  %237 = fadd <8 x float> %172, %236
  %238 = fsub <8 x float> zeroinitializer, %176
  %239 = fsub <8 x float> %209, %208
  %240 = fsub <8 x float> %238, %239
  %241 = fadd <8 x float> %9, %92
  %242 = fsub <8 x float> %9, %92
  %243 = fadd <8 x float> %49, %125
  %244 = fsub <8 x float> %49, %125
  %245 = fadd <8 x float> %241, %243
  %246 = fsub <8 x float> %241, %243
  %247 = fadd <8 x float> %29, %108
  %248 = fsub <8 x float> %29, %108
  %249 = fadd <8 x float> %69, %145
  %250 = fsub <8 x float> %69, %145
  %251 = fadd <8 x float> %247, %249
  %252 = fsub <8 x float> %247, %249
  %253 = fadd <8 x float> %245, %251
  %254 = fsub <8 x float> %245, %251
  %255 = fsub <8 x float> %248, %250
  %256 = fmul <8 x float> %255, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %257 = fadd <8 x float> %242, %256
  %258 = fsub <8 x float> zeroinitializer, %244
  %259 = fadd <8 x float> %248, %250
  %260 = fmul <8 x float> %259, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %261 = fsub <8 x float> %258, %260
  %262 = fsub <8 x float> %242, %256
  %263 = fsub <8 x float> %244, %260
  %264 = fadd <8 x float> %19, %100
  %265 = fsub <8 x float> %19, %100
  %266 = fadd <8 x float> %59, %135
  %267 = fsub <8 x float> %59, %135
  %268 = fadd <8 x float> %264, %266
  %269 = fsub <8 x float> %264, %266
  %270 = fadd <8 x float> %39, %116
  %271 = fsub <8 x float> %39, %116
  %272 = fadd <8 x float> %79, %155
  %273 = fsub <8 x float> %79, %155
  %274 = fadd <8 x float> %270, %272
  %275 = fsub <8 x float> %270, %272
  %276 = fadd <8 x float> %268, %274
  %277 = fsub <8 x float> %268, %274
  %278 = fsub <8 x float> %271, %273
  %279 = fmul <8 x float> %278, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %280 = fadd <8 x float> %265, %279
  %281 = fsub <8 x float> zeroinitializer, %267
  %282 = fadd <8 x float> %271, %273
  %283 = fmul <8 x float> %282, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %284 = fsub <8 x float> %281, %283
  %285 = fsub <8 x float> %265, %279
  %286 = fsub <8 x float> %267, %283
  %287 = fadd <8 x float> %253, %276
  %288 = fsub <8 x float> %253, %276
  %289 = fmul <8 x float> %280, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %290 = fmul <8 x float> %284, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %291 = fadd <8 x float> %289, %290
  %292 = fadd <8 x float> %257, %291
  %293 = fmul <8 x float> %284, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %294 = fmul <8 x float> %280, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %295 = fsub <8 x float> %293, %294
  %296 = fadd <8 x float> %261, %295
  %297 = fsub <8 x float> %269, %275
  %298 = fmul <8 x float> %297, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %299 = fadd <8 x float> %246, %298
  %300 = fsub <8 x float> zeroinitializer, %252
  %301 = fadd <8 x float> %269, %275
  %302 = fmul <8 x float> %301, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %303 = fsub <8 x float> %300, %302
  %304 = fmul <8 x float> %285, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %305 = fmul <8 x float> %286, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %306 = fadd <8 x float> %304, %305
  %307 = fadd <8 x float> %262, %306
  %308 = fmul <8 x float> %286, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %309 = fmul <8 x float> %285, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %310 = fsub <8 x float> %308, %309
  %311 = fadd <8 x float> %263, %310
  %312 = fsub <8 x float> zeroinitializer, %304
  %313 = fsub <8 x float> %312, %305
  %314 = fadd <8 x float> %262, %313
  %315 = fsub <8 x float> zeroinitializer, %263
  %316 = fsub <8 x float> %309, %308
  %317 = fsub <8 x float> %315, %316
  %318 = fsub <8 x float> %246, %298
  %319 = fsub <8 x float> %252, %302
  %320 = fsub <8 x float> zeroinitializer, %289
  %321 = fsub <8 x float> %320, %290
  %322 = fadd <8 x float> %257, %321
  %323 = fsub <8 x float> zeroinitializer, %261
  %324 = fsub <8 x float> %294, %293
  %325 = fsub <8 x float> %323, %324
  %326 = fadd <8 x float> %202, %287
  %327 = bitcast float* %1 to <8 x float>*
  store <8 x float> %326, <8 x float>* %327, align 32
  %328 = getelementptr inbounds float, float* %1, i64 %6
  %329 = fmul <8 x float> %292, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %330 = fmul <8 x float> %296, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %331 = fadd <8 x float> %329, %330
  %332 = fadd <8 x float> %207, %331
  %333 = bitcast float* %328 to <8 x float>*
  store <8 x float> %332, <8 x float>* %333, align 32
  %334 = getelementptr inbounds float, float* %1, i64 %11
  %335 = fmul <8 x float> %299, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %336 = fmul <8 x float> %303, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %337 = fadd <8 x float> %335, %336
  %338 = fadd <8 x float> %214, %337
  %339 = bitcast float* %334 to <8 x float>*
  store <8 x float> %338, <8 x float>* %339, align 32
  %340 = getelementptr inbounds float, float* %1, i64 %16
  %341 = fmul <8 x float> %307, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %342 = fmul <8 x float> %311, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %343 = fadd <8 x float> %341, %342
  %344 = fadd <8 x float> %222, %343
  %345 = bitcast float* %340 to <8 x float>*
  store <8 x float> %344, <8 x float>* %345, align 32
  %346 = getelementptr inbounds float, float* %1, i64 %21
  %347 = fsub <8 x float> %254, %277
  %348 = fmul <8 x float> %347, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %349 = fadd <8 x float> %169, %348
  %350 = bitcast float* %346 to <8 x float>*
  store <8 x float> %349, <8 x float>* %350, align 32
  %351 = getelementptr inbounds float, float* %1, i64 %26
  %352 = fmul <8 x float> %314, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %353 = fmul <8 x float> %317, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %354 = fadd <8 x float> %353, %352
  %355 = fadd <8 x float> %229, %354
  %356 = bitcast float* %351 to <8 x float>*
  store <8 x float> %355, <8 x float>* %356, align 32
  %357 = getelementptr inbounds float, float* %1, i64 %31
  %358 = fmul <8 x float> %318, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %359 = fmul <8 x float> %319, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %360 = fadd <8 x float> %358, %359
  %361 = fadd <8 x float> %233, %360
  %362 = bitcast float* %357 to <8 x float>*
  store <8 x float> %361, <8 x float>* %362, align 32
  %363 = getelementptr inbounds float, float* %1, i64 %36
  %364 = fmul <8 x float> %322, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %365 = fmul <8 x float> %325, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %366 = fadd <8 x float> %365, %364
  %367 = fadd <8 x float> %237, %366
  %368 = bitcast float* %363 to <8 x float>*
  store <8 x float> %367, <8 x float>* %368, align 32
  %369 = getelementptr inbounds float, float* %1, i64 %41
  %370 = bitcast float* %369 to <8 x float>*
  store <8 x float> %203, <8 x float>* %370, align 32
  %371 = getelementptr inbounds float, float* %1, i64 %46
  %372 = fsub <8 x float> zeroinitializer, %364
  %373 = fsub <8 x float> %372, %365
  %374 = fadd <8 x float> %237, %373
  %375 = bitcast float* %371 to <8 x float>*
  store <8 x float> %374, <8 x float>* %375, align 32
  %376 = getelementptr inbounds float, float* %1, i64 %51
  %377 = fsub <8 x float> zeroinitializer, %358
  %378 = fsub <8 x float> %377, %359
  %379 = fadd <8 x float> %233, %378
  %380 = bitcast float* %376 to <8 x float>*
  store <8 x float> %379, <8 x float>* %380, align 32
  %381 = getelementptr inbounds float, float* %1, i64 %56
  %382 = fsub <8 x float> zeroinitializer, %352
  %383 = fsub <8 x float> %382, %353
  %384 = fadd <8 x float> %229, %383
  %385 = bitcast float* %381 to <8 x float>*
  store <8 x float> %384, <8 x float>* %385, align 32
  %386 = getelementptr inbounds float, float* %1, i64 %61
  %387 = fsub <8 x float> %169, %348
  %388 = bitcast float* %386 to <8 x float>*
  store <8 x float> %387, <8 x float>* %388, align 32
  %389 = getelementptr inbounds float, float* %1, i64 %66
  %390 = fsub <8 x float> zeroinitializer, %341
  %391 = fsub <8 x float> %390, %342
  %392 = fadd <8 x float> %222, %391
  %393 = bitcast float* %389 to <8 x float>*
  store <8 x float> %392, <8 x float>* %393, align 32
  %394 = getelementptr inbounds float, float* %1, i64 %71
  %395 = fsub <8 x float> zeroinitializer, %335
  %396 = fsub <8 x float> %395, %336
  %397 = fadd <8 x float> %214, %396
  %398 = bitcast float* %394 to <8 x float>*
  store <8 x float> %397, <8 x float>* %398, align 32
  %399 = getelementptr inbounds float, float* %1, i64 %76
  %400 = fsub <8 x float> zeroinitializer, %329
  %401 = fsub <8 x float> %400, %330
  %402 = fadd <8 x float> %207, %401
  %403 = bitcast float* %399 to <8 x float>*
  store <8 x float> %402, <8 x float>* %403, align 32
  %404 = getelementptr inbounds float, float* %1, i64 %81
  %405 = fsub <8 x float> %202, %287
  %406 = bitcast float* %404 to <8 x float>*
  store <8 x float> %405, <8 x float>* %406, align 32
  %407 = getelementptr inbounds float, float* %1, i64 %89
  %408 = fmul <8 x float> %296, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %409 = fmul <8 x float> %292, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %410 = fsub <8 x float> %408, %409
  %411 = fadd <8 x float> %211, %410
  %412 = bitcast float* %407 to <8 x float>*
  store <8 x float> %411, <8 x float>* %412, align 32
  %413 = getelementptr inbounds float, float* %1, i64 %93
  %414 = fmul <8 x float> %303, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %415 = fmul <8 x float> %299, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %416 = fsub <8 x float> %414, %415
  %417 = fadd <8 x float> %218, %416
  %418 = bitcast float* %413 to <8 x float>*
  store <8 x float> %417, <8 x float>* %418, align 32
  %419 = getelementptr inbounds float, float* %1, i64 %97
  %420 = fmul <8 x float> %311, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %421 = fmul <8 x float> %307, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %422 = fsub <8 x float> %420, %421
  %423 = fadd <8 x float> %226, %422
  %424 = bitcast float* %419 to <8 x float>*
  store <8 x float> %423, <8 x float>* %424, align 32
  %425 = getelementptr inbounds float, float* %1, i64 %101
  %426 = fsub <8 x float> zeroinitializer, %192
  %427 = fadd <8 x float> %254, %277
  %428 = fmul <8 x float> %427, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %429 = fsub <8 x float> %426, %428
  %430 = bitcast float* %425 to <8 x float>*
  store <8 x float> %429, <8 x float>* %430, align 32
  %431 = getelementptr inbounds float, float* %1, i64 %105
  %432 = fmul <8 x float> %317, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %433 = fmul <8 x float> %314, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %434 = fsub <8 x float> %432, %433
  %435 = fadd <8 x float> %232, %434
  %436 = bitcast float* %431 to <8 x float>*
  store <8 x float> %435, <8 x float>* %436, align 32
  %437 = getelementptr inbounds float, float* %1, i64 %109
  %438 = fmul <8 x float> %319, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %439 = fmul <8 x float> %318, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %440 = fsub <8 x float> %438, %439
  %441 = fadd <8 x float> %234, %440
  %442 = bitcast float* %437 to <8 x float>*
  store <8 x float> %441, <8 x float>* %442, align 32
  %443 = getelementptr inbounds float, float* %1, i64 %113
  %444 = fmul <8 x float> %325, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %445 = fmul <8 x float> %322, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %446 = fsub <8 x float> %444, %445
  %447 = fadd <8 x float> %240, %446
  %448 = bitcast float* %443 to <8 x float>*
  store <8 x float> %447, <8 x float>* %448, align 32
  %449 = getelementptr inbounds float, float* %1, i64 %117
  %450 = fsub <8 x float> zeroinitializer, %288
  %451 = bitcast float* %449 to <8 x float>*
  store <8 x float> %450, <8 x float>* %451, align 32
  %452 = getelementptr inbounds float, float* %1, i64 %122
  %453 = fsub <8 x float> zeroinitializer, %240
  %454 = fsub <8 x float> %445, %444
  %455 = fsub <8 x float> %453, %454
  %456 = bitcast float* %452 to <8 x float>*
  store <8 x float> %455, <8 x float>* %456, align 32
  %457 = getelementptr inbounds float, float* %1, i64 %127
  %458 = fsub <8 x float> zeroinitializer, %234
  %459 = fsub <8 x float> %439, %438
  %460 = fsub <8 x float> %458, %459
  %461 = bitcast float* %457 to <8 x float>*
  store <8 x float> %460, <8 x float>* %461, align 32
  %462 = getelementptr inbounds float, float* %1, i64 %132
  %463 = fsub <8 x float> zeroinitializer, %232
  %464 = fsub <8 x float> %433, %432
  %465 = fsub <8 x float> %463, %464
  %466 = bitcast float* %462 to <8 x float>*
  store <8 x float> %465, <8 x float>* %466, align 32
  %467 = getelementptr inbounds float, float* %1, i64 %137
  %468 = fsub <8 x float> %192, %428
  %469 = bitcast float* %467 to <8 x float>*
  store <8 x float> %468, <8 x float>* %469, align 32
  %470 = getelementptr inbounds float, float* %1, i64 %142
  %471 = fsub <8 x float> zeroinitializer, %226
  %472 = fsub <8 x float> %421, %420
  %473 = fsub <8 x float> %471, %472
  %474 = bitcast float* %470 to <8 x float>*
  store <8 x float> %473, <8 x float>* %474, align 32
  %475 = getelementptr inbounds float, float* %1, i64 %147
  %476 = fsub <8 x float> zeroinitializer, %218
  %477 = fsub <8 x float> %415, %414
  %478 = fsub <8 x float> %476, %477
  %479 = bitcast float* %475 to <8 x float>*
  store <8 x float> %478, <8 x float>* %479, align 32
  %480 = getelementptr inbounds float, float* %1, i64 %152
  %481 = fsub <8 x float> zeroinitializer, %211
  %482 = fsub <8 x float> %409, %408
  %483 = fsub <8 x float> %481, %482
  %484 = bitcast float* %480 to <8 x float>*
  store <8 x float> %483, <8 x float>* %484, align 32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_ifft8x8_float_avx2(float*, float*, float*) local_unnamed_addr #0 {
  tail call void @aom_ifft_2d_gen(float* %0, float* %1, float* %2, i32 8, void (float*, float*, i32)* nonnull @aom_fft1d_8_float, void (float*, float*, i32)* nonnull @aom_fft1d_8_avx2, void (float*, float*, i32)* nonnull @aom_ifft1d_8_avx2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, i32 8) #3
  ret void
}

declare void @aom_ifft_2d_gen(float*, float*, float*, i32, void (float*, float*, i32)*, void (float*, float*, i32)*, void (float*, float*, i32)*, void (float*, float*, i32)*, i32) local_unnamed_addr #1

declare void @aom_fft1d_8_float(float*, float*, i32) #1

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_ifft1d_8_avx2(float* nocapture readonly, float* nocapture, i32) #2 {
  %4 = bitcast float* %0 to <8 x float>*
  %5 = load <8 x float>, <8 x float>* %4, align 32
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <8 x float>*
  %9 = load <8 x float>, <8 x float>* %8, align 32
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <8 x float>*
  %14 = load <8 x float>, <8 x float>* %13, align 32
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <8 x float>*
  %19 = load <8 x float>, <8 x float>* %18, align 32
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <8 x float>*
  %24 = load <8 x float>, <8 x float>* %23, align 32
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <8 x float>*
  %29 = load <8 x float>, <8 x float>* %28, align 32
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <8 x float>*
  %34 = load <8 x float>, <8 x float>* %33, align 32
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <8 x float>*
  %39 = load <8 x float>, <8 x float>* %38, align 32
  %40 = fadd <8 x float> %5, %24
  %41 = fsub <8 x float> %5, %24
  %42 = fadd <8 x float> %14, %14
  %43 = fsub <8 x float> zeroinitializer, %34
  %44 = fsub <8 x float> %43, %34
  %45 = fadd <8 x float> %42, %40
  %46 = fsub <8 x float> %40, %42
  %47 = fadd <8 x float> %41, %44
  %48 = fsub <8 x float> %41, %44
  %49 = fadd <8 x float> %9, %19
  %50 = fsub <8 x float> %39, %29
  %51 = fsub <8 x float> %9, %19
  %52 = fsub <8 x float> zeroinitializer, %29
  %53 = fsub <8 x float> %52, %39
  %54 = fsub <8 x float> %29, %39
  %55 = fsub <8 x float> %19, %9
  %56 = fsub <8 x float> zeroinitializer, %39
  %57 = fsub <8 x float> %56, %29
  %58 = fadd <8 x float> %49, %49
  %59 = fsub <8 x float> %50, %54
  %60 = fadd <8 x float> %51, %57
  %61 = fsub <8 x float> %53, %55
  %62 = fsub <8 x float> %51, %57
  %63 = fadd <8 x float> %55, %53
  %64 = fadd <8 x float> %58, %45
  %65 = bitcast float* %1 to <8 x float>*
  store <8 x float> %64, <8 x float>* %65, align 32
  %66 = getelementptr inbounds float, float* %1, i64 %6
  %67 = fadd <8 x float> %61, %60
  %68 = fmul <8 x float> %67, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %69 = fadd <8 x float> %47, %68
  %70 = bitcast float* %66 to <8 x float>*
  store <8 x float> %69, <8 x float>* %70, align 32
  %71 = getelementptr inbounds float, float* %1, i64 %11
  %72 = fadd <8 x float> %46, %59
  %73 = bitcast float* %71 to <8 x float>*
  store <8 x float> %72, <8 x float>* %73, align 32
  %74 = getelementptr inbounds float, float* %1, i64 %16
  %75 = fsub <8 x float> %62, %63
  %76 = fmul <8 x float> %75, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %77 = fsub <8 x float> %48, %76
  %78 = bitcast float* %74 to <8 x float>*
  store <8 x float> %77, <8 x float>* %78, align 32
  %79 = getelementptr inbounds float, float* %1, i64 %21
  %80 = fsub <8 x float> %45, %58
  %81 = bitcast float* %79 to <8 x float>*
  store <8 x float> %80, <8 x float>* %81, align 32
  %82 = getelementptr inbounds float, float* %1, i64 %26
  %83 = fmul <8 x float> %60, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %84 = fsub <8 x float> zeroinitializer, %83
  %85 = fmul <8 x float> %61, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %86 = fsub <8 x float> %84, %85
  %87 = fadd <8 x float> %47, %86
  %88 = bitcast float* %82 to <8 x float>*
  store <8 x float> %87, <8 x float>* %88, align 32
  %89 = getelementptr inbounds float, float* %1, i64 %31
  %90 = fsub <8 x float> %46, %59
  %91 = bitcast float* %89 to <8 x float>*
  store <8 x float> %90, <8 x float>* %91, align 32
  %92 = getelementptr inbounds float, float* %1, i64 %36
  %93 = fadd <8 x float> %48, %76
  %94 = bitcast float* %92 to <8 x float>*
  store <8 x float> %93, <8 x float>* %94, align 32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_ifft16x16_float_avx2(float*, float*, float*) local_unnamed_addr #0 {
  tail call void @aom_ifft_2d_gen(float* %0, float* %1, float* %2, i32 16, void (float*, float*, i32)* nonnull @aom_fft1d_16_float, void (float*, float*, i32)* nonnull @aom_fft1d_16_avx2, void (float*, float*, i32)* nonnull @aom_ifft1d_16_avx2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, i32 8) #3
  ret void
}

declare void @aom_fft1d_16_float(float*, float*, i32) #1

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_ifft1d_16_avx2(float* nocapture readonly, float* nocapture, i32) #2 {
  %4 = bitcast float* %0 to <8 x float>*
  %5 = load <8 x float>, <8 x float>* %4, align 32
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <8 x float>*
  %9 = load <8 x float>, <8 x float>* %8, align 32
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <8 x float>*
  %14 = load <8 x float>, <8 x float>* %13, align 32
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <8 x float>*
  %19 = load <8 x float>, <8 x float>* %18, align 32
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <8 x float>*
  %24 = load <8 x float>, <8 x float>* %23, align 32
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <8 x float>*
  %29 = load <8 x float>, <8 x float>* %28, align 32
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <8 x float>*
  %34 = load <8 x float>, <8 x float>* %33, align 32
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <8 x float>*
  %39 = load <8 x float>, <8 x float>* %38, align 32
  %40 = shl nsw i32 %2, 3
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = bitcast float* %42 to <8 x float>*
  %44 = load <8 x float>, <8 x float>* %43, align 32
  %45 = mul nsw i32 %2, 9
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to <8 x float>*
  %49 = load <8 x float>, <8 x float>* %48, align 32
  %50 = mul nsw i32 %2, 10
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = bitcast float* %52 to <8 x float>*
  %54 = load <8 x float>, <8 x float>* %53, align 32
  %55 = mul nsw i32 %2, 11
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to <8 x float>*
  %59 = load <8 x float>, <8 x float>* %58, align 32
  %60 = mul nsw i32 %2, 12
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = bitcast float* %62 to <8 x float>*
  %64 = load <8 x float>, <8 x float>* %63, align 32
  %65 = mul nsw i32 %2, 13
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %0, i64 %66
  %68 = bitcast float* %67 to <8 x float>*
  %69 = load <8 x float>, <8 x float>* %68, align 32
  %70 = mul nsw i32 %2, 14
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = bitcast float* %72 to <8 x float>*
  %74 = load <8 x float>, <8 x float>* %73, align 32
  %75 = mul nsw i32 %2, 15
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = bitcast float* %77 to <8 x float>*
  %79 = load <8 x float>, <8 x float>* %78, align 32
  %80 = fadd <8 x float> %5, %44
  %81 = fsub <8 x float> %5, %44
  %82 = fadd <8 x float> %24, %24
  %83 = fsub <8 x float> zeroinitializer, %64
  %84 = fsub <8 x float> %83, %64
  %85 = fadd <8 x float> %82, %80
  %86 = fsub <8 x float> %80, %82
  %87 = fadd <8 x float> %81, %84
  %88 = fsub <8 x float> %81, %84
  %89 = fadd <8 x float> %14, %34
  %90 = fsub <8 x float> %74, %54
  %91 = fsub <8 x float> %14, %34
  %92 = fsub <8 x float> zeroinitializer, %54
  %93 = fsub <8 x float> %92, %74
  %94 = fsub <8 x float> %54, %74
  %95 = fsub <8 x float> %34, %14
  %96 = fsub <8 x float> zeroinitializer, %74
  %97 = fsub <8 x float> %96, %54
  %98 = fadd <8 x float> %89, %89
  %99 = fsub <8 x float> %90, %94
  %100 = fadd <8 x float> %91, %97
  %101 = fsub <8 x float> %93, %95
  %102 = fsub <8 x float> %91, %97
  %103 = fadd <8 x float> %95, %93
  %104 = fadd <8 x float> %98, %85
  %105 = fsub <8 x float> %85, %98
  %106 = fadd <8 x float> %101, %100
  %107 = fmul <8 x float> %106, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %108 = fadd <8 x float> %87, %107
  %109 = fmul <8 x float> %100, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %110 = fsub <8 x float> zeroinitializer, %109
  %111 = fmul <8 x float> %101, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %112 = fsub <8 x float> %110, %111
  %113 = fadd <8 x float> %87, %112
  %114 = fadd <8 x float> %86, %99
  %115 = fsub <8 x float> %86, %99
  %116 = fsub <8 x float> %102, %103
  %117 = fmul <8 x float> %116, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %118 = fsub <8 x float> %88, %117
  %119 = fadd <8 x float> %88, %117
  %120 = fadd <8 x float> %9, %39
  %121 = fsub <8 x float> %79, %49
  %122 = fsub <8 x float> %9, %39
  %123 = fsub <8 x float> zeroinitializer, %49
  %124 = fsub <8 x float> %123, %79
  %125 = fadd <8 x float> %19, %29
  %126 = fsub <8 x float> %59, %69
  %127 = fsub <8 x float> %29, %19
  %128 = fsub <8 x float> zeroinitializer, %69
  %129 = fsub <8 x float> %128, %59
  %130 = fadd <8 x float> %125, %120
  %131 = fadd <8 x float> %126, %121
  %132 = fsub <8 x float> %120, %125
  %133 = fsub <8 x float> %121, %126
  %134 = fadd <8 x float> %122, %129
  %135 = fsub <8 x float> %124, %127
  %136 = fsub <8 x float> %122, %129
  %137 = fadd <8 x float> %127, %124
  %138 = fsub <8 x float> %69, %59
  %139 = fsub <8 x float> %19, %29
  %140 = fsub <8 x float> zeroinitializer, %59
  %141 = fsub <8 x float> %140, %69
  %142 = fsub <8 x float> %49, %79
  %143 = fsub <8 x float> %39, %9
  %144 = fsub <8 x float> zeroinitializer, %79
  %145 = fsub <8 x float> %144, %49
  %146 = fadd <8 x float> %138, %142
  %147 = fsub <8 x float> %125, %120
  %148 = fsub <8 x float> %138, %142
  %149 = fadd <8 x float> %139, %145
  %150 = fsub <8 x float> %141, %143
  %151 = fsub <8 x float> %139, %145
  %152 = fadd <8 x float> %143, %141
  %153 = fadd <8 x float> %130, %130
  %154 = fsub <8 x float> %131, %146
  %155 = fadd <8 x float> %150, %149
  %156 = fmul <8 x float> %155, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %157 = fadd <8 x float> %134, %156
  %158 = fsub <8 x float> %150, %149
  %159 = fmul <8 x float> %158, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %160 = fadd <8 x float> %135, %159
  %161 = fmul <8 x float> %149, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %162 = fsub <8 x float> zeroinitializer, %161
  %163 = fmul <8 x float> %150, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %164 = fsub <8 x float> %162, %163
  %165 = fadd <8 x float> %134, %164
  %166 = fsub <8 x float> %149, %150
  %167 = fmul <8 x float> %166, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %168 = fadd <8 x float> %135, %167
  %169 = fadd <8 x float> %132, %148
  %170 = fsub <8 x float> %133, %147
  %171 = fsub <8 x float> %132, %148
  %172 = fadd <8 x float> %147, %133
  %173 = fsub <8 x float> %151, %152
  %174 = fmul <8 x float> %173, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %175 = fsub <8 x float> %136, %174
  %176 = fadd <8 x float> %152, %151
  %177 = fmul <8 x float> %176, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %178 = fsub <8 x float> %137, %177
  %179 = fadd <8 x float> %136, %174
  %180 = fadd <8 x float> %137, %177
  %181 = fadd <8 x float> %153, %104
  %182 = bitcast float* %1 to <8 x float>*
  store <8 x float> %181, <8 x float>* %182, align 32
  %183 = getelementptr inbounds float, float* %1, i64 %6
  %184 = fmul <8 x float> %157, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %185 = fmul <8 x float> %160, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %186 = fadd <8 x float> %184, %185
  %187 = fadd <8 x float> %108, %186
  %188 = bitcast float* %183 to <8 x float>*
  store <8 x float> %187, <8 x float>* %188, align 32
  %189 = getelementptr inbounds float, float* %1, i64 %11
  %190 = fadd <8 x float> %169, %170
  %191 = fmul <8 x float> %190, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %192 = fadd <8 x float> %114, %191
  %193 = bitcast float* %189 to <8 x float>*
  store <8 x float> %192, <8 x float>* %193, align 32
  %194 = getelementptr inbounds float, float* %1, i64 %16
  %195 = fmul <8 x float> %175, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %196 = fmul <8 x float> %178, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %197 = fadd <8 x float> %195, %196
  %198 = fadd <8 x float> %118, %197
  %199 = bitcast float* %194 to <8 x float>*
  store <8 x float> %198, <8 x float>* %199, align 32
  %200 = getelementptr inbounds float, float* %1, i64 %21
  %201 = fadd <8 x float> %105, %154
  %202 = bitcast float* %200 to <8 x float>*
  store <8 x float> %201, <8 x float>* %202, align 32
  %203 = getelementptr inbounds float, float* %1, i64 %26
  %204 = fmul <8 x float> %165, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %205 = fmul <8 x float> %168, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %206 = fsub <8 x float> %204, %205
  %207 = fsub <8 x float> %113, %206
  %208 = bitcast float* %203 to <8 x float>*
  store <8 x float> %207, <8 x float>* %208, align 32
  %209 = getelementptr inbounds float, float* %1, i64 %31
  %210 = fsub <8 x float> %171, %172
  %211 = fmul <8 x float> %210, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %212 = fsub <8 x float> %115, %211
  %213 = bitcast float* %209 to <8 x float>*
  store <8 x float> %212, <8 x float>* %213, align 32
  %214 = getelementptr inbounds float, float* %1, i64 %36
  %215 = fmul <8 x float> %179, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %216 = fmul <8 x float> %180, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %217 = fsub <8 x float> %215, %216
  %218 = fsub <8 x float> %119, %217
  %219 = bitcast float* %214 to <8 x float>*
  store <8 x float> %218, <8 x float>* %219, align 32
  %220 = getelementptr inbounds float, float* %1, i64 %41
  %221 = fsub <8 x float> %104, %153
  %222 = bitcast float* %220 to <8 x float>*
  store <8 x float> %221, <8 x float>* %222, align 32
  %223 = getelementptr inbounds float, float* %1, i64 %46
  %224 = fsub <8 x float> zeroinitializer, %184
  %225 = fsub <8 x float> %224, %185
  %226 = fadd <8 x float> %108, %225
  %227 = bitcast float* %223 to <8 x float>*
  store <8 x float> %226, <8 x float>* %227, align 32
  %228 = getelementptr inbounds float, float* %1, i64 %51
  %229 = fmul <8 x float> %169, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %230 = fsub <8 x float> zeroinitializer, %229
  %231 = fmul <8 x float> %170, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %232 = fsub <8 x float> %230, %231
  %233 = fadd <8 x float> %114, %232
  %234 = bitcast float* %228 to <8 x float>*
  store <8 x float> %233, <8 x float>* %234, align 32
  %235 = getelementptr inbounds float, float* %1, i64 %56
  %236 = fsub <8 x float> zeroinitializer, %195
  %237 = fsub <8 x float> %236, %196
  %238 = fadd <8 x float> %118, %237
  %239 = bitcast float* %235 to <8 x float>*
  store <8 x float> %238, <8 x float>* %239, align 32
  %240 = getelementptr inbounds float, float* %1, i64 %61
  %241 = fsub <8 x float> %105, %154
  %242 = bitcast float* %240 to <8 x float>*
  store <8 x float> %241, <8 x float>* %242, align 32
  %243 = getelementptr inbounds float, float* %1, i64 %66
  %244 = fadd <8 x float> %113, %206
  %245 = bitcast float* %243 to <8 x float>*
  store <8 x float> %244, <8 x float>* %245, align 32
  %246 = getelementptr inbounds float, float* %1, i64 %71
  %247 = fadd <8 x float> %115, %211
  %248 = bitcast float* %246 to <8 x float>*
  store <8 x float> %247, <8 x float>* %248, align 32
  %249 = getelementptr inbounds float, float* %1, i64 %76
  %250 = fadd <8 x float> %119, %217
  %251 = bitcast float* %249 to <8 x float>*
  store <8 x float> %250, <8 x float>* %251, align 32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_ifft32x32_float_avx2(float*, float*, float*) local_unnamed_addr #0 {
  tail call void @aom_ifft_2d_gen(float* %0, float* %1, float* %2, i32 32, void (float*, float*, i32)* nonnull @aom_fft1d_32_float, void (float*, float*, i32)* nonnull @aom_fft1d_32_avx2, void (float*, float*, i32)* nonnull @aom_ifft1d_32_avx2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, i32 8) #3
  ret void
}

declare void @aom_fft1d_32_float(float*, float*, i32) #1

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_ifft1d_32_avx2(float* readonly, float*, i32) #2 {
  %4 = bitcast float* %0 to <8 x float>*
  %5 = load <8 x float>, <8 x float>* %4, align 32
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <8 x float>*
  %9 = load <8 x float>, <8 x float>* %8, align 32
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <8 x float>*
  %14 = load <8 x float>, <8 x float>* %13, align 32
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <8 x float>*
  %19 = load <8 x float>, <8 x float>* %18, align 32
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <8 x float>*
  %24 = load <8 x float>, <8 x float>* %23, align 32
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <8 x float>*
  %29 = load <8 x float>, <8 x float>* %28, align 32
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <8 x float>*
  %34 = load <8 x float>, <8 x float>* %33, align 32
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <8 x float>*
  %39 = load <8 x float>, <8 x float>* %38, align 32
  %40 = shl nsw i32 %2, 3
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = bitcast float* %42 to <8 x float>*
  %44 = load <8 x float>, <8 x float>* %43, align 32
  %45 = mul nsw i32 %2, 9
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to <8 x float>*
  %49 = load <8 x float>, <8 x float>* %48, align 32
  %50 = mul nsw i32 %2, 10
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = bitcast float* %52 to <8 x float>*
  %54 = load <8 x float>, <8 x float>* %53, align 32
  %55 = mul nsw i32 %2, 11
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to <8 x float>*
  %59 = load <8 x float>, <8 x float>* %58, align 32
  %60 = mul nsw i32 %2, 12
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = bitcast float* %62 to <8 x float>*
  %64 = load <8 x float>, <8 x float>* %63, align 32
  %65 = mul nsw i32 %2, 13
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %0, i64 %66
  %68 = bitcast float* %67 to <8 x float>*
  %69 = load <8 x float>, <8 x float>* %68, align 32
  %70 = mul nsw i32 %2, 14
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = bitcast float* %72 to <8 x float>*
  %74 = load <8 x float>, <8 x float>* %73, align 32
  %75 = mul nsw i32 %2, 15
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = bitcast float* %77 to <8 x float>*
  %79 = load <8 x float>, <8 x float>* %78, align 32
  %80 = shl nsw i32 %2, 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float* %0, i64 %81
  %83 = bitcast float* %82 to <8 x float>*
  %84 = load <8 x float>, <8 x float>* %83, align 32
  %85 = insertelement <8 x i32> undef, i32 %2, i32 0
  %86 = shufflevector <8 x i32> %85, <8 x i32> undef, <8 x i32> zeroinitializer
  %87 = mul nsw <8 x i32> %86, <i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %88 = sext <8 x i32> %87 to <8 x i64>
  %89 = extractelement <8 x i64> %88, i32 0
  %90 = getelementptr inbounds float, float* %0, i64 %89
  %91 = bitcast float* %90 to <8 x float>*
  %92 = load <8 x float>, <8 x float>* %91, align 32
  %93 = extractelement <8 x i64> %88, i32 1
  %94 = getelementptr inbounds float, float* %0, i64 %93
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 32
  %97 = extractelement <8 x i64> %88, i32 2
  %98 = getelementptr inbounds float, float* %0, i64 %97
  %99 = bitcast float* %98 to <8 x float>*
  %100 = load <8 x float>, <8 x float>* %99, align 32
  %101 = extractelement <8 x i64> %88, i32 3
  %102 = getelementptr inbounds float, float* %0, i64 %101
  %103 = bitcast float* %102 to <8 x float>*
  %104 = load <8 x float>, <8 x float>* %103, align 32
  %105 = extractelement <8 x i64> %88, i32 4
  %106 = getelementptr inbounds float, float* %0, i64 %105
  %107 = bitcast float* %106 to <8 x float>*
  %108 = load <8 x float>, <8 x float>* %107, align 32
  %109 = extractelement <8 x i64> %88, i32 5
  %110 = getelementptr inbounds float, float* %0, i64 %109
  %111 = bitcast float* %110 to <8 x float>*
  %112 = load <8 x float>, <8 x float>* %111, align 32
  %113 = extractelement <8 x i64> %88, i32 6
  %114 = getelementptr inbounds float, float* %0, i64 %113
  %115 = bitcast float* %114 to <8 x float>*
  %116 = load <8 x float>, <8 x float>* %115, align 32
  %117 = extractelement <8 x i64> %88, i32 7
  %118 = getelementptr inbounds float, float* %0, i64 %117
  %119 = bitcast float* %118 to <8 x float>*
  %120 = load <8 x float>, <8 x float>* %119, align 32
  %121 = mul nsw i32 %2, 25
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds float, float* %0, i64 %122
  %124 = bitcast float* %123 to <8 x float>*
  %125 = load <8 x float>, <8 x float>* %124, align 32
  %126 = mul nsw i32 %2, 26
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %0, i64 %127
  %129 = bitcast float* %128 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 32
  %131 = mul nsw i32 %2, 27
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds float, float* %0, i64 %132
  %134 = bitcast float* %133 to <8 x float>*
  %135 = load <8 x float>, <8 x float>* %134, align 32
  %136 = mul nsw i32 %2, 28
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds float, float* %0, i64 %137
  %139 = bitcast float* %138 to <8 x float>*
  %140 = load <8 x float>, <8 x float>* %139, align 32
  %141 = mul nsw i32 %2, 29
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds float, float* %0, i64 %142
  %144 = bitcast float* %143 to <8 x float>*
  %145 = load <8 x float>, <8 x float>* %144, align 32
  %146 = mul nsw i32 %2, 30
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds float, float* %0, i64 %147
  %149 = bitcast float* %148 to <8 x float>*
  %150 = load <8 x float>, <8 x float>* %149, align 32
  %151 = mul nsw i32 %2, 31
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %0, i64 %152
  %154 = bitcast float* %153 to <8 x float>*
  %155 = load <8 x float>, <8 x float>* %154, align 32
  %156 = fadd <8 x float> %5, %84
  %157 = fsub <8 x float> %5, %84
  %158 = fadd <8 x float> %44, %44
  %159 = fsub <8 x float> zeroinitializer, %120
  %160 = fsub <8 x float> %159, %120
  %161 = fadd <8 x float> %158, %156
  %162 = fsub <8 x float> %156, %158
  %163 = fadd <8 x float> %157, %160
  %164 = fsub <8 x float> %157, %160
  %165 = fadd <8 x float> %24, %64
  %166 = fsub <8 x float> %140, %104
  %167 = fsub <8 x float> %24, %64
  %168 = fsub <8 x float> zeroinitializer, %104
  %169 = fsub <8 x float> %168, %140
  %170 = fsub <8 x float> %104, %140
  %171 = fsub <8 x float> %64, %24
  %172 = fsub <8 x float> zeroinitializer, %140
  %173 = fsub <8 x float> %172, %104
  %174 = fadd <8 x float> %165, %165
  %175 = fsub <8 x float> %166, %170
  %176 = fadd <8 x float> %167, %173
  %177 = fsub <8 x float> %169, %171
  %178 = fsub <8 x float> %167, %173
  %179 = fadd <8 x float> %171, %169
  %180 = fadd <8 x float> %174, %161
  %181 = fsub <8 x float> %161, %174
  %182 = fadd <8 x float> %177, %176
  %183 = fmul <8 x float> %182, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %184 = fadd <8 x float> %163, %183
  %185 = fmul <8 x float> %176, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %186 = fsub <8 x float> zeroinitializer, %185
  %187 = fmul <8 x float> %177, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %188 = fsub <8 x float> %186, %187
  %189 = fadd <8 x float> %163, %188
  %190 = fadd <8 x float> %162, %175
  %191 = fsub <8 x float> %162, %175
  %192 = fsub <8 x float> %178, %179
  %193 = fmul <8 x float> %192, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %194 = fsub <8 x float> %164, %193
  %195 = fadd <8 x float> %164, %193
  %196 = fadd <8 x float> %14, %74
  %197 = fsub <8 x float> %150, %96
  %198 = fsub <8 x float> %14, %74
  %199 = fsub <8 x float> zeroinitializer, %96
  %200 = fsub <8 x float> %199, %150
  %201 = fadd <8 x float> %34, %54
  %202 = fsub <8 x float> %112, %130
  %203 = fsub <8 x float> %54, %34
  %204 = fsub <8 x float> zeroinitializer, %130
  %205 = fsub <8 x float> %204, %112
  %206 = fadd <8 x float> %201, %196
  %207 = fadd <8 x float> %202, %197
  %208 = fsub <8 x float> %196, %201
  %209 = fsub <8 x float> %197, %202
  %210 = fadd <8 x float> %198, %205
  %211 = fsub <8 x float> %200, %203
  %212 = fsub <8 x float> %198, %205
  %213 = fadd <8 x float> %203, %200
  %214 = fsub <8 x float> %130, %112
  %215 = fsub <8 x float> %34, %54
  %216 = fsub <8 x float> zeroinitializer, %112
  %217 = fsub <8 x float> %216, %130
  %218 = fsub <8 x float> %96, %150
  %219 = fsub <8 x float> %74, %14
  %220 = fsub <8 x float> zeroinitializer, %150
  %221 = fsub <8 x float> %220, %96
  %222 = fadd <8 x float> %214, %218
  %223 = fsub <8 x float> %201, %196
  %224 = fsub <8 x float> %214, %218
  %225 = fadd <8 x float> %215, %221
  %226 = fsub <8 x float> %217, %219
  %227 = fsub <8 x float> %215, %221
  %228 = fadd <8 x float> %219, %217
  %229 = fadd <8 x float> %206, %206
  %230 = fsub <8 x float> %207, %222
  %231 = fadd <8 x float> %226, %225
  %232 = fmul <8 x float> %231, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %233 = fadd <8 x float> %210, %232
  %234 = fsub <8 x float> %226, %225
  %235 = fmul <8 x float> %234, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %236 = fadd <8 x float> %211, %235
  %237 = fmul <8 x float> %225, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %238 = fsub <8 x float> zeroinitializer, %237
  %239 = fmul <8 x float> %226, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %240 = fsub <8 x float> %238, %239
  %241 = fadd <8 x float> %210, %240
  %242 = fsub <8 x float> %225, %226
  %243 = fmul <8 x float> %242, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %244 = fadd <8 x float> %211, %243
  %245 = fadd <8 x float> %208, %224
  %246 = fsub <8 x float> %209, %223
  %247 = fsub <8 x float> %208, %224
  %248 = fadd <8 x float> %223, %209
  %249 = fsub <8 x float> %227, %228
  %250 = fmul <8 x float> %249, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %251 = fsub <8 x float> %212, %250
  %252 = fadd <8 x float> %228, %227
  %253 = fmul <8 x float> %252, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %254 = fsub <8 x float> %213, %253
  %255 = fadd <8 x float> %212, %250
  %256 = fadd <8 x float> %213, %253
  %257 = fadd <8 x float> %229, %180
  %258 = fsub <8 x float> %180, %229
  %259 = fmul <8 x float> %233, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %260 = fmul <8 x float> %236, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %261 = fadd <8 x float> %259, %260
  %262 = fadd <8 x float> %184, %261
  %263 = fsub <8 x float> zeroinitializer, %259
  %264 = fsub <8 x float> %263, %260
  %265 = fadd <8 x float> %184, %264
  %266 = fadd <8 x float> %245, %246
  %267 = fmul <8 x float> %266, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %268 = fadd <8 x float> %190, %267
  %269 = fmul <8 x float> %245, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %270 = fsub <8 x float> zeroinitializer, %269
  %271 = fmul <8 x float> %246, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %272 = fsub <8 x float> %270, %271
  %273 = fadd <8 x float> %190, %272
  %274 = fmul <8 x float> %251, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %275 = fmul <8 x float> %254, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %276 = fadd <8 x float> %274, %275
  %277 = fadd <8 x float> %194, %276
  %278 = fsub <8 x float> zeroinitializer, %274
  %279 = fsub <8 x float> %278, %275
  %280 = fadd <8 x float> %194, %279
  %281 = fadd <8 x float> %181, %230
  %282 = fsub <8 x float> %181, %230
  %283 = fmul <8 x float> %241, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %284 = fmul <8 x float> %244, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %285 = fsub <8 x float> %283, %284
  %286 = fsub <8 x float> %189, %285
  %287 = fadd <8 x float> %189, %285
  %288 = fsub <8 x float> %247, %248
  %289 = fmul <8 x float> %288, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %290 = fsub <8 x float> %191, %289
  %291 = fadd <8 x float> %191, %289
  %292 = fmul <8 x float> %255, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %293 = fmul <8 x float> %256, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %294 = fsub <8 x float> %292, %293
  %295 = fsub <8 x float> %195, %294
  %296 = fadd <8 x float> %195, %294
  %297 = fadd <8 x float> %9, %79
  %298 = fsub <8 x float> %155, %92
  %299 = fsub <8 x float> %9, %79
  %300 = fsub <8 x float> zeroinitializer, %92
  %301 = fsub <8 x float> %300, %155
  %302 = fadd <8 x float> %39, %49
  %303 = fsub <8 x float> %116, %125
  %304 = fsub <8 x float> %49, %39
  %305 = fsub <8 x float> zeroinitializer, %125
  %306 = fsub <8 x float> %305, %116
  %307 = fadd <8 x float> %302, %297
  %308 = fadd <8 x float> %303, %298
  %309 = fsub <8 x float> %297, %302
  %310 = fsub <8 x float> %298, %303
  %311 = fadd <8 x float> %299, %306
  %312 = fsub <8 x float> %301, %304
  %313 = fsub <8 x float> %299, %306
  %314 = fadd <8 x float> %304, %301
  %315 = fadd <8 x float> %29, %59
  %316 = fsub <8 x float> %135, %108
  %317 = fsub <8 x float> %29, %59
  %318 = fsub <8 x float> zeroinitializer, %108
  %319 = fsub <8 x float> %318, %135
  %320 = fadd <8 x float> %19, %69
  %321 = fsub <8 x float> %100, %145
  %322 = fsub <8 x float> %69, %19
  %323 = fsub <8 x float> zeroinitializer, %145
  %324 = fsub <8 x float> %323, %100
  %325 = fadd <8 x float> %315, %320
  %326 = fadd <8 x float> %316, %321
  %327 = fsub <8 x float> %315, %320
  %328 = fsub <8 x float> %316, %321
  %329 = fadd <8 x float> %317, %324
  %330 = fsub <8 x float> %319, %322
  %331 = fsub <8 x float> %317, %324
  %332 = fadd <8 x float> %322, %319
  %333 = fadd <8 x float> %325, %307
  %334 = fadd <8 x float> %326, %308
  %335 = fsub <8 x float> %307, %325
  %336 = fsub <8 x float> %308, %326
  %337 = fadd <8 x float> %330, %329
  %338 = fmul <8 x float> %337, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %339 = fadd <8 x float> %311, %338
  %340 = fsub <8 x float> %330, %329
  %341 = fmul <8 x float> %340, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %342 = fadd <8 x float> %312, %341
  %343 = fmul <8 x float> %329, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %344 = fsub <8 x float> zeroinitializer, %343
  %345 = fmul <8 x float> %330, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %346 = fsub <8 x float> %344, %345
  %347 = fadd <8 x float> %311, %346
  %348 = fsub <8 x float> %329, %330
  %349 = fmul <8 x float> %348, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %350 = fadd <8 x float> %312, %349
  %351 = fadd <8 x float> %309, %328
  %352 = fsub <8 x float> %310, %327
  %353 = fsub <8 x float> %309, %328
  %354 = fadd <8 x float> %327, %310
  %355 = fsub <8 x float> %331, %332
  %356 = fmul <8 x float> %355, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %357 = fsub <8 x float> %313, %356
  %358 = fadd <8 x float> %332, %331
  %359 = fmul <8 x float> %358, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %360 = fsub <8 x float> %314, %359
  %361 = fadd <8 x float> %313, %356
  %362 = fadd <8 x float> %314, %359
  %363 = fsub <8 x float> %145, %100
  %364 = fsub <8 x float> %19, %69
  %365 = fsub <8 x float> zeroinitializer, %100
  %366 = fsub <8 x float> %365, %145
  %367 = fsub <8 x float> %108, %135
  %368 = fsub <8 x float> %59, %29
  %369 = fsub <8 x float> zeroinitializer, %135
  %370 = fsub <8 x float> %369, %108
  %371 = fadd <8 x float> %367, %363
  %372 = fsub <8 x float> %320, %315
  %373 = fsub <8 x float> %363, %367
  %374 = fadd <8 x float> %364, %370
  %375 = fsub <8 x float> %366, %368
  %376 = fsub <8 x float> %364, %370
  %377 = fadd <8 x float> %368, %366
  %378 = fsub <8 x float> %125, %116
  %379 = fsub <8 x float> %39, %49
  %380 = fsub <8 x float> zeroinitializer, %116
  %381 = fsub <8 x float> %380, %125
  %382 = fsub <8 x float> %92, %155
  %383 = fsub <8 x float> %79, %9
  %384 = fsub <8 x float> zeroinitializer, %155
  %385 = fsub <8 x float> %384, %92
  %386 = fadd <8 x float> %378, %382
  %387 = fsub <8 x float> %302, %297
  %388 = fsub <8 x float> %378, %382
  %389 = fadd <8 x float> %379, %385
  %390 = fsub <8 x float> %381, %383
  %391 = fsub <8 x float> %379, %385
  %392 = fadd <8 x float> %383, %381
  %393 = fadd <8 x float> %371, %386
  %394 = fsub <8 x float> %325, %307
  %395 = fsub <8 x float> %371, %386
  %396 = fadd <8 x float> %390, %389
  %397 = fmul <8 x float> %396, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %398 = fadd <8 x float> %374, %397
  %399 = fsub <8 x float> %390, %389
  %400 = fmul <8 x float> %399, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %401 = fadd <8 x float> %375, %400
  %402 = fmul <8 x float> %389, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %403 = fsub <8 x float> zeroinitializer, %402
  %404 = fmul <8 x float> %390, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %405 = fsub <8 x float> %403, %404
  %406 = fadd <8 x float> %374, %405
  %407 = fsub <8 x float> %389, %390
  %408 = fmul <8 x float> %407, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %409 = fadd <8 x float> %375, %408
  %410 = fadd <8 x float> %372, %388
  %411 = fsub <8 x float> %373, %387
  %412 = fsub <8 x float> %372, %388
  %413 = fadd <8 x float> %387, %373
  %414 = fsub <8 x float> %391, %392
  %415 = fmul <8 x float> %414, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %416 = fsub <8 x float> %376, %415
  %417 = fadd <8 x float> %392, %391
  %418 = fmul <8 x float> %417, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %419 = fsub <8 x float> %377, %418
  %420 = fadd <8 x float> %376, %415
  %421 = fadd <8 x float> %377, %418
  %422 = fadd <8 x float> %333, %333
  %423 = fsub <8 x float> %334, %393
  %424 = fmul <8 x float> %398, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %425 = fmul <8 x float> %401, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %426 = fadd <8 x float> %424, %425
  %427 = fadd <8 x float> %339, %426
  %428 = fmul <8 x float> %401, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %429 = fmul <8 x float> %398, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %430 = fsub <8 x float> %428, %429
  %431 = fadd <8 x float> %342, %430
  %432 = fsub <8 x float> zeroinitializer, %424
  %433 = fsub <8 x float> %432, %425
  %434 = fadd <8 x float> %339, %433
  %435 = fsub <8 x float> %429, %428
  %436 = fadd <8 x float> %342, %435
  %437 = fadd <8 x float> %411, %410
  %438 = fmul <8 x float> %437, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %439 = fadd <8 x float> %351, %438
  %440 = fsub <8 x float> %411, %410
  %441 = fmul <8 x float> %440, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %442 = fadd <8 x float> %352, %441
  %443 = fmul <8 x float> %410, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %444 = fsub <8 x float> zeroinitializer, %443
  %445 = fmul <8 x float> %411, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %446 = fsub <8 x float> %444, %445
  %447 = fadd <8 x float> %351, %446
  %448 = fsub <8 x float> %410, %411
  %449 = fmul <8 x float> %448, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %450 = fadd <8 x float> %352, %449
  %451 = fmul <8 x float> %416, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %452 = fmul <8 x float> %419, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %453 = fadd <8 x float> %451, %452
  %454 = fadd <8 x float> %357, %453
  %455 = fmul <8 x float> %419, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %456 = fmul <8 x float> %416, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %457 = fsub <8 x float> %455, %456
  %458 = fadd <8 x float> %360, %457
  %459 = fsub <8 x float> zeroinitializer, %451
  %460 = fsub <8 x float> %459, %452
  %461 = fadd <8 x float> %357, %460
  %462 = fsub <8 x float> %456, %455
  %463 = fadd <8 x float> %360, %462
  %464 = fadd <8 x float> %335, %395
  %465 = fsub <8 x float> %336, %394
  %466 = fsub <8 x float> %335, %395
  %467 = fadd <8 x float> %394, %336
  %468 = fmul <8 x float> %406, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %469 = fmul <8 x float> %409, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %470 = fsub <8 x float> %468, %469
  %471 = fsub <8 x float> %347, %470
  %472 = fmul <8 x float> %409, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %473 = fsub <8 x float> zeroinitializer, %472
  %474 = fmul <8 x float> %406, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %475 = fsub <8 x float> %473, %474
  %476 = fadd <8 x float> %350, %475
  %477 = fadd <8 x float> %347, %470
  %478 = fadd <8 x float> %472, %474
  %479 = fadd <8 x float> %350, %478
  %480 = fsub <8 x float> %412, %413
  %481 = fmul <8 x float> %480, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %482 = fsub <8 x float> %353, %481
  %483 = fadd <8 x float> %413, %412
  %484 = fmul <8 x float> %483, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %485 = fsub <8 x float> %354, %484
  %486 = fadd <8 x float> %353, %481
  %487 = fadd <8 x float> %354, %484
  %488 = fmul <8 x float> %420, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %489 = fmul <8 x float> %421, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %490 = fsub <8 x float> %488, %489
  %491 = fsub <8 x float> %361, %490
  %492 = fmul <8 x float> %421, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %493 = fsub <8 x float> zeroinitializer, %492
  %494 = fmul <8 x float> %420, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %495 = fsub <8 x float> %493, %494
  %496 = fadd <8 x float> %362, %495
  %497 = fadd <8 x float> %361, %490
  %498 = fadd <8 x float> %492, %494
  %499 = fadd <8 x float> %362, %498
  %500 = fadd <8 x float> %422, %257
  %501 = bitcast float* %1 to <8 x float>*
  store <8 x float> %500, <8 x float>* %501, align 32
  %502 = getelementptr inbounds float, float* %1, i64 %6
  %503 = fmul <8 x float> %427, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %504 = fmul <8 x float> %431, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %505 = fadd <8 x float> %503, %504
  %506 = fadd <8 x float> %262, %505
  %507 = bitcast float* %502 to <8 x float>*
  store <8 x float> %506, <8 x float>* %507, align 32
  %508 = getelementptr inbounds float, float* %1, i64 %11
  %509 = fmul <8 x float> %439, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %510 = fmul <8 x float> %442, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %511 = fadd <8 x float> %509, %510
  %512 = fadd <8 x float> %268, %511
  %513 = bitcast float* %508 to <8 x float>*
  store <8 x float> %512, <8 x float>* %513, align 32
  %514 = getelementptr inbounds float, float* %1, i64 %16
  %515 = fmul <8 x float> %454, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %516 = fmul <8 x float> %458, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %517 = fadd <8 x float> %515, %516
  %518 = fadd <8 x float> %277, %517
  %519 = bitcast float* %514 to <8 x float>*
  store <8 x float> %518, <8 x float>* %519, align 32
  %520 = getelementptr inbounds float, float* %1, i64 %21
  %521 = fadd <8 x float> %464, %465
  %522 = fmul <8 x float> %521, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %523 = fadd <8 x float> %281, %522
  %524 = bitcast float* %520 to <8 x float>*
  store <8 x float> %523, <8 x float>* %524, align 32
  %525 = getelementptr inbounds float, float* %1, i64 %26
  %526 = fmul <8 x float> %471, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %527 = fmul <8 x float> %476, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %528 = fadd <8 x float> %526, %527
  %529 = fadd <8 x float> %286, %528
  %530 = bitcast float* %525 to <8 x float>*
  store <8 x float> %529, <8 x float>* %530, align 32
  %531 = getelementptr inbounds float, float* %1, i64 %31
  %532 = fmul <8 x float> %482, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %533 = fmul <8 x float> %485, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %534 = fadd <8 x float> %532, %533
  %535 = fadd <8 x float> %290, %534
  %536 = bitcast float* %531 to <8 x float>*
  store <8 x float> %535, <8 x float>* %536, align 32
  %537 = getelementptr inbounds float, float* %1, i64 %36
  %538 = fmul <8 x float> %491, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %539 = fmul <8 x float> %496, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %540 = fadd <8 x float> %538, %539
  %541 = fadd <8 x float> %295, %540
  %542 = bitcast float* %537 to <8 x float>*
  store <8 x float> %541, <8 x float>* %542, align 32
  %543 = getelementptr inbounds float, float* %1, i64 %41
  %544 = fadd <8 x float> %258, %423
  %545 = bitcast float* %543 to <8 x float>*
  store <8 x float> %544, <8 x float>* %545, align 32
  %546 = getelementptr inbounds float, float* %1, i64 %46
  %547 = fmul <8 x float> %434, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %548 = fmul <8 x float> %436, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %549 = fsub <8 x float> %547, %548
  %550 = fsub <8 x float> %265, %549
  %551 = bitcast float* %546 to <8 x float>*
  store <8 x float> %550, <8 x float>* %551, align 32
  %552 = getelementptr inbounds float, float* %1, i64 %51
  %553 = fmul <8 x float> %447, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %554 = fmul <8 x float> %450, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %555 = fsub <8 x float> %553, %554
  %556 = fsub <8 x float> %273, %555
  %557 = bitcast float* %552 to <8 x float>*
  store <8 x float> %556, <8 x float>* %557, align 32
  %558 = getelementptr inbounds float, float* %1, i64 %56
  %559 = fmul <8 x float> %461, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %560 = fmul <8 x float> %463, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %561 = fsub <8 x float> %559, %560
  %562 = fsub <8 x float> %280, %561
  %563 = bitcast float* %558 to <8 x float>*
  store <8 x float> %562, <8 x float>* %563, align 32
  %564 = getelementptr inbounds float, float* %1, i64 %61
  %565 = fsub <8 x float> %466, %467
  %566 = fmul <8 x float> %565, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %567 = fsub <8 x float> %282, %566
  %568 = bitcast float* %564 to <8 x float>*
  store <8 x float> %567, <8 x float>* %568, align 32
  %569 = getelementptr inbounds float, float* %1, i64 %66
  %570 = fmul <8 x float> %477, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %571 = fmul <8 x float> %479, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %572 = fsub <8 x float> %570, %571
  %573 = fsub <8 x float> %287, %572
  %574 = bitcast float* %569 to <8 x float>*
  store <8 x float> %573, <8 x float>* %574, align 32
  %575 = getelementptr inbounds float, float* %1, i64 %71
  %576 = fmul <8 x float> %486, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %577 = fmul <8 x float> %487, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %578 = fsub <8 x float> %576, %577
  %579 = fsub <8 x float> %291, %578
  %580 = bitcast float* %575 to <8 x float>*
  store <8 x float> %579, <8 x float>* %580, align 32
  %581 = getelementptr inbounds float, float* %1, i64 %76
  %582 = fmul <8 x float> %497, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %583 = fmul <8 x float> %499, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %584 = fsub <8 x float> %582, %583
  %585 = fsub <8 x float> %296, %584
  %586 = bitcast float* %581 to <8 x float>*
  store <8 x float> %585, <8 x float>* %586, align 32
  %587 = getelementptr inbounds float, float* %1, i64 %81
  %588 = fsub <8 x float> %257, %422
  %589 = bitcast float* %587 to <8 x float>*
  store <8 x float> %588, <8 x float>* %589, align 32
  %590 = getelementptr inbounds float, float* %1, i64 %89
  %591 = fsub <8 x float> zeroinitializer, %503
  %592 = fsub <8 x float> %591, %504
  %593 = fadd <8 x float> %262, %592
  %594 = bitcast float* %590 to <8 x float>*
  store <8 x float> %593, <8 x float>* %594, align 32
  %595 = getelementptr inbounds float, float* %1, i64 %93
  %596 = fsub <8 x float> zeroinitializer, %509
  %597 = fsub <8 x float> %596, %510
  %598 = fadd <8 x float> %268, %597
  %599 = bitcast float* %595 to <8 x float>*
  store <8 x float> %598, <8 x float>* %599, align 32
  %600 = getelementptr inbounds float, float* %1, i64 %97
  %601 = fsub <8 x float> zeroinitializer, %515
  %602 = fsub <8 x float> %601, %516
  %603 = fadd <8 x float> %277, %602
  %604 = bitcast float* %600 to <8 x float>*
  store <8 x float> %603, <8 x float>* %604, align 32
  %605 = getelementptr inbounds float, float* %1, i64 %101
  %606 = fmul <8 x float> %464, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %607 = fsub <8 x float> zeroinitializer, %606
  %608 = fmul <8 x float> %465, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %609 = fsub <8 x float> %607, %608
  %610 = fadd <8 x float> %281, %609
  %611 = bitcast float* %605 to <8 x float>*
  store <8 x float> %610, <8 x float>* %611, align 32
  %612 = getelementptr inbounds float, float* %1, i64 %105
  %613 = fsub <8 x float> zeroinitializer, %526
  %614 = fsub <8 x float> %613, %527
  %615 = fadd <8 x float> %286, %614
  %616 = bitcast float* %612 to <8 x float>*
  store <8 x float> %615, <8 x float>* %616, align 32
  %617 = getelementptr inbounds float, float* %1, i64 %109
  %618 = fsub <8 x float> zeroinitializer, %532
  %619 = fsub <8 x float> %618, %533
  %620 = fadd <8 x float> %290, %619
  %621 = bitcast float* %617 to <8 x float>*
  store <8 x float> %620, <8 x float>* %621, align 32
  %622 = getelementptr inbounds float, float* %1, i64 %113
  %623 = fsub <8 x float> zeroinitializer, %538
  %624 = fsub <8 x float> %623, %539
  %625 = fadd <8 x float> %295, %624
  %626 = bitcast float* %622 to <8 x float>*
  store <8 x float> %625, <8 x float>* %626, align 32
  %627 = getelementptr inbounds float, float* %1, i64 %117
  %628 = fsub <8 x float> %258, %423
  %629 = bitcast float* %627 to <8 x float>*
  store <8 x float> %628, <8 x float>* %629, align 32
  %630 = getelementptr inbounds float, float* %1, i64 %122
  %631 = fadd <8 x float> %265, %549
  %632 = bitcast float* %630 to <8 x float>*
  store <8 x float> %631, <8 x float>* %632, align 32
  %633 = getelementptr inbounds float, float* %1, i64 %127
  %634 = fadd <8 x float> %273, %555
  %635 = bitcast float* %633 to <8 x float>*
  store <8 x float> %634, <8 x float>* %635, align 32
  %636 = getelementptr inbounds float, float* %1, i64 %132
  %637 = fadd <8 x float> %280, %561
  %638 = bitcast float* %636 to <8 x float>*
  store <8 x float> %637, <8 x float>* %638, align 32
  %639 = getelementptr inbounds float, float* %1, i64 %137
  %640 = fadd <8 x float> %282, %566
  %641 = bitcast float* %639 to <8 x float>*
  store <8 x float> %640, <8 x float>* %641, align 32
  %642 = getelementptr inbounds float, float* %1, i64 %142
  %643 = fadd <8 x float> %287, %572
  %644 = bitcast float* %642 to <8 x float>*
  store <8 x float> %643, <8 x float>* %644, align 32
  %645 = getelementptr inbounds float, float* %1, i64 %147
  %646 = fadd <8 x float> %291, %578
  %647 = bitcast float* %645 to <8 x float>*
  store <8 x float> %646, <8 x float>* %647, align 32
  %648 = getelementptr inbounds float, float* %1, i64 %152
  %649 = fadd <8 x float> %296, %584
  %650 = bitcast float* %648 to <8 x float>*
  store <8 x float> %649, <8 x float>* %650, align 32
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
