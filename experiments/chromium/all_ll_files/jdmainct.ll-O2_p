; ModuleID = '../../third_party/libjpeg_turbo/jdmainct.c'
source_filename = "../../third_party/libjpeg_turbo/jdmainct.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { {}*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.my_main_controller = type { %struct.jpeg_d_main_controller, [10 x i8**], i32, i32, [2 x i8***], i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_d_main_controller(%struct.jpeg_decompress_struct*, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %4 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %4, i64 0, i32 0
  %6 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %5, align 8
  %7 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %8 = tail call i8* %6(%struct.jpeg_common_struct* %7, i32 1, i64 136) #1
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 78
  %10 = bitcast %struct.jpeg_d_main_controller** %9 to i8**
  store i8* %8, i8** %10, align 8
  %11 = bitcast i8* %8 to void (%struct.jpeg_decompress_struct*, i32)**
  store void (%struct.jpeg_decompress_struct*, i32)* @start_pass_main, void (%struct.jpeg_decompress_struct*, i32)** %11, align 8
  %12 = icmp eq i32 %1, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %15 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %14, align 8
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %15, i64 0, i32 5
  store i32 4, i32* %16, align 8
  %17 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %14, align 8
  %18 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %17, i64 0, i32 0
  %19 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %18, align 8
  tail call void %19(%struct.jpeg_common_struct* %7) #1
  br label %20

20:                                               ; preds = %2, %13
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 85
  %22 = load %struct.jpeg_upsampler*, %struct.jpeg_upsampler** %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_upsampler, %struct.jpeg_upsampler* %22, i64 0, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  %27 = load i32, i32* %26, align 8
  br i1 %25, label %28, label %31

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %30 = load i32, i32* %29, align 8
  br label %104

31:                                               ; preds = %20
  %32 = icmp slt i32 %27, 2
  br i1 %32, label %33, label %41

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %35 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %34, align 8
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %35, i64 0, i32 5
  store i32 47, i32* %36, align 8
  %37 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %34, align 8
  %38 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %37, i64 0, i32 0
  %39 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %38, align 8
  tail call void %39(%struct.jpeg_common_struct* %7) #1
  %40 = load i32, i32* %26, align 8
  br label %41

41:                                               ; preds = %33, %31
  %42 = phi i32 [ %40, %33 ], [ %27, %31 ]
  %43 = bitcast %struct.jpeg_d_main_controller** %9 to %struct.my_main_controller**
  %44 = load %struct.my_main_controller*, %struct.my_main_controller** %43, align 8
  %45 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %46 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %45, i64 0, i32 0
  %47 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %46, align 8
  %48 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %49 = load i32, i32* %48, align 8
  %50 = shl nsw i32 %49, 1
  %51 = sext i32 %50 to i64
  %52 = shl nsw i64 %51, 3
  %53 = tail call i8* %47(%struct.jpeg_common_struct* %7, i32 1, i64 %52) #1
  %54 = bitcast i8* %53 to i8***
  %55 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %44, i64 0, i32 4
  %56 = getelementptr inbounds [2 x i8***], [2 x i8***]* %55, i64 0, i64 0
  %57 = bitcast [2 x i8***]* %55 to i8**
  store i8* %53, i8** %57, align 8
  %58 = load i32, i32* %48, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8**, i8*** %54, i64 %59
  %61 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %44, i64 0, i32 4, i64 1
  store i8*** %60, i8**** %61, align 8
  %62 = load i32, i32* %48, align 8
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %64, label %100

64:                                               ; preds = %41
  %65 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %66 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %65, align 8
  %67 = add nsw i32 %42, 4
  br label %68

68:                                               ; preds = %68, %64
  %69 = phi i64 [ 0, %64 ], [ %95, %68 ]
  %70 = phi %struct.jpeg_component_info* [ %66, %64 ], [ %96, %68 ]
  %71 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 3
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 9
  %74 = load i32, i32* %73, align 4
  %75 = mul nsw i32 %74, %72
  %76 = load i32, i32* %26, align 8
  %77 = sdiv i32 %75, %76
  %78 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %79 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %78, i64 0, i32 0
  %80 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %79, align 8
  %81 = mul nsw i32 %77, %67
  %82 = shl nsw i32 %81, 1
  %83 = sext i32 %82 to i64
  %84 = shl nsw i64 %83, 3
  %85 = tail call i8* %80(%struct.jpeg_common_struct* %7, i32 1, i64 %84) #1
  %86 = bitcast i8* %85 to i8**
  %87 = sext i32 %77 to i64
  %88 = getelementptr inbounds i8*, i8** %86, i64 %87
  %89 = load i8***, i8**** %56, align 8
  %90 = getelementptr inbounds i8**, i8*** %89, i64 %69
  store i8** %88, i8*** %90, align 8
  %91 = sext i32 %81 to i64
  %92 = getelementptr inbounds i8*, i8** %88, i64 %91
  %93 = load i8***, i8**** %61, align 8
  %94 = getelementptr inbounds i8**, i8*** %93, i64 %69
  store i8** %92, i8*** %94, align 8
  %95 = add nuw nsw i64 %69, 1
  %96 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 1
  %97 = load i32, i32* %48, align 8
  %98 = sext i32 %97 to i64
  %99 = icmp slt i64 %95, %98
  br i1 %99, label %68, label %100

100:                                              ; preds = %68, %41
  %101 = phi i32 [ %62, %41 ], [ %97, %68 ]
  %102 = load i32, i32* %26, align 8
  %103 = add nsw i32 %102, 2
  br label %104

104:                                              ; preds = %28, %100
  %105 = phi i32 [ %102, %100 ], [ %27, %28 ]
  %106 = phi i32 [ %101, %100 ], [ %30, %28 ]
  %107 = phi i32 [ %103, %100 ], [ %27, %28 ]
  %108 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %109 = icmp sgt i32 %106, 0
  br i1 %109, label %110, label %141

110:                                              ; preds = %104
  %111 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %112 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %111, align 8
  %113 = getelementptr inbounds i8, i8* %8, i64 16
  %114 = bitcast i8* %113 to [10 x i8**]*
  br label %115

115:                                              ; preds = %138, %110
  %116 = phi i32 [ %105, %110 ], [ %140, %138 ]
  %117 = phi i64 [ 0, %110 ], [ %134, %138 ]
  %118 = phi %struct.jpeg_component_info* [ %112, %110 ], [ %139, %138 ]
  %119 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %118, i64 0, i32 3
  %120 = load i32, i32* %119, align 4
  %121 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %118, i64 0, i32 9
  %122 = load i32, i32* %121, align 4
  %123 = mul nsw i32 %122, %120
  %124 = sdiv i32 %123, %116
  %125 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %126 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %125, i64 0, i32 2
  %127 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %126, align 8
  %128 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %118, i64 0, i32 7
  %129 = load i32, i32* %128, align 4
  %130 = mul i32 %129, %122
  %131 = mul nsw i32 %124, %107
  %132 = tail call i8** %127(%struct.jpeg_common_struct* %7, i32 1, i32 %130, i32 %131) #1
  %133 = getelementptr inbounds [10 x i8**], [10 x i8**]* %114, i64 0, i64 %117
  store i8** %132, i8*** %133, align 8
  %134 = add nuw nsw i64 %117, 1
  %135 = load i32, i32* %108, align 8
  %136 = sext i32 %135 to i64
  %137 = icmp slt i64 %134, %136
  br i1 %137, label %138, label %141

138:                                              ; preds = %115
  %139 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %118, i64 1
  %140 = load i32, i32* %26, align 8
  br label %115

141:                                              ; preds = %115, %104
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @start_pass_main(%struct.jpeg_decompress_struct*, i32) #0 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 78
  %4 = bitcast %struct.jpeg_d_main_controller** %3 to %struct.my_main_controller**
  %5 = load %struct.my_main_controller*, %struct.my_main_controller** %4, align 8
  switch i32 %1, label %401 [
    i32 0, label %6
    i32 2, label %399
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 85
  %8 = load %struct.jpeg_upsampler*, %struct.jpeg_upsampler** %7, align 8
  %9 = getelementptr inbounds %struct.jpeg_upsampler, %struct.jpeg_upsampler* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %5, i64 0, i32 0, i32 1
  br i1 %11, label %395, label %13

13:                                               ; preds = %6
  store void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* @process_data_context_main, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)** %12, align 8
  %14 = load %struct.my_main_controller*, %struct.my_main_controller** %4, align 8
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %18 = load i32, i32* %17, align 8
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %391

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %22 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %21, align 8
  %23 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %14, i64 0, i32 4, i64 0
  %24 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %14, i64 0, i32 4, i64 1
  %25 = add i32 %16, 2
  %26 = add nsw i32 %16, -2
  br label %27

27:                                               ; preds = %388, %20
  %28 = phi i32 [ %16, %20 ], [ %390, %388 ]
  %29 = phi i64 [ 0, %20 ], [ %384, %388 ]
  %30 = phi %struct.jpeg_component_info* [ %22, %20 ], [ %389, %388 ]
  %31 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %30, i64 0, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %30, i64 0, i32 9
  %34 = load i32, i32* %33, align 4
  %35 = mul nsw i32 %34, %32
  %36 = sdiv i32 %35, %28
  %37 = load i8***, i8**** %23, align 8
  %38 = getelementptr inbounds i8**, i8*** %37, i64 %29
  %39 = load i8**, i8*** %38, align 8
  %40 = load i8***, i8**** %24, align 8
  %41 = getelementptr inbounds i8**, i8*** %40, i64 %29
  %42 = load i8**, i8*** %41, align 8
  %43 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %14, i64 0, i32 1, i64 %29
  %44 = load i8**, i8*** %43, align 8
  %45 = mul i32 %36, %25
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %151

47:                                               ; preds = %27
  %48 = zext i32 %45 to i64
  %49 = icmp ult i32 %45, 4
  br i1 %49, label %50, label %72

50:                                               ; preds = %149, %72, %47
  %51 = phi i64 [ 0, %72 ], [ 0, %47 ], [ %88, %149 ]
  %52 = xor i64 %51, -1
  %53 = add nsw i64 %52, %48
  %54 = and i64 %48, 3
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %69, label %56

56:                                               ; preds = %50, %56
  %57 = phi i64 [ %66, %56 ], [ %51, %50 ]
  %58 = phi i64 [ %67, %56 ], [ %54, %50 ]
  %59 = getelementptr inbounds i8*, i8** %44, i64 %57
  %60 = bitcast i8** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds i8*, i8** %42, i64 %57
  %63 = bitcast i8** %62 to i64*
  store i64 %61, i64* %63, align 8
  %64 = getelementptr inbounds i8*, i8** %39, i64 %57
  %65 = bitcast i8** %64 to i64*
  store i64 %61, i64* %65, align 8
  %66 = add nuw nsw i64 %57, 1
  %67 = add i64 %58, -1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %56, !llvm.loop !2

69:                                               ; preds = %56, %50
  %70 = phi i64 [ %51, %50 ], [ %66, %56 ]
  %71 = icmp ult i64 %53, 3
  br i1 %71, label %151, label %285

72:                                               ; preds = %47
  %73 = getelementptr i8*, i8** %42, i64 %48
  %74 = getelementptr i8*, i8** %39, i64 %48
  %75 = getelementptr i8*, i8** %44, i64 %48
  %76 = icmp ult i8** %42, %74
  %77 = icmp ult i8** %39, %73
  %78 = and i1 %76, %77
  %79 = icmp ult i8** %42, %75
  %80 = icmp ult i8** %44, %73
  %81 = and i1 %79, %80
  %82 = or i1 %78, %81
  %83 = icmp ult i8** %39, %75
  %84 = icmp ult i8** %44, %74
  %85 = and i1 %83, %84
  %86 = or i1 %82, %85
  br i1 %86, label %50, label %87

87:                                               ; preds = %72
  %88 = and i64 %48, 4294967292
  %89 = add nsw i64 %88, -4
  %90 = lshr exact i64 %89, 2
  %91 = add nuw nsw i64 %90, 1
  %92 = and i64 %91, 1
  %93 = icmp eq i64 %89, 0
  br i1 %93, label %131, label %94

94:                                               ; preds = %87
  %95 = sub nuw nsw i64 %91, %92
  br label %96

96:                                               ; preds = %96, %94
  %97 = phi i64 [ 0, %94 ], [ %128, %96 ]
  %98 = phi i64 [ %95, %94 ], [ %129, %96 ]
  %99 = getelementptr inbounds i8*, i8** %44, i64 %97
  %100 = bitcast i8** %99 to <2 x i64>*
  %101 = load <2 x i64>, <2 x i64>* %100, align 8, !alias.scope !4
  %102 = getelementptr inbounds i8*, i8** %99, i64 2
  %103 = bitcast i8** %102 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 8, !alias.scope !4
  %105 = getelementptr inbounds i8*, i8** %42, i64 %97
  %106 = bitcast i8** %105 to <2 x i64>*
  store <2 x i64> %101, <2 x i64>* %106, align 8, !alias.scope !7, !noalias !9
  %107 = getelementptr inbounds i8*, i8** %105, i64 2
  %108 = bitcast i8** %107 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %108, align 8, !alias.scope !7, !noalias !9
  %109 = getelementptr inbounds i8*, i8** %39, i64 %97
  %110 = bitcast i8** %109 to <2 x i64>*
  store <2 x i64> %101, <2 x i64>* %110, align 8, !alias.scope !11, !noalias !4
  %111 = getelementptr inbounds i8*, i8** %109, i64 2
  %112 = bitcast i8** %111 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %112, align 8, !alias.scope !11, !noalias !4
  %113 = or i64 %97, 4
  %114 = getelementptr inbounds i8*, i8** %44, i64 %113
  %115 = bitcast i8** %114 to <2 x i64>*
  %116 = load <2 x i64>, <2 x i64>* %115, align 8, !alias.scope !4
  %117 = getelementptr inbounds i8*, i8** %114, i64 2
  %118 = bitcast i8** %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !alias.scope !4
  %120 = getelementptr inbounds i8*, i8** %42, i64 %113
  %121 = bitcast i8** %120 to <2 x i64>*
  store <2 x i64> %116, <2 x i64>* %121, align 8, !alias.scope !7, !noalias !9
  %122 = getelementptr inbounds i8*, i8** %120, i64 2
  %123 = bitcast i8** %122 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %123, align 8, !alias.scope !7, !noalias !9
  %124 = getelementptr inbounds i8*, i8** %39, i64 %113
  %125 = bitcast i8** %124 to <2 x i64>*
  store <2 x i64> %116, <2 x i64>* %125, align 8, !alias.scope !11, !noalias !4
  %126 = getelementptr inbounds i8*, i8** %124, i64 2
  %127 = bitcast i8** %126 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %127, align 8, !alias.scope !11, !noalias !4
  %128 = add i64 %97, 8
  %129 = add i64 %98, -2
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %96, !llvm.loop !12

131:                                              ; preds = %96, %87
  %132 = phi i64 [ 0, %87 ], [ %128, %96 ]
  %133 = icmp eq i64 %92, 0
  br i1 %133, label %149, label %134

134:                                              ; preds = %131
  %135 = getelementptr inbounds i8*, i8** %44, i64 %132
  %136 = bitcast i8** %135 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 8, !alias.scope !4
  %138 = getelementptr inbounds i8*, i8** %135, i64 2
  %139 = bitcast i8** %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 8, !alias.scope !4
  %141 = getelementptr inbounds i8*, i8** %42, i64 %132
  %142 = bitcast i8** %141 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %142, align 8, !alias.scope !7, !noalias !9
  %143 = getelementptr inbounds i8*, i8** %141, i64 2
  %144 = bitcast i8** %143 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %144, align 8, !alias.scope !7, !noalias !9
  %145 = getelementptr inbounds i8*, i8** %39, i64 %132
  %146 = bitcast i8** %145 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %146, align 8, !alias.scope !11, !noalias !4
  %147 = getelementptr inbounds i8*, i8** %145, i64 2
  %148 = bitcast i8** %147 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %148, align 8, !alias.scope !11, !noalias !4
  br label %149

149:                                              ; preds = %131, %134
  %150 = icmp eq i64 %88, %48
  br i1 %150, label %151, label %50

151:                                              ; preds = %69, %285, %149, %27
  %152 = icmp sgt i32 %36, 0
  br i1 %152, label %153, label %383

153:                                              ; preds = %151
  %154 = shl nsw i32 %36, 1
  %155 = mul nsw i32 %36, %16
  %156 = mul nsw i32 %36, %26
  %157 = sext i32 %156 to i64
  %158 = sext i32 %155 to i64
  %159 = sext i32 %154 to i64
  %160 = icmp sgt i64 %159, 1
  %161 = select i1 %160, i64 %159, i64 1
  %162 = icmp ult i64 %161, 4
  br i1 %162, label %163, label %165

163:                                              ; preds = %283, %165, %153
  %164 = phi i64 [ 0, %165 ], [ 0, %153 ], [ %198, %283 ]
  br label %329

165:                                              ; preds = %153
  %166 = getelementptr i8*, i8** %42, i64 %157
  %167 = icmp sgt i64 %159, 1
  %168 = select i1 %167, i64 %159, i64 1
  %169 = add nsw i64 %168, %157
  %170 = getelementptr i8*, i8** %42, i64 %169
  %171 = getelementptr i8*, i8** %42, i64 %158
  %172 = add nsw i64 %168, %158
  %173 = getelementptr i8*, i8** %42, i64 %172
  %174 = getelementptr i8*, i8** %44, i64 %158
  %175 = getelementptr i8*, i8** %44, i64 %172
  %176 = getelementptr i8*, i8** %44, i64 %157
  %177 = getelementptr i8*, i8** %44, i64 %169
  %178 = icmp ult i8** %166, %173
  %179 = icmp ult i8** %171, %170
  %180 = and i1 %178, %179
  %181 = icmp ult i8** %166, %175
  %182 = icmp ult i8** %174, %170
  %183 = and i1 %181, %182
  %184 = or i1 %180, %183
  %185 = icmp ult i8** %166, %177
  %186 = icmp ult i8** %176, %170
  %187 = and i1 %185, %186
  %188 = or i1 %184, %187
  %189 = icmp ult i8** %171, %175
  %190 = icmp ult i8** %174, %173
  %191 = and i1 %189, %190
  %192 = or i1 %188, %191
  %193 = icmp ult i8** %171, %177
  %194 = icmp ult i8** %176, %173
  %195 = and i1 %193, %194
  %196 = or i1 %192, %195
  br i1 %196, label %163, label %197

197:                                              ; preds = %165
  %198 = and i64 %161, 9223372036854775804
  %199 = add nsw i64 %198, -4
  %200 = lshr exact i64 %199, 2
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 1
  %203 = icmp eq i64 %199, 0
  br i1 %203, label %257, label %204

204:                                              ; preds = %197
  %205 = sub nuw nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %254, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %255, %206 ]
  %209 = add nsw i64 %207, %158
  %210 = getelementptr inbounds i8*, i8** %44, i64 %209
  %211 = bitcast i8** %210 to <2 x i64>*
  %212 = load <2 x i64>, <2 x i64>* %211, align 8, !alias.scope !14
  %213 = getelementptr inbounds i8*, i8** %210, i64 2
  %214 = bitcast i8** %213 to <2 x i64>*
  %215 = load <2 x i64>, <2 x i64>* %214, align 8, !alias.scope !14
  %216 = add nsw i64 %207, %157
  %217 = getelementptr inbounds i8*, i8** %42, i64 %216
  %218 = bitcast i8** %217 to <2 x i64>*
  store <2 x i64> %212, <2 x i64>* %218, align 8, !alias.scope !17, !noalias !19
  %219 = getelementptr inbounds i8*, i8** %217, i64 2
  %220 = bitcast i8** %219 to <2 x i64>*
  store <2 x i64> %215, <2 x i64>* %220, align 8, !alias.scope !17, !noalias !19
  %221 = getelementptr inbounds i8*, i8** %44, i64 %216
  %222 = bitcast i8** %221 to <2 x i64>*
  %223 = load <2 x i64>, <2 x i64>* %222, align 8, !alias.scope !22
  %224 = getelementptr inbounds i8*, i8** %221, i64 2
  %225 = bitcast i8** %224 to <2 x i64>*
  %226 = load <2 x i64>, <2 x i64>* %225, align 8, !alias.scope !22
  %227 = getelementptr inbounds i8*, i8** %42, i64 %209
  %228 = bitcast i8** %227 to <2 x i64>*
  store <2 x i64> %223, <2 x i64>* %228, align 8, !alias.scope !23, !noalias !24
  %229 = getelementptr inbounds i8*, i8** %227, i64 2
  %230 = bitcast i8** %229 to <2 x i64>*
  store <2 x i64> %226, <2 x i64>* %230, align 8, !alias.scope !23, !noalias !24
  %231 = or i64 %207, 4
  %232 = add nsw i64 %231, %158
  %233 = getelementptr inbounds i8*, i8** %44, i64 %232
  %234 = bitcast i8** %233 to <2 x i64>*
  %235 = load <2 x i64>, <2 x i64>* %234, align 8, !alias.scope !14
  %236 = getelementptr inbounds i8*, i8** %233, i64 2
  %237 = bitcast i8** %236 to <2 x i64>*
  %238 = load <2 x i64>, <2 x i64>* %237, align 8, !alias.scope !14
  %239 = add nsw i64 %231, %157
  %240 = getelementptr inbounds i8*, i8** %42, i64 %239
  %241 = bitcast i8** %240 to <2 x i64>*
  store <2 x i64> %235, <2 x i64>* %241, align 8, !alias.scope !17, !noalias !19
  %242 = getelementptr inbounds i8*, i8** %240, i64 2
  %243 = bitcast i8** %242 to <2 x i64>*
  store <2 x i64> %238, <2 x i64>* %243, align 8, !alias.scope !17, !noalias !19
  %244 = getelementptr inbounds i8*, i8** %44, i64 %239
  %245 = bitcast i8** %244 to <2 x i64>*
  %246 = load <2 x i64>, <2 x i64>* %245, align 8, !alias.scope !22
  %247 = getelementptr inbounds i8*, i8** %244, i64 2
  %248 = bitcast i8** %247 to <2 x i64>*
  %249 = load <2 x i64>, <2 x i64>* %248, align 8, !alias.scope !22
  %250 = getelementptr inbounds i8*, i8** %42, i64 %232
  %251 = bitcast i8** %250 to <2 x i64>*
  store <2 x i64> %246, <2 x i64>* %251, align 8, !alias.scope !23, !noalias !24
  %252 = getelementptr inbounds i8*, i8** %250, i64 2
  %253 = bitcast i8** %252 to <2 x i64>*
  store <2 x i64> %249, <2 x i64>* %253, align 8, !alias.scope !23, !noalias !24
  %254 = add i64 %207, 8
  %255 = add i64 %208, -2
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %257, label %206, !llvm.loop !25

257:                                              ; preds = %206, %197
  %258 = phi i64 [ 0, %197 ], [ %254, %206 ]
  %259 = icmp eq i64 %202, 0
  br i1 %259, label %283, label %260

260:                                              ; preds = %257
  %261 = add nsw i64 %258, %158
  %262 = getelementptr inbounds i8*, i8** %44, i64 %261
  %263 = bitcast i8** %262 to <2 x i64>*
  %264 = load <2 x i64>, <2 x i64>* %263, align 8, !alias.scope !14
  %265 = getelementptr inbounds i8*, i8** %262, i64 2
  %266 = bitcast i8** %265 to <2 x i64>*
  %267 = load <2 x i64>, <2 x i64>* %266, align 8, !alias.scope !14
  %268 = add nsw i64 %258, %157
  %269 = getelementptr inbounds i8*, i8** %42, i64 %268
  %270 = bitcast i8** %269 to <2 x i64>*
  store <2 x i64> %264, <2 x i64>* %270, align 8, !alias.scope !17, !noalias !19
  %271 = getelementptr inbounds i8*, i8** %269, i64 2
  %272 = bitcast i8** %271 to <2 x i64>*
  store <2 x i64> %267, <2 x i64>* %272, align 8, !alias.scope !17, !noalias !19
  %273 = getelementptr inbounds i8*, i8** %44, i64 %268
  %274 = bitcast i8** %273 to <2 x i64>*
  %275 = load <2 x i64>, <2 x i64>* %274, align 8, !alias.scope !22
  %276 = getelementptr inbounds i8*, i8** %273, i64 2
  %277 = bitcast i8** %276 to <2 x i64>*
  %278 = load <2 x i64>, <2 x i64>* %277, align 8, !alias.scope !22
  %279 = getelementptr inbounds i8*, i8** %42, i64 %261
  %280 = bitcast i8** %279 to <2 x i64>*
  store <2 x i64> %275, <2 x i64>* %280, align 8, !alias.scope !23, !noalias !24
  %281 = getelementptr inbounds i8*, i8** %279, i64 2
  %282 = bitcast i8** %281 to <2 x i64>*
  store <2 x i64> %278, <2 x i64>* %282, align 8, !alias.scope !23, !noalias !24
  br label %283

283:                                              ; preds = %257, %260
  %284 = icmp eq i64 %161, %198
  br i1 %284, label %320, label %163

285:                                              ; preds = %69, %285
  %286 = phi i64 [ %318, %285 ], [ %70, %69 ]
  %287 = getelementptr inbounds i8*, i8** %44, i64 %286
  %288 = bitcast i8** %287 to i64*
  %289 = load i64, i64* %288, align 8
  %290 = getelementptr inbounds i8*, i8** %42, i64 %286
  %291 = bitcast i8** %290 to i64*
  store i64 %289, i64* %291, align 8
  %292 = getelementptr inbounds i8*, i8** %39, i64 %286
  %293 = bitcast i8** %292 to i64*
  store i64 %289, i64* %293, align 8
  %294 = add nuw nsw i64 %286, 1
  %295 = getelementptr inbounds i8*, i8** %44, i64 %294
  %296 = bitcast i8** %295 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = getelementptr inbounds i8*, i8** %42, i64 %294
  %299 = bitcast i8** %298 to i64*
  store i64 %297, i64* %299, align 8
  %300 = getelementptr inbounds i8*, i8** %39, i64 %294
  %301 = bitcast i8** %300 to i64*
  store i64 %297, i64* %301, align 8
  %302 = add nuw nsw i64 %286, 2
  %303 = getelementptr inbounds i8*, i8** %44, i64 %302
  %304 = bitcast i8** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = getelementptr inbounds i8*, i8** %42, i64 %302
  %307 = bitcast i8** %306 to i64*
  store i64 %305, i64* %307, align 8
  %308 = getelementptr inbounds i8*, i8** %39, i64 %302
  %309 = bitcast i8** %308 to i64*
  store i64 %305, i64* %309, align 8
  %310 = add nuw nsw i64 %286, 3
  %311 = getelementptr inbounds i8*, i8** %44, i64 %310
  %312 = bitcast i8** %311 to i64*
  %313 = load i64, i64* %312, align 8
  %314 = getelementptr inbounds i8*, i8** %42, i64 %310
  %315 = bitcast i8** %314 to i64*
  store i64 %313, i64* %315, align 8
  %316 = getelementptr inbounds i8*, i8** %39, i64 %310
  %317 = bitcast i8** %316 to i64*
  store i64 %313, i64* %317, align 8
  %318 = add nuw nsw i64 %286, 4
  %319 = icmp eq i64 %318, %48
  br i1 %319, label %151, label %285, !llvm.loop !26

320:                                              ; preds = %329, %283
  %321 = bitcast i8** %39 to i64*
  %322 = sext i32 %36 to i64
  %323 = zext i32 %36 to i64
  %324 = add nsw i64 %323, -1
  %325 = and i64 %323, 3
  %326 = icmp ult i64 %324, 3
  br i1 %326, label %370, label %327

327:                                              ; preds = %320
  %328 = sub nsw i64 %323, %325
  br label %345

329:                                              ; preds = %163, %329
  %330 = phi i64 [ %343, %329 ], [ %164, %163 ]
  %331 = add nsw i64 %330, %158
  %332 = getelementptr inbounds i8*, i8** %44, i64 %331
  %333 = bitcast i8** %332 to i64*
  %334 = load i64, i64* %333, align 8
  %335 = add nsw i64 %330, %157
  %336 = getelementptr inbounds i8*, i8** %42, i64 %335
  %337 = bitcast i8** %336 to i64*
  store i64 %334, i64* %337, align 8
  %338 = getelementptr inbounds i8*, i8** %44, i64 %335
  %339 = bitcast i8** %338 to i64*
  %340 = load i64, i64* %339, align 8
  %341 = getelementptr inbounds i8*, i8** %42, i64 %331
  %342 = bitcast i8** %341 to i64*
  store i64 %340, i64* %342, align 8
  %343 = add nuw nsw i64 %330, 1
  %344 = icmp slt i64 %343, %159
  br i1 %344, label %329, label %320, !llvm.loop !27

345:                                              ; preds = %345, %327
  %346 = phi i64 [ 0, %327 ], [ %367, %345 ]
  %347 = phi i64 [ %328, %327 ], [ %368, %345 ]
  %348 = load i64, i64* %321, align 8
  %349 = sub nsw i64 %346, %322
  %350 = getelementptr inbounds i8*, i8** %39, i64 %349
  %351 = bitcast i8** %350 to i64*
  store i64 %348, i64* %351, align 8
  %352 = or i64 %346, 1
  %353 = load i64, i64* %321, align 8
  %354 = sub nsw i64 %352, %322
  %355 = getelementptr inbounds i8*, i8** %39, i64 %354
  %356 = bitcast i8** %355 to i64*
  store i64 %353, i64* %356, align 8
  %357 = or i64 %346, 2
  %358 = load i64, i64* %321, align 8
  %359 = sub nsw i64 %357, %322
  %360 = getelementptr inbounds i8*, i8** %39, i64 %359
  %361 = bitcast i8** %360 to i64*
  store i64 %358, i64* %361, align 8
  %362 = or i64 %346, 3
  %363 = load i64, i64* %321, align 8
  %364 = sub nsw i64 %362, %322
  %365 = getelementptr inbounds i8*, i8** %39, i64 %364
  %366 = bitcast i8** %365 to i64*
  store i64 %363, i64* %366, align 8
  %367 = add nuw nsw i64 %346, 4
  %368 = add i64 %347, -4
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %370, label %345

370:                                              ; preds = %345, %320
  %371 = phi i64 [ 0, %320 ], [ %367, %345 ]
  %372 = icmp eq i64 %325, 0
  br i1 %372, label %383, label %373

373:                                              ; preds = %370, %373
  %374 = phi i64 [ %380, %373 ], [ %371, %370 ]
  %375 = phi i64 [ %381, %373 ], [ %325, %370 ]
  %376 = load i64, i64* %321, align 8
  %377 = sub nsw i64 %374, %322
  %378 = getelementptr inbounds i8*, i8** %39, i64 %377
  %379 = bitcast i8** %378 to i64*
  store i64 %376, i64* %379, align 8
  %380 = add nuw nsw i64 %374, 1
  %381 = add i64 %375, -1
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %383, label %373, !llvm.loop !28

383:                                              ; preds = %370, %373, %151
  %384 = add nuw nsw i64 %29, 1
  %385 = load i32, i32* %17, align 8
  %386 = sext i32 %385 to i64
  %387 = icmp slt i64 %384, %386
  br i1 %387, label %388, label %391

388:                                              ; preds = %383
  %389 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %30, i64 1
  %390 = load i32, i32* %15, align 8
  br label %27

391:                                              ; preds = %383, %13
  %392 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %5, i64 0, i32 5
  store i32 0, i32* %392, align 8
  %393 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %5, i64 0, i32 6
  store i32 0, i32* %393, align 4
  %394 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %5, i64 0, i32 8
  store i32 0, i32* %394, align 4
  br label %396

395:                                              ; preds = %6
  store void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* @process_data_simple_main, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)** %12, align 8
  br label %396

396:                                              ; preds = %395, %391
  %397 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %5, i64 0, i32 2
  store i32 0, i32* %397, align 8
  %398 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %5, i64 0, i32 3
  store i32 0, i32* %398, align 4
  br label %409

399:                                              ; preds = %2
  %400 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %5, i64 0, i32 0, i32 1
  store void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* @process_data_crank_post, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)** %400, align 8
  br label %409

401:                                              ; preds = %2
  %402 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %403 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %402, align 8
  %404 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %403, i64 0, i32 5
  store i32 4, i32* %404, align 8
  %405 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %402, align 8
  %406 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %405, i64 0, i32 0
  %407 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %406, align 8
  %408 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %407(%struct.jpeg_common_struct* %408) #1
  br label %409

409:                                              ; preds = %401, %399, %396
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @process_data_context_main(%struct.jpeg_decompress_struct*, i8**, i32*, i32) #0 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 78
  %6 = bitcast %struct.jpeg_d_main_controller** %5 to %struct.my_main_controller**
  %7 = load %struct.my_main_controller*, %struct.my_main_controller** %6, align 8
  %8 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %27

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %13 = load %struct.jpeg_d_coef_controller*, %struct.jpeg_d_coef_controller** %12, align 8
  %14 = getelementptr inbounds %struct.jpeg_d_coef_controller, %struct.jpeg_d_coef_controller* %13, i64 0, i32 3
  %15 = load i32 (%struct.jpeg_decompress_struct*, i8***)*, i32 (%struct.jpeg_decompress_struct*, i8***)** %14, align 8
  %16 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 5
  %17 = load i32, i32* %16, align 8
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 4, i64 %18
  %20 = load i8***, i8**** %19, align 8
  %21 = tail call i32 %15(%struct.jpeg_decompress_struct* %0, i8*** %20) #1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %282, label %23

23:                                               ; preds = %11
  store i32 1, i32* %8, align 8
  %24 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 8
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, 1
  store i32 %26, i32* %24, align 4
  br label %27

27:                                               ; preds = %4, %23
  %28 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 6
  %29 = load i32, i32* %28, align 4
  switch i32 %29, label %282 [
    i32 2, label %30
    i32 0, label %49
    i32 1, label %121
  ]

30:                                               ; preds = %27
  %31 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 80
  %32 = load %struct.jpeg_d_post_controller*, %struct.jpeg_d_post_controller** %31, align 8
  %33 = getelementptr inbounds %struct.jpeg_d_post_controller, %struct.jpeg_d_post_controller* %32, i64 0, i32 1
  %34 = load void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %33, align 8
  %35 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 5
  %36 = load i32, i32* %35, align 8
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 4, i64 %37
  %39 = load i8***, i8**** %38, align 8
  %40 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 3
  %41 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 7
  %42 = load i32, i32* %41, align 8
  tail call void %34(%struct.jpeg_decompress_struct* %0, i8*** %39, i32* %40, i32 %42, i8** %1, i32* %2, i32 %3) #1
  %43 = load i32, i32* %40, align 4
  %44 = load i32, i32* %41, align 8
  %45 = icmp ult i32 %43, %44
  br i1 %45, label %282, label %46

46:                                               ; preds = %30
  store i32 0, i32* %28, align 4
  %47 = load i32, i32* %2, align 4
  %48 = icmp ult i32 %47, %3
  br i1 %48, label %49, label %282

49:                                               ; preds = %46, %27
  %50 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 3
  store i32 0, i32* %50, align 4
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  %52 = load i32, i32* %51, align 8
  %53 = add nsw i32 %52, -1
  %54 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 7
  store i32 %53, i32* %54, align 8
  %55 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 8
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 64
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %56, %58
  br i1 %59, label %60, label %120

60:                                               ; preds = %49
  %61 = load %struct.my_main_controller*, %struct.my_main_controller** %6, align 8
  %62 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %63 = load i32, i32* %62, align 8
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %65, label %120

65:                                               ; preds = %60
  %66 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %67 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %66, align 8
  %68 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %61, i64 0, i32 7
  %69 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %61, i64 0, i32 5
  br label %70

70:                                               ; preds = %114, %65
  %71 = phi i64 [ 0, %65 ], [ %115, %114 ]
  %72 = phi %struct.jpeg_component_info* [ %67, %65 ], [ %116, %114 ]
  %73 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %72, i64 0, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %72, i64 0, i32 9
  %76 = load i32, i32* %75, align 4
  %77 = mul nsw i32 %76, %74
  %78 = load i32, i32* %51, align 8
  %79 = sdiv i32 %77, %78
  %80 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %72, i64 0, i32 11
  %81 = load i32, i32* %80, align 4
  %82 = urem i32 %81, %77
  %83 = icmp eq i32 %82, 0
  %84 = select i1 %83, i32 %77, i32 %82
  %85 = icmp eq i64 %71, 0
  br i1 %85, label %86, label %90

86:                                               ; preds = %70
  %87 = add nsw i32 %84, -1
  %88 = sdiv i32 %87, %79
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %68, align 8
  br label %90

90:                                               ; preds = %86, %70
  %91 = load i32, i32* %69, align 8
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %61, i64 0, i32 4, i64 %92
  %94 = load i8***, i8**** %93, align 8
  %95 = getelementptr inbounds i8**, i8*** %94, i64 %71
  %96 = load i8**, i8*** %95, align 8
  %97 = icmp sgt i32 %79, 0
  br i1 %97, label %98, label %114

98:                                               ; preds = %90
  %99 = shl nsw i32 %79, 1
  %100 = add nsw i32 %84, -1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8*, i8** %96, i64 %101
  %103 = bitcast i8** %102 to i64*
  %104 = sext i32 %84 to i64
  %105 = sext i32 %99 to i64
  br label %106

106:                                              ; preds = %106, %98
  %107 = phi i64 [ 0, %98 ], [ %112, %106 ]
  %108 = load i64, i64* %103, align 8
  %109 = add nsw i64 %107, %104
  %110 = getelementptr inbounds i8*, i8** %96, i64 %109
  %111 = bitcast i8** %110 to i64*
  store i64 %108, i64* %111, align 8
  %112 = add nuw nsw i64 %107, 1
  %113 = icmp slt i64 %112, %105
  br i1 %113, label %106, label %114

114:                                              ; preds = %106, %90
  %115 = add nuw nsw i64 %71, 1
  %116 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %72, i64 1
  %117 = load i32, i32* %62, align 8
  %118 = sext i32 %117 to i64
  %119 = icmp slt i64 %115, %118
  br i1 %119, label %70, label %120

120:                                              ; preds = %114, %60, %49
  store i32 1, i32* %28, align 4
  br label %121

121:                                              ; preds = %27, %120
  %122 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 80
  %123 = load %struct.jpeg_d_post_controller*, %struct.jpeg_d_post_controller** %122, align 8
  %124 = getelementptr inbounds %struct.jpeg_d_post_controller, %struct.jpeg_d_post_controller* %123, i64 0, i32 1
  %125 = load void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %124, align 8
  %126 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 5
  %127 = load i32, i32* %126, align 8
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 4, i64 %128
  %130 = load i8***, i8**** %129, align 8
  %131 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 3
  %132 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 7
  %133 = load i32, i32* %132, align 8
  tail call void %125(%struct.jpeg_decompress_struct* %0, i8*** %130, i32* %131, i32 %133, i8** %1, i32* %2, i32 %3) #1
  %134 = load i32, i32* %131, align 4
  %135 = load i32, i32* %132, align 8
  %136 = icmp ult i32 %134, %135
  br i1 %136, label %282, label %137

137:                                              ; preds = %121
  %138 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 8
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, 1
  br i1 %140, label %141, label %274

141:                                              ; preds = %137
  %142 = load %struct.my_main_controller*, %struct.my_main_controller** %6, align 8
  %143 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  %144 = load i32, i32* %143, align 8
  %145 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %146 = load i32, i32* %145, align 8
  %147 = icmp sgt i32 %146, 0
  br i1 %147, label %148, label %274

148:                                              ; preds = %141
  %149 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %150 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %149, align 8
  %151 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %142, i64 0, i32 4, i64 0
  %152 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %142, i64 0, i32 4, i64 1
  %153 = add nsw i32 %144, 1
  %154 = add nsw i32 %144, 2
  br label %155

155:                                              ; preds = %271, %148
  %156 = phi i32 [ %146, %148 ], [ %267, %271 ]
  %157 = phi i32 [ %144, %148 ], [ %273, %271 ]
  %158 = phi i64 [ 0, %148 ], [ %268, %271 ]
  %159 = phi %struct.jpeg_component_info* [ %150, %148 ], [ %272, %271 ]
  %160 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %159, i64 0, i32 3
  %161 = load i32, i32* %160, align 4
  %162 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %159, i64 0, i32 9
  %163 = load i32, i32* %162, align 4
  %164 = mul nsw i32 %163, %161
  %165 = sdiv i32 %164, %157
  %166 = load i8***, i8**** %151, align 8
  %167 = getelementptr inbounds i8**, i8*** %166, i64 %158
  %168 = load i8**, i8*** %167, align 8
  %169 = load i8***, i8**** %152, align 8
  %170 = getelementptr inbounds i8**, i8*** %169, i64 %158
  %171 = load i8**, i8*** %170, align 8
  %172 = icmp sgt i32 %165, 0
  br i1 %172, label %173, label %266

173:                                              ; preds = %155
  %174 = mul nsw i32 %165, %153
  %175 = mul nsw i32 %165, %154
  %176 = sext i32 %175 to i64
  %177 = sext i32 %174 to i64
  %178 = sext i32 %165 to i64
  %179 = zext i32 %165 to i64
  %180 = and i64 %179, 1
  %181 = icmp eq i32 %165, 1
  br i1 %181, label %237, label %182

182:                                              ; preds = %173
  %183 = sub nsw i64 %179, %180
  br label %184

184:                                              ; preds = %184, %182
  %185 = phi i64 [ 0, %182 ], [ %234, %184 ]
  %186 = phi i64 [ %183, %182 ], [ %235, %184 ]
  %187 = add nsw i64 %185, %177
  %188 = getelementptr inbounds i8*, i8** %168, i64 %187
  %189 = bitcast i8** %188 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = sub nsw i64 %185, %178
  %192 = getelementptr inbounds i8*, i8** %168, i64 %191
  %193 = bitcast i8** %192 to i64*
  store i64 %190, i64* %193, align 8
  %194 = getelementptr inbounds i8*, i8** %171, i64 %187
  %195 = bitcast i8** %194 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = getelementptr inbounds i8*, i8** %171, i64 %191
  %198 = bitcast i8** %197 to i64*
  store i64 %196, i64* %198, align 8
  %199 = getelementptr inbounds i8*, i8** %168, i64 %185
  %200 = bitcast i8** %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = add nsw i64 %185, %176
  %203 = getelementptr inbounds i8*, i8** %168, i64 %202
  %204 = bitcast i8** %203 to i64*
  store i64 %201, i64* %204, align 8
  %205 = getelementptr inbounds i8*, i8** %171, i64 %185
  %206 = bitcast i8** %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = getelementptr inbounds i8*, i8** %171, i64 %202
  %209 = bitcast i8** %208 to i64*
  store i64 %207, i64* %209, align 8
  %210 = or i64 %185, 1
  %211 = add nsw i64 %210, %177
  %212 = getelementptr inbounds i8*, i8** %168, i64 %211
  %213 = bitcast i8** %212 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = sub nsw i64 %210, %178
  %216 = getelementptr inbounds i8*, i8** %168, i64 %215
  %217 = bitcast i8** %216 to i64*
  store i64 %214, i64* %217, align 8
  %218 = getelementptr inbounds i8*, i8** %171, i64 %211
  %219 = bitcast i8** %218 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = getelementptr inbounds i8*, i8** %171, i64 %215
  %222 = bitcast i8** %221 to i64*
  store i64 %220, i64* %222, align 8
  %223 = getelementptr inbounds i8*, i8** %168, i64 %210
  %224 = bitcast i8** %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = add nsw i64 %210, %176
  %227 = getelementptr inbounds i8*, i8** %168, i64 %226
  %228 = bitcast i8** %227 to i64*
  store i64 %225, i64* %228, align 8
  %229 = getelementptr inbounds i8*, i8** %171, i64 %210
  %230 = bitcast i8** %229 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = getelementptr inbounds i8*, i8** %171, i64 %226
  %233 = bitcast i8** %232 to i64*
  store i64 %231, i64* %233, align 8
  %234 = add nuw nsw i64 %185, 2
  %235 = add i64 %186, -2
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %237, label %184

237:                                              ; preds = %184, %173
  %238 = phi i64 [ 0, %173 ], [ %234, %184 ]
  %239 = icmp eq i64 %180, 0
  br i1 %239, label %264, label %240

240:                                              ; preds = %237
  %241 = add nsw i64 %238, %177
  %242 = getelementptr inbounds i8*, i8** %168, i64 %241
  %243 = bitcast i8** %242 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = sub nsw i64 %238, %178
  %246 = getelementptr inbounds i8*, i8** %168, i64 %245
  %247 = bitcast i8** %246 to i64*
  store i64 %244, i64* %247, align 8
  %248 = getelementptr inbounds i8*, i8** %171, i64 %241
  %249 = bitcast i8** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = getelementptr inbounds i8*, i8** %171, i64 %245
  %252 = bitcast i8** %251 to i64*
  store i64 %250, i64* %252, align 8
  %253 = getelementptr inbounds i8*, i8** %168, i64 %238
  %254 = bitcast i8** %253 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = add nsw i64 %238, %176
  %257 = getelementptr inbounds i8*, i8** %168, i64 %256
  %258 = bitcast i8** %257 to i64*
  store i64 %255, i64* %258, align 8
  %259 = getelementptr inbounds i8*, i8** %171, i64 %238
  %260 = bitcast i8** %259 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = getelementptr inbounds i8*, i8** %171, i64 %256
  %263 = bitcast i8** %262 to i64*
  store i64 %261, i64* %263, align 8
  br label %264

264:                                              ; preds = %237, %240
  %265 = load i32, i32* %145, align 8
  br label %266

266:                                              ; preds = %264, %155
  %267 = phi i32 [ %265, %264 ], [ %156, %155 ]
  %268 = add nuw nsw i64 %158, 1
  %269 = sext i32 %267 to i64
  %270 = icmp slt i64 %268, %269
  br i1 %270, label %271, label %274

271:                                              ; preds = %266
  %272 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %159, i64 1
  %273 = load i32, i32* %143, align 8
  br label %155

274:                                              ; preds = %266, %141, %137
  %275 = load i32, i32* %126, align 8
  %276 = xor i32 %275, 1
  store i32 %276, i32* %126, align 8
  store i32 0, i32* %8, align 8
  %277 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  %278 = load i32, i32* %277, align 8
  %279 = add nsw i32 %278, 1
  store i32 %279, i32* %131, align 4
  %280 = load i32, i32* %277, align 8
  %281 = add nsw i32 %280, 2
  store i32 %281, i32* %132, align 8
  store i32 2, i32* %28, align 4
  br label %282

282:                                              ; preds = %27, %274, %121, %46, %30, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @process_data_simple_main(%struct.jpeg_decompress_struct*, i8**, i32*, i32) #0 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 78
  %6 = bitcast %struct.jpeg_d_main_controller** %5 to %struct.my_main_controller**
  %7 = load %struct.my_main_controller*, %struct.my_main_controller** %6, align 8
  %8 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %20

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %13 = load %struct.jpeg_d_coef_controller*, %struct.jpeg_d_coef_controller** %12, align 8
  %14 = getelementptr inbounds %struct.jpeg_d_coef_controller, %struct.jpeg_d_coef_controller* %13, i64 0, i32 3
  %15 = load i32 (%struct.jpeg_decompress_struct*, i8***)*, i32 (%struct.jpeg_decompress_struct*, i8***)** %14, align 8
  %16 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 1, i64 0
  %17 = tail call i32 %15(%struct.jpeg_decompress_struct* %0, i8*** %16) #1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %32, label %19

19:                                               ; preds = %11
  store i32 1, i32* %8, align 8
  br label %20

20:                                               ; preds = %4, %19
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 80
  %24 = load %struct.jpeg_d_post_controller*, %struct.jpeg_d_post_controller** %23, align 8
  %25 = getelementptr inbounds %struct.jpeg_d_post_controller, %struct.jpeg_d_post_controller* %24, i64 0, i32 1
  %26 = load void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %25, align 8
  %27 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 1, i64 0
  %28 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %7, i64 0, i32 3
  tail call void %26(%struct.jpeg_decompress_struct* %0, i8*** %27, i32* %28, i32 %22, i8** %1, i32* %2, i32 %3) #1
  %29 = load i32, i32* %28, align 4
  %30 = icmp ult i32 %29, %22
  br i1 %30, label %32, label %31

31:                                               ; preds = %20
  store i32 0, i32* %8, align 8
  store i32 0, i32* %28, align 4
  br label %32

32:                                               ; preds = %31, %20, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @process_data_crank_post(%struct.jpeg_decompress_struct*, i8**, i32*, i32) #0 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 80
  %6 = load %struct.jpeg_d_post_controller*, %struct.jpeg_d_post_controller** %5, align 8
  %7 = getelementptr inbounds %struct.jpeg_d_post_controller, %struct.jpeg_d_post_controller* %6, i64 0, i32 1
  %8 = load void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %7, align 8
  tail call void %8(%struct.jpeg_decompress_struct* %0, i8*** null, i32* null, i32 0, i8** %1, i32* %2, i32 %3) #1
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = !{!10, !5}
!10 = distinct !{!10, !6}
!11 = !{!10}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = !{!20, !15, !21}
!20 = distinct !{!20, !16}
!21 = distinct !{!21, !16}
!22 = !{!21}
!23 = !{!20}
!24 = !{!15, !21}
!25 = distinct !{!25, !13}
!26 = distinct !{!26, !13}
!27 = distinct !{!27, !13}
!28 = distinct !{!28, !3}
