; ModuleID = '../../third_party/ffmpeg/libavcodec/mdct_fixed_32.c'
source_filename = "../../third_party/ffmpeg/libavcodec/mdct_fixed_32.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.FFTContext = type { i32, i32, i16*, %struct.FFTComplex*, i32, i32, i32*, i32*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, i32*, i32*)*, void (%struct.FFTContext*, i32*, i32*)*, void (%struct.FFTContext*, i32*, i32*)*, i32, i32, i32* }
%struct.FFTComplex = type { i32, i32 }

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @ff_mdct_init_fixed_32(%struct.FFTContext*, i32, i32, double) local_unnamed_addr #0 {
  %5 = bitcast %struct.FFTContext* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 104, i1 false)
  %6 = shl i32 1, %1
  %7 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 5
  store i32 %1, i32* %7, align 4
  %8 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 4
  store i32 %6, i32* %8, align 8
  %9 = ashr i32 %6, 2
  %10 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 14
  store i32 0, i32* %10, align 4
  %11 = add nsw i32 %1, -2
  %12 = tail call i32 @ff_fft_init_fixed_32(%struct.FFTContext* %0, i32 %11, i32 %2) #5
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %67, label %14

14:                                               ; preds = %4
  %15 = sdiv i32 %6, 2
  %16 = sext i32 %15 to i64
  %17 = tail call i8* @av_malloc_array(i64 %16, i64 4) #5
  %18 = bitcast i8* %17 to i32*
  %19 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 6
  %20 = bitcast i32** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = icmp eq i8* %17, null
  br i1 %21, label %67, label %22

22:                                               ; preds = %14
  %23 = load i32, i32* %10, align 4
  switch i32 %23, label %67 [
    i32 0, label %24
    i32 1, label %28
  ]

24:                                               ; preds = %22
  %25 = sext i32 %9 to i64
  %26 = getelementptr inbounds i32, i32* %18, i64 %25
  %27 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 7
  store i32* %26, i32** %27, align 8
  br label %32

28:                                               ; preds = %22
  %29 = getelementptr inbounds i8, i8* %17, i64 4
  %30 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 7
  %31 = bitcast i32** %30 to i8**
  store i8* %29, i8** %31, align 8
  br label %32

32:                                               ; preds = %28, %24
  %33 = phi i64 [ 2, %28 ], [ 1, %24 ]
  %34 = fcmp nsz olt double %3, 0.000000e+00
  %35 = sitofp i32 %9 to double
  %36 = fadd nsz double %35, 1.250000e-01
  %37 = select i1 %34, double %36, double 1.250000e-01
  %38 = icmp sgt i32 %6, 3
  br i1 %38, label %39, label %70

39:                                               ; preds = %32
  %40 = sitofp i32 %6 to double
  %41 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 7
  %42 = sext i32 %9 to i64
  br label %43

43:                                               ; preds = %65, %39
  %44 = phi i32* [ %18, %39 ], [ %66, %65 ]
  %45 = phi i64 [ 0, %39 ], [ %63, %65 ]
  %46 = trunc i64 %45 to i32
  %47 = sitofp i32 %46 to double
  %48 = fadd nsz double %37, %47
  %49 = fmul nsz double %48, 0x401921FB54442D18
  %50 = fdiv nsz double %49, %40
  %51 = tail call nsz double @llvm.cos.f64(double %50)
  %52 = fmul nsz double %51, 0xC1E0000000000000
  %53 = tail call i64 @llvm.lrint.i64.f64(double %52)
  %54 = trunc i64 %53 to i32
  %55 = mul nuw nsw i64 %45, %33
  %56 = getelementptr inbounds i32, i32* %44, i64 %55
  store i32 %54, i32* %56, align 4
  %57 = tail call nsz double @llvm.sin.f64(double %50)
  %58 = fmul nsz double %57, 0xC1E0000000000000
  %59 = tail call i64 @llvm.lrint.i64.f64(double %58)
  %60 = trunc i64 %59 to i32
  %61 = load i32*, i32** %41, align 8
  %62 = getelementptr inbounds i32, i32* %61, i64 %55
  store i32 %60, i32* %62, align 4
  %63 = add nuw nsw i64 %45, 1
  %64 = icmp slt i64 %63, %42
  br i1 %64, label %65, label %70

65:                                               ; preds = %43
  %66 = load i32*, i32** %19, align 8
  br label %43

67:                                               ; preds = %14, %22, %4
  %68 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 6
  %69 = bitcast i32** %68 to i8*
  tail call void @av_freep(i8* %69) #5
  tail call void @ff_fft_end_fixed_32(%struct.FFTContext* %0) #5
  br label %70

70:                                               ; preds = %43, %32, %67
  %71 = phi i32 [ -1, %67 ], [ 0, %32 ], [ 0, %43 ]
  ret i32 %71
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @ff_fft_init_fixed_32(%struct.FFTContext*, i32, i32) local_unnamed_addr #2

declare i8* @av_malloc_array(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.cos.f64(double) #3

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.lrint.i64.f64(double) #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sin.f64(double) #3

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_mdct_end_fixed_32(%struct.FFTContext*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 6
  %3 = bitcast i32** %2 to i8*
  tail call void @av_freep(i8* %3) #5
  tail call void @ff_fft_end_fixed_32(%struct.FFTContext* %0) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_imdct_half_c_fixed_32(%struct.FFTContext*, i32*, i32* nocapture readonly) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 2
  %5 = load i16*, i16** %4, align 8
  %6 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 6
  %7 = load i32*, i32** %6, align 8
  %8 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 7
  %9 = load i32*, i32** %8, align 8
  %10 = bitcast i32* %1 to %struct.FFTComplex*
  %11 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 5
  %12 = load i32, i32* %11, align 4
  %13 = shl i32 1, %12
  %14 = ashr i32 %13, 3
  %15 = icmp sgt i32 %13, 3
  br i1 %15, label %16, label %66

16:                                               ; preds = %3
  %17 = lshr i32 %13, 1
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i32, i32* %2, i64 %18
  %20 = getelementptr inbounds i32, i32* %19, i64 -1
  %21 = lshr i32 %13, 2
  %22 = zext i32 %21 to i64
  br label %23

23:                                               ; preds = %16, %23
  %24 = phi i64 [ 0, %16 ], [ %64, %23 ]
  %25 = phi i32* [ %20, %16 ], [ %63, %23 ]
  %26 = phi i32* [ %2, %16 ], [ %62, %23 ]
  %27 = getelementptr inbounds i16, i16* %5, i64 %24
  %28 = load i16, i16* %27, align 2
  %29 = getelementptr inbounds i32, i32* %7, i64 %24
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = load i32, i32* %25, align 4
  %33 = sext i32 %32 to i64
  %34 = mul nsw i64 %33, %31
  %35 = getelementptr inbounds i32, i32* %9, i64 %24
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  %38 = load i32, i32* %26, align 4
  %39 = sext i32 %38 to i64
  %40 = mul nsw i64 %39, %37
  %41 = add nsw i64 %34, 1073741824
  %42 = sub nsw i64 %41, %40
  %43 = lshr i64 %42, 31
  %44 = trunc i64 %43 to i32
  %45 = zext i16 %28 to i64
  %46 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %45, i32 0
  store i32 %44, i32* %46, align 4
  %47 = load i32, i32* %29, align 4
  %48 = sext i32 %47 to i64
  %49 = load i32, i32* %26, align 4
  %50 = sext i32 %49 to i64
  %51 = mul nsw i64 %50, %48
  %52 = load i32, i32* %35, align 4
  %53 = sext i32 %52 to i64
  %54 = load i32, i32* %25, align 4
  %55 = sext i32 %54 to i64
  %56 = mul nsw i64 %55, %53
  %57 = add nsw i64 %51, 1073741824
  %58 = add i64 %57, %56
  %59 = lshr i64 %58, 31
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %45, i32 1
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds i32, i32* %26, i64 2
  %63 = getelementptr inbounds i32, i32* %25, i64 -2
  %64 = add nuw nsw i64 %24, 1
  %65 = icmp ult i64 %64, %22
  br i1 %65, label %23, label %66

66:                                               ; preds = %23, %3
  %67 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 9
  %68 = load void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)** %67, align 8
  tail call void %68(%struct.FFTContext* %0, %struct.FFTComplex* %10) #5
  %69 = icmp sgt i32 %13, 7
  br i1 %69, label %70, label %127

70:                                               ; preds = %66
  %71 = sext i32 %14 to i64
  br label %72

72:                                               ; preds = %70, %72
  %73 = phi i64 [ 0, %70 ], [ %125, %72 ]
  %74 = xor i64 %73, -1
  %75 = add nsw i64 %71, %74
  %76 = getelementptr inbounds i32, i32* %9, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %75, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = sext i32 %80 to i64
  %82 = mul nsw i64 %81, %78
  %83 = getelementptr inbounds i32, i32* %7, i64 %75
  %84 = load i32, i32* %83, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %75, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = sext i32 %87 to i64
  %89 = mul nsw i64 %88, %85
  %90 = add nsw i64 %82, 1073741824
  %91 = sub nsw i64 %90, %89
  %92 = lshr i64 %91, 31
  %93 = trunc i64 %92 to i32
  %94 = mul nsw i64 %88, %78
  %95 = mul nsw i64 %85, %81
  %96 = add nsw i64 %95, 1073741824
  %97 = add i64 %96, %94
  %98 = lshr i64 %97, 31
  %99 = trunc i64 %98 to i32
  %100 = add nsw i64 %73, %71
  %101 = getelementptr inbounds i32, i32* %9, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %100, i32 1
  %105 = load i32, i32* %104, align 4
  %106 = sext i32 %105 to i64
  %107 = mul nsw i64 %106, %103
  %108 = getelementptr inbounds i32, i32* %7, i64 %100
  %109 = load i32, i32* %108, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %100, i32 0
  %112 = load i32, i32* %111, align 4
  %113 = sext i32 %112 to i64
  %114 = mul nsw i64 %113, %110
  %115 = add nsw i64 %107, 1073741824
  %116 = sub nsw i64 %115, %114
  %117 = lshr i64 %116, 31
  %118 = trunc i64 %117 to i32
  %119 = mul nsw i64 %113, %103
  %120 = mul nsw i64 %110, %106
  %121 = add nsw i64 %120, 1073741824
  %122 = add i64 %121, %119
  %123 = lshr i64 %122, 31
  %124 = trunc i64 %123 to i32
  store i32 %93, i32* %86, align 4
  store i32 %124, i32* %79, align 4
  store i32 %118, i32* %111, align 4
  store i32 %99, i32* %104, align 4
  %125 = add nuw nsw i64 %73, 1
  %126 = icmp slt i64 %125, %71
  br i1 %126, label %72, label %127

127:                                              ; preds = %72, %66
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_imdct_calc_c_fixed_32(%struct.FFTContext*, i32*, i32* nocapture readonly) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 5
  %5 = load i32, i32* %4, align 4
  %6 = shl i32 1, %5
  %7 = ashr i32 %6, 2
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i32, i32* %1, i64 %8
  tail call void @ff_imdct_half_c_fixed_32(%struct.FFTContext* %0, i32* %9, i32* %2)
  %10 = icmp sgt i32 %6, 3
  br i1 %10, label %11, label %31

11:                                               ; preds = %3
  %12 = lshr i32 %6, 1
  %13 = zext i32 %12 to i64
  br label %14

14:                                               ; preds = %11, %14
  %15 = phi i64 [ 0, %11 ], [ %29, %14 ]
  %16 = xor i64 %15, -1
  %17 = add nsw i64 %13, %16
  %18 = getelementptr inbounds i32, i32* %1, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 0, %19
  %21 = getelementptr inbounds i32, i32* %1, i64 %15
  store i32 %20, i32* %21, align 4
  %22 = add nuw nsw i64 %15, %13
  %23 = getelementptr inbounds i32, i32* %1, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = trunc i64 %16 to i32
  %26 = add i32 %6, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, i32* %1, i64 %27
  store i32 %24, i32* %28, align 4
  %29 = add nuw nsw i64 %15, 1
  %30 = icmp slt i64 %29, %8
  br i1 %30, label %14, label %31

31:                                               ; preds = %14, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_mdct_calc_c_fixed_32(%struct.FFTContext*, i32*, i32* nocapture readonly) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 2
  %5 = load i16*, i16** %4, align 8
  %6 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 6
  %7 = load i32*, i32** %6, align 8
  %8 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 7
  %9 = load i32*, i32** %8, align 8
  %10 = bitcast i32* %1 to %struct.FFTComplex*
  %11 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 5
  %12 = load i32, i32* %11, align 4
  %13 = shl i32 1, %12
  %14 = ashr i32 %13, 2
  %15 = ashr i32 %13, 3
  %16 = icmp sgt i32 %13, 7
  br i1 %16, label %20, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 9
  %19 = load void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)** %18, align 8
  tail call void %19(%struct.FFTContext* %0, %struct.FFTComplex* %10) #5
  br label %197

20:                                               ; preds = %3
  %21 = mul nsw i32 %14, 3
  %22 = lshr i32 %13, 1
  %23 = sext i32 %15 to i64
  %24 = sext i32 %21 to i64
  %25 = sext i32 %14 to i64
  %26 = zext i32 %22 to i64
  br label %27

27:                                               ; preds = %20, %27
  %28 = phi i64 [ 0, %20 ], [ %131, %27 ]
  %29 = shl nuw nsw i64 %28, 1
  %30 = add nsw i64 %29, %24
  %31 = getelementptr inbounds i32, i32* %2, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = xor i64 %29, -1
  %34 = add nsw i64 %24, %33
  %35 = getelementptr inbounds i32, i32* %2, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = sub i32 32, %32
  %38 = sub i32 %37, %36
  %39 = ashr i32 %38, 6
  %40 = add nsw i64 %29, %25
  %41 = getelementptr inbounds i32, i32* %2, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = add nsw i64 %25, %33
  %44 = getelementptr inbounds i32, i32* %2, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = sub i32 32, %42
  %47 = add i32 %46, %45
  %48 = ashr i32 %47, 6
  %49 = getelementptr inbounds i16, i16* %5, i64 %28
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds i32, i32* %7, i64 %28
  %52 = load i32, i32* %51, align 4
  %53 = sub nsw i32 0, %52
  %54 = sext i32 %53 to i64
  %55 = sext i32 %39 to i64
  %56 = mul nsw i64 %54, %55
  %57 = getelementptr inbounds i32, i32* %9, i64 %28
  %58 = load i32, i32* %57, align 4
  %59 = sext i32 %58 to i64
  %60 = sext i32 %48 to i64
  %61 = mul nsw i64 %59, %60
  %62 = add nsw i64 %56, 1073741824
  %63 = sub nsw i64 %62, %61
  %64 = lshr i64 %63, 31
  %65 = trunc i64 %64 to i32
  %66 = zext i16 %50 to i64
  %67 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %66, i32 0
  store i32 %65, i32* %67, align 4
  %68 = load i32, i32* %51, align 4
  %69 = sub nsw i32 0, %68
  %70 = sext i32 %69 to i64
  %71 = mul nsw i64 %70, %60
  %72 = load i32, i32* %57, align 4
  %73 = sext i32 %72 to i64
  %74 = mul nsw i64 %73, %55
  %75 = add nsw i64 %71, 1073741824
  %76 = add nsw i64 %75, %74
  %77 = lshr i64 %76, 31
  %78 = trunc i64 %77 to i32
  %79 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %66, i32 1
  store i32 %78, i32* %79, align 4
  %80 = getelementptr inbounds i32, i32* %2, i64 %29
  %81 = load i32, i32* %80, align 4
  %82 = add nsw i64 %26, %33
  %83 = getelementptr inbounds i32, i32* %2, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = add i32 %81, 32
  %86 = sub i32 %85, %84
  %87 = ashr i32 %86, 6
  %88 = add nuw nsw i64 %29, %26
  %89 = getelementptr inbounds i32, i32* %2, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = trunc i64 %33 to i32
  %92 = add i32 %13, %91
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i32, i32* %2, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = sub i32 32, %90
  %97 = sub i32 %96, %95
  %98 = ashr i32 %97, 6
  %99 = add nsw i64 %28, %23
  %100 = getelementptr inbounds i16, i16* %5, i64 %99
  %101 = load i16, i16* %100, align 2
  %102 = getelementptr inbounds i32, i32* %7, i64 %99
  %103 = load i32, i32* %102, align 4
  %104 = sub nsw i32 0, %103
  %105 = sext i32 %104 to i64
  %106 = sext i32 %87 to i64
  %107 = mul nsw i64 %105, %106
  %108 = getelementptr inbounds i32, i32* %9, i64 %99
  %109 = load i32, i32* %108, align 4
  %110 = sext i32 %109 to i64
  %111 = sext i32 %98 to i64
  %112 = mul nsw i64 %110, %111
  %113 = add nsw i64 %107, 1073741824
  %114 = sub nsw i64 %113, %112
  %115 = lshr i64 %114, 31
  %116 = trunc i64 %115 to i32
  %117 = zext i16 %101 to i64
  %118 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %117, i32 0
  store i32 %116, i32* %118, align 4
  %119 = load i32, i32* %102, align 4
  %120 = sub nsw i32 0, %119
  %121 = sext i32 %120 to i64
  %122 = mul nsw i64 %121, %111
  %123 = load i32, i32* %108, align 4
  %124 = sext i32 %123 to i64
  %125 = mul nsw i64 %124, %106
  %126 = add nsw i64 %122, 1073741824
  %127 = add nsw i64 %126, %125
  %128 = lshr i64 %127, 31
  %129 = trunc i64 %128 to i32
  %130 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %117, i32 1
  store i32 %129, i32* %130, align 4
  %131 = add nuw nsw i64 %28, 1
  %132 = icmp slt i64 %131, %23
  br i1 %132, label %27, label %133

133:                                              ; preds = %27
  %134 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 9
  %135 = load void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)** %134, align 8
  tail call void %135(%struct.FFTContext* %0, %struct.FFTComplex* %10) #5
  br i1 %16, label %136, label %197

136:                                              ; preds = %133
  %137 = sext i32 %15 to i64
  br label %138

138:                                              ; preds = %136, %138
  %139 = phi i64 [ 0, %136 ], [ %195, %138 ]
  %140 = xor i64 %139, -1
  %141 = add nsw i64 %137, %140
  %142 = getelementptr inbounds i32, i32* %9, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = sub nsw i32 0, %143
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %141, i32 0
  %147 = load i32, i32* %146, align 4
  %148 = sext i32 %147 to i64
  %149 = mul nsw i64 %148, %145
  %150 = getelementptr inbounds i32, i32* %7, i64 %141
  %151 = load i32, i32* %150, align 4
  %152 = sub nsw i32 0, %151
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %141, i32 1
  %155 = load i32, i32* %154, align 4
  %156 = sext i32 %155 to i64
  %157 = mul nsw i64 %156, %153
  %158 = add nsw i64 %149, 1073741824
  %159 = sub nsw i64 %158, %157
  %160 = lshr i64 %159, 31
  %161 = trunc i64 %160 to i32
  %162 = mul nsw i64 %156, %145
  %163 = mul nsw i64 %153, %148
  %164 = add nsw i64 %163, 1073741824
  %165 = add i64 %164, %162
  %166 = lshr i64 %165, 31
  %167 = trunc i64 %166 to i32
  %168 = add nsw i64 %139, %137
  %169 = getelementptr inbounds i32, i32* %9, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = sub nsw i32 0, %170
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %168, i32 0
  %174 = load i32, i32* %173, align 4
  %175 = sext i32 %174 to i64
  %176 = mul nsw i64 %175, %172
  %177 = getelementptr inbounds i32, i32* %7, i64 %168
  %178 = load i32, i32* %177, align 4
  %179 = sub nsw i32 0, %178
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %168, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = sext i32 %182 to i64
  %184 = mul nsw i64 %183, %180
  %185 = add nsw i64 %176, 1073741824
  %186 = sub nsw i64 %185, %184
  %187 = lshr i64 %186, 31
  %188 = trunc i64 %187 to i32
  %189 = mul nsw i64 %183, %172
  %190 = mul nsw i64 %180, %175
  %191 = add nsw i64 %190, 1073741824
  %192 = add i64 %191, %189
  %193 = lshr i64 %192, 31
  %194 = trunc i64 %193 to i32
  store i32 %167, i32* %146, align 4
  store i32 %188, i32* %154, align 4
  store i32 %194, i32* %173, align 4
  store i32 %161, i32* %181, align 4
  %195 = add nuw nsw i64 %139, 1
  %196 = icmp slt i64 %195, %137
  br i1 %196, label %138, label %197

197:                                              ; preds = %138, %17, %133
  ret void
}

declare void @av_freep(i8*) local_unnamed_addr #2

declare void @ff_fft_end_fixed_32(%struct.FFTContext*) local_unnamed_addr #2

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
