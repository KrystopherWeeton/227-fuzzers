; ModuleID = '../../third_party/lzma_sdk/XzCrc64.c'
source_filename = "../../third_party/lzma_sdk/XzCrc64.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@g_Crc64Update = internal unnamed_addr global i64 (i64, i8*, i64, i64*)* null, align 8
@g_Crc64Table = common hidden global [1024 x i64] zeroinitializer, align 16

; Function Attrs: nounwind ssp uwtable
define hidden i64 @Crc64Update(i64, i8*, i64) local_unnamed_addr #0 {
  %4 = load i64 (i64, i8*, i64, i64*)*, i64 (i64, i8*, i64, i64*)** @g_Crc64Update, align 8
  %5 = tail call i64 %4(i64 %0, i8* %1, i64 %2, i64* getelementptr inbounds ([1024 x i64], [1024 x i64]* @g_Crc64Table, i64 0, i64 0)) #3, !callees !2
  ret i64 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @Crc64Calc(i8*, i64) local_unnamed_addr #0 {
  %3 = load i64 (i64, i8*, i64, i64*)*, i64 (i64, i8*, i64, i64*)** @g_Crc64Update, align 8
  %4 = tail call i64 %3(i64 -1, i8* %0, i64 %1, i64* getelementptr inbounds ([1024 x i64], [1024 x i64]* @g_Crc64Table, i64 0, i64 0)) #3, !callees !2
  %5 = xor i64 %4, -1
  ret i64 %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @Crc64GenerateTable() local_unnamed_addr #1 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %46, %1 ]
  %3 = phi <2 x i64> [ <i64 0, i64 1>, %0 ], [ %47, %1 ]
  %4 = lshr <2 x i64> %3, <i64 1, i64 1>
  %5 = and <2 x i64> %3, <i64 1, i64 1>
  %6 = sub nsw <2 x i64> zeroinitializer, %5
  %7 = and <2 x i64> %6, <i64 -3932672073523589310, i64 -3932672073523589310>
  %8 = xor <2 x i64> %7, %4
  %9 = lshr <2 x i64> %8, <i64 1, i64 1>
  %10 = and <2 x i64> %4, <i64 1, i64 1>
  %11 = sub nsw <2 x i64> zeroinitializer, %10
  %12 = and <2 x i64> %11, <i64 -3932672073523589310, i64 -3932672073523589310>
  %13 = xor <2 x i64> %12, %9
  %14 = lshr <2 x i64> %13, <i64 1, i64 1>
  %15 = and <2 x i64> %9, <i64 1, i64 1>
  %16 = sub nsw <2 x i64> zeroinitializer, %15
  %17 = and <2 x i64> %16, <i64 -3932672073523589310, i64 -3932672073523589310>
  %18 = xor <2 x i64> %17, %14
  %19 = lshr <2 x i64> %18, <i64 1, i64 1>
  %20 = and <2 x i64> %14, <i64 1, i64 1>
  %21 = sub nsw <2 x i64> zeroinitializer, %20
  %22 = and <2 x i64> %21, <i64 -3932672073523589310, i64 -3932672073523589310>
  %23 = xor <2 x i64> %22, %19
  %24 = lshr <2 x i64> %23, <i64 1, i64 1>
  %25 = and <2 x i64> %19, <i64 1, i64 1>
  %26 = sub nsw <2 x i64> zeroinitializer, %25
  %27 = and <2 x i64> %26, <i64 -3932672073523589310, i64 -3932672073523589310>
  %28 = xor <2 x i64> %27, %24
  %29 = lshr <2 x i64> %28, <i64 1, i64 1>
  %30 = and <2 x i64> %24, <i64 1, i64 1>
  %31 = sub nsw <2 x i64> zeroinitializer, %30
  %32 = and <2 x i64> %31, <i64 -3932672073523589310, i64 -3932672073523589310>
  %33 = xor <2 x i64> %32, %29
  %34 = lshr <2 x i64> %33, <i64 1, i64 1>
  %35 = and <2 x i64> %29, <i64 1, i64 1>
  %36 = sub nsw <2 x i64> zeroinitializer, %35
  %37 = and <2 x i64> %36, <i64 -3932672073523589310, i64 -3932672073523589310>
  %38 = xor <2 x i64> %37, %34
  %39 = lshr <2 x i64> %38, <i64 1, i64 1>
  %40 = and <2 x i64> %34, <i64 1, i64 1>
  %41 = sub nsw <2 x i64> zeroinitializer, %40
  %42 = and <2 x i64> %41, <i64 -3932672073523589310, i64 -3932672073523589310>
  %43 = xor <2 x i64> %42, %39
  %44 = getelementptr inbounds [1024 x i64], [1024 x i64]* @g_Crc64Table, i64 0, i64 %2
  %45 = bitcast i64* %44 to <2 x i64>*
  store <2 x i64> %43, <2 x i64>* %45, align 16
  %46 = add i64 %2, 2
  %47 = add <2 x i64> %3, <i64 2, i64 2>
  %48 = icmp eq i64 %46, 256
  br i1 %48, label %49, label %1, !llvm.loop !3

49:                                               ; preds = %1, %49
  %50 = phi i64 [ %72, %49 ], [ 256, %1 ]
  %51 = add nuw nsw i64 %50, 4294967040
  %52 = and i64 %51, 4294967294
  %53 = getelementptr inbounds [1024 x i64], [1024 x i64]* @g_Crc64Table, i64 0, i64 %52
  %54 = load i64, i64* %53, align 16
  %55 = and i64 %54, 255
  %56 = getelementptr inbounds [1024 x i64], [1024 x i64]* @g_Crc64Table, i64 0, i64 %55
  %57 = load i64, i64* %56, align 8
  %58 = lshr i64 %54, 8
  %59 = xor i64 %57, %58
  %60 = getelementptr inbounds [1024 x i64], [1024 x i64]* @g_Crc64Table, i64 0, i64 %50
  store i64 %59, i64* %60, align 16
  %61 = or i64 %50, 1
  %62 = add nuw nsw i64 %50, 4294967041
  %63 = and i64 %62, 4294967295
  %64 = getelementptr inbounds [1024 x i64], [1024 x i64]* @g_Crc64Table, i64 0, i64 %63
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 255
  %67 = getelementptr inbounds [1024 x i64], [1024 x i64]* @g_Crc64Table, i64 0, i64 %66
  %68 = load i64, i64* %67, align 8
  %69 = lshr i64 %65, 8
  %70 = xor i64 %68, %69
  %71 = getelementptr inbounds [1024 x i64], [1024 x i64]* @g_Crc64Table, i64 0, i64 %61
  store i64 %70, i64* %71, align 8
  %72 = add nuw nsw i64 %50, 2
  %73 = icmp eq i64 %72, 1024
  br i1 %73, label %74, label %49

74:                                               ; preds = %49
  store i64 (i64, i8*, i64, i64*)* @XzCrc64UpdateT4, i64 (i64, i8*, i64, i64*)** @g_Crc64Update, align 8
  ret void
}

declare i64 @XzCrc64UpdateT4(i64, i8*, i64, i64*) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 (i64, i8*, i64, i64*)* @XzCrc64UpdateT4}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
