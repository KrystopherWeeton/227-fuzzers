; ModuleID = '../../base/threading/thread_checker_impl.cc'
source_filename = "../../base/threading/thread_checker_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::ThreadCheckerImpl" = type { %"class.base::Lock", %"class.std::__1::unique_ptr", %"class.base::PlatformThreadRef", %"class.base::TaskToken", %"class.base::SequenceToken" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::debug::StackTrace"* }
%"class.base::debug::StackTrace" = type { [250 x i8*], i64 }
%"class.base::PlatformThreadRef" = type { i64 }
%"class.base::TaskToken" = type { i32 }
%"class.base::SequenceToken" = type { i32 }

@_ZN12_GLOBAL__N_141g_log_thread_and_sequence_checker_bindingE = internal unnamed_addr global i1 false, align 1

@_ZN4base17ThreadCheckerImplC1Ev = hidden unnamed_addr alias void (%"class.base::ThreadCheckerImpl"*), void (%"class.base::ThreadCheckerImpl"*)* @_ZN4base17ThreadCheckerImplC2Ev
@_ZN4base17ThreadCheckerImplD1Ev = hidden unnamed_addr alias void (%"class.base::ThreadCheckerImpl"*), void (%"class.base::ThreadCheckerImpl"*)* @_ZN4base17ThreadCheckerImplD2Ev
@_ZN4base17ThreadCheckerImplC1EOS0_ = hidden unnamed_addr alias void (%"class.base::ThreadCheckerImpl"*, %"class.base::ThreadCheckerImpl"*), void (%"class.base::ThreadCheckerImpl"*, %"class.base::ThreadCheckerImpl"*)* @_ZN4base17ThreadCheckerImplC2EOS0_

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base17ThreadCheckerImpl18EnableStackLoggingEv() local_unnamed_addr #0 align 2 {
  store i1 true, i1* @_ZN12_GLOBAL__N_141g_log_thread_and_sequence_checker_bindingE, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base17ThreadCheckerImplC2Ev(%"class.base::ThreadCheckerImpl"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %2) #7
  %3 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 3, i32 0
  %5 = bitcast %"class.std::__1::unique_ptr"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  store i32 -1, i32* %4, align 4
  %6 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 4, i32 0
  store i32 -1, i32* %6, align 4
  %7 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %7) #7
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10, !prof !2

10:                                               ; preds = %1
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %2) #7
  br label %11

11:                                               ; preds = %1, %10
  tail call void @_ZNK4base17ThreadCheckerImpl26EnsureAssignedLockRequiredEv(%"class.base::ThreadCheckerImpl"* %0)
  %12 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %7) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base17ThreadCheckerImpl26EnsureAssignedLockRequiredEv(%"class.base::ThreadCheckerImpl"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 2, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %24

5:                                                ; preds = %1
  %6 = load i1, i1* @_ZN12_GLOBAL__N_141g_log_thread_and_sequence_checker_bindingE, align 1
  br i1 %6, label %7, label %18

7:                                                ; preds = %5
  %8 = tail call i8* @_Znwm(i64 2008) #8
  %9 = bitcast i8* %8 to %"class.base::debug::StackTrace"*
  tail call void @_ZN4base5debug10StackTraceC1Em(%"class.base::debug::StackTrace"* nonnull %9, i64 10) #7
  %10 = ptrtoint i8* %8 to i64
  %11 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.base::debug::StackTrace"*, %"class.base::debug::StackTrace"** %12, align 8
  %14 = bitcast %"class.std::__1::unique_ptr"* %11 to i64*
  store i64 %10, i64* %14, align 8
  %15 = icmp eq %"class.base::debug::StackTrace"* %13, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %7
  %17 = bitcast %"class.base::debug::StackTrace"* %13 to i8*
  tail call void @_ZdlPv(i8* %17) #8
  br label %18

18:                                               ; preds = %7, %16, %5
  %19 = tail call i64 @_ZN4base14PlatformThread10CurrentRefEv() #7
  store i64 %19, i64* %2, align 8
  %20 = tail call i32 @_ZN4base9TaskToken19GetForCurrentThreadEv() #7
  %21 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 3, i32 0
  store i32 %20, i32* %21, align 8
  %22 = tail call i32 @_ZN4base13SequenceToken19GetForCurrentThreadEv() #7
  %23 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 4, i32 0
  store i32 %22, i32* %23, align 4
  br label %24

24:                                               ; preds = %1, %18
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base17ThreadCheckerImplD2Ev(%"class.base::ThreadCheckerImpl"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.base::debug::StackTrace"*, %"class.base::debug::StackTrace"** %2, align 8
  store %"class.base::debug::StackTrace"* null, %"class.base::debug::StackTrace"** %2, align 8
  %4 = icmp eq %"class.base::debug::StackTrace"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.base::debug::StackTrace"* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #8
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %8) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base17ThreadCheckerImplC2EOS0_(%"class.base::ThreadCheckerImpl"*, %"class.base::ThreadCheckerImpl"* dereferenceable(64)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %3) #7
  %4 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::unique_ptr"* %4 to i64*
  %6 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 2, i32 0
  %7 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 3, i32 0
  %8 = bitcast %"class.std::__1::unique_ptr"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  store i32 -1, i32* %7, align 4
  %9 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 4, i32 0
  store i32 -1, i32* %9, align 4
  %10 = tail call zeroext i1 @_ZNK4base17ThreadCheckerImpl19CalledOnValidThreadEPNSt3__110unique_ptrINS_5debug10StackTraceENS1_14default_deleteIS4_EEEE(%"class.base::ThreadCheckerImpl"* %1, %"class.std::__1::unique_ptr"* null)
  %11 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %1, i64 0, i32 1
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.std::__1::unique_ptr"* %11 to i64*
  %14 = load i64, i64* %13, align 8
  store %"class.base::debug::StackTrace"* null, %"class.base::debug::StackTrace"** %12, align 8
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %4, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.base::debug::StackTrace"*, %"class.base::debug::StackTrace"** %15, align 8
  store i64 %14, i64* %5, align 8
  %17 = icmp eq %"class.base::debug::StackTrace"* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %2
  %19 = bitcast %"class.base::debug::StackTrace"* %16 to i8*
  tail call void @_ZdlPv(i8* %19) #8
  br label %20

20:                                               ; preds = %2, %18
  %21 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %1, i64 0, i32 2, i32 0
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %6, align 8
  %23 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %1, i64 0, i32 3, i32 0
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %7, align 8
  %25 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %1, i64 0, i32 4, i32 0
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %9, align 4
  store i64 0, i64* %21, align 8
  store i32 -1, i32* %23, align 8
  store i32 -1, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base17ThreadCheckerImpl19CalledOnValidThreadEPNSt3__110unique_ptrINS_5debug10StackTraceENS1_14default_deleteIS4_EEEE(%"class.base::ThreadCheckerImpl"*, %"class.std::__1::unique_ptr"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.base::TaskToken", align 4
  %4 = alloca %"class.base::SequenceToken", align 4
  %5 = tail call zeroext i1 @_ZN4base18ThreadLocalStorage16HasBeenDestroyedEv() #7
  %6 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %6) #7
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9, !prof !2

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %10) #7
  br label %11

11:                                               ; preds = %2, %9
  br i1 %5, label %46, label %12

12:                                               ; preds = %11
  tail call void @_ZNK4base17ThreadCheckerImpl26EnsureAssignedLockRequiredEv(%"class.base::ThreadCheckerImpl"* %0)
  %13 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 3
  %14 = bitcast %"class.base::TaskToken"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  %15 = tail call i32 @_ZN4base9TaskToken19GetForCurrentThreadEv() #7
  %16 = getelementptr inbounds %"class.base::TaskToken", %"class.base::TaskToken"* %3, i64 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = call zeroext i1 @_ZNK4base9TaskTokeneqERKS0_(%"class.base::TaskToken"* %13, %"class.base::TaskToken"* nonnull dereferenceable(4) %3) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  br i1 %17, label %86, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 4
  %20 = call zeroext i1 @_ZNK4base13SequenceToken7IsValidEv(%"class.base::SequenceToken"* %19) #7
  %21 = bitcast %"class.base::SequenceToken"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #7
  br i1 %20, label %22, label %45

22:                                               ; preds = %18
  %23 = call i32 @_ZN4base13SequenceToken19GetForCurrentThreadEv() #7
  %24 = getelementptr inbounds %"class.base::SequenceToken", %"class.base::SequenceToken"* %4, i64 0, i32 0
  store i32 %23, i32* %24, align 4
  %25 = call zeroext i1 @_ZNK4base13SequenceTokenneERKS0_(%"class.base::SequenceToken"* %19, %"class.base::SequenceToken"* nonnull dereferenceable(4) %4) #7
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = call zeroext i1 @_ZN4base22ThreadTaskRunnerHandle5IsSetEv() #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #7
  br i1 %27, label %65, label %29

28:                                               ; preds = %22
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #7
  br label %29

29:                                               ; preds = %26, %28
  %30 = icmp eq %"class.std::__1::unique_ptr"* %1, null
  br i1 %30, label %86, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %33 = load %"class.base::debug::StackTrace"*, %"class.base::debug::StackTrace"** %32, align 8
  %34 = icmp eq %"class.base::debug::StackTrace"* %33, null
  br i1 %34, label %86, label %35

35:                                               ; preds = %31
  %36 = call i8* @_Znwm(i64 2008) #8
  %37 = bitcast %"class.base::debug::StackTrace"* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %36, i8* nonnull align 8 %37, i64 2008, i1 false) #7
  %38 = ptrtoint i8* %36 to i64
  %39 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %40 = load %"class.base::debug::StackTrace"*, %"class.base::debug::StackTrace"** %39, align 8
  %41 = bitcast %"class.std::__1::unique_ptr"* %1 to i64*
  store i64 %38, i64* %41, align 8
  %42 = icmp eq %"class.base::debug::StackTrace"* %40, null
  br i1 %42, label %86, label %43

43:                                               ; preds = %35
  %44 = bitcast %"class.base::debug::StackTrace"* %40 to i8*
  call void @_ZdlPv(i8* %44) #8
  br label %86

45:                                               ; preds = %18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #7
  br label %65

46:                                               ; preds = %11
  %47 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 2, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %65

50:                                               ; preds = %46
  %51 = load i1, i1* @_ZN12_GLOBAL__N_141g_log_thread_and_sequence_checker_bindingE, align 1
  br i1 %51, label %52, label %63

52:                                               ; preds = %50
  %53 = tail call i8* @_Znwm(i64 2008) #8
  %54 = bitcast i8* %53 to %"class.base::debug::StackTrace"*
  tail call void @_ZN4base5debug10StackTraceC1Em(%"class.base::debug::StackTrace"* nonnull %54, i64 10) #7
  %55 = ptrtoint i8* %53 to i64
  %56 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 1
  %57 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %56, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.base::debug::StackTrace"*, %"class.base::debug::StackTrace"** %57, align 8
  %59 = bitcast %"class.std::__1::unique_ptr"* %56 to i64*
  store i64 %55, i64* %59, align 8
  %60 = icmp eq %"class.base::debug::StackTrace"* %58, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %52
  %62 = bitcast %"class.base::debug::StackTrace"* %58 to i8*
  tail call void @_ZdlPv(i8* %62) #8
  br label %63

63:                                               ; preds = %52, %61, %50
  %64 = tail call i64 @_ZN4base14PlatformThread10CurrentRefEv() #7
  store i64 %64, i64* %47, align 8
  br label %86

65:                                               ; preds = %26, %46, %45
  %66 = call i64 @_ZN4base14PlatformThread10CurrentRefEv() #7
  %67 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 2, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = icmp eq i64 %68, %66
  br i1 %69, label %86, label %70

70:                                               ; preds = %65
  %71 = icmp eq %"class.std::__1::unique_ptr"* %1, null
  br i1 %71, label %86, label %72

72:                                               ; preds = %70
  %73 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %74 = load %"class.base::debug::StackTrace"*, %"class.base::debug::StackTrace"** %73, align 8
  %75 = icmp eq %"class.base::debug::StackTrace"* %74, null
  br i1 %75, label %86, label %76

76:                                               ; preds = %72
  %77 = call i8* @_Znwm(i64 2008) #8
  %78 = bitcast %"class.base::debug::StackTrace"* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %77, i8* nonnull align 8 %78, i64 2008, i1 false) #7
  %79 = ptrtoint i8* %77 to i64
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.base::debug::StackTrace"*, %"class.base::debug::StackTrace"** %80, align 8
  %82 = bitcast %"class.std::__1::unique_ptr"* %1 to i64*
  store i64 %79, i64* %82, align 8
  %83 = icmp eq %"class.base::debug::StackTrace"* %81, null
  br i1 %83, label %86, label %84

84:                                               ; preds = %76
  %85 = bitcast %"class.base::debug::StackTrace"* %81 to i8*
  call void @_ZdlPv(i8* %85) #8
  br label %86

86:                                               ; preds = %31, %72, %65, %76, %84, %35, %43, %70, %29, %12, %63
  %87 = phi i1 [ true, %63 ], [ true, %12 ], [ false, %29 ], [ false, %31 ], [ false, %70 ], [ false, %72 ], [ true, %65 ], [ false, %43 ], [ false, %35 ], [ false, %84 ], [ false, %76 ]
  %88 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %6) #7
  ret i1 %87
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(64) %"class.base::ThreadCheckerImpl"* @_ZN4base17ThreadCheckerImplaSEOS0_(%"class.base::ThreadCheckerImpl"* returned, %"class.base::ThreadCheckerImpl"* dereferenceable(64)) local_unnamed_addr #1 align 2 {
  %3 = tail call zeroext i1 @_ZNK4base17ThreadCheckerImpl19CalledOnValidThreadEPNSt3__110unique_ptrINS_5debug10StackTraceENS1_14default_deleteIS4_EEEE(%"class.base::ThreadCheckerImpl"* %1, %"class.std::__1::unique_ptr"* null)
  %4 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %1, i64 0, i32 2, i32 0
  %5 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 2, i32 0
  %6 = load i64, i64* %4, align 8
  store i64 %6, i64* %5, align 8
  %7 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %1, i64 0, i32 3, i32 0
  %8 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 3, i32 0
  %9 = load i32, i32* %7, align 4
  store i32 %9, i32* %8, align 4
  %10 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %1, i64 0, i32 4, i32 0
  %11 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 4, i32 0
  %12 = load i32, i32* %10, align 4
  store i32 %12, i32* %11, align 4
  store i64 0, i64* %4, align 8
  store i32 -1, i32* %7, align 4
  store i32 -1, i32* %10, align 4
  ret %"class.base::ThreadCheckerImpl"* %0
}

declare zeroext i1 @_ZN4base18ThreadLocalStorage16HasBeenDestroyedEv() local_unnamed_addr #3

declare zeroext i1 @_ZNK4base9TaskTokeneqERKS0_(%"class.base::TaskToken"*, %"class.base::TaskToken"* dereferenceable(4)) local_unnamed_addr #3

declare i32 @_ZN4base9TaskToken19GetForCurrentThreadEv() local_unnamed_addr #3

declare zeroext i1 @_ZNK4base13SequenceToken7IsValidEv(%"class.base::SequenceToken"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK4base13SequenceTokenneERKS0_(%"class.base::SequenceToken"*, %"class.base::SequenceToken"* dereferenceable(4)) local_unnamed_addr #3

declare i32 @_ZN4base13SequenceToken19GetForCurrentThreadEv() local_unnamed_addr #3

declare zeroext i1 @_ZN4base22ThreadTaskRunnerHandle5IsSetEv() local_unnamed_addr #3

declare i64 @_ZN4base14PlatformThread10CurrentRefEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base17ThreadCheckerImpl16DetachFromThreadEv(%"class.base::ThreadCheckerImpl"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %2) #7
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %7, label %5, !prof !2

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %6) #7
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %"class.base::debug::StackTrace"*, %"class.base::debug::StackTrace"** %8, align 8
  store %"class.base::debug::StackTrace"* null, %"class.base::debug::StackTrace"** %8, align 8
  %10 = icmp eq %"class.base::debug::StackTrace"* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = bitcast %"class.base::debug::StackTrace"* %9 to i8*
  tail call void @_ZdlPv(i8* %12) #8
  br label %13

13:                                               ; preds = %7, %11
  %14 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 2, i32 0
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 3, i32 0
  store i32 -1, i32* %15, align 8
  %16 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 4, i32 0
  store i32 -1, i32* %16, align 4
  %17 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::debug::StackTrace"* @_ZNK4base17ThreadCheckerImpl10GetBoundAtEv(%"class.base::ThreadCheckerImpl"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %2) #7
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %7, label %5, !prof !2

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %6) #7
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.base::ThreadCheckerImpl", %"class.base::ThreadCheckerImpl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %"class.base::debug::StackTrace"*, %"class.base::debug::StackTrace"** %8, align 8
  %10 = icmp eq %"class.base::debug::StackTrace"* %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = tail call i8* @_Znwm(i64 2008) #8
  %13 = bitcast i8* %12 to %"class.base::debug::StackTrace"*
  %14 = bitcast %"class.base::debug::StackTrace"* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %12, i8* nonnull align 8 %14, i64 2008, i1 false) #7
  br label %15

15:                                               ; preds = %7, %11
  %16 = phi %"class.base::debug::StackTrace"* [ %13, %11 ], [ null, %7 ]
  %17 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %2) #7
  ret %"class.base::debug::StackTrace"* %16
}

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN4base5debug10StackTraceC1Em(%"class.base::debug::StackTrace"*, i64) unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
